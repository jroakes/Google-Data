US9311403B1 - Hashing techniques for data set similarity determination - Google Patents
Hashing techniques for data set similarity determination Download PDFInfo
- Publication number
- US9311403B1 US9311403B1 US13/162,061 US201113162061A US9311403B1 US 9311403 B1 US9311403 B1 US 9311403B1 US 201113162061 A US201113162061 A US 201113162061A US 9311403 B1 US9311403 B1 US 9311403B1
- Authority
- US
- United States
- Prior art keywords
- hash
- weighted
- bits
- hash value
- data sets
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/951—Indexing; Web crawling techniques
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/50—Information retrieval; Database structures therefor; File system structures therefor of still image data
- G06F16/58—Retrieval characterised by using metadata, e.g. metadata not derived from the content or metadata generated manually
- G06F16/583—Retrieval characterised by using metadata, e.g. metadata not derived from the content or metadata generated manually using metadata automatically derived from the content
- G06F16/5838—Retrieval characterised by using metadata, e.g. metadata not derived from the content or metadata generated manually using metadata automatically derived from the content using colour
-
- G06F17/30864—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/50—Information retrieval; Database structures therefor; File system structures therefor of still image data
- G06F16/58—Retrieval characterised by using metadata, e.g. metadata not derived from the content or metadata generated manually
- G06F16/583—Retrieval characterised by using metadata, e.g. metadata not derived from the content or metadata generated manually using metadata automatically derived from the content
Definitions
- Embodiments relate to hashing techniques for determining similarity between data sets.
- High-dimensional datasets present many mathematical challenges.
- One such challenge is that, in many cases, not all variables stored with a high-dimensional data set are important for understanding an underlying phenomenon. Thus, it is of interest in many applications to reduce dimensions of original data prior to any modeling of the data.
- Nearest neighbor algorithms can be used. Nearest neighbor determination schemes, such as locality sensitive hashing (LSH), have been proposed with the goal of approximating a similarity distance metric.
- LSH locality sensitive hashing
- Embodiments relate to hashing techniques used for determining similarity between data sets.
- Embodiments determine a weighted min-hash value that approximates a similarity distance between data sets. Furthermore, because embodiments can determine a number of bits in the weighted min-hash value, the embodiments allow dimensionality reduction by approximating the weighted min-hash value to a given accuracy in the smallest number of bits.
- a method embodiment includes initializing a random number generator with a weighted min-hash value as a seed, wherein the weighted min-hash value approximates a similarity distance between data sets.
- a number of bits in the weighted min-hash value is determined by uniformly sampling an integer bit value using the random number generator.
- a system embodiment includes a repository configured to store a plurality of data sets and a hash generator configured to generate weighted min-hash values from the data sets.
- the system further includes a similarity determiner configured to determine a similarity between the data sets.
- the hash generator further includes a feature extractor configured to extract a plurality of features from the data sets, a random number generator configured to generate a plurality of random numbers using a feature from the extracted features as a seed, and a hash value selector configured to uniformly sample an integer bit value to determine a number of bits in a weighted min-hash value.
- embodiments determine a weighted min-hash value that approximates a similarity distance between data sets.
- FIG. 1 illustrates a system for hashing and dimensionality reduction, according to an embodiment.
- FIG. 2 illustrates a hash generator, according to an embodiment.
- FIG. 3 is a flowchart illustrating an exemplary method to determine a weighted Jaccard similarity, according to an embodiment.
- FIG. 4 is a flowchart illustrating an exemplary method to compute a weighted min-hash of a vector, according to an embodiment.
- FIG. 5 is a diagram illustrating an exemplary running minimum sequence, according to an embodiment.
- FIG. 6 illustrates exemplary pseudo-code to compute a weighted min-hash value, according to an embodiment.
- FIG. 7 is a flowchart illustrating an exemplary method to determine a number of bits in a weighted min-hash value, according to an embodiment.
- FIG. 8 is a flowchart illustrating an exemplary method to determine a number of bits in a weighted min-hash value, according to another embodiment.
- FIG. 9 illustrates an exemplary pseudo-code to draw a uniform consistent sample, according to an embodiment.
- FIG. 10 illustrates an example computer useful for implementing components of the embodiments.
- Embodiments relate to hashing techniques for determining a similarity between data sets.
- Embodiments determine a weighted min-hash value that approximates a similarity distance between data sets. Furthermore, because embodiments can determine a number of bits in the weighted min-hash value, the embodiments allow dimensionality reduction by approximating the weighted min-hash value to a given accuracy in the smallest number of bits.
- FIG. 1 is a diagram of a system 100 for hashing of data sets and dimensionality reduction. While the following is described in terms of data that includes imagery and text, the embodiments are not limited to these types of data. Embodiments can be used in conjunction with any other form of data such as video and audio data. For example, embodiments can be used in any system having generally the structure of FIG. 1 , or that would benefit from the operation, methods and functions as described herein.
- feature as used herein can be any form of feature or feature descriptor used to represent images, text, video, audio and/or their characteristics.
- System 100 includes similarity determiner 130 , hash generator 120 and repository 104 .
- Repository 104 includes a plurality of data sets. Such data sets can include, but are not limited to, digital images, text, video and other forms of data. Such data can be multi-dimensional or even single dimensional data. Data sets in repository 104 can also include histograms used to represent documents (histograms of word terms) or image statistics (histograms of color or texture).
- hash generator 120 generates hash values using the data sets present in repository 104 .
- similarity determiner 130 determines a similarity (e.g. weighted Jaccard similarity) between data sets present in repository 104 .
- hash generator 120 further includes feature extractor 210 , random number generator 220 and hash value selector 230 . The operation of hash generator 120 is described further below.
- hash generator 120 determines a weighted min-hash value.
- a weighted min-hash value represents a similarity distance approximation between data sets stored in repository 104 .
- similarity determiner 130 determines a weighted Jaccard similarity.
- Jaccard similarity is known to those skilled in the art and is used to evaluate similarity between two data sets, such as text documents represented as groups of words.
- a Jaccard similarity of two data sets is defined as the ratio of the size of the intersection of the data sets to the size of their union.
- a Jaccard similarity ‘J(u,v)’ can be represented as:
- J ⁇ ( u , v ) ⁇ F ⁇ min ⁇ ( u F , v F ) ⁇ F ⁇ max ⁇ ( u F , v F )
- each of u F and v F is 0 or 1, indicating feature F's membership in a data set.
- u F and v F are sparse binary vectors that can be sized as needed and may be indexed by arbitrarily large non-negative integers.
- a Hamming distance of the hash vectors reflects the Jaccard similarity of the sets. Being able to find such a mapping makes it possible not only to store the data sets efficiently but also to perform efficient retrieval.
- u F ⁇ 0, 1 ⁇ (i.e., u F is no longer limited to 0 and 1) and allowing feature weights to be any non-negative numbers
- embodiments compute J(u,v) for weighted sets, such as text documents where the weight of a word can be a function of its count and inverse document frequency, or histograms of color and texture in images.
- FIG. 3 is a flowchart illustrating an exemplary determination of weighted Jaccard similarity according to an embodiment.
- Method 300 begins with determining a size of an intersection of a plurality of data sets (stage 302 ). As an example, for sparse binary vectors, similarity determiner 130 determines ⁇ F min(u F ,v F ).
- stage 304 a size of a union of the plurality of data sets is determined.
- similarity determiner 130 determines ⁇ F min(u F ,v F )
- stages 302 and 304 may be executed in parallel.
- a ratio of the size of the intersection to the size of the union is determined, where the ratio indicates a similarity between the data sets and wherein elements in the data sets are weighted using positive weights.
- the present embodiments, and similarity determiner 130 in particular, determine a weighted Jaccard similarity of data sets using arbitrary non-negative weights.
- hash generator 120 determines a weighted min-hash value that is based on and follows the weighted Jaccard similarity discussed above.
- a fraction of the hash values that collide (or are similar) between u and v approaches J(u,v) as the number of hash values increases.
- embodiments allow dimensionality reduction by approximating the weighted min-hash value to a given accuracy in the smallest number of bits.
- embodiments are also suitable for sparse binary vectors and widely varying feature weights.
- Embodiments can also be used for near neighbor retrieval because weighted Jaccard similarity can be a monotonic function of L1 similarity distance.
- the L1 similarity distance is known to those skilled in the art and is often used for computing similarity between color images and other data.
- hash generator 120 is initialized by drawing a random number r [F,k] for every possible combination of feature F and index k ⁇ 1.
- feature extractor 210 considers each feature F with u F >0 (i.e., vector u of weights >0) and initializes random number generator 220 using F as a seed value.
- Random number generator 220 once initialized, generates u F random numbers r [F,1] , . . . , r [F,uF] .
- Hash value selector 230 selects an output weighted min-hash pair (F,k) for which r [F,k] is minimized.
- FIG. 4 is a flowchart illustrating an exemplary method to compute a weighted min-hash of a vector u that represents a sparse binary vector of a data set, according to an embodiment.
- Method 400 begins with determining a feature in a data set (stage 402 ).
- feature extractor 210 determines a feature F with u F >0.
- a random number generator is initialized using the determined feature as a seed.
- hash generator 120 initializes random number generator 220 using feature F as seed.
- random number generator 220 once initialized, generates u F random numbers r [F,1] , . . . , r [F,uF] .
- stage 408 a plurality of features is outputted from the data set, such that each feature corresponds to a minimal generated random number value.
- hash value selector 230 selects an output pair (F,k) for which random number value r [F,k] is minimized.
- embodiments determine a weighted min-hash value. Furthermore, embodiments can also determine weighted min-hash values using arbitrary non-negative weights and thus can be used for normalized (and otherwise transformed) histograms, weighted words, and a wide variety of other data.
- weighted Jaccard similarity is used to determine weighted min-hash values.
- hash generator 120 approximates a weighted Jaccard similarity by dividing all feature weights by an arbitrarily small amount ‘ ⁇ ’, discarding the fractional part, and then determining the weighted min-hash value, using the approximated Jaccard similarity, as discussed above.
- ⁇ can tend to zero
- quantized weights i.e., feature weights divided by ⁇
- the “O” notation is known to those skilled in the art and is generally used to describe the performance or complexity of an algorithm.
- O(1/ ⁇ ) is used to represent the complexity of the hash computation.
- ⁇ can tend to zero.
- O(1/ ⁇ ) complexity increases.
- embodiments can avoid such O(1/ ⁇ ) complexity by utilizing a running minimum sequence of random number values generated by random number generator 220 .
- random number generator 220 draws random number samples r 1 , . . . , r ⁇ u/ ⁇ , and determines a minimum random number value.
- Embodiments consider the sequence of random numbers r 1 , r 2 , . . . r ⁇ u/ ⁇ , and for each u, find M(u) as the minimum of the first ⁇ u/ ⁇ elements of the sequence.
- M(u) is a non-increasing stepwise-constant function and its value may drop at values u such that r ⁇ u/ ⁇ min 1 ⁇ k ⁇ u/ ⁇ r k .
- embodiments can sample from the sequence of discontinuities of M(u) using a running minimum sequence. By efficiently sampling the running minimum sequence, embodiments avoid the O(1/ ⁇ ) complexity to determine a weighted Jaccard similarity. Because the complexity of weighted Jaccard similarity computation is reduced, embodiments can more efficiently determine a weighted min-hash value.
- X i ,M i are the points where M(u) decreases and thus experiences a discontinuity.
- Embodiments sort the sequence ( X i ,M i ) so that X i increases, and therefore M i decreases. It is to be appreciated that index i need not be a positive value.
- An exemplary running minimum sequence is described further below with respect to FIG. 5 .
- hash generator 120 considers a fixed value Was a base feature weight, and chooses the sequence element:
- ⁇ X 0 , M 0 ⁇ ⁇ ( arg ⁇ ⁇ min 1 ⁇ k ⁇ ⁇ W / ⁇ ⁇ ⁇ r k ) ⁇ ⁇ , min 1 ⁇ k ⁇ ⁇ W / ⁇ ⁇ ⁇ r k ⁇
- X 0 ,M 0 can be the rightmost such discontinuity point for which X 0 W.
- X 0 ,M 0 serves as the starting point of a sampling process to enumerate the points where M(u) experiences a discontinuity.
- embodiments avoid sampling a large number of random number (r k ) values.
- R represents a running minimum sequence and each element of R represents the minimum of a prefix of random number sequence ‘r k ’.
- FIG. 5 shows an example of a running minimum sequence.
- FIG. 5 illustrates a scenario where a running minimum sequence is sampled for one feature.
- the y coordinates of the diamond-shaped markers are independent exponential variables r k with an inter-variable rate of change of ⁇ .
- the x coordinates of r k are spaced ⁇ apart, so that ⁇ u/ ⁇ variables are sampled for 0 ⁇ x ⁇ u.
- M(u) is the running minimum of r k values
- X i ,M i are the points where M(u) decreases.
- X 0 ,M 0 is the rightmost such discontinuity point for which X 0 ⁇ W, and serves as the starting point of the sampling process.
- the sampling process proceeds forward or backward over the running minimum sequence to find, for a weight u, the largest i for which X i ⁇ u.
- hash generator 120 initializes random number generator 220 using F as the seed. Given the fixed base weight W F corresponding to F, hash generator 120 samples the running minimum sequence. In an embodiment, hash generator 120 samples the running minimum sequence forward if u F >W F and backward if otherwise. Hash generator 120 then determines the last element X i ,M i in the sequence for which Xi ⁇ u F . As an example, hash generator 120 denotes this index i as i* F and the value M i as M* F . Hash value selector 230 then identifies a feature F with the minimum value of M* F and determines the value of the weighted min-hash as the pair (F, i* F ).
- each weighted min-hash function can be thought of as an independent sample from a family H of functions, parameterized by hash index h.
- FIG. 6 illustrates an exemplary pseudo-code to compute a weighted min-hash value, according to an embodiment discussed above. It is to be appreciated that the exemplary pseudo-code is disclosed for the purposes of illustration and is not intended to limit the embodiments.
- hash value generator 120 initializes random number generator 220 using (h,WMH h (u)) as a seed.
- Hash value selector 230 samples an integer b-bit value WMH h (b) uniformly from ⁇ 0 . . . 2 b ⁇ 1 ⁇ to determine a b bit weighted min-hash value.
- FIG. 7 is a flowchart illustrating an exemplary determination of a number of bits of a weighted min-hash value, according to an embodiment.
- Method 700 begins with initializing a random number generator with a weighted min-hash value as a seed (stage 702 ).
- a weighted min-hash value as a seed.
- hash value generator 120 initializes random number generator 220 using (h,WMH h (u)) as a seed.
- an integer b-bit value is sampled by the random number generator initialized in stage 702 .
- hash value selector 230 samples an integer b-bit value WMH h (b) uniformly from ⁇ 0 . . . 2 b ⁇ 1 ⁇ to determine a b bit weighted min-hash value that satisfies a given weighted min-hash accuracy in a smallest number of bits.
- hash value selector 230 varies the number of bits determined in stage 704 to improve a weighted min-hash accuracy. Because the weighted min-hash value represents a similarity distance approximation between data sets, the similarity distance approximation is thus improved.
- Embodiments enable a dimension reduction method that approximates ⁇ u ⁇ v ⁇ 1 to a given accuracy in the smallest number of bits.
- this accuracy depends not only on ⁇ u ⁇ v ⁇ 1 but also on ⁇ u ⁇ 1 + ⁇ v ⁇ 1 .
- embodiments are able to perform dimensionality reduction with respect to b for different values of ⁇ u ⁇ 1 + ⁇ v ⁇ 1 . In this way, for u and v which are a given similarity distance apart, embodiments can use fewer bits for a given quality of L1 approximation.
- hash value selector 230 selects a hash subset associated with the highest similarity distance approximation.
- a hash subset is selected in a manner that not only performs well on training data, but also on all other real-world data sets.
- hash value selector 230 selects hash subsets using a randomized hash selection procedure. At each stage, hash value selector 230 randomly draws a subset of hashes from the weighted min-hash values, and adds the subsets with associated with the highest similarity distance approximation to a set of selected hashes. Embodiments perform the hash selection using different sizes of random subsets, and select an optimal subset size using cross-validation. While embodiments discussed above operate in weight dependent time (i.e., computational time may vary based on feature weight), embodiments can also operate in deterministic (or non-random) constant time. An embodiment operating in deterministic constant time is discussed below.
- Embodiments can operate in deterministic constant time per non-zero weight (e.g., feature weight), improving on conventional approaches that utilize an expected constant time.
- Samples e.g. samples drawn by random number generator 220
- Samples can be used as a weighted min-hash value for efficient retrieval and compression under a Jaccard or l1 metric. It is to be appreciated that the embodiments can be applied to any consistent weighted sampling scheme and are not limited to weighted min-hash.
- Conventional consistent sampling algorithms which operate in expected constant time per non-zero weight can require numerous optimizations to perform efficiently.
- embodiments operate in deterministic constant time per non-zero weight.
- This approach is simpler to implement, and has the added advantage of using a fixed number of random values (e.g., 3 random numbers per index k) for sampling. Because embodiments utilize a fixed number of random values, given a possible set of indices, all random values can be generated offline. In this way, embodiments improve sampling performance by pre-computing random values needed for sampling. Furthermore, by randomly mapping hashes to b-bit representations, embodiments provide simpler estimators of the distances between inputs, given Hamming distances between their hash vectors.
- Embodiments utilize a scheme to represent each hash using a given number ‘b’ of bits where ‘b’ is based on a tradeoff between the number of hashes and their accuracy.
- the method discussed below applies to any hashing scheme and is not limited to weighted min-hash.
- the method discussed below with respect to FIG. 8 allows use of simple analysis and estimators of distances given a number of hash collisions while operating in deterministic constant time.
- FIG. 8 is a flowchart illustrating an exemplary determination of a number of bits of a weighted min-hash value, according to an embodiment that operates in deterministic constant time.
- Method 800 begins with determining a number of bits to sample for a weighted min-hash value (stage 802 ).
- a number of bits, b are determined or selected based on a random number generation and/or a selection based on prior data and/or experience.
- a random number generator is initialized with the weighted min-hash value as a seed, wherein the weighted min-hash value approximates a similarity distance between two or more data sets.
- a hash value WMH h (S) which may substantially correspond to the weighted min-hash value WMH h (u) referenced above, can be randomly mapped to a b-bit value.
- random number generator 220 can be initialized using (h, WMH h (S)) as the seed.
- an integer bit value is uniformly sampled from numbers generated by the random number generator, wherein the sampled integer bit value comprises the determined number of bits to sample.
- hash value selector 230 uniformly samples an integer b-bit value WMH h (b) is sampled uniformly from the generated set (e.g., 0 to 2 b ⁇ 1).
- an optimal number of bits to sample is determined based on distance estimate variances of a total number of bits to sample.
- An as example, hash value selector 230 varies the number of bits determined in stage 808 to improve a weighted min-hash accuracy. Because the weighted min-hash value represents a similarity distance approximation between data sets, the similarity distance approximation is thus improved.
- the number of bits used to represent each weighted min-hash WMH h which may be similar to the weighted hash WMH h referenced above, can be varied.
- the number of ‘b’ bits used to represent a hash value correspond to how much storage space is necessary, required and/or otherwise available to store the hash values, where a greater number of b-bits may consume or require more space and/or other resources. While increasing the number of b-bits used to store hash values may consume more resources, a larger number of b-bits may also increase the accuracy of similarity measures and increase processing time required to determine similarity (and/or differences) between data sets.
- Embodiments determine a number of b-bits to use that provide a requisite or desired level of accuracy while consuming a minimal amount of space and resources.
- One approach to determine the number of b-bits to use is to use a standard compression technique to average the number of bits per hash, which can be, roughly, the entropy of the hash.
- This approach can be expensive to implement as distance computations between hashes increase and as each hash needs to be decompressed on the fly. Reducing the number of bits per hash (as compared to the number of bits per hash used in the standard compression technique) can allow the use of more hashes. Though this may result in some spurious hash collisions, the additional collisions would not be enough to affect distance estimates.
- each hash is represented given a number b bits, where b trades off between the number of hashes and their accuracy. That is, for example, a fewer number of bits may yield a reduced level of accuracy.
- a hash value WMH h (S) which may substantially correspond to the weighted min-hash value WMH h (u) referenced above, can be randomly mapped to a b-bit value.
- random number generator 220 can be initialized using (h, WMH h (S)) as the seed. Then for example, an integer b-bit value WMH h (b) is sampled uniformly from the generated set (e.g., 0 to 2 b ⁇ 1).
- HashSim (b) H the Hamming similarity of H b-bit hashes
- the distance estimate variance computed above allows the optimal number of bits b to represent each hash.
- b can be chosen empirically to obtain the most accurate estimate ( ⁇ dot over (d) ⁇ ) for the vector pairs of interest.
- FIG. 10 illustrates an exemplary pseudo-code to draw a uniform consistent sample, according to an embodiment discussed above. It is to be appreciated that the exemplary pseudo-code is disclosed for the purposes of illustration and is not intended to limit the embodiments.
- the resulting (k*, y*) (or, equivalently, (k*,t k *)) can be used as a weighted min-hash, where the probability of hash collision for inputs S and T equals the Jaccard similarity J(S,T).
- system and components of embodiments described herein are implemented using well known computers, such as example computer 1002 shown in FIG. 10 .
- hash generator 120 or similarity determiner 130 can be implemented using computer(s) 1002 .
- Computer 1002 can be any commercially available and well known computer capable of performing the functions described herein, such as computers available from International Business Machines, Apple, Sun, HP, Dell, Compaq, Cray, etc.
- Computer 1002 includes one or more processors (also called central processing units, or CPUs), such as a processor 1006 .
- processors also called central processing units, or CPUs
- Processor 1006 is connected to a communication infrastructure 1004 .
- Computer 1002 also includes a main or primary memory 1008 , such as random access memory (RAM).
- Primary memory 1008 has stored therein control logic 1068 A (computer software), and data.
- Computer 1002 also includes one or more secondary storage devices 1010 .
- Secondary storage devices 1010 include, for example, a hard disk drive 1012 and/or a removable storage device or drive 1014 , as well as other types of storage devices, such as memory cards and memory sticks.
- Removable storage drive 1014 represents, for example, a floppy disk drive, a magnetic tape drive, a compact disk drive, an optical storage device, tape backup, etc.
- Removable storage drive 1014 interacts with a removable storage unit 1016 .
- Removable storage unit 1016 includes a computer useable or readable storage medium 1064 A having stored therein computer software 1068 B (control logic) and/or data.
- Removable storage unit 1016 represents a floppy disk, magnetic tape, compact disk, DVD, optical storage disk, or any other computer data storage device.
- Removable storage drive 1014 reads from and/or writes to removable storage unit 1016 in a well-known manner.
- Computer 1002 also includes input/output/display devices 1022 , such as monitors, keyboards, pointing devices, Bluetooth devices etc.
- input/output/display devices 1022 such as monitors, keyboards, pointing devices, Bluetooth devices etc.
- Computer 1002 further includes a communication or network interface 1018 .
- Network interface 1018 enables computer 1002 to communicate with remote devices.
- network interface 1018 allows computer 1002 to communicate over communication networks or mediums 1064 (representing a form of a computer useable or readable medium), such as LANs, WANs, the Internet, etc.
- Network interface 1018 may interface with remote sites or networks via wired or wireless connections.
- Control logic 1068 may be transmitted to and from computer 1002 via communication medium 1064 .
- Any tangible apparatus or article of manufacture including a computer useable or readable medium having control logic (software) stored therein is referred to herein as a computer program product or program storage device.
- Embodiments can work with software, hardware, and/or operating system implementations other than those described herein. Any software, hardware, and operating system implementations suitable for performing the functions described herein can be used. Embodiments are applicable to both a client and a server or a combination of both.
Abstract
Description
(u F +,u F−)=(max(0,u F −m F),max(0,m F −u F))
Pr[WMH h (b)(S)=WMH h (b)(T)]=J+(1−J)×2−b =J (b)
Claims (13)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/162,061 US9311403B1 (en) | 2010-06-16 | 2011-06-16 | Hashing techniques for data set similarity determination |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US35538910P | 2010-06-16 | 2010-06-16 | |
US13/162,061 US9311403B1 (en) | 2010-06-16 | 2011-06-16 | Hashing techniques for data set similarity determination |
Publications (1)
Publication Number | Publication Date |
---|---|
US9311403B1 true US9311403B1 (en) | 2016-04-12 |
Family
ID=55643217
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/162,061 Active 2032-12-30 US9311403B1 (en) | 2010-06-16 | 2011-06-16 | Hashing techniques for data set similarity determination |
Country Status (1)
Country | Link |
---|---|
US (1) | US9311403B1 (en) |
Cited By (13)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20150278634A1 (en) * | 2014-03-31 | 2015-10-01 | Canon Kabushiki Kaisha | Information processing apparatus and information processing method |
CN107133343A (en) * | 2017-05-19 | 2017-09-05 | 哈工大大数据产业有限公司 | Big data abnormal state detection method and device based on time series approximate match |
US9942032B1 (en) * | 2015-09-30 | 2018-04-10 | Symantec Corporation | Systems and methods for securely detecting data similarities |
CN107943965A (en) * | 2017-11-27 | 2018-04-20 | 福建中金在线信息科技有限公司 | Similar article search method and device |
CN109801427A (en) * | 2019-01-28 | 2019-05-24 | 深圳市网心科技有限公司 | A kind of random number preparation method, device, system and storage medium |
US20200019814A1 (en) * | 2016-10-31 | 2020-01-16 | salesforce.com,inc. | Jaccard similarity estimation of weighted samples: scaling and randomized rounding sample selection with circular smearing |
WO2020031759A1 (en) * | 2018-08-07 | 2020-02-13 | ソニー株式会社 | Sensor data processing apparatus, sensor data processing method, sensor device, and information processing apparatus |
CN111444325A (en) * | 2020-03-30 | 2020-07-24 | 湖南工业大学 | Method for measuring document similarity by position coding single random permutation hash |
US11012425B2 (en) * | 2018-12-28 | 2021-05-18 | Micron Technology, Inc. | Replay protection nonce generation |
US11182437B2 (en) * | 2017-10-26 | 2021-11-23 | International Business Machines Corporation | Hybrid processing of disjunctive and conjunctive conditions of a search query for a similarity search |
US20220029836A1 (en) * | 2018-11-26 | 2022-01-27 | Kansas State University Research Foundation | Puf-ipa: a puf-based identity preserving lightweight authentication protocol using binary string shuffling |
US11269840B2 (en) | 2018-09-06 | 2022-03-08 | Gracenote, Inc. | Methods and apparatus for efficient media indexing |
US11520610B2 (en) * | 2017-05-18 | 2022-12-06 | Peloton Interactive Inc. | Crowdsourced on-boarding of digital assistant operations |
Citations (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20040260694A1 (en) * | 2003-06-20 | 2004-12-23 | Microsoft Corporation | Efficient fuzzy match for evaluating data records |
US20070038659A1 (en) * | 2005-08-15 | 2007-02-15 | Google, Inc. | Scalable user clustering based on set similarity |
US20090043797A1 (en) * | 2007-07-27 | 2009-02-12 | Sparkip, Inc. | System And Methods For Clustering Large Database of Documents |
US20090192980A1 (en) * | 2008-01-30 | 2009-07-30 | International Business Machines Corporation | Method for Estimating the Number of Distinct Values in a Partitioned Dataset |
US20100023506A1 (en) * | 2008-07-22 | 2010-01-28 | Yahoo! Inc. | Augmenting online content with additional content relevant to user interests |
US20100223336A1 (en) * | 2009-02-27 | 2010-09-02 | International Business Machines Corporation | Method and system for user information processing and resource recommendation in a network environment |
US8527516B1 (en) * | 2011-02-25 | 2013-09-03 | Google Inc. | Identifying similar digital text volumes |
US20140344195A1 (en) * | 2013-05-20 | 2014-11-20 | Southern Methodist University | System and method for machine learning and classifying data |
US20150120720A1 (en) * | 2012-06-22 | 2015-04-30 | Krishna Kishore Dhara | Method and system of identifying relevant content snippets that include additional information |
US9159327B1 (en) * | 2012-12-20 | 2015-10-13 | Google Inc. | System and method for adding pitch shift resistance to an audio fingerprint |
-
2011
- 2011-06-16 US US13/162,061 patent/US9311403B1/en active Active
Patent Citations (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20040260694A1 (en) * | 2003-06-20 | 2004-12-23 | Microsoft Corporation | Efficient fuzzy match for evaluating data records |
US20070038659A1 (en) * | 2005-08-15 | 2007-02-15 | Google, Inc. | Scalable user clustering based on set similarity |
US20090043797A1 (en) * | 2007-07-27 | 2009-02-12 | Sparkip, Inc. | System And Methods For Clustering Large Database of Documents |
US20090192980A1 (en) * | 2008-01-30 | 2009-07-30 | International Business Machines Corporation | Method for Estimating the Number of Distinct Values in a Partitioned Dataset |
US20100023506A1 (en) * | 2008-07-22 | 2010-01-28 | Yahoo! Inc. | Augmenting online content with additional content relevant to user interests |
US20100223336A1 (en) * | 2009-02-27 | 2010-09-02 | International Business Machines Corporation | Method and system for user information processing and resource recommendation in a network environment |
US8527516B1 (en) * | 2011-02-25 | 2013-09-03 | Google Inc. | Identifying similar digital text volumes |
US20150120720A1 (en) * | 2012-06-22 | 2015-04-30 | Krishna Kishore Dhara | Method and system of identifying relevant content snippets that include additional information |
US9159327B1 (en) * | 2012-12-20 | 2015-10-13 | Google Inc. | System and method for adding pitch shift resistance to an audio fingerprint |
US20140344195A1 (en) * | 2013-05-20 | 2014-11-20 | Southern Methodist University | System and method for machine learning and classifying data |
Non-Patent Citations (18)
Title |
---|
Andoni, A. and Indyk P., "Near-optimal hashing algorithms for approximate nearest neighbor in high dimensions," FOCS '06: Proceedings of the 47th Annual IEEE Symposium on Foundations of Computer Science, pp. 459-468, Association for Computing Machinery, United States (2006). |
Broder, A.Z., et al., "Min-wise independent permutations," Journal of Computer System Sciences, 60 (3):630-659, Academic Press, United States (2000). |
Charikar ("Similarity Estimation Techniques from Rounding Algorithms"; STOC '02: Proceedings of the thirty-fourth annual ACM symposium on Theory of computing, pp. 380-388, Association for Computing Machinery, United States (2002)). * |
Charikar, M. S., "Similarity estimation techniques from rounding algorithms,"0 STOC '02: Proceedings of the thirty-fourth annual ACM symposium on Theory of computing, pp. 380-388, Association for Computing Machinery, United States (2002). |
Chum, O., et al., "Near duplicate image detection: min-hash and tf-idf weighting," in Proceedings of the British Machine Vision Conference, pp. 50.1-50.10, BVMA Press, United Kingdom (2008). |
Chum, O., et al., ("Near duplicate image detection: min-hash and tf-idf weighting," in Proceedings of the British Machine Vision Conference, pp. 50.1-50.10, BVMA Press, United Kingdom (2008)). * |
Chum, O., et al., ("Near duplicate image detection: rain-hash and tf-idf weighting," in Proceedings of the British Machine Vision Conference, pp. 50.1-50.10, BVMA Press, United Kingdom (2008)). * |
Datar, M., et al., "Locality-sensitive hashing scheme based on p-stable distributions," SCG '04: Proceedings of the twentieth annual symposium on Computational geometry, pp. 253-262, Association for Computing Machinery, United States (2004). |
Indyk, P. and Motwani, R., "Approximate nearest neighbors: towards removing the curse of dimensionality," STOC '98: Proceedings of the thirtieth annual ACM symposium on Theory of computing, pp. 604-613, Association for Computing Machinery, United States (1998). |
Ioffe, S., "Improved Consistent Sampling, Weighted Minhash and L1 Sketching," (ICDM), 2010 IEEE 10th International Conference on Data Mining (ICDM), pp. 246-255, Conference Publishing Services, United States (2010). |
Kleinberg et al. ( "Approximation algorithms for classification problems with pairwise relationships: Metric labeling and markov random fields," in FOCS '99: Proceedings of the 40th Annual Symposium on Foundations of Computer Science, p. 14, Association for Computing Machinery, United States (1999)). * |
Kleinberg, J. and Tardos, E., "Approximation algorithms for classification problems with pairwise relationships: Metric labeling and markov random fields," in FOCS '99: Proceedings of the 40th Annual Symposium on Foundations of Computer Science, p. 14, Association for Computing Machinery, United States (1999). |
Li, P., and König, C., "b-Bit Minwise Hashing," in World Wide Web Conference 2010, International World Wide Web Conference Committee, United States (2010). |
Li, P., et al., "Nonlinear Estimators and Tail Bounds for Dimension Reduction in 11 Using Cauchy Random Projections," Journal of Machine Learning Research 8:2497-2532, Microtome Publishing, United States (2007). |
Manasse, M., et al., "Consistent weighted sampling," Microsoft Research TechReport. MSR-TR-2010-73, Microsoft Research, United States (2008). |
Marsaglia, G., and Tsang, W. W., "The Ziggurat Method for Generating Random Variables," Journal of Statistical Software 5(8):1-7, American Statistical Association, United States (2000). |
Salakhutdinov, R. and Hinton, G., "Semantic hashing," IRGM 2007 workshop at the SIGIR 2007 conference, 8 pages, Association for Computing Machinery, United States (2007). |
Weiss, Y., et al., "Spectral hashing," Proceedings of the Twenty-Second Annual Conference on Neural Information Processing Systems, Curran Associates, Inc., United States (2008). |
Cited By (24)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20150278634A1 (en) * | 2014-03-31 | 2015-10-01 | Canon Kabushiki Kaisha | Information processing apparatus and information processing method |
US10013628B2 (en) * | 2014-03-31 | 2018-07-03 | Canon Kabushiki Ksiaha | Information processing apparatus and information processing method |
US9942032B1 (en) * | 2015-09-30 | 2018-04-10 | Symantec Corporation | Systems and methods for securely detecting data similarities |
US11615261B2 (en) * | 2016-10-31 | 2023-03-28 | Salesforce, Inc. | Jaccard similarity estimation of weighted samples: scaling and randomized rounding sample selection with circular smearing |
US20200019814A1 (en) * | 2016-10-31 | 2020-01-16 | salesforce.com,inc. | Jaccard similarity estimation of weighted samples: scaling and randomized rounding sample selection with circular smearing |
US11520610B2 (en) * | 2017-05-18 | 2022-12-06 | Peloton Interactive Inc. | Crowdsourced on-boarding of digital assistant operations |
CN107133343A (en) * | 2017-05-19 | 2017-09-05 | 哈工大大数据产业有限公司 | Big data abnormal state detection method and device based on time series approximate match |
CN107133343B (en) * | 2017-05-19 | 2018-04-13 | 哈工大大数据产业有限公司 | Big data abnormal state detection method and device based on time series approximate match |
US11182437B2 (en) * | 2017-10-26 | 2021-11-23 | International Business Machines Corporation | Hybrid processing of disjunctive and conjunctive conditions of a search query for a similarity search |
US11182438B2 (en) * | 2017-10-26 | 2021-11-23 | International Business Machines Corporation | Hybrid processing of disjunctive and conjunctive conditions of a search query for a similarity search |
CN107943965A (en) * | 2017-11-27 | 2018-04-20 | 福建中金在线信息科技有限公司 | Similar article search method and device |
US11523299B2 (en) | 2018-08-07 | 2022-12-06 | Sony Corporation | Sensor data processing apparatus, sensor data processing method, sensor device, and information processing apparatus |
WO2020031759A1 (en) * | 2018-08-07 | 2020-02-13 | ソニー株式会社 | Sensor data processing apparatus, sensor data processing method, sensor device, and information processing apparatus |
US11269840B2 (en) | 2018-09-06 | 2022-03-08 | Gracenote, Inc. | Methods and apparatus for efficient media indexing |
US11874814B2 (en) | 2018-09-06 | 2024-01-16 | Gracenote, Inc. | Methods and apparatus for efficient media indexing |
US20220029836A1 (en) * | 2018-11-26 | 2022-01-27 | Kansas State University Research Foundation | Puf-ipa: a puf-based identity preserving lightweight authentication protocol using binary string shuffling |
US11700136B2 (en) * | 2018-11-26 | 2023-07-11 | Kansas State University Research Foundation | PUF-IPA: a PUF-based identity preserving lightweight authentication protocol using binary string shuffling |
CN113383321B (en) * | 2018-12-28 | 2022-06-14 | 美光科技公司 | Replay protection temporary random number generation |
CN113383321A (en) * | 2018-12-28 | 2021-09-10 | 美光科技公司 | Replay protection temporary random number generation |
US11558359B2 (en) | 2018-12-28 | 2023-01-17 | Micron Technology, Inc. | Replay protection nonce generation |
US11012425B2 (en) * | 2018-12-28 | 2021-05-18 | Micron Technology, Inc. | Replay protection nonce generation |
CN109801427A (en) * | 2019-01-28 | 2019-05-24 | 深圳市网心科技有限公司 | A kind of random number preparation method, device, system and storage medium |
CN111444325A (en) * | 2020-03-30 | 2020-07-24 | 湖南工业大学 | Method for measuring document similarity by position coding single random permutation hash |
CN111444325B (en) * | 2020-03-30 | 2023-06-20 | 湖南工业大学 | Method for measuring document similarity by position coding single random replacement hash |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9311403B1 (en) | Hashing techniques for data set similarity determination | |
US8542869B2 (en) | Projection based hashing that balances robustness and sensitivity of media fingerprints | |
Ioffe | Improved consistent sampling, weighted minhash and l1 sketching | |
Andoni et al. | Approximating edit distance in near-linear time | |
US8571306B2 (en) | Coding of feature location information | |
EP2638701B1 (en) | Vector transformation for indexing, similarity search and classification | |
JP5950864B2 (en) | A method for representing images using quantized embedding of scale-invariant image features | |
US8428397B1 (en) | Systems and methods for large scale, high-dimensional searches | |
US8908978B2 (en) | Signature representation of data having high dimensionality | |
US8630482B2 (en) | Feature conversion device, similar information search apparatus provided therewith, coding parameter generation method, and computer program | |
EP4121907A1 (en) | Supervised contrastive learning with multiple positive examples | |
CN109508374B (en) | Text data semi-supervised clustering method based on genetic algorithm | |
Nelson et al. | On deterministic sketching and streaming for sparse recovery and norm estimation | |
US9116898B2 (en) | Information conversion device, computer-readable recording medium, and information conversion method | |
US11386149B2 (en) | Search system, search method and program recording medium | |
US11874866B2 (en) | Multiscale quantization for fast similarity search | |
US20210326756A1 (en) | Methods of providing trained hyperdimensional machine learning models having classes with reduced elements and related computing systems | |
CN111223128A (en) | Target tracking method, device, equipment and storage medium | |
US20210117459A1 (en) | Efficient retrieval of top similarity representations | |
CN115391578A (en) | Cross-modal image-text retrieval model training method and system | |
WO2021216310A1 (en) | Supervised contrastive learning with multiple positive examples | |
US7705754B2 (en) | Method and system for the compression of probability tables | |
CN114049516A (en) | Training method, image processing method, device, electronic device and storage medium | |
Moghrabi | Implicit extra-update multi-step quasi-newton methods | |
US8462392B2 (en) | System and method for multi-resolution information filtering |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:IOFFE, SERGEY;REEL/FRAME:026670/0818Effective date: 20110722 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044566/0657Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |