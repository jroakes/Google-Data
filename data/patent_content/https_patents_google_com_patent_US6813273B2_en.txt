US6813273B2 - Method and apparatus for determining existence of an address in an address look-up table - Google Patents
Method and apparatus for determining existence of an address in an address look-up table Download PDFInfo
- Publication number
- US6813273B2 US6813273B2 US09/766,515 US76651501A US6813273B2 US 6813273 B2 US6813273 B2 US 6813273B2 US 76651501 A US76651501 A US 76651501A US 6813273 B2 US6813273 B2 US 6813273B2
- Authority
- US
- United States
- Prior art keywords
- address
- addresses
- ordered list
- lookup
- existence
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related, expires
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L45/00—Routing or path finding of packets in data switching networks
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L45/00—Routing or path finding of packets in data switching networks
- H04L45/54—Organization of routing tables
Definitions
- This invention relates, in general, to a method and apparatus for routing data packets in packet networks, and more particularly, to a method and apparatus for determining if a search for a specified packet destination address in an address look-up table (LUT) is necessary before proceeding with the search.
- LUT address look-up table
- the Internet has seen phenomenal growth over the last decade. Statistics show that the number of hosts on the Internet is doubling every six months. With the growing number of Internet applications, the traffic on the Internet has also grown tremendously. There is an ever-increasing demand for higher bandwidth on data links and for routers with higher throughput on the Internet. New applications such as firewalls, virtual private networks (VPN), quality-of-service (QOS) routing etc. have been implemented on the routers and these applications have also added to the processing load of the routers.
- VPN virtual private networks
- QOS quality-of-service
- a method for determining if it is necessary to perform a search for a specified address in an address lookup table (LUT) containing a plurality of addresses Said method provides at least one ordered list of address existence fields associated with lookup addresses obtained from at least one portion of said plurality of addresses. Said method indexes into said at least one ordered list to access at least one address existence field associated with a corresponding portion of said specified address. Said method further checks said at least one address existence field to determine if a search of said specified address in said address LUT is necessary.
- LUT address lookup table
- said at least one portion of said plurality of addresses may include all components of said addresses.
- said at least one portion of said plurality of addresses may include a masked portion of said addresses.
- said masked portion of said addresses may include a prefix portion of said addresses.
- said method provides at least one ordered list by determining a and a largest lookup address of lookup addresses that define limits of a range of lookup addresses, allocating address existence fields for a predetermined number of said lookup addresses in said range, and initializing address existence fields corresponding to said range of lookup addresses to indicate existence of corresponding addresses in said address LUT.
- indexing into said at least one ordered list preferably includes indexing into said at least one ordered list if said specified address has a corresponding address portion in said range.
- allocating address existence fields may include allocating address existence fields for discrete lookup addresses in said range.
- allocating address existence fields should include allocating address existence fields for a selected subset of said lookup addresses in said range.
- said selected subset of lookup addresses in said range may include lookup addresses that have a difference with the smallest lookup address that is divisible by a greatest common divisor obtained from differences between consecutive pairs of sorted lookup addresses.
- said allocating address existence fields may include allocating a predetermined number of address existence fields and hashing lookup addresses in said set of lookup addresses to said predetermined number of address existence fields.
- said at least one portion of said addresses should include a masked portion of said addresses.
- said masked portion of said addresses may include a first prefix portion and wherein providing at least one ordered list includes providing a first ordered list associated with a first set of prefixed addresses.
- providing at least one ordered list may further include providing a second ordered list associated with addresses masked with a second mask.
- said second mask should be non-overlapping with said first prefix portion and indexing into said at least one ordered list should include first indexing into said first ordered list and subsequently indexing into said second ordered list if an address existence field obtained from said first ordered list indicates further indexing is necessary.
- checking said at least one address existence field should include checking address existence fields obtained from both said first and second ordered list and said method should further include proceeding with a search of said specified address in said address LUT if obtained address existence fields indicates that a search is necessary.
- said predetermined number of address existence fields is adjustable.
- a program storage device readable by a processor, tangibly embodying a program of instructions, executable by said processor to perform the above method.
- a computing node having a processor and a memory operatively coupled to said processor.
- Said processor executes program instructions stored in said memory in response to an arrival of a packet with a specified address at the computing node for determining if it is necessary to perform a search for said specified address in an address lookup table (LUT) containing a plurality of addresses in said memory according to the above method.
- LUT address lookup table
- FIG. 1 is a block diagram of a computer network that includes routers for facilitating flow of data packets throughout the network;
- FIG. 2 is a flow diagram describing a sequence of steps suitable for implementation in a router in FIG. 1 for determining if a search in an address lookup table (LUT) is necessary before actually proceeding with the search;
- LUT address lookup table
- FIG. 3 is an illustration showing address existence fields provided for addresses in an address lookup table according to a first embodiment of the invention
- FIG. 4 is an illustration showing address existence fields according to a second embodiment that is provided for the same address lookup table in FIG. 3;
- FIG. 5 is an illustration showing address existence fields according to a third embodiment
- FIG. 6 is an illustration showing address existence fields according to a fourth embodiment which uses a hashing scheme to reduce the number of address existence fields required.
- FIG. 7 is an illustration showing address existence fields according to a fifth embodiment which uses two levels of hashing to reduce the number of address existence fields required.
- FIG. 1 is a block diagram of a computer network 2 including subnetworks 3 connected by a collection of communication links 4 . Connected to the subnetworks 3 is a plurality of computing nodes.
- the nodes are typically computers which include a source node 6 , a destination node 8 and intermediate nodes or routers 10 , 12 .
- the subnetworks 3 are typically local area networks (LANs) interconnected by the routers 10 , 12 .
- LANs local area networks
- the subnetworks 3 may be connected to a wide area network 14 via communication links 4 .
- the nodes for example the source node 6 and the destination node 8 , communicate by exchanging discrete data packets among the nodes.
- the routers 10 , 12 facilitate the flow of these packets throughout the network 2 by routing them to their correct destination nodes.
- the role and expected performance of the routers 10 , 12 vary depending on the network 2 to which they are connected. There are mainly two types of routers, backbone routers and enterprise routers. Backbone routers have a routing address LUT with typically up to 40,000-50,000 address entries. Enterprise routers have comparatively less entries in their routing address LUTs, typically ranging from 1000-2000 entries.
- the routers 10 , 12 run software applications such as applications for firewall checking, quality-of-service (QOS) routing and policy forwarding. These applications generally have associated application-specific address LUTs.
- QOS quality-of-service
- Each router 10 , 12 typically includes a memory 20 and an input/output (I/O) adapter 22 operatively coupled to a processor 24 .
- the memory 20 may function as a program storage device for storing program instructions and data structures that are readable by the processor 24 for directing the operation of the routers 10 , 12 .
- the memory 20 includes a routing address LUT 26 and application-specific address LUTs 28 .
- the routing address LUT 26 stores routing information and parameters.
- the application-specific address LUTs 28 contain information relating to application-specific operations to be performed for each entry in the application-specific address LUTs 28 .
- Each of these address LUTs 26 , 28 generally contains information relating to a default operation to be performed when an address does not match entries in a particular address LUT.
- a disk (not shown) may alternatively be coupled to the I/O adapter 22 and configured to store the address LUTs 26 , 28 .
- the packet when the source node 6 transmits a packet over a LAN, such as LAN 36 , the packet is sent to all nodes on that LAN 36 . If the intended recipient of the packet is connected to another LAN, such as LAN 38 , the packet is routed through routers 10 , 12 to the LAN 38 . Typically, the packet contains a source node address and a destination node address. The routers 10 , 12 route the packet to a destination node based on the destination node address in the packet and the information in the routing address LUT 26 .
- One of the functions of the routers 10 , 12 is determining the node or next hop to which the packet is sent.
- a network layer of a conventional protocol stack within each node preferably performs this routing function. This aspect of the network layer concerns the algorithms and protocols used by routers 10 , 12 when cooperating to determine packet routes through the network 2 .
- the routers 10 , 12 execute these routing algorithms to decide which communication links 4 packets arriving at the routers 10 , 12 should be forwarded.
- Each router 10 , 12 maintains a routing address LUT 26 with entries indicating where to forward packets.
- the routing address LUT 26 of each router 10 , 12 is implemented as a tree data structure that stores destination node address prefixes.
- the destination node address prefix is a portion of the destination node address used to make next hop determinations. These determinations are preferably based on a longest-matching-address-prefix (“longest match”) algorithm that is used to search the tree data structure for an entry corresponding to a specified destination node address prefix.
- the routers 10 , 12 are required to determine if a specified address or address prefix exists in the corresponding application-specific address LUTs 28 .
- These application-specific address LUTs 28 may be similarly implemented as the routing address LUT 26 or by other means known to those skilled in the art. It is to be appreciated that the routing address LUT 26 and the application-specific address LUTs 28 may be implemented as a single address LUT.
- These address LUTs 26 , 28 may contain a large number of entries and a search of any address LUT 26 , 28 , is processor intensive. A search will result either in a hit or a miss. It is desirable to reduce the number of searches that will result in misses.
- both the routing and application-specific address LUTs 26 , 28 will be commonly referred to as an address LUT.
- FIG. 2 is a sequence 50 of steps for determining if it is necessary to perform a search for a specified address in the address LUT.
- the sequence 50 filters out searches in the address LUT that would result in misses.
- the sequence 50 is implemented in the router 10 , 12 .
- the sequence 50 starts in a START step 52 , when a plurality of Internet addresses are provided in an address LUT on the router 10 , 12 .
- the sequence 50 next proceeds to a PROVIDE ORDERED LIST step 54 , where an ordered list of address existence fields corresponding to the plurality of addresses is provided.
- FIG. 3 shows an ordered list 56 according to a first embodiment. This ordered list 56 corresponds to addresses in an address LUT 58 . Each field in the ordered list 56 contains information that indicates whether there is a possibility that a specified address, either a full or a prefixed address, exist in the address LUT 58 .
- An Internet address as is known to those skilled in the art has four distinct components. These four distinct components may be converted to a single numerical value for ease of manipulation.
- To prepare the ordered list 56 at least one portion of the addresses in the address LUT 58 can be used to produce a set of lookup addresses 59 . This portion may comprise distinct components of a part of the distinct components. In this first embodiment, an entire address including all components is used as a lookup address 59 .
- the PROVIDE ORDERED LIST step 54 first determines a smallest lookup address 60 and a largest lookup address 62 from the set of lookup addresses 59 .
- This smallest lookup address (Smallest Address) 60 and largest lookup address (Largest_Address) 62 define limits of a range of lookup addresses 59 .
- This step 54 allocates address existence fields to correspond to a predetermined number of lookup addresses 59 in the range. In this first embodiment, the predetermined number equals the number of discrete lookup addresses in the range. For the lookup addresses 59 in the address LUT 58 , the number of fields required is given by the following equation:
- Each field is preferably one memory bit in length and the ordered list 56 is preferably an array of bits.
- the address existence fields are initialized. For each lookup address 59 (Address), an index is calculated by subtracting the smallest lookup address 60 from the lookup address 59 , i.e., the index is given by:
- the index in this example has a value of between 0 and twenty.
- the index is used to index into the ordered list 56 to access and set an address existence field corresponding to the lookup address 59 .
- the setting of an address existence field signifies that a corresponding lookup address 59 exists in the address LUT 58 .
- An address existence field that is clear signifies that a corresponding lookup address 59 does not exist in the address LUT 58 and a search in the address LUT 58 will result in a miss.
- the sequence 50 Upon completion of initialization of the ordered list 56 , the sequence 50 proceeds to and loops around an INCOMING PACKET decision step 64 waiting for an incoming packet to arrive at the router 10 , 12 . If it is determined in this step 64 that an incoming packet has been received, the sequence 50 proceeds to an ADDRESS WITHIN RANGE step 65 , where a specified address in the packet is determined to see if it is the range. If it is determined that the specified address is outside the range, the sequence 50 proceeds to a PERFORM DEFAULT OPERATION step 70 , where the packet is processed according to a default operation for addresses that do not exist in the address LUT 58 .
- sequence proceeds to an INDEX ORDERED LIST step 66 , where the ordered list 56 is indexed into using an index to access an address existence field corresponding a specified address in the received packet.
- the index is similarly determined as above based on the specified address (Specified Address) in the received packet. This index is given by:
- the sequence 50 always proceeds to a CHECK ADDRESS EXISTENCE FIELD step 67 , where the address existence field corresponding to the specified address is checked to determine if the field is set. If it is determined that the address existence field is clear, the sequence 50 proceeds to the PERFORM DEFAULT OPERATION step 70 . If, however, it is determined in the CHECK ADDRESS EXISTENCE FIELD step 67 that the address existence field is set, the sequence 50 proceeds to a SEARCH ADDRESS LUT step 68 , where any known algorithm may be used to search the address LUT 58 for the specified address.
- the sequence 50 returns to the INCOMING PACKET step 64 to await the arrival of another packet.
- FIG. 4 shows an ordered list 74 associated with the address LUT 58 . Only steps in which details differ from those in the first embodiment will be described.
- the PROVIDE ORDERED LIST step 54 sorts a set of lookup addresses 59 , which in this embodiment consists of entire addresses in the address LUT 58 , into a sorted list 76 .
- the step 54 next determines the differences between consecutive pairs of addresses in the sorted list 76 . For the addresses in the address LUT 58 , the differences are five, five and ten as shown in FIG. 4 .
- the greatest common divisor (GCD) of these differences is determined next. For the differences in FIG. 4, the GCD is found to be 5.
- the step 54 allocates a number of address existence fields according to an equation: Largest_Address - Smallest_address GCD + 1
- the equation yields a whole-number index in the range of 0 to 4.
- the index is used to index into the ordered list 74 for setting a corresponding field in the ordered list 74 .
- the INDEX ORDERED LIST step 66 in this embodiment calculates an index by using an equation: Specified_Address - Smallest_address GCD
- the sequence 50 proceeds to the PERFORM DEFAULT OPERATION step 70 because the specified address is definitely not in the address LUT 58 . If it is determined that there is no remainder, i.e., the numerator of the equation is divisible by the denominator of the equation, the sequence 50 continues in a similar manner as in the first embodiment by proceeding to the CHECK ADDRESS EXISTENCE FIELD step 67 .
- This second embodiment is more memory efficient compared to the first embodiment.
- This second embodiment reduces the number of address existence fields required in the first embodiment by the GCD. In other words, not all discrete lookup addresses need be represented in the ordered list 74 ; only a selected subset in the range of lookup addresses 59 is necessary. If however, the GCD is one, that is when there are two consecutive addresses in the address LUT 58 , this second embodiment is no different than the first embodiment in the sense that it requires as many address existence fields.
- This third embodiment provides an ordered list in the PROVIDE ORDERED LIST step 54 that is derived from lookup addresses comprising a portion of the addresses in an address LUT.
- FIG. 5 shows an ordered list 78 associated with an address LUT 80 .
- the PROVIDE ORDERED LIST step 54 additionally masks a portion of each address in the address LUT 80 to ignore for example, the eight least significant bits (LSB) of each address. In other words, a mask or prefix of 255.255.255.0 is applied to each address to produce a set of prefixed lookup addresses 81 .
- LSB least significant bits
- the PROVIDE ORDERED LIST step 54 sorts, calculates the differences and finds the GCD of the prefixed lookup addresses 81 in a similar manner as described in the second embodiment. This masking out of the eight LSB ensures a minimum GCD of 256.
- the equations in the second embodiment can be used for indexing the address existence fields in the ordered list 78 by replacing the full addresses with prefixed addresses.
- This third embodiment significantly reduces the number of address existence fields required in an ordered list as compared to the second embodiment.
- the address existence fields in the ordered list no longer indicate a definite existence of an address in the address LUT 80 .
- This specified address after masking would result in a prefixed address 81 of 10 . 1 . 1 . 0 .
- the address existence field corresponding to this prefixed address having been set during initialization indicates that there is a possibility that the specified address 10 . 1 . 1 . 123 exists in the address LUT 80 .
- a search of the address LUT 80 is then necessary to ascertain if this specified address exists in the address LUT 80 .
- the prefixed addresses of addresses in an address LUT 80 may still require that a significant amount of memory be allocated. Such an embodiment is not suitable for a system where the amount of memory available is limited.
- the third embodiment is not limited to the use of a single mask.
- several masks may be used in preparing the ordered list 78 .
- a specified address of each incoming packet is masked using one of the masks before accessing the address existence fields in the ordered list 78 .
- a mask with the highest number of 1's may be used first followed by masks with a decreasing number of 1's until all the masks are exhausted.
- the resultant masked address is used to index the address existence fields to check if a corresponding field is set.
- a field that is set indicates that a specified address may be in an address LUT.
- a fourth embodiment is now described for catering to a system with a limited memory.
- This fourth embodiment uses hashing to reduce the number of fields required in an ordered list.
- FIG. 6 shows an ordered list 82 associated with an address LUT 84 .
- the PROVIDE ORDERED LIST step 54 essentially allocates address existence fields in a similar manner as that in the second embodiment by additionally taking into account an available memory size, for example 10 bits.
- an available memory size for example 10 bits.
- each bit in the ordered list 82 may correspond to more than one address. For the example in FIG. 6, each bit corresponds to two addresses.
- each address existence field is set, the probability of locating a specified address in the address LUT 84 is reduced to 50% as compared to a 100% in the second embodiment.
- Each address existence field is a hash bucket of size two in this case. If the number of lookup addresses is increased without increasing the number of fields, the hash bucket size increases and the probability of getting a hit in the address LUT 84 decreases accordingly.
- this fourth embodiment is not as efficient in reducing the number of misses in searching an address LUT, it can be used on a system where there is insufficient memory to support the first three embodiments.
- This fourth embodiment has the advantage of flexibility in terms of memory requirement and is therefore adaptable to be used on different routers with different amount of available memories.
- the number of bits of available memory may be defined by a user or automatically adjusted to optimize the efficiency of the method to suit different operating environments. For example, if address existence fields of an ordered list indicate too low a probability factor that results in too high a number of misses while searching the address LUT, the number of fields may be increased accordingly to reduce the number of misses.
- Such a hashing scheme may be applied to the third embodiment for hashing prefixed addresses.
- the goal was focused on reducing the number of address existence fields in an ordered list at the expense of percentage of hits when searching an address LUT.
- FIG. 7 shows two ordered lists 92 , 94 and an associated address LUT 86 .
- each address in the address LUT 86 is preferably separated into two portions—a first prefixed portion 88 and a second masked portion 90 .
- the first prefixed portion 88 may include a component consisting of an arbitrary number of most significant bits (MSB) of an address, for example 16 MSB in this example.
- the second masked portion 90 preferably includes the remaining LSB of an address, which in this example, is the 16 LSB that is non-overlapping with the first prefixed portion 88 .
- the two ordered lists 92 , 94 are initialized, one for hashing the first prefixed portion 88 of the addresses in the address LUT 86 and the second for hashing the second masked portion 90 of the addresses.
- the first prefixed portion 88 of a specified address is used to hash into the first ordered list 92 . If a corresponding field in the first ordered list 92 is set, the second portion 90 of the specified address is then used to hash into the second ordered list 94 . If a field in this second ordered list 94 is set, the sequence 50 proceeds to search the address LUT 86 in the SEARCH ADDRESS LUT step 68 . If the field in the first ordered list 92 or the second ordered list 94 is clear, the sequence 50 proceeds to the default operation step 70 .
- This fifth embodiment by including a two level hashing scheme is able to reduce the number of misses when searching an address LUT.
- the provision of an ordered list containing address existence fields allows the method to quickly determine if a search of a specified address in an address LUT is necessary. Consequently, by reducing the number of searches of an address LUT, precious processor time may be conserved.
- a longest-match algorithm is used in routers for matching address prefixes.
- the method according to the third and fifth embodiment may be modified to include such a longest-match algorithm.
- a shortest prefix amongst a group of prefixes of different lengths may be used to prepare the first ordered list 92 . If an address existence field in the first ordered list indicates that such a prefix exists in an address LUT, a search in the LUT is conducted regardless of the outcome of indexing into the second ordered list 94 .
Abstract
Description
Claims (14)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/766,515 US6813273B2 (en) | 2001-01-19 | 2001-01-19 | Method and apparatus for determining existence of an address in an address look-up table |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/766,515 US6813273B2 (en) | 2001-01-19 | 2001-01-19 | Method and apparatus for determining existence of an address in an address look-up table |
Publications (2)
Publication Number | Publication Date |
---|---|
US20020126662A1 US20020126662A1 (en) | 2002-09-12 |
US6813273B2 true US6813273B2 (en) | 2004-11-02 |
Family
ID=25076668
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/766,515 Expired - Fee Related US6813273B2 (en) | 2001-01-19 | 2001-01-19 | Method and apparatus for determining existence of an address in an address look-up table |
Country Status (1)
Country | Link |
---|---|
US (1) | US6813273B2 (en) |
Cited By (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20040042463A1 (en) * | 2002-08-30 | 2004-03-04 | Intel Corporation | Method and apparatus for address lookup |
US20160028631A1 (en) * | 2014-07-24 | 2016-01-28 | Verint Systems Ltd. | System and method for range matching |
CN105765087A (en) * | 2013-11-25 | 2016-07-13 | 奥贝特迪瓦尔公司 | Martensitic stainless steel, part made of the steel and method for manufacturing same |
Families Citing this family (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
TWI276336B (en) * | 2001-05-02 | 2007-03-11 | Acute Technology Corp | Internet address pre-lookup method |
US8018935B2 (en) * | 2002-12-12 | 2011-09-13 | Intel Corporation | Address search |
US7996558B2 (en) * | 2005-03-01 | 2011-08-09 | Industrial Technology Research Institute | Methods and systems for a routing protocol |
Citations (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5983223A (en) | 1997-05-06 | 1999-11-09 | Novell, Inc. | Method and apparatus for determining a longest matching prefix from a dictionary of prefixes |
US6011795A (en) | 1997-03-20 | 2000-01-04 | Washington University | Method and apparatus for fast hierarchical address lookup using controlled expansion of prefixes |
US6564211B1 (en) * | 2000-10-04 | 2003-05-13 | Lsi Logic Corporation | Fast flexible search engine for longest prefix match |
US6628653B1 (en) * | 1998-06-04 | 2003-09-30 | Nortel Networks Limited | Programmable packet switching device |
US6633563B1 (en) * | 1999-03-02 | 2003-10-14 | Nortel Networks Limited | Assigning cell data to one of several processors provided in a data switch |
US6636516B1 (en) * | 1999-03-17 | 2003-10-21 | Nec Corporation | QOS-based virtual private network using ATM-based internet virtual connections |
US6697380B1 (en) * | 1999-12-07 | 2004-02-24 | Advanced Micro Devices, Inc. | Multiple key lookup arrangement for a shared switching logic address table in a network switch |
-
2001
- 2001-01-19 US US09/766,515 patent/US6813273B2/en not_active Expired - Fee Related
Patent Citations (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6011795A (en) | 1997-03-20 | 2000-01-04 | Washington University | Method and apparatus for fast hierarchical address lookup using controlled expansion of prefixes |
US5983223A (en) | 1997-05-06 | 1999-11-09 | Novell, Inc. | Method and apparatus for determining a longest matching prefix from a dictionary of prefixes |
US6628653B1 (en) * | 1998-06-04 | 2003-09-30 | Nortel Networks Limited | Programmable packet switching device |
US6633563B1 (en) * | 1999-03-02 | 2003-10-14 | Nortel Networks Limited | Assigning cell data to one of several processors provided in a data switch |
US6636516B1 (en) * | 1999-03-17 | 2003-10-21 | Nec Corporation | QOS-based virtual private network using ATM-based internet virtual connections |
US6697380B1 (en) * | 1999-12-07 | 2004-02-24 | Advanced Micro Devices, Inc. | Multiple key lookup arrangement for a shared switching logic address table in a network switch |
US6564211B1 (en) * | 2000-10-04 | 2003-05-13 | Lsi Logic Corporation | Fast flexible search engine for longest prefix match |
Cited By (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20040042463A1 (en) * | 2002-08-30 | 2004-03-04 | Intel Corporation | Method and apparatus for address lookup |
CN105765087A (en) * | 2013-11-25 | 2016-07-13 | 奥贝特迪瓦尔公司 | Martensitic stainless steel, part made of the steel and method for manufacturing same |
CN105765087B (en) * | 2013-11-25 | 2018-06-01 | 奥贝特迪瓦尔公司 | Martensitic stain less steel, part and its manufacturing method made of the steel |
US20160028631A1 (en) * | 2014-07-24 | 2016-01-28 | Verint Systems Ltd. | System and method for range matching |
US10630588B2 (en) * | 2014-07-24 | 2020-04-21 | Verint Systems Ltd. | System and method for range matching |
US11463360B2 (en) | 2014-07-24 | 2022-10-04 | Cognyte Technologies Israel Ltd. | System and method for range matching |
Also Published As
Publication number | Publication date |
---|---|
US20020126662A1 (en) | 2002-09-12 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
EP1623557B1 (en) | A bounded index extensible hash-based ipv6 address lookup method | |
EP1754349B1 (en) | Hardware filtering support for denial-of-service attacks | |
US6721800B1 (en) | System using weighted next hop option in routing table to include probability of routing a packet for providing equal cost multipath forwarding packets | |
US20050171937A1 (en) | Memory efficient hashing algorithm | |
US7990979B2 (en) | Recursively partitioned static IP router tables | |
US5983223A (en) | Method and apparatus for determining a longest matching prefix from a dictionary of prefixes | |
US7418505B2 (en) | IP address lookup using either a hashing table or multiple hash functions | |
US6243720B1 (en) | Address translation method and system having a forwarding table data structure | |
US7325071B2 (en) | Forwarding traffic in a network using a single forwarding table that includes forwarding information related to a plurality of logical networks | |
US7953088B2 (en) | Method and apparatus for packet classification and rewriting | |
US20090323535A1 (en) | Distributing information across equal-cost paths in a network | |
US8555374B2 (en) | High performance packet processing using a general purpose processor | |
US20120127997A1 (en) | Method for optimizing a network prefix-list search | |
US7624226B1 (en) | Network search engine (NSE) and method for performing interval location using prefix matching | |
US11423084B2 (en) | Generating packet processing graphs | |
US6870849B1 (en) | Apparatus and method for efficient hashing in networks | |
US7487255B2 (en) | Routing cache management with route fragmentation | |
US20050149721A1 (en) | Method of speeding up packet filtering | |
US7330469B2 (en) | Internet protocol address lookup system and method using three-layer table architecture | |
US6813273B2 (en) | Method and apparatus for determining existence of an address in an address look-up table | |
EP1570608A1 (en) | Parallel address decoding in a router | |
US11178054B1 (en) | Method and apparatus for longest prefix match search | |
Uga et al. | A fast and compact longest match prefix look-up method using pointer cache for very long network address | |
CN113328947B (en) | Variable-length route searching method and device based on application of controllable prefix extension bloom filter | |
US10965583B2 (en) | Mechanism to preserve weights assigned to nexthops |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: MOTOROLA, INC., ILLINOISFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:GEEVARGHESE, JOHN;CHATTERJEE, JOY;REEL/FRAME:011498/0502Effective date: 20001226 |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: MOTOROLA MOBILITY, INC, ILLINOISFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MOTOROLA, INC;REEL/FRAME:025673/0558Effective date: 20100731 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: MOTOROLA MOBILITY LLC, ILLINOISFree format text: CHANGE OF NAME;ASSIGNOR:MOTOROLA MOBILITY, INC.;REEL/FRAME:029216/0282Effective date: 20120622 |
|
AS | Assignment |
Owner name: GOOGLE TECHNOLOGY HOLDINGS LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MOTOROLA MOBILITY LLC;REEL/FRAME:034422/0001Effective date: 20141028 |
|
REMI | Maintenance fee reminder mailed | ||
LAPS | Lapse for failure to pay maintenance fees | ||
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20161102 |