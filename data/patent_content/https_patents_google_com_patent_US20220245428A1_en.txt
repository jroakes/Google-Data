US20220245428A1 - Machine-Learned Attention Models Featuring Omnidirectional Processing - Google Patents
Machine-Learned Attention Models Featuring Omnidirectional Processing Download PDFInfo
- Publication number
- US20220245428A1 US20220245428A1 US17/592,796 US202217592796A US2022245428A1 US 20220245428 A1 US20220245428 A1 US 20220245428A1 US 202217592796 A US202217592796 A US 202217592796A US 2022245428 A1 US2022245428 A1 US 2022245428A1
- Authority
- US
- United States
- Prior art keywords
- attention
- model
- machine
- learned
- output
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
Images
Classifications
-
- G06N3/0454—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N20/00—Machine learning
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/084—Backpropagation, e.g. using gradient descent
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F18/00—Pattern recognition
- G06F18/20—Analysing
- G06F18/21—Design or setup of recognition systems or techniques; Extraction of features in feature space; Blind source separation
- G06F18/214—Generating training patterns; Bootstrap methods, e.g. bagging or boosting
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F18/00—Pattern recognition
- G06F18/20—Analysing
- G06F18/24—Classification techniques
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/40—Processing or translation of natural language
- G06F40/58—Use of machine translation, e.g. for multi-lingual retrieval, for server-side translation for client devices or for real-time translation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/06—Physical realisation, i.e. hardware implementation of neural networks, neurons or parts of neurons
- G06N3/063—Physical realisation, i.e. hardware implementation of neural networks, neurons or parts of neurons using electronic means
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/10—Interfaces, programming languages or software development kits, e.g. for simulating neural networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/044—Recurrent networks, e.g. Hopfield networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/048—Activation functions
Definitions
- the present disclosure relates generally to machine learning. More particularly, the present disclosure relates to machine-learned attention models that feature omnidirectional processing.
- Attention is a technique that mimics cognitive attention and can enhance the important parts of the input data while reducing the influence of portions of the data that are less relevant to the task at hand.
- attention mechanisms can enable a computing system to devote more computing power to the small but important part of the data. Which part of the data is more important than others depends on the context and can in some instances be learned through training data by gradient descent.
- Attention mechanisms are used in a wide variety of machine learning models, including in natural language processing and computer vision.
- Transformer models (Vaswani et al., Attention is all you need.
- Advances in neural information processing systems pp. 5998-6008, 2017) make extensive use of attention mechanisms to achieve their expressive power.
- Computer vision systems based on convolutional neural networks can also benefit from attention mechanisms.
- One key defining characteristic of the self-attention mechanism is the global receptive field in which each token is accessible to every other token in the sequence, serving as an enabler for learning global contextual representations.
- the computing system includes: one or more processors; and one or more non-transitory computer-readable media that collectively store: a machine-learned multi-layer attention model that comprises a plurality of self-attention layers, wherein the multi-layer attention model is configured to process a first input to generate a first output; a machine-learned omnidirectional model configured to: receive a plurality of intermediate layer representations respectively generated at two or more of the plurality of self-attention layers of the machine-learned multi-layer attention model when processing the first input to generate the first output; and process the plurality of intermediate layer representations to generate a second output; and instructions that, when executed by the one or more processors, cause the computing system to perform operations.
- the operations include: providing the first input to the machine-learned multi-layer attention model to cause generation of the first output; and providing the plurality of intermediate layer representations respectively generated at the two or more of the plurality of self-attention layers of the machine-learned multi-layer attention model as input to the machine-learned omnidirectional model to cause generation of the second output.
- Another example aspect of the present disclosure is directed to one or more non-transitory computer-readable media that collectively store: a multi-layer attention model that comprises a plurality of self-attention layers, wherein the multi-layer attention model is configured to process a first input to generate a first output; a omnidirectional model configured to: receive a plurality of intermediate layer representations respectively generated at two or more of the plurality of self-attention layers of the multi-layer attention model when processing the first input to generate the first output; and process the plurality of intermediate layer representations to generate a second output; and instructions that, when executed, cause the computing system to perform operations.
- a multi-layer attention model that comprises a plurality of self-attention layers, wherein the multi-layer attention model is configured to process a first input to generate a first output
- a omnidirectional model configured to: receive a plurality of intermediate layer representations respectively generated at two or more of the plurality of self-attention layers of the multi-layer attention model when processing the first input to generate the first output; and process the pluralit
- the operations include: providing the first input to the multi-layer attention model to cause generation of the first output; providing the plurality of intermediate layer representations respectively generated at the two or more of the plurality of self-attention layers of the multi-layer attention model as input to the machine-learned omnidirectional model to cause generation of the second output; evaluating a loss function to determine a loss value based at least in part on the second output; and training at least the omnidirectional model based at least in part on the loss function.
- FIG. 1 provides a graphical overview of an example omnidirectional attention model according to example embodiments of the present disclosure.
- FIG. 2A depicts a block diagram of an example computing system according to example embodiments of the present disclosure.
- FIG. 2B depicts a block diagram of an example computing device according to example embodiments of the present disclosure.
- FIG. 2C depicts a block diagram of an example computing device according to example embodiments of the present disclosure.
- the present disclosure is directed to machine-learned attention models that feature omnidirectional processing, example implementations of which can be referred to as Omnidirectional Representations from Transformers (OMNINET).
- OMNINET Omnidirectional Representations from Transformers
- each token instead of maintaining a strictly horizontal receptive field, each token is allowed to attend to all tokens in some or all of the other tokens across the entire network.
- this process can be interpreted as a form of extreme or intensive attention mechanism that has the receptive field of the entire width and depth of the network.
- the omnidirectional attention is learned via a meta-learner, which can in some implementations be another self-attention based model.
- some example implementations of the present disclosure leverage efficient self-attention models such as kernel-based (Choromanski et al., 2020), low-rank attention (Wang et al., 2020) and/or Big Bird (Zaheer et al., 2020) as the meta-learner.
- OmniNet also achieves state-of-the-art performance on LM1B, WMT′14 En-De/En-Fr and Long Range Arena.
- this paper proposes learning omnidirectional representations from or for attention-based models such as transformers.
- the systems and methods provided herein move beyond horizontally global receptive fields and explore the possibilities of omnidirectional receptive fields.
- some example implementations allow each token to not only attend to all other tokens in the same hierarchy, but also some or all other tokens in the network (e.g., including at different levels or layers).
- This omnidirectional (e.g., global) access enables tokens to not only have a greater (e.g., full) view of the network (e.g., across different levels or layers) but also access the knowledge and intermediate representation of every token at each stage.
- example models described herein are also able to capture patterns pertaining to the propagation of representations across time. Finally, this can be also interpreted as a form of dense residual connection, which has shown to be beneficial by aiding gradient flow.
- some example omnidirectional attention models proposed herein can be implemented as a form of meta-learner that acts upon a standard transformer model.
- the meta-learner can itself be a self-attention model that accepts all hidden representations across some or all layers of the base model as an input and refines them based on all the available information.
- some example implementations leverage one or more of efficient alternatives of parameterizing the meta-learner, e.g., including fast attention via generalizable kernel attention (Choromanski et al., 2020), low-rank self-attention (Wang et al., 2020), and/or block-based sparsity (Zaheer et al., 2020). Additionally, employing methods that try to learn the low-rank factorized structure of the entire network can lead to improve generalization capabilities.
- some example implementations of the present disclosure can also include partitioned variants of OmniNet in which the meta-learner is applied to subsets of the layers such as, for example, every consecutive p layers.
- this partitioning strategy groups the full network of L layers into L/p partitions. After computing each partition, the meta-learner can learn the omnidirectional attention of some or all nodes across some or all layers in the partition.
- OmniNet achieves very promising results on a myriad of language, vision and synthetic tasks. Specifically, strong experimental results were obtained on autoregressive language modeling, five collections of WMT machine translation, Long Range Arena (Tay et al., 2020) and Image Recognition (both few-shot learning and fine-tuning fashion) using Vision Transformers (Dosovitskiy et al., 2020).
- ADMIN Liu et al., 2020
- WMT′ 14 English-German and WMT′ 14 English-French On the one billion language modeling benchmark, OmniNet outperforms existing state-of-the-art models such as Transformer-XL.
- OmniNet improves Performers by +8:9% and vanilla Transformers by +2:6%.
- the systems and methods of the present disclosure provide a number of technical effects and benefits.
- the omnidirectional-attention mechanisms described herein can result in improved performance (e.g., greater accuracy) of machine-learned models at various tasks, including, for example, image processing or analysis tasks and/or natural language processing or analysis tasks.
- the proposed omnidirectional-attention mechanisms can enable an improvement in the performance of a computing system.
- the omnidirectional-attention mechanisms described herein can enable machine-learned models to maintain a same level of performance while reducing the number of parameters included in the model. Reducing the number of parameters can result in improved conservation of computing resources such as processor usage, memory usage, network bandwidth, etc.
- a model with the omnidirectional-attention mechanisms described herein may achieve the same performance as a larger model that does not have the omnidirectional-attention mechanisms described herein. Therefore, the model with the omnidirectional-attention mechanisms described herein can be stored using less memory consumption.
- the omnidirectional-attention mechanisms described herein can enable the size (e.g., in number of parameters, layers, etc.) of the machine-learned multi-layer model to be reduced (e.g., relative to a same style of model that has not been trained using the omnidirectional-attention mechanisms described herein).
- a reduction in size can result in less consumption of memory, faster run time, and/or other computational benefits.
- FIG. 1 provides a graphical overview of an example omnidirectional attention model according to example embodiments of the present disclosure.
- FIG. 1 depicts a machine-learned multi-layer model 12 that contains a plurality of layers.
- the machine-learned multi-layer model 12 can be a multi-layer attention model and one or more of a plurality of layers of the model 12 can be attention-based layers such as self-attention layers such as multi-headed self-attention layers.
- the machine-learned multi-layer model 12 is a Transformer model.
- the machine-learned multi-layer model 12 is a multi-layer neural network. Although four layers are shown, any number of layers can be included in the model 12 .
- the multi-layer model 12 can be configured to process a first input 16 to generate a first output 17 .
- the first input 16 can be sequential in nature.
- the first output 17 can be sequential in nature or can be a single output.
- the first input 16 can include a natural language input (e.g., tokens for text) and/or an image input.
- the machine-learned multi-layer model 12 can generate a plurality of intermediate layer representations (e.g., 18 , 20 , and 22 ) at the plurality of layers of the machine-learned multi-layer model 12 .
- FIG. 1 also depicts a machine-learned omnidirectional model 14 which is configured to receive the intermediate layer representations (e.g., 18 , 20 , and 22 ) from two or more of the plurality of layers of the machine-learned multi-layer model 12 .
- the machine-learned omnidirectional model 14 can process the plurality of intermediate layer representations (e.g., 18 , 20 , and 22 ) to generate a second output 24 .
- the second output 24 can be sequential in nature or can be a single output.
- the omnidirectional model 14 can receive all of the intermediate layer representations 18 , 20 , and 22 . However, in other examples, only some of representations are provided from model 12 to model 14 . In some examples, the intermediate representations of model 12 can be partitioned into one or more batches or partitions and separately provided to the model 14 for separate processing by the model 14 .
- the machine-learned omnidirectional model 14 itself can be a multi-layer attention model and one or more of a plurality of layers of the model 14 can be attention-based layers such as self-attention layers such as multi-headed self-attention layers.
- the machine-learned omnidirectional model 14 is a Transformer model.
- the machine-learned omnidirectional model 14 is a multi-layer neural network. Although two layers are shown, any number of layers can be included in the model 14 .
- At least one of the one or more self-attention layers of the machine-learned omnidirectional model 14 performs kernel-based attention. In some implementations, at least one of the one or more self-attention layers of the machine-learned omnidirectional model 14 performs low-rank attention in which low-rank projection transformations are shared across a plurality of heads or a plurality of key and value parameters. In some implementations, at least one of the one or more self-attention layers of the machine-learned omnidirectional model 14 performs block and memory-based attention in which attention is performed within a neighborhood.
- providing the plurality of intermediate layer representations (e.g., 18 , 20 , 22 ) as input to the machine-learned omnidirectional model 14 can include performing an index sorting operation to sort tokens within each intermediate layer representation according to index (e.g., token index).
- index e.g., token index
- providing the plurality of intermediate layer representations (e.g., 18 , 20 , 22 ) as input to the machine-learned omnidirectional model 14 can include separately obtaining respective intermediate layer representations from a plurality of different partitions of the two or more of the plurality of layers plurality of self-attention layers of the machine-learned multi-layer attention model and separately inputting the respective intermediate layer representations from the plurality of different partitions into the machine-learned omnidirectional model.
- a final output can be determined based at least in part on the first output 17 and the second output 24 .
- the first output 17 and the second output 24 can be summed to produce the final output.
- a pooling function e.g., a max pool
- a max pool can be applied to the second output.
- a computing system can evaluate a loss function to determine a loss value based at least in part on the first output 17 , the second output 24 , and/or a final output generated from the first output 17 and/or the second output 24 .
- the computing system can train the multi-layer model 12 and/or the omnidirectional model 24 based at least in part on the loss function. For example, the computing system can jointly train (e.g., via joint backpropagation of a gradient of the loss function) both the multi-layer model 12 and the omnidirectional model 14 based at least in part on the loss function.
- both models 12 and 14 can be run jointly to produce an inference or prediction (e.g., as a final output).
- model 12 can be used at inference time alone (e.g., without model 14 ). However, due to having been trained jointly with model 14 , model 12 can still provide improved inferences or predictions (e.g., relative to a model that has not be so jointly trained).
- This section introduces example implementations of OmniNet. This section first begins by reviewing the standard Transformer architecture.
- the Transformer block accepts N ⁇ d input, where N denotes the number of tokens in the sequence and d denotes the size of the representation.
- Each Transformer block is characterized by a self-attention block and a two layered feed-forward network with ReLU activations in-between that is applied position-wise.
- the self-attention mechanism first projects each input X into Q, K, V representations using linear transformations, corresponding to queries, keys, and values.
- the self-attention mechanism is typically multi-headed where multiple similar linear projections are executed in parallel.
- the output of each self-attention head h at layer l is written as:
- the FFN block of the Transformer block performs a two layer transformation defined as:
- W 1 , W 2 are trainable parameters (weight transforms) of the FFN layer. Bias parameters are omitted for clarity.
- the proposed OmniNet method can operate on an arbitrary multi-layered architecture that accepts sequential inputs.
- this typically refers to a stacked X-former architecture in this section. Note that while this is typically a transformer model, it can also be an arbitrary variant.
- each layer exposes a sequence of N vectors of d dimensions each.
- OmniNet operates across all layers and connects the multi-layered network architecture in a grid like fashion.
- the network as xformer which accepts X as an input and returns a tensor of L ⁇ N ⁇ d dimensions.
- the model can perform P(.) a pooling operator. While there are many choices of pooling operators, parameterized or otherwise, some example implementations adopt a simple pooling function—a max pooling of stride L.
- OmniNet( X ) x former( X ) L +O′. (6)
- the OmniNet and main transformer model can in some implementations be trained together in an end-to-end fashion, i.e., gradients flow to both networks concurrently at each backward pass.
- Attend refers to an attention block with an attention function and a two-layered positional FFN in a similar structure to the transformer backbone.
- This variant uses the generalizable kernel attention. Specifically, this is written as:
- ⁇ circumflex over (D) ⁇ h diag ⁇ (Q h )(( ⁇ (K h )) T 1 L ) and ⁇ (.) is a random feature map that projects d to r .
- Attend can be set as follows:
- W ⁇ N ⁇ k are low-rank projection transformations that are shared across heads and across keys and values.
- the complexity of this self-attention mechanism is Nk instead of N 2 , where k ⁇ N.
- Another example includes a block and memory-based variant of efficient Transformers.
- this is a combination of windowed attention, global attention, and sparse attention.
- the output for token i is defined as:
- N(i) is the neighborhood function which denotes the out-neighbors of node i
- H is the total number of heads and h represents a head.
- the neighborhood function is mainly dependent on the width of the windowed attention.
- This section describes example types of partitioning variants that can be used in OmniNet.
- L is large, the eventual representation input to OmniNet can be extremely large. For example, a sequence length of 1K would result in a 11K input sequence length for a 12 layered Transformer model, when using an omnidirectional layer as the final layer.
- an omnidirectional attention layer can be activated, aggregating representations all the way from the previous partition ⁇ P layer up till ⁇ 1. In this case, the original xformer layer can be skipped, hence maintaining approximately the same parameter size of the network.
- FIG. 2A depicts a block diagram of an example computing system 100 according to example embodiments of the present disclosure.
- the system 100 includes a user computing device 102 , a server computing system 130 , and a training computing system 150 that are communicatively coupled over a network 180 .
- the user computing device 102 can be any type of computing device, such as, for example, a personal computing device (e.g., laptop or desktop), a mobile computing device (e.g., smartphone or tablet), a gaming console or controller, a wearable computing device, an embedded computing device, or any other type of computing device.
- a personal computing device e.g., laptop or desktop
- a mobile computing device e.g., smartphone or tablet
- a gaming console or controller e.g., a gaming console or controller
- a wearable computing device e.g., an embedded computing device, or any other type of computing device.
- the user computing device 102 includes one or more processors 112 and a memory 114 .
- the one or more processors 112 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, an FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 114 can include one or more non-transitory computer-readable storage media, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 114 can store data 116 and instructions 118 which are executed by the processor 112 to cause the user computing device 102 to perform operations.
- the user computing device 102 can store or include one or more machine-learned models 120 .
- the machine-learned models 120 can be or can otherwise include various machine-learned models such as neural networks (e.g., deep neural networks) or other types of machine-learned models, including non-linear models and/or linear models.
- Neural networks can include feed-forward neural networks, recurrent neural networks (e.g., long short-term memory recurrent neural networks), convolutional neural networks or other forms of neural networks.
- Some example machine-learned models can leverage an attention mechanism such as self-attention.
- some example machine-learned models can include multi-headed self-attention models (e.g., transformer models).
- Example machine-learned models 120 are discussed with reference to FIG. 1 .
- the one or more machine-learned models 120 can be received from the server computing system 130 over network 180 , stored in the user computing device memory 114 , and then used or otherwise implemented by the one or more processors 112 .
- the user computing device 102 can implement multiple parallel instances of a single machine-learned model 120 .
- one or more machine-learned models 140 can be included in or otherwise stored and implemented by the server computing system 130 that communicates with the user computing device 102 according to a client-server relationship.
- the machine-learned models 140 can be implemented by the server computing system 140 as a portion of a web service.
- one or more models 120 can be stored and implemented at the user computing device 102 and/or one or more models 140 can be stored and implemented at the server computing system 130 .
- the user computing device 102 can also include one or more user input components 122 that receives user input.
- the user input component 122 can be a touch-sensitive component (e.g., a touch-sensitive display screen or a touch pad) that is sensitive to the touch of a user input object (e.g., a finger or a stylus).
- the touch-sensitive component can serve to implement a virtual keyboard.
- Other example user input components include a microphone, a traditional keyboard, or other means by which a user can provide user input.
- the server computing system 130 includes one or more processors 132 and a memory 134 .
- the one or more processors 132 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, an FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 134 can include one or more non-transitory computer-readable storage media, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 134 can store data 136 and instructions 138 which are executed by the processor 132 to cause the server computing system 130 to perform operations.
- the server computing system 130 includes or is otherwise implemented by one or more server computing devices. In instances in which the server computing system 130 includes plural server computing devices, such server computing devices can operate according to sequential computing architectures, parallel computing architectures, or some combination thereof.
- the server computing system 130 can store or otherwise include one or more machine-learned models 140 .
- the models 140 can be or can otherwise include various machine-learned models.
- Example machine-learned models include neural networks or other multi-layer non-linear models.
- Example neural networks include feed forward neural networks, deep neural networks, recurrent neural networks, and convolutional neural networks.
- Some example machine-learned models can leverage an attention mechanism such as self-attention.
- some example machine-learned models can include multi-headed self-attention models (e.g., transformer models).
- the user computing device 102 and/or the server computing system 130 can train the models 120 and/or 140 via interaction with the training computing system 150 that is communicatively coupled over the network 180 .
- the training computing system 150 can be separate from the server computing system 130 or can be a portion of the server computing system 130 .
- the training computing system 150 includes one or more processors 152 and a memory 154 .
- the one or more processors 152 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, an FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 154 can include one or more non-transitory computer-readable storage media, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 154 can store data 156 and instructions 158 which are executed by the processor 152 to cause the training computing system 150 to perform operations.
- the training computing system 150 includes or is otherwise implemented by one or more server computing devices.
- the training computing system 150 can include a model trainer 160 that trains the machine-learned models 120 and/or 140 stored at the user computing device 102 and/or the server computing system 130 using various training or learning techniques, such as, for example, backwards propagation of errors.
- a loss function can be backpropagated through the model(s) to update one or more parameters of the model(s) (e.g., based on a gradient of the loss function).
- Various loss functions can be used such as mean squared error, likelihood loss, cross entropy loss, hinge loss, and/or various other loss functions.
- Gradient descent techniques can be used to iteratively update the parameters over a number of training iterations.
- performing backwards propagation of errors can include performing truncated backpropagation through time.
- the model trainer 160 can perform a number of generalization techniques (e.g., weight decays, dropouts, etc.) to improve the generalization capability of the models being trained.
- the model trainer 160 can train the machine-learned models 120 and/or 140 based on a set of training data 162 .
- the training examples can be provided by the user computing device 102 .
- the model 120 provided to the user computing device 102 can be trained by the training computing system 150 on user-specific data received from the user computing device 102 . In some instances, this process can be referred to as personalizing the model.
- the model trainer 160 includes computer logic utilized to provide desired functionality.
- the model trainer 160 can be implemented in hardware, firmware, and/or software controlling a general purpose processor.
- the model trainer 160 includes program files stored on a storage device, loaded into a memory and executed by one or more processors.
- the model trainer 160 includes one or more sets of computer-executable instructions that are stored in a tangible computer-readable storage medium such as RAM, hard disk, or optical or magnetic media.
- the network 180 can be any type of communications network, such as a local area network (e.g., intranet), wide area network (e.g., Internet), or some combination thereof and can include any number of wired or wireless links.
- communication over the network 180 can be carried via any type of wired and/or wireless connection, using a wide variety of communication protocols (e.g., TCP/IP, HTTP, SMTP, FTP), encodings or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL).
- the machine-learned models described in this specification may be used in a variety of tasks, applications, and/or use cases.
- the input to the machine-learned model(s) of the present disclosure can be image data.
- the machine-learned model(s) can process the image data to generate an output.
- the machine-learned model(s) can process the image data to generate an image recognition output (e.g., a recognition of the image data, a latent embedding of the image data, an encoded representation of the image data, a hash of the image data, etc.).
- the machine-learned model(s) can process the image data to generate an image segmentation output.
- the machine-learned model(s) can process the image data to generate an image classification output.
- the machine-learned model(s) can process the image data to generate an image data modification output (e.g., an alteration of the image data, etc.).
- the machine-learned model(s) can process the image data to generate an encoded image data output (e.g., an encoded and/or compressed representation of the image data, etc.).
- the machine-learned model(s) can process the image data to generate an upscaled image data output.
- the machine-learned model(s) can process the image data to generate a prediction output.
- the input to the machine-learned model(s) of the present disclosure can be text or natural language data.
- the machine-learned model(s) can process the text or natural language data to generate an output.
- the machine-learned model(s) can process the natural language data to generate a language encoding output.
- the machine-learned model(s) can process the text or natural language data to generate a latent text embedding output.
- the machine-learned model(s) can process the text or natural language data to generate a translation output.
- the machine-learned model(s) can process the text or natural language data to generate a classification output.
- the machine-learned model(s) can process the text or natural language data to generate a textual segmentation output.
- the machine-learned model(s) can process the text or natural language data to generate a semantic intent output.
- the machine-learned model(s) can process the text or natural language data to generate an upscaled text or natural language output (e.g., text or natural language data that is higher quality than the input text or natural language, etc.).
- the machine-learned model(s) can process the text or natural language data to generate a prediction output.
- the input to the machine-learned model(s) of the present disclosure can be speech data.
- the machine-learned model(s) can process the speech data to generate an output.
- the machine-learned model(s) can process the speech data to generate a speech recognition output.
- the machine-learned model(s) can process the speech data to generate a speech translation output.
- the machine-learned model(s) can process the speech data to generate a latent embedding output.
- the machine-learned model(s) can process the speech data to generate an encoded speech output (e.g., an encoded and/or compressed representation of the speech data, etc.).
- an encoded speech output e.g., an encoded and/or compressed representation of the speech data, etc.
- the machine-learned model(s) can process the speech data to generate an upscaled speech output (e.g., speech data that is higher quality than the input speech data, etc.).
- the machine-learned model(s) can process the speech data to generate a textual representation output (e.g., a textual representation of the input speech data, etc.).
- the machine-learned model(s) can process the speech data to generate a prediction output.
- the input to the machine-learned model(s) of the present disclosure can be latent encoding data (e.g., a latent space representation of an input, etc.).
- the machine-learned model(s) can process the latent encoding data to generate an output.
- the machine-learned model(s) can process the latent encoding data to generate a recognition output.
- the machine-learned model(s) can process the latent encoding data to generate a reconstruction output.
- the machine-learned model(s) can process the latent encoding data to generate a search output.
- the machine-learned model(s) can process the latent encoding data to generate a reclustering output.
- the machine-learned model(s) can process the latent encoding data to generate a prediction output.
- the input to the machine-learned model(s) of the present disclosure can be statistical data.
- the machine-learned model(s) can process the statistical data to generate an output.
- the machine-learned model(s) can process the statistical data to generate a recognition output.
- the machine-learned model(s) can process the statistical data to generate a prediction output.
- the machine-learned model(s) can process the statistical data to generate a classification output.
- the machine-learned model(s) can process the statistical data to generate a segmentation output.
- the machine-learned model(s) can process the statistical data to generate a visualization output.
- the machine-learned model(s) can process the statistical data to generate a diagnostic output.
- the input to the machine-learned model(s) of the present disclosure can be sensor data.
- the machine-learned model(s) can process the sensor data to generate an output.
- the machine-learned model(s) can process the sensor data to generate a recognition output.
- the machine-learned model(s) can process the sensor data to generate a prediction output.
- the machine-learned model(s) can process the sensor data to generate a classification output.
- the machine-learned model(s) can process the sensor data to generate a segmentation output.
- the machine-learned model(s) can process the sensor data to generate a visualization output.
- the machine-learned model(s) can process the sensor data to generate a diagnostic output.
- the machine-learned model(s) can process the sensor data to generate a detection output.
- the machine-learned model(s) can be configured to perform a task that includes encoding input data for reliable and/or efficient transmission or storage (and/or corresponding decoding).
- the task may be audio compression task.
- the input may include audio data and the output may comprise compressed audio data.
- the input includes visual data (e.g. one or more image or videos), the output comprises compressed visual data, and the task is a visual data compression task.
- the task may comprise generating an embedding for input data (e.g. input audio or visual data).
- the input includes visual data and the task is a computer vision task.
- the input includes pixel data for one or more images and the task is an image processing task.
- the image processing task can be image classification, where the output is a set of scores, each score corresponding to a different object class and representing the likelihood that the one or more images depict an object belonging to the object class.
- the image processing task may be object detection, where the image processing output identifies one or more regions in the one or more images and, for each region, a likelihood that region depicts an object of interest.
- the image processing task can be image segmentation, where the image processing output defines, for each pixel in the one or more images, a respective likelihood for each category in a predetermined set of categories.
- the set of categories can be foreground and background.
- the set of categories can be object classes.
- the image processing task can be depth estimation, where the image processing output defines, for each pixel in the one or more images, a respective depth value.
- the image processing task can be motion estimation, where the network input includes multiple images, and the image processing output defines, for each pixel of one of the input images, a motion of the scene depicted at the pixel between the images in the network input.
- the input includes audio data representing a spoken utterance and the task is a speech recognition task.
- the output may comprise a text output which is mapped to the spoken utterance.
- the task comprises encrypting or decrypting input data.
- the task comprises a microprocessor performance task, such as branch prediction or memory address translation.
- FIG. 2A illustrates one example computing system that can be used to implement the present disclosure.
- the user computing device 102 can include the model trainer 160 and the training dataset 162 .
- the models 120 can be both trained and used locally at the user computing device 102 .
- the user computing device 102 can implement the model trainer 160 to personalize the models 120 based on user-specific data.
- FIG. 2B depicts a block diagram of an example computing device 10 that performs according to example embodiments of the present disclosure.
- the computing device 10 can be a user computing device or a server computing device.
- the computing device 10 includes a number of applications (e.g., applications 1 through N). Each application contains its own machine learning library and machine-learned model(s). For example, each application can include a machine-learned model.
- Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc.
- each application can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components.
- each application can communicate with each device component using an API (e.g., a public API).
- the API used by each application is specific to that application.
- FIG. 2C depicts a block diagram of an example computing device 50 that performs according to example embodiments of the present disclosure.
- the computing device 50 can be a user computing device or a server computing device.
- the computing device 50 includes a number of applications (e.g., applications 1 through N). Each application is in communication with a central intelligence layer.
- Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc.
- each application can communicate with the central intelligence layer (and model(s) stored therein) using an API (e.g., a common API across all applications).
- the central intelligence layer includes a number of machine-learned models. For example, as illustrated in FIG. 2C , a respective machine-learned model can be provided for each application and managed by the central intelligence layer. In other implementations, two or more applications can share a single machine-learned model. For example, in some implementations, the central intelligence layer can provide a single model for all of the applications. In some implementations, the central intelligence layer is included within or otherwise implemented by an operating system of the computing device 50 .
- the central intelligence layer can communicate with a central device data layer.
- the central device data layer can be a centralized repository of data for the computing device 50 . As illustrated in FIG. 2C , the central device data layer can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components. In some implementations, the central device data layer can communicate with each device component using an API (e.g., a private API).
- an API e.g., a private API
- the technology discussed herein makes reference to servers, databases, software applications, and other computer-based systems, as well as actions taken and information sent to and from such systems.
- the inherent flexibility of computer-based systems allows for a great variety of possible configurations, combinations, and divisions of tasks and functionality between and among components.
- processes discussed herein can be implemented using a single device or component or multiple devices or components working in combination.
- Databases and applications can be implemented on a single system or distributed across multiple systems. Distributed components can operate sequentially or in parallel.
Abstract
Provided are machine-learned attention models that feature omnidirectional processing, example implementations of which can be referred to as Omnidirectional Representations from Transformers (OMNINET). In example models described in the present disclosure, instead of maintaining a strictly horizontal receptive field, each token is allowed to attend to all tokens in some or all of the other tokens across the entire network.
Description
- This application claims priority to and the benefit of U.S. Provisional Patent Application Number 63/145,920, which is hereby incorporated by reference in its entirety.
- The present disclosure relates generally to machine learning. More particularly, the present disclosure relates to machine-learned attention models that feature omnidirectional processing.
- Various forms of machine learning models make use of attention mechanisms. Attention is a technique that mimics cognitive attention and can enhance the important parts of the input data while reducing the influence of portions of the data that are less relevant to the task at hand. As such, attention mechanisms can enable a computing system to devote more computing power to the small but important part of the data. Which part of the data is more important than others depends on the context and can in some instances be learned through training data by gradient descent.
- Attention mechanisms are used in a wide variety of machine learning models, including in natural language processing and computer vision. As one example, Transformer models (Vaswani et al., Attention is all you need. In Advances in neural information processing systems, pp. 5998-6008, 2017) make extensive use of attention mechanisms to achieve their expressive power. Computer vision systems based on convolutional neural networks can also benefit from attention mechanisms.
- One key defining characteristic of the self-attention mechanism is the global receptive field in which each token is accessible to every other token in the sequence, serving as an enabler for learning global contextual representations.
- Aspects and advantages of embodiments of the present disclosure will be set forth in part in the following description, or can be learned from the description, or can be learned through practice of the embodiments.
- One example aspect of the present disclosure is directed to a computing system for omnidirectional attention-based processing. The computing system includes: one or more processors; and one or more non-transitory computer-readable media that collectively store: a machine-learned multi-layer attention model that comprises a plurality of self-attention layers, wherein the multi-layer attention model is configured to process a first input to generate a first output; a machine-learned omnidirectional model configured to: receive a plurality of intermediate layer representations respectively generated at two or more of the plurality of self-attention layers of the machine-learned multi-layer attention model when processing the first input to generate the first output; and process the plurality of intermediate layer representations to generate a second output; and instructions that, when executed by the one or more processors, cause the computing system to perform operations. The operations include: providing the first input to the machine-learned multi-layer attention model to cause generation of the first output; and providing the plurality of intermediate layer representations respectively generated at the two or more of the plurality of self-attention layers of the machine-learned multi-layer attention model as input to the machine-learned omnidirectional model to cause generation of the second output.
- Another example aspect of the present disclosure is directed to one or more non-transitory computer-readable media that collectively store: a multi-layer attention model that comprises a plurality of self-attention layers, wherein the multi-layer attention model is configured to process a first input to generate a first output; a omnidirectional model configured to: receive a plurality of intermediate layer representations respectively generated at two or more of the plurality of self-attention layers of the multi-layer attention model when processing the first input to generate the first output; and process the plurality of intermediate layer representations to generate a second output; and instructions that, when executed, cause the computing system to perform operations. The operations include: providing the first input to the multi-layer attention model to cause generation of the first output; providing the plurality of intermediate layer representations respectively generated at the two or more of the plurality of self-attention layers of the multi-layer attention model as input to the machine-learned omnidirectional model to cause generation of the second output; evaluating a loss function to determine a loss value based at least in part on the second output; and training at least the omnidirectional model based at least in part on the loss function.
- Other aspects of the present disclosure are directed to various systems, apparatuses, methods, non-transitory computer-readable media, user interfaces, and electronic devices.
- These and other features, aspects, and advantages of various embodiments of the present disclosure will become better understood with reference to the following description and appended claims. The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate example embodiments of the present disclosure and, together with the description, serve to explain the related principles.
- Detailed discussion of embodiments directed to one of ordinary skill in the art is set forth in the specification, which makes reference to the appended figures, in which:
-
FIG. 1 provides a graphical overview of an example omnidirectional attention model according to example embodiments of the present disclosure. -
FIG. 2A depicts a block diagram of an example computing system according to example embodiments of the present disclosure. -
FIG. 2B depicts a block diagram of an example computing device according to example embodiments of the present disclosure. -
FIG. 2C depicts a block diagram of an example computing device according to example embodiments of the present disclosure. - Reference numerals that are repeated across plural figures are intended to identify the same features in various implementations.
- Generally, the present disclosure is directed to machine-learned attention models that feature omnidirectional processing, example implementations of which can be referred to as Omnidirectional Representations from Transformers (OMNINET). In example models described in the present disclosure, instead of maintaining a strictly horizontal receptive field, each token is allowed to attend to all tokens in some or all of the other tokens across the entire network.
- In some instance, this process can be interpreted as a form of extreme or intensive attention mechanism that has the receptive field of the entire width and depth of the network. To this end, according to an aspect of the present disclosure, the omnidirectional attention is learned via a meta-learner, which can in some implementations be another self-attention based model. According to another aspect of the present disclosure, in order to mitigate the computationally expensive costs of full receptive field attention, some example implementations of the present disclosure leverage efficient self-attention models such as kernel-based (Choromanski et al., 2020), low-rank attention (Wang et al., 2020) and/or Big Bird (Zaheer et al., 2020) as the meta-learner.
- Additionally, extensive experiments were conducted on autoregressive language modeling (LM1B, C4), Machine Translation, Long Range Arena (LRA) and Image Recognition, showing that example implementations of the OmniNet not only achieve considerable improvements when equipped with both sequence-based (1D) Transformers but also on image recognition (Vision Transformer) tasks. An example implementation of OmniNet also achieves state-of-the-art performance on LM1B, WMT′14 En-De/En-Fr and Long Range Arena.
- More particularly, this paper proposes learning omnidirectional representations from or for attention-based models such as transformers. Thus, the systems and methods provided herein move beyond horizontally global receptive fields and explore the possibilities of omnidirectional receptive fields. Stated differently, some example implementations allow each token to not only attend to all other tokens in the same hierarchy, but also some or all other tokens in the network (e.g., including at different levels or layers). This omnidirectional (e.g., global) access enables tokens to not only have a greater (e.g., full) view of the network (e.g., across different levels or layers) but also access the knowledge and intermediate representation of every token at each stage. By modeling the relationships amongst tokens of different hierarchical levels, example models described herein are also able to capture patterns pertaining to the propagation of representations across time. Finally, this can be also interpreted as a form of dense residual connection, which has shown to be beneficial by aiding gradient flow.
- Intuitively, learning omnidirectional receptive fields is non-trivial for two key reasons. Firstly, given the quadratic complexity of the scaled dot product attention, the complexity of designing such a receptive field is increased from N2L to (NL)2 where L is the depth of the network and N is the sequence length. This challenge has prohibited this type of architecture to be explored in the past. Secondly, simply enabling omnidirectional attention from the get-go would easily cause a degeneration of the base model into a flat network, losing much of its representation power that is enabled by sequentially refining its representations over the network hierarchy.
- To mitigate the above issues, some example omnidirectional attention models proposed herein can be implemented as a form of meta-learner that acts upon a standard transformer model. As one example, the meta-learner can itself be a self-attention model that accepts all hidden representations across some or all layers of the base model as an input and refines them based on all the available information. In order to mitigate the prohibitive memory and computational costs of omnidirectional attention, some example implementations leverage one or more of efficient alternatives of parameterizing the meta-learner, e.g., including fast attention via generalizable kernel attention (Choromanski et al., 2020), low-rank self-attention (Wang et al., 2020), and/or block-based sparsity (Zaheer et al., 2020). Additionally, employing methods that try to learn the low-rank factorized structure of the entire network can lead to improve generalization capabilities.
- Aside from varying the parameterization of the meta-learner, some example implementations of the present disclosure can also include partitioned variants of OmniNet in which the meta-learner is applied to subsets of the layers such as, for example, every consecutive p layers. For example, this partitioning strategy groups the full network of L layers into L/p partitions. After computing each partition, the meta-learner can learn the omnidirectional attention of some or all nodes across some or all layers in the partition.
- Additionally, extensive experiments empirically demonstrate that OmniNet achieves very promising results on a myriad of language, vision and synthetic tasks. Specifically, strong experimental results were obtained on autoregressive language modeling, five collections of WMT machine translation, Long Range Arena (Tay et al., 2020) and Image Recognition (both few-shot learning and fine-tuning fashion) using Vision Transformers (Dosovitskiy et al., 2020). On machine translation, OmniNet outperforms ADMIN (Liu et al., 2020), the current state-of-the-art 60 layer deep transformer model on two well-established machine translation collections (WMT′ 14 English-German and WMT′ 14 English-French). On the one billion language modeling benchmark, OmniNet outperforms existing state-of-the-art models such as Transformer-XL. On LRA, OmniNet improves Performers by +8:9% and vanilla Transformers by +2:6%.
- The systems and methods of the present disclosure provide a number of technical effects and benefits. As one example, the omnidirectional-attention mechanisms described herein can result in improved performance (e.g., greater accuracy) of machine-learned models at various tasks, including, for example, image processing or analysis tasks and/or natural language processing or analysis tasks. Thus, the proposed omnidirectional-attention mechanisms can enable an improvement in the performance of a computing system.
- As another example technical effect, the omnidirectional-attention mechanisms described herein can enable machine-learned models to maintain a same level of performance while reducing the number of parameters included in the model. Reducing the number of parameters can result in improved conservation of computing resources such as processor usage, memory usage, network bandwidth, etc. For example, a model with the omnidirectional-attention mechanisms described herein may achieve the same performance as a larger model that does not have the omnidirectional-attention mechanisms described herein. Therefore, the model with the omnidirectional-attention mechanisms described herein can be stored using less memory consumption.
- As another example technical effect, the omnidirectional-attention mechanisms described herein can enable the size (e.g., in number of parameters, layers, etc.) of the machine-learned multi-layer model to be reduced (e.g., relative to a same style of model that has not been trained using the omnidirectional-attention mechanisms described herein). A reduction in size can result in less consumption of memory, faster run time, and/or other computational benefits.
-
FIG. 1 provides a graphical overview of an example omnidirectional attention model according to example embodiments of the present disclosure.FIG. 1 depicts a machine-learnedmulti-layer model 12 that contains a plurality of layers. As one example, the machine-learnedmulti-layer model 12 can be a multi-layer attention model and one or more of a plurality of layers of themodel 12 can be attention-based layers such as self-attention layers such as multi-headed self-attention layers. In one example, the machine-learnedmulti-layer model 12 is a Transformer model. In another example, the machine-learnedmulti-layer model 12 is a multi-layer neural network. Although four layers are shown, any number of layers can be included in themodel 12. - The
multi-layer model 12 can be configured to process afirst input 16 to generate afirst output 17. For example, thefirst input 16 can be sequential in nature. Thefirst output 17 can be sequential in nature or can be a single output. As examples, thefirst input 16 can include a natural language input (e.g., tokens for text) and/or an image input. - Furthermore, as a result of processing the
first input 16 to generate thefirst output 17, the machine-learnedmulti-layer model 12 can generate a plurality of intermediate layer representations (e.g., 18, 20, and 22) at the plurality of layers of the machine-learnedmulti-layer model 12. -
FIG. 1 also depicts a machine-learnedomnidirectional model 14 which is configured to receive the intermediate layer representations (e.g., 18, 20, and 22) from two or more of the plurality of layers of the machine-learnedmulti-layer model 12. The machine-learnedomnidirectional model 14 can process the plurality of intermediate layer representations (e.g., 18, 20, and 22) to generate asecond output 24. Thesecond output 24 can be sequential in nature or can be a single output. - In some implementations, for example as shown in
FIG. 1 , theomnidirectional model 14 can receive all of theintermediate layer representations model 12 to model 14. In some examples, the intermediate representations ofmodel 12 can be partitioned into one or more batches or partitions and separately provided to themodel 14 for separate processing by themodel 14. - As one example, the machine-learned
omnidirectional model 14 itself can be a multi-layer attention model and one or more of a plurality of layers of themodel 14 can be attention-based layers such as self-attention layers such as multi-headed self-attention layers. In one example, the machine-learnedomnidirectional model 14 is a Transformer model. In another example, the machine-learnedomnidirectional model 14 is a multi-layer neural network. Although two layers are shown, any number of layers can be included in themodel 14. - In some implementations, at least one of the one or more self-attention layers of the machine-learned
omnidirectional model 14 performs kernel-based attention. In some implementations, at least one of the one or more self-attention layers of the machine-learnedomnidirectional model 14 performs low-rank attention in which low-rank projection transformations are shared across a plurality of heads or a plurality of key and value parameters. In some implementations, at least one of the one or more self-attention layers of the machine-learnedomnidirectional model 14 performs block and memory-based attention in which attention is performed within a neighborhood. - In some implementations, providing the plurality of intermediate layer representations (e.g., 18, 20, 22) as input to the machine-learned
omnidirectional model 14 can include performing an index sorting operation to sort tokens within each intermediate layer representation according to index (e.g., token index). As described above, in some implementations, providing the plurality of intermediate layer representations (e.g., 18, 20, 22) as input to the machine-learnedomnidirectional model 14 can include separately obtaining respective intermediate layer representations from a plurality of different partitions of the two or more of the plurality of layers plurality of self-attention layers of the machine-learned multi-layer attention model and separately inputting the respective intermediate layer representations from the plurality of different partitions into the machine-learned omnidirectional model. - In some implementations, a final output can be determined based at least in part on the
first output 17 and thesecond output 24. For example, thefirst output 17 and thesecond output 24 can be summed to produce the final output. In some implementations, a pooling function (e.g., a max pool) can be applied to the second output. - In some implementations, a computing system can evaluate a loss function to determine a loss value based at least in part on the
first output 17, thesecond output 24, and/or a final output generated from thefirst output 17 and/or thesecond output 24. The computing system can train themulti-layer model 12 and/or theomnidirectional model 24 based at least in part on the loss function. For example, the computing system can jointly train (e.g., via joint backpropagation of a gradient of the loss function) both themulti-layer model 12 and theomnidirectional model 14 based at least in part on the loss function. - In some implementations, at inference time, both
models model 14,model 12 can be used at inference time alone (e.g., without model 14). However, due to having been trained jointly withmodel 14,model 12 can still provide improved inferences or predictions (e.g., relative to a model that has not be so jointly trained). - This section introduces example implementations of OmniNet. This section first begins by reviewing the standard Transformer architecture.
- This section provides a brief background for the Transformer architecture. The Transformer block accepts N×d input, where N denotes the number of tokens in the sequence and d denotes the size of the representation. Each Transformer block is characterized by a self-attention block and a two layered feed-forward network with ReLU activations in-between that is applied position-wise.
- The self-attention mechanism first projects each input X into Q, K, V representations using linear transformations, corresponding to queries, keys, and values. The self-attention mechanism is typically multi-headed where multiple similar linear projections are executed in parallel. The output of each self-attention head h at layer l is written as:
-
- where yh,l is the output of head h at layer l and dk is the size of each head. The output from the multiple heads is then concatenated and then passed through another linear transformation via Wo,l which projects the concatenation of all heads down to dm. This is wrapped via a layer normalization followed by a residual connection and can be written as:
-
LayerNorm(W o,lconcat([y 1,l . . . y H,l)))+x l−1 - as the final output of the self-attention module. Feed Forward Layers
- The FFN block of the Transformer block performs a two layer transformation defined as:
-
z l=LayerNorm(W 1,lReLU (W 2,l(Y)))+z l−1, (2) - where W1, W2 are trainable parameters (weight transforms) of the FFN layer. Bias parameters are omitted for clarity.
- The proposed OmniNet method can operate on an arbitrary multi-layered architecture that accepts sequential inputs. In our description, this typically refers to a stacked X-former architecture in this section. Note that while this is typically a transformer model, it can also be an arbitrary variant.
- In a stacked network of L layers, each layer exposes a sequence of N vectors of d dimensions each. Specifically, OmniNet operates across all layers and connects the multi-layered network architecture in a grid like fashion. We describe the network as xformer which accepts X as an input and returns a tensor of L×N×d dimensions.
-
xformer(X)=X 1, X2 . . . X L, (3) -
O=Attend(IndexSort(X 1 , X 2 , . . . X L)), (4) - where Attend denotes an arbitrary self-attention block. The IndexSort operation takes X1, X2, XL and sorts, tokens within each matrix by index such that the adjacent token of the ith token in layer l are the ith token from l−1 and l+1 respectively. Since attention is permutation invariant this sorting simply makes it easier to (1) compute casual masks and (2) aggregate representations index-wise. Next, given that the input sequence length is LN, it is advantageous for Attend to be as efficient as possible. The next sections describe three example variants of OmniNet's core linear-time self-attention mechanism in subsequent sections.
-
-
O′=MaxPool1D(O), (5) - Given O′, the final representation of an OmniNet augmented network is defined as:
-
OmniNet(X)=xformer(X)L +O′. (6) - The OmniNet and main transformer model can in some implementations be trained together in an end-to-end fashion, i.e., gradients flow to both networks concurrently at each backward pass.
- A key point to note with IndexSort is that this order enables us to apply a causal mask to the Attend function, namely if tokens are sorted according to sequence index first as opposed to layer first, then it would be easy to apply a causal mask M, where M[i,j]=0 when i≤j and −inf when i>j. This enables OmniNet to be used in autoregressive settings.
- The following subsections describe several choices of linear-time self-attention mechanisms that can be used in OmniNet's omnidirectional attention. Generally, Attend refers to an attention block with an attention function and a two-layered positional FFN in a similar structure to the transformer backbone.
- This variant uses the generalizable kernel attention. Specifically, this is written as:
-
o=W oconcat({circumflex over (D)} h −1 (ϕ(Q h)(ϕ(K h))T V h)), - In this example, Attend can be set as follows:
-
- Another example includes a block and memory-based variant of efficient Transformers. In short, this is a combination of windowed attention, global attention, and sparse attention. The output for token i is defined as:
-
- where N(i) is the neighborhood function which denotes the out-neighbors of node i, H is the total number of heads and h represents a head. The neighborhood function is mainly dependent on the width of the windowed attention.
- This section describes example types of partitioning variants that can be used in OmniNet. When L is large, the eventual representation input to OmniNet can be extremely large. For example, a sequence length of 1K would result in a 11K input sequence length for a 12 layered Transformer model, when using an omnidirectional layer as the final layer.
-
-
-
-
FIG. 2A depicts a block diagram of anexample computing system 100 according to example embodiments of the present disclosure. Thesystem 100 includes auser computing device 102, aserver computing system 130, and atraining computing system 150 that are communicatively coupled over anetwork 180. - The
user computing device 102 can be any type of computing device, such as, for example, a personal computing device (e.g., laptop or desktop), a mobile computing device (e.g., smartphone or tablet), a gaming console or controller, a wearable computing device, an embedded computing device, or any other type of computing device. - The
user computing device 102 includes one ormore processors 112 and amemory 114. The one ormore processors 112 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, an FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected. Thememory 114 can include one or more non-transitory computer-readable storage media, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof. Thememory 114 can storedata 116 andinstructions 118 which are executed by theprocessor 112 to cause theuser computing device 102 to perform operations. - In some implementations, the
user computing device 102 can store or include one or more machine-learnedmodels 120. For example, the machine-learnedmodels 120 can be or can otherwise include various machine-learned models such as neural networks (e.g., deep neural networks) or other types of machine-learned models, including non-linear models and/or linear models. Neural networks can include feed-forward neural networks, recurrent neural networks (e.g., long short-term memory recurrent neural networks), convolutional neural networks or other forms of neural networks. Some example machine-learned models can leverage an attention mechanism such as self-attention. For example, some example machine-learned models can include multi-headed self-attention models (e.g., transformer models). Example machine-learnedmodels 120 are discussed with reference toFIG. 1 . - In some implementations, the one or more machine-learned
models 120 can be received from theserver computing system 130 overnetwork 180, stored in the usercomputing device memory 114, and then used or otherwise implemented by the one ormore processors 112. In some implementations, theuser computing device 102 can implement multiple parallel instances of a single machine-learnedmodel 120. - Additionally or alternatively, one or more machine-learned
models 140 can be included in or otherwise stored and implemented by theserver computing system 130 that communicates with theuser computing device 102 according to a client-server relationship. For example, the machine-learnedmodels 140 can be implemented by theserver computing system 140 as a portion of a web service. Thus, one ormore models 120 can be stored and implemented at theuser computing device 102 and/or one ormore models 140 can be stored and implemented at theserver computing system 130. - The
user computing device 102 can also include one or moreuser input components 122 that receives user input. For example, theuser input component 122 can be a touch-sensitive component (e.g., a touch-sensitive display screen or a touch pad) that is sensitive to the touch of a user input object (e.g., a finger or a stylus). The touch-sensitive component can serve to implement a virtual keyboard. Other example user input components include a microphone, a traditional keyboard, or other means by which a user can provide user input. - The
server computing system 130 includes one ormore processors 132 and amemory 134. The one ormore processors 132 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, an FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected. Thememory 134 can include one or more non-transitory computer-readable storage media, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof. Thememory 134 can storedata 136 andinstructions 138 which are executed by theprocessor 132 to cause theserver computing system 130 to perform operations. - In some implementations, the
server computing system 130 includes or is otherwise implemented by one or more server computing devices. In instances in which theserver computing system 130 includes plural server computing devices, such server computing devices can operate according to sequential computing architectures, parallel computing architectures, or some combination thereof. - As described above, the
server computing system 130 can store or otherwise include one or more machine-learnedmodels 140. For example, themodels 140 can be or can otherwise include various machine-learned models. Example machine-learned models include neural networks or other multi-layer non-linear models. Example neural networks include feed forward neural networks, deep neural networks, recurrent neural networks, and convolutional neural networks. Some example machine-learned models can leverage an attention mechanism such as self-attention. For example, some example machine-learned models can include multi-headed self-attention models (e.g., transformer models). - The
user computing device 102 and/or theserver computing system 130 can train themodels 120 and/or 140 via interaction with thetraining computing system 150 that is communicatively coupled over thenetwork 180. Thetraining computing system 150 can be separate from theserver computing system 130 or can be a portion of theserver computing system 130. - The
training computing system 150 includes one ormore processors 152 and amemory 154. The one ormore processors 152 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, an FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected. Thememory 154 can include one or more non-transitory computer-readable storage media, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof. Thememory 154 can storedata 156 andinstructions 158 which are executed by theprocessor 152 to cause thetraining computing system 150 to perform operations. In some implementations, thetraining computing system 150 includes or is otherwise implemented by one or more server computing devices. - The
training computing system 150 can include amodel trainer 160 that trains the machine-learnedmodels 120 and/or 140 stored at theuser computing device 102 and/or theserver computing system 130 using various training or learning techniques, such as, for example, backwards propagation of errors. For example, a loss function can be backpropagated through the model(s) to update one or more parameters of the model(s) (e.g., based on a gradient of the loss function). Various loss functions can be used such as mean squared error, likelihood loss, cross entropy loss, hinge loss, and/or various other loss functions. Gradient descent techniques can be used to iteratively update the parameters over a number of training iterations. - In some implementations, performing backwards propagation of errors can include performing truncated backpropagation through time. The
model trainer 160 can perform a number of generalization techniques (e.g., weight decays, dropouts, etc.) to improve the generalization capability of the models being trained. - In particular, the
model trainer 160 can train the machine-learnedmodels 120 and/or 140 based on a set oftraining data 162. In some implementations, if the user has provided consent, the training examples can be provided by theuser computing device 102. Thus, in such implementations, themodel 120 provided to theuser computing device 102 can be trained by thetraining computing system 150 on user-specific data received from theuser computing device 102. In some instances, this process can be referred to as personalizing the model. - The
model trainer 160 includes computer logic utilized to provide desired functionality. Themodel trainer 160 can be implemented in hardware, firmware, and/or software controlling a general purpose processor. For example, in some implementations, themodel trainer 160 includes program files stored on a storage device, loaded into a memory and executed by one or more processors. In other implementations, themodel trainer 160 includes one or more sets of computer-executable instructions that are stored in a tangible computer-readable storage medium such as RAM, hard disk, or optical or magnetic media. - The
network 180 can be any type of communications network, such as a local area network (e.g., intranet), wide area network (e.g., Internet), or some combination thereof and can include any number of wired or wireless links. In general, communication over thenetwork 180 can be carried via any type of wired and/or wireless connection, using a wide variety of communication protocols (e.g., TCP/IP, HTTP, SMTP, FTP), encodings or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL). - The machine-learned models described in this specification may be used in a variety of tasks, applications, and/or use cases.
- In some implementations, the input to the machine-learned model(s) of the present disclosure can be image data. The machine-learned model(s) can process the image data to generate an output. As an example, the machine-learned model(s) can process the image data to generate an image recognition output (e.g., a recognition of the image data, a latent embedding of the image data, an encoded representation of the image data, a hash of the image data, etc.). As another example, the machine-learned model(s) can process the image data to generate an image segmentation output. As another example, the machine-learned model(s) can process the image data to generate an image classification output. As another example, the machine-learned model(s) can process the image data to generate an image data modification output (e.g., an alteration of the image data, etc.). As another example, the machine-learned model(s) can process the image data to generate an encoded image data output (e.g., an encoded and/or compressed representation of the image data, etc.). As another example, the machine-learned model(s) can process the image data to generate an upscaled image data output. As another example, the machine-learned model(s) can process the image data to generate a prediction output.
- In some implementations, the input to the machine-learned model(s) of the present disclosure can be text or natural language data. The machine-learned model(s) can process the text or natural language data to generate an output. As an example, the machine-learned model(s) can process the natural language data to generate a language encoding output. As another example, the machine-learned model(s) can process the text or natural language data to generate a latent text embedding output. As another example, the machine-learned model(s) can process the text or natural language data to generate a translation output. As another example, the machine-learned model(s) can process the text or natural language data to generate a classification output. As another example, the machine-learned model(s) can process the text or natural language data to generate a textual segmentation output. As another example, the machine-learned model(s) can process the text or natural language data to generate a semantic intent output. As another example, the machine-learned model(s) can process the text or natural language data to generate an upscaled text or natural language output (e.g., text or natural language data that is higher quality than the input text or natural language, etc.). As another example, the machine-learned model(s) can process the text or natural language data to generate a prediction output.
- In some implementations, the input to the machine-learned model(s) of the present disclosure can be speech data. The machine-learned model(s) can process the speech data to generate an output. As an example, the machine-learned model(s) can process the speech data to generate a speech recognition output. As another example, the machine-learned model(s) can process the speech data to generate a speech translation output. As another example, the machine-learned model(s) can process the speech data to generate a latent embedding output. As another example, the machine-learned model(s) can process the speech data to generate an encoded speech output (e.g., an encoded and/or compressed representation of the speech data, etc.). As another example, the machine-learned model(s) can process the speech data to generate an upscaled speech output (e.g., speech data that is higher quality than the input speech data, etc.). As another example, the machine-learned model(s) can process the speech data to generate a textual representation output (e.g., a textual representation of the input speech data, etc.). As another example, the machine-learned model(s) can process the speech data to generate a prediction output.
- In some implementations, the input to the machine-learned model(s) of the present disclosure can be latent encoding data (e.g., a latent space representation of an input, etc.). The machine-learned model(s) can process the latent encoding data to generate an output. As an example, the machine-learned model(s) can process the latent encoding data to generate a recognition output. As another example, the machine-learned model(s) can process the latent encoding data to generate a reconstruction output. As another example, the machine-learned model(s) can process the latent encoding data to generate a search output. As another example, the machine-learned model(s) can process the latent encoding data to generate a reclustering output. As another example, the machine-learned model(s) can process the latent encoding data to generate a prediction output.
- In some implementations, the input to the machine-learned model(s) of the present disclosure can be statistical data. The machine-learned model(s) can process the statistical data to generate an output. As an example, the machine-learned model(s) can process the statistical data to generate a recognition output. As another example, the machine-learned model(s) can process the statistical data to generate a prediction output. As another example, the machine-learned model(s) can process the statistical data to generate a classification output. As another example, the machine-learned model(s) can process the statistical data to generate a segmentation output. As another example, the machine-learned model(s) can process the statistical data to generate a visualization output. As another example, the machine-learned model(s) can process the statistical data to generate a diagnostic output.
- In some implementations, the input to the machine-learned model(s) of the present disclosure can be sensor data. The machine-learned model(s) can process the sensor data to generate an output. As an example, the machine-learned model(s) can process the sensor data to generate a recognition output. As another example, the machine-learned model(s) can process the sensor data to generate a prediction output. As another example, the machine-learned model(s) can process the sensor data to generate a classification output. As another example, the machine-learned model(s) can process the sensor data to generate a segmentation output. As another example, the machine-learned model(s) can process the sensor data to generate a visualization output. As another example, the machine-learned model(s) can process the sensor data to generate a diagnostic output. As another example, the machine-learned model(s) can process the sensor data to generate a detection output.
- In some cases, the machine-learned model(s) can be configured to perform a task that includes encoding input data for reliable and/or efficient transmission or storage (and/or corresponding decoding). For example, the task may be audio compression task. The input may include audio data and the output may comprise compressed audio data. In another example, the input includes visual data (e.g. one or more image or videos), the output comprises compressed visual data, and the task is a visual data compression task. In another example, the task may comprise generating an embedding for input data (e.g. input audio or visual data).
- In some cases, the input includes visual data and the task is a computer vision task. In some cases, the input includes pixel data for one or more images and the task is an image processing task. For example, the image processing task can be image classification, where the output is a set of scores, each score corresponding to a different object class and representing the likelihood that the one or more images depict an object belonging to the object class. The image processing task may be object detection, where the image processing output identifies one or more regions in the one or more images and, for each region, a likelihood that region depicts an object of interest. As another example, the image processing task can be image segmentation, where the image processing output defines, for each pixel in the one or more images, a respective likelihood for each category in a predetermined set of categories. For example, the set of categories can be foreground and background. As another example, the set of categories can be object classes. As another example, the image processing task can be depth estimation, where the image processing output defines, for each pixel in the one or more images, a respective depth value. As another example, the image processing task can be motion estimation, where the network input includes multiple images, and the image processing output defines, for each pixel of one of the input images, a motion of the scene depicted at the pixel between the images in the network input.
- In some cases, the input includes audio data representing a spoken utterance and the task is a speech recognition task. The output may comprise a text output which is mapped to the spoken utterance. In some cases, the task comprises encrypting or decrypting input data. In some cases, the task comprises a microprocessor performance task, such as branch prediction or memory address translation.
-
FIG. 2A illustrates one example computing system that can be used to implement the present disclosure. Other computing systems can be used as well. For example, in some implementations, theuser computing device 102 can include themodel trainer 160 and thetraining dataset 162. In such implementations, themodels 120 can be both trained and used locally at theuser computing device 102. In some of such implementations, theuser computing device 102 can implement themodel trainer 160 to personalize themodels 120 based on user-specific data. -
FIG. 2B depicts a block diagram of anexample computing device 10 that performs according to example embodiments of the present disclosure. Thecomputing device 10 can be a user computing device or a server computing device. - The
computing device 10 includes a number of applications (e.g.,applications 1 through N). Each application contains its own machine learning library and machine-learned model(s). For example, each application can include a machine-learned model. Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc. - As illustrated in
FIG. 2B , each application can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components. In some implementations, each application can communicate with each device component using an API (e.g., a public API). In some implementations, the API used by each application is specific to that application. -
FIG. 2C depicts a block diagram of anexample computing device 50 that performs according to example embodiments of the present disclosure. Thecomputing device 50 can be a user computing device or a server computing device. - The
computing device 50 includes a number of applications (e.g.,applications 1 through N). Each application is in communication with a central intelligence layer. Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc. In some implementations, each application can communicate with the central intelligence layer (and model(s) stored therein) using an API (e.g., a common API across all applications). - The central intelligence layer includes a number of machine-learned models. For example, as illustrated in
FIG. 2C , a respective machine-learned model can be provided for each application and managed by the central intelligence layer. In other implementations, two or more applications can share a single machine-learned model. For example, in some implementations, the central intelligence layer can provide a single model for all of the applications. In some implementations, the central intelligence layer is included within or otherwise implemented by an operating system of thecomputing device 50. - The central intelligence layer can communicate with a central device data layer. The central device data layer can be a centralized repository of data for the
computing device 50. As illustrated inFIG. 2C , the central device data layer can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components. In some implementations, the central device data layer can communicate with each device component using an API (e.g., a private API). - The technology discussed herein makes reference to servers, databases, software applications, and other computer-based systems, as well as actions taken and information sent to and from such systems. The inherent flexibility of computer-based systems allows for a great variety of possible configurations, combinations, and divisions of tasks and functionality between and among components. For instance, processes discussed herein can be implemented using a single device or component or multiple devices or components working in combination. Databases and applications can be implemented on a single system or distributed across multiple systems. Distributed components can operate sequentially or in parallel.
- While the present subject matter has been described in detail with respect to various specific example embodiments thereof, each example is provided by way of explanation, not limitation of the disclosure. Those skilled in the art, upon attaining an understanding of the foregoing, can readily produce alterations to, variations of, and equivalents to such embodiments. Accordingly, the subject disclosure does not preclude inclusion of such modifications, variations and/or additions to the present subject matter as would be readily apparent to one of ordinary skill in the art. For instance, features illustrated or described as part of one embodiment can be used with another embodiment to yield a still further embodiment. Thus, it is intended that the present disclosure cover such alterations, variations, and equivalents.
Claims (20)
1. A computing system for omnidirectional attention-based processing, the computing system comprising:
one or more processors; and
one or more non-transitory computer-readable media that collectively store:
a machine-learned multi-layer attention model that comprises a plurality of self-attention layers, wherein the multi-layer attention model is configured to process a first input to generate a first output;
a machine-learned omnidirectional model configured to:
receive a plurality of intermediate layer representations respectively generated at two or more of the plurality of self-attention layers of the machine-learned multi-layer attention model when processing the first input to generate the first output; and
process the plurality of intermediate layer representations to generate a second output; and
instructions that, when executed by the one or more processors, cause the computing system to perform operations, the operations comprising:
providing the first input to the machine-learned multi-layer attention model to cause generation of the first output;
providing the plurality of intermediate layer representations respectively generated at the two or more of the plurality of self-attention layers of the machine-learned multi-layer attention model as input to the machine-learned omnidirectional model to cause generation of the second output.
2. The computing system of claim 1 , wherein the machine-learned omnidirectional model comprises one or more self-attention layers.
3. The computing system of claim 2 , wherein at least one of the one or more self-attention layers of the machine-learned omnidirectional model performs kernel-based attention.
4. The computing system of claim 2 , wherein at least one of the one or more self-attention layers of the machine-learned omnidirectional model performs low-rank attention in which low-rank projection transformations are shared across a plurality of heads or a plurality of key and value parameters.
5. The computing system of claim 2 , wherein at least one of the one or more self-attention layers of the machine-learned omnidirectional model performs block and memory-based attention in which attention is performed within a neighborhood.
6. The computing system of claim 1 , wherein providing the plurality of intermediate layer representations as input to the machine-learned omnidirectional model comprises:
performing an index sorting operation to sort tokens within each intermediate layer representation according to index.
7. The computing system of claim 1 , wherein providing the plurality of intermediate layer representations as input to the machine-learned omnidirectional model comprises:
separately obtaining respective intermediate layer representations from a plurality of different partitions of the two or more of the plurality of layers plurality of self-attention layers of the machine-learned multi-layer attention model; and
separately inputting the respective intermediate layer representations from the plurality of different partitions into the machine-learned omnidirectional model.
8. The computing system of claim 1 , wherein the operations further comprise applying a pooling function to the second output.
9. The computing system of claim 1 , wherein the operations further comprise determining a final output based at least in part on the first output and the second output.
10. The computing system of claim 1 , wherein the machine-learned multi-layer attention model comprises a transformer model.
11. The computing system of claim 1 , wherein the first input comprises a natural language input or an image input.
12. One or more non-transitory computer-readable media that collectively store:
a multi-layer attention model that comprises a plurality of self-attention layers, wherein the multi-layer attention model is configured to process a first input to generate a first output;
a omnidirectional model configured to:
receive a plurality of intermediate layer representations respectively generated at two or more of the plurality of self-attention layers of the multi-layer attention model when processing the first input to generate the first output; and
process the plurality of intermediate layer representations to generate a second output; and
instructions that, when executed, cause the computing system to perform operations, the operations comprising:
providing the first input to the multi-layer attention model to cause generation of the first output;
providing the plurality of intermediate layer representations respectively generated at the two or more of the plurality of self-attention layers of the multi-layer attention model as input to the machine-learned omnidirectional model to cause generation of the second output;
evaluating a loss function to determine a loss value based at least in part on the second output; and
training at least the omnidirectional model based at least in part on the loss function.
13. The one or more non-transitory computer-readable media of claim 12 , wherein training at least the omnidirectional model based at least in part on the loss function comprises jointly training both the multi-layer attention model and the omnidirectional model based at least in part on the loss function.
14. The one or more non-transitory computer-readable media of claim 12 , wherein, wherein the omnidirectional model comprises one or more self-attention layers.
15. The one or more non-transitory computer-readable media of claim 12 , wherein the first input comprises an image.
16. A computing system for omnidirectional attention-based processing, the computing system comprising:
one or more processors; and
one or more non-transitory computer-readable media that collectively store:
a machine-learned omnidirectional model configured to:
receive a plurality of intermediate layer representations respectively generated by two or more of a plurality of self-attention layers of a machine-learned multi-layer attention model when processing a first input to generate a first output; and
process the plurality of intermediate layer representations to generate a second output; and
instructions that, when executed by the one or more processors, cause the computing system to perform operations, the operations comprising:
providing the first input to the machine-learned multi-layer attention model to cause generation of the first output;
providing the plurality of intermediate layer representations respectively generated at the two or more of the plurality of self-attention layers of the machine-learned multi-layer attention model as input to the machine-learned omnidirectional model to cause generation of the second output.
17. The computing system of claim 16 , wherein the machine-learned omnidirectional model comprises one or more self-attention layers.
18. The computing system of claim 17 , wherein at least one of the one or more self-attention layers of the machine-learned omnidirectional model performs kernel-based attention.
19. The computing system of claim 17 , wherein at least one of the one or more self-attention layers of the machine-learned omnidirectional model performs low-rank attention in which low-rank projection transformations are shared across a plurality of heads or a plurality of key and value parameters.
20. The computing system of claim 17 , wherein at least one of the one or more self-attention layers of the machine-learned omnidirectional model performs block and memory-based attention in which attention is performed within a neighborhood.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US17/592,796 US20220245428A1 (en) | 2021-02-04 | 2022-02-04 | Machine-Learned Attention Models Featuring Omnidirectional Processing |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US202163145920P | 2021-02-04 | 2021-02-04 | |
US17/592,796 US20220245428A1 (en) | 2021-02-04 | 2022-02-04 | Machine-Learned Attention Models Featuring Omnidirectional Processing |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US63145920 Continuation | 2021-02-04 |
Publications (1)
Publication Number | Publication Date |
---|---|
US20220245428A1 true US20220245428A1 (en) | 2022-08-04 |
Family
ID=81673589
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US17/592,796 Pending US20220245428A1 (en) | 2021-02-04 | 2022-02-04 | Machine-Learned Attention Models Featuring Omnidirectional Processing |
Country Status (2)
Country | Link |
---|---|
US (1) | US20220245428A1 (en) |
CN (1) | CN114548423A (en) |
-
2022
- 2022-02-04 US US17/592,796 patent/US20220245428A1/en active Pending
- 2022-02-07 CN CN202210115892.4A patent/CN114548423A/en active Pending
Also Published As
Publication number | Publication date |
---|---|
CN114548423A (en) | 2022-05-27 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
KR102071582B1 (en) | Method and apparatus for classifying a class to which a sentence belongs by using deep neural network | |
Ghorbani et al. | ConvLSTMConv network: a deep learning approach for sentiment analysis in cloud computing | |
CN116888602A (en) | Interpretable transducer | |
CN106973244A (en) | Using it is Weakly supervised for image match somebody with somebody captions | |
CN114514540A (en) | Contrast pre-training of language tasks | |
Bagherzadeh et al. | A review of various semi-supervised learning models with a deep learning and memory approach | |
EP4033412A2 (en) | Method and apparatus with neural network training | |
US20240112088A1 (en) | Vector-Quantized Image Modeling | |
US11475236B2 (en) | Minimum-example/maximum-batch entropy-based clustering with neural networks | |
WO2022072801A2 (en) | Systems and methods for training dual-mode machine-learned speech recognition models | |
US20210227223A1 (en) | System and methods for artificial intelligence explainability via symbolic generative modeling | |
US20230401382A1 (en) | Dynamic Language Models for Continuously Evolving Content | |
Burkhardt et al. | Rule extraction from binary neural networks with convolutional rules for model validation | |
Xia | An overview of deep learning | |
US20220245428A1 (en) | Machine-Learned Attention Models Featuring Omnidirectional Processing | |
CN115186825A (en) | Full attention with sparse computational cost | |
CN117980915A (en) | Contrast learning and masking modeling for end-to-end self-supervised pre-training | |
US20220245432A1 (en) | Machine-Learned Attention Models Featuring Echo-Attention Layers | |
US11755883B2 (en) | Systems and methods for machine-learned models having convolution and attention | |
US20240119713A1 (en) | Channel Fusion for Vision-Language Representation Learning | |
US20230112862A1 (en) | Leveraging Redundancy in Attention with Reuse Transformers | |
US20230229886A1 (en) | Modeling of Long-Range Interactions with Reduced Feature Materialization via Lambda Functions | |
US20240135187A1 (en) | Method for Training Large Language Models to Perform Query Intent Classification | |
Xu et al. | Unsupervised disentanglement learning via dirichlet variational autoencoder | |
US20220245917A1 (en) | Systems and methods for nearest-neighbor prediction based machine learned models |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:TAY, YI;JUAN, DA-CHENG;BAHRI, DARA;AND OTHERS;SIGNING DATES FROM 20211230 TO 20220103;REEL/FRAME:059010/0723 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |