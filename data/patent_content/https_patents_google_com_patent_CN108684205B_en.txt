CN108684205B - Method and system for processing digital components - Google Patents
Method and system for processing digital components Download PDFInfo
- Publication number
- CN108684205B CN108684205B CN201780001377.0A CN201780001377A CN108684205B CN 108684205 B CN108684205 B CN 108684205B CN 201780001377 A CN201780001377 A CN 201780001377A CN 108684205 B CN108684205 B CN 108684205B
- Authority
- CN
- China
- Prior art keywords
- digital component
- request
- sdk
- response
- application
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/451—Execution arrangements for user interfaces
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/602—Providing cryptographic facilities or services
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/54—Interprogram communication
- G06F9/547—Remote procedure calls [RPC]; Web services
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q30/00—Commerce
- G06Q30/018—Certifying business or products
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/34—Network arrangements or protocols for supporting network services or applications involving the movement of software or configuration parameters
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/50—Network services
- H04L67/53—Network services using third party service providers
Abstract
Methods, systems, and apparatus, including computer programs encoded on a computer storage medium, for processing requests for digital components. A method includes receiving, from a client device, requests for digital components generated by a first SDK installed at the client device, examining, by a server, data fields of the requests, generating, by the server, real-time requests, and transmitting, by the server, each real-time request to a third-party digital component provider. The method also includes receiving, by the server, a response to the real-time request from the third-party digital component provider, in response to the request for the digital component, selecting, by the server, a particular response for transmission to the client device, and transmitting, by the server, the particular response to the first SDK with instructions specifying which SDK needs to be installed at the client device to render the digital component included in the particular response.
Description
Technical Field
This specification relates to processing digital components.
Background
The internet facilitates the exchange of information between users across the globe. This exchange of information enables processing of requests for content such as digital components. In some cases, the content may be called by a source of demand to render the content at the client device.
Disclosure of Invention
In some implementations, a method of the present disclosure includes processing a request for rendering a digital component at a client device. For example, the methods may include receiving a request for a digital component from a Software Development Kit (SDK) installed at a client device. The SDK may be a set of software development tools that enable the creation of applications for a particular platform of a client device. The SDK may include source code, development tools, emulators, libraries, etc. to build applications for a particular platform. The request may be examined by one or more servers to identify an application that initiated the request at the client device. The server may be configured to generate the real-time request based on a request from the SDK for the digital component. Each real-time request may include information such as a set of other SDKs installed in the identified application. The real-time request may be transmitted to the third party digital component provider within a particular amount of time after receiving the initial request from the client device. The real-time request may be transmitted to the third party digital component provider serially, in parallel, or any combination thereof. Further, the initial request may indicate an amount of time in which the digital component needs to be provided to the client device. In response to transmitting the real-time request for the digital component to the third party digital component provider, the server may be configured to receive a response from the third party digital component provider. The server may also be configured to select a particular response to transmit to the client device in order to satisfy the initial request from the client device. In some aspects, the specific response may include the digital component and an instruction specifying a certain SDK installed at the client device to render the digital component.
One innovative aspect of the subject matter described in this specification is embodied in methods that include the actions of: receiving, from a client device, a request for a digital component generated by a first Software Development Kit (SDK) installed at the client device; examining, by one or more custom digital component servers, one or more data fields of the request, comprising: identifying, within the one or more data fields, application data that specifies an application that initiated the request at the client device; generating, by one or more servers, a plurality of real-time requests, comprising: identifying a set of SDKs installed in an application based on a mapping of application data to installed SDKs in a data structure, the application initiating a request at a client device; including in each real-time request data specifying the set of SDKs installed in the application that originated the request at the client device; transmitting, by one or more servers over a network, each real-time request to a respective third-party digital component provider; and receiving, by the one or more servers, a set of responses to the plurality of real-time requests from the respective third-party digital component providers; selecting, by the one or more servers in response to the request for the digital component, a particular response from the set of responses to transmit to the client device; and transmitting, by the one or more servers, the particular response to the first SDK with instructions specifying which SDK needs to be installed at the client device to render the digital component included in the particular response.
Other implementations of this and other aspects include corresponding systems, apparatus, and computer programs configured to perform the actions of the methods encoded on computer storage devices.
Implementations may each optionally include one or more of the following features. For example, the method may include identifying, within the one or more data fields, encrypted data generated by a second SDK installed at the client device, and wherein when generating the plurality of live requests, the encrypted data is included in a particular one of the live requests sent to a particular one of the third parties authorized to decrypt the encrypted data generated by the second SDK. In this case, the method may further include transmitting the particular real-time request to the particular third party digital component provider without decrypting the encrypted data.
The method may also include accessing a mapping of application data to installed SDKs, identifying within the mapping an application specified in the application data and a version of the application that originated the request, and identifying a set of SDKs that map to the application and the version of the application that originated the request. In this case, the method may further include identifying, from a response log stored in the data structure, previous responses previously provided to the version of the application in response to previous requests initiated by the version of the application, identifying, from the previous responses, a set of multiple different SDKs specified in the previous responses, and mapping each SDK of the set of multiple different SDKs to the version of the application in the data structure.
In some aspects, the method may include transmitting an instruction specifying an Application Programming Interface (API) call to render a digital component included in a particular response. The method may further comprise: transmitting, by the one or more servers, each real-time request to the respective third-party digital component provider over the network includes transmitting the particular real-time request to the particular third-party digital component provider without decrypting the encrypted data. In certain aspects, the method may include providing control of the presentation of the customized digital component to a particular SDK.
The method may further comprise: transmitting each of the real-time requests to the respective third-party digital component provider includes transmitting no particular real-time request to a third party that is not authorized to decrypt the encrypted data generated by the second SDK, receiving a set of responses to the plurality of real-time requests from the respective third-party digital component provider including: receiving a given response in the set, the given response specifying that a particular SDK other than the first SDK is required to render a particular digital component included in the given response, and transmitting the given response as the particular response, wherein the particular SDK is required to render the particular digital component included in the given response.
Advantageous implementations may include one or more of the following features. The method allows for the parallel transmission of digital component requests to different networks, thereby reducing the delay experienced by client-side mediation, while ensuring that multiple SDKs are supported as compared to using one SDK in real-time bidding. In other words, when an application at a client device issues a request for a digital component, it may be desirable to receive responses to the request from third party digital component vendors associated with multiple different SDKs. Thus, the method can be used to process requests for digital components by taking advantage of real-time bidding, while preserving the attributes of the client-side mediation. Further, the SDK can be used to collect customized signals and render customized digital components at the client device while transacting via real-time bidding with parallel calls to digital components, such as customized digital components. In particular, when an application issues a request for media content, it is desirable to receive bids for serving digital components from third parties associated with different SDKs.
The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features and advantages of the invention will become apparent from the description, the drawings, and the claims.
Drawings
FIG. 1 is a block diagram of an example environment for processing a request for a custom digital component.
FIG. 2 is a flow diagram of an example process for processing custom digital components.
FIG. 3 is a flow diagram of an example process for checking data fields of a request.
FIG. 4 is a flow diagram of an example process for generating a real-time request.
FIG. 5 is a block diagram illustrating example communications with a digital component vendor.
FIG. 6 is a block diagram of an example computing system.
Like reference numbers and designations in the various drawings indicate like elements.
Detailed Description
This document discloses methods, systems, and devices for processing requests for digital components and selecting particular responses over a network to satisfy the requests. As discussed in more detail below, the first SDK may generate a request for a digital component. The request may be received by the server and examined to identify an application corresponding to the request and a list of SDKs that may support rendering of digital components in the application. The request and information extracted from the request may be used to generate a real-time request by the server. The real-time request may be transmitted to a plurality of third party digital component providers. The server may receive a response to the real-time request from a third party digital component provider. The response may include digital components, such as custom digital components that require custom rendering by a particular SDK. The responses may be received by the server, which may then be configured to select particular ones of the responses to satisfy the initial request. In this case, the selected response may be transmitted from the server to the client device for rendering the particular digital component associated with the selected response by the specified SDK.
As used throughout this document, the phrase "digital component" refers to a discrete unit of digital content or digital information (e.g., a video clip, an audio clip, a multimedia clip, an image, text, or another unit of content). The digital component may be electronically stored in the physical storage device as a single file or collection of files, and the digital component may take the form of a video file, an audio file, a multimedia file, an image file, or a text file, and include advertising information such that the advertisement is a type of digital component. Typically, digital components are defined by (or provided by) a single vendor or source (e.g., advertiser, publisher, or other component vendor). The digital component may be integrated (e.g., rendered therein) into an electronic document provided by an electronic document vendor that is different from the digital component vendor.
FIG. 1 is a block diagram of an example environment 100 in which a request for a custom digital component is processed. The example environment 100 includes a network 102, such as a Local Area Network (LAN), a Wide Area Network (WAN), the Internet, or any combination thereof. The network 102 connects client devices 106, digital component servers 110, and digital component providers 114. The example environment 100 may include many different client devices 106, digital component servers 110, and digital component providers 114.
The client devices 106 may include multiple SDKs installed at each client device 106. The SDKs may each correspond to a set of software development tools capable of creating applications for a particular platform of the client device 106. The SDK may include source code, development tools, emulators, libraries, etc. to build applications for a particular platform. The SDK may be used to generate a request 112 for digital components, which request 112 is transmitted over the network 102 to the digital component server 110. For example, the client device 106 may generate the request 112 for customizing the digital component using a first SDK installed at the client device 106.
The request 112 may include data specifying characteristics, such as a name (or network location) of the digital component provider 114, a name (or network location) of a requesting device (e.g., client device 106), and/or information that the digital component server 110 may use to select a digital component to provide in response to the request 112. The client device 106 transmits the request 112 to one or more digital component servers 110 over a network 102 (e.g., a telecommunications network). The request 112 may also include data specifying other features, such as application data indicating the application that initiated the request 112 and a set of SDKs installed at the client device 106.
The digital component server 110, which includes one or more digital component servers, generates a plurality of real-time requests 117 for digital components in response to the examination request 112 and/or using information included in the request 112. For example, the digital component server 110 can examine one or more data fields of the request 112. The data fields may be examined to identify application data that specifies a particular application that initiated the request 112 at the client device 106. Further, the digital component server 110 can be configured to generate a plurality of real-time requests 117 using information extracted from the data fields.
In some examples, the digital component server 110 may be configured to identify a set of SDKs installed in a particular application that initiated the request 112 at the client device 106. In particular, the digital component server 110 can identify the set of SDKs based on a mapping of application data to installed SDKs in a data structure. For example, the digital component server 110 may be configured to identify a set of installed SDKs based on a data structure that organizes application data into particular SDKs. In particular, the data structure may store a mapping of application data to installed SDKs that are installed in various applications at the client device 106. Thus, when the digital component server 110 identifies application data based on the request 112, the digital component server 110 can map the application data to certain SDKs using a data structure, such as a lookup table.
When the application data is mapped to certain SDKs, the digital component server 110 can identify which SDKs are installed in one or more applications at the client device 106. The digital component server 110 can also be configured to include data specifying the identified set of installed SDKs in the real-time request 117. In some aspects, the data structure may be a predetermined data structure defined prior to the initial request 112 and accessed by the digital component server 110. In other aspects, the digital component server 110 can be configured to generate the data structure using the mapping of the application data to the specified SDK and the application.
As shown in fig. 1, the digital component server 110 may also be configured to transmit a real-time request 117 to the digital component provider 114 via the network 102. For example, the digital component server 110 may generate three live requests 117a-c and transmit each of the live requests 117a-c in parallel to a particular digital component provider 114 a-c. In this case, the first live request 117a may be transmitted to the first digital component provider 114a, the second live request 117b may be transmitted to the second digital component provider 114b, and the third live request 117c may be provided to the digital component provider 114 c. In some aspects, a single real-time request 117 is transmitted to multiple different digital component providers 114. For example, the first real-time request 117a may be transmitted in parallel to the first digital component provider 114a, the second digital component provider 114b, and the third digital component provider 114 c. In this case, a single live request 117, such as the first live request 117a, may be transmitted to multiple digital component providers 114 to receive bids (bid) for rendering digital components from each digital component provider 114. The initial request 117 may need to be provided with a response within a predetermined time period. Each digital component provider 114 can provide a response 118 to request 117, where response 118 includes a bid for a particular digital component. Thus, a single request 117 may be provided to multiple digital component providers 114 attempting to quickly receive the digital components associated with the highest bidder within a predetermined time period for response 118. In some aspects, the response 118 to the request 117 may alternatively or additionally include a digital component to be rendered, such as a digital component tag or a link to a digital component tag.
The digital component provider 114 may include one or more digital component providers, such as third party digital component providers. The digital component providers 114a-c may be configured to generate responses 118a-c to the real-time request 117. The response 118 may include digital components for rendering at the client device 106. In some aspects, the response 118 may include one or more possible digital components for rendering at the client device 106. The digital components of response 118 may also include custom digital components. The custom digital component (e.g., the custom ad) may include a custom creative format that may be rendered by a particular SDK installed at the client device 106. Thus, the custom digital components included in the response 118 may indicate that the custom digital components need to be rendered by an SDK other than the first SDK that generated the original request 112.
The response 118 may be received by the digital component server 110 over the network 102. The digital component server 110 can be configured to select a particular response to satisfy the request 112 for the digital component. For example, the digital component server 110 may receive three responses 118a-c in response to the real-time requests 117 a-c. The digital component server 110 may select a particular one of the three responses 118a-c for transmission to the client device 106 in response to the initial request 112 for the digital component. In some aspects, a particular response may be selected by the digital component server 110 based on the bid associated with each of the responses 118 a-c. In other aspects, the particular response may be selected based on the specified digital component characteristics of the request 112.
The selected response may be transmitted from the digital component server 110 to the client device 106 over the network 102. The selected response may be transmitted as a reply 120 to the initial request 112 for the digital component. In some aspects, the reply 120 may be transmitted to the first SDK that generated the request 112. The reply 120 may include a digital component specifying that the SDKs (other than the first SDK) that need to be installed at the client device 106 render the digital component contained in the reply 120.
In some aspects, client device 106 executes the instructions included in reply 120. For example, client device 106 may use the instructions to configure and enable rendering of particular digital components included in reply 120. In another example, the instructions may be for configuring and causing the client device 106 to obtain a particular digital component from a corresponding digital component provider 114. For example, the instructions in the reply 120 may include a network location (e.g., a Uniform Resource Locator (URL)) and a script that causes the client device 106 to transmit a Server Request (SR)121 to the corresponding digital component provider 114 to obtain a particular digital component from the digital component provider 114. In response to the request 121, the digital component provider 114 may identify the particular digital component specified in the server request 121 and transmit digital component data (DC data) 122 to the client device 106, which transmits the particular digital component for rendering to the client device 106.
FIG. 2 is a flow diagram of an example process 200 for processing custom digital components. Process 200 may be performed by one or more servers or other computing devices. For example, the operations of process 200 may be performed by digital component server 110 of FIG. 1. The operations of process 200 may also be implemented as instructions stored on a non-transitory computer-readable medium, and when the instructions are executed by one or more servers (or other computing devices), the instructions cause the one or more servers to perform the operations of process 200.
At step 202, the digital component server receives a request for digital components generated by a first SDK installed at a client device. The request for the digital component may include data specifying characteristics, such as a name (or network location) of a provider of the digital component, a name (or network location) of a requesting device (e.g., a client device), and/or information that the digital component server may use to select the digital component to provide in response to the request. The request is received by one or more digital component servers over a network (e.g., a telecommunications network). The request may also include data specifying other characteristics, such as application data specifying the application that initiated the request and a set of SDKs installed at the client device.
At step 204, the digital component server checks the data fields of the request. The digital component server may examine one or more data fields of the request. The data fields may each include different types of data, such as integers, strings, dates, and so forth. In some aspects, the digital component server is configured to examine data fields of the request to identify the requested encrypted data. The encrypted data may be identified as being generated by a second SDK installed at the client device. The encrypted data may include a proprietary signal (e.g., proprietary to the second SDK) corresponding to a previously rendered digital component (e.g., previously rendered by the second SDK or within an application that includes the second SDK). The previously rendered digital components may be rendered by a particular SDK installed at the client device. The information representing the SDK may include a plurality of different SDKs and a plurality of different versions of the application corresponding to the different SDKs. Further, the encrypted data may include data specific to the client device. For example, the encrypted data may include accelerometer data representing an orientation of the client device, accelerometer data representing movement of the client device, a location signal representing a geographic location of the client device, and/or the like.
At step 206, the digital component server generates a plurality of real-time requests based on an examination of the data fields of the requests. The real-time request may include a request for one or more digital components. The digital component server can be configured to include data specifying the identified set of installed SDKs in the real-time request. The server may be configured to generate the real-time request based on a request from the SDK for the digital component. Each real-time request may include information such as a set of other SDKs installed in the identified application.
In some aspects, the encrypted data is included in the real-time request. The encrypted data may be included in one or more real-time requests that are ready for transmission to the digital component provider. The encrypted data may be included in a certain real-time request that is ready for transmission to a certain digital component provider. The certain digital component provider may be a digital component provider authorized to decrypt the encrypted data. The encrypted data may be included in the real-time request, but kept secret from the digital component server for decryption only by an authorized digital component provider. For example, the encrypted data may be included in all real-time requests and decrypted using the key only by authorized digital component vendors.
At step 208, the digital component server transmits each live request to the corresponding digital component provider. For example, the digital component provider may be a third party component provider. The digital component server may be configured to transmit the real-time request to the digital component provider over a network. For example, the digital component server may generate three real-time requests and transmit each real-time request to one of three specific digital component providers. The real-time request may be transmitted to the digital component provider within a certain amount of time after receiving the initial request from the client device. The real-time request may be transmitted to the third party digital component provider serially, in parallel, or any combination thereof. Further, the initial request may indicate an amount of time in which the digital component server needs to provide the digital component to the client device.
The real-time request may include encrypted data. For example, a real-time request including encrypted data may be generated by a digital component server and transmitted to an authorized digital component server without decrypting the encrypted data. Thus, the digital component server may be configured to prepare and direct real-time requests to the digital component provider without compromising the confidentiality of the encrypted data included in the real-time request. Further, the digital component server may be configured to transmit only real-time requests including encrypted data to authorized digital component providers.
At step 210, the digital component server receives a set of responses to the plurality of real-time requests from respective third party digital component providers. For example, each third party digital component provider may provide a response to the digital component server. The responses may each include a digital component for rendering at the client device. In some aspects, the response may include one or more possible digital components for rendering at the client device. The responsive digital component may include a custom digital component. The custom digital component can include a custom creative format that can be rendered at the client device by a particular SDK. Thus, the custom digital component included in the response may indicate that the custom digital component needs to be rendered by an SDK other than the first SDK that generated the original request.
At step 212, the digital component server selects a particular response from the set of responses to transmit to the client device in response to the request for the digital component. For example, the digital component server may receive three responses in response to the real-time request. A particular response of the three responses may be selected by the digital component server for transmission to the client device. In some aspects, a particular response may be selected by the digital component server based on a selection score associated with each response (e.g., a bid or some other value that may be used to rank and/or select a digital component from among a plurality of different available digital components). In this case, the particular response may correspond to the highest selection score of all received selection scores. In some aspects, a particular response may be selected based on the specified digital component characteristics of the request. In this case, the specific response may include digital components that satisfy all criteria of the initial request from the client device.
At step 214, the digital component server transmits the particular response to the first SDK with instructions specifying which SDK needs to be installed at the client device to render the digital components included in the particular response. The selected response may be transmitted from the digital component server to the client device over a network. The selected response may be transmitted as a reply to the initial request for the digital component. In some aspects, a particular response may be transmitted to the first SDK that generated the request. The specific response may include specifying that SDKs other than the first SDK are required to render the digital components included in the specific response. In this case, the SDKs other than the first SDK may be a certain SDK or only SDKs different from the first SDK that generated the original request.
In some aspects, the instructions may specify an Application Programming Interface (API) call to render a digital component included in the particular response. The API call may be implemented by an SDK specified at the client device. An API call may include a set of specific operations that an application calls to perform a task. Thus, an API call may include a set of operations to render a digital component via a particular SDK of an application at a client device.
In some aspects, the instructions may provide control of the presentation of the digital components to a particular SDK. In other words, a particular SDK may be configured to perform rendering of digital components at the client device (e.g., using rendering capabilities that the particular SDK has, but other SDKs installed at the client device may not have the rendering capabilities).
FIG. 3 is a flow diagram of an example process for checking data fields of a request for a digital component. Process 300 may include a sub-process for step 204 of process 200. Process 300 may be performed by one or more servers or other computing devices. For example, the operations of process 300 may be performed by digital component server 110 of FIG. 1. The operations of process 300 may also be implemented as instructions stored on a non-transitory computer-readable medium, and when the instructions are executed by one or more servers (or other computing devices), the instructions cause the one or more servers to perform the operations of process 300.
At step 302, the digital component server identifies application data within the data field that specifies the application that originated the request. In particular, the data fields may be examined to identify application data that specifies a particular application that initiated the request at the client device. The data field may correspond to a particular application based on the content of the data field included in the request and the type of data field.
At step 304, the digital component server is configured to examine the data fields of the request to identify the encrypted data of the request. The encrypted data may be identified as being generated by a second SDK installed at the client device. The encrypted data may include proprietary signals corresponding to previously rendered digital components. The previously rendered digital components may be rendered by a particular SDK installed at the client device. Thus, information representing the SDK previously used to render the digital component may also be included in the encrypted data. The information representing the SDK may include a plurality of different SDKs and a plurality of different versions of the application corresponding to the different SDKs. Further, the encrypted data may include data specific to the client device. For example, the encrypted data may include accelerometer data representing an orientation of the client device, accelerometer data representing movement of the client device, a location signal representing a geographic location of the client device, and/or the like.
FIG. 4 is a flow diagram of an example process for generating a real-time request. Process 400 may include a sub-process for step 206 of process 200. Process 400 may be performed by one or more servers or other computing devices. For example, the operations of process 400 may be performed by digital component server 110 of FIG. 1. The operations of process 400 may also be implemented as instructions stored on a non-transitory computer-readable medium, and when the instructions are executed by one or more servers (or other computing devices), the instructions cause the one or more servers to perform the operations of process 400.
At step 402, the digital component server identifies a set of SDKs installed in a particular application that initiated a request at a client device. In particular, the digital component server can identify the set of SDKs based on a mapping of application data to installed SDKs in a data structure. In some aspects, the digital component server may be configured to access a mapping of application data to an installed SDK. The digital component server may also be configured to identify within the mapping of application data the application specified in the application data and the version of the application that originated the request. In this case, the digital component server can identify a set of SDKs that map to the application and the version of the application that initiated the initial request for the digital component.
For example, the digital component server may be configured to identify a set of installed SDKs based on a predetermined data structure that classifies application data to a particular SDK. Thus, when the digital component server identifies application data based on the request, the digital component server may map the application data to certain SDKs using a data structure such as a look-up table. When the application data maps to certain SDKs, the digital component server can identify which SDKs are installed in the application at the client device. The digital component server can be configured to include data specifying the identified set of installed SDKs in the real-time request.
In some aspects, the digital component server may be configured to generate a mapping of application data to the installed SDKs. In this case, the digital component server may identify previous responses that were previously provided to the particular version of the application in response to previous requests initiated by the particular version of the application. The previous response may be identified from a response log stored in a data structure. The digital component server can be configured to identify a set of multiple different SDKs specified in the previous response. Further, the digital component server may be configured to map each SDK in the set of multiple SDKs to a particular version of the application in a data structure.
At step 404, the digital component server includes, in each real-time request, data specifying a set of SDKs installed in the application that originated the request at the client device. The real-time requests may be independent of each other. In this case, each real-time request may correspond to a particular digital component provider. The real-time request may be sent to a particular digital component provider based on a set of SDKs installed in the application that initiated the request at the client device.
At step 406, the digital component server includes the encrypted data in a particular real-time request for a particular digital component vendor that is authorized to decrypt the encrypted data generated by the second SDK. The encrypted data may be included in one or more real-time requests. The encrypted data may be the same for each authorized digital component provider. In other aspects, the encrypted data may be unique to each digital component provider such that the data can only be decrypted by the corresponding particular digital component provider.
FIG. 5 is a block diagram illustrating example communications with a digital component vendor. As shown by event (A) in FIG. 5, the client device 510 can submit a request 515 for a digital component to the digital component server 520. The request 515 may be a request to customize a digital component. The request 515 may be initiated by a particular application of the client device 510 and generated by a first SDK installed at the client device 510. The first SDK may be one of a plurality of SDKs installed at the client device 510, and the application may be one of a plurality of applications installed at the client device 510.
At event (B), the digital component server 520 receives the request 515 and generates a plurality of real-time requests 526 in response to receiving the request 515. The digital component server 520 can examine the data fields of the request 515 to determine the content of the request 515 and information about the client device 510. The digital component server 520 can be configured to identify the application data 521 by examining the request 515. The application data 521 can be used by the digital component server 520 to identify the particular application that initiated the request 515. The application data 521 may also be used by the digital component server 520 to identify a set of installed SDKs 522 at the client device 510.
The digital component server 520 can generate a plurality of live requests 526 in place of the request 515 generated by the client device 510. In this case, the digital component server 520 may be configured to generate a plurality of live requests 526 on behalf of the client device 510.
In certain aspects, the digital component server 520 may examine the request 515 to identify encrypted data generated by the second SDK installed at the client device 510. The encrypted data may correspond to a previous request 515, a previously rendered digital component, an SDK used to render the digital component, data collected when the request 515 was generated, data collected when the real-time request 526 was generated, and so on.
The digital component server 520 may be configured to generate one or more real-time requests 526 to provide to the digital component provider 530. In some aspects, the real-time request 526 is specified for a particular digital component vendor 530 a-n. In this case, the real-time request 526 may include encrypted data 523a-n authorized to be decrypted by certain digital component vendors 530 a-n. Thus, the digital component server 520 may generate a plurality of live requests 526, each live request 526 including encrypted data 523a-n corresponding to a selected digital component vendor 530 a-n.
At event (C), the digital component provider 530 receives the live request 526 and provides a response 535 to the live request 526. The digital component provider 530 may be configured to provide the digital component as a response 535 to the real-time request 526. For example, each digital component vendor 530a-n may receive the live request 526 and provide a response 535 to the digital component server 520 that includes the digital components for rendering at the client device 510.
In some aspects, the digital component provider 530 receives encrypted data 523a-n included in the real-time request 526. The encrypted data 523a-n may be decrypted by an authorized digital component provider. In this case, the digital component provider 530 can use the decrypted data 532a-n to determine whether to provide a response 535 to the real-time request 526, a bid price associated with the response 535, which digital components to return in the response 535, and so on. Thus, authorized digital component providers can be configured to generate responses 535 to the live requests 526 using the decrypted data 523a-n decrypted by each authorized digital component provider and provide the responses 535 to the digital component server 520.
At event (D), the digital component server 520 receives the response 535 from the digital component provider 530 and selects a particular response to transmit to the client device 510. The digital component server 520 can select a particular response for rendering by the SDK installed at the client device 510. In some aspects, the particular response may be selected by the digital component server 520 based on the bid associated with each response 535. In other aspects, the particular response may be selected based on the specified digital component characteristics of the initial request 515.
The selected response may be transmitted from the digital component server 520 to the client device 510 as digital component data 528. The digital component data 528 may be provided in reply to the initial request 515 for the digital component. In certain aspects, the digital component data 528 may be transmitted to a first SDK that generates the request 515 at the client device 510. The digital component data 528 can include instructions specifying that another SDK, other than the first SDK, that needs to be installed at the client device 510 renders a digital component corresponding to the digital component data 528.
FIG. 6 is a block diagram of an exemplary computing system 600 that may be used to perform the operations described above. The system 600 includes a processor 610, a memory 620, a storage device 630, and an input/output device 640. Each of the components 610, 620, 630, and 640 can be interconnected, for example, using a system bus 650. The processor 610 is capable of processing instructions for execution within the system 600. In one implementation, the processor 610 is a single-threaded processor. In another implementation, the processor 610 is a multi-threaded processor. The processor 610 is capable of processing instructions stored in the memory 620 or on the storage device 630.
The storage device 630 is capable of providing mass storage for the system 600. In one implementation, the storage device 630 is a computer-readable medium. In various different implementations, the storage device 630 may include, for example, a hard disk device, an optical disk device, a storage device shared by multiple computing devices (e.g., cloud storage devices) over a network, or some other mass storage device.
Input/output device 640 provides input/output operations for system 600. In one implementation, the input/output devices 640 may include one or more of a network interface device, such as an Ethernet card, a serial communication device, such as an RS-232 port, and/or a wireless interface device, such as an 802.11 card. In another implementation, the input/output devices can include driver devices configured to receive input data and transmit output data to other input/output devices (e.g., keyboard, printer, and display devices 560). However, other implementations may also be used as mobile computing devices, mobile communication devices, set-top television client devices, and the like.
Although an example processing system has been described in fig. 6, implementations of the subject matter and the functional operations described in this specification can be implemented in other types of digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
An electronic document may, but need not, correspond to a file. A document may be stored in a portion of a file that holds other documents, in a single file dedicated to the document of interest, or in multiple coordinated files.
Many implementations have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the disclosure. For example, various forms of the flows shown above may be used, with steps re-ordered, added, or removed.
Embodiments of the invention and all of the functional operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the invention may be implemented as one or more computer program products, such as a module of one or more computer program instructions encoded on a computer-readable medium for execution by, or to control the operation of, data processing apparatus. The computer readable medium can be a machine-readable storage device, a machine-readable storage substrate, a memory device, a composition of matter effecting a machine-readable propagated signal, or a combination of one or more of them. The term "data processing apparatus" includes all apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers. The apparatus can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them. A propagated signal is an artificially generated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus.
A computer program (also known as a program, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A computer program does not necessarily correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.
The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Further, the computer may be embedded in another device, e.g., a tablet computer, a mobile phone, a Personal Digital Assistant (PDA), a mobile audio player, a Global Positioning System (GPS) receiver, to name a few. Computer-readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disks; and CD ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, embodiments of the invention may be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device, such as a mouse or a trackball, by which the user can provide input to the computer. Other types of devices may also be used to provide for interaction with a user; for example, feedback provided to the user can be any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback; and input from the user may be received in any form, including acoustic, speech, or tactile input.
Embodiments of the invention can be implemented in a computing system that includes a back-end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front-end component (e.g., a client computer having a graphical user interface or a Web browser) through which a user can interact with an implementation of the invention or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network ("LAN") and a wide area network ("WAN"), such as the Internet.
The computing system may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
While this specification contains many specifics, these should not be construed as limitations on the scope of the invention or of what may be claimed, but rather as descriptions of features specific to particular embodiments of the invention. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Furthermore, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features of a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
In each instance where an HTML file is mentioned, other file types or formats may be substituted. For example, the HTML file may be replaced by an XML, JSON, plain text, or other type of file. Further, where tables or hash tables are mentioned, other data structures (such as spreadsheets, relational databases, or structured files) may be used.
Specific embodiments of the present invention have been described. Other embodiments are within the scope of the following claims. For example, the steps recited in the claims can be performed in a different order and still achieve desirable results.
Claims (15)
1. A method for processing a digital assembly, comprising:
receiving, from a client device, a request for a digital component generated by a first Software Development Kit (SDK) installed at the client device;
examining, by one or more custom digital component servers, one or more data fields of the request, comprising:
identifying, within the one or more data fields, application data that specifies an application that initiated the request at the client device;
generating, by one or more servers, a plurality of real-time requests, comprising:
identifying a set of SDKs installed in an application that initiated a request at a client device based on a mapping of application data in a data structure to installed SDKs;
including in each real-time request data specifying the set of SDKs installed in the application that originated the request at the client device;
transmitting, by one or more servers over a network, each real-time request to a respective third-party digital component provider; and
receiving, by the one or more servers, a set of responses to a plurality of real-time requests from respective third-party digital component providers;
selecting, by the one or more servers in response to the request for the digital component, a particular response from the set of responses to transmit to the client device; and
transmitting, by the one or more servers, the particular response to the first SDK with instructions specifying which SDK installed at the client device is required to render the digital component included in the particular response,
wherein examining, by the one or more custom digital component servers, the one or more data fields of the request generated by the first SDK comprises: identifying, within the one or more data fields, encrypted data generated by a second SDK installed at the client device; and
wherein, when generating the plurality of real-time requests, the encrypted data is included in a particular one of the real-time requests that is sent to a particular one of the third-party digital component providers that is authorized to decrypt the encrypted data generated by the second SDK.
2. The method of claim 1, wherein transmitting, by one or more servers, each real-time request to a respective third-party digital component provider over a network comprises: the particular real-time request is transmitted to the particular third party digital component provider without decrypting the encrypted data.
3. The method of claim 1 or 2, wherein:
transmitting each real-time request to a respective third party digital component provider includes: not transmitting the particular real-time request to a third party that is not authorized to decrypt the encrypted data generated by the second SDK;
receiving a set of responses to the plurality of real-time requests from the respective third party digital component providers comprises: receiving a given response in the set, the given response specifying that a particular SDK other than the first SDK is required to render a particular digital component included in the given response; and
the given response is transmitted as a specific response, wherein the specific SDK is required to render the specific digital component included in the given response.
4. The method of claim 1, wherein identifying a set of SDKs installed in a requesting application comprises:
accessing a mapping of application data to an installed SDK;
identifying within the mapping the application specified in the application data and the version of the application that originated the request; and
a set of SDKs that map to the application and the version of the application that originated the request are identified.
5. The method of claim 4, further comprising generating a mapping of application data to the installed SDK, comprising:
identifying, from a response log stored in a data structure, previous responses previously provided to a version of the application in response to previous requests initiated by the version of the application;
identifying from the previous response a set of multiple different SDKs specified in the previous response; and
mapping each SDK of the set of multiple different SDKs to a version of the application in a data structure.
6. The method of claim 1, wherein communicating the particular response to the first SDK with instructions specifying which SDK needs to be installed at the client device to render the digital components included in the particular response comprises: transmitting an instruction specifying an Application Programming Interface (API) call to render a digital component included in the particular response.
7. The method of claim 1, wherein communicating the particular response to the first SDK with instructions specifying which SDK needs to be installed at the client device to render the digital components included in the particular response comprises: control of the presentation of the digital components is provided to the specified SDK.
8. A system for processing digital components, comprising:
a data structure storing a mapping of application data to installed Software Development Kits (SDKs) installed in various applications;
a front-end server configured to receive, from a client device, a request for a digital component generated by a first SDK installed at the client device; and
a custom digital component server configured to process requests by performing operations comprising:
receiving, from a client device, a request for a digital component generated by a first Software Development Kit (SDK) installed at the client device;
examining one or more data fields of the request, including:
identifying, within the one or more data fields, application data that specifies an application that initiated the request at the client device;
generating a plurality of real-time requests, comprising:
identifying a set of SDKs installed in an application that initiated a request at a client device based on a mapping of application data in a data structure to installed SDKs;
including in each real-time request data specifying the set of SDKs installed in the application that originated the request at the client device; transmitting each real-time request over a network to a respective third party digital component provider; and
receiving a set of responses to the plurality of real-time requests from respective third party digital component providers; selecting, in response to a request for a digital component, a particular response from the set of responses to transmit to the client device; and
transmitting the particular response to the first SDK with instructions specifying which SDK needs to be installed at the client device to render the digital components included in the particular response,
wherein, when examining the one or more data fields of the request generated by the first SDK, the custom digital component server is configured to identify within the one or more data fields encrypted data generated by a second SDK installed at the client device; and
wherein, when generating the plurality of real-time requests, the custom digital component server is configured to include the encrypted data in a particular one of the real-time requests for transmission to a particular one of the third-party digital component providers authorized to decrypt the encrypted data generated by the second SDK.
9. The system of claim 8, wherein, when transmitting each real-time request to a respective third-party digital component provider over the network, the custom digital component server is configured to transmit a particular real-time request to a particular third-party digital component provider without decrypting the encrypted data.
10. The system of claim 8 or 9, wherein:
the custom digital component server is configured to avoid transmitting the particular real-time request to a third party that is not authorized to decrypt the encrypted data generated by the second SDK when transmitting each real-time request to the respective third party digital component provider; and
if a set of responses to the plurality of real-time requests from the respective third-party digital component providers includes a given response specifying that a particular SDK other than the first SDK is required to render a particular digital component included in the given response, the custom digital component server is configured to transmit the given response as the particular response.
11. The system of claim 8, wherein when identifying a set of SDKs installed in the requesting application, the custom digital component server is configured to:
accessing a mapping of application data to an installed SDK;
identifying within the mapping the application specified in the application data and the version of the application that originated the request; and
a set of SDKs that map to the application and the version of the application that originated the request are identified.
12. The system of claim 11, wherein the operations further comprise generating a mapping of application data to an installed SDK, comprising:
identifying, from a response log stored in a data structure, previous responses previously provided to a version of the application in response to previous requests initiated by the version of the application;
identifying from the previous response a set of multiple different SDKs specified in the previous response; and
mapping each SDK of the set of multiple different SDKs to a version of the application in a data structure.
13. The system of claim 8, wherein, when transmitting the particular response to the first SDK with instructions specifying which SDK needs to be installed at the client device to render the digital components included in the particular response, the custom digital component server is configured to transmit instructions specifying an Application Programming Interface (API) call to render the digital components included in the particular response.
14. The system of claim 8, wherein, when the particular response is transmitted to the first SDK with instructions specifying which SDK needs to be installed at the client device to render the digital component included in the particular response, the custom digital component server is configured to provide control of the presentation of the digital component to the specified SDK.
15. A non-transitory computer storage medium encoded with a computer program, the program comprising instructions that when executed by data processing apparatus cause the data processing apparatus to perform the method of any of claims 1 to 7.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
CN202111202234.0A CN114020378B (en) | 2017-02-02 | 2017-02-02 | Method and system for processing digital components |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2017/016220 WO2018143990A1 (en) | 2017-02-02 | 2017-02-02 | Custom digital components |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202111202234.0A Division CN114020378B (en) | 2017-02-02 | 2017-02-02 | Method and system for processing digital components |
Publications (2)
Publication Number | Publication Date |
---|---|
CN108684205A CN108684205A (en) | 2018-10-19 |
CN108684205B true CN108684205B (en) | 2021-10-15 |
Family
ID=58054525
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201780001377.0A Active CN108684205B (en) | 2017-02-02 | 2017-02-02 | Method and system for processing digital components |
CN202111202234.0A Active CN114020378B (en) | 2017-02-02 | 2017-02-02 | Method and system for processing digital components |
Family Applications After (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202111202234.0A Active CN114020378B (en) | 2017-02-02 | 2017-02-02 | Method and system for processing digital components |
Country Status (7)
Country | Link |
---|---|
US (4) | US10455058B2 (en) |
JP (1) | JP6766270B2 (en) |
KR (2) | KR102393818B1 (en) |
CN (2) | CN108684205B (en) |
DE (1) | DE202017106604U1 (en) |
GB (1) | GB2564165B (en) |
WO (1) | WO2018143990A1 (en) |
Families Citing this family (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
KR102393818B1 (en) | 2017-02-02 | 2022-05-03 | 구글 엘엘씨 | Custom digital components |
US11294731B2 (en) | 2017-12-20 | 2022-04-05 | Google Llc | Joint transmission commitment simulation |
US11538091B2 (en) * | 2018-12-28 | 2022-12-27 | Cloudblue Llc | Method of digital product onboarding and distribution using the cloud service brokerage infrastructure |
US10917494B2 (en) * | 2019-02-01 | 2021-02-09 | Google Llc | Dynamic application content analysis |
CN112154433A (en) * | 2019-04-26 | 2020-12-29 | 谷歌有限责任公司 | Efficient use of computing resources in response to content requests |
JP7069356B2 (en) * | 2019-12-13 | 2022-05-17 | グーグル エルエルシー | Systems and methods for adding digital content while the application is open |
CN111372132B (en) * | 2020-02-25 | 2022-03-08 | 广州华多网络科技有限公司 | Method, device and equipment for audio and video transmission and storage medium |
US11698822B2 (en) | 2020-06-10 | 2023-07-11 | Snap Inc. | Software development kit for image processing |
CN111949421B (en) * | 2020-08-12 | 2023-09-05 | 北京奇艺世纪科技有限公司 | SDK calling method, device, electronic equipment and computer readable storage medium |
RU2760625C1 (en) * | 2021-03-12 | 2021-11-29 | Акционерное общество "Лаборатория Касперского" | METHOD FOR CONFIGURATION OF IoT APPARATUSES DEPENDING ON THE TYPE OF NETWORK |
CN115756670A (en) * | 2021-09-01 | 2023-03-07 | 北京字跳网络技术有限公司 | Component processing method and device, electronic equipment, storage medium and product |
Family Cites Families (48)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7404515B1 (en) * | 2000-05-25 | 2008-07-29 | Diebold Self-Service Systems Divison Of Diebold, Incorporated | Cash dispensing automated banking machine diagnostic system and method |
WO2003009102A2 (en) * | 2001-07-19 | 2003-01-30 | Wind River Systems, Inc. | Browser having dynamically self-adjusting rendering functionality |
JP2003271487A (en) | 2002-03-12 | 2003-09-26 | Nec Corp | Communication system, gateway device and gateway program |
JP2004040209A (en) | 2002-06-28 | 2004-02-05 | Toppan Printing Co Ltd | Server, ic card, method of contents distribution, method of acquiring/processing the contents, and program |
US20070220083A1 (en) * | 2006-03-17 | 2007-09-20 | Microsoft Corporation | Estimation of initial dynamic rendering control data |
US8743130B2 (en) * | 2009-08-28 | 2014-06-03 | Zynga Inc. | Apparatuses, methods and systems for a distributed object renderer |
US8868637B2 (en) * | 2009-09-02 | 2014-10-21 | Facebook, Inc. | Page rendering for dynamic web pages |
CN102081775A (en) * | 2009-11-27 | 2011-06-01 | 阿里巴巴集团控股有限公司 | Advertising method, system and equipment |
KR101359690B1 (en) * | 2009-12-18 | 2014-02-10 | 한국전자통신연구원 | Online development environment server, online marketplace server, online development environment building method and developed application service method |
US8682140B2 (en) | 2010-03-26 | 2014-03-25 | Panasonic Corporation | Playback device, content distribution system, playback method, computer program and integrated circuit |
US20110289094A1 (en) * | 2010-05-18 | 2011-11-24 | Rovi Technologies Corporation | Integrating media content databases |
US8843616B2 (en) * | 2010-09-10 | 2014-09-23 | Intel Corporation | Personal cloud computing with session migration |
JP2012064144A (en) | 2010-09-17 | 2012-03-29 | Sharp Corp | Relay server and advertisement distribution system |
US8452837B2 (en) * | 2010-11-03 | 2013-05-28 | Google Inc. | Data delivery |
CN102479367B (en) * | 2010-11-30 | 2016-05-04 | 百度(中国)有限公司 | A kind of method and apparatus of the reservation price for definite network promotion resource |
US20120278185A1 (en) * | 2011-05-01 | 2012-11-01 | Vinod Kumar Ramachandran | Method to adapt ads rendered in a mobile device based on existence of other mobile applications |
CN102222005B (en) * | 2011-07-12 | 2013-10-30 | 铜陵玉成软件科技有限责任公司 | Service model-oriented software running platform, running mode and development method |
US8793235B2 (en) * | 2012-01-19 | 2014-07-29 | Google Inc. | System and method for improving access to search results |
CN102647455B (en) | 2012-03-23 | 2015-08-05 | 华为技术有限公司 | The processing method of moving advertising, proxy server and terminal |
US8887178B1 (en) | 2012-10-23 | 2014-11-11 | Google Inc. | Method to customize native operating system views using web technologies in mobile devices |
WO2014065811A1 (en) * | 2012-10-26 | 2014-05-01 | Empire Technology Development Llc | Securitization of developer credentials |
US8862534B1 (en) * | 2012-12-07 | 2014-10-14 | Robust Links, LLC | Software service infrastructure indexing user demographics, interests and expertise |
CN105190671A (en) * | 2013-03-15 | 2015-12-23 | 雅虎公司 | Compact data interface for real time bidding in digital video advertisement systems |
DK3011442T3 (en) * | 2013-06-18 | 2021-01-04 | Ciambella Ltd | METHOD AND DEVICE FOR GENERATING A CUSTOM SOFTWARE DEVELOPMENT KIT (SDK) |
US20150011311A1 (en) * | 2013-07-03 | 2015-01-08 | Iswifter, Inc. | System and method for experiencing advertised interactive applications |
US10643253B2 (en) * | 2013-10-24 | 2020-05-05 | Oath Inc. | Multi-protocol interactive mobile video advertising |
US10025468B2 (en) * | 2013-11-15 | 2018-07-17 | Google Llc | Personalization of map content via an application programming interface |
US11521229B2 (en) * | 2014-01-09 | 2022-12-06 | Xandr Inc. | Systems and methods for mobile advertisement review |
US20150213516A1 (en) * | 2014-01-25 | 2015-07-30 | Leo Jeremias | Computer system for displaying video ads on web pages |
US20170102925A1 (en) * | 2014-03-26 | 2017-04-13 | Syed Adeel Ali | Automatch process and system for software development kit for application programming interface |
US9336538B2 (en) * | 2014-04-03 | 2016-05-10 | Vungle, Inc. | Systems and methods for providing advertising services to devices with an advertising exchange |
US20150310494A1 (en) * | 2014-04-23 | 2015-10-29 | Mobile Majority | Technology and process for digital, mobile advertising at scale |
US20150310495A1 (en) * | 2014-04-23 | 2015-10-29 | Mobile Majority | Technology and process for digital, mobile advertising at scale |
US20150332333A1 (en) * | 2014-05-14 | 2015-11-19 | Arfan Chaudhry | System and Method for Providing Advertising Slots Before Hyperlink Destination |
CN105354013B (en) * | 2014-08-18 | 2019-07-23 | 阿里巴巴集团控股有限公司 | Application interface rendering method and device |
US11023921B2 (en) * | 2014-09-23 | 2021-06-01 | Adelphic Llc | Providing data and analysis for advertising on networked devices |
US20170337589A1 (en) * | 2014-10-27 | 2017-11-23 | Yintao Yu | Cross device identity matching for online advertising |
US10423985B1 (en) * | 2015-02-09 | 2019-09-24 | Twitter, Inc. | Method and system for identifying users across mobile and desktop devices |
US9743137B2 (en) | 2015-04-02 | 2017-08-22 | Yume, Inc. | Run-time SDK integration for connected video players |
US9818134B2 (en) * | 2015-04-02 | 2017-11-14 | Vungle, Inc. | Systems and methods for dynamic ad selection of multiple ads or ad campaigns on devices |
US10146512B1 (en) * | 2015-08-28 | 2018-12-04 | Twitter, Inc. | Feature switching kits |
US10672026B2 (en) * | 2016-01-31 | 2020-06-02 | Assaf Toval | System and a method for surveying advertisements in mobile applications |
EP3241343B1 (en) * | 2016-03-17 | 2018-11-28 | Google LLC | Multi-provider data provision with request batching |
WO2017205802A1 (en) * | 2016-05-27 | 2017-11-30 | App Annie Inc. | Advertisement data metric determination within mobile applications |
CN106095423B (en) * | 2016-06-02 | 2020-12-01 | 腾讯科技（深圳）有限公司 | Method, terminal and server for providing browsing service |
CN106296283B (en) * | 2016-08-08 | 2020-04-14 | 时趣互动（北京）科技有限公司 | Advertisement playing method and system based on mobile application |
US20180130098A1 (en) * | 2016-11-04 | 2018-05-10 | Aki Technologies, Inc. | Networked system for processing sensor data and external data for an ad server |
KR102393818B1 (en) * | 2017-02-02 | 2022-05-03 | 구글 엘엘씨 | Custom digital components |
-
2017
- 2017-02-02 KR KR1020217019277A patent/KR102393818B1/en active IP Right Grant
- 2017-02-02 WO PCT/US2017/016220 patent/WO2018143990A1/en active Application Filing
- 2017-02-02 KR KR1020197020617A patent/KR102270749B1/en active IP Right Grant
- 2017-02-02 JP JP2019538637A patent/JP6766270B2/en active Active
- 2017-02-02 CN CN201780001377.0A patent/CN108684205B/en active Active
- 2017-02-02 US US15/546,442 patent/US10455058B2/en active Active
- 2017-02-02 CN CN202111202234.0A patent/CN114020378B/en active Active
- 2017-02-02 GB GB1717717.1A patent/GB2564165B/en active Active
- 2017-10-30 DE DE202017106604.5U patent/DE202017106604U1/en active Active
-
2019
- 2019-09-13 US US16/570,130 patent/US10862999B2/en active Active
-
2020
- 2020-11-04 US US17/089,124 patent/US11375044B2/en active Active
-
2022
- 2022-06-08 US US17/835,471 patent/US11743348B2/en active Active
Also Published As
Publication number | Publication date |
---|---|
US20180278719A1 (en) | 2018-09-27 |
CN114020378A (en) | 2022-02-08 |
JP2020508505A (en) | 2020-03-19 |
US11375044B2 (en) | 2022-06-28 |
WO2018143990A1 (en) | 2018-08-09 |
KR20190094235A (en) | 2019-08-12 |
US10862999B2 (en) | 2020-12-08 |
US11743348B2 (en) | 2023-08-29 |
CN108684205A (en) | 2018-10-19 |
GB2564165B (en) | 2021-11-24 |
US10455058B2 (en) | 2019-10-22 |
US20220303353A1 (en) | 2022-09-22 |
CN114020378B (en) | 2023-12-12 |
GB201717717D0 (en) | 2017-12-13 |
KR20210080600A (en) | 2021-06-30 |
US20210051214A1 (en) | 2021-02-18 |
KR102393818B1 (en) | 2022-05-03 |
JP6766270B2 (en) | 2020-10-07 |
US20200007657A1 (en) | 2020-01-02 |
GB2564165A (en) | 2019-01-09 |
DE202017106604U1 (en) | 2018-05-15 |
KR102270749B1 (en) | 2021-06-29 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11743348B2 (en) | Custom digital components | |
US7870224B1 (en) | Managing online composite image content | |
CN111684448B (en) | Enhanced online privacy | |
CN110249324B (en) | Maintaining session identifiers for content selection across multiple web pages | |
US20060224700A1 (en) | Multipart response generation | |
US20200118193A1 (en) | Digital content publisher negotiated transactional advertiser | |
US20190095542A1 (en) | Method and system of dynamic website creation through url parameter analysis | |
JP7405969B2 (en) | Incorporating a secure watermark into your content | |
JP2024500300A (en) | Information interaction methods, devices, and equipment | |
US20230065501A1 (en) | Interaction tracking controls | |
JP7072619B2 (en) | Custom digital components | |
GB2597384A (en) | Custom digital components | |
US11307859B2 (en) | Probabilistic techniques for formatting digital components | |
CN114285743B (en) | Method, device, electronic equipment and storage medium for updating configuration information | |
WO2022057935A1 (en) | Method and apparatus for obtaining data based on content delivery network | |
WO2023003699A1 (en) | Publisher permissioned activation in cookieless authentication environment | |
CN111291284A (en) | Method and device for redirecting multi-level page | |
CN117240708A (en) | Website configuration method, access method and device |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
GR01 | Patent grant | ||
GR01 | Patent grant |