CN114097025A - Two-pass end-to-end speech recognition - Google Patents
Two-pass end-to-end speech recognition Download PDFInfo
- Publication number
- CN114097025A CN114097025A CN202080040823.0A CN202080040823A CN114097025A CN 114097025 A CN114097025 A CN 114097025A CN 202080040823 A CN202080040823 A CN 202080040823A CN 114097025 A CN114097025 A CN 114097025A
- Authority
- CN
- China
- Prior art keywords
- decoder
- utterance
- pass
- las
- rnn
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000013528 artificial neural network Methods 0.000 claims abstract description 7
- 230000000306 recurrent effect Effects 0.000 claims abstract description 7
- 238000000034 method Methods 0.000 claims description 101
- 238000012549 training Methods 0.000 claims description 93
- 238000012545 processing Methods 0.000 claims description 57
- 230000004044 response Effects 0.000 claims description 22
- 230000015654 memory Effects 0.000 claims description 11
- 238000009877 rendering Methods 0.000 claims description 5
- 238000004590 computer program Methods 0.000 claims 1
- 230000008569 process Effects 0.000 description 57
- 238000010586 diagram Methods 0.000 description 19
- 230000009471 action Effects 0.000 description 13
- 230000026676 system process Effects 0.000 description 6
- 238000004891 communication Methods 0.000 description 5
- 239000000463 material Substances 0.000 description 5
- 230000006870 function Effects 0.000 description 4
- 230000002452 interceptive effect Effects 0.000 description 3
- 230000002093 peripheral effect Effects 0.000 description 3
- 230000000007 visual effect Effects 0.000 description 3
- 230000003190 augmentative effect Effects 0.000 description 2
- 230000002860 competitive effect Effects 0.000 description 2
- 238000005516 engineering process Methods 0.000 description 2
- 239000011521 glass Substances 0.000 description 2
- 230000003993 interaction Effects 0.000 description 2
- 239000003550 marker Substances 0.000 description 2
- 230000007246 mechanism Effects 0.000 description 2
- 238000007670 refining Methods 0.000 description 2
- 238000013518 transcription Methods 0.000 description 2
- 230000035897 transcription Effects 0.000 description 2
- 241000282412 Homo Species 0.000 description 1
- 101000690484 Leptodactylus fallax Aggression-stimulating peptide Proteins 0.000 description 1
- 241000022852 Letis Species 0.000 description 1
- 238000007476 Maximum Likelihood Methods 0.000 description 1
- 230000003044 adaptive effect Effects 0.000 description 1
- 238000013459 approach Methods 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 238000013481 data capture Methods 0.000 description 1
- 230000001419 dependent effect Effects 0.000 description 1
- 238000001514 detection method Methods 0.000 description 1
- 230000000694 effects Effects 0.000 description 1
- 238000002474 experimental method Methods 0.000 description 1
- 230000008014 freezing Effects 0.000 description 1
- 238000007710 freezing Methods 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 230000003287 optical effect Effects 0.000 description 1
- 230000002085 persistent effect Effects 0.000 description 1
- 238000013138 pruning Methods 0.000 description 1
- 238000009966 trimming Methods 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L15/16—Speech classification or search using artificial neural networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/044—Recurrent networks, e.g. Hopfield networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/04—Segmentation; Word boundary detection
- G10L15/05—Word boundary detection
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/06—Creation of reference templates; Training of speech recognition systems, e.g. adaptation to the characteristics of the speaker's voice
- G10L15/063—Training
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/22—Procedures used during a speech recognition process, e.g. man-machine dialogue
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/26—Speech to text systems
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/28—Constructional details of speech recognition systems
- G10L15/32—Multiple recognisers used in sequence or in parallel; Score combination systems therefor, e.g. voting systems
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L19/00—Speech or audio signals analysis-synthesis techniques for redundancy reduction, e.g. in vocoders; Coding or decoding of speech or audio signals, using source filter models or psychoacoustic analysis
- G10L19/04—Speech or audio signals analysis-synthesis techniques for redundancy reduction, e.g. in vocoders; Coding or decoding of speech or audio signals, using source filter models or psychoacoustic analysis using predictive techniques
- G10L19/16—Vocoder architecture
- G10L19/167—Audio streaming, i.e. formatting and decoding of an encoded audio signal representation into a data stream for transmission or storage purposes
Abstract
A two-pass Automatic Speech Recognition (ASR) model can be used to perform ASR on a streaming device to generate a textual representation of an utterance captured in audio data. Various embodiments include a first pass portion of an ASR model for generating streaming candidate recognition(s) of utterances captured in audio data. For example, the first pass portion can include a recurrent neural network transformer (RNN-T) decoder. Various embodiments include a second pass portion of the ASR model for revising the streaming candidate recognition of the utterance and generating a text representation of the utterance. For example, the second pass portion can include a listen-to-spell (LAS) decoder. Various embodiments include a shared encoder shared between an RNN-T decoder and an LAS decoder.
Description
Background
Automated assistants (also referred to as "personal assistants," "mobile assistants," etc.) may be interacted with by users via various client devices, such as smartphones, tablet computers, wearable devices, automotive systems, standalone personal assistant devices, etc. The automated assistant receives input from the user that includes spoken natural language input (i.e., an utterance) and may respond by performing an action, by controlling another device, and/or providing responsive content (e.g., visual and/or audible natural language output). Automated assistants that interact with them via the client device may be implemented via the client device itself and/or via one or more remote computing devices (e.g., computing device(s) in the cloud) in network communication with the client device.
The automated assistant can convert audio data corresponding to a spoken utterance of the user into corresponding text (or other semantic representation). For example, audio data can be generated based on detection of a user's spoken language via one or more microphones of a client device that includes an automated assistant. The automatic assistant can include a speech recognition engine that attempts to recognize various characteristics of the spoken utterance captured in the audio data, such as the sounds (e.g., phonemes) produced by the spoken utterance, the order in which the sounds were uttered, the prosody, intonation, and so forth of the speech. In addition, the speech recognition engine can identify text words or phrases represented by these characteristics. The text can then be further processed by the automated assistant (e.g., using a natural language understanding engine and/or a dialog state engine) to determine the response content of the spoken utterance. The speech recognition engine can be implemented by the client device and/or by one or more automated assistant components that are remote from the client device but in network communication with the client device.
Disclosure of Invention
The techniques described herein are directed to generating a textual representation of a spoken utterance using an end-to-end (E2E) two-pass Automatic Speech Recognition (ASR) model. The two-pass ASR model includes a first-pass portion of the streaming and a second-pass portion of the non-streaming. In many embodiments, the first pass portion includes a recurrent neural network transformer (RNN-T) decoder and is capable of generating a candidate text representation of the spoken utterance in a streaming manner. In various embodiments, a second pass portion of the non-streaming (e.g., a portion including a listen-to-spell (LAS) decoder) can be used to improve the initial candidate text representation generated in the first pass portion. For example, the LAS decoder can be used to re-rank candidate textual representations generated using the RNN-T decoder. In many implementations, the two-pass ASR model can include a shared encoder, where the RNN-T decoder and the LAS decoder share the shared encoder. The use of a shared encoder can reduce the model size of the two-pass ASR model and/or can provide improved computational efficiency compared to, for example, using a dedicated encoder for the RNN-T decoder and using a dedicated encoder for the LAS decoder. In other words, when utilizing a two-pass ASR model in generating a textual representation of a spoken utterance, the use of a shared encoder enables efficient utilization of memory and/or computing resources. This saving of memory and/or computing resources can be particularly influential when the two-pass ASR model is stored and utilized by client devices that typically have limited memory and/or computing resources. For example, the use of a shared encoder can enable on-device ASR to be performed on client device(s) whose limited resources can prevent, at least in some situations such as low-battery situations, ASR on devices that use other model(s).
As an example, the client device can use one or more microphones of the client device to capture "turn on the living room lights" spoken utterances. A shared encoder can be used to process spoken utterances of "turn on the lighting room lights" in a streaming manner to generate a shared encoder output, and an RNN-T decoder can be used to process the shared encoder output to generate a streaming first pass candidate text representation of "turn on the lighting room lights". In response to determining that the user has finished speaking, the first pass candidate text representation and the shared encoder output can be processed using an LAS decoder to generate a text representation of "turn on the moving lights".
In some embodiments, a two-pass model can be trained using a combined loss function that includes both RNN-T loss and LAS loss. In some of those embodiments, the training process can include: (1) training an encoder and an RNN-T decoder; (2) freezing the encoder trained in (1) and using the frozen encoder in training the LAS decoder; and (3) training the shared encoder, the RNN-T decoder, and the LAS decoder simultaneously using the combined loss function. In some versions of those embodiments, the LAS decoder can additionally be trained using a Minimum Word Error Rate (MWER) training process.
Accordingly, various embodiments provide techniques for using a two-pass ASR model in streaming ASR on a device. For example, conventional ASR systems can entail capturing audio data at a client device, transmitting the audio data and/or a representation of the audio data to a remote server, processing the audio data and/or the representation of the audio data at the remote server to generate a textual representation of an utterance captured in the audio data, and transmitting the textual representation of the utterance back to the client device. In contrast, on-device ASR systems generate a textual representation of an utterance locally at a client device without sending data to or from a remote server. In many embodiments, the use of on-device ASR including a two-pass ASR model can conserve computing resources (e.g., battery power, processor cycles, memory, etc.) by removing the need to transmit data to and receive data from a remote server when compared to conventional ASR. Additionally, on-device ASR can provide user privacy advantages by processing audio data to locally generate text representations without transmitting the audio data to a remote server. Furthermore, the on-device ASR system provides improved reliability over conventional ASR models. For example, the on-device ASR system can generate a textual representation of the audio data when a network connection for transmitting the audio data to a remote server is unavailable, such as when a wireless network fails. In contrast, conventional ASR systems are not capable of generating textual representations of audio data when a network connection for transmitting data to and from a remote server is unavailable.
It should be understood that all combinations of the foregoing concepts and further concepts described in greater detail herein are contemplated as being part of the subject matter disclosed herein. For example, all combinations of claimed subject matter appearing at the end of this disclosure are contemplated as being part of the subject matter disclosed herein.
Drawings
Fig. 1 illustrates an example of generating a textual representation of an utterance, in accordance with various embodiments disclosed herein.
Fig. 2 illustrates an example of generating a textual representation of an utterance using a two-pass ASR model in accordance with various embodiments disclosed herein.
FIG. 3 illustrates a block diagram of an example environment in which embodiments disclosed herein may be implemented.
FIG. 4 is a flow diagram illustrating an example process of generating a training instance for training a two-pass ASR model in accordance with various embodiments disclosed herein.
FIG. 5 is a flow diagram illustrating an example process of training the first pass portion of a two-pass ASR model in accordance with embodiments disclosed herein.
FIG. 6 is a flow diagram illustrating an example process of training a second pass portion of a two-pass ASR model in accordance with embodiments disclosed herein.
FIG. 7 is a flow diagram illustrating an example process of training a two-pass ASR model in accordance with embodiments disclosed herein.
FIG. 8 is a flow diagram illustrating an example process for generating a textual representation of an utterance using a two-pass ASR model in accordance with an embodiment disclosed herein.
FIG. 9 illustrates a block diagram of another example environment in which embodiments disclosed herein may be implemented.
Fig. 10 illustrates an example architecture of a computing device.
Detailed Description
The requirements for many applications of state-of-the-art speech recognition systems can include not only low Word Error Rate (WER) but also low latency. In particular, for many use cases, the system must be able to decode the dialogs in a streaming manner and faster than real-time. Recently, the streaming recurrent neural network transducer (RNN-T) end-to-end (E2E) model has been shown to be a good candidate for on-device speech recognition, with improved WER and latency metrics compared to conventional on-device models. However, the model can still lag behind the large state-of-the-art conventional model in quality. On the other hand, the non-streaming E2E listen, join, and spelling (LAS) model has shown comparable quality to the large conventional model. The techniques described herein make the quality of the E2E streaming model closer to that of conventional systems by incorporating an LAS network as a second pass component, while still complying with latency constraints.
The E2E model for speech recognition combines Acoustic Models (AM), Pronunciation Models (PM), and Language Models (LM) into a single network, and has shown competitive results compared to conventional ASR systems with individual AM, PM, and LM. The E2E models are particularly attractive for on-device ASR because they can outperform conventional models on a device of comparable size.
Running ASR on a device with direct user interaction presents many challenges in many implementations. First, the recognition result must be streamed. I.e. the word should appear on the screen as soon as it is spoken. Second, the model must have a small time delay (i.e., the delay between the user speaking and the text appearing) to run on the mobile device in real time or faster than real time. Third, the model must be able to leverage user context (e.g., a list of contacts, song titles, etc.) to improve recognition accuracy. The RNN-T E2E model is able to satisfy these constraints.
Non-streaming E2E models, such as listen, join, and spell (LAS), have shown competitive performance with large conventional models. However, LAS models are not streaming because they must participate in the entire audio segment, making their use in interactive applications challenging.
In two-pass decoding, the second-pass model is typically used to improve the initial output from the first-pass model by using lattice rescoring or n-best re-rankings. Keeping the user perceived delay low while obtaining quality gain is a major challenge in case of applying the second pass model. Language model rescoring has been commonly used for multi-pass decoding, but has recently been used with LAS models to rescore hypotheses from the first pass conventional model. An LAS decoder that takes acoustic information from the encoder and language model information from previous predictions can be considered absolutely more powerful than the second pass language model. Thus, the techniques described herein explore the use of the LAS model for the second pass processing.
In particular, a two-pass architecture is explored in which the RNN-T decoder and the LAS decoder share the encoder network. The shared encoder allows for a reduced model size and computational cost compared to having a dedicated encoder for the RNN-T decoder and having a dedicated encoder that is fundamentally different for the LAS decoder. During the inference, the RNN-T decoder generates a streaming prediction, whereas the LAS decoder determines the prediction last. Various embodiments explore the trade-off by running the LAS decoder as a beam search as opposed to re-scoring the hypotheses generated by the RNN-T decoder. In some embodiments, computational cost can be reduced by running the first pass RNN-T model with adaptive beams and pruning the first pass before rescoring.
In some embodiments, a two-pass ASR architecture is as illustrated in fig. 2. The parameterized input acoustic frame can be represented as x ═ x (x)1..xr) Wherein x ist＝RdIs the log-mel filter bank energy. In some embodiments, where (d ═ 80) represents the number of frames in x. In the first pass, each acoustic frame xtAll through a shared encoder, including multiple layers of LSTM, to obtain an output etThe output is passed to an RNN-T decoder for streaming y at each time stepr. In the second pass, the output of the shared encoder for all frames is passed to the LAS decoder. During training, the LAS decoder calculates the output y from el. The LAS decoder may additionally use y during decodingrAs described below.
The use of an LAS decoder in two different decoding modes is explored in this work. Specifically, in the "second beam search" mode, the LAS decoder can generate the output y alone from elNeglecting yrThe output of the RNN-T decoder. Additionally or alternatively, the first K hypotheses from the RNN-T decoder can be selected when the LAS decoder is in a "rescore" mode.The LAS decoder can process each sequence in the teacher-forced mode with attention to e to compute a score that combines the log probability of the sequence and the attention-cover penalty. The sequence with the highest LAS score is chosen as the output sequence.
In some embodiments, the two-pass model can be trained from random initialization with a combined penalty of y*Representing ground truth transcription:
in the above equation, λ is a hyperparameter. In many embodiments, λ can be set to 0.5 to weight the RNN-T and LAS losses equally. In practice, training the model two-pass directly from scratch can be unstable, primarily because the ranges of loss for RNN-T and LAS are quite different when training from scratch. Thus, the multi-step process of training the model: (1) training an encoder and an RNN-T model; (2) training a LAS decoder using the encoder trained in (1), the trained encoder being frozen while the LAS decoder is trained; and (3) "depth trimming": the shared encoder and the two decoders are trained simultaneously with the use of the combining loss.
One of the disadvantages of the penalty in equation 1 is that the second pass LAS decoder is optimized independently of the RNN-T decoder. This means that there can be a mismatch between the training and decoding strategies. To address this problem, the LAS decoder can be further refined using an additional training step to minimize errors using an average word error rate (MWER) training process. In particular, given an input x, a ground truth transcription y*By LASP (y)m| x) is any given target sequence ymProbability calculated in teacher forced case (where y is given by RNN-TmThen m is r and if y is given by LASmThen m ═ l), the pre-trained two-pass model can be refined as follows.
First, the system runs a beam search with one of the decoders m from the two-pass model to get the hypothesis set Hm＝{h1，...，hbWhere b is the beam size. To match decode MWER training, HmIs dependent on the target decoding mode. For the LAS decoder to be used in the "second beam search" mode, the system calculates H by running the beam search on x (m ═ l) using the LAS decoder itselfm. On the other hand, for the LAS decoder to be used in the "rescore" mode, the system calculates H by running the beam search using the first pass RNN-T decoder (m ═ r)m(x)。
For each sequence ym∈HmLet W (y)*，ym) Is ymNumber of word errors of
the LAS decoder can be trained to minimize the combination of MWER loss and maximum likelihood cross-entropy loss:
LMWER(x，y*)+λMLE log P(y*|x) (3)
wherein λMLEIs a hyper-parameter. In many embodiments, λMLECan be set equal to 0.01.
Turning now to the figures, FIG. 1 illustrates an example of a two-pass ASR process in accordance with many embodiments. Fig. 1 includes a horizontal axis 100 representing time and includes time points 102, 104, 106, and 108. A first point in time 102 indicates where the user started speaking and is followed by a second point in time 104 indicating that the user has finished speaking. Time point 106 provides an indication when the two-pass ASR system determines that the user has finished speaking the utterance, and this follows time 104. In the illustrated example, the duration between time 104 and time 106 (i.e., the time it takes for the system to determine that the user has finished speaking) is much shorter than the duration between times 102 and 104 (i.e., the amount of time the user speaks an utterance). Additionally or alternatively, time point 108 indicates when the system generates a textual representation of the utterance, where time 108 follows time 106.
In some implementations, the first pass portion of the ASR model 110 is the duration between time 102 and time 106 (i.e., from the time when the user starts speaking and the system determines that the user has finished speaking). In the illustrated example, the first pass streaming portion of the ASR model 110 begins when the user begins speaking. However, this is merely illustrative and first pass portion 110 can begin slightly after the user begins speaking (e.g., first pass portion 110 can begin 0.01 seconds, 0.05 seconds, 0.1 seconds, 0.5 seconds, 1 second, and/or another duration after the user begins speaking). Similarly, in the illustrated example, first pass streaming portion 110 ends when the system determines that the user has finished speaking utterance 106. However, this is merely illustrative and first pass portion 110 can end slightly after the system determines that the user has finished speaking utterance 106 (e.g., first pass portion 110 can end 0.01 seconds, 0.05 seconds, 0.1 seconds, 0.5 seconds, 1 second, and/or another duration of time after the system determines that the user has finished speaking). In many implementations, the ASR system streams one or more candidate streaming text representations of an utterance while the user is speaking the utterance. In some embodiments, the first-pass streaming portion of the ASR model 110 includes a shared encoder and an RNN-T decoder. Additionally or alternatively, the first pass streaming portion of the ASR model 110 can include additional encoders in addition to the shared encoder and the RNN-T decoder.
In some implementations, the second pass portion of the ASR model 114 is the duration between time 106 and time 108 (i.e., from the time when the system has determined that the user has finished speaking the utterance and when the system generates the final text representation of the utterance). In the illustrated example, the second pass portion 114 begins when the system determines that the user has finished speaking the utterance 106. However, this is merely illustrative and second pass streaming portion 114 can begin slightly after the system determines that the user has finished speaking (e.g., second pass portion 114 can begin 0.01 seconds, 0.05 seconds, 0.1 seconds, 0.5 seconds, 1 second, and/or another duration after the system determines that the user has finished speaking). In some implementations, the second pass portion 114 includes a LAS decoder, wherein the LAS decoder is capable of refining the candidate text representations generated in a streaming manner during the first pass by processing the output generated in the first pass portion, such as the output generated using the shared encoder and/or the output generated using an additional encoder.
FIG. 2 is a block diagram illustrating an example process 200 for generating a textual representation of audio data using a two-pass ASR model. Audio data 202 that captures utterances spoken by humans is processed using a shared encoder 204 to generate a shared encoder output 206. In many implementations, the audio data 202 is captured using one or more microphones of the client device. The first pass portion of the ASR model can include processing the audio data 202 using the shared encoder 204 to generate a shared encoder output 206, and processing the shared encoder output 206 using an RNN-T decoder 208 to generate an RNN-T output 210. In some implementations, the first pass portion is a streaming ASR, and the RNN-T output 210 can include one or more candidate text representations of utterances captured in the streaming audio data 202.
In many embodiments, the second pass portion is non-streaming and can include processing the shared encoder output 206 and the RNN-T output 210 using the LAS decoder 212 to generate the LAS output 214. The LAS output 214 can be used to generate a final textual representation 216 of the audio data 202. In many implementations, the LAS decoder 212 can be used to refine the candidate text representation(s) of the audio data (i.e., the LAS decoder 212 can refine the RNN-T output 210) to generate a text representation of the audio data 216.
FIG. 3 illustrates an example environment 300 in which embodiments disclosed herein can be implemented. Fig. 3 includes a client device 302. In many implementations, the client device 302 is capable of executing an instance of an automated assistant (not depicted). The client computing device 302 may be, for example: a desktop computing device, a laptop computing device, a tablet computing device, a mobile phone computing device, a computing device of a user's vehicle (e.g., an in-vehicle communication system and an in-vehicle entertainment system, an in-vehicle navigation system), a stand-alone interactive speaker, a smart appliance such as a smart television, and/or a wearable apparatus of a user that includes a computing device (e.g., a watch of a user with a computing device, glasses of a user with a computing device, a virtual or augmented reality computing device). Additional and/or alternative client computing devices may be provided.
The example environment 300 includes a two-pass ASR engine 304, a shared encoder module 306, an RNN-T decoder module 310, an LAS decoder module 312, a training engine 316, a training instance engine 318, a two-pass ASR model 314, a training instance 320, and/or additional or alternative engines and/or models (not depicted). The two-pass ASR engine 304, the shared encoder module 306, the RNN-T decoder module 310, and the LAS decoder module 312 are example components in which the techniques described herein may interface. In some implementations, one or more aspects of one or more of the engines and/or modules 304, 306, 310, 312, and 316 of fig. 3 may be combined. For example, aspects of the shared encoder module 306 may be combined with aspects of the LAS decoder module 312.
The training instance engine 320 is capable of generating training instances 318. For example, the training instance engine 320 can generate one or more training instances, where each training instance includes audio data that captures an utterance and a ground truth text representation of the utterance. In some implementations, the training instance 318 can be generated by the training instance 320 in accordance with the process 400 of fig. 4 described herein.
The training engine 316 is able to train the two-pass ASR model 314 using the training instance 318. In some implementations, the two-pass ASR model 314 can include a shared encoder portion, an additional encoder portion, an RNN-T decoder portion, and an LAS decoder portion (e.g., the two-pass ASR model can be in accordance with the model illustrated in fig. 2 as described herein). For example, the training engine 316 can train the two-pass ASR model 314 by: (1) training the shared encoder and RNN-T decoder portions in accordance with the process 500 of fig. 5, (2) training the LAS decoder using the shared encoder trained in step (1), wherein the shared encoder is frozen during training of the LAS decoder in accordance with the process 600 of fig. 6, and (3) refining the trained shared encoder, RNN-T decoder, and LAS decoder using common losses in accordance with the process 700 of fig. 7.
Generating a textual representation of an utterance is described herein with respect to process 800 of fig. 8. The two-pass ASR engine 304 can generate a textual representation of the captured audio data using the two-pass ASR model 314. In some implementations, the shared encoder module 306 of the two-pass ASR engine 304 can process the captured audio data using the shared encoder portion of the two-pass ASR model 314 to generate a streamed shared encoder output. The RNN-T decoder module 310 can process the shared encoder output using the RNN-T decoder portion of the two-pass ASR model 314 to generate one or more candidate text representations of the utterance. In some implementations, the RNN-T decoder module 310 can process shared encoder output that is streamed by the shared encoder module 306. The LAS decoder module 312 is capable of generating a text representation of the utterance by processing the candidate text representation(s) of the utterance generated using the RNN-T decoder module and any shared encoder output stored in a buffer using the shared encoder module 306.
FIG. 4 is a flow diagram illustrating a process 400 of generating one or more training instances that can be used to train a two-pass ASR model, in accordance with various embodiments. For convenience, the operations of the flow diagrams are described with reference to a system that performs the operations. The system may include one or more components, such as one or more processors (e.g., CPU(s), GPU(s), and/or TPU (s)). While the operations of process 400 are shown in a particular order, this is not intended to be limiting. One or more operations may be reordered, omitted, and/or added.
At block 402, the system selects an instance of audio data that captures the utterance. For example, an example of audio data can capture the human spoken utterance "Turn the thermal up the three degrees" of thermostat.
At block 404, the system determines a textual representation of the utterance. In many implementations, the textual representation of the utterance can be determined by a human reviewer of the selected instance of the audio data. Additionally or alternatively, additional ASR systems can be used to determine a textual representation of the utterance. In many implementations, the textual representation of the audio data can be determined using an additional ASR system in which the generated textual representation is reviewed by a human reviewer for accuracy.
At block 406, the system stores a training instance that includes (1) an instance of audio data that captured the utterance and (2) a textual representation of the utterance.
At block 408, the system determines whether any additional training instances are generated. If so, the system proceeds back to block 402, selecting to capture additional instances of audio data for the utterance before proceeding to blocks 404 and 406 to use the additional instances of audio data. In many implementations, the system can determine whether to generate additional training instance(s) based on whether one or more conditions are satisfied, such as whether a threshold number of training instances have been generated, whether there are any remaining unprocessed instances of audio data, and/or whether additional condition(s) are satisfied. If, at block 408, the system determines that no additional training instances have been generated, the process ends.
FIG. 5 is a flow diagram illustrating a process 500 of training a shared encoder and RNN-T decoder of a two-pass ASR model in accordance with various embodiments. For convenience, the operations of the flow diagrams are described with reference to a system that performs the operations. The system may include one or more components, such as one or more processors (e.g., CPU(s), GPU(s), and/or TPU (s)). While the operations of process 500 are shown in a particular order, this is not intended to be limiting. One or more operations may be reordered, omitted, and/or added.
At block 502, the system selects a training instance that includes (1) an instance of audio data that captured the utterance and (2) a ground truth representation of the utterance. In some implementations, the training examples can be generated in accordance with the process 400 of fig. 4.
At block 504, the system processes the audio data portion of the training instance using a shared encoder to generate a shared encoder output and can process the shared encoder output using an RNN-T decoder to generate a predicted RNN-T output.
At block 506, the system generates an RNN-T penalty based on the predicted RNN-T output and the ground truth text representation portion of the training instance.
At block 508, the system updates one or more portions of the shared encoder and/or one or more portions of the RNN-T decoder based on the RNN-T loss.
At block 510, the system determines whether to perform additional training. If so, the system proceeds back to block 502, selecting additional training instances before proceeding to blocks 504, 506, and 508 to use the additional training instances before performing additional iterations of block 510. In some implementations, the system can determine to perform more training if there are one or more additional unprocessed training instances and/or if other criteria/criteria are still not met. Other criteria/criteria can include, for example, whether a threshold number of time periods have occurred and/or whether training of a threshold duration has occurred. Although the process 500 is described with respect to non-batch learning techniques, batch learning may additionally and/or alternatively be utilized. If, at block 510, the system determines that no additional training is to be performed, the process ends.
FIG. 6 is a flow diagram illustrating a process 600 of training a LAS decoder of a two-pass ASR model in accordance with various embodiments. For convenience, the operations of the flow diagrams are described with reference to a system that performs the operations. The system may include one or more components, such as one or more processors (e.g., CPU(s), GPU(s), and/or TPU (s)). While the operations of the process 600 are shown in a particular order, this is not intended to be limiting. One or more operations may be reordered, omitted, and/or added.
At block 602, the system selects a training instance that includes (1) an instance of audio data that captured the utterance and (2) a ground truth representation of the utterance. In some embodiments, the selected training instance is different at all from the training instances used to train the shared encoder and/or RNN-T decoder portions of the two-pass ASR model. In some other implementations, the selected training instances are additionally utilized to train the shared encoder and/or RNN-T decoder portion of the two-pass ASR model. In some implementations, the training examples can be generated in accordance with the process 400 of fig. 4.
At block 604, the system processes the audio data portion of the training instance using a shared encoder and LAS decoder to generate a predicted LAS output. In many embodiments, the shared encoder is previously trained by the system with the RNN-T decoder, such as the shared encoder trained with the RNN-T decoder in process 500 of FIG. 5.
At block 606, the system generates a LAS loss based on the predicted LAS output and a ground truth representation portion of the speech portion of the training instance.
At block 608, the system updates one or more portions of the LAS encoder based on the LAS loss without updating the shared encoder. In other words, the shared encoder previously trained is frozen while the LAS decoder is trained.
At block 610, the system determines whether any additional training is performed. If so, the system proceeds back to block 602, selects an additional training instance, then performs iterations of blocks 604, 606, and 608 based on the additional training instance, and then performs additional iterations of block 610. In some implementations, the system can determine to perform more training if there are one or more additional unprocessed training instances and/or if other criteria/criteria are still not met. Other criteria/criteria can include, for example, whether a threshold number of time periods have occurred and/or whether training of a threshold duration has occurred. Although the process 600 is described with respect to non-batch learning techniques, batch learning may additionally and/or alternatively be utilized. If, at block 610, the system determines that no additional training is to be performed, the process ends.
FIG. 7 is a flow diagram illustrating an example process 700 of jointly training a shared encoder, RNN-T decoder, and/or LAS decoder to refine a trained two-pass ASR model, in accordance with various embodiments. For example, the shared encoder and/or the RNN-T decoder can be trained in accordance with the process 500 of fig. 5 and/or the LAS decoder can be trained in accordance with the process 600 of fig. 6. For convenience, the operations of the flow diagrams are described with reference to a system that performs the operations. The system may include one or more components, such as one or more processors (e.g., CPU(s), GPU(s), and/or TPU (s)). While the operations of process 700 are shown in a particular order, this is not intended to be limiting. One or more operations may be reordered, omitted, and/or added.
At block 702, the system selects a training instance that includes (1) audio data that captured the utterance and (2) a ground truth text representation of the utterance. In some embodiments, the selected training instance is different at all from the training instances of the shared encoder, RNN-T decoder, and/or LAS decoder used to initially train the two-pass ASR model. In some other implementations, the selected training instance is additionally utilized to initially train the shared encoder, RNN-T decoder, and/or LAS decoder of the two-pass ASR model. In some implementations, the training examples can be generated in accordance with the process 400 of fig. 4.
At block 704, the system processes the audio data using the initially trained shared encoder to generate a shared encoder output. For example, the shared encoder can be initially trained in accordance with the process 500 of fig. 5.
At block 706, the system processes the shared encoder output using the initially trained RNN-T decoder to generate a shared encoder output. For example, the RNN-T decoder can be initially trained in accordance with the process 500 of FIG. 5.
At block 708, the system processes the shared encoder output using the initially trained LAS encoder to generate additional encoder output. For example, the additional encoders can be initially trained in accordance with the process 650 of fig. 6.
At block 710, the system can base the predicted RNN-T output, the predicted LAS output, and the ground reality of the training instanceThe live text representation portion generates a combined penalty. For example, the system can generate
At block 712, the system bases the combining loss: (1) sharing one or more portions of an encoder; (2) one or more portions of an RNN-T decoder; and/or (3) one or more portions of the LAS decoder.
At block 714, the system determines whether any additional training is performed. If so, the system proceeds back to block 702, selects an additional training instance, then performs iterations of blocks 704, 706, 708, 710, and 712 based on the additional training instance, and then performs additional iterations of block 714. In some implementations, the system can determine to perform more training if there are one or more additional unprocessed training instances and/or if other criteria/criteria are still not met. Other criteria/criteria can include, for example, whether a threshold number of time periods have occurred and/or whether training of a threshold duration has occurred. Although the process 700 is described with respect to non-batch learning techniques, batch learning can additionally and/or alternatively be utilized. If, at block 714, the system determines that no additional training is to be performed, the process ends.
FIG. 8 is a flow diagram illustrating a process 850 of generating a text representation of an utterance captured in audio data using a two-pass ASR model, wherein the two-pass ASR model includes a shared encoder, an RNN-T decoder, and an LAS decoder, in accordance with various embodiments. For convenience, the operations of the flow diagrams are described with reference to a system that performs the operations. The system may include one or more components, such as one or more processors (e.g., CPU(s), GPU(s), and/or TPU (s)). While the operations of process 800 are shown in a particular order, this is not intended to be limiting. One or more operations may be reordered, omitted, and/or added.
At block 802, the system receives streaming audio data, where the audio data captures utterances spoken by a human. In many implementations, audio data is captured using one or more microphones of the client device. For example, the microphone(s) of a mobile phone can be used to capture audio data.
At block 804, before the human has finished speaking and in a streaming manner, the system generates one or more candidate text representations of the utterance by processing the audio data using a first pass portion of the two-pass ASR model. In many embodiments, the system processes audio data using a first-pass portion of a two-pass ASR model by: (1) processing the audio data using a shared encoder to generate a shared encoder output, and (2) processing the shared encoder output using an RNN-T decoder to generate one or more candidate text representations of the utterance.
At block 806, the system determines that the human has finished speaking. In some implementations, the system can determine that a human has finished speaking based on a query end marker generated using the RNN-T decoder. In some implementations, the system can determine that a human has finished speaking based on a query end marker generated by processing audio data using an endpoint model (not depicted).
In block 808, in response to determining that the human has finished speaking, the system generates a text representation of the utterance using a second pass portion of the two-pass ASR model by processing (1) the shared encoder output and (2) one or more candidate text representations of the utterance using the LAS decoder to generate the text representation of the utterance. In some implementations, the LAS decoder can be used to re-score the first K hypotheses generated using the RNN-T decoder (i.e., the first K candidate text representations generated using the RNN-T decoder). For example, the LAS decoder can be used to re-score the first three hypotheses, the first five hypotheses, the first twenty hypotheses, and/or another number of previous hypotheses generated using the RNN-T decoder. For example, for each of the preceding hypotheses, the LAS decoder can be run in a teacher-forced mode with attention-sharing encoder outputs to generate LAS scores that combine the probabilities of the candidate hypotheses and the attention parameter(s). The system can select the hypothesis with the highest LAS score as the textual representation of the utterance. Additionally or alternatively, the LAS decoder can be used to re-score the tree-based lattices in which the top candidate text representation of the utterance is represented as a lattice. For example, the LAS decoder can be used to process each lattice arc in a teacher-forced mode with attention to the shared encoder output to update the probabilities in the arcs. After updating the probabilities using the LAS decoder, the system can identify the text representation of the utterance as the candidate text representation having the highest probability.
At block 810, the system performs one or more actions based on the textual representation of the utterance. For example, the system can render output for the speaker based on a textual representation on a screen of the client device. In some implementations, the system can render the output based on one or more of the candidate text representations while the human is speaking the utterance, such as rendering the output based on the candidate text representation having the highest probability. In some such implementations, the system can render the output based on the text representation by revising the output rendered while the human is speaking the utterance. Additionally or alternatively, the system can render one or more responses to the textual representation of the utterance. For example, the system can render a response of "it is 75 degrees and sunny (75 degrees and sunny today)" in response to a human speaking "what is the weather today" utterance. Additionally or alternatively, the system can control one or more client devices based on the textual representation of the utterance. For example, the system can change the temperature on the networked smart thermostat to 72 degrees in response to an utterance to "set the temperature of my thermostat to 72 degrees". In various implementations, the system can perform additional and/or alternative actions based on the final textual representation of the utterance.
Turning now to FIG. 9, an example environment is illustrated in which various embodiments can be implemented. Fig. 9 is initially depicted and includes a client computing device 902 that executes an instance of an automated assistant client 904. The one or more cloud-based automated assistant components 910 can be implemented on one or more computing systems (collectively, "cloud" computing systems) communicatively coupled to the client device 902 via one or more local and/or wide area networks (e.g., the internet), indicated generally at 908.
An instance of the automated assistant client 904, through its manner of interaction with the one or more cloud-based automated assistant components 910, may form what, from the perspective of the user, is a logical instance of the automated assistant 900 with which the user may participate in a human-to-machine conversation. An example of such an automated assistant 900 is depicted in fig. 9. It should therefore be appreciated that in some implementations, a user engaged with an automated assistant client 904 executing on a client device 902 may actually engage with his or her own logical instance of automated assistant 900. For the sake of brevity and simplicity, the term "automated assistant" as used herein as "serving" a particular user will generally refer to a combination of an automated assistant client 904 executing on a client device 902 operated by the user and one or more cloud-based automated assistant components 910 (which may be shared among multiple automated assistant clients of multiple client computing devices). It should also be understood that in some implementations, the automatic assistant 900 may respond to requests from any user, regardless of whether the user is actually "served" by that particular instance of the automatic assistant 900.
The client computing device 902 may be, for example: a desktop computing device, a laptop computing device, a tablet computing device, a mobile phone computing device, a computing device of a user's vehicle (e.g., an in-vehicle communication system, an in-vehicle entertainment system, an in-vehicle navigation system), a stand-alone interactive speaker, a smart appliance such as a smart television, and/or a wearable apparatus of a user that includes a computing device (e.g., a watch of a user with a computing device, glasses of a user with a computing device, a virtual or augmented reality computing device). Additional and/or alternative client computing devices may be provided. In various implementations, the client computing device 902 may optionally operate one or more other applications in addition to the automated assistant client 904, such as a messaging client (e.g., SMS, MMS, online chat), browser, and so forth. In some of those various implementations, one or more of the other applications can optionally interface with the automatic assistant 900 (e.g., via an application programming interface), or include instances of their own automatic assistant application (which may also interface with the cloud-based automatic assistant component(s) 910).
The automated assistant 900 participates in a human-machine conversation session with a user via user interface input and output devices of the client device 902. To protect user privacy and/or to conserve resources, in many cases the user must explicitly invoke the automatic assistant 900, typically before the automatic assistant will fully process the spoken utterance. Explicit invocation of the automated assistant 900 can occur in response to certain user interface inputs received at the client device 902. For example, user interface inputs that can invoke the automated assistant 900 via the client device 902 can optionally include actuations of hardware and/or virtual buttons of the client device 902. Further, the automated assistant client can include one or more local engines 906, such as an invocation engine operable to detect the presence of one or more spoken invocation phrases. The invocation engine can invoke the automated assistant 900 in response to detecting one of the spoken invocation phrases. For example, the invocation engine can invoke automatic Assistant 900 in response to detecting spoken invocation phrases such as "Hey Assistant," OK Assistant, "and/or" Assistant. The invocation engine can continuously process a stream of audio data frames based on output from one or more microphones of the client device 602 (e.g., without being in an "inactive" mode) to monitor for the occurrence of spoken invocation phrases. While the occurrence of a spoken call phrase is monitored, the call engine discards (e.g., after temporary storage in a buffer) any audio data frames that do not include the spoken call phrase. However, when the invocation engine detects the occurrence of a spoken invocation phrase in the processed frame of audio data, the invocation engine is able to invoke the automated assistant 900. As used herein, "invoking" the automatic assistant 900 can include causing one or more previously inactive functions of the automatic assistant 900 to be activated. For example, invoking the automatic assistant 900 can include causing one or more local engines 906 and/or cloud-based automatic assistant components 910 to further process the audio data frame on which the detected invocation phrase is based, and/or one or more following audio data frames (although no further processing of the audio data frames occurs prior to invocation). For example, the local and/or cloud-based components can process the captured audio data using a two-pass ASR model in response to a call to the automated assistant 900.
The one or more local engines 906 of the automated assistant 900 are optional and can include, for example, the above-described invocation engine, a local speech-to-text ("STT") engine (which converts captured audio to text), a local text-to-speech ("TTS") engine (which converts text to speech), a local natural language processor (which determines the meaning of the audio and/or text converted from audio), and/or other local components. Because the client device 902 is relatively constrained in terms of computing resources (e.g., processor cycles, memory, battery, etc.), the local engine 906 may have limited functionality with respect to any counterpart included in the cloud-based automated assistant component 910.
Relative to any counterpart of local engine 906, cloud-based automated assistant component 910 utilizes the nearly unlimited resources of the cloud to perform more robust and/or accurate processing of audio data and/or other user interface inputs. Again, in various embodiments, the client device 902 can provide audio data and/or other data to the cloud-based automatic assistant component 910 in response to the invocation engine detecting a spoken invocation phrase or detecting some other explicit invocation of the automatic assistant 900.
The illustrated cloud-based automatic assistant component 910 includes a cloud-based TTS module 912, a cloud-based STT module 914, a natural language processor 916, a conversation state tracker 918, and a conversation manager 920. In some implementations, one or more of the engines and/or modules of the automated assistant 900 may be omitted, combined, and/or implemented in a component separate from the automated assistant 900. Further, the automated assistant 900 can include additional and/or alternative engines and/or modules in some implementations. The cloud-based STT module 914 can convert the audio data into text, which can then be provided to the natural language processor 916.
The cloud-based TTS module 912 can convert text data (e.g., natural language responses formulated by the automated assistant 900) into computer-generated speech output. In some implementations, the TTS module 912 can provide the computer-generated speech output to the client device 902 to be directly output, e.g., using one or more speakers. In other implementations, textual data (e.g., natural language responses) generated by the automated assistant 900 may be provided to one of the local engines 906, which may then convert the textual data into computer-generated speech that is output locally.
The natural language processor 916 of the automated assistant 900 processes the free-form natural language input and generates annotated output based on the natural language input for use by one or more other components of the automated assistant 900. For example, the natural language processor 916 can process natural language free form input, which is a converted text input by the STT module 914 to audio data provided by a user via the client device 902. The generated annotated output may include one or more annotations of the natural language input and optionally one or more (e.g., all) of the words of the natural language input.
In some implementations, the natural language processor 916 is configured to identify and annotate various types of grammar information in the natural language input. In some implementations, the natural language processor 916 can additionally and/or alternatively include an entity tagger (not depicted) configured to annotate entity references in one or more segments, such as references to persons (including, e.g., literary characters, celebrities, public figures, etc.), organizations, places (real and fictional), and so forth. In some implementations, the natural language processor 916 may additionally and/or alternatively include a coreference parser (not depicted) configured to group or "cluster" references to the same entity based on one or more contextual cues. For example, a coreference parser may be utilized to parse the word "there" in the natural language input "I liked the Hypothetical cafe where I liked we eaten the last time" into "the Hypothetical cafe". In some implementations, one or more components of the natural language processor 916 may rely on annotations from one or more other components of the natural language processor 916. In some implementations, in processing a particular natural language input, one or more components of the natural language processor 916 may determine one or more annotations using related prior inputs and/or other related data other than the particular natural language input.
In some implementations, the dialog state tracker 918 can be configured to track a "dialog state" that includes, for example, a belief state of one or more users' goals (or "intentions") during a human-machine dialog session and/or across multiple dialog sessions. In determining dialog state, some dialog state trackers may seek to determine the most likely value(s) for slot(s) instantiated in a dialog based on user and system utterances in the dialog session. Some techniques utilize a fixed ontology that defines a set of slots and a set of values associated with those slots. Some techniques may additionally or alternatively be customized to individual slots and/or domains. For example, some techniques may require training a model for each slot type in each domain.
The dialog manager 920 may be configured to map the current dialog state, e.g., as provided by the dialog state tracker 918, to one or more "response actions" of a plurality of candidate response actions that are then performed by the automated assistant 900. The responsive action may occur in various forms depending on the current dialog state. For example, initial and midstream dialog states corresponding to turns of the dialog session that occurred before the last turn (e.g., when the end user desired task was performed) may be mapped to various response actions, including the automated assistant 900 outputting additional natural language dialogs. The response dialog may include, for example, requesting the user to provide parameters for some action that the dialog state tracker 918 believes the user intends to perform (i.e., filling the slot). In some implementations, the response action can include actions such as "request" (e.g., finding parameters for slot filling), "propose" (e.g., suggest an action or course of action for the user), "select", "notify" (e.g., provide the requested information to the user), "not match" (e.g., notify the user that the user's last input was not understood), command to the peripheral (e.g., to turn off the light bulb), and so forth.
Fig. 10 is a block diagram of an example computing device 1010 that may optionally be used to perform one or more aspects of the techniques described herein. In some implementations, one or more of the client computing devices and/or other components may include one or more components of the example computing device 1010.
The computing device 1010 typically includes at least one processor 1014 that communicates with a number of peripheral devices via a bus subsystem 1012. These peripheral devices may include storage subsystems 1024, including, for example, memory subsystem 1025 and file storage subsystem 1026, user interface output devices 1020, user interface input devices 1022, and network interface subsystem 1016. The input and output devices allow a user to interact with the computing device 1010. Network interface subsystem 1016 provides an interface to external networks and is coupled to corresponding interface devices in other computing devices.
The user interface input devices 1022 may include a keyboard, a pointing device such as a mouse, trackball, touchpad, or graphics tablet, a scanner, a touch screen incorporated into a display, an audio input device such as a voice recognition system, microphone, and/or other types of input devices. In general, use of the term "input device" is intended to include all possible types of devices and ways to input information into computing device 1010 or onto a communication network.
User interface output devices 1020 may include a display subsystem, a printer, a facsimile machine, or a non-visual display such as an audio output device. The display subsystem may include a cathode ray tube ("CRT"), a flat panel device such as a liquid crystal display ("LCD"), a projection device, or some other mechanism for creating a visible image. The display subsystem may also provide non-visual displays, such as via an audio output device. In general, use of the term "output device" is intended to include all possible types of devices and ways to output information from computing device 1010 to a user or to another machine or computing device.
These software modules are typically executed by the processor 1014, either alone or in combination with other processors. Memory 1025 used in storage subsystem 1024 can include a number of memories including a main random access memory ("RAM") 1030 for storing instructions and data during program execution and a read only memory ("ROM") 1032 in which fixed instructions are stored. File storage subsystem 1026 is capable of providing persistent storage for program and data files, and may include a hard disk drive, a floppy disk drive along with associated removable media, a CD-ROM drive, an optical drive, or removable media cartridges. Modules implementing the functionality of certain embodiments may be stored by file storage subsystem 1026 in storage subsystem 1024 or in other machines accessible by processor(s) 1014.
Where the systems described herein collect personal information about a user (or referred to generally herein as a "participant") or may make use of the personal information, the user may be provided with an opportunity to control whether programs or features collect user information (e.g., information about the user's social network, social actions or activities, profession, the user's preferences, or the user's current geographic location) or whether and/or how to receive content from a content server that may be more relevant to the user. In addition, certain data may be processed in one or more ways before it is stored or used, so that personally identifiable information is removed. For example, the identity of the user may be processed such that personally identifiable information cannot be determined for the user, or the geographic location of the user may be generalized (such as to a city, zip code, or state level) if geographic location information is obtained such that a particular geographic location of the user cannot be determined. Thus, the user may control how information is collected and/or used with respect to the user.
In some implementations, a method implemented by a processor(s) is provided and includes receiving a sequence including segments and capturing audio data of an utterance spoken by a human speaker. The method further comprises, for each of the segments, and in order: the segments are processed using a first pass portion of an automatic speech recognition ("ASR") model to generate a recurrent neural network transducer ("RNN-T") output. Processing each of the segments using the first pass portion of the ASR model includes: processing the segments using a shared encoder portion to generate a shared encoder output; adding the shared encoder output as a next item in the shared encoder buffer; and processing the shared encoder output using the RNN-T decoder portion to generate a corresponding portion of the RNN-T output. The method further includes determining one or more first pass candidate text representations of the utterance based on the RNN-T output, and determining that the human speaker has finished speaking the utterance. The method further includes, in response to determining that the human speaker has finished speaking the utterance: generating a listen-in spelling ("LAS") output based on processing the shared encoder output from the shared encoder buffer and (a) the RNN-T output and/or (b) one or more first-pass candidate text representations of the utterance using a second-pass LAS decoder portion of the ASR model. The method further includes generating a final text representation of the utterance based on the LAS output.
These and other implementations of the technology can include one or more of the following features.
In some embodiments, the method further comprises: rendering an output in a streaming manner based on at least one of the one or more first-pass candidate text representations of the utterance; and updating the rendered output based on the final text representation of the utterance.
In some implementations, the method further includes controlling one or more devices based on the final text representation of the utterance.
In some implementations, the method further includes determining content in response to the final text representation, and rendering an output based on the determined content.
In some implementations, a method implemented by a processor(s) is provided and includes: receiving an utterance; processing the utterance using a multi-pass decoder comprising a first pass, a recurrent neural network sensor (RNN-T), an end-to-end (E2E) decoder, and a second pass, listen-to-spell (LAS) decoder; and outputting a final result of processing the utterance using the multi-pass decoder.
These and other implementations of the technology can include one or more of the following features.
In some implementations, processing the utterance using a multi-pass decoder includes: transmitting the audio data frames representing the utterance to an RNN-T, E2E decoder for processing; providing the output with one or more streaming results of processing the transmitted audio data frames using an RNN-T, E2E decoder before the results of processing the utterance are finally decided; after the RNN-T, E2E decoder completes processing of the transmitted frame, transmitting a frame of audio data representing the utterance to the LAS decoder for processing; and finally deciding a result of processing the utterance based on a result of processing the transmitted audio data frame using the LAS decoder. In some of those implementations, the method further includes transmitting one or more streaming results of processing the transmitted frames of audio data using an RNN-T, E2E decoder to the LAS decoder. Based on the results of processing the one or more streaming results using the LAS decoder, the results of processing the utterance can be further finalized. In some implementations of those embodiments, finalizing the results of processing the utterance includes selecting, using the LAS decoder, a particular streaming result, the particular streaming result selected from among one or more streaming results, the one or more streaming results transmitted from the RNN-T, E2E decoder to the LAS decoder.
In some implementations, the utterance is processed by the LAS decoder when the LAS decoder is in the second beam search mode.
In some implementations, the utterance is processed by the LAS decoder when the LAS decoder is in a re-scoring mode.
In some implementations, the multi-pass decoder further includes a single encoder shared with the LAS decoder and the RNN-T, E2E decoder.
In some embodiments, a multi-pass decoder is trained to optimize a Minimum Word Error Rate (MWER).
In some embodiments, the multi-pass decoder is trained using a multi-step approach that involves training the RNN-T, E2E decoder independently, then stopping training the RNN-T, E2E decoder, and then training the LAS decoder independently.
Additionally, some embodiments include one or more processors (e.g., central processing unit(s) (CPU), graphics processing unit(s) (GPU), and/or tensor processing unit(s) (TPU) of one or more computing devices, wherein the one or more processors are operable to execute instructions stored in an associated memory, and wherein the instructions are configured to cause performance of any of the methods described herein.
While several embodiments have been described and illustrated herein, various other means and/or structures for performing the function and/or obtaining the result and/or one or more of the advantages described herein may be utilized and each of such variations and/or modifications is considered to be within the scope of the embodiments described herein. More generally, all parameters, dimensions, materials, and configurations described herein are intended to be exemplary and the actual parameters, dimensions, materials, and/or configurations will depend upon the particular application or applications for which the teachings are used. Those skilled in the art will recognize, or be able to ascertain using no more than one routine experiment, many equivalents to the specific embodiments described herein. It is, therefore, to be understood that the foregoing embodiments are presented by way of example only and that, within the scope of the appended claims and equivalents thereto, the embodiments may be practiced otherwise than as specifically described and claimed. Embodiments of the present disclosure are directed to each individual feature, system, article, material, kit, and/or method described herein. In addition, any combination of two or more such features, systems, articles, materials, kits, and/or methods, where such features, systems, articles, materials, kits, and/or methods are not mutually inconsistent, is included within the scope of the present disclosure.
Claims (16)
1. A computer-implemented method, comprising:
receiving an utterance;
processing the utterance using a multi-pass decoder, the multi-pass decoder including a first pass recurrent neural network sensor (RNN-T), an end-to-end (E2E) decoder, and a second pass spelling-in-progress (LAS) decoder; and
outputting a final result of processing the utterance using the multi-pass decoder.
2. The method of claim 1, wherein processing the utterance using the multi-pass decoder comprises:
transmitting audio data frames representing the utterance to the RNN-T, E2E decoder for processing;
providing for processing, for output, one or more streaming results of the transmitted audio data frames using the RNN-T, E2E decoder before a result of processing the utterance is finalized;
after the RNN-T, E2E decoder completes processing of the transmitted frame, transmitting the frame of audio data representing the utterance to the LAS decoder for processing; and
based on a result of processing the transmitted audio data frame using the LAS decoder, a result of processing the utterance is finally decided.
3. The method of claim 2, comprising:
transmitting one or more streaming results of processing the transmitted audio data frames using the RNN-T, E2E decoder to the LAS decoder,
wherein the outcome of processing the utterance is finalized further based on the outcome of processing the one or more streaming outcomes using the LAS decoder.
4. The method of claim 3, wherein finalizing the result of processing the utterance comprises selecting, by the LAS decoder, a particular streaming result, the particular streaming result selected from among the one or more streaming results, the one or more streaming results transmitted from the RNN-T, E2E decoder to the LAS decoder.
5. The method of any preceding claim, wherein the utterance is processed by the LAS decoder while the LAS decoder is in a second beam search mode.
6. The method of any preceding claim, wherein the utterance is processed by the LAS decoder while the LAS decoder is in a re-scoring mode.
7. The method of any preceding claim, wherein the multi-pass decoder further comprises a single encoder shared with both the LAS decoder and the RNN-T, E2E decoder.
8. The method of any preceding claim, wherein the multi-pass decoder is trained to optimize a Minimum Word Error Rate (MWER).
9. The method of any preceding claim, wherein the multi-pass decoder is trained using a multi-step method involving independently training the RNN-T, E2E decoder, then stopping training the RNN-T, E2E decoder, then independently training the LAS decoder.
10. A method implemented by one or more processors, the method comprising:
receiving audio data comprising a sequence of segments and capturing utterances spoken by a human speaker;
for each of the segments, and in order:
processing the segment using a first pass portion of an automatic speech recognition ("ASR") model to generate a recurrent neural network transformer ("RNN-T") output, wherein processing the segment using the first pass portion of the ASR model comprises:
processing the segments using a shared encoder portion to generate a shared encoder output,
adding the shared encoder output as a next item in a shared encoder buffer, and
processing the shared encoder output using an RNN-T decoder portion to generate a corresponding portion of an RNN-T output;
determining one or more first-pass candidate text representations for the utterance based on the RNN-T output;
determining that the human speaker has finished speaking the utterance;
in response to determining that the human speaker has finished speaking the utterance, generating an listen-in spelling ("LAS") output based on processing the shared encoder output from the shared encoder buffer and at least one of (a) the RNN-T output or (b) the one or more first-pass candidate text representations of the utterance using a second-pass LAS decoder portion of the ASR model; and
generating a final text representation of the utterance based on the LAS output.
11. The method of claim 10, further comprising:
rendering output in a streaming manner based on at least one of the one or more first-pass candidate text representations of the utterance; and
updating the rendered output based on the final text representation of the utterance.
12. The method of claim 10 or claim 11, further comprising:
controlling one or more devices based on the final text representation of the utterance.
13. The method according to any one of claims 10-12, further comprising:
determining content responsive to the final textual representation; and
rendering an output based on the determined content.
14. A computer program comprising instructions which, when executed by one or more processors of a computing system, cause the computing system to perform the method of any preceding claim.
15. A client device comprising one or more processors executing instructions stored in a memory of the client device to perform the method of any of claims 1-13.
16. A computer-readable storage medium storing instructions executable by one or more processors of a computing system to perform the method of any one of claims 1-13.
Applications Claiming Priority (5)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201962856815P | 2019-06-04 | 2019-06-04 | |
US62/856,815 | 2019-06-04 | ||
US201962943703P | 2019-12-04 | 2019-12-04 | |
US62/943,703 | 2019-12-04 | ||
PCT/US2020/035912 WO2020247489A1 (en) | 2019-06-04 | 2020-06-03 | Two-pass end to end speech recognition |
Publications (1)
Publication Number | Publication Date |
---|---|
CN114097025A true CN114097025A (en) | 2022-02-25 |
Family
ID=71842812
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202080040823.0A Pending CN114097025A (en) | 2019-06-04 | 2020-06-03 | Two-pass end-to-end speech recognition |
Country Status (7)
Country | Link |
---|---|
US (1) | US20220310072A1 (en) |
EP (2) | EP4047596A1 (en) |
JP (2) | JP2022534888A (en) |
KR (1) | KR20210154849A (en) |
CN (1) | CN114097025A (en) |
AU (2) | AU2020288565B2 (en) |
WO (1) | WO2020247489A1 (en) |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN115394300A (en) * | 2022-10-28 | 2022-11-25 | 广州小鹏汽车科技有限公司 | Voice interaction method, voice interaction device, vehicle and readable storage medium |
Families Citing this family (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20200090035A1 (en) * | 2018-09-19 | 2020-03-19 | International Business Machines Corporation | Encoder-decoder memory-augmented neural network architectures |
US11580956B2 (en) * | 2020-05-07 | 2023-02-14 | Google Llc | Emitting word timings with end-to-end models |
CN112802467A (en) * | 2020-12-21 | 2021-05-14 | 出门问问(武汉)信息科技有限公司 | Voice recognition method and device |
US20230104244A1 (en) * | 2021-09-17 | 2023-04-06 | International Business Machines Corporation | Separating acoustic and linguistic information in neural transducer models for end-to-end speech recognition |
US11880645B2 (en) | 2022-06-15 | 2024-01-23 | T-Mobile Usa, Inc. | Generating encoded text based on spoken utterances using machine learning systems and methods |
WO2024009746A1 (en) * | 2022-07-07 | 2024-01-11 | ソニーグループ株式会社 | Model generation device, model generation method, signal processing device, signal processing method, and program |
Family Cites Families (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP3148322B2 (en) * | 1992-01-24 | 2001-03-19 | 株式会社日立製作所 | Voice recognition device |
US7729912B1 (en) * | 2003-12-23 | 2010-06-01 | At&T Intellectual Property Ii, L.P. | System and method for latency reduction for automatic speech recognition using partial multi-pass results |
KR102386854B1 (en) * | 2015-08-20 | 2022-04-13 | 삼성전자주식회사 | Apparatus and method for speech recognition based on unified model |
US9799327B1 (en) * | 2016-02-26 | 2017-10-24 | Google Inc. | Speech recognition with attention-based recurrent neural networks |
WO2018071389A1 (en) * | 2016-10-10 | 2018-04-19 | Google Llc | Very deep convolutional neural networks for end-to-end speech recognition |
US20180330718A1 (en) * | 2017-05-11 | 2018-11-15 | Mitsubishi Electric Research Laboratories, Inc. | System and Method for End-to-End speech recognition |
CN111429889B (en) * | 2019-01-08 | 2023-04-28 | 百度在线网络技术（北京）有限公司 | Method, apparatus, device and computer readable storage medium for real-time speech recognition based on truncated attention |
US10861441B2 (en) * | 2019-02-14 | 2020-12-08 | Tencent America LLC | Large margin training for attention-based end-to-end speech recognition |
-
2020
- 2020-06-03 AU AU2020288565A patent/AU2020288565B2/en active Active
- 2020-06-03 EP EP22166641.5A patent/EP4047596A1/en active Pending
- 2020-06-03 JP JP2021569526A patent/JP2022534888A/en active Pending
- 2020-06-03 EP EP20747231.7A patent/EP3776536B1/en active Active
- 2020-06-03 KR KR1020217037998A patent/KR20210154849A/en unknown
- 2020-06-03 WO PCT/US2020/035912 patent/WO2020247489A1/en unknown
- 2020-06-03 CN CN202080040823.0A patent/CN114097025A/en active Pending
- 2020-06-03 US US17/616,129 patent/US20220310072A1/en active Pending
-
2023
- 2023-05-11 AU AU2023202949A patent/AU2023202949A1/en active Pending
- 2023-11-24 JP JP2023199215A patent/JP2024019405A/en active Pending
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN115394300A (en) * | 2022-10-28 | 2022-11-25 | 广州小鹏汽车科技有限公司 | Voice interaction method, voice interaction device, vehicle and readable storage medium |
Also Published As
Publication number | Publication date |
---|---|
AU2023202949A1 (en) | 2023-06-01 |
WO2020247489A1 (en) | 2020-12-10 |
JP2024019405A (en) | 2024-02-09 |
AU2020288565B2 (en) | 2023-02-16 |
US20220310072A1 (en) | 2022-09-29 |
AU2020288565A1 (en) | 2021-12-09 |
EP3776536B1 (en) | 2022-04-06 |
KR20210154849A (en) | 2021-12-21 |
EP3776536A1 (en) | 2021-02-17 |
JP2022534888A (en) | 2022-08-04 |
EP4047596A1 (en) | 2022-08-24 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
AU2020288565B2 (en) | Two-pass end to end speech recognition | |
US10140977B1 (en) | Generating additional training data for a natural language understanding engine | |
US20220238101A1 (en) | Two-pass end to end speech recognition | |
US11217254B2 (en) | Targeted voice separation by speaker conditioned on spectrogram masking | |
US11854533B2 (en) | Speaker awareness using speaker dependent speech model(s) | |
US11544504B1 (en) | Dialog management system | |
JP2024510817A (en) | Efficient streaming non-recurrent on-device end-to-end model | |
US11646035B1 (en) | Dialog management system | |
US11756533B2 (en) | Hot-word free pre-emption of automated assistant response presentation | |
US20230252995A1 (en) | Altering a candidate text representation, of spoken input, based on further spoken input | |
US20230230578A1 (en) | Personalized speech query endpointing based on prior interaction(s) | |
US11804225B1 (en) | Dialog management system | |
KR20230153450A (en) | Device arbitration for local implementation of automatic speech recognition |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |