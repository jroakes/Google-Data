US8112472B2 - Method and apparatus for supporting multiple versions of a web services protocol - Google Patents
Method and apparatus for supporting multiple versions of a web services protocol Download PDFInfo
- Publication number
- US8112472B2 US8112472B2 US11/132,637 US13263705A US8112472B2 US 8112472 B2 US8112472 B2 US 8112472B2 US 13263705 A US13263705 A US 13263705A US 8112472 B2 US8112472 B2 US 8112472B2
- Authority
- US
- United States
- Prior art keywords
- web services
- standard
- version
- data object
- request
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L69/00—Network arrangements, protocols or services independent of the application payload and not provided for in the other groups of this subclass
- H04L69/30—Definitions, standards or architectural aspects of layered protocol stacks
- H04L69/32—Architecture of open systems interconnection [OSI] 7-layer type protocol stacks, e.g. the interfaces between the data link level and the physical level
- H04L69/322—Intralayer communication protocols among peer entities or protocol data unit [PDU] definitions
- H04L69/329—Intralayer communication protocols among peer entities or protocol data unit [PDU] definitions in the application layer [OSI layer 7]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/31—Indexing; Data structures therefor; Storage structures
- G06F16/316—Indexing structures
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/958—Organisation or management of web site content, e.g. publishing, maintaining pages or automatic linking
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/50—Network services
- H04L67/51—Discovery or management thereof, e.g. service location protocol [SLP] or web services
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L69/00—Network arrangements, protocols or services independent of the application payload and not provided for in the other groups of this subclass
- H04L69/06—Notations for structuring of protocol data, e.g. abstract syntax notation one [ASN.1]
Definitions
- the present disclosure relates to web services and, more specifically, to supporting multiple versions of a web services standard.
- Computer systems are commonly used by enterprises and other organizations to store and manage information (in many instances, confidential and/or sensitive information). Constituents of the enterprises and organizations often have around-the-clock access to the stored information through the use of websites and related web-based services. Computer systems as referred to herein may include individual computers, servers, computing resources, networks, etc.
- Web services present a new way for computer to communicate with each other.
- Web services are software systems that can be identified by Universal Resource Identifiers (URI), analogous to identification of websites by Uniform Resource Locator (URL).
- URI Universal Resource Identifier
- URL Uniform Resource Locator
- Web services generally contain public interfaces and bindings that enable other software systems (such as other web services) to use the functionality seamlessly of the former. In this way, web services enhance the way computers communicate with each other, and therefore are transforming the way modern enterprises interact and share information.
- Some cross-platform programming languages have been developed to enable the vast variety of computer systems to communicate with each other.
- a popular example of one such computer language is Extensible Markup Language (XML).
- XML Extensible Markup Language
- Many web services interact with one another using XML which is a human readable format.
- web services are also used in non-English environments through the use of Unicode which is a universal language code.
- UDDI Universal Description, Discovery and Integration
- UDDI repositories employing UDDI standards to find the location of web services, in a manner similar to looking for service providers in a yellow pages phone book.
- UDDI repositories may also describe the functionality of listed web services utilizing a standardized vocabulary.
- UDDI repositories generally are provided as directories in which information pertaining to an enterprise, its services, technical information, and information about specifications for the enterprise's web services (for example, web service URIs) can be looked up.
- a UDDI registry may assign to the saved data unique identifying keys, which can then be used to access the specific data instances on demand.
- the keys are used as unique identifiers for the corresponding data objects in the UDDI repository.
- UDDI objects may refer to each using the keys.
- the keys provide a location function for the data requested.
- the various UDDI versions have different methods for generating unique identifying keys. This distinction can create incompatibilities in the way web services request and send information to one another.
- UDDI Version 2 uses keys which are generally Universal Unique Identifiers (UUID).
- UUID is generally a hexadecimal string, machine generated according to a very exacting algorithm that prevents duplicate UUIDs from being generated.
- An example of a UUID is 5a389ad2-22dd-11d1-aa77-002035b29092.
- UDDI Version 3 uses keys which are generally URI keys chosen by the user to be descriptive and meaningful in a comparable fashion to URLs.
- An example of a Version 3 key is uddi:acme.com:my_web_service.
- a method for supporting multiple versions of a web services protocol includes storing a data object in a repository, indexing said data object in the repository by using a first identifying key conforming to a first web services protocol, and indexing said data object in the repository by using a second identifying key conforming to a second web services protocol.
- a method for supporting multiple versions of a web services standard includes storing a data object in a repository, storing a first unique identifying key along with said data object in the repository, said first unique identifying key being selected or assigned in accordance with a first web services standard, and storing a second unique identifying key along with said data object in the repository, said second unique identifying key being selected or assigned in accordance with a second web services standard.
- An apparatus for supporting multiple versions of a web services protocol includes a repository for storing one or more data objects, first indexing means for indexing a data object in the repository by using a first identifying key conforming to a first web services protocol, and second indexing means for indexing said data object in the repository by using a second identifying key conforming to a second web services protocol.
- An apparatus for supporting multiple versions of a web services standard includes a data object-storage unit for storing a data object, a first-key-storing unit for storing a first unique identifying key along with said data object, said first unique identifying key being selected or assigned in accordance with a first web services standard, and a second-key-storing unit for storing a second unique identifying key along with said data object, said second unique identifying key being selected or assigned in accordance with a second web services standard.
- an apparatus for supporting multiple versions of a web services standard includes a repository for storing a data object, and two or more identifier keys conforming to respective versions of the web services standard for indexing the data object in the repository.
- the methods and apparatuses of this disclosure may be embodied in one or more computer programs stored on a computer readable medium or program storage device and/or transmitted via a computer network or other transmission medium in one or more segments or packets.
- FIG. 1 shows an example of a computer system capable of implementing the methods and apparatuses of this disclosure
- FIG. 2 shows a flow chart corresponding to a method for supporting multiple versions of a web services protocol, according to an exemplary embodiment of this disclosure
- FIG. 3 shows a flow chart corresponding to a method for supporting multiple versions of a web services standard, according to another exemplary embodiment
- FIG. 4 shows a schematic diagram corresponding to an apparatus for supporting multiple versions of a web services standard, according to an exemplary embodiment
- FIG. 5 is a flow chart corresponding to a method for handling a UDDI request, according to an exemplary embodiment
- FIG. 6 is a flow chart illustrating response conversion according to an exemplary embodiment.
- FIG. 7 shows a flow chart corresponding to a method for generating keys conforming to UDDI versions other than the native UDDI version, according to an exemplary embodiment.
- the present disclosure provides tools (in the form of methodologies, apparatuses, and systems) for supporting multiple versions of a web services protocol.
- Web services share objects of information with one another by referencing unique identifier keys.
- a server for web services which is capable of handling unique identifier keys of more than one web services protocol can be used.
- a server for web services can be adapted to be capable of handling unique identifiers for UDDI Version 2 and UDDI Version 3.
- UDDI repositories may contain one or more data objects.
- a UDDI repository may contain one data object for each web service listed in the UDDI repository.
- Data objects within UDDI repositories may be called upon by referencing unique identifier keys. These unique identifier keys may also be used by the UDDI repository to allow for the discovery and integration of web services.
- Repositories may be able to support multiple versions of a web services protocol or standard.
- the multiple versions of a web services protocol or standard may be, for example, multiple incremental versions of UDDI standards, for example UDDI Version 1, UDDI Version 2, etc.
- embodiments of the present disclosure are not limited to repositories that support multiple versions of UDDI standards.
- the multiple versions of a web services protocol or standard may refer to a set of standards or protocols that are not UDDI standards and/or not incremental improvements of one another.
- FIG. 1 shows an example of a computer system 100 which may implement the methods and apparatuses of the present disclosure.
- the apparatus and method of the present disclosure may be implemented in the form of a software application running on a computer system, for example, a mainframe, personal computer (PC), handheld computer, server, etc.
- the software application may be stored on computer readable media or program storage device locally accessible by the computer system, for example, floppy disk, optical disc, hard disk, etc., or may be remote from the computer system and accessible via a hard wired or wireless connection to a computer network (for example, a local area network, the Internet, etc.) or another transmission medium.
- a computer network for example, a local area network, the Internet, etc.
- the computer system 100 can include a central processing unit (CPU) 102 , program and data storage devices 104 , a printer interface 106 , a display unit 108 , a (LAN) local area network data transmission controller 110 , a LAN interface 112 , a network controller 114 , an internal bus 116 , and one or more input devices 118 (for example, a keyboard, mouse etc.).
- the system 100 can be connected to a database 120 , via a link 122 .
- a method for supporting multiple versions of a web services protocol will be explained with reference to FIG. 2 .
- a data object is stored in a repository (step S 201 ).
- the data object in the repository is indexed by using a first identifying key conforming to a first web services protocol (step S 202 ), and is also indexed by using a second identifying key conforming to a second web services protocol (step S 203 ).
- a method for supporting multiple versions of a web services standard is illustrated in FIG. 3 .
- a data object is stored in a repository (step S 301 ).
- a first unique identifying key is stored along with said data object in the repository (step S 302 ).
- the first unique identifying key is selected or assigned in accordance with a first web services standard.
- a second unique identifying key is stored along with said data object in the repository, said second unique identifying key being selected or assigned in accordance with a second web services standard (step S 303 ).
- FIG. 4 illustrates a schematic of a data repository according to an exemplary embodiment.
- a data repository 19 is used as an example of a server that utilizes UDDI protocols, however, any server running any web service can be equally capable of utilizing the present disclosure.
- the apparatus of this embodiment can handle unique identifier keys of more than one UDDI version. Therefore a client software system can access the data repository regardless of the UDDI version in use by the client.
- FIG. 4 shows four such clients each using a different UDDI version. The four clients are 11 , 12 , 13 , 14 , and they are using UDDI versions V 1 , V 2 , V 3 and a future version of UDDI (labeled V n ), respectively.
- the present disclosure can support any number of future UDDI versions.
- Each client may issue a request for information directed to the data repository 19 in the UDDI version supported by that client ( 11 - 14 ) sending the request.
- each request may be sent to a request handler 15 - 18 .
- Multiple request handlers 15 - 18 may be used, preferably, one request handler 15 - 18 for each UDDI version supported by the data repository 19 .
- FIG. 1 the exemplary embodiment shown in FIG. 1
- request handlers 15 - 18 can be used to support UDDI versions 1, 2, 3 and n, wherein a request handler 15 handles requests from clients 11 that utilize UDDI version 1, a request handler 16 handles requests from clients 12 that utilize UDDI version 2, a request handler 17 handles requests from clients 13 that utilize UDDI version 3 and a request handler 18 handles requests from clients 14 that utilize UDDI version n.
- All of the requests to the UDDI server can be received on a single channel, and distributed to the appropriate handler for the version of the request. This is possible because each version of UDDI uses a different XML namespace. It is easy to identify the namespace on the incoming request and dispatch it to the handler appropriate to that version. This allows the UDDI server to offer a single channel to requesters, while still handling multiple versions of requests.
- Objects of information 20 can be stored in the data repository 19 .
- Objects are generally written according to the current UDDI version (in the example of FIG. 4 , it is UDDI Version 3).
- Objects 20 can be associated with a unique identifier key for the version of UDDI for which the object 20 has been written in, here a UDDI Version 3 key 23 .
- the objects 20 may also be associated with a unique identifier key for other supported UDDI version.
- the object 20 is also associated with a unique identifier key for UDDI Version 1 21 , Version 2 22 and Version n 24 .
- the associated identifier keys for other supported UDDI versions may be generated based on the unique identifier key for the version of the UDDI standard to which the object 20 has been written to conform.
- An example of a method for generating other identifier keys according to an embodiment of the present disclosure is described below in connection with FIG. 7 .
- Each request handler 15 - 18 is capable of accepting a received request and passing on the requests to the data repository 19 in accordance with its respective UDDI version.
- the data repository 19 can process requests in any supported UDDI version by cross-referencing the unique identifier keys of the requests with the associated unique identifier keys 21 - 24 for the objects 20 stored in the data repository.
- the object 20 may be indexed for each supported UDDI standard version key 21 - 24 .
- the data repository may generate a response for each respective request received.
- the responses may contain a response object and/or a response unique identifier key.
- the responses may conform to the current UDDI version that the object 20 have been written in, here Version 3. While responses to Version 3 requests may be sent directly to the Version 3 request handler 17 , responses to other requests can be sent to converters 25 - 27 which convert the responses into the UDDI version corresponding to the UDDI version to which the request conforms.
- Some responses to requests by Version 3 clients 13 may still be manipulated after being generated by the data repository 19 .
- a response may be generated by the data repository 19 , and while conforming to UDDI Version 3, all of the various keys 21 - 24 may be associated with that response. Where this is the case, the excess keys 21 , 22 , 24 are removed prior to the response reaching the version 3 request handler 17 .
- converters 25 - 27 may be provided for versions other than the native version of the object 20 . Where no converter is required, excess keys 21 - 24 may be removed. For example, when future versions of the UDDI standard are released, the object 20 may conform to the new version and additional converters can be provided for responses sent to the Version 3 client 13 .
- the converters 25 - 27 may convert the response objects and/or response unique identifier keys for each of the responses into the UDDI version that corresponds to the respective requests. For example, a request conforming to UDDI Version 1 can be received by the data repository 19 . The data repository 19 may then cross check the request against the Version 1 key 21 and issue a response conforming to UDDI Version 3. This response may then be sent through a Version 1 converter 25 where any response objects and/or response unique identifier keys within the response are converted to UDDI version 1.
- Responses that have been converted and responses that do not require conversion can be sent to the respective request handlers 15 - 18 that sent the requests. From there, the responses can be sent to the client 11 - 14 that issued the corresponding request thereby completing an interaction between client 11 - 14 and data repository 19 .
- That object 20 When the object 20 is stored in the data repository 19 , that object may conform to the current UDDI version (that is Version 3 in FIG. 4 ). This version may be the native UDDI version of the object 20 .
- An object 20 written to conform to a particular UDDI version typically has a key conforming to that version. However, such an object 20 likely not have keys conforming to other (for example, prior) UDDI versions.
- a method for handling a UDDI request is discussed below.
- a client may generate a request (Step S 51 ). For example, this request may be to identify a particular web service corresponding to an object stored in a UDDI repository. The request may conform to a particular version of the UDDI standards. The request may be handled by a request handler (Step S 52 ) that is set up to handle requests conforming to the particular version of the UDDI standards. Handling of the request may include passing the request to the UDDI repository.
- the UDDI repository may generate a response based on the request (Step S 53 ). For example, the response may include information pertaining to the particular web service.
- the response may be handled by the request handler (Step S 55 ). If the native version is not the same as the particular version of the UDDI standards to which the request conforms (Step S 54 , No), then the response may be converted by a converter (Step S 56 ) and the response is handled by the request handler (Step S 55 ). Handling of the response may include passing the response back to the client that sent the request.
- a response may be received by a converter (Step S 61 ).
- This response may contain a response object and one or more keys. Each key may conform to a different supported version of UDDI standards.
- the converter may then select the key that conforms to a desired version of the UDDI standard (Step S 62 ).
- the desired version of the UDDI standard may be the version that the converter is designed to convert to and this may be the version to which a request for which the response was generated conforms.
- the response object and the selected key may then be sent to the client that sent the request (Step S 63 ).
- FIG. 7 shows how keys conforming to other UDDI versions can be generated.
- FIG. 7 relates to keys conforming to UDDI Version 2 and UDDI Version 3.
- Some keys conforming to one UDDI standard already have a key conforming to another UDDI standard, for example both Version 2 and Version 3 keys can be pre-assigned.
- Such cases are exceptions to the general case where only one key has been assigned. Therefore in creating additional keys, whether such an exception applies is considered (Step S 71 ). If such an exception applies (Step S 71 , Yes), the known equivalent key is used as the other key (Step S 72 ). For example, if the native key is a Version 3 key and a known equivalent Version 2 key has been pre-assigned, then the known equivalent Version 2 key is used as the Version 2 key.
- Step S 71 it may be determined whether the native key is a Version 2 key (Step S 73 ). If the native key is a Version 2 key (Step S 73 , Yes), then a Version 3 key can be generated by applying a prefix to the Version 2 key (Step S 74 ).
- Version 2 key is 5a389ad2-22dd-11d1-aa77-002035b29092
- a prefix such as uddi:acme.com: may be added, so that the Version 3 key can be uddi:acme.com:5a389ad2-22dd-11d1-aa77-002035b29092.
- Step S 75 it is determined whether the native key is a Version 3 key (Step S 75 ). If the native key is a Version 3 key (Step S 75 , Yes), then a Version 2 key can be generated by applying a conversion algorithm to the Version 3 key (Step S 76 ).
- a conversion algorithm For example, the algorithm defined in the UDDI V3 standard may be used. This algorithm involves creating an MD5 digest of the V3 key, then modifying it slightly to conform to the format of UUID (the UDDI Version 2 unique identifier key). This method being fully described within the UDDI Version 3 standard is incorporated herein by reference.
- Step S 75 If the native key is not a Version 3 key (Step S 75 , No), then it is determined whether there are no keys known (Step S 77 ). According to this example. ( FIG. 7 ), only Version 2 and Version 3 keys are possibilities. Therefore, if the native key is not Version 2 (Step 73 , No) and the native key is not Version 3 (Step 75 , No) then there is no key (Step S 77 , Yes). In this event, first a Version 2 key is created to conform to the UUID format as described in the UDDI Version 2 standard (Step S 78 ). Then a Version 3 key is created by applying the prefix to the Version 2 key (Step S 79 ), as done in Step S 74 .
Abstract
Description
Claims (34)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/132,637 US8112472B2 (en) | 2004-05-21 | 2005-05-19 | Method and apparatus for supporting multiple versions of a web services protocol |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US57359704P | 2004-05-21 | 2004-05-21 | |
US11/132,637 US8112472B2 (en) | 2004-05-21 | 2005-05-19 | Method and apparatus for supporting multiple versions of a web services protocol |
Publications (2)
Publication Number | Publication Date |
---|---|
US20050278396A1 US20050278396A1 (en) | 2005-12-15 |
US8112472B2 true US8112472B2 (en) | 2012-02-07 |
Family
ID=34971618
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/132,637 Active 2029-01-29 US8112472B2 (en) | 2004-05-21 | 2005-05-19 | Method and apparatus for supporting multiple versions of a web services protocol |
Country Status (5)
Country | Link |
---|---|
US (1) | US8112472B2 (en) |
EP (1) | EP1754145B1 (en) |
AT (1) | ATE439632T1 (en) |
DE (1) | DE602005015959D1 (en) |
WO (1) | WO2005114400A1 (en) |
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20120166459A1 (en) * | 2010-12-28 | 2012-06-28 | Sap Ag | System and method for executing transformation rules |
US8954443B1 (en) * | 2007-12-27 | 2015-02-10 | Emc Corporation | Multi-protocol data object scanning by a storage virtualization system |
Families Citing this family (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7933897B2 (en) | 2005-10-12 | 2011-04-26 | Google Inc. | Entity display priority in a distributed geographic information system |
US8001176B2 (en) * | 2005-10-14 | 2011-08-16 | Canon Kabushiki Kaisha | Web service with multiple listening endpoints |
DE102007040405B3 (en) * | 2007-08-27 | 2009-03-05 | Fujitsu Siemens Computers Gmbh | Method and device for generating and / or using a generic web service |
Citations (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6279003B1 (en) * | 1998-12-22 | 2001-08-21 | International Business Machines Corporation | Self-describing multiple key format database index |
US20020116454A1 (en) * | 2000-12-21 | 2002-08-22 | William Dyla | System and method for providing communication among legacy systems using web objects for legacy functions |
US20030074401A1 (en) * | 2001-05-23 | 2003-04-17 | Brian Connell | Method and system for communication between computer systems |
WO2003077156A1 (en) | 2002-03-14 | 2003-09-18 | Koninklijke Philips Electronics N.V. | Automatic discovering of web services |
US20040025117A1 (en) | 2002-07-19 | 2004-02-05 | Commerce One Operations, Inc. | Registry driven interoperability and exchange of documents |
WO2004019231A2 (en) | 2002-08-26 | 2004-03-04 | Computer Associates Think, Inc. | Web services apparatus and methods |
US20040068586A1 (en) | 2002-10-04 | 2004-04-08 | Oracle International Corporation | Techniques for managing interaction of web services and applications |
US6782003B1 (en) * | 2000-04-12 | 2004-08-24 | Serviceswitch.Com | Data management system and method |
US20050235009A1 (en) * | 2004-03-31 | 2005-10-20 | Microsoft Corporation | Type evolution |
US6961760B2 (en) * | 2001-07-17 | 2005-11-01 | International Business Machines Corporation | Transforming data automatically between communications parties in a computing network |
US7370118B2 (en) * | 2004-02-04 | 2008-05-06 | International Business Machines Corporation | Methods, systems, and computer program products for dynamic inter-operability of nodes in service grids |
-
2005
- 2005-05-19 EP EP05753745A patent/EP1754145B1/en active Active
- 2005-05-19 DE DE602005015959T patent/DE602005015959D1/en active Active
- 2005-05-19 US US11/132,637 patent/US8112472B2/en active Active
- 2005-05-19 WO PCT/US2005/017788 patent/WO2005114400A1/en active Application Filing
- 2005-05-19 AT AT05753745T patent/ATE439632T1/en not_active IP Right Cessation
Patent Citations (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6279003B1 (en) * | 1998-12-22 | 2001-08-21 | International Business Machines Corporation | Self-describing multiple key format database index |
US6782003B1 (en) * | 2000-04-12 | 2004-08-24 | Serviceswitch.Com | Data management system and method |
US20020116454A1 (en) * | 2000-12-21 | 2002-08-22 | William Dyla | System and method for providing communication among legacy systems using web objects for legacy functions |
US20030074401A1 (en) * | 2001-05-23 | 2003-04-17 | Brian Connell | Method and system for communication between computer systems |
US6961760B2 (en) * | 2001-07-17 | 2005-11-01 | International Business Machines Corporation | Transforming data automatically between communications parties in a computing network |
WO2003077156A1 (en) | 2002-03-14 | 2003-09-18 | Koninklijke Philips Electronics N.V. | Automatic discovering of web services |
US20040025117A1 (en) | 2002-07-19 | 2004-02-05 | Commerce One Operations, Inc. | Registry driven interoperability and exchange of documents |
WO2004019231A2 (en) | 2002-08-26 | 2004-03-04 | Computer Associates Think, Inc. | Web services apparatus and methods |
US20040068586A1 (en) | 2002-10-04 | 2004-04-08 | Oracle International Corporation | Techniques for managing interaction of web services and applications |
US7370118B2 (en) * | 2004-02-04 | 2008-05-06 | International Business Machines Corporation | Methods, systems, and computer program products for dynamic inter-operability of nodes in service grids |
US20050235009A1 (en) * | 2004-03-31 | 2005-10-20 | Microsoft Corporation | Type evolution |
Non-Patent Citations (4)
Title |
---|
Notification of Transmittal of the International Search Report and the Written Opinion of the International Searching Authority for International Application No. PCT/US2005/017781, filed May 19, 2005 (12 pages). |
Notification of Transmittal of the International Search Report and the Written Opinion of the International Searching Authority for International Application No. PCT/US2005/017788, filed May 19, 2005, (6 pages). |
Rompothong, P. and Senivongse, T. 2003. A query federation of UDDI registries. In Proceedings of the 1st international Symposium on information and Communication Technologies (Dublin, Ireland, Sep. 24-26, 2003). ACM International Conference Proceeding Series, vol. 49. Trinity College Dublin, 561-566. * |
UDDI.ORG: "UDDI Technical White Paper", vol. 1, XP 00230398 (13 pages), Sep. 6, 2000. |
Cited By (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8954443B1 (en) * | 2007-12-27 | 2015-02-10 | Emc Corporation | Multi-protocol data object scanning by a storage virtualization system |
US20120166459A1 (en) * | 2010-12-28 | 2012-06-28 | Sap Ag | System and method for executing transformation rules |
US9135319B2 (en) * | 2010-12-28 | 2015-09-15 | Sap Se | System and method for executing transformation rules |
Also Published As
Publication number | Publication date |
---|---|
ATE439632T1 (en) | 2009-08-15 |
EP1754145B1 (en) | 2009-08-12 |
WO2005114400A1 (en) | 2005-12-01 |
EP1754145A1 (en) | 2007-02-21 |
US20050278396A1 (en) | 2005-12-15 |
DE602005015959D1 (en) | 2009-09-24 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US6594700B1 (en) | System and method for implementing a universal service broker interchange mechanism | |
US9219705B2 (en) | Scaling network services using DNS | |
US6868447B1 (en) | Mechanism and apparatus for returning results of services in a distributed computing environment | |
US6970869B1 (en) | Method and apparatus to discover services and negotiate capabilities | |
US6918084B1 (en) | Spawning new repository spaces using information provided in advertisement schema messages | |
US6643650B1 (en) | Mechanism and apparatus for using messages to look up documents stored in spaces in a distributed computing environment | |
US8135796B1 (en) | Mechanism and apparatus for accessing and addressing services in a distributed computing environment | |
US7716492B1 (en) | Method and apparatus to obtain service capability credentials | |
US6789077B1 (en) | Mechanism and apparatus for web-based searching of URI-addressable repositories in a distributed computing environment | |
US6862594B1 (en) | Method and apparatus to discover services using flexible search criteria | |
US7080078B1 (en) | Mechanism and apparatus for URI-addressable repositories of service advertisements and other content in a distributed computing environment | |
US7412518B1 (en) | Method and apparatus for proximity discovery of services | |
US8112424B2 (en) | Flexible and resilient information collaboration management infrastructure | |
US7395333B1 (en) | Method and apparatus to obtain negotiated service advertisement | |
US8548976B2 (en) | Balancing load requests and failovers using a UDDI proxy | |
US6301617B1 (en) | Selection of resources utilizing virtual uniform resource locators | |
US6973493B1 (en) | Mechanism and apparatus for security of newly spawned repository spaces in a distributed computing environment | |
US7370091B1 (en) | Method and apparatus for obtaining space advertisements | |
US20050198206A1 (en) | Method and apparatus for dynamically selecting functionally equivalent Web services through a single autonomic proxy | |
US20030220993A1 (en) | Method and apparatus for dynamically determining information for deploying a web service | |
US7650609B2 (en) | Multi-environment document management system access | |
EP1815664A1 (en) | Method and system for enhancing uniform resource identifiers , uris , with additional information | |
JP2004501428A (en) | Method and apparatus for service proximity discovery | |
JP2006252085A (en) | File server for converting user identification information | |
US20070011274A1 (en) | Data transfer in a multi-environment document management system access |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: COMPUTER ASSOCIATES THINK, INC., NEW YORKFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:BETTS, CHRISTOPHER;ROGERS, TONY;REEL/FRAME:016583/0796Effective date: 20050518 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:COMPUTER ASSOCIATES THINK, INC.;REEL/FRAME:028801/0049Effective date: 20120330 |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044101/0405Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 12TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1553); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 12 |