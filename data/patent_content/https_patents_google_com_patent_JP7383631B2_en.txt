JP7383631B2 - Protocol-level control for system-on-chip (SoC) agent reset and power management - Google Patents
Protocol-level control for system-on-chip (SoC) agent reset and power management Download PDFInfo
- Publication number
- JP7383631B2 JP7383631B2 JP2020552287A JP2020552287A JP7383631B2 JP 7383631 B2 JP7383631 B2 JP 7383631B2 JP 2020552287 A JP2020552287 A JP 2020552287A JP 2020552287 A JP2020552287 A JP 2020552287A JP 7383631 B2 JP7383631 B2 JP 7383631B2
- Authority
- JP
- Japan
- Prior art keywords
- agent
- soc
- interconnect
- transaction
- reset
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
- 230000004044 response Effects 0.000 claims description 24
- 230000006870 function Effects 0.000 claims description 14
- 230000005059 dormancy Effects 0.000 claims 4
- 239000003795 chemical substances by application Substances 0.000 description 263
- 239000000872 buffer Substances 0.000 description 27
- 238000000034 method Methods 0.000 description 27
- 230000008569 process Effects 0.000 description 22
- 230000002829 reductive effect Effects 0.000 description 16
- 238000007726 management method Methods 0.000 description 14
- 238000010586 diagram Methods 0.000 description 13
- 230000005540 biological transmission Effects 0.000 description 9
- 238000013461 design Methods 0.000 description 6
- 238000012545 processing Methods 0.000 description 6
- 238000011144 upstream manufacturing Methods 0.000 description 5
- 241001522296 Erithacus rubecula Species 0.000 description 4
- 230000006266 hibernation Effects 0.000 description 4
- 238000013459 approach Methods 0.000 description 3
- 238000011161 development Methods 0.000 description 3
- 230000018109 developmental process Effects 0.000 description 3
- 230000000670 limiting effect Effects 0.000 description 3
- 230000007257 malfunction Effects 0.000 description 3
- 230000007958 sleep Effects 0.000 description 3
- 230000008859 change Effects 0.000 description 2
- 238000004891 communication Methods 0.000 description 2
- 230000003247 decreasing effect Effects 0.000 description 2
- 238000013021 overheating Methods 0.000 description 2
- 230000002093 peripheral effect Effects 0.000 description 2
- 230000009467 reduction Effects 0.000 description 2
- 230000000717 retained effect Effects 0.000 description 2
- 230000011664 signaling Effects 0.000 description 2
- 230000008685 targeting Effects 0.000 description 2
- 239000002699 waste material Substances 0.000 description 2
- 230000002411 adverse Effects 0.000 description 1
- 230000003190 augmentative effect Effects 0.000 description 1
- 230000000295 complement effect Effects 0.000 description 1
- 238000012790 confirmation Methods 0.000 description 1
- 230000001934 delay Effects 0.000 description 1
- 230000000694 effects Effects 0.000 description 1
- 230000007717 exclusion Effects 0.000 description 1
- 230000002349 favourable effect Effects 0.000 description 1
- 238000007429 general method Methods 0.000 description 1
- 238000003384 imaging method Methods 0.000 description 1
- 238000002955 isolation Methods 0.000 description 1
- 230000014759 maintenance of location Effects 0.000 description 1
- 230000007246 mechanism Effects 0.000 description 1
- 238000012544 monitoring process Methods 0.000 description 1
- 230000002085 persistent effect Effects 0.000 description 1
- 238000004321 preservation Methods 0.000 description 1
- 230000002441 reversible effect Effects 0.000 description 1
- 229910052710 silicon Inorganic materials 0.000 description 1
- 239000010703 silicon Substances 0.000 description 1
- 238000012360 testing method Methods 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000007704 transition Effects 0.000 description 1
- 238000011282 treatment Methods 0.000 description 1
- 230000002618 waking effect Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F1/00—Details not covered by groups G06F3/00 - G06F13/00 and G06F21/00
- G06F1/24—Resetting means
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F1/00—Details not covered by groups G06F3/00 - G06F13/00 and G06F21/00
- G06F1/26—Power supply means, e.g. regulation thereof
- G06F1/32—Means for saving power
- G06F1/3203—Power management, i.e. event-based initiation of a power-saving mode
- G06F1/3206—Monitoring of events, devices or parameters that trigger a change in power modality
- G06F1/3209—Monitoring remote activity, e.g. over telephone lines or network connections
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F1/00—Details not covered by groups G06F3/00 - G06F13/00 and G06F21/00
- G06F1/26—Power supply means, e.g. regulation thereof
- G06F1/32—Means for saving power
- G06F1/3203—Power management, i.e. event-based initiation of a power-saving mode
- G06F1/3234—Power saving characterised by the action undertaken
- G06F1/324—Power saving characterised by the action undertaken by lowering clock frequency
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F1/00—Details not covered by groups G06F3/00 - G06F13/00 and G06F21/00
- G06F1/26—Power supply means, e.g. regulation thereof
- G06F1/32—Means for saving power
- G06F1/3203—Power management, i.e. event-based initiation of a power-saving mode
- G06F1/3234—Power saving characterised by the action undertaken
- G06F1/3243—Power saving in microcontroller unit
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F1/00—Details not covered by groups G06F3/00 - G06F13/00 and G06F21/00
- G06F1/26—Power supply means, e.g. regulation thereof
- G06F1/32—Means for saving power
- G06F1/3203—Power management, i.e. event-based initiation of a power-saving mode
- G06F1/3234—Power saving characterised by the action undertaken
- G06F1/3296—Power saving characterised by the action undertaken by lowering the supply or operating voltage
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/07—Responding to the occurrence of a fault, e.g. fault tolerance
- G06F11/14—Error detection or correction of the data by redundancy in operation
- G06F11/1402—Saving, restoring, recovering or retrying
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F15/00—Digital computers in general; Data processing equipment in general
- G06F15/76—Architectures of general purpose stored program computers
- G06F15/78—Architectures of general purpose stored program computers comprising a single central processing unit
- G06F15/7807—System on chip, i.e. computer system on a single chip; System in package, i.e. computer system on one or more chips in a single package
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/54—Interprogram communication
- G06F9/542—Event management; Broadcasting; Multicasting; Notifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N5/00—Computing arrangements using knowledge-based models
- G06N5/04—Inference or reasoning models
- G06N5/043—Distributed expert systems; Blackboards
-
- G—PHYSICS
- G09—EDUCATION; CRYPTOGRAPHY; DISPLAY; ADVERTISING; SEALS
- G09C—CIPHERING OR DECIPHERING APPARATUS FOR CRYPTOGRAPHIC OR OTHER PURPOSES INVOLVING THE NEED FOR SECRECY
- G09C1/00—Apparatus or methods whereby a given sequence of signs, e.g. an intelligible text, is transformed into an unintelligible sequence of signs by transposing the signs or groups of signs or by replacing them by others according to a predetermined system
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/08—Key distribution or management, e.g. generation, sharing or updating, of cryptographic keys or passwords
- H04L9/0816—Key establishment, i.e. cryptographic processes or cryptographic protocols whereby a shared secret becomes available to two or more parties, for subsequent use
- H04L9/085—Secret sharing or secret splitting, e.g. threshold schemes
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y02—TECHNOLOGIES OR APPLICATIONS FOR MITIGATION OR ADAPTATION AGAINST CLIMATE CHANGE
- Y02D—CLIMATE CHANGE MITIGATION TECHNOLOGIES IN INFORMATION AND COMMUNICATION TECHNOLOGIES [ICT], I.E. INFORMATION AND COMMUNICATION TECHNOLOGIES AIMING AT THE REDUCTION OF THEIR OWN ENERGY USE
- Y02D30/00—Reducing energy consumption in communication networks
Description
関連出願への相互参照
本願は、２０１８年３月３０日出願の米国仮特許出願第６２／６５０，５８９（ＰＲＴＩＰ００１Ｐ）号および２０１８年６月２８日出願の米国仮出願第６２／６９１，１１７（ＰＲＴ１Ｐ００２Ｐ）号に基づく優先権を主張する。これら優先権主張基礎出願の各々は、すべての目的のためにその全体が参照によって本明細書に組み込まれる。
Cross-references to related applications This application is incorporated by reference to U.S. Provisional Patent Application No. 62/650,589 (PRTIP001P) filed March 30, 2018 and U.S. Provisional Patent Application No. 62/691,117 (filed June 28, 2018). PRT1P002P). Each of these priority underlying applications is incorporated herein by reference in its entirety for all purposes.
本願は、システムオンチップ（ＳｏＣ）に関し、より具体的には、ＳｏＣ上でリセットおよび／または電力管理機能を一貫して実施し、ひいては、特に複数のＳｏＣファミリーにわたって、ＳｏＣのより一様なシステムソフトウェアビューを提供するシステムおよび方法に関する。 TECHNICAL FIELD This application relates to systems on a chip (SoC), and more specifically to implementing reset and/or power management functions consistently on an SoC, thereby creating a more uniform system of SoCs, particularly across multiple SoC families. A system and method for providing software views.
システムオンチップ（「ＳｏＣ」）は、複数のサブシステムを備える集積回路であり、しばしば、知的財産（「ＩＰ」）エージェントと呼ばれる。ＩＰエージェントは、典型的には、特定の機能を実装または実行するように設計された回路の「再利用可能な」ブロックである。ＩＰエージェントを用いることにより、複雑なＳｏＣを開発する時間およびコストを大幅に削減できる。 A system-on-chip (“SoC”) is an integrated circuit that includes multiple subsystems and is often referred to as an intellectual property (“IP”) agent. IP agents are typically "reusable" blocks of circuitry designed to implement or perform a specific function. Using IP agents can significantly reduce the time and cost of developing complex SoCs.
ＳｏＣは、典型的には、システムコントローラと、相互接続（バスまたはネットワークオンチップ（ＮｏＣ）など）と、を備える。システムコントローラは、システムソフトウェアを実行し、ＳｏＣの全体動作を管理するために提供される。様々なＩＰエージェントが、１以上のリンクを介して相互接続に接続されており、相互接続を介して互いに通信する。 An SoC typically includes a system controller and interconnects (such as a bus or network-on-a-chip (NoC)). A system controller is provided to run system software and manage the overall operation of the SoC. Various IP agents are connected to and communicate with each other via one or more links to the interconnect.
ＳｏＣ開発者は、一般に、しばしば複数のベンダからの異なるＩＰエージェントを利用する。各ＩＰエージェントは、通常、リセットのための独自の手順を実装する。ＳｏＣ上のシステムコントローラおよび相互接続の観点から、これは、いくつかの理由で問題がある。 SoC developers commonly utilize different IP agents, often from multiple vendors. Each IP agent typically implements its own procedure for resetting. From a system controller and interconnect perspective on the SoC, this is problematic for several reasons.
典型的なＳｏＣは、通常、相互接続に接続された複数のＩＰエージェントを有する。リセット後に、ＩＰエージェントの各々は、自身が用いる独自のリセット手順により、異なる時間にリセット状態から出る可能性がある。各ＩＰエージェントがリセットから出る時間が異なることで、重大な問題が起こりうる。送信元ＩＰエージェントが、まだリセット中である宛先ＩＰエージェントへのトランザクションを生成した場合、（１）宛先ＩＰエージェントは、要求を処理することができず、（２）送信元ＩＰエージェントは、応答を決して受信しない。結果として、システム全体が、ハングアップする場合があり、おそらくは、システム全体のリセットが必要となる。 A typical SoC typically has multiple IP agents connected to each other. After reset, each IP agent may come out of the reset state at different times due to the unique reset procedure it uses. Serious problems can arise if each IP agent takes a different amount of time to come out of reset. If a source IP agent generates a transaction to a destination IP agent that is still resetting, then (1) the destination IP agent is unable to process the request, and (2) the source IP agent is unable to process the response. never received. As a result, the entire system may hang, possibly requiring a complete system reset.
ハングアップを防止するための１つの周知のアプローチは、相互接続と各ＩＰエージェントとの間の各リンクの中間に回路を設計して配置することである。この回路の目的は、相互接続に接続された全ＩＰエージェントが同じクロックサイクル中にリセットから出るのを確実にすることである。しかしながら、このアプローチには、いくつかの理由で欠点がある。
１．中間回路の設計には、時間および労力を要し、しばしば、ＳｏＣの開発を遅らせる。
２．中間回路は、ＳｏＣごとに、典型的には、異なる設計チームによって開発される。結果として、中間回路は、通常は、ＳｏＣごとに異なり、または、同じＳｏＣ上の異なるサブシステムの間ですら異なる。
３．回路の複雑さは、通常、所与の相互接続へ接続できるＩＰエージェントの数が制限されることを意味する。この制限の実際的な影響は、所与の数のＩＰエージェントを収容するために必要な相互接続レベルが多くなることである。したがって、ＳｏＣの全体の複雑さが増大する。
One well-known approach to preventing hang-ups is to design and place a circuit in the middle of each link between the interconnect and each IP agent. The purpose of this circuit is to ensure that all IP agents connected to the interconnect come out of reset during the same clock cycle. However, this approach has drawbacks for several reasons.
1. Designing intermediate circuits takes time and effort and often delays SoC development.
2. Intermediate circuits are typically developed by different design teams for each SoC. As a result, intermediate circuits typically differ from SoC to SoC, or even between different subsystems on the same SoC.
3. Circuit complexity typically means that the number of IP agents that can be connected to a given interconnect is limited. The practical effect of this limitation is that more levels of interconnection are required to accommodate a given number of IP agents. Therefore, the overall complexity of the SoC increases.
時々、ＩＰエージェントが正常に機能しない。例えば、ＩＰエージェントは、偽のトランザクションを相互接続へ投入する、受信したトランザクションへの応答に失敗して、例外メッセージを生成する、などの場合がある。いくつかの状況において、正常に機能しないＩＰエージェントは、リセットされる必要がありうる。現行のＳｏＣ相互接続規格では、標準ＩＰエージェントリセットメカニズムが存在しない。ＳｏＣ全体がリセットされなければならないか、もしくは、中間回路が、必要な隔離、リセット、および、システムへのＩＰの再導入などを実行するよう設計される必要があるか、のいずれかである。 Sometimes the IP agent does not function properly. For example, the IP agent may inject bogus transactions into the interconnect, fail to respond to received transactions and generate exception messages, etc. In some situations, a malfunctioning IP agent may need to be reset. In current SoC interconnect standards, there is no standard IP agent reset mechanism. Either the entire SoC has to be reset, or intermediate circuits need to be designed to perform the necessary isolation, reset, reintroduction of IP into the system, etc.
電力管理も、特定の現行のＳｏＣ相互接続規格では対処されていない。アドバンスト・マイクロコントローラ・バス・アーキテクチャ（ＡＭＢＡ）プロトコルは、例えば、電力管理に対処せず、意図的に電力を落とすかまたはＩＰエージェントをオフにする方法を提供していない。この機能を提供するためには、電力管理機能は、典型的に、例えば、電力管理を扱うためにリンク上のさらなる中間回路を開発することによって、チップごとにＳｏＣへカスタム設計される必要がある。 Power management is also not addressed in certain current SoC interconnect standards. The Advanced Microcontroller Bus Architecture (AMBA) protocol, for example, does not address power management and does not provide a way to intentionally power down or turn off IP agents. To provide this functionality, power management functionality typically needs to be custom designed into the SoC on a chip-by-chip basis, e.g. by developing additional intermediate circuitry on the link to handle power management. .
複数のＳｏＣを提供する多くの企業が、製品化までの時間を短縮するために、類似したデバイスの間で或る程度のシステムソフトウェアを共有する。しかしながら、類似したＳｏＣでも、ソフトウェアは、典型的には、ＩＰエージェントが同じでありうる状況であっても、デバイスからデバイスへと簡単には移植できない。リセットおよび／または電力管理に用いられる任意の中間回路に小さい違いがあれば、システムソフトウェアは、各デバイスに向けて修正およびデバッグされる必要がありうる。 Many companies offering multiple SoCs share some level of system software between similar devices to reduce time to market. However, even with similar SoCs, software is typically not easily portable from device to device, even in situations where the IP agent may be the same. If there are minor differences in any intermediate circuitry used for reset and/or power management, the system software may need to be modified and debugged for each device.
したがって、多数のＳｏＣを開発する企業の課題は、（１）各デバイスに対してリセットおよびおそらくは電力管理を実施するためのカスタマイズされた回路を開発すること、ならびに、（２）各デバイスに対してシステムソフトウェアを修正およびデバッグすること、である。複数のデバイスにわたるこの努力は、費用が掛かり、複雑で、時間が掛かるため、製品をすみやかに市場に出す能力を低下させる。 Therefore, the challenge for companies developing large numbers of SoCs is to (1) develop customized circuitry to perform reset and perhaps power management for each device; and (2) for each device. Modifying and debugging system software. This effort across multiple devices is expensive, complex, and time consuming, reducing the ability to get products to market quickly.
したがって、カスタマイゼーションの必要性を無くし、複数のＳＯＣの間の一貫したシステムソフトウェアビューにつながる、ＳｏＣ上のＩＰエージェントのリセットおよび電力管理を一貫して実施するためのシステムが求められている。 Therefore, there is a need for a system for consistently implementing IP agent reset and power management on SoCs that eliminates the need for customization and leads to a consistent system software view across multiple SOCs.
カスタマイゼーションの必要性を無くし、複数のＳＯＣの間の一貫したシステムソフトウェアビューにつながる、ＳｏＣ上のＩＰエージェントのリセットおよび電力管理を一貫して実施するためのシステムが開示されている。 A system is disclosed for consistently implementing IP agent reset and power management on SoCs that eliminates the need for customization and leads to a consistent system software view across multiple SOCs.
一実施形態において、システムは、１以上のＩＰエージェントと、相互接続と、それぞれＩＰエージェントおよび相互接続の間の１以上のリンクと、を備える。ＩＰエージェントがリセットを受ける時、個々のネゴシエーションが、リンクを介して相互接続と各ＩＰエージェントとの間で行われる。個々のネゴシエーションでは、各ＩＰエージェントが、他のＩＰエージェントのタイミングから独立して、自身のタイムスケジュールでリセットから出ることができる。リセットから出た後、各ＩＰエージェントは、「トランザクション準備完了状態」になり、相互接続に導入され、相互接続に接続された他の要素（システムコントローラなど）にとって可視になる。 In one embodiment, a system includes one or more IP agents, an interconnect, and one or more links between each IP agent and the interconnect. When an IP agent undergoes a reset, individual negotiations take place between the interconnect and each IP agent via the link. Individual negotiations allow each IP agent to come out of reset on its own time schedule, independent of other IP agents' timing. After coming out of reset, each IP agent is in a "transaction-ready state," introduced into the interconnect, and visible to other elements (such as system controllers) connected to the interconnect.
別の実施形態において、相互接続は、動作不能である任意のＩＰエージェントの代理として構成されてよい。この特徴は、（１）トランザクション準備完了状態になる前、（２）動作不良時、および／または、（３）電力ダウン状態の時の動作不能時に、ＩＰエージェントがトランザクションの目標になった場合に起こりうるシステム全体のハングアップを防止するので有利である。相互接続が代理として機能する場合に、トランザクションを送信した送信元に、例外メッセージが送信されることで、送信元が目標ＩＰエージェントからの応答を無期限に待つことによって引き起こされるハングアップを防止することができる。 In another embodiment, the interconnect may be configured on behalf of any IP agent that is inoperable. This feature applies when an IP agent becomes the target of a transaction (1) before becoming transaction-ready, (2) malfunctioning, and/or (3) inoperable during a power-down state. This is advantageous since it prevents possible system-wide hang-ups. When an interconnect acts as a proxy, an exception message is sent to the source that sent the transaction to prevent hangs caused by the source waiting indefinitely for a response from the target IP agent. be able to.
さらに別の実施形態において、相互接続がＩＰエージェントの代理として機能するように構成できることで、（１）ＩＰエージェントを個々にリセットすること、および、（２）ＩＰエージェントを節電状態にすることが可能になる。様々な実施形態において、節電状態は、低電力動作可能モード、状態情報の保持または非保持の低電力動作不能モード、もしくは、電力オフモードなど、いくつかのモードの内の１つを含みうる。 In yet another embodiment, the interconnect can be configured to act as a proxy for the IP agents, allowing (1) to individually reset the IP agents, and (2) to place the IP agents into a power-saving state. become. In various embodiments, the power saving state may include one of several modes, such as a low power operational mode, a low power non-operational mode with or without state information retention, or a power off mode.
したがって、本発明は、多くの課題を解決する。本発明は、同じ時間／クロックサイクル中にリセットから出るように各ＩＰエージェントを管理するため、および、（２）ＩＰエージェントの電力管理のためのカスタム回路を作る必要性を排除する。代わりに、本発明は、これらの機能両方の一様な実施を有利に提供し、複数のＳｏＣの間の一貫したシステムソフトウェアビューをもたらす。この一貫したソフトウェアビューによれば、ＳｏＣのファミリーにわたるカスタム設計およびソフトウェア変更の多くが排除され、開発コストの節約、複雑さの低減、および、製品化までの時間短縮が達成される。 The invention therefore solves a number of problems. The present invention eliminates the need to create custom circuitry to manage each IP agent to come out of reset during the same time/clock cycle and (2) for IP agent power management. Instead, the present invention advantageously provides uniform implementation of both of these functions, resulting in a consistent system software view across multiple SoCs. This consistent software view eliminates many custom designs and software changes across a family of SoCs, resulting in development cost savings, reduced complexity, and faster time-to-market.
本願およびその利点については、添付の図面に関連して行う以下の説明を参照することによって最も良く理解できる。 The present application and its advantages are best understood by reference to the following description taken in conjunction with the accompanying drawings.
図面において、同様の構造要素を指定するために、同様の符号が用いられることがある。 Like symbols may be used in the drawings to designate like structural elements.
以下では、添付図面に例示された、いくつかの非排他的な実施形態を参照しつつ、本願の詳細な説明を行う。以下の説明では、本開示の完全な理解を促すために、数多くの具体的な詳細事項が示されている。しかしながら、当業者にとって明らかなように、本開示は、これらの具体的な詳細事項の一部または全てがなくとも実施することが可能である。また、本開示が不必要に不明瞭となるのを避けるため、周知の処理工程および／または構造については、詳細な説明を省略した。 In the following, a detailed description of the present application will be provided with reference to some non-exclusive embodiments, illustrated in the accompanying drawings. In the following description, numerous specific details are set forth to facilitate a thorough understanding of the disclosure. However, as will be apparent to those skilled in the art, the present disclosure may be practiced without some or all of these specific details. In other instances, well-known process steps and/or structures have not been described in detail to avoid unnecessarily obscuring the present disclosure.
現在開発中の集積回路の多くは、非常に複雑である。結果として、多くのチップ設計者は、システムオンチップすなわち「ＳｏＣ」アプローチを用いて、単一のシリコン上に複数のサブシステムまたはＩＰエージェントを相互接続してきた。消費者デバイス（例えば、ハンドヘルド、携帯電話、タブレットコンピュータ、ラップトップおよびデスクトップコンピュータ、メデイア処理など）、仮想または拡張現実（例えば、ロボット工学、自律走行車、航空機など）、医療機器（例えば、イメージングなど）、工業、ホームオートメーション、工業（例えば、スマート家電、家庭用監視機器、など）およびデータセンター用途（例えば、ネットワークスイッチ、接続型ストレージデバイス、など）など、様々な用途のためのＳｏＣが、現在利用可能であるかまたは開発されている。 Many of the integrated circuits currently being developed are highly complex. As a result, many chip designers have used a system-on-chip or "SoC" approach to interconnect multiple subsystems or IP agents on a single silicon. Consumer devices (e.g., handhelds, mobile phones, tablet computers, laptop and desktop computers, media processing, etc.), virtual or augmented reality (e.g., robotics, autonomous vehicles, aircraft, etc.), medical equipment (e.g., imaging, etc.) ), industrial home automation, industrial (e.g. smart home appliances, home monitoring equipment, etc.) and data center applications (e.g. network switches, connected storage devices, etc.) available or being developed.
本願は、共有リソースへのアクセスをアービトレートするためのアービトレーションシステムおよび方法をおおむね対象にしている。かかる共有リソースは、例えば、バス相互接続、メモリリソース、処理リソース、または、複数の競争パーティの間で共有されたほぼ任意のその他のリソースでありうる。説明の便宜上、以下で詳述する共有リソースは、システムオンチップすなわち「ＳｏＣ」上の複数のサブシステムによって共有される相互接続であるとする。 The present application is generally directed to arbitration systems and methods for arbitrating access to shared resources. Such shared resources may be, for example, bus interconnects, memory resources, processing resources, or nearly any other resource shared among multiple competing parties. For purposes of explanation, the shared resources detailed below are interconnects shared by multiple subsystems on a system-on-chip or "SoC."
ＳｏＣでは、後に詳述するように、トランザクションの形態で互いにトラフィックをやり取りする複数のサブシステムがあり、共有リソースは、物理的な相互接続であり、様々なトランザクションまたはその部分が、共有相互接続に関連する複数の仮想チャネルを介して伝送され、複数の異なるアービトレーションスキームおよび／または優先度の１つが、サブファンクションの間のトランザクションの伝送に向けた共有相互接続へのアクセスをアービトレートするために用いられてよい。 In an SoC, as detailed below, there are multiple subsystems that exchange traffic with each other in the form of transactions, a shared resource is a physical interconnect, and various transactions or portions thereof are transferred to the shared interconnect. Transmitted via a plurality of associated virtual channels, one of a plurality of different arbitration schemes and/or priorities is used to arbitrate access to the shared interconnect for transmission of transactions between subfunctions. It's fine.
トランザクションクラス
ＳｏＣに用いられる上述の共有相互接続内には、Ｐｏｓｔｅｄ（Ｐ）、Ｎｏｎ－ｐｏｓｔｅｄ（ＮＰ）、および、Ｃｏｍｐｌｅｔｉｏｎ（Ｃ）を含む少なくとも３つのタイプまたはクラスのトランザクションが存在する。各々の簡単な定義を以下の表１に提供する。
Ｐｏｓｔｅｄトランザクション（書き込みなど）は、応答トランザクションを求めない。送信元がデータを指定された宛先に書き込むと、トランザクションが終了する。Ｎｏｎ－ｐｏｓｔｅｄトランザクション（読み出しまたは書き出しのいずれかなど）では、応答が求められる。しかしながら、応答は、別個のＣｏｍｐｌｅｔｉｏｎトランザクションとして分岐される。換言すると、読み出しでは、最初のトランザクションが読み出し動作のために用いられ、別個であるが関連するＣｏｍｐｌｅｔｉｏｎトランザクションが読み出しコンテンツを返すために用いられる。Ｎｏｎ－ｐｏｓｔｅｄ書き込みでは、最初のトランザクションが書き込みのために用いられ、一方、書き込みが完了すると、第２関連Ｃｏｍｐｌｅｔｉｏｎトランザクションが確認のために求められる。 Posted transactions (such as writes) do not require a response transaction. A transaction ends when the source writes the data to the specified destination. Non-posted transactions (such as either a read or a write) require a response. However, the response is forked as a separate Completion transaction. In other words, on a read, the first transaction is used for the read operation and a separate but related Completion transaction is used to return the read content. For non-posted writes, the first transaction is used for the write, while once the write is complete, a second associated Completion transaction is requested for confirmation.
トランザクションは、タイプに関わらず、１以上のパケットによって表すことができる。いくつかの状況では、トランザクションは、単一のパケットによって表されうる。別の状況においては、複数のパケットが、トランザクション全体を表すために必要とされうる。 A transaction, regardless of type, can be represented by one or more packets. In some situations, a transaction may be represented by a single packet. In other situations, multiple packets may be needed to represent the entire transaction.
ビートは、クロックサイクルあたりに共有相互接続を介して伝送できるデータの量である。例えば、共有相互接続が物理的に１２８ビット幅である場合、１２８ビットが、各ビートまたはクロックサイクルに伝送されうる。 A beat is the amount of data that can be transmitted over a shared interconnect per clock cycle. For example, if the shared interconnect is physically 128 bits wide, 128 bits may be transmitted in each beat or clock cycle.
いくつかの状況において、トランザクションは、伝送のために複数の部分に分割される必要がありうる。５１２ビット（６４バイト）であるペイロードを有する単一のパケットを有するトランザクションを考える。共有相互接続が１２８ビット幅（１６バイト）のみである場合、トランザクションは、４つの部分（例えば、４×１２８＝５１２）に分割され、４つのクロックサイクルまたはビートで伝送される必要がある。一方、トランザクションが１２８ビット幅未満である単一パケットのみである場合、トランザクション全体が、１つのクロックサイクルまたはビートで送信されうる。同じトランザクションがさらなるパケットをたまたま含む場合、さらなるクロックサイクルまたはビートが必要とされうる。 In some situations, a transaction may need to be split into multiple parts for transmission. Consider a transaction that has a single packet with a payload that is 512 bits (64 bytes). If the shared interconnect is only 128 bits wide (16 bytes), the transaction needs to be divided into four parts (eg, 4×128=512) and transmitted in four clock cycles or beats. On the other hand, if the transaction is only a single packet that is less than 128 bits wide, the entire transaction may be sent in one clock cycle or beat. If the same transaction happens to include additional packets, additional clock cycles or beats may be required.
したがって、トランザクションの「部分」という用語は、所与のクロックサイクルまたはビート中に共有相互接続を介して転送できるデータの量である。部分のサイズは、共有相互接続の物理的な幅に応じて変わりうる。例えば、共有相互接続が物理的に６４データビット幅である場合、任意の１サイクルまたはビート中に転送できる最大ビット数は６４ビットである。所与のトランザクションが６４ビット以下のペイロードを有する場合、トランザクション全体が、単一部分で共有相互接続を介して送信されうる。一方、ペイロードがより大きい場合、パケットは、複数の部分で共有相互接続を介して送信されなければならない。１２８、２５６、または、５１２ビットのペイロードを有するトランザクションは、それぞれ、２、４、および、８の部分を必要とする。このように、「部分」という用語は、任意の所与のクロックサイクルまたはビート中に共有相互接続を介して送信されうるトランザクションの一部または全体のいずれかを意味すると広く解釈されるべきである。 Thus, the term "portion" of a transaction is the amount of data that can be transferred across a shared interconnect during a given clock cycle or beat. The size of the portion may vary depending on the physical width of the shared interconnect. For example, if the shared interconnect is physically 64 data bits wide, then the maximum number of bits that can be transferred during any one cycle or beat is 64 bits. If a given transaction has a payload of 64 bits or less, the entire transaction may be sent over the shared interconnect in a single part. On the other hand, if the payload is larger, the packet must be sent over the shared interconnect in multiple parts. Transactions with payloads of 128, 256, or 512 bits require 2, 4, and 8 parts, respectively. As such, the term "part" should be broadly interpreted to mean either part or the entire transaction that may be sent over a shared interconnect during any given clock cycle or beat. .
ストリーム
ストリームは、仮想チャネルおよびトランザクションクラスのペアリングとして定義される。例えば、４つの仮想チャネル（例えば、ＶＣ０、ＶＣ１、ＶＣ２、および、ＶＣ３）、ならびに、３つのトランザクションクラス（Ｐ、ＮＰ、Ｃ）があった場合、最大で１２の異なる可能なストリームがある。仮想チャネルおよびトランザクションクラスの様々な組み合わせを、以下の表２で詳述する。
上述したトランザクションクラスの数は、単に例示であり、限定として解釈すべきではないことに注意されたい。逆に、任意の数の仮想チャネルおよび／またはトランザクションクラスが用いられてよい。 Note that the number of transaction classes described above is merely illustrative and should not be construed as limiting. Conversely, any number of virtual channels and/or transaction classes may be used.
共有相互接続の仮想チャネルでのアービトレーション
図１を参照すると、アービトレーションシステム１０のブロック図が示されている。非排他的実施形態において、アービトレーションシステムは、アップストリームサブファンクション１４（すなわち、ＩＰ４、ＩＰ５、および、ＩＰ６）へトランザクションを送信しようと試みる複数のサブファンクション１４（すなわち、ＩＰ１、ＩＰ２、および、ＩＰ３）による共有相互接続１２へのアクセスをアービトレートするために用いられる。
Arbitration on a Shared Interconnect Virtual Channel Referring to FIG. 1, a block diagram of an
共有相互接続１２は、Ｎデータビット幅でありＭ個の制御ビットを含む物理的な相互接続である。また、共有相互接続１２は一方向性であり、これは、送信元（すなわち、ＩＰ１、ＩＰ２、および、ＩＰ３）から宛先（すなわち、ＩＰ４、ＩＰ５、および、ＩＰ６）への方向にのみトラフィックを扱うことを意味する。
Shared
様々な代替例において、Ｎデータビットの数は、任意の整数であってよいが、典型的には、それぞれ、２のべき乗のビット幅である（例えば、２１、２２、２３、２４、２５、２６、２７、２８、２９など）または（２、４、６、８、１６、３２、６４、１２８、２５６など）。最も現実的な応用例では、Ｎビットの数は、３２、６４、１２８、２５６、または、５１２のいずれかである。ただし、これらの幅は、単に例示であり、どのようにも限定するものとして解釈すべきではないことを理解されたい。 In various alternatives, the number of N data bits may be any integer number, but are typically each a power of two bit wide (e.g., 21, 22, 23, 24, 25, 26, 27, 28, 29, etc.) or (2, 4, 6, 8, 16, 32, 64, 128, 256, etc.). In most practical applications, the number of N bits is either 32, 64, 128, 256, or 512. However, it is to be understood that these widths are merely illustrative and should not be construed as limiting in any way.
制御ビットの数Ｍも、様々であり、任意の数であってよい。 The number M of control bits also varies and may be any number.
１以上の論理チャネル（図示せず）（以降、「仮想チャネル」すなわち「ＶＣ」と呼ぶ）が、共有相互接続１２に関連付けられている。各仮想チャネルは、独立している。各仮想チャネルは、複数の独立ストリームに関連付けられてよい。仮想チャネルの数は、広く変化してよい。例えば、３２以上の数までの仮想チャネルが、規定されるか、または、共有相互接続１２に関連付けられてよい。
One or more logical channels (not shown) (hereinafter referred to as “virtual channels” or “VCs”) are associated with shared
様々な代替実施形態において、各仮想チャネルは、異なる優先度を割り当てられてよい。１以上の仮想チャネルに、より高い優先度が割り当てられてよく、一方、１以上のその他の仮想チャネルに、より低い優先度が割り当てられてよい。高い優先度のチャネルは、低い優先度の仮想チャネルよりも高い共有相互接続１２へのアクセス権を与えられるまたはアービトレートされる。別の実施形態では、仮想チャネルの各々に、同じ優先度が与えられてもよく、その場合、共有相互接続１２へのアクセス権を与えるまたはアービトレートする時に、或る仮想チャネルを別の仮想チャネルより優先することがない。さらに別の実施形態において、仮想チャネルの内の１以上に割り当てられた優先度は、動的に変化してもよい。例えば、第１セットの状況において、仮想チャネルすべてに、同じ優先度が割り当てられてよいが、第２セットの状況において、特定の仮想チャネルに、その他の仮想チャネルよりも高い優先度が割り当てられてもよい。したがって、状況が変化するにつれて、仮想チャネルの間で用いられる優先度スキームは、現在の動作条件に最もよく合うように変更されうる。
In various alternative embodiments, each virtual channel may be assigned a different priority. One or more virtual channels may be assigned a higher priority, while one or more other virtual channels may be assigned a lower priority. High priority channels are given or arbitrated more access to the shared
サブシステム１４の各々は、典型的には、「再利用可能な」回路またはロジックのブロックであり、一般に、ＩＰコアまたはエージェントと呼ばれる。 ほとんどのＩＰエージェントは、特定の機能を実行するよう設計され、例えば、イーサネットポート、ディスプレイドライバ、ＳＤＲＡＭインターフェース、ＵＳＢポートなどの周辺デバイスのためのコントローラである。かかるＩＰエージェントは、一般に、特定用途向け集積回路（ＡＳＩＣ）またはフィールドプログラマブルゲートアレイ（ＦＰＧＡ）などの集積回路（ＩＣ）上に提供された複雑なシステムの設計全体の中で必要なサブシステム機能を提供する「ビルディングブロック（構成要素）」として用いられる。利用可能なＩＰエージェントのライブラリを用いることにより、チップ設計者は、より複雑な集積回路の設計において様々なロジック機能を容易に「ボルト締め」することができるので、設計時間を削減すると共に開発コストを節約することができる。サブシステムエージェント１４は、専用ＩＰコアに関して上述したが、これは、必要条件ではないことを理解されたい。逆に、サブシステム１４は、単一のポート２０に接続されたまたはそれを共有するＩＰ機能のコレクションであってもよい。したがって、「エージェント」という用語は、サブシステムが単一の機能を実行するか、複数の機能を実行するかに関わらず、ポート２０に接続された任意のタイプのサブシステムとして広く解釈されるべきである。
Each of the
一対のスイッチ１６および１８が、それぞれ、専用アクセスポート２０を介してサブシステムエージェント１４の各々と共有相互接続１２との間のアクセスを提供する。図の例示的実施形態では、
（１）サブシステムエージェントＩＰ１、ＩＰ２、および、ＩＰ３は、それぞれ、アクセスＰｏｒｔ０、Ｐｏｒｔ１、および、Ｐｏｒｔ２を介してスイッチ１６と接続する。
（２）サブシステムエージェントＩＰ４、ＩＰ５、および、ＩＰ６は、それぞれ、Ｐｏｒｔ３、Ｐｏｒｔ４、および、Ｐｏｒｔ５を介してスイッチ１８と接続する。
（３）さらに、アクセスポート２２が、相互接続１２を介して、全体としてスイッチ１６へのサブシステムエージェントＩＰ４、ＩＰ５、および、ＩＰ６のアクセスを提供する。
A pair of
(1) Subsystem agents IP1, IP2, and IP3 are connected to the
(2) Subsystem agents IP4, IP5, and IP6 are connected to the
(3) Additionally,
スイッチ１６および１８は、多重化および逆多重化機能を実行する。スイッチ１６は、サブシステムエージェントＩＰ１、ＩＰ２、および／または、ＩＰ３によって生成されたアップストリームトラフィックを選択し、共有相互接続１２を介してトラフィックをダウンストリームに送信する。スイッチ１８では、逆多重化動作が実行され、トラフィックは、目標サブシステムエージェント（すなわち、ＩＰ４、ＩＰ５、または、ＩＰ６のいずれか）へ提供される。
各アクセスポート２０は、一意ポート識別子（ＩＤ）を有しており、各サブシステムエージェント１４の専用アクセスをスイッチ１６または１８のいずれかへ提供する。例えば、サブシステムエージェントＩＰ１、ＩＰ２、および、ＩＰ３は、それぞれ、アクセスポートＰｏｒｔ０、Ｐｏｒｔ１、および、Ｐｏｒｔ２に割り当てられる。同様に、サブシステムエージェントＩＰ４、ＩＰ５、および、ＩＰ６は、それぞれ、アクセスポートＰｏｒｔ３、Ｐｏｒｔ４、および、Ｐｏｒｔ５に割り当てられる。
Each
スイッチ１６、１８への／からの入口ポイントおよび出口ポイントを提供するのに加えて、一意ポートＩＤ２０は、サブシステムエージェント１４の間のトラフィックをアドレッシングするために用いられる。各ポート２０は、システムメモリ２４内に、特定の量の割り当てられたアドレス可能空間を有する。
In addition to providing entry and exit points to/from
いくつかの非排他的な実施形態において、アクセスポート２０の全部または一部に、一意ポートＩＤだけでなく、「グローバル」ポート識別子が割り当てられてもよい。トランザクションおよびその他のトラフィックが、グローバルポート識別子に割り当てられたアクセスポートの全部または一部に送信されうる。したがって、グローバル識別子を用いれば、トランザクションおよびその他のトラフィックが、アクセスポート２０の全部または一部へ広く発信またはブロードキャストすることができ、一意識別子を用いて各アクセスポート２０へ個別にアドレッシングする必要性を排除できる。
In some non-exclusive embodiments, all or some of the
スイッチ１６は、さらに、アービトレーション要素２６、アドレス解決ロジック（ＡＲＬ）２８、および、アドレス解決ルックアップテーブル（ＬＵＴ）３０を備える。
動作中、サブシステムエージェントＩＰ１、ＩＰ２、および、ＩＰ３は、トランザクションを生成する。各トランザクションが生成されると、送信側サブシステム１４によってパケット化され、次いで、パケット化されたトランザクションは、対応するポート２０を介してローカルスイッチ１６へ投入される。例えば、ＩＰ１、ＩＰ２、および、ＩＰ３によって生成されたトランザクションの部分は、それぞれ、Ｐｏｒｔ０、Ｐｏｒｔ１、および、Ｐｏｒｔ２を介してスイッチ１６に提供される。
During operation, subsystem agents IP1, IP2, and IP3 generate transactions. As each transaction is generated, it is packetized by the sending
ポート２０は各々、相互接続チャネル１２に関連付けられている仮想チャネルの各々に対して、複数の先入れ先出しバッファ（図示せず）を備える。非排他的実施形態において、４つの仮想チャネルが存在する。その場合、各仮想チャネルに対して１つで、各ポート２０は、４つのバッファを備える。再び、ポート２０に含まれる仮想チャネルおよびバッファの数は、様々であってよく、４に限定されないことを理解されたい。逆に、仮想チャネルおよびバッファの数は、４より多くても少なくてもよい。
所与のトランザクションが２つ（以上）の部分で表される場合、それらの部分は、同じバッファ内に維持される。例えば、相互接続１２が１２８データビット幅であり、トランザクションが５１２ビットのペイロードを含むパケットによって表される場合、トランザクションは、４クロックサイクルまたはビートで伝送される４つの部分に分割される必要がある。一方、トランザクションが６４ビットのペイロードを有する単一パケットによって表されうる場合、単一の部分は、１クロックサイクルまたはビートで伝送されうる。所与のトランザクションのすべての部分を同じバッファ内に維持することにより、仮想チャネルは、論理的に独立したままになる。換言すると、所与のトランザクションに関連するトラフィックすべてが、常に、ストリームと同じ仮想チャネルで送信され、複数の仮想チャネルを介して分岐されることがない。
If a given transaction is represented by two (or more) parts, those parts are maintained in the same buffer. For example, if
アービトレーション要素２６は、様々なアクセスポート２０によって維持されたトランザクションの競合するバッファされた部分の間でアービトレートすることを担う。非排他的実施形態において、複数の競合トランザクションが利用可能であれば、アービトレーション要素２６は、クロックサイクルごとにアービトレーションを実行する。サイクルごとのアービトレーション勝者は、相互接続１２へのアクセスが認められて相互接続１２を介して伝送されるトランザクションの部分を、サブシステムＩＰ１、ＩＰ２、および、ＩＰ３の内の１つから生成する。
トランザクションを生成する時、送信元サブシステムＩＰ１、ＩＰ２、および、ＩＰ３は、通常、可能な宛先サブシステムエージェントＩＰ４、ＩＰ５、および、ＩＰ６についてアドレス空間内のアドレスを知っているが、宛先にトランザクションをルーティングするために必要な情報（例えば、ポートＩＤ２０および／または２２）を知らない。一実施形態において、ローカルアドレス解決ロジック（ＡＲＬ）２８は、既知の宛先アドレスを必要なルーティング情報に解決するために用いられる。換言すると、送信元サブエージェント１４は、システムメモリ２４内の所与のアドレスにアクセスしたいことを単に知りうる。したがって、ＡＲＬ２８は、ＬＵＴ３０へアクセスするタスクを課せられ、指定されたアドレスに対応する最終的な宛先への配信パスに沿ってポート２０／２２のアドレスルックアップを実行する。ポート２０／２２が知られると、この情報は、トランザクションのパケット内の宛先フィールドに挿入される。結果として、パケットは、配信パスに沿ってポート２０／２２へ配信される。原則として、要求された配信情報がすでに知られており、パケットの宛先フィールドに含まれているので、配信パスに沿ったダウンストリームノードが、さらなるルックアップを実行する必要はない。後に詳述するようにソースベースルーティング（ＳＢＲ）と呼ばれる他のタイプのトランザクションで、送信元Ｐエージェントは、宛先ポートアドレスを知る。結果として、ＡＲＬ２８によって実行されるルックアップは、典型的には、実行される必要がない。
When generating a transaction, the source subsystems IP1, IP2, and IP3 typically know the addresses in the address space for possible destination subsystem agents IP4, IP5, and IP6, but do not send the transaction to the destination. It does not know the information needed to route (eg,
代替実施形態において、相互接続内のすべてのノードがＡＲＬ２８およびＬＵＴ３０を必要とするわけではない。これらの要素を持たないノードについては、必要なルーティング情報のないトランザクションが、デフォルトノードへ転送されうる。デフォルトノードでは、ＡＲＬ２８およびＬＵＴ３０がアクセスされ、次いで、必要なルーティング情報が、トランザクションのパケットのヘッダに挿入されうる。デフォルトノードは、典型的には、ＡＲＬ２８およびＬＵＴ３０を持たないノードよりアップストリームにある。ただし、これは、決して必須ではない。１または複数のデフォルトノードは、ＳｏＣ上のどこに配置されてもよい。ＡＲＬ２８およびＬＵＴ３０をいくつかのノードから排除することにより、ノードの複雑さを低減できる。
In alternative embodiments, not all nodes in the interconnect require
ＡＲＬ２８は、トランザクションの勝利部分のための転送先のデコードに加えて、各仮想チャネル内のトランザクションの勝利部分のための順序を規定するので、「順序付けポイント」と呼ばれてもよい。各アービトレーションが解決されると、ＡＲＬ２８がアドレスポートルックアップを実行するために用いられるか否かに関わらず、トランザクションの勝利部分が各仮想チャネルに提供される先入れ先出しキューに挿入される。次いで、トランザクションの勝利部分は、バッファ内で相互接続１２を介した伝送の順番を待つ。
また、ＡＲＬ２８は、「アップストリーム」および「ダウンストリーム」トラフィックを規定するために用いられる。換言すると、スイッチ１６に関連付けられているＩＰエージェント１４（すなわち、ＩＰ１、ＩＰ２、および、ＩＰ３）によって生成された任意のトランザクションは、ＡＲＬ２８に対してアップストリームにあると見なされる。ＡＲＬ２８後の（すなわち、ＩＰ４、ＩＰ５、および、ＩＰ６に伝送される）すべてのトランザクションが、ダウンストリームトラフィックと見なされる。
スイッチ１６に関連付けられているＩＰエージェント１４（すなわち、ＩＰ１、ＩＰ２、および、ＩＰ３）は、直接的または間接的のいずれかで、互いに通信してトランザクションを互いに送信してよい。直接的な通信（しばしば、ソースベースルーティング（ＳＢＲ）と呼ばれる）により、ＩＰエージェント１４は、ピアツーピアモデルで互いにトランザクションを送信できる。このモデルでは、送信元ＩＰエージェトは、そのピアＩＰエージェント１４の一意ポートＩＤが知っており、ＬＵＴ３０にアクセスするためにＡＲＬ２８を用いる必要性を無くす。あるいは、スイッチ１６に関連付けられているＩＰエージェントの間のトランザクションは、ＡＲＬ２８を用いてルーティングされてもよい。このモデルでは、上述したのと同様に、送信元ＩＰエージェントは、宛先ＩＰエージェント１４のアドレスのみを知り、ルーティングに必要な情報は知らない。次いで、ＡＲＬ２８は、ＬＵＴ３０にアクセスし、対応するポートＩＤを見つけるために用いられ、その後、ポートＩＤは、トランザクションのパケットの宛先フィールドに挿入される。
IP agents 14 (ie, IP1, IP2, and IP3) associated with
パケットフォーマット
ＩＰエージェント１４は、トランザクションを生成して、相互接続１２に関連付けられている仮想チャネルを通じて処理する。各トランザクションは、典型的には、１以上のパケットで構成される。各パケットは、典型的には、固定ヘッダサイズおよびフォーマットを有する。いくつかの例において、各パケットは、固定サイズペイロードを有してよい。別の例において、パケットペイロードは、大から小まで様々なサイズであってよく、または、ペイロードが全く無くてもよい。
Packet
図２を参照すると、パケットの例３２が示されている。パケット３２は、ヘッダ３４およびペイロード３６を備える。この特定の実施形態において、ヘッダ３４は、１６バイトのサイズである。このサイズは例示であり、より大きいサイズ（例えば、より多いバイト数）または小さいサイズ（例えば、より少ないバイト数）のパケットが用いられてもよいことを理解されたい。パケット３２のヘッダ３４は、必ずしもすべてが同じサイズである必要がないことも理解されたい。代替実施形態において、ＳｏＣにおけるパケットヘッダのサイズは、可変であってもよい。
Referring to FIG. 2, an
ヘッダ３４は、宛先識別子（ＤＳＴ＿ＩＤ）、送信元識別子（ＳＲＣ＿ＩＤ）、ペイロードサイズインジケータ（ＰＬＤ＿ＳＺ）、予備フィールド（ＲＳＶＤ）、コマンドフィールド（ＣＭＤ）、ＴＡＧフィールド、ステータス（ＳＴＳ）、トランザクションＩＤフィールド（ＴＡＧ）、アドレスすなわちＡＤＤＲフィールド、ＵＳＤＲ／コンパクトペイロードフィールド、トランザクションクラスすなわちＴＣフィールド、フォーマットＦＭＴフィールド、および、バイトイネーブル（ＢＥ）フィールドなど、複数のフィールドを含む。ヘッダ３４の様々なフィールドについて、以下の表３で簡単に説明する。
ペイロード３６は、パケットのコンテンツを含む。ペイロードのサイズは、様々であってよい。いくつかの例において、ペイロードは大きくてよい。その他の例において、ペイロードは小さくてもよい。さらに別の例において、コンテンツが非常に小さいすなわち「コンパクト」である場合、ヘッダ３４のＵＳＲＤフィールド内で運ぶことができる。
トランザクションのタイプは、しばしば、トランザクションを表すために用いられる１以上のパケットがペイロードを持つか否かを示す。例えば、ＰｏｓｔｅｄまたはＮｏｎ－ｐｏｓｔｅｄ読み出しのどちらでも、パケットは、アクセスされるロケーションアドレスを指定するが、典型的には、ペイロードを持たない。しかしながら、関連するＣｏｍｐｌｅｔｉｏｎトランザクションのパケットは、読み出しコンテンツを含むペイロードを含む。ＰｏｓｔｅｄおよびＮｏｎ－ｐｏｓｔｅｄ書き込みトランザクションの両方で、パケットは、宛先に書き込まれるデータを含むペイロードを含む。Ｎｏｎ－ｐｏｓｔｅｄバージョンの書き込みでは、Ｃｏｍｐｌｅｔｉｏｎトランザクションのパケットは、通常、ペイロードを定義しない。しかしながら、一部の状況では、Ｃｏｍｐｌｅｔｉｏｎトランザクションが、ペイロードを規定する。 The type of transaction often indicates whether one or more packets used to represent the transaction have a payload. For example, for either Posted or Non-posted reads, the packet specifies the location address to be accessed, but typically has no payload. However, the associated Completion transaction packet includes a payload containing read content. In both Posted and Non-posted write transactions, the packet includes a payload containing the data to be written to the destination. In non-posted versions of writes, the Completion transaction's packet typically does not define a payload. However, in some situations, the Completion transaction specifies the payload.
パケットの例および上述の説明は、パケットに含まれうる基本的なフィールドの多くを網羅している。さらなるフィールドが削除または追加されてもよいことを理解されたい。例えば、送信元および宛先がプライベートメッセージを共有できるように、プライベートシグナリングフィールドが用いられてもよい。 The example packet and description above covers many of the basic fields that may be included in a packet. It should be understood that additional fields may be removed or added. For example, private signaling fields may be used so that the source and destination can share private messages.
アービトレーション
図３Ａを参照すると、ペリフェラルコンポーネントインターコネクト（ＰＣＩ）順位付けでアービトレーション要素２６によって実行されるアービトレーションロジックを示す論理図が示されている。
Arbitration Referring to FIG. 3A, a logic diagram illustrating arbitration logic performed by
ＰＣＩ順位付けでは、各ポート２０は、各仮想チャネルおよびトランザクションクラス（Ｐ、ＮＰ、および、Ｃ）の組み合わせのための別個のバッファを備える。例えば、４つの仮想チャネル（ＶＣ０、ＶＣ０１、ＶＣ２、および、ＶＣ３）がある場合、Ｐｏｒｔ０、Ｐｏｒｔ１、および、Ｐｏｒｔ２は各々、１２の先入れ先出しバッファを有する。換言すると、各ポート２０について、バッファが、各トランザクションクラス（Ｐ、ＮＰ、および、Ｃ）ならびに仮想チャネル（ＶＣ０、ＶＣ１、ＶＣ２、および、ＶＣ３０）の組み合わせに対して提供される。
In PCI ranking, each
各ＩＰエージェント１４（例えば、ＩＰ１、ＩＰ２、および、ＩＰ３）がトランザクションを生成すると、結果として得られるパケットが、それぞれ、対応するポート（例えば、ポート０、ポート１、および、ポート２）内で、トランザクションタイプに基づいて、適切なバッファに配置される。例えば、ＩＰ１によって生成されたＰｏｓｔｅｄ（Ｐ）、Ｎｏｎ－ｐｏｓｔｅｄ（ＮＰ）、および、Ｃｏｍｐｌｅｔｉｏｎ（Ｃ）トランザクションが、それぞれ、ポート０内で、割り当てられた仮想チャネルのためのＰｏｓｔｅｄ、Ｎｏｎ－ｐｏｓｔｅｄ、および、Ｃｏｍｐｌｅｔｉｏｎバッファに配置される。ＩＰ２およびＩＰ３によって生成されたトランザクションは、同様の方法でポート１およびポート２内で、割り当てられた仮想チャネルのためのＰｏｓｔｅｄ、Ｎｏｎ－ｐｏｓｔｅｄ、および、Ｃｏｍｐｌｅｔｉｏｎバッファに同様に配置される。
When each IP agent 14 (e.g., IP1, IP2, and IP3) generates a transaction, the resulting packet is sent to the corresponding port (e.g.,
所与のトランザクションが複数のパケットによって表される場合、そのトランザクションのパケットすべてが、同じバッファ内に挿入される。結果として、トランザクションのパケットすべてが、最終的に同じ仮想チャネルで伝送される。このポリシーでは、仮想チャネルは独立したままであり、これは、同じトランザクションに関連する複数のパケットの伝送には、異なる仮想チャネルが用いられないことを意味する。 If a given transaction is represented by multiple packets, all packets for that transaction are inserted into the same buffer. As a result, all packets of a transaction are ultimately transmitted on the same virtual channel. In this policy, the virtual channels remain independent, meaning that different virtual channels are not used for the transmission of multiple packets related to the same transaction.
各ポート２０内で、多くの異なる方法で所与の仮想チャネルにパケットを割り当てることができる。例えば、割り当ては、無作為であってよい。あるいは、割り当ては、各仮想チャネルに対する作業負荷と未処理のトラフィックの量とに基づいてもよい。あるチャネルが非常にビジーであり、その他のチャネルがビジーではない場合、ポート２０は、しばしば、負荷のバランスを取ろうと試み、新たに生成されたトランザクショントラフィックを利用率の低い仮想チャネルに割り当てる。結果として、ルーティング効率が改善される。さらに別の代替例において、トランザクショントラフィックは、緊急性、セキュリティ、または、それら両方の組み合わせに基づいて、特定の仮想チャネルに割り当てられてもよい。特定の仮想チャネルが、他の仮想チャネルよりも高い優先度および／またはセキュリティを与えられた場合、高い優先度および／または安全なトラフィックが、より高い優先度の仮想チャネルに割り当てられる。さらに別の実施形態において、ポート２０は、ハードコードされてもよく、これは、ポート２０が、１つだけの仮想チャネルを有し、ポート２０によって生成されたすべてのトラフィックが、その１つの仮想チャネルを介して伝送されることを意味する。さらに別の実施形態において、割り当ては、宛先ポート２０に到達するように選択されたルートに基づきうる。
Within each
さらに別の実施形態において、仮想チャネルの割り当ては、送信元ＩＰエージェント１４によって、単独で、または、それに対応するポート２０と連携して、実施されてもよい。例えば、送信元ＩＰエージェント１４が、対応するポート２０への制御信号を生成して、所与のトランザクションのパケットが特定の仮想チャネルに割り当てられることを要求することができる。ＩＰエージェント１４も、上述のように、無作為である、ハードコードされる、または、すべての仮想チャネルにわたってバランスの取れた利用、セキュリティ、緊急性などに基づいた割り当て決定をなすことができる。
In yet another embodiment, virtual channel assignment may be performed by
アービトレーション勝者の選択において、アービトレーション要素２６は、サイクルごとに複数のアービトレーション工程を実行する。これらのアービトレーション工程は、以下を含む。
（１）ポートを選択する工程、
（２）仮想チャネルを選択する工程、および
（３）トランザクションクラスを選択する工程。
In selecting an arbitration winner,
(1) The process of selecting a port,
(2) selecting a virtual channel; and (3) selecting a transaction class.
上述の順序（１）、（２）、および、（３）は、固定ではない。逆に、上述の３つの工程は、任意の順序で完了されてよい。どの順序が用いられるかに関わらず、単一のアービトレーション勝者が各サイクルで選択される。次いで、勝利トランザクションは、相互接続１２に関連付けられている対応する仮想チャネルを介して伝送される。
The above orders (1), (2), and (3) are not fixed. Conversely, the three steps described above may be completed in any order. Regardless of which order is used, a single arbitration winner is selected each cycle. The winning transaction is then transmitted via the corresponding virtual channel associated with
アービトレーション要素２６によって実行される各アービトレーション（１）、（２）、および、（３）のために、複数のアービトレーションスキームまたはルールセットが用いられてよい。かかるアービトレーションスキームは、厳密または絶対優先度、４つの仮想チャネルの各々が特定の割合のトランザクショントラフックを割り当てられる重み付き優先度、もしくは、トランザクションが所定の順序で仮想チャネルに割り当てられるラウンドロビンスキーム、を含みうる。さらなる実施形態において、その他の優先度スキームが用いられてもよい。また、アービトレーション要素２６は、異なるアービトレーションスキームの間で時々動的に切り替えを行ってもよい、および／または、（１）、（２）、および、（３）アービトレーションの各々に対して同じまたは異なるアービトレーションスキームをそれぞれ用いてもよいことを理解されたい。
Multiple arbitration schemes or rulesets may be used for each arbitration (1), (2), and (3) performed by
任意選択的な実施形態において、所与のアービトレーションサイクル中に考慮された未処理のトランザクションによって定義された宛先ポート２０の利用可能性が考慮される。宛先ポート２０に内のバッファが、所与のトランザクションを処理するために利用可能なリソースを持たない場合、対応する仮想チャネルは利用可能ではない。結果として、当該トランザクションは、アービトレーションで競合せず、むしろ、目標リソースが利用可能になる後続のアービトレーションサイクルまで待機する。一方、目標リソースが利用可能である場合、対応するトランザクションは、アービトレートされ、相互接続１２へのアクセスのために競合する。
In an optional embodiment, the availability of
宛先ポート２０の利用可能性は、上述した複数のアービトレーション工程（１）、（２）、および、（３）に関して、異なる時にチェックされてよい。例えば、利用可能性チェックは、アービトレーションサイクルの前に（すなわち、工程（１）、（２）、および、（３）のいずれかの完了の前に）実行できる。結果として、利用可能な宛先リソースを規定するトランザクションのみが、後続のアービトレーション中に考慮される。あるいは、アービトレーションチェックは、アービトレーション工程が実行される順序に関わらず、３つのアービトレーション工程（１）、（２）、および、（３）のいずれかの間に実行されてもよい。
The availability of the
アービトレーション処理中の早くまたは遅くに、宛先リソース利用可能性チェックを実行することには利点および不利点がある。早くチェックを実行することにより、トランザクションの競合の可能性のある部分は、それらの宛先が利用可能でない場合に競合から潜在的に排除されうる。しかしながら、利用可能性を早く知ることは、システムリソースへのかなりの量のオーバーヘッドを生み出しうる。結果として、状況に応じて、所与のアービトレーションサイクル中に利用可能性チェックをより遅く実行するのが、より実際的でありうる。 There are advantages and disadvantages to performing destination resource availability checks early or late during the arbitration process. By performing the check early, potentially conflicting portions of transactions can potentially be eliminated from conflict if their destination is not available. However, early knowledge of availability can create a significant amount of overhead to system resources. As a result, depending on the circumstances, it may be more practical to perform availability checks later during a given arbitration cycle.
トランザクションクラスの選択を含むアービトレーション工程に対して、複数のルールが、Ｎ、ＮＰ、および、Ｃトランザクションの競合部分の間でアービトレートするために規定される。これらのルールは、以下を含む。
Ｐｏｓｔｅｄ（Ｐ）トランザクションに対して、
－Ｐｏｓｔｅｄトランザクション部分は、別のＰｏｓｔｅｄトランザクション部分を追い越しえない。
－Ｐｏｓｔｅｄトランザクション部分は、デッドロックを避けるためにＮｏｎ－ｐｏｓｔｅｄトランザクション部分を追い越すことができなければならない。
－Ｐｏｓｔｅｄトランザクション部分は、両方が強順序（ｓｔｒｏｎｇ ｏｒｄｅｒ）モードにある場合には、Ｃｏｍｐｌｅｔｉｏｎを追い越すことができなければならない。換言すると、強モードでは、トランザクションは、ルールに従って厳密に実行される必要があり、ルールは緩めることができない。
－Ｐｏｓｔｅｄ要求は、任意のトランザクション部分がそれの緩和順序（Ｒｅｌａｘｅｄ Ｏｒｄｅｒ：ＲＯ）ビットセットを有する場合には、Ｃｏｍｐｌｅｔｉｏｎを追い越すことを許されるが、追い越しは必須ではない。緩和順序では、一般にルールが守られるが、例外が認められうる。
Ｎｏｎ－ｐｏｓｔｅｄ（ＮＰ）トランザクションに対して、
－Ｎｏｎ－ｐｏｓｔｅｄトランザクション部分は、Ｐｏｓｔｅｄトランザクション部分を追い越してはならない。
－Ｎｏｎ－ｐｏｓｔｅｄトランザクション部分は、別のＮｏｎ－ｐｏｓｔｅｄトランザクション部分を追い越してはならない。
－Ｎｏｎ－ｐｏｓｔｅｄトランザクション部分は、両方が強順序モードにある場合には、Ｃｏｍｐｌｅｔｉｏｎを追い越してはならない。
－Ｎｏｎ－ｐｏｓｔｅｄトランザクション部分は、任意のトランザクション部分がそれのＲＯビットセットを有する場合には、Ｃｏｍｐｌｅｔｉｏｎを追い越すことを許されるが、必須でない。
Ｃｏｍｐｌｅｔｉｏｎ（Ｃ）トランザクションに対して、
－Ｃｏｍｐｌｅｔｉｏｎは、両方が強順序モードにある場合には、Ｐｏｓｔｅｄトランザクション部分を追い越してはならない。
－Ｃｏｍｐｌｅｔｉｏｎは、任意のトランザクション部分がそれのＲＯビットセットを有する場合には、Ｐｏｓｔｅｄトランザクション部分を追い越すことを許可されるが、必須ではない。
－Ｃｏｍｐｌｅｔｉｏｎは、両方が強順序モードにある場合には、Ｎｏｎ－ｐｏｓｔｅｄトランザクション部分を追い越してはならない。
－Ｃｏｍｐｌｅｔｉｏｎは、任意のトランザクション部分がそれのＲＯビットセットを有する場合には、Ｎｏｎ－ｐｏｓｔｅｄトランザクション部分を追い越すことを許可されるが、必須ではない。
－Ｃｏｍｐｌｅｔｉｏｎは、別のＣｏｍｐｌｅｔｉｏｎを追い越すことを許可されない。
For the arbitration process, which involves the selection of transaction classes, multiple rules are defined to arbitrate between competing portions of N, NP, and C transactions. These rules include:
For Posted (P) transactions,
- A Posted transaction part cannot overtake another Posted transaction part.
- Posted transaction parts must be able to overtake non-posted transaction parts to avoid deadlocks.
- The Posted transaction part must be able to outrun the Completion if both are in strong order mode. In other words, in strong mode, transactions must be performed strictly according to the rules, and the rules cannot be relaxed.
- A Posted request is allowed to overtake a Completion if any transaction part has its Relaxed Order (RO) bit set, but overtaking is not required. In a relaxed order, the rules are generally followed, but exceptions can be made.
For non-posted (NP) transactions,
- Non-posted transaction parts must not overtake Posted transaction parts.
- A Non-posted transaction part must not overtake another Non-posted transaction part.
- The Non-posted transaction part must not overtake the Completion if both are in strongly ordered mode.
- Non-posted transaction parts are allowed, but not required, to overtake the Completion if any transaction part has its RO bit set.
For the Completion (C) transaction,
- Completion must not overtake the Posted transaction part if both are in strongly ordered mode.
- Completion is allowed, but not required, to overtake the Posted transaction part if any transaction part has its RO bit set.
- Completion must not overtake the Non-posted transaction part if both are in strongly ordered mode.
- Completion is allowed, but not required, to overtake non-posted transaction parts if any transaction part has its RO bit set.
- A Completion is not allowed to overtake another Completion.
以下の表４は、ＰＣＩ順序付けルールの概要を提供する。（ａ）および（ｂ）の選択肢のないボックスでは、厳密順序付けルールが従われる必要はない。（ａ）および（ｂ）の選択肢を有する表のボックスでは、ＲＯビットがリセットされるか設定されるかに依存して、それぞれ、厳密順序（ａ）ルールまたは緩和順序（ｂ）ルールのいずれかが適用されてよい。様々な代替実施形態において、ＲＯビットは、グローバルに、または、パケットレベルで個々に、設定または再設定されうる。
アービトレーション要素２６は、特定の順序なしに、それぞれ、競合ポート２０、仮想チャネル、および、トランザクションクラスのアービトレーションを実行することによって、最終的な勝利トランザクション部分を選択する。サイクルあたりの勝利部分は、共有相互接続１２にアクセスし、対応する仮想チャネルを介して伝送される。
図３Ｂを参照すると、デバイス順位付けでアービトレーション要素２６によって実行されるアービトレーションロジックを示す論理図が示されている。アービトレーション処理、および、おそらくは利用可能な宛先リソースの考慮は、２つの違いを除けは、上述したのと基本的に同じである。
Referring to FIG. 3B, a logic diagram illustrating the arbitration logic performed by
第１に、デバイス順序付けでは、（ａ）すべての要求に対する応答が求められるＮｏｎ－ｐｏｓｔｅｄ読み出しまたは書き込みトランザクションと、（ｂ）要求された応答を規定したＣｏｍｐｌｅｔｉｏｎトランザクションとを含め、２つトランザクションクラスだけが定義される。トランザクションクラスが２つだけなので、各ポート２０において仮想チャネルごとに２つのバッファだけがある。例えば、４つの仮想チャネル（ＶＣ０、ＶＣ１、ＶＣ２、および、ＶＣ３）がある場合、各ポート２０（例えば、Ｐｏｒｔ０、Ｐｏｒｔ１、および、Ｐｏｒｔ２）は、合計で８つのバッファを有する。
First, device ordering allows for only two classes of transactions, including (a) non-posted read or write transactions that require a response to every request, and (b) a Completion transaction that specifies the requested response. defined. Since there are only two transaction classes, there are only two buffers per virtual channel at each
第２に、デバイス順序付けのトランザクションを選択するためのルールも、ＰＣＩ順序付けとは異なる。デバイス順序付けでは、オーバークラスを超える１つのクラスの選択に適用される厳密なルールは存在しない。逆に、いずれかのトランザクションクラスが任意に選択されうる。しかしながら、一般的な方法では、典型的には、Ｃｏｍｐｌｅｔｉｏｎトランザクションが解決するまで利用可能になりえないリソースを解放するように、好都合なＣｏｍｐｌｅｔｉｏｎトランザクションに要求する。 Second, the rules for selecting transactions for device ordering are also different from PCI ordering. In device ordering, there are no strict rules that apply to the selection of one class over its overclass. Conversely, any transaction class may be selected arbitrarily. However, the general method typically requires a favorable Completion transaction to release resources that cannot be made available until the Completion transaction is resolved.
それ以外の点では、デバイス順序付けのためのアービトレーション処理は、基本的に上述したものと同じである。換言すると、各アービトレーションサイクルに対して、アービトレーション勝者を選択するために、アービトレーション工程（１）、（２）、および、（３）が、任意の特定の順で実行される。トランザクションクラスアービトレーションが実行される時、ＰＣＩ順序ルールよりはむしろデバイス順序が利用される。さらに、宛先リソースおよび／または仮想チャネルの利用可能性が、アービトレーション工程（１）、（２）、および、（３）のいずれかの前または間に考慮されてもよい。 Otherwise, the arbitration process for device ordering is essentially the same as described above. In other words, for each arbitration cycle, arbitration steps (1), (2), and (3) are performed in any particular order to select an arbitration winner. When transaction class arbitration is performed, device ordering is utilized rather than PCI ordering rules. Furthermore, the availability of destination resources and/or virtual channels may be considered before or during any of the arbitration steps (1), (2) and (3).
動作フローチャート
先述したように、上述のアービトレーションスキームは、任意の共有リソースへのアクセスを共有するために利用されてよく、共有相互接続との利用だけに限定されない。かかる他の共有リソースは、ＡＲＬ２８、処理リソース、メモリリソース（ＬＵＴ３０など）、または、アクセスをめぐって競い合う複数のパーティの間で共有されるほぼ任意のその他のタイプのリソースを含みうる。
Operational Flowchart As previously discussed, the arbitration scheme described above may be utilized to share access to any shared resource and is not limited to use with shared interconnects. Such other shared resources may include
図４を参照すると、共有リソースへのアクセスをアービトレートするための動作工程を示すフローチャート４０が示されている。
Referring to FIG. 4, a
工程４２において、様々な送信元サブシステムエージェント１４が、トランザクションを生成する。トランザクションは、Ｐｏｓｔｅｄ（Ｐ）、Ｎｏｎ－ｐｏｓｔｅｄ（ＮＰ）、および、Ｃｏｍｐｌｅｔｉｏｎ（Ｃ）を含む３つのクラスのいずれかでありうる。
At
工程４４において、送信元サブシステムエージェント１４によって生成されたトランザクションの各々は、パケット化される。先述したように、所与のトランザクションのパケット化は、１以上のパケットをもたらしうる。パケットは、サイズが様々であってよく、一部のパケットは大きいペイロードを持ち、他のパケットは小さいペイロードを持つかまたは全く持たない。トランザクションが、相互接続１２の幅よりも小さいデータペイロード３６を有する単一のパケットによって表される状況では、トランザクションは、単一の部分によって表されうる。トランザクションが、共有リソースのアクセス幅よりも大きいデータペイロード３６を備えた複数のパケットまたは単一のパケットによって表される状況では、複数の部分が、トランザクションを表すために必要とされる。
At
工程４６において、サブシステムエージェント１４の各々によって生成されたパケット化トランザクションの部分は、対応するポート２０を介してローカルスイッチ１６に投入される。ポート２０内で、各トランザクションのパケットは、仮想チャネルに割り当てられる。先述したように、割り当ては、無作為であるか、ハードコードされるか、または、すべての仮想チャネルにわたってバランスの取れた利用、セキュリティ、緊急性などに基づいてよい。
At
工程４８において、サブシステムエージェント１４の各々によって生成されたパケット化トランザクションの部分は、それぞれ、両方のトランザクションクラスによっておよびそれらに割り当てられた仮想チャネル（例えば、ＶＣ０、ＶＣ１、ＶＣ２、および、ＶＣ３）によって、適切な先入れ先出しバッファに格納される。先に述べたように、仮想チャネルは、厳密または絶対優先度、ラウンドロビン、重み付き優先度、最長時間未サービス（ｌｅａｓｔ ｒｅｃｅｎｔｌｙ ｓｅｒｖｉｃｅｄ）など、多くの異なる優先度スキームの１つによって割り当てられてよい。所与のトランザクションが複数の部分を有する場合、各部分は、同じバッファ内に格納される。結果として、所与のトランザクションの複数の部分は、相互接続１２に関連付けられている同じ仮想チャネルで伝送される。トランザクション部分が投入されると、各バッファ内のコンテンツアイテム数を追跡するための対応するカウンタがデクリメントされる。特定のバッファが満たされた場合、そのカウンタはゼロにデクリメントされ、これは、バッファがさらなるコンテンツをもはや受け入れることができないことを意味する。
At
工程５０、５２、および、５４において、第１、第２、および、第３レベルアービトレーションが実行される。先述したように、ポート２０、仮想チャネル、および、トランザクションクラスの選択は、任意の順序で実行されてよい。
At
要素５６が、第１、第２、および、第３レベルのアービトレーションの実行に用いられるルールを維持するために用いられてよい。各ケースにおいて、要素５６は、アービトレーションレベルの各々を解決するのに必要に応じて用いられる。例えば、要素５６は、ＰＣＩおよび／またはデバイス順序付けルールを維持してよい。要素５６は、いくつかの優先度スキーム（厳密または絶対優先度、重み付き優先度、ラウンドロビンなど）を実行するためのルールと、所与のアービトレーションサイクルでどれを用いるかを決定するためのロジックまたはインテリジェンスと、を備えてもよい。
工程５８において、アービトレーションの勝者が決定される。工程６０において、勝利部分は、共有リソースにアクセスするために用いられるバッファ内に配置され、バッファに関連付けられているカウンタがデクリメントされる。
At
工程６２において、勝利部分に関連するバッファは、勝利部分がもはやバッファ内にはないのでインクリメントされる。
At
工程６４において、勝利部分は、共有リソースへアクセスする。アクセスが完了すると、共有リソースのためのバッファがインクリメントされる。
At
工程４２～６４は、それぞれ、連続するクロックサイクル中に連続的に繰り返される。異なる勝利部分として、各々が共有リソースへアクセスする。 Steps 42-64 are each repeated continuously during successive clock cycles. As different winning parts, each gets access to shared resources.
インターリービング－例１
トランザクションは、いくつかのモードの内の１つで相互接続１２を介して伝送されうる。
Interleaving - Example 1
Transactions may be transmitted over
「ヘッダインライン（ｈｅａｄｅｒ ｉｎ－ｌｉｎｅ）」モードと呼ばれる１つのモードでは、トランザクションのパケット３２のヘッダ３４は、常に、それぞれ、別個の部分またはビートでペイロード３６の前に最初に伝送される。ヘッダインラインモードは、相互接続１２のデータビット数Ｎに対するヘッダ３４および／またはペイロード３６の相対サイズに応じて、相互接続１２で利用可能なビットを浪費する場合としない場合がある。例えば、５１２ビット幅（Ｎ＝５１２）である相互接続１２と、１２８ビットのヘッダおよび２５６ビットのペイロードを有するパケットと、を考える。このシナリオでは、１２８ビットのヘッダが第１部分またはビートで伝送され、相互接続１２の残りの３８４ビットの帯域幅は利用されない。第２部分またはビートでは、２５６ビットのペイロード３６が伝送され、相互接続１２の残りの２５６ビットは利用されない。この例では、相互接続の帯域幅のかなりの割合が、２つのビート中に利用されない。一方、トランザクションのパケットのほとんどが相互接続以上のサイズである場合、浪費される帯域幅の程度は、削減されるかあるいは解消される。例えば、３８４または５１２ビットであるヘッダおよび／またはペイロードでは、浪費の量は、大幅に削減されるか（例えば、３８４ビット）または全く解消される（例えば、５１２ビット）。
In one mode, referred to as the "header in-line" mode, the
「ヘッダオンサイドバンド（ｈｅａｄｅｒ ｏｎ ｓｉｄｅ－ｂａｎｄ）」と呼ばれる別のモードでは、パケットのヘッダ３４は、データの「サイドで」伝送され、これは、ペイロード３６が相互接続１２のＮデータビットで伝送される間に、制御ビットＭを利用することを意味する。ヘッダオンサイドバンドモードでは、パケット３２のペイロード３６のビット数またはサイズは、所与の相互接続１２でパケットを伝送するのに必要なビート数を決定する。例えば、６４、１２８、２５６、または、５１２ビットのペイロード３６を有するパケット３２、ならびに、１２８データビット（Ｎ＝１２８）を有する相互接続１２の場合、パケットは、それぞれ、１、１、２、および、４ビートを必要とする。ビートの各々の伝送では、ヘッダ情報は、相互接続１２のＮデータビットでペイロードのデータと共にまたはその「サイドで」制御ビットＭで伝送される。
In another mode, called "header on side-band," the
さらに別のモードにおいて、パケット３２のヘッダ３４は、ペイロードと同じように伝送されるが、ヘッダ３４およびペイロード３６が別個の部分またはビートで伝送されなければならない要件はない。パケット３２が、１２８ビットのヘッダ３４および１２８ビットのペイロード３６を有する場合、合計サイズは、２５６ビット（１２８＋１２８）である。相互接続１２のＮデータビットが、６４、１２８、２５６、および、５１２ビット幅である場合、２５６ビットのパケットは、それぞれ、４、２、１、および、１ビートで伝送される。別の例において、パケット３２は、１２８ビットのヘッダおよび２５６ビットのペイロード３６、すなわち、３８４ビット（１２８＋２５６）の合計パケットサイズを有する。６４、１２８、２５６、または、５１２幅のＮデータビットの同じ相互接続１２では、パケットは、それぞれ、６、３、２，または、１ビートで伝送される。このモードは、常に、上述のヘッダインラインモードと少なくとも同等以上の効率である。
In yet another mode, the
図５を参照すると、複数の仮想チャネル上での異なるトランザクションの部分のインターリービングの第１例が図示されている。この例では、簡単のために、２つのトランザクションのみが示されている。２つのトランザクションは、この例では、１２８データビット幅（Ｎ＝１２８）である共有相互接続１２へのアクセスをめぐって競合している。２つのトランザクションの詳細は、以下を含む。
（１）トランザクション１（Ｔ１）：時刻Ｔ１に生成され、仮想チャネルＶＣ２に割り当てられている。Ｔ１のサイズは、４ビートであり、それらのビートは、Ｔ１Ａ、Ｔ１Ｂ、Ｔ１Ｃ、および、Ｔ１Ｄとして指定されている。
（２）トランザクション２（Ｔ２）：時刻Ｔ２（時刻Ｔ１の後）に生成され、仮想チャネルＶＣ０に割り当てられている。Ｔ２のサイズは、単一の部分またはビートである。
Referring to FIG. 5, a first example of interleaving portions of different transactions over multiple virtual channels is illustrated. In this example, only two transactions are shown for simplicity. Two transactions are competing for access to shared
(1) Transaction 1 (T1): Generated at time T1 and assigned to virtual channel VC2. The size of T1 is 4 beats, and the beats are designated as T1A, T1B, T1C, and T1D.
(2) Transaction 2 (T2): Generated at time T2 (after time T1) and assigned to virtual channel VC0. The size of T2 is a single portion or beat.
この例では、ＶＣＯに絶対または厳密優先度が割り当てられている。複数のサイクルにわたって、２つのトランザクションＴ１およびＴ２の部分が、以下に従って、図５に示すように、共有相互接続で伝送される。
サイクル１：Ｔ１のビートＴ１Ａは、唯一の利用可能なトランザクションであるので、ＶＣ２で伝送される。
サイクル２：Ｔ１のビートＴ１ＢおよびＴ２の単一部分は、相互接続１２へのアクセスをめぐって競合する。ＶＣＯは厳密優先度を有するので、Ｔ２が自動的に勝利する。したがって、Ｔ２のビートは、ＶＣ０で伝送される。
サイクル３：競合するトランザクションがないので、Ｔ１のビートＴ１ＢがＶＣ２で伝送される。
サイクル４：競合するトランザクションがないので、Ｔ１のビートＴ１ＣがＶＣ２で伝送される。
サイクル５：競合するトランザクションがないので、Ｔ１のビートＴ１ＤがＶＣ２で伝送される。
In this example, the VCO is assigned an absolute or strict priority. Over a number of cycles, parts of two transactions T1 and T2 are transmitted on the shared interconnect, as shown in FIG. 5, according to the following.
Cycle 1: Beat T1A of T1 is transmitted on VC2 because it is the only available transaction.
Cycle 2: Beat T1B and a single portion of T2 compete for access to
Cycle 3: Beat T1B of T1 is transmitted on VC2 since there are no conflicting transactions.
Cycle 4: Beat T1C of T1 is transmitted on VC2 since there are no conflicting transactions.
Cycle 5: Since there are no conflicting transactions, beat T1D of T1 is transmitted on VC2.
この例は、以下を示す。（１）絶対優先度を有する仮想チャネルでは、他のトラフィックが先に待っていたか否かに関わらず、トラフィックが利用可能になればいつでも、共有相互接続１２へのアクセス権が即座に与えられること、ならびに、（２）異なるトランザクションの勝利部分またはビートは、相互接続１２に関連付けられている異なる仮想チャネルでインターリーブされて伝送されること。この例において、仮想チャネルＶＣＯは、絶対優先度を与えられている。絶対または厳密優先度スキームでは、仮想チャネルのいずれかが、最高優先度を割り当てられてよいことを理解されたい。
This example shows: (1) In a virtual channel with absolute priority, traffic is immediately granted access to the shared
インターリービング－例２
図６を参照すると、複数の仮想チャネル上での異なるトランザクションの部分のインターリービングの第２例が図示されている。
Interleaving - Example 2
Referring to FIG. 6, a second example of interleaving portions of different transactions on multiple virtual channels is illustrated.
この例において、相互接続１２へのアクセスのための優先度スキームは重み付けされており、これは、ＶＣＯが（４０％）の確率でアクセス権を与えられ、ＶＣ１～ＶＣ３が各々（２０％）の確率でアクセス権を与えられることを意味する。また、相互接続は、１２８ビット幅である。 In this example, the priority scheme for access to interconnect 12 is weighted, such that the VCO is given access with a probability of (40%) and VC1-VC3 each have a probability of (20%). This means that access rights are granted based on probability. Also, the interconnects are 128 bits wide.
さらに、この例においては、４つの競合するトランザクションＴ１、Ｔ２、Ｔ３、および、Ｔ４が存在する。
－Ｔ１は、ＶＣ０に割り当てられ、４つの部分またはビートＴ１Ａ、Ｔ１Ｂ、Ｔ１Ｃ、および、Ｔ１Ｄを含む。
－Ｔ２は、ＶＣ１に割り当てられ、２つの部分またはビートＴ２ＡおよびＴ２Ｂを含む。
－Ｔ３は、ＶＣ２に割り当てられ、２つの部分またはビートＴ３ＡおよびＴ３Ｂを含む。
－Ｔ４は、ＶＣ３に割り当てられ、２つの部分またはビートＴ４ＡおよびＴ４Ｂを含む。
Furthermore, in this example, there are four conflicting transactions T1, T2, T3, and T4.
-T1 is assigned to VC0 and includes four parts or beats T1A, T1B, T1C and T1D.
-T2 is assigned to VC1 and includes two parts or beats T2A and T2B.
- T3 is assigned to VC2 and includes two parts or beats T3A and T3B.
-T4 is assigned to VC3 and includes two parts or beats T4A and T4B.
この例では、優先度スキームは重み付けされる。結果として、各仮想チャネルは、その重みの比率に従って勝利する。換言すると、１０サイクルの間に、ＶＣ０は、４回勝利し、ＶＣ１、ＶＣ２、および、ＶＣ３は各々、２回勝利する。例えば、図６に示すように、
－Ｔ１の４つの部分またはビートＴ１Ａ、Ｔ１Ｂ、Ｔ１Ｃ、および、Ｔ１Ｄは、１０サイクルのうちの４サイクル（４０％）（すなわち、サイクル１、４、７、および、１０）でＶＣＯを介して伝送される。
－Ｔ２の２つの部分またはビートＴ２ＡおよびＴ２Ｂは、１０サイクルのうちの２サイクル（２０％）（すなわち、サイクル２およびサイクル６）でＶＣ１を介して伝送される。
－Ｔ３の２つの部分またはビートＴ３ＡおよびＴ３Ｂは、１０サイクルのうちの２サイクル（２０％）（すなわち、サイクル５およびサイクル９）でＶＣ２を介して伝送される。
－Ｔ４の２つの部分またはビートＴ４ＡおよびＴ４Ｂは、１０サイクルのうちの２サイクル（２０％）（すなわち、サイクル３およびサイクル８）でＶＣ３を介して伝送される。
In this example, the priority scheme is weighted. As a result, each virtual channel wins according to its weight ratio. In other words, during 10 cycles, VC0 wins 4 times and VC1, VC2, and VC3 each
- The four parts of T1 or beats T1A, T1B, T1C and T1D are transmitted through the VCO in 4 out of 10 cycles (40%) (i.e. cycles 1, 4, 7 and 10) be done.
- The two parts of T2 or beats T2A and T2B are transmitted over VC1 in 2 out of 10 cycles (20%) (ie,
- The two parts of T3 or beats T3A and T3B are transmitted over VC2 in 2 out of 10 cycles (20%) (ie,
- The two parts of T4 or beats T4A and T4B are transmitted over VC3 in 2 out of 10 cycles (20%) (ie,
したがって、この例は、以下を示す。（１）各仮想チャネルが所定の比率に基づいて相互接続１２へのアクセス権を与えられる重み付き優先度スキーム、ならびに、（２）異なるトランザクションの勝利部分が相互接続１２に関連付けられている異なる仮想チャネルでインターリーブされて伝送される別の例。
Therefore, this example shows: (1) a weighted priority scheme in which each virtual channel is given access to
この重み付けの例では、重み付け比率に従って様々な仮想チャネルにトランザクションの部分を割り当てられるのに十分なトラフィックがあることを理解されたい。その一方でトラフィックの量が不十分である場合、重み付け比率は、厳密に実施できる場合も厳密に実施できない場合もある。例えば、仮想チャネルＶＣ３に大きいトラフィックがあり、その他の仮想チャネルＶＣ０、ＶＣ１、および、ＶＣ２ではトラフィックが限られているか全くない場合、ＶＣ３は、重み付け比率が厳密に実施されれば、トラフィックの全部または大部分を運ぶことになる。しかしながら、結果として、すべてのクロックサイクルまたはビートでトランザクションの部分を送信できるわけではないので、相互接続１２は、十分に利用されえない。一方、重み付け比率が厳密に実施されない場合、相互接続の利用率をあげるために、トランザクショントラフィックを再割り当てすることが可能である（例えば、トラフィックが、より多い数のサイクルまたはビートで送信される）。
It should be appreciated that in this weighting example, there is sufficient traffic to allocate portions of transactions to various virtual channels according to weighting ratios. On the other hand, if the amount of traffic is insufficient, the weighting ratio may or may not be strictly enforceable. For example, if virtual channel VC3 has large traffic and other virtual channels VC0, VC1, and VC2 have limited or no traffic, VC3 will receive all or no traffic if the weighting ratio is strictly enforced. I will carry most of it. However, as a result, the
上記の２つの例は、上述した伝送モードのどれが利用されるかに関わらず適用可能である。トランザクションが部分またはビートに分割されると、それらは、本明細書で規定したアービトレーションスキームのいずれかを用いて共有相互接続１２でインターリーブされて伝送されうる。
The above two examples are applicable regardless of which of the transmission modes described above is utilized. Once transactions are divided into parts or beats, they may be interleaved and transmitted on the shared
上述したアービトレーションスキームは、ほんの数例である。その他の例では、低ジッタ、重み付け、厳密、ラウンドロビン、または、ほぼ任意のその他のアービトレーションスキームが用いられてもよい。したがって、本明細書に列挙または記載されたアービトレーションスキームは、例示であり、どのようにも限定と見なされるべきではない。 The arbitration schemes described above are just a few examples. In other examples, low jitter, weighted, strict, round robin, or nearly any other arbitration scheme may be used. Accordingly, the arbitration schemes listed or described herein are illustrative and should not be considered limiting in any way.
複数の同時アービトレーション
ここまで、簡単のために、単一のアービトレーションのみを記載していた。しかしながら、現実的な応用例（ＳｏＣ上など）では、複数のアービトレーションが同時に行われうることを理解されたい。
Multiple Simultaneous Arbitrations So far, only a single arbitration has been described for simplicity. However, it should be understood that in practical applications (such as on a SoC), multiple arbitrations may occur simultaneously.
図７を参照すると、スイッチ１６、１８の間において２方向でトラフィックを処理するための２つの共有相互接続１２および１２Ｚのブロック図が示されている。上述したように、スイッチ１６は、共有相互接続１２を介して送信元サブファンクション１４（すなわち、ＩＰ１、ＩＰ２、および、ＩＰ３）から宛先サブファンクション１４（すなわち、ＩＰ４、ＩＰ５、および、ＩＰ６）へトランザクショントラフィックを方向付ける。逆方向のトランザクショントラフィックを扱うために、スイッチ１８は、アービトレーション要素２６Ｚと、任意選択的にＡＲＬ２８Ｚと、を備える。動作中、要素２６ＺおよびＡＲＬ２８Ｚは、上述した動作と相補的に動作し、これは、送信元ＩＰエージェント１４（すなわち、ＩＰ４、ＩＰ５、および、ＩＰ６）によって生成されたトランザクショントラフィックがアービトレートされて、共有相互接続１２Ｚを介して宛先ＩＰエージェント（すなわち、ＩＰ１、ＩＰ２、および、ＩＰ３）へ送信されることを意味する。あるいは、アービトレーションは、ＡＲＬ２８Ｚなしに実行されてもよく、これは、アービトレーションが、単に競合ポート２０（例えば、Ｐｏｒｔ３、Ｐｏｒｔ３またはＰｏｒｔ５）の間で決定を行い、勝利ポートに関連するトランザクションの部分が、その部分の最終的な宛先に関わらず、相互接続１２で伝送されることを意味する。要素１２Ｚ、２６Ｚ、および、２８Ｚについては、すでに記載したので、簡単のために詳細な説明は、ここでは提供しない。
Referring to FIG. 7, a block diagram of two shared
ＳｏＣには、複数レベルのサブファンクション１４および複数の共有相互接続１２が存在しうる。各々で、上述のアービトレーションスキームを用いて、様々なサブファンクションの間で相互接続１２を介して送信されるトランザクションの間のアービトレーションを同時に行うことができる。
There may be multiple levels of
ＩＰエージェントのリセットおよび電力管理
図８を参照すると、リセットおよび電力管理機能を有するＳｏＣ８００のブロック図が示されている。ＳｏＣ８００は、相互接続８０２と、複数のＩＰエージェント１４（例えば、エージェント１～エージェントＮ）と、相互接続８０２にＩＰエージェント１４を接続または結合する１以上のリンク８０３と、システムコントローラ８０４と、を備える。図示していないが、各ＩＰエージェント１４は、リセット入力命令を受信するための１以上の専用「ハードワイヤ」入力も備えてよい。かかる命令は、複数のソースから（ＳｏＣの外から、システムコントローラ８０４から、または、別のＩＰエージェント１４から、など）もたれされてよい。
IP Agent Reset and Power Management Referring to FIG. 8, a block diagram of an
様々な実施形態において、ＩＰエージェント１４は、異なっていてよく、様々な異なる機能を実装してよい。
In various embodiments,
相互接続８０２は、ネットワークオンチップ（ＮｏＣ）、バス、スイッチネットワークなど、様々な異なるタイプの相互接続でありうる。 Interconnect 802 can be a variety of different types of interconnect, such as a network on a chip (NoC), a bus, a switched network, etc.
様々な実施形態において、リンク８０３は各々、各ＩＰエージェント１４と相互接続８０２との間の専用リンクまたはバスであってよい。あるいは、相互接続８０２へのアクセスが、１つのリンク８０３を用いて複数のＩＰエージェント１４の間で共有されてもよく、アービトレーションスキームが、競合ＩＰエージェント１４の間の選択に用いられる。さらに別の実施形態において、複数の仮想チャネルが、先述したように共有リンクに関連付けられている仮想チャネルのように、１以上のリンク８０３に関連付けられてもよい。
In various embodiments, each link 803 may be a dedicated link or bus between each
システムコントローラ８０４、ならびに、マネージャ８０６、８０８、および、８０９も、多くの異なる方法で実装されてよい。例えば、ＣＰＵまたはマイクロコントローラとして、プログラマブルロジックとして、ＳｏＣ８００上のすべてまたはほとんどのシステム制御機能を扱うための複雑な状態マシン、いくつかの例外状況を扱うための単純な状態マシン、または、それらの任意の組みあわせとして。システムコントローラ８０４は、図に示すように、ＳｏＣ８００上に存在してもよいし、あるいは、ＳｏＣ８００から離れて配置されてもよい（図示せず）。状態マシンが用いられる場合、状態と、状態の間の移行とは、典型的には、ＳｏＣ８００にハードコードされる。
さらに別の実施形態において、リセット、電力、および／または、休止のためのマネージャ８０６、８０８、および、８０９の内の１以上は各々、図に示すように、システムコントローラ８０４内に集中化されてよい。あるいは、各マネージャ８０６、８０８、および／または、８０９は、ＳｏＣ８００上またはＳｏＣ外で、様々な位置に分散化および分配されてもよい。リセットマネージャ８０６、電力マネージャ８０８、および、休止マネージャ８０９の各々は、ソフトウェア、ハードウェア、プログラマブルロジック、状態マシン、または、任意のその他の適切な手段で実装されうる。
In yet another embodiment, one or more of reset, power, and/or
リセットマネージャ８０６は、組織的に、リセットからＳｏＣ８００上の様々なＩＰエージェント１４が出る際の管理に関与する。ＩＰエージェント１４のリセットが、多くの状況下で求められるかまたは望まれうる。例えば、ＳｏＣ８００に供給される電力の除去または断絶、もしくは、ＳｏＣ８００のシステム全体のリセットの後に、「コールドリセット」が起きる。あるいは、ＩＰエージェント１４の内の１つ、１グループ、または、全部（コールドリセットと同様）がリセットされるが、電力がＳｏＣ８００から除去または断絶されない場合、「ウォームリセット」が起きる。ウォームリセットは、ＳｏＣ８００上または外部のいずれかに由来するシグナリングによって実施されうる。リセットが開始される方法に関わらず、リセットマネージャ８０６は、組織的に、リセットから１または複数のＩＰエージェント１４が出る際の管理に関与する。
ＩＰエージェント１４が何らかの理由で正常に動作しない場合、リセットする必要がありうる。ＩＰエージェント１４が正常に機能しない例としては、ＩＰエージェント１４が、応答しない、エラー状態である、または、活発にエラートランザクションを生成している状況が含まれる。さらに別の例において、ＩＰエージェント１４は、後述するいくつかの節電モードの１つなど低電力状態から抜けた後に、リセット動作を受ける必要がありうる。
If
電力マネージャ８０８は、様々なＩＰエージェント１４を低電力状態（典型的には、いくつかの節電モードの１つ）にする処理を管理する。モードに応じて、電力マネージャ８０８は、必要であればＩＰエージェントをリセットするために、リセットマネージャ８０６と連携して動作してよい。
休止マネージャ８０９は、システムコントローラ８０４、リセットマネージャ８０６、電力マネージャ８０８、および、相互接続８０２と連携して動作することで、（１）動作可能または動作不良のＩＰエージェント１４を、ＩＰエージェントが動作不能になるリセットまたは節電モードに移行させ、（２）相互接続とＩＰエージェント８０２との間のリンク８０３を休止状態にし、（３）動作不能の間にＩＰエージェントの代理として動作するように相互接続に指示する。
The
メモリ８１０は、揮発性および不揮発性タイプのメモリの両方を含みうる。さらに、メモリ８１０は、ＳｏＣ８００上に集中化されてもよいし、システムコントローラ８０４、相互接続８０２、リンク８０３、ならびに、マネージャ８０６、８０８、および／または、８０９の内のいずれか、の間に広く分散されてもよい。さらに別の実施形態において、メモリ８１０の一部または全部が、ＳｏＣ８００から離れて提供されてもよい。
メモリ８１０の揮発性部分は、典型的には、システムメモリに利用され、そこに、システムコントローラ８０４、マネージャ８０６、８０８、８０９、相互接続８０２、ＩＰエージェント１４などによって生成された現在のデータが格納される。かかるメモリは、様々なキャッシュ、ＳＲＡＭ、ＤＲＡＭなどを含みうる。
The volatile portion of
メモリ８１０の不揮発性または永続的部分は、典型的には、ＳｏＣ８００のための「ブートアップ」コードを格納するために用いられる。ブートコードは、マネージャ８０６、８０８、８０９、相互接続８０２、および、ＩＰエージェント１４を含め、システムコントローラ８０４が各々、電源をオンにした後に動作を開始するのに必要な通りに、オペレーティングシステムおよび／またはその他のシステムソフトウェアをロードすることを可能にする。リブート処理は、典型的には、複数のセルフテストを含み、テストは、完了時に、ＩＰエージェント１４の各々を含むシステム全体が、通常動作を実行することを可能にする。不揮発性または永続的部分は、ＮＶＲＡＭ（不揮発性ランダムアクセスメモリ）、ＥＥＰＲＯＭ（電気消去可能プログラマブルリードオンリーメモリ）、ハードドライブ、ＣＤ－ＲＯＭなどを用いて実装されてよい。
A non-volatile or persistent portion of
リセットマネージャ８０６は、組織的に、ＩＰエージェント１４のいずれかがリセットから出るのを調整するのに関与する。本明細書に記載のように、所与のＩＰエージェント１４のリセットは、（１）ＳｏＣ８００全体が、外部リセット、リスタートコマンド、または、電源オンイベントの後のリセットから出る時、または、（２）電力ダウンまたはスリープモードの後の動作不良によるＳｏＣ８００の動作中の個々のＩＰエージェント１４のリセットなど、様々な理由で起こりうる。理由に関わらず、所与のＩＰエージェント１４は、内部リセットシーケンスが完了すると、相互接続８０２にいつでも導入できる。リセットから出た後に、ネゴシエーションが、リンク８０３を介して相互接続８０２上でＩＰエージェント１４とそのＩＰポート２０との間で調整される。
図９を参照すると、ＩＰエージェント１４と相互接続８０２との間のＩＰエージェントリセットネゴシエーションシーケンスの一例を示すフローチャートが示されている。
Referring to FIG. 9, a flowchart illustrating an example of an IP agent reset negotiation sequence between
最初の工程９０２において、ＩＰエージェント１４がリセットから出て相互接続８０２に導入される準備ができているか否かが判定される。リセットから出ると、相互接続８０２へＩＰエージェント１４を再導入するために、後続の工程９０４～９１２が実行される。
In a
工程９０４において、相互接続８０２は、定期的にＩＰエージェント１４についての問い合わせを生成する。各問い合わせで、相互接続８０２は、基本的に、「アウェイク」状態であるか否か（すなわち、トランザクション準備完了状態であるか、つまり、受信したトランザクションを送信または処理できるか否か）をＩＰエージェント１４に尋ねる。
At
判定９０６において、相互接続は、ＩＰエージェント１４から問い合わせへの肯定応答を受信したか否かを判定する。受信していない場合、相互接続８０２は、問い合わせを送信し続ける。受信した場合、それは、ＩＰエージェント１４が、そのリセットルーチンを部分的に完了して、次のネゴシエーション段階の準備が整っていることを、相互接続８０２に対して示す。
At
工程９０８において、相互接続８０２およびＩＰエージェント１４は、それぞれ、それらのクレジット情報を交換することによってネゴシエーションを続ける。相互接続８０２およびＩＰエージェント１４は各々、ビートの利用可能数（すなわち、クロックサイクルあたりにリンク８０３で伝送できるデータの量）を交換する。リンク８０３の両側の各パートナーは、交換後、このネゴシエーションの結果として他方が有するクレジットの利用可能数を知る。
At
任意選択的な工程９１０において、相互接続８０２およびＩＰエージェント１４は、セキュリティクレデンシャル、相互接続８０２およびＩＰエージェント１４を接続するリンク８０３に関連付けることのできる仮想チャネルの合意済みの数など、他の有用な情報を交換することによって、それらのネゴシエーションを続ける。
At
最後の工程９１２において、ネゴシエーションが完了すると、ＩＰエージェント１４は、「トランザクション準備完了」を宣言される。換言すると、ＩＰエージェント１４は、相互接続８０２から受信した受信トランザクションを処理するか、または、別の宛先へ相互接続８０２を介して送信トランザクション送信するか、いずれかの準備が整っている。ＩＰエージェント１４がトランザクション準備完了状態になると、ＩＰエージェント１４は、相互接続８０２、システムコントローラ８０４、ならびに、直接的に、または、中間回路、ロジック、または、その他の要素を通して間接的に、相互接続８０２に接続または他の方法で結合された任意のその他の要素にとって可視的になる。
In a
また、リセットマネージャ８０６は、動作不良のＩＰエージェント１４のリセットの調整にも関与する。ＳｏＣ８００の動作中、ＩＰエージェント１４は、うまく動作しない場合がある（例えば、応答しなくなる、エラー状態に入る、トランザクションの生成でエラーを起こす、または、他の動作不良を起こす）。例えば、ＩＰエージェントは、受信したトランザクションを処理できない場合がある。結果として、トランザクションを送信する送信元ＩＰエージェントは、応答を待ってハングアップしうる。問題の深刻さによっては、ハングアップは、送信元ＩＰエージェント１４、宛先ＩＰエージェント１４だけに限定されうるが、最悪の場合のシナリオでは、他の部分またはＳｏＣ８００全体にまで、悪影響が及びうる。したがって、特定の状況においては、動作不良のＩＰエージェントは、問題を修正するためにリセットされる必要がありうる。
The
図１０を参照すると、動作不良のＩＰエージェントのためのリセットシーケンスを示すフローチャート１０００が示されている。
Referring to FIG. 10, a
工程１００２では、ＳｏＣ８００上の様々なＩＰエージェント１４が、送信トランザクションを生成するおよび／または受信トランザクションを処理することによって正常に動作する。
At
判定工程１００４において、システムコントローラ８０４は、ＩＰエージェントの動作を監視する。問題が検出されなければ、ＩＰエージェント１４は、それらの通常動作を継続する。一方、何らかの理由で、ＩＰエージェント１４が正常に動作しない場合、リセットマネージャ８０６が、動作不良ＩＰエージェント１４としてそれにフラグを立てる。
At
工程１００５において、システムコントローラ８０４および相互接続８０２は、さらに、さらなる課題も問題もなしにＳｏＣ８００の残り部分が動作するのを助けるいくつかの処理を開始するよう協働する。これらのさらなる処理は、以下を含んでよい。
１．システムコントローラ８０４は、動作不良のＩＰエージェント１４によって任意のさらなるトランザクションが生成されることを相互接続８０２が許可しないように要求する。
２．動作不良のＩＰエージェント１４を目標とする未処理のトランザクションを追跡する。
３．相互接続８０２は、リセットネゴシエーション処理を受ける間に動作不良のＩＰエージェント１４の代理として機能し、そのＩＰエージェント１４を目標とする任意のトランザクションへ応答してよい。例えば、相互接続８０２は、未処理のトランザクションに応答して、例外メッセージを生成してよい。代理として機能することにより、トランザクションの送信側が動作不良のＩＰエージェント１４からの応答を決して受信しないためにシステム全体がハングアップするなど、潜在的にはるかに大きいシステム全体の問題が回避される。様々な実施形態において、例外メッセージは、ＩＰエージェント１４が利用できない、ＩＰエージェントは、低電力モードである、など、いくつかの異なるタイプであってよい。一般に、様々な異なるタイプの例外メッセージが用いられてよく、各々が、発生した状態またはエラーを示す。
At
1.
2. Track outstanding transactions targeting a malfunctioning
3.
工程１００６において、リセットマネージャ８０６は、動作不良のＩＰエージェント１４のためのリセット命令を生成する。
At
工程１００７において、リセットされるＩＰエージェント１４と相互接続８０２との間のリンク８０３は、休止状態にされる。この処理については、図１４に関してさらに説明する。
In
工程１００８において、動作不良のＩＰエージェント１４は、相互接続８０２を介して受信されるかまたは専用リセットワイヤを介して受信されてもよい命令に応答して、そのリセットルーチンを開始する。この処理は、図９に関して上述したように、ＩＰエージェント１４が、（１）自身のリセットプロトコルまたはルーチンを実行し、（２）相互接続８０２とネゴシエートすること、を含む。
At
判定工程１０１２において、ＩＰエージェント１４のリセットネゴシエーションが完了したか否かが判定される。完了すると、制御は、工程１００２に戻り、ＩＰエージェント１４およびＳｏＣ８００の動作が正常に再開する。上述のように、リセットされたＩＰエージェント１４は、リセットから出た後に、相互接続８０２およびシステムコントローラにとって可視的になり、トランザクション準備完了状態になる。最後に、工程１０１４において、現在リセットされたＩＰエージェント１４と相互接続８０２との間のリンク８０３は、休止モードを出る。この時点で、相互接続８０２はもはや、ＩＰエージェント１４の代理として機能する必要はない。
In
電力マネージャ８０８は、ＩＰエージェント１４をいくつかの電力ダウンモードの１つにすることによって、インテリジェントかつ選択的にＩＰエージェント１４を低電力状態にすることに関与する。ＩＰエージェント１４の電力ダウンまたは電力ダウンモードにすることは、様々な理由で実行されうる。
例えば、ＳｏＣ８００がバッテリ式のデバイスで利用される場合、電力マネージャ８０８は、限られたバッテリ電力を節約するために、ＩＰエージェントを電力ダウンモードにしてよい。あるいは、非バッテリ式のデバイスでも、電力マネージャ８０８は、オーバーヒートを防ぐために、重要でないＩＰエージェント１４を低電力モードにしてよい。これらは、電力管理を実施するための可能性のある理由のいくつかに過ぎない。その他の理由としては、１以上のＩＰエージェント１４が利用されていない場合に、それらを電力ダウンモードにすることが含まれうる。様々な代替実施形態において、電力ダウンモードは、以下を含む。
１．低電力モード、動作可能：一代替例において、ＩＰエージェント１４のクロック周波数が、該当する場合に低速化される。あるいは、供給電圧が、該当する場合に低減されてもよい。さらに別の実施形態において、クロック周波数および供給電圧の両方が、該当する場合に低減されて、さらに電力消費を削減してもよい。クロック周波数および／または供給電圧の低減は、該当する場合にのみなされるが、これは、すべてのＩＰエージェント１４が、低減されたクロック周波数、低減された供給電圧、または、それらの両方、のいずれかで動作することができるわけではないことを意味することを理解されたい。さらに別の実施形態において、クロックおよび／または供給電圧を低減するためのコマンドは、該当する場合、ＩＰエージェント１４が低電力動作モードを有することを条件に、システムコントローラ８０４またはＩＰエージェント１４自体から得られうる。
ＩＰエージェントが機能したままなので、相互接続８０２は、このモードでは重要な役割を果たさなくてよく、これは、ＩＰエージェント１４が自身で応答を生成できるので、相互接続８０２が、ＩＰエージェント１４の代理として機能して受信トランザクションのための応答を生成しなくてもよいことを意味する。ただし、ＩＰエージェント１４の実行能力が低クロック周波数での動作時には低下しうるので、システムコントローラ８０４および／または相互接続８０２は、ＩＰエージェント１４のためのリンク８０３の設定を再構成してもよい。おそらく変更されうる設定は、ＩＰエージェント１４のためのアービトレーション設定、または、許可された未処理のトランザクションのカウントの可能な削減を含む。ＩＰエージェントがこの低電力モードを出ると、電圧が（下げられていた場合）最初に上げられ、その後、（下げられていた場合）クロック周波数が増大され、（再構成されていた場合）リンク８０３の設定への任意の変更が通常動作モードに戻される。
２．低電力、動作不能モード、状態情報維持：このモードでは、クロックが停止され、電力供給が低減されるが、完全にはオフにされなくてよい。結果として、ＩＰエージェント１４のメモリ内に維持された状態情報が保持される。このモードに入る前に、相互接続８０２は、新しいトランザクションが開始されるのを防ぐと共に未処理のトランザクションの完了を待つことによって、ＩＰエージェントがすでに発行したトランザクションを「枯渇させる」。すべてのトランザクションが枯渇されると、相互接続８０２は、代理として機能して、動作不良のＩＰエージェント１４の再設定に関して上述したのと同様の処理（１）、（２）、および、（３）を実行してよい。ＩＰエージェントが通常に戻され、このモードを出ると、電圧が最初に上げられ、その後、クロック周波数が増大される。
３．低電力、動作不能モード－状態情報の保持なし：このモードは、ＩＰエージェント内に維持された状態情報が失われる程度まで電圧が下げられることを除けば、すぐ上で説明したモード２と同様である。相互接続８０２は、このモードでは上述したように代理として動作する。電力が戻されると、ＩＰエージェントは、図９に関して上述したのと同様のリセットネゴシエーション処理を受ける必要がある。
４．電力オフモード：このモードでは、クロックがオフにされ、電力は完全に除去される。相互接続８０２は、上述のように代理として動作する。電力アップ時に、供給電圧が最初に上昇され、その後、図９に関して上述したように、リセットネゴシエーション処理が実行される。
For example, if the
1. Low power mode, operational : In one alternative, the clock frequency of
The
2. Low Power, Disabled Mode, Maintain State Information : In this mode, the clock is stopped and the power supply is reduced, but may not be completely turned off. As a result, state information maintained within the memory of
3. Low Power, Inoperable Mode - No State Information Retained : This mode is similar to
4. Power Off Mode : In this mode, the clock is turned off and power is completely removed. Interconnect 802 acts as a proxy as described above. Upon power up, the supply voltage is initially increased and then a reset negotiation process is performed as described above with respect to FIG.
図１１は、ＩＰエージェント１４を「低電力、動作可能モード」に出入りさせるためのシーケンスを示すフローチャート１１００である。
FIG. 11 is a
最初の工程１１０２において、ＳｏＣ８００上のＩＰエージェント１４は、通常モードで動作するが、これは、標準クロック周波数および電圧が利用されることを意味する。
In a
決定工程１１０４において、ＳｏＣ８００内の条件が、システムコントローラ８０４によって監視される。動作条件が比較的正常であるか、または、ＩＰエージェント１４の電力ダウンをトリガするイベントが発生しない場合、ＳｏＣおよびＩＰエージェント１４は、工程１１０２において通常モードで動作し続ける。しかしながら、トリガ条件が満たされた（例えば、バッテリ供給の低減、オーバーヒートなど）場合、電力マネージャ８０８は、ＩＰエージェント１４を低電力、動作可能モードにすることを選択してよい。
At
任意選択的な工程１１０６において、相互接続８０２は、リンク８０３を再構成することを選択してよい。再構成は、ＩＰエージェント１４のためのアービトレーション設定を変更すること、または、低電力モードでの動作時にＩＰエージェントの低い処理能力を考慮するために、可能性のある未処理のトランザクションのカウントを削減することを含んでよい。
At
工程１１０８において、ＩＰエージェント１４の動作クロック周波数が、該当する場合に下げられる。クロック周波数を下げれば、ＩＰエージェントの消費電力は低くなる。
At
工程１１１０において、ＩＰエージェントに供給される電圧が、該当する場合に下げられる。電圧を下げることにより、さらなる電力節約が実現されうる。
At
クロック周波数および／または電圧が下げられた状態で、ＩＰエージェント１４は、動作可能のままである。結果として、トラザクションを処理できるが、その標準クロック周波数および／または供給電圧で動作している時にはおそらく低速である。任意選択的な実施形態において、相互接続８０２は、上述したように代理として機能しうるか、もしくは、低電力モードでのＩＰエージェント１４の低い動作速度を考慮してサポートするように調整または再構成されうる。これらの代替例は任意選択的であるため、必ずしも実施する必要はない。
決定工程１１１２において、ＩＰエージェント１４は、通常動作を再開することが決定されるまでは低電力モードで動作する。その場合、ＩＰエージェント１４は、通常動作を再開するためのシーケンスを受ける。
At
任意選択的な工程１１１４において、電圧は、該当する場合に（すなわち、電圧が以前に下げられた場合に）、標準動作電圧に上げられる。
In
工程１１１６において、クロック周波数は、該当する場合に（すなわち、クロックが以前に下げられた場合に）、上げられる。工程１１１７において、ＩＰエージェントは、通常動作に戻る。
At
最後に、任意選択的な工程１１１８において、相互接続は、任意の再構成されている相互接続設定を通常に戻す。この時点で、ＩＰエージェントは、工程１１０２で提供したように、通常動作を再開する準備が整う。
Finally, in
図１２を参照すると、「低電圧、動作不能、状態情報維持モード」でＩＰエージェント１４の電力をダウン／アップさせるためのシーケンスを示すフローチャート１２００が示されている。
Referring to FIG. 12, a
工程１２０２において、ＩＰエージェント１４は、その通常モードで動作する。
At
工程１２０４において、低電力、動作不能、状態情報維持モードでＩＰエージェント１４を動作させる決定がなされる。
At
工程１２０６において、リンク８０３は、休止状態にされ、相互接続８０２は、ＩＰエージェント１４の代理として動作するよう構成される。これは、典型的には、（１）任意の新しいトランザクションがＩＰエージェント１４によって生成されることを許可せず、（２）任意の未処理のトランザクションが完了するのを待ち、その後、（３）ＩＰエージェント１４を目標とした任意のトランザクションに応答することによって代理として機能することを含む。例えば、相互接続８０２は、非処理のトランザクションの送信元に除外メッセージを送信してよく、おそらく、トランザクションの送信側がＩＰエージェント１４から応答を受信することがないことから起きるハングアップ状況を防ぐ。
At
工程１２０８において、ＩＰエージェント１４のクロック周波数が、該当する場合に下げられる。
At
工程１２１０において、ＩＰエージェント１４の動作電圧が、該当する場合に下げられる。しかしながら、電圧は、ＩＰエージェント１４のメモリまたはストレージ要素がそれらの状態情報を維持するように適切なままである。
At
決定１２１２において、ＩＰエージェント１４は、通常動作を再開すると決定されるまでは低電力状態のままである。システムコントローラ８０４、ＳｏＣの外部のイベント（例えば、センサから受信した信号、外部ソースから受信した信号など）、タイマー、ＩＰエージェント自体、または、別のＩＰエージェントはすべて、ウェイクアップをトリガしうる。この決定がなされると、ＩＰエージェントは、通常動作を再開するためのシーケンスを受ける。
At
工程１２１４および１２１６において、ＩＰエージェント１４に提供される電圧およびクロック周波数の各々が、該当する場合に上げられる。状態情報が保持されているので、ＩＰエージェント１４は、工程１２１７で通常動作を再開する。
At
工程１２１８において、リンク８０３は、休止モードにあり、ＩＰエージェントは、トランザクション準備完了状態になり、相互接続８０２は、長く代理として機能する必要があることを通知される。
At
図１３を参照すると「低電圧、動作不能モード」のためのシーケンスを示すフローチャート１３００が示されている。このシーケンスでは、工程１２０２、１２０６、および、１２１２は、図１２に関して上述した工程と同じである。したがって、これらの工程について、ここでは繰り返し論じない。
Referring to FIG. 13, a
工程１３０２において、ＩＰエージェント１４を電力ダウンする決定がなされる。その後、相互接続が代理として構成され（工程１２０６）、工程１３０４において、ＩＰエージェント１４のためのクロックが（該当する場合）完全にオフにされる、および／または、電圧が（該当する場合）状態情報の失われる程度まで大幅に下げられる。状態情報がなければ、工程１２１２において通常動作を再開する決定がなされた場合に、工程１３０６で、電圧は（該当する場合）上昇され、クロックが（該当する場合）オンにされる。その後、ＩＰエージェント１４は、図９に関して上述したように、リセット動作を受ける。リセットが完了すると、ＩＰエージェント１４は、トランザクション準備完了状態になる。次いで、システムは、リンクが工程１３１０で休止モードを出るのを待つ。モードを出ると、ＩＰエージェントは、相互接続８０２上で可視になる。その後、工程１３１２で、相互接続８０２は、もはやＩＰエージェント１４のための代理として機能しない。
At
最後に、電力オフモードについて、シーケンスは、単に下げられるのと対照的に、電力が完全にオフにされることを除けば、図１３と同じである。それ以外の点では、電力オフモードのシーケンスは同じである。このモードにおいて、ＩＰエージェント１４は、実質的に電力を消費せず、動作不能であり、相互接続８０２は、ＩＰエージェントのために代理として機能してよい。
Finally, for the power off mode, the sequence is the same as in Figure 13, except that the power is completely turned off as opposed to just being lowered. Otherwise, the power off mode sequence is the same. In this mode,
図１４を参照すると、リンク８０３を休止状態にするための工程を示すフローチャート１４００が示されている。
Referring to FIG. 14, a
最初の工程１４０２において、システムコントローラ８０４は、ＩＰエージェント１４がリセットされるべきであるかまたは動作不能な節電モードの１つにされるべきである旨の決定を行う。
In a
工程１４０４において、ＩＰエージェント１４は、トランザクションの生成を停止するよう命令される。
At
判定１４０６において、システムは、すべての未処理のトランザクションが完了したか否かを判定する。すべての未処理のＮｏｎ－ｐｏｓｔｅｄトランザクションについては、Ｃｏｍｐｌｅｔｉｏｎトランザクションが受信されなければならない（すなわち、読み出しトランザクションでは、アクセスされたデータが返されなければならず、Ｎｏｎ－ｐｏｓｔｅｄ書き込みトランザクションでは、確認応答が受信されなければならない）。Ｐｏｓｔｅｄトランザクションでは、応答トランザクションは求められない。したがって、Ｐｏｓｔｅｄトランザクションは、ＩＰエージェントによって送信されると、「完了」と見なされる。
At
工程１４０８において、リンク８０３は、すべての未処理のトランザクションが完了した時に、休止状態にされる。その後、相互接続８０２は、ＩＰエージェント１４の代理として構成される。
At
工程１４１０において、ＩＰエージェントは、リセットまたは所望の動作不能低電力モードのいずれかにされる準備ができる。
At
図１５Ａ～図１５Ｄは、ＩＰエージェント「ウェイクアップ」シーケンスのための様々なフローチャートを示す。 15A-15D show various flowcharts for the IP agent "wake-up" sequence.
図１５Ａを参照すると、エージェントが開始する「ウェイクアップ」シーケンスを示すフローチャート１５００が示されている。この実施形態において、ウェイクアップシーケンスは、ＩＰエージェントによって開始されるが、システムコントローラ８０４によって実施される。
Referring to FIG. 15A, a
工程１５０２において、動作不能状態のＩＰエージェント１４が、ウェイクアップトリガイベントを検出する。ＩＰエージェントは、電力ダウンまたは「オフ」にされうるが、ウェイクアップトリガが発生した時に検出する能力を維持する意味では、少なくとも部分的には機能したままであってよい。ウェイクアップトリガは、多くの異なるタイプのイベントを含みうる。例えば、ＩＰエージェント１４を所定の期間の後にウェイクアップさせる内部タイマーであってもよいし、ＩＰエージェント１４と通信したい別のデバイスなど、ＳｏＣ８００の外部のイベントであってもよい。工程１５０４において、ＩＰエージェントは、そのリンク８０３を介して相互接続８０２に「ウェイクアップ」通信を送信する。再び、リンクは、それに対応するＩＰエージェント１４が動作不能状態にある時には休止状態であるが、ウェイクアップ信号を相互接続８０２へ送信することができる。
At
工程１５０６において、相互接続８０２は、動作不能なＩＰエージェントからのウェイクアップ信号を「リッスンする」よう構成される。信号が検出された場合、相互接続８０２は、システムコントローラ８０４へ通知する。
At
工程１５０８において、システムコントローラ８０４は、ＩＰエージェント１４がそのウェイクアップシーケンスを開始するためのコマンドを相互接続８０２を介して送信してよい。
At
工程１５１０において、ＩＰエージェントは、コマンドに応答して、ウェイクアップシーケンスを開始する。
At
上述の実施形態では、ＩＰエージェント１４は、ウェイクアップシーケンスを開始するようシステムコントローラに求める。システムコントローラからのウェイクアップコマンドに応答して、ＩＰエージェントは、自身のウェイクアップシーケンスを開始する。したがって、システムコントローラは、ＩＰエージェントが、動作不能状態を脱して、相互接続８０２上で可視になると、ＩＰエージェントの状態を知る。
In the embodiment described above,
図１５Ｂは、システムコントローラ８０４がＩＰエージェント１４のウェイクアップを開始する場合のシーケンスを示す。このシーケンスでは、システムコントローラ８０４が、工程１５０８でＩＰエージェントにウェイクアップコマンドを送信し、それに応答して、ＩＰエージェントは、工程１５１０で自身のウェイクアップシーケンスを開始する。この実施形態の変形例（図示せず）において、ウェイクアップは、システムコントローラ８０４を介してＳｏＣ８００の外から開始されてもよい。システムコントローラ８０４がコマンドを受信すると、上述の処理が開始される。
FIG. 15B shows a sequence when the
図１５Ｃは、ＩＰエージェント１４のためのウェイクアップコマンドが、ＳｏＣ８００の外に由来し、システムコントローラ８０４を通して実施される場合のシーケンスを示す。このシーケンスでは、システムコントローラ８０４は、工程１５１２でコマンドを受信する。それに応答して、システムコントローラは、工程１５０８でＩＰエージェントにウェイクアップコマンドを送信し、それに応答して、ＩＰエージェントは、工程１５１０で自身のウェイクアップシーケンスを開始する。ＳｏＣ８００の外からの直接ウェイクアップでは、コマンドは、ハードワイヤ入力を介してＩＰエージェント１４に直接提供される。それに応答して、ＩＰエージェントは、自身のウェイクアップシーケンスを開始する。
FIG. 15C shows the sequence where the wake-up command for
図１５Ｄを参照すると、ＩＰエージェントが開始して実施するウェイクアップシーケンスを示すフローチャート１５２０が示されている。この実施形態では、ウェイクアップ条件（上述した条件のいずれか、など）が、工程１５２２で発生する。それに応答して、ＩＰエージェントは、工程１５２４で自身のウェイクアップシーケンスを開始する。工程１５２６において、ウェイクアップシーケンスは完了する。その後、工程１５２８において、ＩＰエージェントは、そのアウェイク状態を、相互接続８０２およびシステムコントローラ８０４に、直接的にまたは相互接続８０２を介して通知する。
Referring to FIG. 15D, a
上記の例においては、簡単のために、単一のＩＰエージェントを上述の低電力モードの１つに移行させるシーケンスについて説明した。実際の実施形態においては、ＳｏＣ上の複数のＩＰエージェント１４が同時に電力ダウンされうる。２以上が同時にまたはほぼ同時に電力ダウンされる場合、各々が独立して、モードに応じて上述のシーケンスの１つを受ける。
In the above example, for simplicity, the sequence of transitioning a single IP agent to one of the low power modes described above was described. In an actual embodiment,
いくつかの実施形態についてのみ詳細に説明したが、ここに提供した本開示の精神や範囲を逸脱することなしに多くの他の形態で本願を実施できることを理解されたい。したがって、これらの実施形態は、例示的なものであって、限定的なものではないとみなされ、本明細書に示した詳細に限定されず、添付の特許請求の範囲および等価物の範囲内で変形されてもよい。 Although only certain embodiments have been described in detail, it will be appreciated that the present application may be practiced in many other forms without departing from the spirit or scope of the disclosure provided herein. Accordingly, these embodiments are to be considered illustrative and not restrictive, and are not limited to the details set forth herein, but within the scope of the appended claims and equivalents. It may be transformed by
Claims (26)
相互接続と、
前記ＳｏＣ上に備えられ、前記相互接続と通信するよう構成されている知的財産（ＩＰ）エージェントと、
前記ＩＰエージェントのリセットを開始するように構成されているリセットマネージャと、を備え、前記リセットは、前記ＩＰエージェントがトランザクション準備完了状態になるようにする前記相互接続と前記ＩＰエージェントとの間のネゴシエーションを含み、
前記ネゴシエーションにおいて前記相互接続および前記ＩＰエージェントは、前記相互接続と前記ＩＰエージェントとを接続するリンクでクロックサイクルあたりに伝送できるデータの量に関する情報を交換する、ＳｏＣ。 A system-on-chip (SoC),
interconnection and
an intellectual property ( IP) agent disposed on the SoC and configured to communicate with the interconnect;
a reset manager configured to initiate a reset of the IP agent, the reset comprising: a negotiation between the interconnect and the IP agent that causes the IP agent to be in a transaction-ready state; including;
In the negotiation, the interconnect and the IP agent exchange information regarding the amount of data that can be transmitted per clock cycle on a link connecting the interconnect and the IP agent.
前記ＳｏＣの電力アップ、
前記ＩＰエージェントが動作不良を起こしたこと、または、
前記ＩＰエージェントが低電力モードから出つつあること、
の内の１つを含む、ＳｏＣ。 15. The SoC of claim 14, wherein the reset trigger event is:
powering up the SoC;
the IP agent has malfunctioned, or
the IP agent is coming out of low power mode;
An SoC including one of:
相互接続と、
複数の知的財産（ＩＰ）エージェントと、
前記複数のＩＰエージェントのリセットを実施するよう構成されているリセットマネージャと、
を備え、前記複数のＩＰエージェントの各々の前記リセットは、前記相互接続と前記複数のＩＰエージェントの各々との間の個々のネゴシエーションをそれぞれ含み、前記個々のネゴシエーションの結果、それぞれ、前記ＩＰエージェントの各々がトランザクション準備完了状態になり、
前記個々のネゴシエーションの各々において前記相互接続および前記複数のＩＰエージェントの各々は、前記相互接続と当該ＩＰエージェントとを接続するリンクでクロックサイクルあたりに伝送できるデータの量に関する情報を交換する、ＳｏＣ。 A system-on-chip (SoC),
interconnection and
multiple intellectual property ( IP ) agents;
a reset manager configured to perform a reset of the plurality of IP agents;
wherein the resetting of each of the plurality of IP agents includes respective negotiations between the interconnect and each of the plurality of IP agents, and each of the respective negotiations results in a respective one of the plurality of IP agents. each becomes transaction-ready,
In each of the individual negotiations, the interconnect and each of the plurality of IP agents exchange information regarding the amount of data that can be transmitted per clock cycle on a link connecting the interconnect and the IP agent. .
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
JP2023190712A JP2024020317A (en) | 2018-03-30 | 2023-11-08 | Protocol-level control for system-on-chip (SoC) agent reset and power management |
Applications Claiming Priority (5)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201862650589P | 2018-03-30 | 2018-03-30 | |
US62/650,589 | 2018-03-30 | ||
US201862691117P | 2018-06-28 | 2018-06-28 | |
US62/691,117 | 2018-06-28 | ||
PCT/US2019/024586 WO2019191431A1 (en) | 2018-03-30 | 2019-03-28 | PROTOCOL LEVEL CONTROL FOR SYSTEM ON A CHIP (SoC) AGENT RESET AND POWER MANAGEMENT |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
JP2023190712A Division JP2024020317A (en) | 2018-03-30 | 2023-11-08 | Protocol-level control for system-on-chip (SoC) agent reset and power management |
Publications (3)
Publication Number | Publication Date |
---|---|
JP2021519463A JP2021519463A (en) | 2021-08-10 |
JPWO2019191431A5 JPWO2019191431A5 (en) | 2022-02-15 |
JP7383631B2 true JP7383631B2 (en) | 2023-11-20 |
Family
ID=68054464
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
JP2020552287A Active JP7383631B2 (en) | 2018-03-30 | 2019-03-28 | Protocol-level control for system-on-chip (SoC) agent reset and power management |
JP2023190712A Pending JP2024020317A (en) | 2018-03-30 | 2023-11-08 | Protocol-level control for system-on-chip (SoC) agent reset and power management |
Family Applications After (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
JP2023190712A Pending JP2024020317A (en) | 2018-03-30 | 2023-11-08 | Protocol-level control for system-on-chip (SoC) agent reset and power management |
Country Status (6)
Country | Link |
---|---|
US (5) | US20190303777A1 (en) |
EP (1) | EP3776225A4 (en) |
JP (2) | JP7383631B2 (en) |
KR (1) | KR20200139673A (en) |
IL (1) | IL277567A (en) |
WO (1) | WO2019191431A1 (en) |
Families Citing this family (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20190303777A1 (en) | 2018-03-30 | 2019-10-03 | Provino Technologies, Inc. | Protocol level control for system on a chip (soc) agent reset and power management |
KR20200135780A (en) | 2018-03-30 | 2020-12-03 | 프로비노 테크놀로지스, 아이엔씨. | Mediating parts of a transaction through a virtual channel associated with the interconnect |
KR102589373B1 (en) * | 2018-05-15 | 2023-10-19 | 현대자동차주식회사 | Method and apparatus for wakeup of communication node in automotive network |
US10863432B2 (en) * | 2018-10-16 | 2020-12-08 | Hewlett Packard Enterprise Development Lp | Access point wake up |
US11871308B2 (en) * | 2019-07-29 | 2024-01-09 | TapText llc | System and method for link-initiated dynamic-mode communications |
KR20210096857A (en) | 2020-01-29 | 2021-08-06 | 삼성전자주식회사 | system on chips and methods of controlling resett of system on chips |
FR3117225A1 (en) * | 2020-12-04 | 2022-06-10 | STMicroelectronics (Grand Ouest) SAS | Method for resetting a system-on-chip master device and corresponding system-on-chip |
US20230305859A1 (en) * | 2022-03-24 | 2023-09-28 | Lenovo Global Technology (United States) Inc. | Automatic systems devices rediscovery |
Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20130073878A1 (en) | 2011-09-19 | 2013-03-21 | Sonics, Inc. | Apparatus and methods for an interconnect power manager |
US20140082237A1 (en) | 2012-09-20 | 2014-03-20 | Aviad Wertheimer | Run-time fabric reconfiguration |
US20140095911A1 (en) | 2012-09-29 | 2014-04-03 | Nir Rosenzweig | Controlling Power Consumption By Power Management Link |
US20140115207A1 (en) | 2012-10-22 | 2014-04-24 | Venkatraman Iyer | High performance interconnect physical layer |
Family Cites Families (71)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6850521B1 (en) | 1999-03-17 | 2005-02-01 | Broadcom Corporation | Network switch |
US6604159B1 (en) | 1999-08-12 | 2003-08-05 | Mips Technologies, Inc. | Data release to reduce latency in on-chip system bus |
US6829666B1 (en) | 1999-09-29 | 2004-12-07 | Silicon Graphics, Incorporated | Modular computing architecture having common communication interface |
US6654896B1 (en) * | 2000-05-16 | 2003-11-25 | Hewlett-Packard Development Company, L.P. | Handling of multiple compliant and non-compliant wake-up sources in a computer system |
US6678767B1 (en) | 2000-10-06 | 2004-01-13 | Broadcom Corp | Bus sampling on one edge of a clock signal and driving on another edge |
TW513635B (en) | 2000-11-24 | 2002-12-11 | Ibm | Method and structure for variable-length frame support in a shared memory switch |
US20020161978A1 (en) | 2001-02-28 | 2002-10-31 | George Apostol | Multi-service system-on-chip including on-chip memory with multiple access path |
US7174467B1 (en) | 2001-07-18 | 2007-02-06 | Advanced Micro Devices, Inc. | Message based power management in a multi-processor system |
US7577857B1 (en) * | 2001-08-29 | 2009-08-18 | 3Com Corporation | High speed network interface with automatic power management with auto-negotiation |
US6976134B1 (en) | 2001-09-28 | 2005-12-13 | Emc Corporation | Pooling and provisioning storage resources in a storage network |
US7664018B2 (en) | 2002-07-02 | 2010-02-16 | Emulex Design & Manufacturing Corporation | Methods and apparatus for switching fibre channel arbitrated loop devices |
US7283944B2 (en) | 2003-12-15 | 2007-10-16 | Springsoft, Inc. | Circuit simulation bus transaction analysis |
US7260688B1 (en) | 2004-04-15 | 2007-08-21 | Xilinx, Inc. | Method and apparatus for controlling access to memory circuitry |
US7500066B2 (en) | 2005-04-30 | 2009-03-03 | Tellabs Operations, Inc. | Method and apparatus for sharing instruction memory among a plurality of processors |
KR100653087B1 (en) | 2005-10-17 | 2006-12-01 | 삼성전자주식회사 | System for axi compatible network on chip and interleaving method thereof |
US20070130344A1 (en) | 2005-11-14 | 2007-06-07 | Pepper Timothy C | Using load balancing to assign paths to hosts in a network |
EP1785811B1 (en) * | 2005-11-14 | 2018-12-05 | Texas Instruments Incorporated | Memory information transfer power management |
US7912075B1 (en) | 2006-05-26 | 2011-03-22 | Avaya Inc. | Mechanisms and algorithms for arbitrating between and synchronizing state of duplicated media processing components |
US20110022754A1 (en) | 2007-12-06 | 2011-01-27 | Technion Research & Development Foundation Ltd | Bus enhanced network on chip |
US20090245257A1 (en) | 2008-04-01 | 2009-10-01 | International Business Machines Corporation | Network On Chip |
WO2010022767A1 (en) | 2008-08-26 | 2010-03-04 | Telefonaktiebolaget Lm Ericsson (Publ) | Packet forwarding in a network |
WO2010069398A1 (en) | 2008-12-19 | 2010-06-24 | Telefonaktiebolaget L M Ericsson (Publ) | Resolving contention between data bursts |
US20100158005A1 (en) | 2008-12-23 | 2010-06-24 | Suvhasis Mukhopadhyay | System-On-a-Chip and Multi-Chip Systems Supporting Advanced Telecommunication Functions |
US8775544B2 (en) | 2009-02-04 | 2014-07-08 | Citrix Systems, Inc. | Methods and systems for dynamically switching between communications protocols |
US9514074B2 (en) | 2009-02-13 | 2016-12-06 | The Regents Of The University Of Michigan | Single cycle arbitration within an interconnect |
US8448001B1 (en) * | 2009-03-02 | 2013-05-21 | Marvell International Ltd. | System having a first device and second device in which the main power management module is configured to selectively supply a power and clock signal to change the power state of each device independently of the other device |
US20110320706A1 (en) | 2009-03-12 | 2011-12-29 | Hitachi, Ltd. | Storage apparatus and method for controlling the same |
WO2010137572A1 (en) | 2009-05-25 | 2010-12-02 | 日本電気株式会社 | Network-on-chip, network routing method, and system |
US8831666B2 (en) | 2009-06-30 | 2014-09-09 | Intel Corporation | Link power savings with state retention |
CN101651625B (en) | 2009-09-03 | 2011-09-21 | 中兴通讯股份有限公司 | Route selecting device and route selecting method of multi-service restoration |
US8782456B2 (en) | 2010-06-01 | 2014-07-15 | Intel Corporation | Dynamic and idle power reduction sequence using recombinant clock and power gating |
US8850250B2 (en) | 2010-06-01 | 2014-09-30 | Intel Corporation | Integration of processor and input/output hub |
US8904115B2 (en) | 2010-09-28 | 2014-12-02 | Texas Instruments Incorporated | Cache with multiple access pipelines |
KR101762779B1 (en) | 2011-08-22 | 2017-07-28 | 인텔 코포레이션 | Method for data throughput improvement in open core protocol based interconnection networks using dynamically selectable redundant shared link physical paths |
US8711867B2 (en) | 2011-08-26 | 2014-04-29 | Sonics, Inc. | Credit flow control scheme in a router with flexible link widths utilizing minimal storage |
US8711875B2 (en) | 2011-09-29 | 2014-04-29 | Intel Corporation | Aggregating completion messages in a sideband interface |
US8713234B2 (en) | 2011-09-29 | 2014-04-29 | Intel Corporation | Supporting multiple channels of a single interface |
EP2761386B1 (en) * | 2011-09-30 | 2017-09-06 | Intel Corporation | Managing sideband segments in on-die system fabric |
US20130117511A1 (en) * | 2011-11-08 | 2013-05-09 | Arm Limited | Data processing apparatus and method |
US9053251B2 (en) | 2011-11-29 | 2015-06-09 | Intel Corporation | Providing a sideband message interface for system on a chip (SoC) |
WO2013105967A1 (en) | 2012-01-13 | 2013-07-18 | Intel Corporation | Efficient peer-to-peer communication support in soc fabrics |
US8924779B2 (en) * | 2012-03-30 | 2014-12-30 | Lsi Corporation | Proxy responder for handling anomalies in a hardware system |
US9258234B1 (en) * | 2012-12-28 | 2016-02-09 | Juniper Networks, Inc. | Dynamically adjusting liveliness detection intervals for periodic network communications |
US9223668B2 (en) | 2013-03-13 | 2015-12-29 | Intel Corporation | Method and apparatus to trigger and trace on-chip system fabric transactions within the primary scalable fabric |
US9471521B2 (en) | 2013-05-15 | 2016-10-18 | Stmicroelectronics S.R.L. | Communication system for interfacing a plurality of transmission circuits with an interconnection network, and corresponding integrated circuit |
US20150026494A1 (en) | 2013-07-19 | 2015-01-22 | Sonics, Inc. | Intelligent mesochronous synchronizer |
US9473388B2 (en) | 2013-08-07 | 2016-10-18 | Netspeed Systems | Supporting multicast in NOC interconnect |
US20150199134A1 (en) | 2014-01-10 | 2015-07-16 | Qualcomm Incorporated | System and method for resolving dram page conflicts based on memory access patterns |
JP5847887B2 (en) | 2014-06-17 | 2016-01-27 | 株式会社東芝 | On-chip router and multi-core system using the same |
US9742630B2 (en) | 2014-09-22 | 2017-08-22 | Netspeed Systems | Configurable router for a network on chip (NoC) |
US9727114B2 (en) * | 2014-09-25 | 2017-08-08 | Telefonaktiebolaget L M Ericsson (Publ) | HW-controlled power domains with automatic power-on request |
US9971397B2 (en) * | 2014-10-08 | 2018-05-15 | Apple Inc. | Methods and apparatus for managing power with an inter-processor communication link between independently operable processors |
TWI536267B (en) * | 2014-11-07 | 2016-06-01 | 瑞昱半導體股份有限公司 | Control method applied to operating-mode finite-state-machine and computer readable media |
KR102347657B1 (en) | 2014-12-02 | 2022-01-06 | 삼성전자 주식회사 | Electronic device and method for controlling shareable cache memory thereof |
US10210120B2 (en) | 2015-03-26 | 2019-02-19 | Intel Corporation | Method, apparatus and system to implement secondary bus functionality via a reconfigurable virtual switch |
GB2537855B (en) * | 2015-04-28 | 2018-10-24 | Advanced Risc Mach Ltd | Controlling transitions of devices between normal state and quiescent state |
US10157160B2 (en) * | 2015-06-04 | 2018-12-18 | Intel Corporation | Handling a partition reset in a multi-root system |
US9733689B2 (en) * | 2015-06-27 | 2017-08-15 | Intel Corporation | Hardware apparatuses and methods to perform transactional power management |
US10353747B2 (en) | 2015-07-13 | 2019-07-16 | Futurewei Technologies, Inc. | Shared memory controller and method of using same |
US10209734B2 (en) * | 2016-01-25 | 2019-02-19 | Samsung Electronics Co., Ltd. | Semiconductor device, semiconductor system, and method of operating the semiconductor device |
KR102497804B1 (en) | 2016-04-01 | 2023-02-10 | 한국전자통신연구원 | On-chip network device capable of networking in dual swithching network modes and operation method thereof |
US10133341B2 (en) * | 2016-06-06 | 2018-11-20 | Arm Limited | Delegating component power control |
US10452124B2 (en) * | 2016-09-12 | 2019-10-22 | Netspeed Systems, Inc. | Systems and methods for facilitating low power on a network-on-chip |
US10223128B2 (en) * | 2016-09-23 | 2019-03-05 | Apple Inc. | Booting and power management |
US10775871B2 (en) * | 2016-11-10 | 2020-09-15 | Apple Inc. | Methods and apparatus for providing individualized power control for peripheral sub-systems |
US10725955B2 (en) * | 2017-12-08 | 2020-07-28 | Arm Limited | Power control of inter-domain transaction bridge |
US10642341B2 (en) * | 2018-03-23 | 2020-05-05 | Juniper Networks, Inc. | Selective modification of power states based on conditions |
US10739836B2 (en) * | 2018-03-27 | 2020-08-11 | Intel Corporation | System, apparatus and method for handshaking protocol for low power state transitions |
KR20200135780A (en) | 2018-03-30 | 2020-12-03 | 프로비노 테크놀로지스, 아이엔씨. | Mediating parts of a transaction through a virtual channel associated with the interconnect |
US20190303777A1 (en) | 2018-03-30 | 2019-10-03 | Provino Technologies, Inc. | Protocol level control for system on a chip (soc) agent reset and power management |
US11294850B2 (en) | 2019-03-29 | 2022-04-05 | Intel Corporation | System, apparatus and method for increasing bandwidth of edge-located agents of an integrated circuit |
-
2019
- 2019-03-28 US US16/368,392 patent/US20190303777A1/en not_active Abandoned
- 2019-03-28 KR KR1020207026420A patent/KR20200139673A/en active IP Right Grant
- 2019-03-28 WO PCT/US2019/024586 patent/WO2019191431A1/en active Application Filing
- 2019-03-28 US US16/368,443 patent/US11340671B2/en active Active
- 2019-03-28 EP EP19775100.1A patent/EP3776225A4/en active Pending
- 2019-03-28 JP JP2020552287A patent/JP7383631B2/en active Active
- 2019-03-28 US US16/368,418 patent/US20190302861A1/en not_active Abandoned
-
2020
- 2020-09-23 IL IL277567A patent/IL277567A/en unknown
-
2022
- 2022-03-24 US US17/656,378 patent/US11914440B2/en active Active
- 2022-05-27 US US17/804,367 patent/US20220291730A1/en not_active Abandoned
-
2023
- 2023-11-08 JP JP2023190712A patent/JP2024020317A/en active Pending
Patent Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20130073878A1 (en) | 2011-09-19 | 2013-03-21 | Sonics, Inc. | Apparatus and methods for an interconnect power manager |
US20140082237A1 (en) | 2012-09-20 | 2014-03-20 | Aviad Wertheimer | Run-time fabric reconfiguration |
US20140095911A1 (en) | 2012-09-29 | 2014-04-03 | Nir Rosenzweig | Controlling Power Consumption By Power Management Link |
US20140115207A1 (en) | 2012-10-22 | 2014-04-24 | Venkatraman Iyer | High performance interconnect physical layer |
Also Published As
Publication number | Publication date |
---|---|
EP3776225A1 (en) | 2021-02-17 |
WO2019191431A1 (en) | 2019-10-03 |
US20220291730A1 (en) | 2022-09-15 |
IL277567A (en) | 2020-11-30 |
US20190303777A1 (en) | 2019-10-03 |
JP2021519463A (en) | 2021-08-10 |
US11340671B2 (en) | 2022-05-24 |
US20190302861A1 (en) | 2019-10-03 |
JP2024020317A (en) | 2024-02-14 |
US20190303778A1 (en) | 2019-10-03 |
KR20200139673A (en) | 2020-12-14 |
US11914440B2 (en) | 2024-02-27 |
EP3776225A4 (en) | 2022-01-05 |
US20220214731A1 (en) | 2022-07-07 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
JP7383631B2 (en) | Protocol-level control for system-on-chip (SoC) agent reset and power management | |
US10205653B2 (en) | Fabric discovery for a cluster of nodes | |
US9829962B2 (en) | Hardware and software enabled implementation of power profile management instructions in system on chip | |
US7643477B2 (en) | Buffering data packets according to multiple flow control schemes | |
US7272741B2 (en) | Hardware coordination of power management activities | |
US10198294B2 (en) | Handling tenant requests in a system that uses hardware acceleration components | |
US20080307422A1 (en) | Shared memory for multi-core processors | |
US20130097351A1 (en) | System and Method for High-Performance, Low-Power Data Center Interconnect Fabric | |
JP2021519464A (en) | Arbitration of the part of the transaction over the virtual channel associated with the interconnect | |
US20210041929A1 (en) | Dynamic network controller power management | |
US20160308649A1 (en) | Providing Services in a System having a Hardware Acceleration Plane and a Software Plane | |
GB2460735A (en) | Bus Fabric for Embedded System Comprising Peer-to-Peer Communication Matrix | |
JP2023543723A (en) | Mechanisms for performing distributed power management for multi-GPU systems | |
US20220263770A1 (en) | Application-to-application resource reservation schemes for precision networking | |
WO2021219985A1 (en) | On chip router | |
KR101061187B1 (en) | Bus system and its control unit |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
A711 | Notification of change in applicant |
Free format text: JAPANESE INTERMEDIATE CODE: A711Effective date: 20211210 |
|
A521 | Request for written amendment filed |
Free format text: JAPANESE INTERMEDIATE CODE: A821Effective date: 20211210 |
|
A521 | Request for written amendment filed |
Free format text: JAPANESE INTERMEDIATE CODE: A523Effective date: 20220204 |
|
A621 | Written request for application examination |
Free format text: JAPANESE INTERMEDIATE CODE: A621Effective date: 20220204 |
|
A131 | Notification of reasons for refusal |
Free format text: JAPANESE INTERMEDIATE CODE: A131Effective date: 20230411 |
|
A521 | Request for written amendment filed |
Free format text: JAPANESE INTERMEDIATE CODE: A523Effective date: 20230707 |
|
TRDD | Decision of grant or rejection written | ||
A01 | Written decision to grant a patent or to grant a registration (utility model) |
Free format text: JAPANESE INTERMEDIATE CODE: A01Effective date: 20231010 |
|
A61 | First payment of annual fees (during grant procedure) |
Free format text: JAPANESE INTERMEDIATE CODE: A61Effective date: 20231108 |
|
R150 | Certificate of patent or registration of utility model |
Ref document number: 7383631Country of ref document: JPFree format text: JAPANESE INTERMEDIATE CODE: R150 |