US6657564B2 - Method and apparatus for compressing data in which dictionary sizes are reduced - Google Patents
Method and apparatus for compressing data in which dictionary sizes are reduced Download PDFInfo
- Publication number
- US6657564B2 US6657564B2 US10/015,238 US1523801A US6657564B2 US 6657564 B2 US6657564 B2 US 6657564B2 US 1523801 A US1523801 A US 1523801A US 6657564 B2 US6657564 B2 US 6657564B2
- Authority
- US
- United States
- Prior art keywords
- data
- data segment
- segment
- pattern
- replacing
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime
Links
Images
Classifications
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M7/00—Conversion of a code where information is represented by a given sequence or number of digits to a code where the same, similar or subset of information is represented by a different sequence or number of digits
- H03M7/30—Compression; Expansion; Suppression of unnecessary data, e.g. redundancy reduction
- H03M7/40—Conversion to or from variable length codes, e.g. Shannon-Fano code, Huffman code, Morse code
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M7/00—Conversion of a code where information is represented by a given sequence or number of digits to a code where the same, similar or subset of information is represented by a different sequence or number of digits
- H03M7/30—Compression; Expansion; Suppression of unnecessary data, e.g. redundancy reduction
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M7/00—Conversion of a code where information is represented by a given sequence or number of digits to a code where the same, similar or subset of information is represented by a different sequence or number of digits
- H03M7/30—Compression; Expansion; Suppression of unnecessary data, e.g. redundancy reduction
- H03M7/3084—Compression; Expansion; Suppression of unnecessary data, e.g. redundancy reduction using adaptive string matching, e.g. the Lempel-Ziv method
Definitions
- the present invention relates generally to an improved data processing system, and in particular, to a method and apparatus for compressing data. Still more particularly, the present invention provides a method and apparatus for reducing dictionary sizes and the compression of data.
- Data compression involves encoding data to take up less storage space.
- Digital data is compressed by finding repeatable patterns of binary zeros and ones. The more patterns can be found, the more the data can be compressed.
- Text can generally be compressed to about 40 percent of its original size, and graphics files from 20 percent to 90 percent. Some files can only be compressed by a small amount. The amount of compression that may occur depends entirely on the type of file and compression algorithm used.
- LZW Lempel-Ziv-Welch
- the present invention provides a method, apparatus, and computer instructions for compressing data.
- a segment of data within the data to be compressed is selected.
- a determination is made as to whether the data segment matches a previous segment within the data based on a transform performed on the data segment.
- the data segment of data is replaced with a code word in response to a determination that a match is present between the data segment and the previous data segment.
- FIG. 1 is a pictorial representation of a data processing system in which the present invention may be implemented in accordance with a preferred embodiment of the present invention
- FIG. 2 is a block diagram of a data processing system in which the present invention may be implemented
- FIG. 3 is a diagram illustrating a compression process in accordance with a preferred embodiment of the present invention.
- FIGS. 4A-4B are diagrams illustrating compressed files in accordance with a preferred embodiment of the present invention.
- FIG. 5 is a diagram illustrating a code word in accordance with a preferred embodiment of the present invention.
- FIG. 6 is a flowchart of a process used for compressing a data file with transforms in accordance with a preferred embodiment of the present invention.
- FIG. 7 is a flowchart of a process used for compressing data using transforms in accordance with a preferred embodiment of the present invention.
- a computer 100 which includes system unit 102 , video display terminal 104 , keyboard 106 , storage devices 108 , which may include floppy drives and other types of permanent and removable storage media, and mouse 110 . Additional input devices may be included with personal computer 100 , such as, for example, a joystick, touchpad, touch screen, trackball, microphone, and the like.
- Computer 100 can be implemented using any suitable computer, such as an IBM RS/6000 computer or IntelliStation computer, which are products of International Business Machines Corporation, located in Armonk, N.Y.
- Computer 100 also preferably includes a graphical user interface (GUI) that may be implemented by means of systems software residing in computer readable media in operation within computer 100 .
- GUI graphical user interface
- Data processing system 200 is an example of a computer, such as computer 100 in FIG. 1, in which code or instructions implementing the processes of the present invention may be located.
- code for reducing dictionary sizes in the compression of data is implemented in data processing system 200 .
- PCI peripheral component interconnect
- AGP Accelerated Graphics Port
- ISA Industry Standard Architecture
- Processor 202 and main memory 204 are connected to PCI local bus 206 through PCI bridge 208 .
- PCI bridge 208 also may include an integrated memory controller and cache memory for processor 202 . Additional connections to PCI local bus 206 may be made through direct component interconnection or through add-in boards.
- local area network (LAN) adapter 210 small computer system interface SCSI host bus adapter 212 , and expansion bus interface 214 are connected to PCI local bus 206 by direct component connection.
- LAN local area network
- SCSI host bus adapter 212 small computer system interface SCSI host bus adapter 212
- expansion bus interface 214 are connected to PCI local bus 206 by direct component connection.
- audio adapter 216 graphics adapter 218 , and audio/video adapter 219 are connected to PCI local bus 206 by add-in boards inserted into expansion slots.
- Expansion bus interface 214 provides a connection for a keyboard and mouse adapter 220 , modem 222 , and additional memory 224 .
- SCSI host bus adapter 212 provides a connection for hard disk drive 226 , tape drive 228 , and CD-ROM drive 230 .
- Typical PCI local bus implementations will support three or four PCI expansion slots or add-in connectors.
- An operating system runs on processor 202 and is used to coordinate and provide control of various components within data processing system 200 in FIG. 2 .
- the operating system may be a commercially available operating system such as Windows 2000, which is available from Microsoft Corporation.
- An object oriented programming system such as Java may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system 200 . “Java” is a trademark of Sun Microsystems, Inc. Instructions for the operating system, the object-oriented programming system, and applications or programs are located on storage devices, such as hard disk drive 226 , and may be loaded into main memory 204 for execution by processor 202 .
- FIG. 2 may vary depending on the implementation.
- Other internal hardware or peripheral devices such as flash ROM (or equivalent nonvolatile memory) or optical disk drives and the like, may be used in addition to or in place of the hardware depicted in FIG. 2 .
- the processes of the present invention may be applied to a multiprocessor data processing system.
- data processing system 200 may not include SCSI host bus adapter 212 , hard disk drive 226 , tape drive 228 , and CD-ROM 230 .
- the computer to be properly called a client computer, includes some type of network communication interface, such as LAN adapter 210 , modem 222 , or the like.
- data processing system 200 may be a stand-alone system configured to be bootable without relying on some type of network communication interface, whether or not data processing system 200 comprises some type of network communication interface.
- data processing system 200 may be a personal digital assistant (PDA), which is configured with ROM and/or flash ROM to provide non-volatile memory for storing operating system files and/or user-generated data.
- PDA personal digital assistant
- data processing system 200 also may be a server computer, notebook computer, or hand held computer in addition to taking the form of a PDA.
- data processing system 200 also may be a kiosk or a Web appliance.
- processor 202 uses computer implemented instructions, which may be located in a memory such as, for example, main memory 204 , memory 224 , or in one or more peripheral devices 226 - 230 .
- compression utility 300 may be implemented in a data processing system, such as data processing system 200 in FIG. 2 .
- the present invention receives data file 302 at compression utility 300 and processes data file 302 to generate compressed file 304 .
- compression utility 300 employs transforms 306 in an attempt to reduce the dictionary size for compressed file 304 .
- Compression utility 300 compresses data file 302 by examining segments within the file. For example, the segments may be 64 bit or 128 bit segments.
- Compression utility 300 searches for patterns in segments that have already been encountered within data file 302 . When a segment contains a pattern that repeats, a code word is used in place of the pattern within compressed file 304 .
- the mechanism of the present invention reuses a dictionary entry for more than one pattern within data file 302 .
- the reuse is made effectively by applying a functional transform to an existing dictionary entry such that the existing dictionary entry matches with the required pattern that needs to be stored as a new entry in the dictionary. If a transform does result in a match, then the dictionary entry only consists of the code for the transform along with the index to the original patterns in the dictionary. Otherwise a new entry is made in the dictionary as usual.
- a compressed file is made up of the code stream, the sequence of offset values, also referred to as code words, to a previous occurrence of the pattern or the actual literal pattern itself if this is the first occurrence.
- code words an assumption is made to allow the code words to reference a pattern up to an offset of up to 255 bytes from the current location in the code stream.
- an assumption is made to allow the maximum pattern width to be 256 bits wide.
- the code word is equal to 8 bits for the offset plus 1 bit to indicate whether the segment or section of bits is a code word or a literal pattern itself. If the segment is a code word, then the segment is only 9 bits wide. If the segment is a pattern, then the pattern is 256 bits wide.
- a code word only references an existing pattern (dictionary) if and only if the current bit pattern has an exact match with a previous pattern, otherwise the code stream ends up containing the actual literal pattern.
- the code word is enhanced by adding bits to identify transforms and operands. In the depicted example, 2 bits are used to identify a set of four functional transforms. An additional 8 bits are used in the code word as an offset to a second operand for the functional transform. Another bit is used to differentiate a code word with transform versus one without the transform.
- a code word is extended from 11 bits to 20 bits.
- the compressed file has a higher compression ratio since less bits are now required to represent the code stream.
- file 400 is an example of a compressed file, which may be produced using a compression utility, such as compression utility 300 in FIG. 3 .
- file 400 includes patterns 402 , 404 , 406 , and 408 , as well as code words (CWs) 410 , 412 , and 414 .
- the code words include offsets pointing to a previous pattern.
- code words 410 and 412 may point to pattern 402 .
- These code words contain the format as described below with respect to FIG. 5 .
- file 416 is another example of a compressed file, which may be generated by a compression utility.
- file 416 contains dictionary section 418 and code word section 420 .
- Dictionary section 418 contains segments of data in which the pattern in each segment is different from the pattern in another segment in dictionary section 418 .
- Code word section 420 contains code words for each entry within dictionary section 418 . In other words, each data segment in the original file is replaced with a code word found in code word section 420 .
- the format of these code words may be implemented as illustrated in FIG. 5 as described below.
- code word 500 contains code word ID 502 , code word transform ID 504 , pointer/offset 506 , transform 508 , and pointer/offset 510 .
- code word ID 502 is used to identify the data following this section as being either a code word or an existing pattern.
- code word ID 502 is a single bit set to a logic 1 to indicate that the following data is a code word.
- Code word transform ID 504 is used to indicate that the code word is based on a functional transform. In this example, the bit is set to a logic 1 to indicate that a functional transform is used to provide a match to a dictionary entry or previous pattern.
- Pointer/offset 506 is used to identify an operand for the transform. This operand is a pattern in the dictionary. Transform 508 is used to identify the transform that is used to match the pattern. In this example, transform 508 is 2 bits and may be used to identify up to four transforms. Pointer/offset 510 is used to identify the second operand for the transform.
- next 8 bits, “00100000”, are the offset in binary from the current location.
- the next two bits, “10”, define the functional transform to be rotate.
- the last set of 8 bits, “00000001”, is the number of times the pattern should be rotated, which is one. If for example the function was an AND, XOR or OR function, the last set of 8 bits would be the offset to the second operand that would result in a match with the current pattern.
- FIG. 6 a flowchart of a process used for compressing a data file with transforms is depicted in accordance with a preferred embodiment of the present invention.
- the process illustrated in FIG. 6 may be implemented in a compression utility, such as compression utility 300 in FIG. 3 .
- the process described in this figure generates a compressed file similar to file 400 in FIG. 4 A.
- the process begins by receiving a data file for compression (step 600 ).
- a segment is selected for processing (step 602 ).
- equal size segments are selected for processing.
- the data file may be processed in 128 bit segments or portions. The selection is done sequentially within the file.
- a determination is made as to whether the segment matches a previous segment (step 604 ). If the segment does not match a previous segment, a determination is made as to whether the segment matches a previous segment using a transform (step 606 ). Step 606 may involve attempting a match with a single transform or with multiple transforms if multiple transforms are provided. If the segment does match a previous segment using a transform, a code word is placed in the compressed file to identify the offset to a previous segment and to a transform (step 608 ). The code word may take a form similar to code word 500 in FIG. 5 .
- step 610 a determination is made as to whether more unprocessed segments are present. If more unprocessed segments are absent, the process terminates. If more unprocessed segments are present, the process returns to step 602 as described above.
- step 606 if the segment does not match a previous segment using a transform, the segment is placed in a compressed file (step 612 ) and the process returns to step 602 as described above.
- step 604 if the segment matches a previous segment, a code word identifying the offset to the previous segment is placed in the compressed file (step 614 ) and the process proceeds to step 610 as described above.
- FIG. 7 a flowchart of a process used for compressing data using transforms is depicted in accordance with a preferred embodiment of the present invention.
- the process illustrated in FIG. 7 may be implemented in a compression utility, such as compression utility 300 in FIG. 3 .
- the process described in this figure generates a compressed file similar to file 416 in FIG. 4 B.
- the process begins by receiving a data file for compression (step 700 ).
- a segment is selected for processing (step 702 ). As described with respect to FIG. 6, equal size segments are sequentially selected for processing.
- a determination is then made as to whether a segment matches the pattern in the library (step 704 ). If the segment does not match the pattern in the library, a determination is made as to whether the segment matches the pattern in the library using a transform (step 706 ). If the segment does match the pattern in the library using a transform, a code word is placed into the file to point to the pattern and identify the transform (step 708 ).
- step 710 a determination is made as to whether there are more unprocessed segments. If there are no more unprocessed segments, the process terminates. If more unprocessed segments are present, the process returns to step 702 as described above.
- step 706 if the segment does not match the pattern in the library using a transform, the pattern from the segment is placed into the library (step 712 ). A code word corresponding to the new pattern is placed in the code word section (step 714 ) and the process returns to 702 as described above. In step 714 , the code word would indicate that no transform was used.
- step 704 if the segment does match the pattern in the library, a code word corresponding to the pattern in the library is placed into the code word section (step 716 ) and the process proceeds to step 710 as described above.
- the code word placed into the file would point to the pattern in the library. Either a pointer or an offset may be used.
- the present invention provides an improved method, apparatus, and computer instructions for improving compression ratios in compressing data.
- the mechanism of the present invention provides this advantage by reducing dictionary sizes through the use of transforms.
- the particular format of code words and the types of transforms described herein are provided as examples and are not intended as limitations to the present invention. For example, depending on the particular implementation, a more compact or efficient compression process may be used in place of the one described above.
- the number of bits used to indicate features such as the number of possible transforms and the maximum number of pattern bits may be set to a range of possible values for a corresponding range of function types, size, speed, and compression-ratio trade-offs.
Abstract
Description
Claims (34)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/015,238 US6657564B2 (en) | 2001-12-13 | 2001-12-13 | Method and apparatus for compressing data in which dictionary sizes are reduced |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/015,238 US6657564B2 (en) | 2001-12-13 | 2001-12-13 | Method and apparatus for compressing data in which dictionary sizes are reduced |
Publications (2)
Publication Number | Publication Date |
---|---|
US20030112161A1 US20030112161A1 (en) | 2003-06-19 |
US6657564B2 true US6657564B2 (en) | 2003-12-02 |
Family
ID=21770282
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/015,238 Expired - Lifetime US6657564B2 (en) | 2001-12-13 | 2001-12-13 | Method and apparatus for compressing data in which dictionary sizes are reduced |
Country Status (1)
Country | Link |
---|---|
US (1) | US6657564B2 (en) |
Cited By (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20030219161A1 (en) * | 2002-05-23 | 2003-11-27 | Fuji Xerox Co., Ltd. | Image processing device |
US20070027882A1 (en) * | 2005-06-03 | 2007-02-01 | Parashuram Kulkarni | Record boundary identification and extraction through pattern mining |
US20070229323A1 (en) * | 2006-03-30 | 2007-10-04 | International Business Machines Corporation | Methods of creating a dictionary for data compression |
US20080162517A1 (en) * | 2006-12-28 | 2008-07-03 | International Business Machines | Method and system for creating an in-memory physical dictionary for data compression |
US20080191907A1 (en) * | 2007-02-13 | 2008-08-14 | Patrick Wai-Tong Leung | Method And Apparatus For GIF Decompression Using Fixed-Size Codeword Table |
US20090083267A1 (en) * | 2007-09-24 | 2009-03-26 | Computer Associates Think, Inc. | Method and System for Compressing Data |
US20100127900A1 (en) * | 2008-11-26 | 2010-05-27 | Red Hat, Inc. | Table management for lzw with fixed-size tables |
Families Citing this family (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8085274B2 (en) * | 2006-07-18 | 2011-12-27 | Via Technologies, Inc. | Video data compression |
US9148172B2 (en) | 2012-06-22 | 2015-09-29 | Micron Technology, Inc. | Data compression and management |
GB2525208B (en) * | 2014-04-15 | 2020-04-08 | Advanced Risc Mach Ltd | Method of and apparatus for generating an encoded frame |
US9582514B2 (en) | 2014-12-27 | 2017-02-28 | Ascava, Inc. | Performing multidimensional search and content-associative retrieval on data that has been losslessly reduced using a prime data sieve |
WO2017100619A1 (en) | 2015-12-10 | 2017-06-15 | Ascava, Inc. | Reduction of audio data and data stored on a block processing storage system |
US10897270B2 (en) * | 2018-06-06 | 2021-01-19 | Yingquan Wu | Dynamic dictionary-based data symbol encoding |
US11418220B2 (en) * | 2020-03-20 | 2022-08-16 | Huawei Technologies Co., Ltd. | Method, system, and apparatus for a segmented polarization-adjusted convolutional (PAC) code |
Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5561421A (en) * | 1994-07-28 | 1996-10-01 | International Business Machines Corporation | Access method data compression with system-built generic dictionaries |
US5982441A (en) * | 1996-01-12 | 1999-11-09 | Iterated Systems, Inc. | System and method for representing a video sequence |
US6121901A (en) * | 1996-07-24 | 2000-09-19 | Unisys Corporation | Data compression and decompression system with immediate dictionary updating interleaved with string search |
US6353807B1 (en) * | 1998-05-15 | 2002-03-05 | Sony Corporation | Information coding method and apparatus, code transform method and apparatus, code transform control method and apparatus, information recording method and apparatus, and program providing medium |
-
2001
- 2001-12-13 US US10/015,238 patent/US6657564B2/en not_active Expired - Lifetime
Patent Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5561421A (en) * | 1994-07-28 | 1996-10-01 | International Business Machines Corporation | Access method data compression with system-built generic dictionaries |
US5982441A (en) * | 1996-01-12 | 1999-11-09 | Iterated Systems, Inc. | System and method for representing a video sequence |
US6121901A (en) * | 1996-07-24 | 2000-09-19 | Unisys Corporation | Data compression and decompression system with immediate dictionary updating interleaved with string search |
US6353807B1 (en) * | 1998-05-15 | 2002-03-05 | Sony Corporation | Information coding method and apparatus, code transform method and apparatus, code transform control method and apparatus, information recording method and apparatus, and program providing medium |
Cited By (23)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20030219161A1 (en) * | 2002-05-23 | 2003-11-27 | Fuji Xerox Co., Ltd. | Image processing device |
US7158683B2 (en) * | 2002-05-23 | 2007-01-02 | Fuji Xerox Co., Ltd. | Image processing device |
US20070065031A1 (en) * | 2002-05-23 | 2007-03-22 | Fuji Xerox Co., Ltd. | Image processing device, method and recording medium for compressing image data |
US20070071340A1 (en) * | 2002-05-23 | 2007-03-29 | Fuji Xerox Co., Ltd. | Image processing device, method and recording medium for compressing image data |
US7477791B2 (en) | 2002-05-23 | 2009-01-13 | Fuji Xerox Co., Ltd. | Image processing device, method and recording medium for compressing image data |
US7298914B2 (en) | 2002-05-23 | 2007-11-20 | Fuji Xerox Co., Ltd. | Image processing device, method and recording medium for compressing image data using repeatability of data patterns |
US20070027882A1 (en) * | 2005-06-03 | 2007-02-01 | Parashuram Kulkarni | Record boundary identification and extraction through pattern mining |
US7606816B2 (en) * | 2005-06-03 | 2009-10-20 | Yahoo! Inc. | Record boundary identification and extraction through pattern mining |
US20070285958A1 (en) * | 2006-03-30 | 2007-12-13 | International Business Machines Corporation | Methods of creating a dictionary for data compression |
US8037034B2 (en) * | 2006-03-30 | 2011-10-11 | International Business Machines Corporation | Methods of creating a dictionary for data compression |
US7283072B1 (en) * | 2006-03-30 | 2007-10-16 | International Business Machines Corporation | Methods of creating a dictionary for data compression |
US20070229323A1 (en) * | 2006-03-30 | 2007-10-04 | International Business Machines Corporation | Methods of creating a dictionary for data compression |
US20080162517A1 (en) * | 2006-12-28 | 2008-07-03 | International Business Machines | Method and system for creating an in-memory physical dictionary for data compression |
CN101222232B (en) * | 2006-12-28 | 2010-06-02 | 国际商业机器公司 | Method and system for creating an in-memory physical dictionary for data compression |
US20080275897A1 (en) * | 2006-12-28 | 2008-11-06 | International Business Machines Corporation | Method and system for creating an in-memory physical dictionary for data compression |
US7460033B2 (en) * | 2006-12-28 | 2008-12-02 | International Business Machines Corporation | Method for creating an in-memory physical dictionary for data compression |
US7973680B2 (en) | 2006-12-28 | 2011-07-05 | International Business Machines Corporation | Method and system for creating an in-memory physical dictionary for data compression |
US20080191907A1 (en) * | 2007-02-13 | 2008-08-14 | Patrick Wai-Tong Leung | Method And Apparatus For GIF Decompression Using Fixed-Size Codeword Table |
US7439887B2 (en) | 2007-02-13 | 2008-10-21 | Seiko Epson Corporation | Method and apparatus for GIF decompression using fixed-size codeword table |
US20090083267A1 (en) * | 2007-09-24 | 2009-03-26 | Computer Associates Think, Inc. | Method and System for Compressing Data |
US8463759B2 (en) * | 2007-09-24 | 2013-06-11 | Ca, Inc. | Method and system for compressing data |
US20100127900A1 (en) * | 2008-11-26 | 2010-05-27 | Red Hat, Inc. | Table management for lzw with fixed-size tables |
US7764201B2 (en) * | 2008-11-26 | 2010-07-27 | Red Hat, Inc. | Table management for LZW with fixed-size tables |
Also Published As
Publication number | Publication date |
---|---|
US20030112161A1 (en) | 2003-06-19 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
JP3337633B2 (en) | Data compression method and data decompression method, and computer-readable recording medium recording data compression program or data decompression program | |
US6657564B2 (en) | Method and apparatus for compressing data in which dictionary sizes are reduced | |
JP3229180B2 (en) | Data compression system | |
US5659737A (en) | Methods and apparatus for data compression that preserves order by using failure greater than and failure less than tokens | |
US8804852B2 (en) | High bandwidth decompression of variable length encoded data streams | |
JP2534465B2 (en) | Data compression apparatus and method | |
US6778103B2 (en) | Encoding and decoding apparatus using context | |
US6597812B1 (en) | System and method for lossless data compression and decompression | |
JP3225638B2 (en) | Apparatus and method for compressing data and data processing system | |
US7587401B2 (en) | Methods and apparatus to compress datasets using proxies | |
JP2581903B2 (en) | Byte aligned data compression method and apparatus | |
JP3009727B2 (en) | Improved data compression device | |
US6717534B2 (en) | Data encoding device and data decoding device | |
JP3362177B2 (en) | Data compression method and apparatus | |
JPH0869370A (en) | Method and system for compression of data | |
WO1994022072A1 (en) | Information processing using context-insensitive parsing | |
US9665590B2 (en) | Bitmap compression for fast searches and updates | |
US20100321218A1 (en) | Lossless content encoding | |
US20040139298A1 (en) | Method and apparatus for instruction compression and decompression in a cache memory | |
US6271775B1 (en) | Method for reducing data expansion during data compression | |
US7167115B1 (en) | Method, apparatus, and computer-readable medium for data compression and decompression utilizing multiple dictionaries | |
US8463759B2 (en) | Method and system for compressing data | |
US6246349B1 (en) | Method and system for compressing a state table that allows use of the state table without full uncompression | |
US8373584B2 (en) | Compressing and decompressing data | |
JP3898717B2 (en) | Data compression / decompression apparatus and data compression / decompression method |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MALIK, NADEEM;REEL/FRAME:012400/0190Effective date: 20011212 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
CC | Certificate of correction | ||
FPAY | Fee payment |
Year of fee payment: 4 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026664/0866Effective date: 20110503 |
|
FPAY | Fee payment |
Year of fee payment: 12 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |