US20040066966A1 - Object finder for two-dimensional images, and system for determining a set of sub-classifiers composing an object finder - Google Patents
Object finder for two-dimensional images, and system for determining a set of sub-classifiers composing an object finder Download PDFInfo
- Publication number
- US20040066966A1 US20040066966A1 US10/266,139 US26613902A US2004066966A1 US 20040066966 A1 US20040066966 A1 US 20040066966A1 US 26613902 A US26613902 A US 26613902A US 2004066966 A1 US2004066966 A1 US 2004066966A1
- Authority
- US
- United States
- Prior art keywords
- coefficients
- classifiers
- sub
- subsets
- transform
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V10/00—Arrangements for image or video recognition or understanding
- G06V10/20—Image preprocessing
- G06V10/255—Detecting or recognising potential candidate objects based on visual cues, e.g. shapes
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F18/00—Pattern recognition
- G06F18/20—Analysing
- G06F18/21—Design or setup of recognition systems or techniques; Extraction of features in feature space; Blind source separation
- G06F18/214—Generating training patterns; Bootstrap methods, e.g. bagging or boosting
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V10/00—Arrangements for image or video recognition or understanding
- G06V10/40—Extraction of image or video features
- G06V10/52—Scale-space analysis, e.g. wavelet analysis
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V30/00—Character recognition; Recognising digital ink; Document-oriented image-based pattern recognition
- G06V30/10—Character recognition
- G06V30/24—Character recognition characterised by the processing or recognition method
- G06V30/248—Character recognition characterised by the processing or recognition method involving plural approaches, e.g. verification by template match; Resolving confusion among similar patterns, e.g. "O" versus "Q"
- G06V30/2504—Coarse or fine approaches, e.g. resolution of ambiguities or multiscale approaches
Definitions
- Object recognition is the technique of using computers to automatically locate objects in images, where an object can be any type of three dimensional physical entity such as a human face, automobile, airplane, etc.
- Object detection involves locating any object that belongs to a category such as the class of human faces, automobiles, etc. For example, a face detector would attempt to find all human faces in a photograph, but would not make finer distinctions such as identifying each face.
- FIG. 1A illustrates a picture slide 10 showing some variations for human faces and cars.
- cars vary in shape, size, coloring, and in small details such as the headlights, grill, and tires.
- the class of human faces may contain human faces for males and females, young and old, bespectacled with plain eyeglasses or with sunglasses, etc.
- a person's race, age, gender, ethnicity, etc. may play a dominant role in defining the person's facial features.
- the visual expression of a face may be different from human to human. One face may appear jovial whereas the other one may appear sad and gloomy.
- Visual appearance also depends on the surrounding environment and lighting conditions as illustrated by the picture slide 12 in FIG. 1B.
- Light sources will vary in their intensity, color, and location with respect to the object. Nearby objects may cast shadows on the object or reflect additional light on the object.
- the appearance of the object also depends on its pose; that is, its position and orientation with respect to the camera. In particular, a side view of a human face will look much different than a frontal view.
- FIG. 1C shows a picture slide 14 illustrating geometric variation among human faces.
- a computer-based object detector must accommodate all this variation and still distinguish the object from any other pattern that may occur in the visual world.
- a human face detector must be able to find faces regardless of facial expression, variation from person to person, or variation in lighting and shadowing.
- Most methods for object detection use statistical modeling to represent this variability. Statistics is a natural way to describe a quantity that is not fixed or deterministic such as a human face. The statistical approach is also versatile. The same statistical modeling techniques can potentially be used to build object detectors for different objects without re-programming.
- Another known technique allows for geometric flexibility with a more powerful representation by using richer features (each takes on a large set of values) sampled at regular positions across the full extent of the object. Each feature measurement is treated as statistically independent of all others.
- the disadvantage of this approach is that any relationship not explicitly represented by one of the features is not represented. Therefore, performance depends critically on the quality of the feature choices.
- object detection may be implemented by applying a local operator or a set of local operators to a digital image, or a transform of a digital image.
- a local operator or a set of local operators may require that a human programmer choose the local operator or set of local operators that are applied to the image.
- the overall accuracy of the detection program can be dependent on the skill and intuition of the human programmer. It is therefore desirable to determine the local operators or set of local operators in a manner that is not dependant on humans.
- the present invention is directed to a system for determining a classifier (or detector) used by an object detection program where the classifier is decomposed into a set of sub-classifiers.
- the system includes (a) a candidate coefficient-subset creation module, (b) a training module in communication with the candidate coefficient-subset creation module, and (c) a sub-classifier selection module in communication with the training module.
- the candidate coefficient-subset creation module may create a plurality of candidate subsets of coefficients.
- the coefficients are the result of a transform operation performed on a two-dimensional (2D) digitized image.
- the training module may train a sub-classifier for each of the plurality of candidate subsets of coefficients.
- the training module may train the set of sub-classifiers based on non-object training examples that combine examples selected by bootstrapping and examples selected randomly.
- the sub-classifier selection module may select certain of the plurality of sub-classifiers.
- the selected sub-classifiers may comprise the components of the classifier. Consequently, the present invention may automatically select the sub-classifiers, thereby eliminating the need for a human operator to select the sub-classifiers, which as described previously, is highly dependent upon the skill and intuition of the human operator.
- the present invention is directed to a method of generating a sub-classifier for a detector of an object detection program.
- the method includes transforming pixel values to wavelet coefficients and then linearly projecting the wavelet coefficients to create projection coefficients.
- the method further includes quantizing the projection coefficients and generating a table of log-likelihood values based on the quantizing.
- the method may further include providing lighting correction adjustments to the wavelet coefficients prior to linearly projecting the wavelet coefficients.
- the present invention is directed to a method for determining a set of sub-classifiers for a detector of an object detection program.
- the method includes creating a plurality of candidate subsets of coefficients and training a sub-classifier for each of the plurality of candidate subsets of coefficients.
- the method further includes selecting certain of the plurality of sub-classifiers.
- the present invention is directed to a system and a method for detecting instances of an object in a 2D (two-dimensional) image.
- the method may include, for each of a plurality of view-based classifiers, computing a transform of a digitized version of the 2D image containing a representation of an object, wherein the transform is a representation of the spatial frequency content of the image as a function of position in the image.
- Computing the transform generates a plurality of transform coefficients, wherein each transform coefficient represents corresponding visual information from the 2D image that is localized in space, frequency, and orientation.
- the method may also include applying the plurality of view-based classifiers to the plurality of transform coefficients, wherein each view-based classifier is configured to detect a specific orientation of an instance of the object in the 2D image based on visual information received from corresponding transform coefficients.
- Each of the plurality of view-based classifiers includes a plurality of cascaded sub-classifiers. The cascaded stages may be arranged in ascending order of complexity and computation time.
- the method includes combining results of the application of the plurality view-based classifiers, and determining a pose (i.e., position and orientation) of the instance of the object from the combination of results of the application of the plurality view-based classifiers.
- a visual marker may be placed on the 2D image where the instance of the object is estimated.
- the pose of the instance of the object may be stored for further processing, such as for red-eye removal, as but one example.
- FIGS. 1 A- 1 C illustrate different challenges in object detection
- FIG. 2 illustrates a generalized operational flow for the object finder program according to an embodiment of the present invention
- FIG. 3 depicts an exemplary setup to utilize the object finder program according to an embodiment of the present invention
- FIGS. 4A and 4B illustrate the decision-making involving a fixed object size, orientation, and alignment according to an embodiment of the present invention
- FIG. 5 shows the view-based classification approach utilized by the object finder program to detect object locations and orientations according to an embodiment of the present invention
- FIG. 6 is a real-life illustration of the object classification approach outlined in FIG. 5;
- FIG. 7 shows an example of different orientations for human faces and cars that the object finder program may be configured to model
- FIG. 8 depicts the general object detection approach used by the object finder program according to one embodiment of the present invention.
- FIG. 9 illustrates an exemplary histogram
- FIG. 10 shows a set of subbands produced by a wavelet transform based on a two-level decomposition of an input image using a filter-bank according to one embodiment of the present invention
- FIGS. 11A and 11B depict an input image and its wavelet transform representation using a symmetric 4/4 filter bank according to one embodiment of the present invention
- FIG. 12 illustrates an example of how statistics for classifiers are collected off-line using a set of training images according to one embodiment of the present invention
- FIG. 13 illustrate how classifiers are estimated using the AdaBoost algorithm according to one embodiment of the present invention
- FIG. 14 outlines steps in training a sub-classifier
- FIG. 15 illustrates the combining of histograms to form a log-likelihood look-up table
- FIG. 16 is a flow chart illustrating operations performed by a view-based classifier during detection of an object at a specific orientation according to one embodiment of the present invention
- FIG. 17A illustrates a wavelet decomposition
- FIG. 17B illustrates a partially overcomplete wavelet decomposition
- fully FIG. 17C illustrates a fully overcomplete wavelet decomposition for a two level transform
- FIGS. 18 and 19 illustrate the positional correspondence between a window sampled directly on the image and the same image window sampled with respect to the wavelet transform of the image according to one embodiment of the present invention
- FIGS. 20, 21, 22 A and 22 B further illustrate the object detection process for one scale of the input image according to one embodiment of the present invention
- FIG. 23 illustrates the image scaling process as part of the overall object detection process shown in FIG. 16 according to one embodiment of the present invention
- FIGS. 23A and 24 further illustrate the details of the image scaling process and corresponding wavelet transform computation according to one embodiment of the present invention
- FIG. 25 depicts various images of humans with the object markers placed on the human faces, human eyes, and human ears as detected by the object finder according to one embodiment of the present invention
- FIG. 26 illustrates various images of telephones with the object markers placed on the telephones detected by the object finder according to one embodiment of the present invention
- FIG. 27 illustrates various images of door handles with the object markers placed on the door handles detected by the object finder according to one embodiment of the present invention
- FIG. 28 is a diagram of a system for automatically choosing a set of sub-classifiers according to one embodiment of the present invention.
- FIG. 29 is a flowchart illustrating the process flow through the candidate coefficient-subset creation module according to one embodiment of the present invention.
- FIG. 30 is a flowchart illustrating the process flow through the sub-classifier selection module according to one embodiment of the present invention.
- FIG. 31 is a flowchart illustrating the process flow through the sub-classifier training module according to one embodiment of the present invention.
- FIG. 32 illustrates the process of training multiple stages of the object detector according to one embodiment of the present invention.
- FIG. 2 illustrates an embodiment of a generalized operational flow for the object finder program according to an embodiment of the present invention.
- the object finder program (simply, the “object finder”) is represented by the block 18 .
- a digital image 16 is a typical input to the object finder 18 , which operates on the image 16 and generates a list of object locations and orientations for the 3D objects represented in the 2D image 16 .
- image and “digital image” are used interchangeably hereinbelow. However, both of these terms are used to refer to a 2D image (e.g., a photograph) containing two-dimensional representations of one or more 3D objects (e.g., human faces, cars, etc.).
- the object finder 18 may place object markers 52 (FIG. 6) on each object detected in the input image 16 by the object finder 18 .
- the input image may be an image file digitized in one of many possible formats including, for example, a BMP (bitmap) file format, a PGM (Portable Grayscale bitMap graphics) file format, a JPG (Joint Photographic Experts Group) file format, or any other suitable graphic file format.
- each pixel is represented as a set of one or more bytes corresponding to a numerical representation (e.g., a floating point number) of the light intensity measured by a camera at the sensing site.
- the input image may be gray-scale, i.e., measuring light intensity over one range of wavelength, or color, making multiple measurements of light intensity over separate ranges of wavelength.
- FIG. 3 depicts an exemplary setup to utilize the object finder program 18 according to an embodiment of the present invention.
- An object finder terminal or computer 22 may execute or “run” the object finder program application 18 when instructed by a user.
- the digitized image 16 may first be displayed on the computer terminal or monitor display screen and, after application of the object finder program, a marked-up version of the input image (e.g., picture slide 50 in FIG. 6) may be displayed on the display screen of the object finder terminal 22 .
- the program code for the object finder program application 18 may be stored on a portable data storage medium, e.g., a floppy diskette 24 , a compact disc 26 , a data cartridge tape (not shown) or any other magnetic or optical data storage medium.
- the object finder terminal 22 may include appropriate disk drives to receive the portable data storage medium and to read the program code stored thereon, thereby facilitating execution of the object finder software.
- the object finder software 18 upon execution by a processor of the computer 22 , may cause the computer 22 to perform a variety of data processing and display tasks including, for example, analysis and processing of the input image 16 , display of a marked-up version of the input image 16 identifying locations and orientations of one or more 3D objects in the input image 16 detected by the object finder 18 , transmission of the marked-up version of the input image 16 to a remote computer site 28 (discussed in more detail hereinbelow), transmission of a list of object identities, locations and, orientations for the 3D objects represented in the 2D image to a remote computer site 28 (discussed in more detail hereinbelow), etc.
- the object finder terminal 22 may be remotely accessible from a client computer site 28 via a communication network 30 .
- the communication network 30 may be an Ethernet LAN (local area network) connecting all the computers within a facility, e.g., a university research laboratory or a corporate data processing center.
- the object finder terminal 22 and the client computer 28 may be physically located at the same site, e.g., a university research laboratory or a photo processing facility.
- the communication network 30 may include, independently or in combination, any of the present or future wireline or wireless data communication networks, e.g., the Internet, the PSTN (public switched telephone network), a cellular telephone network, a WAN (wide area network), a satellite-based communication link, a MAN (metropolitan area network) etc.
- the object finder terminal 22 may be, e.g., a personal computer (PC), a laptop computer, a workstation, a minicomputer, a mainframe, a handheld computer, a small computer device, a graphics workstation, or a computer chip embedded as part of a machine or mechanism (e.g., a computer chip embedded in a digital camera, in a traffic control device, etc.).
- the computer (not shown) at the remote client site 28 may also be capable of viewing and manipulating digital image files and digital lists of object identities, locations and, orientations for the 3D objects represented in the 2D image transmitted by the object finder terminal 22 .
- the client computer site 28 may also include the object finder terminal 22 , which can function as a server computer and can be accessed by other computers at the client site 28 via a LAN.
- the memory modules may include RAM (random access memory), ROM (read only memory) and HDD (hard disk drive) storage. Memory storage is desirable in view of sophisticated image processing and statistical analysis performed by the object finder terminal 22 as part of the object detection process.
- the arrangement depicted in FIG. 3 may be used to provide a commercial, network-based object detection service that may perform customer-requested object detection in real time or near real time.
- the object finder program 18 at the computer 22 may be configured to detect human faces and then human eyes in photographs or pictures remotely submitted to it over the communication network 30 (e.g., the Internet) by an operator at the client site 28 .
- the client site 28 may be a photo processing facility specializing in removal of “red eyes” from photographs or in color balancing of color photographs.
- the object finder terminal 22 may first automatically detect all human faces and then all human eyes in the photographs submitted and send the detection results to the client computer site 28 , which can then automatically remove the red spots on the faces pointed out by the object finder program 18 .
- the whole process can be automated.
- the object finder terminal 22 may be a web server running the object finder software application 18 .
- the client site 28 may be in the business of providing commercial image databases.
- the client site 28 may automatically search and index images on the World Wide Web as requested by its customers.
- the computer at the client site 28 may “surf” the web and automatically send a set of images or photographs to the object finder terminal 22 for further processing.
- the object finder terminal 22 may process the received images or photographs and automatically generate a description of the content of each received image or photograph.
- the depth of image content analysis may depend on the capacity of the object finder software 18 , i.e., the types of 3D objects (e.g., human faces, cars, trees, etc.) the object finder 18 is capable of detecting.
- the results of image analysis may then be transmitted back to the sender computer at the client site 28 .
- the owner or operator of the object finder terminal 22 may commercially offer a network-based object finding service, as illustrated by the arrangement in FIG. 3, to various individuals, corporations, or other facilities on a fixed-fee basis, on a per-operation basis or on any other payment plan mutually convenient to the service provider and the service recipient.
- a primary component of the object finder is a classifier.
- FIG. 4A illustrates a classifier 34 according to one embodiment of the present invention.
- the input to the classifier 32 is fixed-size window sampled from an input image 16 .
- the classifier operates on the fixed size image input 32 and makes a decision whether the object is present in the input window 32 .
- the decision is a binary one in the sense that the output of the classifier 34 represents only two values—either the object is present or the object is not present.
- the classifier only identifies the object's presence when it occurs at a pre-specified size and alignment within the window.
- a classifier may comprise a plurality of cascaded sub-classifiers. As described herein, the cascaded stages may be arranged in ascending order of complexity and computation time.
- FIG. 8 depicts the general object detection approach used by the object finder program 18 according to one embodiment of the present invention.
- the object finder must apply the classifier 34 repeatedly to original image 58 for all possible (and, maybe overlapping) positions of this rectangular image window 32 as shown in FIG. 8.
- the process makes it possible for the object finder to detect instances of the object at any position within an image.
- the object finder program 18 may iteratively resize the input image and re-apply the classifier in the same fashion to each resized image 62 , 64 , and 66 , as illustrated in FIG. 8.
- FIG. 8 depicts the general object detection approach used by the object finder program 18 according to one embodiment of the present invention.
- the object finder must apply the classifier 34 repeatedly to original image 58 for all possible (and, maybe overlapping) positions of this rectangular image window 32 as shown in FIG. 8.
- the process makes it possible for the object finder to detect instances of the object at any position within an image.
- the object finder program 18 may it
- the size of the rectangular image window 32 may remain fixed throughout the whole detection process.
- the size of the image window 32 may be empirically selected based on a number of factors including, for example, object shape, desired accuracy or resolution, resulting computational complexity, efficiency of program execution, etc.
- the size of the rectangular window is 32 ⁇ 24 pixels.
- a classifier may be specialized not only in object size and alignment, but also object orientation.
- the object finder 18 uses a view-based approach with multiple classifiers that are each specialized to a specific orientation of the object as described and illustrated with respect to FIG. 6.
- a predetermined number of view-based classifiers may be applied in parallel to the input image 16 to find corresponding object orientations.
- Each of the view-based classifiers is designed to detect one orientation of a particular object (e.g., a human face).
- Blocks 36 , 38 , and 40 represent view-based classifiers designed to detect object orientations 1, 2, . . . , m.
- the results of the application of the view-based classifiers are then combined at block 42 .
- the combined output indicates specific 3D objects (e.g., human faces) present in the input 2D image.
- object finder program 18 may be trained or modified to detect different other objects (e.g., shopping carts, faces of cats, helicopters, etc.) as well.
- FIG. 6 is a real-life illustration of the object classification approach outlined in FIG. 5.
- each view-based classifier is specialized to detect a specific orientation of a given object—i.e., the object (e.g., a human face, or a car) that the view-based classifier is trained to detect.
- the object e.g., a human face, or a car
- one classifier may be specialized to detect right profile views of faces as shown by the object marker 52 (generated by the classifier upon detecting the corresponding object orientation) in the picture slide 44 .
- the picture slide 44 may thus represent the result obtained at block 36 in FIG. 5.
- a different view-based classifier may be specialized to detect frontal views as illustrated by the marked-up version of the picture slide 46 in FIG. 6 (corresponding, for example, to block 38 in FIG. 5).
- another classifier may be configured to detect left profile views of human faces as illustrated by the marked-up version of the picture slide 48 in FIG. 6 (corresponding, for example, to block 40 in FIG. 5).
- Each picture slide shows object markers 52 placed at appropriate orientations of human faces detected by corresponding classifiers.
- the object finder 18 may choose the strongest detection. For example, in FIG. 6, picture slides 46 and 48 represent multiple detections (frontal face detection and left-hand side view detection) for the female face illustrated therein. In that event, the final combined output may represent the strongest detection—i.e., the frontal face detection in slide 46 .
- the object finder 18 may thus find orientations and locations of multiple objects (e.g., several human faces) in an image.
- FIG. 7 shows an example of different orientations for human faces and cars that the object finder program 18 may be configured to model.
- the number of orientations to model for each object may be empirically determined.
- two view-based classifiers frontal ( 54 A) and right profile ( 54 B)—are used to detect front and right profiles of human faces.
- the right profile classifier 54 B may be applied to a mirror-reversed input image.
- eight classifiers one frontal classifier 56 A and seven right-side classifiers 56 B- 56 H—may be used as shown in FIG. 7.
- the left side views (of cars) may be detected by running the seven right-side classifiers ( 56 B- 56 H) on mirror-reversed images. It is noted that the numerals 54 A- 54 B and 56 A- 56 H are used hereinbelow to represent corresponding view-based classifiers for ease of description.
- a challenge in object detection is the amount of variation in visual appearance, e.g., faces vary from person to person, with facial expression, lighting, etc.
- Each view-based classifier e.g., classifiers 54 A- 54 B or 56 A- 56 H in FIG. 7 uses statistical modeling to account for this variation within the category of object it is trained to detect.
- two statistical distributions are modeled for each view-based classifier—the statistics of the appearance of the given object in the image window 32 , P(image-window
- ⁇ 1 ) where ⁇ 1 object, and the statistics of the visual appearance of the rest of the visual world, which are identified by the “non-object” class, P(image-window
- ⁇ 2 ), where ⁇ 2 non-object.
- the classifier combines these in a likelihood ratio test.
- the classifier 34 may compute the classification decision by retrieving the probabilities associated with the given input image window 32 , P(image-window
- ⁇ 2 ), and using the log likelihood ratio test given in equation (3) below: H ⁇ ( image - window ) log ⁇ P ⁇ ( image — ⁇ window
- ⁇ 2 ) > ⁇ ⁇ ⁇ ( ⁇ log ⁇ P ⁇ ( ⁇ 2 ) P ⁇ ( ⁇ 1 ) ) ( 3 )
- the classifier 34 decides that the object is present.
- ⁇ represents the logarithm of the ratio of prior probabilities (determined off-line as discussed later hereinbelow). Often, prior probabilities are difficult to determine, therefore, by writing the decision rule this way (i.e., as the equation (3)), all information concerning the prior is combined into one term “ ⁇ ”.
- the term “ ⁇ ” can be viewed as a threshold controlling the sensitivity of a view-based classifier.
- the “ ⁇ ” controls the trade-off between these forms of error. Setting “ ⁇ ” to a low value makes the classifier more sensitive and reduces the number of false negatives, but increases the number of false positives. Conversely, increasing the value of “ ⁇ ” reduces the number of false positives, but increases the number of false negatives. Therefore, depending on the needs of a given application, a designer can choose “ ⁇ ” empirically to achieve a desirable compromise between the rates of false positives and false negatives.
- log likelihood ratio test given in equation (3) is equivalent to Bayes decision rule (i.e., the maximum a posteriori (MAP) decision rule) and will be optimal if the representations for P(image-window
- MAP maximum a posteriori
- the image window 32 may encompass several hundred or even thousands pixel variables. It is not computationally feasible to represent the joint distribution of such a large number of variables without strong assumptions about their statistical structure. Therefore, these distributions must be approximated by making assumptions about their statistical characteristics. The chosen functional form for these distributions represents these assumptions about statistical characteristics.
- One such assumption is to use the na ⁇ ve Bayes classifier formulation that models all variables as statistically independent. However, such an assumption may be too severe for many problems. It may be desirable to represent statistical dependency in a limited fashion.
- the image_window 32 consists of the variables (consisting of pixels or coefficients generated by a transformation on the pixels) ⁇ x 1 . . . x r ⁇ and where each S k is a subset of these variables and the subsets, S k , are not necessarily mutually exclusive.
- the classifier can be represented in a slightly more specific form where the subsets are the same for both classes in equation (8A).
- H ⁇ ( x 1 , ... ⁇ , x r ) ⁇ log ⁇ P ⁇ ( S 1
- each of the individual terms of the equation will henceforth be referred to as a “sub-classifier” within the classifier.
- the probability distributions forming each sub-classifier can take many functional forms. For example, they could be Gaussian models, mixture models, kernel-based non-parametric representation, etc.
- the classifier can be expressed as a sum of sub-classifiers:
- each such sub-classifier, h k (S k ) does not necessarily have to take the form of a ratio of two probability distributions. Discriminant functions of various forms (e.g. logistic linear discriminant function, multilayer perceptron neural networks, etc.) are also admissible. Nor does each sub-classifier have to be the same functional form. However, as described in more detail hereinafter, in one embodiment each probability distribution in each sub-classifier in equation (8A) is represented by a table.
- equation (8) implicitly assumed that the subsets, S k , are statistically independent for both the object and the non-object. However, it can be shown that this assumption can be relaxed if the goal is accurate classification not accurate probabilistic modeling as discussed in P. Domingos and M. Pazzani, “On the Optimality of the Simple Bayesian Classifier under Zero-One Loss”, Machine Learning, 29, pp. 103-130, 1997. Indeed, they show that violating statistical independence for a na ⁇ ve Bayes classifier does not always degrade performance.
- the selection of the subsets of input variables, S k , supplying each sub-classifier of the classifier of equation (8A) may be achieved by the statistical methods as described hereinbelow.
- FIG. 28 is a block diagram of a system 210 for automatically creating sub-classifiers according to one embodiment of the present invention.
- the system 210 can use statistical methods to choose the sub-classifiers composing each classifier of the object finder program.
- the system 210 may be implemented using a computing device such as, for example, a personal computer, a laptop computer, a workstation, a minicomputer, a mainframe, a handheld computer, a small computer device, or a supercomputer, depending upon the application requirements.
- the system 210 may include training images for the object class 228 , training images for the non-object class 226 , and cross-validation images (testing images in which the locations of the object are labeled) 230 .
- the system 210 may include a candidate subset creation module 212 , a linear projection vector creation module 214 , a quantization threshold creation module 216 , a candidate sub-classifier training module 218 , a sub-classifier selection module 220 , a sub-classifier retraining module 222 , and a detection threshold determination module 224 .
- the system modules 212 , 214 , 216 , 218 , 220 , 222 , 224 may be implemented as software code to be executed by a processor (not shown) of the system 210 using any suitable computer language such as, for example, Java, Ada, C or C++ using, for example, conventional or object-oriented techniques.
- the software code may be stored as a series of instructions or commands on a computer-readable medium, such as a random access memory (RAM), a read only memory (ROM), a magnetic medium such as a hard-drive or a floppy disk, or an optical medium such as a CD-ROM.
- the object training images 228 are representative example images of the object. (e.g., human faces or cars). In one embodiment, for each face viewpoint, about 2,000 original images are used; and for each car viewpoint, between 300 and 500 original images are used. Each of these training images can be sized, aligned, and rotated to give the best correspondence with a prototype representing the image class (e.g., frontal faces). The size of each such training image may be identical to the size of the classification window 32 . For each original image, approximately 400 synthetic variations can also be generated by altering background scenery and making small changes in aspect ratio, orientation, frequency content, and position. It is noted that increasing the number of original images and synthetic variations will increase the computational time required for the modules in 210 but may also increase the accuracy of the classifier. The number of original training images and the number of synthetic variation each original image may be determined by the desired accuracy of detection, the availability of suitable training images, and limitations on the amount of time and computer resources that can be devoted to the computations among the modules in 210 .
- Non-object examples 226 are taken from images that do not contain the object. In one embodiment, approximately 600,000 examples are used. The selection of non-object examples is described in more detail hereinafter.
- the cross-validation images 230 are images of realistic scenes that often contain the object.
- the locations of the object are known (usually entered by hand) and used to measure and compare the accuracy of various components of the algorithm as described hereinbelow.
- the candidate subset creation module 212 may create a set of candidate subsets of input variables. Each subset, S k , provides the input to one sub-classifier.
- FIG. 29 is a flow chart illustrating the process flow for the candidate coefficient-subset creation module 212 according to one embodiment of the invention. The steps of FIG. 29 are described in more detail hereinbelow.
- the input variables may be pixels or variables derived from a transformation of the input pixels.
- the input variables are wavelet coefficients, generated by applying, for example, 5/3 or 4/4 symmetric filter banks to the input pixels.
- the coefficients of a symmetric 4/4 filter bank are (1.0, 3.0, 3.0, 1.0) for the low-pass filter and ( ⁇ 1.0, ⁇ 3.0, 3.0, 1,0) for the high pass filter.
- the coefficients of the 5/3 filter bank are ( ⁇ 1.0, 2.0, 6.0, 2.0, ⁇ 1.0) for the low pass filter and (2.0, ⁇ 4.0, 2.0) for the high-pass filter.
- Filter-bank implementation for any filter-pair is discussed in G. Strang and T. Nguyen, “Wavelets and Filter Banks”, Wellesley-Cambridge Press, 1997, the disclosure of which is incorporated herein by reference.
- FIG. 10 shows an exemplary set of subbands produced by a wavelet transform using a 2 (two) level decomposition of an input image.
- the wavelet transform organizes the input image into subbands that are localized in orientation and frequency.
- the filter-bank produces 7 (seven) subbands—four subbands 70 A- 70 D at level-2 and three subbands 72 A- 72 C at level-1.
- each wavelet transform coefficient 80 (FIG. 11) is spatially localized.
- FIG. 11A depicts an input window 32 and FIG. 11B depicts its two level wavelet transform representation 78 generated by a symmetric 4/4 filter bank. Seven subbands are visible on the wavelet decomposition 78 .
- the wavelet transform coefficients 80 are also shown in FIG. 11B.
- the coefficients 80 are spatially localized within appropriate subbands. It is noted that each level in a wavelet transform represents a lower octave of frequencies.
- a coefficient in level-2 i.e., subbands 70 A- 70 D
- the wavelet representation 78 shows a gradation of details (of the input image) with level-2 coefficients representing coarse details and level-1 coefficients representing finer details.
- an overcomplete wavelet transform is generated by a polyphase filter bank or other suitable computational method (e.g. lifting) applied to the input window 32 as described in Strang and Nguyen.
- each wavelet transform may consist of two (2) or more levels (see, for example, FIG. 10 for a two level example). It is generated by the process shown in FIG. 17A. In this process, an input is transformed to a level 1 transform. The LL band of level 1 is then expanded to generate level 2. If a third level or more levels are desired, each level is generated from the LL subband of the level that preceded it.
- the fully overcomplete wavelet transform at each stage in this process is a redundant version of the ordinary wavelet transform.
- four (4) redundant “phases” are generated at each stage in this process as shown in FIG. 17C (as compared with one phase in the critically sampled case of FIG. 18A).
- Each phase, the even-even (EE) phase, the even-odd (EO) phase, the odd-even (OE) phase, and the odd-odd ( 00 ) phase correspond to a positional shift of the input.
- the odd-odd phase of level 1 corresponds to the wavelet transform of the input image shifted by one in both the horizontal and vertical directions.
- any branch (or path) starting at the input image and terminating in level 2 could be thought of as a redundant wavelet transform.
- level 1 OO and the level 2 OO generated from level 1 OO
- the fully overcomplete transform is computed.
- This process effectively gives sixteen (16) synthetic variations of the originally training example where the variations correspond to positional shifts of the input as described hereinabove.
- Each of these sixteen (16) variants will each be henceforth be separate training examples and the wavelet coefficients forming each are the variables, which are decomposed into subsets.
- These wavelet variables may be decomposed into subsets using the following process. Let C be a measure given by the absolute difference between the “true” log-likelihood ratio, when a subset of variables is modeled by its full joint distribution, and the log-likelihood ratio when the subset of variables is modeled with partial or complete statistical independence. Referring to FIG.
- C can be calculated for every combination of two variables at block 236 using equation (9) below:
- C ⁇ ⁇ ⁇ abs ( log ⁇ P ⁇ ( x 1 , x 2
- C is computed by quantizing each variable and estimating the probability distributions by using histograms collected from the training examples from each class, ⁇ 1 (object training examples) and ⁇ 2 (non-object training examples).
- each variable is quantized to five levels, where the quantization levels are chosen as a function of the mean ( ⁇ ) and standard deviation ( ⁇ ) of the variable with respect to the ⁇ 1 class with thresholds at ⁇ 0.7 ⁇ , ⁇ 0.15 ⁇ , ⁇ +0.15 ⁇ , ⁇ +0.7 ⁇ .
- Each joint distribution is represented by a histogram with twenty-five (25) bins and each distribution of one variable is represented by a histogram of five (5) bins.
- a subset of variables can be evaluated by taking the sum of the values of C for all pairs of variables within the subset.
- N represents the number of elements in the subset.
- a high value of D S corresponds to a high degree of dependence among the variables in the subset.
- D can be used to select a set of subsets with high degrees of dependence at block 238 in FIG. 29. Due to the sheer number of possible combinations, it can be impractical to evaluate equation (10) for all possible subsets of variables, so an alternative method can be used. For each particular variable, the best subsets containing that particular variable, and up to N total variables can be selected by heuristic search in step 238 . In this heuristic search the heuristic evaluation function is simply D, given by equation (10). The result of step 238 may guarantee that each variable will occur in at least N initial candidate subsets. N is the range of subset sizes that, in one embodiment, can be between two and thirty, for example.
- the set of best subsets resulting from step 238 can comprise the set of initial candidate subsets 240 .
- the set of initial candidate subsets 240 may be broken down further into groups of subsets containing the same number of variables.
- a criterion can be assigned to each subset within such a group of subsets.
- the criterion can initially be a Mahalanobis distance (M), calculated in step 242 .
- M for a specific subset is computed by dividing the Euclidean distance between its value of D and the mean of the value of D ( ⁇ overscore (D) ⁇ ) of all members of the group of subsets, by the variance ( ⁇ overscore (D) ⁇ ⁇ ) of the same.
- the subset with the greatest Mahalanobis distance can, in one embodiment, become the first member of the set of chosen candidate subsets 246 in step 244 . Then, the subset criteria for all remaining candidate subsets may be recalculated in step 248 . Recalculating the subset criteria can avoid the selection of a group of subsets containing largely the same variables. For example, a group of subsets chosen by Mahalanobis distance only, without recalculation, may be no more than supersets or subsets of each other.
- the criterion can be recalculated by penalizing each remaining candidate subset based on its commonality with those subsets that have already been selected.
- the remaining candidate subsets can be penalized, for example, for: (1) the number of times a given variable has occurred in any selected set, (2) the largest union with any selected set, (3) the number of times a subset of that size has already been selected, band/or (4) the number of times that particular combination of subbands has occurred among selected subsets.
- the subsets are scored by the following criterion: mahalanobis_distance*size_factor*description_factor*max_overlap*total_overlap.
- Each of the factors multiplying the Mahalanobis distance reduces the value of criterion as a function of the subset's overlap with previously selected subsets.
- the description factor penalizes for the number of times a particular combination of subbands has been used in the previously selected subsets.
- each subset will be one of these combinations.
- the description factor is given by (n t ⁇ n k )/n t where n k is the number of times combination k has occurred among the selected subsets.
- the max overlap factor penalizes for the most elements the current subset has in common with any individual chosen subset.
- the max overlap factor is (max (n i , n k ) ⁇ n m )/max(n i , n k ).
- the total overlap factor penalizes for all coefficients in the current subset has in common with coefficients from all the chosen subsets.
- the total overlap factor is given by (n i ⁇ n o +1)/n i , where n i is the total number of coefficients in subset i and n o is the number of these coefficient that occur in any of the chosen subsets.
- the best candidate subset can again be chosen in step 244 to become a member of the set of chosen candidate subsets in step 246 .
- the criterion for all remaining subsets can again be recalculated in step 248 . In one embodiment, this process can be repeated until there are, for example, 400 subsets in the set of chosen candidate subsets.
- each subset of variables can be represented by a linear projection to a smaller number of coefficients. For example, if twelve wavelet coefficients, w 1 , . . . , w 12 , form a given subset, they may be projected down to five coefficients, p 1 , . . . , p 5 , where each p k is given by:
- the linear projection vectors, v k are determined by several methods: principal components vectors computed from the object training set, principal components computed over the non-object set, principal components computed over the combined object and non-object training sets, (one skilled in the art of statistics and linear algebra is familiar with the process of principal component analysis) or the Foley-Sammon discriminant vectors (multidimensional extension of Fisher Linear discriminant) between both classes (Foley, D. H. and Sammon, J. W. (1975). An Optimal Set of Discriminant Vectors. IEEE Transactions Computers. Vol. C-24, pp. 281-289.).
- the various subbands may be multiplied by scalar constants prior to this computation and correspondingly prior to projection on these linear vectors.
- all 5/3 filter bank coefficients in all level 1 subbands are multiplied by 0.25 and all coefficients in all level 2 subbands are multiplied by 0.0625.
- all 4/4 filter bank coefficients in level 1 are multiplied by 0.0156 and all coefficients in level 2 are multiplied by 0.00024414.
- each subset of projection coefficients can be represented by one discrete value that takes on a finite range of values called the (“quantized feature value”) represented by the variable, f.
- This transformation may be achieved by quantization of the projection coefficients.
- quantization thresholds may be determined by the following procedure:
- each variable is first separately quantized.
- the quantization boundaries may be set in terms of the mean ( ⁇ ) and standard deviation ( ⁇ ) of the variable computed over the object training images. For example, a variable could be quantized to five (5) values with the following quantization boundaries:
- the quantized feature value, f can then be uniquely computed from this conglomerate of the quantized projection coefficient values. For example if there are three quantized projection values, e 1 , e 2 , and e 3 , that each take on 5 possible values from 0 to 4, then f takes a value from 0 to 124 given by:
- the projection coefficients can be quantized by a form of vector quantization.
- vector quantization #2 may modify vector quantization #1 by considering up to three (3) values whose magnitude exceeds some pre-specified threshold.
- this threshold is chosen as twice the mean of the coefficients corresponding to the top three (3) projection vectors (in the case of projection vectors derived from principal components analysis) computed from the object training images.
- F takes on five hundred seventy-one (571) values given by four hundred eighty (480) values (if three coefficients exceed the threshold) plus eighty (80) values (if two coefficients exceed the threshold) plus ten (10) values (if one value exceeds the threshold) plus one (1) value (if no values exceed the threshold).
- vector quantization #3 Another method (referred to as “vector quantization #3) is a modification of “vector quantization #2. It quantizes the coefficient due to the first principal component separately. In one embodiment it quantizes this coefficient into 5 levels where the thresholds for these levels are given by:
- This method then applies the vector quantization scheme #2 by ordering the top three (3) of the four (4) remaining coefficients. There are two hundred forty-nine (249) possible values for this value. f overall then has 1245 possible values corresponding to the product of these 249 possible values with five (5) possible values for the quantized first coefficient.
- vector quantization #4 Another method (referred to as “vector quantization #4) is also a modification of vector quantization #2. This method applies vector quantization #2. Then it applies a second threshold to the ordered coefficients. In one embodiment this threshold is the four times the mean of the coefficients corresponding to the top three (3) projection vectors (in the case of projection vectors derived from principal components analysis) computed from the object training images. This method then counts the number of coefficient that exceed this threshold. This number can range from zero (0) to three (3). Therefore, f has four times as many possible values as it does for vector quantization #2.
- N is the number of wavelet coefficients in the subset and Q is the number of projection vectors.
- this value can be quantized to four (4) levels.
- the quantization thresholds may be 0.5g ave , g ave , 2.0 g ave where g ave is the average value of g computed over the object training image set. Combining this measurement with any other quantized measurement increases the total number of quantization bins by a factor of four (4).
- Q is the number of projection vectors.
- this variable is quantized to four (4) levels.
- the quantization thresholds may be 0.5h ave , 2.0h ave , 4.0h ave where h ave is the average value of h computed over the object training image set. Combining this measurement with any other quantized measurement increases the total number of quantization bins by a factor of four (4).
- scalar quantization 1-A Another quantization method (referred to as “scalar quantization 1-A”) combines scalar quantization #1 with the energy of the projection vectors measurement.
- vector quantization 1-A Another quantization method (referred to as “vector quantization 1-A”) combines vector quantization #1 with the energy of the projection vectors measurement.
- vector quantization 2-A Another quantization method (referred to as “vector quantization 2-A”) combines vector quantization #2 with the energy of the projection vectors measurement.
- vector quantization 3-A Another quantization method (referred to as “vector quantization 3-A”) combines vector quantization #3 with the energy of the projection vectors measurement.
- vector quantization 4-A Another quantization method (referred to as “vector quantization 4-A”) combines vector quantization #4 with the energy orthogonal of the projection vectors measurement.
- scalar quantization 1-B Another quantization method (referred to as “scalar quantization 1-B”) combines scalar quantization #1 with the energy orthogonal to the projection vectors measurement.
- vector quantization 1-B Another quantization method (referred to as “vector quantization 1-B”) combines vector quantization #1 with the energy orthogonal to the projection vectors measurement.
- vector quantization 2-B Another quantization method (referred to as “vector quantization 2-B”) combines vector quantization #2 with the energy orthogonal to the projection vectors measurement.
- vector quantization 3-B Another quantization method (referred to as “vector quantization 3-B”) combines vector quantization #3 with the energy orthogonal to the projection vectors measurement.
- vector quantization 4-B Another quantization method (referred to as “vector quantization 4-B”) combines vector quantization #4 with the energy orthogonal to the projection vectors measurement.
- each sub-classifier can take many functional forms (e.g. neural network, linear discriminant function, kernel-density function, etc.) computed over the input classification window 32 .
- a table of log-likelihood values represents the functional form of each sub-classifier where each entry in the table corresponds to a different value of f, the quantized feature value described hereinabove.
- the log-likelihood values in the table are determined from the training data.
- this training process may include, gathering histograms over object and non-object training images (steps 296 A, B), normalizing the histograms to compute P(S n
- FIG. 9 illustrates an exemplary histogram 68 .
- the histogram 68 shown in FIG. 9 is for illustrative purposes only. In actual operation, the set of histograms for the classifier may contain many more histograms with many different values.
- a histogram counts the frequency of occurrence of values of a given function.
- Each column in a histogram is called a “bin.”
- statistics for the object training images may be gathered in step 296 A (FIG. 31).
- a discrete value, f (the quantized feature value based on quantization of the linear projection and the subset of variables) is computed for each training image. It is noted that, because of quantization, there may be more than one combination of values producing the same discrete value.
- the quantizer for sub-classifier f 1 takes the value “567”
- the quantizer for sub-classifier f k takes the value “350”.
- Histograms can be collected by counting the number of occurrences of each quantized value across the set of training images. Then, a table of probabilities can be generated for each sub-classifier from the histogram of that sub-classifier as shown in FIG. 12. Each probability value in the table corresponds to a bin in the respective histogram. For example, for sub-classifier ‘f 1 ’, to compute the probability of pattern value “567” the bin count H 1 (#567) is divided by the count of all bins for histogram H 1 (i.e., ⁇ H 1 (#i)). Other probabilities may be similarly calculated. This process represents the normalization steps in blocks 298 A and 298 B in FIG. 31. It is noted that although FIG.
- FIG. 12 shows human faces constituting the set of training images 118
- the method outlined in FIG. 12 and FIG. 14 can also be used to collect histograms corresponding to a sub-classifier for training images of any object including, for example, cars, telephones, shopping carts, etc. and for the “non-object” class.
- FIG. 14 outlines steps in training a sub-classifier according to one embodiment.
- each training image may be aligned and its intensity normalized at step 400 .
- synthetic variations of the training image may be generated.
- the overcomplete wavelet transform may be computed at step 404 .
- wavelet coefficients for the sub-classifier may be sampled.
- linear projection coefficients may be computed.
- the coefficients may be quantized.
- the histogram may be updated.
- a log-likelihood table can be computed to correspond to each pair of histograms (object and non-object) corresponding to each sub-classifier as noted hereinbefore.
- corresponding entries in each probability table are retrieved. For example, in each probability distribution, there may be entries for quantized feature value “567”. Then the logarithm of the ratio of the object probability divided by the non-object probability becomes the entry in the log-likelihood table for this quantized feature value.
- the sub-classifier selection module 220 in FIG. 28, may choose the best sets of sub-classifiers for implementation according to the process illustrated in FIG. 30.
- the sets of sub-classifiers may be chosen according to a series of criteria evaluated by tests. The first test may be computationally simple. Later tests may be progressively more computationally complex and also more accurate.
- a number of criteria can be used to evaluate sub-classifiers, including, but not limited to, the “Margin”, given by equation (15) below, and the area under a Receiver Operator Curve (hereinafter “ROC curve”).
- ROC curve is a plot of the number of objects classified correctly versus number of false positives for a given classifier evaluated on a given set of test images. Each point on the plot represents evaluation for a different value of ⁇ .
- the area under the ROC curve is related to the performance of the classifier. Greater area indicates better performance of the algorithm; that is, for example, in face detection, a high area means that a high number of faces classified correctly can be achieved with a low number of false positives.
- a margin of each set of candidate sub-classifiers can be calculated on training data.
- x k,1 . . . x k,y represent the k th input to the classifier
- H(x k,1 . . . x k,y ) represents the output predicted by the classifier
- y k represents the actual value of the output corresponding to this input
- ⁇ is a small value, which in one embodiment is set equal to 0.1.
- the variable K tracks the number of sub-classifiers per chosen set. The value of the variable K can initially be set to one in step 268 . The best Q sets of sub-classifiers containing K sub-classifiers can then be chosen in step 270 using the Margin criterion evaluated over the training images of the object (block 228 in FIG. 28) and the training images of the non-object (block 226 in FIG. 28).
- H(x k,1 . . . x k,y ) is computed in the following fashion. This method independently evaluates each candidate sub-classifier on each of the training example (blocks 226 and 228 in FIG. 28) and stores these results. This method then computes H(x k,1 . . . x k,y ) for a given combination of sub-classifiers by summing the pre-computed results for each these individual sub-classifiers for the given example, k.
- the area under the ROC curve is calculated for each of the Q sets of sub-classifiers selected in step 270 .
- the best M candidate sets of k sub-classifiers can then be chosen in step 272 based on the ROC area criterion.
- the value of K can be incremented by one.
- candidate combinations of size K can be created by adding another sub-classifier to each of the Mcandidates of size K ⁇ 1.
- the process can begin again at step 270 for sets of sub-classifiers of size K.
- the process can be completed when K reaches a value of 20, for example.
- the ROC curve of these final M candidate sub-classifiers can be evaluated in step 274 on the cross-validation data (block 230 in FIG. 28). The best set of K sub-classifiers can then be chosen according to this criterion
- the set of sub-classifiers chosen by the method described above may have their log-likelihood tables recomputed by using a method called AdaBoost with Confidence Weighted Predictions algorithm discussed in R. E. Shapire, Y. Singer, “Improving Boosting Algorithms Using Confidence-rated Predictions”, Machine Learning, 37:3, pp. 297-336, December, 1999 (hereafter, “Shapire & Singer”), the disclosure of which is incorporated herein by reference in its entirety.
- AdaBoost is a general method for training pattern classifiers. Its chief advantage is that it minimizes the classification error on the training set and maximizes the margin between the two classes on the training set as discussed in Shapire & Singer.
- AdaBoost is a general method that can be applied to any type of classification algorithm. Given any classifier, AdaBoost works by sequentially re-training multiple instances of the classifier, where, for example, each instance corresponds to a different set of values for the look-up tables comprising the terms in equation (8A). To perform classification, AdaBoost applies all of such instances of the classifier in combination and computes the weighted sum of their output to make a classification decision.
- a disadvantage of this approach is the increased computational cost of applying all the classifiers in the combination. The following describes a process for overcoming this disadvantage by computing a single look-up table for a single sub-classifier using AdaBoost.
- the AdaBoost algorithm works in an iterative fashion.
- the (I ⁇ 1) th instance is evaluated on the training data (block 124 ).
- the classifier is iteratively retrained where more weight is given to training examples that were incorrectly classified by the classifier trained in the previous iteration (block 126 ).
- the AdaBoost algorithm re-computes the histograms for each sub-classifier over the object and non-object training samples (block 128 ) using the weights determined at block 126 . Histograms can be collected by counting the number of occurrences of each quantized value across the set of training images. However, instead of incrementing each histogram bin by 1 for each training example, we increment by the weight assigned to the training example. We scale and round the training example weights to integers for this purpose.
- Block 130 computes a log-likelihood look-up table for each set of histograms corresponding to each sub-classifier.
- each H i (A) is represented by equation (8A) or (8B).
- p adaboost iterations are computed. For each iteration number, 1 . . . p, performance of the classifier is measured on the cross-validation test set (block 230 in FIG. 28 ). The number of iterations that gives, the best performance, say k, is chosen and the sum in equation (14) is pre-computed up to k rather than p.
- block 224 in FIG. 28 determines the threshold ⁇ in equation (8) to achieve a desired performance by measuring accuracy for different settings of ⁇ on the cross-validation images block 230 .
- Lighting correction is sometimes necessary to compensate for differences in lighting.
- a lighting correction module 36 may provide lighting correction prior to evaluation of the classifier 34 as illustrated in FIG. 4B. Similarly, in training, lighting correction may be performed on each training example immediately after evaluation of the overcomplete wavelet transform.
- the lighting correction module 36 may be implemented as software code to be executed by a processor (not shown) of the object finder terminal 22 (FIG. 3) when providing lighting correction prior to evaluation by the classifier 34 , or executed by a processor of the system 210 (FIG. 28) when used for training of sub-classifiers.
- the software code of the module 36 may use any suitable computer language such as, for example, Java, Ada, C or C++ using, for example, conventional or object-oriented techniques.
- the software code may be stored as a series of instructions or commands on a computer-readable medium, such as a random access memory (RAM), a read only memory (ROM), a magnetic medium such as a hard-drive or a floppy disk, or an optical medium such as a CD-ROM.
- a computer-readable medium such as a random access memory (RAM), a read only memory (ROM), a magnetic medium such as a hard-drive or a floppy disk, or an optical medium such as a CD-ROM.
- the lighting correction module 36 may apply multiple methods of compensation, where each method provides its input to a different group of sub-classifiers. Such an approach will be less susceptible to the failures of an individual method of correction.
- a parameter referred to as “Localized lighting correction,” maybe used to adjust the value of each wavelet coefficient as a function of its neighboring coefficients from within its subband and from other subbands.
- each coefficient in each band is normalized as follows.
- Each LL coefficient may be normalized by its 3 ⁇ 3 neighborhood in the LL band.
- the normalization process computes the average absolute value of the neighborhood. If this average is less than a pre-specified threshold (described hereinbelow), the coefficient is assigned value 1.0. Otherwise the normalized LL coefficient is computed as the ratio of the original coefficient divided by this neighborhood average.
- Each coefficient in the LH and HL bands is normalized by the combined average of its 3 ⁇ 3 neighborhoods in the LH and HL bands.
- the normalization process assigns value 0.0 to the normalized coefficient. If the average is greater than the threshold, the normalized coefficient is given by the ratio of the original coefficient divided by this average. Each coefficient in the HH band is normalized by the average of its 3 ⁇ 3 neighborhood in the HH band. If this average is less than a threshold, the normalization process assigns value 0.0 to the normalized coefficient. If the average is greater than the threshold, the normalization process divides the original coefficient by the average to give the normalized coefficient. In one embodiment, these thresholds are 1.0 for all LL bands, 2.5 for LH and HL subbands, and 1.25 for HH subbands.
- Another parameter referred to as “Variance normalization,” may be used to linearly scale all the wavelet coefficients in the candidate region or some selected portion of it (described hereinbelow), such that the intensities in the region or a selected portion of it respectively, have a pre-specified variance value.
- Yet another parameter referred to as “Brightest point normalization,” may be used to scale all wavelet coefficients such that the brightest spot in the candidate region or some selected portion (described hereinbelow) of it has a fixed value.
- the classifier computes “variance normalization” and “brightest point normalization” over various pre-specified, extents of the object.
- the extent of some object does not necessarily occupy the full extent of the classification window 32 .
- the face training examples shown in FIG. 12 do not occupy the complete area of the window.
- the average extent of the object is entered by hand and used for normalization. In one embodiment, this extent is split into two horizontal halves that are normalized separately.
- the detector has to exhaustively scan this classifier across the image in position and scale in order to find instances of an object. This process applied directly, however, can consume a great amount of computational time. In one embodiment, several computational techniques and heuristic strategies, described hereinbelow, are employed to reduce the amount of computation.
- FIG. 16 is a block diagram of the process implemented by the object finder program 18 whereby a classifier is scanned in position in position and in scale to find instances of the object.
- the process illustrated in FIG. 16 applies to view-based classifiers (e.g., any of the classifiers 54 A- 54 B or 56 A- 56 H in FIG. 7).
- the original image is searched at re-scaled versions as illustrated hereinbefore in FIG. 8.
- this search across scale in FIG. 16, at block 166 , it is determined whether all of the scaled sizes of an image have been searched. If they have, then the process ends at block 168 . If all of the scaled sizes of an image have not been searched, then the classifier scales or resizes the image at block 149 , as illustrated through some exemplary scales in FIG. 8, re-computes the partially overcomplete wavelet transform of the scaled image at block 150 , and continues exhaustive object search at all positions within that new resized image at blocks 152 - 166 .
- the scaling or resizing of the input image 16 may be desirable to detect certain object sizes that may not have fit within the image window 32 when original image was searched. Scaling or shrinking of the image may allow a larger object to fit within the image window 32 , and hence, to obtain a better detection. It is noted that the size and shape of the image window 32 itself does not change throughout different levels of scaling/resizing (as illustrated with the fixed-size image window 32 in FIG. 8).
- Extensive object search is continued for each scale until the scaled input image is smaller than the size of the image window 32 .
- Block 150 of FIG. 16 computes a partially overcomplete wavelet transform of the scaled input image.
- this step computes the level 1 EE phase (critically sampled and not overcomplete generation of level 1) and then generates an overcomplete representation of level 2 from level 1 EE producing level 2 EE, level 2 EO, level 2 OE, level 2 OO as shown in FIG. 17B.
- the object finder 18 “re-uses” parts of the transform in the search across scale.
- FIG. 23 and FIG. 24 illustrate this process:
- each level of the transform is recomputed in its entirety at each scaling.
- the transform for scale (i ⁇ 4) may be utilized because the transform for scale-i (i ⁇ 4) is related to the transform at scale (i ⁇ 4) by a shift in levels.
- the wavelet transform at scale-4 is related to that at scale-0
- the transform at scale-5 is related to that at scale-1, and so on as illustrated in FIG. 24.
- the object finder 18 shifts the transform for scale (i ⁇ 4) by one level. That is, level-2 at scale (i ⁇ 4 ) becomes level-1 at scale-i (for i ⁇ 4) as shown in FIG. 24 with reference to scales 0 and 4. Therefore, the object finder 18 needs to compute only the top level (i.e., level-2) for each scale-i (i ⁇ 4), rather than computing the entire transform (i.e., levels 1 through 2) for the new scale-i.
- Blocks 161 and 163 in FIG. 23 illustrate the scaling and partial re-use of the transform discussed hereinabove.
- FIG. 23A provides more detail regarding the process of step 161 in FIG. 23.
- the transform re-use and extensive object search (as given by blocks 150 , 152 , 153 , 154 , and 160 in FIG. 16) is continued for each scale until the scaled input image is smaller than the size of the image window 32 .
- the object finder 18 may search the object at scales (i+k*4, where k ⁇ 1).
- Such an extensive scanning for each image size and image window location improves accuracy of detection by making it possible to find instances of the object over this range in position and size.
- the detector may be applied in a cascade of sequential stages of partial evaluation, where each stage performs a partial evaluation of the classifier, i.e., a subset of sub-classifiers. That is, each classifier is decomposed into a series of stages where each stage contains one or more sub-classifiers.
- Each stage, F i can consist of a sub-classifier or a series of sub-classifiers, which can be chosen individually according to the manner described previously. Together, all of the sub-classifiers in all of the stages of a classifier may constitute the classifier as given in equations (8) and (8A).
- the set of image window 32 locations to be evaluated by each stage may be determined at block 154 .
- the set of image window 32 locations to be evaluated can initially be a set of all possible image window 32 locations.
- the criterion for updating the set of image window 32 locations to be evaluated may be the current total log-likelihood ratio corresponding to each location. Locations with a current total-log-likelihood ratio below a predetermined threshold may be dropped from the set of image window 32 locations to be evaluated. Thus the number of candidate locations to be evaluated may be reduced at each successive iteration of the process illustrated in FIG. 16.
- this cascade evaluation strategy can be a many step process, where a partial evaluation of equation 8 (or 8A) can be done multiple times. After evaluating each sub-classifier (e.g., sub-classifier f 1 ) or a group of sub-classifiers (e.g., sub-classifiers f 1 , f 2 , and f 3 ), the object finder 18 may add to partial sum in equation 8 or 8A. This re-evaluation will still be a partial re-evaluation, but will include more terms corresponding to the sub-classifiers that have been evaluated since the last partial evaluation.
- sub-classifier e.g., sub-classifier f 1
- a group of sub-classifiers e.g., sub-classifiers f 1 , f 2 , and f 3
- the object finder 18 may apply a threshold and remove additional candidates (i.e., parts of the image being searched) from further consideration as shown and discussed hereinbelow with reference to FIG. 20.
- the cascade evaluation strategy focuses on sub-classifier-by-sub-classifier analysis and builds on earlier computations to generate the final result.
- the threshold for the total log-likelihood at each stage may be pre-determined by a process of evaluating the current stages of the classifier on the cross-validation images (block 224 in FIG. 28).
- Block 224 may set this threshold to match a specified performance metric such as correct detection of 95% of the labeled instances of the object.
- the image window 32 does not directly sample the scaled image as implied by FIG. 4A, but rather it samples wavelet coefficients generated from the input image in block 150 .
- it will select coefficients from one wavelet transform derived from the semi-overcomplete wavelet transform shown in FIG. 17B.
- Each such wavelet transform can be thought of as a branch through this figure; that is, one such transform contains one of the level 2 phases in combination with the level 1 EE phase.
- the image window 32 will select the coefficients within this transform that spatially correspond to the position of the image window within the image as shown in FIG. 18.
- one image window corresponds to a collection of blocks of wavelet coefficients from each wavelet subband. These chosen coefficients are equivalent to first selecting the window in the image and then taking the wavelet transform of the image window.
- Evaluation sites are specified by the center of the window with respect to the chosen wavelet transform's top level's LL band.
- each coefficient in the level 2 LL band corresponds to a center of a potential evaluation site as shown in FIG. 18.
- the set of all possible evaluation sites for this phase of the wavelet transform corresponds to the set of windows placed at each such wavelet coefficient. It is noted that such image window 32 locations may be partially overlapping.
- the object finder program 18 may evaluate a single stage, F i , for each member of a set of image window 32 locations to be evaluated.
- the object finder 18 can keep, for each of the set of image window 32 locations to be evaluated, a partial calculation of equation (8A) that may be referred to as a total log-likelihood.
- each term of equation (8A) may correspond to the log-likelihood ratio generated by the application of a sub-classifier to a location.
- the partial calculation of equation (8A), or total log-likelihood contains terms resulting from sub-classifiers already applied to the location.
- the early stages differ from the later stages in their usage of the partially overcomplete wavelet transform computed in Block 150 in FIG. 16.
- the early stages evaluate only one wavelet transform (level 2 EE phase in combination with the level 1 EE phase) derived from the partially overcomplete wavelet transform.
- the later stages evaluate all four wavelet transforms (all phases of level 2 each in combination with the level 1 EE phase). As described hereinabove, each of these combinations corresponds to a wavelet transform, where these transforms are redundant with each other.
- the difference in these two evaluation strategies corresponds to a difference in the positional resolution for evaluating candidates.
- the first strategy corresponds to evaluations sites that are spaced by increments of 4 pixels apart in both the horizontal and vertical directions.
- the 2 nd strategy corresponds produces evaluation sites spaced 2 pixels apart (within each transform the sites are spaced apart by 4 pixels, but the wavelet transforms themselves are offset from each of the others by a level one wavelet coefficient or equivalently 2 pixels in the scaled image in either or both the horizontal or vertical direction).
- the first two stages use the first strategy and the last two stages use the second strategy.
- This evaluation strategy could be thought of as a “coarse-to-fine” strategy whereby the early stages evaluate the image at coarse resolution and the later stages evaluate it at a finer resolution.
- the former strategy is referred to as the “coarse evaluation strategy” and the latter strategy is referred to as the “fine evaluation strategy”.
- Block 154 determines the set of candidate locations to be evaluated by the process described hereinabove.
- the coarse evaluation strategy performs this step once whereas the fine evaluation strategy repeats this step for each of the 4 phases it uses from level 2 of the partially overcomplete transform.
- Block 140 computes the lighting correction for each of the candidate locations generated in Block 154 .
- the log-likelihood may be represented with respect to different resolutions.
- the (“coarse representation”) stores total log-likelihood with respect to sites in the LL band of the top level (e.g. level 2) of the wavelet transform.
- a (“fine representation”) stores log-likelihood with respect to sites in the LL band of a lower level (e.g. level 1) in the wavelet transform. For example, for a two level transform, the coarse representation is with respect to the LL band of level 2 and the fine representation is with respect to the LL band of level 1.
- Block 142 initializes the log likelihood for the current phase of the current stage to zero for all candidate object locations.
- early stages using the coarse evaluation strategy use the low-resolution representation throughout the process in FIG. 20. Later stages using the fine evaluation strategy involve both representations. This strategy maintains a final fine resolution updated in block 147 in FIG. 20. However, each phase evaluation in blocks 142 , 144 , and 146 in FIG. 20 maintains an intermediate representation at coarse representation with respect to the LL band of level 2 of the particular phase currently evaluated. Block 147 combines each intermediate result (within the current phase) with the total log likelihood at fine resolution. This step is necessary since these phases are offset from each other in position.
- F i is the set of sub-classifiers associated with a particular stage, i.
- F i can be shown by:
- each f k represents a separate sub-classifier.
- Each stage may have as few as one sub-classifier.
- f k can be applied to the set of image window locations to be evaluated in the 2D image to be evaluated. It updates the log-likelihood for this phase within the stage. This process repeats for all remaining sub-classifier in the stage.
- Block 147 updates the total log likelihood by adding the log-likelihood computed in this phase of the current stage as explained above. For the fine evaluation strategy, if there are more phases to be evaluated, blocks 142 , 144 , 146 are repeated for these phases.
- FIG. 21 explains Block 144 from FIG. 20 in more detail evaluating sub-classifier f k at the specified candidate locations.
- Block 100 places the image window 32 at a first of the set of image window locations to be evaluated.
- Block 102 samples the wavelet coefficients used by the sub-classifier f k where the wavelet coefficient are chosen from the corresponding image window 32 within the selected components of the partially overcomplete wavelet transform of the image (input image or a scaled version of the input image).
- Block 104 applies lighting correction to the wavelet coefficients, where the lighting correction was computed in Block 140 of FIG. 20.
- Blocks 106 , 108 , and 110 comprise the sub-classifier and involve projecting the wavelet coefficients on the linear projection vectors, computing a quantized feature value from projection coefficients, and retrieving the log-likelihood associated with the quantized value.
- Block 112 updates the log-likelihood for this candidate within this phase and stage by adding the retrieved value to the corresponding log-likelihood sum for the candidate.
- the image window 32 can then be shifted to a second location (as shown in FIG. 19) and the log-likelihood ratio for the sub-classifier at the second location can be found by the calculation of Blocks 102 through 112 . This process can be repeated for a third and a fourth location and so on until the sub-classifier has been evaluated at all specified locations.
- FIGS. 21 and 22 illustrate a conceivable ordering of computation.
- the actual organization of the aforementioned computations depends on the particular stage.
- each stage can be evaluated in a “candidate-wise” manner or “feature-wise” manner.
- “Feature-wise” evaluation attempts to reduce cost by sharing feature evaluations among overlapping candidates. This strategy performs approximately N 2 +M 2 +2MN feature evaluations over the entire scaled image (assuming all candidates are to be evaluated). Each candidate then samples the M 2 evaluations that overlap its extent and supplies them to the corresponding M 2 sub-classifier log-likelihood look-up tables as illustrated in FIG. 22B. Typically, since N is much greater than M, this strategy greatly reduces the amount of computation. The M 2 sub-classifiers, however, can differ only in their log-likelihood tables (as a function of position within the candidate), but must all share the same type of feature computation. Whereas, in candidate-wise evaluation, the M 2 sub-classifiers can be completely different.
- features are computed in a “feature-wise” manner, then lighting correction must also be applied in feature-wise manner.
- “feature-wise” correction assigns the correction at each wavelet coefficient as a function of a localized neighborhood about that point as described by “localized lighting correction” hereinabove; that is the correction is independent of the spatial location of the coefficient within the candidate image window 32 .
- candidate-wise correction considers the whole candidate or a specified portion and can be accomplished by “variance normalization” or “brightest point normalization” described hereinabove.
- the early stages use “feature-wise” evaluation for both lighting correction and feature evaluation.
- the later stages in which the remaining candidates are sparser, use “candidate-wise” evaluation.
- One embodiment using four stages uses feature-wise evaluation for the first three stages and candidate-wise evaluation for the forth stages.
- the first two stages use feature-wise lighting correction using the “localized lighting correction” described hereinabove.
- the first stage uses 20 sub-classifiers, which share the same feature computation.
- the second stage uses 24 sub-classifiers that share a feature computation and 42 other sub-classifiers that share another feature computation.
- the third stage uses candidate-wise evaluation with 19 sub-classifiers, where 5 share one feature computation, another 5 share a different feature computation, another 5 share a third feature computation, another 3 share a feature computation, and the last one that has a unique feature computation.
- the fourth stage involves 9 sub-classifiers that each has a unique feature computation.
- features are generated in ascending order of complexity.
- features use small subsets of wavelet coefficients, small numbers of linear projections, and simple quantization. (These feature evaluations are designed to be as quick as possible since they have to be applied to many candidates.)
- the first two stages use subsets of size 3-8 coefficients and use two linear projections with the “scalar quantization 1-B” scheme described hereinabove.
- features use larger subset sizes, more linear projections, and more complicated quantization schemes.
- a third stage can contain sub-classifiers that considers between four and twenty input variables, 5 linear projections, and the “vector quantization 2-A” for 4 feature computations and vector quantization 3-A scheme for one feature.
- a fourth stage may contain sub-classifiers that consider between five and thirty coefficients, 5 linear projections, and the “vector quantization 4-A” scheme for 9 feature computations.
- Each stage can be trained sequentially as shown in FIG. 32. In each stage the number of sub-classifiers can be specified by hand based on the desired trade-off between computational cost and accuracy. The stage is then trained by the process illustrated in FIG. 28 as if it were a complete classifier by the process outlined herein above.
- the process of FIG. 32 initiates at block 347 , where k is set equal to one.
- random non-object examples are selected.
- stage k is trained based on the non-object data.
- weights may be assigned to the previous k-1 stages.
- non-object examples may be selected by bootstrapping.
- block 352 k is incremented by one, and the process may return to block 349 .
- the object training images are re-used for each stage.
- each stage uses a different set of training examples for the non-object class.
- it is desirable to choose “non-object” examples that are most likely to be mistaken for the object to be detected e.g., a human face or a car
- This concept is similar to the way support vector machines work by selecting samples near the decision boundary as discussed in V. N. Vapnik, The Nature of Statistical Learning Theory , Sprinter, 1995.
- the disclosures of both of these publications are incorporated herein by reference in their entireties.
- the non-object training images are acquired by a bootstrapping method designed to determine such samples (i.e., non-object samples that are most likely to be mistaken for the object) as indicated in FIG. 32.
- a bootstrapping method designed to determine such samples (i.e., non-object samples that are most likely to be mistaken for the object) as indicated in FIG. 32.
- the first stage of the classifier is trained by estimating P(S n
- each stage can be “weighted” differently.
- equation 16 can be modified such that weights, c i , can be specified for each stage:
- the weight C k ⁇ 1 in the later equation is chosen by empirically trying a range of values, e.g. (0.1, 0.25, 1.0, 4.0, 10.0) over the set of cross-validation images and choosing the weight that gives the best accuracy as measured with respect to area under the ROC curve.
- FIG. 25 depicts various images of humans with the object markers 52 placed on the human faces, human eyes, and human ears detected by the object finder 18 according to an embodiment of the present invention.
- FIG. 26 illustrates various images of telephones with the object markers 190 placed on the telephones detected by the object finder 18 .
- FIG. 27 thus show results of object detection for door-handles
- the object finder program 18 encounters a face, it does not give one single large response (for the left side of equations 8 and 8A) at one location that is greater than the threshold (i.e., the right side of equations 8 or 8A). It gives a number of large responses at adjacent locations all corresponding to the same face that all exceed the detection threshold.
- multiple view-based classifiers may detect the same object at the same location. For example, FIG. 6 shows a case where the same face (the female in the foreground of the photograph) is initially detected by two of the view-based classifiers. To resolve that all such multiple “detections” (here, two detections) are caused by the same object, the following approach may be used.
- the detection value i.e., the left side of equations 8 and 8A
- the detection value is computed for all viewpoints and at all locations within the image and all its scalings.
- a list composed of all the locations for which the detection value is greater than the detection threshold is formed.
- This list is then put in order from the detection of the greatest magnitude (i.e. for which the value of the left side of equation 8 is largest) to that of the smallest magnitude.
- the first entry in this list is declared a real detection. Then this entry is compared to all others in the list. If another entry within the image is within a predetermined distance (in the preferred embodiment, the distance is half the radius of the object) of the first entry, it is assumed to correspond to the same object and it is discarded.
- this process repeats for the entry in the remaining list that has the largest magnitude (after the first entry and all entries matching to it have been removed); that is, this entry is now declared to be another real detection and is compared to all other entries in the remaining list whereby any entries that are close in distance to it are discarded. This process continues until the list is exhausted.
- the foregoing describes a system and method for detecting presence of a 3D object in a 2D image containing a 2D representation of the 3D object.
- the object finder according to the present invention may improve upon existing techniques for object detection both in accuracy and computational properties.
- a pre-selected number of view-based classifiers may be trained on sample images prior to performing the detection on an unknown image.
- the object detection program may then operate on the given input image and compute its partially overcomplete wavelet transform for the entire input image.
- the object detection program may then proceed with sampling of the wavelet coefficients at different image window locations on the input image, and apply each classifier involving linear projection of selected subsets of coefficients, quantization of linear projection coefficients and efficient look-up of pre-computed log-likelihood tables to determine object presence.
- the object finder's coarse-to-fine object detection strategy coupled with exhaustive object search across different positions and scales may result in an efficient and accurate object detection scheme.
- the object finder may detect a 3D object over a wide range in angular variation (e.g., 180 degrees) through the combination of a small number of classifiers each specialized to a small range within this range of angular variation.
- the object finder according to the present invention may also provide computational advantages over the existing state of the art. In particular, it is observed that although it may take many sub-classifier evaluations to confirm the presence of the object, it can often take only a few evaluations to confirm that an object is not present. It is therefore wasteful to defer a detection decision until all the sub-classifiers have been evaluated. According to one embodiment, the object finder thus discards non-object candidates after as few sub-classifier evaluations as possible.
- the coarse-to-fine strategy implemented by the object finder involves a sequential evaluation whereby after each sub-classifier evaluation, the object finder makes a decision about whether to conduct further evaluations or to decide that the object is not present.
- This strategy may be applied to the multi-resolution representation provided by the wavelet transform whereby the sub-classifier evaluations are ordered from low-resolution, computationally quick features to high-resolution computationally intensive features.
- the object finder may efficiently rule out large regions first and thereby it only has to use the more computationally intensive sub-classifiers on a much smaller number of candidates.
- the object finder may be trained to detect many different types of objects (e.g., airplanes, cat faces, telephones, etc.) besides human faces and cars discussed hereinabove.
- Some of the applications where the object finder may be used include: commercial image databases (e.g., stock photography) for automatically labeling and indexing of images; an Internet-based image searching and indexing service; finding biological structures in various types of biological images (e.g., MRI, X-rays, microscope images, etc.); finding objects of military interest (e.g., mines, tanks, etc.) in satellite, radar, or visible imagery; finding objects of interest to scientists (e.g., craters, volcanoes, etc.) in astronomical images; as a tool for automatic description of the image content of an image database; to achieve accurate color balancing on human faces and remove “red-eye” from human faces in a digital photo development; for automatic adjustment of focus, contrast, and centering on human faces during digital photography; to automatically point, focus, and center cameras on human faces
Abstract
Description
- [0001] The present invention has been supported by the United States Department of Defense through grant MDA904-00-C-2109. The United States government may have certain rights in this invention.
- Object recognition is the technique of using computers to automatically locate objects in images, where an object can be any type of three dimensional physical entity such as a human face, automobile, airplane, etc. Object detection involves locating any object that belongs to a category such as the class of human faces, automobiles, etc. For example, a face detector would attempt to find all human faces in a photograph, but would not make finer distinctions such as identifying each face.
- The challenge in object detection is coping with all the variations in appearance that can exist within a class of objects. FIG. 1A illustrates a
picture slide 10 showing some variations for human faces and cars. For example, cars vary in shape, size, coloring, and in small details such as the headlights, grill, and tires. Similarly, the class of human faces may contain human faces for males and females, young and old, bespectacled with plain eyeglasses or with sunglasses, etc. A person's race, age, gender, ethnicity, etc., may play a dominant role in defining the person's facial features. Also, the visual expression of a face may be different from human to human. One face may appear jovial whereas the other one may appear sad and gloomy. Visual appearance also depends on the surrounding environment and lighting conditions as illustrated by thepicture slide 12 in FIG. 1B. Light sources will vary in their intensity, color, and location with respect to the object. Nearby objects may cast shadows on the object or reflect additional light on the object. Furthermore, the appearance of the object also depends on its pose; that is, its position and orientation with respect to the camera. In particular, a side view of a human face will look much different than a frontal view. FIG. 1C shows apicture slide 14 illustrating geometric variation among human faces. - Therefore, a computer-based object detector must accommodate all this variation and still distinguish the object from any other pattern that may occur in the visual world. For example, a human face detector must be able to find faces regardless of facial expression, variation from person to person, or variation in lighting and shadowing. Most methods for object detection use statistical modeling to represent this variability. Statistics is a natural way to describe a quantity that is not fixed or deterministic such as a human face. The statistical approach is also versatile. The same statistical modeling techniques can potentially be used to build object detectors for different objects without re-programming.
- Techniques for object detection in two-dimensional images differ primarily in the statistical model they use. One known method represents object appearance by several prototypes consisting of a mean and a covariance about the mean. Another known technique consists of a quadratic classifier. Such a classifier is mathematically equivalent to the representation of each class by its mean and covariance. These and other known techniques emphasize statistical relationships over the full extent of the object. As a consequence, they compromise the ability to represent small areas in a rich and detailed way. Other known techniques address this limitation by decomposing the model in terms of smaller regions. These methods can represent appearance in terms of a series of inner products with portions of the image. Finally, another known technique decomposes appearance further into a sum of independent models for each pixel.
- The known techniques discussed above are limited, however, in that they represent the geometry of the object as a fixed rigid structure. This limits their ability to accommodate differences in the relative distances between various features of a human face such as the eyes, nose, and mouth. Not only can these distances vary from person to person, but also their projections into the image can vary with the viewing angle of the face. For this reason, these methods tend to fail for faces that are not in a fully frontal posture. This limitation is addressed by some known techniques, which allow for small amounts of variation among small groups of handpicked features such as the eyes, nose, and mouth. However, by using a small set of handpicked features these techniques have limited power. Another known technique allows for geometric flexibility with a more powerful representation by using richer features (each takes on a large set of values) sampled at regular positions across the full extent of the object. Each feature measurement is treated as statistically independent of all others. The disadvantage of this approach is that any relationship not explicitly represented by one of the features is not represented. Therefore, performance depends critically on the quality of the feature choices.
- Additionally, all of the above techniques are structured such that the entire statistical model must be evaluated against the input image to determine if the object is present. This can be time consuming and inefficient. In particular, since the object can appear at any position and any size within the image, a detection decision must be made for every combination of possible object position and size within an image. It is therefore desirable to detect a 3D object in a 2D image over a wide range of variation in object location, orientation, and appearance.
- It is also known that object detection may be implemented by applying a local operator or a set of local operators to a digital image, or a transform of a digital image. Such a scheme, however, may require that a human programmer choose the local operator or set of local operators that are applied to the image. As a result, the overall accuracy of the detection program can be dependent on the skill and intuition of the human programmer. It is therefore desirable to determine the local operators or set of local operators in a manner that is not dependant on humans.
- Finally, even with very high speed computers, known object detection techniques can require an exorbitant amount of time to operate. It is therefore also desirable to perform the object detection in a computationally advantageous manner so as to conserve time and computing resources.
- In one general respect, the present invention is directed to a system for determining a classifier (or detector) used by an object detection program where the classifier is decomposed into a set of sub-classifiers. According to one embodiment, the system includes (a) a candidate coefficient-subset creation module, (b) a training module in communication with the candidate coefficient-subset creation module, and (c) a sub-classifier selection module in communication with the training module. The candidate coefficient-subset creation module may create a plurality of candidate subsets of coefficients. The coefficients are the result of a transform operation performed on a two-dimensional (2D) digitized image. The training module may train a sub-classifier for each of the plurality of candidate subsets of coefficients. In one embodiment, the training module may train the set of sub-classifiers based on non-object training examples that combine examples selected by bootstrapping and examples selected randomly. Also the sub-classifier selection module may select certain of the plurality of sub-classifiers. The selected sub-classifiers may comprise the components of the classifier. Consequently, the present invention may automatically select the sub-classifiers, thereby eliminating the need for a human operator to select the sub-classifiers, which as described previously, is highly dependent upon the skill and intuition of the human operator.
- In another general respect, the present invention is directed to a method of generating a sub-classifier for a detector of an object detection program. According to one embodiment, the method includes transforming pixel values to wavelet coefficients and then linearly projecting the wavelet coefficients to create projection coefficients. The method further includes quantizing the projection coefficients and generating a table of log-likelihood values based on the quantizing. In addition, the method may further include providing lighting correction adjustments to the wavelet coefficients prior to linearly projecting the wavelet coefficients.
- In another general respect, the present invention is directed to a method for determining a set of sub-classifiers for a detector of an object detection program. According to one embodiment, the method includes creating a plurality of candidate subsets of coefficients and training a sub-classifier for each of the plurality of candidate subsets of coefficients. The method further includes selecting certain of the plurality of sub-classifiers.
- In another general respect, the present invention is directed to a system and a method for detecting instances of an object in a 2D (two-dimensional) image. According to one embodiment, the method may include, for each of a plurality of view-based classifiers, computing a transform of a digitized version of the 2D image containing a representation of an object, wherein the transform is a representation of the spatial frequency content of the image as a function of position in the image. Computing the transform generates a plurality of transform coefficients, wherein each transform coefficient represents corresponding visual information from the 2D image that is localized in space, frequency, and orientation. The method may also include applying the plurality of view-based classifiers to the plurality of transform coefficients, wherein each view-based classifier is configured to detect a specific orientation of an instance of the object in the 2D image based on visual information received from corresponding transform coefficients. Each of the plurality of view-based classifiers includes a plurality of cascaded sub-classifiers. The cascaded stages may be arranged in ascending order of complexity and computation time. Finally, the method includes combining results of the application of the plurality view-based classifiers, and determining a pose (i.e., position and orientation) of the instance of the object from the combination of results of the application of the plurality view-based classifiers. In one embodiment, a visual marker may be placed on the 2D image where the instance of the object is estimated. In another embodiment, the pose of the instance of the object may be stored for further processing, such as for red-eye removal, as but one example.
- Embodiments of the present invention will be described herein in conjunction with the following drawings, in which:
- FIGS.1A-1C illustrate different challenges in object detection;
- FIG. 2 illustrates a generalized operational flow for the object finder program according to an embodiment of the present invention;
- FIG. 3 depicts an exemplary setup to utilize the object finder program according to an embodiment of the present invention;
- FIGS. 4A and 4B illustrate the decision-making involving a fixed object size, orientation, and alignment according to an embodiment of the present invention;
- FIG. 5 shows the view-based classification approach utilized by the object finder program to detect object locations and orientations according to an embodiment of the present invention;
- FIG. 6 is a real-life illustration of the object classification approach outlined in FIG. 5;
- FIG. 7 shows an example of different orientations for human faces and cars that the object finder program may be configured to model;
- FIG. 8 depicts the general object detection approach used by the object finder program according to one embodiment of the present invention;
- FIG. 9 illustrates an exemplary histogram;
- FIG. 10 shows a set of subbands produced by a wavelet transform based on a two-level decomposition of an input image using a filter-bank according to one embodiment of the present invention;
- FIGS. 11A and 11B depict an input image and its wavelet transform representation using a symmetric 4/4 filter bank according to one embodiment of the present invention;
- FIG. 12 illustrates an example of how statistics for classifiers are collected off-line using a set of training images according to one embodiment of the present invention;
- FIG. 13 illustrate how classifiers are estimated using the AdaBoost algorithm according to one embodiment of the present invention;
- FIG. 14 outlines steps in training a sub-classifier;
- FIG. 15 illustrates the combining of histograms to form a log-likelihood look-up table;
- FIG. 16 is a flow chart illustrating operations performed by a view-based classifier during detection of an object at a specific orientation according to one embodiment of the present invention;
- FIG. 17A illustrates a wavelet decomposition, FIG. 17B illustrates a partially overcomplete wavelet decomposition, and fully FIG. 17C illustrates a fully overcomplete wavelet decomposition for a two level transform;
- FIGS. 18 and 19 illustrate the positional correspondence between a window sampled directly on the image and the same image window sampled with respect to the wavelet transform of the image according to one embodiment of the present invention;
- FIGS. 20, 21,22A and 22B further illustrate the object detection process for one scale of the input image according to one embodiment of the present invention;
- FIG. 23 illustrates the image scaling process as part of the overall object detection process shown in FIG. 16 according to one embodiment of the present invention;
- FIGS. 23A and 24 further illustrate the details of the image scaling process and corresponding wavelet transform computation according to one embodiment of the present invention;
- FIG. 25 depicts various images of humans with the object markers placed on the human faces, human eyes, and human ears as detected by the object finder according to one embodiment of the present invention;
- FIG. 26 illustrates various images of telephones with the object markers placed on the telephones detected by the object finder according to one embodiment of the present invention;
- FIG. 27 illustrates various images of door handles with the object markers placed on the door handles detected by the object finder according to one embodiment of the present invention;
- FIG. 28 is a diagram of a system for automatically choosing a set of sub-classifiers according to one embodiment of the present invention;
- FIG. 29 is a flowchart illustrating the process flow through the candidate coefficient-subset creation module according to one embodiment of the present invention;
- FIG. 30 is a flowchart illustrating the process flow through the sub-classifier selection module according to one embodiment of the present invention;
- FIG. 31 is a flowchart illustrating the process flow through the sub-classifier training module according to one embodiment of the present invention; and
- FIG. 32 illustrates the process of training multiple stages of the object detector according to one embodiment of the present invention.
- FIG. 2 illustrates an embodiment of a generalized operational flow for the object finder program according to an embodiment of the present invention. The object finder program (simply, the “object finder”) is represented by the
block 18. Adigital image 16 is a typical input to theobject finder 18, which operates on theimage 16 and generates a list of object locations and orientations for the 3D objects represented in the2D image 16. It is noted that the terms “image” and “digital image” are used interchangeably hereinbelow. However, both of these terms are used to refer to a 2D image (e.g., a photograph) containing two-dimensional representations of one or more 3D objects (e.g., human faces, cars, etc.). In one embodiment, as discussed hereinbelow in more detail, theobject finder 18 may place object markers 52 (FIG. 6) on each object detected in theinput image 16 by theobject finder 18. The input image may be an image file digitized in one of many possible formats including, for example, a BMP (bitmap) file format, a PGM (Portable Grayscale bitMap graphics) file format, a JPG (Joint Photographic Experts Group) file format, or any other suitable graphic file format. In a digitized image, each pixel is represented as a set of one or more bytes corresponding to a numerical representation (e.g., a floating point number) of the light intensity measured by a camera at the sensing site. The input image may be gray-scale, i.e., measuring light intensity over one range of wavelength, or color, making multiple measurements of light intensity over separate ranges of wavelength. - FIG. 3 depicts an exemplary setup to utilize the
object finder program 18 according to an embodiment of the present invention. An object finder terminal orcomputer 22 may execute or “run” the objectfinder program application 18 when instructed by a user. Thedigitized image 16 may first be displayed on the computer terminal or monitor display screen and, after application of the object finder program, a marked-up version of the input image (e.g., picture slide 50 in FIG. 6) may be displayed on the display screen of theobject finder terminal 22. The program code for the objectfinder program application 18 may be stored on a portable data storage medium, e.g., afloppy diskette 24, acompact disc 26, a data cartridge tape (not shown) or any other magnetic or optical data storage medium. Theobject finder terminal 22 may include appropriate disk drives to receive the portable data storage medium and to read the program code stored thereon, thereby facilitating execution of the object finder software. Theobject finder software 18, upon execution by a processor of thecomputer 22, may cause thecomputer 22 to perform a variety of data processing and display tasks including, for example, analysis and processing of theinput image 16, display of a marked-up version of theinput image 16 identifying locations and orientations of one or more 3D objects in theinput image 16 detected by theobject finder 18, transmission of the marked-up version of theinput image 16 to a remote computer site 28 (discussed in more detail hereinbelow), transmission of a list of object identities, locations and, orientations for the 3D objects represented in the 2D image to a remote computer site 28 (discussed in more detail hereinbelow), etc. - As illustrated in FIG. 3, in one embodiment, the
object finder terminal 22 may be remotely accessible from aclient computer site 28 via acommunication network 30. In one embodiment, thecommunication network 30 may be an Ethernet LAN (local area network) connecting all the computers within a facility, e.g., a university research laboratory or a corporate data processing center. In that case, theobject finder terminal 22 and theclient computer 28 may be physically located at the same site, e.g., a university research laboratory or a photo processing facility. In alternative embodiments, thecommunication network 30 may include, independently or in combination, any of the present or future wireline or wireless data communication networks, e.g., the Internet, the PSTN (public switched telephone network), a cellular telephone network, a WAN (wide area network), a satellite-based communication link, a MAN (metropolitan area network) etc. - The
object finder terminal 22 may be, e.g., a personal computer (PC), a laptop computer, a workstation, a minicomputer, a mainframe, a handheld computer, a small computer device, a graphics workstation, or a computer chip embedded as part of a machine or mechanism (e.g., a computer chip embedded in a digital camera, in a traffic control device, etc.). Similarly, the computer (not shown) at theremote client site 28 may also be capable of viewing and manipulating digital image files and digital lists of object identities, locations and, orientations for the 3D objects represented in the 2D image transmitted by theobject finder terminal 22. In one embodiment, as noted hereinbefore, theclient computer site 28 may also include theobject finder terminal 22, which can function as a server computer and can be accessed by other computers at theclient site 28 via a LAN. Each computer—theobject finder terminal 22 and the remote computer (not shown) at theclient site 28—may include requisite data storage capability in the form of one or more volatile and non-volatile memory modules. The memory modules may include RAM (random access memory), ROM (read only memory) and HDD (hard disk drive) storage. Memory storage is desirable in view of sophisticated image processing and statistical analysis performed by theobject finder terminal 22 as part of the object detection process. - Before discussing how the
object finder software 18 performs the object detection process, it is noted that the arrangement depicted in FIG. 3 may be used to provide a commercial, network-based object detection service that may perform customer-requested object detection in real time or near real time. For example, theobject finder program 18 at thecomputer 22 may be configured to detect human faces and then human eyes in photographs or pictures remotely submitted to it over the communication network 30 (e.g., the Internet) by an operator at theclient site 28. Theclient site 28 may be a photo processing facility specializing in removal of “red eyes” from photographs or in color balancing of color photographs. In that case, theobject finder terminal 22 may first automatically detect all human faces and then all human eyes in the photographs submitted and send the detection results to theclient computer site 28, which can then automatically remove the red spots on the faces pointed out by theobject finder program 18. Thus, the whole process can be automated. As another example, theobject finder terminal 22 may be a web server running the objectfinder software application 18. Theclient site 28 may be in the business of providing commercial image databases. Theclient site 28 may automatically search and index images on the World Wide Web as requested by its customers. The computer at theclient site 28 may “surf” the web and automatically send a set of images or photographs to theobject finder terminal 22 for further processing. Theobject finder terminal 22, in turn, may process the received images or photographs and automatically generate a description of the content of each received image or photograph. The depth of image content analysis may depend on the capacity of theobject finder software 18, i.e., the types of 3D objects (e.g., human faces, cars, trees, etc.) theobject finder 18 is capable of detecting. The results of image analysis may then be transmitted back to the sender computer at theclient site 28. - It is noted that the owner or operator of the
object finder terminal 22 may commercially offer a network-based object finding service, as illustrated by the arrangement in FIG. 3, to various individuals, corporations, or other facilities on a fixed-fee basis, on a per-operation basis or on any other payment plan mutually convenient to the service provider and the service recipient. - I. Object Finding using a Classifier
- A primary component of the object finder is a classifier. FIG. 4A illustrates a
classifier 34 according to one embodiment of the present invention. The input to theclassifier 32 is fixed-size window sampled from aninput image 16. The classifier operates on the fixedsize image input 32 and makes a decision whether the object is present in theinput window 32. The decision is a binary one in the sense that the output of theclassifier 34 represents only two values—either the object is present or the object is not present. In one embodiment the classifier only identifies the object's presence when it occurs at a pre-specified size and alignment within the window. As described in more detail hereinafter, according-to one embodiment a classifier may comprise a plurality of cascaded sub-classifiers. As described herein, the cascaded stages may be arranged in ascending order of complexity and computation time. - FIG. 8 depicts the general object detection approach used by the
object finder program 18 according to one embodiment of the present invention. The object finder must apply theclassifier 34 repeatedly tooriginal image 58 for all possible (and, maybe overlapping) positions of thisrectangular image window 32 as shown in FIG. 8. The process makes it possible for the object finder to detect instances of the object at any position within an image. Then, to be able to detect the object at any size, theobject finder program 18 may iteratively resize the input image and re-apply the classifier in the same fashion to each resizedimage rectangular window 32. It is noted that the size of therectangular image window 32 may remain fixed throughout the whole detection process. The size of theimage window 32 may be empirically selected based on a number of factors including, for example, object shape, desired accuracy or resolution, resulting computational complexity, efficiency of program execution, etc. In one embodiment, the size of the rectangular window is 32×24 pixels. - A classifier may be specialized not only in object size and alignment, but also object orientation. In one embodiment shown in FIG. 5, the
object finder 18 uses a view-based approach with multiple classifiers that are each specialized to a specific orientation of the object as described and illustrated with respect to FIG. 6. Thus, a predetermined number of view-based classifiers may be applied in parallel to theinput image 16 to find corresponding object orientations. In the embodiment illustrated in FIG. 5, there are “m” view-based classifiers. Each of the view-based classifiers is designed to detect one orientation of a particular object (e.g., a human face).Blocks object orientations block 42. The combined output indicates specific 3D objects (e.g., human faces) present in the input 2D image. - It is noted that although the following discussion illustrates application of the
object finder program 18 to detect human faces and cars in photographs or other images, that discussion is for illustrative purpose only. It can be easily evident to one of ordinary skill in the art that theobject finder program 18 of the present invention may be trained or modified to detect different other objects (e.g., shopping carts, faces of cats, helicopters, etc.) as well. - FIG. 6 is a real-life illustration of the object classification approach outlined in FIG. 5. As noted hereinbefore, each view-based classifier is specialized to detect a specific orientation of a given object—i.e., the object (e.g., a human face, or a car) that the view-based classifier is trained to detect. As illustrated in FIG. 6, for example, one classifier may be specialized to detect right profile views of faces as shown by the object marker52 (generated by the classifier upon detecting the corresponding object orientation) in the
picture slide 44. The picture slide 44 may thus represent the result obtained atblock 36 in FIG. 5. Similarly, a different view-based classifier may be specialized to detect frontal views as illustrated by the marked-up version of thepicture slide 46 in FIG. 6 (corresponding, for example, to block 38 in FIG. 5). Finally, another classifier may be configured to detect left profile views of human faces as illustrated by the marked-up version of thepicture slide 48 in FIG. 6 (corresponding, for example, to block 40 in FIG. 5). Each picture slide shows objectmarkers 52 placed at appropriate orientations of human faces detected by corresponding classifiers. These view-based classifiers are applied to theinput image 16 independently and their results are then combined as shown by the final picture slide 50 in FIG. 6 (corresponding, for example, to theblock 42 in FIG. 5). If there are multiple detections at the same or adjacent locations, theobject finder 18 may choose the strongest detection. For example, in FIG. 6, picture slides 46 and 48 represent multiple detections (frontal face detection and left-hand side view detection) for the female face illustrated therein. In that event, the final combined output may represent the strongest detection—i.e., the frontal face detection inslide 46. Theobject finder 18 may thus find orientations and locations of multiple objects (e.g., several human faces) in an image. - FIG. 7 shows an example of different orientations for human faces and cars that the
object finder program 18 may be configured to model. The number of orientations to model for each object (e.g., a human face or a car) may be empirically determined. In the embodiment illustrated in FIG. 7, two view-based classifiers—frontal (54A) and right profile (54B)—are used to detect front and right profiles of human faces. To detect left-profile faces (as, for example, illustrated in thepicture slide 48 in FIG. 6), theright profile classifier 54B may be applied to a mirror-reversed input image. For cars, eight classifiers—onefrontal classifier 56A and seven right-side classifiers 56B-56H—may be used as shown in FIG. 7. Again, the left side views (of cars) may be detected by running the seven right-side classifiers (56B-56H) on mirror-reversed images. It is noted that thenumerals 54A-54B and 56A-56H are used hereinbelow to represent corresponding view-based classifiers for ease of description. - II. Classifier Description and Generation
- As noted hereinbefore, a challenge in object detection is the amount of variation in visual appearance, e.g., faces vary from person to person, with facial expression, lighting, etc. Each view-based classifier (e.g.,
classifiers 54A-54B or 56A-56H in FIG. 7) uses statistical modeling to account for this variation within the category of object it is trained to detect. - In one embodiment two statistical distributions are modeled for each view-based classifier—the statistics of the appearance of the given object in the
image window 32, P(image-window|ω1) where ω1=object, and the statistics of the visual appearance of the rest of the visual world, which are identified by the “non-object” class, P(image-window|ω2), where ω2=non-object. The classifier combines these in a likelihood ratio test. Thus, theclassifier 34 may compute the classification decision by retrieving the probabilities associated with the giveninput image window 32, P(image-window|ω1) and P(image-window|ω2), and using the log likelihood ratio test given in equation (3) below: - If the log likelihood ratio (the left side in equation (3)) is greater than the right side, the
classifier 34 decides that the object is present. Here, “λ” represents the logarithm of the ratio of prior probabilities (determined off-line as discussed later hereinbelow). Often, prior probabilities are difficult to determine, therefore, by writing the decision rule this way (i.e., as the equation (3)), all information concerning the prior is combined into one term “λ”. - The term “λ” can be viewed as a threshold controlling the sensitivity of a view-based classifier. There are two types of errors a classifier can make. It can miss the object (a false negative) or it can mistake something else for the object (a false positive)(such as a cloud pattern for a human face). These two types of errors are not mutually exclusive. The “λ” controls the trade-off between these forms of error. Setting “λ” to a low value makes the classifier more sensitive and reduces the number of false negatives, but increases the number of false positives. Conversely, increasing the value of “λ” reduces the number of false positives, but increases the number of false negatives. Therefore, depending on the needs of a given application, a designer can choose “λ” empirically to achieve a desirable compromise between the rates of false positives and false negatives.
- It is noted that the log likelihood ratio test given in equation (3) is equivalent to Bayes decision rule (i.e., the maximum a posteriori (MAP) decision rule) and will be optimal if the representations for P(image-window|object) and P(image-window|non-object) are accurate. The functional forms chosen to approximate these distributions are discussed hereinbelow.
- A. Classifier as a Sum of Sub-Classifiers
- It is not computationally possible to represent the full joint distributions, P(image-window|object) and P(image-window|non-object). The
image window 32 may encompass several hundred or even thousands pixel variables. It is not computationally feasible to represent the joint distribution of such a large number of variables without strong assumptions about their statistical structure. Therefore, these distributions must be approximated by making assumptions about their statistical characteristics. The chosen functional form for these distributions represents these assumptions about statistical characteristics. One such assumption is to use the naÏve Bayes classifier formulation that models all variables as statistically independent. However, such an assumption may be too severe for many problems. It may be desirable to represent statistical dependency in a limited fashion. One such formulation is to model the joint statistics of selected subsets of variables and then treat the subsets as statistically independent. Under this assumption, the classifier, H(image window) representing equation (3) takes the following form: - Where the
image_window 32 consists of the variables (consisting of pixels or coefficients generated by a transformation on the pixels) {x1 . . . xr} and where each Sk is a subset of these variables and the subsets, Sk, are not necessarily mutually exclusive. -
- In equation (8A), each of the individual terms of the equation will henceforth be referred to as a “sub-classifier” within the classifier. The probability distributions forming each sub-classifier can take many functional forms. For example, they could be Gaussian models, mixture models, kernel-based non-parametric representation, etc. Moreover, the classifier can be expressed as a sum of sub-classifiers:
- H(x 1 , . . . x r)=h 1(S 1)+h 2(S 2)+ . . . +h n(S n)>λ (8B)
- Note that each such sub-classifier, hk(Sk), does not necessarily have to take the form of a ratio of two probability distributions. Discriminant functions of various forms (e.g. logistic linear discriminant function, multilayer perceptron neural networks, etc.) are also admissible. Nor does each sub-classifier have to be the same functional form. However, as described in more detail hereinafter, in one embodiment each probability distribution in each sub-classifier in equation (8A) is represented by a table.
- In forming the decomposition of the classifier into sub-classifiers, equation (8) implicitly assumed that the subsets, Sk, are statistically independent for both the object and the non-object. However, it can be shown that this assumption can be relaxed if the goal is accurate classification not accurate probabilistic modeling as discussed in P. Domingos and M. Pazzani, “On the Optimality of the Simple Bayesian Classifier under Zero-One Loss”, Machine Learning, 29, pp. 103-130, 1997. Indeed, they show that violating statistical independence for a naïve Bayes classifier does not always degrade performance. They show that the naïve Bayes classifier gives good empirical performance, comparable to other classifiers, on a number of problems in which statistical independence does not exist among the input variables. They also prove that it is theoretically optimal for a few cases in which statistical independence does not hold, such as conjunctions and disjunctions. However, for most cases, the complex behavior when statistical independence assumptions are violated makes analysis difficult.
- In one embodiment, the selection of the subsets of input variables, Sk, supplying each sub-classifier of the classifier of equation (8A) may be achieved by the statistical methods as described hereinbelow.
- B. Sub-Classifier Description and Generation
- FIG. 28 is a block diagram of a
system 210 for automatically creating sub-classifiers according to one embodiment of the present invention. Thesystem 210 can use statistical methods to choose the sub-classifiers composing each classifier of the object finder program. Thesystem 210 may be implemented using a computing device such as, for example, a personal computer, a laptop computer, a workstation, a minicomputer, a mainframe, a handheld computer, a small computer device, or a supercomputer, depending upon the application requirements. - As illustrated in FIG. 28, the
system 210 may include training images for theobject class 228, training images for thenon-object class 226, and cross-validation images (testing images in which the locations of the object are labeled) 230. In addition, thesystem 210 may include a candidatesubset creation module 212, a linear projectionvector creation module 214, a quantizationthreshold creation module 216, a candidatesub-classifier training module 218, asub-classifier selection module 220, asub-classifier retraining module 222, and a detectionthreshold determination module 224. Thesystem modules system 210 using any suitable computer language such as, for example, Java, Ada, C or C++ using, for example, conventional or object-oriented techniques. The software code may be stored as a series of instructions or commands on a computer-readable medium, such as a random access memory (RAM), a read only memory (ROM), a magnetic medium such as a hard-drive or a floppy disk, or an optical medium such as a CD-ROM. - The
object training images 228 are representative example images of the object. (e.g., human faces or cars). In one embodiment, for each face viewpoint, about 2,000 original images are used; and for each car viewpoint, between 300 and 500 original images are used. Each of these training images can be sized, aligned, and rotated to give the best correspondence with a prototype representing the image class (e.g., frontal faces). The size of each such training image may be identical to the size of theclassification window 32. For each original image, approximately 400 synthetic variations can also be generated by altering background scenery and making small changes in aspect ratio, orientation, frequency content, and position. It is noted that increasing the number of original images and synthetic variations will increase the computational time required for the modules in 210 but may also increase the accuracy of the classifier. The number of original training images and the number of synthetic variation each original image may be determined by the desired accuracy of detection, the availability of suitable training images, and limitations on the amount of time and computer resources that can be devoted to the computations among the modules in 210. - Non-object examples226 are taken from images that do not contain the object. In one embodiment, approximately 600,000 examples are used. The selection of non-object examples is described in more detail hereinafter.
- The
cross-validation images 230 are images of realistic scenes that often contain the object. The locations of the object are known (usually entered by hand) and used to measure and compare the accuracy of various components of the algorithm as described hereinbelow. - 1. Creating a Set of Candidate Subsets
- According to one embodiment, the candidate
subset creation module 212 may create a set of candidate subsets of input variables. Each subset, Sk, provides the input to one sub-classifier. FIG. 29 is a flow chart illustrating the process flow for the candidate coefficient-subset creation module 212 according to one embodiment of the invention. The steps of FIG. 29 are described in more detail hereinbelow. - The input variables may be pixels or variables derived from a transformation of the input pixels. In one embodiment, the input variables are wavelet coefficients, generated by applying, for example, 5/3 or 4/4 symmetric filter banks to the input pixels. In one embodiment the coefficients of a symmetric 4/4 filter bank are (1.0, 3.0, 3.0, 1.0) for the low-pass filter and (−1.0, −3.0, 3.0, 1,0) for the high pass filter. In another embodiment the coefficients of the 5/3 filter bank are (−1.0, 2.0, 6.0, 2.0, −1.0) for the low pass filter and (2.0, −4.0, 2.0) for the high-pass filter. Filter-bank implementation for any filter-pair is discussed in G. Strang and T. Nguyen, “Wavelets and Filter Banks”, Wellesley-Cambridge Press, 1997, the disclosure of which is incorporated herein by reference.
- FIG. 10 shows an exemplary set of subbands produced by a wavelet transform using a 2 (two) level decomposition of an input image. The wavelet transform organizes the input image into subbands that are localized in orientation and frequency. For the embodiment illustrated in FIG. 10, the filter-bank produces 7 (seven) subbands—four
subbands 70A-70D at level-2 and threesubbands 72A-72C at level-1. Within each subband, each wavelet transform coefficient 80 (FIG. 11) is spatially localized. - FIG. 11A depicts an
input window 32 and FIG. 11B depicts its two levelwavelet transform representation 78 generated by a symmetric 4/4 filter bank. Seven subbands are visible on thewavelet decomposition 78. Thewavelet transform coefficients 80 are also shown in FIG. 11B. Thecoefficients 80, as discussed above, are spatially localized within appropriate subbands. It is noted that each level in a wavelet transform represents a lower octave of frequencies. Thus, a coefficient in level-2 (i.e., subbands 70A-70D) describes 4 (four) times the area of a coefficient in level-1 (i.e., subbands 72A-72C). In other words, thewavelet representation 78 shows a gradation of details (of the input image) with level-2 coefficients representing coarse details and level-1 coefficients representing finer details. - In one embodiment an overcomplete wavelet transform is generated by a polyphase filter bank or other suitable computational method (e.g. lifting) applied to the
input window 32 as described in Strang and Nguyen. - In one embodiment, each wavelet transform may consist of two (2) or more levels (see, for example, FIG. 10 for a two level example). It is generated by the process shown in FIG. 17A. In this process, an input is transformed to a
level 1 transform. The LL band oflevel 1 is then expanded to generatelevel 2. If a third level or more levels are desired, each level is generated from the LL subband of the level that preceded it. - The fully overcomplete wavelet transform at each stage in this process is a redundant version of the ordinary wavelet transform. In the overcomplete wavelet transform, four (4) redundant “phases” are generated at each stage in this process as shown in FIG. 17C (as compared with one phase in the critically sampled case of FIG. 18A). Each phase, the even-even (EE) phase, the even-odd (EO) phase, the odd-even (OE) phase, and the odd-odd (00) phase correspond to a positional shift of the input. For example, the odd-odd phase of
level 1 corresponds to the wavelet transform of the input image shifted by one in both the horizontal and vertical directions. If this transform is thought of as a tree, any branch (or path) starting at the input image and terminating inlevel 2 could be thought of as a redundant wavelet transform. For example the combination oflevel 1 OO and thelevel 2 OO (generated fromlevel 1 OO) would be one redundant wavelet transform corresponding to the critically sampled wavelet transform of the input shifted by 3 in both directions. In this representation there are 16 such redundant transforms. - In one embodiment, on each training example, the fully overcomplete transform is computed. This process effectively gives sixteen (16) synthetic variations of the originally training example where the variations correspond to positional shifts of the input as described hereinabove. Each of these sixteen (16) variants will each be henceforth be separate training examples and the wavelet coefficients forming each are the variables, which are decomposed into subsets.
- These wavelet variables may be decomposed into subsets using the following process. Let C be a measure given by the absolute difference between the “true” log-likelihood ratio, when a subset of variables is modeled by its full joint distribution, and the log-likelihood ratio when the subset of variables is modeled with partial or complete statistical independence. Referring to FIG. 29, C can be calculated for every combination of two variables at
block 236 using equation (9) below: - In one embodiment, C is computed by quantizing each variable and estimating the probability distributions by using histograms collected from the training examples from each class, ω1 (object training examples) and ω2 (non-object training examples). In one embodiment, each variable is quantized to five levels, where the quantization levels are chosen as a function of the mean (μ) and standard deviation (σ) of the variable with respect to the ω1 class with thresholds at μ−0.7σ, μ−0.15σ, μ+0.15σ, μ+0.7σ. Each joint distribution is represented by a histogram with twenty-five (25) bins and each distribution of one variable is represented by a histogram of five (5) bins. A discussion of histograms follows hereinbelow.
-
- where N represents the number of elements in the subset. A high value of DS corresponds to a high degree of dependence among the variables in the subset.
- In one embodiment, D can be used to select a set of subsets with high degrees of dependence at
block 238 in FIG. 29. Due to the sheer number of possible combinations, it can be impractical to evaluate equation (10) for all possible subsets of variables, so an alternative method can be used. For each particular variable, the best subsets containing that particular variable, and up to N total variables can be selected by heuristic search instep 238. In this heuristic search the heuristic evaluation function is simply D, given by equation (10). The result ofstep 238 may guarantee that each variable will occur in at least N initial candidate subsets. N is the range of subset sizes that, in one embodiment, can be between two and thirty, for example. The set of best subsets resulting fromstep 238 can comprise the set of initial candidate subsets 240. - The set of initial candidate subsets240 may be broken down further into groups of subsets containing the same number of variables. A criterion can be assigned to each subset within such a group of subsets. In one embodiment, the criterion can initially be a Mahalanobis distance (M), calculated in
step 242. M for a specific subset is computed by dividing the Euclidean distance between its value of D and the mean of the value of D ({overscore (D)}) of all members of the group of subsets, by the variance ({overscore (D)}σ) of the same. The Mahalanobis distance is given by equation (11) below: - The subset with the greatest Mahalanobis distance can, in one embodiment, become the first member of the set of chosen
candidate subsets 246 instep 244. Then, the subset criteria for all remaining candidate subsets may be recalculated instep 248. Recalculating the subset criteria can avoid the selection of a group of subsets containing largely the same variables. For example, a group of subsets chosen by Mahalanobis distance only, without recalculation, may be no more than supersets or subsets of each other. - In one embodiment, the criterion can be recalculated by penalizing each remaining candidate subset based on its commonality with those subsets that have already been selected. The remaining candidate subsets can be penalized, for example, for: (1) the number of times a given variable has occurred in any selected set, (2) the largest union with any selected set, (3) the number of times a subset of that size has already been selected, band/or (4) the number of times that particular combination of subbands has occurred among selected subsets. In one embodiment, the subsets are scored by the following criterion: mahalanobis_distance*size_factor*description_factor*max_overlap*total_overlap. Each of the factors multiplying the Mahalanobis distance reduces the value of criterion as a function of the subset's overlap with previously selected subsets. The size factor penalizes for the number of subsets of the current size N. For example, if the there are current ni subsets of size N=Ni, and there are a total of nt selected subsets, then the size factor is (nt−nI)/nt. The description factor penalizes for the number of times a particular combination of subbands has been used in the previously selected subsets. For example, for a 2 level transform there are seven (7) subbands:
level 1—HL,level 1—LH,level 1—HH,level 2—LL,level 2—HL,level 2—LH,level 2—HH and hence there are 27 possible combinations of these subbands. Each subset will be one of these combinations. For a given subset that has combination k, the description factor is given by (nt−nk)/nt where nk is the number of times combination k has occurred among the selected subsets. The max overlap factor penalizes for the most elements the current subset has in common with any individual chosen subset. For example if subset i has nm elements in common with subset k (which has been previously selected) which has nk elements, the max overlap factor is (max (ni, nk)−nm)/max(ni, nk). The total overlap factor penalizes for all coefficients in the current subset has in common with coefficients from all the chosen subsets. The total overlap factor is given by (ni−no+1)/ni, where ni is the total number of coefficients in subset i and no is the number of these coefficient that occur in any of the chosen subsets. - After the criterion for all remaining candidate subsets have been recalculated, the best candidate subset can again be chosen in
step 244 to become a member of the set of chosen candidate subsets instep 246. The criterion for all remaining subsets can again be recalculated instep 248. In one embodiment, this process can be repeated until there are, for example, 400 subsets in the set of chosen candidate subsets. - 2. Creating Linear Projection Vectors
- In one embodiment, each subset of variables can be represented by a linear projection to a smaller number of coefficients. For example, if twelve wavelet coefficients, w1, . . . , w12, form a given subset, they may be projected down to five coefficients, p1, . . . , p5, where each pk is given by:
- p k v k T w
- w=(w1, . . . , w12)T
- In one embodiment the linear projection vectors, vk, are determined by several methods: principal components vectors computed from the object training set, principal components computed over the non-object set, principal components computed over the combined object and non-object training sets, (one skilled in the art of statistics and linear algebra is familiar with the process of principal component analysis) or the Foley-Sammon discriminant vectors (multidimensional extension of Fisher Linear discriminant) between both classes (Foley, D. H. and Sammon, J. W. (1975). An Optimal Set of Discriminant Vectors. IEEE Transactions Computers. Vol. C-24, pp. 281-289.). In one embodiment, the various subbands may be multiplied by scalar constants prior to this computation and correspondingly prior to projection on these linear vectors. In one embodiment all 5/3 filter bank coefficients in all
level 1 subbands are multiplied by 0.25 and all coefficients in alllevel 2 subbands are multiplied by 0.0625. In another embodiment, all 4/4 filter bank coefficients inlevel 1 are multiplied by 0.0156 and all coefficients inlevel 2 are multiplied by 0.00024414. - 3. Selecting Quantization Thresholds
- In one embodiment each subset of projection coefficients can be represented by one discrete value that takes on a finite range of values called the (“quantized feature value”) represented by the variable, f. This transformation may be achieved by quantization of the projection coefficients. Several methods of quantization may be used and their quantization thresholds may be determined by the following procedure:
- In one method, (referred to herein for the sake of convenience as “
scalar quantization 1”) each variable is first separately quantized. The quantization boundaries may be set in terms of the mean (μ) and standard deviation (σ) of the variable computed over the object training images. For example, a variable could be quantized to five (5) values with the following quantization boundaries: - d<μ−σ
- μ−σ≦d<μ−0.5σ
- μ−0.5σ≦d<μ+0.5σ
- μ+0.5σ≦d<μ+σ
- μ+σ≦d
- The quantized feature value, f can then be uniquely computed from this conglomerate of the quantized projection coefficient values. For example if there are three quantized projection values, e1, e2, and e3, that each take on 5 possible values from 0 to 4, then f takes a value from 0 to 124 given by:
- f=e 1+5e 2+52 e 3
- In another method, (referred to herein as “
vector quantization # 1”), the projection coefficients can be quantized by a form of vector quantization. The final quantized feature value, f, is computed from a truncated ordering of the coefficients magnitudes. For example, in one embodiment with 5 projection coefficients, the 3 largest coefficients are placed in order of their magnitude. There are 60 (=5!/2!) possible orderings of these 3 largest values. Each of these projection coefficients may have a positive or negative sign. The f combines the ordering of the coefficients with their signs (positive or negative) giving a total 480 (=60*23) possible values for f. - Another method (referred to as “vector quantization #2) may modify
vector quantization # 1 by considering up to three (3) values whose magnitude exceeds some pre-specified threshold. In one embodiment this threshold is chosen as twice the mean of the coefficients corresponding to the top three (3) projection vectors (in the case of projection vectors derived from principal components analysis) computed from the object training images. F takes on five hundred seventy-one (571) values given by four hundred eighty (480) values (if three coefficients exceed the threshold) plus eighty (80) values (if two coefficients exceed the threshold) plus ten (10) values (if one value exceeds the threshold) plus one (1) value (if no values exceed the threshold). - Another method (referred to as “vector quantization #3) is a modification of “
vector quantization # 2. It quantizes the coefficient due to the first principal component separately. In one embodiment it quantizes this coefficient into 5 levels where the thresholds for these levels are given by: - d<μ−σ
- μ−σ≦d<μ−0.5σ
- μ−0.5σ≦d<μ+0.5σ
- μ+0.5σ≦d<μ+σ
- μ+σ≦d
- This method then applies the vector
quantization scheme # 2 by ordering the top three (3) of the four (4) remaining coefficients. There are two hundred forty-nine (249) possible values for this value. f overall then has 1245 possible values corresponding to the product of these 249 possible values with five (5) possible values for the quantized first coefficient. - Another method (referred to as “vector quantization #4) is also a modification of
vector quantization # 2. This method appliesvector quantization # 2. Then it applies a second threshold to the ordered coefficients. In one embodiment this threshold is the four times the mean of the coefficients corresponding to the top three (3) projection vectors (in the case of projection vectors derived from principal components analysis) computed from the object training images. This method then counts the number of coefficient that exceed this threshold. This number can range from zero (0) to three (3). Therefore, f has four times as many possible values as it does forvector quantization # 2. -
- where N is the number of wavelet coefficients in the subset and Q is the number of projection vectors. In one embodiment, this value can be quantized to four (4) levels. The quantization thresholds may be 0.5gave, gave, 2.0 gave where gave is the average value of g computed over the object training image set. Combining this measurement with any other quantized measurement increases the total number of quantization bins by a factor of four (4).
-
- where Q is the number of projection vectors. In one embodiment, this variable is quantized to four (4) levels. The quantization thresholds may be 0.5have, 2.0have, 4.0have where have is the average value of h computed over the object training image set. Combining this measurement with any other quantized measurement increases the total number of quantization bins by a factor of four (4).
- Another quantization method (referred to as “scalar quantization 1-A”) combines
scalar quantization # 1 with the energy of the projection vectors measurement. - Another quantization method (referred to as “vector quantization 1-A”) combines
vector quantization # 1 with the energy of the projection vectors measurement. - Another quantization method (referred to as “vector quantization 2-A”) combines
vector quantization # 2 with the energy of the projection vectors measurement. - Another quantization method (referred to as “vector quantization 3-A”) combines
vector quantization # 3 with the energy of the projection vectors measurement. - Another quantization method (referred to as “vector quantization 4-A”) combines
vector quantization # 4 with the energy orthogonal of the projection vectors measurement. - Another quantization method (referred to as “scalar quantization 1-B”) combines
scalar quantization # 1 with the energy orthogonal to the projection vectors measurement. - Another quantization method (referred to as “vector quantization 1-B”) combines
vector quantization # 1 with the energy orthogonal to the projection vectors measurement. - Another quantization method (referred to as “vector quantization 2-B”) combines
vector quantization # 2 with the energy orthogonal to the projection vectors measurement. - Another quantization method (referred to as “vector quantization 3-B”) combines
vector quantization # 3 with the energy orthogonal to the projection vectors measurement. - Another quantization method (referred to as “vector quantization 4-B”) combines
vector quantization # 4 with the energy orthogonal to the projection vectors measurement. - Hereinafter discusses an embodiment that uses various combinations of these quantization methods.
- 4. Training Each Candidate Sub-Classifier
- As mentioned earlier, each sub-classifier can take many functional forms (e.g. neural network, linear discriminant function, kernel-density function, etc.) computed over the
input classification window 32. In one embodiment described in more detail hereinbelow, a table of log-likelihood values represents the functional form of each sub-classifier where each entry in the table corresponds to a different value of f, the quantized feature value described hereinabove. - In one embodiment the log-likelihood values in the table are determined from the training data. As illustrated in FIG. 31, this training process may include, gathering histograms over object and non-object training images (
steps 296A, B), normalizing the histograms to compute P(Sn|ω1) and P(Sn|ω2) (steps 298A, B), and combining these distributions to get a table of log-likelihood values (step 300). - FIG. 9 illustrates an
exemplary histogram 68. Thehistogram 68 shown in FIG. 9 is for illustrative purposes only. In actual operation, the set of histograms for the classifier may contain many more histograms with many different values. A histogram counts the frequency of occurrence of values of a given function. Each column in a histogram is called a “bin.” The bin is a count of the number of times a specific value of the given function has occurred. Thus, for example, the bin for y=6 in FIG. 9 shows that the value y=6 has occurred 15 (fifteen) times. - In one embodiment, statistics for the object training images may be gathered in
step 296A (FIG. 31). As shown in FIG. 12, a discrete value, f, (the quantized feature value based on quantization of the linear projection and the subset of variables) is computed for each training image. It is noted that, because of quantization, there may be more than one combination of values producing the same discrete value. In the example of FIG. 12 the quantizer for sub-classifier f1 takes the value “567”, whereas the quantizer for sub-classifier fk takes the value “350”. - Histograms can be collected by counting the number of occurrences of each quantized value across the set of training images. Then, a table of probabilities can be generated for each sub-classifier from the histogram of that sub-classifier as shown in FIG. 12. Each probability value in the table corresponds to a bin in the respective histogram. For example, for sub-classifier ‘f1’, to compute the probability of pattern value “567” the bin count H1(#567) is divided by the count of all bins for histogram H1 (i.e., ΣH1 (#i)). Other probabilities may be similarly calculated. This process represents the normalization steps in
blocks - FIG. 14 outlines steps in training a sub-classifier according to one embodiment. As illustrated in FIG. 14, each training image may be aligned and its intensity normalized at
step 400. Atstep 402, synthetic variations of the training image may be generated. Then, the overcomplete wavelet transform may be computed atstep 404. For each phase, atstep 406, wavelet coefficients for the sub-classifier may be sampled. Atstep 408, linear projection coefficients may be computed. Atstep 410, the coefficients may be quantized. Next, atstep 412, the histogram may be updated. - In one embodiment, as illustrated in FIG. 15, a log-likelihood table (LLT) can be computed to correspond to each pair of histograms (object and non-object) corresponding to each sub-classifier as noted hereinbefore. To compute this log-likelihood table, corresponding entries in each probability table are retrieved. For example, in each probability distribution, there may be entries for quantized feature value “567”. Then the logarithm of the ratio of the object probability divided by the non-object probability becomes the entry in the log-likelihood table for this quantized feature value.
- 5. Choosing Combinations of Sub-Classifiers
- The
sub-classifier selection module 220 in FIG. 28, according to one embodiment, may choose the best sets of sub-classifiers for implementation according to the process illustrated in FIG. 30. In one embodiment of the present invention, the sets of sub-classifiers may be chosen according to a series of criteria evaluated by tests. The first test may be computationally simple. Later tests may be progressively more computationally complex and also more accurate. - A number of criteria can be used to evaluate sub-classifiers, including, but not limited to, the “Margin”, given by equation (15) below, and the area under a Receiver Operator Curve (hereinafter “ROC curve”). A ROC curve is a plot of the number of objects classified correctly versus number of false positives for a given classifier evaluated on a given set of test images. Each point on the plot represents evaluation for a different value of λ. The area under the ROC curve is related to the performance of the classifier. Greater area indicates better performance of the algorithm; that is, for example, in face detection, a high area means that a high number of faces classified correctly can be achieved with a low number of false positives.
-
- where xk,1 . . . xk,y represent the kth input to the classifier, H(xk,1 . . . xk,y) represents the output predicted by the classifier, yk represents the actual value of the output corresponding to this input, and β is a small value, which in one embodiment is set equal to 0.1. In one embodiment, the variable K tracks the number of sub-classifiers per chosen set. The value of the variable K can initially be set to one in
step 268. The best Q sets of sub-classifiers containing K sub-classifiers can then be chosen instep 270 using the Margin criterion evaluated over the training images of the object (block 228 in FIG. 28) and the training images of the non-object (block 226 in FIG. 28). - In one embodiment, H(xk,1 . . . xk,y) is computed in the following fashion. This method independently evaluates each candidate sub-classifier on each of the training example (
blocks - In one embodiment, the area under the ROC curve is calculated for each of the Q sets of sub-classifiers selected in
step 270. The best M candidate sets of k sub-classifiers can then be chosen instep 272 based on the ROC area criterion. Instep 276, the value of K can be incremented by one. Then, atstep 278 candidate combinations of size K can be created by adding another sub-classifier to each of the Mcandidates of size K−1. The process can begin again atstep 270 for sets of sub-classifiers of size K. The process can be completed when K reaches a value of 20, for example. In one embodiment, the ROC curve of these final M candidate sub-classifiers can be evaluated instep 274 on the cross-validation data (block 230 in FIG. 28). The best set of K sub-classifiers can then be chosen according to this criterion - 6. Retraining Chosen Sub-Classifiers using Adaboost
- In one embodiment the set of sub-classifiers chosen by the method described above may have their log-likelihood tables recomputed by using a method called AdaBoost with Confidence Weighted Predictions algorithm discussed in R. E. Shapire, Y. Singer, “Improving Boosting Algorithms Using Confidence-rated Predictions”, Machine Learning, 37:3, pp. 297-336, December, 1999 (hereafter, “Shapire & Singer”), the disclosure of which is incorporated herein by reference in its entirety.
- The AdaBoost algorithm is a general method for training pattern classifiers. Its chief advantage is that it minimizes the classification error on the training set and maximizes the margin between the two classes on the training set as discussed in Shapire & Singer. AdaBoost is a general method that can be applied to any type of classification algorithm. Given any classifier, AdaBoost works by sequentially re-training multiple instances of the classifier, where, for example, each instance corresponds to a different set of values for the look-up tables comprising the terms in equation (8A). To perform classification, AdaBoost applies all of such instances of the classifier in combination and computes the weighted sum of their output to make a classification decision. A disadvantage of this approach is the increased computational cost of applying all the classifiers in the combination. The following describes a process for overcoming this disadvantage by computing a single look-up table for a single sub-classifier using AdaBoost.
- As shown in FIG. 13, the AdaBoost algorithm works in an iterative fashion. First, a classifier is trained by assigning the same weight to all training examples (e.g., blocks226 and 228 in FIG. 28) at the instance i=1 for that classifier. (Note: the training for i=1 is identical to that in
step 218 in FIG. 28). For each i>1, the (I−1)th instance is evaluated on the training data (block 124). Then, the classifier is iteratively retrained where more weight is given to training examples that were incorrectly classified by the classifier trained in the previous iteration (block 126). This process repeats for p iterations, and where “p” represents a predetermined number of instances of the classifier being trained. Currently, there are no rigorous theoretical guidelines on how to choose “p.” Experimentally, a value of as little as “5” can lead to improvement and values as large as “100” can lead to further improvement. In the preferred embodiment, the values for “p” are in the range of 15 to 20. It is shown in Shapire & Singer that through this iteration process the classification error can be decreased. - To re-train an instance of the classifier at each iteration, the AdaBoost algorithm re-computes the histograms for each sub-classifier over the object and non-object training samples (block128) using the weights determined at
block 126. Histograms can be collected by counting the number of occurrences of each quantized value across the set of training images. However, instead of incrementing each histogram bin by 1 for each training example, we increment by the weight assigned to the training example. We scale and round the training example weights to integers for this purpose. -
Block 130 computes a log-likelihood look-up table for each set of histograms corresponding to each sub-classifier. -
-
-
-
- The resulting classifier in equation (13) has the same computational cost as the original classifiers in equations (8), (8A), and (8B).
- In one embodiment, p adaboost iterations are computed. For each iteration number, 1 . . . p, performance of the classifier is measured on the cross-validation test set (block230 in FIG. 28). The number of iterations that gives, the best performance, say k, is chosen and the sum in equation (14) is pre-computed up to k rather than p.
- In one embodiment, block224 in FIG. 28 determines the threshold λ in equation (8) to achieve a desired performance by measuring accuracy for different settings of λ on the cross-validation images block 230.
- III. Lighting Correction
- Lighting correction is sometimes necessary to compensate for differences in lighting. In one embodiment, a
lighting correction module 36 may provide lighting correction prior to evaluation of theclassifier 34 as illustrated in FIG. 4B. Similarly, in training, lighting correction may be performed on each training example immediately after evaluation of the overcomplete wavelet transform. Thelighting correction module 36 may be implemented as software code to be executed by a processor (not shown) of the object finder terminal 22 (FIG. 3) when providing lighting correction prior to evaluation by theclassifier 34, or executed by a processor of the system 210 (FIG. 28) when used for training of sub-classifiers. The software code of themodule 36 may use any suitable computer language such as, for example, Java, Ada, C or C++ using, for example, conventional or object-oriented techniques. The software code may be stored as a series of instructions or commands on a computer-readable medium, such as a random access memory (RAM), a read only memory (ROM), a magnetic medium such as a hard-drive or a floppy disk, or an optical medium such as a CD-ROM. - Unfortunately, no lighting correction method is dependable in all situations. Therefore, in one embodiment, the
lighting correction module 36 may apply multiple methods of compensation, where each method provides its input to a different group of sub-classifiers. Such an approach will be less susceptible to the failures of an individual method of correction. - A parameter, referred to as “Localized lighting correction,” maybe used to adjust the value of each wavelet coefficient as a function of its neighboring coefficients from within its subband and from other subbands. In one embodiment, each coefficient in each band is normalized as follows. Each LL coefficient may be normalized by its 3×3 neighborhood in the LL band. The normalization process computes the average absolute value of the neighborhood. If this average is less than a pre-specified threshold (described hereinbelow), the coefficient is assigned value 1.0. Otherwise the normalized LL coefficient is computed as the ratio of the original coefficient divided by this neighborhood average. Each coefficient in the LH and HL bands is normalized by the combined average of its 3×3 neighborhoods in the LH and HL bands. If this average is less than a threshold, the normalization process assigns value 0.0 to the normalized coefficient. If the average is greater than the threshold, the normalized coefficient is given by the ratio of the original coefficient divided by this average. Each coefficient in the HH band is normalized by the average of its 3×3 neighborhood in the HH band. If this average is less than a threshold, the normalization process assigns value 0.0 to the normalized coefficient. If the average is greater than the threshold, the normalization process divides the original coefficient by the average to give the normalized coefficient. In one embodiment, these thresholds are 1.0 for all LL bands, 2.5 for LH and HL subbands, and 1.25 for HH subbands.
- Another parameter, referred to as “Variance normalization,” may be used to linearly scale all the wavelet coefficients in the candidate region or some selected portion of it (described hereinbelow), such that the intensities in the region or a selected portion of it respectively, have a pre-specified variance value.
- Yet another parameter, referred to as “Brightest point normalization,” may be used to scale all wavelet coefficients such that the brightest spot in the candidate region or some selected portion (described hereinbelow) of it has a fixed value.
- The classifier computes “variance normalization” and “brightest point normalization” over various pre-specified, extents of the object. The extent of some object does not necessarily occupy the full extent of the
classification window 32. For example, the face training examples shown in FIG. 12 do not occupy the complete area of the window. In one embodiment the average extent of the object is entered by hand and used for normalization. In one embodiment, this extent is split into two horizontal halves that are normalized separately. - IV. Classifier Design Considerations for Detection
- As mentioned hereinbefore, the detector has to exhaustively scan this classifier across the image in position and scale in order to find instances of an object. This process applied directly, however, can consume a great amount of computational time. In one embodiment, several computational techniques and heuristic strategies, described hereinbelow, are employed to reduce the amount of computation.
- FIG. 16 is a block diagram of the process implemented by the
object finder program 18 whereby a classifier is scanned in position in position and in scale to find instances of the object. The process illustrated in FIG. 16 applies to view-based classifiers (e.g., any of theclassifiers 54A-54B or 56A-56H in FIG. 7). - To find instances of the object at different sizes the original image is searched at re-scaled versions as illustrated hereinbefore in FIG. 8. In this search across scale, in FIG. 16, at
block 166, it is determined whether all of the scaled sizes of an image have been searched. If they have, then the process ends atblock 168. If all of the scaled sizes of an image have not been searched, then the classifier scales or resizes the image atblock 149, as illustrated through some exemplary scales in FIG. 8, re-computes the partially overcomplete wavelet transform of the scaled image atblock 150, and continues exhaustive object search at all positions within that new resized image at blocks 152-166. The scaling or resizing of theinput image 16 may be desirable to detect certain object sizes that may not have fit within theimage window 32 when original image was searched. Scaling or shrinking of the image may allow a larger object to fit within theimage window 32, and hence, to obtain a better detection. It is noted that the size and shape of theimage window 32 itself does not change throughout different levels of scaling/resizing (as illustrated with the fixed-size image window 32 in FIG. 8). -
- Thus, for example, for i=2, f=1.41. Hence, the image is reduced by factor “f”. In other words, the new scaled image (for i=2) is 0.71 (1/f) in size as compared to the original image (for i=0). Thus, the size (along any dimension, e.g., horizontal) of the image to be evaluated can be expressed by N=(1/f)*S, where N is the size of the input image currently evaluated by the corresponding classifier, and S is the original size of the input image. Extensive object search (as given by
blocks image window 32. -
Block 150 of FIG. 16 computes a partially overcomplete wavelet transform of the scaled input image. In particular, this step computes thelevel 1 EE phase (critically sampled and not overcomplete generation of level 1) and then generates an overcomplete representation oflevel 2 fromlevel 1EE producing level 2 EE,level 2 EO,level 2 OE,level 2 OO as shown in FIG. 17B. - It is noted that the input image is scaled to many values of “i” (e.g., for i=0 . . . 19), the entire partially overcomplete wavelet transform does not always need to be computed in its entirety for each successive scale. In one embodiment, the
object finder 18 “re-uses” parts of the transform in the search across scale. FIG. 23 and FIG. 24 illustrate this process: - As shown in FIG. 24, the two levels of the transform need to be computed in their entirety for the first four scales (scales 0 through 3) of the input image (corresponding to i=0 . . . 3). Thus, for the first octave of search in scale (corresponding to the first four scales given by equation 12), each level of the transform is recomputed in its entirety at each scaling. However, after these first four scalings, the
object finder 18 can “reuse” parts of the transform computed at previous scalings as illustrated in FIG. 24. This is done by selecting the transform corresponding to the scaling that differs by one octave (f=2, i.e., four (4) scalings) from the current scaling. Thus, for example, to compute the transform for scale-i (where i≧4 in equation-12), the transform for scale (i−4) may be utilized because the transform for scale-i (i≧4) is related to the transform at scale (i−4) by a shift in levels. For example, the wavelet transform at scale-4 is related to that at scale-0, and the transform at scale-5 is related to that at scale-1, and so on as illustrated in FIG. 24. - To obtain the transform at scale-i (i≧4), the
object finder 18 shifts the transform for scale (i−4) by one level. That is, level-2 at scale (i−4) becomes level-1 at scale-i (for i≧4) as shown in FIG. 24 with reference toscales object finder 18 needs to compute only the top level (i.e., level-2) for each scale-i (i≧4), rather than computing the entire transform (i.e.,levels 1 through 2) for the new scale-i.Blocks step 161 in FIG. 23. As shown by the feed-back arrow atblock 163 in FIG. 23, the transform re-use and extensive object search (as given byblocks image window 32. For example, for i=0 . . . 3, theobject finder 18 may search the object at scales (i+k*4, where k≧1). For example, forscales 0 through 3, the corresponding scales that may be searched by theobject finder 18 includescales 4 through 7 (for k=1 at block 163), 8 through 11 (for k=2 at block 163), 12 through 15 (for k=3 at block 163), 16 through 19 (for k=4 at block 163), and so on until the scaled input image for a given scale is smaller than the image window size. Such an extensive scanning for each image size and image window location improves accuracy of detection by making it possible to find instances of the object over this range in position and size. - The key to efficiency is to do as little computation as possible each time the detector evaluates a classifier at a candidate window position. In particular, a partial evaluation of the classifier may be sufficient to accurately decide that a candidate belongs to the non-object class. According to one embodiment of the present invention, for each scaled version of the input image, (for example,62, 64, and 66 in FIG. 8), the detector may be applied in a cascade of sequential stages of partial evaluation, where each stage performs a partial evaluation of the classifier, i.e., a subset of sub-classifiers. That is, each classifier is decomposed into a series of stages where each stage contains one or more sub-classifiers. Each stage, Fi, can consist of a sub-classifier or a series of sub-classifiers, which can be chosen individually according to the manner described previously. Together, all of the sub-classifiers in all of the stages of a classifier may constitute the classifier as given in equations (8) and (8A).
- Turning again to FIG. 16, in one embodiment, the set of
image window 32 locations to be evaluated by each stage may be determined atblock 154. The set ofimage window 32 locations to be evaluated can initially be a set of allpossible image window 32 locations. The criterion for updating the set ofimage window 32 locations to be evaluated may be the current total log-likelihood ratio corresponding to each location. Locations with a current total-log-likelihood ratio below a predetermined threshold may be dropped from the set ofimage window 32 locations to be evaluated. Thus the number of candidate locations to be evaluated may be reduced at each successive iteration of the process illustrated in FIG. 16. - It is noted that this cascade evaluation strategy can be a many step process, where a partial evaluation of equation 8 (or 8A) can be done multiple times. After evaluating each sub-classifier (e.g., sub-classifier f1) or a group of sub-classifiers (e.g., sub-classifiers f1, f2, and f3), the
object finder 18 may add to partial sum inequation 8 or 8A. This re-evaluation will still be a partial re-evaluation, but will include more terms corresponding to the sub-classifiers that have been evaluated since the last partial evaluation. After each partial evaluation is completed, theobject finder 18 may apply a threshold and remove additional candidates (i.e., parts of the image being searched) from further consideration as shown and discussed hereinbelow with reference to FIG. 20. Thus, the cascade evaluation strategy focuses on sub-classifier-by-sub-classifier analysis and builds on earlier computations to generate the final result. - The threshold for the total log-likelihood at each stage may be pre-determined by a process of evaluating the current stages of the classifier on the cross-validation images (block224 in FIG. 28).
Block 224 may set this threshold to match a specified performance metric such as correct detection of 95% of the labeled instances of the object. - In this embodiment, the
image window 32 does not directly sample the scaled image as implied by FIG. 4A, but rather it samples wavelet coefficients generated from the input image inblock 150. In particular, it will select coefficients from one wavelet transform derived from the semi-overcomplete wavelet transform shown in FIG. 17B. Each such wavelet transform can be thought of as a branch through this figure; that is, one such transform contains one of thelevel 2 phases in combination with thelevel 1 EE phase. Theimage window 32 will select the coefficients within this transform that spatially correspond to the position of the image window within the image as shown in FIG. 18. Note that one image window corresponds to a collection of blocks of wavelet coefficients from each wavelet subband. These chosen coefficients are equivalent to first selecting the window in the image and then taking the wavelet transform of the image window. - Evaluation sites are specified by the center of the window with respect to the chosen wavelet transform's top level's LL band. For example, in a 2 level transform, each coefficient in the
level 2 LL band corresponds to a center of a potential evaluation site as shown in FIG. 18. The set of all possible evaluation sites for this phase of the wavelet transform corresponds to the set of windows placed at each such wavelet coefficient. It is noted thatsuch image window 32 locations may be partially overlapping. - At
block 152, theobject finder program 18 may evaluate a single stage, Fi, for each member of a set ofimage window 32 locations to be evaluated. In one embodiment, theobject finder 18 can keep, for each of the set ofimage window 32 locations to be evaluated, a partial calculation of equation (8A) that may be referred to as a total log-likelihood. It is noted that each term of equation (8A) may correspond to the log-likelihood ratio generated by the application of a sub-classifier to a location. The partial calculation of equation (8A), or total log-likelihood, contains terms resulting from sub-classifiers already applied to the location. - According to one embodiment of the present invention, the early stages differ from the later stages in their usage of the partially overcomplete wavelet transform computed in
Block 150 in FIG. 16. The early stages evaluate only one wavelet transform (level 2 EE phase in combination with thelevel 1 EE phase) derived from the partially overcomplete wavelet transform. The later stages evaluate all four wavelet transforms (all phases oflevel 2 each in combination with thelevel 1 EE phase). As described hereinabove, each of these combinations corresponds to a wavelet transform, where these transforms are redundant with each other. The difference in these two evaluation strategies corresponds to a difference in the positional resolution for evaluating candidates. The first strategy corresponds to evaluations sites that are spaced by increments of 4 pixels apart in both the horizontal and vertical directions. The 2nd strategy corresponds produces evaluation sites spaced 2 pixels apart (within each transform the sites are spaced apart by 4 pixels, but the wavelet transforms themselves are offset from each of the others by a level one wavelet coefficient or equivalently 2 pixels in the scaled image in either or both the horizontal or vertical direction). In one embodiment with four stages, the first two stages use the first strategy and the last two stages use the second strategy. This evaluation strategy could be thought of as a “coarse-to-fine” strategy whereby the early stages evaluate the image at coarse resolution and the later stages evaluate it at a finer resolution. Hereinbelow, the former strategy is referred to as the “coarse evaluation strategy” and the latter strategy is referred to as the “fine evaluation strategy”. - One example of a process for evaluating a stage at
blocks Block 154 determines the set of candidate locations to be evaluated by the process described hereinabove. The coarse evaluation strategy performs this step once whereas the fine evaluation strategy repeats this step for each of the 4 phases it uses fromlevel 2 of the partially overcomplete transform. -
Block 140 computes the lighting correction for each of the candidate locations generated inBlock 154. - In one embodiment, the log-likelihood may be represented with respect to different resolutions. The (“coarse representation”) stores total log-likelihood with respect to sites in the LL band of the top level (e.g. level 2) of the wavelet transform. A (“fine representation”) stores log-likelihood with respect to sites in the LL band of a lower level (e.g. level 1) in the wavelet transform. For example, for a two level transform, the coarse representation is with respect to the LL band of
level 2 and the fine representation is with respect to the LL band oflevel 1. -
Block 142 initializes the log likelihood for the current phase of the current stage to zero for all candidate object locations. - In one embodiment, early stages using the coarse evaluation strategy use the low-resolution representation throughout the process in FIG. 20. Later stages using the fine evaluation strategy involve both representations. This strategy maintains a final fine resolution updated in
block 147 in FIG. 20. However, each phase evaluation inblocks level 2 of the particular phase currently evaluated.Block 147 combines each intermediate result (within the current phase) with the total log likelihood at fine resolution. This step is necessary since these phases are offset from each other in position. - Fi is the set of sub-classifiers associated with a particular stage, i. Fi can be shown by:
- F i =f 1 + . . . +f k (16)
- where each fk represents a separate sub-classifier. Each stage may have as few as one sub-classifier.
- At
block 144 in FIG. 20 a first sub-classifier, fk can be applied to the set of image window locations to be evaluated in the 2D image to be evaluated. It updates the log-likelihood for this phase within the stage. This process repeats for all remaining sub-classifier in the stage. Block 147 updates the total log likelihood by adding the log-likelihood computed in this phase of the current stage as explained above. For the fine evaluation strategy, if there are more phases to be evaluated, blocks 142, 144, 146 are repeated for these phases. - FIG. 21 explains
Block 144 from FIG. 20 in more detail evaluating sub-classifier fk at the specified candidate locations.Block 100 places theimage window 32 at a first of the set of image window locations to be evaluated. Block 102 samples the wavelet coefficients used by the sub-classifier fk where the wavelet coefficient are chosen from thecorresponding image window 32 within the selected components of the partially overcomplete wavelet transform of the image (input image or a scaled version of the input image).Block 104 applies lighting correction to the wavelet coefficients, where the lighting correction was computed inBlock 140 of FIG. 20.Blocks image window 32 can then be shifted to a second location (as shown in FIG. 19) and the log-likelihood ratio for the sub-classifier at the second location can be found by the calculation ofBlocks 102 through 112. This process can be repeated for a third and a fourth location and so on until the sub-classifier has been evaluated at all specified locations. - FIGS. 21 and 22 illustrate a conceivable ordering of computation. The actual organization of the aforementioned computations depends on the particular stage. In particular, according to one embodiment of the present invention, each stage can be evaluated in a “candidate-wise” manner or “feature-wise” manner.
- “Candidate-wise” evaluation performs all feature evaluations separately for each candidate. This approach involves a total of N2M2 feature evaluations for M2 sub-classifiers and N2 candidates as shown in FIG. 22A.
- “Feature-wise” evaluation attempts to reduce cost by sharing feature evaluations among overlapping candidates. This strategy performs approximately N2+M2+2MN feature evaluations over the entire scaled image (assuming all candidates are to be evaluated). Each candidate then samples the M2 evaluations that overlap its extent and supplies them to the corresponding M2 sub-classifier log-likelihood look-up tables as illustrated in FIG. 22B. Typically, since N is much greater than M, this strategy greatly reduces the amount of computation. The M2 sub-classifiers, however, can differ only in their log-likelihood tables (as a function of position within the candidate), but must all share the same type of feature computation. Whereas, in candidate-wise evaluation, the M2 sub-classifiers can be completely different.
- If features are computed in a “feature-wise” manner, then lighting correction must also be applied in feature-wise manner. “feature-wise” correction assigns the correction at each wavelet coefficient as a function of a localized neighborhood about that point as described by “localized lighting correction” hereinabove; that is the correction is independent of the spatial location of the coefficient within the
candidate image window 32. Alternatively, candidate-wise correction considers the whole candidate or a specified portion and can be accomplished by “variance normalization” or “brightest point normalization” described hereinabove. - According to one embodiment of the present invention, the early stages use “feature-wise” evaluation for both lighting correction and feature evaluation. The later stages, in which the remaining candidates are sparser, use “candidate-wise” evaluation. One embodiment using four stages uses feature-wise evaluation for the first three stages and candidate-wise evaluation for the forth stages. The first two stages use feature-wise lighting correction using the “localized lighting correction” described hereinabove. The first stage uses 20 sub-classifiers, which share the same feature computation. The second stage uses 24 sub-classifiers that share a feature computation and 42 other sub-classifiers that share another feature computation. The third stage uses candidate-wise evaluation with 19 sub-classifiers, where 5 share one feature computation, another 5 share a different feature computation, another 5 share a third feature computation, another 3 share a feature computation, and the last one that has a unique feature computation. The fourth stage involves 9 sub-classifiers that each has a unique feature computation.
- According to one embodiment of the present invention, features are generated in ascending order of complexity. In the early stages features use small subsets of wavelet coefficients, small numbers of linear projections, and simple quantization. (These feature evaluations are designed to be as quick as possible since they have to be applied to many candidates.) In one embodiment, the first two stages use subsets of size 3-8 coefficients and use two linear projections with the “scalar quantization 1-B” scheme described hereinabove. In later stages (in which there are fewer candidates), features use larger subset sizes, more linear projections, and more complicated quantization schemes. In one embodiment, a third stage can contain sub-classifiers that considers between four and twenty input variables, 5 linear projections, and the “vector quantization 2-A” for 4 feature computations and vector quantization 3-A scheme for one feature. A fourth stage may contain sub-classifiers that consider between five and thirty coefficients, 5 linear projections, and the “vector quantization 4-A” scheme for 9 feature computations.
- Each stage can be trained sequentially as shown in FIG. 32. In each stage the number of sub-classifiers can be specified by hand based on the desired trade-off between computational cost and accuracy. The stage is then trained by the process illustrated in FIG. 28 as if it were a complete classifier by the process outlined herein above.
- The process of FIG. 32 initiates at
block 347, where k is set equal to one. Atblock 348, random non-object examples are selected. Atblock 349, stage k is trained based on the non-object data. Atblock 350, to be explained further herein, weights may be assigned to the previous k-1 stages. Atblock 351, also to be explained further herein, non-object examples may be selected by bootstrapping. Next, at block 352 k is incremented by one, and the process may return to block 349. - In one embodiment the object training images are re-used for each stage.
- In one embodiment, each stage uses a different set of training examples for the non-object class. In particular, it is desirable to choose “non-object” examples that are most likely to be mistaken for the object to be detected (e.g., a human face or a car) as discussed in B. D. Ripley,Pattern Recognition and Neural Networks, Cambridge University Press, 1996. This concept is similar to the way support vector machines work by selecting samples near the decision boundary as discussed in V. N. Vapnik, The Nature of Statistical Learning Theory, Sprinter, 1995. The disclosures of both of these publications are incorporated herein by reference in their entireties.
- In one embodiment the non-object training images are acquired by a bootstrapping method designed to determine such samples (i.e., non-object samples that are most likely to be mistaken for the object) as indicated in FIG. 32. By cascading the sub-classifiers, we can use bootstrapping in the following way. The first stage of the classifier is trained by estimating P(Sn|ω2) using randomly drawn samples from a set of non-object images. This preliminary classifier is then run over a set of images, for example, 2,500 images, that do not contain the object. Bootstrapping selects the classification windows within this collecting that gives high response (false detections or near false detections) for the non-object training examples. These samples will then be ones that “resemble” the object in the sense of
stage 1 of the classifier. These non-object examples in combination with other randomly selected non-object examples are then used to trainstage 2 of the classifier. In one embodiment, the bootstrapping samples are combined in equal portion with new randomly selected examples. To then choose the non-object examples for the next stage this process is repeated, this time by evaluating the first two stages in combination over a set of images that do not contain the object. This process can be repeated for each new stage. - In one embodiment illustrated in FIG. 32 each stage can be “weighted” differently. In particular,
equation 16 can be modified such that weights, ci, can be specified for each stage: - H=c 1 F 1 + . . . +c N F k
- or equivalently as a cascade of weights:
- H=F N +C N−1(F N−1 +C N−2(F N−2 . . . +c 1 F 1))
- In one embodiment, in
block 350, the weight Ck−1 in the later equation is chosen by empirically trying a range of values, e.g. (0.1, 0.25, 1.0, 4.0, 10.0) over the set of cross-validation images and choosing the weight that gives the best accuracy as measured with respect to area under the ROC curve. - FIG. 25 depicts various images of humans with the
object markers 52 placed on the human faces, human eyes, and human ears detected by theobject finder 18 according to an embodiment of the present invention. FIG. 26 illustrates various images of telephones with the object markers 190 placed on the telephones detected by theobject finder 18. Similarly, FIG. 27 thus show results of object detection for door-handles - Experiments have shown that the cascade search strategy reduces computational time by a factor of several hundreds over an exhaustive full evaluation of every possible object location in position and scale.
- V. Combining Detections Within and Across View-Based Classifiers
- Typically, when the
object finder program 18 encounters a face, it does not give one single large response (for the left side ofequations 8 and 8A) at one location that is greater than the threshold (i.e., the right side ofequations 8 or 8A). It gives a number of large responses at adjacent locations all corresponding to the same face that all exceed the detection threshold. Furthermore, multiple view-based classifiers may detect the same object at the same location. For example, FIG. 6 shows a case where the same face (the female in the foreground of the photograph) is initially detected by two of the view-based classifiers. To resolve that all such multiple “detections” (here, two detections) are caused by the same object, the following approach may be used. First, the detection value (i.e., the left side ofequations 8 and 8A) is computed for all viewpoints and at all locations within the image and all its scalings. Then, a list composed of all the locations for which the detection value is greater than the detection threshold is formed. This list is then put in order from the detection of the greatest magnitude (i.e. for which the value of the left side ofequation 8 is largest) to that of the smallest magnitude. The first entry in this list is declared a real detection. Then this entry is compared to all others in the list. If another entry within the image is within a predetermined distance (in the preferred embodiment, the distance is half the radius of the object) of the first entry, it is assumed to correspond to the same object and it is discarded. After the first entry is compared to all other entries, this process repeats for the entry in the remaining list that has the largest magnitude (after the first entry and all entries matching to it have been removed); that is, this entry is now declared to be another real detection and is compared to all other entries in the remaining list whereby any entries that are close in distance to it are discarded. This process continues until the list is exhausted. - The foregoing describes a system and method for detecting presence of a 3D object in a 2D image containing a 2D representation of the 3D object. The object finder according to the present invention may improve upon existing techniques for object detection both in accuracy and computational properties. As described herein, a pre-selected number of view-based classifiers may be trained on sample images prior to performing the detection on an unknown image. The object detection program may then operate on the given input image and compute its partially overcomplete wavelet transform for the entire input image. The object detection program may then proceed with sampling of the wavelet coefficients at different image window locations on the input image, and apply each classifier involving linear projection of selected subsets of coefficients, quantization of linear projection coefficients and efficient look-up of pre-computed log-likelihood tables to determine object presence. The object finder's coarse-to-fine object detection strategy coupled with exhaustive object search across different positions and scales may result in an efficient and accurate object detection scheme. The object finder may detect a 3D object over a wide range in angular variation (e.g., 180 degrees) through the combination of a small number of classifiers each specialized to a small range within this range of angular variation.
- The object finder according to the present invention may also provide computational advantages over the existing state of the art. In particular, it is observed that although it may take many sub-classifier evaluations to confirm the presence of the object, it can often take only a few evaluations to confirm that an object is not present. It is therefore wasteful to defer a detection decision until all the sub-classifiers have been evaluated. According to one embodiment, the object finder thus discards non-object candidates after as few sub-classifier evaluations as possible. The coarse-to-fine strategy implemented by the object finder, according to one embodiment, involves a sequential evaluation whereby after each sub-classifier evaluation, the object finder makes a decision about whether to conduct further evaluations or to decide that the object is not present. This strategy may be applied to the multi-resolution representation provided by the wavelet transform whereby the sub-classifier evaluations are ordered from low-resolution, computationally quick features to high-resolution computationally intensive features. By doing so, the object finder may efficiently rule out large regions first and thereby it only has to use the more computationally intensive sub-classifiers on a much smaller number of candidates.
- The object finder may be trained to detect many different types of objects (e.g., airplanes, cat faces, telephones, etc.) besides human faces and cars discussed hereinabove. Some of the applications where the object finder may be used include: commercial image databases (e.g., stock photography) for automatically labeling and indexing of images; an Internet-based image searching and indexing service; finding biological structures in various types of biological images (e.g., MRI, X-rays, microscope images, etc.); finding objects of military interest (e.g., mines, tanks, etc.) in satellite, radar, or visible imagery; finding objects of interest to scientists (e.g., craters, volcanoes, etc.) in astronomical images; as a tool for automatic description of the image content of an image database; to achieve accurate color balancing on human faces and remove “red-eye” from human faces in a digital photo development; for automatic adjustment of focus, contrast, and centering on human faces during digital photography; to automatically point, focus, and center cameras on human faces during video conferencing; enabling automatic zooming on human faces and also face recognition as part of a security and surveillance system; making human-computer interaction more realistic, especially in interactive computer games; and to perform face detection in real-time or near real-time, in robotic toys to perform face detection in real-time or near real-time and to have the toy behave accordingly.
- While several embodiments of the invention have been described, it should be apparent, however, that various modifications, alterations and adaptations to those embodiments may occur to persons skilled in the art with the attainment of some or all of the advantages of the present invention. It is therefore intended to cover all such modifications, alterations and adaptations without departing from the scope and spirit of the present invention as defined by the appended claims.
Claims (56)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/266,139 US7194114B2 (en) | 2002-10-07 | 2002-10-07 | Object finder for two-dimensional images, and system for determining a set of sub-classifiers composing an object finder |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/266,139 US7194114B2 (en) | 2002-10-07 | 2002-10-07 | Object finder for two-dimensional images, and system for determining a set of sub-classifiers composing an object finder |
Publications (2)
Publication Number | Publication Date |
---|---|
US20040066966A1 true US20040066966A1 (en) | 2004-04-08 |
US7194114B2 US7194114B2 (en) | 2007-03-20 |
Family
ID=32042607
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/266,139 Active 2024-12-09 US7194114B2 (en) | 2002-10-07 | 2002-10-07 | Object finder for two-dimensional images, and system for determining a set of sub-classifiers composing an object finder |
Country Status (1)
Country | Link |
---|---|
US (1) | US7194114B2 (en) |
Cited By (67)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20030220767A1 (en) * | 2002-02-06 | 2003-11-27 | The University Of Chicago | Subband domain signal validation |
US20040022423A1 (en) * | 2002-08-02 | 2004-02-05 | Eastman Kodak Company | Method for locating faces in digital color images |
US20040179719A1 (en) * | 2003-03-12 | 2004-09-16 | Eastman Kodak Company | Method and system for face detection in digital images |
US20040258313A1 (en) * | 2003-06-17 | 2004-12-23 | Jones Michael J. | Detecting arbitrarily oriented objects in images |
US6837617B1 (en) * | 1997-11-20 | 2005-01-04 | Israel Aircraft Industries Ltd. | Detection and recognition of objects by multispectral sensing |
US20050065809A1 (en) * | 2003-07-29 | 2005-03-24 | Blackbaud, Inc. | System and methods for maximizing donations and identifying planned giving targets |
US20050185201A1 (en) * | 2003-11-05 | 2005-08-25 | Naoki Kuwata | Image processing apparatus and method of image processing |
US20060088207A1 (en) * | 2004-10-22 | 2006-04-27 | Henry Schneiderman | Object recognizer and detector for two-dimensional images using bayesian network based classifier |
US20060112038A1 (en) * | 2004-10-26 | 2006-05-25 | Huitao Luo | Classifier performance |
WO2006090313A2 (en) * | 2005-02-24 | 2006-08-31 | Koninklijke Philips Electronics N.V. | Object recognition using adrc (adaptive dynamic range coding) |
US20060257017A1 (en) * | 2005-05-12 | 2006-11-16 | Huitao Luo | Classification methods, classifier determination methods, classifiers, classifier determination devices, and articles of manufacture |
US20070053585A1 (en) * | 2005-05-31 | 2007-03-08 | Microsoft Corporation | Accelerated face detection based on prior probability of a view |
US20070076959A1 (en) * | 2005-10-03 | 2007-04-05 | Xerox Corporation | JPEG detectors and JPEG image history estimators |
US20070177820A1 (en) * | 2006-01-27 | 2007-08-02 | O Ruanaidh Joseph J | System and method for providing an optical section image by direct phase angle determination and use of more than three images |
US20070226160A1 (en) * | 2006-03-22 | 2007-09-27 | Sony Corporation | Method and system for transitioning from a case-based classifier system to a rule-based classifier system |
US20070230792A1 (en) * | 2004-04-08 | 2007-10-04 | Mobileye Technologies Ltd. | Pedestrian Detection |
US20080027887A1 (en) * | 2006-07-27 | 2008-01-31 | The Government Of The Us, As Represented By The Secretary Of The Navy | System and method for fusing data from different information sources |
US20080056562A1 (en) * | 2006-08-30 | 2008-03-06 | Nec Corporation | Object identification parameter learning system |
US20080080743A1 (en) * | 2006-09-29 | 2008-04-03 | Pittsburgh Pattern Recognition, Inc. | Video retrieval system for human face content |
US20080089591A1 (en) * | 2006-10-11 | 2008-04-17 | Hui Zhou | Method And Apparatus For Automatic Image Categorization |
US20080125648A1 (en) * | 2006-11-28 | 2008-05-29 | Siemens Medical Solutions Usa, Inc. | Method of Multiple Instance Learning and Classification With Correlations in Object Detection |
US20080208828A1 (en) * | 2005-03-21 | 2008-08-28 | Oren Boiman | Detecting Irregularities |
US7421114B1 (en) * | 2004-11-22 | 2008-09-02 | Adobe Systems Incorporated | Accelerating the boosting approach to training classifiers |
US20080313031A1 (en) * | 2007-06-13 | 2008-12-18 | Microsoft Corporation | Classification of images as advertisement images or non-advertisement images |
US20090060353A1 (en) * | 2007-03-23 | 2009-03-05 | Payam Saisan | Identifying whether a candidate object is from an object class |
WO2009012056A3 (en) * | 2007-07-13 | 2009-03-26 | Microsoft Corp | Multiple-instance pruning for learning efficient cascade detectors |
US20090232406A1 (en) * | 2008-03-17 | 2009-09-17 | Payam Saisan | Reducing false alarms in identifying whether a candidate image is from an object class |
US7634142B1 (en) | 2005-01-24 | 2009-12-15 | Adobe Systems Incorporated | Detecting objects in images using a soft cascade |
US20100114746A1 (en) * | 2008-10-31 | 2010-05-06 | International Business Machines Corporation | Generating an alert based on absence of a given person in a transaction |
US20100110183A1 (en) * | 2008-10-31 | 2010-05-06 | International Business Machines Corporation | Automatically calibrating regions of interest for video surveillance |
US20100111376A1 (en) * | 2008-06-27 | 2010-05-06 | Lockheed Martin Corporation | Assesssing biometric sample quality using wavelets and a boosted classifier |
US20100114671A1 (en) * | 2008-10-31 | 2010-05-06 | International Business Machines Corporation | Creating a training tool |
US20100134625A1 (en) * | 2008-11-29 | 2010-06-03 | International Business Machines Corporation | Location-aware event detection |
US20100134624A1 (en) * | 2008-10-31 | 2010-06-03 | International Business Machines Corporation | Detecting primitive events at checkout |
US20100172584A1 (en) * | 2009-01-07 | 2010-07-08 | Rastislav Lukac | Method Of Classifying Red-Eye Objects Using Feature Extraction And Classifiers |
US20100239163A1 (en) * | 2009-03-19 | 2010-09-23 | Electronics And Telecommunications Research Institute | Image searching method and apparatus |
US20110081079A1 (en) * | 2009-10-07 | 2011-04-07 | Jie Wang | Automatic Red-Eye Object Classification In Digital Images Using A Boosting-Based Framework |
US20110188706A1 (en) * | 2007-12-21 | 2011-08-04 | Siemens Medical Solutions Usa, Inc. | Redundant Spatial Ensemble For Computer-Aided Detection and Image Understanding |
US8144944B2 (en) | 2007-08-14 | 2012-03-27 | Olympus Corporation | Image sharing system and method |
US20120192059A1 (en) * | 2011-01-20 | 2012-07-26 | Vastec, Inc. | Method and System to Convert Visually Orientated Objects to Embedded Text |
US8352395B1 (en) | 2004-07-22 | 2013-01-08 | Adobe Systems Incorporated | Training an attentional cascade |
US8379937B1 (en) | 2008-09-29 | 2013-02-19 | Videomining Corporation | Method and system for robust human ethnicity recognition using image feature-based probabilistic graphical models |
US20130077835A1 (en) * | 2011-09-22 | 2013-03-28 | International Business Machines Corporation | Searching with face recognition and social networking profiles |
US20140270431A1 (en) * | 2013-03-15 | 2014-09-18 | Sony Corporation | Characterizing pathology images with statistical analysis of local neural network responses |
US20140341422A1 (en) * | 2013-05-10 | 2014-11-20 | Tencent Technology (Shenzhen) Company Limited | Systems and Methods for Facial Property Identification |
CN104346625A (en) * | 2013-08-09 | 2015-02-11 | 株式会社东芝 | Medical image processing device, medical image processing method and classifier training method |
US20150306496A1 (en) * | 2008-07-11 | 2015-10-29 | Disney Enterprises, Inc. | Video teleconference object enable system |
US20150371106A1 (en) * | 2008-11-05 | 2015-12-24 | Cortexica Vision Systems Limited | Keypoint descriptor generation by complex wavelet analysis |
US9323992B2 (en) | 2006-05-31 | 2016-04-26 | Mobileye Vision Technologies Ltd. | Fusion of far infrared and visible images in enhanced obstacle detection in automotive applications |
US9563813B1 (en) * | 2011-05-26 | 2017-02-07 | Google Inc. | System and method for tracking objects |
US9576204B2 (en) * | 2015-03-24 | 2017-02-21 | Qognify Ltd. | System and method for automatic calculation of scene geometry in crowded video scenes |
US20170083754A1 (en) * | 2014-04-11 | 2017-03-23 | Beijing Sensetime Technology Development Co., Ltd | Methods and Systems for Verifying Face Images Based on Canonical Images |
US9626597B2 (en) | 2013-05-09 | 2017-04-18 | Tencent Technology (Shenzhen) Company Limited | Systems and methods for facial age identification |
US20170277976A1 (en) * | 2016-03-25 | 2017-09-28 | Honda Motor Co., Ltd. | Teacher data generation method |
US9996890B1 (en) * | 2017-07-14 | 2018-06-12 | Synapse Technology Corporation | Detection of items |
US10067227B2 (en) * | 2014-10-06 | 2018-09-04 | Nidec Corporation | Neural network-based radar system |
WO2018222775A1 (en) * | 2017-05-30 | 2018-12-06 | Digitalglobe, Inc. | Broad area geospatial object detection |
WO2019095469A1 (en) * | 2017-11-14 | 2019-05-23 | Zhejiang Dahua Technology Co., Ltd. | Method and system for face detection |
US10372985B2 (en) | 2015-08-26 | 2019-08-06 | Digitalglobe, Inc. | System for simplified generation of systems for broad area geospatial object detection |
US10452959B1 (en) | 2018-07-20 | 2019-10-22 | Synapse Tehnology Corporation | Multi-perspective detection of objects |
US10453223B2 (en) | 2017-08-18 | 2019-10-22 | Synapse Technology Corporation | Generating synthetic image data |
US10755420B2 (en) * | 2017-10-27 | 2020-08-25 | Samsung Electronics Co., Ltd. | Method and apparatus for tracking object |
US10838602B2 (en) * | 2004-06-22 | 2020-11-17 | International Business Machines Corporation | Persuasive portlets |
US11010605B2 (en) | 2019-07-30 | 2021-05-18 | Rapiscan Laboratories, Inc. | Multi-model detection of objects |
US20210233244A1 (en) * | 2016-12-15 | 2021-07-29 | General Electric Company | System and method for image segmentation using a joint deep learning model |
US11263434B2 (en) * | 2018-03-09 | 2022-03-01 | South China University Of Technology | Fast side-face interference resistant face detection method |
US11604557B2 (en) * | 2019-12-26 | 2023-03-14 | Dassault Systemes | 3D interface with an improved object selection |
Families Citing this family (89)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8593542B2 (en) | 2005-12-27 | 2013-11-26 | DigitalOptics Corporation Europe Limited | Foreground/background separation using reference images |
US7620218B2 (en) * | 2006-08-11 | 2009-11-17 | Fotonation Ireland Limited | Real-time face tracking with reference images |
US7565030B2 (en) * | 2003-06-26 | 2009-07-21 | Fotonation Vision Limited | Detecting orientation of digital images using face detection information |
US8682097B2 (en) | 2006-02-14 | 2014-03-25 | DigitalOptics Corporation Europe Limited | Digital image enhancement with reference images |
US8948468B2 (en) * | 2003-06-26 | 2015-02-03 | Fotonation Limited | Modification of viewing parameters for digital images using face detection information |
US7844076B2 (en) | 2003-06-26 | 2010-11-30 | Fotonation Vision Limited | Digital image processing using face detection and skin tone information |
US9129381B2 (en) | 2003-06-26 | 2015-09-08 | Fotonation Limited | Modification of post-viewing parameters for digital images using image region or feature information |
US8498452B2 (en) | 2003-06-26 | 2013-07-30 | DigitalOptics Corporation Europe Limited | Digital image processing using face detection information |
US8330831B2 (en) | 2003-08-05 | 2012-12-11 | DigitalOptics Corporation Europe Limited | Method of gathering visual meta data using a reference image |
US7269292B2 (en) | 2003-06-26 | 2007-09-11 | Fotonation Vision Limited | Digital image adjustable compression and resolution using face detection information |
US9692964B2 (en) | 2003-06-26 | 2017-06-27 | Fotonation Limited | Modification of post-viewing parameters for digital images using image region or feature information |
US8989453B2 (en) | 2003-06-26 | 2015-03-24 | Fotonation Limited | Digital image processing using face detection information |
US7471846B2 (en) * | 2003-06-26 | 2008-12-30 | Fotonation Vision Limited | Perfecting the effect of flash within an image acquisition devices using face detection |
US7440593B1 (en) | 2003-06-26 | 2008-10-21 | Fotonation Vision Limited | Method of improving orientation and color balance of digital images using face detection information |
US8896725B2 (en) | 2007-06-21 | 2014-11-25 | Fotonation Limited | Image capture device with contemporaneous reference image capture mechanism |
US7574016B2 (en) | 2003-06-26 | 2009-08-11 | Fotonation Vision Limited | Digital image processing using face detection information |
US8155397B2 (en) | 2007-09-26 | 2012-04-10 | DigitalOptics Corporation Europe Limited | Face tracking in a camera processor |
US7792970B2 (en) | 2005-06-17 | 2010-09-07 | Fotonation Vision Limited | Method for establishing a paired connection between media devices |
US8494286B2 (en) | 2008-02-05 | 2013-07-23 | DigitalOptics Corporation Europe Limited | Face detection in mid-shot digital images |
US7508979B2 (en) * | 2003-11-21 | 2009-03-24 | Siemens Corporate Research, Inc. | System and method for detecting an occupant and head pose using stereo detectors |
GB2409028A (en) * | 2003-12-11 | 2005-06-15 | Sony Uk Ltd | Face detection |
JP4130641B2 (en) * | 2004-03-31 | 2008-08-06 | 富士フイルム株式会社 | Digital still camera and control method thereof |
JP2005346806A (en) * | 2004-06-02 | 2005-12-15 | Funai Electric Co Ltd | Dvd recorder and recording and reproducing apparatus |
US8320641B2 (en) | 2004-10-28 | 2012-11-27 | DigitalOptics Corporation Europe Limited | Method and apparatus for red-eye detection using preview or other reference images |
US8503800B2 (en) | 2007-03-05 | 2013-08-06 | DigitalOptics Corporation Europe Limited | Illumination detection using classifier chains |
US7315631B1 (en) * | 2006-08-11 | 2008-01-01 | Fotonation Vision Limited | Real-time face tracking in a digital image acquisition device |
KR100695136B1 (en) * | 2005-01-04 | 2007-03-14 | 삼성전자주식회사 | Face detection method and apparatus in image |
US7466858B2 (en) * | 2005-04-28 | 2008-12-16 | Fuji Xerox Co., Ltd. | Methods for slide image classification |
US7580563B1 (en) * | 2005-09-02 | 2009-08-25 | Adobe Systems Incorporated | Detection of objects in an image using color analysis |
WO2007043899A1 (en) | 2005-10-14 | 2007-04-19 | Applied Research Associates Nz Limited | A method of monitoring a surface feature and apparatus therefor |
US7519201B2 (en) * | 2005-10-28 | 2009-04-14 | Honda Motor Co., Ltd. | Detecting humans via their pose |
US7965875B2 (en) | 2006-06-12 | 2011-06-21 | Tessera Technologies Ireland Limited | Advances in extending the AAM techniques from grayscale to color images |
US7403643B2 (en) * | 2006-08-11 | 2008-07-22 | Fotonation Vision Limited | Real-time face tracking in a digital image acquisition device |
US7916897B2 (en) | 2006-08-11 | 2011-03-29 | Tessera Technologies Ireland Limited | Face tracking for controlling imaging parameters |
KR100847143B1 (en) * | 2006-12-07 | 2008-07-18 | 한국전자통신연구원 | System and Method for analyzing of human motion based silhouettes of real-time video stream |
US8055067B2 (en) | 2007-01-18 | 2011-11-08 | DigitalOptics Corporation Europe Limited | Color segmentation |
EP2115662B1 (en) | 2007-02-28 | 2010-06-23 | Fotonation Vision Limited | Separating directional lighting variability in statistical face modelling based on texture space decomposition |
KR101247147B1 (en) * | 2007-03-05 | 2013-03-29 | 디지털옵틱스 코포레이션 유럽 리미티드 | Face searching and detection in a digital image acquisition device |
US7916971B2 (en) * | 2007-05-24 | 2011-03-29 | Tessera Technologies Ireland Limited | Image processing method and apparatus |
US7844085B2 (en) * | 2007-06-07 | 2010-11-30 | Seiko Epson Corporation | Pairwise feature learning with boosting for use in face detection |
US7949621B2 (en) * | 2007-10-12 | 2011-05-24 | Microsoft Corporation | Object detection and recognition with bayesian boosting |
US20090136098A1 (en) * | 2007-11-27 | 2009-05-28 | Honeywell International, Inc. | Context sensitive pacing for effective rapid serial visual presentation |
US8059136B2 (en) * | 2007-12-11 | 2011-11-15 | Honeywell International Inc. | Hierarchichal rapid serial visual presentation for robust target identification |
US7991195B2 (en) * | 2008-02-25 | 2011-08-02 | Honeywell International Inc. | Target specific image scaling for effective rapid serial visual presentation |
US7855737B2 (en) * | 2008-03-26 | 2010-12-21 | Fotonation Ireland Limited | Method of making a digital camera image of a scene including the camera user |
WO2009148731A1 (en) * | 2008-06-02 | 2009-12-10 | Massachusetts Institute Of Technology | Fast pattern classification based on a sparse transform |
CN102027505A (en) | 2008-07-30 | 2011-04-20 | 泰塞拉技术爱尔兰公司 | Automatic face and skin beautification using face detection |
KR20100086262A (en) * | 2009-01-22 | 2010-07-30 | 삼성전자주식회사 | Robot and control method thereof |
CN101872477B (en) * | 2009-04-24 | 2014-07-16 | 索尼株式会社 | Method and device for detecting object in image and system containing device |
US8379917B2 (en) | 2009-10-02 | 2013-02-19 | DigitalOptics Corporation Europe Limited | Face recognition performance using additional image features |
JP4971483B2 (en) | 2010-05-14 | 2012-07-11 | 任天堂株式会社 | Image display program, image display apparatus, image display system, and image display method |
EP2395474A3 (en) | 2010-06-11 | 2014-03-26 | Nintendo Co., Ltd. | Storage medium having image recognition program stored therein, image recognition apparatus, image recognition system, and image recognition method |
US8287055B2 (en) | 2010-09-28 | 2012-10-16 | Robert Bosch Gmbh | Brake control of a vehicle based on driver behavior |
US8565482B2 (en) * | 2011-02-28 | 2013-10-22 | Seiko Epson Corporation | Local difference pattern based local background modeling for object detection |
US20120245999A1 (en) * | 2011-03-23 | 2012-09-27 | Ncr Corporation | Selection of relevant advertising for anonymous customers |
US8903167B2 (en) | 2011-05-12 | 2014-12-02 | Microsoft Corporation | Synthesizing training samples for object recognition |
US20130097416A1 (en) | 2011-10-18 | 2013-04-18 | Google Inc. | Dynamic profile switching |
US9179844B2 (en) | 2011-11-28 | 2015-11-10 | Aranz Healthcare Limited | Handheld skin measuring or monitoring device |
JP5882805B2 (en) | 2012-03-26 | 2016-03-09 | キヤノン株式会社 | Information processing apparatus, processing method thereof, and program |
US8254647B1 (en) | 2012-04-16 | 2012-08-28 | Google Inc. | Facial image quality assessment |
US8811727B2 (en) * | 2012-06-15 | 2014-08-19 | Moataz A. Rashad Mohamed | Methods for efficient classifier training for accurate object recognition in images and video |
US9536178B2 (en) | 2012-06-15 | 2017-01-03 | Vufind, Inc. | System and method for structuring a large scale object recognition engine to maximize recognition accuracy and emulate human visual cortex |
US8542879B1 (en) | 2012-06-26 | 2013-09-24 | Google Inc. | Facial recognition |
US8457367B1 (en) | 2012-06-26 | 2013-06-04 | Google Inc. | Facial recognition |
US8411909B1 (en) | 2012-06-26 | 2013-04-02 | Google Inc. | Facial recognition |
US9262869B2 (en) | 2012-07-12 | 2016-02-16 | UL See Inc. | Method of 3D model morphing driven by facial tracking and electronic device using the method the same |
US8886953B1 (en) | 2012-09-14 | 2014-11-11 | Google Inc. | Image processing |
US8856541B1 (en) | 2013-01-10 | 2014-10-07 | Google Inc. | Liveness detection |
US20140341443A1 (en) * | 2013-05-16 | 2014-11-20 | Microsoft Corporation | Joint modeling for facial recognition |
GB2522259B (en) * | 2014-01-20 | 2020-04-29 | Apical Ltd | A method of object orientation detection |
US9842266B2 (en) * | 2014-04-04 | 2017-12-12 | Conduent Business Services, Llc | Method for detecting driver cell phone usage from side-view images |
US9614724B2 (en) | 2014-04-21 | 2017-04-04 | Microsoft Technology Licensing, Llc | Session-based device configuration |
US9639742B2 (en) | 2014-04-28 | 2017-05-02 | Microsoft Technology Licensing, Llc | Creation of representative content based on facial analysis |
US9773156B2 (en) | 2014-04-29 | 2017-09-26 | Microsoft Technology Licensing, Llc | Grouping and ranking images based on facial recognition data |
US9430667B2 (en) | 2014-05-12 | 2016-08-30 | Microsoft Technology Licensing, Llc | Managed wireless distribution network |
US9384334B2 (en) | 2014-05-12 | 2016-07-05 | Microsoft Technology Licensing, Llc | Content discovery in managed wireless distribution networks |
US10111099B2 (en) | 2014-05-12 | 2018-10-23 | Microsoft Technology Licensing, Llc | Distributing content in managed wireless distribution networks |
US9384335B2 (en) | 2014-05-12 | 2016-07-05 | Microsoft Technology Licensing, Llc | Content delivery prioritization in managed wireless distribution networks |
US9874914B2 (en) | 2014-05-19 | 2018-01-23 | Microsoft Technology Licensing, Llc | Power management contracts for accessory devices |
US9367490B2 (en) | 2014-06-13 | 2016-06-14 | Microsoft Technology Licensing, Llc | Reversible connector for accessory devices |
US9460493B2 (en) | 2014-06-14 | 2016-10-04 | Microsoft Technology Licensing, Llc | Automatic video quality enhancement with temporal smoothing and user override |
US9373179B2 (en) | 2014-06-23 | 2016-06-21 | Microsoft Technology Licensing, Llc | Saliency-preserving distinctive low-footprint photograph aging effect |
WO2016026135A1 (en) * | 2014-08-22 | 2016-02-25 | Microsoft Technology Licensing, Llc | Face alignment with shape regression |
US10755380B2 (en) | 2015-11-11 | 2020-08-25 | Texas Instruments Incorporated | Down scaling images in a computer vision system |
US10013527B2 (en) | 2016-05-02 | 2018-07-03 | Aranz Healthcare Limited | Automatically assessing an anatomical surface feature and securely managing information related to the same |
US9965689B2 (en) * | 2016-06-09 | 2018-05-08 | Qualcomm Incorporated | Geometric matching in visual navigation systems |
US11116407B2 (en) | 2016-11-17 | 2021-09-14 | Aranz Healthcare Limited | Anatomical surface assessment methods, devices and systems |
US10733506B1 (en) | 2016-12-14 | 2020-08-04 | Waymo Llc | Object detection neural network |
EP4183328A1 (en) | 2017-04-04 | 2023-05-24 | Aranz Healthcare Limited | Anatomical surface assessment methods, devices and systems |
Citations (21)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5533177A (en) * | 1990-10-24 | 1996-07-02 | Siemens Aktiengesellschaft | Method for detecting and estimating the spatial position of objects from a two-dimensional image |
US5642431A (en) * | 1995-06-07 | 1997-06-24 | Massachusetts Institute Of Technology | Network-based system and method for detection of faces and the like |
US5710833A (en) * | 1995-04-20 | 1998-01-20 | Massachusetts Institute Of Technology | Detection, recognition and coding of complex objects using probabilistic eigenspace analysis |
US5757287A (en) * | 1992-04-24 | 1998-05-26 | Hitachi, Ltd. | Object recognition system and abnormality detection system using image processing |
US6026189A (en) * | 1997-11-13 | 2000-02-15 | National Research Council Of Canada | Method of recognizing objects within two-dimensional and three-dimensional images |
US6025879A (en) * | 1996-08-29 | 2000-02-15 | Kokusai Denshin Denwa Kabushiki Kaisha | System for moving object detection in moving picture |
US6028956A (en) * | 1997-04-04 | 2000-02-22 | Kofile Inc. | Object location and span determination method and apparatus which determines a location and span of an object in an image |
US6038337A (en) * | 1996-03-29 | 2000-03-14 | Nec Research Institute, Inc. | Method and apparatus for object recognition |
US6072893A (en) * | 1997-08-29 | 2000-06-06 | Eastman Kodak Company | Method and system for locating objects in an image |
US6081612A (en) * | 1997-02-28 | 2000-06-27 | Electro Optical Sciences Inc. | Systems and methods for the multispectral imaging and characterization of skin tissue |
US6128397A (en) * | 1997-11-21 | 2000-10-03 | Justsystem Pittsburgh Research Center | Method for finding all frontal faces in arbitrarily complex visual scenes |
US6134339A (en) * | 1998-09-17 | 2000-10-17 | Eastman Kodak Company | Method and apparatus for determining the position of eyes and for correcting eye-defects in a captured frame |
US6154253A (en) * | 1996-02-06 | 2000-11-28 | Eastman Kodak Company | Object detection mechanism for imaging devices with automatic focusing |
US6256411B1 (en) * | 1997-05-28 | 2001-07-03 | Minolta Co., Ltd. | Image processing device and method for detecting objects in image data |
US6285393B1 (en) * | 1993-09-08 | 2001-09-04 | Sumitomo Electric Industries, Ltd. | Object recognition apparatus and method |
US20010028729A1 (en) * | 2000-03-27 | 2001-10-11 | Morimichi Nishigaki | Object recognition system |
US20020051578A1 (en) * | 2000-10-31 | 2002-05-02 | Taro Imagawa | Method and apparatus for object recognition |
US6421463B1 (en) * | 1998-04-01 | 2002-07-16 | Massachusetts Institute Of Technology | Trainable system to search for objects in images |
US20020102024A1 (en) * | 2000-11-29 | 2002-08-01 | Compaq Information Technologies Group, L.P. | Method and system for object detection in digital images |
US6456728B1 (en) * | 1998-01-27 | 2002-09-24 | Kabushiki Kaisha Toshiba | Object detection apparatus, motion control apparatus and pattern recognition apparatus |
US20060062451A1 (en) * | 2001-12-08 | 2006-03-23 | Microsoft Corporation | Method for boosting the performance of machine-learning classifiers |
-
2002
- 2002-10-07 US US10/266,139 patent/US7194114B2/en active Active
Patent Citations (21)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5533177A (en) * | 1990-10-24 | 1996-07-02 | Siemens Aktiengesellschaft | Method for detecting and estimating the spatial position of objects from a two-dimensional image |
US5757287A (en) * | 1992-04-24 | 1998-05-26 | Hitachi, Ltd. | Object recognition system and abnormality detection system using image processing |
US6285393B1 (en) * | 1993-09-08 | 2001-09-04 | Sumitomo Electric Industries, Ltd. | Object recognition apparatus and method |
US5710833A (en) * | 1995-04-20 | 1998-01-20 | Massachusetts Institute Of Technology | Detection, recognition and coding of complex objects using probabilistic eigenspace analysis |
US5642431A (en) * | 1995-06-07 | 1997-06-24 | Massachusetts Institute Of Technology | Network-based system and method for detection of faces and the like |
US6154253A (en) * | 1996-02-06 | 2000-11-28 | Eastman Kodak Company | Object detection mechanism for imaging devices with automatic focusing |
US6038337A (en) * | 1996-03-29 | 2000-03-14 | Nec Research Institute, Inc. | Method and apparatus for object recognition |
US6025879A (en) * | 1996-08-29 | 2000-02-15 | Kokusai Denshin Denwa Kabushiki Kaisha | System for moving object detection in moving picture |
US6081612A (en) * | 1997-02-28 | 2000-06-27 | Electro Optical Sciences Inc. | Systems and methods for the multispectral imaging and characterization of skin tissue |
US6028956A (en) * | 1997-04-04 | 2000-02-22 | Kofile Inc. | Object location and span determination method and apparatus which determines a location and span of an object in an image |
US6256411B1 (en) * | 1997-05-28 | 2001-07-03 | Minolta Co., Ltd. | Image processing device and method for detecting objects in image data |
US6072893A (en) * | 1997-08-29 | 2000-06-06 | Eastman Kodak Company | Method and system for locating objects in an image |
US6026189A (en) * | 1997-11-13 | 2000-02-15 | National Research Council Of Canada | Method of recognizing objects within two-dimensional and three-dimensional images |
US6128397A (en) * | 1997-11-21 | 2000-10-03 | Justsystem Pittsburgh Research Center | Method for finding all frontal faces in arbitrarily complex visual scenes |
US6456728B1 (en) * | 1998-01-27 | 2002-09-24 | Kabushiki Kaisha Toshiba | Object detection apparatus, motion control apparatus and pattern recognition apparatus |
US6421463B1 (en) * | 1998-04-01 | 2002-07-16 | Massachusetts Institute Of Technology | Trainable system to search for objects in images |
US6134339A (en) * | 1998-09-17 | 2000-10-17 | Eastman Kodak Company | Method and apparatus for determining the position of eyes and for correcting eye-defects in a captured frame |
US20010028729A1 (en) * | 2000-03-27 | 2001-10-11 | Morimichi Nishigaki | Object recognition system |
US20020051578A1 (en) * | 2000-10-31 | 2002-05-02 | Taro Imagawa | Method and apparatus for object recognition |
US20020102024A1 (en) * | 2000-11-29 | 2002-08-01 | Compaq Information Technologies Group, L.P. | Method and system for object detection in digital images |
US20060062451A1 (en) * | 2001-12-08 | 2006-03-23 | Microsoft Corporation | Method for boosting the performance of machine-learning classifiers |
Cited By (140)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6837617B1 (en) * | 1997-11-20 | 2005-01-04 | Israel Aircraft Industries Ltd. | Detection and recognition of objects by multispectral sensing |
US20030220767A1 (en) * | 2002-02-06 | 2003-11-27 | The University Of Chicago | Subband domain signal validation |
US7085675B2 (en) * | 2002-02-06 | 2006-08-01 | The University Of Chicago | Subband domain signal validation |
US20040022423A1 (en) * | 2002-08-02 | 2004-02-05 | Eastman Kodak Company | Method for locating faces in digital color images |
US20040179719A1 (en) * | 2003-03-12 | 2004-09-16 | Eastman Kodak Company | Method and system for face detection in digital images |
US7508961B2 (en) * | 2003-03-12 | 2009-03-24 | Eastman Kodak Company | Method and system for face detection in digital images |
US20040258313A1 (en) * | 2003-06-17 | 2004-12-23 | Jones Michael J. | Detecting arbitrarily oriented objects in images |
US7197186B2 (en) * | 2003-06-17 | 2007-03-27 | Mitsubishi Electric Research Laboratories, Inc. | Detecting arbitrarily oriented objects in images |
US20050065809A1 (en) * | 2003-07-29 | 2005-03-24 | Blackbaud, Inc. | System and methods for maximizing donations and identifying planned giving targets |
US20050185201A1 (en) * | 2003-11-05 | 2005-08-25 | Naoki Kuwata | Image processing apparatus and method of image processing |
US20090303349A1 (en) * | 2003-11-05 | 2009-12-10 | Seiko Epson Corporation | Image processing apparatus and method of image processing |
US20070230792A1 (en) * | 2004-04-08 | 2007-10-04 | Mobileye Technologies Ltd. | Pedestrian Detection |
US10838602B2 (en) * | 2004-06-22 | 2020-11-17 | International Business Machines Corporation | Persuasive portlets |
US8352395B1 (en) | 2004-07-22 | 2013-01-08 | Adobe Systems Incorporated | Training an attentional cascade |
WO2006047253A1 (en) * | 2004-10-22 | 2006-05-04 | Carnegie Mellon University | Object recognizer and detector for two-dimensional images using bayesian network based classifier |
US20060088207A1 (en) * | 2004-10-22 | 2006-04-27 | Henry Schneiderman | Object recognizer and detector for two-dimensional images using bayesian network based classifier |
US8064688B2 (en) | 2004-10-22 | 2011-11-22 | Carnegie Mellon University | Object recognizer and detector for two-dimensional images using Bayesian network based classifier |
US8472706B2 (en) | 2004-10-22 | 2013-06-25 | Henry Schneiderman | Object recognizer and detector for two-dimensional images using Bayesian network based classifier |
US9978002B2 (en) | 2004-10-22 | 2018-05-22 | Carnegie Mellon University | Object recognizer and detector for two-dimensional images using Bayesian network based classifier |
US9213885B1 (en) | 2004-10-22 | 2015-12-15 | Carnegie Mellon University | Object recognizer and detector for two-dimensional images using Bayesian network based classifier |
US7848566B2 (en) | 2004-10-22 | 2010-12-07 | Carnegie Mellon University | Object recognizer and detector for two-dimensional images using bayesian network based classifier |
US20090067730A1 (en) * | 2004-10-22 | 2009-03-12 | Henry Schneiderman | Object Recognizer and Detector for Two-Dimensional Images Using Bayesian Network Based Classifier |
US20060112038A1 (en) * | 2004-10-26 | 2006-05-25 | Huitao Luo | Classifier performance |
US7450766B2 (en) * | 2004-10-26 | 2008-11-11 | Hewlett-Packard Development Company, L.P. | Classifier performance |
US7421114B1 (en) * | 2004-11-22 | 2008-09-02 | Adobe Systems Incorporated | Accelerating the boosting approach to training classifiers |
US7639869B1 (en) | 2004-11-22 | 2009-12-29 | Adobe Systems Incorporated | Accelerating the boosting approach to training classifiers |
US7634142B1 (en) | 2005-01-24 | 2009-12-15 | Adobe Systems Incorporated | Detecting objects in images using a soft cascade |
WO2006090313A3 (en) * | 2005-02-24 | 2006-12-07 | Koninkl Philips Electronics Nv | Object recognition using adrc (adaptive dynamic range coding) |
WO2006090313A2 (en) * | 2005-02-24 | 2006-08-31 | Koninklijke Philips Electronics N.V. | Object recognition using adrc (adaptive dynamic range coding) |
US20080208828A1 (en) * | 2005-03-21 | 2008-08-28 | Oren Boiman | Detecting Irregularities |
US8363959B2 (en) * | 2005-03-21 | 2013-01-29 | Yeda Research & Development Co. Ltd. | Detecting irregularities |
US20060257017A1 (en) * | 2005-05-12 | 2006-11-16 | Huitao Luo | Classification methods, classifier determination methods, classifiers, classifier determination devices, and articles of manufacture |
US7643674B2 (en) * | 2005-05-12 | 2010-01-05 | Hewlett-Packard Development Company, L.P. | Classification methods, classifier determination methods, classifiers, classifier determination devices, and articles of manufacture |
US7590267B2 (en) * | 2005-05-31 | 2009-09-15 | Microsoft Corporation | Accelerated face detection based on prior probability of a view |
US20070053585A1 (en) * | 2005-05-31 | 2007-03-08 | Microsoft Corporation | Accelerated face detection based on prior probability of a view |
US20070076959A1 (en) * | 2005-10-03 | 2007-04-05 | Xerox Corporation | JPEG detectors and JPEG image history estimators |
TWI426774B (en) * | 2005-10-03 | 2014-02-11 | Xerox Corp | A method for classifying an uncompressed image respective to jpeg compression history, an apparatus for classifying an image respective to whether the image has undergone jpeg compression and an image classification method |
KR101289630B1 (en) * | 2005-10-03 | 2013-07-30 | 제록스 코포레이션 | ＪＰＥＧ detectors and ＪＰＥＧ image history estimators |
US7747082B2 (en) * | 2005-10-03 | 2010-06-29 | Xerox Corporation | JPEG detectors and JPEG image history estimators |
WO2007090029A2 (en) * | 2006-01-27 | 2007-08-09 | Ge Healthcare Bio-Sciences Corp. | System and method for providing an optical section image by direct phase angle determination and use of more than three images |
US20070177820A1 (en) * | 2006-01-27 | 2007-08-02 | O Ruanaidh Joseph J | System and method for providing an optical section image by direct phase angle determination and use of more than three images |
WO2007090029A3 (en) * | 2006-01-27 | 2008-05-08 | Ge Healthcare Bio Sciences | System and method for providing an optical section image by direct phase angle determination and use of more than three images |
US20070226160A1 (en) * | 2006-03-22 | 2007-09-27 | Sony Corporation | Method and system for transitioning from a case-based classifier system to a rule-based classifier system |
US8051027B2 (en) | 2006-03-22 | 2011-11-01 | Sony Corporation | Method and system for transitioning from a case-based classifier system to a rule-based classifier system |
US20110010322A1 (en) * | 2006-03-22 | 2011-01-13 | Sony Corporation, A Japanese Corporation | Method and system for transitioning from a case-based classifier system to a rule-based classifier system |
US7809665B2 (en) * | 2006-03-22 | 2010-10-05 | Sony Corporation | Method and system for transitioning from a case-based classifier system to a rule-based classifier system |
US9443154B2 (en) | 2006-05-31 | 2016-09-13 | Mobileye Vision Technologies Ltd. | Fusion of far infrared and visible images in enhanced obstacle detection in automotive applications |
US9323992B2 (en) | 2006-05-31 | 2016-04-26 | Mobileye Vision Technologies Ltd. | Fusion of far infrared and visible images in enhanced obstacle detection in automotive applications |
US20080027887A1 (en) * | 2006-07-27 | 2008-01-31 | The Government Of The Us, As Represented By The Secretary Of The Navy | System and method for fusing data from different information sources |
US7668790B2 (en) * | 2006-07-27 | 2010-02-23 | The United States Of America As Represented By The Secretary Of The Navy | System and method for fusing data from different information sources with shared-sampling distribution based boosting |
US20080056562A1 (en) * | 2006-08-30 | 2008-03-06 | Nec Corporation | Object identification parameter learning system |
US8103091B2 (en) * | 2006-08-30 | 2012-01-24 | Nec Corporation | Object identification parameter learning system |
US20080080743A1 (en) * | 2006-09-29 | 2008-04-03 | Pittsburgh Pattern Recognition, Inc. | Video retrieval system for human face content |
US8401252B2 (en) | 2006-09-29 | 2013-03-19 | Google Inc. | Video retrieval system for human face content |
US7881505B2 (en) | 2006-09-29 | 2011-02-01 | Pittsburgh Pattern Recognition, Inc. | Video retrieval system for human face content |
US20110170749A1 (en) * | 2006-09-29 | 2011-07-14 | Pittsburgh Pattern Recognition, Inc. | Video retrieval system for human face content |
US20080089591A1 (en) * | 2006-10-11 | 2008-04-17 | Hui Zhou | Method And Apparatus For Automatic Image Categorization |
US7822252B2 (en) * | 2006-11-28 | 2010-10-26 | Siemens Medical Solutions Usa, Inc. | Method of multiple instance learning and classification with correlations in object detection |
US20080125648A1 (en) * | 2006-11-28 | 2008-05-29 | Siemens Medical Solutions Usa, Inc. | Method of Multiple Instance Learning and Classification With Correlations in Object Detection |
US8335346B2 (en) * | 2007-03-23 | 2012-12-18 | Raytheon Company | Identifying whether a candidate object is from an object class |
US20090060353A1 (en) * | 2007-03-23 | 2009-03-05 | Payam Saisan | Identifying whether a candidate object is from an object class |
US20110058734A1 (en) * | 2007-06-13 | 2011-03-10 | Microsoft Corporation | Classification of images as advertisement images or non-advertisement images |
US8027940B2 (en) | 2007-06-13 | 2011-09-27 | Microsoft Corporation | Classification of images as advertisement images or non-advertisement images |
US20080313031A1 (en) * | 2007-06-13 | 2008-12-18 | Microsoft Corporation | Classification of images as advertisement images or non-advertisement images |
US7840502B2 (en) | 2007-06-13 | 2010-11-23 | Microsoft Corporation | Classification of images as advertisement images or non-advertisement images of web pages |
WO2009012056A3 (en) * | 2007-07-13 | 2009-03-26 | Microsoft Corp | Multiple-instance pruning for learning efficient cascade detectors |
US8144944B2 (en) | 2007-08-14 | 2012-03-27 | Olympus Corporation | Image sharing system and method |
US20110188706A1 (en) * | 2007-12-21 | 2011-08-04 | Siemens Medical Solutions Usa, Inc. | Redundant Spatial Ensemble For Computer-Aided Detection and Image Understanding |
US8494238B2 (en) * | 2007-12-21 | 2013-07-23 | Siemens Medical Solutions Usa, Inc. | Redundant spatial ensemble for computer-aided detection and image understanding |
US8655079B2 (en) | 2008-03-17 | 2014-02-18 | Raytheon Company | Reducing false alarms in identifying whether a candidate image is from an object class |
US20090232406A1 (en) * | 2008-03-17 | 2009-09-17 | Payam Saisan | Reducing false alarms in identifying whether a candidate image is from an object class |
US20100111376A1 (en) * | 2008-06-27 | 2010-05-06 | Lockheed Martin Corporation | Assesssing biometric sample quality using wavelets and a boosted classifier |
US8666122B2 (en) | 2008-06-27 | 2014-03-04 | Lockheed Martin Corporation | Assessing biometric sample quality using wavelets and a boosted classifier |
US8442279B2 (en) * | 2008-06-27 | 2013-05-14 | Lockheed Martin Corporation | Assessing biometric sample quality using wavelets and a boosted classifier |
US10086265B2 (en) * | 2008-07-11 | 2018-10-02 | Disney Enterprises, Inc. | Video teleconference object enable system |
US20150306496A1 (en) * | 2008-07-11 | 2015-10-29 | Disney Enterprises, Inc. | Video teleconference object enable system |
US8379937B1 (en) | 2008-09-29 | 2013-02-19 | Videomining Corporation | Method and system for robust human ethnicity recognition using image feature-based probabilistic graphical models |
US20100114746A1 (en) * | 2008-10-31 | 2010-05-06 | International Business Machines Corporation | Generating an alert based on absence of a given person in a transaction |
US8429016B2 (en) | 2008-10-31 | 2013-04-23 | International Business Machines Corporation | Generating an alert based on absence of a given person in a transaction |
US20100110183A1 (en) * | 2008-10-31 | 2010-05-06 | International Business Machines Corporation | Automatically calibrating regions of interest for video surveillance |
US20100114671A1 (en) * | 2008-10-31 | 2010-05-06 | International Business Machines Corporation | Creating a training tool |
US20100134624A1 (en) * | 2008-10-31 | 2010-06-03 | International Business Machines Corporation | Detecting primitive events at checkout |
US8345101B2 (en) | 2008-10-31 | 2013-01-01 | International Business Machines Corporation | Automatically calibrating regions of interest for video surveillance |
US8612286B2 (en) | 2008-10-31 | 2013-12-17 | International Business Machines Corporation | Creating a training tool |
US9299229B2 (en) | 2008-10-31 | 2016-03-29 | Toshiba Global Commerce Solutions Holdings Corporation | Detecting primitive events at checkout |
US9691003B2 (en) * | 2008-11-05 | 2017-06-27 | Cortexica Vision Systems Limited | Keypoint descriptor generation by complex wavelet analysis |
US20150371106A1 (en) * | 2008-11-05 | 2015-12-24 | Cortexica Vision Systems Limited | Keypoint descriptor generation by complex wavelet analysis |
US20120218414A1 (en) * | 2008-11-29 | 2012-08-30 | International Business Machines Corporation | Location-Aware Event Detection |
US8638380B2 (en) * | 2008-11-29 | 2014-01-28 | Toshiba Global Commerce | Location-aware event detection |
US20100134625A1 (en) * | 2008-11-29 | 2010-06-03 | International Business Machines Corporation | Location-aware event detection |
US8253831B2 (en) * | 2008-11-29 | 2012-08-28 | International Business Machines Corporation | Location-aware event detection |
US20100172584A1 (en) * | 2009-01-07 | 2010-07-08 | Rastislav Lukac | Method Of Classifying Red-Eye Objects Using Feature Extraction And Classifiers |
US8295637B2 (en) | 2009-01-07 | 2012-10-23 | Seiko Epson Corporation | Method of classifying red-eye objects using feature extraction and classifiers |
US20100239163A1 (en) * | 2009-03-19 | 2010-09-23 | Electronics And Telecommunications Research Institute | Image searching method and apparatus |
US8520980B2 (en) * | 2009-03-19 | 2013-08-27 | Electronics And Telecommunications Research Institute | Image searching method and apparatus |
US8170332B2 (en) | 2009-10-07 | 2012-05-01 | Seiko Epson Corporation | Automatic red-eye object classification in digital images using a boosting-based framework |
US20110081079A1 (en) * | 2009-10-07 | 2011-04-07 | Jie Wang | Automatic Red-Eye Object Classification In Digital Images Using A Boosting-Based Framework |
US20120192059A1 (en) * | 2011-01-20 | 2012-07-26 | Vastec, Inc. | Method and System to Convert Visually Orientated Objects to Embedded Text |
US8832541B2 (en) * | 2011-01-20 | 2014-09-09 | Vastec, Inc. | Method and system to convert visually orientated objects to embedded text |
US9563813B1 (en) * | 2011-05-26 | 2017-02-07 | Google Inc. | System and method for tracking objects |
US8917913B2 (en) | 2011-09-22 | 2014-12-23 | International Business Machines Corporation | Searching with face recognition and social networking profiles |
US20130077835A1 (en) * | 2011-09-22 | 2013-03-28 | International Business Machines Corporation | Searching with face recognition and social networking profiles |
US9710695B2 (en) * | 2013-03-15 | 2017-07-18 | Sony Corporation | Characterizing pathology images with statistical analysis of local neural network responses |
US20140270431A1 (en) * | 2013-03-15 | 2014-09-18 | Sony Corporation | Characterizing pathology images with statistical analysis of local neural network responses |
US9626597B2 (en) | 2013-05-09 | 2017-04-18 | Tencent Technology (Shenzhen) Company Limited | Systems and methods for facial age identification |
US9679195B2 (en) * | 2013-05-10 | 2017-06-13 | Tencent Technology (Shenzhen) Company Limited | Systems and methods for facial property identification |
US10438052B2 (en) * | 2013-05-10 | 2019-10-08 | Tencent Technology (Shenzhen) Company Limited | Systems and methods for facial property identification |
US20140341422A1 (en) * | 2013-05-10 | 2014-11-20 | Tencent Technology (Shenzhen) Company Limited | Systems and Methods for Facial Property Identification |
US9235781B2 (en) * | 2013-08-09 | 2016-01-12 | Kabushiki Kaisha Toshiba | Method of, and apparatus for, landmark location |
US20150043772A1 (en) * | 2013-08-09 | 2015-02-12 | Toshiba Medical Systems Corporation | Method of, and apparatus for, landmark location |
CN104346625A (en) * | 2013-08-09 | 2015-02-11 | 株式会社东芝 | Medical image processing device, medical image processing method and classifier training method |
US20170083754A1 (en) * | 2014-04-11 | 2017-03-23 | Beijing Sensetime Technology Development Co., Ltd | Methods and Systems for Verifying Face Images Based on Canonical Images |
US10037457B2 (en) * | 2014-04-11 | 2018-07-31 | Beijing Sensetime Technology Development Co., Ltd | Methods and systems for verifying face images based on canonical images |
US10067227B2 (en) * | 2014-10-06 | 2018-09-04 | Nidec Corporation | Neural network-based radar system |
US9576204B2 (en) * | 2015-03-24 | 2017-02-21 | Qognify Ltd. | System and method for automatic calculation of scene geometry in crowded video scenes |
US10372985B2 (en) | 2015-08-26 | 2019-08-06 | Digitalglobe, Inc. | System for simplified generation of systems for broad area geospatial object detection |
US20170277976A1 (en) * | 2016-03-25 | 2017-09-28 | Honda Motor Co., Ltd. | Teacher data generation method |
US10311317B2 (en) * | 2016-03-25 | 2019-06-04 | Honda Motor Co., Ltd. | Teacher data generation method |
US20210233244A1 (en) * | 2016-12-15 | 2021-07-29 | General Electric Company | System and method for image segmentation using a joint deep learning model |
US11810301B2 (en) * | 2016-12-15 | 2023-11-07 | General Electric Company | System and method for image segmentation using a joint deep learning model |
WO2018222775A1 (en) * | 2017-05-30 | 2018-12-06 | Digitalglobe, Inc. | Broad area geospatial object detection |
US11276213B2 (en) | 2017-07-14 | 2022-03-15 | Rapiscan Laboratories, Inc. | Neural network based detection of items of interest and intelligent generation of visualizations thereof |
US10504261B2 (en) | 2017-07-14 | 2019-12-10 | Synapse Technology Corporation | Generating graphical representation of scanned objects |
US10572963B1 (en) | 2017-07-14 | 2020-02-25 | Synapse Technology Corporation | Detection of items |
US9996890B1 (en) * | 2017-07-14 | 2018-06-12 | Synapse Technology Corporation | Detection of items |
US11790575B2 (en) | 2017-08-18 | 2023-10-17 | Rapiscan Laboratories, Inc. | Object detection training based on artificially generated images |
US11423592B2 (en) | 2017-08-18 | 2022-08-23 | Rapiscan Laboratories, Inc. | Object detection training based on artificially generated images |
US10453223B2 (en) | 2017-08-18 | 2019-10-22 | Synapse Technology Corporation | Generating synthetic image data |
US10755420B2 (en) * | 2017-10-27 | 2020-08-25 | Samsung Electronics Co., Ltd. | Method and apparatus for tracking object |
US10977801B2 (en) | 2017-10-27 | 2021-04-13 | Samsung Electronics Co., Ltd. | Method and apparatus for tracking object |
US20210233253A1 (en) * | 2017-10-27 | 2021-07-29 | Samsung Electronics Co., Ltd. | Method and apparatus for tracking object |
US11676421B2 (en) * | 2017-10-27 | 2023-06-13 | Samsung Electronics Co., Ltd. | Method and apparatus for tracking object |
WO2019095469A1 (en) * | 2017-11-14 | 2019-05-23 | Zhejiang Dahua Technology Co., Ltd. | Method and system for face detection |
US11804032B2 (en) | 2017-11-14 | 2023-10-31 | Zhejiang Dahua Technology Co., Ltd. | Method and system for face detection |
US11263434B2 (en) * | 2018-03-09 | 2022-03-01 | South China University Of Technology | Fast side-face interference resistant face detection method |
US11263499B2 (en) | 2018-07-20 | 2022-03-01 | Rapiscan Laboratories, Inc. | Multi-perspective detection of objects |
US10706335B2 (en) | 2018-07-20 | 2020-07-07 | Rapiscan Laboratories, Inc. | Multi-perspective detection of objects |
US10452959B1 (en) | 2018-07-20 | 2019-10-22 | Synapse Tehnology Corporation | Multi-perspective detection of objects |
US11010605B2 (en) | 2019-07-30 | 2021-05-18 | Rapiscan Laboratories, Inc. | Multi-model detection of objects |
US11604557B2 (en) * | 2019-12-26 | 2023-03-14 | Dassault Systemes | 3D interface with an improved object selection |
Also Published As
Publication number | Publication date |
---|---|
US7194114B2 (en) | 2007-03-20 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7194114B2 (en) | Object finder for two-dimensional images, and system for determining a set of sub-classifiers composing an object finder | |
US9978002B2 (en) | Object recognizer and detector for two-dimensional images using Bayesian network based classifier | |
US6829384B2 (en) | Object finder for photographic images | |
US11475660B2 (en) | Method and system for facilitating recognition of vehicle parts based on a neural network | |
Schneiderman et al. | Object detection using the statistics of parts | |
US8885943B2 (en) | Face detection method and apparatus | |
US7058209B2 (en) | Method and computer program product for locating facial features | |
EP3690740B1 (en) | Method for optimizing hyperparameters of auto-labeling device which auto-labels training images for use in deep learning network to analyze images with high precision, and optimizing device using the same | |
US7369682B2 (en) | Adaptive discriminative generative model and application to visual tracking | |
US8391592B2 (en) | System and method for detection of multi-view/multi-pose objects | |
US7840059B2 (en) | Object recognition using textons and shape filters | |
CN111709416B (en) | License plate positioning method, device, system and storage medium | |
EP3690741A2 (en) | Method for automatically evaluating labeling reliability of training images for use in deep learning network to analyze images, and reliability-evaluating device using the same | |
JP2005202932A (en) | Method of classifying data into a plurality of classes | |
US10733483B2 (en) | Method and system for classification of data | |
US20220335572A1 (en) | Semantically accurate super-resolution generative adversarial networks | |
CN116075820A (en) | Method, non-transitory computer readable storage medium and apparatus for searching image database | |
CN110135363B (en) | Method, system, equipment and medium for searching pedestrian image based on recognition dictionary embedding | |
CN115019039B (en) | Instance segmentation method and system combining self-supervision and global information enhancement | |
Serre et al. | Feature selection for face detection | |
US20230401716A1 (en) | Transformer for efficient image segmentation | |
Li et al. | EMOD: Efficient Moving Object Detection via Image Eccentricity Analysis and Sparse Neural Networks | |
Cotton | Measuring Machine Learning Model Uncertainty with Applications to Aerial Segmentation | |
CN117557985A (en) | Three-dimensional space occupation identification method and system in automatic driving scene | |
Aysha et al. | Document Image Segmentation and Compression using Artificial Neural Networks and Evolutionary Methods |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: CARNEGIE MELLON UNIVERSITY, PENNSYLVANIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:SCHNEIDERMAN, HENRY;REEL/FRAME:013585/0189Effective date: 20021103 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FEPP | Fee payment procedure |
Free format text: PAT HOLDER CLAIMS SMALL ENTITY STATUS, ENTITY STATUS SET TO SMALL (ORIGINAL EVENT CODE: LTOS); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
CC | Certificate of correction | ||
FPAY | Fee payment |
Year of fee payment: 4 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
FEPP | Fee payment procedure |
Free format text: PAT HOLDER NO LONGER CLAIMS SMALL ENTITY STATUS, ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: STOL); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044695/0115Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 12TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1553); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 12 |