US9230159B1 - Action recognition and detection on videos - Google Patents
Action recognition and detection on videos Download PDFInfo
- Publication number
- US9230159B1 US9230159B1 US14/100,595 US201314100595A US9230159B1 US 9230159 B1 US9230159 B1 US 9230159B1 US 201314100595 A US201314100595 A US 201314100595A US 9230159 B1 US9230159 B1 US 9230159B1
- Authority
- US
- United States
- Prior art keywords
- hidden state
- discrete hidden
- localizer
- bounding box
- inferred
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V40/00—Recognition of biometric, human-related or animal-related patterns in image or video data
- G06V40/20—Movements or behaviour, e.g. gesture recognition
- G06V40/23—Recognition of whole body movements, e.g. for sport training
-
- G06K9/00342—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V10/00—Arrangements for image or video recognition or understanding
- G06V10/20—Image preprocessing
- G06V10/255—Detecting or recognising potential candidate objects based on visual cues, e.g. shapes
Definitions
- This disclosure generally relates to systems and methods that facilitate employing an exemplar Histogram of Oriented Gradients Linear Discriminant Analysis (HOG-LDA) templates along with Localizer Hidden Markov Models (HMM) to train a classification model to classify actions in videos by learning poses and transitions between the poses associated with the actions in a view of a continuous state represented by bounding boxes corresponding to where the action is located in frames of the video.
- HOG-LDA Histogram of Oriented Gradients Linear Discriminant Analysis
- HMM Localizer Hidden Markov Models
- Advances in video capture technologies has allowed an average consumer to become a producer of media content using handheld devices, such as mobile phones and camcorders.
- This media content can be shared through a media sharing technology, for example, a social network, a media content sharing site, email, messaging, or other suitable technologies.
- a media sharing technology for example, a social network, a media content sharing site, email, messaging, or other suitable technologies.
- it is advantageous to classify the video or portions of the video according to action(s) contained in the video such as running, diving, throwing, kicking, falling, swinging, or any other suitable action.
- a video captured of a child throwing a football at a little league football game can be classified as football or throwing.
- this classification is performed using manual classification or automatically using global metadata associated with the entire video, such as title, location, interest points, or any other suitable metadata associated with the video.
- these approaches ignore localized spatial and temporal information associated with an action in frames of a video.
- a set of training videos respectively classified for an action of a plurality of actions is accessed, a plurality of exemplar Histogram of Oriented Gradients Linear Discriminant Analysis (HOG-LDA) templates are learned using a HOG-LDA model on the a set of training videos, respective sets of candidate bounding boxes for each frame of the set of training videos are estimated using the learned exemplar HOG-LDA templates, wherein each candidate bounding box has an associated template matching score, respective discrete hidden states and a respective bounding box for each discrete hidden state for a plurality of localizer Hidden Markov Models (HMM) are inferred using the estimated sets of candidate bounding boxes, where each localizer HMM is associated with an action of the plurality of actions, and a respective set of parameters for each inferred discrete hidden state of the plurality of localizer HMMs is determined using an objective function.
- HOG-LDA Histogram of Oriented Gradients Linear Discriminant Analysis
- a HOG-LDA training component is configured to access a set of training videos respectively classified for an action of a plurality of actions and learn a plurality of exemplar Histogram of Oriented Gradients Linear Discriminant Analysis (HOG-LDA) templates using a HOG-LDA model on the a set of training videos
- HOG-LDA scoring component is configured to estimate respective sets of candidate bounding boxes for each frame of the set of training videos using the learned exemplar HOG-LDA templates, wherein each candidate bounding box has an associated template matching score
- a Viterbi inference component is configured to infer respective discrete hidden states and a respective bounding box for each discrete hidden state for a plurality of localizer Hidden Markov Models (HMM) using the estimated sets of candidate bounding boxes, where each localizer HMM is associated with an action of the plurality of actions
- an objective maximization component is configured to determine a respective set of parameters for each inferred discrete hidden state of the plurality
- FIG. 1 illustrates a block diagram of an exemplary non-limiting example system 100 for training models to classify actions based upon learning poses and transitions between the poses associated with the actions in a view of a continuous state represented by bounding boxes corresponding to where the action is located in frames of a video in accordance with an implementation of this disclosure.
- FIG. 2 illustrates a block diagram of an exemplary non-limiting an action pose learning component that trains localizer HMMs to learn poses and transitions between the poses associated with actions in a view of a continuous state represented by bounding boxes corresponding to where the action is located in frames of a video in accordance with an implementation of this disclosure.
- FIG. 3 illustrates a block diagram of an exemplary non-limiting a localizer HMM training component that trains respective localizer HMMs associated with a set of actions using outputs from the trained exemplar HOG-LDA templates in accordance with an implementation of this disclosure.
- FIG. 4A illustrates exemplary non-limiting frames of a video on which trained exemplar HOG-LDA templates have been applied to the frames to generate bounding boxes and classes for each frame in accordance with an implementation of this disclosure.
- FIG. 4B illustrates exemplary non-limiting frames on which a trained Localizer Hidden Markov Models (HMM) has been applied to smooth out the predictions of trained exemplar HOG-LDA templates in accordance with an implementation of this disclosure.
- HMM Localizer Hidden Markov Models
- FIG. 5 illustrates exemplary non-limiting frames of a video on which a trained localizer HMM has been applied in accordance with an implementation of this disclosure.
- FIG. 6 illustrates an exemplary non-limiting flow diagram for training models to classify actions based upon learning poses and transitions between the poses associated with the actions in a view of a continuous state represented by bounding boxes corresponding to where the action is located in frames of a video in accordance with an implementation of this disclosure.
- FIGS. 7A , 7 B, and 7 C illustrate an exemplary non-limiting flow diagram for training a plurality of exemplar HOG-LDA templates in accordance with an implementation of this disclosure.
- FIG. 8 illustrates a block diagram of an exemplary non-limiting networked environment in which various embodiments can be implemented.
- FIG. 9 illustrates a block diagram of an exemplary non-limiting computing system or operating environment in which various embodiments can be implemented.
- a mechanism for training a classification model to classify actions in videos by learning poses and transitions between the poses associated with the actions in a view of a continuous state represented by a bounding box corresponding to where the action is located in frames of the video.
- a set of training video is accessed, wherein respective videos are classified according to action and comprise a plurality of frames with defined bounding boxes around the area of the frame where action is located.
- the frames and bounding boxes are employed to train a plurality of exemplar Histogram of Oriented Gradients Linear Discriminant Analysis (HOG-LDA) templates using a HOG-LDA modeling algorithm.
- the exemplar HOG-LDA templates are employed to train respective localizer Hidden Markov Models (HMM) associated with a set of actions.
- any suitable localizer template can be employed, non-limiting examples of which include deformable parts models, bag of words models, and deep neural networks.
- FIG. 4A in a non-limiting example, are depicted three frames 410 A, 410 B, and 410 C of a video on which trained exemplar HOG-LDA templates have been applied to the frames to generate bounding boxes 415 A, 415 B, and 415 C and classes for each frame.
- the bounding boxes 415 A, 415 B, and 415 C in each frame are very different.
- frame 410 A has been classified with action “running”
- frame 410 B has been classified with action “diving”
- frame 410 C has been classified with action “running” by the HOG-LDA templates.
- FIG. 4B in a non-limiting example, are depicted the three frames 410 A, 410 B, and 410 C of FIG. 4A on which a trained Localizer Hidden Markov Models (HMM) has been applied to smooth out the predictions of the trained exemplar HOG-LDA templates.
- HMM Localizer Hidden Markov Models
- the bounding boxes 420 A, 420 B, and 420 C in each frame are more consistent and the all three frames have been classified as action “running”.
- the localizer HMM is an improvement on a standard HMM where the dynamics of the localizers (e.g. bounding boxes) are modeled using a continuous hidden state.
- the localizer HMM can be thought of a fusion model that combines cues from neighboring localization outputs and that from a weak frame level localization on the current frame to provide an accurate localization for the entire video.
- the exemplar HOG-LDA templates learn image based classifiers for predicting the bounding boxes. It can be observed that applying the exemplar HOG-LDA model on videos results in substantially poor localization performance. However, with the application of the localizer HMM to smooth out the predictions of the HOG-LDA outputs, the precision of localization improves substantially, for example, from around 10% to over 70% in experimental results.
- the training mechanisms learn parameters of the localizer HMM.
- the localizer HMM resembles a switching dynamical model whose continuous state represents the bounding boxes.
- An approximate Viterbi approach can be employed to solve the inference problem.
- the application of the localizer HMM to the exemplar HOG-LDA templates results in significantly improved localization in videos using weaker but computationally inexpensive image-level detectors (e.g. exemplar HOG-LDA templates).
- the localizer HMM is trained for action localization that learns both temporal smoothing constraints and pose transitions that an object makes in the course of an action.
- the framework jointly trains the exemplar HOG-LDA templates with the localizer HMM.
- the localizer HMM models the dynamics of the bounding boxes using multiple hidden discrete states for each action. Inference on these hidden discrete states leads to natural segmentation of actions into meaningful units (e.g. poses).
- FIG. 5 in a non-limiting example, are depicted three frames 510 A, 510 B, and 510 C of a video on which a trained localizer HMM has been applied.
- the three bounding boxes 515 A, 515 B, and 515 C in the frames 510 A, 510 B, and 510 C are associated with poses corresponding to the three consecutive hidden discrete states in the trained localizer HMM for the action, in this non-limiting example, diving.
- a localizer HMM models an action as a conjunction of object poses (e.g., states or sub-actions) along with the transitions between poses.
- the exemplar HOG-LDA templates model the bounding boxes for each state.
- the exemplar HOG-LDA templates are re-trained iteratively using the states inferred by an approximate Viterbi algorithm. In order to maintain continuity in the image coordinates of the modeled boundary box locations, a linear dependency between the respective modeled bounding boxes associated with two adjacent states is enforced.
- the resulting localizer HMM resembles a switching dynamical model. Given a current localizer HMM of the exemplar HOG-LDA templates for each hidden state, an inference can be performed on the localizer HMM to estimate the states and bounding boxes (e.g. location, scale, size, and/or aspect ratio of the bounding box) at each frame (e.g. time).
- a significant advantage of the herein approach is the explicit modeling of the poses that an object can take during an action along with learning of valid transitions the object makes between these poses in a joint framework. Additionally, the approach performs simultaneous detection and recognition of actions thus identifying bounding boxes within each frame of the video that are relevant to the action being performed and not just video classification.
- FIG. 1 depicts a system 100 for training models to classify actions based upon learning poses and transitions between the poses associated with the actions in a view of a continuous state represented by bounding boxes corresponding to where the action is located in frames of a video.
- System 100 includes device 110 that includes action pose learning component 120 that trains localizer HMMs to learn poses and transitions between the poses associated with actions in a view of a continuous state represented by bounding boxes corresponding to where the action is located in frames of the video.
- Device 110 also includes interface component 130 that that interacts with other device(s) 150 to facilitate exchange of data.
- device 110 includes a data store 140 that can store videos, and data generated and received by device 110 , action pose learning component 120 , and interface component 130 .
- Data store 140 can be stored on any suitable type of storage device, non-limiting examples of which are illustrated with reference to FIGS. 8 and 9 .
- Device 110 and device 150 include at least one memory that stores computer executable components and at least one processor that executes the computer executable components stored in the memory, a non-limiting example of which can be found with reference to FIG. 9 .
- Device 110 can communicate via a wired and/or wireless network with other devices 150 .
- Device 110 and device 150 can be any suitable type of device for recording, interacting with, receiving, accessing, or supplying data locally, or remotely over a wired or wireless communication link, non-limiting examples of include a wearable device or a non-wearable device.
- Wearable device can include, for example, heads-up display glasses, a monocle, eyeglasses, contact lens, sunglasses, a headset, a visor, a cap, a helmet, a mask, a headband, clothing, camera, video camera, or any other suitable device capable of recording, interacting with, receiving, accessing, or supplying data that can be worn by a human or non-human user.
- Non-wearable device can include, for example, a mobile device, a mobile phone, a camera, a camcorder, a video camera, personal data assistant, laptop computer, tablet computer, desktop computer, server system, cable set top box, satellite set top box, cable modem, television set, monitor, media extender device, Blu-ray device, DVD (digital versatile disc or digital video disc) device, compact disc device, video game system, portable video game console, audio/video receiver, radio device, portable music player, navigation system, car stereo, motion sensor, infrared sensor, or any other suitable device capable of recording, interacting with, receiving, accessing, or supplying data.
- device 110 and device 150 can include a user interface (e.g., a web browser or application), that can receive and present displays and data generated locally or remotely.
- FIG. 2 illustrates an action pose learning component 120 that trains localizer HMMs to learn poses and transitions between the poses associated with actions in a view of a continuous state represented by bounding boxes corresponding to where the action is located in frames of a video.
- Action pose learning component 120 includes a HOG-LDA training component 210 that trains a plurality of exemplar HOG-LDA templates.
- Action pose learning component 120 also includes localizer HMM training component 220 that trains to trains respective localizer Hidden Markov Models (HMM) associated with a set of actions using outputs from the trained exemplar HOG-LDA templates.
- HMM Hidden Markov Models
- HOG-LDA training component 210 accesses a set of training videos ⁇ O 1 , . . . , O j , . . . , O N , ⁇ where N is the number of training videos in the set and j is an integer indexing from 1 to N.
- Each video O j in the training set is classified according to action a from a set of actions A (a ⁇ A) and comprises a plurality of frames oj 1 . . . oj T j , where T j is the number of frames in video O j . It is to be appreciated that each video O can have a different number of frames T.
- each video O j in the training set has defined bounding boxes bj 1 . . .
- bounding box b is specified by its location and size.
- b [x, y, w, h], where x is a horizontal center location of the bounding box b in the frame, y is vertical center location of the bounding box b in the frame, w is the width of the bounding box b, and h is the height of the bounding box b.
- the bounding box can be specified in any suitable manner.
- HOG-LDA training component 210 employs a HOG-LDA template training algorithm on the set of training videos O 1 . . . O j . . . O N to train exemplar HOG-LDA templates that are capable of handling mild variants in the set of training videos.
- the HOG-LDA template training algorithm first learns a single exemplar HOG-LDA template from a randomly chosen frame o from the set of training videos and greedily removes additional frames o that match (e.g., detected by) the learned exemplar HOG-LDA template. This process is repeated until all the frames o in the set of training videos are either matched to a learned exemplar HOG-LDA template or a new exemplar HOG-LDA template is learned for the frame.
- the HOG-LDA template training algorithm is as follows:
- Function Random selects a random frame and corresponding bounding box from the set of training videos
- Detect uses learned exemplar HOG-LDA template M on frame o′ to estimate bounding box b′′
- Overlap determines if b′′ has an area that overlaps with b′ meeting a threshold n
- LDAModel employs a HOG-LDA model to learn exemplar HOG-LDA template M from frame o and bounding box b.
- HOG-LDA model can be employed to learn exemplar HOG-LDA template M from frame o and bounding box b
- an example HOG-LDA model is described in Bharath Hariharan, Jitendra Malik, and Deva Ramanan (2012). “Discriminative decorrelation for clustering and classification”. Proceedings of the European Conference on Computer Vision ( ECCV ) (4), 459-472, the entirety of which is incorporated herein by reference.
- FIG. 3 illustrates a localizer HMM training component 220 that trains respective localizer HMMs associated with a set of actions using outputs from the trained exemplar HOG-LDA templates from HOG-LDA training component 210 .
- each video O j in the training set is classified according to action a from a set of actions A (a ⁇ A) and comprises a plurality of frames oj 1 . . . oj T j , where T j is the number of frames in video O j .
- each video O j in the training set has defined bounding boxes bj 1 . . . bj T j around the area in the corresponding frame oj 1 . . . oj T j where the action is located.
- a localizer HMM H a models an action a as a conjunction of hidden sub-actions (e.g. poses or states), each of which are modeled as a discrete hidden state of H a .
- S a denotes the discrete hidden states of H a .
- two of the states in the set S a will be identified as a unique START and an END state that are not associated with any image frames.
- the other discrete hidden states model the hidden sub-actions that form the higher level action a.
- the discrete hidden states are automatically learned by iterative re-assignment and exemplar HOG-LDA templates learning on the set of training videos.
- the inferred action on the sequence of frames oj 1:T j corresponds to the model that assigns the lowest cost.
- the localizer HMM H a also infers the spatial localizations, bounding boxes bj 1:T j , as to where the action is located in each frame oj 1:T j . This is obtained by solving a minimization problem:
- Each localizer HMM H a is defined by a set of discrete hidden states S a and a set of edges to transition from one state s′ to another state s.
- transition cost F s′,s associated with the transition from state s′ to state s, where s′ ⁇ S a and s ⁇ S a .
- Localizer HMM training component 220 includes HOG-LDA scoring component 310 that employs the trained exemplar HOG-LDA templates to generate candidate bounding boxes for each frame and associated template matching scores.
- HOG-LDA scoring component 310 does this by first computing a feature pyramid on the entire frame oj i and convolving exemplar HOG-LDA template L s i with frame oj i various scales and locations. Each pair of scale and location is associated with a bounding box bj i . HOG-LDA scoring component 310 selects the top k scoring bounding boxes.
- a non-max suppression can optionally be applied to avoid outputting very similar bounding boxes. For example, bounding boxes that have at least a threshold amount of overlap with a previous bounding box at a current scale can be suppressed.
- ⁇ s i [ ⁇ s i , ⁇ s i , ⁇ s i w , ⁇ s i h , ⁇ s i t , ⁇ s i l ].
- the estimated mean width w s i and height h s i re-estimated at each iteration as the mean of the given bounding boxes b that correspond to the frames o of the set of training videos that align with state s i .
- Parameters ⁇ s i w is the width penalty weight for an inferred bounding box to deviate from the estimated mean width w s i and ⁇ s i h is the height penalty weight for an inferred bounding box to deviate from the estimated mean height h s i .
- the incurred cost is ⁇ s i w (w b ⁇ + w s i ) 2 + ⁇ s i h (h b ⁇ h s i ) 2 .
- temporal consistency cost weight ⁇ s i t associated with state s i that defines the cost for an inferred bounding box corresponding to frame oj i (e.g. state s i ) to deviate from an inferred bounding box corresponding to immediately preceding frame oj i-1 (e.g. state s i-1 ) in the sequence of frames oj 1:T j . Therefore, the temporal consistency cost is ⁇ s i t ⁇ circumflex over (b) ⁇ J i ⁇ circumflex over (b) ⁇ J i-1 ⁇ 2 2 .
- ⁇ s i l defines the cost for an inferred bounding box corresponding to frame oj i to deviate from the candidate bounding corresponding to frame o i output from the exemplar HOG-LDA template L s i for state s i .
- the inference process involves choosing one of the candidate bounding boxes (oj i , L s i ) for state s i . Therefore, for an inferred bounding box and candidate bounding ⁇ tilde over (b) ⁇ j i , added template consistency cost to the inference is ⁇ s i l ⁇ ⁇ ⁇ .
- the inferred bounding box always matches one of the candidate bounding boxes (oj i , L s i ).
- the inference process herein allows ⁇ s i l to freely vary such that the localizer HMM H a can pick the inferred bounding box that yields the best inference cost C H a (oj 1:T j , ).
- the template matching scores rj i 1:k (oj i , L s i ) are calibrated across the set of actions A by learning scale ⁇ s i and offset ⁇ s i parameters to transform the template matching scores rj i 1:k (oj i ,L s i ) using ⁇ s i + ⁇ s i rj j .
- the set of all discrete hidden states in the HMM lattice is the union of all exemplar HOG-LDA template matched outputs from all the discrete states corresponding to the localizer HMM H a .
- discrete states for action a and k top bounding boxes output per state a total of k
- Viterbi inference component 320 employs a Viterbi inference algorithm to make a forward pass to infer the best discrete hidden state ⁇ i and the best bounding box at each frame oj i given the inferred state ⁇ i-1 and the best bounding box for frame oj i . Fixing the inferred bounding boxes for each frame oj 1:T j , a backtracking is performed to infer the underlying discrete hidden states ⁇ 1:T j .
- function BestBox(s i , ) returns the best bounding at frame oj i given all of the bounding boxes for frames oj 1:i given a selected exemplar HOG-LDA template L s i .
- Function Smooth ( , , ⁇ s i ) is ⁇ circumflex over (b) ⁇ J i , ⁇ tilde over (b) ⁇ J i , ⁇ s i ) is determined by:
- Backtrack is an array (e.g. hash map) indexed by hidden state and associated bounding box.
- the goal is to learn the set of parameters ⁇ s i so as to maximize the correlation between localizer HMM H a localization and classification to match action a and bounding box bj 1 for frame oj i .
- Objective function maximization component 330 employs a discriminative technique to obtain the weights of the localizer HMM H a classes.
- Conventional HMMs employ generative based models which do not have discriminative power to classify actions. This is particularly significant in view of the mechanism described herein that weigh HOG-LDA scores with that of the transition cost and the localization (e.g. boundary box) dynamics.
- the optimal cost is ⁇ H ⁇ (oj 1:T j , bj 1:T j ).
- the classification probability p a (oj 1:T j ) for an action a for a sequence of frames of oj 1:T j is the soft-max of the cost assigned by its localizer HMM H a against cost assigned for all other actions a′ by their localizer HMM H a′ , which is specified as follows:
- an overlap function G is defined as follows:
- objective function maximization component 330 employs a gradient ascent based approach for maximizing objective function ⁇ ( ⁇ ).
- objective function maximization component 330 can compute a derivative ⁇ ′( ⁇ ) using the first rule of differentiation with a specified step size, such as in a non-limiting example step size 0.001. It is to be appreciated that any suitable step size can be employed.
- the parameters ⁇ can be constrained to have non-negative values.
- transition costs F s′,s which are set to ⁇ for non-consecutive states and otherwise set to zero.
- objective function maximization component 330 does not learn transition costs F s′,s .
- objective function maximization component 330 updates that parameters ⁇ in the direction of the gradient ascent and computes the updating step size using a line search technique. If each action a ⁇ A is modeled with q states, and there are
- objective function maximization component 330 can reduce the computational complexity of a full gradient computation by generating a random direction according to a Normal distribution with mean equal to zero and a standard deviation of (0, 1). This reduces the time and complexity for performing the optimization of the parameters ⁇ with the tradeoff of possibly providing less optimized parameters ⁇ than the full gradient approach.
- FIGS. 6-7 illustrate various methods in accordance with certain disclosed aspects. While, for purposes of simplicity of explanation, the methodologies are shown and described as a series of acts, it is to be understood and appreciated that the disclosed aspects are not limited by the order of acts, as some acts may occur in different orders and/or concurrently with other acts from that shown and described herein. For example, those skilled in the art will understand and appreciate that a methodology can alternatively be represented as a series of interrelated states or events, such as in a state diagram. Moreover, not all illustrated acts may be required to implement a methodology in accordance with certain disclosed aspects. Additionally, it is to be further appreciated that the methodologies disclosed hereinafter and throughout this disclosure are capable of being stored on an article of manufacture to facilitate transporting and transferring such methodologies to computers.
- a plurality of exemplar HOG-LDA templates are trained from a set of training videos, where each video in the training set is classified according to action from a set of actions and comprises a plurality of frames having defined bounding boxes around the area in the corresponding frame where the action is located (e.g., by a HOG-LDA training component 210 or an action pose training component 120 ).
- candidate bounding boxes with associated scores are generated for each frame in the training set of videos (e.g., by a HOG-LDA scoring component 310 , a localizer HMM training component, or an action pose training component 120 ).
- discrete hidden states and bounding boxes for each state are inferred for each action (e.g., by a Viterbi inference component 320 , a localizer HMM training component, or an action pose training component 120 ).
- parameters associated with each state are identified by optimizing an overall objective function ⁇ ( ⁇ ) (e.g., by an objection junction maximization component 330 , a localizer HMM training component, or an action pose training component 120 ).
- FIG. 7 is depicted an exemplary method 700 for training a plurality of exemplar HOG-LDA templates, for example with respect to element 610 of method 600 (e.g., by a HOG-LDA training component 210 or an action pose training component 120 ).
- a set of training videos where each video in the training set is classified according to action from a set of actions and comprises a plurality of frames having defined bounding boxes around the area in the corresponding frame where the action is located is accessed (e.g., by a HOG-LDA training component 210 or an action pose training component 120 ).
- all frames of the set of training videos are marked as unselected.
- a frame marked as unselected with its corresponding bounding box is randomly selected from the set of training videos.
- an exemplar HOG-LDA template is learned for the randomly selected frame using a HOG-LDA model.
- another frame marked as unselected with its corresponding bounding box is randomly selected from the set of training videos.
- the learned exemplar HOG-LDA template is employed on the other randomly selected frame to infer a bounding box for the other frame.
- the other frame is marked as selected to indicate that its bounding box for this learned exemplar HOG-LDA template overlapped (e.g., matched) the bounding box associated with the frame used to learn the exemplar HOG-LDA template.
- the other frame is marked as match checked to indicate that its bounding box for this learned exemplar HOG-LDA template was checked for overlap.
- the various embodiments described herein can be implemented in connection with any computer or other client or server device, which can be deployed as part of a computer network or in a distributed computing environment, and can be connected to any kind of data store where media may be found.
- the various embodiments described herein can be implemented in any computer system or environment having any number of memory or storage units, and any number of applications and processes occurring across any number of storage units. This includes, but is not limited to, an environment with server computers and client computers deployed in a network environment or a distributed computing environment, having remote or local storage.
- Distributed computing provides sharing of computer resources and services by communicative exchange among computing devices and systems. These resources and services include the exchange of information, cache storage and disk storage for objects, such as files. These resources and services can also include the sharing of processing power across multiple processing units for load balancing, expansion of resources, specialization of processing, and the like. Distributed computing takes advantage of network connectivity, allowing clients to leverage their collective power to benefit the entire enterprise. In this regard, a variety of devices may have applications, objects or resources that may participate in the various embodiments of this disclosure.
- FIG. 8 provides a schematic diagram of an exemplary networked or distributed computing environment.
- the distributed computing environment comprises computing objects 810 , 812 , etc. and computing objects or devices 818 , 820 , 822 , 824 , 826 , 828 , etc., which may include programs, methods, data stores, programmable logic, etc., as represented by applications 830 , 832 , 834 , 836 , 838 .
- computing objects 810 , 812 , etc. and computing objects or devices 818 , 820 , 822 , 824 , 826 , 828 , etc. may comprise different devices, such as personal digital assistants (PDAs), audio/video devices, mobile phones, MP3 players, personal computers, laptops, tablets, etc.
- PDAs personal digital assistants
- Each computing object 810 , 812 , etc. and computing objects or devices 818 , 820 , 822 , 824 , 826 , 828 , etc. can communicate with one or more other computing objects 810 , 812 , etc. and computing objects or devices 818 , 820 , 822 , 824 , 826 , 828 , etc. by way of the communications network 840 , either directly or indirectly.
- network 840 may comprise other computing objects and computing devices that provide services to the system of FIG. 8 , and/or may represent multiple interconnected networks, which are not shown.
- computing objects or devices 818 , 820 , 822 , 824 , 826 , 828 , etc. can also contain an application, such as applications 830 , 832 , 834 , 836 , 838 , that might make use of an API, or other object, software, firmware and/or hardware, suitable for communication with or implementation of various embodiments of this disclosure.
- computing systems can be connected together by wired or wireless systems, by local networks or widely distributed networks.
- networks are coupled to the Internet, which provides an infrastructure for widely distributed computing and encompasses many different networks, though any suitable network infrastructure can be used for exemplary communications made incident to the systems as described in various embodiments herein.
- client is a member of a class or group that uses the services of another class or group.
- a client can be a computer process, e.g., roughly a set of instructions or tasks, that requests a service provided by another program or process.
- a client process may utilize the requested service without having to “know” all working details about the other program or the service itself.
- a client can be a computer that accesses shared network resources provided by another computer, e.g., a server.
- a server e.g., a server
- computing objects or devices 818 , 820 , 822 , 824 , 826 , 828 , etc. can be thought of as clients and computing objects 810 , 812 , etc. can be thought of as servers where computing objects 810 , 812 , etc.
- any computer can be considered a client, a server, or both, depending on the circumstances. Any of these computing devices may be processing data, or requesting transaction services or tasks that may implicate the techniques for systems as described herein for one or more embodiments.
- a server is typically a remote computer system accessible over a remote or local network, such as the Internet or wireless network infrastructures.
- the client process may be active in a first computer system, and the server process may be active in a second computer system, communicating with one another over a communications medium, thus providing distributed functionality and allowing multiple clients to take advantage of the information-gathering capabilities of the server.
- Any software objects utilized pursuant to the techniques described herein can be provided standalone, or distributed across multiple computing devices or objects.
- the computing objects 810 , 812 , etc. can be Web servers, file servers, media servers, etc. with which the client computing objects or devices 818 , 820 , 822 , 824 , 826 , 828 , etc. communicate via any of a number of known protocols, such as the hypertext transfer protocol (HTTP).
- HTTP hypertext transfer protocol
- Objects 810 , 812 , etc. may also serve as client computing objects or devices 818 , 820 , 822 , 824 , 826 , 828 , etc., as may be characteristic of a distributed computing environment.
- the techniques described herein can be applied to any suitable device. It is to be understood, therefore, that handheld, portable and other computing devices and computing objects of all kinds are contemplated for use in connection with the various embodiments. Accordingly, the computer described below in FIG. 9 is but one example of a computing device that can be employed with implementing one or more of the systems or methods shown and described in connection with FIGS. 1-8 . Additionally, a suitable server can include one or more aspects of the below computer, such as a media server or other media management server components.
- embodiments can partly be implemented via an operating system, for use by a developer of services for a device or object, and/or included within application software that operates to perform one or more functional aspects of the various embodiments described herein.
- Software may be described in the general context of computer executable instructions, such as program modules, being executed by one or more computers, such as client workstations, servers or other devices.
- computers such as client workstations, servers or other devices.
- client workstations such as client workstations, servers or other devices.
- FIG. 9 thus illustrates an example of a suitable computing system environment 900 in which one or aspects of the embodiments described herein can be implemented, although as made clear above, the computing system environment 900 is only one example of a suitable computing environment and is not intended to suggest any limitation as to scope of use or functionality. Neither is the computing environment 900 be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment 900 .
- FIG. 9 an exemplary computing device for implementing one or more embodiments in the form of a computer 910 is depicted.
- Components of computer 910 may include, but are not limited to, a processing unit 920 , a system memory 930 , and a system bus 922 that couples various system components including the system memory to the processing unit 920 .
- Computer 910 typically includes a variety of computer readable media and can be any available media that can be accessed by computer 910 .
- the system memory 930 may include computer storage media in the form of volatile and/or nonvolatile memory such as read only memory (ROM) and/or random access memory (RAM).
- system memory 930 may also include an operating system, application programs, other program modules, and program data.
- a user can enter commands and information into the computer 910 through input devices 940 , non-limiting examples of which can include a keyboard, keypad, a pointing device, a mouse, stylus, touchpad, touchscreen, trackball, motion detector, camera, microphone, joystick, game pad, scanner, or any other device that allows the user to interact with computer 910 .
- input devices 940 non-limiting examples of which can include a keyboard, keypad, a pointing device, a mouse, stylus, touchpad, touchscreen, trackball, motion detector, camera, microphone, joystick, game pad, scanner, or any other device that allows the user to interact with computer 910 .
- a monitor or other type of display device is also connected to the system bus 922 via an interface, such as output interface 950 .
- computers can also include other peripheral output devices such as speakers and a printer, which may be connected through output interface 950 .
- the computer 910 may operate in a networked or distributed environment using logical connections to one or more other remote computers, such as remote computer 970 via network interface 960 .
- the remote computer 970 may be a personal computer, a server, a router, a network PC, a peer device or other common network node, or any other remote media consumption or transmission device, and may include any or all of the elements described above relative to the computer 910 .
- the logical connections depicted in FIG. 9 include a network 972 , such local area network (LAN) or a wide area network (WAN), but may also include other networks/buses e.g., cellular networks.
- LAN local area network
- WAN wide area network
- an appropriate API e.g., an appropriate API, tool kit, driver code, operating system, control, standalone or downloadable software object, etc. which enables applications and services to take advantage of the techniques described herein.
- embodiments herein are contemplated from the standpoint of an API (or other software object), as well as from a software or hardware object that implements one or more aspects described herein.
- various embodiments described herein can have aspects that are wholly in hardware, partly in hardware and partly in software, as well as in software.
- exemplary is used herein to mean serving as an example, instance, or illustration.
- aspects disclosed herein are not limited by such examples.
- any aspect or design described herein as “exemplary” is not necessarily to be construed as preferred or advantageous over other aspects or designs, nor is it meant to preclude equivalent exemplary structures and techniques known to those of ordinary skill in the art.
- the terms “includes,” “has,” “contains,” and other similar words are used in either the detailed description or the claims, for the avoidance of doubt, such terms are intended to be inclusive in a manner similar to the term “comprising” as an open transition word without precluding any additional or other elements.
- Computer-readable storage media can be any available storage media that can be accessed by the computer, is typically of a non-transitory nature, and can include both volatile and nonvolatile media, removable and non-removable media.
- Computer-readable storage media can be implemented in connection with any method or technology for storage of information such as computer-readable instructions, program modules, structured data, or unstructured data.
- Computer-readable storage media can include, but are not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disk (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or other tangible and/or non-transitory media which can be used to store desired information.
- Computer-readable storage media can be accessed by one or more local or remote computing devices, e.g., via access requests, queries or other data retrieval protocols, for a variety of operations with respect to the information stored by the medium.
- communications media typically embody computer-readable instructions, data structures, program modules or other structured or unstructured data in a data signal such as a modulated data signal, e.g., a carrier wave or other transport mechanism, and includes any information delivery or transport media.
- modulated data signal or signals refers to a signal that has one or more of its characteristics set or changed in such a manner as to encode information in one or more signals.
- communication media include wired media, such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media.
- a component may be, but is not limited to being, a process running on a processor, a processor, an object, an executable, a thread of execution, a program, and/or a computer.
- a component may be, but is not limited to being, a process running on a processor, a processor, an object, an executable, a thread of execution, a program, and/or a computer.
- an application running on computer and the computer can be a component.
- One or more components may reside within a process and/or thread of execution and a component may be localized on one computer and/or distributed between two or more computers.
- a “device” can come in the form of specially designed hardware; generalized hardware made specialized by the execution of software thereon that enables the hardware to perform specific function (e.g., coding and/or decoding); software stored on a computer readable medium; or a combination thereof.
- components described herein can examine the entirety or a subset of the data to which it is granted access and can provide for reasoning about or infer states of the system, environment, etc. from a set of observations as captured via events and/or data.
- Inference can be employed to identify a specific context or action, or can generate a probability distribution over states, for example.
- the inference can be probabilistic—that is, the computation of a probability distribution over states of interest based on a consideration of data and events.
- Inference can also refer to techniques employed for composing higher-level events from a set of events and/or data.
- Such inference can result in the construction of new events or actions from a set of observed events and/or stored event data, whether or not the events are correlated in close temporal proximity, and whether the events and data come from one or several event and data sources.
- Various classification (explicitly and/or implicitly trained) schemes and/or systems e.g., support vector machines, neural networks, expert systems, Bayesian belief networks, fuzzy logic, data fusion engines, etc. can be employed in connection with performing automatic and/or inferred action in connection with the claimed subject matter.
- Such classification can employ a probabilistic and/or statistical-based analysis (e.g., factoring into the analysis utilities and costs) to prognose or infer an action that a user desires to be automatically performed.
- a support vector machine (SVM) is an example of a classifier that can be employed. The SVM operates by finding a hyper-surface in the space of possible inputs, where the hyper-surface attempts to split the triggering criteria from the non-triggering events.
- Other directed and undirected model classification approaches include, e.g., na ⁇ ve Bayes, Bayesian networks, decision trees, neural networks, fuzzy logic models, and probabilistic classification models providing different patterns of independence can be employed. Classification as used herein also is inclusive of statistical regression that is utilized to develop models of priority.
Abstract
Description
ALGORITHM 1) LearnExemplars(Z = | ||
{o11,...o1T | ||
bN1,...bNT | ||
L ←{ }; | ||
while Z ≠{ }do | ||
{o, b} ← Random (Z); | ||
Q←{ }; | ||
M←LDAModel ({o,b}); | ||
for {o′, b′} εZ | ||
b″←Detect ( M, o′); | ||
if Overlap (b″, b′) > n | ||
Q ← Q ∪ {o′, b′} | ||
end | ||
end | ||
L ← L ∪ M | ||
Z ← Z \ Q | ||
end, | ||
return {L} | ||
where Z is the set of all frames in the set of training videos, L is the set of learned exemplar HOG-LDA templates for the set of training videos, Q is uses to track the frames that match a learned exemplar HOG-LDA template M. Function Random (Z) selects a random frame and corresponding bounding box from the set of training videos, Detect (M, o′) uses learned exemplar HOG-LDA template M on frame o′ to estimate bounding box b″, Overlap (b″, b′) determines if b″ has an area that overlaps with b′ meeting a threshold n, and LDAModel ({o, b}) employs a HOG-LDA model to learn exemplar HOG-LDA template M from frame o and bounding box b. While any suitable HOG-LDA model can be employed to learn exemplar HOG-LDA template M from frame o and bounding box b, an example HOG-LDA model is described in Bharath Hariharan, Jitendra Malik, and Deva Ramanan (2012). “Discriminative decorrelation for clustering and classification”. Proceedings of the European Conference on Computer Vision (ECCV) (4), 459-472, the entirety of which is incorporated herein by reference.
The lowest inference cost for the model Ha for a sequence of frames oj1:T
The frames are normalized to unit width and height so that [x, y, w, h] are constrained as follows:
where,
-
- s0=START state,
- 0≦
- 0≦
-
i ), and - rji is the score of
ALGORITHM 2) ViterbiInference ([ | ||
| ||
Vj0 (START, | ||
for i ← 1 to T + 1 do | ||
Vji(si, | ||
for (si, si-1) ε Sa do | ||
for | ||
for | ||
(c, b′) ← Smooth(BestBox(si-1, | ||
Vjnew ← c + Fs | ||
if Vjnew < Vji(si, | ||
Vji(si, | ||
Backtrack(si, | ||
BestBox(si, | ||
end | ||
end | ||
end | ||
end | ||
end | ||
si+1 ← END state | ||
for i ← T + 1 to 1 do | ||
(ŝi-1, | ||
← BestBox)(si-1, | ||
end | ||
return {VjT+1(END, φ), ŝ1:T | ||
where φ represents a NULL value (e.g. empty or no value), c is the value of CH
subject to the constraints on [x, y, w, h] as follows:
Which is solved by employing a least squares constraint optimization algorithm. Backtrack is an array (e.g. hash map) indexed by hidden state and associated bounding box.
where the intersection of two bounding boxes
ƒ(Θ)=Σj=1 N[log p a(oj 1:T
where Θ denotes all of the parameters for discrete hidden states s1:T
Claims (24)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/100,595 US9230159B1 (en) | 2013-12-09 | 2013-12-09 | Action recognition and detection on videos |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/100,595 US9230159B1 (en) | 2013-12-09 | 2013-12-09 | Action recognition and detection on videos |
Publications (1)
Publication Number | Publication Date |
---|---|
US9230159B1 true US9230159B1 (en) | 2016-01-05 |
Family
ID=54939219
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/100,595 Active 2034-03-10 US9230159B1 (en) | 2013-12-09 | 2013-12-09 | Action recognition and detection on videos |
Country Status (1)
Country | Link |
---|---|
US (1) | US9230159B1 (en) |
Cited By (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9946933B2 (en) | 2016-08-18 | 2018-04-17 | Xerox Corporation | System and method for video classification using a hybrid unsupervised and supervised multi-layer architecture |
US9977968B2 (en) * | 2016-03-04 | 2018-05-22 | Xerox Corporation | System and method for relevance estimation in summarization of videos of multi-step activities |
CN108268854A (en) * | 2018-02-02 | 2018-07-10 | 上海有我科技有限公司 | A kind of tutor auxiliary platform big data intelligent analysis method of feature based identification |
US20180246963A1 (en) * | 2015-05-01 | 2018-08-30 | Smiths Detection, Llc | Systems and methods for analyzing time series data based on event transitions |
US10089556B1 (en) | 2017-06-12 | 2018-10-02 | Konica Minolta Laboratory U.S.A., Inc. | Self-attention deep neural network for action recognition in surveillance videos |
CN109101858A (en) * | 2017-06-20 | 2018-12-28 | 北京大学 | Action identification method and device |
CN111797800A (en) * | 2020-07-14 | 2020-10-20 | 中国传媒大学 | Video classification method based on content mining |
CN111882586A (en) * | 2020-06-23 | 2020-11-03 | 浙江工商大学 | Multi-actor target tracking method oriented to theater environment |
WO2022049694A1 (en) * | 2020-09-03 | 2022-03-10 | 日本電信電話株式会社 | Training device, estimation device, training method, and training program |
CN115953430A (en) * | 2022-12-21 | 2023-04-11 | 贵州财经大学 | Video single-target tracking method and system based on improved batch sample loss function |
WO2023134320A1 (en) * | 2022-01-11 | 2023-07-20 | 北京大学 | Complex action recognition method and apparatus based on learnable markov logic network |
Citations (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20020028021A1 (en) * | 1999-03-11 | 2002-03-07 | Jonathan T. Foote | Methods and apparatuses for video segmentation, classification, and retrieval using image class statistical models |
US6678413B1 (en) * | 2000-11-24 | 2004-01-13 | Yiqing Liang | System and method for object identification and behavior characterization using video analysis |
US20100176952A1 (en) * | 2008-12-04 | 2010-07-15 | The Regents Of The University Of California | System for detection of body motion |
US20130117780A1 (en) * | 2011-11-04 | 2013-05-09 | Rahul Sukthankar | Video synthesis using video volumes |
US20130155229A1 (en) * | 2011-11-14 | 2013-06-20 | Massachusetts Institute Of Technology | Assisted video surveillance of persons-of-interest |
US8538081B2 (en) * | 2011-02-28 | 2013-09-17 | Seiko Epson Corporation | Contextual boost for object detection |
US8635065B2 (en) * | 2003-11-12 | 2014-01-21 | Sony Deutschland Gmbh | Apparatus and method for automatic extraction of important events in audio signals |
US8705876B2 (en) * | 2009-12-02 | 2014-04-22 | Qualcomm Incorporated | Improving performance of image recognition algorithms by pruning features, image scaling, and spatially constrained feature matching |
US8929600B2 (en) * | 2012-12-19 | 2015-01-06 | Microsoft Corporation | Action recognition based on depth maps |
US8958600B2 (en) * | 2010-06-12 | 2015-02-17 | Toyota Motor Europe Nv/Sa | Monocular 3D pose estimation and tracking by detection |
-
2013
- 2013-12-09 US US14/100,595 patent/US9230159B1/en active Active
Patent Citations (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20020028021A1 (en) * | 1999-03-11 | 2002-03-07 | Jonathan T. Foote | Methods and apparatuses for video segmentation, classification, and retrieval using image class statistical models |
US6678413B1 (en) * | 2000-11-24 | 2004-01-13 | Yiqing Liang | System and method for object identification and behavior characterization using video analysis |
US8635065B2 (en) * | 2003-11-12 | 2014-01-21 | Sony Deutschland Gmbh | Apparatus and method for automatic extraction of important events in audio signals |
US20100176952A1 (en) * | 2008-12-04 | 2010-07-15 | The Regents Of The University Of California | System for detection of body motion |
US8705876B2 (en) * | 2009-12-02 | 2014-04-22 | Qualcomm Incorporated | Improving performance of image recognition algorithms by pruning features, image scaling, and spatially constrained feature matching |
US8958600B2 (en) * | 2010-06-12 | 2015-02-17 | Toyota Motor Europe Nv/Sa | Monocular 3D pose estimation and tracking by detection |
US8538081B2 (en) * | 2011-02-28 | 2013-09-17 | Seiko Epson Corporation | Contextual boost for object detection |
US20130117780A1 (en) * | 2011-11-04 | 2013-05-09 | Rahul Sukthankar | Video synthesis using video volumes |
US20130155229A1 (en) * | 2011-11-14 | 2013-06-20 | Massachusetts Institute Of Technology | Assisted video surveillance of persons-of-interest |
US8929600B2 (en) * | 2012-12-19 | 2015-01-06 | Microsoft Corporation | Action recognition based on depth maps |
Cited By (17)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10839009B2 (en) * | 2015-05-01 | 2020-11-17 | Smiths Detection Inc. | Systems and methods for analyzing time series data based on event transitions |
US20180246963A1 (en) * | 2015-05-01 | 2018-08-30 | Smiths Detection, Llc | Systems and methods for analyzing time series data based on event transitions |
US9977968B2 (en) * | 2016-03-04 | 2018-05-22 | Xerox Corporation | System and method for relevance estimation in summarization of videos of multi-step activities |
US9946933B2 (en) | 2016-08-18 | 2018-04-17 | Xerox Corporation | System and method for video classification using a hybrid unsupervised and supervised multi-layer architecture |
US10089556B1 (en) | 2017-06-12 | 2018-10-02 | Konica Minolta Laboratory U.S.A., Inc. | Self-attention deep neural network for action recognition in surveillance videos |
CN109101858A (en) * | 2017-06-20 | 2018-12-28 | 北京大学 | Action identification method and device |
CN109101858B (en) * | 2017-06-20 | 2022-02-18 | 北京大学 | Action recognition method and device |
CN108268854A (en) * | 2018-02-02 | 2018-07-10 | 上海有我科技有限公司 | A kind of tutor auxiliary platform big data intelligent analysis method of feature based identification |
CN108268854B (en) * | 2018-02-02 | 2022-06-10 | 上海有我科技有限公司 | Teaching assistance big data intelligent analysis method based on feature recognition |
CN111882586A (en) * | 2020-06-23 | 2020-11-03 | 浙江工商大学 | Multi-actor target tracking method oriented to theater environment |
CN111882586B (en) * | 2020-06-23 | 2022-09-13 | 浙江工商大学 | Multi-actor target tracking method oriented to theater environment |
CN111797800A (en) * | 2020-07-14 | 2020-10-20 | 中国传媒大学 | Video classification method based on content mining |
CN111797800B (en) * | 2020-07-14 | 2024-03-05 | 中国传媒大学 | Video classification method based on content mining |
WO2022049694A1 (en) * | 2020-09-03 | 2022-03-10 | 日本電信電話株式会社 | Training device, estimation device, training method, and training program |
JPWO2022049694A1 (en) * | 2020-09-03 | 2022-03-10 | ||
WO2023134320A1 (en) * | 2022-01-11 | 2023-07-20 | 北京大学 | Complex action recognition method and apparatus based on learnable markov logic network |
CN115953430A (en) * | 2022-12-21 | 2023-04-11 | 贵州财经大学 | Video single-target tracking method and system based on improved batch sample loss function |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9230159B1 (en) | Action recognition and detection on videos | |
US9965717B2 (en) | Learning image representation by distilling from multi-task networks | |
US10642887B2 (en) | Multi-modal image ranking using neural networks | |
US20180114056A1 (en) | Vision Based Target Tracking that Distinguishes Facial Feature Targets | |
US20180218267A1 (en) | Solving goal recognition using planning | |
US20150347846A1 (en) | Tracking using sensor data | |
Zhao et al. | Parallaxba: bundle adjustment using parallax angle feature parametrization | |
JP2021531522A (en) | Determination of vehicle occupant involvement using 3D line-of-sight vector | |
Gurău et al. | Learn from experience: Probabilistic prediction of perception performance to avoid failure | |
Adhikari et al. | A comprehensive survey on imputation of missing data in internet of things | |
US8458156B1 (en) | Learning common spelling errors through content matching | |
US11449788B2 (en) | Systems and methods for online annotation of source data using skill estimation | |
CN107203756A (en) | A kind of method and apparatus for recognizing gesture | |
Tsintotas et al. | Tracking‐DOSeqSLAM: A dynamic sequence‐based visual place recognition paradigm | |
Li et al. | VNLSTM-PoseNet: A novel deep ConvNet for real-time 6-DOF camera relocalization in urban streets | |
US11188787B1 (en) | End-to-end room layout estimation | |
Sharjeel et al. | Real time drone detection by moving camera using COROLA and CNN algorithm | |
He et al. | Online semantic-assisted topological map building with LiDAR in large-scale outdoor environments: Toward robust place recognition | |
Xiaowei et al. | Object tracking with an evolutionary particle filter based on self-adaptive multi-features fusion | |
Mertan et al. | A new distributional ranking loss with uncertainty: Illustrated in relative depth estimation | |
US20220076018A1 (en) | Determining Regions of Interest for Photographic Functions | |
Hou et al. | Knowledge driven indoor object‐goal navigation aid for visually impaired people | |
Muhammadi et al. | Crowd labeling: a survey | |
CN111161238A (en) | Image quality evaluation method and device, electronic device, and storage medium | |
Vrigkas et al. | Active privileged learning of human activities from weakly labeled samples |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:VIJAYANARASIMHAN, SUDHEENDRA;VARADARAJAN, BALAKRISHNAN;SUKTHANKAR, RAHUL;SIGNING DATES FROM 20131203 TO 20131209;REEL/FRAME:031741/0494 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044566/0657Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |