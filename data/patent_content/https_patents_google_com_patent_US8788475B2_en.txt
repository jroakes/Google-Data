US8788475B2 - System and method of accessing a document efficiently through multi-tier web caching - Google Patents
System and method of accessing a document efficiently through multi-tier web caching Download PDFInfo
- Publication number
- US8788475B2 US8788475B2 US13/536,701 US201213536701A US8788475B2 US 8788475 B2 US8788475 B2 US 8788475B2 US 201213536701 A US201213536701 A US 201213536701A US 8788475 B2 US8788475 B2 US 8788475B2
- Authority
- US
- United States
- Prior art keywords
- dns
- cache
- document
- server
- client
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/957—Browsing optimisation, e.g. caching or content distillation
- G06F16/9574—Browsing optimisation, e.g. caching or content distillation of access to content, e.g. by caching
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/93—Document management systems
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99931—Database or file accessing
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99931—Database or file accessing
- Y10S707/99932—Access augmentation or optimizing
Definitions
- the present invention relates generally to the field of a client-server computer network system, and in particular, to a system and method of accessing a document efficiently through web caching.
- Web browsing is becoming an inseparable part of our daily life. We routinely retrieve documents from the Internet through a web browser. However, document download speeds are not as fast as desired.
- a conventional approach to speeding up document download speeds is to establish a cache in the client computer.
- the web browser stores downloaded files, including static images and the like, in the cache so that those files do not need to be repeatedly downloaded.
- Well known mechanisms are used to determine when a file in the cache must be replaced. From the on-line subscriber's perspective, the caching of static images and other static content frequently viewed by the subscriber substantially reduces the average time required for the document to be rendered on the computer monitor screen, and therefore the user feels that the document can be downloaded very quickly from its host.
- the cache associated with the web browser is often too small to store a large number of documents. Further, the web browser sometimes cannot tell whether it a document in its cache is fresh, and therefore needlessly re-downloads the document.
- a method of accessing a document includes receiving a request at a document server from a client including a URL of a document.
- the document server identifies a document copy corresponding to the URL and determines whether the first document copy is stale. If the first document copy is determined to be stale, then depending on a first condition, a repository copy of the document is retrieved from a search engine repository at a location that is independent of the URL. On a second condition, a host copy of the document is retrieved.
- the first condition includes an availability condition with respect to a host associated with the URL.
- a method for accessing a document includes receiving at a server from a client a request including a fingerprint based on a URL of a document and a first value indicative of a first content of the document on the client.
- a copy of the first content on the server is identified using the first value and a second content of the document is identified using the fingerprint.
- a determination is made as to whether the second content is stale.
- a determination is also made as to an availability condition of a host content of the document from a first remote server associated with the fingerprint. If the availability condition is a first value, a repository content of the document is obtained from a second remote server having an address independent of the fingerprint.
- a method for updating a cache index includes identifying a set of documents from a database, where the database indicates information about each of a set of documents which are stored in a document repository. Upon a first condition, for at least one of the set of documents, a respective entry in an index cache is inserted indicating that a document content of the at least one of the set of documents should be retrieved from the document repository at a location that is independent of a URL associated with the at least one of the set of documents.
- FIG. 1 schematically illustrates the infrastructure of a client-server network environment.
- FIGS. 2A , 2 B and 2 C illustrate data structures associated with various components of the client-server network environment.
- FIG. 3 illustrates data structures of respective requests received by a client cache assistant, a remote cache server and a web host.
- FIG. 4 is a flowchart illustrating how the client cache assistant responds to a get request from a user through an application.
- FIG. 5 is a flowchart illustrating a series of procedures performed by the remote cache server upon receipt of a document retrieval request.
- FIG. 6 is a flowchart of procedures performed by the client cache assistant when it receives one or more content differences from the remote cache server.
- FIG. 7 is a flowchart illustrating details of DNS lookup.
- FIG. 8 is a flowchart depicting how the remote cache server downloads a new document from a corresponding host using the IP address identified through DNS lookup.
- FIG. 9 is a flowchart describing how the remote cache server coordinates with the client cache assistant during the transfer of content differences.
- FIG. 10 schematically illustrates how the remote cache server and client cache assistant cooperate when the transfer of a first content difference is interrupted.
- FIG. 11 depicts the structure of an exemplary client computer that operates the client cache assistant.
- FIG. 12 depicts the structure of an exemplary server computer that operates the remote cache server.
- FIG. 13 depicts an exemplary search engine repository.
- FIG. 14 is an exemplary timeline useful for illustrating how a system according to one embodiment of the present invention searches its several caches and ultimately a web host (or a search engine repository) to respond to a document request submitted by a user through a client computer.
- FIG. 15 schematically illustrates how an embodiment of the invention can be connected to a search engine history log.
- FIG. 16 illustrates the data structure of a history log and associated record.
- FIG. 17 is a flowchart illustrating the procedures associated with prefetching and preloading document content.
- FIG. 18 is a flowchart illustrating the procedures associated with receiving a document content.
- FIG. 1 schematically illustrates the infrastructure of a client-server network environment 100 in accordance with one embodiment of the present invention.
- the environment 100 includes a plurality of clients 102 and a document server 120 .
- the internal structure of a client 102 includes an application 104 (e.g., a web browser 104 ), a client cache assistant 106 and a client cache 108 .
- the client cache assistant 106 has communication channels with the application 104 , the client cache 108 and a remote cache server 124 running in the server 120 , respectively.
- the client cache assistant 106 and remote cache server 124 are procedures or modules that facilitate the process of responding quickly to a document request initiated by a user of the client 102 .
- the application 104 has no associated cache or does not use its associated cache, and instead directs all user requests to the client cache assistant 106 .
- the application 104 is a web browser
- the application can, in fact, be any application that uses documents whose source is a network address such as a URL (universal resource locator).
- URL universal resource locator
- the term “URL” is used in this document, that term shall be understood to mean a network address or location.
- the term “document” means virtually any type file that may be used by a web browser or other application, including but not limited to audio, video, or multimedia files.
- web browser 104 uses its own cache (not shown).
- the client cache assistant 106 is responsible for keeping the browser's cache in synch with the client cache 108 .
- the server 120 includes at least a server cache 122 and 128 .
- the server 120 and/or the server cache 122 / 128 are deployed over multiple computers in order to provide fast access to a large number of cached documents.
- the server cache 122 / 128 may be deployed over N servers, with a mapping function such as the “modulo N” function being used to determine which cached documents are stored in each of the N servers.
- N may be an integer greater than 1, for instance an integer between 2 and 1024.
- the server 120 through its server cache 122 / 128 , manages a large number of documents that have been downloaded from various hosts 134 (e.g., web servers and other hosts) over the communications network 132 .
- hosts 134 e.g., web servers and other hosts
- the server 120 also includes an index cache 122 , a DNS cache 126 , an object archive 128 and a DNS master 130 , which may be connected. In some embodiments, server 120 does not include the DNS cache 126 and DNS master 130 . In some embodiments, these various components co-exist in a single computer, while in some other embodiments, they are distributed over multiple computers.
- the remote cache server 124 communicates with the other components in the server 120 as well as web hosts 134 and domain name system (DNS) servers 136 over the Internet 132 .
- DNS domain name system
- the term “web host” is used in this document to mean a host, host server or other source of documents stored at network locations associated with the web host.
- the remote cache server 124 may access a search engine repository 140 , which caches a huge volume of documents downloaded from millions of web servers all over the world. These documents are indexed, categorized and refreshed by a search engine.
- the search engine repository 140 is especially helpful for satisfying a user request for a document when the connection between the remote cache server and the web host storing the document is interrupted, as well as when the web host is in operative or otherwise unable to respond to a request for the document.
- a repository interface 138 is disposed between the remote cache server 124 and the search engine repository 140 .
- the repository interface 138 identifies documents in the search engine repository 140 that have been determined to be stable or fresh.
- the repository interface 138 works with the remote cache server 124 to update the index cache 122 indicating that these documents are in the search engine repository 140 .
- a persistent connection (sometimes herein called a dedicated connection) is established between the client cache assistant 106 and the remote cache server 124 using a suitable communication protocol (e.g., TCP/IP).
- TCP/IP a suitable communication protocol
- the persistent connection comprises at least one control stream and multiple data streams in each direction.
- FIGS. 2A-2C illustrate data structures associated with various components of the client-server network environment 100 .
- client cache 108 includes a table 201 including a plurality of universal resource locator (URL) fingerprints.
- a URL fingerprint is, for example, a 64-bit number (or a value of some other predetermined bit length) generated from the corresponding URL by first normalizing the URL text, e.g., by applying a predefined set of normalization rules to the URL text (e.g., converting web host names to lower case), and then applying a hash function to the normalized URL to produce a URL fingerprint.
- These URL fingerprints correspond to the documents in the client cache.
- Each entry in the URL fingerprint table 201 has a pointer to a unique entry in another table 203 that stores the content of a plurality of documents.
- Each entry in the table 203 includes a unique content fingerprint (also known as content checksum), one or more content freshness parameters and a pointer to a copy of the corresponding document (document content 205 ).
- some of the content freshness parameters are derived from the HTTP header associated with the document content. For example, the Date field in the HTTP header indicates when the document was downloaded to the client.
- the client cache 108 is merged with a web browser cache 206 .
- table 203 of the client cache contains pointers to documents 205 in the web browser cache 206 .
- DNS master 130 maintains a plurality of address records using a hostname table 207 and an internet protocol (IP) address table 209 .
- IP internet protocol
- For each entry in the hostname table 207 there is a single IP address in the table 209 . It is possible that multiple hostnames, e.g., HOST #1 and HOST #2, may point to the same IP address. Since the IP address of a web host may be dynamically allocated, each IP address in the table 209 is also associated with a last update time (LUT) parameter, which indicates when the address record was last refreshed, and with a time to live (TTL) parameter, indicating how long the IP address will remain valid.
- LUT last update time
- TTL time to live
- table 209 also associates a user visit frequency with each IP address in the table 209 .
- a plurality of the IP addresses in the table 209 each have an associated user visit frequency, while at least one IP address in the table 209 does not have an associated user visit frequency.
- the volume of documents cached in the server 120 is often significantly larger, because a server often provides documents to multiple clients 102 . As a result, it is impossible to store all the documents in the server's main memory. Accordingly, and referring to FIG. 2C , information about the large volume of cached documents in the server 120 is managed by two data structures, an index cache 122 and an object archive 128 .
- the index cache 122 is small enough to be stored in the server's main memory to maintain a mapping relationship between a URL fingerprint (table 211 ), and a content fingerprint (table 213 ) of a document stored in the server 120 .
- a mapping relationship between a content fingerprint and a location of a unique copy of a document content 217 is stored in the object archive 128 along with document contents 217 .
- the table 215 is small enough to fit in the server's main memory and the documents 217 are stored in a secondary storage device 220 , e.g., a hard drive.
- table 215 is stored in the object archive 128 or other memory.
- the index cache 122 stores a plurality of records, each record including a URL fingerprint, a content fingerprint and a set of content freshness parameters for a document cached by the remote cache server.
- the set of freshness parameters includes an expiration date, a last modification date, and an entity tag.
- the freshness parameters optionally include one or more HTTP response header fields of a cached document.
- An entity tag is a unique string identifying one version of an entity, e.g., an HTML document, associated with a particular resource.
- the record also includes a repository flag (table 213 ) that indicates that the corresponding document should be obtained from the search engine repository 140 . The first time the document is requested by a client, a copy of the document will not be resident in the object archive 128 even though the document's URL fingerprint has an entry in index cache 122 .
- the document when the document is first requested by a client, the document is retrieved from the search engine repository instead of the document host and a copy of the retrieved document is sent to the requestor.
- the document content may be stored in the object archive 128 .
- the document's host is then queried for the most recent version of the document content, which is then stored in the object archive 128 .
- the operation of the client-server network environment 100 starts with a user clicking on a link to a document, for example while using a web browser ( 401 ).
- a web browser 401
- the web browser submits a HTTP GET request for the document to a client cache assistant ( 403 ).
- An exemplary GET request is shown in FIG. 3A .
- the request includes the URL of the requested document as well as a plurality of standard HTTP request header fields, such as “Accept”, “Accept-Language”, “User-Agent” and “Host”, etc.
- the client cache assistant first converts the document's URL into a URL fingerprint and then checks if its client cache has the requested document.
- the result may be a cache miss, because the client cache does not have a copy of the requested document ( 409 ).
- a cache miss typically occurs when the user requests a document for the first time, or when a prior version of the document is no longer valid or present in the client cache (e.g., because it became stale, or the client cache became full). Otherwise, the result is a cache hit, which means that the client cache has a copy of the requested document. However, a cache hit does not guarantee that this copy can be provided to the requesting user.
- the client cache assistant may decide not to return the cached copy to the client ( 411 ). If the document content of the cached copy is deemed fresh ( 413 ), the client cache assistant identifies the requested document as well as other related documents (e.g., images, style sheet) in the client cache, assembles them together into a hypertext markup language (HTML) page and returns the HTML page back to the web browser ( 417 ). In contrast, if the cached copy is deemed stale or if there is cache miss, the client cache assistant submits a document retrieval request to a corresponding remote cache server ( 415 ).
- HTML hypertext markup language
- An exemplary document retrieval request includes a URL.
- the retrieval request includes one or more of: certain content fingerprints, one or more freshness parameters specified by the client cache assistant, one or more header fields found in the original HTTP GET request and the URL and the content fingerprints of other documents associated with the requested one.
- the document retrieval request may include header fields from the stale copy of the document, such as “If-Modified-Since” and/or “If-None-Match”.
- the document retrieval request in a particular embodiment, may even be compressed prior to being sent to the remote cache server in order to reduce transmission time.
- the client cache assistant will include certain content fingerprints in the retrieval request.
- the content fingerprints will be used by the server to identify which client object to generate the content difference against once a server object is found or obtained. For example, if no content fingerprint was sent by the client cache assistant in the retrieval request then the server object would be compared against a null client object and the content difference would represent the whole server object. Most commonly, the content fingerprint associated with URL would be placed in the retrieval request.
- the client cache assistant might include more than one content fingerprint.
- the remote cache server 124 launches its server object lookup (described below) with the multiple content fingerprints, and uses the first lookup to return a client object when generating the content difference.
- the remote cache server attempts to look up the client objects in the following order and use the first client object returned: (1) content fingerprint, (2) last page visited, and (3) the home page of the host.
- other combinations are envisioned, such as only providing (2) and (3) above. Those of skill in the art would recognize many different permutations to achieve the same result.
- FIG. 5 is a flowchart illustrating a series of procedures or actions performed by the remote cache server upon receipt of a document retrieval request.
- the remote cache server may need to decompress the request if it has been compressed by the client cache assistant.
- the remote cache server launches three lookups ( 504 , 506 , 508 ) using some of the request parameters.
- the three lookup operations ( 504 , 506 , 508 ) may be performed serially or in parallel with each other (i.e., during overlapping time periods).
- DNS lookup 504 may be performed by a different server or process than object lookups 506 and 508 , and thus may be performed during a time period overlapping lookups 506 and 508 .
- Object lookups 506 and 508 both access the same databases, but nevertheless may be performed during time periods that at least partially overlap by using pipelining techniques.
- the remote cache server identifies the IP address of the web host through a DNS lookup. Please refer to the discussion below in connection with FIG. 7 for more details about the DNS lookup.
- the remote cache server attempts to identify a copy of the requested document on the server by performing a server object lookup using the document's URL fingerprint. If found, the document copy is called the “server object.” By contrast, the copy of the requested document found in the client cache is commonly referred to as the “client object,” which is identified by the remote cache server using the client object's content fingerprint embedded in the document retrieval request ( 508 ). It should be noted that if the received request does not include a client object content fingerprint (e.g., because no client object was found in the client cache), the remote cache server does not launch a client object lookup at 508 .
- the server object and the client object may be identical if they share the same content fingerprint. If not, the server object is newer than the client content.
- the second scenario may occur when the remote cache server downloads and stores the server object in response to a previous document retrieval request from another client. Note that the freshness of the server object will nevertheless need to be evaluated before it is used to respond to the current document retrieval request.
- the remote cache server may have never received any request for the document, or the corresponding object may have been evicted from the server's caches due to storage limitations or staleness of the object.
- the server object lookup ( 506 ) comprises two phases.
- the first phase is to find the content fingerprint of the server object by querying the index cache using the requested document's URL fingerprint. In some embodiments, this query is quite efficient because the index cache is small enough to be stored in the server's main memory. If no entry is found in the index cache, not only is the second phase is unnecessary, there is even no need for the client object lookup, because the initial lookup results fall into the third scenario.
- the second phase of the server object lookup is to query the object archive for the server object's content and other relevant information using the identified content fingerprint from the first phase.
- the remote cache server may also query the object archive for the client object's content using the content fingerprint embedded in the document retrieval request, if any.
- the remote cache server examines the server object to determine if the server object is fresh enough to use in a response to the pending document request ( 512 ). If the server object has an associated expiration date, it is quite easy to determine the freshness of the server object. If not, a secondary test may be used to determine the server object's freshness. In one embodiment, a simple test based on the document's LM-factor is used to determine the server object's freshness.
- the LM-factor of a document is defined as the ratio of the time elapsed since the document was cached in the object archive to the age of the document in accordance with the date/time assigned to it by its host.
- the document is treated as fresh; otherwise, the document is treated as stale.
- a predefined threshold e.g. 50%
- the document is treated as fresh; otherwise, the document is treated as stale.
- a document is determined to be stale according to the freshness parameters or other information and may nevertheless be used despite its age. This may occur, for instance, when a fresh copy of the document is not available from its host.
- the remote cache server If the server object is deemed to be fresh and its content is different from that of the client object, the remote cache server generates a first content difference between the server object and the client object ( 514 ).
- the content difference may be generated, based on the content of the content and server objects, using any suitable methodology. A number of such methodologies are well known by those skilled in the art. Some of these methodologies are called differential compression.
- the remote cache server returns the first content difference to the client cache assistant for the preparation of an appropriate response to the application.
- the content difference is compressed by the remote cache server before being sent to the client cache assistant so as to reduce transmission time over the connection between the remote cache server and the client cache assistant.
- compression is not used.
- compression is used only predefined criteria are met, such as a criterion that a size of the content difference (or a size of the response that includes the content difference) exceeds a threshold.
- the remote cache server retrieves a new copy of the requested document from the document's host, or in some embodiments, the search engine repository 140 ( 520 ). In the embodiments including the repository flag of table 213 described earlier, and when the repository flag is set ( 538 ), the remote cache server 124 obtains the document from the search engine repository 140 ( 540 ). In instances where the repository interface 138 and remote cache server 124 have updated the index cache 122 for a document not yet requested, the index cache 122 will contain an entry (including the repository flag to use the search engine repository 140 ), and yet no corresponding document copy will be resident in the object archive 128 .
- the document is obtained from the search engine repository 140 and sent to the client cache assistant 106 ( 542 ).
- a content fingerprint is generated for the document, the document is recorded in object archive 128 , and the various tables are updated ( 544 ). Regardless of whether this document is recorded (as in 544 ), a new copy of the document content is obtained from the document's web host ( 546 ), a content fingerprint is generated for the document, the document is recorded in object archive 128 , and the various tables are updated ( 548 ).
- the remote cache server After receiving the document, the remote cache server registers the new document in its index cache and object archive ( 522 ) as a new server object. The registration includes generating a new content fingerprint for the new document and creating a new entry in the index cache and object archive, respectively, using the new content fingerprint. A more detailed discussion of downloading documents from a web host is provided below in connection with FIG. 8 .
- the remote cache server generates a second content difference between the new server object and the client object ( 524 ) and returns the second content difference to the client cache assistant ( 526 ).
- the remote cache server will be able to download a new copy of the requested document from the web host.
- the web host may be temporarily shut down, the web host may have deleted the requested document from its file system, or there may be network traffic congestion causing the download from the web host to be slow (e.g., the download time is projected, based on the download speed, to exceed a predefined threshold). If any of these scenarios occurs, the search engine repository 140 ( FIG. 1 ) becomes a fallback for the remote cache server to rely upon in response to a document request. As shown in FIG.
- the remote cache server may turn to the repository for a copy of the requested document that is cached in the repository ( 530 ). Since the search engine frequently updates its repository, the repository may have a fresher copy than the server or client copy (i.e., the server or client object).
- the repository becomes the only source for responding to the document request with a document, as opposed to responding with an error message indicating that the document is not available.
- the repository copy it is still preferred to return the repository copy than to return an error message. This is especially true if the requested document has been deleted from the web host's file system.
- the client cache assistant may attach to the response a notice indicating that the document being returned may be stale.
- a document download request from the remote cache server to the host of the requested document is not necessarily triggered by a user request as indicated above.
- the document download request may be initiated by the remote cache server independent of any request from a client computer.
- the remote cache server may periodically check the expiration dates of the documents cached by the remote cache server by scanning each entry in the index cache. If a document has expired or is about to expire, e.g., within a predefined expiration time window, the remote cache server will launch a download request for a new version of the document to the web host, irrespective of whether there is a current client request for the document.
- prefetching Such a document download transaction is sometimes referred to as “prefetching”.
- Document prefetching generates an entry in the web host's access log that is not tied to an actual view of the prefetched document. Therefore, in one embodiment, if a real client request for the document falls within the predefined expiration time window, the remote cache server initiates a document prefetching while responding to the user request with the “almost-expired” version of the document from the server object archive. If the prefetched version is determined to be the same as the “almost-expired” version (as determined by comparing the content fingerprints of the two document copies or versions) the remote cache server simply renews the “almost-expired” version's expiration date without taking any further action.
- the remote cache server If the prefetched version is different from the “almost-expired” version, the remote cache server generates a new content difference between the prefetched version and the “almost-expired” version and transmits this content difference to the client cache assistant.
- the remote cache server not only prefetches documents from the various web hosts but also precalculates the content differences between the new server objects corresponding to the prefetched documents and the next most recent server objects in the server object archive, and caches the precalculated content differences in its object archive for later use when a user requests these documents. This feature is particularly effective when applied to those documents that are updated and visited frequently. The stored content difference could be available via the content fingerprints and indicate which contents had been compared. Prefetching is discussed in more detail referring to FIGS. 17 and 18 below.
- the processes of generating the first content difference ( 514 ) and returning the first content difference ( 516 ) precede the process of determining the freshness of the server object ( 512 ). So when the remote cache server generates the second content difference ( 524 ), the client cache assistant has received or is in the process of receiving the first content difference. As a result, the second content difference is not between the new server object and the original client object, but between the new server object and the old server object (which is now the new client object).
- FIG. 9 A more detailed discussion of how the remote cache server transfers multiple content differences to the client cache assistant is provided below in connection with FIG. 9 .
- FIG. 6 is a flowchart describing a process performed by the client cache assistant after receiving one or more content differences from the remote cache server ( 601 ). If the content differences, according to one embodiment, have been compressed by the remote cache server before being sent out, the client cache assistant decompresses them accordingly prior to any further action. In some embodiments, the client cache assistant also retrieves all the resources associated with new client object in the same manner. Note that each associated document, e.g., an embedded image or subdocument, goes through the same process discussed above in connection with FIG. 5 , because the document retrieval request includes every associated document's URL fingerprint as well as the associated client content fingerprint when there is a client cache hit for the associated document.
- each associated document e.g., an embedded image or subdocument
- the client cache assistant merges the content differences and, if it exists, the old client object in the client cache, into a new client object. Finally, the client cache assistant serves the new client object to the user through an application, such as a web browser ( 607 ).
- FIG. 7 is a flowchart illustrating one embodiment of a DNS lookup process.
- the remote cache server extracts the hostname of the web server that hosts the requested document from the request ( 702 ). This hostname needs to be translated into an IP address for the remote cache server to download the document from the corresponding web server.
- the first option is to search the DNS cache 126 ( FIG. 1 ) associated with the remote cache server for the hostname's IP address ( 704 ).
- the DNS cache 126 is located in the memory of the remote cache server, which has a relatively small capacity compared with the DNS master 130 .
- the address records in the DNS cache 126 are updated such that any address record in the DNS cache 126 is presumptively fresh and may be used by the remote cache server. Therefore, in one embodiment, an address record found in the DNS cache ( 706 ) is returned to the remote cache server and the DNS lookup stops at 707 .
- the DNS master 708 is queried for the returned IP address.
- a benefit of a DNS master-based query following a cache hit at 706 is that the DNS master may determine the user visit frequency with respect to a particular IP address and determine an appropriate DNS refresh schedule for the address record.
- the remote cache server must query the DNS master for the IP address associated with the hostname ( 708 ). If no IP address is found ( 710 -no), the DNS master submits a request for resolving the hostname to a DNS server 136 ( 714 ). The DNS server 136 is sometimes herein called the “third-party DNS server”, to distinguish it from the DNS master. Otherwise ( 710 -yes), the DNS master returns the IP address found in the DNS master to the remote cache server ( 711 ) for at least submitting a document downloading request to the web server identified by the IP address.
- the IP address found in the DNS master may not be sufficiently fresh ( 712 ) or may soon be deemed stale. If the IP address is not stale ( 712 -no), the DNS master may still update one or more parameters (e.g., LUT, TTL, user visit frequency) of the address record containing the IP address in the DNS master ( 717 ). For example, the DNS master may update the user visit frequency of the address record, which, as discussed below, might affect the record's self-refresh priority.
- the DNS master may update the user visit frequency of the address record, which, as discussed below, might affect the record's self-refresh priority.
- the DNS master will submit a request to the third-party DNS server ( 714 ).
- the DNS master updates itself ( 716 ), returns the IP address ( 718 ) to the requesting remote cache server and updates the corresponding address record in the DNS cache ( 720 ). While updating the appropriate address record in the DNS master, the DNS master may update one or more of the aforementioned parameters in the address record.
- the DNS master submits a request for resolving the hostname to the third-party DNS server 136 ( 714 ).
- the remote cache server may still download a document using the stale IP address returned at 711 , but in this instance, it will withhold the downloaded document temporarily until a new IP address is returned by the third-party DNS server ( 714 ). If the new IP address is identical to the stale one, the downloaded document is sent to the client cache assistant. Otherwise, the remote cache server discards the temporarily withheld document and downloads another copy using the new IP address.
- the DNS lookups discussed above in connection with FIG. 7 are needed not only when the remote cache server receives a document retrieval request from a client cache assistant, but also in embodiments that support document prefetching. In the latter case, the remote cache server tries to resolve the IP address for every embedded link, or a selected subset of the embedded links in a newly downloaded document, because there is a likelihood of the documents associated with the embedded links being used in the near future.
- the resolution of IP addresses for the hostnames of the embedded links in a document may trigger the DNS master to submit multiple DNS resolution requests to the third-party DNS server. It is well understood that DNS resolution through a third-party DNS server is a time-consuming process and avoided where possible.
- the DNS master may be configured to self-refresh the address records when predefined criteria are met. In one embodiment, the DNS master prioritizes an address record's self-refresh schedule according to its TTL and user visit frequency. For instance, the DNS master may be configured to perform a self-refresh at least a few minutes before an address record's TTL expires. In some embodiments, addresses having a higher user visit frequency are be granted a higher priority for self-refresh. Other well-known prioritization strategies are contemplated.
- the DNS master then updates entries, if needed, in the DNS cache, thus maintaining the freshness of those entries.
- the remote cache server when a web host is found to have a new IP address that is different from the existing one stored in the DNS master, this is interpreted as indicating that the web host has also updated the content of the requested document.
- the remote cache server therefore terminates the other two lookups ( 506 and 508 in FIG. 5 ) and downloads a new copy of the requested document using the new IP address (at 520 in FIG. 5 ).
- FIG. 8 is a flowchart depicting how the remote cache server downloads a new document from the corresponding web host using the IP address identified by the DNS lookup.
- the remote cache server needs to first establish a connection with the web host ( 801 ).
- this connection is a non-dedicated connection, such as an HTTP connection.
- the remote cache server maintains a pool of connection objects for establishing dedicated, persistent connections between itself and various web hosts. If there is already an existing connection between the remote cache server and the web host, the remote cache server simply re-uses this existing connection to download the new document. If not, the remote cache server creates a new connection by selecting an unused connection object from the pool.
- the download request comprises the IP address of the web host and a plurality of header fields. These header fields typically include one or more standard HTTP request header fields, such as “If-Modified-Since” or “If-None-Match” which help to avoid downloading a document whose content is identical to the server or client object.
- the web host In response to the download request, the web host returns an HTTP response to the remote cache server ( 803 ) which will indicate whether the document was found and its freshness. The web host could indicate that it does not have a fresher version, the document was not found, or that it is transmitting the document because it had a fresher version ( 805 ). If the web host has a fresher version, the remote cache server proceeds to download the document as well as any associated documents from the web host ( 807 ), creates a new content fingerprint for each of the newly downloaded documents, registers the newly downloaded documents in its index cache and object archive as the new server object ( 522 ) and generates a second content difference between the new server object and the client object (or the old server object) at 524 .
- the remote cache server returns the second content difference or the “Not Modified” response to the client cache assistant. If not ( 805 -No), the remote cache server re-uses the existing server or client object at 813 . In one particular embodiment, the remote cache server generates a content difference of null, or zero which causes the client cache assistant to use the same object when responding to the request to the application. If the server object is to be reused, the remote cache server generates a first content difference between the server object and the client object ( 514 ), and sends the first content difference to the client cache assistant ( 516 ).
- the remote cache server sometimes “manipulates” the content of a newly downloaded document to improve the user experience before storing the document or generating the second content difference. For instance, if the newly downloaded document comprises slow redirect instructions such as META-tag style redirects or Javascript style redirects, the remote cache server may replace them with more efficient immediate HTTP redirects. In another example, the remote cache server may eliminate certain portions of the documents deemed to be of low importance, e.g., whitespaces or comments, to make the remaining content more compressible. If the document fails to specify the parameters of an embedded image, e.g., its width or height or both, the remote cache server may modify the document to provide the missing parameter values so as to expedite the rendering of the image on the client. The remote cache server may also remove popup windows, advertisement banners or other content from newly downloaded documents either in accordance with a predefined set of rules, or in accordance with a rules specified by a particular client or user.
- slow redirect instructions such as META-tag style redirects or Javascript style redirects
- the remote cache server may generate multiple content differences in response to a single document retrieval request and transfer those content differences back to the client cache assistant in a non-sequential manner so as to reduce the idle time of the connection between the remote cache server and client cache assistant.
- the content difference associated with the current server object includes a parameter, e.g., a flag, notifying that the client cache assistant can assemble the multiple content differences and the original client object together and serve the assembled result to the requesting user.
- FIG. 9 is a flowchart describing how the remote cache server coordinates with the client cache assistant during the transfer of the content differences in accordance with one embodiment of the present invention.
- the remote cache server Prior to the generation of the second content difference, the remote cache server checks the status of the transfer of the first content difference ( 902 ). If the transfer of the first content difference has advanced substantially, e.g., more than 50% of the first content difference has been received by the client cache assistant, the remote cache server may decide to let the transfer be completed. In this case, the remote cache server generates the second content difference between new server object and the old server object ( 906 ) and then transfers the second content difference to the client cache assistant ( 916 ). The generation of the second content difference overlaps, at least in part, with transmission of the first content difference to the client cache assistant.
- the remote cache server terminates the transfer ( 908 ).
- the client cache assistant receives an incomplete content difference. If the incomplete content difference constitutes only a minor portion of the first content difference ( 910 ), the client cache assistant may abandon it and the remote cache server, in turn, generates a new content difference between the new server object and the original client object ( 914 ). If the incomplete content difference constitutes a significant portion of the first content difference, the client cache assistant may choose to keep the incomplete first content difference to save data transmission time. Based upon the client cache assistant's decision, the remote cache server generates a content difference between the new server object and the combination of the old server object and the original client object ( 912 ).
- the process of loading content differences from the remote cache server to the client cache assistant is actually an on-going process independent from any specific user request for documents.
- the remote cache server may choose to preload content differences related to those documents that are frequently requested by users through a particular client cache assistant whenever it detects a content change to a document. Since the preloading is not triggered by any particular user request, the remote cache server may assign a relatively low priority data stream to the preloading process and reserve data streams with high priorities for the loading process in response to a user request. However, the remote cache server may upgrade the priority of a data stream associated with the preloading process using a corresponding control stream once it receives a user request for a document that is currently being preloaded. Preloading is discussed in more detail in reference to FIGS. 17 and 18 below.
- FIG. 10 schematically illustrates how the remote cache server and client cache assistant coordinate with each other when the client cache assistant decides to keep the incomplete content difference.
- the remote cache server Based upon the incomplete content difference, the remote cache server identifies a location in the old server object and original client object at which the transfer is terminated, and combines the top 1002 of the old server object and the bottom 1004 of the original client object to form a hybrid server object.
- the remote cache server generates a second content difference between the new server object and the hybrid server object and sends it to the client cache assistant.
- the client cache assistant combines the original client object, the incomplete first content difference and the second content difference to create a new client object which is identical to the new server object on the server side.
- FIG. 11 depicts a client computer 1100 in accordance with one embodiment of the present invention, which typically includes one or more processing units (CPU's) 1102 , one or more network or other communications interfaces 1110 , memory 1112 , and one or more communication buses 1114 for interconnecting these components.
- the client computer 1100 typically includes a user interface 1104 , optionally comprising a display device 1106 and a keyboard 1108 .
- Memory 1112 includes high speed random access memory and optionally includes non-volatile memory, such as one or more magnetic disk storage devices. In some embodiments, memory 1112 stores:
- FIG. 12 depicts a server computer 1200 in accordance with one embodiment of the present invention, which typically includes one or more processing units (CPU's) 1202 , one or more network or other communications interfaces 1210 , memory 1212 , and one or more communication buses 1214 for interconnecting these components.
- the server computer 1200 optionally includes a user interface 1204 comprising a display device 1206 and a keyboard 1208 .
- Memory 1212 includes high speed random access memory and optionally includes non-volatile memory, such as one or more magnetic disk storage devices.
- Memory 1212 or alternatively one or more storage devices (e.g., one or more nonvolatile storage devices) within memory 1212 , includes a computer readable storage medium.
- memory 1212 or the computer readable storage medium of memory 1212 stores:
- FIG. 13 depicts a search engine repository 140 in accordance with one embodiment of the present invention, which typically includes one or more processing units (CPU's) 1302 , one or more network or other communications interfaces 1310 , memory 1312 , and one or more communication buses 1314 for interconnecting these components.
- the search engine 1300 optionally includes a user interface 1304 comprising a display device 1306 and a keyboard 1308 .
- Memory 1312 includes high speed random access memory and optionally includes non-volatile memory, such as one or more magnetic disk storage devices.
- the search engine repository is distributed over a large number (e.g., hundreds, or thousands) of servers, which are collectively represented by the system shown in FIG. 13 .
- memory 1312 of the search engine repository 140 stores:
- history log 1328 and the repository interface 1330 are illustrated as part of memory 1312 , these are shown within memory 1312 simply for illustrative purposes. In some embodiments, the history log 1328 and the repository interface 1330 will reside on other servers, such as servers associated with a search engine or search engine crawler.
- FIG. 14 provides an example illustrating how a system according to one embodiment searches through its several caches as well as a web host to respond to a request for a document submitted by a client computer.
- the process includes a series of decisions leading to a compromise between two conflicting goals: reducing latency, while attempting to avoid presenting stale document content to the requestor.
- a user types a URL of a website, http://www.python.org/, into a web browser operating in a client to access the website's homepage.
- the user's last visit 1410 to the homepage occurred on Mar. 2, 2004.
- the client cache assistant in the client has a cached copy of the homepage that is about five days old.
- the remote cache server's last visit 1430 to the website occurred on Mar. 5, 2004. Therefore, the remote cache server has another copy of the homepage which is two day old.
- the web server hosting the website has just updated the homepage 1440 a few hours ago.
- the web browser submits an HTTP GET request for the homepage to the client cache assistant.
- the GET request includes the following HTTP header fields:
- Request-Line GET http://www.python.org/ HTTP/1.0 Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */* Accept-Language: en-us User-Agent: Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 5.0) Host: www.python.org Proxy-Connection: Keep-Alive
- the client cache assistant Upon receipt of the GET request, the client cache assistant searches its client cache and identifies the five-day-old homepage in the cache. In this example, it is assumed that the cached homepage does not have an associated expiration date/time, which is a common phenomenon. Without an expiration date/time, and a client cache copy that is a few days old, the client cache copy is automatically assumed by the client cache assistant to be potentially stale. Thus, the client cache assistant submits a document retrieval request to the remote cache server.
- the document retrieval request besides the information specified in the GET request's header, includes the following additional header fields:
- the reason for including the two additional HTTP header fields, “If-Modified-Since” and “If-None-Match”, is to inform the remote cache server that it already has a five-day-old copy of the homepage and the copy's entity tag is “199faa-1842-19d9199e”.
- the client cache assistant is only interested in a new copy of the homepage that is fresher than what is currently in the client cache.
- the two fingerprints of the cached homepage are used by the remote cache server to do a server object lookup and a client object lookup.
- the remote cache server Upon receiving the document retrieval request, the remote cache server initiates the three lookups using the hostname “www.python.org”, the content fingerprint “0x07e111eec01dda7a” and the URL fingerprint “0x0323efd056b”, respectively.
- the DNS lookup resolves the IP address “194.109.137.226” of the web host by querying the DNS cache, the DNS master or an external DNS server, if necessary.
- the object archive is a mapping from a content fingerprint of a document to an actual copy of the document's content.
- the client object lookup returns a copy of the homepage that is cached on the client side, which is thereafter used as the basis for generating a content difference between a server object and a client object (see, e.g., processes 514 and 524 in FIG. 5 ).
- the server object lookup attempts to map the URL fingerprint of the homepage to a content fingerprint in the index cache stored in the main memory.
- the remote cache server locates an entry in the index cache including the following set of header fields:
- the “Index Date” field and the “Last-Modified” field suggest that this entry was created in the index cache about one day ago, while the server object itself is about two days old.
- the “Expires” field is filled with “N/A” because the web host did not specify a lifetime for the server object. Since the content fingerprint of the server object “0xb5a7d7e111da7a11” is different from that of the client object “0x07e111eec01dda7a” and its content is at least three days fresher than that of the client object, the remote cache server must decide whether the two-day-old server object is sufficiently fresh.
- the LM-factor of a server object is defined as the ratio between the age of its index entry and the age of the server object itself.
- the LM-factor of the server object in this example is 50% (one day vs. two days), which the remote cache server may assess as being too high (and thus too risky) for the server object to be treated as fresh (i.e., it is deemed potentially stale).
- the remote cache server generates the first content difference between the server object and the client object and transmits the first content difference back to the client cache assistant even if the server object is deemed potentially stale.
- the remote cache server sends a download request to the web host located at the IP address of “194.109.137.226” for the homepage's current content.
- the remote cache server When preparing the download request, the remote cache server makes the following modifications to the header fields as received from the client cache assistant:
- the web host's response is simply a HTTP response header comprising the following header fields:
- the homepage since the homepage was updated just a couple of hours ago, it will be sent back the remote cache server to replace the two-day-old server object and the HTTP response header will be something like this:
- the remote cache server deletes the index cache entry (but not the object archive entry) corresponding to the old server object, generates a new entry for the new server object in the index cache and saves the new server object in its object archive. Assuming that the transfer of the first content difference has been completed, the remote cache server accordingly generates a second content difference between the new server object and the old server object and transmits the second content difference to the client cache assistant. Finally, the client cache assistant merges the first and second content differences with the five-day-old client object to generate a new client object, which is then sent to the web browser for rendering.
- the homepage includes five links to images and one link to a style sheet.
- the web browser makes GET requests similar to the one for the homepage for other documents associated with the homepage.
- the client cache assistant checks if the associated documents can be located in its cache, and if not, sends document retrieval requests to the remote cache server, which either identifies the associated documents in its object archive or sends requests to the corresponding web hosts.
- the client cache assistant since the client cache assistant has the five-day-old homepage in its client cache, it will likely finds a copy of each of the associated documents in its client cache. Since these associated documents are more likely to be static than the homepage itself, the client cache assistant will re-use them unless the remote cache server returns a new version of these documents.
- the system operates in a more preemptive fashion.
- the client cache assistant includes not only the homepage's URL and content fingerprints, but also the associated documents' URLs and content fingerprints in its document retrieval request.
- the remote cache server upon receipt of the document retrieval request, processes each document therein one by one, following a same set of procedures as discussed above. Consequently, the client cache assistant receives not only content differences corresponding to the homepage itself, but also content differences corresponding to the associated documents, if they have been updated as well.
- a network crawler subsystem 1502 interfaces with a history log 1504 .
- the history log 1504 is simply an example of a database of information regarding the documents in a search engine repository. Other databases containing information about the documents could be used.
- the network crawler subsystem 1502 is a system that, among other things, includes collecting documents on a network based on certain conditions and parameters. Copies of the documents are typically stored in a central or decentralized storage system such as search engine repository 140 .
- the network crawler subsystem 1502 When used in conjunction with a search engine, the network crawler subsystem 1502 is responsible for populating the search engine repository and index on which the search and indexing algorithms of the search engine are applied.
- the network that is crawled by the network crawler subsystem 1502 could range in size from a small local area network to the Internet.
- the history log 1504 contains information about the documents loaded into the search engine and will be described in more detail below referring to FIG. 16 .
- the repository interface 138 interfaces with the history log 1504 and the remote cache server 124 .
- the repository interface 138 includes a stable extractor 1508 .
- the stable extractor 1508 uses the history log 1504 to identify documents that are identified as having reached a certain level of stability such that the copy of the document in the search engine repository 140 has a high probability of being the same as the document on the document's original host. Accordingly, the remote cache server 124 should initially use the copy of the document from the search engine repository 140 , which in many cases will be delivered faster.
- the repository interface 138 may include a fresh extractor 1506 .
- the fresh extractor 1506 uses the history log to identify documents in the search engine repository 140 which may have been recently retrieved and stored. For these documents it may be faster to have the documents initially delivered from the search engine repository 140 rather than from the original web host where the document originated.
- Information about the fresh or stable documents identified by the repository interface 138 is then sent to the remote cache server 124 for merging into the index cache 122 .
- This merging includes setting of the repository flag in the index cache records for the identified documents to indicate that these documents should be obtained from the search engine repository 140 . This has the beneficial feature of saving the time and effort in contacting the original document host to obtain a copy of the requested document.
- a document identified by the repository interface 138 is entered into the index cache 122 only if the index cache 122 does not already have an entry for the same document. In other embodiments the entry in the index cache 122 will be modified and the flag set when the document copy in the search engine repository 140 is identified as being fresher than the copy in the object archive 128 .
- an entry in the cache index 122 will be modified by changing one or more of the freshness parameters of the entry based on stability information obtained by the stable extractor 1508 for the corresponding document. This may occur, for example, in situations where the stability information obtained from the repository indicates a greater degree of stability than indicated by the freshness parameters in the entry. Other embodiments could combine the two approaches.
- the history log 1504 includes a plurality of records 1602 , each of which contains information about a particular document present in the search engine repository 140 .
- An exemplary record 1602 - 2 shows in more detail some of the information which may be present in the history log 1504 for each record 1602 .
- the record 1602 - 2 may contain a URL fingerprint 1604 , a timestamp 1606 , a content fingerprint 1608 , a source ID 1610 , a date/time value 1612 , an expiration date/time 1614 , a page rank 1618 , an entry date 1618 , a last modified date 1620 , and control headers 1622 .
- the URL fingerprint 1604 is similar to the URL fingerprint described above in connection with FIG. 2A and represents a normalized and hashed value of the URL from where the document was obtained.
- the timestamp 1606 indicates at what time the document associated with the URL fingerprint 1604 was obtained by the network crawler subsystem 1502 .
- the content fingerprint 1608 is similar to the content fingerprint described in connection with FIG. 2A , representing the contents of the document and being useful for document comparisons.
- the date/time value 1612 provides the date/time given the document by the document's host system and may provide an indication of its creation, edit, or validity date and time.
- the expiration date/time value 1614 when provided by the document's host, is a date, or date and time at which the document content is no longer considered valid. Although referred to here and elsewhere as a date/time, time, or date value, the terms should not be taken to be limiting. The concept is that these are values by which the relative dates and/or times of particular activities can be measured.
- the page rank 1618 is indicative of a document's importance or popularity in accordance with a query independent ranking used by the search engine.
- the entry date 1618 indicates the date/time at which the document was indexed or entered in to the document repository.
- the last modified date 1620 if provided, represents the last time that the web host modified the document.
- the control headers 1622 provide information about whether a particular document may or may not be cached. Documents whose contents are not to be cached are sometimes termed “private”. In some embodiments, these documents having a private attribute are excluded from further examination by the stable extractor 1506 or the fresh extractor 1502 since these documents will not be cached.
- the stable extractor 1506 works with the history log 1504 to identify those documents which have reached a level of stability by having not changed recently or not being expected to change in the near future. Accordingly, there is a high likelihood that these documents obtained from the search engine repository 140 reflect the current state of the document on the web host. For example, the stable extractor 1506 could identify those documents which have not changed in the past Y (e.g., a predefined number between 2 and 10) downloads or within a predetermined time period. In some embodiments where the server does not provide a last modified date, this date can be approximated. If the document was unchanged between two successive downloads, the earlier date can be used as an approximation of the last modified date.
- Y e.g., a predefined number between 2 and 10
- the earlier and later download dates can be used to compute the LM-factor of the server object (defined as the ratio of the age of its index entry (i.e., the time since the server object was last downloaded or last verified to be to be fresh) the age of the server object itself (i.e., the amount of time since the object was last modified)), which is then compared to a threshold to determine if the server object is stale.
- the LM-factor of the object in the search engine repository may by scaled in accordance with the page rank of the object in order to preferentially create cache index entries for popular or important pages.
- the initially identified set of stable documents may be reduced by selecting a predefined number of those pages having the highest page ranks, or by eliminating identified documents having a page rank 1618 below a predefined threshold. Reducing the set of identified stable documents in this way may help to avoid populating the index cache with information about documents unlikely to be requested by users.
- the repository interface 138 sends the information about the documents to the remote cache server 124 which uses the information to populate the fields in index cache 122 .
- the fresh extractor 1506 can determine those documents for which the search engine repository 140 has a fresh version within it. In these instances, it may be quicker to obtain the document from the search engine repository 140 than from the document's URL host.
- a set of fresh documents is identified by the fresh extractor 1506 by examining one or more parameters in a set of history log records and applying a set of predefined criteria to those parameters so as to evaluate document freshness.
- One method of identifying fresh documents which in some embodiments may be defined as documents downloaded within a predetermined period of time, is by examining the timestamp value 1606 in a set of history log records.
- the number of documents within this set of identified fresh documents may be reduced by selecting a predefined number of those pages having the highest page ranks, or by eliminating identified documents having a page rank 1618 below a predefined threshold. Reducing the set of identified fresh documents in this way may help to avoid populating the index cache with information about documents unlikely to be requested by users.
- the fresh extractor 1506 could examine the expiration date/time value 1614 and determine that it will be some period of time until that document becomes stale. Documents in the identified set whose expiration is not within a predetermined time period could be considered fresh.
- the fresh extractor 1506 could examine the date/time value 1612 and determine those documents having values within a predetermined time period from the current date which could be considered fresh.
- One of ordinary skill in the art could recognize many different ways to use information from the history log to identify documents which would have a high likelihood of being fresh enough to allow the copy of the document to be obtained from the search engine repository 140 instead of the original host.
- Prefetching and preloading can be used in combination to decrease the latency observed by the user on client 102 .
- the remote cache server 124 could examine the resources accessed by the document and send them to the client cache assistant before the resources are requested. For example, if the document sent to the client cache assistant 106 represented search results from a previously submitted query to a search engine, then prefetching might be used to obtain at the remote cache server 124 the content of the documents most likely to be selected and preloading might be used to send to the client cache assistant 106 the document contents of those search results (for example, the top three results).
- the remote cache server 124 would send these documents in a lower priority data stream, which would be converted into a higher priority data stream when the document is actually requested.
- FIG. 17 illustrates an embodiment for prefetching and preloading in combination although one of skill in the art would recognize these techniques could be used separately.
- resources is used broadly to encompass any type of document that might be referenced or used by a client requested document.
- the resources in it are identified ( 1702 ). If a content difference is being sent to the client assistant 106 then the most recent document content is used.
- the resources in the document are identified and then prioritized to determine the order and priority for obtaining and sending the resources to the client cache assistant 106 ( 1704 ). Prioritization could be done in a variety of ways based on the type of document. For example, as mentioned above, if the document represented search results, then the documents associated with the search results, or a subset thereof comprising the N most highly ranked documents in the search results, could be identified and sent in the order of presentation in the document.
- Another example might order the documents based on the order of the resource links in the document, e.g., those resources earlier in the document would be obtained before or with a higher priority than those later in the document.
- the documents would then be obtained ( 1706 ) by any of the methods previously described (e.g., examining the index cache and obtaining each of the documents from either the object archive 128 , web host 134 , or search engine repository 140 ) and any associated processing would occur (e.g., generating content fingerprints and updating tables).
- the remote cache server 124 would open a channel, or use an existing one, to send the document's URL fingerprint and content fingerprint in the portion of the data stream prior to the document content ( 1708 ). Initially, this stream would be assigned a low priority and, in one embodiment, this is communicated to the client cache assistant 1206 via a control channel.
- any one of three situations might occur, two of which affect the remote cache server 124 : (1) the client may recognize from the URL fingerprint and the content fingerprint that it already has the document; or (2) the application 104 requests the document being sent. The third situation is the absence of the other two (i.e., the document was not present and is not requested during its loading).
- the client If the client recognizes that it already has the document, it will communicate an abort to the remote cache server 124 ( 1710 ), which will then terminate the document transmission ( 1714 ). On the other hand, if the client cache assistant 106 indicates that the document being sent is now being requested ( 1716 ), then the remote cache server 124 will increase the priority of the transmission of the document ( 1720 ). The recognition of the requested document as being the same as the document being downloaded to the client could be done by either the client cache assistant 106 or the remote cache server 124 .
- the communication channels between the client cache assistant 106 and the remote cache server 124 allow for multiple data streams of varying priorities.
- One or more control channels may be used to allow the client cache assistant 106 and the remote cache server 124 to exchange control information such as abort or priority information.
- Different resources being downloaded to the client could be assigned different priorities based on any number of factors. Those of ordinary skill in the art would recognize various way to use prioritization.
- FIG. 18 illustrates the activity by the client cache assistant 106 when receiving a document.
- the client cache assistant 106 receives in a data stream the URL fingerprint and the content fingerprint of the document before the document content arrives ( 1802 ).
- the client cache assistant 106 determines whether the document is already present in the client cache 108 using the URL fingerprint and content fingerprint ( 1804 ). It may not be necessary to use the URL fingerprint to make this determination. If the client cache assistant determines that it already has the document, it signals to the remote cache server 124 using the control channel that the remote cache server 124 should abort the transmission.
- stages which are not order dependent may be reordered and other stages may be combined or broken out. While some reordering or other groupings are specifically mentioned, others will be obvious to those of ordinary skill in the art and so do not present an exhaustive list of alternatives. Moreover, it should be recognized that the stages could be implemented in hardware, firmware, software or any combination thereof.
Abstract
Description
-
- 1. Each of the two lookups returns an object;
- 2. The server object lookup returns an object and the client object lookup returns nothing; and
- 3. Neither of the two lookups returns an object.
-
- an
operating system 1116 that includes procedures for handling various basic system services and for performing hardware dependent tasks; - a network communication module (or instructions) 1118 that is used for connecting the
client computer 1100 to other computers via the one or morecommunication network interfaces 1110; - an application (or instructions) 104, such as a web browser application, for receiving a user request for a document and rendering the requested document on a computer monitor or other user interface device;
- a client cache assistant module (or instructions) 106, as described elsewhere in this document; and
- a
client cache 108.
- an
-
- an
operating system 1216 that includes procedures for handling various basic system services and for performing hardware dependent tasks; - a network communication module (or instructions) 1218 that is used for connecting the
server computer 1200 to other computers via the one or morecommunication network interfaces 1210 and one or more communication networks, such as the Internet, other wide area networks, local area networks, metropolitan area networks, and the like; - a remote cache server module (or instructions) 124 for receiving a document retrieval request from a client cache assistant, generating a new server object and content differences and transferring the content differences back to the
client cache assistant 106; - a DNS master module (or instructions) 130 for retrieving the IP address of a web server that hosts the requested documents;
- a
DNS cache 126 for storing records that map hostnames to IP addresses; - an
index cache 122 for managing a plurality of objects' identification records, each record further comprising an object's URL fingerprint, a content fingerprint and multiple document content freshness parameters of the object; and - an
object archive 128 for managing a plurality of object records, each record further comprising an object's content fingerprint and a copy of the object's document content.
- an
-
- an
operating system 1316 that includes procedures for handling various basic system services and for performing hardware dependent tasks; - a network communication module (or instructions) 1318 that is used for connecting the
search engine repository 140 to other computers via the one or more communication network interfaces 1310 (wired or wireless), such as the Internet, other wide area networks, local area networks, metropolitan area networks, and so on; - a remote cache server interface module (or instructions) 1324 for preparing documents in response to a document request from a remote cache server;
- a
repository 1326 for storing a large volume of documents; therepository 1326 may have a structure similar to that of the client cache or server object repository, as shown inFIG. 2 , or use distinct set of data structures to store and enable fast access to the documents in therepository 1326; in some embodiments, some or all of the records in therepository 132 include document content freshness parameters to enable evaluation of the freshness of the documents in therepository 1326; - a
history log 1328 that contains information regarding the documents in therepository 1326; and - a
repository interface 1330 for communicating with theremote cache server 124 and for examining thehistory log 1328, including afresh extractor module 1332 for determining which documents in therepository 1326 are fresh andstable extractor module 1334 for determining which documents in therepository 1326 are stable.
- an
Request-Line: | GET http://www.python.org/ HTTP/1.0 | ||
Accept: | image/gif, image/x-xbitmap, image/jpeg, | ||
image/pjpeg, */* | |||
Accept-Language: | en-us | ||
User-Agent: | Mozilla/4.0 (compatible; MSIE 5.5; | ||
Windows NT 5.0) | |||
Host: | www.python.org | ||
Proxy-Connection: | Keep-Alive | ||
If-Modified-Since: | Tue, 02 Mar 2004 08:07:10 GMT | ||
If-None-Match: | “199faa-1842-19d9199e” | ||
URL Fingerprint: | “0x0323efd056b” | ||
Content Fingerprint: | “0x07e111eec01dda7a” | ||
URL Fingerprint: | “0x0323efd056b” | ||
Content Fingerprint: | “0xb5a7d7e111da7a11” | ||
Index Date: | Sat, 06 Mar 2004 15:30:21 GMT | ||
Last-Modified: | Fri, 05 Mar 2004 05:17:50 GMT | ||
Expires: | N/A | ||
Entity Tag: | “5a7586-39b3-3e66d9fe” | ||
-
- The “If-Modified-Since” header uses the date returned from the index entry, i.e., “Fri, 5 Mar. 2004 05:17:50 GMT”;
- The “If-None-Match” header uses the entity tag returned from the index entry, i.e., “5a7586-39b3-3e66d9fe”;
- The “Accept-Encoding” header always includes gzip; and
- The “Accept” header may include more formats than the formats supported by the web browser (the remote cache server converts the downloaded document to the formats supported by the web browser).
Response-Line: | HTTP/1.1 304 Not Modified | ||
Date: | Sun, 07 Mar 2004 10:53:57 GMT | ||
Server: | Apache/1.3.26 (Unix) | ||
Connection: | Keep-Alive | ||
Keep-Alive: | timeout = 15, max = 100 | ||
Entity Tag: | “5a7586-39b3-3e66d9fe” | ||
Response-Line: | HTTP/1.1 200 OK | ||
Date: | Sun, 07 Mar 2004 10:53:57 GMT | ||
Server: | Apache/1.3.26 (Unix) | ||
Last-Modified: | Sun, 07 Mar 2004 08:34:09 GMT | ||
Entity Tag: | “5a7522-39b3-3e6a3633” | ||
Accept-Ranges: | Bytes | ||
Content-Length: | 14771 | ||
Connection: | Keep-Alive | ||
Keep-Alive: | timeout = 15, max = 100 | ||
Content-Type: | Text/html | ||
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/536,701 US8788475B2 (en) | 2004-06-30 | 2012-06-28 | System and method of accessing a document efficiently through multi-tier web caching |
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/882,795 US7437364B1 (en) | 2004-06-30 | 2004-06-30 | System and method of accessing a document efficiently through multi-tier web caching |
US12/251,413 US8275790B2 (en) | 2004-06-30 | 2008-10-14 | System and method of accessing a document efficiently through multi-tier web caching |
US13/536,701 US8788475B2 (en) | 2004-06-30 | 2012-06-28 | System and method of accessing a document efficiently through multi-tier web caching |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/251,413 Continuation US8275790B2 (en) | 2004-06-30 | 2008-10-14 | System and method of accessing a document efficiently through multi-tier web caching |
Publications (2)
Publication Number | Publication Date |
---|---|
US20120271852A1 US20120271852A1 (en) | 2012-10-25 |
US8788475B2 true US8788475B2 (en) | 2014-07-22 |
Family
ID=39828400
Family Applications (3)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/882,795 Active 2025-09-17 US7437364B1 (en) | 2004-06-30 | 2004-06-30 | System and method of accessing a document efficiently through multi-tier web caching |
US12/251,413 Active 2024-10-28 US8275790B2 (en) | 2004-06-30 | 2008-10-14 | System and method of accessing a document efficiently through multi-tier web caching |
US13/536,701 Active US8788475B2 (en) | 2004-06-30 | 2012-06-28 | System and method of accessing a document efficiently through multi-tier web caching |
Family Applications Before (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/882,795 Active 2025-09-17 US7437364B1 (en) | 2004-06-30 | 2004-06-30 | System and method of accessing a document efficiently through multi-tier web caching |
US12/251,413 Active 2024-10-28 US8275790B2 (en) | 2004-06-30 | 2008-10-14 | System and method of accessing a document efficiently through multi-tier web caching |
Country Status (1)
Country | Link |
---|---|
US (3) | US7437364B1 (en) |
Cited By (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20130326084A1 (en) * | 2012-06-04 | 2013-12-05 | Microsoft Corporation | Dynamic and intelligent dns routing with subzones |
US20140214735A1 (en) * | 2013-01-28 | 2014-07-31 | Pagebites, Inc. | Method for an optimizing predictive model using gradient descent and conjugate residuals |
US20150201033A1 (en) * | 2014-01-10 | 2015-07-16 | Facebook. Inc. | Content specific router caching |
US9600777B2 (en) | 2013-03-11 | 2017-03-21 | Georges Harik | Configuring and optimizing computational structure for a machine learning application using a tuple of vectors |
US10205797B2 (en) | 2014-12-29 | 2019-02-12 | Facebook, Inc. | Application service delivery through an application service avatar |
US10291735B2 (en) | 2014-07-23 | 2019-05-14 | Facebook, Inc. | Residential cache appliance utilizing a social network |
US10397357B2 (en) | 2014-07-23 | 2019-08-27 | Facebook, Inc. | Rural area network device |
Families Citing this family (191)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8590013B2 (en) | 2002-02-25 | 2013-11-19 | C. S. Lee Crawford | Method of managing and communicating data pertaining to software applications for processor-based devices comprising wireless communication circuitry |
US20080189408A1 (en) | 2002-10-09 | 2008-08-07 | David Cancel | Presenting web site analytics |
US8095589B2 (en) | 2002-03-07 | 2012-01-10 | Compete, Inc. | Clickstream analysis methods and systems |
US10296919B2 (en) | 2002-03-07 | 2019-05-21 | Comscore, Inc. | System and method of a click event data collection platform |
US7383258B2 (en) | 2002-10-03 | 2008-06-03 | Google, Inc. | Method and apparatus for characterizing documents based on clusters of related words |
US7363378B2 (en) * | 2003-07-01 | 2008-04-22 | Microsoft Corporation | Transport system for instant messaging |
US7539727B2 (en) * | 2003-07-01 | 2009-05-26 | Microsoft Corporation | Instant messaging object store |
US7725452B1 (en) | 2003-07-03 | 2010-05-25 | Google Inc. | Scheduler for search engine crawler |
US8707312B1 (en) | 2003-07-03 | 2014-04-22 | Google Inc. | Document reuse in a search engine crawler |
US8171084B2 (en) * | 2004-01-20 | 2012-05-01 | Microsoft Corporation | Custom emoticons |
US7836044B2 (en) * | 2004-06-22 | 2010-11-16 | Google Inc. | Anticipated query generation and processing in a search engine |
US7437364B1 (en) | 2004-06-30 | 2008-10-14 | Google Inc. | System and method of accessing a document efficiently through multi-tier web caching |
US8676922B1 (en) | 2004-06-30 | 2014-03-18 | Google Inc. | Automatic proxy setting modification |
US8224964B1 (en) | 2004-06-30 | 2012-07-17 | Google Inc. | System and method of accessing a document efficiently through multi-tier web caching |
US7987172B1 (en) | 2004-08-30 | 2011-07-26 | Google Inc. | Minimizing visibility of stale content in web searching including revising web crawl intervals of documents |
WO2006027973A1 (en) * | 2004-09-07 | 2006-03-16 | Interman Corporation | Information search providing device and information search providing system |
US8001175B2 (en) * | 2004-10-22 | 2011-08-16 | International Business Machines Corporation | Facilitating server response optimization |
US8903760B2 (en) * | 2004-11-12 | 2014-12-02 | International Business Machines Corporation | Method and system for information workflows |
US20060106769A1 (en) | 2004-11-12 | 2006-05-18 | Gibbs Kevin A | Method and system for autocompletion for languages having ideographs and phonetic characters |
US20060195532A1 (en) * | 2005-02-28 | 2006-08-31 | Microsoft Corporation | Client-side presence documentation |
US7529255B2 (en) * | 2005-04-21 | 2009-05-05 | Microsoft Corporation | Peer-to-peer multicasting using multiple transport protocols |
US8856279B2 (en) * | 2005-05-26 | 2014-10-07 | Citrix Systems Inc. | Method and system for object prediction |
JP4042768B2 (en) * | 2005-06-21 | 2008-02-06 | コニカミノルタビジネステクノロジーズ株式会社 | Document file acquisition method, document processing apparatus, and document file acquisition program |
US9105028B2 (en) | 2005-08-10 | 2015-08-11 | Compete, Inc. | Monitoring clickstream behavior of viewers of online advertisements and search results |
US8832100B2 (en) | 2005-09-14 | 2014-09-09 | Millennial Media, Inc. | User transaction history influenced search results |
US8103545B2 (en) | 2005-09-14 | 2012-01-24 | Jumptap, Inc. | Managing payment for sponsored content presented to mobile communication facilities |
US8660891B2 (en) | 2005-11-01 | 2014-02-25 | Millennial Media | Interactive mobile advertisement banners |
US8666376B2 (en) | 2005-09-14 | 2014-03-04 | Millennial Media | Location based mobile shopping affinity program |
US9471925B2 (en) | 2005-09-14 | 2016-10-18 | Millennial Media Llc | Increasing mobile interactivity |
US8364521B2 (en) | 2005-09-14 | 2013-01-29 | Jumptap, Inc. | Rendering targeted advertisement on mobile communication facilities |
US10038756B2 (en) | 2005-09-14 | 2018-07-31 | Millenial Media LLC | Managing sponsored content based on device characteristics |
US8812526B2 (en) | 2005-09-14 | 2014-08-19 | Millennial Media, Inc. | Mobile content cross-inventory yield optimization |
US8615719B2 (en) | 2005-09-14 | 2013-12-24 | Jumptap, Inc. | Managing sponsored content for delivery to mobile communication facilities |
US7769764B2 (en) | 2005-09-14 | 2010-08-03 | Jumptap, Inc. | Mobile advertisement syndication |
US7603360B2 (en) | 2005-09-14 | 2009-10-13 | Jumptap, Inc. | Location influenced search results |
US8238888B2 (en) | 2006-09-13 | 2012-08-07 | Jumptap, Inc. | Methods and systems for mobile coupon placement |
US7660581B2 (en) | 2005-09-14 | 2010-02-09 | Jumptap, Inc. | Managing sponsored content based on usage history |
US8989718B2 (en) | 2005-09-14 | 2015-03-24 | Millennial Media, Inc. | Idle screen advertising |
US7860871B2 (en) | 2005-09-14 | 2010-12-28 | Jumptap, Inc. | User history influenced search results |
US8805339B2 (en) | 2005-09-14 | 2014-08-12 | Millennial Media, Inc. | Categorization of a mobile user profile based on browse and viewing behavior |
US8195133B2 (en) | 2005-09-14 | 2012-06-05 | Jumptap, Inc. | Mobile dynamic advertisement creation and placement |
US8131271B2 (en) | 2005-11-05 | 2012-03-06 | Jumptap, Inc. | Categorization of a mobile user profile based on browse behavior |
US9201979B2 (en) | 2005-09-14 | 2015-12-01 | Millennial Media, Inc. | Syndication of a behavioral profile associated with an availability condition using a monetization platform |
US8503995B2 (en) | 2005-09-14 | 2013-08-06 | Jumptap, Inc. | Mobile dynamic advertisement creation and placement |
US8819659B2 (en) | 2005-09-14 | 2014-08-26 | Millennial Media, Inc. | Mobile search service instant activation |
US20110313853A1 (en) | 2005-09-14 | 2011-12-22 | Jorey Ramer | System for targeting advertising content to a plurality of mobile communication facilities |
US8229914B2 (en) | 2005-09-14 | 2012-07-24 | Jumptap, Inc. | Mobile content spidering and compatibility determination |
US8027879B2 (en) | 2005-11-05 | 2011-09-27 | Jumptap, Inc. | Exclusivity bidding for mobile sponsored content |
US8433297B2 (en) | 2005-11-05 | 2013-04-30 | Jumptag, Inc. | System for targeting advertising content to a plurality of mobile communication facilities |
US10592930B2 (en) | 2005-09-14 | 2020-03-17 | Millenial Media, LLC | Syndication of a behavioral profile using a monetization platform |
US8302030B2 (en) | 2005-09-14 | 2012-10-30 | Jumptap, Inc. | Management of multiple advertising inventories using a monetization platform |
US7752209B2 (en) | 2005-09-14 | 2010-07-06 | Jumptap, Inc. | Presenting sponsored content on a mobile communication facility |
US9058406B2 (en) | 2005-09-14 | 2015-06-16 | Millennial Media, Inc. | Management of multiple advertising inventories using a monetization platform |
US8290810B2 (en) | 2005-09-14 | 2012-10-16 | Jumptap, Inc. | Realtime surveying within mobile sponsored content |
US7577665B2 (en) | 2005-09-14 | 2009-08-18 | Jumptap, Inc. | User characteristic influenced search results |
US7676394B2 (en) | 2005-09-14 | 2010-03-09 | Jumptap, Inc. | Dynamic bidding and expected value |
US7912458B2 (en) | 2005-09-14 | 2011-03-22 | Jumptap, Inc. | Interaction analysis and prioritization of mobile content |
US9076175B2 (en) | 2005-09-14 | 2015-07-07 | Millennial Media, Inc. | Mobile comparison shopping |
US7702318B2 (en) | 2005-09-14 | 2010-04-20 | Jumptap, Inc. | Presentation of sponsored content based on mobile transaction event |
US10911894B2 (en) | 2005-09-14 | 2021-02-02 | Verizon Media Inc. | Use of dynamic content generation parameters based on previous performance of those parameters |
US8209344B2 (en) | 2005-09-14 | 2012-06-26 | Jumptap, Inc. | Embedding sponsored content in mobile applications |
US8364540B2 (en) | 2005-09-14 | 2013-01-29 | Jumptap, Inc. | Contextual targeting of content using a monetization platform |
US8688671B2 (en) | 2005-09-14 | 2014-04-01 | Millennial Media | Managing sponsored content based on geographic region |
US8156128B2 (en) | 2005-09-14 | 2012-04-10 | Jumptap, Inc. | Contextual mobile content placement on a mobile communication facility |
US8311888B2 (en) | 2005-09-14 | 2012-11-13 | Jumptap, Inc. | Revenue models associated with syndication of a behavioral profile using a monetization platform |
US9703892B2 (en) | 2005-09-14 | 2017-07-11 | Millennial Media Llc | Predictive text completion for a mobile communication facility |
US8175585B2 (en) | 2005-11-05 | 2012-05-08 | Jumptap, Inc. | System for targeting advertising content to a plurality of mobile communication facilities |
US8571999B2 (en) | 2005-11-14 | 2013-10-29 | C. S. Lee Crawford | Method of conducting operations for a social network application including activity list generation |
US7970765B1 (en) * | 2006-03-14 | 2011-06-28 | Juniper Networks, Inc. | Network device for providing integrated DNS caching services |
US8706799B2 (en) * | 2006-05-29 | 2014-04-22 | Sandisk Il Ltd. | Method and apparatus to exchange information with a local storage device |
US8903843B2 (en) | 2006-06-21 | 2014-12-02 | Napo Enterprises, Llc | Historical media recommendation service |
US7761558B1 (en) * | 2006-06-30 | 2010-07-20 | Google Inc. | Determining a number of users behind a set of one or more internet protocol (IP) addresses |
US7970922B2 (en) | 2006-07-11 | 2011-06-28 | Napo Enterprises, Llc | P2P real time media recommendations |
US8327266B2 (en) | 2006-07-11 | 2012-12-04 | Napo Enterprises, Llc | Graphical user interface system for allowing management of a media item playlist based on a preference scoring system |
US9003056B2 (en) | 2006-07-11 | 2015-04-07 | Napo Enterprises, Llc | Maintaining a minimum level of real time media recommendations in the absence of online friends |
US8059646B2 (en) | 2006-07-11 | 2011-11-15 | Napo Enterprises, Llc | System and method for identifying music content in a P2P real time recommendation network |
US8805831B2 (en) | 2006-07-11 | 2014-08-12 | Napo Enterprises, Llc | Scoring and replaying media items |
US8090606B2 (en) | 2006-08-08 | 2012-01-03 | Napo Enterprises, Llc | Embedded media recommendations |
US8620699B2 (en) | 2006-08-08 | 2013-12-31 | Napo Enterprises, Llc | Heavy influencer media recommendations |
US7593935B2 (en) | 2006-10-19 | 2009-09-22 | Paxfire | Methods and systems for node ranking based on DNS session data |
US8799432B1 (en) * | 2006-10-31 | 2014-08-05 | Hewlett-Packard Development Company, L.P. | Managed computer network caching requested and related data from remote computers |
US8065275B2 (en) * | 2007-02-15 | 2011-11-22 | Google Inc. | Systems and methods for cache optimization |
US8812651B1 (en) | 2007-02-15 | 2014-08-19 | Google Inc. | Systems and methods for client cache awareness |
US20080209120A1 (en) * | 2007-02-26 | 2008-08-28 | Microsoft Corporation | Accelerating cache performance by active cache validation |
US8701010B2 (en) * | 2007-03-12 | 2014-04-15 | Citrix Systems, Inc. | Systems and methods of using the refresh button to determine freshness policy |
US20080235163A1 (en) * | 2007-03-22 | 2008-09-25 | Srinivasan Balasubramanian | System and method for online duplicate detection and elimination in a web crawler |
US9224427B2 (en) | 2007-04-02 | 2015-12-29 | Napo Enterprises LLC | Rating media item recommendations using recommendation paths and/or media item usage |
US8112720B2 (en) | 2007-04-05 | 2012-02-07 | Napo Enterprises, Llc | System and method for automatically and graphically associating programmatically-generated media item recommendations related to a user's socially recommended media items |
US20090049045A1 (en) | 2007-06-01 | 2009-02-19 | Concert Technology Corporation | Method and system for sorting media items in a playlist on a media device |
US9164993B2 (en) | 2007-06-01 | 2015-10-20 | Napo Enterprises, Llc | System and method for propagating a media item recommendation message comprising recommender presence information |
US8839141B2 (en) | 2007-06-01 | 2014-09-16 | Napo Enterprises, Llc | Method and system for visually indicating a replay status of media items on a media device |
US8285776B2 (en) | 2007-06-01 | 2012-10-09 | Napo Enterprises, Llc | System and method for processing a received media item recommendation message comprising recommender presence information |
US9037632B2 (en) | 2007-06-01 | 2015-05-19 | Napo Enterprises, Llc | System and method of generating a media item recommendation message with recommender presence information |
US8201081B2 (en) * | 2007-09-07 | 2012-06-12 | Google Inc. | Systems and methods for processing inoperative document links |
US20090094248A1 (en) * | 2007-10-03 | 2009-04-09 | Concert Technology Corporation | System and method of prioritizing the downloading of media items in a media item recommendation network |
US7865522B2 (en) | 2007-11-07 | 2011-01-04 | Napo Enterprises, Llc | System and method for hyping media recommendations in a media recommendation system |
US9060034B2 (en) | 2007-11-09 | 2015-06-16 | Napo Enterprises, Llc | System and method of filtering recommenders in a media item recommendation system |
US8126882B2 (en) * | 2007-12-12 | 2012-02-28 | Google Inc. | Credibility of an author of online content |
US9224150B2 (en) * | 2007-12-18 | 2015-12-29 | Napo Enterprises, Llc | Identifying highly valued recommendations of users in a media recommendation network |
US9734507B2 (en) | 2007-12-20 | 2017-08-15 | Napo Enterprise, Llc | Method and system for simulating recommendations in a social network for an offline user |
US8396951B2 (en) | 2007-12-20 | 2013-03-12 | Napo Enterprises, Llc | Method and system for populating a content repository for an internet radio service based on a recommendation network |
US8316015B2 (en) | 2007-12-21 | 2012-11-20 | Lemi Technology, Llc | Tunersphere |
US8060525B2 (en) | 2007-12-21 | 2011-11-15 | Napo Enterprises, Llc | Method and system for generating media recommendations in a distributed environment based on tagging play history information with location information |
US8117193B2 (en) | 2007-12-21 | 2012-02-14 | Lemi Technology, Llc | Tunersphere |
US8725740B2 (en) | 2008-03-24 | 2014-05-13 | Napo Enterprises, Llc | Active playlist having dynamic media item groups |
US8484311B2 (en) | 2008-04-17 | 2013-07-09 | Eloy Technology, Llc | Pruning an aggregate media collection |
US20090307302A1 (en) * | 2008-06-06 | 2009-12-10 | Snap-On Incorporated | System and Method for Providing Data from a Server to a Client |
US8190594B2 (en) * | 2008-06-09 | 2012-05-29 | Brightedge Technologies, Inc. | Collecting and scoring online references |
US9747340B2 (en) * | 2008-06-19 | 2017-08-29 | Microsoft Technology Licensing, Llc | Method and system of using a local hosted cache and cryptographic hash functions to reduce network traffic |
US8484227B2 (en) | 2008-10-15 | 2013-07-09 | Eloy Technology, Llc | Caching and synching process for a media sharing system |
US8880599B2 (en) | 2008-10-15 | 2014-11-04 | Eloy Technology, Llc | Collection digest for a media sharing system |
US7991883B1 (en) | 2008-12-15 | 2011-08-02 | Adobe Systems Incorporated | Server communication in a multi-tier server architecture |
US8392530B1 (en) * | 2008-12-18 | 2013-03-05 | Adobe Systems Incorporated | Media streaming in a multi-tier client-server architecture |
US9369516B2 (en) | 2009-01-13 | 2016-06-14 | Viasat, Inc. | Deltacasting |
US8200602B2 (en) | 2009-02-02 | 2012-06-12 | Napo Enterprises, Llc | System and method for creating thematic listening experiences in a networked peer media recommendation environment |
WO2010104927A2 (en) | 2009-03-10 | 2010-09-16 | Viasat, Inc. | Internet protocol broadcasting |
US8676989B2 (en) | 2009-04-23 | 2014-03-18 | Opendns, Inc. | Robust domain name resolution |
US8121993B2 (en) * | 2009-10-28 | 2012-02-21 | Oracle America, Inc. | Data sharing and recovery within a network of untrusted storage devices using data object fingerprinting |
US8516253B1 (en) * | 2010-01-18 | 2013-08-20 | Viasat, Inc. | Self-keyed protection of anticipatory content |
US20110196887A1 (en) * | 2010-02-08 | 2011-08-11 | Google Inc. | Light-Weight Network Traffic Cache |
US9049247B2 (en) | 2010-04-01 | 2015-06-02 | Cloudfare, Inc. | Internet-based proxy service for responding to server offline errors |
US9009330B2 (en) | 2010-04-01 | 2015-04-14 | Cloudflare, Inc. | Internet-based proxy service to limit internet visitor connection speed |
US8990702B2 (en) * | 2010-09-30 | 2015-03-24 | Yahoo! Inc. | System and method for controlling a networked display |
US9307003B1 (en) | 2010-04-18 | 2016-04-05 | Viasat, Inc. | Web hierarchy modeling |
US8898181B2 (en) * | 2010-06-22 | 2014-11-25 | Microsoft Corporation | Subscription for integrating external data from external system |
CN102387172A (en) * | 2010-08-30 | 2012-03-21 | 国际商业机器公司 | Method and device for providing or obtaining contents of network resources for mobile equipment |
US8494983B2 (en) * | 2010-11-16 | 2013-07-23 | Microsoft Corporation | Object-sensitive image search |
US8909697B2 (en) | 2010-11-29 | 2014-12-09 | Hughes Network Systems, Llc | Computer networking system and method with javascript execution for pre-fetching content from dynamically-generated URL and javascript injection to modify date or random number calculation |
US8874696B1 (en) * | 2010-12-17 | 2014-10-28 | Emc Corporation | Common cache service |
US8943216B2 (en) * | 2011-02-24 | 2015-01-27 | Saguna Networks Ltd. | Methods, circuits, devices, systems and associated computer executable code for caching content |
US9307025B1 (en) * | 2011-03-29 | 2016-04-05 | Riverbed Technology, Inc. | Optimized file creation in WAN-optimized storage |
US9106607B1 (en) | 2011-04-11 | 2015-08-11 | Viasat, Inc. | Browser based feedback for optimized web browsing |
US9456050B1 (en) | 2011-04-11 | 2016-09-27 | Viasat, Inc. | Browser optimization through user history analysis |
US9912718B1 (en) | 2011-04-11 | 2018-03-06 | Viasat, Inc. | Progressive prefetching |
US9037638B1 (en) | 2011-04-11 | 2015-05-19 | Viasat, Inc. | Assisted browsing using hinting functionality |
US9529417B2 (en) | 2011-04-28 | 2016-12-27 | Facebook, Inc. | Performing selected operations using low power-consuming processors on user devices |
US20120278385A1 (en) * | 2011-04-28 | 2012-11-01 | Matthew Nicholas Papakipos | Managing Connection Pools for User Devices |
US8825842B2 (en) * | 2011-04-28 | 2014-09-02 | Facebook, Inc. | Managing notifications pushed to user devices |
US8285808B1 (en) | 2011-05-20 | 2012-10-09 | Cloudflare, Inc. | Loading of web resources |
EP2536065B1 (en) | 2011-06-14 | 2019-11-27 | ViaSat, Inc. | Transport protocol for anticipatory content |
US9195773B2 (en) * | 2011-07-06 | 2015-11-24 | Microsoft Technology Licensing, Llc | Structure-based adaptive document caching |
US9015469B2 (en) * | 2011-07-28 | 2015-04-21 | Cloudflare, Inc. | Supporting secure sessions in a cloud-based proxy service |
US8886743B2 (en) | 2011-08-30 | 2014-11-11 | Open Text S.A. | System and method of browsing offline and queried content |
US9407355B1 (en) | 2011-10-25 | 2016-08-02 | Viasat Inc. | Opportunistic content delivery using delta coding |
US8959082B2 (en) | 2011-10-31 | 2015-02-17 | Elwha Llc | Context-sensitive query enrichment |
US8909667B2 (en) | 2011-11-01 | 2014-12-09 | Lemi Technology, Llc | Systems, methods, and computer readable media for generating recommendations in a media recommendation system |
US8941673B2 (en) * | 2011-11-08 | 2015-01-27 | Red Hat, Inc. | Rendering images in a remote web browser |
US9900395B2 (en) | 2012-01-27 | 2018-02-20 | Comscore, Inc. | Dynamic normalization of internet traffic |
US8954580B2 (en) | 2012-01-27 | 2015-02-10 | Compete, Inc. | Hybrid internet traffic measurement using site-centric and panel data |
US8996661B1 (en) * | 2012-02-09 | 2015-03-31 | Instart Logic, Inc. | Smart packaging for mobile applications |
US8432808B1 (en) | 2012-06-15 | 2013-04-30 | Viasat Inc. | Opportunistically delayed delivery in a satellite network |
US9953052B1 (en) * | 2012-06-19 | 2018-04-24 | Amazon Technologies, Inc. | Caching of updated network content portions |
JP6021487B2 (en) * | 2012-07-18 | 2016-11-09 | キヤノン株式会社 | Information processing system, control method, server, information processing apparatus, and computer program |
CN103825922B (en) * | 2012-11-19 | 2018-02-06 | 华为技术有限公司 | A kind of data-updating method and web server |
US8782774B1 (en) | 2013-03-07 | 2014-07-15 | Cloudflare, Inc. | Secure session capability using public-key cryptography without access to the private key |
US10313299B2 (en) * | 2013-08-26 | 2019-06-04 | Jeong Hoan Seo | Domain name system (DNS) and domain name service method based on user information |
US8966267B1 (en) | 2014-04-08 | 2015-02-24 | Cloudflare, Inc. | Secure session capability using public-key cryptography without access to the private key |
US8996873B1 (en) | 2014-04-08 | 2015-03-31 | Cloudflare, Inc. | Secure session capability using public-key cryptography without access to the private key |
US10855797B2 (en) | 2014-06-03 | 2020-12-01 | Viasat, Inc. | Server-machine-driven hint generation for improved web page loading using client-machine-driven feedback |
US10432748B2 (en) * | 2014-07-16 | 2019-10-01 | Tensera Networks Ltd. | Efficient content delivery over wireless networks using guaranteed prefetching at selected times-of-day |
US11095743B2 (en) | 2014-07-16 | 2021-08-17 | Tensera Networks Ltd. | Optimized content-delivery network (CDN) for the wireless last mile |
EP3018580A1 (en) * | 2014-11-06 | 2016-05-11 | Alcatel Lucent | Cache server and method for serving and caching web resources |
US10146752B2 (en) | 2014-12-31 | 2018-12-04 | Quantum Metric, LLC | Accurate and efficient recording of user experience, GUI changes and user interaction events on a remote web document |
WO2016130915A1 (en) * | 2015-02-13 | 2016-08-18 | Google Inc. | Transparent hardware-assisted memory decompression |
US10021209B2 (en) | 2015-04-10 | 2018-07-10 | Open Text Sa Ulc | Systems and methods for caching of managed content in a distributed environment using a multi-tiered architecture |
US10592673B2 (en) | 2015-05-03 | 2020-03-17 | Arm Limited | System, device, and method of managing trustworthiness of electronic devices |
US10318592B2 (en) * | 2015-07-16 | 2019-06-11 | Quantum Metric, LLC | Document capture using client-based delta encoding with server |
US10097867B2 (en) * | 2015-09-14 | 2018-10-09 | Disney Enterprises, Inc. | Systems and methods for providing a ratings version and a dynamic ad version of a video |
CN107924374A (en) * | 2015-10-15 | 2018-04-17 | 腾赛拉网络有限公司 | The freshness of content in communication terminal, which perceives, to be presented |
CN116610884A (en) | 2015-10-20 | 2023-08-18 | 维尔塞特公司 | Updating hint models using auto-browse clusters |
US10379969B2 (en) * | 2015-12-09 | 2019-08-13 | Business Objects Software Ltd. | Ephemeral store-based auto-save for applications with a persistence layer |
US10326854B2 (en) * | 2015-12-14 | 2019-06-18 | Huawei Technologies Co., Ltd. | Method and apparatus for data caching in a communications network |
CN105472008B (en) * | 2015-12-18 | 2019-03-15 | 福建天晴数码有限公司 | Web server buffer memory management method and system |
US11283895B2 (en) | 2017-06-19 | 2022-03-22 | Tensera Networks Ltd. | Silent updating of content in user devices |
CN107656985B (en) * | 2017-09-11 | 2020-11-27 | 北京京东尚科信息技术有限公司 | Webpage query method and system |
US10579808B2 (en) * | 2017-11-10 | 2020-03-03 | Facebook, Inc. | Systems and methods for generating previews of content protected by authentication protocols |
CN107995303A (en) * | 2017-12-12 | 2018-05-04 | 福建中金在线信息科技有限公司 | The data processing method and device of non-intrusion type website |
US11915012B2 (en) | 2018-03-05 | 2024-02-27 | Tensera Networks Ltd. | Application preloading in the presence of user actions |
US11922187B2 (en) | 2018-03-05 | 2024-03-05 | Tensera Networks Ltd. | Robust application preloading with accurate user experience |
EP4004767A4 (en) | 2019-07-30 | 2023-03-08 | Tensera Networks Ltd. | Pre-rendering of application user-interfaces in user devices |
US11429676B2 (en) * | 2019-10-18 | 2022-08-30 | International Business Machines Corporation | Document flagging based on multi-generational complemental secondary data |
US10903990B1 (en) | 2020-03-11 | 2021-01-26 | Cloudflare, Inc. | Establishing a cryptographic tunnel between a first tunnel endpoint and a second tunnel endpoint where a private key used during the tunnel establishment is remotely located from the second tunnel endpoint |
CN112231408B (en) * | 2020-10-22 | 2023-05-23 | 微医云(杭州)控股有限公司 | Data integration method and device, electronic equipment and storage medium |
US11687523B2 (en) * | 2020-11-25 | 2023-06-27 | Salesforce, Inc. | System and method for efficiently transferring data for offline use |
US11675800B2 (en) | 2020-11-30 | 2023-06-13 | Salesforce, Inc. | Version control and execution on a mobile device |
CN116670646A (en) | 2020-12-03 | 2023-08-29 | 腾赛拉网络有限公司 | Preloading applications with existing tasks |
WO2023096829A1 (en) * | 2021-11-23 | 2023-06-01 | Capital One Services, Llc | Stream listening cache updater |
US11695696B2 (en) | 2021-11-23 | 2023-07-04 | Capital One Services, Llc | Prepopulation of caches |
US11916787B2 (en) | 2021-11-23 | 2024-02-27 | Capital One Services, Llc | Stream listening cache updater |
US11765252B2 (en) | 2021-11-23 | 2023-09-19 | Capital One Services, Llc | Prepopulation of call center cache |
US11863615B2 (en) | 2022-03-18 | 2024-01-02 | T-Mobile Usa, Inc. | Content management systems providing zero recovery time objective |
Citations (199)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4953106A (en) | 1989-05-23 | 1990-08-28 | At&T Bell Laboratories | Technique for drawing directed graphs |
US5450535A (en) | 1993-09-24 | 1995-09-12 | At&T Corp. | Graphs employing clusters |
US5559984A (en) * | 1993-09-28 | 1996-09-24 | Hitachi, Ltd. | Distributed file system permitting each user to enhance cache hit ratio in file access mode |
US5727129A (en) | 1996-06-04 | 1998-03-10 | International Business Machines Corporation | Network system for profiling and actively facilitating user activities |
GB2317723A (en) | 1996-09-30 | 1998-04-01 | Viewinn Plc | Caching system for information retrieval |
US5748954A (en) | 1995-06-05 | 1998-05-05 | Carnegie Mellon University | Method for searching a queued and ranked constructed catalog of files stored on a network |
US5752241A (en) | 1995-11-14 | 1998-05-12 | Lucent Technologies Inc. | Method and apparatus for estimating transitive closure and reachability |
US5802292A (en) | 1995-04-28 | 1998-09-01 | Digital Equipment Corporation | Method for predictive prefetching of information over a communications network |
US5832494A (en) | 1993-06-14 | 1998-11-03 | Libertech, Inc. | Method and apparatus for indexing, searching and displaying data |
US5835905A (en) | 1997-04-09 | 1998-11-10 | Xerox Corporation | System for predicting documents relevant to focus documents by spreading activation through network representations of a linked collection of documents |
US5848407A (en) | 1996-05-22 | 1998-12-08 | Matsushita Electric Industrial Co., Ltd. | Hypertext document retrieving apparatus for retrieving hypertext documents relating to each other |
US5878223A (en) | 1997-05-07 | 1999-03-02 | International Business Machines Corporation | System and method for predictive caching of information pages |
US5946697A (en) | 1997-04-22 | 1999-08-31 | Microsoft Corporation | Rapid transfer of HTML files |
US5978847A (en) | 1996-12-26 | 1999-11-02 | Intel Corporation | Attribute pre-fetch of web pages |
US5978791A (en) | 1995-04-11 | 1999-11-02 | Kinetech, Inc. | Data processing system using substantially unique identifiers to identify data items, whereby identical data items have the same identifiers |
US6003030A (en) | 1995-06-07 | 1999-12-14 | Intervu, Inc. | System and method for optimized storage and retrieval of data on a distributed computer network |
US6014678A (en) | 1995-12-01 | 2000-01-11 | Matsushita Electric Industrial Co., Ltd. | Apparatus for preparing a hyper-text document of pieces of information having reference relationships with each other |
US6016512A (en) * | 1997-11-20 | 2000-01-18 | Telcordia Technologies, Inc. | Enhanced domain name service using a most frequently used domain names table and a validity code table |
US6023726A (en) | 1998-01-20 | 2000-02-08 | Netscape Communications Corporation | User configurable prefetch control system for enabling client to prefetch documents from a network server |
US6029175A (en) | 1995-10-26 | 2000-02-22 | Teknowledge Corporation | Automatic retrieval of changed files by a network software agent |
US6055569A (en) | 1998-01-27 | 2000-04-25 | Go Ahead Software Inc. | Accelerating web access by predicting user action |
US6067565A (en) | 1998-01-15 | 2000-05-23 | Microsoft Corporation | Technique for prefetching a web page of potential future interest in lieu of continuing a current information download |
US6085226A (en) | 1998-01-15 | 2000-07-04 | Microsoft Corporation | Method and apparatus for utility-directed prefetching of web pages into local cache using continual computation and user models |
US6085193A (en) | 1997-09-29 | 2000-07-04 | International Business Machines Corporation | Method and system for dynamically prefetching information via a server hierarchy |
US6088707A (en) | 1997-10-06 | 2000-07-11 | International Business Machines Corporation | Computer system and method of displaying update status of linked hypertext documents |
US6098064A (en) | 1998-05-22 | 2000-08-01 | Xerox Corporation | Prefetching and caching documents according to probability ranked need S list |
US6108703A (en) * | 1998-07-14 | 2000-08-22 | Massachusetts Institute Of Technology | Global hosting system |
US6128701A (en) | 1997-10-28 | 2000-10-03 | Cache Flow, Inc. | Adaptive and predictive cache refresh policy |
US6128644A (en) | 1998-03-04 | 2000-10-03 | Fujitsu Limited | Load distribution system for distributing load among plurality of servers on www system |
US6134551A (en) | 1995-09-15 | 2000-10-17 | Intel Corporation | Method of caching digital certificate revocation lists |
US6134583A (en) | 1996-07-01 | 2000-10-17 | Sun Microsystems, Inc. | Method, system, apparatus and article of manufacture for providing identity-based caching services to a plurality of computer systems (#16) |
US6167438A (en) | 1997-05-22 | 2000-12-26 | Trustees Of Boston University | Method and system for distributed caching, prefetching and replication |
US6170013B1 (en) | 1998-03-27 | 2001-01-02 | Nortel Networks Limited | Method and apparatus for controlling access to network information sources |
US6178461B1 (en) | 1998-12-08 | 2001-01-23 | Lucent Technologies Inc. | Cache-based compaction technique for internet browsing using similar objects in client cache as reference objects |
US6182133B1 (en) | 1998-02-06 | 2001-01-30 | Microsoft Corporation | Method and apparatus for display of information prefetching and cache status having variable visual indication based on a period of time since prefetching |
US6182122B1 (en) | 1997-03-26 | 2001-01-30 | International Business Machines Corporation | Precaching data at an intermediate server based on historical data requests by users of the intermediate server |
US6195622B1 (en) | 1998-01-15 | 2001-02-27 | Microsoft Corporation | Methods and apparatus for building attribute transition probability models for use in pre-fetching resources |
US6205481B1 (en) | 1998-03-17 | 2001-03-20 | Infolibria, Inc. | Protocol for distributing fresh content among networked cache servers |
US6230168B1 (en) | 1997-11-26 | 2001-05-08 | International Business Machines Corp. | Method for automatically constructing contexts in a hypertext collection |
WO2001055897A1 (en) | 2000-01-27 | 2001-08-02 | Link Plus, Inc. | Method and apparatus for processing web documents |
US6272534B1 (en) | 1998-03-04 | 2001-08-07 | Storage Technology Corporation | Method and system for efficiently storing web pages for quick downloading at a remote device |
US6282542B1 (en) | 1997-08-06 | 2001-08-28 | Tachyon, Inc. | Distributed system and method for prefetching objects |
US6285999B1 (en) | 1997-01-10 | 2001-09-04 | The Board Of Trustees Of The Leland Stanford Junior University | Method for node ranking in a linked database |
US20010020248A1 (en) | 1996-10-11 | 2001-09-06 | Gaurav Banga | Method for transferring and displaying data pages on a data network |
US6292880B1 (en) | 1998-04-15 | 2001-09-18 | Inktomi Corporation | Alias-free content-indexed object cache |
US20010033557A1 (en) | 2000-02-08 | 2001-10-25 | Tantivy Communications, Inc | Grade of service and fairness policy for bandwidth reservation system |
US6317777B1 (en) | 1999-04-26 | 2001-11-13 | Intel Corporation | Method for web based storage and retrieval of documents |
US20010050875A1 (en) * | 2000-02-21 | 2001-12-13 | Kahn Richard Oliver | Portable information capture devices |
US20020002618A1 (en) | 2000-04-17 | 2002-01-03 | Mark Vange | System and method for providing last-mile data prioritization |
US6338066B1 (en) | 1998-09-25 | 2002-01-08 | International Business Machines Corporation | Surfaid predictor: web-based system for predicting surfer behavior |
US20020004813A1 (en) | 2000-03-08 | 2002-01-10 | Alok Agrawal | Methods and systems for partial page caching of dynamically generated content |
US20020007413A1 (en) | 2000-03-16 | 2002-01-17 | Garcia-Luna-Aceves Jj | System and method for using a mapping between client addresses and addresses of caches to support content delivery |
US6341311B1 (en) | 1998-05-29 | 2002-01-22 | Microsoft Corporation | Directing data object access requests in a distributed cache |
US20020016786A1 (en) | 1999-05-05 | 2002-02-07 | Pitkow James B. | System and method for searching and recommending objects from a categorically organized information repository |
EP1182589A2 (en) | 2000-08-17 | 2002-02-27 | International Business Machines Corporation | Provision of electronic documents from cached portions |
US20020031102A1 (en) * | 2000-05-02 | 2002-03-14 | Globalstar L.P. | On-board DNS service for a satellite ISP system using non-geosynchronous orbit satellites |
US20020048269A1 (en) * | 2000-08-04 | 2002-04-25 | Hong Jack L. | Intelligent demand driven recognition of URL objects in connection oriented transactions |
US6405252B1 (en) | 1999-11-22 | 2002-06-11 | Speedera Networks, Inc. | Integrated point of presence server network |
US20020078371A1 (en) | 2000-08-17 | 2002-06-20 | Sun Microsystems, Inc. | User Access system using proxies for accessing a network |
US20020078087A1 (en) | 2000-12-18 | 2002-06-20 | Stone Alan E. | Content indicator for accelerated detection of a changed web page |
US20020082811A1 (en) | 2000-03-17 | 2002-06-27 | Honjas William A. | Optimization apparatus, system, and method of use and doing business |
US6421726B1 (en) | 1997-03-14 | 2002-07-16 | Akamai Technologies, Inc. | System and method for selection and retrieval of diverse types of video data on a computer network |
US20020097261A1 (en) | 1999-11-15 | 2002-07-25 | Gottfurcht Elliot A. | Apparatus and method for simple wide-area network navigation |
US20020107935A1 (en) | 2001-01-12 | 2002-08-08 | Epicrealm Inc. | Method and system for community data caching |
US6442549B1 (en) * | 1997-07-25 | 2002-08-27 | Eric Schneider | Method, product, and apparatus for processing reusable information |
US20020143984A1 (en) | 2001-03-19 | 2002-10-03 | The Aerospace Corporation | Cooperative adaptive web caching routing and forwarding web content data broadcasting method |
US20020143892A1 (en) | 2001-04-03 | 2002-10-03 | Mogul Jeffrey C. | Reduction of network retrieval latency using cache and digest |
US20020152361A1 (en) * | 2001-02-05 | 2002-10-17 | International Business Machines Corporation | Directed least recently used cache replacement method |
US20020156864A1 (en) | 2000-06-06 | 2002-10-24 | Kniest James Newton | System for wireless exchange of data with hand held devices |
US20020156980A1 (en) * | 2001-04-19 | 2002-10-24 | International Business Machines Corporation | Designing a cache with adaptive reconfiguration |
US20020161860A1 (en) | 2001-02-28 | 2002-10-31 | Benjamin Godlin | Method and system for differential distributed data file storage, management and access |
US6484143B1 (en) | 1999-11-22 | 2002-11-19 | Speedera Networks, Inc. | User device and system for traffic management and content distribution over a world wide area network |
US20020178238A1 (en) * | 2001-05-23 | 2002-11-28 | Thomas Fletcher | Caching address information in a communications system |
US20020184340A1 (en) | 2001-05-31 | 2002-12-05 | Alok Srivastava | XML aware logical caching system |
US20020188665A1 (en) | 2001-05-02 | 2002-12-12 | Lash Thomas D. | System and method for patch enabled data transmissions |
WO2002100117A2 (en) | 2001-06-04 | 2002-12-12 | Nct Group, Inc. | A system and method for reducing the time to deliver information from a communications network to a user |
US20020191610A1 (en) | 2001-06-18 | 2002-12-19 | Wonin Baek | Message transmission method and system capable of transmitting differential data |
US20020198961A1 (en) | 1999-08-27 | 2002-12-26 | Balachander Krishnamurthy | Method for improving web performance by client characterization-driven server adaptation |
US20020198883A1 (en) * | 2001-06-26 | 2002-12-26 | Itaru Nishizawa | Web system having clustered application servers and clustered databases |
US20030005152A1 (en) | 2001-03-09 | 2003-01-02 | Arif Diwan | Content-request redirection method and system |
US20030023813A1 (en) | 1998-07-31 | 2003-01-30 | Cacheflow, Inc., A Delaware Corporation | Multiple cache communication |
US6516320B1 (en) | 1999-03-08 | 2003-02-04 | Pliant Technologies, Inc. | Tiered hashing for data access |
US6526479B2 (en) * | 1997-08-21 | 2003-02-25 | Intel Corporation | Method of caching web resources |
US20030046343A1 (en) | 1999-08-27 | 2003-03-06 | Balachander Krishnamurthy | Method for improving web performance by adapting servers based on client cluster characterization |
US6532520B1 (en) | 1999-09-10 | 2003-03-11 | International Business Machines Corporation | Method and apparatus for allocating data and instructions within a shared cache |
US6542964B1 (en) | 1999-06-02 | 2003-04-01 | Blue Coat Systems | Cost-based optimization for content distribution using dynamic protocol selection and query resolution for cache server |
US20030065743A1 (en) | 2001-09-28 | 2003-04-03 | Jenny Patrick Duncan | Method and system for distributing requests for content |
US6553411B1 (en) | 1999-05-18 | 2003-04-22 | International Business Machines Corporation | System and method for cache acceleration |
US20030079027A1 (en) | 2001-10-18 | 2003-04-24 | Michael Slocombe | Content request routing and load balancing for content distribution networks |
US20030084159A1 (en) | 1998-12-22 | 2003-05-01 | At&T Corp. | Pseudo proxy server providing instant overflow capacity to computer networks |
US20030086098A1 (en) | 2001-11-05 | 2003-05-08 | Robert Sesek | Printer-based pre-ripping and caching of network documents |
US20030101234A1 (en) | 2001-11-28 | 2003-05-29 | International Business Machines Corporation | System and method for indicating whether a document is cached |
US6578113B2 (en) | 1997-06-02 | 2003-06-10 | At&T Corp. | Method for cache validation for proxy caches |
US6581090B1 (en) | 1996-10-14 | 2003-06-17 | Mirror Image Internet, Inc. | Internet communication system |
US6584498B2 (en) | 1996-09-13 | 2003-06-24 | Planet Web, Inc. | Dynamic preloading of web pages |
US20030158913A1 (en) * | 2002-02-15 | 2003-08-21 | Agnoli Giovanni M. | System, method, and computer program product for media publishing request processing |
US6611908B2 (en) * | 1991-07-08 | 2003-08-26 | Seiko Epson Corporation | Microprocessor architecture capable of supporting multiple heterogeneous processors |
US20030161611A1 (en) * | 1998-02-13 | 2003-08-28 | Fujitsu Limited | Broadcast video image recording apparatus |
US20030167257A1 (en) | 2002-01-18 | 2003-09-04 | De Bonet Jeremy S. | Multi-tiered caching mechanism for the storage and retrieval of content multiple versions |
US20030172075A1 (en) | 2000-08-30 | 2003-09-11 | Richard Reisman | Task/domain segmentation in applying feedback to command control |
US20030172183A1 (en) * | 2002-02-25 | 2003-09-11 | Broadcom Corporation | System, method and computer program product for caching domain name system information on a network gateway |
US6625643B1 (en) | 1998-11-13 | 2003-09-23 | Akamai Technologies, Inc. | System and method for resource management on a data network |
US6631451B2 (en) | 1999-12-22 | 2003-10-07 | Xerox Corporation | System and method for caching |
US6638314B1 (en) | 1998-06-26 | 2003-10-28 | Microsoft Corporation | Method of web crawling utilizing crawl numbers |
US6647421B1 (en) | 1996-06-03 | 2003-11-11 | Webtv Networks, Inc. | Method and apparatus for dispatching document requests in a proxy |
US20030212779A1 (en) | 2002-04-30 | 2003-11-13 | Boyter Brian A. | System and Method for Network Security Scanning |
US20030217173A1 (en) | 2002-05-15 | 2003-11-20 | Butt Alan B. | Automatic proxy detection |
US6665726B1 (en) | 2000-01-06 | 2003-12-16 | Akamai Technologies, Inc. | Method and system for fault tolerant media streaming over the internet |
US20040032434A1 (en) * | 2002-08-13 | 2004-02-19 | Maria Pinsky | Screen controller and method therefor |
US20040039798A1 (en) * | 1999-03-03 | 2004-02-26 | Ultradns, Inc. | Domain name resolution system and method |
US6701316B1 (en) * | 2000-04-07 | 2004-03-02 | Nec Corporation | Method and apparatus for intelligent network bandwidth and system resource utilization for web content fetch and refresh |
US6701329B1 (en) * | 2000-09-14 | 2004-03-02 | Microsoft Corporation | Aging and scavenging of DNS resource records |
US20040049598A1 (en) | 2000-02-24 | 2004-03-11 | Dennis Tucker | Content distribution system |
US20040064577A1 (en) | 2002-07-25 | 2004-04-01 | Dahlin Michael D. | Method and system for background replication of data objects |
US20040073707A1 (en) * | 2001-05-23 | 2004-04-15 | Hughes Electronics Corporation | Generating a list of network addresses for pre-loading a network address cache via multicast |
US6725214B2 (en) * | 2000-01-14 | 2004-04-20 | Dotnsf | Apparatus and method to support management of uniform resource locators and/or contents of database servers |
US20040078453A1 (en) | 2002-10-17 | 2004-04-22 | International Business Machines Corporation | Method, apparatus, and computer program product to determine the progress of Web page downloads |
US20040078487A1 (en) * | 2002-10-17 | 2004-04-22 | International Business Machines Corporation | Network address cache apparatus and method |
US6742033B1 (en) | 2000-06-12 | 2004-05-25 | Gateway, Inc. | System, method and computer program product that pre-caches content to provide timely information to a user |
US6744452B1 (en) | 2000-05-04 | 2004-06-01 | International Business Machines Corporation | Indicator to show that a cached web page is being displayed |
US20040107296A1 (en) | 2002-12-02 | 2004-06-03 | International Business Machines Corporation | System and method for accessing content of a web page |
US6757733B2 (en) | 1998-08-26 | 2004-06-29 | Sun Microsystems, Inc. | Apparatus and method for improving performance of proxy server arrays that use persistent connections |
US20040139282A1 (en) * | 2002-11-05 | 2004-07-15 | Shiro Yoshioka | Apparatus and method for memory management |
US6766352B1 (en) | 2000-05-04 | 2004-07-20 | International Business Machines Corporation | Indicator to show that a cached file is being displayed on a client system |
US6766313B1 (en) | 2000-07-12 | 2004-07-20 | Microsoft Corporation | System and method for caching and retrieving information |
US6766422B2 (en) | 2001-09-27 | 2004-07-20 | Siemens Information And Communication Networks, Inc. | Method and system for web caching based on predictive usage |
US6772225B1 (en) | 1999-09-30 | 2004-08-03 | International Business Machines Corporation | Policy enabled web caching |
US6782393B1 (en) | 2000-05-31 | 2004-08-24 | Ricoh Co., Ltd. | Method and system for electronic message composition with relevant documents |
US20040205165A1 (en) * | 2003-01-21 | 2004-10-14 | Eplication Networks Ltd. | Method for improving quality of service from an Internet server employing heuristic optimization of downloading |
US20040205149A1 (en) | 2002-09-11 | 2004-10-14 | Hughes Electronics | System and method for pre-fetching content in a proxy architecture |
US20040215665A1 (en) * | 2002-01-09 | 2004-10-28 | Edgar David A. | System, method, and computer program product for providing accelerated and secure wireless data transmission over the internet |
US6813690B1 (en) | 2001-06-12 | 2004-11-02 | Network Appliance, Inc. | Caching media data using content-sensitive identifiers |
US20040225644A1 (en) | 2003-05-09 | 2004-11-11 | International Business Machines Corporation | Method and apparatus for search engine World Wide Web crawling |
US20040230747A1 (en) | 2000-07-06 | 2004-11-18 | Ims Steven D. | Object caching and update queuing technique to improve performance and resource utilization |
US20040237044A1 (en) | 2003-02-21 | 2004-11-25 | Motionpoint Corporation | Synchronization of web site content between languages |
US20040239681A1 (en) | 2000-08-07 | 2004-12-02 | Zframe, Inc. | Visual content browsing using rasterized representations |
US20040250119A1 (en) * | 2003-04-30 | 2004-12-09 | Art Shelest | Authenticated domain name resolution |
US20040249971A1 (en) * | 2003-02-10 | 2004-12-09 | Eric Klinker | Methods and systems for providing dynamic domain name system for inbound route control |
US20040260466A1 (en) * | 2003-04-09 | 2004-12-23 | Pioneer Corporation | Navigation apparatus, navigation method, route data creation program, and server in navigation system |
US20040262051A1 (en) | 2003-06-26 | 2004-12-30 | International Business Machines Corporation | Program product, system and method for creating and selecting active regions on physical documents |
WO2005006129A2 (en) | 2003-07-02 | 2005-01-20 | Amazon.Com, Inc. | Server architecture and methods for persistently storing and serving event data |
US6853391B2 (en) | 1997-08-15 | 2005-02-08 | International Business Machines Corporation | Multi-node user interface component and method thereof for use in performing a common operation on linked records |
US20050038787A1 (en) | 2003-08-16 | 2005-02-17 | International Business Machines Corporation | Document authentication |
US6883135B1 (en) | 2000-01-28 | 2005-04-19 | Microsoft Corporation | Proxy server using a statistical model |
US20050138604A1 (en) | 2003-12-19 | 2005-06-23 | Peter Harrison | Browser configuration |
US20050165829A1 (en) | 2003-11-04 | 2005-07-28 | Jeffrey Varasano | Systems, Methods and Computer Program Products for Developing Enterprise Software Applications |
US20050198224A1 (en) | 2004-03-02 | 2005-09-08 | Emiko Kobayashi | Storage network system and control method thereof |
US20050198327A1 (en) * | 2004-03-02 | 2005-09-08 | Takashige Iwamura | Computer system capable of fast failover upon failure |
US20050198386A1 (en) * | 2004-02-19 | 2005-09-08 | International Business Machines Corporation | User defined preferred DNS reference |
US20050204064A1 (en) * | 2005-06-23 | 2005-09-15 | The Go Daddy Group, Inc. | Resolving access to content associated with shared domain name using routing dns |
US20050246347A1 (en) | 2000-07-25 | 2005-11-03 | Nec Corporation | Technique for enhancing effectiveness of cache server |
US6973457B1 (en) | 2002-05-10 | 2005-12-06 | Oracle International Corporation | Method and system for scrollable cursors |
US20050278417A1 (en) | 2002-12-21 | 2005-12-15 | International Business Machines Corporation | Client access to web services |
US20050278222A1 (en) | 2004-05-24 | 2005-12-15 | Nortrup Edward H | Systems and methods for performing transactions |
US7003566B2 (en) | 2001-06-29 | 2006-02-21 | International Business Machines Corporation | Method and system for predictive directional data caching |
US20060047804A1 (en) | 2004-06-30 | 2006-03-02 | Fredricksen Eric R | Accelerating user interfaces by predicting user actions |
US20060085601A1 (en) * | 2004-10-19 | 2006-04-20 | Woffinden Gary A | Queue or stack based cache entry reclaim method |
US7035921B1 (en) | 2000-11-14 | 2006-04-25 | Hewlett-Packard Development Company, L.P. | Method of and apparatus for providing web service using a network of servers |
US20060089978A1 (en) | 2002-05-31 | 2006-04-27 | Microsoft Corporation | Systems and methods for shared browsing among a plurality of online co-users |
US7051111B1 (en) | 2000-04-25 | 2006-05-23 | Digeo, Inc. | Multiple source proxy management system |
US20060143568A1 (en) | 2004-11-10 | 2006-06-29 | Scott Milener | Method and apparatus for enhanced browsing |
US20060156387A1 (en) | 2005-01-10 | 2006-07-13 | Google Inc. | Methods and systems for opportunistic cookie caching |
US20060167862A1 (en) | 2000-05-23 | 2006-07-27 | Richard Reisman | Method and apparatus for utilizing user feedback to improve signifier mapping |
US20060168348A1 (en) | 2000-07-13 | 2006-07-27 | Oracle International Corporation | Delta caching |
US20060179123A1 (en) | 1997-07-25 | 2006-08-10 | Merrill Lynch & Co. Inc | Techniques for providing faster access to frequently updated information |
US7100123B1 (en) | 2002-01-25 | 2006-08-29 | Microsoft Corporation | Electronic content search and delivery based on cursor location |
US7130890B1 (en) | 2002-09-04 | 2006-10-31 | Hewlett-Packard Development Company, L.P. | Method and system for adaptively prefetching objects from a network |
US20060253612A1 (en) * | 2005-04-04 | 2006-11-09 | Cheshire Stuart D | Method and apparatus for detecting incorrect responses to network queries |
US20060271642A1 (en) | 2005-05-26 | 2006-11-30 | Nicholas Stavrakos | Method for multipart encoding |
US20060271599A1 (en) * | 2003-08-21 | 2006-11-30 | Akihiro Yamamoto | Data transmission/reception system, data transmission/reception method, and recording/reproduction device |
US20060294311A1 (en) | 2005-06-24 | 2006-12-28 | Yahoo! Inc. | Dynamic bloom filter for caching query results |
US20060294223A1 (en) | 2005-06-24 | 2006-12-28 | Microsoft Corporation | Pre-fetching and DNS resolution of hyperlinked content |
US20070022102A1 (en) * | 2000-12-06 | 2007-01-25 | Epicrealm Inc. | Method and System for Adaptive Prefetching |
US7185001B1 (en) | 2000-10-04 | 2007-02-27 | Torch Concepts | Systems and methods for document searching and organizing |
US7249053B2 (en) | 2003-06-16 | 2007-07-24 | Claria Corporation | Presentation of messages to end-users in a computer network |
US20070174774A1 (en) | 2005-04-20 | 2007-07-26 | Videoegg, Inc. | Browser editing with timeline representations |
US20070189708A1 (en) | 2005-04-20 | 2007-08-16 | Videoegg. Inc | Browser based multi-clip video editing |
US20070214052A1 (en) | 2006-03-03 | 2007-09-13 | Kao Chiuan-Liang | Consumer Driven Telecommunication Integrated System for Hospitality Application |
US20070250841A1 (en) | 2001-03-30 | 2007-10-25 | British Telecommunications Public Limited Company | Multi-modal interface |
US20070294480A1 (en) * | 2006-06-15 | 2007-12-20 | Martin Moser | Cache With Time-Based Purging and Computation of Purged Items |
US20080010365A1 (en) * | 1997-07-25 | 2008-01-10 | Eric Schneider | Methods, products, systems, and devices for processing reusable information |
US7343397B2 (en) * | 2002-03-29 | 2008-03-11 | Lucent Technologies Inc. | Method and apparatus for performing predictive caching of DNS requests by correlating IP addresses |
US20080140626A1 (en) | 2004-04-15 | 2008-06-12 | Jeffery Wilson | Method for enabling dynamic websites to be indexed within search engines |
US7398271B1 (en) | 2001-04-16 | 2008-07-08 | Yahoo! Inc. | Using network traffic logs for search enhancement |
US20080195819A1 (en) | 2003-08-06 | 2008-08-14 | Charles E Dumont | System and program product for validating remotely cached dynamic content web pages |
US7415536B2 (en) * | 2003-01-21 | 2008-08-19 | Canon Kabushiki Kaisha | Address query response method, program, and apparatus, and address notification method, program, and apparatus |
US20080222363A1 (en) * | 2004-06-30 | 2008-09-11 | Prakash Khemani | Systems and methods of maintaining freshness of a cached object based on demand and expiration time |
US7426576B1 (en) * | 2002-09-20 | 2008-09-16 | Network Appliance, Inc. | Highly available DNS resolver and method for use of the same |
US20080229017A1 (en) * | 2007-03-12 | 2008-09-18 | Robert Plamondon | Systems and Methods of Providing Security and Reliability to Proxy Caches |
US7437409B2 (en) | 2003-06-13 | 2008-10-14 | Microsoft Corporation | Limiting interaction between parties in a networked session |
US7437725B1 (en) * | 1999-01-04 | 2008-10-14 | General Electric Company | Processing techniques for servers handling client/server traffic and communications |
US7437364B1 (en) | 2004-06-30 | 2008-10-14 | Google Inc. | System and method of accessing a document efficiently through multi-tier web caching |
US20090049388A1 (en) | 2005-06-02 | 2009-02-19 | Ronnie Bernard Francis Taib | Multimodal computer navigation |
US7523181B2 (en) * | 1999-11-22 | 2009-04-21 | Akamai Technologies, Inc. | Method for determining metrics of a content delivery and global traffic management network |
US7627628B2 (en) * | 2000-11-01 | 2009-12-01 | Snapnames.Com, Inc. | Demand based domain name auctionability |
US7676576B1 (en) * | 2002-08-01 | 2010-03-09 | Foundry Networks, Inc. | Method and system to clear counters used for statistical tracking for global server load balancing |
US7725602B2 (en) * | 2000-07-19 | 2010-05-25 | Akamai Technologies, Inc. | Domain name resolution using a distributed DNS network |
US7761594B1 (en) | 2001-10-15 | 2010-07-20 | Netapp, Inc. | Method and apparatus for forwarding requests in a cache hierarchy based on user-defined forwarding rules |
US7836044B2 (en) | 2004-06-22 | 2010-11-16 | Google Inc. | Anticipated query generation and processing in a search engine |
Family Cites Families (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6010932A (en) * | 1996-12-05 | 2000-01-04 | Micron Technology, Inc. | Fork-like memory structure for ULSI DRAM and method of fabrication |
EP1322932A1 (en) * | 2000-09-21 | 2003-07-02 | Mts Systems Corporation | Multiple region convolver with tapering |
-
2004
- 2004-06-30 US US10/882,795 patent/US7437364B1/en active Active
-
2008
- 2008-10-14 US US12/251,413 patent/US8275790B2/en active Active
-
2012
- 2012-06-28 US US13/536,701 patent/US8788475B2/en active Active
Patent Citations (219)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4953106A (en) | 1989-05-23 | 1990-08-28 | At&T Bell Laboratories | Technique for drawing directed graphs |
US6611908B2 (en) * | 1991-07-08 | 2003-08-26 | Seiko Epson Corporation | Microprocessor architecture capable of supporting multiple heterogeneous processors |
US5832494A (en) | 1993-06-14 | 1998-11-03 | Libertech, Inc. | Method and apparatus for indexing, searching and displaying data |
US5450535A (en) | 1993-09-24 | 1995-09-12 | At&T Corp. | Graphs employing clusters |
US5559984A (en) * | 1993-09-28 | 1996-09-24 | Hitachi, Ltd. | Distributed file system permitting each user to enhance cache hit ratio in file access mode |
US5978791A (en) | 1995-04-11 | 1999-11-02 | Kinetech, Inc. | Data processing system using substantially unique identifiers to identify data items, whereby identical data items have the same identifiers |
US5802292A (en) | 1995-04-28 | 1998-09-01 | Digital Equipment Corporation | Method for predictive prefetching of information over a communications network |
US5748954A (en) | 1995-06-05 | 1998-05-05 | Carnegie Mellon University | Method for searching a queued and ranked constructed catalog of files stored on a network |
US6502125B1 (en) | 1995-06-07 | 2002-12-31 | Akamai Technologies, Inc. | System and method for optimized storage and retrieval of data on a distributed computer network |
US6003030A (en) | 1995-06-07 | 1999-12-14 | Intervu, Inc. | System and method for optimized storage and retrieval of data on a distributed computer network |
US6134551A (en) | 1995-09-15 | 2000-10-17 | Intel Corporation | Method of caching digital certificate revocation lists |
US6029175A (en) | 1995-10-26 | 2000-02-22 | Teknowledge Corporation | Automatic retrieval of changed files by a network software agent |
US5752241A (en) | 1995-11-14 | 1998-05-12 | Lucent Technologies Inc. | Method and apparatus for estimating transitive closure and reachability |
US6014678A (en) | 1995-12-01 | 2000-01-11 | Matsushita Electric Industrial Co., Ltd. | Apparatus for preparing a hyper-text document of pieces of information having reference relationships with each other |
US5848407A (en) | 1996-05-22 | 1998-12-08 | Matsushita Electric Industrial Co., Ltd. | Hypertext document retrieving apparatus for retrieving hypertext documents relating to each other |
US6647421B1 (en) | 1996-06-03 | 2003-11-11 | Webtv Networks, Inc. | Method and apparatus for dispatching document requests in a proxy |
US5727129A (en) | 1996-06-04 | 1998-03-10 | International Business Machines Corporation | Network system for profiling and actively facilitating user activities |
US6134583A (en) | 1996-07-01 | 2000-10-17 | Sun Microsystems, Inc. | Method, system, apparatus and article of manufacture for providing identity-based caching services to a plurality of computer systems (#16) |
US6584498B2 (en) | 1996-09-13 | 2003-06-24 | Planet Web, Inc. | Dynamic preloading of web pages |
GB2317723A (en) | 1996-09-30 | 1998-04-01 | Viewinn Plc | Caching system for information retrieval |
US20010020248A1 (en) | 1996-10-11 | 2001-09-06 | Gaurav Banga | Method for transferring and displaying data pages on a data network |
US6581090B1 (en) | 1996-10-14 | 2003-06-17 | Mirror Image Internet, Inc. | Internet communication system |
US5978847A (en) | 1996-12-26 | 1999-11-02 | Intel Corporation | Attribute pre-fetch of web pages |
US6285999B1 (en) | 1997-01-10 | 2001-09-04 | The Board Of Trustees Of The Leland Stanford Junior University | Method for node ranking in a linked database |
US6421726B1 (en) | 1997-03-14 | 2002-07-16 | Akamai Technologies, Inc. | System and method for selection and retrieval of diverse types of video data on a computer network |
US6182122B1 (en) | 1997-03-26 | 2001-01-30 | International Business Machines Corporation | Precaching data at an intermediate server based on historical data requests by users of the intermediate server |
US5835905A (en) | 1997-04-09 | 1998-11-10 | Xerox Corporation | System for predicting documents relevant to focus documents by spreading activation through network representations of a linked collection of documents |
US5946697A (en) | 1997-04-22 | 1999-08-31 | Microsoft Corporation | Rapid transfer of HTML files |
US5878223A (en) | 1997-05-07 | 1999-03-02 | International Business Machines Corporation | System and method for predictive caching of information pages |
US6167438A (en) | 1997-05-22 | 2000-12-26 | Trustees Of Boston University | Method and system for distributed caching, prefetching and replication |
US6578113B2 (en) | 1997-06-02 | 2003-06-10 | At&T Corp. | Method for cache validation for proxy caches |
US20060179123A1 (en) | 1997-07-25 | 2006-08-10 | Merrill Lynch & Co. Inc | Techniques for providing faster access to frequently updated information |
US20080010365A1 (en) * | 1997-07-25 | 2008-01-10 | Eric Schneider | Methods, products, systems, and devices for processing reusable information |
US6442549B1 (en) * | 1997-07-25 | 2002-08-27 | Eric Schneider | Method, product, and apparatus for processing reusable information |
US6282542B1 (en) | 1997-08-06 | 2001-08-28 | Tachyon, Inc. | Distributed system and method for prefetching objects |
US6853391B2 (en) | 1997-08-15 | 2005-02-08 | International Business Machines Corporation | Multi-node user interface component and method thereof for use in performing a common operation on linked records |
US6526479B2 (en) * | 1997-08-21 | 2003-02-25 | Intel Corporation | Method of caching web resources |
US6085193A (en) | 1997-09-29 | 2000-07-04 | International Business Machines Corporation | Method and system for dynamically prefetching information via a server hierarchy |
US6088707A (en) | 1997-10-06 | 2000-07-11 | International Business Machines Corporation | Computer system and method of displaying update status of linked hypertext documents |
US6128701A (en) | 1997-10-28 | 2000-10-03 | Cache Flow, Inc. | Adaptive and predictive cache refresh policy |
US6016512A (en) * | 1997-11-20 | 2000-01-18 | Telcordia Technologies, Inc. | Enhanced domain name service using a most frequently used domain names table and a validity code table |
US6230168B1 (en) | 1997-11-26 | 2001-05-08 | International Business Machines Corp. | Method for automatically constructing contexts in a hypertext collection |
US6195622B1 (en) | 1998-01-15 | 2001-02-27 | Microsoft Corporation | Methods and apparatus for building attribute transition probability models for use in pre-fetching resources |
US6085226A (en) | 1998-01-15 | 2000-07-04 | Microsoft Corporation | Method and apparatus for utility-directed prefetching of web pages into local cache using continual computation and user models |
US6067565A (en) | 1998-01-15 | 2000-05-23 | Microsoft Corporation | Technique for prefetching a web page of potential future interest in lieu of continuing a current information download |
US6023726A (en) | 1998-01-20 | 2000-02-08 | Netscape Communications Corporation | User configurable prefetch control system for enabling client to prefetch documents from a network server |
US6055569A (en) | 1998-01-27 | 2000-04-25 | Go Ahead Software Inc. | Accelerating web access by predicting user action |
US6182133B1 (en) | 1998-02-06 | 2001-01-30 | Microsoft Corporation | Method and apparatus for display of information prefetching and cache status having variable visual indication based on a period of time since prefetching |
US20030161611A1 (en) * | 1998-02-13 | 2003-08-28 | Fujitsu Limited | Broadcast video image recording apparatus |
US7095949B2 (en) * | 1998-02-13 | 2006-08-22 | Fujitsu Limited | Broadcast video image recording apparatus |
US6128644A (en) | 1998-03-04 | 2000-10-03 | Fujitsu Limited | Load distribution system for distributing load among plurality of servers on www system |
US6272534B1 (en) | 1998-03-04 | 2001-08-07 | Storage Technology Corporation | Method and system for efficiently storing web pages for quick downloading at a remote device |
US6205481B1 (en) | 1998-03-17 | 2001-03-20 | Infolibria, Inc. | Protocol for distributing fresh content among networked cache servers |
US6170013B1 (en) | 1998-03-27 | 2001-01-02 | Nortel Networks Limited | Method and apparatus for controlling access to network information sources |
US6292880B1 (en) | 1998-04-15 | 2001-09-18 | Inktomi Corporation | Alias-free content-indexed object cache |
US6098064A (en) | 1998-05-22 | 2000-08-01 | Xerox Corporation | Prefetching and caching documents according to probability ranked need S list |
US6341311B1 (en) | 1998-05-29 | 2002-01-22 | Microsoft Corporation | Directing data object access requests in a distributed cache |
US6638314B1 (en) | 1998-06-26 | 2003-10-28 | Microsoft Corporation | Method of web crawling utilizing crawl numbers |
US6108703A (en) * | 1998-07-14 | 2000-08-22 | Massachusetts Institute Of Technology | Global hosting system |
US20030023813A1 (en) | 1998-07-31 | 2003-01-30 | Cacheflow, Inc., A Delaware Corporation | Multiple cache communication |
US6757733B2 (en) | 1998-08-26 | 2004-06-29 | Sun Microsystems, Inc. | Apparatus and method for improving performance of proxy server arrays that use persistent connections |
US6338066B1 (en) | 1998-09-25 | 2002-01-08 | International Business Machines Corporation | Surfaid predictor: web-based system for predicting surfer behavior |
US6625643B1 (en) | 1998-11-13 | 2003-09-23 | Akamai Technologies, Inc. | System and method for resource management on a data network |
US6178461B1 (en) | 1998-12-08 | 2001-01-23 | Lucent Technologies Inc. | Cache-based compaction technique for internet browsing using similar objects in client cache as reference objects |
US20030084159A1 (en) | 1998-12-22 | 2003-05-01 | At&T Corp. | Pseudo proxy server providing instant overflow capacity to computer networks |
US7437725B1 (en) * | 1999-01-04 | 2008-10-14 | General Electric Company | Processing techniques for servers handling client/server traffic and communications |
US20040039798A1 (en) * | 1999-03-03 | 2004-02-26 | Ultradns, Inc. | Domain name resolution system and method |
US6516320B1 (en) | 1999-03-08 | 2003-02-04 | Pliant Technologies, Inc. | Tiered hashing for data access |
US6317777B1 (en) | 1999-04-26 | 2001-11-13 | Intel Corporation | Method for web based storage and retrieval of documents |
US20020016786A1 (en) | 1999-05-05 | 2002-02-07 | Pitkow James B. | System and method for searching and recommending objects from a categorically organized information repository |
US6493702B1 (en) | 1999-05-05 | 2002-12-10 | Xerox Corporation | System and method for searching and recommending documents in a collection using share bookmarks |
US6553411B1 (en) | 1999-05-18 | 2003-04-22 | International Business Machines Corporation | System and method for cache acceleration |
US6542964B1 (en) | 1999-06-02 | 2003-04-01 | Blue Coat Systems | Cost-based optimization for content distribution using dynamic protocol selection and query resolution for cache server |
US20030046343A1 (en) | 1999-08-27 | 2003-03-06 | Balachander Krishnamurthy | Method for improving web performance by adapting servers based on client cluster characterization |
US20020198961A1 (en) | 1999-08-27 | 2002-12-26 | Balachander Krishnamurthy | Method for improving web performance by client characterization-driven server adaptation |
US6532520B1 (en) | 1999-09-10 | 2003-03-11 | International Business Machines Corporation | Method and apparatus for allocating data and instructions within a shared cache |
US6772225B1 (en) | 1999-09-30 | 2004-08-03 | International Business Machines Corporation | Policy enabled web caching |
US20020097261A1 (en) | 1999-11-15 | 2002-07-25 | Gottfurcht Elliot A. | Apparatus and method for simple wide-area network navigation |
US6484143B1 (en) | 1999-11-22 | 2002-11-19 | Speedera Networks, Inc. | User device and system for traffic management and content distribution over a world wide area network |
US6405252B1 (en) | 1999-11-22 | 2002-06-11 | Speedera Networks, Inc. | Integrated point of presence server network |
US7523181B2 (en) * | 1999-11-22 | 2009-04-21 | Akamai Technologies, Inc. | Method for determining metrics of a content delivery and global traffic management network |
US6631451B2 (en) | 1999-12-22 | 2003-10-07 | Xerox Corporation | System and method for caching |
US6665726B1 (en) | 2000-01-06 | 2003-12-16 | Akamai Technologies, Inc. | Method and system for fault tolerant media streaming over the internet |
US6725214B2 (en) * | 2000-01-14 | 2004-04-20 | Dotnsf | Apparatus and method to support management of uniform resource locators and/or contents of database servers |
WO2001055897A1 (en) | 2000-01-27 | 2001-08-02 | Link Plus, Inc. | Method and apparatus for processing web documents |
US7328401B2 (en) | 2000-01-28 | 2008-02-05 | Microsoft Corporation | Adaptive web crawling using a statistical model |
US6883135B1 (en) | 2000-01-28 | 2005-04-19 | Microsoft Corporation | Proxy server using a statistical model |
US20050165778A1 (en) | 2000-01-28 | 2005-07-28 | Microsoft Corporation | Adaptive Web crawling using a statistical model |
US20010033557A1 (en) | 2000-02-08 | 2001-10-25 | Tantivy Communications, Inc | Grade of service and fairness policy for bandwidth reservation system |
US20010050875A1 (en) * | 2000-02-21 | 2001-12-13 | Kahn Richard Oliver | Portable information capture devices |
US20040049598A1 (en) | 2000-02-24 | 2004-03-11 | Dennis Tucker | Content distribution system |
US20020004813A1 (en) | 2000-03-08 | 2002-01-10 | Alok Agrawal | Methods and systems for partial page caching of dynamically generated content |
US20020007413A1 (en) | 2000-03-16 | 2002-01-17 | Garcia-Luna-Aceves Jj | System and method for using a mapping between client addresses and addresses of caches to support content delivery |
US20020082811A1 (en) | 2000-03-17 | 2002-06-27 | Honjas William A. | Optimization apparatus, system, and method of use and doing business |
US6701316B1 (en) * | 2000-04-07 | 2004-03-02 | Nec Corporation | Method and apparatus for intelligent network bandwidth and system resource utilization for web content fetch and refresh |
US20020023159A1 (en) | 2000-04-17 | 2002-02-21 | Mark Vange | HTTP redirector |
US20020002618A1 (en) | 2000-04-17 | 2002-01-03 | Mark Vange | System and method for providing last-mile data prioritization |
US20020007404A1 (en) * | 2000-04-17 | 2002-01-17 | Mark Vange | System and method for network caching |
US7051111B1 (en) | 2000-04-25 | 2006-05-23 | Digeo, Inc. | Multiple source proxy management system |
US20020031102A1 (en) * | 2000-05-02 | 2002-03-14 | Globalstar L.P. | On-board DNS service for a satellite ISP system using non-geosynchronous orbit satellites |
US6766352B1 (en) | 2000-05-04 | 2004-07-20 | International Business Machines Corporation | Indicator to show that a cached file is being displayed on a client system |
US6744452B1 (en) | 2000-05-04 | 2004-06-01 | International Business Machines Corporation | Indicator to show that a cached web page is being displayed |
US20060167862A1 (en) | 2000-05-23 | 2006-07-27 | Richard Reisman | Method and apparatus for utilizing user feedback to improve signifier mapping |
US20090119286A1 (en) | 2000-05-23 | 2009-05-07 | Richard Reisman | Method and Apparatus for Utilizing User Feedback to Improve Signifier Mapping |
US7461155B2 (en) | 2000-05-23 | 2008-12-02 | Richard Reisman | Method and apparatus for utilizing the social usage learned from multi-user feedback to improve resource identity signifier mapping |
US6782393B1 (en) | 2000-05-31 | 2004-08-24 | Ricoh Co., Ltd. | Method and system for electronic message composition with relevant documents |
US20020156864A1 (en) | 2000-06-06 | 2002-10-24 | Kniest James Newton | System for wireless exchange of data with hand held devices |
US6742033B1 (en) | 2000-06-12 | 2004-05-25 | Gateway, Inc. | System, method and computer program product that pre-caches content to provide timely information to a user |
US20040230747A1 (en) | 2000-07-06 | 2004-11-18 | Ims Steven D. | Object caching and update queuing technique to improve performance and resource utilization |
US6766313B1 (en) | 2000-07-12 | 2004-07-20 | Microsoft Corporation | System and method for caching and retrieving information |
US20060168348A1 (en) | 2000-07-13 | 2006-07-27 | Oracle International Corporation | Delta caching |
US7725602B2 (en) * | 2000-07-19 | 2010-05-25 | Akamai Technologies, Inc. | Domain name resolution using a distributed DNS network |
US20050246347A1 (en) | 2000-07-25 | 2005-11-03 | Nec Corporation | Technique for enhancing effectiveness of cache server |
US20020048269A1 (en) * | 2000-08-04 | 2002-04-25 | Hong Jack L. | Intelligent demand driven recognition of URL objects in connection oriented transactions |
US7228350B2 (en) * | 2000-08-04 | 2007-06-05 | Avaya Technology Corp. | Intelligent demand driven recognition of URL objects in connection oriented transactions |
US20040239681A1 (en) | 2000-08-07 | 2004-12-02 | Zframe, Inc. | Visual content browsing using rasterized representations |
EP1182589A2 (en) | 2000-08-17 | 2002-02-27 | International Business Machines Corporation | Provision of electronic documents from cached portions |
US20020078371A1 (en) | 2000-08-17 | 2002-06-20 | Sun Microsystems, Inc. | User Access system using proxies for accessing a network |
US20030172075A1 (en) | 2000-08-30 | 2003-09-11 | Richard Reisman | Task/domain segmentation in applying feedback to command control |
US6701329B1 (en) * | 2000-09-14 | 2004-03-02 | Microsoft Corporation | Aging and scavenging of DNS resource records |
US7185001B1 (en) | 2000-10-04 | 2007-02-27 | Torch Concepts | Systems and methods for document searching and organizing |
US7627628B2 (en) * | 2000-11-01 | 2009-12-01 | Snapnames.Com, Inc. | Demand based domain name auctionability |
US7035921B1 (en) | 2000-11-14 | 2006-04-25 | Hewlett-Packard Development Company, L.P. | Method of and apparatus for providing web service using a network of servers |
US20070022102A1 (en) * | 2000-12-06 | 2007-01-25 | Epicrealm Inc. | Method and System for Adaptive Prefetching |
US20020078087A1 (en) | 2000-12-18 | 2002-06-20 | Stone Alan E. | Content indicator for accelerated detection of a changed web page |
US20020107935A1 (en) | 2001-01-12 | 2002-08-08 | Epicrealm Inc. | Method and system for community data caching |
US20020152361A1 (en) * | 2001-02-05 | 2002-10-17 | International Business Machines Corporation | Directed least recently used cache replacement method |
US20020161860A1 (en) | 2001-02-28 | 2002-10-31 | Benjamin Godlin | Method and system for differential distributed data file storage, management and access |
US20030005152A1 (en) | 2001-03-09 | 2003-01-02 | Arif Diwan | Content-request redirection method and system |
US20020143984A1 (en) | 2001-03-19 | 2002-10-03 | The Aerospace Corporation | Cooperative adaptive web caching routing and forwarding web content data broadcasting method |
US20070250841A1 (en) | 2001-03-30 | 2007-10-25 | British Telecommunications Public Limited Company | Multi-modal interface |
US20020143892A1 (en) | 2001-04-03 | 2002-10-03 | Mogul Jeffrey C. | Reduction of network retrieval latency using cache and digest |
US7398271B1 (en) | 2001-04-16 | 2008-07-08 | Yahoo! Inc. | Using network traffic logs for search enhancement |
US20020156980A1 (en) * | 2001-04-19 | 2002-10-24 | International Business Machines Corporation | Designing a cache with adaptive reconfiguration |
US6745295B2 (en) * | 2001-04-19 | 2004-06-01 | International Business Machines Corporation | Designing a cache with adaptive reconfiguration |
US6912591B2 (en) | 2001-05-02 | 2005-06-28 | Science Application International Corporation | System and method for patch enabled data transmissions |
US20020188665A1 (en) | 2001-05-02 | 2002-12-12 | Lash Thomas D. | System and method for patch enabled data transmissions |
US20020178238A1 (en) * | 2001-05-23 | 2002-11-28 | Thomas Fletcher | Caching address information in a communications system |
US20040073707A1 (en) * | 2001-05-23 | 2004-04-15 | Hughes Electronics Corporation | Generating a list of network addresses for pre-loading a network address cache via multicast |
US20020184340A1 (en) | 2001-05-31 | 2002-12-05 | Alok Srivastava | XML aware logical caching system |
WO2002100117A2 (en) | 2001-06-04 | 2002-12-12 | Nct Group, Inc. | A system and method for reducing the time to deliver information from a communications network to a user |
US20030079041A1 (en) * | 2001-06-04 | 2003-04-24 | Nct Group, Inc. | System and method for increasing the effective bandwidth of a communications network |
US6813690B1 (en) | 2001-06-12 | 2004-11-02 | Network Appliance, Inc. | Caching media data using content-sensitive identifiers |
US20020191610A1 (en) | 2001-06-18 | 2002-12-19 | Wonin Baek | Message transmission method and system capable of transmitting differential data |
US20020198883A1 (en) * | 2001-06-26 | 2002-12-26 | Itaru Nishizawa | Web system having clustered application servers and clustered databases |
US7003566B2 (en) | 2001-06-29 | 2006-02-21 | International Business Machines Corporation | Method and system for predictive directional data caching |
US6766422B2 (en) | 2001-09-27 | 2004-07-20 | Siemens Information And Communication Networks, Inc. | Method and system for web caching based on predictive usage |
US20030065743A1 (en) | 2001-09-28 | 2003-04-03 | Jenny Patrick Duncan | Method and system for distributing requests for content |
US7761594B1 (en) | 2001-10-15 | 2010-07-20 | Netapp, Inc. | Method and apparatus for forwarding requests in a cache hierarchy based on user-defined forwarding rules |
US20030079027A1 (en) | 2001-10-18 | 2003-04-24 | Michael Slocombe | Content request routing and load balancing for content distribution networks |
US20030086098A1 (en) | 2001-11-05 | 2003-05-08 | Robert Sesek | Printer-based pre-ripping and caching of network documents |
US20030101234A1 (en) | 2001-11-28 | 2003-05-29 | International Business Machines Corporation | System and method for indicating whether a document is cached |
US20040215665A1 (en) * | 2002-01-09 | 2004-10-28 | Edgar David A. | System, method, and computer program product for providing accelerated and secure wireless data transmission over the internet |
US7130872B2 (en) | 2002-01-18 | 2006-10-31 | Mobitv, Inc. | Multi-tiered caching mechanism for the storage and retrieval of content multiple versions |
US20030167257A1 (en) | 2002-01-18 | 2003-09-04 | De Bonet Jeremy S. | Multi-tiered caching mechanism for the storage and retrieval of content multiple versions |
US7100123B1 (en) | 2002-01-25 | 2006-08-29 | Microsoft Corporation | Electronic content search and delivery based on cursor location |
US20100257236A1 (en) * | 2002-02-15 | 2010-10-07 | Agnoli Giovanni M | System, method, and computer program product for media publishing request processing |
US20030158913A1 (en) * | 2002-02-15 | 2003-08-21 | Agnoli Giovanni M. | System, method, and computer program product for media publishing request processing |
US7155475B2 (en) * | 2002-02-15 | 2006-12-26 | Sony Corporation | System, method, and computer program product for media publishing request processing |
US20030172183A1 (en) * | 2002-02-25 | 2003-09-11 | Broadcom Corporation | System, method and computer program product for caching domain name system information on a network gateway |
US7343397B2 (en) * | 2002-03-29 | 2008-03-11 | Lucent Technologies Inc. | Method and apparatus for performing predictive caching of DNS requests by correlating IP addresses |
US20030212779A1 (en) | 2002-04-30 | 2003-11-13 | Boyter Brian A. | System and Method for Network Security Scanning |
US6973457B1 (en) | 2002-05-10 | 2005-12-06 | Oracle International Corporation | Method and system for scrollable cursors |
US20030217173A1 (en) | 2002-05-15 | 2003-11-20 | Butt Alan B. | Automatic proxy detection |
US20060089978A1 (en) | 2002-05-31 | 2006-04-27 | Microsoft Corporation | Systems and methods for shared browsing among a plurality of online co-users |
US20040064577A1 (en) | 2002-07-25 | 2004-04-01 | Dahlin Michael D. | Method and system for background replication of data objects |
US7676576B1 (en) * | 2002-08-01 | 2010-03-09 | Foundry Networks, Inc. | Method and system to clear counters used for statistical tracking for global server load balancing |
US20040032434A1 (en) * | 2002-08-13 | 2004-02-19 | Maria Pinsky | Screen controller and method therefor |
US7130890B1 (en) | 2002-09-04 | 2006-10-31 | Hewlett-Packard Development Company, L.P. | Method and system for adaptively prefetching objects from a network |
US20040205149A1 (en) | 2002-09-11 | 2004-10-14 | Hughes Electronics | System and method for pre-fetching content in a proxy architecture |
US7426576B1 (en) * | 2002-09-20 | 2008-09-16 | Network Appliance, Inc. | Highly available DNS resolver and method for use of the same |
US20040078487A1 (en) * | 2002-10-17 | 2004-04-22 | International Business Machines Corporation | Network address cache apparatus and method |
US20040078453A1 (en) | 2002-10-17 | 2004-04-22 | International Business Machines Corporation | Method, apparatus, and computer program product to determine the progress of Web page downloads |
US20040139282A1 (en) * | 2002-11-05 | 2004-07-15 | Shiro Yoshioka | Apparatus and method for memory management |
US20040107296A1 (en) | 2002-12-02 | 2004-06-03 | International Business Machines Corporation | System and method for accessing content of a web page |
US20050278417A1 (en) | 2002-12-21 | 2005-12-15 | International Business Machines Corporation | Client access to web services |
US20040205165A1 (en) * | 2003-01-21 | 2004-10-14 | Eplication Networks Ltd. | Method for improving quality of service from an Internet server employing heuristic optimization of downloading |
US7415536B2 (en) * | 2003-01-21 | 2008-08-19 | Canon Kabushiki Kaisha | Address query response method, program, and apparatus, and address notification method, program, and apparatus |
US20040249971A1 (en) * | 2003-02-10 | 2004-12-09 | Eric Klinker | Methods and systems for providing dynamic domain name system for inbound route control |
US20040237044A1 (en) | 2003-02-21 | 2004-11-25 | Motionpoint Corporation | Synchronization of web site content between languages |
US20040260466A1 (en) * | 2003-04-09 | 2004-12-23 | Pioneer Corporation | Navigation apparatus, navigation method, route data creation program, and server in navigation system |
US20040250119A1 (en) * | 2003-04-30 | 2004-12-09 | Art Shelest | Authenticated domain name resolution |
US20040225644A1 (en) | 2003-05-09 | 2004-11-11 | International Business Machines Corporation | Method and apparatus for search engine World Wide Web crawling |
US7437409B2 (en) | 2003-06-13 | 2008-10-14 | Microsoft Corporation | Limiting interaction between parties in a networked session |
US7249053B2 (en) | 2003-06-16 | 2007-07-24 | Claria Corporation | Presentation of messages to end-users in a computer network |
US20040262051A1 (en) | 2003-06-26 | 2004-12-30 | International Business Machines Corporation | Program product, system and method for creating and selecting active regions on physical documents |
US20050033803A1 (en) | 2003-07-02 | 2005-02-10 | Vleet Taylor N. Van | Server architecture and methods for persistently storing and serving event data |
WO2005006129A2 (en) | 2003-07-02 | 2005-01-20 | Amazon.Com, Inc. | Server architecture and methods for persistently storing and serving event data |
US20090276407A1 (en) | 2003-07-02 | 2009-11-05 | Van Vleet Taylor N | Server architecture and methods for storing and serving event data |
US7565425B2 (en) | 2003-07-02 | 2009-07-21 | Amazon Technologies, Inc. | Server architecture and methods for persistently storing and serving event data |
US20080195819A1 (en) | 2003-08-06 | 2008-08-14 | Charles E Dumont | System and program product for validating remotely cached dynamic content web pages |
US20050038787A1 (en) | 2003-08-16 | 2005-02-17 | International Business Machines Corporation | Document authentication |
US20060271599A1 (en) * | 2003-08-21 | 2006-11-30 | Akihiro Yamamoto | Data transmission/reception system, data transmission/reception method, and recording/reproduction device |
US20050165829A1 (en) | 2003-11-04 | 2005-07-28 | Jeffrey Varasano | Systems, Methods and Computer Program Products for Developing Enterprise Software Applications |
US20050138604A1 (en) | 2003-12-19 | 2005-06-23 | Peter Harrison | Browser configuration |
US20050198386A1 (en) * | 2004-02-19 | 2005-09-08 | International Business Machines Corporation | User defined preferred DNS reference |
US20050198327A1 (en) * | 2004-03-02 | 2005-09-08 | Takashige Iwamura | Computer system capable of fast failover upon failure |
US20050198224A1 (en) | 2004-03-02 | 2005-09-08 | Emiko Kobayashi | Storage network system and control method thereof |
US20080140626A1 (en) | 2004-04-15 | 2008-06-12 | Jeffery Wilson | Method for enabling dynamic websites to be indexed within search engines |
US20050278222A1 (en) | 2004-05-24 | 2005-12-15 | Nortrup Edward H | Systems and methods for performing transactions |
US7836044B2 (en) | 2004-06-22 | 2010-11-16 | Google Inc. | Anticipated query generation and processing in a search engine |
US20060047804A1 (en) | 2004-06-30 | 2006-03-02 | Fredricksen Eric R | Accelerating user interfaces by predicting user actions |
US20080222363A1 (en) * | 2004-06-30 | 2008-09-11 | Prakash Khemani | Systems and methods of maintaining freshness of a cached object based on demand and expiration time |
US7437364B1 (en) | 2004-06-30 | 2008-10-14 | Google Inc. | System and method of accessing a document efficiently through multi-tier web caching |
US20060085601A1 (en) * | 2004-10-19 | 2006-04-20 | Woffinden Gary A | Queue or stack based cache entry reclaim method |
US20060143568A1 (en) | 2004-11-10 | 2006-06-29 | Scott Milener | Method and apparatus for enhanced browsing |
US20060156387A1 (en) | 2005-01-10 | 2006-07-13 | Google Inc. | Methods and systems for opportunistic cookie caching |
US20060253612A1 (en) * | 2005-04-04 | 2006-11-09 | Cheshire Stuart D | Method and apparatus for detecting incorrect responses to network queries |
US20070189708A1 (en) | 2005-04-20 | 2007-08-16 | Videoegg. Inc | Browser based multi-clip video editing |
US20070174774A1 (en) | 2005-04-20 | 2007-07-26 | Videoegg, Inc. | Browser editing with timeline representations |
US20060271642A1 (en) | 2005-05-26 | 2006-11-30 | Nicholas Stavrakos | Method for multipart encoding |
US20090049388A1 (en) | 2005-06-02 | 2009-02-19 | Ronnie Bernard Francis Taib | Multimodal computer navigation |
US20050204064A1 (en) * | 2005-06-23 | 2005-09-15 | The Go Daddy Group, Inc. | Resolving access to content associated with shared domain name using routing dns |
US7548908B2 (en) | 2005-06-24 | 2009-06-16 | Yahoo! Inc. | Dynamic bloom filter for caching query results |
US20060294223A1 (en) | 2005-06-24 | 2006-12-28 | Microsoft Corporation | Pre-fetching and DNS resolution of hyperlinked content |
US20060294311A1 (en) | 2005-06-24 | 2006-12-28 | Yahoo! Inc. | Dynamic bloom filter for caching query results |
US20070214052A1 (en) | 2006-03-03 | 2007-09-13 | Kao Chiuan-Liang | Consumer Driven Telecommunication Integrated System for Hospitality Application |
US20070294480A1 (en) * | 2006-06-15 | 2007-12-20 | Martin Moser | Cache With Time-Based Purging and Computation of Purged Items |
US20080229017A1 (en) * | 2007-03-12 | 2008-09-18 | Robert Plamondon | Systems and Methods of Providing Security and Reliability to Proxy Caches |
Non-Patent Citations (54)
Title |
---|
Arocena, Applications of a Web Query Language, Aug. 12, 1997, pp. 1-15. |
Banga, Optimistic Deltas for WWW Latency Reduction, USENIX Technical Conference, 1997, pp. 1-15. |
Bestavros, Server-initiated Document Dissemination for the WWW, IEEE Data Engineering Bulletin, vol. 19, No. 3, Sep. 3-11, 1996, pp. 1-8. |
Botafogo, Structural Analysis of Hypertexts: Identifying Hierarchies and Userful Metrics, ACM Transactions on Information Systems, vol. 10, No. 2, Apr. 1992, pp. 142-180. |
Boyle, To Link or not to link: An empirical comparison of Hypertext linking strategies, ACM SIGDOC' 92; 1992; pp. 221-231. |
Bruck, Weighted Bloom Filter, ISIT, Jul. 9-14, 2006, pp. 2304-2308. |
Cao, A Study of Integrated Prefetching and Caching Strategies, Proceedings of 1995 ACM SIGMETRICS, Jun. 1995, 10 pgs. |
Carriere, WebQuery: Searching and Visualizing the Web through Connectivity, Proceedings of the 6th International World Wide Web Conference; 1997; 12 pgs. |
Chan, Cache-based Compaction: A New Technique for Optimizing Web Transfer, IEEE, 1999, 9 pgs. |
Chandranmenon, et al., "Reducing Web Latency Using Reference Point Caching", In Proceedings of the Twentieth Annual Joint Conference of the IEEE Computer and Communications Societies (INFOCOM 2001), IEEE, 2001, pp. 1607-1616. * |
Cohen et al., "Proactive Caching of DNS Records: Addressing a Performance Bottleneck", In Proc. Symp. Applications and the Internet (SAINT), San Diego, CA, Jan. 2001, pp. 85-94 (10 pages). * |
Cohen et al., "Proactive Caching of DNS Records: Addressing a Performance Bottleneck", In Proc. Symp. Applications and the Internet (SAINT), San Diego, CA, Jan. 2001, pp. 85-94 (Previously Provided). * |
Craswell, Effective Site Finding using Link Anchor Information, SIGIR '01, Sep. 9-12, 2001, pp. 250-257. |
Curewitz, Practical Prefetching via Data Compression, SIGMOD '93, 1993, 10 pgs. |
Doreian, A Measure of Standing for Citation Networks within a Wider Environment, Information Processing and Management, vol. 30, No. 1, 1994, pp. 21-31. |
Doreian, Measuring the Relative Standing of Disciplinary Journals, Information Processing and Management, vol. 24, No. 1, 1988, pp. 45-56. |
Douglis, Dynamic Suppression of Similarity in the Web: a Case for Deployable Detection Mechanisms, IBM Research Report, Jul. 11, 2002, 8 pgs. |
Fan, Web Prefetching Between Low-Bandwidth Clients and Proxies: Potential and Performance, Proceedings of the ACM SIGMETRICS Conference, May 1999, pp. 1-13. |
Frisse, Searching for Information in a Hypertext Medical Handbook, Communications of the ACM, vol. 31, No. 7, Jul. 1998, pp. 880-886. |
Garfield, Citation Analysis as a Tool in Journal Evaluation, Essays of an Information Scientist, vol. 1, 1962-1973, pp. 527-544. |
Geller, On the Citation Influence Methodology of Pinski and Narin, Information Processing and Management, vol. 14, 1978, pp. 93-95. |
Gong, Bloom Filter-based XML Packets Filtering for Millions of Path Queries, Proceedings of the 21st International Conference on Data Engineering, 2005, 12 pgs. |
Google Inc., International Search Report and Written Opinion, PCT/US2008/054167, Jul. 2, 2008, 8 pgs. |
Google Inc., International Search Report and Written Opinion, PCT/US2008/088047, Feb. 23, 2009, 8 pgs. |
Google Inc., International Search Report, PCT/US2005/022067, Oct. 1, 2006, 7 pgs. |
Griffioen, Reducing File System Latency Using a Predictive Approach, Proceedings of 1994 Summer USENIX Conference, Jun. 1994, 12 pgs. |
Gwertzman, The Case for Geographical Push-Caching, Proceedings of the 1995 Workshop on Hot Operating Systems, 1995, 5 pgs. |
Henzinger, Measuring Index Quality Using Random Walks on the Web, Proceedings of the 8th International World Wide Web Conference, May 1999, 35 pgs. |
Hubbell, An Input-Output Approach to Clique Identification, Sociometry, University of California Santa Barbara, 1965, pp. 377-399. |
Jung, et al., "DNS Performance and the Effectiveness of Caching", In Proceedings of the First ACM SIGCOMM Internet Measurement Workshop (UMW 2001), ACM, 2001, 14 pages. * |
Katz, A New Status Index Derived from Sociometric Analysis, Psychometrika, vol. 18, No. 1, Mar. 1953, pp. 39-43. |
Kimbrel, Integrated Parallel Prefetching and Caching, SIGMETRICS, 1996, pp. 262-263. |
Kleinberg, Authoritative Sources in a Hyperlinked Environment, Journal of the ACM, vol. 46, No. 5, Sep. 1999, pp. 604-632. |
Kroeger, Digital's Web Proxy Traces, , Dec. 1996, 5 pgs. |
Kroeger, Digital's Web Proxy Traces, <ftp://ftp.digital.com/pub/DEC/traces/proxy/webtraces.html>, Dec. 1996, 5 pgs. |
Luotonen, World-Wide Web Proxies, Apr. 1994, pp. 1-8. |
Marchiori, The Quest for Correct Information on the Web: Hyper Search Engines, 1997, 18 pgs. |
Markatos, A Top-10 Approach to Prefetching on the Web, Technical Report No. 173, ICS-FORTH, Aug. 1996, pp. 1-15. |
McBryan, GENVL and WWWW: Tools for Taming the Web, Proceedings of the First International World Wide Web Conference, May 1994; pp. 1-10. |
Mizruchi, Techniques for Disaggregating Centrality Scores in Social Networks, Sociological Methodology, 1996, pp. 26-48. |
Mogul, Delta Encoding in HTTP, Network Working Group, Jan. 2002, pp. 1-49. |
Mogul, Potential Benefits of Delta Encoding and Data Compression for HTTP, ACM SIGCOMM '97, 14 pgs. |
Padmanabhan, Using Predictive Prefetching to Improve World Wide Web Latency, ACM SIGCOMM Computer Communication Review, Jul. 1996, 15 pgs. |
Palmer, Fido: A Cache That Learns to Fetch, Proceedings of the 17th International Conference on Very Large Data Bases, Sep. 1991, pp. 255-264. |
Patterson, Informed Prefetching and Caching, Proceedings of the 15th ACM Symposium on Operating Systems Principles, May 11, 1995, 24 pgs. |
Pinski, Citation Influence for Journal Aggregates of Scientific Publications: Theory, with Application to the Literature of Physics, Information Processing and Management, vol. 12, No. 5-A, 1976; pp. 297-312. |
Ramer, Similarity, Probability and Database Organization,: Extended Abstract, IEEE, 1996; pp. 272-277. |
Rhea, Value-Based Web Caching, Proceedings of the Twelfth International World Wide Web Conference, May 2003, 10 pgs. |
Sakaguchi, A Browsing Tool for Multi-lingual Documents for Users without Multi-lingual Fonts, ACM, 1996; pp. 63-69. |
Schilit, TeleWeb: Loosely Connected Access to the World Wide Web, Fifth International World Wide Web Conference, Paris France, May 6-10, 1996, 16 pgs. |
Tait, Detection and Exploitation of File Working Sets, Proceedings of the Eleventh International Conference on Distributed Computing Systems, May 1991, 19 pgs. |
Vitter, Optimal Prefetching via Data Compression, Journal of the ACM, vol. 43, Nov. 13, 1995, 20 pgs. |
Wang, Prefetching in World Wide Web, IEEE, 1996; pp. 28-32. |
Williams, Removal Policies in Network Caches for World-Wide Web Documents, Proceedings of ACM SIGCOMM '96 Conference, Aug. 1996, 14 pgs. |
Cited By (13)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20130326084A1 (en) * | 2012-06-04 | 2013-12-05 | Microsoft Corporation | Dynamic and intelligent dns routing with subzones |
US9444779B2 (en) * | 2012-06-04 | 2016-09-13 | Microsoft Technology Lincensing, LLC | Dynamic and intelligent DNS routing with subzones |
US20140214735A1 (en) * | 2013-01-28 | 2014-07-31 | Pagebites, Inc. | Method for an optimizing predictive model using gradient descent and conjugate residuals |
US9390383B2 (en) * | 2013-01-28 | 2016-07-12 | Georges Harik | Method for an optimizing predictive model using gradient descent and conjugate residuals |
US9600777B2 (en) | 2013-03-11 | 2017-03-21 | Georges Harik | Configuring and optimizing computational structure for a machine learning application using a tuple of vectors |
US9930132B2 (en) * | 2014-01-10 | 2018-03-27 | Facebook, Inc. | Content specific router caching |
US20150201033A1 (en) * | 2014-01-10 | 2015-07-16 | Facebook. Inc. | Content specific router caching |
US10291735B2 (en) | 2014-07-23 | 2019-05-14 | Facebook, Inc. | Residential cache appliance utilizing a social network |
US10397357B2 (en) | 2014-07-23 | 2019-08-27 | Facebook, Inc. | Rural area network device |
US10587715B2 (en) | 2014-07-23 | 2020-03-10 | Facebook, Inc. | Residential cache appliance utilizing a social network |
US11115491B2 (en) | 2014-07-23 | 2021-09-07 | Facebook, Inc. | Residential cache appliance utilizing a social network |
US10205797B2 (en) | 2014-12-29 | 2019-02-12 | Facebook, Inc. | Application service delivery through an application service avatar |
US10601947B2 (en) | 2014-12-29 | 2020-03-24 | Facebook, Inc. | Application service delivery through an application service avatar |
Also Published As
Publication number | Publication date |
---|---|
US20090037393A1 (en) | 2009-02-05 |
US20120271852A1 (en) | 2012-10-25 |
US8275790B2 (en) | 2012-09-25 |
US7437364B1 (en) | 2008-10-14 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8788475B2 (en) | System and method of accessing a document efficiently through multi-tier web caching | |
US8825754B2 (en) | Prioritized preloading of documents to client | |
US7587398B1 (en) | System and method of accessing a document efficiently through multi-tier web caching | |
US7565423B1 (en) | System and method of accessing a document efficiently through multi-tier web caching | |
US8996653B1 (en) | Systems and methods for client authentication | |
US7802014B2 (en) | Method and system for class-based management of dynamic content in a networked environment | |
US6883068B2 (en) | Methods and apparatus for implementing a chche replacement scheme | |
US6647421B1 (en) | Method and apparatus for dispatching document requests in a proxy | |
US9015269B2 (en) | Methods and systems for notifying a server with cache information and for serving resources based on it | |
US6675214B2 (en) | Method and apparatus for efficient storage and retrieval of objects in and from an object storage device | |
US9208097B2 (en) | Cache optimization | |
US7552220B2 (en) | System and method to refresh proxy cache server objects | |
US7269608B2 (en) | Apparatus and methods for caching objects using main memory and persistent memory | |
US9380022B2 (en) | System and method for managing content variations in a content deliver cache | |
US20050240574A1 (en) | Pre-fetching resources based on a resource lookup query | |
US20090271527A1 (en) | Caching signatures | |
TW437205B (en) | An internet caching system and a method and an arrangement in such a system | |
US20030061449A1 (en) | Method and system for selectively caching web elements | |
EP1648138B1 (en) | Method and system for caching directory services | |
US8364655B2 (en) | Hybrid off-peak and just-in-time integration | |
WO2003083612A2 (en) | System and method for optimizing internet applications |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044695/0115Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551)Year of fee payment: 4 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |