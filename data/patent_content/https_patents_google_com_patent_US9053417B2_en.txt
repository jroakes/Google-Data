US9053417B2 - Domain level clustering - Google Patents
Domain level clustering Download PDFInfo
- Publication number
- US9053417B2 US9053417B2 US13/713,623 US201213713623A US9053417B2 US 9053417 B2 US9053417 B2 US 9053417B2 US 201213713623 A US201213713623 A US 201213713623A US 9053417 B2 US9053417 B2 US 9053417B2
- Authority
- US
- United States
- Prior art keywords
- level
- level cluster
- domain
- cluster
- documents
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N5/00—Computing arrangements using knowledge-based models
- G06N5/02—Knowledge representation; Symbolic representation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/35—Clustering; Classification
- G06F16/355—Class or cluster creation or modification
-
- G06F17/3071—
Definitions
- Clustering searchable documents is useful for eliminating duplicate content and showing greater diversity within search results.
- One of the more challenging aspects of clustering web related documents e.g., web pages, images and videos
- conventional methods produce clusters that include too many documents or documents that are duplicated or substantially duplicated.
- One implementation is a computer implemented method for clustering documents that includes receiving at least a first first-level cluster of documents and a second first-level cluster of documents.
- the first first-level cluster may include one or more first documents associated with a first domain, the first documents satisfying a first first-level classification criterion.
- the second first-level cluster may include one or more second documents associated with a second domain, the second documents satisfying a second first-level classification criterion.
- the method also includes creating a second-level cluster by combining the first first-level cluster with the second first-level cluster if a) the first first-level cluster and second first-level cluster satisfy a second-level classification criterion and b) the first domain does not match the second domain.
- the documents are web pages and the first-level classification criterion includes matching titles of web pages. In some implementations, the first-level classification criterion further includes matching titles of web pages or matching descriptions of web pages. In some implementations, when the first domain matches the second domain the method includes creating a first second-level cluster from at least the first first-level cluster of documents and creating a second second-level cluster from at least the second first-level cluster. In some embodiments, the method includes creating an index of the documents of the second-level cluster.
- the method when the first domain matches the second domain the method includes receiving a third first-level cluster of documents, wherein the third first-level cluster includes one or more third documents associated with a third domain and at least one of the third documents satisfying the first first-level classification criterion, creating a first second-level cluster from at least the second first-level cluster of documents, and creating a second second-level cluster by combining at least the first first-level cluster with the third first-level cluster when the first domain does not match the third domain.
- the system includes a processor and a memory.
- the memory includes code representing instructions that when executed cause the processor to receive at least a first first-level cluster of documents and a second first-level cluster of documents.
- Each first-level cluster includes one or more documents, and each of the one or more documents within each of the first-level clusters is associated with a domain and has a first-level classification feature value that satisfies a predetermined criterion.
- the memory also includes code representing instructions that when executed cause the processor to create a second-level cluster by combining the first first-level cluster with the second first-level cluster if: a) the first first-level cluster and second first-level cluster have a second-level classification feature value that satisfies a predetermined criterion and b) the domain of the first first-level cluster does not match the domain of the second first-level cluster.
- the documents are web pages and the predetermined criterion is the domain for the web pages.
- the memory includes code representing instructions that when executed cause the processor to assign a cluster identifier to the first-level clusters.
- the memory includes code representing instructions that when executed cause the processor to create a third-level cluster by combining a first second-level cluster with a second second-level cluster if: a) the first second-level cluster and second second-level cluster have a third-level classification feature value that satisfies a predetermined criterion and b) the domains of the first second-level cluster do not match the domains of the second second-level cluster.
- the memory includes code representing instructions that when executed cause the processor to create an index of the documents of the second-level cluster.
- Another embodiment is a computer implemented method for clustering a plurality of first-level clusters of documents.
- Each first-level cluster of documents is of the same domain.
- the method includes a) selecting a first, first-level cluster of a first domain and b) marking the first, first-level cluster as a first, second level cluster.
- the method also includes c) selecting one first-level cluster from each domain other than the first domain.
- the method also includes d) assigning each of the first-level clusters from each domain other than the first domain to the first, second-level cluster and e) emitting the second-level cluster.
- the method includes repeating steps a), b), c), d) and e) for a second, first-level cluster. In some embodiments, the method includes repeating steps a), b), c), d) and e) until all first-level clusters have been assigned to a second-level cluster. In some embodiments, the step c) selecting one first-level cluster from each domain other than the first domain includes randomly selecting one first-level cluster from each domain other than the first domain.
- Another embodiment is a system for clustering a plurality of first-level clusters of documents.
- Each first-level cluster of documents is of the same domain.
- the system includes a processor and a memory.
- the memory includes code representing instructions that when executed cause the processor to a) select a first, first-level cluster of a first domain and b) mark the first, first-level cluster as a first, second level cluster.
- the memory includes code representing instructions that when executed cause the processor to c) select one first-level cluster from each domain other than the first domain.
- the memory includes code representing instructions that when executed cause the processor to d) assign each of the first-level clusters from each domain other than the first domain to the first, second-level cluster and e) emit the second-level cluster.
- the memory includes code representing instructions that when executed cause the processor to repeat steps a), b), c), d) and e) for a second, first-level cluster. In some embodiments, the memory includes code representing instructions that when executed cause the processor to repeat steps a), b), c), d) and e) until all first-level clusters have been assigned to a second-level cluster. In some embodiments, the memory includes code representing instructions that when executed cause the processor to randomly select one first-level cluster from each domain other than the first domain.
- the clustering methods and systems described herein can provide one or more of the following advantages.
- One advantage of the technology prevents over clustering of documents through use of a two-level clustering algorithm.
- Another advantage of the technology prevents clustering of duplicate or substantially similar documents.
- Another embodiment is a computer implemented method that includes receiving a first document having a first clustering value and a second clustering value from a first domain and assigning the first document to a first first-level cluster.
- the method also includes receiving a second document having a third clustering value and a fourth clustering value from the first domain, the third and fourth clustering values differing from the first and second clustering values and assigning the second document to a second first-level cluster based on the third and fourth clustering values differing from the first and second clustering values.
- the method further includes receiving a third document having the first clustering value and the fourth clustering value from a second domain, the second domain differing from the first domain and assigning the third document to a third first-level cluster based on the second domain differing from the first domain.
- the method also includes generating a first second-level cluster by combining the third first-level cluster with one of the first first-level cluster and the second first-level cluster based on the second domain differing from the first domain and generating a second second-level cluster that includes either the first first-level cluster that was not combined with the third first-level cluster or the second first-level cluster that was not combined with the third first-level cluster.
- generating the first second-level cluster may include selecting either the first first-level cluster or the second first-level cluster at random for inclusion in the first second-level cluster. In some implementations all members of a particular first-level cluster are from the same domain and all members of a particular second-level cluster are from first-level clusters with differing domains. In some implementations, the third first-level cluster is combined with the first first-level cluster based on matching first clustering values.
- FIGS. 1A-1C depict a process for clustering documents, according to an illustrative embodiment.
- FIG. 2 is a flowchart of a method for clustering documents, according to an illustrative embodiment.
- FIGS. 3A-3C depict a process for clustering documents, according to an illustrative embodiment.
- FIG. 4 is a flowchart of a method for clustering documents, according to another illustrative embodiment.
- FIG. 5 is a schematic illustration of a system for clustering documents, according to an illustrative embodiment.
- FIG. 6 is a flowchart of a method for clustering documents, according to another illustrative embodiment.
- FIG. 7 shows an example of a computer device that can be used to implement the described techniques.
- FIG. 8 shows an example of a distributed computer device that can be used to implement the described techniques.
- Clustering searchable documents for example, web pages, images and videos
- the clustering techniques described minimize, for example, the over clustering within a domain due to clustering features that are introduced outside of the domain.
- One of the difficult aspects of clustering web related documents is conventional methods produce clusters that include too many documents or documents that are duplicated or substantially duplicated. For example, the same document may appear duplicated or substantially duplicated in different forms or at different places (e.g., different URLs) on the web.
- a “document” as the term is used herein is to be broadly interpreted to include any machine-readable and machine-storable work product.
- two-level clustering is used to avoid over clustering of documents. Once all documents have been assigned to a first, domain-level cluster, the domain-level clusters are then clustered between the domains to form the second, top-level clusters such that a top level cluster may contain at most one domain-level cluster per domain.
- FIGS. 1A-1C depict a process for clustering documents, according to an illustrative embodiment.
- FIG. 1A depicts a plurality of documents Da 1 , Da 2 , Da 3 , Db 1 , Db 2 , and Dc 3 that are to be clustered together.
- the documents include the domain 104 of the document and a unique identifier 108 .
- the number and types of documents to be clustered will vary in different embodiments.
- a clustering algorithm is applied to the plurality of documents to create five first-level clusters of the documents: clusters A 1 , A 2 , B 1 , B 2 , and C 1 .
- the designations A 1 , A 2 , B 1 , B 2 , and C 1 are first-level cluster identifiers.
- the cluster identifiers can include information to describe the contents of the clusters.
- the cluster identifiers include a designation of the domain 112 of the documents within the cluster and a unique identifier 116 .
- the first digit “A” corresponds to the domain of the web objects within the cluster and the second digit “1” is a unique identifier specifying the cluster A 1 as the first, first-level cluster for domain “A.”
- documents Da 1 and Da 2 are grouped together in cluster A 1 .
- Da 1 and Da 2 are clustered together because they both have a common feature (e.g., document title, not shown).
- Document Da 3 is grouped in cluster A 2 .
- Document Db 1 is grouped in cluster B 1 .
- Document Db 2 is grouped in cluster B 2 .
- Document Dc 1 is grouped in cluster C 1 .
- the clustering algorithm is then applied to the first-level clusters to produce second-level clusters.
- the clustering at the second-level adds a constraint that each second-level cluster cannot include more than one first-level cluster of a particular domain.
- first-level clusters A 1 , A 2 , and B 1 may not be grouped together into a second-level cluster because cluster A 1 has domain (“a”) and cluster A 2 has the same domain (“a”). So instead, the algorithm may group the first-level clusters in either of the following ways (depicted in FIG.
- ⁇ Da 1 , Da 2 ⁇ is not clustered with ⁇ Da 3 ⁇ because they were not clustered together during the first-level clustering for documents based on their respective domain and first-level classification features.
- FIG. 2 is a flowchart 200 of a method for clustering documents, according to an illustrative embodiment. It is generally assumed that a set of documents are already available for clustering, however, for clarity of illustration the method described includes receiving 204 a plurality of documents that are to be grouped into clusters. The method also includes assigning 208 the documents to a first first-level cluster and a second first-level clusters. Two first-level clusters are described in this embodiment; however, in other embodiments two or more first-level clusters are included.
- the method also includes determining 216 if a) the first first-level cluster and the second-first level cluster have a second-level classification feature value that satisfies a predetermined criterion and b) the domain of the first first-level cluster does not match the domain of the second first-level cluster.
- the method then involves creating 220 the second-level cluster if a) the first first-level cluster and the second-first level cluster have a second-level classification feature value that satisfies a predetermined criterion (e.g., the titles match) and b) the domain of the first first-level cluster does not match the domain of the second first-level cluster.
- a predetermined criterion e.g., the titles match
- No second-level cluster is created ( 224 ), however, if a) the first first-level cluster and the second-first level cluster does not have a second-level classification feature value that satisfies a predetermined criterion or b) the domain of the first first-level cluster matches the domain of the second first-level cluster.
- the method also includes repeating step 216 for additional first-level clusters (as described, for example, with respect to FIG. 6 ).
- the method also includes creating an index 228 of the documents of the second level cluster.
- the index may, for example, catalog and maintain a copy of the documents in the cluster and/or a location or a pointer to the documents (e.g., URL). Accordingly, the technology described is able to, for example, prevent the indexer from indexing duplicate documents. Duplicate documents could otherwise lead to search results that would be undesirable to the user because the user does not want to be presented with multiple documents in a search result that contain the same, or substantially the same, content. Further, indexing duplicate documents wastes resources (e.g., memory, processing). Given a set of duplicate documents, an indexer may select one of these documents to index. However, determining which of the duplicate documents to index can be difficult.
- the crawler may re-visit documents to determine if changes have been made, the crawler may not re-visit all of the documents at the same time and/or with the same frequency.
- FIGS. 3A-3C depict a process for clustering documents, according to an illustrative embodiment.
- FIG. 3A depicts three documents Da 1 , Da 2 , and Db 1 - 2 that are to be clustered together.
- Each document includes a unique identifier (UID), a uniform resource locator (URL), a title (Title), and a description (Description).
- UID unique identifier
- URL uniform resource locator
- Title title
- Description Description
- document Da 1 has a Title value of T 1 and a Description value of Dl.
- the method involves identifying documents with a URL of the same domain.
- Documents Da 1 and Da 2 have a URL of the same domain (a.com) and Document Db 1 - 2 has a URL with the domain “b.com.”
- the clustering algorithm operates on documents that have a URL of the same domain.
- the clustering algorithm operates on Documents Da 1 and Da 2 and then separately on Document Db 1 - 2 .
- the first-level clusters are created based on documents that have a first level-classification feature value that satisfies a predetermined criterion.
- the first-level classification feature is the Title of the document and the Description of the document.
- documents are grouped into the same cluster if the value of the Title of a document or Description of a document matches for documents of the same domain.
- the clustering algorithm groups the documents into clusters CL 1 , CL 2 , and CL 3 .
- Documents Da 1 and Da 2 have a URL of the same domain; however the documents are not grouped together because neither the Title nor the Description matches for Documents Da 1 and Da 2 .
- Document Da 1 is clustered into cluster CL 1 .
- Document Da 2 is clustered in cluster CL 2 .
- Document Db 1 - 2 is grouped in cluster CL 3 .
- the clustering algorithm is then applied to the first-level clusters (CL 1 , CL 2 , and CL 3 ) to produce second-level clusters.
- the clustering at the second-level requires clusters to include documents that have a matching second-level classification feature value and adds a constraint that each second-level cluster cannot include more than one first-level cluster for each domain.
- the second-level classification feature is the Title of the document and the Description of the document.
- first-level clusters CL 1 and CL 2 may not both be grouped together into a second-level cluster with CL 3 because cluster CL 1 has a URL with a domain that matches the domain of CL 2 . So instead, the algorithm may group the first-level clusters into either of the following ways (depicted in FIG. 3C ): Option A— ⁇ CL1, CL3 ⁇ ⁇ CL2 ⁇ ; or Option B— ⁇ CL1 ⁇ , ⁇ CL2, CL3 ⁇
- FIG. 4 is a flowchart 400 of a method for clustering documents, according to another illustrative embodiment.
- the method includes receiving 404 a plurality of documents to be clustered.
- the method also includes assigning 408 the documents to a plurality of first-level clusters. In some embodiments, the method does not begin with receiving 404 the document and assigning 408 the documents to clusters; rather, the method begins with receiving a plurality of first-level clusters.
- the next step of the method includes identifying 416 potential second-level clusters to be created based on the first-level clusters.
- potential second-level clusters are identified by identifying 420 second-level clusters that have a) first-level clusters that satisfy a predetermined criterion and b) first-level clusters whose domains do not match.
- the method also includes creating a second-level cluster 424 that satisfies the conditions of the identification step 420 .
- the method may optionally include selecting 412 one of the potential second-level clusters.
- the method also includes creating 428 an index of the documents in the second-level clusters.
- FIG. 5 is a schematic illustration of an exemplary environment 500 in which the systems and methods described herein may be implemented.
- the environment 500 includes one or more systems 506 for clustering documents provided by one or more document hosts 504 that store documents.
- Each system 506 includes a processors 508 coupled to memory 516 .
- Documents and/or already clustered documents are provided to the processors 508 via a network 520 .
- the memory 516 includes code representing instructions that when executed cause the processor 508 to receive at least a first first-level cluster of documents and a second first-level cluster of documents.
- Each first-level cluster includes one or more documents, and each of the one or more documents within each of the first-level clusters are of the same domain and has a first-level classification feature value that satisfies a predetermined criterion.
- the memory 516 also includes code representing instructions that when executed cause the processor 508 to create a second-level cluster by combining the first first-level cluster with the second first-level cluster if a) the first first-level cluster and second first-level cluster have a second-level classification feature value that satisfies a predetermined criterion and b) the domain of the first first-level cluster does not match the domain of the second first-level cluster.
- the system 506 may also include a computer-readable storage device (not shown) that stores instructions that, when executed by processor 508 , cause the computer system 506 to perform any of the operations described herein.
- the computer-readable storage device may be any device used to store computer-readable information but does not include transitory propagating signals.
- FIG. 6 is a flowchart 600 of a method for clustering a plurality of first-level clusters of documents, according to another illustrative embodiment.
- Each first-level cluster contains documents of a single domain.
- the method includes grouping 604 all first-level clusters by the domain of the documents in the cluster.
- the method also includes selecting 608 a first, first-level cluster (FL 1 ).
- the method also includes marking 612 the first, first-level cluster (FL 1 ) as belonging to a first, second-level cluster (SL 1 ).
- the method then proceeds with operating on the remaining first-level clusters.
- the method includes selecting 616 one first-level cluster from each domain other than the domain of the first, first-level cluster (FL 1 ). If multiple first-level clusters are available for the remaining domain types and there is no measure of which one is a better match, one is selected at random.
- the method then includes assigning 620 each first-level from each domain to the first, second-level cluster (SL 1 ). After trying to match first-level clusters from each domain, the method includes emitting 624 the first, second-level cluster (SL 1 ) to, for example, an indexer for indexing the cluster.
- the method then includes repeating 628 steps 608 , 612 , 616 , 620 , and 624 for each additional first-level cluster not assigned to a second-level cluster. This creates additional second-level clusters (e.g., SL 2 , SL 3 , SL 4 ). The method stops 632 when all first-level clusters have been assigned to a second-level cluster.
- Comprise, include, and/or plural forms of each are open ended and include the listed parts and can include additional parts that are not listed. And/or is open ended and includes one or more of the listed parts and combinations of the listed parts.
- FIG. 7 shows an example of a generic computer device 700 , which may be system 506 , and/or document host 504 of FIG. 5 , which may be used with the techniques described here.
- Computing device 700 is intended to represent various example forms of computing devices, such as laptops, desktops, workstations, personal digital assistants, cellular telephones, smart phones, tablets, servers, and other computing devices, including wearable devices.
- the components shown here, their connections and relationships, and their functions, are meant to be examples only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
- Computing device 700 includes a processor 702 , memory 704 , a storage device 706 , and expansion ports 710 connected via an interface 708 .
- computing device 700 may include transceiver 746 , communication interface 744 , and a GPS (Global Positioning System) receiver module 748 , among other components, connected via interface 708 .
- Device 700 may communicate wirelessly through communication interface 744 , which may include digital signal processing circuitry where necessary.
- Each of the components 702 , 704 , 706 , 708 , 710 , 740 , 744 , 746 , and 748 may be mounted on a common motherboard or in other manners as appropriate.
- the processor 702 can process instructions for execution within the computing device 700 , including instructions stored in the memory 704 or on the storage device 706 to display graphical information for a GUI on an external input/output device, such as display 716 .
- Display 716 may be a monitor or a flat touchscreen display.
- multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory.
- multiple computing devices 700 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).
- the memory 704 stores information within the computing device 700 .
- the memory 704 is a volatile memory unit or units.
- the memory 704 is a non-volatile memory unit or units.
- the memory 704 may also be another form of computer-readable medium, such as a magnetic or optical disk.
- the memory 704 may include expansion memory provided through an expansion interface.
- the storage device 706 is capable of providing mass storage for the computing device 700 .
- the storage device 706 may be or contain a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations, but excludes transitory propagating signals.
- a computer program product can be tangibly embodied in such a computer-readable medium.
- the computer program product may also contain instructions that, when executed, perform one or more methods, such as those described above.
- the computer- or machine-readable medium is a storage device such as the memory 704 , the storage device 706 , or memory on processor 702 .
- the interface 708 may be a high speed controller that manages bandwidth-intensive operations for the computing device 700 or a low speed controller that manages lower bandwidth-intensive operations, or a combination of such controllers.
- An external interface 740 may be provided so as to enable near area communication of device 700 with other devices.
- controller 708 may be coupled to storage device 706 and expansion port 714 .
- the expansion port which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet) may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- the computing device 700 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server 730 , or multiple times in a group of such servers. It may also be implemented as part of a rack server system. In addition, it may be implemented in a personal computer such as a laptop computer 722 , or smart phone 736 . An entire system may be made up of multiple computing devices 700 communicating with each other. Other configurations are possible.
- FIG. 8 shows an example of a generic computer device 800 , which may be system 506 or document host 504 of FIG. 1 , which may be used with the techniques described here.
- Computing device 800 is intended to represent various example forms of large-scale data processing devices, such as servers, blade servers, datacenters, mainframes, and other large-scale computing devices.
- Computing device 800 may be a distributed system having multiple processors, possibly including network attached storage nodes, that are interconnected by one or more communication networks.
- the components shown here, their connections and relationships, and their functions, are meant to be examples only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
- Distributed computing system 800 may include any number of computing devices 880 .
- Computing devices 880 may include a server or rack servers, mainframes, etc. communicating over a local or wide-area network, dedicated optical links, modems, bridges, routers, switches, wired or wireless networks, etc.
- each computing device may include multiple racks.
- computing device 880 a includes multiple racks 858 a - 858 n .
- Each rack may include one or more processors, such as processors 852 a - 852 n and 862 a - 862 n .
- the processors may include data processors, network attached storage devices, and other computer controlled devices.
- one processor may operate as a master processor and control the scheduling and data distribution tasks.
- Processors may be interconnected through one or more rack switches 858 , and one or more racks may be connected through switch 878 .
- Switch 878 may handle communications between multiple connected computing devices 800 .
- Each rack may include memory, such as memory 854 and memory 864 , and storage, such as 856 and 866 .
- Storage 856 and 866 may provide mass storage and may include volatile or non-volatile storage, such as network-attacked disks, floppy disks, hard disks, optical disks, tapes, flash memory or other similar solid state memory devices, or an array of devices, including devices in a storage area network or other configurations.
- Storage 856 or 866 may be shared between multiple processors, multiple racks, or multiple computing devices and may include a computer-readable medium storing instructions executable by one or more of the processors.
- Memory 854 and 864 may include, e.g., volatile memory unit or units, a non-volatile memory unit or units, and/or other forms of computer-readable media, such as a magnetic or optical disks, flash memory, cache, Random Access Memory (RAM), Read Only Memory (ROM), and combinations thereof but excluding transitory propagating signals. Memory, such as memory 854 may also be shared between processors 852 a - 852 n . Data structures, such as an index, may be stored, for example, across storage 856 and memory 854 . Computing device 800 may include other components not shown, such as controllers, buses, input/output devices, communications modules, etc.
- An entire system such as system 506 , may be made up of multiple computing devices 800 communicating with each other.
- device 880 a may communicate with devices 880 b , 880 c , and 880 d , and these may collectively be known as system 100 .
- some of the computing devices may be located geographically close to each other, and others may be located geographically distant.
- the layout of system 800 is an example only and the system may take on other layouts or configurations.
- Various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- a programmable processor which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- the systems and techniques described here can be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back end, middleware, or front end components.
- the components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (“LAN”), a wide area network (“WAN”), and the Internet.
- LAN local area network
- WAN wide area network
- the Internet the global information network
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network.
- the relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
Abstract
Description
Option A—{A1} {A2, B1} {B2, C1}=>{Da1, Da2} {Da3, Db1} {Db2, Dc1}; or
Option B—{A1, B1} {A2} {B2, C1}=>{Da1, Da2, Db1} {Da3} {Db2, Dc1}
Option A—{CL1, CL3} {CL2}; or
Option B—{CL1}, {CL2, CL3}
Claims (17)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/713,623 US9053417B2 (en) | 2011-12-21 | 2012-12-13 | Domain level clustering |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201161578565P | 2011-12-21 | 2011-12-21 | |
US13/713,623 US9053417B2 (en) | 2011-12-21 | 2012-12-13 | Domain level clustering |
Publications (2)
Publication Number | Publication Date |
---|---|
US20130166487A1 US20130166487A1 (en) | 2013-06-27 |
US9053417B2 true US9053417B2 (en) | 2015-06-09 |
Family
ID=48655534
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/713,623 Active 2033-09-20 US9053417B2 (en) | 2011-12-21 | 2012-12-13 | Domain level clustering |
Country Status (1)
Country | Link |
---|---|
US (1) | US9053417B2 (en) |
Families Citing this family (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20180101540A1 (en) * | 2016-10-10 | 2018-04-12 | Facebook, Inc. | Diversifying Media Search Results on Online Social Networks |
CN110717036B (en) * | 2018-07-11 | 2023-11-10 | 阿里巴巴集团控股有限公司 | Method and device for removing duplication of uniform resource locator and electronic equipment |
Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20080010291A1 (en) * | 2006-07-05 | 2008-01-10 | Krishna Leela Poola | Techniques for clustering structurally similar web pages |
US20080010292A1 (en) * | 2006-07-05 | 2008-01-10 | Krishna Leela Poola | Techniques for clustering structurally similar webpages based on page features |
US20080294602A1 (en) * | 2007-05-25 | 2008-11-27 | Microsoft Coporation | Domain collapsing of search results |
US20090216708A1 (en) * | 2008-02-22 | 2009-08-27 | Yahoo! Inc. | Structural clustering and template identification for electronic documents |
US20120150867A1 (en) * | 2010-12-13 | 2012-06-14 | International Business Machines Corporation | Clustering a collection using an inverted index of features |
-
2012
- 2012-12-13 US US13/713,623 patent/US9053417B2/en active Active
Patent Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20080010291A1 (en) * | 2006-07-05 | 2008-01-10 | Krishna Leela Poola | Techniques for clustering structurally similar web pages |
US20080010292A1 (en) * | 2006-07-05 | 2008-01-10 | Krishna Leela Poola | Techniques for clustering structurally similar webpages based on page features |
US20080294602A1 (en) * | 2007-05-25 | 2008-11-27 | Microsoft Coporation | Domain collapsing of search results |
US20090216708A1 (en) * | 2008-02-22 | 2009-08-27 | Yahoo! Inc. | Structural clustering and template identification for electronic documents |
US20120150867A1 (en) * | 2010-12-13 | 2012-06-14 | International Business Machines Corporation | Clustering a collection using an inverted index of features |
Also Published As
Publication number | Publication date |
---|---|
US20130166487A1 (en) | 2013-06-27 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11082206B2 (en) | Layout-independent cryptographic stamp of a distributed dataset | |
US10210558B2 (en) | Complex service network ranking and clustering | |
CN103890709B (en) | Key value database based on caching maps and replicates | |
US10679055B2 (en) | Anomaly detection using non-target clustering | |
US11100073B2 (en) | Method and system for data assignment in a distributed system | |
US9734149B2 (en) | Clustering repetitive structure of asynchronous web application content | |
US10713330B2 (en) | Optimized browser render process | |
US11429636B2 (en) | Smart elastic scaling based on application scenarios | |
CN110427364A (en) | A kind of data processing method, device, electronic equipment and storage medium | |
Liu et al. | An improved approach for mining association rules in parallel using Spark Streaming | |
US10366178B2 (en) | Multi-user CAx editing of a model of a design object | |
KR20150121505A (en) | Method and device for data deduplication | |
US9053417B2 (en) | Domain level clustering | |
CN104008116A (en) | File synchronization method and electronic device | |
US10872103B2 (en) | Relevance optimized representative content associated with a data storage system | |
CN107924574B (en) | Smart flip operations for grouped objects | |
Fahey | The democratization of big data | |
US8776253B2 (en) | Authority changing device, generating device, and computer program product | |
CN105095225A (en) | Method and apparatus for obtaining file data | |
CN114331745A (en) | Data processing method, system, program product, medium, and electronic device | |
US9697276B2 (en) | Large taxonomy categorization | |
US11061859B2 (en) | Object creation from hierarchical metadata stored on a storage device | |
US20230401570A1 (en) | Determining an optimum quantity of fractional non-fungible tokens to generate for content and a content exchange | |
KR102172321B1 (en) | Method for data deduplication | |
US10474650B1 (en) | In-place updates for inverted indices |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:HYMAN, JOSHUA MARK;INGRAM, JOEL;REEL/FRAME:030060/0486Effective date: 20130320 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044334/0466Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |