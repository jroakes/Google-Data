US7730074B1 - Accelerated large scale optimization - Google Patents
Accelerated large scale optimization Download PDFInfo
- Publication number
- US7730074B1 US7730074B1 US11/266,592 US26659205A US7730074B1 US 7730074 B1 US7730074 B1 US 7730074B1 US 26659205 A US26659205 A US 26659205A US 7730074 B1 US7730074 B1 US 7730074B1
- Authority
- US
- United States
- Prior art keywords
- condition
- concurrency
- instance
- conditions
- devices
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/951—Indexing; Web crawling techniques
Definitions
- the present invention relates generally to efficiently optimizing multivariate functions created from large data sets and, more particularly, to systems and methods for efficiently optimizing very large logistic regression models used in a ranking function used to rank documents.
- search engines attempt to return hyperlinks to relevant web documents in which a user may be interested.
- Search engines may base their determination of the documents' relevancy on search terms (called a search query) entered by the user as well as additional non-query related features such as geographical location, language, etc.
- the goal of the search engine is to provide links to high quality, relevant results to the user based on the search query and additional information.
- the search engine accomplishes this by matching the terms in the search query to a corpus of pre-stored web documents. Web documents that contain the user's search terms are “hits” and are returned to the user.
- the search engine often ranks the documents using a ranking function based on the documents' perceived relevance to the user's search terms. Optimization techniques may be employed in determining this ranking function.
- a system for ranking documents may include a repository configured to store training data that includes a group of features called an “instance”.
- a group of distributed devices may be configured to select a current condition that includes one or more of the features associated with an instance, identify a number of other conditions associated with the instances that are currently being optimized, and determine whether the number of other conditions currently being optimized is less than a predetermined value. When it is determined that the number of other conditions currently being optimized is less than a predetermined value, the group of distributed devices may be further configured to estimate a weight for the current condition.
- a method for optimizing a large data set may include identifying at least one instance in the large data set, the at least one instance including a combination of features.
- a group of conditions may be identified within the large data set, where each of the group of conditions is a subset of the features included within the at least one instance.
- a candidate condition associated with a selected instance may be identified. The candidate condition may be assigned to a designated device among a group of devices. It may be determined whether a number of conditions associated with the selected instance being currently optimized by others of the group of devices is less than a predetermined value.
- a weight associated with the candidate condition may be optimized when it is determined that the number of conditions associated with the selected instance is less than a predetermined value.
- FIG. 1 is a diagram of an exemplary information retrieval network in which systems and methods consistent with principles of the invention may be implemented;
- FIG. 2 is a diagram of an exemplary model generation system according to an implementation consistent with principles of the invention
- FIG. 3 is an exemplary diagram of a device according to an implementation consistent with principles of the invention.
- FIG. 4 is a diagram of another exemplary model generation system according to an implementation consistent with principles of the invention.
- FIG. 5 is a flowchart of exemplary processing for generating a ranking model according to another implementation consistent with principles of the invention.
- FIG. 6 is a flowchart of exemplary processing for concurrently optimizing data according to yet another implementation consistent with principles of the invention.
- FIG. 7 is a flowchart of exemplary processing for ranking documents according to an implementation consistent with principles of the invention.
- Systems and methods consistent with principles of the invention may be used to rapidly optimize large data sets by enabling concurrent or parallel processing of multiple data elements without an undue risk of divergence.
- the optimized data may be used to generate a ranking model based, at least in part, on prior information retrieval data, such as data relating to users, queries previously provided by these users, documents retrieved based on these queries, and documents that were selected and not selected in relation to these queries.
- FIG. 1 is an exemplary diagram of a network 100 in which systems and methods consistent with principles of the invention may be implemented.
- Network 100 may include multiple clients 110 connected to multiple servers 120 - 140 via a network 150 .
- Network 150 may include a local area network (LAN), a wide area network (WAN), a telephone network, such as the Public Switched Telephone Network (PSTN), an intranet, the Internet, a memory device, another type of network, or a combination of networks.
- PSTN Public Switched Telephone Network
- Clients 110 may include client entities.
- An entity may be defined as a device, such as a wireless telephone, a personal computer, a personal digital assistant (PDA), a lap top, or another type of computation or communication device, a thread or process running on one of these devices, and/or an object executable by one of these devices.
- Servers 120 - 140 may include server entities that gather, process, search, and/or maintain documents in a manner consistent with principles of the invention.
- Clients 110 and servers 120 - 140 may connect to network 150 via wired, wireless, and/or optical connections.
- server 120 may optionally include a search engine 125 usable by clients 110 .
- Server 120 may crawl documents (e.g., web pages) and store information associated with these documents in a repository of crawled documents.
- Servers 130 and 140 may store or maintain documents that may be crawled by server 120 .
- servers 120 - 140 are shown as separate entities, it may be possible for one or more of servers 120 - 140 to perform one or more of the functions of another one or more of servers 120 - 140 .
- two or more of servers 120 - 140 are implemented as a single server. It may also be possible that a single one of servers 120 - 140 is implemented as multiple, possibly distributed, devices.
- a “document,” as the term is used herein, is to be broadly interpreted to include any machine-readable and machine-storable work product.
- a document may include, for example, an e-mail, a web site, a file, a combination of files, one or more files with embedded links to other files, a news group posting, a blog, a web advertisement, etc.
- a common document is a web page. Web pages often include textual information and may include embedded information (such as meta information, images, hyperlinks, etc.) and/or embedded instructions (such as Javascript, etc.).
- a “link,” as the term is used herein, is to be broadly interpreted to include any reference to/from a document from/to another document or another part of the same document.
- FIG. 2 is an exemplary diagram of a model generation system 200 consistent with principles of the invention.
- System 200 may include devices 210 a , 210 b , 210 c , and 210 n (collectively, “devices 210 ”) and a repository 220 .
- Repository 220 may include one or more logical or physical memory devices that may store a large data set (e.g., tens of millions of instances and millions of features) that may be used, as described in more detail below, to create and train a ranking model.
- the data may include information retrieval data, such as query data, user information, and document information, that may be used to create a model that may be used to rank a particular document.
- the query data may include, for example, search terms previously provided by users to retrieve documents.
- the user information may include, for example, Internet Protocol (IP) addresses, cookie information, query languages, and/or geographical information associated with the users.
- IP Internet Protocol
- the document information may include, for example, information relating to the documents presented to the users and the documents that were selected and not selected by the users. In other exemplary implementations, other types of data may alternatively or additionally be stored by repository 220 .
- Device(s) 210 may include any type of computing device capable of accessing repository 220 via any type of connection mechanism. According to one implementation consistent with principles of the invention, system 200 may include multiple devices 210 . According to another implementation, system 200 may include a single device 210 . Device(s) 210 may correspond to or be included within one or more of servers 120 - 140 .
- FIG. 3 is an exemplary diagram of a device 300 according to an implementation consistent with principles of the invention.
- Device 300 may correspond to one or more of clients 110 , servers 120 - 140 , and device(s) 210 .
- Device 300 may include a bus 310 , a processor 320 , a main memory 330 , a read only memory (ROM) 340 , a storage device 350 , one or more input devices 360 , one or more output devices 370 , and a communication interface 380 .
- Bus 310 may include one or more conductors that permit communication among the components of device 300 .
- Processor 320 may include any type of processor or microprocessor that interprets and executes instructions.
- Main memory 330 may include a random access memory (RAM) or another type of dynamic storage device that stores information and instructions for execution by processor 320 .
- ROM 340 may include a conventional ROM device or another type of static storage device that stores static information and instructions for use by processor 320 .
- Storage device 350 may include a magnetic and/or optical recording medium and its corresponding drive.
- Input device(s) 360 may include one or more mechanisms that permit an operator to input information to device 300 , such as a keyboard, a mouse, a pen, voice recognition and/or biometric mechanisms, etc.
- Output device(s) 370 may include one or more mechanisms that output information to the operator, including a display, a printer, a speaker, etc.
- Communication interface 380 may include any transceiver-like mechanism that enables device 300 to communicate with other devices and/or systems.
- device 300 may perform certain data-related operations. Device 300 may perform these operations in response to processor 320 executing software instructions contained in a computer-readable medium, such as memory 330 .
- a computer-readable medium may be defined as one or more physical or logical memory devices and/or carrier waves.
- the software instructions may be read into memory 330 from another computer-readable medium, such as data storage device 350 , or from another device via communication interface 380 .
- the software instructions contained in memory 330 causes processor 320 to perform processes that will be described later.
- hardwired circuitry may be used in place of or in combination with software instructions to implement processes consistent with principles of the invention.
- implementations consistent with principles of the invention are not limited to any specific combination of hardware circuitry and software.
- the set of data in repository 220 may include multiple elements, called instances. It may be possible for repository 220 to store more than 50 million instances. Each instance may include a triple of data: (u, q, d), where u refers to user information, q refers to query data provided by the user, and d refers to document information relating to documents retrieved as a result of the query data and which documents the user selected and did not select.
- these features may include one or more of the following: the country in which user u is located, the time of day that user u provided query q, the language of the country in which user u is located, each of the previous three queries that user u provided, the language of query q, the exact string of query q, the word(s) in query q, the number of words in query q, each of the words in document d, each of the words in the Uniform Resource Locator (URL) of document d, the top level domain in the URL of document d, each of the prefixes of the URL of document d, each of the words in the title of document d, each of the words in the links pointing to document d, each of the words in the title of the documents shown above and below document d for query q, the number of times a word in query q matches a word in document d, the number of times user u has previously accessed document d,
- a feature-to-instance index may be generated that links features to the instances in which they are included. For example, for a given feature f, the set of instances that contain that feature may be listed. The list of instances for a feature f is called the “hitlist for feature f.” Thereafter, given a set of features f 0 , . . . , f n , the set of instances that contains those features can be determined by intersecting the hitlist for each of the features f 0 , . . . , f n .
- Other information may also be determined for a given (u, q, d). This information may include, for example, the position that document d was provided within search results presented to user u for query q, the number of documents above document d that were selected by user u for query q, and a score (“old score”) that was assigned to document d for query q. The old score may have been assigned by search engine 125 or by another search engine.
- a ranking model may be created from this data.
- the model uses the data in repository 220 as a way of evaluating how good the model is.
- the model may include rules that maximize the log likelihood of the data in repository 220 .
- the model may be a logistic model.
- the general idea of the model is that, given a new (u, q, d), the model may predict whether user u will select a particular document d for query q. As will be described in more detail below, this information may be used to rank document d for query q and user u.
- a prior probability of selection may be determined. This “prior” probability of selection may provide the initial probability of document selection without considering any of the features. It uses the position, the old score, and the number of selections of documents above this document.
- a set of instances based on the same or a different set of instances may be used as “training data” D.
- its features f 0 , f 1 , . . . , f n
- f o may be the feature corresponding to “the word ‘tree’ appears in the query.”
- the feature f 0 may include a boolean value, such that if “tree” appears in query q then the value of f 0 is one, otherwise the value of f 0 is zero.
- the features may include discrete values. It may be assumed that many of the features will have values of zero.
- each instance may store only features that have non-zero values. Therefore, for each instance (u, q, d), the following information is available: 1.) its set of features, 2.) whether document d was selected by user u for query q, and 3.) its prior probability of selection.
- a “condition” C is a conjunction of various features and possibly their complements.
- a condition that includes two distinct features may be: “tree” is in query q and the domain of document d is “trees.com.”
- an exemplary condition that includes a feature and a complement of a feature may be: “football” is in query q and the user did not provide the query from “www.google.co.uk.” Accordingly, for a given instance (u, q, d), the value of its features may determine the set of conditions C that apply to the instance.
- a “rule” may be defined by a condition C and a weight w, represented as (C, w).
- the ranking model M may include a set of rules (e.g., (C 1 ,w 1 ), (C 2 ,w 2 ), etc.) and a prior probability of selection.
- a function may be created that maps the set of conditions to a probability of selection.
- processing may start with an empty model M that includes the prior probability of selection.
- a candidate condition C may initially be selected.
- candidate conditions may be selected from the training data D. For example, for each instance in the training data D, combinations of features that are present in that instance (or, alternatively, complements of these features) may be chosen as candidate conditions.
- random sets of conditions may be selected as candidate conditions.
- single feature conditions may be considered for candidate conditions.
- existing conditions in the model M may be augmented by adding extra features and these augmented conditions may be considered as candidate conditions.
- a weight w for condition C may then be estimated.
- the weight w may be estimated by attempting to maximize a function of the training data D and the model M, such as the log likelihood of the training data D given the model M augmented with rule (C, w)—that is, find the weight that maximizes Log P(D
- FIG. 4 is an exemplary diagram of a model generation system 400 consistent with principles of the invention.
- System 400 may include devices 410 a , 410 b , and 410 n (collectively, “devices 410 ”), devices 420 a , 420 b , and 420 m (collectively, “devices 420 ”), and a repository 430 .
- Devices 410 - 420 and repository 430 are substantially similar in function to devices 210 and repository 220 described above.
- devices 410 and devices 420 may be configured as a distributed system.
- devices 410 and 420 may, in fact, represent multiple physical machines or may represent multiple processing threads or other types of parallel processing performed on a single or smaller number of physical machines.
- devices 410 and 420 may be capable of communicating with each other and with repository 430 , as illustrated in FIG. 4 .
- devices 410 may each be responsible for a subset of the instances within repository 430 .
- Each instance machine 410 may possibly store its subset of instances in local memory.
- devices 420 e.g., “condition machines” may be responsible for optimizing the various candidate conditions that may apply to each instance and returning the optimized results to instance machines 410 .
- each device 410 and 420 may build its own feature-to-instance index for its subset of instances or conditions.
- each instance (u, q, d) in repository 430 may include or correspond to one or more features. Additionally, each instance may have one or more conditions that apply to it, where the conditions relate to features or combinations of features found in the instance.
- FIG. 5 is a flowchart of exemplary processing for generating a ranking model according to an implementation consistent with principles of the invention. Initially, processing may begin by assigning each instance to one of the instance machines 410 and assigning each condition to one of the condition machines 420 in a sorted manner (act 510 ). It should be noted that multiple instances may be assigned to a single instance machine 410 and multiple conditions may be assigned to a single condition machine 420 .
- a concurrency counter may be initialized indicating the number of concurrently processed conditions depending on the instance (act 512 ).
- a next available condition may then be identified for optimization (act 514 ).
- the concurrency counters associated with each instance related to the condition are checked to determine whether they are each less than a maximum concurrency cap (act 516 ). Because each condition to be optimized may be associated with multiple instances, multiple concurrency counters may need to be examined. In one exemplary implementation, such a concurrency cap may be 2. However, it should be noted that divergence of optimized data may be completely avoided by setting the cap equal to 1.
- the conditions associated with each instance are processed one at a time.
- Increases to the concurrency cap aid in enabling concurrent processing of conditions.
- Such concurrent processing increases the speed in which the optimization is completed.
- increased concurrency may result in an increased risk of divergence.
- the concurrency counter associated with each relevant instance is incremented and the weight associated with the current condition is optimized in the manner set forth above in FIG. 4 (act 518 ).
- optimized weights are passed to instance machines 410 responsible for the associated instances (act 520 ).
- the associated concurrency counters at instance machines 410 may be decremented (act 522 ). The process then returns to act 514 for processing of the next available condition.
- optimization of the models associated with the current condition may be suspended (act 524 ).
- a message may be sent to each condition machine 420 indicating that processing of the current condition has been blocked at the associated instance machine 410 (act 526 ). The message and any processing to create it may be at low priority.
- This notification serves to inform each condition machine 420 that all conditions prior to the current condition in the sorted list of conditions have either been processed by the instance machine 410 sending the message or are not associated with the instance being processed by the instance machine 410 sending the message. Accordingly, any other instance machine waiting for input from the condition machine sending the message relating to a condition below the current condition may determine the message to be an indication that the instance machine sending the message is not providing information regarding any other condition.
- the process then returns to act 516 where it is again determined whether the applicable concurrency counters are at least one less than the concurrency cap.
- return of optimized values for conditions serve to decrement the concurrency counters associated with the condition currently being processed.
- adherence to the concurrency cap significantly reduces the likelihood that the processing of correlated or interacting conditions may result in an optimization deadlock.
- determining whether applicable counters are at least one less than the concurrency cap may be performed concurrently with the act of sending messages indicating that processing of the current condition has been blocked (act 526 ). Moreover, sending messages indicating that processing of the current condition has been blocked may cease as soon as applicable counters are less than the concurrency cap.
- conditions c 1 and c 3 apply to instance i 1 and conditions c 2 and c 4 apply to instance i 2 .
- conditions c 1 and c 3 may be considered correlated in that each condition depends from or applies to instance i 1 .
- conditions c 2 and c 4 may be considered correlated in that each condition depends from or applies to instance i 2 .
- the concurrency cap for this example is 1, meaning that no more than one condition relating to an instance may be optimized at any one time.
- FIG. 6 is a flow chart of exemplary processing for generating a concurrently optimizing data in the system 400 of the present example.
- instance machine 410 a begins by incrementing its concurrency counter to 1 and processing condition c 1 , resulting in instance machine 410 a sending information for optimizing condition c 1 to condition machine 420 a responsible for optimizing condition c 1 (act 610 ).
- instance machine 410 b begins incrementing its concurrency counter to 1 and sending information for optimizing condition c 2 to condition machine 420 b responsible for optimizing condition c 2 (act 612 ).
- condition machine 420 a Upon receipt of the information for optimizing condition c 1 from instance machine 410 a , condition machine 420 a waits to perform optimization of c 1 until it hears from instance machine 410 b , in case the instance under process by instance machine 410 b also applies to instance c 1 (act 614 ). Similarly, upon receipt of the information for optimizing condition c 2 from instance machine 410 b , condition machine 420 b waits to perform optimization of c 2 until it hears from instance machine 410 a , in case the instance under process by instance machine 410 a also applies to instance c 2 (act 616 ).
- instance machine 410 a awaits an optimized weight for condition c 1 , it considers processing condition c 3 . However, instance machine 410 a determines that the concurrency cap for instance i 1 has been reached, since condition c 1 also associated with instance i 1 is currently being optimized (act 618 ). Accordingly, as described above, instance machine 410 a sends a message to condition machines 420 a and 420 b indicating that it is blocked at condition c 3 (act 620 ).
- condition machine 420 b Upon receipt of this message, condition machine 420 b determines that it no longer needs to wait for input from instance machine 410 a relating to condition c 2 , since c 3 (the current stopping point) is greater than (i.e., after) condition c 2 (act 622 ). Accordingly, condition machine 420 b then finalizes optimization of condition c 2 (act 624 ) and sends its optimized weight back to instance machine 410 b (act 626 ).
- Instance machine 410 b Upon receipt of the optimized weight for condition c 2 the concurrency counter is decremented (act 628 ). Instance machine 410 b then processes the next available condition c 4 associated with its instance i 2 by sending an information for optimizing condition c 4 to condition machine 420 a responsible for optimizing condition c 4 (act 630 ). Condition machine 420 a then determines that it no longer needs to wait for instance machine 410 b to process condition c 1 and finalizes optimization of condition c 1 since condition c 4 is greater than (i.e., after) condition c 1 and that condition c 1 is associated with instance machine 410 a (act 632 ).
- Condition machine 420 a then sends an optimized weight for condition c 1 back to instance machine 410 a (act 634 ). Upon receipt of the optimized weight for condition c 1 the concurrency counter associated with instance i 1 is decremented (act 636 ).
- condition machine 410 a Upon decrementing the concurrency counter associated with instance i 1 , condition machine 410 a is unblocked regarding condition c 3 . Information for optimizing condition c 3 is then sent to condition machine 420 b (act 638 ). Condition machine 420 b processes condition c 3 and finalizes optimization of condition c 3 (act 640 ). Condition machine 420 b then sends an optimized weight for condition c 3 back to instance machine 410 a (act 642 ). It should be noted that condition c 4 must wait until it is determined whether instance machine 410 a has any instances to which condition c 4 may apply. This determination is made upon receipt of a message about condition c 4 from instance machine 410 a or a message from instance machine 410 a regarding a later condition. As discussed above, a message regarding a later condition indicates that instance machine 410 a does not apply to condition c 4 and that processing may continue.
- instance machine 410 a does not affect condition c 4 and there are no late instances. Accordingly, instance machines 410 a and 410 b send a message to condition machines 420 a and 420 b indicating that they have no more instances (act 644 ). In this way, any remaining conditions may be optimized.
- FIG. 7 is a flowchart of exemplary processing for ranking documents according to an implementation consistent with principles of the invention. Processing may begin with a user providing one or more search terms as a search query for searching a document corpus.
- the document corpus is the Internet and the vehicle for searching this corpus is a search engine, such as search engine 125 ( FIG. 1 ).
- the user may provide the search query to search engine 125 via web browser software on a client, such as client 110 ( FIG. 1 ).
- Search engine 125 may receive the search query and act upon it to identify documents (e.g., web pages) related to the search query (acts 710 and 720 ).
- documents e.g., web pages
- One such technique might include identifying documents that contain the one or more search terms as a phrase.
- Another technique might include identifying documents that contain the one or more search terms, but not necessarily together.
- Other techniques might include identifying documents that contain less than all of the one or more search terms, or synonyms of the one or more search terms. Yet other techniques are known to those skilled in the art.
- Search engine 125 may then score the documents based on the ranking model described above (act 730 ). With regard to each document, search engine 125 may identify a new instance (u, q, d) that corresponds to this user search, where u refers to the user, q refers to the search query provided by the user, and d refers to the document under consideration. Search engine 125 may extract the features from the new instance and determine which rules of the ranking model apply. Search engine 125 may then combine the weight of each rule with the prior probability of selection for (u, q, d) to determine the final posterior probability of the user u selecting this document d for query q. Search engine 125 may use the final posterior probability as the score for the document. Alternatively, search engine 125 might use the final posterior probability as one of multiple factors in determining the score of the document.
- Search engine 125 may sort the documents based on their scores (act 740 ). Search engine 125 may then formulate search results based on the sorted documents (act 750 ).
- the search results may include references to the documents, such as links to the documents and possibly a textual description of the links.
- the search results may include the documents themselves. In yet other implementations, the search results may take other forms.
- Search engine 125 may provide the search results as a HyperText Markup Language (HTML) document, similar to search results provided by conventional search engines. Alternatively, search engine 125 may provide the search results according to a protocol agreed upon by search engine 125 and client 110 (e.g., Extensible Markup Language (XML)).
- HTTP HyperText Markup Language
- client 110 e.g., Extensible Markup Language (XML)
- Search engine 125 may further provide information concerning the user, the query provided by the user, and the documents provided to the user to help improve the ranking model.
- server 120 may store this information in repository 220 (or repository 430 ) or provide it to one of devices 210 (or devices 410 and/or 420 ) to be used as training data for training the model.
- a concurrency counter or counters may be used to limit the number of concurrently optimized variables.
Abstract
Description
Claims (25)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/266,592 US7730074B1 (en) | 2005-11-04 | 2005-11-04 | Accelerated large scale optimization |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/266,592 US7730074B1 (en) | 2005-11-04 | 2005-11-04 | Accelerated large scale optimization |
Publications (1)
Publication Number | Publication Date |
---|---|
US7730074B1 true US7730074B1 (en) | 2010-06-01 |
Family
ID=42200295
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/266,592 Active 2027-04-21 US7730074B1 (en) | 2005-11-04 | 2005-11-04 | Accelerated large scale optimization |
Country Status (1)
Country | Link |
---|---|
US (1) | US7730074B1 (en) |
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20090182551A1 (en) * | 2006-06-07 | 2009-07-16 | Platformation, Inc. | Methods & Apparatus for Searching with Awareness of Geography and Languages |
US20130311163A1 (en) * | 2012-05-16 | 2013-11-21 | Oren Somekh | Media recommendation using internet media stream modeling |
Citations (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5884077A (en) * | 1994-08-31 | 1999-03-16 | Canon Kabushiki Kaisha | Information processing system and method in which computer with high load borrows processor of computer with low load to execute process |
US6006222A (en) | 1997-04-25 | 1999-12-21 | Culliss; Gary | Method for organizing information |
US6014665A (en) | 1997-08-01 | 2000-01-11 | Culliss; Gary | Method for organizing information |
US6078916A (en) * | 1997-08-01 | 2000-06-20 | Culliss; Gary | Method for organizing information |
US6182068B1 (en) | 1997-08-01 | 2001-01-30 | Ask Jeeves, Inc. | Personalized search methods |
US20060224577A1 (en) * | 2005-03-31 | 2006-10-05 | Microsoft Corporation | Automated relevance tuning |
US20070044101A1 (en) * | 1995-04-18 | 2007-02-22 | Fuji Xerox Co., Ltd. | Job scheduling system for print processing |
US7222127B1 (en) | 2003-11-14 | 2007-05-22 | Google Inc. | Large scale machine learning systems and methods |
-
2005
- 2005-11-04 US US11/266,592 patent/US7730074B1/en active Active
Patent Citations (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5884077A (en) * | 1994-08-31 | 1999-03-16 | Canon Kabushiki Kaisha | Information processing system and method in which computer with high load borrows processor of computer with low load to execute process |
US20070044101A1 (en) * | 1995-04-18 | 2007-02-22 | Fuji Xerox Co., Ltd. | Job scheduling system for print processing |
US6006222A (en) | 1997-04-25 | 1999-12-21 | Culliss; Gary | Method for organizing information |
US6014665A (en) | 1997-08-01 | 2000-01-11 | Culliss; Gary | Method for organizing information |
US6078916A (en) * | 1997-08-01 | 2000-06-20 | Culliss; Gary | Method for organizing information |
US6182068B1 (en) | 1997-08-01 | 2001-01-30 | Ask Jeeves, Inc. | Personalized search methods |
US6539377B1 (en) | 1997-08-01 | 2003-03-25 | Ask Jeeves, Inc. | Personalized search methods |
US7222127B1 (en) | 2003-11-14 | 2007-05-22 | Google Inc. | Large scale machine learning systems and methods |
US7231399B1 (en) | 2003-11-14 | 2007-06-12 | Google Inc. | Ranking documents based on large data sets |
US20060224577A1 (en) * | 2005-03-31 | 2006-10-05 | Microsoft Corporation | Automated relevance tuning |
Non-Patent Citations (9)
Title |
---|
"Click Popularity-DirectHit Technology Overview"; http://www.searchengines.com/directhit.html; Nov. 10, 2003 (print date); 2 pages. |
"Quickly Generating Billion-Record Synthetic Databases," Gray, Jim; Sundaresan, Prakash; Englert, Susanne; Baclawski, Ken; Weinberger, Paul; Proceedings of the 1994 ACM SIGMOD international conference on Management of data; pp. 243-252, 1994. * |
A.Y. Ng and M.I. Jordan; "On Discriminative vs. Generative classifiers: A comparison of logistic regression and naïve Bayes," in T. Dietterich, S. Becker and Z. Ghahramani (eds.), Advances in Neural Information Processing Systems 14, Cambridge, MA: MIT Press, 2002. |
Co-pending U.S. Appl. No. 10/697,333 entitled "Automatic Completion of Fragments of Text", by Georges R. Harik, et al.; filed Oct. 31, 2003. |
Co-pending U.S. Appl. No. 10/712,263; Jeremy Bem et al.; "Targeting Advertisements Based on Predicted Relevance of the Advertisements"; filed Nov. 14, 2003, 40 pages. |
Co-pending U.S. Appl. No. 10/734,584; Jeremy Bem et al.; "Large Scale Machine Learning Systems and Methods"; filed Dec. 15, 2003, 35 pages. |
F. Crestani, M. Lalmas, C. Van Rijsbergen and I. Campbell; ""Is This Document Relevant?. . . Probably": A Survey of Probabilistic Models in Information Retrieval"; ACM Computing Surveys, vol. 30, No. 4, Dec. 1998. |
J.H. Friedman, T. Hastie, and R. Tibshirani; "Additive Logistic Regression: a Statistical View of Boosting"; Dept. of Statistics, Stanford University Technical Report; Aug. 20, 1998. |
Justin Boyan et al.; "A Machine Learning Architecture for Optimizing Web Search Engines"; Carnegie Mellon University; May 10, 1996; pp. 1-8. |
Cited By (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20090182551A1 (en) * | 2006-06-07 | 2009-07-16 | Platformation, Inc. | Methods & Apparatus for Searching with Awareness of Geography and Languages |
US7974972B2 (en) * | 2006-06-07 | 2011-07-05 | Platformation, Inc. | Methods and apparatus for searching with awareness of geography and languages |
US8838632B2 (en) * | 2006-06-07 | 2014-09-16 | Namul Applications Llc | Methods and apparatus for searching with awareness of geography and languages |
US20130311163A1 (en) * | 2012-05-16 | 2013-11-21 | Oren Somekh | Media recommendation using internet media stream modeling |
US9582767B2 (en) * | 2012-05-16 | 2017-02-28 | Excalibur Ip, Llc | Media recommendation using internet media stream modeling |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10152520B1 (en) | Ranking documents based on user behavior and/or feature data | |
US9639579B2 (en) | Determination of a desired repository for retrieving search results | |
US8082244B2 (en) | Systems and methods for determining document freshness | |
US10055461B1 (en) | Ranking documents based on large data sets | |
US8566788B2 (en) | Predictive prefetching to improve parallelization of data retrieval subtasks | |
US7447684B2 (en) | Determining searchable criteria of network resources based on a commonality of content | |
US9569504B1 (en) | Deriving and using document and site quality signals from search query streams | |
US8977630B1 (en) | Personalizing search results | |
JP2011238276A (en) | Ranking blog documents | |
US9477715B1 (en) | Personalizing aggregated news content | |
US8122013B1 (en) | Title based local search ranking | |
US7730074B1 (en) | Accelerated large scale optimization | |
US8595225B1 (en) | Systems and methods for correlating document topicality and popularity |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE, INC.,CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:STOUTAMIRE, DAVID;REEL/FRAME:017443/0240Effective date: 20051230 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
CC | Certificate of correction | ||
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044101/0610Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552)Year of fee payment: 8 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 12TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1553); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 12 |