US9697475B1 - Additive context model for entity resolution - Google Patents
Additive context model for entity resolution Download PDFInfo
- Publication number
- US9697475B1 US9697475B1 US14/138,606 US201314138606A US9697475B1 US 9697475 B1 US9697475 B1 US 9697475B1 US 201314138606 A US201314138606 A US 201314138606A US 9697475 B1 US9697475 B1 US 9697475B1
- Authority
- US
- United States
- Prior art keywords
- entity
- context
- model
- span
- probability
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N20/00—Machine learning
-
- G06N99/005—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N7/00—Computing arrangements based on specific mathematical models
- G06N7/01—Probabilistic graphical models, e.g. probabilistic networks
Definitions
- Data graphs store data and rules that describe knowledge about the data in a form that provides for deductive reasoning.
- Data graphs often store entities, such as people, places, things, concepts, etc., as nodes. Relationships between entities may be the edges between nodes.
- the relationships and entities in the data graph can represent facts. For example, the entities “Maryland” and “United States” may be linked by the edges of “in country” and/or “has state.” Identifying entities mentioned in text is a key step in many language-processing tasks, such as text classification, information extraction, and grounded semantic extraction. It may also assist tasks such as part-of-speech tagging, parsing, and coreference resolution. But entity resolution can be challenging because the same text may refer to multiple entities.
- Newcastle may refer to Newcastle upon Tyne, UK, to the football (soccer) club Newcastle United, or to the beverage Newcastle Brown Ale.
- Context may assist in disambiguating the referring text. For example, if the referring text includes the context of “John plays for Newcastle,” the mention is most likely the football club, while “John was born in Newcastle” most likely refers to the location, etc.
- Models are often used in entity resolution. Models predict the probability of some event given observations. Machine learning algorithms can be used to train the parameters of the model. For example the model may store a set of features and a support score for each of a plurality of different entities. The support score represents a probability score the model has learned, a probability that the feature occurs given the entity. Models used in entity resolution have relied on three components: a mention model, a context model, and a coherency model.
- the mention model represents the prior belief that a particular phrase refers to a particular entity in the data graph.
- the context model infers the most likely entity for a mention given the textual context of the mention.
- each feature can represent a phrase that is part of the context for the entity mention.
- the phrase “president” may have a support score (or a probability score) for the entities of “Barack Obama,” “Bill Clinton,” “Nicolas Sarkozy,” and many others.
- the phrase “plays for” may have a support score for various bands, teams, etc.
- the context discussed above may be represented by a set of features, or phrases, co-occurring with (e.g., occurring around) the referring text, or entity mention.
- the coherency model attempts to force all the referring expressions in a document to resolve to entities that are related to each other in the data graph. But a coherency model introduces dependencies between the resolutions of all the mentions in a document and requires that the relevant entity relationships in the data graph be available at inference time, increasing inference and model access costs.
- Some implementations provide for entity resolution using a model that combines contextual support scores additively to reduce overconfidence from correlated features in a machine learned model. For example, a system may determine the support scores for the entity mention given a particular set of features and calculate an average of the support scores. If the average of the support scores does not meet a threshold, the system may indicate that the entity mention could not be resolved to an existing entity.
- the additive model is a parametric model that can supplement labeled training data with a large unlabeled text corpus to achieve a model with better accuracy. For example, the system may use labeled data to train the model and then use the model to label additional unlabeled data.
- the system can re-estimate the parameters of the model to determine if training is complete. If the re-estimated parameters converge with the model parameters, training is complete. Otherwise, the system may alternate training the model using the labeled and now-labeled, previously unlabeled data until convergence. Because the additional training may generate a large model, inference for the learned resolution model can be distributed across many servers by entity.
- a computer system includes at least one processor, and memory storing a graph-structured knowledge base of entities connected by relationships and instructions that, when executed by the at least one processor, causes the computer system to perform operations.
- the operations can include receiving a span of text from a document and a quantity of phrases from the document for the span, the phrases representing a context for the span and determining that the span refers to a quantity of candidate entities from the knowledge base.
- the method may also include, for each candidate entity, providing the entity and the phrases as input to an additive context model, the context model having been trained to provide a support score for an entity-phrase pair, receiving one or more support scores from the additive context model for the entity, computing a first probability for the entity by adding the support scores together and dividing by the quantity of phrases, the first probability representing a likelihood that the context resolves to the entity, receiving a second probability representing a likelihood that the span resolves to the entity regardless of context, and computing a third probability for the entity by combining the first probability with the second probability.
- the method may also include resolving the span to a candidate entity that has a highest third probability.
- a phrase in the quantity of phrases is a noun phrase from the document.
- the document is the text of a query.
- the computer system may comprise a plurality of entity servers and the context model may be partitioned across the entity servers based on entity.
- the operations may also include receiving a plurality of spans from the document, each span being associated with a respective context, determining entity servers associated with candidate entities for each of the spans, sending respective requests to the determined entity servers, each request causing a recipient entity server to provide input to its portion of the additive context model and compute the first probability based on support scores provided by the model, and receiving the first probabilities from the entity servers.
- the operations may include training the additive context model using labeled data, using the trained additive context model on unlabeled data, resulting in labeling the unlabeled data, wherein each label assigned by the additive context model has an associated confidence score, and using data associated with labels having confidence scores that meet a threshold to re-train the context model.
- training the context model may include repeating using the trained context model on unlabeled data and re-training the context model until convergence.
- the instructions when the highest third probability does not meet a confidence threshold, include instructions that, when executed by the at least one processor, cause the system to resolve the span to an entity representing entities unknown to the knowledge base.
- a computer-implemented method includes receiving a span of text from a document, receiving a phrase vector for the span, the phrase vector having a quantity of features and representing a context for the span, and determining, using at least one silicone-based hardware processor, a quantity of candidate entities from a knowledge base that have been referred to by the span. For each of the quantity of candidate entities the method may include determining, using the at least one silicone-based hardware processor, a support score for the candidate entity for each feature in the phrase vector, combining, using the at least one silicone-based hardware processor, the support scores additively, and computing, using the combined support score, a probability that the span resolves to the candidate entity given the context. The method may also include resolving the span to a candidate entity with a highest probability. In some implementations, the combining is done by multiplication.
- the method may include resolving the span to an entity representing entities unknown to the knowledge base.
- the resolving may be performed without a full coherency model.
- the features of the phrase vector can include noun phrases from the document and phrases coreferential with the span of text.
- combining the support scores additively can include computing a sum of the support scores for the candidate entity and dividing the sum by the quantity of features.
- the support score is stored in a context model that is partitioned across a plurality of entity servers, the partitioning being based on entity.
- the probability is a first probability and the method can further include, for each candidate entity, combining the first probability with a second probability, the second probability representing a prior belief that the span refers to the candidate entity.
- the resolving may include resolving the span to the candidate entity with a highest combined probability.
- the combining and calculating is performed according to the equation
- q m , e ⁇ k ⁇ b m , k ⁇ r k , e ⁇ k ⁇ b m , k , which determines the probability q for a particular candidate entity e and a phrase vector b of features k for mention m.
- a computer system in another aspect, includes at least one processor formed in a substrate and memory storing instructions that, when executed by the at least one processor, cause the computer system to perform operations.
- the operations may include providing labeled data to an additive context model for training, the additive context model inferring a most likely entity for a mention given a context of the mention.
- the additive context model may store, for each feature, at least one support score-entity pair.
- the operations may also include generating labels for unlabeled data using the trained model, the unlabeled data comprising entity mentions with respective phrase vectors, and where each label generated by the additive context model was based on additively combining support scores, and re-training the model using the generated labels for the unlabeled data and the labeled data.
- the operations may also include re-estimating the support scores of the context model after generating the labels, determining whether the re-estimated support scores converge with the support scores of the model, and performing the re-training and repeat generating the labels when the re-estimated support scores do not converge with the support scores of the model.
- re-estimating the support scores of the context model after iteration u may be performed according to the equation
- r f , e ( u ) ⁇ i ⁇ L ⁇ U ⁇ b i , f ⁇ q i , e ( u ) ⁇ i ⁇ L ⁇ U ⁇ b i , f , where r is the support score of feature f for entity e, i is the entity mention from the set of labeled data L and the set of unlabeled data U, b is the phrase vector for mention i and q is a context posterior from generating the labels in iteration u.
- each generated label may have an associated confidence score and the operations may include using generated labels that meet a confidence threshold to re-train the model.
- a non-transitory computer-readable medium may include instructions executable by at least one processor that cause a computer system to perform one or more of the methods described above.
- the method improves entity resolution without a full coherency component.
- an implementation using an additive contextual model can cluster mentions in a document using a simple coreference algorithm and resolve each cluster independently of the resolution of the other clusters, saving time and processing costs.
- additive context models can expand the model using semi-supervised training.
- the expanded model increases accuracy of entity disambiguation, rather than negating the use of the context component, as has been observed with multiplicative context models.
- the feature correlations of the multiplicative context models produce bad results in a semi-supervised setting, reducing or eliminating the possibility of such a method of expanding a multiplicative model.
- the additive context model can be used for any problem with context features are correlated rather than independent.
- the model is also distributable, allowing the model to scale up to billions of entities.
- FIG. 1 illustrates an example system in accordance with the disclosed subject matter.
- FIG. 2 illustrates an example of entities and relationships in a data graph and text with an ambiguous entity mention.
- FIG. 3 illustrates a flow diagram of an example process for entity disambiguation using an additive context model, in accordance with an implementation.
- FIG. 4 illustrates a flow diagram of an example process for determining an additive context posterior, in accordance with an implementation.
- FIG. 5 illustrates a flow diagram of an example process for semi-supervised training of the model, according to an implementation.
- FIG. 6 shows an example of a computer device that can be used to implement the described techniques.
- FIG. 7 shows an example of a distributed computer device that can be used to implement the described techniques.
- FIG. 1 is a block diagram of an entity disambiguation system in accordance with an example implementation.
- the system 100 may be used to disambiguate entity mentions in text using an additive context model.
- the system 100 may also be used to train an additive context model using semi-supervised learning, greatly enhancing the accuracy of the context model.
- the system 100 can disambiguate entity mentions in web pages, queries, email, posts on a social network, or any other document with text.
- a document is any associated text, whether short, like a query or email, or longer, like a PDF or web page.
- system 100 in FIG. 1 is described as a system for disambiguating documents, other configurations and applications may be used.
- the system may be used in any circumstance where context features can be correlated rather than independent.
- the entity disambiguation system 100 may be a computing device or devices that take the form of a number of different devices.
- the system 100 may be a standard server, a group of such servers, a client-server system, or a rack server system.
- system 100 may be implemented in a personal computer, for example a laptop computer.
- the entity disambiguation system 100 may be an example of computer device 600 , as depicted in FIG. 6 , or computer device 700 , as depicted in FIG. 7 .
- the entity disambiguation system 100 may include a data graph 124 .
- the data graph 124 can be a directed edge-labeled graph. Such a data graph stores nodes and edges.
- the nodes in the data graph represent an entity, such as a person, place, item, idea, topic, abstract concept, concrete element, other suitable thing, or any combination of these.
- Entities in the data graph may be related to each other by edges, which represent relationships between entities.
- the data graph may have an entity that corresponds to the musician George Harrison and the data graph may have an albums relationship between the George Harrison entity and entities representing albums that George Harrison has released.
- a data graph with a large number of entities and even a limited number of relationships may have billions of connections.
- data graph 124 may be stored in an external storage device accessible from system 100 .
- the data graph 124 may be distributed across multiple storage devices and/or multiple computing devices, for example multiple servers.
- the entity disambiguation system 100 can include one or more processors (e.g., silicon-based hardware processors) configured to execute one or more machine executable instructions or pieces of software, firmware, or a combination thereof.
- the entity disambiguation system 100 can also include an operating system and one or more computer memories, for example, a main memory, configured to store one or more pieces of data, either temporarily, permanently, semi-permanently, or a combination thereof.
- the memory may include any type of storage device that stores information in a format that can be read and/or executed by the one or more processors.
- the memory may include volatile memory, non-volatile memory, or a combination thereof, and store modules that, when executed by the one or more processors, perform certain operations. In some implementations, the modules may be stored in an external storage device and loaded into the memory of system 100 .
- the modules may include an entity resolution engine 110 and a training engine 114 .
- the entity resolution engine 110 may use an additive context model 122 and a mention model 123 to disambiguate an entity mention in a document.
- the entity resolution engine 110 may disambiguate documents from crawled document sources, such as crawled documents 120 .
- crawled documents 120 Such disambiguated entities may be used, for example, to automatically generate new entities and/or new edges between entities in the data graph 124 , to add mark-up to the crawled document to relate the entities in the document to an entity in the data graph 124 , to refine a search result generated from the crawled documents 120 , etc.
- the crawled documents 120 may be documents obtained using known or later developed web-crawling techniques, for example.
- the crawled documents 120 represent documents available over the Internet.
- the crawled documents 120 may be indexed in an index used by a document search engine.
- the additive context model 122 may include a machine learning module that infers the most likely entity given a context vector. In making the inference, the machine learning module may combine context support scores additively, as will be explained in more detail below.
- the additive context model 122 may also include a model of features that each have associated entity support scores.
- a feature represents a context phrase and each feature may have one or more associated support scores.
- a phrase may be any portion of text from the document.
- phrases may be other entity mentions (e.g., topical noun phrases) from anywhere in the document, phrases found to be coreferential with an entity mention, words in a sentence that includes the entity mention, etc.
- Each support score may represent a vote for a particular entity given the feature.
- the support score represents a probability of the particular entity occurring given the context phrase (the feature).
- Each feature can have support scores for multiple entities, e.g., a number of entities that are possible given the context. For example, the feature “President” may have a support score for the entity Barack Obama as well as the entities Bill Clinton, Ronald Reagan, Abraham Lincoln, Nicolas Sarkozy, etc. If a feature does not have a support score for a particular entity, its vote may be considered zero for the entity.
- the additive context model 122 may be distributed amongst a plurality of entity servers.
- the feature of “President” may be distributed amongst two or more entity servers, so that a first entity server stores the support scores for Barack Obama and Nicolas Sarkozy, a second entity server stores the support score for Abraham Lincoln, and a third entity server stores the support scores for Ronald Reagan and Bill Clinton.
- the system may include a client that stores a list mapping an entity to an entity server.
- the client knows that all features that have a support score for Barack Obama are on the first entity server, all the features that have a support score for Ronald Reagan are on the third entity server, etc.
- the entity assignment may be based on entity clusters.
- entities with a similar text representation may be clustered together.
- the musician George Harrison and the vice president of Nintendo George Harrison may both be assigned to the third entity server, for example.
- entity clustering criteria may be used, such as a hash of the text or of an entity identifier, etc.
- the entity resolution engine 110 may be based on a na ⁇ ve Bayes resolution model with the assumption that a mention's phrase and its context are conditionally independent given the entity mentioned. This may be represented by the following equation:
- E is the possible entity from the data graph
- W is the text span representing the entity mention
- C is the context vector of the span of text (e.g. all the phrases that make up the context).
- p(E) is the probability of the entity E occurring independent of the span of text or the context
- W) is the probably of the span of text W referring to the entity E
- C) is the probability of the entity occurring given the context vector, regardless of the span of text.
- W) may be provided by an entity mention model, such as model 123 .
- p(E) may be provided to the entity resolution engine, for example, from statistics about the knowledge graph or estimated from other publicly available knowledge sources, such as WIKIPEDIA or FREEBASE. In some implementations, p(E) may be determined by marginalizing out W from p(E,W).
- a context model may provide p(E
- the additive context model 122 may provide support scores in a vector r k ⁇ that represent scores for candidate entities from the data graph given the observed feature k.
- r k,j is the vote for entity j by feature k.
- r k,j is a support score for feature k.
- the contextual posterior probability vector over entities may be computed for each mention i, written as q i ⁇ .
- the contextual posterior q i,j is the probability that mention i resolves to entity j given just i's textual context.
- the r and q parameters may be linked with the joint loss function:
- L ⁇ ( r , q ) ⁇ i ⁇ ⁇ k ⁇ b i , k ⁇ ⁇ j ⁇ ( q i , j - r k , j ) 2
- b i,k is the phrase vector (e.g. the features that represent the context of the mention i).
- the loss measures the disagreement between the fractional assignment of entities to mentions as given by q and the sum of the votes r for the same entities from the context features for the same mentions.
- the system may solve for the minimum loss with respect to q.
- the system may solve for the minimum with respect to r.
- the modules of system 100 may also include training engine 114 .
- the training engine 114 may be configured to use semi-supervised learning to train and expand the additive context model 122 .
- the training engine 114 may use labeled mentions 121 as positive examples of features that co-occur with particular entities.
- the labeled mentions 121 may represent spans of text that are entity mentions labeled with respective entities from the data graph 124 that the span refers to.
- the labeled mentions 121 may also include phrases representing context features for the entity. Such labeled mentions are positive examples, allowing the model to infer the support scores for the features that occur with respective entities.
- the labeled mentions 121 may also include negative examples, e.g., entity mentions that allow the model to infer what context phrases does not occur with an entity.
- the machine learning module of additive context model 122 uses the labeled mentions 121 to generate the features and the corresponding support scores of the model 122 .
- the number of labeled mentions 121 is generally limited, either because it is generated manually or because documents that can be used to generate automatically labeled mentions are limited.
- the training engine 114 may use semi-supervised learning to expand the model 122 . For example, after the model 122 has been trained with labeled mentions 121 , the training engine 114 may run unlabeled mentions through the model, with the model 122 providing labels for the unlabeled data. The labels provided by the model, if provided with sufficient confidence, can be used as labeled mentions to train the model. This may continue (training followed by application of the trained model) until convergence in the model parameters (e.g., the support scores), as discussed in more detail below with regard to FIG. 5 .
- the model parameters e.g., the support scores
- the modules may also include a search engine (not shown).
- the search engine may receive queries, identify an entity mention in the query, and use the entity resolution engine 110 to disambiguate the entity mention in the query, if needed. Using the disambiguated entity mention the search engine may generate a search result from the data graph 124 and/or from crawled documents 120 . As another example, the search engine may determine crawled documents 120 that are responsive to a query and use entity mentions in the responsive documents to generate a search result. For example, the search engine may examine responsive documents for entity mentions, use the entity resolution engine 110 for disambiguation if needed, and use the entity mentions to generate snippets, to re-rank the results, etc. In some implementations, the search engine may provide the search result to another search engine or other module for combination with search results from other sources.
- Entity disambiguation system 100 may be in communication with client(s) 180 over network 160 .
- Clients 180 may allow a user to monitor and direct the training of the additive context model 122 , to submit queries to a search engine that uses entity resolution engine 110 , or to verify and analyze entity mentions inferred by the entity resolution engine 110 .
- Network 160 may be, for example, the Internet, or the network 160 can be a wired or wireless local area network (LAN), wide area network (WAN), etc., implemented using, for example, gateway devices, bridges, switches, and/or so forth. Via the network 160 , the entity disambiguation system 100 may communicate with and transmit data to/from clients 180 .
- entity disambiguation system 100 may be in communication with or include other computing devices that provide updates to the data graph 124 and/or to the crawled documents 120 .
- entity disambiguation system 100 may include or be in communication with an indexing engine that crawls web server(s) 190 for documents and indexes the contents of the documents.
- the entity disambiguation system 100 represents one example configuration and implementations may incorporate other configurations.
- some implementations may combine one or more of the entity resolution engine 110 , the training engine 114 , and a search engine into a single module or engine.
- elements of the training engine 114 and the entity resolution engine 110 may be distributed across different computing devices.
- the elements of the entity resolution engine 110 may be distributed across a client computing device and one or more entity servers that store the additive context model 122 .
- FIG. 2 illustrates an example of entities and relationships in a data graph and text with an entity mention and context phrases.
- FIG. 2 also illustrates an example additive context model 222 .
- the example data graph 200 illustrates only a few entities and relationships for the sake of brevity and it is understood that the data graph may include millions of entities and relationships.
- the text 250 may be text from a document that is parsed into the text span 255 that represents an entity mention and context phrases 260 , 261 , 262 , and 263 . The parsing of the text can be accomplished using known or later developed semantic-syntactic techniques.
- the result of the parsing may be, the span 255 of text 250 that represents an entity mention, but the mention resolves to more than one entity in the data graph, as illustrated.
- the text span 255 is in need of disambiguation.
- the parsing may also result in a phrase vector for the text span 255 .
- the context of a mention is abstracted as a multiset of features that may include phrases related to the mention by linear order, syntax, or within-document coreference; salient phrases for the whole enclosing document, and other properties of the mention and enclosing document; and other properties of the mention and enclosing document.
- the multiset may be referred to as a phrase vector, and represented as c i,k , where i represents the mention (e.g., 255 ), and k indexes over the features (e.g., 260 , 261 , 262 , and 263 ).
- FIG. 2 also illustrates example features and support scores of a context model 222 .
- the context model 222 includes four features, e.g., ‘revolution’, ‘game boy’, ‘video game’, and ‘future’.
- the features have an associated list of support scores.
- the support score represents a probability for a particular entity or a magnitude of support that feature gives the entity.
- the ‘revolution’ feature has a support score of 0.83 for the George Harrison entity (entity A) in the data graph 200 .
- the ‘video game’ feature has a support score of 0.23 for entity A in the data graph 200 and a support score of 0.74 for the George Harrison entity (entity B) in the data graph 200 .
- FIG. 3 illustrates a flow diagram of an example process 300 for entity disambiguation using an additive context model, in accordance with an implementation.
- Process 300 may be performed by an entity disambiguation system, such as system 100 of FIG. 1 .
- the system may train an additive context model to create context features with associated entity support scores.
- the training may be the semi-supervised learning described below with regard to FIG. 5 .
- the features and associated support scores may be stored in an additive context model and used in process 300 to disambiguate entities. Training of the additive context model must occur at least once before entity resolution can occur. Once the model is established, the system may use the model to disambiguate entities in text of documents.
- Process 300 may begin when the entity resolution engine receives a span of text representing an entity mention ( 305 ).
- the entity resolution engine may also receive a phrase vector representing the context for the span ( 310 ).
- the system may use two types of context features. The first type includes the phrases that a within-document coreference system has determined to be coreferential with the mention. The second type includes all other mention phrases in the document (e.g., other entity mentions).
- These context features may be treated as a set of features for the mention.
- the span of text may be represented by w m and the context may be represented as a phrase vector b m of features b m,k , where k indexes over the features for mention m.
- the entity resolution engine may determine an entity from the data graph that has a non-zero mention prior for the span ( 315 ).
- the non-zero mention prior may be determined from a mention model, such as model 123 of FIG. 1 , and may be referred to as a mention model score.
- the mention model score represents the probability that the entity mention (e.g., the span of text) refers to the entity.
- the system may use an annotated corpus, for example WIKIPEDIA pages, to determine the mention model score. Given the annotated corpus, the system may compute the probability that the mention refers to the entity by counting the number of times the phrase is used to refer to an entity. For example, for each WIKIPEDIA page that represents an entity, anchors of links to the page and their counts may be used to estimate a mention model. Of course, any method of generating a mention model can be used.
- the entity resolution engine may determine an additive context posterior for the entity ( 320 ).
- the context posterior represents the probability that the entity mention m resolves to the entity given just the context of the mention (e.g., the phrase vector b m ).
- the context posterior is an additive context posterior.
- the additive context posterior for a mention m and entity e and a phrase vector b m,k can be represented by the formula
- the entity disambiguation engine may combine the additive context posterior for the entity with the mention model score ( 325 ).
- the mention model score may be the non-zero mention prior for the entity.
- the entity disambiguation engine may multiply the mention model score with the additive context posterior.
- the combined score is an overall score for the entity.
- the overall score may also account for the probability of the entity E occurring independent of the span of text or the context, e.g., p(E).
- the entity disambiguation engine may divide the product of the mention model score and the additive context posterior by p(E) to determine the overall score.
- the system may select the next entity ( 335 ) and use the additive context model to calculate the context posterior for this entity and determine an overall score for this entity.
- the entity resolution engine may determine which entity has the highest overall score and consider that entity to be the inferred entity ( 340 ). However, if the overall score for that entity does not meet a confidence threshold, the system may reject the inferred entity.
- the confidence threshold may be a minimum difference between the highest overall score and the second-highest overall score.
- the system may determine whether the overall score meets a confidence threshold ( 345 ). If it does not ( 345 , No), the system may determine that the entity referred to by the span is not in the data graph, or at least that there is not enough evidence to link it to an entity in the data graph. Accordingly, the system may resolve the entity to NIL, or some other value or entity that represents all entities unknown to the mention model or unknown to the data graph. In some implementations the confidence threshold may be tuned on a development set of data. If the overall score does meet the confidence threshold ( 345 , Yes), the system may resolve the mention to the inferred entity ( 355 ). In some implementations, this may be done by linking the inferred entity to the text span. Process 300 then ends, with the entity resolution engine having resolved the entity mention to an entity in the data graph using an additive context model.
- the system may perform steps 320 and 325 in parallel for each entity. For example, assuming that the text span 255 of FIG. 2 is the entity mention and that a first entity server has support scores for the Harrison Ford entity (entity C), and a second entity server has support scores for the George Harrison entity (entity A) and the George Harrison entity (entity B), the system may perform steps 320 and 325 at the first entity server for entity C and at the second entity server for entities A and B.
- the entity servers may send back the overall scores of several different entities and a client may determine which entity has the highest score.
- the entity servers may only perform step 320 and may send back the context posterior for each entity it services. Of course, other arrangements are also possible.
- FIG. 4 illustrates a flow diagram of an example process 400 for determining an additive context posterior, in accordance with an implementation.
- Process 400 may be performed by an entity disambiguation system, such as system 100 of FIG. 1 , as part of step 320 of FIG. 3 .
- Process 400 determines a context posterior additively rather than multiplicatively.
- entity disambiguation combining context evidence for an entity multiplicatively was surprisingly discovered to be only slightly better than just using the mention prior and, more surprisingly, a larger multiplicative context model was discovered to hurt the performance of the model.
- a multiplicative context model was found not to allow for entity resolution without a full coherency component and would not allow the model to grow with additional features.
- Process 400 may begin by providing the context model with an entity and a phrase vector ( 405 ).
- the phrase vector represents the context features for the entity mention.
- the model may provide support scores for the entity ( 410 ).
- the support scores represent votes for the provided entity given the features.
- the system may add the support scores together and divide by the number of total features in the phrase vector ( 415 ).
- This average of support scores is the additive context posterior for the entity.
- the system may determine whether the additive context posterior meets a threshold ( 420 ).
- the context posterior represents a magnitude of support for the entity. If the magnitude of support is not high enough ( 420 , No), the system may resolve the entity mention to an entity that represents all entities unknown to the data graph ( 425 ).
- Process 400 then ends, having generated an additive context posterior for the particular entity.
- An example of the additive context model follows, using text 250 and model 222 of FIG. 2 .
- the system may be asked to disambiguate the text span 255 “Harrison,” which represents an entity mention in the sentence “Harrison talks about the Revolution, Game Boy Micro, and the future of video games.”
- the text may have three non-zero mention priors from a mention model.
- Harrison may refer to entity A, entity B, or entity C of the data graph 200 .
- Entity A and Entity C may have a much higher mention prior, because the actor Harrison Ford and the musician George Harrison are more well known and thus, mentioned more often, in documents.
- the entity disambiguation system may use the additive context model to determine which of the three possible entities the text span 255 refers to.
- the entity disambiguation system may also receive a phrase vector that includes phrases 260 , 261 , 262 , and 263 . In some implementations, these phrases may be chosen because they are also entity mentions. In some implementations, the phrase vector may also include phrases that a within-document coreference system has determined to be coreferential with 255 . Each phrase is a context feature. In some implementations, the system may retrieve the support scores for each of the context features. For example, the system may select the four features illustrated in model 222 . The system may select the support scores that vote for entity A. A feature that does not have a support score for an entity may be considered to have a vote of zero for the entity.
- the system may determine that the support scores for entity A (e.g., George Harrison the musician) are 0.83, 0, 0.23, and 0.
- entity A e.g., George Harrison the musician
- the phrase “revolution” may be associated with entity A because of the song “Revolution” on the Beatles' White Album.
- the “video game” feature may be associated with entity A because of Beatles' songs associated with the Just Dance video games.
- the model may not have encountered the other features in a context with a mention of entity A before and, therefore, they do not vote for entity A.
- the support scores for entity B are 0, 0.95, 0.74, and 0.
- “Revolution” was the code name for the Wii® gaming system prior to its release, the context model may not have encountered this phrase with a mention for entity B before. Thus, the “revolution” feature may not have a vote for entity B.
- entity B is an SVP at Nintendo, the features “game boy” and “video game” have likely been encountered before and have support scores for entity B.
- the support scores for entity C (e.g., Harrison Ford) are 0, 0, 0, 0.25.
- the system may use the support scores to calculate an additive context posterior for each entity. In the additive model, the context posterior is an average of the support scores.
- the context posterior for entity A is 0.265
- the context posterior for entity B is 0.4225
- the context posterior for entity C is 0.0625.
- the additive context model infers that the mention represented by text span 255 is for entity B.
- the context posterior may be provided to an entity resolution engine that combines the context posterior with the mention prior for the entity. In some implementations they may be multiplied. This may result in an overall score for the entity. The system may use the overall score to select the inferred entity.
- the inferred label of entity B form mention 255 may be used in semi-supervised training. For example, the label may be added to the text 250 and used as training data for the model. The training may result in the model adding a support score for the “revolution” feature for entity B, because the model has now encountered the phrase “revolution” in a context for an entity mention for entity B. A discussion of such semi-supervised learning follows.
- FIG. 5 illustrates a flow diagram of an example process 500 for semi-supervised training of an additive context model, according to an implementation.
- Process 500 may be used by an entity resolution system, such as system 100 of FIG. 1 , to train an additive context model and to expand the model.
- entity resolution system such as system 100 of FIG. 1
- the model is provided a set of labeled mentions and a (typically much larger) set of unlabeled mentions. Each set has corresponding contexts, or phrase vectors.
- the system may provide the labeled mentions and corresponding contexts to the model for training ( 510 ). Training produces new support scores and new features for the model.
- the system may provide inferred labels for a set of unlabeled data and their corresponding contexts ( 515 ).
- the updated model thus provides inferred labels for the unlabeled mentions, using a process similar to process 300 of FIG. 3 .
- the system may re-estimate the parameters of the model ( 520 ).
- the parameters are the support scores, or in other words the vote of a feature for an entity.
- the system Given the labeled mentions and the inferred mentions (e.g., represented by the context posteriors q m,e for mention m and entity e), the system can estimate new support scores (e.g., r f,e is the vote of feature f for entity e) using the equation:
- the system may use the inferred labels generated by the model as additional training data for the model ( 530 ). In some implementations, the system may only use inferred labels that meet a confidence threshold for further training.
- the confidence threshold is based on the context posterior and the overall score, for example the context posterior meeting a threshold and/or the overall score meeting a threshold.
- the system may then repeat the training with the labeled data and the selected inferred labels ( 510 ), and run the model on the unlabeled data again ( 515 ).
- the system may then re-estimate the support scores ( 520 ) to test for convergence. If the re-estimated support scores (e.g., r f,e ) converge with the parameters in the model ( 525 , Yes), the iterations end and the semi-supervised learning is complete. Convergence may be based on a number of approaches. As one example, if the change in the estimated parameters between two iterations meets a threshold, the system may consider the support scores to converge.
- the inferred labels can be used to re-estimate the support scores because the amount of labeled data is limited, so many contextual features are not observed in the labeled data. Furthermore, the distribution of words and phrases in the labeled data may be very different from the distributions encountered in disambiguation circumstances. This can be counteracted by choosing unlabeled data for semi-supervised learning that more closely matches the expected distribution to improve model performance.
- FIG. 6 shows an example of a generic computer device 600 , which may be operated as system 100 , and/or client 170 of FIG. 1 , which may be used with the techniques described here.
- Computing device 600 is intended to represent various example forms of computing devices, such as laptops, desktops, workstations, personal digital assistants, cellular telephones, smart phones, tablets, servers, and other computing devices, including wearable devices.
- the components shown here, their connections and relationships, and their functions, are meant to be examples only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
- Computing device 600 includes a processor 602 , e.g., a silicone-based hardware processor, memory 604 , a storage device 606 , and expansion ports 610 connected via an interface 608 .
- computing device 600 may include transceiver 646 , communication interface 644 , and a GPS (Global Positioning System) receiver module 648 , among other components, connected via interface 608 .
- Device 600 may communicate wirelessly through communication interface 644 , which may include digital signal processing circuitry where necessary.
- Each of the components 602 , 604 , 606 , 608 , 610 , 640 , 644 , 646 , and 648 may be mounted on a common motherboard or in other manners as appropriate.
- the processor 602 can process instructions for execution within the computing device 600 , including instructions stored in the memory 604 or on the storage device 606 to display graphical information for a GUI on an external input/output device, such as display 616 .
- Display 616 may be a monitor or a flat touchscreen display.
- multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory.
- multiple computing devices 600 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).
- the memory 604 stores information within the computing device 600 .
- the memory 604 is a volatile memory unit or units.
- the memory 604 is a non-volatile memory unit or units.
- the memory 604 may also be another form of computer-readable medium, such as a magnetic or optical disk.
- the memory 604 may include expansion memory provided through an expansion interface.
- the storage device 606 is capable of providing mass storage for the computing device 600 .
- the storage device 606 may be or include a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations.
- a computer program product can be tangibly embodied in such a computer-readable medium.
- the computer program product may also include instructions that, when executed, perform one or more methods, such as those described above.
- the computer- or machine-readable medium is a storage device such as the memory 604 , the storage device 606 , or memory on processor 602 .
- the interface 608 may be a high speed controller that manages bandwidth-intensive operations for the computing device 600 or a low speed controller that manages lower bandwidth-intensive operations, or a combination of such controllers.
- An external interface 640 may be provided so as to enable near area communication of device 600 with other devices.
- controller 608 may be coupled to storage device 606 and expansion port 614 .
- the expansion port which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet) may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- the computing device 600 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server 630 , or multiple times in a group of such servers. It may also be implemented as part of a rack server system. In addition, it may be implemented in a personal computer such as a laptop computer 622 , or smart phone 636 . An entire system may be made up of multiple computing devices 600 communicating with each other. Other configurations are possible.
- FIG. 7 shows an example of a generic computer device 700 , which may be system 100 of FIG. 1 , which may be used with the techniques described here.
- Computing device 700 is intended to represent various example forms of large-scale data processing devices, such as servers, blade servers, datacenters, mainframes, and other large-scale computing devices.
- Computing device 700 may be a distributed system having multiple processors, possibly including network attached storage nodes, that are interconnected by one or more communication networks.
- the components shown here, their connections and relationships, and their functions, are meant to be examples only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
- Distributed computing system 700 may include any number of computing devices 780 .
- Computing devices 780 may include a server or rack servers, mainframes, etc. communicating over a local or wide-area network, dedicated optical links, modems, bridges, routers, switches, wired or wireless networks, etc.
- each computing device may include multiple racks.
- computing device 780 a includes multiple racks 758 a - 758 n .
- Each rack may include one or more processors, such as processors 752 a - 752 n and 762 a - 762 n .
- the processors may include data processors, network attached storage devices, and other computer controlled devices.
- one processor may operate as a master processor and control the scheduling and data distribution tasks.
- Processors may be interconnected through one or more rack switches 758 , and one or more racks may be connected through switch 778 .
- Switch 778 may handle communications between multiple connected computing devices 700 .
- Each rack may include memory, such as memory 754 and memory 764 , and storage, such as 756 and 766 .
- Storage 756 and 766 may provide mass storage and may include volatile or non-volatile storage, such as network-attached disks, floppy disks, hard disks, optical disks, tapes, flash memory or other similar solid state memory devices, or an array of devices, including devices in a storage area network or other configurations.
- Storage 756 or 766 may be shared between multiple processors, multiple racks, or multiple computing devices and may include a computer-readable medium storing instructions executable by one or more of the processors.
- Memory 754 and 764 may include, e.g., volatile memory unit or units, a non-volatile memory unit or units, and/or other forms of computer-readable media, such as a magnetic or optical disks, flash memory, cache, Random Access Memory (RAM), Read Only Memory (ROM), and combinations thereof. Memory, such as memory 754 may also be shared between processors 752 a - 752 n . Data structures, such as an index, may be stored, for example, across storage 756 and memory 754 . Computing device 700 may include other components not shown, such as controllers, buses, input/output devices, communications modules, etc.
- An entire system such as system 100 , may be made up of multiple computing devices 700 communicating with each other.
- device 780 a may communicate with devices 780 b , 780 c , and 780 d , and these may collectively be known as system 100 .
- system 100 of FIG. 1 may include one or more computing devices 700 . Some of the computing devices may be located geographically close to each other, and others may be located geographically distant.
- the layout of system 700 is an example only and the system may take on other layouts or configurations.
- Various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- a programmable processor which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- the systems and techniques described here can be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back end, middleware, or front end components.
- the components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (“LAN”), a wide area network (“WAN”), and the Internet.
- LAN local area network
- WAN wide area network
- the Internet the global information network
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network.
- the relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
Abstract
Description
which determines the probability q for a particular candidate entity e and a phrase vector b of features k for mention m.
where r is the support score of feature f for entity e, i is the entity mention from the set of labeled data L and the set of unlabeled data U, b is the phrase vector for mention i and q is a context posterior from generating the labels in iteration u.
where E is the possible entity from the data graph, W is the text span representing the entity mention, and C is the context vector of the span of text (e.g. all the phrases that make up the context). In the equation above p(E) is the probability of the entity E occurring independent of the span of text or the context, p(E|W) is the probably of the span of text W referring to the entity E, and p(E|C) is the probability of the entity occurring given the context vector, regardless of the span of text. p(E|W) may be provided by an entity mention model, such as
where bi,k is the phrase vector (e.g. the features that represent the context of the mention i). The loss measures the disagreement between the fractional assignment of entities to mentions as given by q and the sum of the votes r for the same entities from the context features for the same mentions. As is explained in further herein, to derive the contribution of the mention context when inferring the mentioned entity, the system may solve for the minimum loss with respect to q. To re-estimate the model parameters when training the model, the system may solve for the minimum with respect to r.
where rk,e represent the support scores of feature k for entity e. Determining an additive context posterior by additively combining context evidence is also described herein, e.g., with regard to
where L is the set of labeled mentions and U is the set of unlabeled mentions, and u is the iteration index. If the re-estimated support scores do not converge with the support scores in the model (525, No), the system may use the inferred labels generated by the model as additional training data for the model (530). In some implementations, the system may only use inferred labels that meet a confidence threshold for further training. The confidence threshold is based on the context posterior and the overall score, for example the context posterior meeting a threshold and/or the overall score meeting a threshold. The system may then repeat the training with the labeled data and the selected inferred labels (510), and run the model on the unlabeled data again (515). The system may then re-estimate the support scores (520) to test for convergence. If the re-estimated support scores (e.g., rf,e) converge with the parameters in the model (525, Yes), the iterations end and the semi-supervised learning is complete. Convergence may be based on a number of approaches. As one example, if the change in the estimated parameters between two iterations meets a threshold, the system may consider the support scores to converge.
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/138,606 US9697475B1 (en) | 2013-12-12 | 2013-12-23 | Additive context model for entity resolution |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201361915356P | 2013-12-12 | 2013-12-12 | |
US14/138,606 US9697475B1 (en) | 2013-12-12 | 2013-12-23 | Additive context model for entity resolution |
Publications (1)
Publication Number | Publication Date |
---|---|
US9697475B1 true US9697475B1 (en) | 2017-07-04 |
Family
ID=59152436
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/138,606 Active 2035-08-06 US9697475B1 (en) | 2013-12-12 | 2013-12-23 | Additive context model for entity resolution |
Country Status (1)
Country | Link |
---|---|
US (1) | US9697475B1 (en) |
Cited By (16)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20180060734A1 (en) * | 2016-08-31 | 2018-03-01 | International Business Machines Corporation | Responding to user input based on confidence scores assigned to relationship entries in a knowledge graph |
US20180060733A1 (en) * | 2016-08-31 | 2018-03-01 | International Business Machines Corporation | Techniques for assigning confidence scores to relationship entries in a knowledge graph |
CN108959461A (en) * | 2018-06-15 | 2018-12-07 | 东南大学 | A kind of entity link method based on graph model |
US20190139540A1 (en) * | 2016-06-09 | 2019-05-09 | National Institute Of Information And Communications Technology | Speech recognition device and computer program |
US10380188B2 (en) | 2016-08-05 | 2019-08-13 | International Business Machines Corporation | Distributed graph databases that facilitate streaming data insertion and queries by reducing number of messages required to add a new edge by employing asynchronous communication |
US10394891B2 (en) * | 2016-08-05 | 2019-08-27 | International Business Machines Corporation | Distributed graph databases that facilitate streaming data insertion and queries by efficient throughput edge addition |
US10445507B2 (en) | 2016-09-23 | 2019-10-15 | International Business Machines Corporation | Automated security testing for a mobile application or a backend server |
US10552450B2 (en) | 2016-08-05 | 2020-02-04 | International Business Machines Corporation | Distributed graph databases that facilitate streaming data insertion and low latency graph queries |
US20210012179A1 (en) * | 2019-07-12 | 2021-01-14 | International Business Machines Corporation | Extraction of named entities from document data to support automation applications |
CN112765994A (en) * | 2021-01-26 | 2021-05-07 | 武汉大学 | Deep learning-based information element joint extraction method and system |
US20210173831A1 (en) * | 2015-10-28 | 2021-06-10 | Qomplx, Inc. | System and method for analysis of graph databases using intelligent reasoning systems |
US11132343B1 (en) * | 2015-03-18 | 2021-09-28 | Groupon, Inc. | Automatic entity resolution data cleaning |
US11144337B2 (en) * | 2018-11-06 | 2021-10-12 | International Business Machines Corporation | Implementing interface for rapid ground truth binning |
US20220092265A1 (en) * | 2020-09-18 | 2022-03-24 | Microsoft Technology Licensing, Llc | Systems and methods for identifying entities and constraints in natural language input |
US11403534B2 (en) | 2018-05-25 | 2022-08-02 | Microsoft Technology Licensing, Llc | Acquiring entity webpage link based on topological relationship graph |
US20230127907A1 (en) * | 2021-10-22 | 2023-04-27 | International Business Machines Corporation | Intention identification in dialogue system |
Citations (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20090282012A1 (en) * | 2008-05-05 | 2009-11-12 | Microsoft Corporation | Leveraging cross-document context to label entity |
US20100262568A1 (en) | 2009-04-10 | 2010-10-14 | Microsoft Corporation | Scalable Clustering |
US20100293195A1 (en) | 2009-05-12 | 2010-11-18 | Comcast Interactive Media, Llc | Disambiguation and Tagging of Entities |
US8086549B2 (en) * | 2007-11-09 | 2011-12-27 | Microsoft Corporation | Multi-label active learning |
WO2011160205A1 (en) | 2010-06-22 | 2011-12-29 | Primal Fusion Inc. | Systems of computerized agents and user-directed semantic networking |
US20120226639A1 (en) | 2011-03-01 | 2012-09-06 | International Business Machines Corporation | Systems and Methods for Processing Machine Learning Algorithms in a MapReduce Environment |
US20120284791A1 (en) | 2011-05-06 | 2012-11-08 | The Penn State Research Foundation | Robust anomaly detection and regularized domain adaptation of classifiers with application to internet packet-flows |
US8630975B1 (en) * | 2010-12-06 | 2014-01-14 | The Research Foundation For The State University Of New York | Knowledge discovery from citation networks |
US20140143251A1 (en) * | 2012-11-19 | 2014-05-22 | The Penn State Research Foundation | Massive clustering of discrete distributions |
US8886576B1 (en) * | 2012-06-22 | 2014-11-11 | Google Inc. | Automatic label suggestions for albums based on machine learning |
-
2013
- 2013-12-23 US US14/138,606 patent/US9697475B1/en active Active
Patent Citations (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8086549B2 (en) * | 2007-11-09 | 2011-12-27 | Microsoft Corporation | Multi-label active learning |
US20090282012A1 (en) * | 2008-05-05 | 2009-11-12 | Microsoft Corporation | Leveraging cross-document context to label entity |
US20100262568A1 (en) | 2009-04-10 | 2010-10-14 | Microsoft Corporation | Scalable Clustering |
US20100293195A1 (en) | 2009-05-12 | 2010-11-18 | Comcast Interactive Media, Llc | Disambiguation and Tagging of Entities |
WO2011160205A1 (en) | 2010-06-22 | 2011-12-29 | Primal Fusion Inc. | Systems of computerized agents and user-directed semantic networking |
US8630975B1 (en) * | 2010-12-06 | 2014-01-14 | The Research Foundation For The State University Of New York | Knowledge discovery from citation networks |
US20120226639A1 (en) | 2011-03-01 | 2012-09-06 | International Business Machines Corporation | Systems and Methods for Processing Machine Learning Algorithms in a MapReduce Environment |
US20120284791A1 (en) | 2011-05-06 | 2012-11-08 | The Penn State Research Foundation | Robust anomaly detection and regularized domain adaptation of classifiers with application to internet packet-flows |
US8886576B1 (en) * | 2012-06-22 | 2014-11-11 | Google Inc. | Automatic label suggestions for albums based on machine learning |
US20140143251A1 (en) * | 2012-11-19 | 2014-05-22 | The Penn State Research Foundation | Massive clustering of discrete distributions |
Non-Patent Citations (38)
Title |
---|
"Ambiverse: AIDA: Accurate Online Disambiguation of Named Entities in Text and Tables", Max Planck Institut Informatik, available online at http://www.mpi-inf.mpg.de/departments/databases-and-information-systems/research/yago-naga/aida/, 2013, 4 pages. |
Baluja et al., "Video Suggestion and Discovery for YouTube: Taking Random Walks Through the View Graph", International Conference on World Wide Web (WWW 2008), Apr. 21-25, 2008, 10 pages. |
Bollacker et al., "Freebase: A Collaboratively Created Graph Database for Structuring Human Knowledge", Proceedings of the ACM SIGMOD International Conference on Management of Data, Jun. 9-12, 2008, pp. 1247-1249. |
Bunescu et al., "Using Encyclopedic Knowledge for Named Entity Disambiguation", Proceedings of the 11th Conference of the European Chapter of the Association for Computational Linguistics, Apr. 2006, pp. 9-16. |
Chu, et al, "Map-Reduce for Machine Learning on Multicore", In NIPS, 2006, pp. 281-288. |
Cucerzan, Silviu, "Large-Scale Named Entity Disambiguation Based on Wikipedia Data", Proceedings of Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning, Jun. 2007, pp. 708-716. |
Dredze et al., "Entity Disambiguation for Knowledge Base Population", Proceedings of the 23rd International Conference on Computational Linguistics, Aug. 2010, pp. 277-285. |
Duchi et al., "Efficient Online and Batch Learning Using Forward Backward Splitting", Journal of Machine Learning Research, vol. 10, 2009, pp. 2899-2934. |
Ferragina et al., "TAGME: On-the-fly Annotation of Short Text Fragments (by Wikipedia Entities)", Proceedings of the 19th ACM International Conference on Information and Knowledge Management, Oct. 26-30, 2010, pp. 1625-1628. |
Finin et al., "Using Wikitology for Cross-Document Entity Coreference Resolution", Association for the Advancement of Artificial Intelligence, 2009, pp. 29-35. |
Finkel et al., "Incorporating Non-local Information into Information Extraction Systems by Gibbs Sampling", Proceedings of the 43rd Annual Meeting of the ACL, Jun. 2005, 363-370. |
Fountain, Trevor, and Mirella Lapata. "Incremental models of natural language category acquisition." Proceedings of the 32st Annual Conference of the Cognitive Science Society. 2011. * |
Frermann, Lea, and Mirella Lapata. "Incremental Bayesian Learning of Semantic Categories." EACL. 2014. * |
Friedman, et al, "Additive Logistic Regression: A Statistical View of Boosting", Special Invited Paper, The Annals of Statistics, vol. 28, No. 2, 2000, pp. 337-407. |
Gabrilovich et al., "Harnessing the Expertise of 70,000 Human Editors: Knowledge-Based Feature Generation for Text Categorization", Journal of Machine Learning Research, vol. 8, 2007, pp. 2297-2345. |
Hachey et al., "Evaluating Entity Linking with Wikipedia", Artificial Intelligence, vol. 194, 2013, pp. 130-150. |
Haghighi et al., "Simple Coreference Resolution with Rich Syntactic and Semantic Features", Proceedings of Conference on Empirical Methods in Natural Language Processing, Aug. 6-7, 2009, pp. 1152-1161. |
Han et al., "A Generative Entity-Mention Model for Linking Entities with Knowledge Base", Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies-vol. 1, Jun. 19-24, 2011, pp. 945-954. |
Han et al., "An Entity-Topic Model for Entity Linking", Proceedings of the 2012 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning, Jul. 12-14, 2012, pp. 105-115. |
Han et al., "Named Entity Disambiguation by Leveraging Wikipedia Semantic Knowledge", Proceedings of the 18th ACM Conference on Information and Knowledge Management, Nov. 2-6, 2009, pp. 215-224. |
Han et al., "A Generative Entity-Mention Model for Linking Entities with Knowledge Base", Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies—vol. 1, Jun. 19-24, 2011, pp. 945-954. |
Hoffart et al., "Robust Disambiguation of Named Entities in Text", Proceedings of Conference on Empirical Methods in Natural Language Processing, Jul. 27-31, 2011, pp. 782-792. |
Kulkarni et al., "Collective Annotation of Wikipedia Entities in Web Text", Proceedings of the 15th ACM International Conference on Knowledge Discovery and Data Mining, Jun. 28-Jul. 1, 2009, pp. 457-466. |
Kwiatkowski et al., "Lexical Generalization in CCG Grammar Induction for Semantic Parsing", Proceedings of Conference on Empirical Methods in Natural Language Processing, Jul. 27-31, 2011, pp. 1512-1523. |
Lin et al., "Entity Linking at Web Scale", Proc. of the Joint Workshop on Automatic Knowledge Base Construction & Web-scale Knowledge Extraction, Jun. 7-8, 2012, pp. 84-88. |
Liu, Rey-Long, and Yun-Ling Lu. "Incremental context mining for adaptive document classification." Proceedings of the eighth ACM SIGKDD international conference on Knowledge discovery and data mining. ACM, 2002. * |
Mayfield et al., "Cross-Document Coreference Resolution: A Key Technology for Learning by Reading", Spring Symposium on Learning by Reading and Learning to Read, Mar. 2009, 6 pages. |
Mihalcea et al., "Wikify! Linking Documents to Encyclopedic Knowledge", Proceedings of the 16th ACM Conference on Information and Knowledge Management, Nov. 6-8, 2007, pp. 233-241. |
Milne et al., "Learning to Link with Wikipedia", Proceedings of the 17th ACM Conference on Information and Knowledge Management, Oct. 26-30, 2008, pp. 509-518. |
Nigam et al., "Text Classification from Labeled and Unlabeled Documents using EM", Machine Learning, vol. 39, 2000, pp. 103-134. |
Orr et al., "Learning from Big Data: 40 Million Entities in Context", available online <https://research.googleblog.com/2013/03/learning-from-big-data-40-million.html>, Mar. 8, 2013, 6 pages. |
Parisien, Christopher, Afsaneh Fazly, and Suzanne Stevenson. "An incremental Bayesian model for learning syntactic categories." Proceedings of the twelfth conference on computational natural language learning. Association for Computational Linguistics, 2008. * |
Ratinov et al., "Local and Global Algorithms for Disambiguation to Wikipedia", Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics, Jun. 19-24, 2011, pp. 1375-1384. |
Sil et al., "Linking Named Entities to Any Database", Proceedings of Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning, Jul. 12-14, 2012, pp. 116-127. |
Subramanya et al., "Semi-Supervised Learning with Measure Propagation", Journal of Machine Learning Research, vol. 12, 2011, pp. 3311-3370. |
Talukdar et al., "Experiments in Graph-based Semi-Supervised Learning Methods for Class-Instance Acquisition", Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, Jul. 11-16, 2010, pp. 1473-1481. |
Talukdar et al., "New Regularized Algorithms for Transductive Learning", Proceedings of the European Conference on Machine Learning and Knowledge Discovery in Databases: Part II, 2009, pp. 442-457. |
Talukdar et al., "Weakly-Supervised Acquisition of Labeled Class Instances using Graph Random Walks", Proceedings of Conference on Empirical Methods in Natural Language Processing, Oct. 2008, pp. 582-590. |
Cited By (26)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11132343B1 (en) * | 2015-03-18 | 2021-09-28 | Groupon, Inc. | Automatic entity resolution data cleaning |
US11687527B2 (en) * | 2015-10-28 | 2023-06-27 | Qomplx, Inc. | System and method for analysis of graph databases using intelligent reasoning systems |
US20210173831A1 (en) * | 2015-10-28 | 2021-06-10 | Qomplx, Inc. | System and method for analysis of graph databases using intelligent reasoning systems |
US10909976B2 (en) * | 2016-06-09 | 2021-02-02 | National Institute Of Information And Communications Technology | Speech recognition device and computer program |
US20190139540A1 (en) * | 2016-06-09 | 2019-05-09 | National Institute Of Information And Communications Technology | Speech recognition device and computer program |
US11314775B2 (en) | 2016-08-05 | 2022-04-26 | International Business Machines Corporation | Distributed graph databases that facilitate streaming data insertion and low latency graph queries |
US10380188B2 (en) | 2016-08-05 | 2019-08-13 | International Business Machines Corporation | Distributed graph databases that facilitate streaming data insertion and queries by reducing number of messages required to add a new edge by employing asynchronous communication |
US10394891B2 (en) * | 2016-08-05 | 2019-08-27 | International Business Machines Corporation | Distributed graph databases that facilitate streaming data insertion and queries by efficient throughput edge addition |
US10552450B2 (en) | 2016-08-05 | 2020-02-04 | International Business Machines Corporation | Distributed graph databases that facilitate streaming data insertion and low latency graph queries |
US11321393B2 (en) | 2016-08-05 | 2022-05-03 | International Business Machines Corporation | Distributed graph databases that facilitate streaming data insertion and queries by reducing number of messages required to add a new edge by employing asynchronous communication |
US11372919B2 (en) | 2016-08-05 | 2022-06-28 | International Business Machines Corporation | Distributed graph databases that facilitate streaming data insertion and queries by efficient throughput edge addition |
US20180060734A1 (en) * | 2016-08-31 | 2018-03-01 | International Business Machines Corporation | Responding to user input based on confidence scores assigned to relationship entries in a knowledge graph |
US10606849B2 (en) * | 2016-08-31 | 2020-03-31 | International Business Machines Corporation | Techniques for assigning confidence scores to relationship entries in a knowledge graph |
US10607142B2 (en) * | 2016-08-31 | 2020-03-31 | International Business Machines Corporation | Responding to user input based on confidence scores assigned to relationship entries in a knowledge graph |
US20180060733A1 (en) * | 2016-08-31 | 2018-03-01 | International Business Machines Corporation | Techniques for assigning confidence scores to relationship entries in a knowledge graph |
US10445507B2 (en) | 2016-09-23 | 2019-10-15 | International Business Machines Corporation | Automated security testing for a mobile application or a backend server |
US11403534B2 (en) | 2018-05-25 | 2022-08-02 | Microsoft Technology Licensing, Llc | Acquiring entity webpage link based on topological relationship graph |
CN108959461B (en) * | 2018-06-15 | 2021-07-27 | 东南大学 | Entity linking method based on graph model |
CN108959461A (en) * | 2018-06-15 | 2018-12-07 | 东南大学 | A kind of entity link method based on graph model |
US11144337B2 (en) * | 2018-11-06 | 2021-10-12 | International Business Machines Corporation | Implementing interface for rapid ground truth binning |
US20210012179A1 (en) * | 2019-07-12 | 2021-01-14 | International Business Machines Corporation | Extraction of named entities from document data to support automation applications |
US11669692B2 (en) * | 2019-07-12 | 2023-06-06 | International Business Machines Corporation | Extraction of named entities from document data to support automation applications |
US20220092265A1 (en) * | 2020-09-18 | 2022-03-24 | Microsoft Technology Licensing, Llc | Systems and methods for identifying entities and constraints in natural language input |
US11790172B2 (en) * | 2020-09-18 | 2023-10-17 | Microsoft Technology Licensing, Llc | Systems and methods for identifying entities and constraints in natural language input |
CN112765994A (en) * | 2021-01-26 | 2021-05-07 | 武汉大学 | Deep learning-based information element joint extraction method and system |
US20230127907A1 (en) * | 2021-10-22 | 2023-04-27 | International Business Machines Corporation | Intention identification in dialogue system |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9697475B1 (en) | Additive context model for entity resolution | |
Bharti et al. | Sarcastic sentiment detection in tweets streamed in real time: a big data approach | |
Li et al. | Incremental joint extraction of entity mentions and relations | |
Hu et al. | Entity hierarchy embedding | |
Sonawane et al. | Graph based representation and analysis of text document: A survey of techniques | |
US11929066B2 (en) | Intent-based conversational knowledge graph for spoken language understanding system | |
Eisenstein et al. | A latent variable model for geographic lexical variation | |
Rong et al. | Egoset: Exploiting word ego-networks and user-generated ontology for multifaceted set expansion | |
Shi et al. | Keyphrase extraction using knowledge graphs | |
Pilehvar et al. | Towards a seamless integration of word senses into downstream NLP applications | |
Khuc et al. | Towards building large-scale distributed systems for twitter sentiment analysis | |
Bansal et al. | Hybrid attribute based sentiment classification of online reviews for consumer intelligence | |
El-Kahky et al. | Extending domain coverage of language understanding systems via intent transfer between domains using knowledge graphs and search query click logs | |
US10528662B2 (en) | Automated discovery using textual analysis | |
CN111353303B (en) | Word vector construction method and device, electronic equipment and storage medium | |
Fang et al. | Topic aspect-oriented summarization via group selection | |
Zhao et al. | Simple question answering with subgraph ranking and joint-scoring | |
Gokul et al. | Sentence similarity detection in Malayalam language using cosine similarity | |
US20160132589A1 (en) | Context based passage retreival and scoring in a question answering system | |
Zoupanos et al. | Efficient comparison of sentence embeddings | |
Li et al. | Computational linguistics literature and citations oriented citation linkage, classification and summarization | |
Shailabh et al. | Knowgraph@ iitk at semeval-2021 task 11: Building knowledgegraph for NLP research | |
Li et al. | Adaptive probabilistic word embedding | |
ImaniGooghari et al. | Graph-Based Multilingual Label Propagation for Low-Resource Part-of-Speech Tagging | |
Bellaachia et al. | Short text keyphrase extraction with hypergraphs |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:SUBRAMANYA, AMARNAG;RINGGAARD, MICHAEL;PEREIRA, FERNANDO;SIGNING DATES FROM 20131218 TO 20131220;REEL/FRAME:032543/0326 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044097/0658Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |