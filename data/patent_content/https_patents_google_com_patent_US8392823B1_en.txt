US8392823B1 - Systems and methods for detecting hidden text and hidden links - Google Patents
Systems and methods for detecting hidden text and hidden links Download PDFInfo
- Publication number
- US8392823B1 US8392823B1 US12/547,157 US54715709A US8392823B1 US 8392823 B1 US8392823 B1 US 8392823B1 US 54715709 A US54715709 A US 54715709A US 8392823 B1 US8392823 B1 US 8392823B1
- Authority
- US
- United States
- Prior art keywords
- elements
- document
- hidden
- instructions
- server
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
- 238000000034 method Methods 0.000 title claims description 39
- 239000003086 colorant Substances 0.000 claims description 25
- 230000008569 process Effects 0.000 description 8
- 238000004891 communication Methods 0.000 description 6
- 238000010586 diagram Methods 0.000 description 5
- 230000007246 mechanism Effects 0.000 description 5
- 241000239290 Araneae Species 0.000 description 3
- 230000006870 function Effects 0.000 description 3
- 230000004044 response Effects 0.000 description 3
- 230000003287 optical effect Effects 0.000 description 2
- 238000012545 processing Methods 0.000 description 2
- 230000003068 static effect Effects 0.000 description 2
- 230000008859 change Effects 0.000 description 1
- 239000004020 conductor Substances 0.000 description 1
- 230000009193 crawling Effects 0.000 description 1
- 230000002354 daily effect Effects 0.000 description 1
- 238000013500 data storage Methods 0.000 description 1
- 230000001419 dependent effect Effects 0.000 description 1
- 238000001514 detection method Methods 0.000 description 1
- 230000003203 everyday effect Effects 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 238000012360 testing method Methods 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/951—Indexing; Web crawling techniques
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/31—Indexing; Data structures therefor; Storage structures
- G06F16/313—Selection or weighting of terms for indexing
Definitions
- the present invention relates generally to communication systems and, more particularly, to systems and methods for detecting hidden text and hidden links in documents.
- Networks such as the Internet have become an increasingly important part of our everyday lives. Millions of people now access the Internet on a daily basis to shop for goods and services, obtain information of interest (e.g., movie listings, news, etc.), and communicate with friends, family, and co-workers (e.g., via e-mail or instant messaging).
- information of interest e.g., movie listings, news, etc.
- co-workers e.g., via e-mail or instant messaging.
- the person may “search” for web sites that sell the product using a search engine. For example, suppose a person wishes to purchase a laser printer via the Internet. The person may access a web site that includes a conventional search engine. The person may enter one or more terms relating to the product, such as “laser printer,” into the search engine to attempt to locate web sites that sell that product. Searching for products or information of interest in this manner has become very popular. As such, companies often desire to have their web site(s) listed very highly in search results, thinking that a highly ranked listing will result in increased sales.
- search engines allow companies to buy certain search terms. If a search query is received with those search terms, then the company that has purchased those search terms may be ranked more highly than other companies offering the same product. In other situations, a webmaster for a company may attempt to “trick” the search engine into listing the company's web site more highly.
- a webmaster causes a different document to be displayed to users than what is presented to search engine spiders.
- Webmasters may attempt to hide text and/or links from users, but not from search engine spiders, in order to cause their documents to be ranked more highly than their competitors.
- hiding text webmasters may make the text color the same as or similar to the color of the background. Therefore, the text is not visible to a user viewing the document, but would still be considered by search engines that rank documents based on words in the document.
- a related trick is to use an image that is the same or very similar in color to the text that the webmaster wants to hide.
- the image can be a background image or other types of images.
- a webmaster may place a small blue bar image in the middle of the displayed document with blue text mostly on top of or underneath the image.
- One technique for hiding links involves the use of a very small image (e.g., a 1 ⁇ 1 pixel graphic interchange format (GIF)) that is used as a hyperlink.
- the image can be made to be so small that the image is not visible to users viewing the document, but may still be considered by search engines when ranking documents.
- large images e.g., 300 pixels wide and 200 pixels high
- hyperlinks may be used that are the same color or similar color to the background.
- CSS Cascading Style Sheets
- JavaScript JavaScript
- Webmasters also use Cascading Style Sheets (CSS) and JavaScript to hide text and links in a document.
- CSS allows webmasters to mark a block of text as “hidden.” Text in a document can also be set to a font size of 1 pixel high, for example, so as not to be visible to viewers of the document. CSS also allows text to be positioned using absolute numbers/spacing. Therefore, webmasters can position text or links to the left/right or above/below the visible area. CSS allows for layers of elements to be presented to users. For example, the “Z-ordering” of an element (e.g., text) can be set such that the layer with text is obscured below a visible layer.
- Webmasters may also use JavaScript to dynamically modify a document so as to include one of more of the tricks described above.
- JavaScript can also be used to dynamically modify a document by removing original content from a document and replace it with new content.
- Webmasters may store the JavaScript and CSS in external files, which search engine spiders normally do not fetch. This makes detection of these tricks more difficult.
- Implementations consistent with the principles of the invention detect hidden text, links, and/or other objects in documents.
- a method for detecting hidden elements in a document that includes a group of elements may include identifying each of the elements in the document and creating a structural representation of the document.
- the structural representation may provide an interconnection of the group of elements in the document.
- the method may further include determining whether one or more elements of the group of elements are hidden based at least in part on locations of the one or more elements in the structural representation.
- a server in another implementation consistent with the principles of the invention, includes a processor and a memory.
- the processor may be configured to generate a structural representation of a document that includes a group of elements.
- the structural representation may identify an interconnection of the elements and a color associated with each element.
- the processor may also be configured to detect that one element of the group of elements is hidden based at least in part on the colors associated with the one element and an element to which the one element is interconnected.
- a method for detecting hidden elements in a document that includes a group of elements may include creating a structural representation of the document, where the structural representation identifies an interconnection of the group of elements and one or more properties associated with each element in the group of elements.
- the method may further include determining that one element in the group of elements is hidden based at least in part on the one or more properties associated with the one element and the one or more properties associated with another element that is connected to the one element.
- FIG. 1 is an exemplary diagram of a system in which systems and methods consistent with the principles of the invention may be implemented;
- FIG. 2 is an exemplary diagram of the server of FIG. 1 in an implementation consistent with the principles of the invention
- FIG. 3 is a flow chart of an exemplary process for detecting hidden text and hidden links in a document in an implementation consistent with the principles of the invention
- FIG. 4 is an exemplary diagram of a tree-like structure of a document in an implementation consistent with the principles of the invention
- FIG. 5 is an exemplary hyper text markup language (HTML) document.
- FIG. 6 is an exemplary structural representation of the HTML document of FIG. 5 in an implementation consistent with the principles of the invention.
- Implementations consistent with the principles of the invention can determine whether a document includes hidden text, links, and/or other objects. In this way, the ranking of search results may take into account attempts to trick the search engine into ranking results more highly.
- FIG. 1 is an exemplary diagram of a system 100 in which systems and methods consistent with the principles of the invention may be implemented.
- System 100 may include multiple clients 110 connected to servers 120 and 130 via a network 140 .
- Network 140 may include a local area network (LAN), a wide area network (WAN), a telephone network, such as the Public Switched Telephone Network (PSTN), an intranet, the Internet, a similar or dissimilar network, or a combination of networks.
- PSTN Public Switched Telephone Network
- Clients 110 may include devices, such as wireless telephones, personal computers, personal digital assistants (PDAs), lap tops, etc., threads or processes running on these devices, and/or objects executable by these devices.
- Servers 120 / 130 may include server devices, threads, and/or objects that operate upon, search, or maintain documents in a manner consistent with the principles of the invention.
- Clients 110 and servers 120 / 130 may connect to network 140 via wired, wireless, or optical connections.
- server 120 may include a search engine 125 usable by clients 110 .
- Servers 130 may store objects (or web documents) accessible by clients 110 .
- FIG. 2 is an exemplary diagram of server 120 in an implementation consistent with the principles of the invention.
- Clients 110 and servers 130 may be similarly configured.
- Server 120 may include a bus 210 , a processor 220 , a main memory 230 , a read only memory (ROM) 240 , a storage device 250 , one or more input devices 260 , one or more output devices 270 , and a communication interface 280 .
- Bus 210 may include one or more conductors that permit communication among the components of server 120 .
- Processor 220 may include any type of conventional processor or microprocessor that interprets and executes instructions.
- Main memory 230 may include a random access memory (RAM) or another type of dynamic storage device that stores information and instructions for execution by processor 220 .
- ROM 240 may include a conventional ROM device or another type of static storage device that stores static information and instructions for use by processor 220 .
- Storage device 250 may include a magnetic and/or optical recording medium and its corresponding drive.
- Input devices 260 may include one or more conventional mechanisms that permit a user to input information to server 120 , such as a keyboard, a mouse, a pen, one or more biometric mechanisms, such as a voice recognition device, etc.
- Output devices 270 may include one or more conventional mechanisms that output information to the user, including a display, a printer, a speaker, etc.
- Communication interface 280 may include any transceiver-like mechanism that enables server 120 to communicate with other devices and/or systems.
- communication interface 280 may include mechanisms for communicating with another device or system via a network, such as network 140 .
- server 120 may detect hidden text and/or hidden links in a document. Server 120 may perform these operations in response to processor 220 executing software instructions contained in a computer-readable medium, such as memory 230 .
- a computer-readable medium may be defined as one or more memory devices and/or carrier waves.
- the software instructions may be read into memory 230 from another computer-readable medium, such as data storage device 250 , or from another device via communication interface 280 .
- the software instructions contained in memory 230 may cause processor 220 to perform processes that will be described later.
- hardwired circuitry may be used in place of or in combination with software instructions to implement processes consistent with the principles of the invention.
- the invention is not limited to any specific combination of hardware circuitry and software.
- FIG. 3 is a flow chart of an exemplary process for detecting hidden text and hidden links in a document in an implementation consistent with the principles of the invention.
- the process described below may be performed automatically by, for example, server 120 or manually by a human operator. In alternative implementations, parts of the process described below may be performed automatically while other parts may be performed manually.
- server 120 may, for example, receive the document in connection with a network search or a crawling and indexing operation.
- server 120 may receive a search query from a client 110 and retrieve one or more documents in a well known manner in response to the search query.
- the document may be received in response to a complaint about the document from a user of server 120 (or for other reasons).
- server 120 may receive the document in a hyper text markup language (HTML) format.
- HTML hyper text markup language
- Server 120 may expose the HTML document in a tree-like structure (or in another structure that can represent nesting blocks of HTML) (act 320 ).
- server 120 may use an application programming interface (API), such as the Document Object Model (DOM), to provide a structural representation (e.g., an object-oriented representation) of the document and its elements (e.g., division or section, heading, paragraph, image, list, etc.).
- API application programming interface
- the structural representation may also indicate the size, positioning, layer-order, visibility information, color, and/or other properties associated with the elements in the document.
- FIG. 4 illustrates an exemplary tree-like structure 400 in which the document may be represented.
- tree-like structure 400 may include a background object 410 , an image object 420 , a table object 430 , and a text object 440 .
- Background object 410 may serve as the root object in tree-like structure 400 . Since the background image is placed on the background, image object 420 is the next node in tree-like structure 400 . A table having a transparent background is placed on the image. Therefore, table object 430 is the next node in tree-like structure 400 .
- Text object 440 would be the last object in tree-like structure 400 .
- Server 120 may determine whether any text/links in the document are hidden based on size, position, layer-order, visibility, etc. (act 330 ). For example, server 120 may determine whether text in the document has been set to a small font size (e.g., one pixel) that is invisible to a viewer of the document. This may be an indication that the text is hidden. Server 120 may also determine whether a link (or image) has been set to a small size (e.g., 1 ⁇ 1 pixel). This may be an indication that the link is hidden. Some webmasters use 1 ⁇ 1 pixel images to track users that visit their site.
- a small font size e.g., one pixel
- Server 120 may also determine whether a link (or image) has been set to a small size (e.g., 1 ⁇ 1 pixel). This may be an indication that the link is hidden.
- Server 120 may exclude those images or links that are associated with statistical or tracking programs that are used to aggregate visitor information from the hidden link determination. Server 120 may exclude images based at least in part on, for example, whether the destination image, link, or anchor text contain words associated with statistical programs (e.g., “stats,” “track,” “log,” “click,” etc.).
- Server 120 may also determine whether the text/links are positioned off-screen (i.e., out of view of a user loading the document in his/her web browser) or whether the layer in which the text/links appear is positioned below one or more other layers. Moreover, server 120 may determine whether the text/links are marked as hidden, for example, through the use of CSS.
- Server 120 may detect hidden text/links that are hidden using the above techniques by, for example, checking CSS properties of elements in the document to determine if elements have been indicated as invisible, determining the current (x, y) screen position of each element and then checking the height and width of the browser window to determine whether any of the elements are positioned off-screen, and checking the CSS properties of elements in the document to determine if the elements are too small in size to be visible to the naked eye.
- Server 120 may also detect whether text/links are hidden due to another element (e.g., an image) being positioned on top of the text/links.
- server 120 may check the CSS properties of elements in the document to determine if elements overlap.
- Server 120 may, for example, determine the (x, y) position of an element and then determine if other elements fall under it based at least in part on their height, width, (x, y) position, and Z-index (or depth). In some instances, server 120 may identify multiple elements stacked on top of each other in a document.
- server 120 may identify the color of the object (act 340 ). In the example above, server 120 may identify the color of the background associated with background object 410 as blue, the color of the background image associated with image object 420 as white, and the color of the text associated with text object 440 as white. Server 120 may also determine that the table associated with table object 430 is not associated with a color since the background of the table is transparent.
- Server 120 may move up the tree-like structure, starting with the lowest object that is associated with a color in the tree-like structure, and then identify the next highest object that is above the lowest object in the tree-like structure and is associated with a color (act 350 ).
- server 120 may start with text object 440 and then move up tree-like structure 400 to image object 420 .
- Image 420 is the next highest object in tree-like structure 400 that is associated with a color since table object 430 is not associated with a color. It will be appreciated that, although image 420 is described as being higher than text object 440 in tree-like structure 400 , image 420 is actually under text object 440 in the document.
- Server 120 may determine if the two objects (e.g., text object 440 and image object 420 in the example above) are associated with the same or similar colors (act 360 ).
- colors may be represented as a color value (e.g., #RRGGBB), where each number, such as RR, is a two-digit hexadecimal number that ranges from 00 to FF, which is equal to 255. It will be appreciated that other techniques for representing colors may alternatively be used. For example, colors may be specified by name (e.g., “blue”), a hex triplet (e.g., “#30f”), or any other valid method of specifying colors in HTML documents or non-HTML documents.
- Colors may also be specified in other types of spaces, such as hue/saturation/brightness, cyan/magenta/yellow/black, etc. Regardless of the way in which colors are specified, if two colors have the same color value (or name), server 120 may determine that the colors are the same. In the example described above with respect to FIG. 4 , server 120 may determine that text object 440 and image object 420 are of the same color (i.e., white).
- server 120 may determine that the two colors are similar if they are within a configurable range, or a predetermined range, etc. For example, when the colors are represented as color values, server 120 may determine that two colors are similar if their color values are within 50 (or some other value) levels of color of each other. Assume, for instance, that image object 420 has a color of #000000, which is solid black, while text object 440 has a color of #050505, which is very, very dark, but not completely black.
- Server 120 may determine that image object 420 and text object 440 are of a similar color since their color values are within a predetermined range (i.e., 50), or because their color values are within a relatively close range (i.e., objects may be considered to be hidden/obscured when their closeness in color is high relative to the closeness in color of other things).
- a predetermined range i.e., 50
- a relatively close range i.e., objects may be considered to be hidden/obscured when their closeness in color is high relative to the closeness in color of other things.
- server 120 may determine that the lowest object is hidden (act 370 ). In the example described above with respect to FIG. 4 , server 120 would determine that the text in text object 440 is hidden since the color of text object 440 and image object 420 are the same (i.e., white). In one implementation, server 120 may ignore the hidden text when ranking the document. If, on the other hand, server 120 determines that the objects do not have the same colors or similar colors, server 120 may determine that the lowest object is visible (act 380 ).
- server 120 receives a document, such as the HTML document 500 illustrated in FIG. 5 (act 310 ).
- Server 120 may expose HTML document 500 in a structural representation, such as the tree-like structure 600 illustrated in FIG. 6 (act 320 ).
- Server 120 may then run one or more preliminary tests to determine if document 500 includes hidden text/links (act 330 ).
- server 120 may detect that the webmaster has overridden the value of the ⁇ h2> tag.
- the “h2” tag is a heading size, in which H1 is very large, H2 is a little smaller, H3 is smaller still, etc.
- the webmaster has used CSS to override the value of h2 to mean “for all text in the H2 section, make the text color almost completely black, and make the height of the font be about one pixel high.”
- h2 the webmaster's value
- server 120 may determine that the text in the H2 section is very small, which can indicate that the webmaster is attempting to hide the text in this section.
- Server 120 may then identify the color of each object in tree-like structure 600 (act 340 ).
- document 500 has a black background (#000000) with an almost completely-white table (#EEEEEE) in the center of the page.
- the table includes 3 cells, each containing text.
- the first cell includes the visible text “Free membership—click to join.”
- the second cell includes the text “dirty nasty schoolgirl discipline swingers cartoons.”
- the text in the second cell is of the color #EFEFEF, which is nearly white.
- the third cell includes the text “free buy cheap online porn videos.”
- the text in the third cell has the font color set by a CSS style called “invis,” which is stored in an external file. Assume that when the external file is loaded, server 120 determines that the invis style marks the text in the third cell as #EEEEEE.
- Server 120 may start with an object at the bottom of tree-like structure 600 (e.g., the text in the first cell) and march up tree-like structure 600 until another object that contributes color is encountered (act 350 ).
- the next object in tree-like structure 600 that contributes color is the table, which is almost completely white (#EEEEEE).
- Server 120 may then determine if the color of the text in the first cell is the same as or similar to the color of the table (i.e., whether the text in the first cell is white or similar to white) (act 360 ). For document 500 , server 120 would determine that the color of the text in the first cell is black and, therefore, that the text in the first cell is visible (act 380 ).
- Server 120 may then analyze the second cell in a similar manner. In this situation, server 120 may march up tree-like structure 600 until another object that contributes color is encountered (act 350 ). Here, the next object in tree-like structure 600 that contributes color is the table, which is almost completely white (#EEEEEE). Server 120 may then determine if the color of the text in the second cell is the same as or similar to the color of the table (i.e., whether the text in the second cell is white or similar to white) (act 360 ). For document 500 , server 120 would determine that the color of the text in the second cell is nearly white (#EFEFEF). Since the colors of the table and the text in the second cell are very similar, server 120 would determine that the text in the second cell is hidden (act 370 ).
- Server 120 may then analyze the third cell in a similar manner. In this situation, server 120 may march up tree-like structure 600 until another object that contributes color is encountered (act 350 ). Here, the next object in tree-like structure 600 that contributes color is the table, which is almost completely white (#EEEEEE). Server 120 may then determine if the color of the text in the third cell is the same as or similar to the color of the table (i.e., whether the text in the third cell is white or similar to white) (act 360 ). For document 500 , server 120 would determine, as set forth above, that the color of the text in the third cell is nearly white (#EFEFEF).
- server 120 would determine that the text in the third cell is hidden (act 370 ). Server 120 may ignore the hidden text in the H2 section, as well as the text in the second and third cells of the table, when ranking or indexing document 500 .
- Implementations consistent with the principles of the invention can determine whether a document includes hidden text, links, and/or other objects.
- the ranking of search results may take into account attempts to trick the search engine into ranking results more highly (e.g., by ignoring text that the user would not see when analyzing the content of the document).
- server 120 may monitor the tree-like structure associated with the document for changes. If more than a predetermined amount of text is added to (or deleted from) the document, the document may be further analyzed to determine if the document is being used to trick a search engine into ranking the document more highly.
- server 120 may perform one or more of the acts described in FIG. 3 .
- a browser assistant i.e., software that operates in conjunction with a conventional web browser
Abstract
A system detects hidden elements in a document that includes a group of elements. The system may identify each of the elements in the document and create a structural representation of the document. The structural representation may provide an interconnection of the group of elements in the document. The system may also determine whether one or more elements of the group of elements are hidden based at least in part on locations or other attributes or properties of the one or more elements in the structural representation.
Description
This application is a continuation of U.S. patent application Ser. No. 10/726,483, filed Dec. 4, 2003, and titled “Systems and Methods for Detecting Hidden Text and Hidden Links,” the disclosure of which is incorporated herein by reference.
The present invention relates generally to communication systems and, more particularly, to systems and methods for detecting hidden text and hidden links in documents.
Networks, such as the Internet, have become an increasingly important part of our everyday lives. Millions of people now access the Internet on a daily basis to shop for goods and services, obtain information of interest (e.g., movie listings, news, etc.), and communicate with friends, family, and co-workers (e.g., via e-mail or instant messaging).
Currently, when a person wishes to purchase a product or simply find information on the Internet, the person enters into his/her web browser a Uniform Resource Locator (URL) pertaining to a web site of interest in order to access that particular web site. The person then determines whether the product or information of interest is available at that particular web site.
When the person does not know where to go to find, for example, a desired product, the person may “search” for web sites that sell the product using a search engine. For example, suppose a person wishes to purchase a laser printer via the Internet. The person may access a web site that includes a conventional search engine. The person may enter one or more terms relating to the product, such as “laser printer,” into the search engine to attempt to locate web sites that sell that product. Searching for products or information of interest in this manner has become very popular. As such, companies often desire to have their web site(s) listed very highly in search results, thinking that a highly ranked listing will result in increased sales.
Many techniques exist that allow companies to obtain a highly ranked listing. For example, some search engines allow companies to buy certain search terms. If a search query is received with those search terms, then the company that has purchased those search terms may be ranked more highly than other companies offering the same product. In other situations, a webmaster for a company may attempt to “trick” the search engine into listing the company's web site more highly.
For example, one of the most deceptive techniques that webmasters use to trick a search engine is called “cloaking” In this situation, a webmaster causes a different document to be displayed to users than what is presented to search engine spiders. Webmasters may attempt to hide text and/or links from users, but not from search engine spiders, in order to cause their documents to be ranked more highly than their competitors. When hiding text, webmasters may make the text color the same as or similar to the color of the background. Therefore, the text is not visible to a user viewing the document, but would still be considered by search engines that rank documents based on words in the document. A related trick is to use an image that is the same or very similar in color to the text that the webmaster wants to hide. The image can be a background image or other types of images. For example, a webmaster may place a small blue bar image in the middle of the displayed document with blue text mostly on top of or underneath the image.
One technique for hiding links involves the use of a very small image (e.g., a 1×1 pixel graphic interchange format (GIF)) that is used as a hyperlink. The image can be made to be so small that the image is not visible to users viewing the document, but may still be considered by search engines when ranking documents. In other situations, large images (e.g., 300 pixels wide and 200 pixels high) that are hyperlinks may be used that are the same color or similar color to the background.
Webmasters also use Cascading Style Sheets (CSS) and JavaScript to hide text and links in a document. For example, CSS allows webmasters to mark a block of text as “hidden.” Text in a document can also be set to a font size of 1 pixel high, for example, so as not to be visible to viewers of the document. CSS also allows text to be positioned using absolute numbers/spacing. Therefore, webmasters can position text or links to the left/right or above/below the visible area. CSS allows for layers of elements to be presented to users. For example, the “Z-ordering” of an element (e.g., text) can be set such that the layer with text is obscured below a visible layer. Webmasters may also use JavaScript to dynamically modify a document so as to include one of more of the tricks described above. JavaScript can also be used to dynamically modify a document by removing original content from a document and replace it with new content. Webmasters may store the JavaScript and CSS in external files, which search engine spiders normally do not fetch. This makes detection of these tricks more difficult.
Therefore, there exists a need for systems and methods for improving the ability to detect hidden items in a document.
Implementations consistent with the principles of the invention detect hidden text, links, and/or other objects in documents.
In accordance with one implementation consistent with the principles of the invention, a method for detecting hidden elements in a document that includes a group of elements is provided. The method may include identifying each of the elements in the document and creating a structural representation of the document. The structural representation may provide an interconnection of the group of elements in the document. The method may further include determining whether one or more elements of the group of elements are hidden based at least in part on locations of the one or more elements in the structural representation.
In another implementation consistent with the principles of the invention, a server includes a processor and a memory. The processor may be configured to generate a structural representation of a document that includes a group of elements. The structural representation may identify an interconnection of the elements and a color associated with each element. The processor may also be configured to detect that one element of the group of elements is hidden based at least in part on the colors associated with the one element and an element to which the one element is interconnected.
In a further implementation consistent with the principles of the invention, a method for detecting hidden elements in a document that includes a group of elements is provided. The method may include creating a structural representation of the document, where the structural representation identifies an interconnection of the group of elements and one or more properties associated with each element in the group of elements. The method may further include determining that one element in the group of elements is hidden based at least in part on the one or more properties associated with the one element and the one or more properties associated with another element that is connected to the one element.
The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate an embodiment of the invention and, together with the description, explain the invention. In the drawings,
The following detailed description of implementations consistent with the principles of the invention refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements. Also, the following detailed description does not limit the invention.
Implementations consistent with the principles of the invention can determine whether a document includes hidden text, links, and/or other objects. In this way, the ranking of search results may take into account attempts to trick the search engine into ranking results more highly.
In an implementation consistent with the principles of the invention, server 120 may include a search engine 125 usable by clients 110. Servers 130 may store objects (or web documents) accessible by clients 110.
As will be described in detail below, server 120, consistent with the principles of the invention, may detect hidden text and/or hidden links in a document. Server 120 may perform these operations in response to processor 220 executing software instructions contained in a computer-readable medium, such as memory 230. A computer-readable medium may be defined as one or more memory devices and/or carrier waves. The software instructions may be read into memory 230 from another computer-readable medium, such as data storage device 250, or from another device via communication interface 280. The software instructions contained in memory 230 may cause processor 220 to perform processes that will be described later. Alternatively, hardwired circuitry may be used in place of or in combination with software instructions to implement processes consistent with the principles of the invention. Thus, the invention is not limited to any specific combination of hardware circuitry and software.
Processing may begin by receiving a document, such as a web page (act 310). In one implementation consistent with the principles of the invention, server 120 may, for example, receive the document in connection with a network search or a crawling and indexing operation. For example, server 120 may receive a search query from a client 110 and retrieve one or more documents in a well known manner in response to the search query. Alternatively, the document may be received in response to a complaint about the document from a user of server 120 (or for other reasons). In one implementation, server 120 may receive the document in a hyper text markup language (HTML) format.
As an example, assume that a document has a blue background, a white background image placed on the blue background, and white text written in a table having a transparent background that that is placed on the background image. FIG. 4 illustrates an exemplary tree-like structure 400 in which the document may be represented. As illustrated, tree-like structure 400 may include a background object 410, an image object 420, a table object 430, and a text object 440. Background object 410 may serve as the root object in tree-like structure 400. Since the background image is placed on the background, image object 420 is the next node in tree-like structure 400. A table having a transparent background is placed on the image. Therefore, table object 430 is the next node in tree-like structure 400. Text object 440 would be the last object in tree-like structure 400.
For each object in the tree-like structure, server 120 may identify the color of the object (act 340). In the example above, server 120 may identify the color of the background associated with background object 410 as blue, the color of the background image associated with image object 420 as white, and the color of the text associated with text object 440 as white. Server 120 may also determine that the table associated with table object 430 is not associated with a color since the background of the table is transparent.
If two colors are not the same (i.e., are not associated with identical color values/names), server 120 may determine that the two colors are similar if they are within a configurable range, or a predetermined range, etc. For example, when the colors are represented as color values, server 120 may determine that two colors are similar if their color values are within 50 (or some other value) levels of color of each other. Assume, for instance, that image object 420 has a color of #000000, which is solid black, while text object 440 has a color of #050505, which is very, very dark, but not completely black. Server 120 may determine that image object 420 and text object 440 are of a similar color since their color values are within a predetermined range (i.e., 50), or because their color values are within a relatively close range (i.e., objects may be considered to be hidden/obscured when their closeness in color is high relative to the closeness in color of other things).
If server 120 determines that the objects have the same colors or similar colors, server 120 may determine that the lowest object is hidden (act 370). In the example described above with respect to FIG. 4 , server 120 would determine that the text in text object 440 is hidden since the color of text object 440 and image object 420 are the same (i.e., white). In one implementation, server 120 may ignore the hidden text when ranking the document. If, on the other hand, server 120 determines that the objects do not have the same colors or similar colors, server 120 may determine that the lowest object is visible (act 380).
As another example of locating hidden text/links in a document, assume that server 120 receives a document, such as the HTML document 500 illustrated in FIG. 5 (act 310). Server 120 may expose HTML document 500 in a structural representation, such as the tree-like structure 600 illustrated in FIG. 6 (act 320). Server 120 may then run one or more preliminary tests to determine if document 500 includes hidden text/links (act 330). In this example, server 120 may detect that the webmaster has overridden the value of the <h2> tag. Normally, the “h2” tag is a heading size, in which H1 is very large, H2 is a little smaller, H3 is smaller still, etc. Here, the webmaster has used CSS to override the value of h2 to mean “for all text in the H2 section, make the text color almost completely black, and make the height of the font be about one pixel high.” A viewer of this document would not see the text because it is so small, but a search engine may determine that the text is relatively important because of the H2 heading label. In this situation, server 120 may determine that the text in the H2 section is very small, which can indicate that the webmaster is attempting to hide the text in this section.
Implementations consistent with the principles of the invention can determine whether a document includes hidden text, links, and/or other objects. In this way, the ranking of search results may take into account attempts to trick the search engine into ranking results more highly (e.g., by ignoring text that the user would not see when analyzing the content of the document).
The foregoing description of exemplary embodiments of the present invention provides illustration and description, but is not intended to be exhaustive or to limit the invention to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the invention. For example, in those situations where, for example, JavaScript is used to dynamically change the content of a document, server 120 may monitor the tree-like structure associated with the document for changes. If more than a predetermined amount of text is added to (or deleted from) the document, the document may be further analyzed to determine if the document is being used to trick a search engine into ranking the document more highly.
Moreover, the above-described functions need not be performed by server 120. In other implementations, one or more of the acts described in FIG. 3 may be performed by a client 110. For example, a browser assistant (i.e., software that operates in conjunction with a conventional web browser) may perform one or more of the acts described with respect to the process of FIG. 3 .
While a series of acts has been described with regard to FIG. 3 , the order of the acts may be varied in other implementations consistent with the present invention. Moreover, non-dependent acts may be implemented in parallel.
No element, act, or instruction used in the description of the present application should be construed as critical or essential to the invention unless explicitly described as such. Also, as used herein, the article “a” is intended to include one or more items. Where only one item is intended, the term “one” or similar language is used.
Claims (23)
1. A method comprising:
identifying, by one or more processors associated with one or more computer devices, a plurality of elements included in a document;
determining, by one or more processors associated with one or more computer devices, a hierarchical structural representation of the document, the hierarchical structural representation reflecting an interconnection of the plurality of elements in the document; and
determining, by one or more processors associated with one or more computer devices, whether one or more of the plurality of elements are hidden based on locations of the one or more of the plurality of elements and the hierarchical structural representation,
where the determining whether the one or more of the plurality of elements are hidden includes:
identifying respective color values associated with the plurality of elements,
identifying a first element, of the plurality of elements, that is associated with a first color value of the respective color values,
identifying a second element, of the plurality of elements, that is associated with a second color value of the respective color values, where the first and second color values are included within a particular range of color values, and where the second element appears behind the first element when the document is rendered, and
determining that the first element is hidden when no intervening element is located between the first and second elements,
the first element being not hidden when at least one intervening element, that is associated with a third color value, is located between the first and second elements, where the third color value is outside of the particular range of color values.
2. The method of claim 1 , further comprising:
determining that the first element is hidden when a third element is located between the first and second elements, where the third element is not associated with any color value.
3. The method of claim 1 , where the second color value is different than a color value of a background of the document.
4. The method of claim 1 , further comprising:
determining an outer periphery, based on a Cartesian coordinate system, associated with a web browser of a client device that displays the document,
determining a Cartesian coordinate associated with each of the plurality of elements within the Cartesian coordinate system when the document is displayed via the web browser, and
determining that at least one of the plurality of elements is hidden when the at least one of the plurality of elements is associated with a corresponding Cartesian coordinate that is positioned outside of the outer periphery of the web browser.
5. The method of claim 4 , further comprising:
determining that the at least one of the plurality of elements is visible when the at least one of the plurality of elements is associated with a corresponding Cartesian coordinate that is positioned within the outer periphery.
6. The method of claim 1 , where the plurality of elements includes at least one of text or links.
7. The method of claim 1 , where determining the hierarchical structural representation of the document includes:
creating a tree-like structure, where each of the plurality of elements corresponds to a node within the tree-like structure.
8. The method of claim 1 , further comprising:
determining whether one or more other elements, of the plurality of elements, are hidden based on properties associated with the one or more other elements.
9. The method of claim 8 , where the properties include visibility indications associated with the one or more other elements, and
where determining whether the one or more other elements, of the plurality of elements, are hidden is based on the visibility indications associated with the one or more other elements.
10. The method of claim 8 , where determining whether the one or more other elements, of the plurality of elements, are hidden is based on a size associated with the one or more other elements.
11. The method of claim 1 , where determining whether the one or more of the plurality of elements are hidden based on-locations of the one or more elements and the hierarchical structural representation includes:
determining whether a location of one of the one or more elements is at least partially beneath a location of another one of the one or more elements.
12. A server comprising:
a hardware memory device to store instructions; and
a processor, connected to the memory device, to execute the instructions to:
receive a document comprising a plurality of elements,
determine a structural representation of the document, the structural representation reflecting an interconnection of the plurality of elements in the document, and
identify hidden elements in the document based on locations of the plurality of elements and the structural representation,
where when identifying the hidden elements, the processor is further to:
identify respective color values associated with the plurality of elements,
identify a first element, of the plurality of elements, that is associated with a first color value of the respective color values,
identify a second element, of the plurality of elements, that is associated with a second color value of the respective color values, where the first and second color values are within a particular range of color values, and where the second element appears behind the first element when the document is rendered,
determine that the first element is hidden when no intervening element is located between the first and second elements, and
determine that the first element is not hidden when at least one intervening element, that is associated with a third color value, is located between the first and second elements, where the third color value is not within the particular range of color values.
13. The server of claim 12 , where the processor is further to:
determine that the first element is hidden when a third element is located between the first and second elements, where the third element is not associated with a color value.
14. The server of claim 12 , where the second color value is different from a color value of a background of the document.
15. The server of claim 12 , where, when determining the structural representation of the document, the processor is further to:
create a tree-like structure, where each of the plurality of elements is a node within the tree-like structure.
16. The server of claim 12 , where the processor is to:
determine that one or more elements, of the plurality of elements, are hidden when a visibility property associated with the one or more elements is set as invisible.
17. The server of claim 12 , where the processor is further to:
determine that one or more elements, of the plurality of elements, are hidden when a size, associated with the one or more elements, does not satisfy a threshold size.
18. The server of claim 12 , where the processor is further to:
determine a height and a width of a web browser of a client device that displays the document,
determine whether one or more elements, of the plurality of elements, are hidden based on whether the one or more elements are positioned on-screen or off-screen,
where a particular on-screen element, of the one or more elements, is associated with an (x, y) screen position within the height and the width of the web browser of the client device, and
where a particular off-screen element, of the one or more elements, is associated with an (x, y) screen position outside at least one of the height or the width of the web browser of the client device.
19. The server of claim 12 , where, when identifying the hidden elements in the document based on locations of the plurality of elements and the structural representation, the processor is further to:
determine whether one of the plurality of elements is at least partially beneath another one of the plurality of elements when the document is rendered.
20. A non-transitory memory device containing instructions, the instructions comprising:
one or more instructions that, when executed by at least one processor, cause the at least one processor to determine a hierarchical structural representation of a document, the hierarchical structural representation reflecting an interconnection of a plurality of elements included in the document; and
one or more instructions that, when executed by the at least one processor, cause the at least one processor to identify hidden elements in the document based on the hierarchical structural representation, the one or more instructions to identify the hidden elements in the document based on the hierarchical structural representation including at least one of:
one or more instructions to identify the hidden elements in the document further based on colors of the plurality of elements, where the one or more instructions to identify the hidden elements in the document further based on the colors of the plurality of elements include:
one or more instructions to identify a respective color associated with each element of the plurality of elements,
one or more instructions to identify a first element, of the plurality of elements, that is associated with a first color,
one or more instructions to identify a second element, of the plurality of elements, that is associated with a second color, where the first and second colors are included in a particular range of colors, and where the second element appears behind the first element when the document is rendered,
one or more instructions to determine that the first element is hidden when no intervening elements are located between the first and second elements, and
one or more instructions to determine that the first element is not hidden when at least one intervening element, that is associated with a third color, is located between the first and second elements, where the third color is outside of the particular range of colors, or
one or more instructions to identify the hidden elements in the document further based on locations of the plurality of elements in a Cartesian coordinate system, where the one or more instructions to identify the hidden elements in the document further based on the locations of the plurality of elements in the Cartesian coordinate system include:
one or more instructions to determine an outer periphery, based on the Cartesian coordinate system, associated with a web browser of a client device that displays the document,
one or more instructions to determine a Cartesian coordinate associated with each of the plurality of elements within the Cartesian coordinate system, and
one or more instructions to determine that at least one of the plurality of elements is hidden when the at least one of the plurality of elements is associated with a corresponding at least one Cartesian coordinate that is positioned outside of the outer periphery.
21. The non-transitory memory device of claim 20 , where the document includes hyper text markup language (HTML) and cascading style sheet (CSS) code, and
where the instructions further comprise:
one or more instructions that, when executed by the at least one processor, cause the at least one processor to determine that one or more of the plurality of elements are hidden when the CSS code overrides a pre-assigned value of at least one HTML tag associated with the one or more of the plurality of elements.
22. The method claim 1 , where the document includes hyper text markup language (HTML) and cascading style sheet (CSS) code, and
where the method further comprises:
determining that at least one of the plurality of elements is hidden when the CSS code overrides a pre-assigned value of at least one HTML tag associated with the at least one of the plurality of elements.
23. The server of claim 12 , where the document includes hyper text markup language (HTML) and cascading style sheet (CSS) code, and
where the processor is further to:
determine that at least one of the plurality of elements is hidden when the CSS code overrides a pre-assigned value of at least one HTML tag associated with the at least one of the plurality of elements.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/547,157 US8392823B1 (en) | 2003-12-04 | 2009-08-25 | Systems and methods for detecting hidden text and hidden links |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US72648303A | 2003-12-04 | 2003-12-04 | |
US12/547,157 US8392823B1 (en) | 2003-12-04 | 2009-08-25 | Systems and methods for detecting hidden text and hidden links |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US72648303A Continuation | 2003-12-04 | 2003-12-04 |
Publications (1)
Publication Number | Publication Date |
---|---|
US8392823B1 true US8392823B1 (en) | 2013-03-05 |
Family
ID=47749170
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/547,157 Active 2025-03-05 US8392823B1 (en) | 2003-12-04 | 2009-08-25 | Systems and methods for detecting hidden text and hidden links |
Country Status (1)
Country | Link |
---|---|
US (1) | US8392823B1 (en) |
Cited By (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20150095751A1 (en) * | 2013-09-27 | 2015-04-02 | Microsoft Corporation | Employing page links to merge pages of articles |
US20150161135A1 (en) * | 2012-05-07 | 2015-06-11 | Google Inc. | Hidden text detection for search result scoring |
WO2016033907A1 (en) * | 2014-09-05 | 2016-03-10 | 中国科学院计算机网络信息中心 | Statistical machine learning-based internet hidden link detection method |
US9547630B2 (en) | 2014-04-08 | 2017-01-17 | International Business Machines Corporation | Identification of multimedia content in paginated data using metadata |
US10037546B1 (en) * | 2012-06-14 | 2018-07-31 | Rocket Fuel Inc. | Honeypot web page metrics |
WO2020068704A1 (en) * | 2018-09-26 | 2020-04-02 | Ebay Inc. | Detecting selection of disabled inner links within nested content |
WO2020211130A1 (en) * | 2019-04-16 | 2020-10-22 | 网宿科技股份有限公司 | Hidden link detection method and apparatus for website |
US11397519B2 (en) * | 2019-11-27 | 2022-07-26 | Sap Se | Interface controller and overlay |
US11514094B2 (en) * | 2018-02-06 | 2022-11-29 | International Business Machines Corporation | Search and navigation of hidden elements of a web page |
Citations (14)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5557722A (en) * | 1991-07-19 | 1996-09-17 | Electronic Book Technologies, Inc. | Data processing system and method for representing, generating a representation of and random access rendering of electronic documents |
US6055544A (en) * | 1996-03-15 | 2000-04-25 | Inso Providence Corporation | Generation of chunks of a long document for an electronic book system |
US6167409A (en) * | 1996-03-01 | 2000-12-26 | Enigma Information Systems Ltd. | Computer system and method for customizing context information sent with document fragments across a computer network |
US20010019427A1 (en) * | 2000-01-31 | 2001-09-06 | Manabu Komatsu | Method and apparatus for processing image signal and computer-readable recording medium recorded with program for causing computer to process image signal |
US20020078100A1 (en) * | 2000-12-20 | 2002-06-20 | Sourabh Tewari | Identifying logical elements |
US6442606B1 (en) | 1999-08-12 | 2002-08-27 | Inktomi Corporation | Method and apparatus for identifying spoof documents |
US6546406B1 (en) * | 1995-11-03 | 2003-04-08 | Enigma Information Systems Ltd. | Client-server computer system for large document retrieval on networked computer system |
US6763388B1 (en) | 1999-08-10 | 2004-07-13 | Akamai Technologies, Inc. | Method and apparatus for selecting and viewing portions of web pages |
US6809741B1 (en) * | 1999-06-09 | 2004-10-26 | International Business Machines Corporation | Automatic color contrast adjuster |
US20050022115A1 (en) | 2001-05-31 | 2005-01-27 | Roberts Baumgartner | Visual and interactive wrapper generation, automated information extraction from web pages, and translation into xml |
US6966029B1 (en) * | 1999-12-08 | 2005-11-15 | Koninklijke Philips Electronics N.V. | Script embedded in electronic documents as invisible encoding |
US7310769B1 (en) * | 2003-03-12 | 2007-12-18 | Adobe Systems Incorporated | Text encoding using dummy font |
US7826112B2 (en) * | 2007-10-24 | 2010-11-02 | Kabushiki Kaisha Toshiba | Color conversion apparatus and color conversion method |
US7921159B1 (en) * | 2003-10-14 | 2011-04-05 | Symantec Corporation | Countering spam that uses disguised characters |
-
2009
- 2009-08-25 US US12/547,157 patent/US8392823B1/en active Active
Patent Citations (21)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6101511A (en) * | 1991-07-19 | 2000-08-08 | Enigma Information Systems Ltd. | Data processing system and method for generating a representation for and random access rendering of electronic documents |
US5557722A (en) * | 1991-07-19 | 1996-09-17 | Electronic Book Technologies, Inc. | Data processing system and method for representing, generating a representation of and random access rendering of electronic documents |
US5708806A (en) * | 1991-07-19 | 1998-01-13 | Inso Providence Corporation | Data processing system and method for generating a representation for and for representing electronically published structured documents |
US5983248A (en) * | 1991-07-19 | 1999-11-09 | Inso Providence Corporation | Data processing system and method for generating a representation for and random access rendering of electronic documents |
US6101512A (en) * | 1991-07-19 | 2000-08-08 | Enigma Information Systems Ltd. | Data processing system and method for generating a representation for and random access rendering of electronic documents |
US5644776A (en) * | 1991-07-19 | 1997-07-01 | Inso Providence Corporation | Data processing system and method for random access formatting of a portion of a large hierarchical electronically published document with descriptive markup |
US6105044A (en) * | 1991-07-19 | 2000-08-15 | Enigma Information Systems Ltd. | Data processing system and method for generating a representation for and random access rendering of electronic documents |
US6546406B1 (en) * | 1995-11-03 | 2003-04-08 | Enigma Information Systems Ltd. | Client-server computer system for large document retrieval on networked computer system |
US6167409A (en) * | 1996-03-01 | 2000-12-26 | Enigma Information Systems Ltd. | Computer system and method for customizing context information sent with document fragments across a computer network |
US6055544A (en) * | 1996-03-15 | 2000-04-25 | Inso Providence Corporation | Generation of chunks of a long document for an electronic book system |
US6809741B1 (en) * | 1999-06-09 | 2004-10-26 | International Business Machines Corporation | Automatic color contrast adjuster |
US6763388B1 (en) | 1999-08-10 | 2004-07-13 | Akamai Technologies, Inc. | Method and apparatus for selecting and viewing portions of web pages |
US6442606B1 (en) | 1999-08-12 | 2002-08-27 | Inktomi Corporation | Method and apparatus for identifying spoof documents |
US6966029B1 (en) * | 1999-12-08 | 2005-11-15 | Koninklijke Philips Electronics N.V. | Script embedded in electronic documents as invisible encoding |
US20010019427A1 (en) * | 2000-01-31 | 2001-09-06 | Manabu Komatsu | Method and apparatus for processing image signal and computer-readable recording medium recorded with program for causing computer to process image signal |
US20020078100A1 (en) * | 2000-12-20 | 2002-06-20 | Sourabh Tewari | Identifying logical elements |
US6934909B2 (en) * | 2000-12-20 | 2005-08-23 | Adobe Systems Incorporated | Identifying logical elements by modifying a source document using marker attribute values |
US20050022115A1 (en) | 2001-05-31 | 2005-01-27 | Roberts Baumgartner | Visual and interactive wrapper generation, automated information extraction from web pages, and translation into xml |
US7310769B1 (en) * | 2003-03-12 | 2007-12-18 | Adobe Systems Incorporated | Text encoding using dummy font |
US7921159B1 (en) * | 2003-10-14 | 2011-04-05 | Symantec Corporation | Countering spam that uses disguised characters |
US7826112B2 (en) * | 2007-10-24 | 2010-11-02 | Kabushiki Kaisha Toshiba | Color conversion apparatus and color conversion method |
Non-Patent Citations (7)
Title |
---|
Bohman et al, "An Accessible Method of Hiding HTML Content," published Jun. 2003, ACM Press, Issue 76, pp. 11-12, + 1 title page (3 pages total) <http://portal.acm.org/ft-gateway.cfm?id=1036406&type=pdf&coll=ACM&dl=ACM&CFID=67325396&CFTOKEN=75842128>. |
Copending U.S. Appl. No. 10/726,483, filed Dec. 4, 2003, Fritz Schneider et al., "Systems and Methods for Detecting Hidden Text and Hidden Links". |
EchoEcho.com, "CSS Tutorial: CSS Layers," Oct. 2, 2003, EchoEcho.com, pp. 1-5, . |
EchoEcho.com, "CSS Tutorial: CSS Layers," Oct. 2, 2003, EchoEcho.com, pp. 1-5, <http://web.archive.org/web/20031002235947/http://www.echoecho.com/csslayers.htm>. |
Hegaret et al, What is the Document Object Model?, published Nov. 7, 2003, W3C, pp. 1-8, . |
Hegaret et al, What is the Document Object Model?, published Nov. 7, 2003, W3C, pp. 1-8, <http://www.w3.org/TR/2003/CR-DOM-Level-3-Core-20031107/>. |
Sam, "Introduction to DOM," Nov. 5, 2003, OxfordU.net, http://web.archive.org/web/20031105175619/http://www.oxfordu.net/webdesign/dom/straight-text.html, pp. 1-7. |
Cited By (15)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9336279B2 (en) * | 2012-05-07 | 2016-05-10 | Google Inc. | Hidden text detection for search result scoring |
US20150161135A1 (en) * | 2012-05-07 | 2015-06-11 | Google Inc. | Hidden text detection for search result scoring |
US10037546B1 (en) * | 2012-06-14 | 2018-07-31 | Rocket Fuel Inc. | Honeypot web page metrics |
US10043197B1 (en) | 2012-06-14 | 2018-08-07 | Rocket Fuel Inc. | Abusive user metrics |
US20150095751A1 (en) * | 2013-09-27 | 2015-04-02 | Microsoft Corporation | Employing page links to merge pages of articles |
US9547630B2 (en) | 2014-04-08 | 2017-01-17 | International Business Machines Corporation | Identification of multimedia content in paginated data using metadata |
US9552333B2 (en) | 2014-04-08 | 2017-01-24 | International Business Machines Corporation | Identification of multimedia content in paginated data using metadata |
WO2016033907A1 (en) * | 2014-09-05 | 2016-03-10 | 中国科学院计算机网络信息中心 | Statistical machine learning-based internet hidden link detection method |
US11514094B2 (en) * | 2018-02-06 | 2022-11-29 | International Business Machines Corporation | Search and navigation of hidden elements of a web page |
WO2020068704A1 (en) * | 2018-09-26 | 2020-04-02 | Ebay Inc. | Detecting selection of disabled inner links within nested content |
US10878053B2 (en) | 2018-09-26 | 2020-12-29 | Ebay Inc. | Detecting selection of disabled inner links within nested content |
US11194880B2 (en) | 2018-09-26 | 2021-12-07 | Ebay Inc. | Detecting selection of disabled inner links within nested content |
WO2020211130A1 (en) * | 2019-04-16 | 2020-10-22 | 网宿科技股份有限公司 | Hidden link detection method and apparatus for website |
EP3745292A4 (en) * | 2019-04-16 | 2020-12-02 | Wangsu Science & Technology Co., Ltd. | Hidden link detection method and apparatus for website |
US11397519B2 (en) * | 2019-11-27 | 2022-07-26 | Sap Se | Interface controller and overlay |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8392823B1 (en) | Systems and methods for detecting hidden text and hidden links | |
US9342563B2 (en) | Interface for a universal search | |
US6999962B2 (en) | Shared document repository with coupled recommender system | |
US8812500B2 (en) | System and method of displaying related sites | |
US7562287B1 (en) | System, method and apparatus for selecting, displaying, managing, tracking and transferring access to content of web pages and other sources | |
US9569541B2 (en) | Evaluating preferences of content on a webpage | |
KR100813333B1 (en) | Search engine supplemented with url's that provide access to the search results from predefined search queries | |
US6271840B1 (en) | Graphical search engine visual index | |
US7607082B2 (en) | Categorizing page block functionality to improve document layout for browsing | |
US7606794B2 (en) | Active Abstracts | |
US20150039983A1 (en) | System and method for customizing a user interface | |
US8484179B2 (en) | On-demand search result details | |
US20090148045A1 (en) | Applying image-based contextual advertisements to images | |
US20050131992A1 (en) | System, method and apparatus for selecting, displaying, managing, tracking and transferring access to content of web pages and other sources | |
US20030221167A1 (en) | System, method and apparatus for selecting, displaying, managing, tracking and transferring access to content of web pages and other sources | |
US20080077595A1 (en) | System and method for facilitating online social networking | |
US20100257466A1 (en) | Method and system for generating a mini-software application corresponding to a web site | |
US20090112862A1 (en) | Image-based search system and method | |
US20030195901A1 (en) | Database building method for multimedia contents | |
US20030236879A1 (en) | Server, server program storage medium, and site serving method | |
US7174513B1 (en) | System and method for advanced network viewing | |
JP4939637B2 (en) | Information providing apparatus, information providing method, program, and information recording medium | |
JP4955841B2 (en) | Information providing apparatus, information providing method, program, and information recording medium | |
US20020087577A1 (en) | Database building method for multimedia contents | |
EP1267280A2 (en) | Method and apparatus for populating, indexing and searching a non-html web content database |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
CC | Certificate of correction | ||
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044695/0115Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |