FIELD OF THE INVENTION
The present invention relates generally to a search appliance. More specifically, a method for updating a security status and providing a search result based on that status is disclosed.
BACKGROUND OF THE INVENTION
Search appliances typically crawl documents and periodically construct and reconstruct indices upon which user queries are performed. The documents crawled may be either public documents, or access controlled documents to which an administrator may wish to limit access to specific users or groups of users. The particular index that a user queries generally changes only periodically. Thus, a user query may be submitted against an index that is potentially days old. During the time interval between when an index is created and when it is replaced with an updated version, an administrator or other party may wish to change the security status of a document in the index from access controlled to public, or vice versa. There exists a need to be able to update the security status of a document between re-indexing periods.
BRIEF DESCRIPTION OF THE DRAWINGS
Various embodiments of the invention are disclosed in the following detailed description and the accompanying drawings.
FIG. 1 illustrates an embodiment of a search appliance.
FIG. 2 illustrates an embodiment of a security configuration.
FIG. 3A illustrates an embodiment of some of the contents of a serving index.
FIG. 3B is a representation of some of the contents of an example serving index with two layers of a sorted map on top.
FIG. 4A illustrates an embodiment of a process for delivering content with access control and search capabilities.
FIG. 4B illustrates an embodiment of a process for requesting unsecured documents.
FIG. 5 illustrates an embodiment of a process used by a security ripper to create a log of documents that are currently unsecured.
FIG. 6 illustrates an embodiment of a process used by a search server when a security configuration changes.
FIG. 7 illustrates an embodiment of a process used by an indexer when a security configuration changes.
DETAILED DESCRIPTION
The invention can be implemented in numerous ways, including as a process, an apparatus, a system, a composition of matter, a computer readable medium such as a computer readable storage medium or a computer network wherein program instructions are sent over optical or electronic communication links. In this specification, these implementations, or any other form that the invention may take, may be referred to as techniques. A component such as a processor or a memory described as being configured to perform a task includes both a general component that is temporarily configured to perform the task at a given time or a specific component that is manufactured to perform the task. In general, the order of the steps of disclosed processes may be altered within the scope of the invention.
A detailed description of one or more embodiments of the invention is provided below along with accompanying figures that illustrate the principles of the invention. The invention is described in connection with such embodiments, but the invention is not limited to any embodiment. The scope of the invention is limited only by the claims and the invention encompasses numerous alternatives, modifications and equivalents. Numerous specific details are set forth in the following description in order to provide a thorough understanding of the invention. These details are provided for the purpose of example and the invention may be practiced according to the claims without some or all of these specific details. For the purpose of clarity, technical material that is known in the technical fields related to the invention has not been described in detail so that the invention is not unnecessarily obscured.
FIG. 1 illustrates an embodiment of a search appliance. In the example shown, a crawler 102, a repository 104, an indexer 106, a serving index 108, a search server 110, a security ripper 112, a monitor 114, and a security configuration 116 are included. As crawler 102 traverses an area, such as a list of URLs on a corporate intranet, it stores the documents that it finds in repository 104. Documents can include Web pages, text files, multimedia files, object features, link structure, and other content. Indexer 106 uses repository 104 to construct a serving index 108. When a user submits a query, such as through frontend 120, search server 110 uses serving index 108 to return results.
Documents can be added or removed from the intranet, and the contents of documents, as well as document attributes can be changed. As time elapses and changes occur on the intranet, serving index 108 can become increasingly out of date. New serving indices are periodically created to keep query results current. To create a new serving index, such as new serving index 118, crawler 102 recrawls its list of URLs, updating the contents of repository 104. Indexer 106 uses the updated contents of repository 104 to create new serving index. Once new serving index 118 is complete, search server 110 ceases consulting serving index 108 and instead uses new serving index 118. Eventually, new serving index 118 is replaced by another new serving index, not pictured.
Security configuration 116 contains information about patterns of URLs contained on the intranet. Security configuration 116 is monitored for changes by a monitor 114. If changes in security configuration 116 are detected by monitor 114, security ripper 112 is notified, as described more fully below.
While the system depicted in FIG. 1 is a search appliance, the claimed invention could be practiced in a variety of information retrieval contexts. For example, intranet search engines, Internet search engines, and intrasite search engines may all replace the system of FIG. 1 or operate in conjunction with the system of FIG. 1.
FIG. 2 illustrates an embodiment of a security configuration. In the example shown, a security configuration, such as security configuration 116, includes a list of URLs and information about those URLs. In the example shown, each line of the security configuration (208-214) contains a URL pattern (202), and a credential (204) and security flag (206) if applicable. The URL pattern can either be a particular document (www.google.com/welcome.html) or a regular expression (*.private.google.com/secure/).
Crawler 102 first attempts to access each document without providing credentials. In this example, crawler 102 crawls an intranet based on a seed list (not pictured). Other methods of crawling could be used by crawler 102, as appropriate. As it crawls, crawler 102 notes in repository 104 whether a credential is required to access a document. If a credential is required to access a document, crawler 102 consults security configuration 116 for the appropriate credential to supply when crawling that page. In the example shown, the credentials are a username/password. In other cases, the credential field may include other types of credentials as appropriate, based on whatever authentication method is employed by that particular URL.
For each URL pattern in security configuration 116, a security flag can be set indicating whether the document(s) matching the URL pattern are unsecured. There are four security states that a particular URL pattern can have. The URL pattern can be marked unsecured and not require a credential (208), secure and require a credential (210), secure and not require a credential (212), and unsecured and require a credential (214).
FIG. 3A illustrates an embodiment of some of the contents of a serving index. In the example illustrated, the serving index, such as serving index 108, is created when indexer 106 rips repository 104. The serving index 108 includes terms 302, such as “dog” and “cat.” Each document in serving index 108 has a docID. As represented in FIG. 3A, a document with docID doc304 contains the term “dog,” but does not contain the term “cat.” Doc306 contains the term “cat,” but does not contain the term “dog.” Doc310 contains both terms.
New terms can be added into serving index 108 after the indexer has finished ripping the repository by building layers of sorted maps on top of the existing serving index.
FIG. 3B is a representation of some of the contents of an example serving index with two layers of a sorted map on top. In the example shown, an additional term, represented by “u0” was inserted into index 108 after the initial indexing was complete. A term represented by “u1” was added subsequently.
A security fingerprint can be inserted into serving index 108 as an additional term that can indicate whether a document should be returned when a user requests that only unsecured documents be included in results to a query. Each time security configuration 116 changes, a new security fingerprint can be inserted into serving index 108 to indicate which documents should be included in unsecured queries.
In the example shown, “u0” corresponds to a security fingerprint generated by monitor 114 based on the contents of security configuration 116 at the time the serving index is complete. In some embodiments, the security fingerprint is unique. One method for generating a security fingerprint is to take a hash of the security configuration. As discussed more fully below, the security fingerprint may also contain one or more special characters (represented hereinafter as “####”). For example “u0” may be a hash of security configuration 116 concatenated with ####.
Monitor 114 monitors security configuration 116 for changes. One way this can be accomplished is by having monitor 114 continuously calculate a security fingerprint of security configuration 116 and compare it to the previous calculation. If the security fingerprint has changed, that indicates that the configuration file has been changed. As described more fully below, when monitor 114 detects a change in security configuration 116, it sends the new security fingerprint (“u1” in the example shown) to security ripper 112, which uses the updated security configuration 116 and security fingerprint to rip repository 104 and create a log that is read by indexer 106. Based on the log created by security ripper 112, indexer 106 adds a new layer to serving index 108 containing the term u1.
In this example, only one security configuration is used by the system shown in FIG. 1. In other examples, multiple or different methods of crawling may be used and multiple security configurations may be employed. This may be the case, for example, when some of the documents are accessed using a virtual private network, and others are accessed through a single sign on server. If multiple security configurations are used, monitor 114 monitors each security configuration for changes. As discussed more fully below, the security fingerprint generated by monitor 114 is calculated based on the concatenation of the multiple security configurations. If a change is detected in any of the security configurations, the security fingerprint is recalculated based on a new concatenation of the security configurations. For example, if two security configurations (“A” and “B”) are used, the security fingerprint is calculated on the concatenation of A and B. If security configuration A changes (“newA”), a new security fingerprint is calculated on the concatenation of newA and B. A new security fingerprint is thus created every time a change is made to any of the security configurations.
FIG. 4A illustrates an embodiment of a process for delivering content with access control and search capabilities. In the example illustrated, a query is received from a user by a search server through a frontend at 402. At 404, it is determined whether the query includes a request to limit the results to unsecured documents, or whether access controlled documents should be provided. If it is determined that both unsecured and access controlled results should be provided, the process ends at 406. In some embodiments, instead of ending the process, methods are employed at 406 to provide access controlled search results as appropriate, as described in U.S. patent application Ser. No. 10/982,407, entitled ACCESS CONTROLLED SEARCH RESULTS filed Nov. 5, 2004, which is incorporated herein by reference for all purposes.
One way that a user can indicate that only unsecured results should be returned is by checking a box, such as “limit results to unsecured documents” in a search window configured to provide such a box. Other methods can be employed as appropriate. If it is determined at 404 that only unsecured results should be returned, at 408, the current security fingerprint is included with the user's query as an additional, mandatory term. For example, when a user requests that a query of the term “dog” be performed and limited to unsecured documents, the search performed on the index is “dog AND <current security fingerprint>.”
The current security fingerprint can be incorporated into a query in different ways. One method is to include the security fingerprint itself as a search term. For example, if a hash of the security configuration is 1234XYZ7890, the search could be constructed as “dog AND 1234XYZ7890.” A potential problem of this method is that collisions are possible. Specifically, it may be possible for the security fingerprint to appear in a document as a term, coincident to its use in the sorted map to indicate that the document should be made available in unsecured searches. The effect of such a collision could be to make an otherwise secure document, that coincidentally contains the hash value, unsecured.
One method for preventing collisions is to concatenate an additional character or string of characters with the security fingerprint. For example, the additional character or string of characters could be special characters disallowed as a query term. This could occur, for example, if the frontend is configured to discard or reject such characters when submitted with a query. For example, a non printable ASCII character, such as that represented by 007 dec (hereinafter written as “ASCII[007]”) could be used as a special character. If a user includes the special term as part of a query, it is removed by the frontend. Characters or strings of characters that do not appear in the index can also be used as special characters. For example, when a document in the repository is indexed, the indexer ignores delimeters such as line return “\n” and that term does not appear in the serving index. Thus, a delimeter such as “\n” could be used as special character ####.
Collisions can also be prevented by using different alphabets for query submissions and indexed terms. For example, a user may be allowed to submit queries in the standard ASCII character set. The search appliance of FIG. 1 can be configured to store documents using a superset alphabet, such as a special alphabet created by adding 1 to the value of each ASCII character but also including the character ASCII[000] and having an extra bit. In such a scenario, a user's input of ASCII[065] corresponds with a character “066” on the system, and frontend 120 is configured to map the user's query to the superset alphabet by adding 1 to each ASCII character. The result is that a user will never be able to successfully submit a query containing ASCII[000], and thus it, too, could be used as special character ####.
FIG. 4B illustrates an embodiment of a process for requesting unsecured documents. The process depicted in FIG. 4B could be an example of an implementation of portions of 402, 408, and 410 of FIG. 4A. In the example illustrated, at 420, a user submits to a frontend a query for “dog” that is limited to unsecured results. At 422, the frontend rewrites the query as a request for the term “dog” and a special term for unsecured results represented here as ####, sending the resulting query to a search server. In some embodiments, the special character may be concatenated before the query is submitted to the frontend, such as through use of a special interface. At 424, the search server concatenates the most recent security fingerprint, represented here as ABCD1234, that it has received to the special character, resulting in the query “dog” anded with ####ABCD1234. At 426, the search server conducts a search of the serving index using the terms “dog” and ####ABCD1234.
In some cases, a user may submit a query with multiple terms. If the query is “dog AND cat” it is ultimately rewritten as “dog AND cat AND ####ABCD1234.” If the query is “dog OR cat,” it is ultimately rewritten as “(dog AND ####ABCD1234) OR (cat AND ####ABCD1234).”
FIG. 5 illustrates an embodiment of a process used by a security ripper to create a log of documents that are currently unsecured. In the example illustrated, at 502, a security ripper, such as security ripper 112, receives a security configuration and a security fingerprint, for example from monitor 114. At 504, the ripper examines an entry in the received security configuration. If no credential is required, or if the document is marked public, the ripper indicates through a log file that the entry should receive the current security fingerprint as an additional term. If the document requires a credential and is marked secure, the ripper does not make a log entry. In some embodiments, security ripper 112 logs when no security fingerprint should be added to entries, rather than omitting them. At 506, the ripper determines whether there are more entries to check, and returns to 504 as appropriate.
FIG. 6 illustrates an embodiment of a process used by a search server when a security configuration changes. In the example illustrated, when security configuration 116 changes, monitor 114 calculates a new security fingerprint. At 602, search server 110 is notified of the new security fingerprint, such as via a log. At 604, search server 110 stores the newly received security fingerprint for use, such as in the process of FIGS. 4A and 4B.
FIG. 7 illustrates an embodiment of a process used by an indexer when a security configuration changes. In the example illustrated, when security configuration 116 changes, monitor 114 calculates a new security fingerprint. At 702, indexer 106 is notified that a change has occurred, such as by being notified by a log, such as is generated by security ripper 112 in the process illustrated in FIG. 5. At 704, indexer 106 uses the log to build a sorted map.
Although the foregoing embodiments have been described in some detail for purposes of clarity of understanding, the invention is not limited to the details provided. There are many alternative ways of implementing the invention. The disclosed embodiments are illustrative and not restrictive.