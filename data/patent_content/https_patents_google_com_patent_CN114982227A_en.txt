CN114982227A - Optimal format selection for video players based on predicted visual quality using machine learning - Google Patents
Optimal format selection for video players based on predicted visual quality using machine learning Download PDFInfo
- Publication number
- CN114982227A CN114982227A CN201980103334.2A CN201980103334A CN114982227A CN 114982227 A CN114982227 A CN 114982227A CN 201980103334 A CN201980103334 A CN 201980103334A CN 114982227 A CN114982227 A CN 114982227A
- Authority
- CN
- China
- Prior art keywords
- video
- machine learning
- training
- learning model
- quality
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N17/00—Diagnosis, testing or measuring for television systems or their details
- H04N17/004—Diagnosis, testing or measuring for television systems or their details for digital television systems
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N20/00—Machine learning
- G06N20/10—Machine learning using kernel methods, e.g. support vector machines [SVM]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/084—Backpropagation, e.g. using gradient descent
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/102—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or selection affected or controlled by the adaptive coding
- H04N19/12—Selection from among a plurality of transforms or standards, e.g. selection between discrete cosine transform [DCT] and sub-band transform or selection between H.263 and H.264
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/134—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or criterion affecting or controlling the adaptive coding
- H04N19/154—Measured or subjectively estimated visual quality after decoding, e.g. measurement of distortion
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/40—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using video transcoding, i.e. partial or full decoding of a coded input stream followed by re-encoding of the decoded output stream
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N21/00—Selective content distribution, e.g. interactive television or video on demand [VOD]
- H04N21/20—Servers specifically adapted for the distribution of content, e.g. VOD servers; Operations thereof
- H04N21/23—Processing of content or additional data; Elementary server operations; Server middleware
- H04N21/234—Processing of video elementary streams, e.g. splicing of video streams, manipulating MPEG-4 scene graphs
- H04N21/23418—Processing of video elementary streams, e.g. splicing of video streams, manipulating MPEG-4 scene graphs involving operations for analysing video streams, e.g. detecting features or characteristics
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N21/00—Selective content distribution, e.g. interactive television or video on demand [VOD]
- H04N21/20—Servers specifically adapted for the distribution of content, e.g. VOD servers; Operations thereof
- H04N21/23—Processing of content or additional data; Elementary server operations; Server middleware
- H04N21/234—Processing of video elementary streams, e.g. splicing of video streams, manipulating MPEG-4 scene graphs
- H04N21/2343—Processing of video elementary streams, e.g. splicing of video streams, manipulating MPEG-4 scene graphs involving reformatting operations of video signals for distribution or compliance with end-user requests or end-user device requirements
- H04N21/234309—Processing of video elementary streams, e.g. splicing of video streams, manipulating MPEG-4 scene graphs involving reformatting operations of video signals for distribution or compliance with end-user requests or end-user device requirements by transcoding between formats or standards, e.g. from MPEG-2 to MPEG-4 or from Quicktime to Realvideo
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N21/00—Selective content distribution, e.g. interactive television or video on demand [VOD]
- H04N21/20—Servers specifically adapted for the distribution of content, e.g. VOD servers; Operations thereof
- H04N21/23—Processing of content or additional data; Elementary server operations; Server middleware
- H04N21/234—Processing of video elementary streams, e.g. splicing of video streams, manipulating MPEG-4 scene graphs
- H04N21/2343—Processing of video elementary streams, e.g. splicing of video streams, manipulating MPEG-4 scene graphs involving reformatting operations of video signals for distribution or compliance with end-user requests or end-user device requirements
- H04N21/234363—Processing of video elementary streams, e.g. splicing of video streams, manipulating MPEG-4 scene graphs involving reformatting operations of video signals for distribution or compliance with end-user requests or end-user device requirements by altering the spatial resolution, e.g. for clients with a lower screen resolution
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N21/00—Selective content distribution, e.g. interactive television or video on demand [VOD]
- H04N21/20—Servers specifically adapted for the distribution of content, e.g. VOD servers; Operations thereof
- H04N21/23—Processing of content or additional data; Elementary server operations; Server middleware
- H04N21/234—Processing of video elementary streams, e.g. splicing of video streams, manipulating MPEG-4 scene graphs
- H04N21/2343—Processing of video elementary streams, e.g. splicing of video streams, manipulating MPEG-4 scene graphs involving reformatting operations of video signals for distribution or compliance with end-user requests or end-user device requirements
- H04N21/23439—Processing of video elementary streams, e.g. splicing of video streams, manipulating MPEG-4 scene graphs involving reformatting operations of video signals for distribution or compliance with end-user requests or end-user device requirements for generating different versions
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N21/00—Selective content distribution, e.g. interactive television or video on demand [VOD]
- H04N21/40—Client devices specifically adapted for the reception of or interaction with content, e.g. set-top-box [STB]; Operations thereof
- H04N21/43—Processing of content or additional data, e.g. demultiplexing additional data from a digital video stream; Elementary client operations, e.g. monitoring of home network or synchronising decoder's clock; Client middleware
- H04N21/44—Processing of video elementary streams, e.g. splicing a video clip retrieved from local storage with an incoming video stream, rendering scenes according to MPEG-4 scene graphs
- H04N21/4402—Processing of video elementary streams, e.g. splicing a video clip retrieved from local storage with an incoming video stream, rendering scenes according to MPEG-4 scene graphs involving reformatting operations of video signals for household redistribution, storage or real-time display
- H04N21/44029—Processing of video elementary streams, e.g. splicing a video clip retrieved from local storage with an incoming video stream, rendering scenes according to MPEG-4 scene graphs involving reformatting operations of video signals for household redistribution, storage or real-time display for generating different versions
Abstract
Systems and methods for selecting an optimal format for a video player based on visual quality are disclosed. The method comprises the following steps: generating a plurality of reference transcoded versions of a reference video; obtaining quality scores for frames of a plurality of reference transcoded versions of a reference video; generating a first training input comprising a set of color attributes, spatial attributes, and temporal attributes for a frame of a reference video; and generating a first target output for the first training input, wherein the first target output comprises quality scores for frames of a plurality of reference transcoded versions of the reference video. The method further comprises the following steps: training data is provided to train the machine learning model on (i) a set of training inputs including a first training input and (ii) a set of target outputs including a first target output.
Description
Technical Field
Aspects and embodiments of the present disclosure relate to video processing, and more particularly, to optimal format selection for a video player based on predicted visual quality.
Background
The content sharing platform enables users to upload, consume, search, approve ("like"), dislike, and/or comment on content such as videos, images, audio clips, news stories, and the like. In a content sharing platform, users may upload content (e.g., videos, images, audio clips, etc.) for inclusion in the platform, thereby enabling other users to consume (e.g., view, etc.) the content. Most content sharing platforms transcode original source video from its original encoding format to a common format. The transcoding comprises the following steps: decoding the source video from the original format into an unencoded representation using a codec of the original format; and then encodes the unencoded representation using a common format codec. Transcoding can be used to reduce storage requirements and can also be used to reduce bandwidth requirements for providing video to clients.
Disclosure of Invention
The following presents a simplified summary of various aspects of the disclosure in order to provide a basic understanding of such aspects. This summary is not an extensive overview of all contemplated aspects, and is intended to neither identify key or critical elements nor delineate the scope of such aspects. Its purpose is to present some concepts of the disclosure in a simplified form as a prelude to the more detailed description that is presented later.
In one aspect of the disclosure, a system and methods are disclosed for training a machine learning model (e.g., a neural network, Convolutional Neural Network (CNN), support vector machine [ SVM ], etc.) and processing video using the trained model. In one embodiment, a method comprises: training data is generated for a machine learning model to be trained for identifying quality scores for a set of transcoded versions of a new video at a set of display resolutions. Generating training data may include: generating a plurality of reference transcoded versions of a reference video; obtaining quality scores for frames of a plurality of reference transcoded versions of a reference video; generating a first training input comprising a set of color attributes, spatial attributes, and temporal attributes for a frame of a reference video; and generating a first target output for the first training input, wherein the first target output comprises quality scores of frames of a plurality of reference transcoded versions of the reference video. The method further comprises the following steps: training data is provided to train a machine learning model on (i) a set of training inputs including a first training input and (ii) a set of target outputs including a first target output.
In one embodiment, the quality score includes a peak signal-to-noise ratio (PSNR) of the frame. In some embodiments, the quality score comprises video multi-method assessment fusion (VMAF) of the frame. Further, the color attribute may include at least one of RGB or Y values of the frame. The spatial attributes may include a Gabor feature filter bank. The temporal attribute may include optical flow.
In some implementations, the machine learning model is configured to process the new video and generate one or more outputs indicative of quality scores of a set of transcoded versions of the new video at a set of display resolutions. Further, the plurality of transcoded versions of the reference video may include transcoding of the reference video at each of a plurality of different video resolutions, transcoding configurations, and different display resolutions.
Further, computing devices for performing the operations of the above-described methods and various embodiments described herein are disclosed. Also disclosed are computer-readable media storing instructions for performing operations associated with the above-described methods and various embodiments described herein.
Drawings
Aspects and embodiments of the present disclosure will be understood more fully from the detailed description given below and from the accompanying drawings of various aspects and embodiments of the disclosure, which, however, should not be taken to limit the disclosure to the specific aspects or embodiments, but are for explanation and understanding only.
FIG. 1 depicts an illustrative computer system architecture in accordance with one or more aspects of the present disclosure.
Fig. 2 is a block diagram of an example training set generator for creating a data set for a machine learning model using a historical video data set in accordance with one or more aspects of the present disclosure.
Fig. 3 is a block diagram illustrating a system for determining video classification in accordance with one or more aspects of the present disclosure.
Fig. 4 depicts a flowchart of one example of a method for training a machine learning model in accordance with one or more aspects of the present disclosure.
Fig. 5 depicts a flowchart of one example of a method for processing video using a trained machine learning model in accordance with one or more aspects of the present disclosure.
Fig. 6 depicts a flowchart of one example of a method for processing video using a trained machine learning model and optimizing format selection using an output of the trained machine learning model at a server device in accordance with one or more aspects of the present disclosure.
Fig. 7 depicts a flowchart of one example of a method for optimizing format selection using an output of a trained machine learning model at a client device in accordance with one or more aspects of the present disclosure.
Fig. 8A and 8B provide example graphical representations of the output of a trained machine learning model for optimizing format selection according to embodiments of the present disclosure.
Fig. 9 depicts a block diagram of an illustrative computer system operating in accordance with one or more aspects of the present disclosure.
Detailed Description
In a content sharing platform, users may upload content (e.g., videos, images, audio clips, etc.) for inclusion in the platform, thereby enabling other users to consume (e.g., view, etc.) the content. Due to limitations of viewing devices and network bandwidth, video uploaded to the content sharing platform is transcoded (decompressed and recompressed) before being provided to viewers in order to enhance the viewing experience. Uploaded video may have multiple transcoding variants played at various display resolutions. The resolutions (input, transcoding, and display) can be grouped roughly into canonical industry standard resolutions such as 360p, 480p, 720p, 1080p, and 2160p (4k), among others.
A typical transcoding pipeline is capable of generating multiple transcoded versions (also referred to as video formats). While playing the video, the media viewer can adaptively select one of those video formats to serve. Assuming that the user has sufficient bandwidth, the traditional service strategy is to switch to a higher resolution version of the video until the highest available resolution is reached. This is also referred to as an Adaptive Bitrate (ABR) strategy. The assumption of this ABR strategy is that the higher resolution version provides better visual quality. However, in some cases, the visual quality of the higher resolution version can be very close to the visual quality of the lower resolution version (e.g., when the 480p version of the video has a similar perceived quality as the 720p version of the video when played on a client device having a 480p display resolution). In this case, providing a higher resolution version of the video wastes the user's bandwidth without providing the user with a significant benefit in terms of perceived quality.
One means to avoid this inefficiency due to sub-optimal format selection is to append a list of objective quality scores to each transcoded version and implicitly assume that each objective quality score reflects the perceived quality at the particular display resolution at which the particular format is played. Computing a single quality score for a particular video format requires decoding both video streams (i.e., the rescaled transcoded version and the original version) and extracting features per frame in order to compute an overall quality score. If it is assumed that there are "N _ format" valid transcoded video formats, "N _ transcoding profile" candidate transcoding profiles for transcoding the input video into a certain video format, and "N _ display" possible display resolutions, then the total number of possible quality scores to be calculated will be: the 'N _ format' x 'N _ transconfig' x 'N _ display' score. Computing all possible quality scores across various resolutions uses a large amount of computational resources. Furthermore, performing such large-scale computations on large systems (e.g., content sharing platforms with millions of new uploads of content each day) may not be feasible.
Aspects and embodiments of a system and method for efficiently predicting all possible video quality scores for a video based on deep learning are disclosed herein. More particularly, embodiments relate to training and using efficient machine learning models to predict objective quality scores for videos compressed at arbitrary compression settings and played at arbitrary display resolutions.
According to one embodiment, a set of historical videos is accessed and used to train a machine learning model. In particular, each of the historical videos is used to generate input features to train a machine learning model. The input features include a set of attributes of the frames of the respective historical video. The set of attributes can include color attributes (e.g., red/green/blue (RGB) intensity values or Y intensity values in YUV format), spatial attributes (e.g., Gabor filters), and temporal attributes (e.g., optical flow) of the frame(s) of the respective historical video. In addition, each of the historical videos is transcoded into a plurality of different resolution formats and transcoding configurations to generate a plurality of transcoded versions of the video. The multiple transcoded versions are then rescaled to multiple different potential display resolutions of the client device (referred to herein as rescaled transcoded versions). A quality score (e.g., peak signal-to-noise ratio (PSNR) measurement or video multi-method assessment fusion (VMAF measurement)) is obtained for each of the rescaled transcoded versions.
These quality scores may then be used as training outputs (e.g., ground truth labels) that are mapped to the training input features discussed above and used to train the machine learning model. In this way, the machine learning model is trained to generate a predicted quality score for the video at each possible tuple of video resolution format, transcoding configuration, and display resolution. As used herein, the terms "video resolution format" and "video format" may refer to the resolution of the video prior to rescaling. The term "display resolution" may refer to the resolution at which the video is actually displayed (e.g., by a media viewer on the client device) after rescaling.
After the machine learning model has been trained, new videos may be identified for processing by the trained machine learning model. In this case, the perceived quality of the component video at various video resolutions (e.g., the video provided to the client device for playback) and the transcoding configuration at various display resolutions are unknown, as the new video is provided to the machine learning model in its entirety without knowing how the perceived quality of the video is on a particular client device.
In one embodiment, a set of attributes (e.g., color, spatial, temporal) of the new video is determined. The set of attributes of the new video is presented as input to a trained machine learning model that generates one or more outputs from the input. In one embodiment, the output is a predicted quality score that provides a predicted perceptual quality measure of the video at each possible tuple of video resolution, transcoding configuration, and display resolution. In some implementations, the predicted quality score can be used to optimize format selection at the client device. Certain aspects relating to the training and use of machine learning models are described in more detail below.
Aspects of the present disclosure thus provide a mechanism by which the predicted quality scores of a video can be identified for all possible combinations of video resolution, transcoding configuration, and display resolution. The mechanism allows for automatic and optimized format selection for video playback at a client device having a particular display resolution. One advantage of embodiments of the present disclosure is that the trained machine learning model can return multiple objective video quality scores (e.g., PSNR and VMAF values) for all (video _ format, transcoding _ config, display _ resolution) tuples of the input video at once. Embodiments avoid the time consuming process of transcoding or quality metric calculation for each possible transcoded version of the input video. The output of the trained machine learning model can be used to optimize format selection to maximize the user experience of video quality. Optimizing format selection may also have the advantage of reducing bandwidth requirements without significantly reducing video quality perceived by the user.
Fig. 1 illustrates an illustrative system architecture 100 according to one embodiment of the present disclosure. The system architecture 100 includes one or more server machines 120 through 150, a content repository 110, and client machines 102A-102N connected to a network 104. The network 104 may be a public network (e.g., the internet), a private network (e.g., a Local Area Network (LAN) or a Wide Area Network (WAN)), or a combination thereof.
The client machines 102A-102N may be Personal Computers (PCs), laptops, mobile phones, tablet computers, set-top boxes, televisions, video game consoles, digital assistants, or any other computing device. The client machines 102A-102N may run an Operating System (OS) that manages the hardware and software of the client machines 102A-102N. In one implementation, the client machines 102A-102N may upload videos to a web server (e.g., upload server 125) for storage and/or processing.
The server machines 120-150 may be rack-mounted servers, router computers, personal computers, portable digital assistants, mobile phones, laptop computers, tablet computers, cameras, camcorders, netbooks, desktop computers, media centers, or any combination thereof. The server machine 120 includes an upload server 125 that is capable of receiving content (e.g., videos, audio clips, images, etc.) uploaded by the client machines 102A-102N (e.g., via web pages, via applications, etc.).
The content items stored in the content repository 110 may include user-generated media items uploaded by client machines, as well as media items from service providers such as news organizations, publishers, libraries, and the like. In some implementations, the content repository 110 may be provided by a third party service, while in some other implementations, the content repository 110 may be maintained by the same entity that maintains the server machine 120. In some examples, content repository 110 and server machine 120 may be part of a content sharing platform that allows users to upload, consume, search, approve ("like"), dislike and/or comment on media items.
The content sharing platform may include a plurality of channels. The channels can be data content available from a common source or data content having a common topic, theme, or theme. The data content can be digital content selected by a user, digital content available by a user, digital content uploaded by a user, digital content selected by a content provider, digital content selected by a broadcaster, or the like. The channel can be associated with an owner, who is a user who can perform an activity on the channel. Different activities can be associated with a channel based on the owner's activity, such as the owner providing digital content on the channel, the owner selecting (e.g., liking) digital content associated with another channel, the owner commenting on digital content associated with another channel, and so forth. The activity associated with the channel can be collected into an activity feed for the channel. Users other than the channel owner can subscribe to one or more channels of interest to them. The concept of "subscription" may also be referred to as "like", "focus", and "plus friends", etc.
Each channel may include one or more media items. Examples of media items can include, but are not limited to, digital videos, digital movies, digital photos, digital music, website content, social media updates, electronic books (ebooks), electronic magazines, digital newspapers, digital audio books, electronic journals, web blogs, Really Simple Syndication (RSS) feeds, electronic comics, software applications, and so forth. In some implementations, the media items are also referred to as video content items.
The media items may be consumed via a media viewer 105 executing on the client machines 102A-102N. In one implementation, the media viewer 105 may be an application that allows a user to view content such as images, videos (e.g., video content items), web pages, documents, and so forth. For example, the media viewer 105 may be a web browser capable of accessing, retrieving, rendering, and/or navigating content provided by a web server (e.g., a web page such as a hypertext markup language (HTML) page, a digital media item, or a content item, etc.). The media viewer 105 may present, display, and/or provide content (e.g., web pages, media viewers) to a user. The media viewer 105 may also display an embedded media player (e.g.,
The media viewer 105 may be provided to the client devices 102A-102N by the server 120 and/or the content sharing platform. For example, the media viewer 105 may be an embedded media player that is embedded in a web page provided by the content sharing platform. In another example, the media viewer may be an application that communicates with the server 120 and/or the content sharing platform.
Embodiments of the present disclosure provide for training and using efficient machine learning models to predict the objective quality of video compressed at arbitrary compression settings and played at arbitrary display resolutions. The server machine 130 includes a training set generator 131 capable of generating training data (e.g., training input and target output sets) to train such machine learning models. Some operations of training set generator 131 are described in detail below with reference to fig. 2.
The server machine 140 includes a training engine 141 that is capable of training the machine learning model 160. The machine learning model 160 may refer to a model artifact created by the training engine 141 using training data that includes training inputs and corresponding target outputs (correct answers to the respective training inputs). The training engine 141 may find patterns in the training data that map the training inputs to the target outputs (answers to be predicted) and provide a machine learning model 160 that captures these patterns. The machine learning model may consist of, for example, a single level of linear or non-linear operation (e.g., support vector machine [ SVM ]), or may be a deep network, i.e., a machine learning model consisting of multiple levels of non-linear operation). An example of a deep network is a neural network with one or more hidden layers, and such a machine learning model may be trained by adjusting the weights of the neural network, e.g., according to a back-propagation learning algorithm or the like. For convenience, the remainder of this disclosure refers to embodiments as neural networks, although some embodiments may employ SVMs or other types of learning machines instead of or in addition to neural networks. In one embodiment, a Convolutional Neural Network (CNN), such as ResNet or EfficientNet, is used as the primary training model for the machine learning model. Other machine learning models may be considered in embodiments of the present disclosure. In one aspect, the training set is obtained from the server machine 130.
It should be noted that in some other embodiments, the functionality of server machines 120, 130, 140, and 150 may be provided by fewer machines. For example, in some embodiments, server machines 130 and 140 may be integrated into a single machine, while in other embodiments, server machines 130, 140, and 150 may be integrated into a single machine. Additionally, in some implementations, one or more of server machines 120, 130, 140, and 150 may be integrated into a content sharing platform.
In general, the functions described in one embodiment as being performed by the content item sharing platform, server machine 120, server machine 130, server machine 140, and/or server machine 150 can also be performed on client devices 102A-102N in other embodiments, if appropriate. In addition, the functions attributed to a particular component can be performed by different or multiple components operating together. The content sharing platform, server machine 120, server machine 130, server machine 140, and/or server machine 150 can also be accessed as a service provided to other systems or devices through an appropriate application programming interface, and thus is not limited to use at a website.
Fig. 2 is an example training set generator 231 (e.g., training set generator 131 of fig. 1) that creates a data set for a machine learning model (e.g., model 160 of fig. 1) using a historical video data set 240, according to some embodiments. The system 200 of fig. 2 shows a training set generator 231, training input features 210, and target output labels 220.
In some embodiments, the training set generator 231 generates a data set (e.g., a training set, a validation set, a test set) that includes one or more training input features 210 (e.g., training inputs, validation inputs, test inputs) and one or more target output labels 220 corresponding to the training input features 210. The data set may also include mapping data that maps the training input features 210 to the target output labels 220. The training input features 210 may also be referred to as "data input," features, "" attributes, "or" information. In some embodiments, the training set generator 131 may provide the data set to the training engine 141 of fig. 1, where the data set is used to train, validate, or test the machine learning model 160. Some embodiments of generating the training set may be further described with respect to fig. 4.
In some embodiments, the training input features 210 may include one or more of historical video color attributes 242, historical video spatial attributes 244, historical video temporal attributes 246, and the like. Target output label 220 may include video classification 248. The video classification 248 may include or be associated with a video quality score measurement algorithm.
In some embodiments, the training set generator 231 may generate data inputs corresponding to a set of features (e.g., one or more historical video color attributes 242, historical video spatial attributes 244, historical video temporal attributes 246) to train, validate, or test a machine learning model for each input resolution of a set of possible input resolutions of a video. Thus, each typical resolution of the video (e.g., 360p, 480p, 720p, 1080p, etc.) can have its own model, and any non-standard arbitrary input resolution (e.g., 1922x1084) can be re-scaled to the nearest standard resolution with the same aspect ratio, with any missing parts filled with 0's. For example, a first machine learning model may be trained, validated, and tested for an input video having a 360p resolution. The second machine learning model may be trained, validated, and tested against input video having a 480p resolution. A third machine learning model may be trained, validated, and tested against an input video having a resolution of 720p, and so on.
The training set generator 231 may utilize the set of historical videos 240 to train, validate, and test the machine learning model(s). In some implementations, the existing data set of the content sharing platform can be curated and used as the historical video data set 240, particularly for purposes of training, validating, and testing machine learning models. In one implementation, the historical video data set 240 may include multiple (e.g., on the order of thousands) of videos with short durations (e.g., 20 seconds, etc.) at various input resolutions (e.g., 360p, 480p, 720p, 1080p, 2160p (4K), etc.). In some implementations, the data (e.g., video) in the historical video data set 240 can be separated into training data and testing data. For example, the video of the historical video data set 240 may be randomly divided into 80% and 20% for training and testing, respectively.
To generate the set of training input features 210 and training output labels 220, the training set generator 231 may iterate the following process for each video in the historical video data set 240. For ease of reference, the process is described with respect to the first reference video of the historical video data set 240. It should be understood that the training set generator 231 may perform a similar process for all videos in the historical video data set 240.
For a first reference video, the training set generator 231 obtains training input features 210 for the first reference video. In one embodiment, for each frame of the first reference video, a set of video color attributes 242, video spatial attributes 244, and video temporal attributes 246 are extracted for each frame of the first reference video. Video color attribute 242 may refer to at least one of an RGB intensity value or a Y intensity value (of the Y' UV model) of a pixel of a frame.
Video spatial attribute 244 may refer to a Gabor filter feature set. The Gabor filter is a linear filter for texture analysis that analyzes whether there is any specific frequency content in a frame in a specific direction in a local area around an analysis point or an analysis area. In the spatial domain, the 2D Gabor filter is a gaussian kernel modulated by a sinusoidal plane wave. Embodiments of the present disclosure may also utilize other spatial features of the frame, such as block-based features (e.g., SSM, VMS, etc.).
Video temporal attribute 246 may refer to optical flow. Optical flow refers to the pattern of apparent motion of objects, surfaces, and edges in a visual scene caused by relative motion between the observer and the scene. Optical flow can be defined as the distribution of apparent motion velocity of a luminance pattern in an image. Embodiments of the present disclosure may also utilize other temporal characteristics of the frames, such as calculating differences between pixels of adjacent frames.
The set of extracted historical video color attributes 242, historical video spatial attributes 244, and historical video temporal attributes 246 for each frame in the first reference video are then combined into a first set of training input features for the first reference video. Other feature sets from frames of the input video may also be considered in embodiments of the present disclosure.
To obtain the target output label 220 for the first reference video, the training set generator 231 may transcode the first reference video to a plurality of effective video formats (e.g., 360p, 480p, 720p, 1080p, and 2160p (4K), etc.) having a plurality of transcoding configurations (e.g., scanning a Constant Rate Factor (CRF) from 0 to 51 with an h.264 encoder). Other codecs and encoders may be used in other embodiments of the present disclosure, such as the VP9 codec. The training set generator 231 then rescales all transcoded versions to multiple display resolutions (e.g., 360p, 480p, 720p, 1080p, and 2160p (4K), etc.), and rescales the original version of the input. Each rescaled transcoded version and original version is provided to a quality analyzer as a source and reference to obtain a quality score for each frame of each rescaled transcoded version and original version of the first reference video.
In one embodiment, the quality score may be a PSNR measurement for each frame of each rescaled transcoded version and the original version of the first reference video. PSNR refers to the ratio between the maximum possible power of a signal and the power of the corrupting noise that affects the fidelity of its representation. PSNR can be expressed in logarithmic decibel scale. In one embodiment, the quality score may be a VMAF measurement for each frame of each rescaled transcoded and original version of the first reference video. VMAF refers to a full reference video quality metric that predicts the subject video quality based on the reference and distorted video sequences.
The calculated quality score is used as a video classification (e.g., input ground truth label) 248 for the target output label 220 for each possible video format, transcoding configuration, and display resolution of the first reference video.
Fig. 3 is a block diagram illustrating a system 300 for determining a video classification 346 according to some embodiments. At block 310, the system 300 performs data partitioning (e.g., via the training set generator 131 of the server machine 130 of fig. 1 and/or the training set generator 231 of fig. 2) of the historical video 342 (e.g., the historical video data set 240 of fig. 2) to generate the training set 302, the validation set 304, and the test set 306. For example, the training set may be 60% of the historical video 342, the validation set may be 20% of the historical video 342, and the validation set may be 20% of the historical video 342. As described above with reference to fig. 2, the system 300 may generate a plurality of feature sets (e.g., color attributes, spatial attributes, temporal attributes) for each of the training set, the validation set, and the test set.
At block 312, the system 300 performs model training (e.g., by the training engine 141 of fig. 1) using the training set 302. The system 300 may train the plurality of models using a plurality of feature sets of the training set 302 (e.g., a first feature set of the training set 302, a second feature set of the training set 302, etc.). For example, the system 300 may train the machine learning model using a first feature set in the training set (e.g., for a first input resolution, such as 360p) to generate a first trained machine learning model, and generate a second trained machine learning model using a second feature set in the training set (e.g., for a second input resolution, such as 480 p). In some embodiments, a number of models may be generated, including models and combinations of models having various feature arrangements.
In some embodiments, model training is performed using a Convolutional Neural Network (CNN) training model. Some examples of CNN training models include ResNet and EfficientNet. In some embodiments, other training models may also be used.
At block 314, the system 300 performs model validation using the validation set 304. The system 300 may validate each of the trained models using the corresponding feature sets of the validation set 304. For example, the system 300 may validate the first trained machine learning model using a first feature set in the validation set (e.g., for 360p input resolution) and train the second trained machine learning model using a second feature set in the validation set (e.g., for 480p input resolution). In some embodiments, the system 300 may verify many models generated at block 312 (e.g., models having an arrangement of various features, combinations of models, etc.).
At block 314, the system 300 may determine the accuracy of each of the one or more trained models (e.g., via model verification), and may determine whether the one or more trained models have an accuracy that satisfies a threshold accuracy. For example, a loss function defined based on the absolute difference between the prediction quality and the ground truth may be utilized. The higher order L disparity specification may also be considered in other embodiments. In response to determining that none of the trained models has an accuracy that satisfies the threshold accuracy, flow returns to block 312 where the system 300 performs model training using the different feature sets of the training set. In response to determining that the one or more trained models have an accuracy that satisfies the threshold accuracy, flow continues to block 316. The system 300 may discard trained machine learning models having an accuracy below a threshold accuracy (e.g., based on a validation set).
At block 316, the system 300 performs model selection to determine which of the one or more trained models that satisfy the threshold accuracy has the highest accuracy (e.g., the selected model 308 based on the verification of block 314). In response to determining that the two or more trained models that satisfy the threshold accuracy have the same accuracy, the flow may return to block 312 where the system 300 performs model training using the further refined training set corresponding to the further refined feature set for determining the trained model with the highest accuracy.
At block 318, system 300 performs model testing using test set 306 to test selected model 308. The system 300 may test the first trained machine learning model using the first feature set in the test set to determine that the first trained machine learning model satisfies a threshold accuracy (e.g., based on the first feature set of the test set 306). In response to the accuracy of the selected model 308 not satisfying the threshold accuracy (e.g., the selected model 308 overfit the training set 302 and/or the validation set 304 and is not applicable to other data sets, such as the test set 306), flow continues to block 312 where the system 300 performs model training (e.g., retraining) using different training sets corresponding to different feature sets. In response to determining, based on the test set 306, that the selected model 308 has a precision that satisfies the threshold precision, flow continues to block 320. At least in block 312, the model may learn patterns in the historical images 342 to make predictions, and in block 318, the system 300 may apply the model to the remaining data (e.g., the test set 306) to test the predictions.
At block 320, the system 300 receives the input video 348 and corresponding video attributes 344 using the trained model (e.g., the selected model 308), and extracts from the output of the trained model a corresponding video classification 346 that represents a predicted quality score of the input video at each possible combination of video format, transcoding configuration, and display resolution tuple. For a single input video, the trained model may be used to predict per-frame quality scores for each sampled frame, and then these frame scores may be aggregated to get an overall score for the input video at a particular video format, transcoding configuration, and display resolution tuple. In other forms, the polymerization process may also vary, i.e., averaged to a weighted average, etc.
The final output is a 3D quality matrix of all possible index tuples (video _ format _ index), transcoding _ config _ index, display _ resolution _ index). One example graphical representation of the output of the trained model of an embodiment of the present disclosure is shown in fig. 8A and 8B. Fig. 8A and 8B, discussed further below, show predicted VMAF scores for videos transcoded to 360p, 480p, and 720p versions and displayed at 480p and 720p, where the various scores of the trained model predictions are very close to the corresponding ground truth scores.
In some embodiments, after generating the data set and using the data set to train, validate, or test the machine learning model 160, the machine learning model 160 may be further trained, validated, tested (e.g., using manually determined image classifications, etc.) or adjusted (e.g., adjusting weights associated with input data to the machine learning model 160, such as connection weights in a neural network).
In some embodiments, one or more of acts 310-320 may occur in various orders and/or with other acts not presented and described herein. In some embodiments, one or more of acts 310-320 may not be performed. For example, in some embodiments, one or more of the data partitioning of block 310, the model verification of block 314, the model selection of block 316, or the model testing of block 318 may not be performed.
For performance and delay improvements during embodiments of the present disclosure, the trained models may be combined with temporal samples of the input video. For example, the system may use several sample frames (rather than all frames) of the input video as input to the trained model to predict the overall quality. Using such temporal sampling of the input video, significant speed improvements can be achieved with little loss in accuracy. These speed gains can be obtained without any retraining of the model.
In an embodiment of the present disclosure, the video classification 346 obtained from using the trained model 320 may be used to optimize format selection on the client side (e.g., at a media viewer such as the media viewer 105 of fig. 1). For the example shown in fig. 8A, when the display resolution is 480p and the currently playing version is 360p, it is assumed that the bandwidth is sufficient for all transcoded versions. The perceptual quality of the 480p and 720p versions are very close, and they are both significantly higher than the 360p version, based on the predicted quality score. In this case, the optimal format is a 480p transcoded version, rather than 720 p.
Without the currently proposed algorithms that provide predictive scores, the media viewer may blindly switch to a 720p version that uses more bandwidth but does not improve the actual viewing experience (e.g., the perceived quality as measured by, for example, PSNR or VMAF). When the display resolution is 720p (fig. 8B), increasing to 720p improves the actual perceived quality, since the difference between 480p and 720p is greater than 6 points on the VMAF (which translates roughly to the higher 1 st in the significant difference).
Another advantage of an embodiment of the present disclosure is that it allows for accurate quality assessment (e.g., at CRF levels). For example, the media viewer can calculate the exact quality improvement over 480p display resolution from switching the 480p CRF40 version to the 720p CRF 30 version to further optimize format selection.
Fig. 4 depicts a flowchart of one example of a method 400 for training a machine learning model in accordance with one or more aspects of the present disclosure. The method is performed by processing logic that may comprise hardware (circuitry, dedicated logic, etc.), software (such as is run on a general purpose computer system or a dedicated machine), or a combination of both. In one embodiment, the method is performed by computer system 100 of FIG. 1, while in some other embodiments, one or more of the blocks of FIG. 4 may be performed by one or more other machines not depicted in the figure. In some aspects, one or more blocks of fig. 4 may be performed by training set generator 131 of server machine 130 of fig. 1 and/or training set generator 231 of fig. 2.
For simplicity of explanation, the methodologies are depicted and described as a series of acts. However, acts in accordance with this disclosure can occur in various orders and/or concurrently, and with other acts not presented and described herein. Moreover, not all illustrated acts may be required to implement a methodology in accordance with the disclosed subject matter. In addition, those skilled in the art will understand and appreciate that the methodologies could alternatively be represented as a series of interrelated states via a state diagram or events. Additionally, it should be appreciated that the methodologies disclosed herein are capable of being stored on an article of manufacture to facilitate transporting and transferring such methodologies to computing devices. The term article of manufacture, as used herein, is intended to encompass a computer program accessible from any computer-readable device or storage media.
The method 400 begins by generating training data for a machine learning model. In some embodiments, at block 401, the training set T is initialized to an empty set. At block 402, a reference video is transcoded into a plurality of resolution formats having a plurality of transcoding configurations. In one embodiment, the plurality of resolution formats includes 360p, 480, 720p, 1080p, 2160p (4K), and the like. The multiple transcoding configurations may include CRFs from 0 to 51 with h.264 encoders. Other codecs and encoders may be used in embodiments of the present disclosure for transcoding configurations, such as the VP9 codec. In one example, the reference video may be a video with 480p resolution that is transcoded into each resolution format of 360p, 480p, 720p, 1080p and 2160p at each transcoding configuration of the h.264 encoder from CRF 0 to 51. For example, for all resolution formats and transcoding configurations, 480p reference video can be transcoded into 720p CRF 0 versions to 720p CRF 51 versions, and so on, resulting in multiple different transcoded versions of the reference video.
At block 403, each transcoded version of the reference video to be generated at block 402 is rescaled to a plurality of different display resolutions. In one implementation, the plurality of different display resolutions represent possible display resolutions of client devices playing transcoded versions of the reference video. The plurality of different display resolutions may include 360p, 480p, 720p, 1080p, 2160p, and the like. Referring to the example above, taking the 720p CRF 30 version of the 480p reference video as another example, the 720p CRF 30 version can be rescaled to each display resolution of 360p, 480p, 720p, 1080p, and 2160p to generate a rescaled transcoded version of the 480p reference video. The rescaling is performed for each transcoded version of the reference video generated at block 402 to generate a plurality of rescaled transcoded versions of the reference video.
At block 404, a quality score for each frame of each rescaled transcoded version of the reference video is obtained. In one embodiment, the quality score may be a PSNR score or a VMAF score determined for frames of a rescaled transcoded version of the reference video. PSNR refers to the ratio between the maximum possible power of a signal and the power of the corrupting noise that affects the fidelity of its representation. PSNR can be expressed in logarithmic decibel scale. VMAF refers to a full reference video quality metric that predicts the quality of the subject video based on the reference and distorted video sequences.
At block 405, an input/output map is generated for each frame of the reference video. Input/output mapping refers to a training input that is mapped to a particular target output. The training input includes or is based on a set of attributes of the reference video. A quality score of frames of the rescaled transcoded version of the reference video is identified for a target output of the training input. The training inputs are associated with (or mapped to) the target outputs. In one embodiment, the set of attributes of the reference video includes color attributes (e.g., RGB intensity values or Y intensity values for each frame), spatial attributes (e.g., Gabor filter features for each frame), and temporal attributes (e.g., optical flow for each frame). In one embodiment, the set of attributes for each frame of the reference video is mapped as an input to a quality score for each frame of each rescaled transcoded version of the reference video. At block 406, the input/output mapping generated at block 405 is added to the training set T.
Block 407 branches based on whether the training set T is sufficient for training the machine learning model 160. If so, execution proceeds to block 408, otherwise, execution returns to block 402. It should be noted that in some embodiments, the sufficiency of the training set T may be determined based on the number of input/output mappings in the training set, while in some other embodiments, the sufficiency of the training set T may be determined based on one or more other criteria (e.g., a measure of diversity of training examples, etc.) in addition to or instead of the number of input/output mappings.
At block 408, a training set T is provided to train the machine learning model 160. In one embodiment, the training set T is provided to the training engine 141 of the server machine 140 to perform the training. For example, in the case of a neural network (e.g., CNN), input values of a given input/output map (e.g., pixel values of a training image, etc.) are input to the neural network, and output values of the input/output map are stored in output nodes of the neural network. The connection weights in the neural network are then adjusted according to a learning algorithm (e.g., back propagation, etc.), and the process is repeated for other input/output mappings in the training set T. After block 408, the machine learning model 160 can then be used to process the video (e.g., in accordance with the method 500 of fig. 5, described below).
Fig. 5 depicts a flowchart of one example of a method 500 for processing video using a trained machine learning model in accordance with one or more aspects of the present disclosure. The method is performed by processing logic that may comprise hardware (circuitry, dedicated logic, etc.), software (such as is run on a general purpose computer system or a dedicated machine), or a combination of both. In one embodiment, the method is performed using server machine 150 and trained machine learning model 160 of fig. 1, while in some other embodiments, one or more of the blocks of fig. 5 may be performed by one or more other machines not depicted in the figures.
The method 500 may include receiving an input video (e.g., from a user device or a server such as the upload server 125) and processing the input video using a trained model such as the trained machine learning model 160. The trained model may be configured to generate one or more outputs indicative of a predicted quality score for the input video based on pixel data of frames of the input video.
In some implementations, at block 501, a video (input video) may be identified for processing. In one example, the video includes one or more frames of an upload video (e.g., a video uploaded to a content sharing platform).
At block 502, a subset of frames is extracted from the frames of the video. In one embodiment, one frame out of every 10 frames in the video may be extracted. At block 503, for each extracted frame, a set of attributes for the frame is identified. The set of attributes may include color attributes (e.g., RGB intensity values or Y intensity values for each frame), spatial attributes (e.g., Gabor filter features for each frame), and temporal attributes (e.g., optical flow for each frame).
At block 504, the set of attributes is provided as input to the trained machine learning model. In one embodiment, the trained machine learning model is trained using the method 400 described with respect to fig. 4. At block 505, one or more outputs are obtained from the trained machine learning model. In one embodiment, the output from the trained machine learning model is a quality score corresponding to each extracted frame of the video. The trained machine learning model generates a plurality of quality scores, each quality score corresponding to all possible index tuples of video resolution format, transcoding configuration, and display resolution of the input video.
At block 506, the per-frame quality scores of the extracted frames of the video are combined to generate an overall quality score for the video. An overall quality score is generated for each of the possible index tuples of video resolution format, transcoding configuration, and display resolution. In one embodiment, combining the quality scores per frame comprises aggregating the scores. In some embodiments, the polymerization process may vary and can include averaging to weighted averaging, and the like.
At block 507, a final output of the trained machine learning model is generated, wherein the final output is a 3D quality matrix of all possible index tuples of video resolution format, transcoding configuration, and display resolution.
Fig. 6 depicts a flowchart of one example of a method 600 for processing video using a trained machine learning model and optimizing format selection at a server device using the output of the trained machine learning model, in accordance with one or more aspects of the present disclosure. The method is performed by processing logic that may comprise hardware (circuitry, dedicated logic, etc.), software (such as is run on a general purpose computer system or a dedicated machine), or a combination of both. In one embodiment, the method is performed using server machine 150 and trained machine learning model 160 of fig. 1, while in some other embodiments, one or more blocks of fig. 6 may be performed by one or more other machines not depicted in the figure.
The method 600 may include receiving an input video (e.g., from a user device or a server such as the upload server 125) and processing the input video using a trained model such as the trained machine learning model 160. The trained model may be configured to generate one or more outputs indicative of a predicted quality score of the input video based on pixel data of frames of the input video.
In some implementations, at block 601, a video (input video) may be identified for processing. In one example, the video includes one or more frames of an upload video (e.g., a video uploaded to a content sharing platform).
At block 602, a set of attributes for a video is identified. In one embodiment, the set of attributes is determined for each of a subset of the frames of the video. The set of attributes may include color attributes (e.g., RGB intensity values or Y intensity values for each frame of the video), spatial attributes (e.g., Gabor filter features for each frame of the video), and temporal attributes (e.g., optical flow for each frame of the video).
At block 603, the set of attributes is provided as input to the trained machine learning model. In one embodiment, the trained machine learning model is trained using the method 400 described with respect to FIG. 4. At block 604, one or more outputs are obtained from the trained machine learning model. In one embodiment, the output from the trained machine learning model is a quality score corresponding to each extracted frame of the video. The trained machine learning model generates a plurality of quality scores, each quality score corresponding to all possible index tuples of the video resolution format, transcoding configuration, and display resolution of the video. In one embodiment, the per-frame quality scores of extracted frames of a video are combined to generate an overall quality score for the video. An overall quality score is generated for each possible index tuple of video resolution format, transcoding configuration, and display resolution. In one embodiment, combining the quality scores per frame comprises aggregating the scores. In some embodiments, the aggregation process can vary and can include averaging to weighted averaging, and the like.
At block 605, quality score data is extracted from the output obtained at block 604. In one embodiment, the quality score data comprises a quality score corresponding to each rescaled transcoded version of the video. The quality scores each reflect a perceived quality of the video in a respective rescaled transcoding configuration of the video at a particular display resolution. At block 606, the extracted quality score is used to determine a resolution format to select at a media viewer of the client device. In one implementation, format analysis engine 152 (at server machine 150 of fig. 1 and/or at media viewer 105 of client device 102A) may use the extracted quality scores to select a resolution format and transcoding configuration at a client device having a particular display resolution. Format analysis engine 152 may compare the quality scores to inform the client device of the optimal resolution format and transcoding configuration selection.
Fig. 7 depicts a flowchart of one example of a method 700 for optimizing format selection using an output of a trained machine learning model at a client device in accordance with one or more aspects of the present disclosure. The method is performed by processing logic that may comprise hardware (circuitry, dedicated logic, etc.), software (such as is run on a general purpose computer system or a dedicated machine), or a combination of both. In one embodiment, the method is performed using the clients 102A-102N of fig. 1, while in some other embodiments, one or more blocks of fig. 7 may be performed by one or more other machines not depicted in the figure.
The method 700 may include, at block 701, receiving an input video (e.g., from a server, such as the upload server 125, at the client device 102A-10N) for playing at a media viewer of the client device, wherein the client device has a particular display resolution. At block 702, the client device selects to perform playback of the video in the current format. The current format selection may include a current video resolution and a current transcoding configuration.
At block 703, a quality score corresponding to the video is accessed. The quality score is generated using a trained model (e.g., trained machine learning model 160 of fig. 1). The trained model may be configured to generate one or more outputs indicative of predicted quality scores of the input video at various tuples of video resolution, transcoding configuration, and display resolution based on pixel data of frames of the input video. The output may be maintained at a server device (such as server machine 150) or may be provided as metadata with the video when it is received for playback. In one embodiment, the trained machine learning model may be trained according to the method 400 of FIG. 4 described above.
At decision block 704, a determination is made whether the quality score indicates a perceived improvement in a different format selection (e.g., in a different video resolution and/or transcoding configuration) than the current format selection for the particular display resolution of the client device. Fig. 8A and 8B, discussed below, provide examples of optimizing format selection at a client device using quality scores of a trained machine learning model of embodiments of the present disclosure. If the quality scores indicate a perceived improvement under different format selections, the method 700 proceeds to block 705 where the current format selection for video playback is changed to a format selection (e.g., video resolution and/or transcoding configuration) that corresponds to a quality score that provides a perceived quality improvement of the video at the display resolution of the client. The method 700 then returns to block 702 to continue playing the video in the new format selection. At decision block 704, if the quality score does not indicate a perceived quality improvement for the selection in the different format, the method 700 returns to block 702 to continue playback of the video selected in the current format.
Fig. 8A and 8B provide example graphical representations of the output of a trained machine learning model for optimizing format selection according to embodiments of the present disclosure. Figures 8A and 8B show predicted VMAF scores for videos transcoded into 360p, 480p, and 720p versions and displayed at 480p and 720p, where the various scores for the trained model predictions are very close to the corresponding ground truth scores.
For the example shown in fig. 8A, the graph shows the predicted quality score (e.g., VMAF) when the display resolution is 480p and the currently playing version is 360p, assuming that the bandwidth is sufficient for all transcoded versions. The perceptual quality of the 480p and 720p versions are very close, and they are both significantly higher than the 360p version, based on the predicted quality score. In this case, the optimal format is a 480p transcoded version, rather than 720 p.
Without embodiments of the present disclosure that provide predictive scores, the media viewer blindly moves up to a 720p version that uses more bandwidth but does not improve the actual viewing experience (e.g., perceived quality) of the video. When the display resolution is 720p (fig. 8B), the improvement to 720p improves the actual perceived quality of the video, since the difference between 480p and 720p is greater than 6 points on the VMAF (which translates roughly to 1 step above the just noticeable difference). Therefore, in this case, the media viewer should be upgraded to the 720p version to improve the perceived quality of the video during playback.
Another advantage of an embodiment of the present disclosure is that it allows for accurate quality assessment (CRF rating). For example, as shown in FIGS. 8A and 8B, the media viewer can calculate an accurate quality improvement over 480p display resolution from switching from the 480p CRF40 version to the 720p CRF 30 version to further optimize format selection.
Fig. 9 depicts a block diagram of an illustrative computer system 900 operating in accordance with one or more aspects of the present disclosure. In various illustrative examples, computer system 900 may correspond to a computing device within system architecture 100 of fig. 1. In some embodiments, computer system 900 may be connected (e.g., via a network 630 such as a Local Area Network (LAN), intranet, extranet, and the internet) to other computer systems. Computer system 900 may operate in the capacity of a server or a client computer in a client-server environment, or as a peer computer in a peer-to-peer or distributed network environment. Computer system 900 may be provided by: a Personal Computer (PC), a tablet PC, a set-top box (STB), a Personal Digital Assistant (PDA), a cellular telephone, a network appliance, a server, a network router, switch or bridge, or any device capable of executing a set of instructions (sequential or otherwise) that specify actions to be taken by that device. Furthermore, the term "computer" shall include any collection of computers that individually or jointly execute a set (or multiple sets) of instructions to perform any one or more of the methodologies described herein.
In another aspect, computer system 900 may include a processing device 902, a volatile memory 904 (e.g., Random Access Memory (RAM)), a non-volatile memory 906 (e.g., read-only memory (ROM) or electrically erasable programmable read-only memory (EEPROM)), and a data storage device 916, which may communicate with each other via a bus 908.
The processing device 902 may be provided by: one or more processors, such as a general-purpose processor (e.g., a Complex Instruction Set Computing (CISC) microprocessor, a Reduced Instruction Set Computing (RISC) microprocessor, a Very Long Instruction Word (VLIW) microprocessor, a microprocessor implementing other types of instruction sets, or a microprocessor implementing a combination of instruction set types), or a special-purpose processor (e.g., an Application Specific Integrated Circuit (ASIC), a Field Programmable Gate Array (FPGA), a Digital Signal Processor (DSP), or a network processor).
The computer system 900 may further include a network interface device 922. Computer system 900 may also include a video display unit 910 (e.g., an LCD), an alphanumeric input device 912 (e.g., a keyboard), a cursor control device 914 (e.g., a mouse), and a signal generation device 920.
The data storage 916 may include a transitory or non-transitory computer-readable storage medium 924 on which may be stored instructions 926, the instructions 926 encoding any one or more of the methods or functions described herein, including instructions for implementing the method 400 and 700 of fig. 4 through 7, respectively.
The instructions 926 may also reside, completely or partially, within the volatile memory 904 and/or within the processing device 902 during execution thereof by the computer system 900, the volatile memory 904 and the processing device 902 thus also constituting machine-readable storage media.
While the computer-readable storage medium 924 is shown in an illustrative example to be a single medium, the term "computer-readable storage medium" should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and/or associated caches and servers) that store the one or more sets of executable instructions. The term "computer-readable storage medium" shall also be taken to include any tangible medium that is capable of storing or encoding a set of instructions for execution by the computer to cause the computer to perform any one or more of the methodologies described herein. The term "computer readable storage medium" shall include, but not be limited to, solid-state memories, optical media, and magnetic media.
The methods, components and features described herein may be implemented by discrete hardware components or may be integrated in the functionality of other hardware components, such as ASICs, FPGAs, DSPs or similar devices. In addition, the methods, components, and features may be implemented by component modules or functional circuits within a hardware device. Furthermore, the methods, components and features may be implemented in any combination of hardware devices and computer program components or in a computer program.
Unless specifically stated otherwise, terms such as "generating," "providing," or "training" or the like, refer to the actions and processes performed or carried out by a computer system that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices. Furthermore, the terms "first," "second," "third," "fourth," and the like as used herein are intended as labels to distinguish between different elements and may not have a sequential meaning in accordance with their numerical designation.
Examples described herein also relate to an apparatus for performing the methods described herein. The apparatus may be specially constructed for carrying out the methods described herein, or it may comprise a general purpose computer system selectively programmed by a computer program stored in the computer system. Such a computer program may be stored in a computer readable tangible storage medium.
The methods and illustrative examples described herein are not inherently related to any particular computer or other apparatus. Various general-purpose systems may be used with the teachings described herein, or it may prove convenient to construct a more specialized apparatus to perform each of the methods 400 through 700 and/or their respective functions, routines, subroutines, or operations. In the foregoing description, structural examples of various of these systems are set forth.
The above description is intended to be illustrative and not restrictive. While the present disclosure has been described with reference to specific illustrative examples and embodiments, it will be recognized that the present disclosure is not limited to the described examples and embodiments. The scope of the disclosure should be determined with reference to the appended claims, along with the full scope of equivalents to which such claims are entitled.
Claims (20)
1. A method, comprising:
generating training data for a machine learning model to be trained to identify quality scores for a set of transcoded versions of a new video at a set of display resolutions, wherein generating the training data comprises:
generating a plurality of reference transcoded versions of a reference video;
obtaining quality scores for frames of the plurality of reference transcoded versions of the reference video;
generating a first training input comprising a set of color attributes, spatial attributes, and temporal attributes for the frame of the reference video; and
generating a first target output for the first training input, wherein the first target output comprises the quality scores for the frames of the plurality of reference transcoded versions of the reference video; and
providing the training data to train the machine learning model on: (i) a set of training inputs including the first training input and (ii) a set of target outputs including the first target output.
2. The method of claim 1, wherein the quality score comprises a peak signal-to-noise ratio (PSNR) of the frame.
3. The method of claim 1, wherein the quality score comprises video multi-method assessment fusion (VMAF) of the frame.
4. The method of claim 1, wherein the color attribute comprises at least one of RGB or Y values of the frame.
5. The method of claim 1, wherein the spatial attributes comprise a Gabor eigenfilter bank.
6. The method of claim 1, wherein the temporal attribute comprises optical flow.
7. The method of claim 1, wherein the machine learning model is configured to process the new video and generate one or more outputs indicative of quality scores of the set of transcoded versions of the new video at the set of display resolutions.
8. The method of claim 1, wherein the plurality of transcoded versions of the reference video comprises a transcoding of the reference video at each of a plurality of different video resolutions, transcoding configurations, and different display resolutions.
9. An apparatus, comprising:
a memory for storing video; and
a processing device, operably coupled to the memory, to:
providing a sampled frame of the video as an input to a trained machine learning model;
obtaining one or more outputs from the trained machine learning model; and
extracting a quality score from the one or more outputs, the quality score indicating a perceived quality of the video in a first video format, a first transcoding configuration, and a first display resolution.
10. The apparatus of claim 9, wherein the processing device is further to provide the quality score to a client device, the quality score informing of a format selection of the video at a media viewer of the client device, wherein the first display resolution is a display resolution of the client device.
11. The apparatus of claim 10, wherein the format selection of the video at the media viewer is based on whether a difference between the quality score of the one or more outputs and another quality score, the another quality score indicating the perceived quality at a second video format, a second transcoding configuration, and the first display resolution, exceeds a threshold.
12. The apparatus of claim 9, wherein the quality score comprises at least one of a peak signal-to-noise ratio (PSNR) measurement or a video multi-method assessment fusion (VMAF) measurement.
13. The apparatus of claim 9, wherein the trained machine learning model is trained with an input-output mapping comprising an input and an output, the input based on a set of color attributes, spatial attributes, and temporal attributes of a frame of a reference video, and the output based on quality scores of frames of multiple transcoded versions of the reference video.
14. The apparatus of claim 13, wherein the color attribute comprises at least one of RGB or Y values of the frame, the spatial attribute comprises a Gabor feature filter bank of the frame, and the temporal attribute comprises optical flow of the frame.
15. The apparatus of claim 9, wherein the one or more outputs from the trained machine learning model comprise a plurality of quality scores corresponding to a plurality of possible index tuples of video format, transcoding configuration, and display resolution.
16. A non-transitory machine-readable storage medium storing instructions that, when executed, cause a processing device to perform operations comprising:
generating training data for a machine learning model to be trained to identify quality scores for a set of transcoded versions of a new video at a set of display resolutions, wherein generating the training data comprises:
generating a plurality of reference transcoded versions of a reference video;
obtaining quality scores for frames of the plurality of reference transcoded versions of the reference video;
generating a first training input comprising a set of color attributes, spatial attributes, and temporal attributes for the frame of the reference video; and
generating a first target output for the first training input, wherein the first target output comprises the quality scores for the frames of the plurality of reference transcoded versions of the reference video; and
providing the training data to train the machine learning model on: (i) a set of training inputs including the first training input and (ii) a set of target outputs including the first target output.
17. The non-transitory machine-readable storage medium of claim 16, wherein the quality score comprises at least one of a peak signal-to-noise ratio (PSNR) of the frame or a video multi-method assessment fusion (VMAF) of the frame.
18. The non-transitory machine-readable storage medium of claim 16, wherein the color attribute comprises at least one of RGB or Y values of the frame, and wherein the spatial attribute comprises a Gabor feature filter bank, and wherein the temporal attribute comprises optical flow.
19. The non-transitory machine-readable storage medium of claim 16, wherein the machine learning model is a Convolutional Neural Network (CNN) training model.
20. The non-transitory machine-readable storage medium of claim 16, wherein the machine learning model is configured to process the new video and generate one or more outputs indicative of quality scores of the set of transcoded versions of the new video at the set of display resolutions.
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2019/069055 WO2021137856A1 (en) | 2019-12-31 | 2019-12-31 | Optimal format selection for video players based on predicted visual quality using machine learning |
Publications (1)
Publication Number | Publication Date |
---|---|
CN114982227A true CN114982227A (en) | 2022-08-30 |
Family
ID=69376004
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201980103334.2A Pending CN114982227A (en) | 2019-12-31 | 2019-12-31 | Optimal format selection for video players based on predicted visual quality using machine learning |
Country Status (6)
Country | Link |
---|---|
US (1) | US20230054130A1 (en) |
EP (1) | EP3864839A1 (en) |
JP (1) | JP7451716B2 (en) |
CN (1) | CN114982227A (en) |
BR (1) | BR112022012563A2 (en) |
WO (1) | WO2021137856A1 (en) |
Families Citing this family (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11574273B2 (en) * | 2020-12-21 | 2023-02-07 | Sling TV L.L.C. | Systems and methods for automated evaluation of digital services |
CN116264606A (en) * | 2021-12-14 | 2023-06-16 | 戴尔产品有限公司 | Method, apparatus and computer program product for processing video |
CN115002520B (en) * | 2022-04-14 | 2024-04-02 | 百果园技术(新加坡)有限公司 | Video stream data processing method, device, equipment and storage medium |
US11606553B1 (en) | 2022-07-15 | 2023-03-14 | RiversideFM, Inc. | Hybrid media recording |
CN115174919B (en) * | 2022-09-05 | 2022-11-22 | 腾讯科技（深圳）有限公司 | Video processing method, device, equipment and medium |
Family Cites Families (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10007977B2 (en) | 2015-05-11 | 2018-06-26 | Netflix, Inc. | Techniques for predicting perceptual video quality |
US20170109584A1 (en) | 2015-10-20 | 2017-04-20 | Microsoft Technology Licensing, Llc | Video Highlight Detection with Pairwise Deep Ranking |
WO2019117864A1 (en) * | 2017-12-12 | 2019-06-20 | Google Llc | Transcoding media content using an aggregated quality score |
US10721477B2 (en) * | 2018-02-07 | 2020-07-21 | Netflix, Inc. | Techniques for predicting perceptual video quality based on complementary perceptual quality models |
US11216698B2 (en) | 2018-02-16 | 2022-01-04 | Spirent Communications, Inc. | Training a non-reference video scoring system with full reference video scores |
US11361416B2 (en) * | 2018-03-20 | 2022-06-14 | Netflix, Inc. | Quantifying encoding comparison metric uncertainty via bootstrapping |
-
2019
- 2019-12-31 WO PCT/US2019/069055 patent/WO2021137856A1/en unknown
- 2019-12-31 CN CN201980103334.2A patent/CN114982227A/en active Pending
- 2019-12-31 BR BR112022012563A patent/BR112022012563A2/en unknown
- 2019-12-31 US US17/790,102 patent/US20230054130A1/en active Pending
- 2019-12-31 JP JP2022540529A patent/JP7451716B2/en active Active
- 2019-12-31 EP EP19845753.3A patent/EP3864839A1/en active Pending
Also Published As
Publication number | Publication date |
---|---|
KR20220123541A (en) | 2022-09-07 |
US20230054130A1 (en) | 2023-02-23 |
JP7451716B2 (en) | 2024-03-18 |
BR112022012563A2 (en) | 2022-09-06 |
JP2023509918A (en) | 2023-03-10 |
WO2021137856A1 (en) | 2021-07-08 |
EP3864839A1 (en) | 2021-08-18 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
JP7451716B2 (en) | Optimal format selection for video players based on expected visual quality | |
EP3533232B1 (en) | Bitrate optimization for multi-representation encoding using playback statistics | |
CN109844736B (en) | Summarizing video content | |
US9002175B1 (en) | Automated video trailer creation | |
US10347294B2 (en) | Generating moving thumbnails for videos | |
WO2019018434A1 (en) | Actor/person centric auto thumbnail | |
US10755104B2 (en) | Scene level video search | |
Wen et al. | Subjective and objective quality assessment of mobile gaming video | |
US20170337691A1 (en) | Method and device for generating metadata including frequency characteristic information of image | |
Topiwala et al. | Vmaf and variants: Towards a unified vqa | |
KR102099030B1 (en) | Mutual noise estimation for video | |
US20150381989A1 (en) | Iterative Video Optimization for Data Transfer and Viewing | |
KR102663852B1 (en) | Optimal format selection for video players based on predicted visual quality using machine learning | |
JP2024511103A (en) | Method and apparatus for evaluating the quality of an image or video based on approximate values, method and apparatus for training a first model, electronic equipment, storage medium, and computer program | |
KR20240065323A (en) | Optimal format selection for video players based on predicted visual quality using machine learning | |
US11870833B2 (en) | Methods and systems for encoder parameter setting optimization | |
US20240137400A1 (en) | Methods and systems for encoder parameter setting optimization | |
Darwich et al. | Video quality adaptation using CNN and RNN models for cost-effective and scalable video streaming Services | |
US20230099526A1 (en) | Method For Constructing A Perceptual Metric For Judging Video Quality | |
Yang et al. | TV program innovation and teaching under big data background in all media era | |
Du et al. | Quality of Experience Evaluation Model with No-Reference VMAF Metric and Deep Spatio-temporal Features of Video | |
Erabadda | Machine learning for video coding and quality assessment | |
Tan | Machine-Learning Based QoE Prediction For Dash Video Streaming | |
CN116932789A (en) | Content search method, device, terminal, storage medium, and program product | |
Jia et al. | Efficient video quality assessment via 3D-gradient similarity deviation |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |