US20180173684A1 - Method and system providing contextual functionality in static web pages - Google Patents
Method and system providing contextual functionality in static web pages Download PDFInfo
- Publication number
- US20180173684A1 US20180173684A1 US15/384,793 US201615384793A US2018173684A1 US 20180173684 A1 US20180173684 A1 US 20180173684A1 US 201615384793 A US201615384793 A US 201615384793A US 2018173684 A1 US2018173684 A1 US 2018173684A1
- Authority
- US
- United States
- Prior art keywords
- computing device
- web page
- application
- link
- page data
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
- 230000003068 static effect Effects 0.000 title claims abstract description 105
- 238000000034 method Methods 0.000 title claims abstract description 60
- 238000009877 rendering Methods 0.000 claims abstract description 11
- 230000004044 response Effects 0.000 claims description 19
- 230000007613 environmental effect Effects 0.000 claims description 18
- 230000000977 initiatory effect Effects 0.000 claims description 4
- 238000005516 engineering process Methods 0.000 abstract description 15
- 238000004891 communication Methods 0.000 description 19
- 230000006870 function Effects 0.000 description 8
- 230000003287 optical effect Effects 0.000 description 5
- 238000004590 computer program Methods 0.000 description 4
- 239000000284 extract Substances 0.000 description 3
- 238000009434 installation Methods 0.000 description 3
- 238000010586 diagram Methods 0.000 description 2
- 230000006399 behavior Effects 0.000 description 1
- 230000001413 cellular effect Effects 0.000 description 1
- 239000000470 constituent Substances 0.000 description 1
- 238000013500 data storage Methods 0.000 description 1
- 230000003993 interaction Effects 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 230000002093 peripheral effect Effects 0.000 description 1
- 230000001360 synchronised effect Effects 0.000 description 1
- 210000003813 thumb Anatomy 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/12—Use of codes for handling textual entities
- G06F40/14—Tree-structured documents
- G06F40/143—Markup, e.g. Standard Generalized Markup Language [SGML] or Document Type Definition [DTD]
-
- G06F17/2247—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/957—Browsing optimisation, e.g. caching or content distillation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/955—Retrieval from the web using information identifiers, e.g. uniform resource locators [URL]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/955—Retrieval from the web using information identifiers, e.g. uniform resource locators [URL]
- G06F16/9566—URL specific, e.g. using aliases, detecting broken or misspelled links
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/957—Browsing optimisation, e.g. caching or content distillation
- G06F16/9574—Browsing optimisation, e.g. caching or content distillation of access to content, e.g. by caching
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/958—Organisation or management of web site content, e.g. publishing, maintaining pages or automatic linking
-
- G06F17/2235—
-
- G06F17/2705—
-
- G06F17/30876—
-
- G06F17/3089—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/12—Use of codes for handling textual entities
- G06F40/134—Hyperlinking
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/20—Natural language analysis
- G06F40/205—Parsing
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/02—Protocols based on web technology, e.g. hypertext transfer protocol [HTTP]
Definitions
- the present disclosure is related generally to context-based functionality, and more particularly to providing the same using static web pages.
- aspects of the present disclosure generally relate to enhancements to the use of static web pages.
- Certain implementations may include a method including: receiving, by a computing device, static web page data of a web page; responsive to receiving the static web page data, parsing, by the computing device, the static web page data to identify a plurality of links; selecting, by the computing device, a link of the identified plurality of links to be presented based on a computing environment; rendering, by the computing device, the web page including the selected link; and outputting, for display, the rendered web page.
- the computing environment corresponds to an existence status of an application on the computing device
- the plurality of links include a first link to an application store and a second link to open the application
- the selecting includes selecting between the first link in response the application not existing on the computing device, and the second link in response to the application existing on the computing device.
- the computing environment corresponds to an operating system of the computing device
- the plurality of links correspond to different application locations for a same application corresponding to respective operating systems of the computing device.
- the method further includes: receiving, by the computing device, an indication of a user selection of the selected link; and responsive to receiving the indication, initiating, by the computing device, an opening of the application.
- the method further includes: in response to the opening of the application being unsuccessful, navigating, by the computing device, to an application page in an application store corresponding to the operating system of the computing device.
- the method further includes: transmitting, by the computing device, a search query request, with the receiving including receiving, by the computing device, a plurality search results together with the static web page data, the static web page data corresponding to a search result of the plurality of search results; identifying, by the computing device, the application based on the selected link; determining, by the computing device, whether the application exists on the computing device; and storing a result of the determining in a memory.
- the method further includes: receiving, by the computing device, an indication of a user selection of the selected link; responsive to receiving the indication, referencing, by the computing device, the result stored in the memory and either opening the application in response to the result indicating that the application exists on the computing device, or opening an application store location corresponding to the operating system of the computing device for the application in response to the result indicating that the application does not exist on the computing device.
- Certain implementations may include a method including: receiving, by a computing device, static web page data of a web page; responsive to receiving the static web page data, parsing, by the computing device, the static web page data to identify an accelerated mobile page (AMP) tag; extracting, by the computing device, data elements from the AMP tag; constructing, by the computing device, a link based on the extracted data elements and environmental information; rendering, by the computing device, the web page including constructed link; and outputting, for display, the rendered web page.
- AMP accelerated mobile page
- the environmental information includes an indication of an operating system of the computing device
- the data elements include identification information of an application
- the constructing includes constructing, by the computing device, the link to direct to the application in an application store, the application store being associated with the operating system of the computing device.
- the environmental information includes an indication of an existence of an application on the computing device
- the data elements include identification information of the application
- the constructing includes constructing, by the computing device, the link to either direct to the application in an application store in response to the application not existing on the computing device, or open the application in response to the application existing on the computing device.
- Certain implementations may include a method including: receiving, by a computing device, static web page data of a web page; responsive to receiving the static web page data, parsing, by the computing device, the static web page data to identify a referrer tag corresponding to a link; modifying, by the computing device, the referrer tag to include attribute information; rendering, by the computing device, the web page including the link associated with the modified referrer tag; and outputting, for display, the rendered web page.
- the modifying includes modifying, by the computing device, the referrer tag to include information corresponding to user identification information of a user of the computing device.
- the method further includes: transmitting, by the computing device, a search query request.
- the receiving may include receiving, by the computing results, a plurality search results together with the static web page data, the static web page data may corresponds to a search result of the plurality of search results, and the modifying may include modifying, by the computing device, the referrer tag to include information indicative of the search query request.
- the method further includes: receiving, by the computing device, an indication of a selection of the link; and responsive to receiving the indication, initiating, by the computing device, a navigation to a destination corresponding to the link and transmitting the attribute information to the destination.
- Certain implementations may include a method including: receiving, by a computing device, a web search query from a user device; performing, by the computing device, a search based on the web search query; compiling, by the computing device, a plurality of search results and static web page data of a web page corresponding to a search result of the plurality of search results; parsing, by the computing device, the static web page data to identify a contextual element; modifying, by the computing device, the contextual element of the static web page; and transmitting, to the user device, the search results together with the static web page data containing the modified contextual element, wherein the user device is configured to render and display the web page including the modified contextual element.
- the method further includes: receiving, by the computing device, environmental information from the computing device.
- the modifying may include modifying, by the computing device, the contextual element based on the environmental information.
- the contextual element includes a link and a corresponding referrer tag
- the modifying includes modifying the corresponding referrer tag to include information corresponding to the web search query.
- the method further includes: receiving, by the computing device, user identification information from the computing device.
- the contextual element may include a link and a corresponding referrer tag
- the modifying may include modifying the corresponding referrer tag to include information corresponding to the user identification information.
- FIG. 1 illustrates an environment in which one or more example embodiments may be implemented.
- FIG. 2 is a flowchart illustrating a method according to an example embodiment.
- FIG. 3 illustrates an example implementation of the method of FIG. 2 .
- FIG. 4 is a flowchart illustrating a method according to an example embodiment.
- FIG. 5 illustrates an example implementation of the method of FIG. 4 .
- FIG. 6 is a flowchart illustrating a method according to an example embodiment.
- FIG. 7 illustrates an example implementation of the method of FIG. 6 .
- FIG. 8 is a flowchart illustrating a method according to an example embodiment.
- FIG. 9 is a flowchart illustrating a method according to an example embodiment.
- FIG. 10 is a block diagram of an illustrative computer system architecture according to an example implementation.
- static web page data may include contextual information.
- a host may identify the contextual information and modify the static web page based on particular environments.
- the contextual information may include a plurality of links corresponding to respective operating systems, a mutatable referrer tag corresponding to a link, or an AMP tag including information for constructing a link.
- a hosting server or a user device may interpret the contextual information and render a web page from the static web page data to present a contextualized web page.
- FIG. 1 illustrates a connected system in which one or more examples of the disclosed technology may be implemented. It will be understood that the networked system 100 is provided for example purposes only, and does not limit the scope of the various implementations of the present disclosed systems and methods.
- the networked system 100 may include a user device 110 , a hosting server 120 , and a web page developer device 130 .
- the user device 110 and the web page developer device 130 may be respective computer devices and may include a personal computer (PC), a mobile computer, a laptop, a desktop, or a Smartphone.
- the hosting server 120 may be a computer device, and may include one or more distinct server machines. An example of a computer architecture that may be used to implement one or more of the user device 110 , the hosting server 120 , and the web page developer device 130 will be discussed below with reference to FIG. 10 .
- the user device 110 may communicate with the hosting server 120 to access web page data.
- the web page data may be static web page data.
- the web page data may be a static HyperText Markup Language (HTML) file.
- the user device 110 may parse the static web page data to identify a plurality of links.
- the user device 110 may select one link from the plurality of links to be displayed based on an environment of the user device 110 , e.g., an operating system on the user device 110 or whether an identified application exists on the user device 110 .
- the user device 110 renders the web page including the selected link and displays the rendered web page.
- the user device 110 may receive an indication of a selection of a link to the application.
- the user device 110 may determine whether the application exists on the user device 110 and, in response to determining that the application does not exist on the user device 110 , the user device 110 may navigate to a download area for the application.
- the user device may open the application.
- the user device 110 may determine whether the application exists utilizing functionality provided by an operating system of the user device 110 .
- the user device 110 may open the application to a position identified by the link. In some embodiments, the user device 110 may determine whether the application exists by attempting to open the application.
- the user device 110 may parse the static web page data to identify a plurality of links to an application.
- the user device 110 may determine whether the application exists on the user device 110 .
- the user device 110 may select one link from the plurality of links to be displayed based on whether the application is installed on the user device.
- the user device 110 renders the web page including the selected link and displays the rendered web page.
- the user device 110 may parse the static web page data to identify a link to an application.
- the user device 110 may asynchronously determine whether the application exists on the user device 110 , and store information corresponding to the link in a memory cache.
- the user device 110 may inspect the memory cache and, based on the cache, either navigate to a download area for the application or open the application.
- the user device 110 may receive information from the hosting server 120 identifying one or more applications referenced in links contained in the web page data.
- the user device 110 may determine whether the one or more applications exist on the user device 110 , and may transmit to the hosting server 120 information indicating whether the one or more applications exist on the user device 110 .
- the user device 110 may then receive the web page data including links contextualized based on whether the one or more applications exist on the user device 110 .
- the user device 110 may parse the static web page data to identify a referrer tag corresponding to one or more links included in the static web page data.
- the referrer tag may include information related to the link.
- the user device 110 may modify the referrer tag to include additional information, for example, a reference to a search query, an identification of the static web page, or a user identification.
- the hosting server 120 may receive static web page data from the web page developer device 130 .
- the hosting server 120 may receive a request for the web page data from the user device 110 , and transmit the static web page data to the user device 110 .
- the hosting server 120 may receive a search request from the user device 110 .
- the static web page data may correspond to a web page identified as a relevant search result.
- the hosting server 120 may transmit the static web page data together with information corresponding to the search result to the user device 110 .
- the web page data may include a referrer tag corresponding to one or more links included in the static web page data.
- the referrer tag may include information related to the link.
- the hosting server 120 may receive additional information, for example, a search query or a user identification, from the user device 110 .
- the hosting server 120 may mutate the referrer tag to include the additional information and transmit the static web page data with the mutated referrer tag to the user device 110 .
- the hosting server 120 may transmit information to the user device 110 identifying one or more applications referenced in the static web page data.
- the hosting server 120 may receive information from the user device 110 indicating whether the one or more applications exist on the user device 110 .
- the hosting server 120 may select one or more links contained in the static web page data based on whether the corresponding application exists on the user device 110 , and transmit the static web page data including the selected links to the user device 110 .
- the web page developer device 130 may provide web page data to the hosting server 120 .
- the web page data may be static web page data.
- the static web page data may include a plurality of links corresponding to respective environments of the user device 110 . One or more of the plurality of links may only be displayable on the user device 110 in the respective environment.
- the static web page data may include a link to an application that may exist on the user device 110 . The link to the application may instruct the user device 110 to attempt to open the application to a particular position of the application.
- the static web page data may include one or more markups.
- An interpreter may analyze the static web page data and extract elements of the markups.
- the interpreter may construct contextualized links or select a link from a plurality of links based on the extracted elements and environmental information.
- a decorator may then render the web page from the static web page data including the constructed or selected link.
- the user device 110 may implement the interpreter and the decorator.
- the hosting server 120 may implement one or more functionalities of the interpreter and the decorator.
- FIG. 2 is a flowchart of a method according to an example embodiment.
- the method may be performed by a user device 110 .
- the user device 110 receives 200 static web page data.
- the user device 110 parses 210 the static web page data and identifies 220 a plurality of links in the static web page data.
- the links may correspond to an environment of the user device 120 , for example, an operating system of the user device 110 .
- the user device 110 selects 230 a link of the plurality of links based on the environment of the user device 120 .
- the user device 110 renders 240 the web page including the selected link, and outputs 250 the rendered web page.
- FIG. 3 illustrates an example implementation of the method of FIG. 2 .
- the static web page data 300 includes Links 1 A and 1 B corresponding to Environments 1 and 2 , respectively.
- the web page is rendered and displayed 310 A with Link 1 A.
- the web page is rendered and displayed 310 B with Link 1 B.
- Environments 1 and 2 may correspond to different operating systems executing on the user device 110 .
- Link 1 A may link to an application page in an application store of Environment 1
- Link 1 B may link to the application page in an application store of Environment 2 .
- Link 1 A will direct the user device 110 to an application page appropriate for the first environment
- Link 1 B will direct the user device 110 to an application page appropriate for the second environment.
- FIG. 4 is a flowchart of a method according to an example embodiment.
- the method may be performed by a user device 110 .
- the user device 110 receives 400 static web page data.
- the user device 110 parses 410 the static web page data and identifies 420 a link containing a modifiable referrer tag.
- the modifiable referrer tag may contain some attribution data corresponding to a page in which the link is found.
- the user device 110 may modify 430 the referrer tag to include additional attribution data.
- the user device 110 may modify the referral tag to include attribution data corresponding to a user accessing the link and a search query that led to the web page data.
- the user device 110 may then render 440 the web page including the modified referrer tag and output 450 the rendered web page.
- the user device 110 may transmit 460 the attribution data to the link destination and navigate to the link destination.
- the hosting server 120 may parse 410 the static web page data, identify 420 the link with the referrer tag, and modify 430 the referrer tag to include attribution data.
- the hosting server 120 may then transmit static web page data to the user device 110 including the modified referrer tag.
- the user device 110 may then immediately render the web page from the static web page data received from the hosting server 120 .
- the user device 110 may additionally parse 410 the static web page data received from the hosting server 120 , identify 420 the link with the modified referrer tag, and then further modify 430 the referrer tag before rendering 440 the web page.
- FIG. 5 illustrates an example implementation of the method of FIG. 4 .
- the static web page data 500 includes a Link with a referrer tag.
- the referrer tag in 500 may include a reference to the page on which the Link exists, e.g., a SiteID.
- the referrer tag in 500 may identify attribution data to be added to the referrer tag, e.g., a user identification and search query information.
- the hosting server 120 may modify the referrer tag to include the search query information, e.g., the SearchQueryID, as shown in 510 .
- the hosting server 120 may then transmit the static web page data with the modified referrer tag to the user device 110 .
- the user device 110 may further modify the referrer tag to include the user identification, e.g., the UserID, as shown in 520 .
- the user device 110 may then render the web page using the static web page data having the modified referrer tag including the SiteID, the SearchQueryID, and the UserID.
- the user device 110 or the hosting server 120 may solely modify the referrer tag to include both the SearchQueryID and the UserID.
- the referrer tag in the original static web page data 500 may not explicitly identify attribution information to be added by the hosting server 120 or the user device 110 .
- FIG. 6 is a flowchart of a method according to an example embodiment.
- the method may be performed by a user device 110 .
- the user device 110 receives 600 static web page data.
- the user device 110 parses 610 the static web page data and identifies 620 an AMP tag including data elements with information to populate a link.
- the user device 110 extracts 630 the data elements and constructs 640 a link based on the data elements and a client descriptor.
- the user device 110 renders 650 the web page including the constructed link and outputs 660 the rendered web page.
- the hosting server 120 may parse 610 the static web page data, identify 620 the AMP tag, extract 630 the data elements, construct 640 the link, and modify the static web page data to include the constructed link. The hosting server 120 may then transmit the static web page data including the constructed link to the user device 110 for rendering 650 and outputting 660 of the web page.
- FIG. 7 illustrates an example implementation of the method of FIG. 6 .
- the static web page data 700 includes an AMP app store tag including data elements of App IDs corresponding to Environments 1 and 2 . If the user device 110 is in the first operating environment, an app-store link to Environment 1 may be constructed, as shown in 710 A. If the user device 110 is in the second operating environment, an app-store link to Environment 2 may be constructed, as shown in 710 B.
- the AMP tag data element may include an iOS app ID and an Android package name for an application, and the client descriptor may indicate whether the user device 110 operates using an Android operating system or a mobile iOS operating system. If the user device 110 operates using an Android operating system, the user device 110 may construct a link to the application in the Google Play store. If the user device 110 operates using a mobile iOS operating system, the user device may construct a link to the application in the iOS app store.
- FIG. 8 is a flowchart of a method according to an example embodiment.
- the method may be performed by the hosting server 120 .
- the hosting server 120 may parse 810 static web page data and identify 820 a contextual element.
- the contextual information may include a plurality of links corresponding to respective user device environments, a mutatable referrer tag, or an AMP tag.
- the hosting server 120 receives 830 environmental information on an environment of the user device 110 .
- the environmental information may indicate an operating system of the user device 110 or whether one or more applications exist on the user device 110 .
- the hosting server 120 modifies 840 the contextual information based on the environmental information.
- the hosting server 120 may construct a link to an appropriate app installation for the operating system of the user device 110 , or a link directing to an application installation page or a link opening the application based on whether the application exists on the user device 110 .
- the hosting server 120 transmits 840 the static web page data with the modified contextual information to the user device 110 .
- FIG. 9 is a flowchart of a method according to an example embodiment.
- the method may be performed by the hosting server 120 .
- the hosting server 120 receives 900 a web search query from the user device 110 .
- the hosting server 120 performs 910 a search based on the web search query.
- the hosting server 120 compiles 920 search results and static web page data corresponding to the search results.
- the hosting server 120 modifies 930 the static web page data based on environmental information and transmits 940 the search results and the modified web page data to the user device 110 .
- the user device 110 may then render web pages corresponding to the modified web page data and display the web pages.
- hosting server 120 may transmit the search results and the unmodified static web page data to the user device 110 , and the user device may modify 930 the static web page data.
- FIG. 10 is a block diagram of an illustrative computer system architecture 1000 , according to an example implementation.
- the user device 110 , the hosting server 120 , and the domain registrar server 130 may be implemented using one or more elements from the computer system architecture 1000 .
- the computing device architecture 1000 is provided for example purposes only and does not limit the scope of the various implementations of the present disclosed systems, methods, and computer-readable mediums.
- the computing device architecture 1000 of FIG. 10 includes a central processing unit (CPU) 1002 , where computer instructions are processed, and a display interface 1004 that acts as a communication interface and provides functions for rendering video, graphics, images, and texts on the display.
- the display interface 1004 may be directly connected to a local display, such as a touch-screen display associated with a mobile computing device.
- the display interface 1004 may be configured for providing data, images, and other information for an external/remote display 1050 that is not necessarily physically connected to the mobile computing device.
- a desktop monitor may be used for mirroring graphics and other information that is presented on a mobile computing device.
- the display interface 1004 may wirelessly communicate, for example, via a Wi-Fi channel or other available network connection interface 1012 to the external/remote display 1050 .
- the network connection interface 1012 may be configured as a communication interface and may provide functions for rendering video, graphics, images, text, other information, or any combination thereof on the display.
- a communication interface may include a serial port, a parallel port, a general purpose input and output (GPIO) port, a game port, a universal serial bus (USB), a micro-USB port, a high definition multimedia (HDMI) port, a video port, an audio port, a Bluetooth port, a near-field communication (NFC) port, another like communication interface, or any combination thereof.
- the display interface 1004 may be operatively coupled to a local display, such as a touch-screen display associated with a mobile device.
- the display interface 1004 may be configured to provide video, graphics, images, text, other information, or any combination thereof for an external/remote display 1050 that is not necessarily connected to the mobile computing device.
- a desktop monitor may be used for mirroring or extending graphical information that may be presented on a mobile device.
- the display interface 1004 may wirelessly communicate, for example, via the network connection interface 1012 such as a Wi-Fi transceiver to the external/remote display 1050 .
- the computing device architecture 1000 may include a keyboard interface 1006 that provides a communication interface to a keyboard.
- the computing device architecture 1000 may include a presence-sensitive display interface 1008 for connecting to a presence-sensitive display 1007 .
- the presence-sensitive display interface 1008 may provide a communication interface to various devices such as a pointing device, a touch screen, a depth camera, etc. which may or may not be associated with a display.
- the computing device architecture 1000 may be configured to use an input device via one or more of input/output interfaces (for example, the keyboard interface 1006 , the display interface 1004 , the presence sensitive display interface 1008 , network connection interface 1012 , camera interface 1014 , sound interface 1016 , etc.) to allow a user to capture information into the computing device architecture 1000 .
- the input device may include a mouse, a trackball, a directional pad, a track pad, a touch-verified track pad, a presence-sensitive track pad, a presence-sensitive display, a scroll wheel, a digital camera, a digital video camera, a web camera, a microphone, a sensor, a smartcard, and the like.
- the input device may be integrated with the computing device architecture 1000 or may be a separate device.
- the input device may be an accelerometer, a magnetometer, a digital camera, a microphone, and an optical sensor.
- Example implementations of the computing device architecture 1000 may include an antenna interface 1010 that provides a communication interface to an antenna; a network connection interface 1012 that provides a communication interface to a network.
- the display interface 1004 may be in communication with the network connection interface 1012 , for example, to provide information for display on a remote display that is not directly connected or attached to the system.
- a camera interface 1014 is provided that acts as a communication interface and provides functions for capturing digital images from a camera.
- a sound interface 1016 is provided as a communication interface for converting sound into electrical signals using a microphone and for converting electrical signals into sound using a speaker.
- a random access memory (RAM) 1018 is provided, where computer instructions and data may be stored in a volatile memory device for processing by the CPU 1002 .
- the computing device architecture 1000 includes a read-only memory (ROM) 1020 where invariant low-level system code or data for basic system functions such as basic input and output (I/O), startup, or reception of keystrokes from a keyboard are stored in a non-volatile memory device.
- ROM read-only memory
- I/O basic input and output
- the computing device architecture 1000 includes a storage medium 1022 or other suitable type of memory (e.g.
- the computing device architecture 1000 includes a power source 1030 that provides an appropriate alternating current (AC) or direct current (DC) to power components.
- AC alternating current
- DC direct current
- the computing device architecture 1000 includes a telephony subsystem 1032 that allows the device 1000 to transmit and receive sound over a telephone network.
- the constituent devices and the CPU 1002 communicate with each other over a bus 1034 .
- the CPU 1002 has appropriate structure to be a computer processor.
- the CPU 1002 may include more than one processing unit.
- the RAM 1018 interfaces with the computer bus 1034 to provide quick RAM storage to the CPU 1002 during the execution of software programs such as the operating system application programs, and device drivers. More specifically, the CPU 1002 loads computer-executable process steps from the storage medium 1022 or other media into a field of the RAM 1018 in order to execute software programs. Data may be stored in the RAM 1018 , where the data may be accessed by the computer CPU 1002 during execution.
- the storage medium 1022 itself may include a number of physical drive units, such as a redundant array of independent disks (RAID), a floppy disk drive, a flash memory, a USB flash drive, an external hard disk drive, thumb drive, pen drive, key drive, a High-Density Digital Versatile Disc (HD-DVD) optical disc drive, an internal hard disk drive, a Blu-Ray optical disc drive, or a Holographic Digital Data Storage (HDDS) optical disc drive, an external mini-dual in-line memory module (DIMM) synchronous dynamic random access memory (SDRAM), or an external micro-DIMM SDRAM.
- RAID redundant array of independent disks
- HD-DVD High-Density Digital Versatile Disc
- HD-DVD High-Density Digital Versatile Disc
- HDDS Holographic Digital Data Storage
- DIMM mini-dual in-line memory module
- SDRAM synchronous dynamic random access memory
- micro-DIMM SDRAM an external micro-DIMM SDRAM
- Such computer readable storage media allow a computing device to access computer-executable process steps, application programs and the like, stored on removable and non-removable memory media, to off-load data from the device or to upload data onto the device.
- a computer program product such as one utilizing a communication system may be tangibly embodied in storage medium 1022 , which may include a machine-readable storage medium.
- the term computing device may be a CPU, or conceptualized as a CPU (for example, the CPU 1002 of FIG. 10 ).
- the computing device (CPU) may be coupled, connected, and/or in communication with one or more peripheral devices, such as display.
- the term computing device may refer to a mobile computing device such as a Smartphone, tablet computer, or smart watch.
- the computing device may output content to its local display and/or speaker(s).
- the computing device may output content to an external display device (e.g., over Wi-Fi) such as a TV or an external computing system.
- a computing device may include any number of hardware and/or software applications that are executed to facilitate any of the operations.
- one or more I/O interfaces may facilitate communication between the computing device and one or more input/output devices.
- a universal serial bus port, a serial port, a disk drive, a CD-ROM drive, and/or one or more user interface devices such as a display, keyboard, keypad, mouse, control panel, touch screen display, microphone, etc.
- the one or more I/O interfaces may be used to receive or collect data and/or user instructions from a wide variety of input devices. Received data may be processed by one or more computer processors as desired in various implementations of the disclosed technology and/or stored in one or more memory devices.
- One or more network interfaces may facilitate connection of the computing device inputs and outputs to one or more suitable networks and/or connections; for example, the connections that facilitate communication with any number of sensors associated with the system.
- the one or more network interfaces may further facilitate connection to one or more suitable networks; for example, a local area network, a wide area network, the Internet, a cellular network, a radio frequency network, a Bluetooth enabled network, a Wi-Fi enabled network, a satellite-based network any wired network, any wireless network, etc., for communication with external devices and/or systems.
- the computer program code may control the computing device to parse and render static web page data according to one or more example embodiments. In some implementations, the computer program code may control the computing device to provide parse and modify static web page data according to one or more example embodiments. The computer program code may modify a browser to implement an interpreter and decorator according to some embodiments.
Abstract
Description
- The present disclosure is related generally to context-based functionality, and more particularly to providing the same using static web pages.
- Access to web pages from a mobile environment, such as a smartphone, has grown extensively in recent years. In the mobile environment, it is particular advantageous to present web pages with as little delay as possible. Enhanced speed may be accomplished through the use of static web pages, such as through the use of accelerated mobile web pages. However, traditional use of static web pages limits the ability to provide contextualized information and effectively track user behavior. For example, using traditional static web pages, a single embedded installation button for a mobile application cannot be made to link to an appropriate application store. Accordingly, there is need for a way to provide enhanced functionality to static web pages.
- Briefly described, and according to one embodiment, aspects of the present disclosure generally relate to enhancements to the use of static web pages. Certain implementations may include a method including: receiving, by a computing device, static web page data of a web page; responsive to receiving the static web page data, parsing, by the computing device, the static web page data to identify a plurality of links; selecting, by the computing device, a link of the identified plurality of links to be presented based on a computing environment; rendering, by the computing device, the web page including the selected link; and outputting, for display, the rendered web page.
- According to certain implementations, the computing environment corresponds to an existence status of an application on the computing device, the plurality of links include a first link to an application store and a second link to open the application, and the selecting includes selecting between the first link in response the application not existing on the computing device, and the second link in response to the application existing on the computing device.
- According to certain implementations, the computing environment corresponds to an operating system of the computing device, and the plurality of links correspond to different application locations for a same application corresponding to respective operating systems of the computing device.
- According to certain implementations, the method further includes: receiving, by the computing device, an indication of a user selection of the selected link; and responsive to receiving the indication, initiating, by the computing device, an opening of the application.
- According to certain implementations, the method further includes: in response to the opening of the application being unsuccessful, navigating, by the computing device, to an application page in an application store corresponding to the operating system of the computing device.
- According to certain implementations, the method further includes: transmitting, by the computing device, a search query request, with the receiving including receiving, by the computing device, a plurality search results together with the static web page data, the static web page data corresponding to a search result of the plurality of search results; identifying, by the computing device, the application based on the selected link; determining, by the computing device, whether the application exists on the computing device; and storing a result of the determining in a memory.
- According to certain implementations, the method further includes: receiving, by the computing device, an indication of a user selection of the selected link; responsive to receiving the indication, referencing, by the computing device, the result stored in the memory and either opening the application in response to the result indicating that the application exists on the computing device, or opening an application store location corresponding to the operating system of the computing device for the application in response to the result indicating that the application does not exist on the computing device.
- Certain implementations may include a method including: receiving, by a computing device, static web page data of a web page; responsive to receiving the static web page data, parsing, by the computing device, the static web page data to identify an accelerated mobile page (AMP) tag; extracting, by the computing device, data elements from the AMP tag; constructing, by the computing device, a link based on the extracted data elements and environmental information; rendering, by the computing device, the web page including constructed link; and outputting, for display, the rendered web page.
- According to certain implementations, the environmental information includes an indication of an operating system of the computing device, the data elements include identification information of an application, and the constructing includes constructing, by the computing device, the link to direct to the application in an application store, the application store being associated with the operating system of the computing device.
- According to certain implementations, the environmental information includes an indication of an existence of an application on the computing device, the data elements include identification information of the application, and the constructing includes constructing, by the computing device, the link to either direct to the application in an application store in response to the application not existing on the computing device, or open the application in response to the application existing on the computing device.
- Certain implementations may include a method including: receiving, by a computing device, static web page data of a web page; responsive to receiving the static web page data, parsing, by the computing device, the static web page data to identify a referrer tag corresponding to a link; modifying, by the computing device, the referrer tag to include attribute information; rendering, by the computing device, the web page including the link associated with the modified referrer tag; and outputting, for display, the rendered web page.
- According to certain implementations, the modifying includes modifying, by the computing device, the referrer tag to include information corresponding to user identification information of a user of the computing device.
- According to certain implementations, the method further includes: transmitting, by the computing device, a search query request. The receiving may include receiving, by the computing results, a plurality search results together with the static web page data, the static web page data may corresponds to a search result of the plurality of search results, and the modifying may include modifying, by the computing device, the referrer tag to include information indicative of the search query request.
- According to certain implementations, the method further includes: receiving, by the computing device, an indication of a selection of the link; and responsive to receiving the indication, initiating, by the computing device, a navigation to a destination corresponding to the link and transmitting the attribute information to the destination.
- Certain implementations may include a method including: receiving, by a computing device, a web search query from a user device; performing, by the computing device, a search based on the web search query; compiling, by the computing device, a plurality of search results and static web page data of a web page corresponding to a search result of the plurality of search results; parsing, by the computing device, the static web page data to identify a contextual element; modifying, by the computing device, the contextual element of the static web page; and transmitting, to the user device, the search results together with the static web page data containing the modified contextual element, wherein the user device is configured to render and display the web page including the modified contextual element.
- According to certain implementations, the method further includes: receiving, by the computing device, environmental information from the computing device. The modifying may include modifying, by the computing device, the contextual element based on the environmental information.
- According to certain implementations, the contextual element includes a link and a corresponding referrer tag, and the modifying includes modifying the corresponding referrer tag to include information corresponding to the web search query.
- According to certain implementations, the method further includes: receiving, by the computing device, user identification information from the computing device. The contextual element may include a link and a corresponding referrer tag, and the modifying may include modifying the corresponding referrer tag to include information corresponding to the user identification information.
- The accompanying drawings illustrate one or more embodiments and/or aspects of the disclosure and, together with the written description, serve to explain the principles of the disclosure. Wherever possible, the same reference numbers are used throughout the drawings to refer to the same or like elements of an embodiment, and wherein:
-
FIG. 1 illustrates an environment in which one or more example embodiments may be implemented. -
FIG. 2 is a flowchart illustrating a method according to an example embodiment. -
FIG. 3 illustrates an example implementation of the method ofFIG. 2 . -
FIG. 4 is a flowchart illustrating a method according to an example embodiment. -
FIG. 5 illustrates an example implementation of the method ofFIG. 4 . -
FIG. 6 is a flowchart illustrating a method according to an example embodiment. -
FIG. 7 illustrates an example implementation of the method ofFIG. 6 . -
FIG. 8 is a flowchart illustrating a method according to an example embodiment. -
FIG. 9 is a flowchart illustrating a method according to an example embodiment. -
FIG. 10 is a block diagram of an illustrative computer system architecture according to an example implementation. - According to some implementations of the disclosed technology, static web page data may include contextual information. A host may identify the contextual information and modify the static web page based on particular environments. In some cases, the contextual information may include a plurality of links corresponding to respective operating systems, a mutatable referrer tag corresponding to a link, or an AMP tag including information for constructing a link.
- In some implementations, a hosting server or a user device may interpret the contextual information and render a web page from the static web page data to present a contextualized web page.
- Example implementations of the disclosed technology will now be described with reference to the accompanying figures.
-
FIG. 1 illustrates a connected system in which one or more examples of the disclosed technology may be implemented. It will be understood that thenetworked system 100 is provided for example purposes only, and does not limit the scope of the various implementations of the present disclosed systems and methods. - Referring to
FIG. 1 , thenetworked system 100 may include auser device 110, ahosting server 120, and a webpage developer device 130. According to some implementations, as non-limiting examples, theuser device 110 and the webpage developer device 130 may be respective computer devices and may include a personal computer (PC), a mobile computer, a laptop, a desktop, or a Smartphone. According to some implementations, thehosting server 120 may be a computer device, and may include one or more distinct server machines. An example of a computer architecture that may be used to implement one or more of theuser device 110, thehosting server 120, and the webpage developer device 130 will be discussed below with reference toFIG. 10 . - The
user device 110 may communicate with thehosting server 120 to access web page data. The web page data may be static web page data. For example, the web page data may be a static HyperText Markup Language (HTML) file. In some embodiments, theuser device 110 may parse the static web page data to identify a plurality of links. Theuser device 110 may select one link from the plurality of links to be displayed based on an environment of theuser device 110, e.g., an operating system on theuser device 110 or whether an identified application exists on theuser device 110. Theuser device 110 renders the web page including the selected link and displays the rendered web page. - The
user device 110 may receive an indication of a selection of a link to the application. Theuser device 110 may determine whether the application exists on theuser device 110 and, in response to determining that the application does not exist on theuser device 110, theuser device 110 may navigate to a download area for the application. In response to determining that the application exists on theuser device 110, the user device may open the application. Theuser device 110 may determine whether the application exists utilizing functionality provided by an operating system of theuser device 110. Theuser device 110 may open the application to a position identified by the link. In some embodiments, theuser device 110 may determine whether the application exists by attempting to open the application. - In some embodiments, the
user device 110 may parse the static web page data to identify a plurality of links to an application. Theuser device 110 may determine whether the application exists on theuser device 110. Theuser device 110 may select one link from the plurality of links to be displayed based on whether the application is installed on the user device. Theuser device 110 renders the web page including the selected link and displays the rendered web page. - In some embodiments, the
user device 110 may parse the static web page data to identify a link to an application. Theuser device 110 may asynchronously determine whether the application exists on theuser device 110, and store information corresponding to the link in a memory cache. In response to a selection of the link, theuser device 110 may inspect the memory cache and, based on the cache, either navigate to a download area for the application or open the application. - In some embodiments, the
user device 110 may receive information from the hostingserver 120 identifying one or more applications referenced in links contained in the web page data. Theuser device 110 may determine whether the one or more applications exist on theuser device 110, and may transmit to the hostingserver 120 information indicating whether the one or more applications exist on theuser device 110. Theuser device 110 may then receive the web page data including links contextualized based on whether the one or more applications exist on theuser device 110. - In some embodiments, the
user device 110 may parse the static web page data to identify a referrer tag corresponding to one or more links included in the static web page data. The referrer tag may include information related to the link. Theuser device 110 may modify the referrer tag to include additional information, for example, a reference to a search query, an identification of the static web page, or a user identification. - According to some implementations, the hosting
server 120 may receive static web page data from the webpage developer device 130. The hostingserver 120 may receive a request for the web page data from theuser device 110, and transmit the static web page data to theuser device 110. In some embodiments, the hostingserver 120 may receive a search request from theuser device 110. The static web page data may correspond to a web page identified as a relevant search result. The hostingserver 120 may transmit the static web page data together with information corresponding to the search result to theuser device 110. - In some embodiments, the web page data may include a referrer tag corresponding to one or more links included in the static web page data. The referrer tag may include information related to the link. The hosting
server 120 may receive additional information, for example, a search query or a user identification, from theuser device 110. The hostingserver 120 may mutate the referrer tag to include the additional information and transmit the static web page data with the mutated referrer tag to theuser device 110. - In some embodiments, the hosting
server 120 may transmit information to theuser device 110 identifying one or more applications referenced in the static web page data. The hostingserver 120 may receive information from theuser device 110 indicating whether the one or more applications exist on theuser device 110. The hostingserver 120 may select one or more links contained in the static web page data based on whether the corresponding application exists on theuser device 110, and transmit the static web page data including the selected links to theuser device 110. - According to some implementations, the web
page developer device 130 may provide web page data to the hostingserver 120. The web page data may be static web page data. In some embodiment, the static web page data may include a plurality of links corresponding to respective environments of theuser device 110. One or more of the plurality of links may only be displayable on theuser device 110 in the respective environment. In some embodiments, the static web page data may include a link to an application that may exist on theuser device 110. The link to the application may instruct theuser device 110 to attempt to open the application to a particular position of the application. - According to some embodiments, the static web page data may include one or more markups. An interpreter may analyze the static web page data and extract elements of the markups. The interpreter may construct contextualized links or select a link from a plurality of links based on the extracted elements and environmental information. A decorator may then render the web page from the static web page data including the constructed or selected link. According to some embodiments, the
user device 110 may implement the interpreter and the decorator. According to some embodiments, the hostingserver 120 may implement one or more functionalities of the interpreter and the decorator. -
FIG. 2 is a flowchart of a method according to an example embodiment. In some implementations, the method may be performed by auser device 110. Theuser device 110 receives 200 static web page data. Theuser device 110 parses 210 the static web page data and identifies 220 a plurality of links in the static web page data. According to some embodiments, the links may correspond to an environment of theuser device 120, for example, an operating system of theuser device 110. Theuser device 110 selects 230 a link of the plurality of links based on the environment of theuser device 120. Theuser device 110 renders 240 the web page including the selected link, and outputs 250 the rendered web page. -
FIG. 3 illustrates an example implementation of the method ofFIG. 2 . The staticweb page data 300 includesLinks Environments user device 110 isEnvironment 1, the web page is rendered and displayed 310A withLink 1A. Meanwhile, in a case where the environment of theuser device 110 isEnvironment 2, the web page is rendered and displayed 310B withLink 1B. As a non-limiting example,Environments user device 110.Link 1A may link to an application page in an application store ofEnvironment 1, whileLink 1B may link to the application page in an application store ofEnvironment 2. When selected,Link 1A will direct theuser device 110 to an application page appropriate for the first environment andLink 1B will direct theuser device 110 to an application page appropriate for the second environment. -
FIG. 4 is a flowchart of a method according to an example embodiment. In some implementations, the method may be performed by auser device 110. Theuser device 110 receives 400 static web page data. Theuser device 110 parses 410 the static web page data and identifies 420 a link containing a modifiable referrer tag. According to some embodiments, the modifiable referrer tag may contain some attribution data corresponding to a page in which the link is found. Theuser device 110 may modify 430 the referrer tag to include additional attribution data. For example, theuser device 110 may modify the referral tag to include attribution data corresponding to a user accessing the link and a search query that led to the web page data. Theuser device 110 may then render 440 the web page including the modified referrer tag andoutput 450 the rendered web page. When the link is selected, theuser device 110 may transmit 460 the attribution data to the link destination and navigate to the link destination. - According to some embodiments, the hosting
server 120 may parse 410 the static web page data, identify 420 the link with the referrer tag, and modify 430 the referrer tag to include attribution data. The hostingserver 120 may then transmit static web page data to theuser device 110 including the modified referrer tag. In some embodiments, theuser device 110 may then immediately render the web page from the static web page data received from the hostingserver 120. In some embodiments, theuser device 110 may additionally parse 410 the static web page data received from the hostingserver 120, identify 420 the link with the modified referrer tag, and then further modify 430 the referrer tag before rendering 440 the web page. -
FIG. 5 illustrates an example implementation of the method ofFIG. 4 . The staticweb page data 500 includes a Link with a referrer tag. The referrer tag in 500 may include a reference to the page on which the Link exists, e.g., a SiteID. The referrer tag in 500 may identify attribution data to be added to the referrer tag, e.g., a user identification and search query information. In some embodiments, the hostingserver 120 may modify the referrer tag to include the search query information, e.g., the SearchQueryID, as shown in 510. The hostingserver 120 may then transmit the static web page data with the modified referrer tag to theuser device 110. Theuser device 110 may further modify the referrer tag to include the user identification, e.g., the UserID, as shown in 520. Theuser device 110 may then render the web page using the static web page data having the modified referrer tag including the SiteID, the SearchQueryID, and the UserID. According to some embodiments, theuser device 110 or the hostingserver 120 may solely modify the referrer tag to include both the SearchQueryID and the UserID. In some embodiments, the referrer tag in the original staticweb page data 500 may not explicitly identify attribution information to be added by the hostingserver 120 or theuser device 110. -
FIG. 6 is a flowchart of a method according to an example embodiment. In some implementations, the method may be performed by auser device 110. Theuser device 110 receives 600 static web page data. Theuser device 110 parses 610 the static web page data and identifies 620 an AMP tag including data elements with information to populate a link. Theuser device 110extracts 630 the data elements and constructs 640 a link based on the data elements and a client descriptor. Theuser device 110 renders 650 the web page including the constructed link and outputs 660 the rendered web page. - In some embodiments, the hosting
server 120 may parse 610 the static web page data, identify 620 the AMP tag, extract 630 the data elements, construct 640 the link, and modify the static web page data to include the constructed link. The hostingserver 120 may then transmit the static web page data including the constructed link to theuser device 110 for rendering 650 and outputting 660 of the web page. -
FIG. 7 illustrates an example implementation of the method ofFIG. 6 . The staticweb page data 700 includes an AMP app store tag including data elements of App IDs corresponding toEnvironments user device 110 is in the first operating environment, an app-store link toEnvironment 1 may be constructed, as shown in 710A. If theuser device 110 is in the second operating environment, an app-store link toEnvironment 2 may be constructed, as shown in 710B. - As a non-limiting example, the AMP tag data element may include an iOS app ID and an Android package name for an application, and the client descriptor may indicate whether the
user device 110 operates using an Android operating system or a mobile iOS operating system. If theuser device 110 operates using an Android operating system, theuser device 110 may construct a link to the application in the Google Play store. If theuser device 110 operates using a mobile iOS operating system, the user device may construct a link to the application in the iOS app store. -
FIG. 8 is a flowchart of a method according to an example embodiment. In some implementations, the method may be performed by the hostingserver 120. The hostingserver 120 may parse 810 static web page data and identify 820 a contextual element. For example, the contextual information may include a plurality of links corresponding to respective user device environments, a mutatable referrer tag, or an AMP tag. The hostingserver 120 receives 830 environmental information on an environment of theuser device 110. For example, the environmental information may indicate an operating system of theuser device 110 or whether one or more applications exist on theuser device 110. The hostingserver 120 modifies 840 the contextual information based on the environmental information. For example, the hostingserver 120 may construct a link to an appropriate app installation for the operating system of theuser device 110, or a link directing to an application installation page or a link opening the application based on whether the application exists on theuser device 110. The hostingserver 120 transmits 840 the static web page data with the modified contextual information to theuser device 110. -
FIG. 9 is a flowchart of a method according to an example embodiment. In some implementations, the method may be performed by the hostingserver 120. The hostingserver 120 receives 900 a web search query from theuser device 110. The hostingserver 120 performs 910 a search based on the web search query. The hostingserver 120 compiles 920 search results and static web page data corresponding to the search results. The hostingserver 120 modifies 930 the static web page data based on environmental information and transmits 940 the search results and the modified web page data to theuser device 110. Theuser device 110 may then render web pages corresponding to the modified web page data and display the web pages. In some embodiments, hostingserver 120 may transmit the search results and the unmodified static web page data to theuser device 110, and the user device may modify 930 the static web page data. -
FIG. 10 is a block diagram of an illustrativecomputer system architecture 1000, according to an example implementation. For example, theuser device 110, the hostingserver 120, and thedomain registrar server 130 may be implemented using one or more elements from thecomputer system architecture 1000. It will be understood that thecomputing device architecture 1000 is provided for example purposes only and does not limit the scope of the various implementations of the present disclosed systems, methods, and computer-readable mediums. - The
computing device architecture 1000 ofFIG. 10 includes a central processing unit (CPU) 1002, where computer instructions are processed, and adisplay interface 1004 that acts as a communication interface and provides functions for rendering video, graphics, images, and texts on the display. In certain example implementations of the disclosed technology, thedisplay interface 1004 may be directly connected to a local display, such as a touch-screen display associated with a mobile computing device. In another example implementation, thedisplay interface 1004 may be configured for providing data, images, and other information for an external/remote display 1050 that is not necessarily physically connected to the mobile computing device. For example, a desktop monitor may be used for mirroring graphics and other information that is presented on a mobile computing device. In certain example implementations, thedisplay interface 1004 may wirelessly communicate, for example, via a Wi-Fi channel or other availablenetwork connection interface 1012 to the external/remote display 1050. - In an example implementation, the
network connection interface 1012 may be configured as a communication interface and may provide functions for rendering video, graphics, images, text, other information, or any combination thereof on the display. In one example, a communication interface may include a serial port, a parallel port, a general purpose input and output (GPIO) port, a game port, a universal serial bus (USB), a micro-USB port, a high definition multimedia (HDMI) port, a video port, an audio port, a Bluetooth port, a near-field communication (NFC) port, another like communication interface, or any combination thereof. In one example, thedisplay interface 1004 may be operatively coupled to a local display, such as a touch-screen display associated with a mobile device. In another example, thedisplay interface 1004 may be configured to provide video, graphics, images, text, other information, or any combination thereof for an external/remote display 1050 that is not necessarily connected to the mobile computing device. In one example, a desktop monitor may be used for mirroring or extending graphical information that may be presented on a mobile device. In another example, thedisplay interface 1004 may wirelessly communicate, for example, via thenetwork connection interface 1012 such as a Wi-Fi transceiver to the external/remote display 1050. - The
computing device architecture 1000 may include akeyboard interface 1006 that provides a communication interface to a keyboard. In one example implementation, thecomputing device architecture 1000 may include a presence-sensitive display interface 1008 for connecting to a presence-sensitive display 1007. According to certain example implementations of the disclosed technology, the presence-sensitive display interface 1008 may provide a communication interface to various devices such as a pointing device, a touch screen, a depth camera, etc. which may or may not be associated with a display. - The
computing device architecture 1000 may be configured to use an input device via one or more of input/output interfaces (for example, thekeyboard interface 1006, thedisplay interface 1004, the presencesensitive display interface 1008,network connection interface 1012,camera interface 1014,sound interface 1016, etc.) to allow a user to capture information into thecomputing device architecture 1000. The input device may include a mouse, a trackball, a directional pad, a track pad, a touch-verified track pad, a presence-sensitive track pad, a presence-sensitive display, a scroll wheel, a digital camera, a digital video camera, a web camera, a microphone, a sensor, a smartcard, and the like. Additionally, the input device may be integrated with thecomputing device architecture 1000 or may be a separate device. For example, the input device may be an accelerometer, a magnetometer, a digital camera, a microphone, and an optical sensor. - Example implementations of the
computing device architecture 1000 may include anantenna interface 1010 that provides a communication interface to an antenna; anetwork connection interface 1012 that provides a communication interface to a network. As mentioned above, thedisplay interface 1004 may be in communication with thenetwork connection interface 1012, for example, to provide information for display on a remote display that is not directly connected or attached to the system. In certain implementations, acamera interface 1014 is provided that acts as a communication interface and provides functions for capturing digital images from a camera. In certain implementations, asound interface 1016 is provided as a communication interface for converting sound into electrical signals using a microphone and for converting electrical signals into sound using a speaker. According to example implementations, a random access memory (RAM) 1018 is provided, where computer instructions and data may be stored in a volatile memory device for processing by theCPU 1002. - According to an example implementation, the
computing device architecture 1000 includes a read-only memory (ROM) 1020 where invariant low-level system code or data for basic system functions such as basic input and output (I/O), startup, or reception of keystrokes from a keyboard are stored in a non-volatile memory device. According to an example implementation, thecomputing device architecture 1000 includes astorage medium 1022 or other suitable type of memory (e.g. such as RAM, ROM, programmable read-only memory (PROM), erasable programmable read-only memory (EPROM), electrically erasable programmable read-only memory (EEPROM), magnetic disks, optical disks, floppy disks, hard disks, removable cartridges, flash drives), where the files include anoperating system 1024, application programs 1026 (including, for example, a web browser application, a widget or gadget engine, and or other applications, as necessary) anddata files 1028 are stored. According to an example implementation, thecomputing device architecture 1000 includes apower source 1030 that provides an appropriate alternating current (AC) or direct current (DC) to power components. - According to an example implementation, the
computing device architecture 1000 includes atelephony subsystem 1032 that allows thedevice 1000 to transmit and receive sound over a telephone network. The constituent devices and theCPU 1002 communicate with each other over abus 1034. - According to an example implementation, the
CPU 1002 has appropriate structure to be a computer processor. In one arrangement, theCPU 1002 may include more than one processing unit. The RAM 1018 interfaces with thecomputer bus 1034 to provide quick RAM storage to theCPU 1002 during the execution of software programs such as the operating system application programs, and device drivers. More specifically, theCPU 1002 loads computer-executable process steps from thestorage medium 1022 or other media into a field of the RAM 1018 in order to execute software programs. Data may be stored in the RAM 1018, where the data may be accessed by thecomputer CPU 1002 during execution. - The
storage medium 1022 itself may include a number of physical drive units, such as a redundant array of independent disks (RAID), a floppy disk drive, a flash memory, a USB flash drive, an external hard disk drive, thumb drive, pen drive, key drive, a High-Density Digital Versatile Disc (HD-DVD) optical disc drive, an internal hard disk drive, a Blu-Ray optical disc drive, or a Holographic Digital Data Storage (HDDS) optical disc drive, an external mini-dual in-line memory module (DIMM) synchronous dynamic random access memory (SDRAM), or an external micro-DIMM SDRAM. Such computer readable storage media allow a computing device to access computer-executable process steps, application programs and the like, stored on removable and non-removable memory media, to off-load data from the device or to upload data onto the device. A computer program product, such as one utilizing a communication system may be tangibly embodied instorage medium 1022, which may include a machine-readable storage medium. - According to one example implementation, the term computing device, as used herein, may be a CPU, or conceptualized as a CPU (for example, the
CPU 1002 ofFIG. 10 ). In this example implementation, the computing device (CPU) may be coupled, connected, and/or in communication with one or more peripheral devices, such as display. In another example implementation, the term computing device, as used herein, may refer to a mobile computing device such as a Smartphone, tablet computer, or smart watch. In this example implementation, the computing device may output content to its local display and/or speaker(s). In another example implementation, the computing device may output content to an external display device (e.g., over Wi-Fi) such as a TV or an external computing system. - In example implementations of the disclosed technology, a computing device may include any number of hardware and/or software applications that are executed to facilitate any of the operations. In example implementations, one or more I/O interfaces may facilitate communication between the computing device and one or more input/output devices. For example, a universal serial bus port, a serial port, a disk drive, a CD-ROM drive, and/or one or more user interface devices, such as a display, keyboard, keypad, mouse, control panel, touch screen display, microphone, etc., may facilitate user interaction with the computing device. The one or more I/O interfaces may be used to receive or collect data and/or user instructions from a wide variety of input devices. Received data may be processed by one or more computer processors as desired in various implementations of the disclosed technology and/or stored in one or more memory devices.
- One or more network interfaces may facilitate connection of the computing device inputs and outputs to one or more suitable networks and/or connections; for example, the connections that facilitate communication with any number of sensors associated with the system. The one or more network interfaces may further facilitate connection to one or more suitable networks; for example, a local area network, a wide area network, the Internet, a cellular network, a radio frequency network, a Bluetooth enabled network, a Wi-Fi enabled network, a satellite-based network any wired network, any wireless network, etc., for communication with external devices and/or systems.
- According to some implementations, the computer program code may control the computing device to parse and render static web page data according to one or more example embodiments. In some implementations, the computer program code may control the computing device to provide parse and modify static web page data according to one or more example embodiments. The computer program code may modify a browser to implement an interpreter and decorator according to some embodiments.
- While certain implementations of the disclosed technology have been described in connection with what is presently considered to be the most practical and various implementations, it is to be understood that the disclosed technology is not to be limited to the disclosed implementations, but on the contrary, is intended to cover various modifications and equivalent arrangements included within the scope of the appended claims and their equivalents. Although specific terms are employed herein, they are used in a generic and descriptive sense only and not for purposes of limitation.
- In the foregoing description, numerous specific details are set forth. It is to be understood, however, that implementations of the disclosed technology may be practiced without these specific details. In other instances, well-known methods, structures and techniques have not been shown in detail in order not to obscure an understanding of this description. References to “one implementation,” “an implementation,” “example implementation,” “various implementation,” etc., indicate that the implementation(s) of the disclosed technology so described may include a particular feature, structure, or characteristic, but not every implementation necessarily includes the particular feature, structure, or characteristic. Further, repeated use of the phrase “in one implementation” does not necessarily refer to the same implementation, although it may.
- Throughout the specification and the claims, the following terms should be construed to take at least the meanings explicitly associated herein, unless the context clearly dictates otherwise. The term “connected” means that one function, feature, structure, or characteristic is directly joined to or in communication with another function, feature, structure, or characteristic. The term “coupled” means that one function, feature, structure, or characteristic is directly or indirectly joined to or in communication with another function, feature, structure, or characteristic. The term “or” is intended to mean an inclusive “or.” Further, the terms “a,” “an,” and “the” are intended to mean one or more unless specified otherwise or clear from the context to be directed to a singular form.
- As used herein, unless otherwise specified the use of the ordinal adjectives “first,” “second,” “third,” etc., to describe a common object, merely indicate that different instances of like objects are being referred to, and are not intended to imply that the objects so described must be in a-given sequence, either temporally, spatially, in ranking, or in any other manner.
- This written description uses examples to disclose certain implementations of the disclosed technology, including the best mode, and also to enable any person of ordinary skill to practice certain implementations of the disclosed technology, including making and using any devices or systems and performing any incorporated methods. The patentable scope of certain implementations of the disclosed technology is defined in the claims and their equivalents, and may include other examples that occur to those of ordinary skill. Such other examples are intended to be within the scope of the claims if they have structural elements that do not differ from the literal language of the claims, or if they include equivalent structural elements with insubstantial differences from the literal language of the claims.
Claims (18)
Priority Applications (8)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/384,793 US10380229B2 (en) | 2016-12-20 | 2016-12-20 | Method and system providing contextual functionality in static web pages |
PCT/US2017/052852 WO2018118165A1 (en) | 2016-12-20 | 2017-09-22 | Method and system providing contextual functionality in static web pages |
EP17783622.8A EP3559826B1 (en) | 2016-12-20 | 2017-09-22 | Method and system providing contextual functionality in static web pages |
DK17783622.8T DK3559826T3 (en) | 2016-12-20 | 2017-09-22 | METHOD AND SYSTEM FOR PROVIDING CONTEXTUAL FUNCTIONALITY ON STATIC WEBSITES |
CN202311000652.0A CN117112944A (en) | 2016-12-20 | 2017-09-22 | Method and system for providing context function in static webpage |
CN201780079119.4A CN110088750B (en) | 2016-12-20 | 2017-09-22 | Method and system for providing context function in static webpage |
EP23208206.5A EP4318273A3 (en) | 2016-12-20 | 2017-09-22 | Method and system providing contextual functionality in static web pages |
FIEP17783622.8T FI3559826T3 (en) | 2016-12-20 | 2017-09-22 | Method and system providing contextual functionality in static web pages |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/384,793 US10380229B2 (en) | 2016-12-20 | 2016-12-20 | Method and system providing contextual functionality in static web pages |
Publications (2)
Publication Number | Publication Date |
---|---|
US20180173684A1 true US20180173684A1 (en) | 2018-06-21 |
US10380229B2 US10380229B2 (en) | 2019-08-13 |
Family
ID=60081266
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/384,793 Active 2037-01-31 US10380229B2 (en) | 2016-12-20 | 2016-12-20 | Method and system providing contextual functionality in static web pages |
Country Status (6)
Country | Link |
---|---|
US (1) | US10380229B2 (en) |
EP (2) | EP4318273A3 (en) |
CN (2) | CN117112944A (en) |
DK (1) | DK3559826T3 (en) |
FI (1) | FI3559826T3 (en) |
WO (1) | WO2018118165A1 (en) |
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN111722850A (en) * | 2019-03-21 | 2020-09-29 | 成都鼎桥通信技术有限公司 | Method, device and system for processing application among multiple systems |
US20230036983A1 (en) * | 2019-05-06 | 2023-02-02 | Google Llc | Secure communication in mobile digital pages |
Family Cites Families (18)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7873537B2 (en) * | 2003-12-04 | 2011-01-18 | International Business Machines Corporation | Providing deep linking functions with digital rights management |
KR100996037B1 (en) * | 2006-12-21 | 2010-11-22 | 삼성전자주식회사 | Apparatus and method for providing hyperlink information in mobile communication terminal which can connect with wireless-internet |
FR2954536A1 (en) * | 2009-12-21 | 2011-06-24 | France Telecom | METHOD FOR INTEGRATING THE WEB BROWSER WITH A GRAPHICAL APPLICATION |
US9317621B2 (en) * | 2011-01-06 | 2016-04-19 | Microsoft Technology Licensing, Llc | Providing deep links in association with toolbars |
US9292467B2 (en) | 2011-09-16 | 2016-03-22 | Radware, Ltd. | Mobile resource accelerator |
CA2854142A1 (en) * | 2011-11-01 | 2013-05-10 | Google Inc. | Launching applications from webpages |
CN102663319B (en) * | 2012-03-29 | 2015-04-15 | 北京奇虎科技有限公司 | Prompting method and device for download link security |
US20140304642A1 (en) * | 2012-05-14 | 2014-10-09 | Google Inc. | Specifying a label for a computer application |
CN103944944B (en) * | 2013-01-23 | 2019-07-16 | 腾讯科技（深圳）有限公司 | Method, electronic equipment and the system of sharing web page link |
US9317272B2 (en) | 2013-03-15 | 2016-04-19 | Yahoo! Inc. | Computerized system and method for creating a resource URL for rendering the resource in a resource specific application |
US9411786B2 (en) * | 2013-07-08 | 2016-08-09 | Adobe Systems Incorporated | Method and apparatus for determining the relevancy of hyperlinks |
US10114898B2 (en) | 2014-11-26 | 2018-10-30 | Samsung Electronics Co., Ltd. | Providing additional functionality with search results |
US10498847B2 (en) * | 2015-02-11 | 2019-12-03 | Go Daddy Operating Company, LLC | System and method for mobile application deep linking |
US10635725B2 (en) * | 2015-04-09 | 2020-04-28 | Google Llc | Providing app store search results |
US10268664B2 (en) * | 2015-08-25 | 2019-04-23 | Facebook, Inc. | Embedding links in user-created content on online social networks |
US10180833B2 (en) * | 2015-12-31 | 2019-01-15 | Samsung Electronics Co., Ltd. | Cooperative web-assisted deep link redirection |
US20170193087A1 (en) * | 2015-12-31 | 2017-07-06 | Quixey, Inc. | Real-Time Markup of User Text with Deep Links |
US20180025012A1 (en) * | 2016-07-19 | 2018-01-25 | Fortinet, Inc. | Web page classification based on noise removal |
-
2016
- 2016-12-20 US US15/384,793 patent/US10380229B2/en active Active
-
2017
- 2017-09-22 CN CN202311000652.0A patent/CN117112944A/en active Pending
- 2017-09-22 FI FIEP17783622.8T patent/FI3559826T3/en active
- 2017-09-22 CN CN201780079119.4A patent/CN110088750B/en active Active
- 2017-09-22 EP EP23208206.5A patent/EP4318273A3/en active Pending
- 2017-09-22 EP EP17783622.8A patent/EP3559826B1/en active Active
- 2017-09-22 WO PCT/US2017/052852 patent/WO2018118165A1/en unknown
- 2017-09-22 DK DK17783622.8T patent/DK3559826T3/en active
Cited By (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN111722850A (en) * | 2019-03-21 | 2020-09-29 | 成都鼎桥通信技术有限公司 | Method, device and system for processing application among multiple systems |
US20230036983A1 (en) * | 2019-05-06 | 2023-02-02 | Google Llc | Secure communication in mobile digital pages |
US11924644B2 (en) * | 2019-05-06 | 2024-03-05 | Google Llc | Secure communication in mobile digital pages |
Also Published As
Publication number | Publication date |
---|---|
CN117112944A (en) | 2023-11-24 |
DK3559826T3 (en) | 2024-03-04 |
EP4318273A2 (en) | 2024-02-07 |
US10380229B2 (en) | 2019-08-13 |
CN110088750B (en) | 2023-08-18 |
EP3559826B1 (en) | 2023-12-20 |
EP4318273A3 (en) | 2024-04-24 |
FI3559826T3 (en) | 2024-03-13 |
CN110088750A (en) | 2019-08-02 |
WO2018118165A1 (en) | 2018-06-28 |
EP3559826A1 (en) | 2019-10-30 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9746957B2 (en) | Managing sensory information of a user device | |
US10122839B1 (en) | Techniques for enhancing content on a mobile device | |
US20170308279A1 (en) | Customization of Mobile Applications Using Web-Based Technology | |
US9923793B1 (en) | Client-side measurement of user experience quality | |
US20120166522A1 (en) | Supporting intelligent user interface interactions | |
US20150193395A1 (en) | Predictive link pre-loading | |
US20200167068A1 (en) | Data Processing Method and Electronic Device | |
US9871710B2 (en) | Electronic device for operating application | |
US20150058713A1 (en) | Method and apparatus for sharing media content and method and apparatus for displaying media content | |
US9740668B1 (en) | Plotting webpage loading speeds and altering webpages and a service based on latency and pixel density | |
US20180132012A1 (en) | Method and apparatus for playing video in application program | |
US20140258372A1 (en) | Systems and Methods for Categorizing and Measuring Engagement with Content | |
US9804774B1 (en) | Managing gesture input information | |
US20130332806A1 (en) | Collecting Web Pages/Links from Communications and Documents for Later Reading | |
US10380229B2 (en) | Method and system providing contextual functionality in static web pages | |
US9946712B2 (en) | Techniques for user identification of and translation of media | |
US9372616B2 (en) | Smart interactive bookmarks | |
WO2013106424A1 (en) | Method and apparatus for displaying suggestions to a user of a software application | |
US8803808B1 (en) | Keyboard event detection and network event generation | |
KR102255369B1 (en) | Method for providing alternative service and electronic device thereof | |
CN113282285A (en) | Code compiling method and device, electronic equipment and storage medium | |
US20220043809A1 (en) | Method And System For Preview Of Search Engine Processing | |
US20130311359A1 (en) | Triple-click activation of a monetizing action | |
US9916292B2 (en) | Method of identifying a target object on a web page | |
US20130326005A1 (en) | Methods, apparatuses and computer program products for enabling modification of content delivered to mobile browsers |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:DAVIES, SCOTT;LEWIS, JUSTIN;REEL/FRAME:040688/0924Effective date: 20161208 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044567/0001Effective date: 20170929 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NOTICE OF ALLOWANCE MAILED -- APPLICATION RECEIVED IN OFFICE OF PUBLICATIONS |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: PUBLICATIONS -- ISSUE FEE PAYMENT RECEIVED |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |