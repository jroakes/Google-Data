CN105765554A - Distributing data on distributed storage systems - Google Patents
Distributing data on distributed storage systems Download PDFInfo
- Publication number
- CN105765554A CN105765554A CN201480063767.7A CN201480063767A CN105765554A CN 105765554 A CN105765554 A CN 105765554A CN 201480063767 A CN201480063767 A CN 201480063767A CN 105765554 A CN105765554 A CN 105765554A
- Authority
- CN
- China
- Prior art keywords
- storage device
- chunk
- file
- maintenance
- computer processor
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/07—Responding to the occurrence of a fault, e.g. fault tolerance
- G06F11/14—Error detection or correction of the data by redundancy in operation
- G06F11/1402—Saving, restoring, recovering or retrying
- G06F11/1415—Saving, restoring, recovering or retrying at system level
- G06F11/1435—Saving, restoring, recovering or retrying at system level using file system or storage system metadata
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/10—File systems; File servers
- G06F16/18—File system types
- G06F16/182—Distributed file systems
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/10—File systems; File servers
- G06F16/17—Details of further file system functions
- G06F16/174—Redundancy elimination performed by the file system
- G06F16/1748—De-duplication implemented within the file system, e.g. based on file segments
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/27—Replication, distribution or synchronisation of data between databases or within a distributed database system; Distributed database system architectures therefor
- G06F16/278—Data partitioning, e.g. horizontal or vertical partitioning
Abstract
A method of distributing data (312) in a distributed storage system (100) includes receiving a file (310) into non-transitory memory (204) and dividing the received file into chunks (330) using a computer processor (202) in communication with the non-transitory memory. The method also includes distributing chunks to storage devices (1 14) of the distributed storage system based on a maintenance hierarchy (400) of the distributed storage system. The maintenance hierarchy includes maintenance units (402) each having active and inactive states. Moreover, each storage device is associated with a maintenance unit. The chunks are distributed across multiple maintenance units to maintain accessibility of the file when a maintenance unit is in an inactive state.
Description
Technical field
Present disclosure relates to distribution data on distributed memory system.
Background technology
Distributed system generally includes many loosely-coupled computers, and wherein each computer typically comprises calculating resource (such as, one or more processors) and/or storage resource (such as, memorizer, flash memory and/or dish).Distributed memory system covers storage abstract (such as, key/value thesaurus or file system) in the storage resource of compartment system.In distributed memory system, the storage resource of this computer can be exported to the client process run on other computers by the server processes run on a computer.Data can be transferred to client process from server processes by remote procedure call (RPC).Alternatively, direct distance input and output (RDMA) primitive can be used to from server hardware, data are transferred to client process.
Summary of the invention
One aspect of present disclosure provides a kind of method distributing data in distributed memory system.The method includes in file reception to non-transitory memory and use and the file received is divided into chunk by the computer processor of non-transitory memory communication.The method also includes safeguarding that chunk is distributed to the storage device of distributed memory system by level based on distributed memory system.Safeguard that level includes the maintenance unit each with active state and inactive state.It addition, each storage device is associated with maintenance unit.Chunk is distributed to keep the accessibility of file when maintenance unit is inactive across multiple maintenance units.
The implementation of present disclosure can include the one or more features in following characteristics.In some implementations, the method also includes the number that limits the chunk of the storage device being distributed to any one maintenance unit.
In some implementations, the method also include being determined by the first of the storage device of the number matches of the chunk to file randomly choose and determine to storage device choose whether the accessibility of file can be kept time inactive at one or more (or threshold number) maintenance unit to determine chunk distribution between storage device.In some instances, when the first of storage device being randomly choosed the accessibility that cannot keep file when one or more (or threshold number) maintenance unit is inactive, the method also includes determining and randomly chooses with the second of the storage device of the number matches of the chunk of file, or revises to storage device first randomly choose by adding or removing one or more storage device randomly choosed.The method can also include using simple sampling, probability sampling, stratified sampling or cluster sampling to determine that to storage device first randomly chooses.
In some implementations, the method also includes by determining chunk distribution between storage device from equal numbers of continuous multiple storage devices of the chunk of the selection of the order cycle table of the storage device of distributed storage and file.When the storage device selected cannot keep the accessibility of file jointly when one or more (or threshold number) maintenance unit is inactive, the method also includes the equal numbers of other continuous multiple storage devices selecting chunk with file from order cycle table.Additionally or alternatively, the method also includes the order cycle table of determining the storage device of distributed memory system.Adjacent storage device on order cycle table is associated from different maintenance units.In some instances, the Coutinuous store equipment of the threshold number on order cycle table is each associated from different maintenance units or in each comfortable diverse geographic location.
In some implementations, the method also includes (such as, use computer processor) and determines the maintenance level of maintenance unit, wherein safeguards that level has levels of maintenance and each levels of maintenance includes one or more maintenance unit.The method also includes each maintenance unit is mapped at least one storage device.In some instances, each maintenance unit includes the storage device powered by single power distribution unit or single power source bus groove.Additionally or alternatively, the storage device that another equipment that maintenance unit can include safeguarding with cooling unit or (contingently or routinely) needs is associated.
The method can also include the file received is divided into band.Each file includes replicating code or error correcting code.When file includes replicating code, the method includes copying as at least one band duplication chunk.When file includes error correcting code, the method includes at least one band is divided into data chunks and code chunk.The method can also include and distribute between storage device data chunks and code chunk differently distribution duplication chunk between storage device.
The another aspect of present disclosure provides a kind of system for distributing data in distributed memory system.This system includes non-transitory memory, computer processor and storage device.Non-transitory memory receives one or more file from user.Computer processor and non-transitory memory communication and the file received is divided into chunk.Storage device and computer processor and non-transitory memory communication, computer processor based on distributed memory system maintenance level by chunk store on a storage device.Safeguard that level includes the maintenance unit with active state and inactive state.Each storage device is associated with maintenance unit.Computer processor distributes chunk to keep the accessibility of file when maintenance unit is inactive across multiple maintenance units.
In some instances, computer processor restriction is distributed to the number of the chunk of the storage device of any one maintenance unit.Computer processor can be determined by the first of the storage device of the number matches of the chunk to file and randomly chooses and determine that the accessibility choosing whether to keep file when one or more (or threshold number) maintenance unit is inactive to storage device is determining chunk distribution between storage device.Additionally or alternatively, when the first of storage device randomly chooses the accessibility that cannot keep file when one or more (or threshold number) maintenance unit is inactive, computer processor may determine that and randomly choose with the second of the storage device of the number matches of the chunk of file.
In some implementations, when the first of storage device randomly chooses the accessibility that cannot keep file when one or more (or threshold number) maintenance unit is inactive, computer processor is revised to storage device first randomly choose by being added and removing one or more storage device randomly choosed.Additionally or alternatively, computer processor can use simple sampling, probability sampling, stratified sampling or cluster sampling to determine that to storage device first randomly chooses.
In some instances, computer processor is by determining chunk distribution between storage device from equal numbers of continuous multiple storage devices of the chunk of the selection of the order cycle table of the storage device of distributed memory system and file.Additionally or alternatively, when the storage device selected cannot keep the accessibility of file jointly when one or more (or threshold number) maintenance unit is inactive, computer processor can select equal numbers of other continuous multiple storage devices of chunk with file from order cycle table.
In some implementations, computer processor determines the order cycle table of the storage device of distributed memory system, and wherein the adjacent storage device on order cycle table is associated from different maintenance units.Additionally or alternatively, the Coutinuous store equipment of the threshold number on order cycle table can each be associated from different maintenance units.Additionally or alternatively, the Coutinuous store equipment of the threshold number on order cycle table can in each comfortable diverse geographic location.
In some instances, computer processor is determined the maintenance level of maintenance unit and each maintenance unit is mapped at least one storage device.Safeguarding that level has levels of maintenance, wherein each levels of maintenance includes one or more maintenance unit.Additionally or alternatively, each maintenance unit can include the storage device powered by single power distribution unit or single power source bus groove.
In some implementations, the file received is divided into band by computer processor, and wherein each file includes replicating code and/or error correcting code.When file includes replicating code, at least one band is copied as duplication chunk by computer processor.When file includes error correcting code, at least one band is divided into data chunks and code chunk by computer processor.Additionally or alternatively, computer processor and can distribute data chunks and code chunk differently distribution duplication chunk between storage device between storage device.
The details of one or more implementations of present disclosure is elucidated with in the accompanying drawings and the description below.Other aspects, features and advantages are according to describing and accompanying drawing and will be apparent from according to claim.
Accompanying drawing explanation
Figure 1A is the schematic diagram of example distributed storage system.
Figure 1B is the schematic diagram of the example distributed storage system of the unit with the memorizer main frame managed by manager.
Fig. 1 C is the schematic diagram of the exemplary cell of distributed memory system.
Fig. 2 is the schematic diagram of the exemplary administration person for distributed memory system.
Fig. 3 A is divided into replicating the schematic diagram of the exemplary file of band.
Fig. 3 B is divided into the schematic diagram of the exemplary file of data chunks and code chunk.
Fig. 4 A to Fig. 4 C is the schematic diagram of Exemplary maintenance level.
Fig. 5 A is the flow chart of the exemplary arrangement of the operation for randomly choosing one group of storage resource.
Fig. 5 B is the exemplary schematic diagram randomly choosed to storage device.
Fig. 6 A is for randomly choosing the flow chart of exemplary arrangement that then one group of storage resource randomly updates the operation of storage device in this group.
Fig. 6 B is the exemplary schematic diagram randomly choosed to storage device.
Fig. 7 A is the flow chart of the exemplary arrangement of the operation for selecting one group of storage resource from circular list.
Fig. 7 B is from the ordered list schematic diagram to the exemplary selection of storage device.
Fig. 8 is the schematic diagram of the exemplary arrangement of the operation for distributing data within the storage system.
Similar label instruction similar elements in each figure.
Detailed description of the invention
Storage system includes multilamellar redundancy, and wherein data are copied and stored in multiple data center.Data center holds computer system and associated component thereof, such as telecommunications and storage system 100 (Figure 1A to Fig. 1 C).Data center generally includes stand-by power supply, redundancy communication connection, environmental Kuznets Curves (to keep steady temperature) and safety equipment.Data center can be the big industrial-scale operation using (such as, as many with samll cities and towns) a large amount of electric power.Data may be located at diverse geographic location (such as, different cities, country variant and different continent).In some instances, data center or one part need to safeguard (such as, due to power-off or make a part for storage system disconnect for changing parts or the system failure or its combination).In these data centers, the data of storage are likely to user unavailable during safeguarding the period, thus causing damage or the stopping of the operation to user.Accordingly, it is desirable to provide a kind of distributed memory system 100, wherein, although storage system 100 or its multiple parts experience are safeguarded, user is still able to fetch the data of storage.
Referring to figs. 1A to Fig. 1 C, in some implementations, distributed memory system 100 includes loosely-coupled memorizer main frame 110 (110a-110n) (such as, computer or server), it each has and may be used for the storage resource 114 to data buffer storage (such as, memorizer, flash memory, dynamic random access memory (DRAM), phase transition storage (PCM) and/or dish) the calculating resource 112 (such as, one or more processors or CPU (CPU)) that communicates.Cover storage resource 114 on storage abstract (such as, key/value thesaurus or file system) allow by one or more clients 120 (120a-120n) to storage resource 114 expansible use.Client 120 can (such as, via RPC) be communicated with memorizer main frame 110 by network 130.
In some implementations, distributed memory system 100 is " monolateral ", thus eliminating with storage on its corresponding memorizer main frame 110 or fetching any server requirements of one's work of data 312 and can depend on specialized hardware as an alternative and carry out processing remote request 122 for responding remote procedure call (RPC) from client 120." monolateral " refers to following methods, and the most of requests on memorizer main frame 110 are processed and with hardware but not can be completed by the software performed on the CPU112 of memorizer main frame 110 by the method.Client 120 can pass through the direct accessing storage resources 114 of network interface controller (NIC) 116 of memorizer main frame 110, but not make memorizer main frame 110 (such as, server) processor 112 perform the server processes 118 by the access of corresponding storage resource 114 (such as, non-transitory memory) being exported to the client process 128 performed in client 120.In other words, the client process 128 performed in client 120 directly can be docked with one or more storage resources 114, without performing in the routine calculating any server processes 118 performed in resource 112.This monolateral distributed storage architecture provides relatively high handling capacity and low delay because client 120 can accessing storage resources 114 and do not dock with the calculating resource 112 of memorizer main frame 110.This has the effect of the requirement decoupling for storage 114 and cpu cycle making typical bilateral distributed memory system 100 have.Whether available free monolateral distributed memory system 100 can utilize remote storage resource 114 regardless of cpu cycle on this memorizer main frame 110；It addition, because monolateral operation not contention server CPU112 resource, even if therefore monolateral system can also service for cache request 122 with extremely predictable low delay when memorizer main frame 110 runs with high cpu utilization.Therefore, monolateral distributed memory system 100 allows the utilization rate to cluster-based storage 114 and cpu resource 112 higher than traditional double edge system, provides predictable low delay simultaneously.
In some implementations, distributed memory system 100 includes storage logical gate 102, data control section 104 and data storage section 106.Storage logical gate 102 can include being responsible for such as via RPC or monolateral operation to access the transactional applications DLL (API) 350 (such as, monolateral transaction system client library) of bottom data.Data control section 104 can utilize task to manage the distribution to storage resource 114 and access, task all distribution in this way storage resource 114, to corresponding network interface controller 116 registration storage resource 114, set up between one or more clients 120 and memorizer main frame 110 be connected, mistake under handling machine failure condition, etc..Data storage section 106 can include loosely-coupled memorizer main frame 110,110a-110n.
Data 312 can be stored in dynamic random access memory (DRAM) 114 and via supporting that the network interface controller 116 that Remote Direct Memory accesses (RDMA) supplies the data 312 from distance host 110 by distributed memory system 100.Network interface controller 116 (being also referred to as NIC, network adapter or lan adapter) can be the computer hardware component that calculating resource 112 is connected to network 130.Both memorizer main frame 110a-110n and client 120 can each have the network interface controller 116 for network service.The host processes 118 performed on the computation processor 112 of memorizer main frame 110 is to the Remote Direct Memory accessible area set 115a-115n of network interface controller 116 registration memory 114.Host processes 118 can carry out the Remote Direct Memory accessible area 115a-115n of registration memory 114 by read-only or read/write authority.The memory area 115a-115n that network interface controller 116 is each registration of memorizer main frame 110 creates client key 321.
The monolateral operation performed by network interface controller 116 can be limited to simple reading and writing and compare and swap operation, and it is likely to substitute all without complexity to simple and easy (drop-in) that be enough to serve as the software logic realized by the traditional caching server work for performing cache request and management cache policy.The order of such as look-up command or insertion data command etc is converted into the sequence of original network interface controller operation by affairs API350.Affairs API350 docks with data control section 104 and the data storage section 106 of distributed memory system 100.
The software process that distributed memory system 100 can include putting altogether to register the connection for remote access memorizer 114 and foundation and client process 128 to network interface controller 116.Be established once connect, then client process 128 just can access the memorizer 114 of registration via the engine in the hardware of network interface controller 116, without any participation of the software on the local cpu 112 carrying out self-corresponding memorizer main frame 110.
With reference to Figure 1B and Fig. 1 C, in some implementations, distributed memory system 100 includes multiple unit 200, and each unit 200 includes memorizer main frame 110 and the manager 210 communicated with memorizer main frame 110.Manager 210 is (such as, process) computation processor 202 of network 130 can be connected to (such as, there is the server of non-transitory memory 204) on perform and manage data storage (such as, management on memorizer main frame 110 storage file system), control data place and/or initiate data recover.It addition, manager 210 can follow the trail of the data 312 existence on memorizer main frame 110 and storage position.The manager 210 of redundancy is possible.In some implementations, one or more managers 210 follow the trail of data 312 across the striping of multiple memorizer main frames 110 and the existence for redundancy and/or multiple copies of performance of given band and/or position.In computer data stores, Striping data is the technology that the alphabetic data 312 of such as file 310 (Fig. 2) etc carries out logic section in such a way: different physical storage devices 114 (such as, unit 200 and/or memorizer main frame 110) are carried out the access to sequential segment.When process equipment can provide access to ask the access to data 312 more rapidly than storage device 114, striping is useful.Accessing by performing segmentation on multiple equipment, multiple segmentations can be accessed concomitantly.This provides more data access handling capacity, and this avoids and waits data access so that processor idly.
In some implementations, affairs API350 docks between client 120 (such as, having client process 128) and manager 210.In some instances, client 120 is communicated with manager 210 by one or more remote procedure calls (RPC).Asking 122 in response to client, affairs API350 can find some data 312 storage position on one or more memorizer main frames 110 and obtain the key 302 allowing to access data 312.Affairs API350 (via network interface controller 116) directly communicates with suitable memorizer main frame 110 and reads or write data 312 with (such as, using Remote Direct Memory to access).Inoperable at memorizer main frame 110 or when data 312 are moved to different memory main frame 110, client request 122 failure, thus pointing out client 120 searching and managing person 210 again.
With reference to Fig. 2, in some implementations, manager 210 stores and manages file system metadata 212.Metadata 212 can include file 3101-nIt is mapped to filec descriptor 3001-nFile Mapping 214.Manager 210 can check and revise the expression of its persistent metadata 212.Manager 210 can use three kinds of different access patterns for metadata 212: read-only, file transaction and band affairs.
With reference to Fig. 3 A and Fig. 3 B, data 312 can be one or more files 310, and wherein each file 310 has the duplication rank 311 and/or error correcting code 313 specified.Each file 310 can be divided into collecting of band 320a-320n by manager 210, and wherein each band 320a-320n is replicated independently with residue band 320a-320n or encodes.For the file 310 replicated, each band 320a-320n is that manager 210 replicates as bar tape copy 330nkAnd it is stored in the single logic block in multiple storage resource 114.In this case, bar tape copy 330nkIt is also referred to as chunk 330nk.For the file 310 of coding, each band 320a-320n is placed on the multiple data chunks 330nd in multiple storage resource 114 by manager 210kWith code chunk 330ncmComposition, wherein data chunks 330ndkWith code chunk 330ncmCollect formation single code word.It is said that in general, how manager 210 can be placed on independent of other bands 320a-320n in file 310, each band 320a-320n is placed in storage resource 114 by storage resource 114.Error correcting code 313 adds redundant data or parity data to file, even if so that when some mistakes (ability of the upper code extremely used) are introduced into receptor can also recover file after a while.Error correcting code is used for the data integrity kept in storage device, to reconstruct data for performance (time delay), or to exhaust machine more rapidly.
Referring back to Fig. 2, in some implementations, manager 210 filec descriptor 300 stored1-nComprising the metadata 212 of such as File Mapping 214 etc, band 320a-320n is optionally mapped to bar tape copy 330n by itkOr it is mapped to the data chunks 320nd being stored on memorizer main frame 110kWith code chunk 320ncm.In order to open file 310, client 120 sends request 122 to manager 210, and manager 210 returns filec descriptor 300.Client 120 uses filec descriptor 300 that the skew of file chunk is converted into remote memory location 115a-115n.Filec descriptor 300 can be included as the chunk 320n on memorizer main frame 110k、320ndk、320ncmInstitute is exclusive and reads this chunk 320n for RDMAk、320ndk、320ncmClient key 302 (such as, 32 keys).After client 120 load document descriptor 300, client 120 can access the data 312 of file 310 via RDMA or another data retrieval method.
Manager 210 can keep the status information of all memorizer main frames 110 for the part as unit 200.Status information can include the capacity on memorizer main frame 110, free space, load, from the time delay of the memorizer main frame 110 at client visual angle, and current state.Manager 210 can obtain this information to collect from the time delay statistical data at client visual angle by the memorizer main frame 110 in direct query unit 200 and/or by inquiring client terminal 120.In some instances, manager 210 uses memorizer main machine status information to make equilibrium again, exhausts, recovers to judge and distribution judgement.
One or more managers 210 can distribute chunk 330 to process for the more memory spaces in file 310 with for client request 122 that is balanced again and that recover.In some instances, processor 202 and between storage device 114 distribute data chunks 330ndkWith code chunk 330ncmBetween storage device 114, differently replicate chunk 330nk.Manager 210 can keep the load of memorizer load on host computers and vigor to map 216.In some implementations, manager 210 distributes chunk 330 by generating the table of candidate memory main frame 110 and sends distribution chunk request to each memorizer main frame 110 in candidate memory main frame 110.If memorizer main frame 110 transships or do not have free space, then memorizer main frame 110 can refuse this request.In this case, manager 210 selects different memory main frame 110.Each manager 210 can constantly scan its specified portions in file name space, thus left and right per minute checks all of metadata 212.Manager 210 can use file scan to check the integrity of metadata 212, it is determined that needs the work being performed, and/or generates statistical data.File scan can run concomitantly with other operations of manager 210.Scanning itself is likely to not revise metadata 212, but scheduling is by the work completed by other assemblies of system and counting statistics data.
With reference to Fig. 4 A to Fig. 4 C, manager 210 may determine that distributed memory system 100 safeguard level 400 with identify safeguard it may happen that in rank 401 (such as, rank 1401a-5401e), and do not affect the access of user's data to storing.Maintenance can include power-source maintenance, cooling system safeguards that (Fig. 4 C), networking safeguard, update or change parts or affect other maintenance or power-off of distributed memory system 100.
Safeguarding that level 400 identifies the rank 401 (such as, rank 1401a-5401e) of maintenance unit 402, wherein each maintenance unit 402 may be at active state or inactive state.Each storage device 114 of distributed memory system 100 is associated with one or more maintenance units 402.It addition, processor 202 maps associating and assembly 410,420,430,440,114 of storage device 114 and maintenance unit 402.Fig. 4 A illustrates strict level 400a, and wherein each assembly 410,420,430,440,114 depends on other assembly 410,420,430,440,114.And Fig. 4 B do show not strict level 400b, one of them assembly 410,420,430,440,114 has more than one input feeding.In some instances, processor 202 will safeguard that level 400 is stored in the non-transitory memory 204 of processor 202.Such as, storage resource 114a is mapped to frame 440a, frame 440a and is mapped to bus duct 430a, bus duct 430a then is mapped to power module distributing center 420a, power module distributing center 420a then be mapped to power plant 410a.When assembly 410,420,430,440,114 experience is safeguarded, based on the mapping of assembly 410,420,430,440,114, processor 202 determines that what storage device 114 is inactive.Once maintenance unit 402 is mapped to storage resource 114 by system 100, system 100 determines that highest level 401 (such as, rank 1-5), can perform maintenance while highest level 401 is in maintenance availability of data.
Maintenance unit 402 includes the assembly 410,420,430,440,114 that experience is safeguarded and any assembly depending on this assembly 410,420,430,440,114.Therefore, when an assembly 410,420,430,440,114 experience is safeguarded, this assembly 410,420,430,440,114 is inactive and any assembly 410,420,430,440,114 in the maintenance unit 402 of assembly 410,420,430,440,114 is also inactive.As figure 4 illustrates, rank 1401a assembly can be the power plant 410 to rank 2-5401b, 401c, 401d, 401e assembly offer electric power；Rank 2401b assembly can include power module distributing center 420a-420n；Rank 3401c assembly can include bus duct 430a-430n；Rank 4401d assembly can include frame 440a-440n；And rank 5401e assembly can include storage resource 114a-114n.The distribution of other assemblies can also be available.When power plant 410 experience is safeguarded, it is inactive including depending on rank 1 maintenance unit 402 of any power module distributing center 420 in power plant 410, bus duct 430, frame 440 and storage device 114, and thus user cannot access the data being positioned at rank 1 maintenance unit.When power module distributing center 420a experience is safeguarded, the rank 2 maintenance unit 402a including power module distributing center 420a is inactive with any assembly in rank 3 to the rank 5 depending on power module distributing center 420a.When bus duct 430a experience is safeguarded, rank 3 maintenance unit 402b and any assembly depended in the rank 4 of bus duct 430a and rank 5 including bus duct 430a are inactive.When frame 440a experience is safeguarded, including rank 4 maintenance unit 402 of frame 440a with depend on that the storage device 114 of frame 440a is inactive.Finally, when storage device 114a experience is safeguarded, rank 5 maintenance unit 402d includes storage device 114 and this storage device is inactive.
In some instances, as illustrated in figure 4b, the assembly 410,420,430,440,114 of not strict level 400b can have double feed, i.e. assembly 410,420,430,440,114 depends on two or more other assemblies 410,420,430,440,114.Such as, bus duct 430n can have the feeding from two power modules 420；And/or frame 440 can have the double feed from two bus ducts 430.As it can be seen, the first maintenance unit 402b can include two frame 440a and 440n, wherein the second frame 440n includes two feedings from two bus ducts 430a, 430n.Therefore, the second frame 440n is a part of two maintenance unit 402ba and 402bb.Therefore, safeguard that the higher level 401 of level 400 is kept, and do not cause the loss of the even lower level other 401 safeguarding level 400.This causes the redundancy in system, and this redundancy allows data accessibility.Especially, power module distributing center 420 can be kept, and does not lose any bus duct 430 depending on it.In some instances, frame 440 includes the frame supplied power with double circuit, and frame that this supplies power with double circuit allows to keep bus duct 430, and does not lose electric power to depending on its frame 440 supplied power with double circuit.In some instances, when distribute chunk 330 time ignore can be maintained when not causing power-off maintenance unit 402 with allows maintenance；But, the maintenance unit 402 ignored can be included when distributing chunk 330, because unplanned power-off still can cause the loss of chunk 330.
In some instances, safeguard that level 400 is cooling level 400c (or can be the combination of power supply level 400a, 400b) and cooling level 400c.Cooling device 442 is mapped to its frame 440 cooled down by cooling level 400c.As it can be seen, cooling device 442 can cool down one or more frame 440.Processor 202 memory storage devices 114 associates with cooling maintenance unit 402.In some implementations, processor 202 considers likely combining of in storage system 100 contingent maintenance, to determine level 400 or the combination of level 400a, 400b, 400c.
Therefore, when the assembly 410,420,430,440,114 stored in system 100 is just maintained, this assembly 410,420,430,440,114 and be mapped to this assembly 410,420,430,440,114 or depend on that any assembly 410,420,430,440,114 of this assembly 410,420,430,440,114 is inactive.Inactive assembly 410,420,430,440,114 can not be accessed by the user, and the assembly 410,420,430,440,114 being active can be accessed by the user, thus allowing user access the data being stored on this assembly 410,420,430,440,114 or be stored in the data in the storage device 114 being mapped to this assembly 410,420,430,440,114.As mentioned previously, during inactive state, user cannot access the storage device 114 being associated with the maintenance unit 402 experiencing maintenance；Thus, user cannot access file, and (that is, chunk 330, it includes bar tape copy 330nkAnd data chunks 330ndkWith code chunk 330ncm)。
In some implementations, processor 202 such as limits the number of the chunk 330 of the storage device 114 being distributed to any one maintenance unit 402 based on the mapping of assembly 410,420,430,440,114.Therefore, if rank 1 maintenance unit 402 is inactive, then processor 202 keeps the accessibility to file 310 (or band 320), although some chunks 330 are probably inaccessible.In some instances, for each file 310 (or band 320), the maximum number of the chunk 330 in any storage device 114 can being placed in single maintenance unit 402 determined by processor 202, so that if maintenance unit 402 experience being associated for the storage device 114 of the chunk 330 of file 310 with storage is safeguarded, processor 202 still can fetch file 310.Although it is unavailable that the maximum number of chunk 330 ensure that some chunks 330 are likely to, processor 202 also is able to reconstruct file 310.In some instances, the maximum number of chunk 330 is set to less threshold value to adapt to any system failure, remains able to reconstruct file 310 according to chunk 330 simultaneously.When chunk 330 is placed in storage device 114 by processor 202, processor 202 guarantees in band 320, and when single maintenance unit 402 experience is safeguarded, no more than the maximum number of chunk 330 is inactive.
With reference to Fig. 5 to Fig. 7 B, in some implementations, the chunk 330 distribution between storage device 114 determined by processor 202.In some instances, processor 202 is made to storage device 114 first according to the available pool of storage device 140 and is randomly choosed 150 to store the chunk 330 of file 310.Processor 202 selects and equal numbers of multiple storage devices 114 (such as, the storage device 114S of selection) of the chunk 330 in band 320.Next, processor 202 determines that whether the selection 150 to the storage device 114S selected can keep the accessibility (that is, the chunk 330 of file 310 is available) of file 310 at one or more (or threshold number) maintenance unit 402 time inactive.Randomly choose 150 and there is the target allowing reconstruct band 320 when occurring to safeguard in safeguarding assembly 410,420,430,440,114.
With reference to Fig. 5 A and Fig. 5 B, in some instances, when processor 202 determine to the storage device 114S selected first randomly choose the 150a accessibility that cannot keep file 310 when one or more (or threshold number) maintenance unit 402 is inactive time, processor 202 is determined and is randomly choosed 150b to the second of the storage device 114S of the selection of the number matches of the chunk 330 of file 310.Then, processor 202 determines that to the storage device 114S selected second randomly chooses 150b and whether can keep the accessibility of file 310 time inactive at one or more (or threshold number) maintenance unit 402.If processor 202 determines that second randomly chooses 150a and cannot keep the accessibility of file 310 when one or more (or threshold number) maintenance unit 402 is inactive, then processor 202 continues to make the storage device 114S selected is randomly choosed 150n, until processor 202 be determined to keep the accessibility of file 310 the storage device 114S selected randomly choosed 150n.
With reference to Fig. 6 A and Fig. 6 B, in some implementations, when processor 202 determine to the storage device 114S selected first randomly choose the 150a accessibility that cannot keep file 310 when one or more (or threshold number) maintenance unit 402 is inactive time, processor 202 is by adding the one or more storage device 114S randomly choosed and removing the different storage device 114S of corresponding number and revise to the storage device 114S selected first and randomly choose 150a.Processor 202 is it is then determined that first randomly choosing 150a and whether can keep the accessibility of file 310 time inactive at one or more (or threshold number) maintenance unit 402 after updating.If processor 202 determine renewal after first randomly choose 150a and cannot keep the accessibility of band 320 when one or more (or threshold number) maintenance unit 402 is inactive, then processor 202 updates the selection 150a to the storage device 114S selected by adding and removing the one or more storage device 114S randomly choosed.Processor 202 continues to update storage device 114 is randomly choosed 150a, until processor 202 determines that the storage device 114S of selection can keep the accessibility of band 320 during the maintenance of distributed memory system 100.Once processor 202 is made that this is determined, processor 202 moves to next band 320 (or file 310) to determine the distribution of next band 320.
In some implementations, by using probability sampling, simple sampling, stratified sampling, cluster sampling or its combination to determine, storage device 114S's to selection randomly chooses 150 to processor 202.In probability is sampled, each unit in colony has the selected in the sample chance more than zero, and this probability can be determined precisely.Probability sampling is by being weighted providing the unbiased esti-mator to colony's sum to being sampled unit according to the probability selection being sampled unit.In the simple random sampling (SRS) of the sample to given number, all subsets of sample range are given equal probability.Additionally, any given to element have such to identical choice (and being similar for triplet, tetrad etc.) with any other.SRS minimizes the deviation and simplifies the analysis to result.The variance between result in sample is the good indicator of the variance in colony, so that be easier to the precision of estimated result.In stratified sampling, colony includes multiple different classification, and wherein scope is organized as the level of separation according to these classifications.Each level is sampled as independent sub-group, is therefrom randomly chosen independent element.Stratified sampling has the several advantages being better than other method of samplings.Stratified sampling focuses on important sub-group and ignores incoherent sub-group, this allows to use different Sampling techniques for different sub-groups, improve the precision and efficiency estimated, and by allowing the bigger equilibrium of the statistical power of the test to the difference between level from the great level sampling equal number of change in size.Cluster sampling allows to select according to the answerer in cluster that is geographical or that be grouped according to the time period.Cluster sampling does not require to list the sample range of all elements in target group；And the Element-Level scope only for the cluster selected creates that is available with selects cluster from cluster level scope.
With reference to Fig. 7 A and Fig. 7 B, in some implementations, the number of the chunk 330 in band 320 determined by processor 202.Then processor 220 selects the table 162 with the selection of equal numbers of continuous multiple storage device 114a-114n of the chunk 330 with file from the order cycle table 160 of the storage device 114 of distributed memory system 100, and this order cycle table 160 starts at the first storage device 114a place.Table 160 can be stored in the non-transitory memory 204 of processor 202.Whether processor 202 it is then determined that jointly cannot keep the accessibility of file 310 (that is, band 320) at one or more (or threshold number) maintenance unit 402 from the storage device 114a-114n of the selection of the table 162 selected time inactive.If processor 202 determines that the storage device 114a-114n of selection cannot keep the accessibility of file 310 (or band 320) jointly at one or more (or threshold number) maintenance unit 402 time inactive, then processor 202 selects the table 162 with another selection of equal numbers of continuous multiple storage device 114a-n of the chunk 330 with band 320 or file 310 from order cycle table 160.In some instances, when the storage device 114a-114n of the table 162 of the selection accessibility that jointly cannot keep file 310 (or band 320) determined by processor 202, processor 202 moves to the second storage device 114 (n+1) after the first storage device 114n in order cycle table 160.In other examples, processor 202 moves down predetermined number destination locations along order cycle table 160.In some implementations, the order cycle table 160 of the storage device 114 of storage system 100 determined by processor 202, and wherein the Coutinuous store equipment 114 of the adjacent storage device 114 on order cycle table or threshold number is associated from different maintenance units 402.Additionally or alternatively, the order cycle table 160 of the storage device 114 of storage system 100 determined by processor 202, wherein in each comfortable diverse geographic location of the Coutinuous store equipment 114 of the adjacent storage device 114 on order cycle table 160 or threshold number.In some instances, the storage device 114 on order cycle table 160 is arranged to different maintenance unit 402 and sequentially causes the dispersion of data along ordered list 160.Such as, as illustrated in Figure 4 A, table is likely to sequentially not comprise the storage device 114 depending on same bus duct 430a.On the contrary, the storage device 114 in succession of two on table 160 from different maintenance units 402 to guarantee that data accessibility is kept.
With reference to Fig. 8, in some implementations, a kind of method 800 distributing data in distributed memory system includes receiving file 310 802 and and uses the computer processor 202 communicated with non-transitory memory 204 that the file received is divided into 804 chunks 330 in non-transitory memory 204.The method 800 also includes safeguarding that chunk 330 is distributed to the storage device 114 of distributed memory system 100 by level 400 based on distributed memory system 100.Safeguard that level 400 includes the maintenance unit 402 each with active state and inactive state.It addition, each storage device 114 is associated with maintenance unit 402.Chunk 330 is distributed to keep the accessibility of file 310 (or band 320) when maintenance unit 402 is inactive across multiple maintenance units 402.In some instances, method 800 includes the number that limits the chunk 330 of the storage device 114 being distributed to any one maintenance unit 402.
In some implementations, method 800 also includes being determined by the first of the storage device 114S of the selection of the number matches of the chunk 330 to file 310 and randomly chooses 150a and determine that whether the selection 150a to the storage device 114S selected can keep the accessibility of file 310 (or band 330) to determine the chunk 330 distribution between storage device 114 at one or more (or threshold number) maintenance unit 402 time inactive.In some instances, when the first of the storage device 114S selected being randomly choosed the 150a accessibility that cannot keep file 310 (or band 320) when one or more (or threshold number) maintenance unit 402 is inactive, method 800 also includes determining and randomly chooses 150b to the second of the storage device 114S of the selection of the number matches of the chunk 330 of file 310 (or band 320), or revise to storage device 114S first randomly choose 150a by adding and removing one or more storage device 114 randomly choosed.Method 800 can also include using simple sampling, probability sampling, stratified sampling or cluster sampling (previously described) to determine storage device 114 is randomly choosed 150.In some instances, method 800 determines the three, the four, the 5th to the storage device 114S selected ... waits and randomly chooses, until the selection of storage device 114 is randomly choosed 150 accessibilities that can keep file 310 (or band 330) when one or more or threshold number maintenance unit 402 is inactive.
In some implementations, method 800 also includes by selecting to have from the order cycle table 160 of the storage device 114 of distributed memory system 100 and the chunk 330 distribution between storage device 114 determined by the table 162 of equal numbers of continuous multiple storage device 114a-114n of chunk 330 of file 310.When the storage device 114 selected cannot keep the accessibility of file 310 jointly when one or more (or threshold number) maintenance unit 402 is inactive, method 800 also include selecting having from order cycle table 160 and another table 162 of equal numbers of continuous multiple storage device 114a-114n of chunk 330 of file 310 (or band 320).Additionally or alternatively, method 800 also includes the order cycle table 160 determining the storage device 114 of distributed memory system 100, and wherein the adjacent storage device 114 on order cycle table 160 is associated from different maintenance units 402.In some instances, the Coutinuous store equipment 114 of the threshold number on order cycle table 160 is each associated from different maintenance units 402 or in each comfortable diverse geographic location.
In some implementations, method 800 also includes (such as, use computer processor 202) determine the maintenance level 400 of maintenance unit 402, wherein safeguard that level 400 has levels of maintenance 401 (such as, rank 1401a rank 5401e) and each levels of maintenance 401 includes one or more maintenance unit 402.Method 800 also includes each maintenance unit 402 is mapped at least one storage device 114.Each maintenance unit 402 includes the storage device 114 powered by single power distribution unit or single power source bus groove 430.
Method 800 can also include the file 310 received is divided into band 320a-320n.Each file 310 includes replicating code 311 or error correcting code 313.When file 310 includes replicating code 311, method 800 includes at least one band 320a-320n copies as duplication chunk 330.When file 310 includes error correcting code 313, method 800 includes at least one band 320a-320n is divided into data chunks 330ndkWith code chunk 330ncm.Method 800 can also include and distribute data chunks 330nd between storage device 114kWith code chunk 330ncmDifferently between storage device 114, distribution replicates chunk 330.
The various implementations of system and method described here can realize with Fundamental Digital Circuit, integrated circuit, specially designed ASIC (special IC), computer hardware, firmware, software and/or its combination.These various implementations can include can performing on the programmable system include at least one programmable processor and/or implementation in one or more computer program explainable, at least one programmable processor can be special or general, couple to receive data and instruction from storage system, at least one input equipment and at least one outut device, and transmit data and instruction to storage system, at least one input equipment and at least one outut device.
These computer programs (are also referred to as program, software, software application or code) and include the machine instruction for programmable processor, and level process and/or OO programming language can be used to realize, and/or realize by compilation/machine language.As used herein, term " machine readable media " and " computer-readable medium " refer to for providing machine instruction and/or any computer program of data, device and/or equipment (such as to programmable processor, disk, CD, memorizer, PLD (PLD)), including the machine readable media receiving the machine instruction as machine-readable signal.Term " machine-readable signal " refers to any signal for providing machine instruction and/or data to programmable processor.
Theme described in this specification and the implementation of feature operation can with Fundamental Digital Circuits or with computer software, firmware or hardware (including the structure disclosed in this specification and structural equivalents thereof) or realize with the combination of one or more of which.Additionally, theme described in this specification may be implemented as one or more computer program, i.e. one or more modules of the computer program instructions encoded on a computer-readable medium, perform for data processing equipment, or for controlling the operation of data processing equipment.Computer-readable medium can be machine readable storage device, machine readable storage substrate, memory devices, affect the composition of the material of machine readable transmitting signal or the combination of one or more of which.Term " data processing equipment ", " computing equipment " and " computation processor " is contained for processing all devices of data, equipment and machine, for example includes programmable processor, computer or multiple processor or computer.In addition to hardware, described device can also include the code of the running environment of the discussed computer program of establishment, for instance, constitute the code of the combination of processor firmware, protocol stack, data base management system, operating system or one or more of which.The signal that transmitting signal is an artificially generated, for instance the signal of telecommunication, optical signal or the electromagnetic signal that machine generates, this signal is generated information is encoded, in order to be sent to suitable acceptor device.
Computer program (is also referred to as application, program, software, software application, script or code) and can write by any form of programming language including compiling or interpretative code, and it can be disposed by arbitrary form, including as independent program or as module, assembly, subroutine or applicable other unit used in a computing environment.Computer program not necessarily corresponds to the file in file system.Program can be stored in the part of the file preserving other program or data (such as, it is stored in the one or more scripts in marking language document) in, it is stored in the single file being exclusively used in discussed program, or it is stored in multiple coordinated files (such as, storing the file of one or more module, subprogram or code section).Computer program can be deployed as and performs on a computer or be positioned at the three unities or across the distribution of multiple places and by performing on multiple computers of interconnection of telecommunication network.
Process described in this specification and logic flow can be performed to perform function by being operated and generate output to input data by the one or more programmable calculators performing one or more computer programs.Process and logic flow also can by dedicated logic circuits, for instance, FPGA (field programmable gate array) or ASIC (special IC) performs, and device also can be implemented as dedicated logic circuit, for instance, FPGA or ASIC.
The processor being suitably executed computer program includes, for instance, general and special microprocessor, and any one or more processors of the digital computer of any kind.In general, processor will from read only memory or random access memory or both receive instruction and data.The necessary element of computer is performed for the processor of instruction and for storing one or more memory devices of instruction and data.As, computer also will include the one or more mass memory units for storing data, or be operably coupled to these one or more mass memory units with receive from it data or to its transmission data or both, described mass memory unit is such as disk, magneto-optic disk or CD.But, computer need not have such equipment.Additionally, computer can be embedded in another equipment, this another equipment is such as mobile phone, personal digital assistant (PDA), Mobile audio player, global positioning system (GPS) receptor, names just a few.It is suitable for storage computer program instructions and the computer-readable medium of data includes the nonvolatile memory of form of ownership, medium and memory devices, for example include semiconductor memory devices, for instance, EPROM, EEPROM and flash memory device；Disk, for instance, internal hard drive or removable dish；Magneto-optic disk；And CDROM and DVD-ROM dish.Processor and memorizer can by supplemented or be incorporated in dedicated logic circuit.
Mutual in order to what provide with user, one or more aspects of the disclosure having display device and can have on the computer of keyboard and pointer device alternatively and be implemented, described display device is such as CRT (cathode ray tube), LCD (liquid crystal display) monitor or touch screen, for displaying to the user that information, described pointer device is such as mouse or trace ball, and user can pass through described pointer device provides input to computer.It is mutual that the equipment of other kind can also be used for providing with user；Such as, it is provided that can be any form of sensory feedback to the feedback of user, for instance, visual feedback, auditory feedback or sense of touch feedback；And the input from user can receive by the arbitrary form including acoustics, voice or sense of touch input.Additionally, computer can send document and mutual with user from this equipment reception document by the equipment used to user；Such as, mutual with user by sending webpage in response to the request received from the web browser on the client device of user to this web browser.
One or more aspects of the disclosure can realize in computing systems, described computing system includes such as aft-end assembly as data server, or the middleware component including such as application server, or including front end assemblies, such as, have by its user can the client computer of the graphical user interface mutual with the implementation of the theme described in this specification or web browser, or described computing system includes the combination in any of one or more such rear end, middleware or front end assemblies.The assembly of system can pass through the digital data communications (such as, communication network) of arbitrary form or medium and interconnect.The example of communication network includes LAN (" LAN ") and wide area network (" WAN "), the Internet (such as, the Internet), and point to point network (such as, self-organizing point to point network).
Computing system can include client and server.Client and server is generally remote from each other and mutual usually by communication network.The relation of client and server is by means of running on the respective computers and mutually having the computer program of client-server relation and produce.In some implementations, data (such as, html page) are transferred to client device (such as, for the user video data mutual with client device, and receive the user from this user input) by server.Data (result that such as, user is mutual) from client device, in the generation of this client device place can be received at server place.
Although this specification comprises many details, but these are not necessarily to be construed as scope of this disclosure or may call for the restriction of scope of content of protection, but should be interpreted the description of feature to the specific implementation specific to the disclosure.Some feature in the context of implementation separately described in this manual also can be combined to achieve in single implementation.Otherwise, also can be implemented separately in multiple implementations or realize with the sub-portfolio of any appropriate in the various features described in the context of single implementation.In addition; although feature is likely to be described above as with some combinative movement; even it is initially required to be such protection; but the one or more features from claimed combination can be left out in some cases from this combination, and the combination claimed can be directed to the variant of sub-portfolio or sub-portfolio.
Similarly, although depicting operation by particular order in the drawings, but this is not construed as requiring that these operations perform by the particular order illustrated or by consecutive order for realizing desired result, or requires that the operation of all diagrams is all performed.In some cases, multitask and what parallel processing may be advantageous in that.In addition, in above-described embodiment, the separation of various system components is understood not to be desirable that such separation in all embodiments, and it will be understood that described program assembly and system generally can be integrated in single software product or are encapsulated in multiple software product jointly.
Some implementations are described.It will nevertheless be understood that, when without departing from the spirit and scope of the disclosure, various modifications may be made.Therefore, other implementations are in the scope of accompanying claims.Such as, the action described in the claims can perform in different order and still realize desired result.
Claims (30)
1. a method for distribution data in distributed memory system (100), described method includes:
File (310) is received in non-transitory memory (204)；
Use the computer processor (202) communicated with described non-transitory memory (204) that the described file (310) received is divided into chunk (330)；And
Based on the maintenance level (400) of described distributed memory system (100), described chunk (330) is distributed to the storage device (114) of described distributed memory system (100), the described maintenance unit (402) safeguarding that level (400) includes having active state and inactive state, each storage device (114) is associated with maintenance unit (402), the accessibility that chunk (330) is distributed across multiple maintenance units (402) to keep described file (310) when maintenance unit (402) is inactive.
2. method according to claim 1, also includes the number of chunk (330) that restriction is distributed to the storage device (114) of any one maintenance unit (402).
3. method according to claim 1, also includes determining the described chunk (330) distribution between described storage device (114) by following:
Determine and randomly choose (150a) to the first of the storage device (114) of the number matches of the chunk (330) of described file (310)；And
Determine the accessibility choosing whether to keep described file (310) when one or more maintenance units (402) are inactive to storage device (114).
4. method according to claim 3, wherein when described the first of storage device (114) being randomly choosed the accessibility that (150a) cannot keep described file (310) when one or more maintenance units (402) are inactive, it is determined that randomly choose (150b) to the second of the storage device (114) of the described number matches of the chunk of described file (310) (330).
5. method according to claim 3, wherein when described the first of storage device (114) being randomly choosed the accessibility that (150a) cannot keep described file (310) when one or more maintenance units (402) are inactive, revising to storage device (114) described first randomly choose (150a) by adding and removing one or more storage device (114) randomly choosed.
6. method according to claim 3, uses simple sampling, probability sampling, stratified sampling or cluster sampling to determine that to storage device (114) described first randomly chooses (150a).
7. method according to claim 1, also includes by determining the described chunk (330) distribution between described storage device (114) from equal numbers of continuous multiple storage devices (114) of the chunk (330) of the selection of the order cycle table (160) of the described storage device (114) of described distributed memory system (100) and described file (310).
8. method according to claim 7, also include, when the described storage device (114) selected cannot keep the described accessibility of described file (310) jointly when one or more maintenance units (402) are inactive, from described equal numbers of other continuous multiple storage devices (114) of the selection of described order cycle table (160) with the chunk (330) of described file (310).
9. method according to claim 7, also including the described order cycle table (160) determining the storage device (114) of described distributed memory system (100), the adjacent storage device on described order cycle table (160) is associated from different maintenance units (402).
10. method according to claim 9, the Coutinuous store equipment of the threshold number on wherein said order cycle table (160) is each associated from different maintenance units (402).
11. method according to claim 9, in each comfortable diverse geographic location of Coutinuous store equipment (114) of the threshold number on wherein said order cycle table (160).
12. method according to claim 1, also include:
Described computer processor (202) is used to determine the maintenance level (400) of maintenance unit (402), described safeguarding that level (400) has levels of maintenance (401), each levels of maintenance (401) includes one or more maintenance unit (402)；And
Each maintenance unit (402) is mapped at least one storage device (114).
13. method according to claim 12, wherein each maintenance unit (402) includes the storage device (114) powered by single power distribution unit or single power source bus groove (430).
14. method according to claim 1, also include:
The described file (310) received is divided into band (320), and each file (310) includes replicating code (311) and/or error correcting code (313)；
When described file (310) includes replicating code (311), at least one band (320) is copied as duplication chunk (330)；And
When described file (310) includes error correcting code (313), at least one band (320) is divided into data chunks (330ndk) and code chunk (330ncm)。
15. method according to claim 14, also include and between described storage device (114), distribute described data chunks (330ndk) and described code chunk (330ncm) differently between described storage device (114), distribution replicates chunk (330).
16. for a system for distribution data in distributed memory system (100), described system includes:
Non-transitory memory (204), described non-transitory memory (204) receives file (310)；
Computer processor (202), described computer processor (202) communicates with described non-transitory memory (204), and the described file (310) received is divided into chunk (330) by described computer processor (202)；And
Storage device (114), described storage device (114) communicates with described computer processor (202) and described non-transitory memory (204), described chunk (330) is stored in described storage device (114) based on the maintenance level (400) of described distributed memory system (100) by described computer processor (202), the described maintenance unit (402) safeguarding that level (400) includes having active state and inactive state, each storage device (114) is associated with maintenance unit (402), described computer processor (202) distributes described chunk (330) to keep the accessibility of described file (310) when maintenance unit (402) is inactive across multiple maintenance units (402).
17. system according to claim 16, wherein said computer processor (202) restriction is distributed to the number of the chunk (330) of the storage device (114) of any one maintenance unit (402).
18. system according to claim 16, wherein said computer processor (202) determines the described chunk (330) distribution between described storage device (114) by following:
Determine and randomly choose (150a) to the first of the storage device (114) of the number matches of the chunk (330) of described file (310)；And
Determine the accessibility choosing whether to keep described file (310) when one or more maintenance units (402) are inactive to storage device (114).
19. system according to claim 18, wherein when described the first of storage device (114) randomly chooses the accessibility that (150a) cannot keep described file (310) when one or more maintenance units (402) are inactive, described computer processor (202) is determined and is randomly choosed (150b) to the second of the storage device (114) of the described number matches of the chunk of described file (310) (330).
20. system according to claim 18, wherein when described the first of storage device (114) randomly chooses the accessibility that (150a) cannot keep described file (310) when one or more maintenance units (402) are inactive, described computer processor (202) is revised to storage device (114) described first randomly choose (150a) by being added and removing one or more storage device (114) randomly choosed.
21. system according to claim 18, wherein said computer processor (202) uses simple sampling, probability sampling, stratified sampling or cluster sampling to determine that to storage device (114) described first randomly chooses (150a).
22. system according to claim 16, wherein said computer processor (202) is by determining the described chunk (330) distribution between described storage device (114) from equal numbers of continuous multiple storage devices (114) of the chunk (330) of the selection of the order cycle table (160) of the described storage device (114) of described distributed memory system (100) and described file (310).
23. system according to claim 22, wherein when the described storage device (114) selected cannot keep the described accessibility of described file (310) jointly when one or more maintenance units (402) are inactive, described computer processor (202) selects described equal numbers of other continuous multiple storage devices (114) of chunk (330) with described file (310) from described order cycle table (160).
24. system according to claim 22, wherein said computer processor (202) determines the described order cycle table (160) of the storage device (114) of described distributed memory system (100), and the adjacent storage device on described order cycle table (160) is associated from different maintenance units (402).
25. system according to claim 24, the Coutinuous store equipment of the threshold number on wherein said order cycle table (160) is each associated from different maintenance units (402).
26. system according to claim 24, in each comfortable diverse geographic location of Coutinuous store equipment (114) of the threshold number on wherein said order cycle table (160).
27. system according to claim 16, wherein said computer processor (202):
Determine the maintenance level (400) of maintenance unit (402), described safeguarding that level (400) has levels of maintenance (401), each levels of maintenance (401) includes one or more maintenance unit (402)；And
Each maintenance unit (402) is mapped at least one storage device (114).
28. system according to claim 27, wherein each maintenance unit (402) includes the storage device (114) powered by single power distribution unit or single power source bus groove (430).
29. system according to claim 16, wherein said computer processor (202):
The described file (310) received is divided into band (320), and each file (310) includes replicating code (311) and/or error correcting code (313)；
When described file (310) includes replicating code (311), at least one band (320) is copied as duplication chunk (330)；And
When described file (310) includes error correcting code (313), at least one band (320) is divided into data chunks (330ndk) and code chunk (330ncm)。
30. system according to claim 29, wherein said computer processor (202) and distribute described data chunks (330nd between described storage device (114)k) and described code chunk (330ncm) between described storage device (114), differently replicate chunk (330).
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/097,380 US9367562B2 (en) | 2013-12-05 | 2013-12-05 | Distributing data on distributed storage systems |
US14/097,380 | 2013-12-05 | ||
PCT/US2014/057209 WO2015084471A1 (en) | 2013-12-05 | 2014-09-24 | Distributing data on distributed storage systems |
Publications (2)
Publication Number | Publication Date |
---|---|
CN105765554A true CN105765554A (en) | 2016-07-13 |
CN105765554B CN105765554B (en) | 2019-01-08 |
Family
ID=53271375
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201480063767.7A Active CN105765554B (en) | 2013-12-05 | 2014-09-24 | Distribute data on distributed memory system |
Country Status (8)
Country | Link |
---|---|
US (6) | US9367562B2 (en) |
EP (1) | EP3077917B1 (en) |
JP (2) | JP6507167B2 (en) |
CN (1) | CN105765554B (en) |
AU (1) | AU2014357640B2 (en) |
CA (3) | CA2931665C (en) |
DE (1) | DE202014010909U1 (en) |
WO (1) | WO2015084471A1 (en) |
Cited By (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN107688493A (en) * | 2016-08-05 | 2018-02-13 | 阿里巴巴集团控股有限公司 | Train the method, apparatus and system of deep neural network |
CN109561153A (en) * | 2018-12-17 | 2019-04-02 | 郑州云海信息技术有限公司 | Distributed memory system and business switch method, device, equipment, storage medium |
CN110109889A (en) * | 2019-05-09 | 2019-08-09 | 重庆大学 | A kind of distributed memory file management system |
CN110580204A (en) * | 2018-06-08 | 2019-12-17 | 三星电子株式会社 | data storage device and data storage system |
Families Citing this family (16)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9367562B2 (en) * | 2013-12-05 | 2016-06-14 | Google Inc. | Distributing data on distributed storage systems |
US10762069B2 (en) * | 2015-09-30 | 2020-09-01 | Pure Storage, Inc. | Mechanism for a system where data and metadata are located closely together |
US10379742B2 (en) * | 2015-12-28 | 2019-08-13 | Netapp, Inc. | Storage zone set membership |
US10514984B2 (en) | 2016-02-26 | 2019-12-24 | Netapp, Inc. | Risk based rebuild of data objects in an erasure coded storage system |
US10055317B2 (en) | 2016-03-22 | 2018-08-21 | Netapp, Inc. | Deferred, bulk maintenance in a distributed storage system |
US10116745B2 (en) | 2016-03-28 | 2018-10-30 | Samsung Electronics Co., Ltd. | Automatic client-server role detection among data storage systems in a distributed data store |
CN105959350B (en) * | 2016-04-22 | 2018-11-23 | 深圳市永兴元科技股份有限公司 | distributed data storage method and device |
CN105847279A (en) * | 2016-05-03 | 2016-08-10 | 深圳市永兴元科技有限公司 | Distributed data processing method and data center |
US10691557B1 (en) * | 2016-06-24 | 2020-06-23 | EMC IP Holding Company LLC | Backup file recovery from multiple data sources |
US9952798B2 (en) | 2016-08-12 | 2018-04-24 | Google Inc. | Repartitioning data in a distributed computing system |
CN109564502B (en) * | 2016-08-19 | 2020-12-08 | 华为技术有限公司 | Processing method and device applied to access request in storage device |
US10509708B2 (en) * | 2017-06-13 | 2019-12-17 | Vmware, Inc. | Code block resynchronization for distributed multi-mirror erasure coding system |
CN107967211A (en) * | 2017-12-05 | 2018-04-27 | 郑州云海信息技术有限公司 | A kind of storage device code distribution method, system, device and readable storage medium storing program for executing |
US11341138B2 (en) * | 2017-12-06 | 2022-05-24 | International Business Machines Corporation | Method and system for query performance prediction |
JP2019194780A (en) | 2018-05-01 | 2019-11-07 | 富士通株式会社 | Information processing apparatus, data management program, and data management method |
US11740899B2 (en) * | 2021-08-31 | 2023-08-29 | Micron Technology, Inc. | In-memory associative processing system |
Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20070022087A1 (en) * | 2005-07-25 | 2007-01-25 | Parascale, Inc. | Scalable clustered storage system |
CN102414692A (en) * | 2009-04-24 | 2012-04-11 | 微软公司 | Dynamic placement of replica data |
JP2013025742A (en) * | 2011-07-26 | 2013-02-04 | Nippon Telegr & Teleph Corp <Ntt> | Distributed file management device, distributed file management method and program |
US20130179490A1 (en) * | 2012-01-11 | 2013-07-11 | Alcatel-Lucent Usa, Inc. | Reducing Latency and Cost in Resilient Cloud File Systems |
Family Cites Families (56)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6405284B1 (en) * | 1998-10-23 | 2002-06-11 | Oracle Corporation | Distributing data across multiple data storage devices in a data storage system |
US6553389B1 (en) * | 1999-09-13 | 2003-04-22 | Hewlett-Packard Company | Resource availability determination mechanism for distributed data storage system |
US20010044879A1 (en) * | 2000-02-18 | 2001-11-22 | Moulton Gregory Hagan | System and method for distributed management of data storage |
TWI222020B (en) * | 2000-10-19 | 2004-10-11 | Wistron Corp | Method for installing and pre-setup of software |
US7418620B1 (en) * | 2001-02-16 | 2008-08-26 | Swsoft Holdings, Ltd. | Fault tolerant distributed storage method and controller using (N,K) algorithms |
US6662198B2 (en) * | 2001-08-30 | 2003-12-09 | Zoteca Inc. | Method and system for asynchronous transmission, backup, distribution of data and file sharing |
US20030187853A1 (en) * | 2002-01-24 | 2003-10-02 | Hensley Roy Austin | Distributed data storage system and method |
US20040088380A1 (en) * | 2002-03-12 | 2004-05-06 | Chung Randall M. | Splitting and redundant storage on multiple servers |
US7159150B2 (en) * | 2002-12-31 | 2007-01-02 | International Business Machines Corporation | Distributed storage system capable of restoring data in case of a storage failure |
US7831641B2 (en) * | 2003-04-24 | 2010-11-09 | Neopath Networks, Inc. | Large file support for a network file server |
US7568034B1 (en) * | 2003-07-03 | 2009-07-28 | Google Inc. | System and method for data distribution |
US7188118B2 (en) * | 2003-11-26 | 2007-03-06 | Veritas Operating Corporation | System and method for detecting file content similarity within a file system |
US7165059B1 (en) * | 2003-12-23 | 2007-01-16 | Veritas Operating Corporation | Partial file migration mechanism |
US7536693B1 (en) * | 2004-06-30 | 2009-05-19 | Sun Microsystems, Inc. | Method for load spreading of requests in a distributed data storage system |
US8266237B2 (en) | 2005-04-20 | 2012-09-11 | Microsoft Corporation | Systems and methods for providing distributed, decentralized data storage and retrieval |
US7636767B2 (en) * | 2005-11-29 | 2009-12-22 | Cisco Technology, Inc. | Method and apparatus for reducing network traffic over low bandwidth links |
US8589574B1 (en) * | 2005-12-29 | 2013-11-19 | Amazon Technologies, Inc. | Dynamic application instance discovery and state management within a distributed system |
US7840618B2 (en) * | 2006-01-03 | 2010-11-23 | Nec Laboratories America, Inc. | Wide area networked file system |
US20070214314A1 (en) * | 2006-03-07 | 2007-09-13 | Reuter James M | Methods and systems for hierarchical management of distributed data |
US7711711B1 (en) * | 2006-03-29 | 2010-05-04 | Emc Corporation | Networked storage system employing information lifecycle management in conjunction with a distributed global file system |
GB2446199A (en) * | 2006-12-01 | 2008-08-06 | David Irvine | Secure, decentralised and anonymous peer-to-peer network |
JP5320678B2 (en) * | 2007-02-20 | 2013-10-23 | 日本電気株式会社 | Data distribution storage system, data distribution method, apparatus used therefor, and program thereof |
US7930611B2 (en) | 2007-03-09 | 2011-04-19 | Microsoft Corporation | Erasure-resilient codes having multiple protection groups |
US20080270436A1 (en) * | 2007-04-27 | 2008-10-30 | Fineberg Samuel A | Storing chunks within a file system |
US8930651B2 (en) * | 2007-10-05 | 2015-01-06 | Imation Corp. | Archiving system with partitions of individual archives |
US8140787B2 (en) * | 2007-10-05 | 2012-03-20 | Imation Corp. | Methods for implementation of an active archive in an archiving system and managing the data in the active archive |
US7962452B2 (en) * | 2007-12-28 | 2011-06-14 | International Business Machines Corporation | Data deduplication by separating data from meta data |
JP5236352B2 (en) | 2008-05-15 | 2013-07-17 | 株式会社日立製作所 | Application distribution control system, application distribution control method, information processing apparatus, and client terminal |
US8346824B1 (en) * | 2008-05-21 | 2013-01-01 | Translattice, Inc. | Data distribution system |
US9098519B2 (en) * | 2008-09-16 | 2015-08-04 | File System Labs Llc | Methods and apparatus for distributed data storage |
US8135748B2 (en) * | 2009-04-10 | 2012-03-13 | PHD Virtual Technologies | Virtual machine data replication |
US20150006895A1 (en) * | 2009-06-01 | 2015-01-01 | Maidsafe Foundation | Distributed network system |
US20110029729A1 (en) * | 2009-07-30 | 2011-02-03 | Lsi Corporation | Erasure coded data storage capacity and power management |
KR100985169B1 (en) * | 2009-11-23 | 2010-10-05 | (주)피스페이스 | Apparatus and method for file deduplication in distributed storage system |
US8862617B2 (en) | 2010-02-09 | 2014-10-14 | Google Inc. | System and method for replicating objects in a distributed storage system |
US8341457B2 (en) | 2010-03-11 | 2012-12-25 | Lsi Corporation | System and method for optimizing redundancy restoration in distributed data layout environments |
US8799413B2 (en) * | 2010-05-03 | 2014-08-05 | Panzura, Inc. | Distributing data for a distributed filesystem across multiple cloud storage systems |
US9811532B2 (en) * | 2010-05-03 | 2017-11-07 | Panzura, Inc. | Executing a cloud command for a distributed filesystem |
US8224935B1 (en) | 2010-05-12 | 2012-07-17 | Symantec Corporation | Systems and methods for efficiently synchronizing configuration data within distributed computing systems |
GB2483088B (en) * | 2010-08-26 | 2012-07-18 | Giraffic Technologies Ltd | Asynchronous data streaming in a peer-to-peer network |
US8521703B2 (en) | 2010-11-05 | 2013-08-27 | International Business Machines Corporation | Multiple node/virtual input/output (I/O) server (VIOS) failure recovery in clustered partition mobility |
CN101996111A (en) * | 2010-11-30 | 2011-03-30 | 华为技术有限公司 | Switching method, device and distributed blade server system |
US8452819B1 (en) * | 2011-03-22 | 2013-05-28 | Amazon Technologies, Inc. | Methods and apparatus for optimizing resource utilization in distributed storage systems |
WO2012147087A1 (en) * | 2011-04-29 | 2012-11-01 | Tata Consultancy Services Limited | Archival storage and retrieval system |
EP2710510A4 (en) * | 2011-05-14 | 2015-05-06 | Bitcasa Inc | Cloud file system with server-side deduplication of user-agnostic encrypted files |
CN103620591A (en) * | 2011-06-14 | 2014-03-05 | 惠普发展公司，有限责任合伙企业 | Deduplication in distributed file systems |
US8615698B1 (en) | 2011-09-28 | 2013-12-24 | Google Inc. | Skewed orthogonal coding techniques |
US20130254248A1 (en) * | 2012-03-23 | 2013-09-26 | Alcatel-Lucent Usa Inc. | Method And Apparatus For A Distributed File System In A Cloud Network |
EP2660723A1 (en) * | 2012-05-03 | 2013-11-06 | Thomson Licensing | Method of data storing and maintenance in a distributed data storage system and corresponding device |
US9229657B1 (en) * | 2012-11-01 | 2016-01-05 | Quantcast Corporation | Redistributing data in a distributed storage system based on attributes of the data |
US9367562B2 (en) * | 2013-12-05 | 2016-06-14 | Google Inc. | Distributing data on distributed storage systems |
US9939865B2 (en) * | 2014-06-13 | 2018-04-10 | Seagate Technology Llc | Selective storage resource powering for data transfer management |
US9417955B2 (en) * | 2014-08-21 | 2016-08-16 | Datrium, Inc. | Data reconstruction in distributed data storage system with key-based addressing |
US9684569B2 (en) * | 2015-03-30 | 2017-06-20 | Western Digital Technologies, Inc. | Data deduplication using chunk files |
US20180107455A1 (en) * | 2015-12-29 | 2018-04-19 | Eyelead Software SA | Real-time collaborative development in a live programming system |
US20190044809A1 (en) * | 2017-08-30 | 2019-02-07 | Intel Corporation | Technologies for managing a flexible host interface of a network interface controller |
-
2013
- 2013-12-05 US US14/097,380 patent/US9367562B2/en active Active
-
2014
- 2014-09-24 WO PCT/US2014/057209 patent/WO2015084471A1/en active Application Filing
- 2014-09-24 CA CA2931665A patent/CA2931665C/en active Active
- 2014-09-24 JP JP2016536755A patent/JP6507167B2/en active Active
- 2014-09-24 CA CA3132946A patent/CA3132946C/en active Active
- 2014-09-24 DE DE202014010909.5U patent/DE202014010909U1/en active Active
- 2014-09-24 CA CA3014694A patent/CA3014694C/en active Active
- 2014-09-24 EP EP14868156.2A patent/EP3077917B1/en active Active
- 2014-09-24 AU AU2014357640A patent/AU2014357640B2/en active Active
- 2014-09-24 CN CN201480063767.7A patent/CN105765554B/en active Active
-
2016
- 2016-06-13 US US15/180,896 patent/US10318384B2/en active Active
-
2018
- 2018-02-08 JP JP2018021208A patent/JP6778704B2/en active Active
-
2019
- 2019-04-24 US US16/392,904 patent/US10678647B2/en active Active
-
2020
- 2020-05-21 US US16/880,513 patent/US11113150B2/en active Active
-
2021
- 2021-08-18 US US17/445,401 patent/US11620187B2/en active Active
-
2023
- 2023-03-28 US US18/191,371 patent/US20230236935A1/en active Pending
Patent Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20070022087A1 (en) * | 2005-07-25 | 2007-01-25 | Parascale, Inc. | Scalable clustered storage system |
CN102414692A (en) * | 2009-04-24 | 2012-04-11 | 微软公司 | Dynamic placement of replica data |
JP2013025742A (en) * | 2011-07-26 | 2013-02-04 | Nippon Telegr & Teleph Corp <Ntt> | Distributed file management device, distributed file management method and program |
US20130179490A1 (en) * | 2012-01-11 | 2013-07-11 | Alcatel-Lucent Usa, Inc. | Reducing Latency and Cost in Resilient Cloud File Systems |
Cited By (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN107688493A (en) * | 2016-08-05 | 2018-02-13 | 阿里巴巴集团控股有限公司 | Train the method, apparatus and system of deep neural network |
CN110580204A (en) * | 2018-06-08 | 2019-12-17 | 三星电子株式会社 | data storage device and data storage system |
US11449387B2 (en) | 2018-06-08 | 2022-09-20 | Samsung Electronics Co., Ltd. | System, device and method for storage device assisted low-bandwidth data repair |
US11940875B2 (en) | 2018-06-08 | 2024-03-26 | Samsung Electronics Co., Ltd. | System, device and method for storage device assisted low-bandwidth data repair |
CN109561153A (en) * | 2018-12-17 | 2019-04-02 | 郑州云海信息技术有限公司 | Distributed memory system and business switch method, device, equipment, storage medium |
CN110109889A (en) * | 2019-05-09 | 2019-08-09 | 重庆大学 | A kind of distributed memory file management system |
Also Published As
Publication number | Publication date |
---|---|
CA2931665A1 (en) | 2015-06-11 |
CA3132946A1 (en) | 2015-06-11 |
US20190250992A1 (en) | 2019-08-15 |
EP3077917A1 (en) | 2016-10-12 |
EP3077917B1 (en) | 2019-04-17 |
WO2015084471A1 (en) | 2015-06-11 |
JP6507167B2 (en) | 2019-04-24 |
CA3014694A1 (en) | 2015-06-11 |
US10678647B2 (en) | 2020-06-09 |
CA3132946C (en) | 2023-06-20 |
US11620187B2 (en) | 2023-04-04 |
US20230236935A1 (en) | 2023-07-27 |
EP3077917A4 (en) | 2017-05-10 |
US11113150B2 (en) | 2021-09-07 |
US20210382790A1 (en) | 2021-12-09 |
US20160299815A1 (en) | 2016-10-13 |
US10318384B2 (en) | 2019-06-11 |
US20200285541A1 (en) | 2020-09-10 |
JP2016541068A (en) | 2016-12-28 |
US9367562B2 (en) | 2016-06-14 |
CA3014694C (en) | 2020-09-29 |
JP2018110008A (en) | 2018-07-12 |
AU2014357640A1 (en) | 2016-04-21 |
CA2931665C (en) | 2022-10-18 |
JP6778704B2 (en) | 2020-11-04 |
DE202014010909U1 (en) | 2017-01-17 |
CN105765554B (en) | 2019-01-08 |
US20150161163A1 (en) | 2015-06-11 |
AU2014357640B2 (en) | 2016-12-08 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN105765554A (en) | Distributing data on distributed storage systems | |
US9823980B2 (en) | Prioritizing data reconstruction in distributed storage systems | |
CN106164899B (en) | It is read from the efficient data of distributed memory system | |
CN109074362B (en) | Splitting and range of motion in distributed systems | |
US20170357703A1 (en) | Dynamic partitioning techniques for data streams | |
US20180189367A1 (en) | Data stream ingestion and persistence techniques | |
US10635644B2 (en) | Partition-based data stream processing framework | |
US9052824B2 (en) | Content addressable stores based on sibling groups | |
CN107180113B (en) | Big data retrieval platform | |
CN105677251A (en) | Storage system based on Redis cluster | |
US20200142977A1 (en) | Distributed file system with thin arbiter node | |
US9898360B1 (en) | Preventing unnecessary data recovery | |
CN112115206A (en) | Method and device for processing object storage metadata | |
Tomsic et al. | Scaling geo-replicated databases to the MEC environment | |
US11757703B1 (en) | Access requests processing and failover handling across multiple fault tolerance zones | |
Hossein Mortazavi et al. | Data Management Systems for the Hierarchical Edge | |
CN117909408A (en) | Distributed storage method and system for geographic raster data |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
C06 | Publication | ||
PB01 | Publication | ||
C10 | Entry into substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
CB02 | Change of applicant information |
Address after: American CaliforniaApplicant after: Google limited liability companyAddress before: American CaliforniaApplicant before: Google Inc. |
|
CB02 | Change of applicant information | ||
GR01 | Patent grant | ||
GR01 | Patent grant |