US7961194B2 - Method of controlling in real time the switching of modes of parallel operation of a multi-mode parallel graphics processing subsystem embodied within a host computing system - Google Patents
Method of controlling in real time the switching of modes of parallel operation of a multi-mode parallel graphics processing subsystem embodied within a host computing system Download PDFInfo
- Publication number
- US7961194B2 US7961194B2 US11/897,536 US89753607A US7961194B2 US 7961194 B2 US7961194 B2 US 7961194B2 US 89753607 A US89753607 A US 89753607A US 7961194 B2 US7961194 B2 US 7961194B2
- Authority
- US
- United States
- Prior art keywords
- graphics
- mode
- data
- parallel
- module
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/10—Protocols in which an application is distributed across nodes in the network
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/50—Allocation of resources, e.g. of the central processing unit [CPU]
- G06F9/5005—Allocation of resources, e.g. of the central processing unit [CPU] to service a request
- G06F9/5027—Allocation of resources, e.g. of the central processing unit [CPU] to service a request the resource being a machine, e.g. CPUs, Servers, Terminals
- G06F9/5044—Allocation of resources, e.g. of the central processing unit [CPU] to service a request the resource being a machine, e.g. CPUs, Servers, Terminals considering hardware capabilities
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T1/00—General purpose image data processing
- G06T1/20—Processor architectures; Processor configuration, e.g. pipelining
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T15/00—3D [Three Dimensional] image rendering
- G06T15/005—General purpose rendering architectures
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2209/00—Indexing scheme relating to G06F9/00
- G06F2209/50—Indexing scheme relating to G06F9/50
- G06F2209/501—Performance criteria
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T2210/00—Indexing scheme for image generation or computer graphics
- G06T2210/52—Parallel processing
Definitions
- the present invention relates generally to the field of computer graphics rendering, and more particularly, ways of and means for improving the performance of parallel graphics rendering processes supported on multiple 3D graphics processing pipeline (GPPL) platforms associated with diverse types of computing machinery, including, but not limited, to PC-level computers, game console systems, graphics-supporting application servers, and the like.
- GPPL 3D graphics processing pipeline
- Object-Oriented Graphics Systems wherein 3D scenes are represented as a complex of geometric objects (primitives) in 3D continuous geometric space, and 2D views or images of such 3D scenes are computed using geometrical projection, ray tracing, and light scattering/reflection/absorption modeling techniques, typically based upon laws of physics
- VOXEL Volume Element Graphics Systems
- 3D scenes and objects are represented as a complex of voxels (x, y, z volume elements) represented in 3D Cartesian Space, and 2D views or images of such 3D voxel-based scenes are also computed using geometrical projection, ray tracing, and light scattering/reflection/absorption modeling techniques, again typically based upon laws of physics.
- 3D geometrical models In such graphics system design, “objects” within a 3D scene are represented by 3D geometrical models, and these geometrical models are typically constructed from continuous-type 3D geometric representations including, for example, 3D straight line segments, planar polygons, polyhedral, cubic polynomial curves, surfaces, volumes, circles, and quadratic objects such as spheres, cones, and cylinders (i.e. geometrical data and commands). These 3D geometrical representations are used to model various parts of the 3D scene or object, and are expressed in the form of mathematical functions evaluated over particular values of coordinates in continuous Cartesian space.
- the 3D geometrical representations of the 3D geometric model are stored in the format of a graphical display list (i.e. a structured collection of 2D and 3D geometric primitives).
- planar polygons mathematically described by a set of vertices, are the most popular form of 3D geometric representation.
- the 3D scene is graphically displayed (as a 2D view of the 3D geometrical model) along a particular viewing direction, by repeatedly scan-converting the stream of graphics commands and data (GCAD).
- the scan-conversion process can be viewed as a “computational geometry” process which involves the use of (i) a geometry processor (i.e. geometry processing subsystem or engine) as well as a pixel processor (i.e. pixel processing subsystem or engine) which together transform (i.e. project, shade and color) the graphics objects and bit-mapped textures, respectively, into an unstructured matrix of pixels.
- the composed set of pixel data is stored within a 2D frame buffer (i.e. Z buffer) before being transmitted to and displayed on the surface of a display screen.
- a video processor/engine refreshes the display screen using the pixel data stored in the 2D frame buffer.
- a typical PC based graphic architecture has an external graphics card 105 comprising a graphics processing unit (GPU) and video memory.
- the graphic card is connected to the display 106 on one side, and the CPU 101 through bus (e.g. PCI-Express) 107 and Memory Bridge 103 (termed also “chipset”, e.g. 975 by Intel), on the other side.
- bus e.g. PCI-Express
- Memory Bridge 103 Termed also “chipset”, e.g. 975 by Intel
- the host CPU program/memory space stores the graphics applications, the standard graphics library, and the vendor's GPU drivers.
- a typical prior art PC-based computing system employs a conventional graphics architecture employing a North memory bridge with an integrated graphics device (IGD) 103 .
- the IGD supports a single graphics pipeline process, and is operably coupled to a South bridge, via a PCI-express bus, for supporting the input/output ports of the system.
- the IGD includes a video engine, a 2D engine, a 3D engine, and a display engine.
- a prior art PC-based computing system employs a conventional Fusion-type CPU/GPU hybrid architecture, wherein a single GPU implemented on the same die as the CPU is used to support a graphics pipeline that drives an external display device.
- the motherboard supports the processor die, memory, a bridge with a display interface for connecting to a display device 106 , and a PCI-express bus.
- the processor die supports a CPU 1241 , a GPU 1242 , L2 cache, buffers, an Interconnect (e.g. crossbar switch), a hyper transport mechanism and a memory controller.
- Interconnect e.g. crossbar switch
- the process of rendering three successive frames by a single GPU is graphically illustrated. Notably, this graphical rendering process may be supported using any of the single GPU-based computing systems described above.
- the application assisted by the graphics library, creates a stream of graphics commands and data describing a 3D scene. The stream is then pipelined through the GPU's geometry and pixel subsystems so as to create a bitmap of pixels in the Frame Buffer, and finally a rendered image of the scene is displayed on a display screen.
- the generation of a sequence of successive frames produces a visual illusion of a dynamic picture.
- the structure of a GPU subsystem 124 on a graphics card or in an IGD comprises: a video memory which is external to GPU, and two 3D engines: (i) a transform bound geometry subsystem 224 for processing 3D graphics primitives; (ii) and a fill bound pixel subsystem 225 .
- the video memory shares its storage resources among geometry buffer 222 through which all geometric (i.e. polygonal) data is transferred, commands buffer, texture buffers 223 , and Frame Buffer 226 .
- the first potential bottleneck 221 stems from transferring data from CPU to GPU.
- Two other bottlenecks are video memory related: geometry data memory limits 222 , and texture data memory limits 223 .
- transform bound 224 in the geometry subsystem and fragment rendering 225 in pixel subsystem. These bottlenecks determine overall throughput. In general, the bottlenecks vary over the course of a graphics application.
- FIG. 2A there is shown an advanced chipset (e.g. Bearlake by Intel) having two buses 107 , 108 instead of one, and allowing the interconnection of two external graphics cards in parallel: primary card 105 and secondary card 104 , to share the computation load associated with the 3D graphics rendering process.
- the display 106 is attached to the primary card 105 . It is anticipated that even more advanced commercial chipsets with greater than two buses will appear in the future, allowing the interconnection of more than two graphic cards.
- the general software architecture of prior art graphic system 200 comprises: the graphics application 201 , standard graphics library 202 , and the vendor's GPU drivers ( 203 ).
- This graphic software environment resides in the “program space” of main memory 102 on the host computer system.
- the graphic application 201 runs in the program space (i.e. memory space), building up the 3D scene, typically as a data base of polygons, where each polygon is represented as a set of vertices. The vertices and others components of these polygons are transferred to the graphic card(s) for rendering, and displayed as a 2D image, on the display screen.
- FIG. 2C the structure of a GPU subsystem on the graphics card is shown comprising: a video memory disposed external to the GPU, and two 3D engines: (i) a transform bound geometry subsystem 224 for processing 3D graphics primitives; and (ii) a fill bound pixel subsystem 225 .
- the video memory shares its storage resources among geometry buffer 222 , through which all geometric (i.e. polygonal) data is transferred to the commands buffer, texture buffers 223 , and Frame Buffer FB 226 .
- the division of graphics data among GPUs reduces (i) the bottleneck 222 posed by the video memory footprint at each GPU, (ii) the transform bound processing bottleneck 224 , and (iii) the fill bound processing bottleneck 225 .
- FIGS. 2A through 2C there is a need to distribute the computational workload associated with interactive parallel graphics rendering processes.
- two different kind of parallel rendering methods have been applied to PC-based dual GPU graphics systems of the kind illustrated in FIGS. 2A through 2C , namely: the Time Division Method of Parallel Graphics Rendering illustrated in FIG. 2D ; and the Image Division Method of Parallel Graphics Rendering illustrated in FIG. 2E .
- Object Division Method a third type of method of parallel graphics rendering, referred to as the Object Division Method, has been developed over the years and practiced exclusively on complex computing platforms requiring complex and expensive hardware platforms for compositing the pixel output of the multiple graphics processing pipelines (GPPLs).
- the Object Division Method illustrated in FIG. 3A , can be found applied on conventional graphics platforms of the kind shown in FIG. 3 , as well as on specialized graphics computing platforms as described in U.S. Patent Application Publication No. US 2002/0015055, assigned to Silicon Graphics, Inc. (SGI), published on Feb. 7, 2002, and incorporated herein by reference.
- the parallel graphics platform uses the multiple sets of pixel data generated by each graphics pipeline to synthesize (or compose) a final set of pixels that are representative of the 3D scene (taken along the specified viewing direction), and this final set of pixel data is then stored in a frame buffer (FB); and
- the Image Division (Sort-First) Method of Parallel Graphics Rendering distributes all graphics display list data and commands to each of the graphics pipelines, and decomposes the final view (i.e. projected 2D image) in Screen Space, so that, each graphical contributor (e.g. graphics pipeline and GPU) renders a 2D tile of the final view.
- This mode has a limited scalability due to the parallel overhead caused by objects rendered on multiple tiles.
- the Split Frame Rendering mode divides up the screen among GPUs by continuous segments. e.g. two GPUs each one handles about one half of the screen. The exact division may change dynamically due to changing load across the screen image. This method is used in nVidia's SLITM multiple-GPU graphics product.
- Tiled Frame Rendering mode divides up the image into small tiles. Each GPU is assigned tiles that are spread out across the screen, contributing to good load balancing. This method is implemented by ATI's CrossfireTM multiple GPU graphics card solution.
- the entire database is broadcast to each GPU for geometric processing.
- the processing load at each Pixel Subsystem is reduced to about 1/N. This way of parallelism relieves the fill bound bottleneck 225 .
- the image division method ideally suits graphics applications requiring intensive pixel processing.
- the Time Division (DPlex) Method of Parallel Graphics Rendering distributes all display list graphics data and commands associated with a first scene to the first graphics pipeline, and all graphics display list data and commands associated with a second/subsequent scene to the second graphics pipeline, so that each graphics pipeline (and its individual rendering node or GPU) handles the processing of a full, alternating image frame.
- each graphics pipeline and its individual rendering node or GPU
- Each GPU is give extra time of N time frames (for N parallel GPUs) to process a frame.
- the released bottlenecks are those of transform bound 224 at geometry subsystem, and fill bound 225 at pixel subsystem.
- each GPU must access all of the data. This requires either maintaining multiple copies of large data sets or creating possible access conflicts to the source copy at the host swelling up the video memory bottlenecks 222 , 223 and data transfer bottleneck 221 .
- the Object Division (Sort-Last) Method of Parallel Graphics Rendering decomposes the 3D scene (i.e. rendered database) and distributes graphics display list data and commands associated with a portion of the scene to the particular graphics pipeline (i.e. rendering unit), and recombines the partially rendered pixel frames, during recomposition.
- the geometric database is therefore shared among GPUs, reducing the load on the geometry buffer, the geometry subsystem, and even to some extent, the pixel subsystem.
- the main concern is how to divide the data in order to keep load balance.
- An exemplary multiple-GPU platform of FIG. 3B for supporting the object-division method is shown in FIG. 3A .
- the platform requires complex and costly pixel compositing hardware which prevents its current application in a modern PC-based computer architecture.
- a given graphics processing pipeline along a parallel graphics rendering system is only as strong as the weakest link of it stages, and thus a single bottleneck determines the overall throughput along the graphics pipelines, resulting in unstable frame-rate, poor scalability, and poor performance.
- a primary object of the present invention is to provide a new and improved method of and apparatus for practicing parallel 3D graphics rendering processes in modern multiple-GPU based computer graphics systems, while avoiding the shortcomings and drawbacks associated with prior art apparatus and methodologies.
- Another object of the present invention is to provide a novel multi-mode parallel graphics rendering system (MMPGRS) embodied within a host computing system having (i) host memory space (HMS) for storing one or more graphics-based applications and a graphics library for generating graphics commands and data (GCAD) during the run-time (i.e. execution) of the graphics-based application, (ii) one or more CPUs for executing said graphics-based applications, and (iii) a display device for displaying images containing graphics during the execution of said graphics-based applications.
- HMS host memory space
- GCAD graphics commands and data
- Another object of the present invention is to provide such a multi-mode parallel graphics rendering and display system comprising: a multi-mode parallel graphics rendering subsystem supporting multiple modes of parallel operation selected from the group consisting of object division, image division, and time division; a plurality of graphic processing pipelines (GPPLs) supporting a parallel graphics rendering process that employs one of the object division, image division and/or time division modes of parallel operation in order to execute graphic commands and process graphics data (GCAD) render pixel-composited images containing graphics for display on a display device during the run-time of the graphics-based application; and an automatic mode control module (AMCM) for automatically controlling the mode of parallel operation during the run-time of the graphics-based application.
- GPPLs graphic processing pipelines
- AMCM automatic mode control module
- Another object of the present invention is to provide such a multi-mode parallel graphics rendering and display system, wherein the automatic mode control module employs the profiling of scenes in said graphics-based application.
- Another object of the present invention is to provide such a multi-mode parallel graphics rendering and display system, wherein the automatic mode control module employs the profiling of scenes in the graphics-based application, on an image frame by image frame basis.
- Another object of the present invention is to provide such a multi-mode parallel graphics rendering and display system, wherein the profiling of scenes in the graphics-based application, is carried out in real-time, during run-time of the graphics-based application, on an image frame by image frame basis.
- Another object of the present invention is to provide such a multi-mode parallel graphics rendering and display system, wherein said real-time profiling of scenes in the graphics-based application involves (i) collecting and analyzing performance data associated with the MMPGRS and the host computing system, during application run-time, (ii) constructing scene profiles for the image frames associated with particular scenes in the particular graphics-based application, and (iii) maintaining the scene profiles in a application/scene profile database that is accessible to the automatic mode control module during run-time, so that during the run-time of the graphics-based application, the automatic mode control module can access and use the scene profiles maintained in the application/scene profile database and determine how to dynamically control the modes of parallel operation of the MMPGRS to optimize system performance.
- Another object of the present invention is to provide such a multi-mode parallel graphics rendering and display system, wherein the automatic mode control module employs real-time detection of scene profile indices directly programmed within pre-profiled scenes of the graphics-based application; wherein the pre-profiled scenes are analyzed prior to run-time, and indexed with the scene profile indices; and wherein the mode control parameters (MCPs) corresponding to the scene profile indices, are stored within an application/scene profile database accessible to the automatic mode control module during application run-time.
- MCPs mode control parameters
- Another object of the present invention is to provide such a multi-mode parallel graphics rendering and display system, wherein during run-time, the automatic mode control module automatically detects the scene profile indices and uses the detected said scene profile indices to access corresponding MCPs from the application/scene profile database so as to determine how to dynamically control the modes of parallel operation of the MMPGRS to optimize system performance.
- Another object of the present invention is to provide such a multi-mode parallel graphics rendering and display system, wherein the automatic mode control module employs real-time detection of mode control commands (MCCs) directly programmed within pre-profiled scenes of the graphics-based application; wherein the pre-profiled scenes are analyzed prior to run-time, and the MCCs are directly programmed within the individual image frames of each scene; and wherein during run-time, the automatic mode control module automatically detects the MCCs along the graphics command and data stream, and uses the MCCs so as to determine how to dynamically control the modes of parallel operation of the MMPGRS to optimize system performance.
- MCCs mode control commands
- Another object of the present invention is to provide such a multi-mode parallel graphics rendering and display system, wherein the automatic mode control module employs a user interaction detection (UID) mechanism for real-time detection of the user's interaction with the host computing system.
- UID user interaction detection
- Another object of the present invention is to provide such a multi-mode parallel graphics rendering and display system, wherein, in conjunction with scene profiling, the automatic mode control module also uses said UID mechanism to determine how to dynamically control the modes of parallel operation of the MMPGRS to optimize system performance, at any instance in time during run-time of the graphics-based application.
- Another object of the present invention is to provide a multi-mode parallel graphics rendering system (MMPGRS), having multiple graphics processing pipelines (GPPLs) with multiple GPUs supporting a parallel graphics rendering process having time, frame and object division modes of operation, wherein each GPPL comprises video memory and a GPU having a geometry processing subsystem and a pixel processing subsystem, and wherein 3D scene profiling is performed in real-time, and the parallelization state/mode of the system is dynamically controlled to meet graphics application requirements.
- MMPGRS multi-mode parallel graphics rendering system
- Another object of the present invention is to provide a multi-mode parallel graphics rendering and display system having multiple graphics processing pipelines (GPPLs), each having a GPU and video memory, and supporting multiple modes of parallel graphics rendering using real-time graphics application profiling and automatic configuration of the multiple graphics processing pipelines supporting multiple modes of parallel graphics rendering, including a time-division mode, a frame-division mode, and an object-division mode of parallel operation.
- GPPLs graphics processing pipelines
- Another object of the present invention is to provide such a multi-mode parallel graphics rendering and display system, which is capable of dynamically handling bottlenecks that are automatically detected during any particular graphics application running on the host computing system.
- Another object of the present invention is to provide such a multi-mode parallel graphics rendering system, wherein different parallelization schemes are employed to reduce pipeline bottlenecks, and increase graphics performance.
- Another object of the present invention is to provide such a multi-mode parallel graphics rendering system, wherein image, time and object division methods of parallelization are implemented on the same parallel graphics platform.
- Another object of the present invention is to provide a method of multi-mode parallel graphics rendering that can be practiced on a multiple GPU-based PC-level graphics system, and which, during application run-time, dynamically alternates among Time, Frame/Image and Object division modes of parallel operation, adapting the optimal method of parallel operation to the real time needs of the graphics application.
- Another object of the present invention is to provide such a multi-mode parallel graphics rendering system, which is capable of supervising the performance level of a graphic application by dynamically adapting different parallelization schemes to solve instantaneous bottlenecks along the graphic pipelines thereof.
- Another object of the present invention is to provide such a multi-mode parallel graphics rendering system, having run-time configuration flexibility for various parallel schemes to achieve the best system performance.
- Another object of the present invention is to provide such a multi-mode parallel graphics rendering system having architectural flexibility and real-time profiling and control capabilities which enable utilization of different modes of parallel operation for high and steady performance along the application running on the associated host system.
- Another object of the present invention is to provide a novel method of multi-mode parallel graphics rendering on a multiple GPU-based graphics system, which achieves improved system performance by using adaptive parallelization of multiple graphics processing units (GPUs), on conventional and non-conventional platform architectures, as well as on monolithic platforms, such as multiple GPU chips or integrated graphic devices (IGD).
- GPUs graphics processing units
- IGD integrated graphic devices
- Another object of the present invention is to provide a multi-mode parallel graphics rendering system, wherein bottlenecks are dynamically handled.
- Another object of the present invention is to provide such a multi-mode parallel graphics rendering system, wherein stable performance is maintained throughout course of a graphics application.
- Another object of the present invention to provide a multi-mode parallel graphics rendering system supporting software-based adaptive graphics parallelism for the best performance, seamlessly to the graphics application, and compliant with graphic standards (e.g. OpenGL and Direct3D).
- graphic standards e.g. OpenGL and Direct3D
- Another object of the present invention is to provide a multi-mode parallel graphics rendering system, wherein all parallel modes are implemented in a single architecture.
- Another object of the present invention is to provide a multi-mode parallel graphics rendering system, wherein the architecture is flexible, supporting fast inter-mode transitions.
- Another object of the present invention is to provide a multi-mode parallel graphics rendering system which is adaptive to changing to meet the needs of any graphics application during the course of its operation.
- Another object of the present invention is to provide a multi-mode parallel graphics rendering system which employs a user interaction detection (UID) subsystem for enabling the automatic and dynamic detection of the user's interaction with the host computing system.
- UID user interaction detection
- Another object of the present invention is to provide such a multi-mode parallel graphics rendering system, which continuously processes user-system interaction data, and automatically detects user-system interactivity (e.g. mouse click, keyboard depression, eye-movement, etc).
- user-system interactivity e.g. mouse click, keyboard depression, eye-movement, etc.
- Another object of the present invention is to provide such a multi-mode parallel graphics rendering system the system, wherein absent preventive conditions (such as CPU bottlenecks and need for the same FB in successive frames), the user interaction detection (UID) subsystem enables timely implementation of the Time Division Mode only when no user-system interactivity is detected so that system performance is automatically optimized.
- absent preventive conditions such as CPU bottlenecks and need for the same FB in successive frames
- the user interaction detection (UID) subsystem enables timely implementation of the Time Division Mode only when no user-system interactivity is detected so that system performance is automatically optimized.
- Another object of the present invention is to provide a multi-mode parallel graphics rendering system, which can be implemented using a software implementation of present invention.
- Another object of the present invention is to provide a multi-mode parallel graphics rendering system, which can be realized using a hardware implementation.
- Another object of the present invention is to provide a multi-mode parallel graphics rendering system, which can be realized as chip implementation.
- Another object of the present invention is to provide a multi-mode parallel graphics rendering system, which can be realized as an integrated monolithic implementation.
- Another object of the present invention is to provide a multi-mode parallel graphics rendering system, which can be implemented using IGD technology.
- Another object of the present invention is to provide a multi-mode parallel graphics rendering system, characterized by run-time configuration flexibility for various parallel schemes to achieve the best parallel performance.
- Another object of the present invention is to provide a multi-mode parallel graphics rendering system that operates seamlessly to the application and is compliant with graphic standards (e.g. OpenGL and Direct3D).
- graphic standards e.g. OpenGL and Direct3D
- Another object of the present invention is to provide a multi-mode parallel graphics rendering system, which can be implemented on conventional multi-GPU platforms replacing image division or time division parallelism.
- Another object of the present invention is to provide a multi-mode parallel graphics rendering system, which enables the multiple GPU platform vendors to incorporate the solution in their systems supporting only image division and time division modes of operation.
- Another object of the present invention is to provide such multiple GPU-based graphics system, which enables implementation using low cost multi-GPU cards.
- Another object of the present invention is to provide a multi-mode parallel graphics rendering system implemented using IGD technology, and wherein it is impossible for the IGD to get disconnected by the BIOS when an external graphics card is connected and operating.
- Another object of the present invention is to provide a multiple GPU-based graphics system, wherein a new method of dynamically controlled parallelism improves the system's efficiency and performance.
- Another object of the present invention is to provide a multi-mode parallel graphics rendering system, which can be implemented using an IGD supporting more than one external GPU.
- Another object of the present invention is to provide a multi-mode parallel graphics rendering system, which can be implemented using an IGD-based chipset having two or more IGDs.
- Another object of the present invention is to provide a multi-mode parallel graphics rendering system, which employs a user interaction detection (UID) subsystem that enables automatic and dynamic detection of the user's interaction with the system, so that absent preventive conditions (such as CPU bottlenecks and need for the same FB in successive frames), this subsystem enables timely implementation of the Time Division Mode only when no user-system interactivity is detected, thereby achieving the highest performance mode of parallel graphics rendering at runtime, and automatically optimizing the graphics performance of the host computing system.
- UID user interaction detection
- Another object of the present invention is to provide a parallel graphics rendering system employing multiple graphics processing pipelines supporting the object division mode of parallel graphics rendering using pixel processing resources provided therewithin.
- Another object of the present invention is to provide a parallel graphics rendering system for carrying out the object division method of parallel graphics rendering on multiple GPU-based graphics platforms associated with diverse types of computing machinery.
- Another object of the present invention is to provide a novel method having multiple graphics processing pipelines (GPPLs) with multiple GPUs or CPU-cores supporting a parallel graphics rendering process having an object division mode of operation, wherein each GPPL includes video memory, a geometry processing subsystem, and a pixel processing subsystem, wherein pixel (color and z depth) data buffered in the video memory of each GPPL is communicated to the video memory of a primary GPPL, and wherein the video memory and the pixel processing subsystem in the primary GPPL are used to carry out the image recomposition phase of the object division mode of parallel graphics rendering process.
- GPPLs graphics processing pipelines
- each GPPL includes video memory, a geometry processing subsystem, and a pixel processing subsystem, wherein pixel (color and z depth) data buffered in the video memory of each GPPL is communicated to the video memory of a primary GPPL, and wherein the video memory and the pixel processing subsystem in the primary GPPL are used to carry out
- Another object of the present invention is to provide a parallel graphics rendering system having multiple graphics processing pipelines (GPPLs) with multiple GPUs or CPU-cores supporting a parallel graphics rendering process having an object division mode of operation, wherein each GPU comprises video memory, a geometry processing subsystem and a pixel processing subsystem, wherein pixel (color and z depth) data buffered in the video memory of each GPPL is communicated to the video memory of a primary GPPL, and wherein the video memory and the pixel processing subsystem in the primary GPPL are used to carry out the image recomposition phase of the object division mode of the parallel graphics rendering process.
- GPPLs graphics processing pipelines
- each GPU comprises video memory, a geometry processing subsystem and a pixel processing subsystem, wherein pixel (color and z depth) data buffered in the video memory of each GPPL is communicated to the video memory of a primary GPPL, and wherein the video memory and the pixel processing subsystem in the primary GPPL are used to carry out the image
- Another object of the present invention is to provide a parallel graphics rendering system having multiple graphics processing pipelines (GPPLs) with multiple GPUs supporting a parallel graphics rendering process having an object division mode of operation, wherein each GPU comprises video memory, a geometry processing subsystem and a pixel processing subsystem, wherein pixel (color and z depth) data buffered in the video memory of each GPU is communicated to the video memory of a primary GPU, and wherein the video memory and both the geometry and pixel processing subsystems in the primary GPU are used to carry out the image recomposition phase of the object division mode of parallel graphics rendering process.
- GPPLs graphics processing pipelines
- Another object of the present invention is to provide a parallel rendering graphics system having multiple graphics processing pipelines (GPPLs) with multiple GPUs supporting a parallel graphics rendering process having an object division mode of operation, wherein the video memory of each GPPL includes texture memory and a pixel frame buffer, wherein the geometry processing subsystem includes a vertex shading unit, wherein the pixel processing subsystem includes a fragment/pixel shading unit, wherein pixel (color and z depth) data buffered in the video memory of each GPPL is communicated to the video memory of a primary GPPL, and wherein the texture memory and the fragment/pixel shading unit are used to carry out the image recomposition phase of the object division mode of the parallel graphics rendering process.
- GPPLs graphics processing pipelines
- Another object of the present invention is to provide a parallel graphics rendering system having multiple graphics processing pipelines (GPPLs) with multiple GPUs supporting a parallel graphics rendering process having an object division mode of operation, wherein the video memory of each GPPL includes texture memory and a pixel frame buffer, wherein the geometry processing subsystem includes a vertex shading unit, wherein the pixel processing subsystem includes a fragment/pixel shading unit, wherein pixel (color and z depth) data buffered in the video memory of each GPPL is communicated to the video memory of a primary GPPL, and wherein the texture memory and the vertex shading unit are used to carry out the image recomposition phase of the object division mode of the parallel graphics rendering process.
- GPPLs graphics processing pipelines
- Another object of the present invention is to provide a parallel graphics rendering system having multiple graphics processing pipelines (GPPLs) with multiple GPUs supporting a parallel graphics rendering process having an object division mode of operation, which does not require compositing in main, shared or distributed memory of the host computing system (e.g. involving the movement of pixel data from the frame buffers or FBs to main memory, processing the pixel data in the CPU of the host for composition, and moving the result out to the primary GPPL for display) thereby avoiding the use of expensive procedure and resources of the system (e.g. buses, caches, memory, and CPU bandwidth).
- GPPLs graphics processing pipelines
- Another object of the present invention is to provide a novel method of operating a parallel graphics rendering system having multiple graphics processing pipelines (GPPLs) with multiple GPUs supporting a parallel graphics rendering process having an object division mode of operation, wherein implementation of the pixel composition phase of the parallel graphics rendering process is carried out using the computational resources within the GPUs, thereby avoiding the need for dedicated or specialized pixel image compositing hardware and/or software based apparatus.
- GPPLs graphics processing pipelines
- Another object of the present invention is to provide a novel method of object division parallel graphics rendering carried out on a multi-mode parallel graphics rendering system (MMPGRS) or platform supporting multiple graphical processing pipelines (GPPLs) with multiple graphical processing units (GPUs), wherein the recomposition stage of the rendering process is carried out using computational resources (e.g. video memory and the geometry and/or pixel processing subsystems/engines) supplied by the GPPLs employed on the MMPGRS platform.
- computational resources e.g. video memory and the geometry and/or pixel processing subsystems/engines
- Another object of the present invention is to provide a novel method of object division parallel rendering of pixel-composited images for graphics-based applications running on a host computing system embodying a multi-mode parallel graphics rendering system or platform (MMPGRS), wherein the movement and merging of composited pixel data occurs during the recomposition stage of the parallel graphics rendering process in a manner that is transparent to the graphics-based application.
- MMPGRS multi-mode parallel graphics rendering system or platform
- Another object of the present invention is to provide a novel parallel rendering graphics system having multiple graphics processing pipelines (GPPLs) supporting a parallel graphics rendering process having an object division mode of operation, wherein each GPPL comprises video memory, a geometry processing subsystem and a pixel processing subsystem, wherein pixel (color and z depth) data buffered in the video memory of each GPPL is communicated (via an inter-GPPL communication process) to the video memory of a primary GPPL, and wherein the video memory and the geometry and/or pixel processing subsystems in the primary GPPL are used to carry out the image recomposition phase of the object division mode of the parallel graphics rendering process.
- GPPLs graphics processing pipelines
- Another object of the present invention is to provide a novel parallel graphics rendering system supporting multiple modes of parallel operation during graphical rendering, which allows users to enjoy sharp videos and photos, smooth video playback, astonishing effects, and vibrant colors, as well as texture-rich 3D performance in next-generation games.
- Another object of the present invention is to provide a novel multi-user computer network supporting a plurality of client machines, wherein each client machine employs the MMPGRS of the present invention based on a software architecture and responds to user-interaction input data streams from one or more network users who might be local to each other as over a LAN, or be remote to each other, as when operating over a WAN or the Internet infrastructure.
- Another object of the present invention is to provide a novel multi-user computer network supporting a plurality of client machines, wherein each client machine employs the MMPGRS of the present invention based on a hardware architecture and responds to user-interaction input data streams from one or more network users who might be local to each other as over a LAN, or be remote to each other, as when operating over a WAN or the Internet infrastructure.
- Another object of the present invention is to provide an Internet-based central application profile database server system for automatically updating, over the Internet, graphic application profiles (GAPs) within the MMPGRS of client machines.
- GAPs graphic application profiles
- Another object of the present invention is to provide such Internet-based Central Application Profile Database Server System which ensures that each MMPGRS is optimally programmed at all possible times so that it quickly and continuously offers users high graphics performance through its adaptive multi-modal parallel graphics operation.
- Another object of the present invention is to provide such an Internet-based Central Application Profile Database Server System which supports a Web-based Game Application Registration and Profile Management Application, that provides a number of Web-based services, including:
- Another object of the present invention is to provide such an Internet-based Central Application Profile Database Server System that enables the MMGPRS of registered client computing machines to automatically and periodically upload, over the Internet, Graphic Application Profiles (GAPs) for storage and use within the Application/Scene Profile Database of the MMPGRS.
- GAPs Graphic Application Profiles
- Another object of the present invention is to provide such an Internet-based Central Application Profile Database Server System which, by enabling the automatic uploading of expert GAPs into the MMPGRS, graphic application users (e.g. gamers) can immediately enjoy high performance graphics on the display devices of their client machines, without having to develop a robust behavioral profile based on many hours of actual user-system interaction.
- graphic application users e.g. gamers
- Another object of the present invention is to provide such an Internet-based Central Application Profile Database Server System, wherein “expert” GAPs are automatically generated by the Central Application Profile Database Server System by analyzing the GAPs of thousands of different game application users connected to the Internet, and participating in the system.
- Another object of the present invention is to provide such an Internet-based Central Application Profile Database Server System, wherein for MMPGRS users subscribing to the Automatic GAP Management Services, each such MMPGRS runs an application profiling and control algorithm that uses the most recently uploaded expert GAP loaded into its automatic mode control mechanism (AMCM), and then allow system-user interaction, user behavior, and application performance to modify the expert GAP profile over time until the next update occurs.
- AMCM automatic mode control mechanism
- Another object of the present invention is to provide such an Internet-based Central Application Profile Database Server System, wherein the Application Profiling and Analysis Module in each MMGPRS subscribing to the Automatic GAP Management Services supported by the Central Application Profile Database Server System of the present invention, modifies and improves the downloaded expert GAP within particularly set limits and constraints, and according to particular criteria, so that the expert GAP is allowed to evolve in an optimal manner, without performance regression.
- FIG. 1 A 1 is a graphical representation of a typical prior art PC-based computing system employing a conventional graphics architecture driving a single external graphic card 105 ;
- FIG. 1 A 2 a graphical representation of a conventional GPU subsystem supported on the graphics card of the PC-based graphics system of FIG. 1 A 1 ;
- FIG. 1 A 3 is a graphical representation illustrating the general software architecture of the prior art computing system shown in FIG. 1 A 2 ;
- FIG. 1 B 1 is a graphical representation of a typical prior art PC-based computing system employing a conventional graphics architecture employing a North memory bridge circuit (i.e. semiconductor chip of monolithic construction) with an integrated graphics device (IGD) 103 supporting a single graphics pipeline process, and being operably coupled to a South bridge circuit (i.e. semiconductor chip of monolithic construction) supporting the input/output ports of the system;
- a North memory bridge circuit i.e. semiconductor chip of monolithic construction
- IGD integrated graphics device
- FIG. 1 B 2 is graphical representation of the North memory bridge employed in the system of FIG. 1 B 1 , showing in greater detail the micro-architecture of the IGD supporting the single graphics pipeline process therewithin;
- FIG. 1 B 3 is a graphical representation illustrating the general software architecture of the prior art PC-based IGD-driven computing system shown in FIGS. 1 B 1 and 1 B 2 ;
- FIG. 1 B 4 is a graphical representation of a prior art PC-based computing system employing a conventional Fusion-type CPU/GPU hybrid architecture, wherein a single GPU 1242 implemented on the same semiconductor die as the CPU 1241 is used to support a graphics pipeline that drives an external display device, e.g. LCD panel, projection display or the like 106 , via a bridge circuit, with display interface, as shown;
- an external display device e.g. LCD panel, projection display or the like 106
- FIG. 1 B 5 is a schematic representation showing the structure of a prior art GPU subsystem mounted on a graphics card or in an IGD, and comprising a GPU, and a video memory which is external to the GPU, wherein the GPU has includes two 3D engines, namely, (i) a transform bound geometry subsystem 124 for processing 3D graphics primitives 121 , and (ii) and a fill bound pixel subsystem 125 , and wherein the video memory shares its storage resources among a geometry buffer 122 A through which all geometric (i.e. polygonal) data 121 is transferred, a commands buffer 122 B, texture buffers 123 , and a Frame Buffer 126 ;
- FIG. 1C is a graphical representation illustrating a conventional process for rendering successive 3D scenes using a single GPU graphics platform to support a single graphics pipeline process, as shown in FIGS. 1 A 1 through 1 B 5 ;
- FIG. 2 A 1 is a graphical representation of a prior art PC-based computing system employing a conventional dual-GPU graphic architecture comprising two external graphic cards 205 204 and two PCI-e buses, e.g. Bearlake by Intel 207 , 208 , wherein the primary and secondary graphics cards are connected to and driven by the North memory bridge circuit 103 , while a display device 106 is attached to the primary graphics card 205 , and Ethernet and mobile docking ports and other local I/O ports are driven by the South bridge circuit, as shown;
- a conventional dual-GPU graphic architecture comprising two external graphic cards 205 204 and two PCI-e buses, e.g. Bearlake by Intel 207 , 208 , wherein the primary and secondary graphics cards are connected to and driven by the North memory bridge circuit 103 , while a display device 106 is attached to the primary graphics card 205 , and Ethernet and mobile docking ports and other local I/O ports are driven by the South bridge circuit, as shown;
- FIG. 2 A 2 is a graphical representation of a prior art PC-based computing system employing a conventional dual-GPU graphic architecture comprising two external graphic cards 204 , 205 and two PCI-e buses (e.g. Bearlake by Intel), wherein the primary graphics card 205 is connected to and driven by the North memory bridge via the first PCI-e bus with a display device 106 is attached to the primary graphics card 205 , and wherein the secondary graphics card 204 is connected to and driven by the South bridge via the second PCI-e bus;
- a conventional dual-GPU graphic architecture comprising two external graphic cards 204 , 205 and two PCI-e buses (e.g. Bearlake by Intel), wherein the primary graphics card 205 is connected to and driven by the North memory bridge via the first PCI-e bus with a display device 106 is attached to the primary graphics card 205 , and wherein the secondary graphics card 204 is connected to and driven by the South bridge via the second PCI-e bus;
- PCI-e buses e.g
- FIG. 2 A 3 is a graphical representation of a conventional GPU subsystem supported on each of the graphics cards employed in the prior art PC-based computing systems of FIGS. 2 A 1 and 2 A 2 ;
- FIG. 2 A 4 is a graphical representation illustrating the general software architecture of the prior art PC-based graphics systems shown in FIG. 2 A 1 , as well as FIG. 2 A 2 ;
- FIG. 2 A 5 is a graphical representation of a prior art PC-based computing system employing a conventional multi-core microprocessor (CPU) chip to implement multiple processing cores in a single physical package, wherein some of the cores can be potentially used as soft graphic graphics pipelines, and wherein a display device 106 is connected to and driven by the North (memory) bridge chip on the motherboard;
- CPU central processing unit
- FIG. 2B is a graphical representation of a conventional parallel graphics rendering process being carried out according to the Image Division Method of parallelism using the dual GPUs provided on the prior art graphics platform illustrated in FIGS. 2 A 1 through 2 A 3 ;
- FIG. 2C is a graphical representation of a conventional parallel graphics rendering process being carried out according to the Time Division Method of parallelism using the dual GPUs provided on the prior art graphics platforms illustrated in FIGS. 2 A 1 through 2 A 5 ;
- FIG. 3A is a schematic representation of a prior art parallel graphics rendering platform comprising multiple parallel graphics pipelines, each supporting video memory and a GPU, and feeding complex pixel compositing hardware for composing a final pixel-based images for display on the display device;
- FIG. 3B is a graphical representation of a conventional parallel graphics rendering process being carried out according to the Object Division Method of parallelism using multiple GPUs on the prior art graphics platform of FIG. 3A ;
- FIG. 3 C 1 is a schematic representation of the GPU and Video Memory structure employed in conventional multi-GPU PC-based computing systems, and illustrating the various kinds of bottlenecks (e.g. geometry limited, pixel limited, data transfer limited, and memory limited) that occur in such systems;
- bottlenecks e.g. geometry limited, pixel limited, data transfer limited, and memory limited
- FIG. 3 C 2 is a table summarizing the kinds of bottleneck problems which conventional parallelization modes are currently capable of mitigating along the multi-GPU pipelines of conventional PC-based computing systems;
- FIG. 4A is a schematic representation of a generalized embodiment of the multi-mode parallel 3D graphics rendering system (MMPGRS) of the present invention shown comprising (i) an automatic mode control module or mechanism (AMCM) 400 for supporting automatic mode control using diverse types of 3D scene profiling techniques and/or system-user interaction detection techniques, (ii) a multi-mode parallel graphics rendering subsystem 41 for supporting at least three primary parallelization stages of decomposition, distribution and recomposition implemented using the Decomposition Module 401 , the Distribution Module 402 and the Recomposition Module 403 , respectively, and (ii) a plurality of either GPU and/or CPU based “graphics processing pipelines (GPPLs)” 410 ′, wherein each parallelization stage performed by its corresponding Module is configured (i.e. set up) into a “sub-state” by set of parameters, and wherein the “graphics rendering parallelism state” for the overall multi-mode parallel graphics system is established or otherwise determined by the combination of sub-states of these component stages;
- FIG. 4 B 1 is a schematic representation of the subcomponents of a first illustrative embodiment of a GPU-based graphics processing pipeline (GPPL) that can be employed in the MMPGRS of the present invention depicted in FIG. 4A , shown comprising (i) a video memory structure supporting a frame buffer (FB) including stencil, depth and color buffers, and (ii) a graphics processing unit (GPU) supporting (1) a geometry subsystem having an input assembler and a vertex shader, (2) a set up engine, and (3) a pixel subsystem including a pixel shader receiving pixel data from the frame buffer and a raster operators operating on pixel data in the frame buffers;
- a graphics processing unit GPU supporting (1) a geometry subsystem having an input assembler and a vertex shader, (2) a set up engine, and (3) a pixel subsystem including a pixel shader receiving pixel data from the frame buffer and a raster operators operating on pixel data in the frame buffers;
- FIG. 4 B 2 is a schematic representation of the subcomponents of a second illustrative embodiment of a GPU-based graphics processing pipeline (GPPL) that can be employed in the MMPGRS of the present invention depicted in FIG. 4A , shown comprising (i) a video memory structure supporting a frame buffer (FB) including stencil, depth and color buffers, and (ii) a graphics processing unit (GPU) supporting (1) a geometry subsystem having an input assembler, a vertex shader and a geometry shader, (2) a rasterizer, and (3) a pixel subsystem including a pixel shader receiving pixel data from the frame buffer and a raster operators operating on pixel data in the frame buffers;
- a graphics processing unit GPU supporting (1) a geometry subsystem having an input assembler, a vertex shader and a geometry shader, (2) a rasterizer, and (3) a pixel subsystem including a pixel shader receiving pixel data from the frame buffer and a raster operators
- FIG. 4 B 3 is a schematic representation of the subcomponents of a illustrative embodiment of a CPU-based graphics processing pipeline that can be employed in the MMPGRS of the present invention depicted in FIG. 4A , shown comprising (i) a video memory structure supporting a frame buffer including stencil, depth and color buffers, and (ii) a graphics processing pipeline realized by one cell of a multi-core CPU chip, consisting of 16 in-order SIMD processors, and further including a GPU-specific extension, namely, a texture sampler that loads texture maps from memory, filters them for level-of-detail, and feeds to pixel processing portion of the pipeline;
- FIG. 4C is a schematic representation for the Mode Definition Table which shows the four combinations of sub-modes (i.e. sub-states) A:B:C for realizing the three (3) Parallel Modes of the MMPGRS of the present invention (i.e. Object Division Mode, Image Division Mode and Time/Alternative Division Mode), and the one (1) Single GPU (i.e. Non-Parallel Functioning) Mode of the system;
- FIG. 4D is a schematic representation illustrating the various Performance and Interactive Device Data Inputs supplied to the Application Profiling and Analysis Module (within the Automatic Mode Control Module (AMCM)) employed in the MMPGRS of present invention shown in FIG. 4A , as well as the Tasks carried out by the Application Profiling and Analysis Module;
- ACM Automatic Mode Control Module
- FIG. 5A is a schematic representation of the User Interaction Detection (UID) Subsystem employed within the Application Profiling and Analysis Module of the Automatic Mode Control Module (AMCM) in the MMPGRS of the present invention, wherein the UID Subsystem is shown comprising a Detection and Counting Module arranged in combination with a UID Transition Decision Module;
- UID User Interaction Detection
- AMCM Automatic Mode Control Module
- FIG. 5B is a flow chart representation of the state transition process between Object-Division/Image-Division Modes and the Time Division Mode initiated by the UID subsystem employed in the MMPGRS of the present invention
- FIG. 5 C 1 is a schematic representation of the process carried out by the Profiling and Control Cycle in the Automatic Mode Control Module (AMCM) in the MMPGRS of present invention, while the UID Subsystem is disabled;
- AMCM Automatic Mode Control Module
- FIG. 5 C 2 is a schematic representation of the process carried out by the Profiling and Control Cycle in the Automatic Mode Control Module in the MMPGRS of present invention, while the UID Subsystem is enabled;
- FIG. 5 C 3 is a schematic representation of the process carried out by the Periodical Trial & Error Based Control Cycle in the Automatic Mode Control Module employed in the MMPGRS of present invention, shown in FIG. 4A ;
- FIG. 5 C 4 is a schematic representation of the process carried out by the Event Driven Trial & Error Control Cycle in the Automatic Mode Control Module employed in the MMPGRS of present invention, shown in FIG. 4A ;
- FIG. 6A is a State Transition Diagram for the MMPGRS of present invention, illustrating that a parallel state is characterized by A, B, C sub-state parameters, that the non-parallel state (single GPPL) is an exceptional state, reachable from any state by a graphics application or AMCM requirement, and that all state transitions in the system are controlled by Automatic Mode Control Module (AMCM), wherein in those cases of known and previously analyzed graphics applications, the AMCM, when triggered by events (e.g. drop in frames per second FPS rate), automatically consults the Application/Scene Profile Database during the course of the Application, or otherwise, makes decisions which are supported by continuous profiling and analysis of listed parameters, and/or trial and error event driven or periodical cycles;
- AMCM Automatic Mode Control Module
- FIG. 6B is a schematic representation of the MMPGRS of the present invention supporting multiple graphic processing pipelines (GPPLs), with dynamic application profiling and parallelism mode control, in accordance with the principles of the present invention;
- GPPLs graphic processing pipelines
- FIG. 6 C 1 is a flow chart illustrating the processing of a sequence of pipelined image frames during the Image Division Mode of parallel graphics rendering supported on the MMPGRS of the present invention depicted in FIGS. 4A through 6A ;
- FIG. 6 C 2 is a flow chart illustrating the processing of a sequence of pipelined image frames during the Time Division Mode of parallel graphics rendering supported on the MMPGRS of the present invention depicted in FIGS. 4A through 6A ;
- FIG. 6 C 3 is a flow chart illustrating the processing of a single image frame during the Object Division mode of parallel graphics rendering supported on the MMPGRS of the present invention depicted in FIGS. 4A through 6A ;
- FIG. 7 A 1 - 1 is a schematic representation of various possible graphics architectural spaces within which the components of the MMPGRS of the present invention can be embodied in any given application, namely: Host Memory Space (HMS), Processor/CPU Die Space, Bridge Circuit (IGD) Space, Graphics Hub Space, and External GPU Space;
- HMS Host Memory Space
- IGD Bridge Circuit
- FIG. 7 A 1 - 2 sets forth a table listing diverse classes of system architectures in which the MMPGRS can be embodied, expressed in terms of the different kinds of architectural spaces, identified in FIG. 7 A 1 - 1 , in which the primary MMPGRS components (i.e. AMCM, Decomposition Submodule 1 , Decomposition Module 2 , Distribution Module, Multiple GPUs and Recomposition Module) can be embodied in each such class of MMPGRS Architecture, namely—Host Memory Space HMS (software), HMS+IGD, HMS+Fusion, HMS+Multicore, HMS+GPU-Recomposition, HUB; HUB+GPU-Recomposition, Chipset; CPU/GPU Fusion, Multicore CPU, and Game Console;
- the primary MMPGRS components i.e. AMCM, Decomposition Submodule 1 , Decomposition Module 2 , Distribution Module, Multiple GPUs and Recomposition Module
- the primary MMPGRS components i.e. AMCM, Decomposition Submodule
- FIG. 7 A 2 is a schematic representation of a first illustrative embodiment of the MMPGRS of the present invention, following the HMS Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , and showing (i) that the Automatic Mode Control Module (AMCM) 400 and the Decomposition, Distribution and Recomposition Modules 401 , 402 , 403 , respectively, of the Multimode Parallel Graphics Rendering Subsystem resides as a software package 701 in the Host Memory Space (HMS) while multiple GPUs are supported on a pair of external graphic cards 204 , 205 connected to a North memory bridge chip 103 and driven in a parallelized manner under the control of the AMCM, (ii) the Decomposition Module 401 divides (i.e.
- HMS Host Memory Space
- the Distribution Module 402 uses the North bridge chip to distribute graphic commands and data (GCAD) to the multiple GPUs on board the external graphics cards
- the Recomposition Module 403 uses the North bridge chip to transfer composited pixel data (CPD) between the Recomposition Module (or CPU) and the multiple GPUs during the image recomposition stage, and (v) finally recomposited pixel data sets are displayed as graphical images on one or more display devices connected to the external graphics cards via a PCI-express interface (which is connected to the North bridge chip);
- FIG. 7 A 3 is a schematic representation of a second illustrative embodiment of the MMPGRS of the present invention, following the HMS+IGD Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , and showing (i) that the Automatic Mode Control Module (AMCM) 400 and the Decomposition, Distribution and Recomposition Modules 401 , 402 , 403 , respectively, of the Multimode Parallel Graphics Rendering Subsystem resides as a software package 701 in the Host or CPU Memory Space (HMS) while multiple GPUs are supported in an IGD within the North memory bridge circuit as well as on external graphic cards connected to the North memory bridge chip and driven in a parallelized manner under the control of the AMCM, (ii) the Decomposition Module 401 divides (i.e.
- HMS Host or CPU Memory Space
- the Distribution Module 402 uses the North bridge chip to distribute the graphic commands and data (GCAD) to the multiple GPUs located in the IGD and on the external graphics cards
- the Recomposition Module 403 uses the North bridge chip to transfer composited pixel data (CPD) between the Recomposition Module (or CPU) and the multiple GPUs during the image recomposition stage, and (v) finally recomposited pixel data sets are displayed as graphical images on one or more display devices connected to one of the external graphics cards or the IGD;
- CPD composited pixel data
- FIG. 7 A 4 is a schematic representation of a third illustrative embodiment of the MMPGRS of the present invention, following the HMS+IGD Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , and showing (i) that the Automatic Mode Control Module (AMCM) 400 and the Decomposition, Distribution and Recomposition Modules 401 , 402 , 403 , respectively, of the Multimode Parallel Graphics Rendering Subsystem resides as a software package 701 in the Host Memory Space (HMS) while multiple GPUs are supported in an IGD within the South bridge circuit as well as on external graphic cards connected to the South bridge chip, and driven in a parallelized manner under the control of the AMCM, (ii) the Decomposition Module 401 divides (i.e.
- HMS Host Memory Space
- the Distribution Module 402 uses the North bridge chip to distribute graphic commands and data (CGAD) to the multiple GPUs located in the IGD and on external graphics cards
- the Recomposition Module 403 uses the South bridge chip to transfer recomposited pixel data between the Recomposition Module (or CPU) and the multiple GPUs during the image recomposition stage, and (v) finally recomposited pixel data sets are displayed as graphical images on one or more display devices connected to one of the external graphics cards or the IGD;
- FIG. 7 A 5 is a schematic representation of a fourth illustrative embodiment of the MMPGRS of the present invention, following the HMS+Fusion Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , and showing (i) that the Automatic Mode Control Module (AMCM) 400 and the Decomposition, Distribution and Recomposition Modules 401 , 402 , 403 , respectively, of the Multimode Parallel Graphics Rendering Subsystem resides as a software package 701 in the Host Memory Space (HMS) while a single GPU 1242 is supported on a CPU/GPU fusion-architecture processor die (alongside the CPU 1241 ) and one or more GPUs are supported on an external graphic card connected to the CPU processor die and driven in a parallelized manner under the control of the AMCM, (ii) the Decomposition Module 401 divides (i.e.
- the Distribution Module 402 uses the memory controller (controlling the HMS) and the interconnect network (e.g. crossbar switch) within the CPU/GPU processor chip to distribute graphic commands and data to the multiple GPUs on the CPU/GPU die chip and on the external graphics cards
- the Recomposition Module 403 uses the memory controller and interconnect (e.g.
- crossbar switch within the CPU/GPU processor chip to transfer composited pixel data (CPD) between the Recomposition Module (or CPU) and the multiple GPUs during the image recomposition stage, and (v) finally recomposited pixel data sets are displayed as graphical images on one or more display devices connected to the external graphics card via a PCI-express interface (which is connected to the CPU/GPU fusion-architecture chip);
- CPD composited pixel data
- PCI-express interface which is connected to the CPU/GPU fusion-architecture chip
- FIG. 7 A 6 is a schematic representation of a fifth illustrative embodiment of the MMPGRS of the present invention, following the HMS+Multicore Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , and showing (i) that the Automatic Mode Control Module (AMCM) 400 and the Decomposition, Distribution and Recomposition Modules 401 , 402 , 403 , respectively, of the Multimode Parallel Graphics Rendering Subsystem resides as a software package 701 in the Host or CPU Memory Space (HMS) while some of the CPU cores on a multi-core CPU chip are used to implement a plurality of multi-core graphics pipelines parallelized under the control of the AMCM, (ii) the Decomposition Module 401 divides (i.e.
- HMS Host or CPU Memory Space
- the Distribution Module 402 uses the North memory bridge and interconnect network within the multi-core CPU chip to distribute graphic commands and data (GCAD) to the multi-core graphic pipelines implemented on the multi-core CPU chip
- the Recomposition Module 403 uses the North memory bridge and interconnect network within the multi-core CPU chip to transfer composited pixel data (CPD) between the Recomposition Module (or CPU) and the multi-core graphics pipelines during the image recomposition stage, and (v) finally recomposited pixel data sets are displayed as graphical images on one or more display devices connected to the North bridge chip via a display interface;
- CPD composited pixel data
- FIG. 7 A 7 is a schematic representation of a sixth illustrative embodiment of the MMPGRS of the present invention, following the HMS+GPU-Recomposition Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , and showing (i) that the Automatic Mode Control Module (AMCM) 400 and the Decomposition, Distribution and Recomposition Modules 401 , 402 respectively, of the Multimode Parallel Graphics Rendering Subsystem resides as a software package 701 in the Host or CPU Memory Space (HMS) while multiple GPUs on external GPU cards are used to implement the Recomposition Module, and driven in parallelized manner under the control of the AMCM, (ii) the Decomposition Module 401 divides (i.e.
- HMS Host or CPU Memory Space
- the Distribution Module 402 uses the North or South bridge circuit and interconnect network to distribute graphic commands and data (GCAD) to the external GPUs
- the Recomposition Module uses the North memory bridge and associated system bus (e.g.
- PCI-express bus to transfer composited pixel data (CPD) between the GPUs during the image recomposition stage, and (v) finally recomposited pixel data sets (recomposited within the vertex and/or fragment shaders of the primary GPU) are displayed as graphical images on one or more display devices, connected to an external graphics card via a PCI-express interface (which is connected to either the North or South bridge circuits of the host computing system);
- FIG. 7 A 7 - 1 is a schematic representation of the parallel graphics rendering process supported within the MMPGRS of FIG. 7 A 7 during its object division mode of parallel operation;
- FIG. 7 A 7 - 2 is a graphical representation of Shader code (expressed in a graphics programming language, e.g. Cg) that is used within the primary GPPL of the MMPGRS of FIG. 7 A 7 , in order to carry out the pixel recomposition stage of the object division mode/method of the parallel graphics rendering process of the present invention, supported on the dual GPU-based parallel graphics system shown in FIG. 7 A 7 ;
- Shader code expressed in a graphics programming language, e.g. Cg
- FIG. 7 A 7 - 3 is a time-line representation of the process of generating a frame of pixels for an image along a specified viewing direction, during a particular parallel rendering cycle in the MMPGRS of FIG. 7 A 7 , wherein the pixel recomposition step of the parallel rendering process is shown reusing GPU-based computational resources during its idle time, without the need for specialized or dedicated compositional apparatus required by prior art parallel graphics systems supporting an object division mode of parallel graphics rendering;
- FIG. 7 B 1 is a schematic representation of a seventh illustrative embodiment of the MMPGRS of the present invention, following the Hub Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , and showing (i) that the Automatic Mode Control Module (AMCM) 400 and the Decomposition Submodule No. 1 401 ′ reside as a software package in the Host or CPU Memory Space (HMS) while the Decomposition Submodule No. 2 401 ′′, Distribution Module 402 ′′ and Recomposition Module 403 ′′ are realized within a single graphics hub device (e.g.
- ACM Automatic Mode Control Module
- HMS Host or CPU Memory Space
- the Decomposition Submodule No. 1 transfers graphic commands and data (GCAD) to the Decomposition Submodule No. 2 via the North memory bridge circuit
- the Decomposition Submodule No. 2 divides (i.e.
- the Distribution Module 402 distributes graphic commands and data (GCAD) to the external GPUs
- the Recomposition Module 403 transfers composited pixel data (CPD) between the GPUs during the image recomposition stage, and (vi) finally recomposited pixel data sets are displayed as graphical images on one or more display devices connected to the primary GPU on the graphical display card which is connected to the graphics hub chip of the present invention via the interconnect 404 ′′;
- FIG. 7 B 2 is a schematic representation of an eighth illustrative embodiment of the MMPGRS of the present invention, following the Hub+GPU-Recomposition Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , and showing (i) that the Automatic Mode Control Module (AMCM) 400 and the Decomposition Submodule No. 1 401 ′ reside as a software package in the Host Memory Space (HMS) of the host computing system, while the Decomposition Submodule No. 2 401 ′′ and the Distribution Module 402 ′′ are realized within a single graphics hub device (e.g.
- ACM Automatic Mode Control Module
- HMS Host Memory Space
- the Decomposition Submodule No. 1 transfers graphic commands and data (GCAD) to the Decomposition Submodule No. 2 via the North bridge circuit
- the Decomposition Submodule No. 2 divides (i.e.
- the Distribution Module 402 distributes graphic commands and data (GCAD) to the external GPUs
- the Recomposition Module 403 transfers composited pixel data (CPD) between the GPUs during the image recomposition stage
- recomposited pixel data sets are displayed as graphical images on one or more display devices connected to the primary GPU on the graphical display card(s) (which are connected to the graphics hub chip of the present invention);
- FIG. 7 B 3 is a schematic representation of a ninth illustrative embodiment of the MMPGRS of the present invention, following the Chipset Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , and showing (i) that the Automatic Mode Control Module (AMCM) 400 and the Decomposition Submodule No. 1 401 ′ reside as a software package in the Host or CPU Memory Space (HMS) while the Decomposition Submodule No.
- AMCM Automatic Mode Control Module
- HMS CPU Memory Space
- the Decomposition Submodule No. 1 transfers graphic commands and data (GCAD) to the Decomposition Submodule No. 2 via the North bridge circuit
- the Decomposition Submodule No. 2 divides (i.e.
- the Distribution Module 402 distributes graphic commands and data (GCAD) to the internal GPUs via the interconnect network
- the Recomposition Module 403 ′′ transfers composited pixel data (CPD) between the GPUs during the image recomposition stage, and (vi) finally recomposited pixel data sets are displayed as graphical images on one or more display devices connected to the external graphical display card or the primary GPU in the IGB;
- FIG. 7 B 4 is a schematic representation of a tenth illustrative embodiment of the MMPGRS of the present invention, following the Chipset Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , and showing (i) that the Automatic Mode Control Module (AMCM) 400 and the Decomposition Submodule No. 1 401 ′ reside as a software package in the Host or CPU Memory Space (HMS) while the Decomposition Submodule No.
- AMCM Automatic Mode Control Module
- HMS CPU Memory Space
- the Decomposition Submodule No. 1 transfers graphic commands and data (GCAD) to the Decomposition Submodule No. 2 via the communication interfaces of the North and South bridge circuits, (iii) the Decomposition Submodule No. 2 divides (i.e.
- the Distribution Module 402 distributes graphic commands and data (GCAD) to the external GPUs
- the Recomposition Module 403 transfers composited pixel data (CPD) between the GPUs during the image recomposition stage, and (vi) finally recomposited pixel data sets are displayed as graphical images on one or more display devices connected to the external graphical display card or the primary GPU in the IGB;
- FIG. 7 B 4 - 1 is a schematic representation of an eleventh illustrative embodiment of the MMPGRS of the present invention, following the Chipset Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , and showing (i) that the Automatic Mode Control Module (AMCM) 400 and the Decomposition Submodule No. 1 401 ′ reside as a software package in the Host or CPU Memory Space (HMS) while the Decomposition Submodule No.
- AMCM Automatic Mode Control Module
- HMS CPU Memory Space
- the Decomposition Submodule No. 1 transfers graphic commands and data (GCAD) to the Decomposition Submodule No. 2 via the communication interfaces of the North and South bridge circuits, (iii) the Decomposition Submodule No. 2 divides (i.e.
- the Distribution Module 402 distributes graphic commands and data (GCAD) to the external GPUs
- the Recomposition Module 403 implemented within Primary GPU, transfers composited pixel data (CPD) between the GPUs during the image recomposition stage, and (vi) finally recomposited pixel data sets are displayed as graphical images on one or more display devices connected to the external graphical display card or the primary GPU in the IGB;
- FIG. 7 B 5 is a schematic representation of an twelfth illustrative embodiment of the MMPGRS of the present invention, following the Chipset Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , and showing (i) that the Automatic Mode Control Module (AMCM) 400 and the Decomposition Submodule No. 1 401 ′ reside as a software package in the Host or CPU Memory Space (HMS) while the Decomposition Submodule No.
- AMCM Automatic Mode Control Module
- HMS CPU Memory Space
- the Decomposition Submodule No. 1 transfers graphics commands and data (GCAD) to the Decomposition Submodule No. 2 via the North bridge circuit
- the Decomposition Submodule No. 2 divides (i.e.
- the Distribution Module 402 distributes graphic commands and data (GCAD) to the external GPUs
- the Recomposition Module 403 transfers composited pixel data (CPD) between the GPUs during the image recomposition stage, and (vi) finally recomposited pixel data sets are displayed as graphical images on one or more display devices connected to the external graphical display card or the primary GPU in the IGB;
- FIG. 7 B 6 is a schematic representation of a thirteenth illustrative embodiment of the MMPGRS of the present invention, following the Chipset Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , and showing (i) that the Automatic Mode Control Module (AMCM) 400 and the Decomposition Submodule No. 1 401 ′ reside as a software package in the Host or CPU Memory Space (HMS) while the Decomposition Submodule No.
- AMCM Automatic Mode Control Module
- HMS CPU Memory Space
- Distribution Module 402 ′′ and Recomposition Module 403 ′′ are realized (as a graphics hub) in an integrated graphics device (IGD) within the South bridge circuit of the host computing system and having a single GPU driven with a single GPU on an external graphics card in a parallelized manner under the control of the AMCM, (ii) the Decomposition Submodule No. 1 transfer graphic commands and data (GCAD) to the Decomposition Submodule No. 2 via the North and South bridge circuits, (iii) the Decomposition Submodule No. 2 divides (i.e.
- the Distribution Module 402 distributes the graphic commands and data (GCAD) to the external GPUs
- the Recomposition Module 403 transfers composited pixel data (CPD) between the GPUs during the image recomposition stage, and (vi) finally recomposited pixel data sets are displayed as graphical images on one or more display devices connected to the external graphics card or the primary GPU in the IGB;
- FIG. 7 B 6 - 1 is a schematic representation of a fourteenth illustrative embodiment of the MMPGRS of the present invention, following the Chipset Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , and showing (i) that the Automatic Mode Control Module (AMCM) 400 and the Decomposition Submodule No. 1 401 ′ reside as a software package in the Host or CPU Memory Space (HMS) while the Decomposition Submodule No.
- AMCM Automatic Mode Control Module
- HMS CPU Memory Space
- the Distribution Module 402 ′′ are realized (as a graphics hub) in an integrated graphics device (IGD) within the South bridge circuit of the host computing system and having multiple GPUs driven with a single GPU on an external graphics card in a parallelized manner under the control of the AMCM, while the Recomposition Module 403 ′′ is implemented across two or more GPUs 715 , 716 , (ii) the Decomposition Submodule No. 1 transfer graphic commands and data (GCAD) to the Decomposition Submodule No. 2 via the North and South bridge circuits, (iii) the Decomposition Submodule No. 2 divides (i.e.
- the Distribution Module 402 distributes the graphic commands and data (GCAD) to the external GPUs
- the Recomposition Module 403 transfers composited pixel data (CPD) between the GPUs during the image recomposition stage, and (vi) finally recomposited pixel data sets are displayed as graphical images on one or more display devices connected to one of the external graphics card or the primary GPU in the IGB;
- FIG. 7 B 7 is a schematic representation of a fifteenth illustrative embodiment of the MMPGRS of the present invention, following the Chipset Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , and showing (i) that the Automatic Mode Control Module (AMCM) 400 and the Decomposition Submodule No. 1 401 ′ reside as a software package in the Host or CPU Memory Space (HMS) while the Decomposition Submodule No.
- AMCM Automatic Mode Control Module
- HMS CPU Memory Space
- Distribution Module 402 ′′ and Recomposition Module 403 ′′ are realized (as a graphics hub) in an integrated graphics device (IGD) within the North memory bridge of the host computing system and having a single GPU being driven with one or more GPUs on multiple external graphics cards in a parallelized manner under the control of the AMCM (or alternatively (ii) controlling a single GPU aboard the IGD for driving a display device connected to the IGD via a display interface), (ii) the Decomposition Submodule No. 1 transfers graphic commands and data (GCAD) to the Decomposition Submodule No. 2 via the North bridge circuit, (iii) the Decomposition Submodule No. 2 divides (i.e.
- the Distribution Module 402 distributes the graphic commands and data (GCAD) to the internal GPU and external GPUs
- the Recomposition Module 403 ′′ transfers composited pixel data (CPD) between the GPUs during the image recomposition stage
- CPD composited pixel data
- FIG. 7 B 7 - 1 is a schematic representation of a sixteenth illustrative embodiment of the MMPGRS of the present invention, following the Chipset Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , and showing (i) that the Automatic Mode Control Module (AMCM) 400 and the Decomposition Submodule No. 1 401 ′ reside as a software package in the Host or CPU Memory Space (HMS) while the Decomposition Submodule No.
- AMCM Automatic Mode Control Module
- HMS CPU Memory Space
- the Distribution Module 402 ′′ are realized (as a graphics hub) in an integrated graphics device (IGD) realized within the North memory bridge chip of the host computing system, and driving (a) multiple GPUs on multiple external graphics cards in a parallelized manner under the control of the AMCM while the Recomposition Module 403 ′′ is implemented across two or more GPUs 715 , 716 , or alternatively (b) controlling a single GPU aboard the IGD for driving a display device connected to the IGD via a display interface, (ii) the Decomposition Submodule No. 1 transfers graphic commands and data (GCAD) to the Decomposition Submodule No. 2 via the North bridge circuit, (iii) the Decomposition Submodule No. 2 divides (i.e.
- the Distribution Module 402 distributes the graphic commands and data (GCAD) to the internal GPU and external GPUs
- the Recomposition Module 403 ′′ implemented in the primary GPU transfers composited pixel data (CPD) between the GPUs during the image recomposition stage, and (vi) finally recomposited pixel data sets are displayed as graphical images on one or more display devices connected to one of the external graphic cards or the primary GPU in the IGB;
- FIG. 7 B 8 - 1 is a schematic representation of a seventeenth illustrative embodiment of the MMPGRS of the present invention, following the CPU/GPU_Fusion Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , and showing (i) that the Automatic Mode Control Module (AMCM) 400 and the Decomposition Submodule No. 1 401 ′ reside as a software package in the Host Memory Space (HMS) while the Decomposition Submodule No.
- AMCM Automatic Mode Control Module
- HMS Host Memory Space
- the Decomposition Submodule No. 1 transfers graphics commands and data (GCAD) to the Decomposition Submodule No. 2
- the Decomposition Submodule No. 2 divides (i.e.
- the Distribution Module 402 distributes the graphic commands and data (GCAD) to the internal GPU and external GPUs
- the Recomposition Module 403 ′′ transfers composited pixel data (CPD) between the GPUs during the image recomposition stage
- finally recomposited pixel data sets are displayed as graphical images on one or more display devices 106 connected to the external graphics card connected to the hybrid CPU/GPU chip via a PCI-express interface;
- FIG. 7 B 8 - 2 is a schematic representation of an eighteenth illustrative embodiment of the MMPGRS of the present invention, following the CPU/GPU Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , and showing (i) that the Automatic Mode Control Module (AMCM) 400 and the Decomposition Submodule No. 1 401 ′ reside as a software package in the Host Memory Space (HMS) while the Decomposition Submodule No.
- AMCM Automatic Mode Control Module
- HMS Host Memory Space
- the Decomposition Submodule No. 1 transfers graphics commands and data (GCAD) to the Decomposition Submodule No. 2
- the Decomposition Submodule No. 2 divides (i.e.
- the Distribution Module 402 ′′ uses the crossbar switch (i.e. interconnect) on the processor die to distribute the graphic commands and data (GCAD) to the internal GPUs and external GPUs,
- the Recomposition Module 403 ′′ transfers composited pixel data (CPD) between the GPUs during the image recomposition stage, and
- finally recomposited pixel data sets are displayed as graphical images on one or more display devices 106 connected to the external graphics card connected to the hybrid CPU/GPU chip via a PCI-express interface;
- FIG. 7 B 8 - 3 is a schematic representation of a nineteenth illustrative embodiment of the MMPGRS of the present invention, following the CPU/GPU Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , and showing (i) that the Automatic Mode Control Module (AMCM) 400 and the Decomposition Submodule No. 1 401 ′ reside as a software package in the Host Memory Space (HMS), (ii) the Decomposition Submodule No.
- AMCM Automatic Mode Control Module
- HMS Host Memory Space
- the Distribution Module 402 ′′ are realized (as a graphics hub) in on the die of a hybrid CPU/GPU fusion-architecture chip within the host computing system and having multiple GPUs 1242 ′′ driven with one or more GPUs on an external graphics card 205 (connected to the CPU/GPU chip) in a parallelized manner under the control of the AMCM, (iii) the Recomposition Module 403 ′′ is implemented across two or more GPUs 715 , 716 provided on the CPU/GPU fusion chip die and external graphics cards, (iv) the Decomposition Submodule No. 1 transfers graphics commands and data (GCAD) to the Decomposition Submodule No. 2 , (v) the Decomposition Submodule No. 2 divides (i.e.
- the Distribution Module 402 ′′ uses the crossbar switch (i.e. interconnect) on the processor die to distribute the graphic commands and data (GCAD) to the internal GPUs and external GPUs,
- the Recomposition Module 403 ′′ transfers composited pixel data (CPD) between the GPUs during the image recomposition stage, and
- CPD composited pixel data
- finally recomposited pixel data sets are displayed as graphical images on one or more display devices 106 connected to the external graphics card connected to the hybrid CPU/GPU chip via a PCI-express interface;
- FIG. 7 B 9 - 1 is a schematic representation of a twentieth illustrative embodiment of the MMPGRS of the present invention, following the Multicore CPU Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , and showing (i) that the Automatic Mode Control Module (AMCM) 400 and the Decomposition Submodule No. 1 401 ′ reside as a software package in the Host Memory Space (HMS) while the Decomposition Submodule No.
- AMCM Automatic Mode Control Module
- HMS Host Memory Space
- the Decomposition Submodule No. 1 transfers graphics commands and data (GCAD) to the Decomposition Submodule No. 2 via the North memory bridge circuit and interconnect network within the multi-core CPU chip, (iii) the Decomposition Submodule No. 2 divides (i.e.
- the Distribution Module 402 ′′ uses the crossbar switch (i.e. interconnect) on the processor die to distribute the graphic commands and data (GCAD) to the multiple soft parallel graphics pipelines (implemented by the multiple CPU cores),
- the Recomposition Module 403 ′′ transfers composited pixel data (CPD) between the multiple CPU cores during the image recomposition stage, and
- finally recomposited pixel data sets are displayed as graphical images on one or more display devices 106 connected to the North memory bridge chip via a display interface;
- FIG. 7 B 9 - 2 is a schematic representation of a twenty-first illustrative embodiment of the MMPGRS of the present invention, following the Multicore CPU Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , and showing (i) that the Automatic Mode Control Module (AMCM) 400 and the Decomposition Submodule No. 1 401 ′ resides as a software package in the Host Memory Space (HMS) while the Decomposition Submodule No.
- AMCM Automatic Mode Control Module
- HMS Host Memory Space
- the Distribution Module 402 ′′ and the Recomposition Module 403 ′′ are realized as a graphics hub chip within a gaming console system interconnecting a multi-core CPU ship and a cluster of GPUs on the game console board, so that the GPUs are driven in a parallelized manner under the control of the AMCM,
- the Decomposition Submodule No. 1 transfers graphics commands and data (GCAD) to the Decomposition Submodule No. 2 via the interconnects within the North memory bridge chip and the multi-core CPU chip
- the Decomposition Submodule No. 2 divides (i.e.
- the Distribution Module 402 ′′ uses the interconnect (i.e. crossbar switch) in the multi-core CPU chip to distribute the graphic commands and data (GCAD) to the multiple soft graphics pipelines (e.g.
- the Recomposition Module 403 ′′ transfers composited pixel data (CPD) between the soft graphics pipelines on the multi-core CPU chip and hard GPUs on the external graphics card during the image recomposition stage, and (vi) finally recomposited pixel data sets are displayed as graphical images on one or more display devices 106 connected to the external graphics card which is connected to the multi-core CPU chip via a PCI-express interface;
- CPD composited pixel data
- FIG. 7 B 10 is a schematic representation of a twenty-second illustrative embodiment of the MMPGRS of the present invention, following the Game Console Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , and showing (i) that the Automatic Mode Control Module (AMCM) 400 and the Decomposition Submodule No. 1 401 ′ are realized as a software package 711 within the Host Memory Space (HMS), while the Decomposition Submodule No. 2 401 ′′, the Distribution Module 402 ′′ and the Recomposition Module 403 ′ are realized as a graphics hub semiconductor chip within the game console system in which multiple GPUs are driven in a parallelized manner under the control of the AMCM, (ii) the Decomposition Submodule No.
- AMCM Automatic Mode Control Module
- HMS Host Memory Space
- the Decomposition Submodule No. 2 transfers graphics commands and data (GCAD) to the Decomposition Submodule No. 2 , via the memory controller on the multi-core CPU chip and the interconnect in the graphics hub chip of the present invention, (iii) the Decomposition Submodule No. 2 divides (i.e.
- the Distribution Module 402 distributes the graphic commands and data (GCAD) to the multiple GPUs
- the Recomposition Module 403 transfers composited pixel data (CPD) between the multiple GPUs during the image recomposition stage
- recomposited pixel data sets are displayed as graphical images on one or more display devices 106 connected to the primary GPU 715 via a analog display interface
- FIG. 7 B 11 is a schematic representation of a twenty-third illustrative embodiment of the MMPGRS of the present invention, following the Game Console Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , and showing (i) that the Automatic Mode Control Module (AMCM) 400 and the Decomposition Submodule No. 1 401 ′ are realized as a software package 711 within the Host Memory Space (HMS) of the host computing system while the Decomposition Submodule No. 2 401 ′′ and Distribution Module 402 ′ are realized as a graphics hub semiconductor chip within the game console system in which multiple GPUs are driven in a parallelized manner under the control of the AMCM, (ii) the Decomposition Submodule No.
- AMCM Automatic Mode Control Module
- HMS Host Memory Space
- the Decomposition Submodule No. 2 transfers graphics commands and data (GCAD) to the Decomposition Submodule No. 2 , via the memory controller on the multi-core CPU chip and the interconnect in the graphics hub chip of the present invention, (iii) the Decomposition Submodule No. 2 divides (i.e.
- the Distribution Module 402 ′ distributes the graphic commands and data (GCAD) to the multiple GPUs
- the Recomposition Module 403 ′ realized primarily within the substructure of the primary GPU, transfers composited pixel data (CPD) between the multiple GPUs during the image recomposition stage, and (vi) finally recomposited pixel data sets (recomposited within the vertex and/or fragment shaders of the primary GPU) are displayed as graphical images on one or more display devices 106 connected to the primary GPU 715 via an analog display interface or the like;
- FIG. 8A is a schematic block representation of an illustrative implementation of the MMPGRS of the present invention following the Hub Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , wherein (i) the AMCM and Decomposition No.
- HMS host memory space
- multiple discrete graphic cards are connected to the bridge circuit of the host computing system by way of a hardware-based graphics hub chip of the present invention 404 ′′, 402 ′′, 403 ′′, 404 ′′,
- hardware-based Distribution and Recomposition Modules 402 ′′ and 403 ′′ are realized on the hardware-based graphics hub chip of the present invention, and
- a graphics display device is connected to the primary GPU;
- FIG. 8 A 1 is a schematic representation of a first illustrative embodiment of the MMPGRS implementation of FIG. 8A , showing a possible packaging of the Hub architecture of the present invention as an assembly comprising a Hub-extender card 811 carrying multiple (e.g. dual) graphics cards 812 , 813 supported on a motherboard 814 within the host computing system;
- a Hub-extender card 811 carrying multiple (e.g. dual) graphics cards 812 , 813 supported on a motherboard 814 within the host computing system
- FIG. 8 A 2 is a schematic representation of a second illustrative embodiment of the MMPGRS implementation of FIG. 8A , showing a possible packaging of the Hub architecture of the present invention as an external box containing a Hub chip of the present invention mounted on a PC board, that is connected to the motherboard of the host computing system via a wire harness or the like, and supporting a plurality of graphics cards 813 that are connected to the Hub chip;
- FIG. 8 A 3 is a schematic representation of a third illustrative embodiment of the MMPGRS implementation of FIG. 8A , showing a possible packaging of the Hub architecture of the present invention realized as a graphics Hub chip of the present invention mounted on the motherboard 814 of the host computing system, which supports multiple graphics cards 813 with multiple GPUs;
- FIG. 8B is a schematic block representation of an illustrative implementation of the MMPGRS of the present invention following the Hub+GPU-Recomposition Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , wherein (i) the AMCM and Decomposition No. 1 Submodule are implemented as a software-package 701 within host memory space (HMS) of the host computing system, (ii) multiple discrete graphic cards are connected to a bridge chipset on the host computing system by way of a hardware-based graphics hub chip realizing the Decomposition No.
- HMS host memory space
- FIG. 8 B 1 is a schematic representation of a first illustrative embodiment of the MMPGRS implementation of FIG. 8B , showing a possible packaging of the Hub+GPU Recomposition architecture of the present invention as an assembly comprising a graphic hub-extender card 811 carrying multiple (e.g. dual) graphics cards 812 , 813 supported on a motherboard 814 within the host computing system;
- a graphic hub-extender card 811 carrying multiple (e.g. dual) graphics cards 812 , 813 supported on a motherboard 814 within the host computing system;
- FIG. 8 B 2 is a schematic representation of a second illustrative embodiment of the MMPGRS implementation of FIG. 8B , showing a possible packaging of the Hub architecture of the present invention as an external box containing a Hub chip of the present invention mounted on a PC board, that is connected to the motherboard of the host computing system via a wire harness or the like, and supporting a plurality of graphics cards 813 that are connected to the graphics hub chip;
- FIG. 8 B 3 is a schematic representation of a third illustrative embodiment of the MMPGRS implementation of FIG. 8B , showing a possible packaging of the Hub architecture of the present invention realized as a graphics hub chip of the present invention mounted on the motherboard 814 of the host computing system, which supports multiple graphics cards 813 with multiple GPUs;
- FIG. 8C is a schematic block representation of an illustrative embodiment of the MMPGRS of the present invention following the HM Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , wherein (i) the AMCM, Decomposition, Distribution and Recomposition Modules are implemented as a software-package 701 within host memory space (HMS) of the host computing system, (ii) multiple discrete GPUs on one or more graphics cards, are connected to the bridge circuit on the host computing system, and (iii) a graphics display device is connected to the primary GPU;
- HMS host memory space
- FIG. 8 C 1 is a schematic representation of a first illustrative embodiment of the MMPGRS implementation of FIG. 8C , wherein discrete multiple graphics cards 851 , each supporting at least a single GPU, are interfaced with the bridge circuit chipset of the CPU motherboard by way of a PCI-express or like interface;
- FIG. 8 C 2 is a schematic representation of a second illustrative embodiment of the MMPGRS implementation of FIG. 8C , wherein multiple GPUs are realized on a single graphics card 852 which is interfaced to bridge circuit on the CPU motherboard by way of a PCI-express or like interface;
- FIG. 8 C 3 is a schematic representation of a third illustrative embodiment of the MMPGRS implementation of FIG. 8C , wherein multiple discrete graphics cards 851 , each supporting at least a single GPU, are interfaced with the bridge circuit on a board within an external box 821 that is interfaced to the motherboard within the host computing system;
- FIG. 8D is a schematic block representation of an illustrative embodiment of the MMPGRS of the present invention following the Hub+GPU-Recomposition Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , wherein (i) the AMCM, Decomposition Submodule No. 1 and a Distribution Module are implemented as a software-package 701 within host memory space (HMS) of the host computing system, (ii) multiple discrete GPUs on one or more external graphics cards are connected to the bridge circuit of the host computing system, (iii) a Recomposition Module 403 ′′ is implemented across two or more GPUs 715 , 716 , and (iv) a graphics display device is connected to the primary GPU;
- HMS host memory space
- FIG. 8 D 1 is a schematic representation of a first illustrative embodiment of the MMPGRS implementation of FIG. 8D , wherein discrete multiple graphics cards 851 , each supporting at least a single GPU, are interfaced with the bridge circuit chipset of the CPU motherboard by way of a PCI-express or like interface;
- FIG. 8 D 2 is a schematic representation of a second illustrative embodiment of the MMPGRS implementation of FIG. 8D , wherein multiple GPUs are realized on a single graphics card 852 which is interfaced to bridge circuit on the CPU motherboard by way of a PCI-express or like interface;
- FIG. 8 D 3 is a schematic representation of a third illustrative embodiment of the MMPGRS implementation of FIG. 8D , wherein multiple discrete graphics cards 851 , each supporting at least a single GPU, are interfaced with the bridge circuit on a board within an external box 821 that is interfaced to the motherboard within the host computing system;
- FIG. 9A is a schematic block representation of an illustrative implementation of the MMPGRS of the present invention following the Hub Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , wherein (i) the AMCM and Decomposition Submodule No. 1 are realized as a software package 711 on the host memory space (HMS), (ii) multiple GPUs (i.e. Primary GPU 715 and Secondary GPUs 716 ) are assembled on a external graphics card 902 which connects the GPUs to the bridge circuit on the host computing system by way of a hardware-based graphics hub chip implementing the Decomposition Submodule No. 2 401 ′′, the Distribution Module 402 ′′ and the Recomposition Module 403 ′′, and (iii) a graphics display device is connected to the primary GPU;
- HMS host memory space
- FIG. 9 A 1 is a schematic representation of an illustrative embodiment of the MMPGRS of FIG. 9A , wherein multiple GPUs 715 , 716 and hardware-based Decomposition Submodule No. 2 401 ′′, Distribution Module 402 ′′ and the Recomposition Modules 403 ′′ are implemented as a graphics hub chip or chipset 401 ′′, 402 ′, 403 ,′′ and 404 ′′ on a single graphics display card 902 , which is interfaced to the bridge circuit on the motherboard 814 within the host computing system;
- FIG. 10A is a schematic block representation of an illustrative implementation of the MMPGRS of the present invention following the Hub Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , wherein (i) the AMCM and Decomposition Submodule No. 1 are realized as a software package 711 on the host memory space (HMS), (ii) a single SOC-based graphics chip 1001 mounted on a single graphics card 1002 is interfaced with a bridge circuit on the motherboard 1002 , and supporting multiple GPUs (i.e. the primary GPU and secondary GPUs), (iii) hardware-based Decomposition Submodule No. 2 , the Distribution Module and the Recomposition Module are implemented on the SOC-based graphics chip 1001 , and (iv) a graphics display device is connected to the primary GPU;
- HMS host memory space
- a single SOC-based graphics chip 1001 mounted on a single graphics card 1002 is interfaced with a bridge circuit on the motherboard 1002 , and supporting multiple GPUs (i.
- FIG. 10 A 1 is a schematic representation of possible packaging of the SOC-based graphics hub chip 101 depicted in FIG. 10A , wherein multiple GPUs 715 , 716 and hardware-based Decomposition Submodule 401 ′′, Distribution Module 402 ′′, and Recomposition Module 4 - 3 ′′ are realized on a single SOC implementation 1001 mounted on a single graphics card 1002 ;
- FIG. 10B is a schematic block representation of an illustrative implementation of the MMPGRS of the present invention following the Hub+GPU-Recomposition Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , wherein (i) the AMCM and Decomposition Submodule No. 1 are realized as a software package 711 on the host memory space (HMS), (ii) a single SOC-based graphics chip 1003 mounted on a single graphics card 1002 is interfaced with a bridge circuit on the motherboard 1002 , and supporting multiple GPUs (i.e. the primary GPU and secondary GPUs), (iii) hardware-based Decomposition Submodule No.
- HMS host memory space
- a single SOC-based graphics chip 1003 mounted on a single graphics card 1002 is interfaced with a bridge circuit on the motherboard 1002 , and supporting multiple GPUs (i.e. the primary GPU and secondary GPUs)
- the Distribution Module are implemented on the SOC-based graphics hub chip 1001 , (iv) the Recomposition Module is implemented across two or more GPUs 715 , 716 , and (v) a graphics display device is connected to the primary GPU by way of a display interface implemented on the SOC-based graphics hub chip;
- FIG. 10 B 1 is a schematic representation of possible packaging of the SOC-based graphics hub chip 101 depicted in FIG. 10B , wherein multiple GPUs 715 , 716 and hardware-based Decomposition Submodule 401 ′′, Distribution Module 402 ′′, and Recomposition Module 4 - 3 ′′ are realized in the primary GPU of a single SOC implementation 1003 mounted on a single graphics card 1002 ;
- FIG. 10C is a schematic block representation of an illustrative implementation of the MMPGRS of the present invention following the HMS+GPU-Recomposition Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , wherein (i) the AMCM, Decomposition Module and Distribution Module are realized as a software package 701 on the host memory space (HMS), (ii) a single multi-GPU chip 1031 mounted on a single graphics card 1002 is interfaced with a bridge circuit on the motherboard, and supporting multiple GPUs (i.e.
- HMS host memory space
- the Recomposition Module is implemented across two or more GPUs 715 , 716 , and (iv) a graphics display device is connected to the primary GPU by way of a display interface implemented on the multi-GPU chip;
- FIG. 10 C 1 is a schematic representation of possible packaging of the multi-GPU chip 1031 depicted in FIG. 10C , wherein multiple GPUs 715 , 716 and Recomposition Module/Process 403 ′′ are implemented in the primary GPU 715 of a multi-GPU chip 1031 ;
- FIG. 11A is a schematic block representation of an illustrative implementation of the MMPGRS following the Chipset Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , wherein (i) the AMCM and Decomposition Submodule No. 1 are realized as a software package 711 within the host memory space (HMS) of the host computing system, (ii) plurality of GPUs 852 on one or more external graphics cards 851 is connected to the bridge circuit on the host computing platform, (iii) an integrated graphics device (IGD) 1101 , supporting hardware-based Decomposition Submodule No.
- HMS host memory space
- IGD integrated graphics device
- the Distribution Module 402 ′′ and Recomposition Module 403 ′′ are implemented within the bridge circuit 1101 on the motherboard 814 of the host computing system, and (iv) a display device is interfaced to the primary GPU by way of a PCI-express interface or the like;
- FIG. 11 A 1 is a schematic representation of a first illustrative embodiment of the Chipset MMPGRS implementation of FIG. 11A , wherein multiple discrete graphics cards 851 , each supporting at least a single GPU, are interfaced with the bridge circuit on a board within an external box 821 that is interfaced to the motherboard within the host computing system;
- FIG. 11 A 2 is a schematic representation of a second illustrative embodiment of the Chipset MMPGRS implementation of FIG. 11A , wherein discrete multiple graphics cards 851 , each supporting at least a single GPU, are interfaced with the bridge circuit chipset of the CPU motherboard by way of a PCI-express or like interface;
- FIG. 11 A 3 is a schematic representation of a third illustrative embodiment of the Chipset MMPGRS implementation of FIG. 11A , wherein multiple GPUs are realized on a single graphics card 852 which is interfaced to bridge circuit on the CPU motherboard by way of a PCI-express or like interface;
- FIG. 11B is schematic representation of an illustrative implementation of the MMPGRS following the CPU/GPU Fusion Class of MMPGRS Architecture or Multi-Core Class MMPGRS Architecture described in FIG. 7 A 1 - 2 , wherein (i) a CPU/GPU fusion-architecture chip or a multi-core CPU chip is mounted on the motherboard of a host computing system having memory and North and South bridge circuits, (ii) the software-based AMCM and Decomposition Submodule No. 1 are realized as a software package 701 within the host memory space (HMS) of the host computing system while Decomposition Submodule No.
- HMS host memory space
- the Distribution Module and the Recomposition Module are realized on the die of the CPU/GPU fusion-architecture chip or the multi-core CPU chip, and (iii) multiple GPUs on external graphic cards or elsewhere, are interfaced to the CPU/GPU fusion-architecture chip or the multi-core CPU chip, by way of a PCI-express or like interface, and (iv) a display device is interfaced to the primary GPU by way of a PCI-express interface or the like.
- FIG. 11 B 1 is a schematic representation of a first illustrative embodiment of the CPU/GPU Fusion or Multi-Core MMPGRS implementation of FIG. 11B , wherein a CPU/GPU Fusion or Multi-Core chip is used to drive an assemble of graphic cards or GPUs on one or more external graphics cards 851 ;
- FIG. 11 B 2 is a schematic representation of a second illustrative embodiment of the Chipset MMPGRS implementation of FIG. 11B , wherein a CPU/GPU Fusion or Multi-Core chip is used to drive an assemble of GPUs on a single external graphics card 852 ;
- FIG. 11 B 3 is a schematic representation of a third illustrative embodiment of the Chipset MMPGRS implementation of FIG. 11B , wherein a CPU/GPU Fusion or Multi-Core chip is used to drive only an assemble of internal GPUs on the CPU/GPU Fusion or Multi-Core chip;
- FIG. 11C is schematic representation of an illustrative implementation of the MMPGRS following the Game Console Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , wherein (i) the AMCM 400 and Decomposition Submodule No. 1 401 ′ are realized as a software package within the host memory space (HMS) of the game console system, (ii) a graphics hub chip 401 ′′, 402 ′′, 403 ′′, 404 ′′ mounted on the PC board of the game console system implements the Decomposition Submodule No. 2 401 ′′, the Distribution Module 402 ′, the Recomposition Module 403 ′ as well as an interconnect network (e.g.
- HMS host memory space
- crossbar switch 404 ′′
- multiple GPUs on the PC board of the game console system are interfaced to Distribution and Recomposition Modules by way of the interconnect 404 ′′ within the graphics hub chip, and optionally, the Recomposition Module can be implemented within two or more GPUs 715 , 716 , and (iv) a display device 106 is interfaced to the primary GPU by way of an analog display interface or the like;
- FIG. 11 C 1 is a schematic representation of an illustrative embodiment of the Game Console MMPGS implementation of FIG. 11D , showing its controller in combination with its game console unit;
- FIG. 12A is a schematic representation of a multi-user computer network supporting a plurality of client machines, wherein one or more client machines (i) employ the MMPGRS of the present invention following any MMPGRS Architecture described in FIG. 7 A 1 - 2 , and (ii) respond to user-system interaction input data streams from one or more network users who might be local to each other as over a LAN, or be remote to each other, as when operating over a WAN or the Internet infrastructure; and
- FIG. 12B is a schematic representation of a multi-user computer network supporting a plurality of client machines, wherein one or more client machines (i) employ the MMPGRS of the present invention following any MMPGRS Architecture described in FIG. 7 A 1 - 2 , and (ii) respond to user-system interaction input data streams from one or more network users who might be local to each other as over a LAN, or be remote to each other, as when operating over a WAN or the Internet infrastructure.
- MMPGRS Multi-Mode Parallel Graphics Rendering System
- MMPGRP Multi-Mode Parallel Graphics Rendering Process
- one aspect of the present invention teaches how to dynamically retain high and steady performance of a three-dimensional (3D) graphics system on conventional platforms (e.g. PCs, laptops, servers, etc.), as well as on silicon level graphics systems (e.g. graphics system on chip (SOC) implementations, integrated graphics device IGD implementations, and hybrid CPU/GPU die implementations).
- SOC graphics system on chip
- the MMPGRS and MMPGRP of the present invention fulfills a great need in the marketplace by providing a highly-suited parallelism scheme.
- different GPPL-based parallel rendering schemes supported on the MMPGRS, dynamically alternate throughout the course of any particular graphics application running on the host system in which the MMPGRS is embodied, and adapting the optimal parallel rendering method (e.g. Image/Frame, Time or Object Division) in real-time to meet the changing needs of the graphics application(s).
- the MMPGRS of the Present Invention employs Automatic Mode and Control Module (AMCM)
- FIG. 4A shows the MMPGRS of the present invention employing automatic 3D scene profiling and multiple GPPL control, and supporting at least three different parallelization modes (e.g. Image/Frame, Time and Object Division).
- the MMPGRS comprises two primary subcomponents, namely:
- Multi-Mode Parallel Graphics Rendering Subsystem 420 including (i) a Decomposition Module 401 , Distribution Module 402 and Recomposition Module 403 for supporting three stages of parallelization namely decomposition, distribution, and recomposition, and (ii) an Array or Cluster of Graphic Processing Pipelines (GPPLs) for supporting and driving Graphics Rendering and Image Display Processes; and
- GPPLs Graphic Processing Pipelines
- AMCM Automatic Mode Control Module
- the GPPLs can be realized in various ways, including (i) Graphic Processing Units (GPUs) 407 as shown in FIGS. 4 B 1 and 4 B 2 , and/or (ii) Computational Processing Units (CPUs), or CPU-cores, as shown in FIGS. 4 B 3 and 4 B 4 .
- GPUs Graphic Processing Units
- CPUs Computational Processing Units
- CPU-cores CPU-cores
- the Graphics Commands and Data (CGAD) to the MMPGRS will typically be produced and provided from the Graphics-based Application being executed by one or more CPUs and associated memory on the host computing system.
- the Interaction Data will be supplied from the user or users interaction with the host computing system.
- the host computing system may be a PC-level computer, application server, laptop, game console system, portable computing system, or the like supporting the real-time generation and display of 3D graphics), and that the MMPGRS may be embodied within any such system in accordance with the principles of the present invention.
- each GPPL employed within the MMPGRS of the present invention can be realized in a variety of different ways.
- each graphics processing pipeline will typically include some basic structures including for example, video memory and a computational unit such as a GPU, or CPU having multi-cores typically implementing SIMD elements.
- the graphic processing pipelines are often considered “hard” graphical processing pipelines.
- the graphic processing pipelines are often considered “soft” graphical processing pipelines.
- each graphic processing pipeline provides sufficient computational and memory/buffering resources to carry out the execution of graphics commands and the processing of graphics data, as specified by the graphical rendering processed required by the graphics-based Application running on the host computing system, at any particular instant in time.
- FIGS. 4 B 1 and 4 B 2 two illustrative embodiments for the GPU-based graphics processing pipeline approach are shown.
- FIG. 4 B 3 one illustrative embodiment is shown for the CPU-based graphics processing pipeline approach.
- each GPU-based graphics processing pipeline (GPPL) deployed in the MMPGRS of a first illustrative embodiment comprises: (i) video memory (e.g. a stencil memory buffer, a depth memory buffer, and a color memory buffer); and (ii) a classic shader-based GPU which includes: a geometry subsystem; a set up engine; and a pixel subsystem.
- the geometry subsystem further comprises a vertex shader which implements a graphics processing function that perform is 3D geometrical transformations and lighting calculations on the objects' vertex data.
- the Setup engine assembles primitives (lines, points, triangles) from vertices, assigns parameters to primitives, divides the primitives into tiles, and distributes these tiles to the pixel pipelines of the Pixel subsystem.
- the Pixel subsystem further comprises: a pixel shader for receiving input from the Setup engine and the video memory and performing shading and texturing of pixels; and a plurality of raster operators which receive output from the pixel shader and produce blending, z-buffering and antialiasing of pixels, storing them into Frame Buffer buffer.
- This graphics pipeline architecture can be found used in conventional graphics devices such as nVidia's GeForce 7700.
- each GPU-based graphics processing pipeline (GPPL) deployed in the MMPGRS of a second illustrative embodiment comprises: (i) video memory (e.g. a stencil memory buffer, a depth memory buffer, and a color memory buffer); and (ii) a shader-based GPU which includes: a geometry subsystem; a rasterizer; and a pixel subsystem.
- video memory e.g. a stencil memory buffer, a depth memory buffer, and a color memory buffer
- shader-based GPU which includes: a geometry subsystem; a rasterizer; and a pixel subsystem.
- the geometry subsystem further comprises: an input assembler for gathering vertex data from the CPU and converting its format, and generating various index IDs that are helpful for performing various repeated operations on vertices, primitives, and scene objects; a vertex shader for performing 3D geometrical transformations and lighting calculations on the objects' vertex data; and a geometry shader permitting a range of effects and features, such as process entire primitives as inputs and generate entire primitives as output, rather than processing just one vertex at a time, as with a vertex shader, while reducing dependence on the CPU for geometry processing.
- the stream output permits data generated from geometry shaders to be forwarded back to the top of the pipeline to be processed again.
- the rasterizer assembles primitives (lines, points, triangles) from vertices, assigns parameters to primitives, and converts them into pixels for output to the Pixel subsystem.
- the pixel subsystem further comprises: a pixel shader for receiving input from the Setup engine and the video memory and performing shading and texturing of pixels; and a plurality of raster operators which receive output from the pixel shader and produce blending, z-buffering and anti-aliasing of pixels, storing them out into Frame Buffer (FB).
- This graphics pipeline architecture can be found used in conventional graphics devices such as nVidia's GeForce 8800 GTX.
- each CPU-based graphics processing pipeline (GPPL) deployed in the MMPGRS of a third illustrative embodiment comprises: (i) a video memory structure supporting a frame buffer (including stencil, depth and color buffers); (ii) a memory controller; (iii) a graphics processing pipeline realized by one cell of a multi-core CPU chip, consisting of 16 in-order SIMD processors; (iv) L2 cache memory; and (v) a GPU-specific extension, namely, a texture sampler, for loading texture maps from memory, filtering them for level-of-detail, and feeding the same to the pixel processing portion of the graphic processing pipeline (GPPL).
- This graphics pipeline architecture can be found used in such conventional devices as Larrabee multi-core processor by Intel.
- the array of GPPLs 407 comprises N pairs of GPU or CPU and Video Memory pipelines
- only one GPPL in the array termed “primary GPPL,” is responsible for driving the display unit which may be realized as a LCD panel, an LCD or DLP Image/Video “Multi-Media” Projector, or the like. All other GPPLs in the array are deemed “secondary GPPLs.”
- each stage (or Module) is induced or set up into a sub-state by a set of parameters managed within the MMPGRS, namely: parameter A for Module 401 ; parameter B for Module 402 ; and parameter C for Module 403 .
- the state of parallelism of the overall MMPGRS is established by the combination of sub-state parameters A, B and C, as listed in the Mode/State Definition Table of FIG. 4C , which will be elaborated hereinafter.
- Multi-Mode Parallel Graphics Rendering Subsystem 420 stems from its ability to quickly change its sub-states, resulting in transition of the overall graphic system (i.e. MMPGS) to another parallel state of operation, namely: the Object Division State, the Image Division State or the Time Division State, as well as to other potential parallelization schemes that may be developed and readily programmed into the MMPGRS platform of the present invention.
- MMPGS overall graphic system
- the Decomposition Module 401 , Distribution Module 402 and Recomposition Module 403 cooperate to carry out all functions required by the different parallelization schemes supported on the MMPGRS platform of the present invention. It is appropriate at this juncture to described how the primary modes of parallelism (i.e. Image, Time and Object Division) are implemented on the MMPGS using combinations of sub-state parameters (A:B:C).
- each GPU renders the next successive frame.
- the Single GPPL State of Operation is a non-parallel state of operation, it is allowed and supported in the system of the present invention as this state of operation is beneficial in some exceptional cases.
- the primary function of the Decomposition Module 401 is to divide (i.e. split up) the stream of graphic commands and data (GCAD) according to the required parallelization mode, operative at any instant in time.
- GCAD graphic commands and data
- the typical graphic processing s pipeline is fed by stream of graphic commands and data from the application and graphics library (OpenGL or Direct 3D). This stream, which is sequential in nature, has to be properly handled and eventually partitioned, according to parallelization mode (i.e. method) used.
- parallelization mode i.e. method
- the Decomposition Module 401 is preferably implemented using two submodules, namely: (i) a Decomposition Submodule No. 1 including an OS-GPU Interface and Utilities Module; and (ii) a Decomposition Submodule No. 2 , including a Division Control Module and a State Monitoring Module.
- a Decomposition Submodule No. 1 including an OS-GPU Interface and Utilities Module
- a Decomposition Submodule No. 2 including a Division Control Module and a State Monitoring Module.
- the subcomponents of these submodules will be described in detail below.
- the OS-GPU Interface and Utilities Module performs all the functions associated with interaction with the Operating System (OS), Graphics Library (e.g. OpenGL or DirectX), and interfacing with GPUs or CPU-cores, as the case may be.
- the OS-GPU Interface and Utilities Module is responsible for interception of the graphic commands from the standard graphic library, forwarding and creating graphic commands to the Vendor's GPU Driver, controlling registry, installations, OS services and utilities. Another task performed by this module is reading Performance Data from different sources (e.g. GPUs, vendor's driver, and chipset) and forwarding the Performance Data to the Automatic Mode Control Module (AMCM).
- ACM Automatic Mode Control Module
- the OS-GPU Interface and Utilities Module includes software drivers that drive subcomponents within the Decomposition, Distribution and/or Recomposition Modules that are implemented in system architectures (e.g. Hub, Chipset, etc identified in FIG. 4 A 1 - 2 and shown in FIGS. 7 B 1 through 7 B 11 ) in which both the Decomposition and Distribution Modules are not implemented as software packages within the Host Memory Space (HMS) of the host computing system in which the MMPGRS is embodied.
- system architectures e.g. Hub, Chipset, etc identified in FIG. 4 A 1 - 2 and shown in FIGS. 7 B 1 through 7 B 11
- HMS Host Memory Space
- the Division Control Module controls the division parameters and data to be processed by each GPU, according to parallelization scheme instantiated at any instant of system operation (e.g. division of data among GPUs in the Object Division Mode, or the partition of the image screen among GPUs in the Image Division Mode).
- the Division Control Module assigns for duplication all the geometric data and common rendering commands to all GPUs. However specific rendering commands to define clipping windows corresponding to image portions at each GPU, are assigned separately to each GPU.
- polygon division control involves sending each polygon (in the scene) randomly to a different GPU within the MMPGRS. This is an easy algorithm to implement, and it turns out to be quite efficient. There are different variations of this basic algorithm, as described below.
- the vertex-arrays can be maintained in their entirety and sent to different GPUs, as the input might be in the form of vertex arrays, and dividing it may be too expensive.
- GPU loads are detected at real time and the next polygon is sent to the least loaded GPU.
- Dynamic load balancing is achieved by building complex objects (out of polygons). GPU loads are detected at real time and the next object is sent to the least loaded GPU.
- the graphic libraries are state machines. Parallelization must preserve a cohesive state across all of the GPU pipelines in the MMPGRS. According to this method, this is achieved by continuously analyzing all incoming graphics commands, while the state commands and some of the data is duplicated to all graphics pipelines in order to preserve the valid state across all of the graphic pipelines in the MMPGRS. This function is exercised mainly in Object Division Mode, as disclosed in detail in Applicant's previous International Patent PCT/IL04/001069, now published as WIPO International Publication No. WO 2005/050557, incorporated herein by reference in its entirety.
- the primary function of the Distribution Module 402 is to physically distribute the streams of graphics data and commands to the cluster of GPUs supported on the MMPGRS platform.
- an additional source of Performance Data i.e. beyond the GPUs, vendor's driver, and chipset
- Performance Data includes the internal Profiler employed in the Distribution Module in Hub-based embodiments of the present invention.
- the Distribution Module is implemented by the following components: (i) the Distribution Management Module, which addresses the streams of graphics commands and data to the different GPPLs via chipset outputs, according to needs of the parallelization schemes instantiated by the MMPGRS; (iii) Profiler module used in graphics hub type system architectures, as illustrated in FIGS. 7 B 1 through 7 B 12 , so as to provide an additional source of Performance Data (i.e. beyond the GPUs, vendor's driver, and chipset); and (iv) a Hub Control module, operating under control of the Distributed Graphics Function Control Module 409 within the AMCM 400 , in graphics hub type system architectures, as illustrated in FIGS. 7 B 1 through 7 B 12 , for configuring the Interconnect Network 404 according to the various parallelization modes and to coordinate the overall functioning of hardware components within the Recomposition Module across the graphics hub device (GHD) of the present invention.
- the Distribution Management Module which addresses the streams of graphics commands and data to the different GPPLs via chipset outputs, according to needs of
- the Distribution Module 402 comprises three functional units: the Distribution Management, the Profiler, and the Hub Control modules.
- the Distribution Management activates the Interconnect network 404 to transfer command and data stream to the GPPLs.
- the Interconnect network serves to (i) transfer command and data stream from the CPU to GPPLs, (ii) transfer raster data from GPPLs to the Recomposition Module, (iii) transfer raster data among GPPUs for an alternative GPPL-based Recomposition, and (iv) conduct other communication tasks, such as profiling data, control, etc. among the various system components.
- Interconnect for a cluster of 4 GPPLs is a configurable switch with 5 way PCI express ⁇ 16 lanes, having one upstream path between Hub and CPU, and 4 downstream paths between Hub and four GPUs. It receives upstream of commands and data from the CPU, and transfers them downstream to GPPLs, under the control of Distribution Management unit (of Distribution module), following the data division scheme generated by the Division Control block of Decomposition sub-module ( 2 ), according to ongoing parallel division mode.
- the switch can be set into one of the following possible transfer sub-states: Divide, Broadcast, and Single.
- the Divide sub-state is set when the MMGPRS is operating in its Object Division Mode.
- the Broadcast sub-state is set when the MMGPRS is operating in its Image Division Mode.
- the Single sub-state is set when the MMGPRS is operating in its Time Division Mode, or in Single mode.
- the Profiler Unit 407 ′ has several functions in system architectures employing graphics hub device (GHD)s as illustrated in FIG. 7 B 1 through 7 B 12 , namely: (i) to deliver to Division Control its own generated profiling data; (ii) to forward the profiling data from GPUs to Division Control, due the fact that the GPUs are not directly connected to the host computing system in graphics hub based system architectures, whereas they are in system architectures illustrated in FIGS. 7 A 2 through 7 A 7 - 3 ; and (iii) to forward the Hub pre-GPU profiling data to the Division Control block within the Decomposition Module.
- the Profiler 403 monitors the stream of geometric data and commands, for graphics hub profiling purposes. Such monitoring operations involve polygon, command, and texture count and quantifying data structures and their volumes for load balance purposes.
- the collected data is mainly related to the performance of the geometry subsystem employed in each GPU.
- the Hub Controller Module 409 ′ operates under control of the Distributed Graphics Function Control Module 409 within the Automatic Mode Control Module 400 .
- the primary function performed by this Hub Controller Module 409 ′ is to configure the Interconnect Network 404 according to the various parallelization modes and to coordinate the overall functioning of hardware components across the Distribution Module of the graphics hub device (GHD) of the present invention.
- the primary function of the Recomposition Module 403 is to merge together, the partial results of multiple graphics pipelines, according to parallelization mode that is operative at any instant in time.
- the Test based sub-state carries out re-composition based on a test performed on partial frame buffer pixels. Typically, these tests include the depth test, the stencil test, or combination thereof.
- the Screen based sub-state combines together parts of the final frame buffers, in a puzzle like fashion, creating a single image.
- the None sub-state, or submode makes no merges, just moves one of the pipeline frame buffers to the display, as required in time division parallelism or in single GPU (Non-Parallel) mode of operation.
- the Test-Based Compositing suits compositing during the Object Division Mode.
- sets of Z-buffer, stencil-buffer and color-buffer are read back from the GPU FBs to host's memory for compositing.
- the pixels of color-buffers from different GPUs are merged into single color-buffer, based on per pixel comparison of depth and/or stencil values (e.g. at given x-y position only the pixel associated with the lowest z value is let out to the output color-buffer).
- This is a software technique to perform hidden surface elimination among multiple frame buffers required for the Object Division Mode.
- Frame buffers are merged based on depth and stencil tests. Stencil tests, with or without combination with depth test, are used in different multi-pass algorithms.
- the final color-buffer is down-loaded to the primary GPU for display.
- the Screen-Based compositing involves a puzzle-like merging of image portions from all GPUs into a single image at the primary GPU, which is then sent out to the display. This method is a much simpler procedure than the Test-Based Compositing Method, as no tests are needed. While the primary GPU is sending its color-buffer segment to display, the Merger Module reads back other GPUs color-buffer segments to host's memory, for downloading them into primary GPU's FB for display.
- the None Sub-state is a non-compositing option which involves moving the incoming Frame Buffer to the display. This option is used when no compositing is required.
- a single color-buffer is read back from a GPU to host's memory and downloaded to primary GPU for display.
- the Non-Parallel Mode e.g. employing a single GPPL
- usually the primary GPPL is employed for rendering, so that no host memory transit is needed.
- the Recomposition Module is realized by several modules: (i) the Merge Management Module which handles the reading of frame buffers and the compositing during the Test-Based, Screen-Based And None Sub-States; (ii) the Merger Module which is an algorithmic module that performs the different compositing algorithms, namely, Test Based Compositing during the Test-Based Sub-state, and Screen Based Compositing during the Screen-Based Sub-state; (iii) Profiler module used in graphics hub type system architectures, as illustrated in FIGS. 7 B 1 through 7 B 12 , so as to provide an additional source of Performance Data (i.e.
- a Hub Control module operating under control of the Distributed Graphics Function Control Module 409 within the AMCM 400 , in graphics hub type system architectures, as illustrated in FIGS. 7 B 1 through 7 B 12 , for configuring the Interconnect Network 404 according to the various parallelization modes and to coordinate the overall functioning of hardware components within the Recomposition Module across the graphics hub device (GHD) of the present invention.
- GDD graphics hub device
- a configurable switch can be used having 5 way PCI express ⁇ 16 lanes, with one upstream path between the Hub and CPU, and 4 downstream paths between Hub and four GPUs.
- the Interconnect e.g.
- switch also performs the following functions: (i) transferring read-back FB raster data from GPPLs to the Merger block of Recomposition Module and returning composited image to primary GPPL, all under orchestration of the Merge Management block; (ii) transferring the read-back FB raster data among GPPLs for GPPL-based recomposition, so that the finally recomposited pixel data in final image is composited in the primary GPPL; (iii) transferring additional data, e.g. profiler data, to Decomposition module; and (iv) transferring control commands across the MMPGRS system.
- the Profiler unit 403 has several functions in system architectures employing graphics hub device (GHD)s as illustrated in FIG. 7 B 1 through 7 B 12 , namely: (i) to deliver to Division Control its own generated profiling data; (ii) to forward the profiling data from GPUs to Division Control, due the fact that the GPUs are not directly connected to the host computing system in graphics hub based system architectures, whereas they are in system architectures illustrated in FIGS. 7 A 2 through 7 A 7 - 3 ; and (iii) to forward the Hub post-GPU profiling data to the Division Control block within the Decomposition Module.
- the Profiler 403 monitors the stream of geometric data and commands, for graphics hub profiling purposes. Such monitoring operations involve polygon, command, and texture count and quantifying data structures and their volumes for load balance purposes.
- the collected data is mainly related to the performance of the geometry subsystem employed in each GPU.
- GDD graphics hub device
- AMCM Automatic Mode Control Module
- FIG. 4A the communication linkage between the two Profiling blocks is achieved using the Interconnect network 404 .
- the two “pre-GPU” and “post-GPU” units of the graphics hub device (GHD), formed by the components within the Distribution and Recomposition Modules of system architectures illustrated in FIGS. 7 B 1 through 7 B 12 , may reside on the same silicon chip, having many internal interconnections, whereas in other illustrative embodiments, these subcomponents may be realized on different pieces of silicon or functionally like semiconductor material, used to fabricate the graphics hub device (GHD)s of the present invention within diverse embodiments of the MMPGRS of the present invention.
- the Hub Controller Module 409 ′ operates under control of the Distributed Graphics Function Control Module 409 within the AMCM 400 .
- the primary function performed by this Hub Controller Module 409 ′ is to configure the Interconnect Network 404 according to the various parallelization modes and to coordinate the overall functioning of hardware components across the Recomposition Module of the graphics hub device (GHD) of the present invention.
- the Hub Controllers 409 ′ in the Distribution and Recomposition Modules in system architectures embraced by the graphics hub device (GHD) of the present invention, can be realized as a single device or unit, on the same piece of silicon or like semiconductor material.
- the Hub Controllers 409 ′ can be realized as discrete units, on the same piece of silicon or like semiconductor material, or on separate pieces of silicon material (e.g. on different chips sets).
- AMCM Automatic Mode Control Module
- the MMPGRS renders and displays the graphics environment being generated by the application, which typically will include many dynamically changing scenes, where the plot unfolds, and each scene typically involves a sequence of many image frames.
- scenes could involve virtually anything, including a forest with many leaves moving in the wind, a lake with many reflections, or a closed space in a castle with many light sources.
- Such scenes require parallel rendering, and the role of the MMPGS is to automatically determine which mode of parallel operation will result in optimal performance on the host computing system.
- the Automatic Mode Control Module (AMCM) 400 comprises three algorithmic modules, namely: an Application Profiling and Analysis Module 407 ; a Parallel Policy Management Module 408 ; and a Distributed Graphics Function Control.
- the AMCM also comprises two data stores: a Historical Repository 404 ; and a Application/Scene Profile Database 405 .
- the primary function of the AMCM is to control the state of Multi-mode Parallel Rendering Subsystem 410 by virtue of its flexible multi-state behavior and fast interstate transition capabilities.
- the AMCM 400 comprises a User Interaction Detection (UID) Subsystem 438 which includes a Detection and Counting Module 433 in combination with a UID Transition Decision Module 436 .
- UID User Interaction Detection
- AMCM Automatic Mode Control Module or Mechanism
- This method involves collecting and analysis of Performance Data, during application run-time, in order to construct scene profiles for image frames associated with particular scenes in a particular graphics-based application, and maintaining these scene profiles in the Scene/Application Profile Database within the AMCM.
- the AMCM can access and use these scene profiles so as to best determine how to dynamically control the modes of parallel operation of the MMPGRS to optimize system performance.
- this technique can be practiced using the Application Profiling and Analysis Module 407 and Parallel Policy Management Module 408 illustrated in FIGS.
- This technique involves analyzing, prior to run-time, the scenes of a particular application, and then indexing the scene with Scene Profile Indices and storing corresponding Mode Control Parameters (MCPs) (e.g. Switch to Object Division Mode) within the local Scene/Application Profile Database within the AMCM, or other data storage device that is accessible in real-time by the AMCM during application run-time. Then during run-time, the AMCM automatically detects the scene, and consults the Scene Profile Indices for the corresponding MCPs from the Scene/Application Profile Database so as to best determine how to dynamically control the modes of parallel operation of the MMPGRS to optimize system performance.
- MCPs Mode Control Parameters
- MCCs Mode Control Command
- This technique involves, prior to run-time (e.g. during game application development), analyzing the scenes of a particular application, and the directly programming Mode Control Commands (MMCs) (e.g. Switch to Object Division Mode) within the individual image frames of each scene, following standards to be established and followed by developers in the computer graphics industry. Then during run-time, the MCM automatically detects these MCCs along the graphics command and data stream, and use these commands so as to best determine how to dynamically control the modes of parallel operation of the MMPGRS to optimize system performance.
- MMCs Mode Control Commands
- This approach which can be used in conjunction with any of the above Scene/Application Profiling Techniques, involves automatically detecting the users interaction with the host computing system (e.g. mouse device movement, keyboard depressions, etc) and providing this Interaction Data to the AMCM so that it can best determine how to dynamically control the modes of parallel operation of the MMPGRS to optimize system performance, given the user's interaction with the host computing system, or application running thereon, at any instance in time.
- this technique can be practiced using the UID Subsystem 438 illustrated in FIGS. 5A , 5 B and 5 C 2 .
- the Application Profiling and Analysis Module 407 monitors and analyzes Performance and Interactive data streams continuously acquired by profiling the Application while its running.
- the Performance Data inputs provided to the Application Profiling and Analysis Module include: texture count; screen resolution; polygon count; utilization of geometry engine, pixel engine, video memory and GPPL; the total pixels rendered, the total geometric data rendered; the workload of each GPPL; the volumes of transferred data.
- the System-User Interactive (Device) Data inputs provided to the Application Profiling and Analysis Module include: mouse movement; head movement; voice commands; eye movement; feet movement; keyboard; LAN, WAN or Internet (WWW) originated application (e.g. game) updates.
- the Tasks performed by the Application Profiling and Analysis Module include: Recognition of the Application; Processing of Trial and Error Results; Utilization of Application Profile from Application/Scene Profile Database; Data Aggregation in the Historical Depository; Analysis of input performance data (frame-based); Analysis based on integration of frame-based “atomic” performance data, aggregated data at Historical Depository, and Application/Scene Profile Database data; Detection of rendering algorithms used by Application; Detection of use of FB in next successive frame; Recognition of preventative conditions (to parallel modes); Evaluation of pixel layer depth; Frame/second count; Detection of critical events (e.g. frames/sec/drop); Detection of bottlenecks in graphics pipeline; Measure of load balance among GPUs; Update Application/Scene Profile Database from the Historical Depository; and Recommendation on optimal parallel scheme.
- the Application Profiling and Analysis Module performs its analysis based on the following:
- Performance Data collected from several sources such as vendor's driver, GPUs, chipset, and optionally—from the graphics Hub embodiments of the present invention, described in greater detail hereinafter;
- Historical repository 404 which continuously stores up the acquired data (i.e. this data having historical depth, and being used for constructing behavioral profile of ongoing application);
- Knowledge based Application/Scene Profile Database 405 which is an application profile library of prior known graphics applications (and further enriched by newly created profiles based on data from the Historical Depository).
- the choice of parallel rendering mode at any instant in time involves profiling and analyzing the system's performance by way of processing both Performance Data Inputs and Interactive Device Inputs, which are typically generated from a several different sources within MMPGRS, namely: the GPUs, the vendor's driver, the chipset, and the graphic Hub (optional).
- Performance Data needed for estimating system performance and locating casual bottlenecks includes:
- this Performance Data is fed as input into the Application Profiling and Analysis Module for real-time processing and analysis Application Profiling and Analysis Module.
- the Application Profiling and Analysis Module performs the following tasks:
- Parallel Policy Management Module 408 makes the final decision regarding the preferred mode of parallel graphics rendering used at any instant in time within the MMPGRS, and this decision is based on the profiling and analysis results generated by the Application Profiling and Analysis Module. The decision is made on the basis of some number N of graphics frames. As shown above, the layer depth factor, differentiating between the effectiveness of the Object Division vs. Image Division Mode, can be evaluated by analyzing the relationship of geometric data vs. fragment data at a scene, or alternatively can be found heuristically. Illustrative control policies have been described above and in FIGS. 5 C 1 through 5 C 3 .
- Distributed Graphic Function Control Module 409 carries out all the functions associated with the different parallelization modes, according to the decision made by the Parallel Policy Management Module.
- the Distributed Graphic Function Control Module 409 drives directly the configuration sub-states of the Decomposition, Distribution and Recomposition Modules, according to the parallelization mode.
- Application Profiling and Analysis includes drivers needed for hardware components such as graphic Hub, described hereinafter in the present Patent Specification.
- the MMPGRS of the illustrative embodiment has six (6) system states.
- Three of these system states are parallel graphics rendering states, namely: the Image Division State, which is attained when the MMPGRS is operating in its Image Division Mode; the Object Division State, which is attained when the MMPGRS is operating in its Object Division Mode; and the Time Division State, which is attained when the MMPGRS is operating in its Time Division Mode.
- the system also includes a Non-Parallel Graphics Rendering State, which is attained only when a single GPPL is operational during the graphics rendering process. There is also an Application Identification State, and a Trial & Error Cycle State. As illustrated in FIG. 4C and FIG.
- each parallelization state is characterized by sub-state parameters A, B, C.
- the Non-Parallel (i.e. Single GPPL) State is reachable from any other state of system operation.
- profiles of all previously analyzed and known graphics-based Applications are stored in the Application/Scene Profile Database 405 of the MMPGRS.
- the system enters Application Identification State, and the AMCM attempts to automatically identify whether this application is previously known to the system.
- the optimal starting state is recommended by the Database, and the system transitions to that system state.
- the AMCM is assisted by the Application/Scene Profile Database to optimize the inter-state tracking process within the MMPGRS.
- the Trial & Error Cycle State is entered, and attempts to run all three parallelization schemes (i.e. Modes) are made for a limited number of cycles.
- the decision by the system as to which mode of graphics rendering parallelization to employ is supported either by continuous profiling and analysis, and/or by trial and error.
- the Trial and Error Process is based on comparing the results of a single, or very few cycles spent by the system at each parallelization state.
- the Time Division Mode is the fastest among the parallel graphics rendering modes of the MMGRS, and this is by virtue of the fact that the Time Division Mode works favorably to reduce geometry and fragment bottlenecks by allowing more time.
- the Time Division Mode i.e. method
- the Time Division Mode suffers from other problems, namely: (i) CPU bottlenecks; (ii) the unavailability of GPU-generated frame buffers to each other, in cases where the previous frame is required as a start point for the successive frame; and also (iii) from pipeline latency. Automatic transition of the MMGPRS to its Object-Division Mode effectively releases the system from transform and video memory loads.
- Time Division Mode may be suitable and perform better than other parallelization schemes available on the MMGPRS of the present invention (e.g. Object-Division Mode and Image-Division Mode).
- the MMPGRS of the present invention employs a User Interaction Detection (UID) Subsystem 438 which enables automatic and dynamic detection of the user's interaction with the system. Absent preventive conditions (such as CPU bottlenecks and need for the same FB in successive frames), the UID subsystem 438 enables timely automated implementation of the Time Division Mode only when no user-system interactivity is detected so that system performance is automatically optimized.
- UID User Interaction Detection
- Transition from Object Division to Image Division follows a combination of one or more of the following conditions:
- Transition from Image Division to Object Division follows a combination of one or more of the following conditions:
- Transition from Object Division to Time Division follows a combination of one or more of the following conditions:
- Transition from Time Division to Object Division follows a combination of one or more of the following conditions:
- Transition from Time Division to Image Division follows a combination of one or more of the following conditions:
- Transition from Image Division to Time Division follows a combination of one or more of the following conditions:
- this capacity of the MMPGRS is realized by the User Interaction Detection (UID) Subsystem 438 provided within the Application Profiling and Analysis Module 407 in the Automatic Mode Control Module of the system.
- the UID subsystem 438 comprises: a Detection and Counting Module 433 in combination with a UID Transition Decision Module 436 .
- the set of interactive devices which can supply User Interactive Data to the UID subsystem can include, for example, a computer mouse, a keyboard, eye-movement trackers, head-movement trackers, feet-movement trackers, voice command subsystems, Internet, LAN, WAN and/or Internet originated user-interaction or game updates, and any other means of user interaction detection, and the like.
- each interactive device input 432 supported by the computing system employing the MMPGRS feeds User Interaction Data to the Detection and Counting Module 433 which automatically counts the elapsed passage of time for the required non-interactive interval.
- the Detection and Counting Module 433 automatically generates a signal indicative of this non-interactivity ( 434 ) which is transmitted to the UID Transition Decision Module 436 .
- UID Transition Decision Module 436 issues a state transition command (i.e.
- an system-user interactivity signal 435 is transferred to the UID Transition Decision Module 436 , thereby initiating the system to return from the then currently Time Division Mode, to its original parallel mode of operation (i.e. the Image or Object Division Mode, as the case may be).
- an Initialization Signal 431 is provided to the Detection and Counting Module 433 when no preventive conditions for Time Division exist.
- the function of the Initialization Signal 431 is to (1) define the set of input (interactive) devices supplying interactive inputs, as well as (2) define the minimum elapsed time period with no interactive activity required for transition to the Time Division Mode (termed non-interactive interval).
- the function of the UID Transition Decision Module 436 is to receive detected inputs 435 and no inputs 434 during the required interval, and, produce and provide as output, a signal to the Parallel Policy Management System, initiating a transition to or from the Time Division Mode of system operation, as shown.
- the UID Subsystem 438 within the MMGPRS can automatically initiate a transition into its Time Division Mode upon detection of user-interactivity, without the system experiencing user lag. Then as soon as the user is interacting with the application, the UID Subsystem of the MMGPRS can automatically transition (i.e. switch) the system back into its dominating mode (i.e. the Image Division or Object Division).
- UID user-interaction detection
- the automated event detection functions described above can be performed using any of the following techniques: (i) detecting whether or not a mouse movement or keyboard depression has occurred within a particular time interval (i.e. a strong criterion); (ii) detecting whether or not the application (i.e. game) is checking for such events (i.e. a more subtle criterion); or (iii) allowing the application's game engine itself to directly generate a signal indicating that it is entering an interactive mode.
- the state transition process between Object-Division/Image-Division Modes and the Time Division Mode initiated by the UID subsystem of the present invention is described in the flow-chart shown in FIG. 5B .
- the UID subsystem is initialized.
- the time counter of the Detection and Counting Module 433 is initialized.
- the UID subsystem counts for the predefined non-interactive interval, and the result is repeatedly tested at Block D.
- the parallel mode is switched, to the Time-Division at Block E by the Parallel Policy Management Module.
- the UID subsystem determines whether user interactive input (interactivity) has been detected, and when interactive input has been detected, the UID subsystem automatically returns the MMPGRS to its original Image or Object Division Mode of operation, at Block G of FIG. 5B .
- Steps A through C test whether the graphics application is listed in the Application/Scene Profile Database of the MMPGRS. If the application is listed in the Application/Scene Profile Database, then the application's profile is taken from the Database at Step E, and a preferred state is set at Step G.
- Steps I-J N successive frames are rendered according to Control Policy, under the control of the AMCM with its UID Subsystem disabled.
- Performance Data is collected, and at Step M, the collected Performance Data is added to the Historical Repository, and then analyzed for next optimal parallel graphics rendering state at Step F.
- the Application/Scene Profile Database is updated at Step N using Performance Data collected from the Historical Repository.
- Steps A through C test whether the graphics application is listed in the Application/Scene Profile Database of the MMPGRS. If the application is listed in the Application/Scene Profile Database, then the application's profile is taken from the Database at Step E, and a preferred state is set at Step G.
- Steps I-J N successive frames are rendered according to Control Policy under the control of the AMCM with its UID Subsystem enabled and playing an active role in Parallel Graphics Rendering State transition within the MMPGRS.
- Performance Data is collected, and at Step M, the collected Performance Data is added to the Historical Repository, and then analyzed for next optimal parallel graphics rendering state at Step F.
- the Application/Scene Profile Database is updated at Step N using Performance Data collected from the Historical Repository.
- the Periodical Trial & Error Process differs from the Profiling and Control Cycle Process/Method described above, based on its empirical approach.
- the best parallelization scheme for the graphical application at hand is chosen by a series of trials described at Steps A through M in FIG. 5 C 3 . After N successive frames of graphic data and commands are processed (i.e. graphically rendered) during Steps N through O, another periodical trial is performed at Steps A through M.
- a preventive condition for any of parallelization schemes can be set and tested during Steps B, E, and H, such as used by the application of the Frame Buffer FB for the next successive frame, which prevents entering the Time Division Mode of the MMPGRS.
- Object Division Mode supersedes the Image Division Mode in that it reduces more bottlenecks.
- the Object Division Mode relaxes bottleneck across the pipeline: (i) the geometry (i.e. polygons, lines, dots, etc) transform processing is offloaded at each GPU, handling only 1/N of polygons (N ⁇ number of participating GPUs); (ii) fill bound processing is reduced since less polygons are feeding the rasterizer; (iii) less geometry memory is needed; and (iv) less texture memory is needed.
- the duration of transform and fill phases differ between the Object and Image Division Modes (i.e. States) of operation.
- the fill function Depth Complexity in Object Division Mode depends on depth complexity of the scene. Depth complexity is the number of fragment replacements as a result of depth tests (the number of polygons drawn on every pixel). In the ideal case of no fragment replacement (e.g.
- DepthComplexity denotes the way the fill time is affected by depth complexity:
- DepthComplexity 2 ⁇ ⁇ E ⁇ ( L / 2 ) E ⁇ ( L ) ( 3 )
- E(L) is the expected number of fragments drawn at pixel for L total polygon layers.
- DepthComplexity 1.
- E is given by:
- Render(n,p) the time for drawing n polygons and p pixels.
- P the time taken to draw one pixel.
- the drawing time is assumed to be constant for all pixels (which may be a good approximation, but is not perfectly accurate).
- the screen space of a general scene is divided into sub-spaces based on the layer-depth of each pixel. This leads to some meaningful figures.
- the improvement factor when using Object Division Mode support is 1.3602643398952217.
- a CAD engine might have a constant layer depth of 4. The improvement factor for interesting cases is shown in a table set forth in copending application Ser. No. 11/789,039,
- the Decomposition, Distribution and Recomposition Modules are set as follows: the Decomposition Module is set on sub-state A- 2 , the Distribution Module is set on sub-state B- 2 , and the Recomposition Module is set on sub-state C- 2 .
- the Decomposition Module splits up the image area into sub-images and prepares partition parameters for each GPPL 6120 . Typically, the partition ratio is dictated by the Automatic Mode Control Module based on load balancing considerations. The physical distribution of these parameters among multiple GPPLs is done by the Distribution Module ( 6124 ).
- the Decomposition, Distribution and Recomposition Modules are set as follows: the Decomposition Module is set on sub-state A- 3 , the Distribution Module is set on sub-state B- 3 , and the Recomposition Module is set on sub-state C- 3 .
- the Decomposition Module aligns a queue of GPPLs 6130 , appoints the next frame to the next available GPPL 6131 , and monitors the stream of commands and data to all GPPLs 6132 .
- the physical distribution of that GCAD stream is performed by the Distribution Module 6134 .
- the control moves to the Recomposition Module which moves the color-FB of the completing secondary GPPL, to the primary GPPLs 6135 .
- the primary GPPL then displays the recomposited image in the FB on the display screen 6136 of the display device.
- the parallel graphics rendering process for a single frame is described in connection with the Object Division Mode of the MMPRS implemented according to the software-based architecture of the present invention.
- the Decomposition, Distribution and Recomposition Modules are set as follows: the Decomposition Module is set on sub-state A- 1 , the Distribution Module is set on sub-state B- 1 , and the Recomposition Module is set on sub-state C- 1 .
- the Decomposition Module activity starts with interception of graphics commands 6140 on their way between standard graphics library (e.g. OpenGL, Dirct3D) and vendor's GPU driver. Each graphics command is tested for blocking mode 6142 , 6143 and state operation class 6144 .
- standard graphics library e.g. OpenGL, Dirct3D
- Blocking operations are exceptional in that they require a composed valid FB data, thus in the Object Division Mode, they have an inter-GPPL effect. Therefore, whenever one of the blocking operations is issued, all the GPPLs must be synchronized. Each frame has at least 2 blocking operations: Flush and Swap, which terminate the frame. State operations (e.g. definition of light source) have an across the board effect on all GPPLS. In both cases the command must be duplicated to all GPPLs, rather than delivered to one of them. Therefore the Distribution Module physically sends the command to all GPPLs 6150 . On the other hand, a regular command that passed the above tests is designated to a single target GPPL 6145 , and sent by Distribution Module to that GPPL 6151 .
- a blocking flag is set on 6147 indicating blocking state.
- the rendering of upcoming commands is mirrored (duplicated) at all of the GPPL, unless an end-of-blocking mode is detected.
- the compositing sequence includes issuing of a flushing command 6149 to empty the pipeline. Such a command is sent to all GPPLs 6152 . Then at each GPPL the color and Z Frame Buffer are read back to host memory 6154 , and all color Frame Buffers are composited based on Z and stencil buffers 6156 . Finally, the resulting Frame Buffer is sent to all GPPLs 6160 .
- state operation commands e.g. glLight, glColor
- glLight e.g. glLight, glColor
- a compositing process is taking place 6153 , 6155 , 6157 , 6158 , very similar to that of blocking mode.
- the merging result is sent to the display screen connected to the primary GPPL.
- FIG. 7 A 1 - 1 sets forth a schematic diagram that illustrates different environments for practicing the embodiments of the MMPGRS of the present invention, namely: Host Memory Space (HMS), Processor/CPU Die Space, Bridge Circuit (IGD) Space, Graphics Hub Space, and External GPU Space.
- HMS Host Memory Space
- IGD Bridge Circuit
- the table describes eleven (11) different Classes of MMPGRS Architecture, defined in terms of the Architectural Spaces specified in FIG. 7 A 1 - 1 in which the primary MMPGRS components are embodied in any particular Class of MMPGRS Architecture, namely: Host Memory Space HMS (software); HMS+IGD; HMS+Fusion; HMS+Multicore; HMS+GPU-Recomposition; HUB; HUB+GPU-Recomposition; Chipset; CPU/GPU Fusion; Multicore CPU; and Game Console.
- Host Memory Space HMS software
- HMS+IGD HMS+Fusion
- HMS+Multicore HMS+GPU-Recomposition
- HUB HUB+GPU-Recomposition
- Chipset CPU/GPU Fusion
- Multicore CPU Multicore CPU
- Game Console the table describes eleven (11) different Classes of MMPGRS Architecture, defined in terms of the Architectural Spaces specified in FIG. 7 A 1 - 1 in which the primary MMPGRS components are embodied in any particular Class of MMPG
- the MMPGRS Architecture Table (i.e. Map) of the illustrative embodiments of the present invention illustrates several things.
- each MMPGRS Architecture illustrated in FIG. 7 A 1 - 2 , the Automatic Mode Control Module (AMCM) 400 and Modules and Submodules of the Multimode Parallel Graphics Rendering Subsystem 401 , 402 , 403 may reside in the different kinds of Architectural Space specified in FIG. 7 A 1 - 1 , while multiple GPPLs, distributed in various ways in such environment, are driven multiple modes of parallelism that are dynamically managed in accordance with the principles of the present invention.
- each Class of MMPGRS Architecture will typically have numerous implementation options, with the illustrative embodiments shown in FIGS. 8 A through 11 D 1 simply being just a handful of possible implementation options.
- the MMPGRS Architecture Table set forth in FIG. 7 A 1 - 2 is by no means a list of all possible Classes of the MMPGRS Architecture, but rather is an exemplary listing of the primary classes which comes to mind of the Inventors at the time of filing the present Application, and that it is expected, in the future, that other architectural spaces will evolve or be developed, thereby providing additional environments in which the MMPGRS of the present invention may be embodied or otherwise practiced.
- Various examples of how the MMPGRS of the present invention can be practiced will be described in greater detail below.
- the first illustrative embodiment of the MMPGRS of the present invention 700 is shown embodied within the HMS Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 .
- the Automatic Mode Control Module (AMCM) 400 and the Decomposition, Distribution and Recomposition Modules 401 , 402 , 403 , respectively, of the Multimode Parallel Graphics Rendering Subsystem resides as a software package 701 in the Host Memory Space (HMS) while multiple GPUs are supported on a pair of external graphic cards 204 , 205 connected to a North memory bridge chip ( 103 ) and driven in a parallelized manner by the modules of the multi-mode parallel graphics rendering subsystem, under the control of the AMCM.
- HMS Host Memory Space
- the Decomposition Module 401 divides (i.e. splits up) the stream of graphic commands and data (GCAD) according to the required parallelization mode, operative at any instant in time, (ii) the Distribution Module 402 uses the North bridge chip to distribute graphic commands and data (GCAD) to the multiple GPUs on board the external graphics cards, (iii) the Recomposition Module 403 uses the North bridge chip to transfer composited pixel data (CPD) between the Recomposition Module (or CPU) and the multiple GPUs during the image recomposition stage, and (iv) finally recomposited pixel data sets are displayed as graphical images on one or more display devices connected to the external graphics cards via a PCI-express interface, which is connected to the North bridge chip.
- CPD composited pixel data
- FIG. 7 A 3 the second illustrative embodiment of the MMPGRS of the present invention is shown embodied within the HMS+IGD Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 .
- the Automatic Mode Control Module (AMCM) 400 and the Decomposition, Distribution and Recomposition Modules 401 , 402 , 403 , respectively, of the Multimode Parallel Graphics Rendering Subsystem reside as a software package 701 in the Host or CPU Memory Space (HMS), while multiple GPUs are supported in an IGD within the North memory bridge circuit as well as on external graphic cards connected to the North memory bridge chip and driven in a parallelized manner by the modules of the multi-mode parallel graphics rendering subsystem, under the control of the AMCM.
- HMS Host or CPU Memory Space
- the Decomposition Module 401 divides (i.e. splits up) the stream of graphic commands and data (GCAD) according to the required parallelization mode, operative at any instant in time, (ii) the Distribution Module 402 uses the North bridge chip to distribute the graphic commands and data (GCAD) to the multiple GPUs located in the IGD and on the external graphics cards, (iii) the Recomposition Module 403 uses the North bridge chip to transfer composited pixel data (CPD) between the Recomposition Module (or CPU) and the multiple GPUs during the image recomposition stage, and (iv) finally recomposited pixel data sets are displayed as graphical images on one or more display devices connected to one of the external graphics cards or the IGB, as shown.
- CPD composited pixel data
- the third MMPGRS of the present invention is shown embodied within the HMS+IGD Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 .
- the Automatic Mode Control Module (AMCM) 400 and the Decomposition, Distribution and Recomposition Modules 401 , 402 , 403 , respectively, of the Multimode Parallel Graphics Rendering Subsystem reside as a software package 701 in the Host Memory Space (HMS) while multiple GPUs are supported in an IGD within the South bridge circuit as well as on external graphic cards connected to the South bridge chip, and driven in a parallelized manner by the modules of the multi-mode parallel graphics rendering subsystem, under the control of the AMCM.
- HMS Host Memory Space
- the Decomposition Module 401 divides (i.e. splits up) the stream of graphic commands and data (GCAD) according to the required parallelization mode, operative at any instant in time, (ii) the Distribution Module 402 uses the North bridge chip to distribute graphic commands and data (CGAD) to the multiple GPUs located in the IGD and on external graphics cards, (iii) the Recomposition Module 403 uses the South bridge chip to transfer recomposited pixel data between the Recomposition Module (or CPU) and the multiple GPUs during the image recomposition stage, and (iv) finally recomposited pixel data sets are displayed as graphical images on one or more display devices connected to one of the external graphics cards or the IGB, as shown.
- GCAD graphic commands and data
- the fourth illustrative embodiment of the MMPGRS of the present invention is shown embodied within the HMS+Fusion Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 .
- the Automatic Mode Control Module (AMCM) 400 and the Decomposition, Distribution and Recomposition Modules 401 , 402 , 403 , respectively, of the Multimode Parallel Graphics Rendering Subsystem resides as a software package 701 in the Host Memory Space (HMS) while a single GPU ( 1242 ) is supported on a CPU/GPU fusion-architecture processor die (alongside the CPU 1241 ) and one or more GPUs are supported on an external graphic card connected to the CPU processor die and driven in a parallelized manner by the modules of the multi-mode parallel graphics rendering subsystem, under the control of the AMCM.
- HMS Host Memory Space
- the Decomposition Module 401 divides (i.e. splits up) the stream of graphic commands and data (GCAD) according to the required parallelization mode, operative at any instant in time, (ii) the Distribution Module 402 uses the memory controller and interconnect (e.g. crossbar switch) within the CPU/GPU processor chip to distribute graphic commands and data to the multiple GPUs on the CPU/GPU die chip and on the external graphics cards, (iii) the Recomposition Module 403 uses the memory controller and interconnect (e.g.
- crossbar switch within the CPU/GPU processor chip to transfer composited pixel data (CPD) between the Recomposition Module (or CPU) and the multiple GPUs during the image recomposition stage, and (iv) finally recomposited pixel data sets are displayed as graphical images on one or more display devices connected to the external graphics card via a PCI-express interface, which is connected to the CPU/GPU fusion-architecture chip.
- CPD composited pixel data
- the fifth illustrative embodiment of the MMPGRS of the present invention is shown embodied within the HMS+Multicore Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 .
- the Automatic Mode Control Module (AMCM) 400 and the Decomposition, Distribution and Recomposition Modules 401 , 402 , 403 , respectively of the Multimode Parallel Graphics Rendering Subsystem resides as a software package 701 in the Host or CPU Memory Space (HMS) while some of the CPU cores on a multi-core CPU chip are used to implement a plurality of multi-core graphics pipelines parallelized by the modules of the software package 701 of the multi-mode parallel graphics rendering subsystem, under the control of the AMCM.
- HMS Host or CPU Memory Space
- the Decomposition Module 401 divides (i.e. splits up) the stream of graphic commands and data (GCAD) according to the required parallelization mode, operative at any instant in time, (ii) the Distribution Module 402 uses the North memory bridge and interconnect network within the multi-core CPU chip to distribute graphic commands and data (GCAD) to the multi-core graphic pipelines implemented on the multi-core CPU chip, (iii) the Recomposition Module 403 uses the North memory bridge and interconnect network within the multi-core CPU chip to transfer composited pixel data (CPD) between the Recomposition Module (or CPU) and the multi-core graphics pipelines during the image recomposition stage, and (iv) finally recomposited pixel data sets are displayed as graphical images on one or more display devices connected to the North bridge chip via a display interface.
- CPD composited pixel data
- FIG. 7 A 7 the sixth illustrative embodiment of the MMPGRS of the present invention is shown embodied within the HMS+GPU-Recomposition Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 , and in copending U.S. patent application Ser. No. 11/648,160 incorporated herein by reference.
- the Automatic Mode Control Module (AMCM) 400 and the Decomposition, Distribution and Recomposition Modules 401 , 402 respectively, of the Multimode Parallel Graphics Rendering Subsystem resides as a software package 701 in the Host or CPU Memory Space (HMS) while multiple GPUs on external GPU cards are driven in parallelized manner by the modules of the software package 701 of the multi-mode parallel graphics rendering subsystem, under the control of the AMCM, and two or more GPUs 715 , 716 are used to implement the Recomposition Module.
- the Decomposition Module 401 divides (i.e.
- the Distribution Module 402 uses the North or South bridge circuit and interconnect network to distribute graphic commands and data (GCAD) to the external GPUs
- the Recomposition Module uses the North memory bridge and associated system bus (e.g. PCI-express bus) to transfer composited pixel data (CPD) between the GPUs during the image recomposition stage
- CPD composited pixel data
- finally recomposited pixel data sets are displayed as graphical images on one or more display devices, connected to an external graphics card via a PCI-express interface which is connected to either the North or South bridge circuits of the host computing system.
- each non-primary GPU moves its full-color composited image to the frame buffer (FB) of the primary GPU for display on the display screen of the display device.
- FB frame buffer
- the primary GPU outputs one/half of the color image in its frame buffer (FB) to the display device, while the secondary GPU moves one/half of the image in its FB to the primary GPU. Then the primary GPU does the same with the second part of the image in its frame buffer (FB).
- the recomposition involves a coordinated output of two image halves, that have been composited within the frame buffers (FBs) of two GPUs, to the frame buffer of the primary GPU (for recompositing) and ultimately display to the display device.
- FIG. 7 A 7 - 1 the innovative pixel recompositing process supported within the MMPGRS of FIG. 7 A 7 during its Object Division Mode will now be described in great technical detail.
- the recompositing phase/stage of the present invention involves moving the pixel Depth and Color values from the frame buffers (FB) in the secondary GPPL, to the FB in the primary GPPL (via inter-GPPL communication), and then merging these pixel values with their counterparts at the primary GPPL by means of programmable Fragment Shader supported in the pixel processing subsystem ( 211 ).
- FIG. 7 A 7 - 2 describes the compositing process carried out by programmable Fragment Shader for the case where the MMPGRS employs dual GPPLs (i.e. GPUs).
- the pixel frame generating pipeline includes three basic steps, namely: the decompose 402 , distribute 403 , and render 404 stages.
- the recompose step 405 is carried out for final FB, which is finally displayed to the display device 405 .
- the Distributing step 403 is supervised by the Distribution module 505 .
- Decomposed graphics commands and data elements are sent to the Vendor's GPU Driver ( 506 ) and memory bridge ( 203 ), and delivered for rendering the primary 205 and secondary 204 graphics cards, via separate PCIexpress buses 207 , 208 .
- Rendering (step 404 ) is done simultaneously 602 , 603 in both GPPLs, creating two partial FBs.
- the compositing process (step 405 ) comprises the following substeps:
- step 405 the detailed shader program is used to composite two color textures based on the depth test conducted between the two depth textures, as shown in FIG. 7 B 7 - 2 .
- the recompositing phase/stage can involve moving the pixel Depth and Color values from the frame buffers (FBs) in the secondary GPPLs, to the FB in the primary GPPL (via inter-GPPL communication), and then merging these pixel values with their counterparts at the primary GPPL by means of the programmable Vertex Shader provided in the geometry processing subsystem 210 of the primary GPPL.
- FBs frame buffers
- the recompositing phase/stage can involve moving the pixel Depth and Color values from the frame buffers (FBs) in the secondary GPPLs, to the FB in the primary GPPL (via inter-GPPL communication), and then merging these pixel values with their counterparts at the primary GPPL by means of the programmable Vertex Shader provided in the geometry processing subsystem 210 of the primary GPPL.
- the recompositing phase/stage can involve moving the pixel Depth and Color values from the frame buffers FB in the secondary GPPLs, to the FB in the primary GPPL (via inter-GPPL communication), and then merging these pixel values with their counterparts at the primary GPPL by the means of both programmable Vertex and Fragment Shaders provided in the geometry and pixel processing subsystems in the primary GPPL.
- the pixel data contained in the Frame Buffers (FB) associated with the secondary GPPLs are moved to the primary GPPL by way of an inter-GPPL communication process (e.g. the Interconnect network 404 implemented by multiple-lane PCI ExpressTM buses), and then processed within the local FB of the primary GPPL, to perform pixel image (re)composition.
- the pixel composition result is then sent to display device, and alternatively, also returned to the secondary GPPLs, if required in some applications as a basis of the next pixel frame.
- the GPPL-based recomposition process of the present invention can be implemented across two or more GPPLs using software that (i) controls the computational machinery within the GPPLs of the MMPGRS platform, and (ii) exploits the Shader (pixel) processing capabilities in the primary GPPL, with no need for any external hardware.
- the GPPL-based recomposition process of the present invention can be implemented across two or more GPPLs using hardware circuitry and/or firmware (within a graphics hub architecture of the present invention) that (i) controls the computational machinery within the GPPLs of the MMPGRS platform, and (ii) exploits the Shader (pixel) processing capabilities in the primary GPPL, as shown in FIGS. 7 B 2 , 7 B 4 - 1 , 7 B 6 - 1 , 7 B 7 - 1 , 7 B 8 - 3 , and 7 B 1 , and described below.
- FIG. 7 A 7 - 3 illustrates the time-line of one complete composited pixel frame, including time slots associated with the different steps of object division rendering.
- the reuse of GPPL resources for recompositing occurs during a time slot, where the GPPL resources are generally idle during the recompose step.
- GPPL resources are used “for free” during recomposition, without sacrificing system performance.
- FIGS. 7 B 1 through 7 B 11 illustrate that the graphics hub device (GHD) of the present invention can be expressed in different ways in different MPGRS system architectures
- the function of the graphics hub device (GHD) is essentially the same, namely: (i) to interconnect the graphics-based application in memory space, with the cluster of GPUs or CPU-cores along the parallelized GPPLs; and (ii) to support the basic functionalities of the Distribution Module 402 and the Recomposition Module 403 in such MMPGRS system architectures.
- the Distribution Module resides before the cluster of GPUs or CPU-cores, delivering graphics commands and data (GCAD) for rendering (and thus functioning as a “pre GPU unit” of sorts), whereas the Recomposition Module functions logically after the cluster of GPUs, and collects post rendering data (“post GPU unit”).
- GCAD graphics commands and data
- post GPU unit post rendering data
- both the Distribution Module and the Recomposition Module typically share the same physical hardware unit (e.g. silicon chip).
- FIGS. 7 B 1 through 7 B 11 for various types of MMGPRS system architectures indicated in FIG. 7 A 1 - 2 .
- FIGS. 7 B 1 through 7 B 11 the two major advantages should be pointed out when using the “graphics hub device” architecture approach of the present invention, illustrated in FIGS. 7 B 1 through 7 B 11 .
- the first advantage of the “graphics hub device” architecture is that the number of driven GPPLs in the MMPGRS is no longer limited by the number of buses provided by the memory bridge circuit employed in the CPU-based host computing system.
- the Interconnect Network 404 employed in the graphics hub device (GD) of the present invention allows (theoretically) for the connection of an unlimited number of GPUs to the Host CPU.
- the second advantage of the “graphics hub device” architecture is the high performance achieved during image recomposition using the graphic hub device architecture, thereby eliminating the need of moving the Frame Buffer (FB) pixel data from multiple GPPLs to the host or CPU memory for merging, as it is done in the system architectures illustrated in FIGS. 7 A 2 through 7 A 7 .
- the merge function is performed by fast, highly specialized hardware within the GPUs, independent of other tasks that are concurrently trying to access the main memory of the host computing system, which occurs in a multi-tasking system architectures illustrated in FIGS. 7 A 2 through 7 A 7 .
- FIG. 7 B 1 the seventh illustrative embodiment of the MMPGRS of the present invention is shown embodied within the Hub Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 .
- the Automatic Mode Control Module (AMCM) 400 and the Decomposition Submodule No. 1 401 ′ reside as a software package in the Host or CPU Memory Space (HMS) while the Decomposition Submodule No. 2 401 ′′, Distribution Module 402 ′′ and Recomposition Module 403 ′′ are realized within a single graphics hub device (e.g.
- HMS Host or CPU Memory Space
- the Decomposition Submodule No. 1 transfers graphic commands and data (GCAD) to the Decomposition Submodule No. 2 via the North memory bridge circuit
- the Decomposition Submodule No. 2 divides (i.e.
- the Distribution Module 402 distributes graphic commands and data (GCAD) to the external GPUs
- the Recomposition Module 403 transfers composited pixel data (CPD) between the GPUs during the image recomposition stage
- CPD composited pixel data
- finally recomposited pixel data sets are displayed as graphical images on one or more display devices connected to the primary GPU on the graphical display card which is connected to the graphics hub chip of the present invention via the interconnect 404 ′′.
- FIG. 7 B 2 the eighth illustrative embodiment of the MMPGRS of the present invention is shown embodied within the Hub+GPU-Recomposition Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 .
- the Automatic Mode Control Module (AMCM) 400 and the Decomposition Submodule No. 1 401 ′ reside as a software package in the Host Memory Space (HMS) of the host computing system, while the Decomposition Submodule No. 2 401 ′′ and the Distribution Module 402 ′′ are realized within a single graphics hub device (e.g.
- HMS Host Memory Space
- the Decomposition Submodule No. 1 transfers graphic commands and data (GCAD) to the Decomposition Submodule No. 2 via the North bridge circuit, (ii) the Decomposition Submodule No. 2 divides (i.e.
- the Distribution Module 402 distributes graphic commands and data (GCAD) to the external GPUs
- the Recomposition Module 403 implemented within the primary GPU 715 , transfers composited pixel data (CPD) between the GPUs during the image recomposition stage
- recomposited pixel data sets are displayed as graphical images on one or more display devices connected to the primary GPU on the graphical display card(s), which are connected to the graphics hub chip of the present invention.
- FIG. 7 B 3 the ninth illustrative embodiment of the MMPGRS of the present invention is shown embodied within the Chipset Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 .
- the Automatic Mode Control Module (AMCM) 400 and the Decomposition Submodule No. 1 401 ′ reside as a software package in the Host or CPU Memory Space (HMS) while the Decomposition Submodule No.
- HMS Host or CPU Memory Space
- the Decomposition Submodule No. 1 transfers graphic commands and data (GCAD) to the Decomposition Submodule No. 2 via the North bridge circuit
- the Decomposition Submodule No. 2 divides (i.e.
- the Distribution Module 402 distributes graphic commands and data (GCAD) to the internal GPUs via the interconnect network
- the Recomposition Module 403 ′′ transfers composited pixel data (CPD) between the GPUs during the image recomposition stage
- CPD composited pixel data
- FIG. 7 B 4 the tenth illustrative embodiment of the MMPGRS of the present invention is shown embodied within the Chipset Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 .
- the Automatic Mode Control Module (AMCM) 400 and the Decomposition Submodule No. 1 401 ′ reside as a software package in the Host or CPU Memory Space (HMS) while the Decomposition Submodule No.
- HMS CPU Memory Space
- the Decomposition Submodule No. 1 transfers graphic commands and data (GCAD) to the Decomposition Submodule No. 2 via the communication interfaces of the North and South bridge circuits, (ii) the Decomposition Submodule No. 2 divides (i.e.
- the Distribution Module 402 distributes graphic commands and data (GCAD) to the external GPUs
- the Recomposition Module 403 transfers composited pixel data (CPD) between the GPUs during the image recomposition stage
- CPD composited pixel data
- FIG. 7 B 4 - 1 the eleventh illustrative embodiment of the MMPGRS of the present invention is shown embodied within the Chipset Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 .
- the Automatic Mode Control Module (AMCM) 400 and the Decomposition Submodule No. 1 401 ′ reside as a software package in the Host or CPU Memory Space (HMS) while the Decomposition Submodule No.
- HMS CPU Memory Space
- the Distribution Module 402 ′′ 403 ′′ are realized (as a graphics hub) in an integrated graphics device (IGD) within the South bridge circuit of the host computing system and having a plurality of GPUs driven in a parallelized manner by the modules of the multi-mode parallel graphics rendering subsystem, under the control of the AMCM, while the Recomposition Module 403 ′′ is implemented across two or more GPUs 715 , 716 .
- the Decomposition Submodule No. 1 transfers graphic commands and data (GCAD) to the Decomposition Submodule No. 2 via the communication interfaces of the North and South bridge circuits
- the Decomposition Submodule No. 2 divides (i.e.
- the Distribution Module 402 distributes graphic commands and data (GCAD) to the external GPUs
- the Recomposition Module 403 implemented at the Primary GPU, transfers composited pixel data (CPD) between the GPUs during the image recomposition stage
- CPD composited pixel data
- FIG. 7 B 5 the twelfth illustrative embodiment of the MMPGRS of the present invention is shown embodied within the Chipset Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 .
- the Automatic Mode Control Module (AMCM) 400 and the Decomposition Submodule No. 1 401 ′ reside as a software package in the Host or CPU Memory Space (HMS) while the Decomposition Submodule No.
- HMS CPU Memory Space
- the Decomposition Submodule No. 1 transfers graphics commands and data (GCAD) to the Decomposition Submodule No. 2 via the North bridge circuit
- the Decomposition Submodule No. 2 divides (i.e.
- the Distribution Module 402 distributes graphic commands and data (GCAD) to the external GPUs
- the Recomposition Module 403 transfers composited pixel data (CPD) between the GPUs during the image recomposition stage
- CPD composited pixel data
- FIG. 7 B 6 the thirteenth illustrative embodiment of the MMPGRS of the present invention is shown embodied within the Chipset Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 .
- the Automatic Mode Control Module (AMCM) 400 and the Decomposition Submodule No. 1 401 ′ reside as a software package in the Host or CPU Memory Space (HMS) while the Decomposition Submodule No.
- HMS CPU Memory Space
- the Decomposition Submodule No. 1 transfer graphic commands and data (GCAD) to the Decomposition Submodule No. 2 via the North and South bridge circuits, (ii) the Decomposition Submodule No. 2 divides (i.e.
- the Distribution Module 402 distributes the graphic commands and data (GCAD) to the external GPUs
- the Recomposition Module 403 transfers composited pixel data (CPD) between the GPUs during the image recomposition stage
- CPD composited pixel data
- FIG. 7 B 6 - 1 the fourteenth illustrative embodiment of the MMPGRS of the present invention is shown embodied within the Chipset Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 .
- the Automatic Mode Control Module (AMCM) 400 and the Decomposition Submodule No. 1 401 ′ reside as a software package in the Host or CPU Memory Space (HMS) while the Decomposition Submodule No.
- HMS CPU Memory Space
- the Distribution Module 402 ′′ are realized (as a graphics hub) in an integrated graphics device (IGD) within the South bridge circuit of the host computing system and having multiple GPUs driven with a single GPU on an external graphics card in a parallelized manner by the modules of the multi-mode parallel graphics rendering subsystem, under the control of the AMCM, while the Recomposition Module 403 ′′ is implemented across two or more GPUs 715 , 716 .
- the Decomposition Submodule No. 1 transfer graphic commands and data (GCAD) to the Decomposition Submodule No. 2 via the North and South bridge circuits
- the Decomposition Submodule No. 2 divides (i.e.
- the Distribution Module 402 distributes the graphic commands and data (GCAD) to the external GPUs
- the Recomposition Module 403 transfers composited pixel data (CPD) between the GPUs during the image recomposition stage
- CPD composited pixel data
- FIG. 7 B 7 the fifteenth illustrative embodiment of the MMPGRS of the present invention is shown embodied within the following the Chipset Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 .
- the Automatic Mode Control Module (AMCM) 400 and the Decomposition Submodule No. 1 401 ′ reside as a software package in the Host or CPU Memory Space (HMS) while the Decomposition Submodule No.
- HMS CPU Memory Space
- the Distribution Module 402 ′′ and Recomposition Module 403 ′′ are realized (as a graphics hub) in an integrated graphics device (IGD) realized within the North memory bridge chip of the host computing system, and driving (i) multiple GPUs on multiple external graphics cards in a parallelized manner by the modules of the multi-mode parallel graphics rendering subsystem, under the control of the AMCM, or alternatively (ii) controlling a single GPU aboard the IGD for driving a display device connected to the IGD via a display interface.
- the Decomposition Submodule No. 1 transfers graphic commands and data (GCAD) to the Decomposition Submodule No. 2 via the North bridge circuit
- the Decomposition Submodule No. 2 divides (i.e.
- the Distribution Module 402 distributes the graphic commands and data (GCAD) to the internal GPU and external GPUs
- the Recomposition Module 403 ′′ transfers composited pixel data (CPD) between the GPUs during the image recomposition stage
- CPD composited pixel data
- FIG. 7 B 7 - 1 the sixteenth illustrative embodiment of the MMPGRS of the present invention is shown embodied within the following the Chipset Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 .
- the Automatic Mode Control Module (AMCM) 400 and the Decomposition Submodule No. 1 401 ′ reside as a software package in the Host or CPU Memory Space (HMS) while the Decomposition Submodule No.
- HMS CPU Memory Space
- the Distribution Module 402 ′′ are realized (as a graphics hub) in an integrated graphics device (IGD) realized within the North memory bridge chip of the host computing system, and driving (i) multiple GPUs on multiple external graphics cards in a parallelized manner by the modules of the multi-mode parallel graphics rendering subsystem, under the control of the AMCM, or alternatively (ii) controlling a single GPU aboard the IGD for driving a display device connected to the IGD via a display interface, while the Recomposition Module 403 ′′ is implemented across two or more GPUs ( 715 , 716 ).
- the Decomposition Submodule No. 1 transfers graphic commands and data (GCAD) to the Decomposition Submodule No.
- the Decomposition Submodule No. 2 divides (i.e. splits up) the stream of graphic commands and data (GCAD) according to the required parallelization mode, operative at any instant in time, (iii) the Distribution Module 402 ′′ distributes the graphic commands and data (GCAD) to the internal GPU and external GPUs, (iv) the Recomposition Module 403 ′′ transfers composited pixel data (CPD) between the GPUs during the image recomposition stage, and (v) finally recomposited pixel data sets are displayed as graphical images on one or more display devices connected to one of the external graphic cards or the primary GPU in the IGB, as shown.
- the Distribution Module 402 distributes the graphic commands and data (GCAD) to the internal GPU and external GPUs
- the Recomposition Module 403 ′′ transfers composited pixel data (CPD) between the GPUs during the image recomposition stage
- CPD composited pixel data
- finally recomposited pixel data sets are displayed as graphical images on one or more display devices
- FIG. 7 B 8 - 1 the seventeenth illustrative embodiment of the MMPGRS of the present invention is shown embodied within the following the CPU/GPU Fusion Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 .
- the Automatic Mode Control Module (AMCM) 400 and the Decomposition Submodule No. 1 401 ′ reside as a software package in the Host Memory Space (HMS) while the Decomposition Submodule No.
- HMS Host Memory Space
- the Decomposition Submodule No. 1 transfers graphics commands and data (GCAD) to the Decomposition Submodule No. 2
- the Decomposition Submodule No. 2 divides (i.e.
- the Distribution Module 402 distributes the graphic commands and data (GCAD) to the internal GPU and external GPUs
- the Recomposition Module 403 ′′ transfers composited pixel data (CPD) between the GPUs during the image recomposition stage
- CPD composited pixel data
- FIG. 7 B 8 - 2 the eighteenth illustrative embodiment of the MMPGRS of the present invention is shown embodied within the following the CPU/GPU Fusion Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 .
- the Automatic Mode Control Module (AMCM) 400 and the Decomposition Submodule No. 1 401 ′ reside as a software package in the Host Memory Space (HMS) while the Decomposition Submodule No.
- HMS Host Memory Space
- the Decomposition Submodule No. 1 transfers graphics commands and data (GCAD) to the Decomposition Submodule No. 2 via the North memory bridge circuit and interconnect network within the multi-core CPU chip, (ii) the Decomposition Submodule No. 2 divides (i.e.
- the Distribution Module 402 ′′ uses the crossbar switch (i.e. interconnect) on the processor die to distribute the graphic commands and data (GCAD) to the multiple soft parallel graphics pipelines (implemented by the multiple CPU cores),
- the Recomposition Module 403 ′′ transfers composited pixel data (CPD) between the multiple CPU cores during the image recomposition stage, and
- finally recomposited pixel data sets are displayed as graphical images on one or more display devices 106 connected to the North memory bridge chip via a display interface.
- FIG. 7 B 8 - 3 the nineteenth illustrative embodiment of the MMPGRS of the present invention is shown embodied within the following the CPU/GPU Fusion Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 .
- the Automatic Mode Control Module (AMCM) 400 and the Decomposition Submodule No. 1 401 ′ reside as a software package in the Host Memory Space (HMS),
- the Distribution Module 402 ′′ are realized (as a graphics hub) on the die of a hybrid CPU/GPU fusion-architecture chip within the host computing system and having multiple GPUs 1242 ′′ driven with one or more GPUs on an external graphics card 205 (connected to the CPU/GPU chip) in a parallelized manner by the modules of the multi-mode parallel graphics rendering subsystem under the control of the AMCM, and (iii) the Recomposition Module 403 ′′ is implemented across two or more GPUs 715 , 716 provided on the CPU/GPU fusion chip die and external graphics cards.
- the Decomposition Submodule No. 1 transfers graphics commands and data (GCAD) to the Decomposition Submodule No.
- the Decomposition Submodule No. 2 divides (i.e. splits up) the stream of graphic commands and data (GCAD) according to the required parallelization mode, operative at any instant in time, (vi) the Distribution Module 402 ′′ uses the crossbar switch (i.e. interconnect) on the processor die to distribute the graphic commands and data (GCAD) to the internal GPUs and external GPUs, (vii) the Recomposition Module 403 ′′ transfers composited pixel data (CPD) between the GPUs during the image recomposition stage, and (viii) finally recomposited pixel data sets are displayed as graphical images on one or more display devices 106 connected to the external graphics card connected to the hybrid CPU/GPU chip via a PCI-express interface.
- the Distribution Module 402 ′′ uses the crossbar switch (i.e. interconnect) on the processor die to distribute the graphic commands and data (GCAD) to the internal GPUs and external GPUs, (vii) the Recomposition Module 403 ′′ transfers composited pixel data (CPD)
- FIG. 7 B 9 - 1 the twentieth illustrative embodiment of the MMPGRS of the present invention is shown embodied within the following the Multicore CPU Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 .
- the Automatic Mode Control Module (AMCM) 400 and the Decomposition Submodule No. 1 401 ′ reside as a software package in the Host Memory Space (HMS) while the Decomposition Submodule No. 2 401 ′′, Distribution Module 402 ′′ and Recomposition Module 403 ′′ are realized (as a graphics hub) on the die of a multi-core CPU chip within the host computing system.
- HMS Host Memory Space
- some of the CPU cores are used to implement multiple soft parallel graphics pipelines (“soft GPUs”) that are driven in a parallelized manner by the modules of the multi-mode parallel graphics rendering subsystem under the control of the AMCM.
- the Decomposition Submodule No. 1 transfers graphics commands and data (GCAD) to the Decomposition Submodule No. 2 via the North memory bridge circuit and interconnect network within the multi-core CPU chip,
- the Decomposition Submodule No. 2 divides (i.e. splits up) the stream of graphic commands and data (GCAD) according to the required parallelization mode, operative at any instant in time
- the Distribution Module 402 ′′ uses the crossbar switch (i.e.
- the processor die to distribute the graphic commands and data (GCAD) to the multiple soft parallel graphics pipelines (implemented by the multiple CPU cores), (iv) the Recomposition Module 403 ′′ transfers composited pixel data (CPD) between the multiple CPU cores during the image recomposition stage, and (v) finally recomposited pixel data sets are displayed as graphical images on one or more display devices 106 connected to the North memory bridge chip via a display interface implemented therein, as shown.
- GCAD graphic commands and data
- CPD composited pixel data
- FIG. 7 B 9 - 2 the twenty-first illustrative embodiment of the MMPGRS of the present invention is shown embodied within the following the Multicore CPU Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 .
- AMCM Automatic Mode Control Module
- HMS Host Memory Space
- the Distribution Module 402 ′′ and the Recomposition Module 403 ′′ are realized as a graphics hub within a multi-core CPU chip employed within the host computing system, having a plurality of CPU cores, some of which implement multiple soft graphics pipelines which, along with multiple GPUs supported on an external graphics card 205 , are driven in a parallelized manner by the modules of the multi-mode parallel graphics rendering subsystem under the control of the AMCM.
- the Decomposition Submodule No. 1 transfers graphics commands and data (GCAD) to the Decomposition Submodule No. 2 via the interconnects within the North memory bridge chip and the multi-core CPU chip
- the Decomposition Submodule No. 2 divides (i.e.
- the Distribution Module 402 ′′ uses the interconnect (i.e. crossbar switch) in the multi-core CPU chip to distribute the graphic commands and data (GCAD) to the multiple soft graphics pipelines (e.g.
- the Recomposition Module 403 ′′ transfers composited pixel data (CPD) between the soft graphics pipelines on the multi-core CPU chip and hard GPUs on the external graphics card during the image recomposition stage, and (v) finally recomposited pixel data sets are displayed as graphical images on one or more display devices 106 connected to the external graphics card which is connected to the multi-core CPU chip via a PCI-express interface.
- CPD composited pixel data
- FIG. 7 B 10 the twenty-second illustrative embodiment of the MMPGRS of the present invention is shown embodied within the following the Game Console Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 .
- the Automatic Mode Control Module (AMCM) 400 and the Decomposition Submodule No. 1 401 ′ are realized as a software package 711 within the Host Memory Space (HMS), while the Decomposition Submodule No. 2 401 ′′, the Distribution Module 402 ′′ and the Recomposition Module 403 ′ are realized as a graphics hub semiconductor chip within the game console system in which multiple GPUs are driven in a parallelized manner by the modules of the multi-mode parallel graphics rendering subsystem under the control of the AMCM.
- HMS Host Memory Space
- the Decomposition Submodule No. 1 transfers graphics commands and data (GCAD) to the Decomposition Submodule No. 2 , via the memory controller on the multi-core CPU chip and the interconnect in the graphics hub chip of the present invention, (ii) the Decomposition Submodule No. 2 divides (i.e.
- the Distribution Module 402 distributes the graphic commands and data (GCAD) to the multiple GPUs
- the Recomposition Module 403 transfers composited pixel data (CPD) between the multiple GPUs during the image recomposition stage
- recomposited pixel data sets are displayed as graphical images on one or more display devices 106 connected to the primary GPU 715 via a analog display interface.
- FIG. 7 B 11 the twenty-third illustrative embodiment of the MMPGRS of the present invention is shown embodied within the following the Game Console Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 .
- the Profiling and Control Automatic Mode Control Module (AMCM) 400 and the Decomposition Submodule No. 1 401 ′ are realized as a software package 711 within the Host Memory Space (HMS) of the host computing system while the Decomposition Submodule No.
- HMS Host Memory Space
- the Decomposition Submodule No. 1 transfers graphics commands and data (GCAD) to the Decomposition Submodule No. 2 , via the memory controller on the multi-core CPU chip and the interconnect in the graphics hub chip of the present invention, (ii) the Decomposition Submodule No. 2 divides (i.e.
- the Distribution Module 402 ′ distributes the graphic commands and data (GCAD) to the multiple GPUs
- the Recomposition Module 403 ′ realized primarily within the substructure of the primary GPU, transfers composited pixel data (CPD) between the multiple GPUs during the image recomposition stage
- recomposited pixel data sets are displayed as graphical images on one or more display devices 106 connected to the primary GPU 715 via an analog display interface.
- FIGS. 8 A through 11 D 1 there is shown a sampling of the illustrative implementations that are possible for the diverse MMPGRS designs of the present invention disclosed, taught and suggested herein.
- FIG. 8A shows an illustrative implementation of the MMPGRS of the present invention following the Hub Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 .
- HMS host memory space
- multiple discrete graphic cards are connected to the bridge circuit of the host computing system by way of a hardware-based graphics hub chip of the present invention 404 ′′, 402 ′′, 403 ′′, 404 ′′,
- hardware-based Distribution and Recomposition Modules 402 ′′ and 403 ′′ are realized on the hardware-based graphics hub chip of the present invention, and
- a graphics display device is connected to the primary GPU.
- FIG. 8 A 1 shows a first illustrative embodiment of the MMPGRS implementation of FIG. 8A , wherein a possible packaging of the Hub architecture of the present invention employs an assembly comprising a Hub-extender card 811 carrying multiple (e.g. dual) graphics cards 812 , 813 supported on a motherboard 814 within the host computing system.
- a Hub-extender card 811 carrying multiple (e.g. dual) graphics cards 812 , 813 supported on a motherboard 814 within the host computing system.
- FIG. 8 A 2 shows a second illustrative embodiment of the MMPGRS implementation of FIG. 8A , wherein a possible packaging of the Hub architecture of the present invention employs an external box containing a Hub chip of the present invention mounted on a PC board, that is connected to the motherboard of the host computing system via a wire harness or the like, and supporting a plurality of graphics cards 813 that are connected to the Hub chip.
- FIG. 8 A 3 shows a third illustrative embodiment of the MMPGRS implementation of FIG. 8A , wherein a possible packaging of the Hub architecture of the present invention employs a graphics hub chip of the present invention mounted on the motherboard 814 of the host computing system, which supports multiple graphics cards 813 with multiple GPUs.
- FIG. 8B shows an illustrative implementation of the MMPGRS of the present invention following the Hub+GPU-Recomposition Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 .
- the AMCM and Decomposition Submodule No. 1 are implemented as a software-package 701 within host memory space (HMS) of the host computing system,
- multiple discrete graphic cards are connected to a bridge chipset on the host computing system by way of a hardware-based graphics hub chip realizing the Decomposition No.
- FIG. 8 B 1 shows a first illustrative embodiment of the MMPGRS implementation of FIG. 8B , wherein a possible packaging of the Hub+GPU Recomposition architecture of the present invention employs an assembly comprising a Hub-extender card 811 carrying multiple (e.g. dual) graphics cards 812 , 813 supported on a motherboard 814 within the host computing system.
- a Hub-extender card 811 carrying multiple (e.g. dual) graphics cards 812 , 813 supported on a motherboard 814 within the host computing system.
- FIG. 8 B 2 shows a second illustrative embodiment of the MMPGRS implementation of FIG. 8B , wherein a possible packaging of the Hub architecture of the present invention employs an external box containing a Hub chip of the present invention mounted on a PC board, that is connected to the motherboard of the host computing system via a wire harness or the like, and supporting a plurality of graphics cards 813 that are connected to the Hub chip.
- FIG. 8 B 3 shows a third illustrative embodiment of the MMPGRS implementation of FIG. 8B , wherein a possible packaging of the Hub architecture of the present invention employs a graphics hub chip of the present invention mounted on the motherboard 814 of the host computing system, which supports multiple graphics cards 813 with multiple GPUs.
- FIG. 8C shows an illustrative embodiment of the MMPGRS of the present invention following the HM Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 .
- the AMCM, Decomposition, Distribution and Recomposition Modules are implemented as a software-package 701 within host memory space (HMS) of the host computing system, (ii) multiple discrete GPUs on one or more graphics cards are connected to the bridge circuit on the host computing system, and (iii) a graphics display device is connected to the primary GPU.
- HMS host memory space
- FIG. 8 C 1 shows a first illustrative embodiment of the MMPGRS implementation of FIG. 8C , wherein discrete multiple graphics cards 851 , each supporting at least a single GPU, are interfaced with the bridge circuit chipset of the CPU motherboard by way of a PCI-express or like interface.
- FIG. 8 C 2 shows a second illustrative embodiment of the MMPGRS implementation of FIG. 8C , wherein multiple GPUs are realized on a single graphics card 852 which is interfaced to bridge circuit on the CPU motherboard by way of a PCI-express or like interface.
- FIG. 8 C 3 shows a third illustrative embodiment of the MMPGRS implementation of FIG. 8C , wherein multiple discrete graphics cards 851 , each supporting at least a single GPU, are interfaced with the bridge circuit on a board within an external box 821 that is interfaced to the motherboard within the host computing system.
- FIG. 8D shows an illustrative embodiment of the MMPGRS of the present invention following the Hub+GPU-Recomposition Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 .
- the AMCM, Decomposition Submodule No. 1 and the Distribution Module are implemented as a software-package 701 within host memory space (HMS) of the host computing system, (ii) multiple discrete GPUs on one or more external graphics cards are connected to the bridge circuit of the host computing system, (iii) the Recomposition Module 403 ′′ is implemented across two or more GPUs, and (iv) a graphics display device is connected to the primary GPU.
- HMS host memory space
- FIG. 8 D 1 shows a first illustrative embodiment of the MMPGRS implementation of FIG. 8D , wherein discrete multiple graphics cards 851 , each supporting at least a single GPU, are interfaced with the bridge circuit chipset of the CPU motherboard by way of a PCI-express or like interface.
- FIG. 8 D 2 shows a second illustrative embodiment of the MMPGRS implementation of FIG. 8D , wherein multiple GPUs are realized on a single graphics card 852 which is interfaced to bridge circuit on the CPU motherboard by way of a PCI-express or like interface.
- FIG. 8 D 3 shows a third illustrative embodiment of the MMPGRS implementation of FIG. 8D , wherein multiple discrete graphics cards 851 , each supporting at least a single GPU, are interfaced with the bridge circuit on a board within an external box 821 that is interface to the motherboard within the host computing system.
- FIG. 9A shows an illustrative implementation of the MMPGRS of the present invention following the Hub Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 .
- the AMCM and Decomposition Submodule No. 1 are implemented as a software package 711 on the host memory space (HMS),
- multiple GPUs i.e. Primary GPU 715 and Secondary GPUs 716
- a graphics card 902 which connects the GPUs to the bridge circuit on the host computing system by way of a hardware-based graphics hub chip implementing the Decomposition Submodule No. 2 401 ′′, the Distribution Module 402 ′′ and the Recomposition Module 403 ′′, and
- a graphics display device is connected to the primary GPU.
- FIG. 9 A 1 shows an illustrative embodiment of the MMPGRS of FIG. 9A , wherein multiple GPUs ( 715 , 716 ) and hardware-based Decomposition Submodule No. 2 401 ′′, Distribution Module 402 ′′ and the Recomposition Modules 403 ′′ are implemented as a graphics hub chip or chipset 401 ′′, 402 ′, 403 ,′′ and 404 ′′ on a single graphics display card 902 , which is interfaced to the bridge circuit on the motherboard 814 within the host computing system.
- FIG. 10A shows an illustrative implementation of the MMPGRS of the present invention following the Hub Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 .
- the AMCM and Decomposition Submodule No. 1 are implemented as a software package 711 on the host memory space (HMS)
- HMS host memory space
- a single SOC-based graphics chip 1001 is mounted on a single graphics card 1002 interfaced with a bridge circuit on the motherboard 1002 , and supporting multiple GPUs (i.e. the primary GPU and secondary GPUs)
- the Distribution Module and the Recomposition Module are implemented on the SOC-based graphics chip 1001
- a graphics display device is connected to the primary GPU.
- FIG. 10 A 1 shows a possible packaging of the SOC-based graphics hub chip ( 101 ) depicted in FIG. 10A , wherein multiple GPUs 715 , 716 and hardware-based Decomposition Submodule 401 ′′, Distribution Module 402 ′′, and Recomposition Module ( 4 - 3 ′′) are realized on a single SOC implementation 1001 mounted on a single graphics card 1002 .
- FIG. 10B shows an illustrative implementation of the MMPGRS of the present invention following the Hub+GPU-Recomposition Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 .
- the AMCM and Decomposition Submodule No. 1 are implemented as a software package 711 on the host memory space (HMS),
- HMS host memory space
- a single SOC-based graphics chip 1003 is mounted on a single graphics card 1002 interfaced with a bridge circuit on the motherboard 1002 , and supporting multiple GPUs (i.e. the primary GPU and secondary GPUs),
- the Distribution Module is implemented on the SOC-based graphics hub chip 1001 , (iv) the Recomposition Module is implemented across two or more GPUs 715 , 716 , and (v) a graphics display device is connected to the primary GPU by way of a display interface implemented on the SOC-based graphics hub chip.
- FIG. 10 B 1 shows a possible packaging of the SOC-based graphics hub chip 101 depicted in FIG. 10B , wherein multiple GPUs 715 , 716 and hardware-based Decomposition Submodule 401 ′′, Distribution Module 402 ′′ are implemented in single SOC implementation 1003 mounted on a single graphics card 1002 , with the Recomposition Module ( 4 - 3 ′′) being implemented across two or more of the GPUs (e.g. on the same piece of silicon).
- FIG. 10C shows an illustrative implementation of the MMPGRS of the present invention following the HMS+GPU-Recomposition Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 .
- the AMCM, Decomposition Module and Distribution Module are implemented as a software package 701 on the host memory space (HMS),
- HMS host memory space
- a single multi-GPU chip 1031 is mounted on a single graphics card 1002 that is interfaced with a bridge circuit on the motherboard, and supporting multiple GPUs (i.e. the primary GPU and secondary GPUs)
- the Recomposition Module is implemented within two or more GPU
- a graphics display device is connected to the primary GPU by way of a display interface implemented on the multi-GPU chip.
- FIG. 10 C 1 shows a possible packaging of the multi-GPU chip ( 1031 ) depicted in FIG. 10C , wherein multiple GPUs 715 , 716 and Recomposition Module 403 ′′ is implemented across two or more GPUs 715 , 716 of a multi-GPU chip ( 1031 ).
- FIG. 11A shows an illustrative implementation of the MMPGRS following the Chipset Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 .
- the AMCM and Decomposition Submodule No. 1 are realized as a software package 711 within the host memory space (HMS) of the host computing system,
- plurality of GPUs 852 on one or more external graphics cards 851 are connected to the bridge circuit on the host computing platform,
- an integrated graphics device (IGD) 1101 supporting hardware-based Decomposition Submodule No.
- the Distribution Module 402 ′′ and Recomposition Module 403 ′′ are implemented within the bridge circuit 1101 on the motherboard 814 of the host computing system, and (iv) a display device is interfaced to the primary GPU by way of a PCI-express interface or the like.
- FIG. 11 A 1 shows a first illustrative embodiment of the Chipset MMPGRS implementation of FIG. 11A , wherein multiple discrete graphics cards 851 , each supporting at least a single GPU, are interfaced with the bridge circuit on a board within an external box 821 that is interface to the motherboard within the host computing system.
- FIG. 11 A 2 shows a second illustrative embodiment of the Chipset MMPGRS implementation of FIG. 11A , wherein discrete multiple graphics cards 851 , each supporting at least a single GPU, are interfaced with the bridge circuit chipset of the CPU motherboard by way of a PCI-express or like interface.
- FIG. 11 A 3 shows a third illustrative embodiment of the Chipset MMPGRS implementation of FIG. 11A , wherein multiple GPUs are realized on a single graphics card 852 which is interfaced to the bridge circuit on the CPU motherboard by way of a PCI-express or like interface.
- FIG. 11B shows an illustrative implementation of the MMPGRS following the CPU/GPU Fusion Class of MMPGRS Architecture or Multi-Core Class MMPGRS Architecture described in FIG. 7 A 1 - 2 .
- a CPU/GPU fusion-architecture chip or a multi-core CPU chip is mounted on the motherboard of a host computing system having memory and North and South bridge circuits
- AMCM and Decomposition Submodule No. 1 are realized as a software package 701 within the host memory space (HMS) of the host computing system while Decomposition Submodule No.
- the Distribution Module and the Recomposition Module are realized/implemented on the die of the CPU/GPU fusion-architecture chip or the multi-core CPU chip, and (iii) multiple GPUs on external graphic cards or elsewhere, are interfaced to the CPU/GPU fusion-architecture chip or the multi-core CPU chip, by way of a PCI-express or like interface, and (iv) a display device is interfaced to the primary GPU by way of a PCI-express interface or the like.
- FIG. 11 B 1 shows a first illustrative embodiment of the CPU/GPU Fusion or Multi-Core MMPGRS implementation of FIG. 1B , wherein a CPU/GPU Fusion or Multi-Core chip is used to drive an assemble of graphic cards or GPUs on one or more external graphics cards 851 .
- FIG. 11 B 2 shows a second illustrative embodiment of the Chipset MMPGRS implementation of FIG. 11B , wherein a CPU/GPU Fusion or Multi-Core chip is used to drive an assemble of GPUs on a single external graphics card 852 .
- FIG. 11 B 3 shows a third illustrative embodiment of the Chipset MMPGRS implementation of FIG. 11B , wherein a CPU/GPU Fusion or Multi-Core chip is used to drive only an assemble of internal GPUs on the CPU/GPU Fusion or Multi-Core chip.
- FIG. 11C shows an illustrative implementation of the MMPGRS following the Game Console Class of MMPGRS Architecture described in FIG. 7 A 1 - 2 .
- the AMCM 400 and Decomposition Submodule No. 1 401 ′ are realized as a software package within the host memory space (HMS) of the game console system,
- a graphics hub chip 401 ′′, 402 ′′, 403 ′′, 404 ′′, mounted on the PC board of the game console system implements the Decomposition Submodule No. 2 401 ′′, the Distribution Module 402 ′, the Recomposition Module 403 ′ as well as the interconnect network (e.g.
- crossbar switch 404 ′′
- multiple GPUs on the PC board of the game console system are interfaced to Distribution and Recomposition Modules by way of the interconnect network 404 ′′ within the graphics hub chip, and optionally, the Recomposition Module can be implemented across two or more GPUs 715 , 716 , and (iv) a display device 106 is interfaced to the primary GPU by way of an analog display interface or the like.
- FIG. 11 C 1 shows an illustrative embodiment of the Game Console MMPGS implementation of FIG. 11D , showing its controller in combination with its game console unit.
- the MMPGRS of the Present Invention Deployed in Client Machines on Multi-User Computer Networks
- the graphics-based applications e.g. games, simulations, business processes, etc.
- 3D graphics processes which are rendered using the parallel computing principles of the present invention
- the parallel graphics rendering processes carried out using the principles of the present invention can stem from applications supported on (i) multi-CPU host computing platforms, as well as (ii) single and multiple CPU based network-based application servers.
- streams of graphics commands and data (GCAD) pertaining to the graphics-based application at hand can be generated by application server(s) in response to one or more multiple users (e.g. players) who may be either local or remote with respect to each other.
- the application servers would transmit streams of graphics commands and data to the participants (e.g. users or players) of a multi-player game.
- the client-based computing machine of each user would embody one form of the MMPGRS of the present invention, and receive the graphics commands and data streams support the client-side operations of either (i) a client-server based application (running at the remote application servers), and/or (ii) a Web-based application generated from http (Web) servers interfaced to application servers, driven by database servers, as illustrated in FIGS. 12A and 12B .
- the MMPGRS aboard each client machine on the network would support its parallel graphics rendering processes, as described in great detail hereinabove, and composited images will be displayed on the display device of the client machine.
- Display devices available to the users of a particular graphics-based application can include LCD panels, plasma display panels, LCD or DLP based multi-media projectors and the like.
- FIG. 12A shows a first illustrative embodiment of the multi-user computer network according to the present invention, comprising a plurality of client machines, wherein one or more client machines embody the MMPGRS of the present invention designed using the software-based system architecture of FIG. 7A .
- FIG. 12B a second illustrative embodiment of the multi-user computer network of the present invention, is shown comprising a plurality of client machines, wherein one or more client machines embody the MMPGRS of the present invention designed using the hardware-based system architecture of FIG. 7B .
- the application server(s) driven by one or more database servers (RDBMS) on the network, and typically supported by a cluster of communication servers (e.g.
- RDBMS database servers
- GAPs Graphic Application Profiles
- each MMPGRS is optimally programmed at all possible times so that it quickly and continuously offers users high graphics performance through its adaptive multi-modal parallel graphics operation.
- One way to help carry out this objective is to set up a Central Application/Scene Profile Database Server System on the Internet, as shown in FIGS. 12A and 12B , and support the various Internet-based application registration and profile management and delivery services, as described hereinbelow.
- the Central Application/Scene Profile Database Server System of the illustrative embodiment comprises a cluster of Web (http) servers, interfaced with a cluster of application servers, which in turn are interfaced with one or more database servers (supporting RDBMS software), well known in the art.
- the Central Application/Scene Profile Database Server System would support a Web-based Game Application Registration and Profile Management Application, providing a number of Web-based services, including:
- the Web-based Game Application Registration and Profile Management Application of the present invention would be designed (using UML techniques) and implemented (using Java or C+) so as to provide an industrial-strength system capable of serving potentially millions of client machines embodying the MMPGRS of the present invention.
- GAPs Graphic Application Profiles
- graphic application users e.g. gamers
- the MMPGRS would preferably run an application profiling and analysis algorithm that uses the most recently downloaded expert GAP loaded into its AMCM, and then allow system-user interaction, user behavior, and application performance to modify and improve the expert GAP profile over time until the next automated update occurs.
- the Application Profiling and Analysis Module in each MMGPRS subscribing to the Automatic GAP Management Service will be designed to that it modifies and improves the downloaded expert GAP within particularly set limits and constraints, and according to particular criteria, so that the expert GAP is allowed to evolve in an optimal manner, without performance regression.
- the MMPGRS of the present invention can be programmed with other modes of 3D graphics rendering (beyond traditional Object, Image and Time Division Modes), and that these new and/or extended mode of parallel operation can be based on novel ways of dividing and/or quantizing: (i) objects and/or scenery being graphically rendered; (ii) the graphical display screen (on which graphical images of the rendered object/scenery are projected); (iii) temporal aspects of the graphical rendering process; (iv) the illumination sources used during the graphical rendering process using parallel computational operations; as well as (v) various hybrid combinations of these components of the 3D graphical rendering process.
Abstract
Description
-
- (I) Texture Count;
- (Ii) Screen Resolution;
- (Iii) Polygon Volume;
- (iv) at each GPPL, utilization of
- (a) the Geometry Engine
- (b) the Pixel engine, and
- (c) Video memory;
- (v) Utilization of the CPU;
- (vi) total pixels rendered;
- (vii) total geometric data rendered;
- (viii) workload of each GPU; and
- (ix) volumes of transferred data.
-
- (1) Recognition of Application (e.g. video game, simulation, etc.);
- (2) Processing of trial & error results produced by the processes described in FIGS. 5C3 and 5C4;
- (3) Utilization of the Application Profile from data in the Application/Scene Profile Database;
- (4) Aggregation of Data in the Historical Repository;
- (5) Analysis of Performance Data Inputs;
- (6) Analysis based on the integration of
- (a) Frame-based “atomic” Performance Data,
- (b) Aggregated data within the Historical Repository, and
- (c) Data stored in the Application/Scene Profile Database;
- (7) Detection of rendering algorithms used by Application
- (8) Detection of use of the FB in next successive frame as a preventive condition for Time Division Mode;
- (9) Recognition of preventive conditions for other parallel modes;
- (10) Evaluation of pixel layer depth at the pixel subsystem of GPU;
- (11) Frame/sec count;
- (12) Detection of critical events (e.g. frame/sec drop);
- (13) Detection of bottlenecks in graphics pipeline;
- (14) Measure and balance of load among the GPUs;
- (15) Update Application/Scene Profile Database from data in the Historical Depository; and
- (16) Selection of the optimal parallel graphics rendering mode of operation for the MMPGRS.
The Parallel Policy Management Module
-
- Pixel processing load
- Screen resolution
- Depth complexity of the scene
- Polygon count
- Video-memory usage
- Frame/second rate
- Change of frames/second rate
- Tolerance of latency
- Use of the same FB in successive frame
- (10) User-System Interaction during the running of the Application.
User-Interactivity Driven Mode Selection within the MMPGRS of the Present Invention
-
- Increase in pixel processing load
- Increase in screen resolution
- Increase in scene depth complexity
- Decrease in polygon count
-
- Increase of polygon count
- Increase of video memory footprint
- Decrease of scene depth complexity
-
- Demand for higher frame/second rate
- Higher latency is tolerated
- There is no use of the FB for successive frame
- No predefined input activity detected by the UID Subsystem
-
- Latency is not tolerable
- FB is used for successive frame
- High polygon count
- Input activity detected by the UID Subsystem
-
- Latency is not tolerable
- FB is used for successive frame
- High pixel processing load
- Input activity detected by the UID Subsystem
-
- Demand for higher frame/second rate
- Latency is tolerable
- High polygon count
- No predefined input activity detected by the UID Subsystem.
T ObjDiv=Transform+Fill/2 (1)
whereas in Object Division Mode, the fill load does not reduce in the same factor as transform load.
The render time is:
T ImgDiv=Transform/2+DepthComplexity*Fill/2 (2)
The fill function Depth Complexity in Object Division Mode depends on depth complexity of the scene. Depth complexity is the number of fragment replacements as a result of depth tests (the number of polygons drawn on every pixel). In the ideal case of no fragment replacement (e.g. all polygons of the scene are located on the same depth level), the second component of the Object Division Mode reduces to:
T ImgDiv=Transform/2+Fill/2 (2.1)
However, when depth complexity becomes high, the advantage of the Object Division Mode drops significantly, and in some cases the Image Division Mode may even perform better (e.g. in Applications with small number of polygons and high volume of textures).
The function DepthComplexity denotes the way the fill time is affected by depth complexity:
where E(L) is the expected number of fragments drawn at pixel for L total polygon layers.
In ideal case DepthComplexity=1. In this case, E is given by:
For a uniform layer-depth of L throughout the scene, the following algorithm is used to find conditions for switching from the Object Division Mode to the Image Division Mode:
In order to choose between the Image Division and the Object Division Mode, an algorithm is used which detects which transform and fill bound processing is smaller. Once the layer-depth reaches some threshold value throughout the scene, the Object Division Mode will not minimize the Fill function any more.
Render(n,p)=p×0.9×E(4)+p×0.1×E(20)=2.2347739657143681×p
With Object Division Mode support, the value of the Render function is:
Render(n/2, p)=p×0.9×E(4/2)+p×0.1×E(20/2)=1.6428968253968255×p
Notably, in this case, the improvement factor when using Object Division Mode support is 1.3602643398952217. On the other hand, a CAD engine might have a constant layer depth of 4. The improvement factor for interesting cases is shown in a table set forth in copending application Ser. No. 11/789,039, supra.
-
- Step (606): The color FB is read back from the secondary GPPL, and moved via memory bridge (203) to the primary GPPL's Texture memory (218) as a texture tex1.
- Step (607)L The Z-buff is read back from the secondary GPPL, and moved via memory bridge (203) to the primary GPPL's Texture memory (218) as a texture dep1.
- Step (604): Color FB of primary GPPL is copied to texture memory as texture tex2.
- Step (605): Z-buffer of primary GPPL is copied to texture memory as texture dep2.
- Step (608): Shader code for recomposition (described in FIG. 7B7-2) is downloaded and exercised on four textures tex1, tex2, dep1, dep2 as follows:
- Step (609): The two depth textures are compared pixel by pixel for their depth values. Assuming the rule that the closest pixel is the one to be transferred to the final FB, at each x,y location the two depth textures are compared for lowest depth value, the lowest is chosen, and the color value at x,y of its correspondent color texture is moved to the x,y location in the final texture.
- Step (610): The resulting texture is copied back to the primary color FB.
- To complete rendering (step 404 b), the following substeps are performed:
- Step (611): All transparent objects of the scene and overlays (such as score titles) are essentially kept by applications for the very last data to be rendered. Therefore, once all opaque objects have been rendered in parallel at separate GPPLs and composed back to the primary's FB, the additional and final phase of a non-parallel rendering of transparent objects takes place in the primary GPPL.
- Step (612): The final FB is sent to the display device for display on its display screen.
Claims (14)
Priority Applications (40)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/897,536 US7961194B2 (en) | 2003-11-19 | 2007-08-30 | Method of controlling in real time the switching of modes of parallel operation of a multi-mode parallel graphics processing subsystem embodied within a host computing system |
US11/901,716 US20080246772A1 (en) | 2003-11-19 | 2007-09-18 | Multi-mode parallel graphics rendering system (MMPGRS) employing multiple graphics processing pipelines (GPPLS) and real-time performance data collection and analysis during the automatic control of the mode of parallel operation of said GPPLS |
US11/901,715 US20080074431A1 (en) | 2003-11-19 | 2007-09-18 | Computing system capable of parallelizing the operation of multiple graphics processing units (GPUS) supported on external graphics cards |
US11/901,692 US7777748B2 (en) | 2003-11-19 | 2007-09-18 | PC-level computing system with a multi-mode parallel graphics rendering subsystem employing an automatic mode controller, responsive to performance data collected during the run-time of graphics applications |
US11/901,697 US20080074428A1 (en) | 2003-11-19 | 2007-09-18 | Method of rendering pixel-composited images for a graphics-based application running on a computing system embodying a multi-mode parallel graphics rendering system |
US11/901,696 US20080088631A1 (en) | 2003-11-19 | 2007-09-18 | Multi-mode parallel graphics rendering and display system supporting real-time detection of scene profile indices programmed within pre-profiled scenes of the graphics-based application |
US11/901,714 US20080074429A1 (en) | 2003-11-19 | 2007-09-18 | Multi-mode parallel graphics rendering system (MMPGRS) supporting real-time transition between multiple states of parallel rendering operation in response to the automatic detection of predetermined operating conditions |
US11/901,727 US20080094402A1 (en) | 2003-11-19 | 2007-09-18 | Computing system having a parallel graphics rendering system employing multiple graphics processing pipelines (GPPLS) dynamically controlled according to time, image and object division modes of parallel operation during the run-time of graphics-based applications running on the computing system |
US11/901,745 US20080079737A1 (en) | 2003-11-19 | 2007-09-18 | Multi-mode parallel graphics rendering and display system supporting real-time detection of mode control commands (MCCS) programmed within pre-profiled scenes of the graphics-based application |
US11/901,713 US20080068389A1 (en) | 2003-11-19 | 2007-09-18 | Multi-mode parallel graphics rendering system (MMPGRS) embodied within a host computing system and employing the profiling of scenes in graphics-based applications |
US11/901,733 US20080094404A1 (en) | 2003-11-19 | 2007-09-18 | Computing system having multi-mode parallel graphics rendering subsystem including multiple graphics processing pipelines (GPPLS) and supporting automated division of graphics commands and data during automatic mode control |
US11/903,203 US20080316216A1 (en) | 2003-11-19 | 2007-09-20 | Computing system capable of parallelizing the operation of multiple graphics processing pipelines (GPPLS) supported on a multi-core CPU chip, and employing a software-implemented multi-mode parallel graphics rendering subsystem |
US11/903,187 US20080094403A1 (en) | 2003-11-19 | 2007-09-20 | Computing system capable of parallelizing the operation graphics processing units (GPUs) supported on a CPU/GPU fusion-architecture chip and one or more external graphics cards, employing a software-implemented multi-mode parallel graphics rendering subsystem |
US11/903,202 US20080198167A1 (en) | 2003-11-19 | 2007-09-20 | Computing system capable of parallelizing the operation of graphics processing units (GPUS) supported on an integrated graphics device (IGD) and one or more external graphics cards, employing a software-implemented multi-mode parallel graphics rendering subsystem |
US11/904,040 US7940274B2 (en) | 2003-11-19 | 2007-09-25 | Computing system having a multiple graphics processing pipeline (GPPL) architecture supported on multiple external graphics cards connected to an integrated graphics device (IGD) embodied within a bridge circuit |
US11/904,039 US20080084419A1 (en) | 2003-11-19 | 2007-09-25 | Computing system capable of parallelizing the operation of multiple graphics processing units supported on external graphics cards connected to a graphics hub device |
US11/904,043 US20080088632A1 (en) | 2003-11-19 | 2007-09-25 | Computing system capable of parallelizing the operation of multiple graphics processing units (GPUs) supported on an integrated graphics device (IGD) within a bridge circuit, wherewithin image recomposition is carried out |
US11/904,042 US20080084422A1 (en) | 2003-11-19 | 2007-09-25 | Computing system capable of parallelizing the operation of multiple graphics processing units (GPUS) supported on external graphics cards connected to a graphics hub device with image recomposition being carried out across two or more of said GPUS |
US11/904,022 US20080084418A1 (en) | 2003-11-19 | 2007-09-25 | Computing system capable of parallelizing the operation of multiple graphics processing units (GPUS) supported on an integrated graphics device (IGD) within a bridge circuit |
US11/904,041 US20080084421A1 (en) | 2003-11-19 | 2007-09-25 | Computing system capable of parallelizing the operation of multiple graphical processing units (GPUs) supported on external graphics cards, with image recomposition being carried out within said GPUs |
US11/904,300 US7944450B2 (en) | 2003-11-19 | 2007-09-26 | Computing system having a hybrid CPU/GPU fusion-type graphics processing pipeline (GPPL) architecture |
US11/904,317 US8125487B2 (en) | 2003-11-19 | 2007-09-26 | Game console system capable of paralleling the operation of multiple graphic processing units (GPUS) employing a graphics hub device supported on a game console board |
US11/904,294 US20080084423A1 (en) | 2003-11-19 | 2007-09-26 | Computing system capable of parallelizing the operation of multiple graphics pipelines (GPPLS) implemented on a multi-core CPU chip |
PCT/US2007/026466 WO2008082641A2 (en) | 2006-12-31 | 2007-12-28 | Multi-mode parallel graphics processing systems and methods |
CA002674351A CA2674351A1 (en) | 2006-12-31 | 2007-12-28 | Multi-mode parallel graphics processing systems and methods |
US12/077,072 US20090027383A1 (en) | 2003-11-19 | 2008-03-14 | Computing system parallelizing the operation of multiple graphics processing pipelines (GPPLs) and supporting depth-less based image recomposition |
US12/229,215 US20090135190A1 (en) | 2003-11-19 | 2008-08-20 | Multimode parallel graphics rendering systems and methods supporting task-object division |
US12/231,295 US20090128550A1 (en) | 2003-11-19 | 2008-08-29 | Computing system supporting parallel 3D graphics processes based on the division of objects in 3D scenes |
US12/231,304 US8284207B2 (en) | 2003-11-19 | 2008-08-29 | Method of generating digital images of objects in 3D scenes while eliminating object overdrawing within the multiple graphics processing pipeline (GPPLS) of a parallel graphics processing system generating partial color-based complementary-type images along the viewing direction using black pixel rendering and subsequent recompositing operations |
US12/231,296 US20090179894A1 (en) | 2003-11-19 | 2008-08-29 | Computing system capable of parallelizing the operation of multiple graphics processing pipelines (GPPLS) |
US12/941,233 US8754894B2 (en) | 2003-11-19 | 2010-11-08 | Internet-based graphics application profile management system for updating graphic application profiles stored within the multi-GPU graphics rendering subsystems of client machines running graphics-based applications |
US12/985,594 US9275430B2 (en) | 2006-12-31 | 2011-01-06 | Computing system employing a multi-GPU graphics processing and display subsystem supporting single-GPU non-parallel (multi-threading) and multi-GPU application-division parallel modes of graphics processing operation |
US13/646,710 US20130120410A1 (en) | 2003-11-19 | 2012-10-07 | Multi-pass method of generating an image frame of a 3d scene using an object-division based parallel graphics rendering process |
US14/305,010 US9584592B2 (en) | 2003-11-19 | 2014-06-16 | Internet-based graphics application profile management system for updating graphic application profiles stored within the multi-GPU graphics rendering subsystems of client machines running graphics-based applications |
US15/041,342 US10120433B2 (en) | 2006-12-31 | 2016-02-11 | Apparatus and method for power management of a computing system |
US16/162,059 US10545565B2 (en) | 2006-12-31 | 2018-10-16 | Apparatus and method for power management of a computing system |
US16/751,408 US10838480B2 (en) | 2006-12-31 | 2020-01-24 | Apparatus and method for power management of a computing system |
US17/070,612 US11372469B2 (en) | 2006-12-31 | 2020-10-14 | Apparatus and method for power management of a multi-gpu computing system |
US17/685,122 US11714476B2 (en) | 2006-12-31 | 2022-03-02 | Apparatus and method for power management of a computing system |
US18/332,524 US20230315190A1 (en) | 2006-12-31 | 2023-06-09 | Apparatus and method for power management of a computing system |
Applications Claiming Priority (11)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US52308403P | 2003-11-19 | 2003-11-19 | |
PCT/IL2004/001069 WO2005050557A2 (en) | 2003-11-19 | 2004-11-19 | Method and system for multiple 3-d graphic pipeline over a pc bus |
US64714605P | 2005-01-25 | 2005-01-25 | |
US75960806P | 2006-01-18 | 2006-01-18 | |
US11/340,402 US7812844B2 (en) | 2004-01-28 | 2006-01-25 | PC-based computing system employing a silicon chip having a routing unit and a control unit for parallelizing multiple GPU-driven pipeline cores according to the object division mode of parallel operation during the running of a graphics application |
US11/386,454 US7834880B2 (en) | 2004-01-28 | 2006-03-22 | Graphics processing and display system employing multiple graphics cores on a silicon chip of monolithic construction |
US11/648,160 US8497865B2 (en) | 2006-12-31 | 2006-12-31 | Parallel graphics system employing multiple graphics processing pipelines with multiple graphics processing units (GPUS) and supporting an object division mode of parallel graphics processing using programmable pixel or vertex processing resources provided with the GPUS |
US11/655,735 US8085273B2 (en) | 2003-11-19 | 2007-01-18 | Multi-mode parallel graphics rendering system employing real-time automatic scene profiling and mode control |
US57968207A | 2007-03-23 | 2007-03-23 | |
US11/789,039 US20070291040A1 (en) | 2005-01-25 | 2007-04-23 | Multi-mode parallel graphics rendering system supporting dynamic profiling of graphics-based applications and automatic control of parallel modes of operation |
US11/897,536 US7961194B2 (en) | 2003-11-19 | 2007-08-30 | Method of controlling in real time the switching of modes of parallel operation of a multi-mode parallel graphics processing subsystem embodied within a host computing system |
Related Parent Applications (9)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/579,682 Continuation-In-Part US7808499B2 (en) | 2003-11-19 | 2004-11-19 | PC-based computing system employing parallelized graphics processing units (GPUS) interfaced with the central processing unit (CPU) using a PC bus and a hardware graphics hub having a router |
PCT/IL2004/001069 Continuation-In-Part WO2005050557A2 (en) | 2003-11-19 | 2004-11-19 | Method and system for multiple 3-d graphic pipeline over a pc bus |
US11/340,402 Continuation-In-Part US7812844B2 (en) | 2003-11-19 | 2006-01-25 | PC-based computing system employing a silicon chip having a routing unit and a control unit for parallelizing multiple GPU-driven pipeline cores according to the object division mode of parallel operation during the running of a graphics application |
US11/386,454 Continuation-In-Part US7834880B2 (en) | 2003-11-19 | 2006-03-22 | Graphics processing and display system employing multiple graphics cores on a silicon chip of monolithic construction |
US11/648,160 Continuation-In-Part US8497865B2 (en) | 2003-11-19 | 2006-12-31 | Parallel graphics system employing multiple graphics processing pipelines with multiple graphics processing units (GPUS) and supporting an object division mode of parallel graphics processing using programmable pixel or vertex processing resources provided with the GPUS |
US11/655,735 Continuation-In-Part US8085273B2 (en) | 2003-11-19 | 2007-01-18 | Multi-mode parallel graphics rendering system employing real-time automatic scene profiling and mode control |
US57968207A Continuation-In-Part | 2003-11-19 | 2007-03-23 | |
US11/789,039 Continuation-In-Part US20070291040A1 (en) | 2003-11-19 | 2007-04-23 | Multi-mode parallel graphics rendering system supporting dynamic profiling of graphics-based applications and automatic control of parallel modes of operation |
PCT/US2007/026466 Continuation-In-Part WO2008082641A2 (en) | 2003-11-19 | 2007-12-28 | Multi-mode parallel graphics processing systems and methods |
Related Child Applications (24)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/901,716 Continuation US20080246772A1 (en) | 2003-11-19 | 2007-09-18 | Multi-mode parallel graphics rendering system (MMPGRS) employing multiple graphics processing pipelines (GPPLS) and real-time performance data collection and analysis during the automatic control of the mode of parallel operation of said GPPLS |
US11/901,714 Continuation US20080074429A1 (en) | 2003-11-19 | 2007-09-18 | Multi-mode parallel graphics rendering system (MMPGRS) supporting real-time transition between multiple states of parallel rendering operation in response to the automatic detection of predetermined operating conditions |
US11/901,745 Continuation US20080079737A1 (en) | 2003-11-19 | 2007-09-18 | Multi-mode parallel graphics rendering and display system supporting real-time detection of mode control commands (MCCS) programmed within pre-profiled scenes of the graphics-based application |
US11/901,713 Continuation US20080068389A1 (en) | 2003-11-19 | 2007-09-18 | Multi-mode parallel graphics rendering system (MMPGRS) embodied within a host computing system and employing the profiling of scenes in graphics-based applications |
US11/901,733 Continuation US20080094404A1 (en) | 2003-11-19 | 2007-09-18 | Computing system having multi-mode parallel graphics rendering subsystem including multiple graphics processing pipelines (GPPLS) and supporting automated division of graphics commands and data during automatic mode control |
US11/901,696 Continuation US20080088631A1 (en) | 2003-11-19 | 2007-09-18 | Multi-mode parallel graphics rendering and display system supporting real-time detection of scene profile indices programmed within pre-profiled scenes of the graphics-based application |
US11/901,692 Continuation US7777748B2 (en) | 2003-11-19 | 2007-09-18 | PC-level computing system with a multi-mode parallel graphics rendering subsystem employing an automatic mode controller, responsive to performance data collected during the run-time of graphics applications |
US11/901,727 Continuation US20080094402A1 (en) | 2003-11-19 | 2007-09-18 | Computing system having a parallel graphics rendering system employing multiple graphics processing pipelines (GPPLS) dynamically controlled according to time, image and object division modes of parallel operation during the run-time of graphics-based applications running on the computing system |
US11/901,697 Continuation US20080074428A1 (en) | 2003-11-19 | 2007-09-18 | Method of rendering pixel-composited images for a graphics-based application running on a computing system embodying a multi-mode parallel graphics rendering system |
US11/901,715 Continuation US20080074431A1 (en) | 2003-11-19 | 2007-09-18 | Computing system capable of parallelizing the operation of multiple graphics processing units (GPUS) supported on external graphics cards |
US11/903,187 Continuation US20080094403A1 (en) | 2003-11-19 | 2007-09-20 | Computing system capable of parallelizing the operation graphics processing units (GPUs) supported on a CPU/GPU fusion-architecture chip and one or more external graphics cards, employing a software-implemented multi-mode parallel graphics rendering subsystem |
US11/903,202 Continuation US20080198167A1 (en) | 2003-11-19 | 2007-09-20 | Computing system capable of parallelizing the operation of graphics processing units (GPUS) supported on an integrated graphics device (IGD) and one or more external graphics cards, employing a software-implemented multi-mode parallel graphics rendering subsystem |
US11/903,203 Continuation US20080316216A1 (en) | 2003-11-19 | 2007-09-20 | Computing system capable of parallelizing the operation of multiple graphics processing pipelines (GPPLS) supported on a multi-core CPU chip, and employing a software-implemented multi-mode parallel graphics rendering subsystem |
US11/904,042 Continuation US20080084422A1 (en) | 2003-11-19 | 2007-09-25 | Computing system capable of parallelizing the operation of multiple graphics processing units (GPUS) supported on external graphics cards connected to a graphics hub device with image recomposition being carried out across two or more of said GPUS |
US11/904,040 Continuation US7940274B2 (en) | 2003-11-19 | 2007-09-25 | Computing system having a multiple graphics processing pipeline (GPPL) architecture supported on multiple external graphics cards connected to an integrated graphics device (IGD) embodied within a bridge circuit |
US11/904,022 Continuation US20080084418A1 (en) | 2003-11-19 | 2007-09-25 | Computing system capable of parallelizing the operation of multiple graphics processing units (GPUS) supported on an integrated graphics device (IGD) within a bridge circuit |
US11/904,043 Continuation US20080088632A1 (en) | 2003-11-19 | 2007-09-25 | Computing system capable of parallelizing the operation of multiple graphics processing units (GPUs) supported on an integrated graphics device (IGD) within a bridge circuit, wherewithin image recomposition is carried out |
US11/904,039 Continuation US20080084419A1 (en) | 2003-11-19 | 2007-09-25 | Computing system capable of parallelizing the operation of multiple graphics processing units supported on external graphics cards connected to a graphics hub device |
US11/904,041 Continuation US20080084421A1 (en) | 2003-11-19 | 2007-09-25 | Computing system capable of parallelizing the operation of multiple graphical processing units (GPUs) supported on external graphics cards, with image recomposition being carried out within said GPUs |
US11/904,317 Continuation US8125487B2 (en) | 2003-11-19 | 2007-09-26 | Game console system capable of paralleling the operation of multiple graphic processing units (GPUS) employing a graphics hub device supported on a game console board |
US11/904,300 Continuation US7944450B2 (en) | 2003-11-19 | 2007-09-26 | Computing system having a hybrid CPU/GPU fusion-type graphics processing pipeline (GPPL) architecture |
US11/904,294 Continuation US20080084423A1 (en) | 2003-11-19 | 2007-09-26 | Computing system capable of parallelizing the operation of multiple graphics pipelines (GPPLS) implemented on a multi-core CPU chip |
US12/077,072 Continuation-In-Part US20090027383A1 (en) | 2003-11-19 | 2008-03-14 | Computing system parallelizing the operation of multiple graphics processing pipelines (GPPLs) and supporting depth-less based image recomposition |
US12/941,233 Continuation US8754894B2 (en) | 2003-11-19 | 2010-11-08 | Internet-based graphics application profile management system for updating graphic application profiles stored within the multi-GPU graphics rendering subsystems of client machines running graphics-based applications |
Publications (2)
Publication Number | Publication Date |
---|---|
US20090027402A1 US20090027402A1 (en) | 2009-01-29 |
US7961194B2 true US7961194B2 (en) | 2011-06-14 |
Family
ID=39589133
Family Applications (3)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/897,536 Active 2025-05-11 US7961194B2 (en) | 2003-11-19 | 2007-08-30 | Method of controlling in real time the switching of modes of parallel operation of a multi-mode parallel graphics processing subsystem embodied within a host computing system |
US12/941,233 Active US8754894B2 (en) | 2003-11-19 | 2010-11-08 | Internet-based graphics application profile management system for updating graphic application profiles stored within the multi-GPU graphics rendering subsystems of client machines running graphics-based applications |
US14/305,010 Active 2025-06-01 US9584592B2 (en) | 2003-11-19 | 2014-06-16 | Internet-based graphics application profile management system for updating graphic application profiles stored within the multi-GPU graphics rendering subsystems of client machines running graphics-based applications |
Family Applications After (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/941,233 Active US8754894B2 (en) | 2003-11-19 | 2010-11-08 | Internet-based graphics application profile management system for updating graphic application profiles stored within the multi-GPU graphics rendering subsystems of client machines running graphics-based applications |
US14/305,010 Active 2025-06-01 US9584592B2 (en) | 2003-11-19 | 2014-06-16 | Internet-based graphics application profile management system for updating graphic application profiles stored within the multi-GPU graphics rendering subsystems of client machines running graphics-based applications |
Country Status (3)
Country | Link |
---|---|
US (3) | US7961194B2 (en) |
CA (1) | CA2674351A1 (en) |
WO (1) | WO2008082641A2 (en) |
Cited By (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20080165196A1 (en) * | 2003-11-19 | 2008-07-10 | Reuven Bakalash | Method of dynamic load-balancing within a PC-based computing system employing a multiple GPU-based graphics pipeline architecture supporting multiple modes of GPU parallelization |
US20090284773A1 (en) * | 2008-05-15 | 2009-11-19 | Canon Kabushiki Kaisha | Image processing method, image processing apparatus, and control method thereof |
US20100262971A1 (en) * | 2008-07-22 | 2010-10-14 | Toyota Jidosha Kabushiki Kaisha | Multi core system, vehicular electronic control unit, and task switching method |
US20110072056A1 (en) * | 2003-11-19 | 2011-03-24 | Reuven Bakalash | Internet-based graphics application profile management system for updating graphic application profiles stored within the multi-gpu graphics rendering subsystems of client machines running graphics-based applications |
US20110153996A1 (en) * | 2009-12-23 | 2011-06-23 | Bader Aleksey A | Parallel and Vectored Gilbert-Johnson-Keerthi Graphics Processing |
US9098350B2 (en) | 2012-10-10 | 2015-08-04 | International Business Machines Corporation | Adaptive auto-pipelining for stream processing applications |
US9569221B1 (en) * | 2014-09-29 | 2017-02-14 | Amazon Technologies, Inc. | Dynamic selection of hardware processors for stream processing |
US20180234625A1 (en) * | 2017-02-15 | 2018-08-16 | Canon Kabushiki Kaisha | Image processing apparatus and image capturing apparatus |
US10798162B2 (en) * | 2017-08-28 | 2020-10-06 | Texas Instruments Incorporated | Cluster system with fail-safe fallback mechanism |
US11010169B2 (en) | 2018-01-09 | 2021-05-18 | Samsung Electronics Co., Ltd. | Processor device collecting performance information through command-set-based replay |
US20210192844A1 (en) * | 2019-12-20 | 2021-06-24 | Wormhole Labs, Inc. | Passive Data Capture-based Environment Generation |
Families Citing this family (68)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7967112B2 (en) * | 2006-12-02 | 2011-06-28 | Royston, LLC. | Check stand with a two belted input and a slidable scanner |
US8108056B2 (en) * | 2007-11-13 | 2012-01-31 | Rockwell Automation Technologies, Inc. | Industrial controller using shared memory multicore architecture |
US20090207167A1 (en) * | 2008-02-18 | 2009-08-20 | International Business Machines Corporation | Method and System for Remote Three-Dimensional Stereo Image Display |
EP2098994A1 (en) * | 2008-03-04 | 2009-09-09 | Agfa HealthCare NV | System for real-time volume rendering on thin clients via a render server |
US8539256B2 (en) * | 2009-02-10 | 2013-09-17 | International Business Machines Corporation | Optimizing power consumption and performance in a hybrid computer environment |
US8339653B2 (en) * | 2009-03-30 | 2012-12-25 | Sharp Laboratories Of America, Inc. | Methods and systems for rendering data based on overlap characteristics |
US8339671B2 (en) * | 2009-03-30 | 2012-12-25 | Sharp Laboratories Of America, Inc. | Methods and systems for rendering data by partitioning a graphics list |
US20100245918A1 (en) * | 2009-03-30 | 2010-09-30 | Nguyen Uoc H | Methods and Systems for Rendering Data |
US8339672B2 (en) * | 2009-03-30 | 2012-12-25 | Sharp Laboratories Of America, Inc. | Methods and systems for rendering data using graphic-list partitions and associated rendering processors |
US8411319B2 (en) * | 2009-03-30 | 2013-04-02 | Sharp Laboratories Of America, Inc. | Methods and systems for concurrent rendering of graphic-list elements |
US20100245889A1 (en) * | 2009-03-30 | 2010-09-30 | Nguyen Uoc H | Methods and Systems for Rendering Data |
US8339670B2 (en) * | 2009-03-30 | 2012-12-25 | Sharp Laboratories Of America, Inc. | Methods and systems for rendering data based on graphic-list partitioning |
US8611670B2 (en) | 2010-02-25 | 2013-12-17 | The Board Of Trustees Of The Leland Stanford Junior University | Intelligent part identification for use with scene characterization or motion capture |
US8994790B2 (en) * | 2010-02-25 | 2015-03-31 | The Board Of Trustees Of The Leland Stanford Junior University | Motion capture with low input data constraints |
US9053562B1 (en) | 2010-06-24 | 2015-06-09 | Gregory S. Rabin | Two dimensional to three dimensional moving image converter |
US20120001925A1 (en) * | 2010-06-30 | 2012-01-05 | Ati Technologies, Ulc | Dynamic Feedback Load Balancing |
JP2012033012A (en) * | 2010-07-30 | 2012-02-16 | Casio Comput Co Ltd | Image tone conversion device, image tone conversion system, image tone conversion method and program |
US8982136B2 (en) * | 2011-05-16 | 2015-03-17 | Qualcomm Incorporated | Rendering mode selection in graphics processing units |
US10013731B2 (en) * | 2011-06-30 | 2018-07-03 | Intel Corporation | Maximizing parallel processing in graphics processors |
US8736622B2 (en) * | 2011-12-07 | 2014-05-27 | Ubitus Inc | System and method of leveraging GPU resources to enhance performance of an interact-able content browsing service |
US10223997B2 (en) * | 2011-12-07 | 2019-03-05 | Ubitus Inc. | System and method of leveraging GPU resources to increase performance of an interact-able content browsing service |
WO2013102798A1 (en) * | 2012-01-06 | 2013-07-11 | Aselsan Elektronik Sanayi Ve Ticaret Anonim Sirketi | Distributed image generation system |
US9075913B2 (en) * | 2012-02-27 | 2015-07-07 | Qualcomm Incorporated | Validation of applications for graphics processing unit |
US9992021B1 (en) | 2013-03-14 | 2018-06-05 | GoTenna, Inc. | System and method for private and point-to-point communication between computing devices |
US9641592B2 (en) | 2013-11-11 | 2017-05-02 | Amazon Technologies, Inc. | Location of actor resources |
US9582904B2 (en) | 2013-11-11 | 2017-02-28 | Amazon Technologies, Inc. | Image composition based on remote object data |
US9634942B2 (en) | 2013-11-11 | 2017-04-25 | Amazon Technologies, Inc. | Adaptive scene complexity based on service quality |
US9578074B2 (en) | 2013-11-11 | 2017-02-21 | Amazon Technologies, Inc. | Adaptive content transmission |
US9596280B2 (en) * | 2013-11-11 | 2017-03-14 | Amazon Technologies, Inc. | Multiple stream content presentation |
US9604139B2 (en) | 2013-11-11 | 2017-03-28 | Amazon Technologies, Inc. | Service for generating graphics object data |
US9805479B2 (en) | 2013-11-11 | 2017-10-31 | Amazon Technologies, Inc. | Session idle optimization for streaming server |
US9630097B2 (en) | 2014-01-22 | 2017-04-25 | Skillz Inc. | Online software video capture and replay system |
US9804900B2 (en) * | 2014-05-30 | 2017-10-31 | Apple Inc. | Manipulating shaders with object-oriented programming |
KR101913212B1 (en) | 2014-11-07 | 2018-12-28 | 삼성전자주식회사 | Display device and control method of display device |
US9479602B1 (en) | 2015-05-20 | 2016-10-25 | Skillz Inc. | Event platform for peer-to-peer digital gaming competition |
US9940688B2 (en) * | 2015-06-04 | 2018-04-10 | Lenovo Enterprise Solutions (Singapore) Pte. Ltd. | Video adapter alignment |
US11095869B2 (en) | 2015-09-22 | 2021-08-17 | Fyusion, Inc. | System and method for generating combined embedded multi-view interactive digital media representations |
US11006095B2 (en) | 2015-07-15 | 2021-05-11 | Fyusion, Inc. | Drone based capture of a multi-view interactive digital media |
US10147211B2 (en) | 2015-07-15 | 2018-12-04 | Fyusion, Inc. | Artificially rendering images using viewpoint interpolation and extrapolation |
US10222932B2 (en) | 2015-07-15 | 2019-03-05 | Fyusion, Inc. | Virtual reality environment based manipulation of multilayered multi-view interactive digital media representations |
US10242474B2 (en) | 2015-07-15 | 2019-03-26 | Fyusion, Inc. | Artificially rendering images using viewpoint interpolation and extrapolation |
US11783864B2 (en) * | 2015-09-22 | 2023-10-10 | Fyusion, Inc. | Integration of audio into a multi-view interactive digital media representation |
CN105549698B (en) * | 2016-01-28 | 2018-12-21 | 浪潮(北京)电子信息产业有限公司 | A kind of GPU work station suitable for BIM industry |
WO2017160917A2 (en) | 2016-03-15 | 2017-09-21 | Skillz Inc. | Across-match analytics in peer-to-peer gaming tournaments |
CA3017742A1 (en) | 2016-03-15 | 2017-09-21 | Skillz Inc. | Synchronization model for virtual tournaments |
EP3429712A1 (en) | 2016-03-16 | 2019-01-23 | Skillz Inc. | Management of streaming video data |
US11202017B2 (en) | 2016-10-06 | 2021-12-14 | Fyusion, Inc. | Live style transfer on a mobile device |
US10437879B2 (en) | 2017-01-18 | 2019-10-08 | Fyusion, Inc. | Visual search using multi-view interactive digital media representations |
US10290141B2 (en) | 2017-04-17 | 2019-05-14 | Intel Corporation | Cloud based distributed single game calculation of shared computational work for multiple cloud gaming client devices |
US10313651B2 (en) | 2017-05-22 | 2019-06-04 | Fyusion, Inc. | Snapshots at predefined intervals or angles |
US11069147B2 (en) | 2017-06-26 | 2021-07-20 | Fyusion, Inc. | Modification of multi-view interactive digital media representation |
US10447588B1 (en) * | 2017-06-28 | 2019-10-15 | Rockwell Collins, Inc. | Decentralized integrated modular avionics (IMA) processing |
US10891219B1 (en) * | 2017-08-07 | 2021-01-12 | Electronic Arts Inc. | Code failure prediction system |
US20210134049A1 (en) * | 2017-08-08 | 2021-05-06 | Sony Corporation | Image processing apparatus and method |
US10949325B1 (en) | 2017-08-18 | 2021-03-16 | Electronic Arts Inc. | Automated cross-session video game testing |
US10592747B2 (en) | 2018-04-26 | 2020-03-17 | Fyusion, Inc. | Method and apparatus for 3-D auto tagging |
US10713747B2 (en) | 2018-06-08 | 2020-07-14 | Honeywell International Inc. | System and method for distributed processing of graphic server components |
US11087232B2 (en) * | 2018-07-18 | 2021-08-10 | IonQ, Inc. | Quantum hybrid computation |
CN113260434A (en) * | 2018-10-22 | 2021-08-13 | 索尼互动娱乐有限责任公司 | Data model for unified data platform |
EP3871423A4 (en) | 2018-10-23 | 2022-07-06 | Sony Interactive Entertainment LLC | Cross-platform spoiler block service |
EP3870321A4 (en) | 2018-10-25 | 2022-08-10 | Sony Interactive Entertainment LLC | Cross-platform consumption of in-game objects |
JP7317630B2 (en) * | 2019-08-14 | 2023-07-31 | キヤノン株式会社 | Image processing device, image processing method, and program |
WO2021065052A1 (en) * | 2019-10-02 | 2021-04-08 | 株式会社ソニー・インタラクティブエンタテインメント | Data processing system, data processing method, and computer program |
CN110738721B (en) * | 2019-10-12 | 2023-09-01 | 四川航天神坤科技有限公司 | Three-dimensional scene rendering acceleration method and system based on video geometric analysis |
US11080814B1 (en) * | 2020-02-03 | 2021-08-03 | Sony Interactive Entertainment Inc. | System and method for efficient multi-GPU rendering of geometry by pretesting against screen regions using prior frame information |
US11179644B2 (en) | 2020-03-30 | 2021-11-23 | Electronic Arts Inc. | Videogame telemetry data and game asset tracker for session recordings |
US11446570B2 (en) | 2020-05-08 | 2022-09-20 | Electronic Arts Inc. | Automated test multiplexing system |
CN113362218B (en) * | 2021-05-21 | 2022-09-27 | 北京百度网讯科技有限公司 | Data processing method and device, electronic equipment and storage medium |
Citations (191)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5475856A (en) | 1991-11-27 | 1995-12-12 | International Business Machines Corporation | Dynamic multi-mode parallel processing array |
US5535410A (en) | 1993-11-19 | 1996-07-09 | Hitachi, Ltd. | Parallel processor having decoder for selecting switch from the group of switches and concurrently inputting MIMD instructions while performing SIMD operation |
US5687357A (en) | 1995-04-14 | 1997-11-11 | Nvidia Corporation | Register array for utilizing burst mode transfer on local bus |
US5740464A (en) | 1995-05-15 | 1998-04-14 | Nvidia Corporation | Architecture for providing input/output operations in a computer system |
US5745762A (en) | 1994-12-15 | 1998-04-28 | International Business Machines Corporation | Advanced graphics driver architecture supporting multiple system emulations |
US5754866A (en) | 1995-05-08 | 1998-05-19 | Nvidia Corporation | Delayed interrupts with a FIFO in an improved input/output architecture |
US5758182A (en) | 1995-05-15 | 1998-05-26 | Nvidia Corporation | DMA controller translates virtual I/O device address received directly from application program command to physical i/o device address of I/O device on device bus |
US5757385A (en) | 1994-07-21 | 1998-05-26 | International Business Machines Corporation | Method and apparatus for managing multiprocessor graphical workload distribution |
US5794016A (en) | 1995-12-11 | 1998-08-11 | Dynamic Pictures, Inc. | Parallel-processor graphics architecture |
US5841444A (en) | 1996-03-21 | 1998-11-24 | Samsung Electronics Co., Ltd. | Multiprocessor graphics system |
US5909595A (en) | 1995-05-15 | 1999-06-01 | Nvidia Corporation | Method of controlling I/O routing by setting connecting context for utilizing I/O processing elements within a computer system to produce multimedia effects |
US6118462A (en) | 1997-07-01 | 2000-09-12 | Memtrax Llc | Computer system controller having internal memory and external memory control |
US6169553B1 (en) | 1997-07-02 | 2001-01-02 | Ati Technologies, Inc. | Method and apparatus for rendering a three-dimensional scene having shadowing |
US6181352B1 (en) | 1999-03-22 | 2001-01-30 | Nvidia Corporation | Graphics pipeline selectively providing multiple pixels or multiple textures |
US6184908B1 (en) | 1998-04-27 | 2001-02-06 | Ati Technologies, Inc. | Method and apparatus for co-processing video graphics data |
US6188412B1 (en) | 1998-08-28 | 2001-02-13 | Ati Technologies, Inc. | Method and apparatus for performing setup operations in a video graphics system |
US6191800B1 (en) | 1998-08-11 | 2001-02-20 | International Business Machines Corporation | Dynamic balancing of graphics workloads using a tiling strategy |
US6201545B1 (en) | 1997-09-23 | 2001-03-13 | Ati Technologies, Inc. | Method and apparatus for generating sub pixel masks in a three dimensional graphic processing system |
US6212617B1 (en) | 1998-05-13 | 2001-04-03 | Microsoft Corporation | Parallel processing method and system using a lazy parallel data type to reduce inter-processor communication |
US6212261B1 (en) | 1996-08-14 | 2001-04-03 | Nortel Networks Limited | Internet-based telephone call manager |
US6259460B1 (en) | 1998-03-26 | 2001-07-10 | Silicon Graphics, Inc. | Method for efficient handling of texture cache misses by recirculation |
US6288418B1 (en) | 1999-03-19 | 2001-09-11 | Nvidia Corporation | Multiuse input/output connector arrangement for graphics accelerator integrated circuit |
US6292200B1 (en) | 1998-10-23 | 2001-09-18 | Silicon Graphics, Inc. | Apparatus and method for utilizing multiple rendering pipes for a single 3-D display |
US20010029556A1 (en) | 1998-04-17 | 2001-10-11 | Nvidia Corporation | Apparatus for accelerating the rendering of images |
US6333744B1 (en) | 1999-03-22 | 2001-12-25 | Nvidia Corporation | Graphics pipeline including combiner stages |
US6337686B2 (en) | 1998-01-07 | 2002-01-08 | Ati Technologies Inc. | Method and apparatus for line anti-aliasing |
US20020015055A1 (en) | 2000-07-18 | 2002-02-07 | Silicon Graphics, Inc. | Method and system for presenting three-dimensional computer graphics images using multiple graphics processing units |
US6352479B1 (en) | 1999-08-31 | 2002-03-05 | Nvidia U.S. Investment Company | Interactive gaming server and online community forum |
US20020059302A1 (en) | 2000-10-10 | 2002-05-16 | Hitoshi Ebihara | Data communication system and method, computer program, and recording medium |
US6415345B1 (en) | 1998-08-03 | 2002-07-02 | Ati Technologies | Bus mastering interface control system for transferring multistream data over a host bus |
US20020085007A1 (en) | 2000-06-29 | 2002-07-04 | Sun Microsystems, Inc. | Graphics system configured to parallel-process graphics data using multiple pipelines |
US6442656B1 (en) | 1999-08-18 | 2002-08-27 | Ati Technologies Srl | Method and apparatus for interfacing memory with a bus |
US20020118308A1 (en) | 2001-02-27 | 2002-08-29 | Ati Technologies, Inc. | Integrated single and dual television tuner having improved fine tuning |
US6462737B2 (en) | 1999-12-06 | 2002-10-08 | Nvidia Corporation | Clipping system and method for a graphics processing framework embodied on a single semiconductor platform |
US20020145612A1 (en) | 2001-01-29 | 2002-10-10 | Blythe David R. | Method and system for minimizing an amount of data needed to test data against subarea boundaries in spatially composited digital video |
US6473086B1 (en) | 1999-12-09 | 2002-10-29 | Ati International Srl | Method and apparatus for graphics processing using parallel graphics processors |
US6473089B1 (en) | 1998-03-02 | 2002-10-29 | Ati Technologies, Inc. | Method and apparatus for a video graphics circuit having parallel pixel processing |
US6477687B1 (en) | 1998-06-01 | 2002-11-05 | Nvidia U.S. Investment Company | Method of embedding RAMS and other macrocells in the core of an integrated circuit chip |
US20020180740A1 (en) | 1999-12-06 | 2002-12-05 | Nvidia Corporation | Clipping system and method for a single graphics semiconductor platform |
US6492987B1 (en) | 1998-08-27 | 2002-12-10 | Ati Technologies, Inc. | Method and apparatus for processing object elements that are being rendered |
US6496404B1 (en) | 2000-10-16 | 2002-12-17 | Nvidia Corporation | Memory system for use on a circuit board in which the number of loads is minimized |
US6496187B1 (en) | 1998-02-17 | 2002-12-17 | Sun Microsystems, Inc. | Graphics system configured to perform parallel sample to pixel calculation |
US6502173B1 (en) | 2000-09-29 | 2002-12-31 | Ati Technologies, Inc. | System for accessing memory and method therefore |
US20030020720A1 (en) | 1999-12-06 | 2003-01-30 | Nvidia Corporation | Method, apparatus and article of manufacture for a sequencer in a transform/lighting module capable of processing multiple independent execution threads |
US20030034975A1 (en) | 1999-12-06 | 2003-02-20 | Nvidia Corporation | Lighting system and method for a graphics processor |
US6529198B1 (en) | 1999-03-16 | 2003-03-04 | Nec Corporation | Parallel rendering device |
US6532525B1 (en) | 2000-09-29 | 2003-03-11 | Ati Technologies, Inc. | Method and apparatus for accessing memory |
US6532013B1 (en) | 2000-05-31 | 2003-03-11 | Nvidia Corporation | System, method and article of manufacture for pixel shaders for programmable shading |
US6535209B1 (en) | 1999-03-17 | 2003-03-18 | Nvidia Us Investments Co. | Data stream splitting and storage in graphics data processing |
US6542971B1 (en) | 2001-04-23 | 2003-04-01 | Nvidia Corporation | Memory access system and method employing an auxiliary buffer |
US6557065B1 (en) | 1999-12-20 | 2003-04-29 | Intel Corporation | CPU expandability bus |
US20030080959A1 (en) | 2001-10-29 | 2003-05-01 | Ati Technologies, Inc. | System, Method, and apparatus for early culling |
US20030103054A1 (en) | 1999-12-06 | 2003-06-05 | Nvidia Corporation | Integrated graphics processing unit with antialiasing |
US6577320B1 (en) | 1999-03-22 | 2003-06-10 | Nvidia Corporation | Method and apparatus for processing multiple types of pixel component representations including processes of premultiplication, postmultiplication, and colorkeying/chromakeying |
US6578068B1 (en) | 1999-08-31 | 2003-06-10 | Accenture Llp | Load balancer in environment services patterns |
US20030112246A1 (en) | 1999-12-06 | 2003-06-19 | Nvidia Corporation | Blending system and method in an integrated computer graphics pipeline |
US20030117971A1 (en) | 2001-12-21 | 2003-06-26 | Celoxica Ltd. | System, method, and article of manufacture for profiling an executable hardware model using calls to profiling functions |
US20030128197A1 (en) | 2002-01-04 | 2003-07-10 | Ati Technologies, Inc. | Portable device for providing dual display and method thereof |
US6593923B1 (en) | 2000-05-31 | 2003-07-15 | Nvidia Corporation | System, method and article of manufacture for shadow mapping |
US20030151606A1 (en) | 2001-10-29 | 2003-08-14 | Ati Technologies Inc. | System, method, and apparatus for multi-level hierarchical Z buffering |
US20030164834A1 (en) | 2002-03-01 | 2003-09-04 | Lefebvre Kevin T. | System and method utilizing multiple pipelines to render graphical data |
US20030164832A1 (en) | 2002-03-04 | 2003-09-04 | Alcorn Byron A. | Graphical display system and method |
US20030171907A1 (en) | 2002-03-06 | 2003-09-11 | Shay Gal-On | Methods and Apparatus for Optimizing Applications on Configurable Processors |
US20030179220A1 (en) | 2002-03-20 | 2003-09-25 | Nvidia Corporation | System, method and computer program product for generating a shader program |
US6633296B1 (en) | 2000-05-26 | 2003-10-14 | Ati International Srl | Apparatus for providing data to a plurality of graphics processors and method thereof |
US6636215B1 (en) | 1998-07-22 | 2003-10-21 | Nvidia Corporation | Hardware-assisted z-pyramid creation for host-based occlusion culling |
US6636212B1 (en) | 2000-11-14 | 2003-10-21 | Nvidia Corporation | Method and apparatus for determining visibility of groups of pixels |
US6646639B1 (en) | 1998-07-22 | 2003-11-11 | Nvidia Corporation | Modified method and apparatus for improved occlusion culling in graphics systems |
US20030212735A1 (en) | 2002-05-13 | 2003-11-13 | Nvidia Corporation | Method and apparatus for providing an integrated network of processors |
US6657635B1 (en) | 1999-09-03 | 2003-12-02 | Nvidia Corporation | Binning flush in graphics data processing |
US6662257B1 (en) | 2000-05-26 | 2003-12-09 | Ati International Srl | Multiple device bridge apparatus and method thereof |
US6664960B2 (en) | 2001-05-10 | 2003-12-16 | Ati Technologies Inc. | Apparatus for processing non-planar video graphics primitives and associated method of operation |
US6664963B1 (en) | 2000-05-31 | 2003-12-16 | Nvidia Corporation | System, method and computer program product for programmable shading using pixel shaders |
US6670958B1 (en) | 2000-05-26 | 2003-12-30 | Ati International, Srl | Method and apparatus for routing data to multiple graphics devices |
US6677953B1 (en) | 2001-11-08 | 2004-01-13 | Nvidia Corporation | Hardware viewport system and method for use in a graphics pipeline |
US20040012600A1 (en) | 2002-03-22 | 2004-01-22 | Deering Michael F. | Scalable high performance 3d graphics |
US6683614B2 (en) | 2001-12-21 | 2004-01-27 | Hewlett-Packard Development Company, L.P. | System and method for automatically configuring graphics pipelines by tracking a region of interest in a computer graphical display system |
US6690372B2 (en) | 2000-05-31 | 2004-02-10 | Nvidia Corporation | System, method and article of manufacture for shadow mapping |
US20040036159A1 (en) | 2002-08-23 | 2004-02-26 | Ati Technologies, Inc. | Integrated circuit having memory disposed thereon and method of making thereof |
US6700583B2 (en) | 2001-05-14 | 2004-03-02 | Ati Technologies, Inc. | Configurable buffer for multipass applications |
US6704025B1 (en) | 2001-08-31 | 2004-03-09 | Nvidia Corporation | System and method for dual-depth shadow-mapping |
US6725457B1 (en) | 2000-05-17 | 2004-04-20 | Nvidia Corporation | Semaphore enhancement to improve system performance |
US6724394B1 (en) | 2000-05-31 | 2004-04-20 | Nvidia Corporation | Programmable pixel shading architecture |
US6728820B1 (en) | 2000-05-26 | 2004-04-27 | Ati International Srl | Method of configuring, controlling, and accessing a bridge and apparatus therefor |
US6731298B1 (en) | 2000-10-02 | 2004-05-04 | Nvidia Corporation | System, method and article of manufacture for z-texture mapping |
US6734861B1 (en) | 2000-05-31 | 2004-05-11 | Nvidia Corporation | System, method and article of manufacture for an interlock module in a computer graphics processing pipeline |
US6741243B2 (en) | 2000-05-01 | 2004-05-25 | Broadcom Corporation | Method and system for reducing overflows in a computer graphics system |
US6744433B1 (en) | 2001-08-31 | 2004-06-01 | Nvidia Corporation | System and method for using and collecting information from a plurality of depth layers |
US6753878B1 (en) | 1999-03-08 | 2004-06-22 | Hewlett-Packard Development Company, L.P. | Parallel pipelined merge engines |
US20040153778A1 (en) | 2002-06-12 | 2004-08-05 | Ati Technologies, Inc. | Method, system and software for configuring a graphics processing communication mode |
US6774895B1 (en) | 2002-02-01 | 2004-08-10 | Nvidia Corporation | System and method for depth clamping in a hardware graphics pipeline |
US6779069B1 (en) | 2002-09-04 | 2004-08-17 | Nvidia Corporation | Computer system with source-synchronous digital link |
US6778189B1 (en) | 2001-08-24 | 2004-08-17 | Nvidia Corporation | Two-sided stencil testing system and method |
US6778181B1 (en) | 2000-12-07 | 2004-08-17 | Nvidia Corporation | Graphics processing system having a virtual texturing array |
US6778177B1 (en) | 1999-04-15 | 2004-08-17 | Sp3D Chip Design Gmbh | Method for rasterizing a graphics basic component |
WO2004070652A2 (en) | 2003-01-28 | 2004-08-19 | Lucid Information Technology Ltd. | Method and system for compositing three-dimensional graphics images using associative decision mechanism |
US20040169651A1 (en) | 2003-02-27 | 2004-09-02 | Nvidia Corporation | Depth bounds testing |
US6789154B1 (en) | 2000-05-26 | 2004-09-07 | Ati International, Srl | Apparatus and method for transmitting data |
US20040179019A1 (en) | 2003-03-12 | 2004-09-16 | Nvidia Corporation | Double-buffering of pixel data using copy-on-write semantics |
US6797998B2 (en) | 2002-07-16 | 2004-09-28 | Nvidia Corporation | Multi-configuration GPU interface device |
US20040196289A1 (en) | 1999-12-31 | 2004-10-07 | Langendorf Brian K | Upgrading an integrated graphics subsystem |
US20040207618A1 (en) | 2003-04-17 | 2004-10-21 | Nvidia Corporation | Method for synchronizing graphics processing units |
US20040210788A1 (en) | 2003-04-17 | 2004-10-21 | Nvidia Corporation | Method for testing synchronization and connection status of a graphics processing unit module |
US6812927B1 (en) | 2002-06-18 | 2004-11-02 | Nvidia Corporation | System and method for avoiding depth clears using a stencil buffer |
US6825843B2 (en) | 2002-07-18 | 2004-11-30 | Nvidia Corporation | Method and apparatus for loop and branch instructions in a programmable graphics pipeline |
US6828980B1 (en) | 2000-10-02 | 2004-12-07 | Nvidia Corporation | System, method and computer program product for z-texture mapping |
US6828987B2 (en) | 2001-08-07 | 2004-12-07 | Ati Technologies, Inc. | Method and apparatus for processing video and graphics data |
US6831652B1 (en) | 2000-03-24 | 2004-12-14 | Ati International, Srl | Method and system for storing graphics data |
US6842180B1 (en) | 2000-09-20 | 2005-01-11 | Intel Corporation | Opportunistic sharing of graphics resources to enhance CPU performance in an integrated microprocessor |
US6844879B2 (en) | 2001-07-19 | 2005-01-18 | Nec Corporation | Drawing apparatus |
US6856320B1 (en) | 1997-11-25 | 2005-02-15 | Nvidia U.S. Investment Company | Demand-based memory system for graphics applications |
US20050041031A1 (en) | 2003-08-18 | 2005-02-24 | Nvidia Corporation | Adaptive load balancing in a multi-processor graphics processing system |
US6864984B2 (en) | 2000-03-16 | 2005-03-08 | Fuji Photo Film Co., Ltd. | Measuring method and apparatus using attenuation in total reflection |
US6864893B2 (en) | 2002-07-19 | 2005-03-08 | Nvidia Corporation | Method and apparatus for modifying depth values using pixel programs |
US6870540B1 (en) | 1999-12-06 | 2005-03-22 | Nvidia Corporation | System, method and computer program product for a programmable pixel processing model with instruction set |
US6876362B1 (en) | 2002-07-10 | 2005-04-05 | Nvidia Corporation | Omnidirectional shadow texture mapping |
US20050081115A1 (en) | 2003-09-26 | 2005-04-14 | Ati Technologies, Inc. | Method and apparatus for monitoring and resetting a co-processor |
US6885376B2 (en) | 2002-12-30 | 2005-04-26 | Silicon Graphics, Inc. | System, method, and computer program product for near-real time load balancing across multiple rendering pipelines |
US6894687B1 (en) | 2001-06-08 | 2005-05-17 | Nvidia Corporation | System, method and computer program product for vertex attribute aliasing in a graphics pipeline |
US6900810B1 (en) | 2003-04-10 | 2005-05-31 | Nvidia Corporation | User programmable geometry engine |
US20050122330A1 (en) | 2003-11-14 | 2005-06-09 | Microsoft Corporation | Systems and methods for downloading algorithmic elements to a coprocessor and corresponding techniques |
US20050162437A1 (en) | 2004-01-23 | 2005-07-28 | Ati Technologies, Inc. | Method and apparatus for graphics processing using state and shader management |
US20050166207A1 (en) | 2003-12-26 | 2005-07-28 | National University Corporation Utsunomiya University | Self-optimizing computer system |
US6938176B1 (en) | 2001-10-05 | 2005-08-30 | Nvidia Corporation | Method and apparatus for power management of graphics processors and subsystems that allow the subsystems to respond to accesses when subsystems are idle |
US20050190190A1 (en) | 2004-02-27 | 2005-09-01 | Nvidia Corporation | Graphics device clustering with PCI-express |
US20050190189A1 (en) | 2004-02-25 | 2005-09-01 | Christophe Chefd'hotel | System and method for GPU-based 3D nonrigid registration |
US6940515B1 (en) | 2003-04-10 | 2005-09-06 | Nvidia Corporation | User programmable primitive engine |
US20050195186A1 (en) | 2004-03-02 | 2005-09-08 | Ati Technologies Inc. | Method and apparatus for object based visibility culling |
US20050195187A1 (en) | 2004-03-02 | 2005-09-08 | Ati Technologies Inc. | Method and apparatus for hierarchical Z buffering and stenciling |
US6947865B1 (en) | 2002-02-15 | 2005-09-20 | Nvidia Corporation | Method and system for dynamic power supply voltage adjustment for a semiconductor integrated circuit device |
US6947047B1 (en) | 2001-09-20 | 2005-09-20 | Nvidia Corporation | Method and system for programmable pipelined graphics processing with branching instructions |
US20050206646A1 (en) | 2002-02-27 | 2005-09-22 | Alcorn Byron A | Distributed resource architecture and system |
US6952206B1 (en) | 2002-08-12 | 2005-10-04 | Nvidia Corporation | Graphics application program interface system and method for accelerating graphics processing |
US20050223124A1 (en) | 2004-04-01 | 2005-10-06 | Nvidia Corporation | Deadlock avoidance in a bus fabric |
US20050225558A1 (en) | 2004-04-08 | 2005-10-13 | Ati Technologies, Inc. | Two level cache memory architecture |
US6959110B1 (en) | 2000-08-17 | 2005-10-25 | Nvidia Corporation | Multi-mode texture compression algorithm |
US20050237329A1 (en) | 2004-04-27 | 2005-10-27 | Nvidia Corporation | GPU rendering to system memory |
US20050237327A1 (en) | 2004-04-23 | 2005-10-27 | Nvidia Corporation | Point-to-point bus bridging without a bridge controller |
US6961057B1 (en) | 2000-10-12 | 2005-11-01 | Nvidia Corporation | Method and apparatus for managing and accessing depth data in a computer graphics system |
US20050243215A1 (en) | 2004-05-03 | 2005-11-03 | Ati Technologies Inc. | Film-mode (3:2/2:2 Pulldown) detector, method and video device |
US20050243096A1 (en) | 2000-08-23 | 2005-11-03 | Intel Corporation, A Delaware Corporation | Memory controller hub interface |
US20050259103A1 (en) | 2001-06-08 | 2005-11-24 | Nvidia Corporation | System, method and computer program product for programmable fragment processing |
US20050265064A1 (en) | 2004-01-27 | 2005-12-01 | Nvidia Corporation | Data sampling clock edge placement training for high speed GPU-memory interface |
US6975319B1 (en) | 2000-03-24 | 2005-12-13 | Nvidia Corporation | System, method and article of manufacture for calculating a level of detail (LOD) during computer graphics processing |
US20050275760A1 (en) | 2004-03-02 | 2005-12-15 | Nvidia Corporation | Modifying a rasterized surface, such as by trimming |
US6980209B1 (en) | 2002-06-14 | 2005-12-27 | Nvidia Corporation | Method and system for scalable, dataflow-based, programmable processing of graphics data |
US6982718B2 (en) | 2001-06-08 | 2006-01-03 | Nvidia Corporation | System, method and computer program product for programmable fragment processing in a graphics pipeline |
US20060005178A1 (en) | 2004-07-02 | 2006-01-05 | Nvidia Corporation | Optimized chaining of vertex and fragment programs |
US6989840B1 (en) | 2001-08-31 | 2006-01-24 | Nvidia Corporation | Order-independent transparency rendering system and method |
US6995767B1 (en) | 2003-07-31 | 2006-02-07 | Nvidia Corporation | Trilinear optimization for texture filtering |
US7002588B1 (en) | 1999-12-06 | 2006-02-21 | Nvidia Corporation | System, method and computer program product for branching during programmable vertex processing |
US20060055695A1 (en) | 2004-09-13 | 2006-03-16 | Nvidia Corporation | Increased scalability in the fragment shading pipeline |
US20060059494A1 (en) | 2004-09-16 | 2006-03-16 | Nvidia Corporation | Load balancing |
US7015915B1 (en) | 2003-08-12 | 2006-03-21 | Nvidia Corporation | Programming multiple chips from a command buffer |
US7023437B1 (en) | 1998-07-22 | 2006-04-04 | Nvidia Corporation | System and method for accelerating graphics processing using a post-geometry data stream during multiple-pass rendering |
US7027972B1 (en) | 2001-01-24 | 2006-04-11 | Ati Technologies, Inc. | System for collecting and analyzing graphics data and method thereof |
US7038685B1 (en) | 2003-06-30 | 2006-05-02 | Nvidia Corporation | Programmable graphics processor for multithreaded execution of programs |
US7038678B2 (en) | 2003-05-21 | 2006-05-02 | Nvidia Corporation | Dependent texture shadow antialiasing |
US7038692B1 (en) | 1998-04-07 | 2006-05-02 | Nvidia Corporation | Method and apparatus for providing a vertex cache |
US20060101218A1 (en) | 2004-11-11 | 2006-05-11 | Nvidia Corporation | Memory controller-adaptive 1T/2T timing control |
US7053901B2 (en) | 2003-12-11 | 2006-05-30 | Nvidia Corporation | System and method for accelerating a special purpose processor |
US20060123142A1 (en) | 2004-12-06 | 2006-06-08 | Nvidia Corporation | Method and apparatus for providing peer-to-peer data transfer within a computing environment |
US20060119607A1 (en) | 2004-02-27 | 2006-06-08 | Nvidia Corporation | Register based queuing for texture requests |
US20060120376A1 (en) | 2004-12-06 | 2006-06-08 | Nvidia Corporation | Method and apparatus for providing peer-to-peer data transfer within a computing environment |
US7068278B1 (en) | 2003-04-17 | 2006-06-27 | Nvidia Corporation | Synchronized graphics processing units |
US20060156399A1 (en) | 2004-12-30 | 2006-07-13 | Parmar Pankaj N | System and method for implementing network security using a sequestered partition |
US7080194B1 (en) | 2002-02-12 | 2006-07-18 | Nvidia Corporation | Method and system for memory access arbitration for minimizing read/write turnaround penalties |
US7081895B2 (en) | 2002-07-18 | 2006-07-25 | Nvidia Corporation | Systems and methods of multi-pass data processing |
US7098922B1 (en) | 2003-12-10 | 2006-08-29 | Nvidia Corporation | Multiple data buffers for processing graphics data |
US20060202941A1 (en) | 2005-03-09 | 2006-09-14 | Ati Technologies Inc. | System and method for determining illumination of a pixel by shadow planes |
US20060208960A1 (en) | 2005-03-18 | 2006-09-21 | Ati Technologies Inc. | Display specific image processing in an integrated circuit |
US20060225061A1 (en) | 2005-03-31 | 2006-10-05 | Nvidia Corporation | Method and apparatus for register allocation in presence of hardware constraints |
US7119808B2 (en) | 2003-07-15 | 2006-10-10 | Alienware Labs Corp. | Multiple parallel processor computer graphics system |
US7129909B1 (en) | 2003-04-09 | 2006-10-31 | Nvidia Corporation | Method and system using compressed display mode list |
US7130316B2 (en) | 2001-04-11 | 2006-10-31 | Ati Technologies, Inc. | System for frame based audio synchronization and method thereof |
US20060248241A1 (en) | 2005-03-28 | 2006-11-02 | Nvidia Corporation | Universal storage bus adaptor |
US20060267987A1 (en) | 2005-05-24 | 2006-11-30 | Ati Technologies Inc. | Master/slave graphics adapter arrangement |
US20060271713A1 (en) | 2005-05-27 | 2006-11-30 | Ati Technologies Inc. | Computing device with flexibly configurable expansion slots, and method of operation |
US20060268005A1 (en) | 2004-05-14 | 2006-11-30 | Nvidia Corporation | Method and system for implementing multiple high precision and low precision interpolators for a graphics pipeline |
US20060274073A1 (en) | 2004-11-17 | 2006-12-07 | Johnson Philip B | Multiple graphics adapter connection systems |
US20060282604A1 (en) | 2005-05-27 | 2006-12-14 | Ati Technologies, Inc. | Methods and apparatus for processing graphics data using multiple processing circuits |
US20070159488A1 (en) | 2005-12-19 | 2007-07-12 | Nvidia Corporation | Parallel Array Architecture for a Graphics Processor |
US7248261B1 (en) | 2003-12-15 | 2007-07-24 | Nvidia Corporation | Method and apparatus to accelerate rendering of shadow effects for computer-generated images |
US20070195099A1 (en) | 2006-02-21 | 2007-08-23 | Nvidia Corporation | Asymmetric multi-GPU processing |
US20080007559A1 (en) | 2006-06-30 | 2008-01-10 | Nokia Corporation | Apparatus, method and a computer program product for providing a unified graphics pipeline for stereoscopic rendering |
US7324547B1 (en) | 2002-12-13 | 2008-01-29 | Nvidia Corporation | Internet protocol (IP) router residing in a processor chipset |
US7324111B2 (en) | 2004-04-09 | 2008-01-29 | Nvidia Corporation | Method and apparatus for routing graphics processing signals to a stand-alone module |
US7325086B2 (en) | 2005-12-15 | 2008-01-29 | Via Technologies, Inc. | Method and system for multiple GPU support |
US7372465B1 (en) | 2004-12-17 | 2008-05-13 | Nvidia Corporation | Scalable graphics processing for remote display |
US20080143731A1 (en) | 2005-05-24 | 2008-06-19 | Jeffrey Cheng | Video rendering across a high speed peripheral interconnect bus |
US7477256B1 (en) | 2004-11-17 | 2009-01-13 | Nvidia Corporation | Connecting graphics adapters for scalable performance |
Family Cites Families (12)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6919896B2 (en) | 2002-03-11 | 2005-07-19 | Sony Computer Entertainment Inc. | System and method of optimizing graphics processing |
US7961194B2 (en) * | 2003-11-19 | 2011-06-14 | Lucid Information Technology, Ltd. | Method of controlling in real time the switching of modes of parallel operation of a multi-mode parallel graphics processing subsystem embodied within a host computing system |
US20080079737A1 (en) * | 2003-11-19 | 2008-04-03 | Reuven Bakalash | Multi-mode parallel graphics rendering and display system supporting real-time detection of mode control commands (MCCS) programmed within pre-profiled scenes of the graphics-based application |
US7552437B2 (en) * | 2004-01-14 | 2009-06-23 | International Business Machines Corporation | Maintaining application operations within a suboptimal grid environment |
US20050200627A1 (en) * | 2004-03-11 | 2005-09-15 | Intel Corporation | Techniques for graphics profiling |
US7721118B1 (en) | 2004-09-27 | 2010-05-18 | Nvidia Corporation | Optimizing power and performance for multi-processor graphics processing |
US7852342B2 (en) * | 2004-10-14 | 2010-12-14 | Microsoft Corporation | Remote client graphics rendering |
US7545380B1 (en) | 2004-12-16 | 2009-06-09 | Nvidia Corporation | Sequencing of displayed images for alternate frame rendering in a multi-processor graphics system |
WO2006110991A1 (en) * | 2005-04-18 | 2006-10-26 | Research In Motion Limited | Method and system for controlling software version updates |
US7616207B1 (en) | 2005-04-25 | 2009-11-10 | Nvidia Corporation | Graphics processing system including at least three bus devices |
US7773090B1 (en) | 2006-06-13 | 2010-08-10 | Nvidia Corporation | Kernel mode graphics driver for dual-core computer system |
US8736617B2 (en) | 2008-08-04 | 2014-05-27 | Nvidia Corporation | Hybrid graphic display |
-
2007
- 2007-08-30 US US11/897,536 patent/US7961194B2/en active Active
- 2007-12-28 CA CA002674351A patent/CA2674351A1/en not_active Abandoned
- 2007-12-28 WO PCT/US2007/026466 patent/WO2008082641A2/en active Application Filing
-
2010
- 2010-11-08 US US12/941,233 patent/US8754894B2/en active Active
-
2014
- 2014-06-16 US US14/305,010 patent/US9584592B2/en active Active
Patent Citations (227)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5475856A (en) | 1991-11-27 | 1995-12-12 | International Business Machines Corporation | Dynamic multi-mode parallel processing array |
US5535410A (en) | 1993-11-19 | 1996-07-09 | Hitachi, Ltd. | Parallel processor having decoder for selecting switch from the group of switches and concurrently inputting MIMD instructions while performing SIMD operation |
US5757385A (en) | 1994-07-21 | 1998-05-26 | International Business Machines Corporation | Method and apparatus for managing multiprocessor graphical workload distribution |
US5745762A (en) | 1994-12-15 | 1998-04-28 | International Business Machines Corporation | Advanced graphics driver architecture supporting multiple system emulations |
US5687357A (en) | 1995-04-14 | 1997-11-11 | Nvidia Corporation | Register array for utilizing burst mode transfer on local bus |
US5754866A (en) | 1995-05-08 | 1998-05-19 | Nvidia Corporation | Delayed interrupts with a FIFO in an improved input/output architecture |
US5909595A (en) | 1995-05-15 | 1999-06-01 | Nvidia Corporation | Method of controlling I/O routing by setting connecting context for utilizing I/O processing elements within a computer system to produce multimedia effects |
US5740464A (en) | 1995-05-15 | 1998-04-14 | Nvidia Corporation | Architecture for providing input/output operations in a computer system |
US5758182A (en) | 1995-05-15 | 1998-05-26 | Nvidia Corporation | DMA controller translates virtual I/O device address received directly from application program command to physical i/o device address of I/O device on device bus |
US5794016A (en) | 1995-12-11 | 1998-08-11 | Dynamic Pictures, Inc. | Parallel-processor graphics architecture |
US5841444A (en) | 1996-03-21 | 1998-11-24 | Samsung Electronics Co., Ltd. | Multiprocessor graphics system |
US6212261B1 (en) | 1996-08-14 | 2001-04-03 | Nortel Networks Limited | Internet-based telephone call manager |
US6118462A (en) | 1997-07-01 | 2000-09-12 | Memtrax Llc | Computer system controller having internal memory and external memory control |
US6169553B1 (en) | 1997-07-02 | 2001-01-02 | Ati Technologies, Inc. | Method and apparatus for rendering a three-dimensional scene having shadowing |
US6201545B1 (en) | 1997-09-23 | 2001-03-13 | Ati Technologies, Inc. | Method and apparatus for generating sub pixel masks in a three dimensional graphic processing system |
US6856320B1 (en) | 1997-11-25 | 2005-02-15 | Nvidia U.S. Investment Company | Demand-based memory system for graphics applications |
US7170515B1 (en) | 1997-11-25 | 2007-01-30 | Nvidia Corporation | Rendering pipeline |
US6337686B2 (en) | 1998-01-07 | 2002-01-08 | Ati Technologies Inc. | Method and apparatus for line anti-aliasing |
US6496187B1 (en) | 1998-02-17 | 2002-12-17 | Sun Microsystems, Inc. | Graphics system configured to perform parallel sample to pixel calculation |
US6473089B1 (en) | 1998-03-02 | 2002-10-29 | Ati Technologies, Inc. | Method and apparatus for a video graphics circuit having parallel pixel processing |
US7123266B2 (en) | 1998-03-02 | 2006-10-17 | Ati Technologies Inc. | Method and apparatus for a video graphics circuit having parallel pixel processing |
US6259460B1 (en) | 1998-03-26 | 2001-07-10 | Silicon Graphics, Inc. | Method for efficient handling of texture cache misses by recirculation |
US7038692B1 (en) | 1998-04-07 | 2006-05-02 | Nvidia Corporation | Method and apparatus for providing a vertex cache |
US6691180B2 (en) | 1998-04-17 | 2004-02-10 | Nvidia Corporation | Apparatus for accelerating the rendering of images |
US20010029556A1 (en) | 1998-04-17 | 2001-10-11 | Nvidia Corporation | Apparatus for accelerating the rendering of images |
US6184908B1 (en) | 1998-04-27 | 2001-02-06 | Ati Technologies, Inc. | Method and apparatus for co-processing video graphics data |
US6212617B1 (en) | 1998-05-13 | 2001-04-03 | Microsoft Corporation | Parallel processing method and system using a lazy parallel data type to reduce inter-processor communication |
US6477687B1 (en) | 1998-06-01 | 2002-11-05 | Nvidia U.S. Investment Company | Method of embedding RAMS and other macrocells in the core of an integrated circuit chip |
US6646639B1 (en) | 1998-07-22 | 2003-11-11 | Nvidia Corporation | Modified method and apparatus for improved occlusion culling in graphics systems |
US7170513B1 (en) | 1998-07-22 | 2007-01-30 | Nvidia Corporation | System and method for display list occlusion branching |
US6636215B1 (en) | 1998-07-22 | 2003-10-21 | Nvidia Corporation | Hardware-assisted z-pyramid creation for host-based occlusion culling |
US7023437B1 (en) | 1998-07-22 | 2006-04-04 | Nvidia Corporation | System and method for accelerating graphics processing using a post-geometry data stream during multiple-pass rendering |
US6894689B1 (en) | 1998-07-22 | 2005-05-17 | Nvidia Corporation | Occlusion culling method and apparatus for graphics systems |
US6415345B1 (en) | 1998-08-03 | 2002-07-02 | Ati Technologies | Bus mastering interface control system for transferring multistream data over a host bus |
US6191800B1 (en) | 1998-08-11 | 2001-02-20 | International Business Machines Corporation | Dynamic balancing of graphics workloads using a tiling strategy |
US6492987B1 (en) | 1998-08-27 | 2002-12-10 | Ati Technologies, Inc. | Method and apparatus for processing object elements that are being rendered |
US6188412B1 (en) | 1998-08-28 | 2001-02-13 | Ati Technologies, Inc. | Method and apparatus for performing setup operations in a video graphics system |
US6292200B1 (en) | 1998-10-23 | 2001-09-18 | Silicon Graphics, Inc. | Apparatus and method for utilizing multiple rendering pipes for a single 3-D display |
US6753878B1 (en) | 1999-03-08 | 2004-06-22 | Hewlett-Packard Development Company, L.P. | Parallel pipelined merge engines |
US20040223003A1 (en) | 1999-03-08 | 2004-11-11 | Tandem Computers Incorporated | Parallel pipelined merge engines |
US6529198B1 (en) | 1999-03-16 | 2003-03-04 | Nec Corporation | Parallel rendering device |
US6535209B1 (en) | 1999-03-17 | 2003-03-18 | Nvidia Us Investments Co. | Data stream splitting and storage in graphics data processing |
US6288418B1 (en) | 1999-03-19 | 2001-09-11 | Nvidia Corporation | Multiuse input/output connector arrangement for graphics accelerator integrated circuit |
US6577320B1 (en) | 1999-03-22 | 2003-06-10 | Nvidia Corporation | Method and apparatus for processing multiple types of pixel component representations including processes of premultiplication, postmultiplication, and colorkeying/chromakeying |
US6333744B1 (en) | 1999-03-22 | 2001-12-25 | Nvidia Corporation | Graphics pipeline including combiner stages |
US6181352B1 (en) | 1999-03-22 | 2001-01-30 | Nvidia Corporation | Graphics pipeline selectively providing multiple pixels or multiple textures |
US6778177B1 (en) | 1999-04-15 | 2004-08-17 | Sp3D Chip Design Gmbh | Method for rasterizing a graphics basic component |
US6442656B1 (en) | 1999-08-18 | 2002-08-27 | Ati Technologies Srl | Method and apparatus for interfacing memory with a bus |
US6578068B1 (en) | 1999-08-31 | 2003-06-10 | Accenture Llp | Load balancer in environment services patterns |
US6352479B1 (en) | 1999-08-31 | 2002-03-05 | Nvidia U.S. Investment Company | Interactive gaming server and online community forum |
US6657635B1 (en) | 1999-09-03 | 2003-12-02 | Nvidia Corporation | Binning flush in graphics data processing |
US20030034975A1 (en) | 1999-12-06 | 2003-02-20 | Nvidia Corporation | Lighting system and method for a graphics processor |
US20030020720A1 (en) | 1999-12-06 | 2003-01-30 | Nvidia Corporation | Method, apparatus and article of manufacture for a sequencer in a transform/lighting module capable of processing multiple independent execution threads |
US7002588B1 (en) | 1999-12-06 | 2006-02-21 | Nvidia Corporation | System, method and computer program product for branching during programmable vertex processing |
US20030103054A1 (en) | 1999-12-06 | 2003-06-05 | Nvidia Corporation | Integrated graphics processing unit with antialiasing |
US6577309B2 (en) | 1999-12-06 | 2003-06-10 | Nvidia Corporation | System and method for a graphics processing framework embodied utilizing a single semiconductor platform |
US6778176B2 (en) | 1999-12-06 | 2004-08-17 | Nvidia Corporation | Sequencer system and method for sequencing graphics processing |
US20030038808A1 (en) | 1999-12-06 | 2003-02-27 | Nvidia Corporation | Method, apparatus and article of manufacture for a sequencer in a transform/lighting module capable of processing multiple independent execution threads |
US20030112245A1 (en) | 1999-12-06 | 2003-06-19 | Nvidia Corporation | Single semiconductor graphics platform |
US20030112246A1 (en) | 1999-12-06 | 2003-06-19 | Nvidia Corporation | Blending system and method in an integrated computer graphics pipeline |
US6992667B2 (en) | 1999-12-06 | 2006-01-31 | Nvidia Corporation | Single semiconductor graphics platform system and method with skinning, swizzling and masking capabilities |
US6462737B2 (en) | 1999-12-06 | 2002-10-08 | Nvidia Corporation | Clipping system and method for a graphics processing framework embodied on a single semiconductor platform |
US6734874B2 (en) | 1999-12-06 | 2004-05-11 | Nvidia Corporation | Graphics processing unit with transform module capable of handling scalars and vectors |
US20020180740A1 (en) | 1999-12-06 | 2002-12-05 | Nvidia Corporation | Clipping system and method for a single graphics semiconductor platform |
US6870540B1 (en) | 1999-12-06 | 2005-03-22 | Nvidia Corporation | System, method and computer program product for a programmable pixel processing model with instruction set |
US6650331B2 (en) | 1999-12-06 | 2003-11-18 | Nvidia Corporation | System, method and computer program product for performing a scissor operation in a graphics processing framework embodied on a single semiconductor platform |
US6650330B2 (en) | 1999-12-06 | 2003-11-18 | Nvidia Corporation | Graphics system and method for processing multiple independent execution threads |
US7064763B2 (en) | 1999-12-06 | 2006-06-20 | Nvidia Corporation | Single semiconductor graphics platform |
US20020196259A1 (en) | 1999-12-06 | 2002-12-26 | Nvidia Corporation | Single semiconductor graphics platform with blending and fog capabilities |
US20030189565A1 (en) | 1999-12-06 | 2003-10-09 | Nvidia Corporation | Single semiconductor graphics platform system and method with skinning, swizzling and masking capabilities |
US7095414B2 (en) | 1999-12-06 | 2006-08-22 | Nvidia Corporation | Blending system and method in an integrated computer graphics pipeline |
US6473086B1 (en) | 1999-12-09 | 2002-10-29 | Ati International Srl | Method and apparatus for graphics processing using parallel graphics processors |
US7051139B2 (en) | 1999-12-20 | 2006-05-23 | Intel Corporation | CPU expandability bus |
US20030188075A1 (en) | 1999-12-20 | 2003-10-02 | Peleg Alex D. | CPU expandability bus |
US6557065B1 (en) | 1999-12-20 | 2003-04-29 | Intel Corporation | CPU expandability bus |
US20040196289A1 (en) | 1999-12-31 | 2004-10-07 | Langendorf Brian K | Upgrading an integrated graphics subsystem |
US6864984B2 (en) | 2000-03-16 | 2005-03-08 | Fuji Photo Film Co., Ltd. | Measuring method and apparatus using attenuation in total reflection |
US6831652B1 (en) | 2000-03-24 | 2004-12-14 | Ati International, Srl | Method and system for storing graphics data |
US6975319B1 (en) | 2000-03-24 | 2005-12-13 | Nvidia Corporation | System, method and article of manufacture for calculating a level of detail (LOD) during computer graphics processing |
US6741243B2 (en) | 2000-05-01 | 2004-05-25 | Broadcom Corporation | Method and system for reducing overflows in a computer graphics system |
US6725457B1 (en) | 2000-05-17 | 2004-04-20 | Nvidia Corporation | Semaphore enhancement to improve system performance |
US6789154B1 (en) | 2000-05-26 | 2004-09-07 | Ati International, Srl | Apparatus and method for transmitting data |
US6670958B1 (en) | 2000-05-26 | 2003-12-30 | Ati International, Srl | Method and apparatus for routing data to multiple graphics devices |
US6662257B1 (en) | 2000-05-26 | 2003-12-09 | Ati International Srl | Multiple device bridge apparatus and method thereof |
US6633296B1 (en) | 2000-05-26 | 2003-10-14 | Ati International Srl | Apparatus for providing data to a plurality of graphics processors and method thereof |
US6728820B1 (en) | 2000-05-26 | 2004-04-27 | Ati International Srl | Method of configuring, controlling, and accessing a bridge and apparatus therefor |
US7068272B1 (en) | 2000-05-31 | 2006-06-27 | Nvidia Corporation | System, method and article of manufacture for Z-value and stencil culling prior to rendering in a computer graphics processing pipeline |
US6664963B1 (en) | 2000-05-31 | 2003-12-16 | Nvidia Corporation | System, method and computer program product for programmable shading using pixel shaders |
US6690372B2 (en) | 2000-05-31 | 2004-02-10 | Nvidia Corporation | System, method and article of manufacture for shadow mapping |
US6734861B1 (en) | 2000-05-31 | 2004-05-11 | Nvidia Corporation | System, method and article of manufacture for an interlock module in a computer graphics processing pipeline |
US6593923B1 (en) | 2000-05-31 | 2003-07-15 | Nvidia Corporation | System, method and article of manufacture for shadow mapping |
US6532013B1 (en) | 2000-05-31 | 2003-03-11 | Nvidia Corporation | System, method and article of manufacture for pixel shaders for programmable shading |
US6724394B1 (en) | 2000-05-31 | 2004-04-20 | Nvidia Corporation | Programmable pixel shading architecture |
US6801202B2 (en) | 2000-06-29 | 2004-10-05 | Sun Microsystems, Inc. | Graphics system configured to parallel-process graphics data using multiple pipelines |
US20020085007A1 (en) | 2000-06-29 | 2002-07-04 | Sun Microsystems, Inc. | Graphics system configured to parallel-process graphics data using multiple pipelines |
US20020015055A1 (en) | 2000-07-18 | 2002-02-07 | Silicon Graphics, Inc. | Method and system for presenting three-dimensional computer graphics images using multiple graphics processing units |
US6959110B1 (en) | 2000-08-17 | 2005-10-25 | Nvidia Corporation | Multi-mode texture compression algorithm |
US20050243096A1 (en) | 2000-08-23 | 2005-11-03 | Intel Corporation, A Delaware Corporation | Memory controller hub interface |
US6842180B1 (en) | 2000-09-20 | 2005-01-11 | Intel Corporation | Opportunistic sharing of graphics resources to enhance CPU performance in an integrated microprocessor |
US6532525B1 (en) | 2000-09-29 | 2003-03-11 | Ati Technologies, Inc. | Method and apparatus for accessing memory |
US6502173B1 (en) | 2000-09-29 | 2002-12-31 | Ati Technologies, Inc. | System for accessing memory and method therefore |
US6828980B1 (en) | 2000-10-02 | 2004-12-07 | Nvidia Corporation | System, method and computer program product for z-texture mapping |
US6731298B1 (en) | 2000-10-02 | 2004-05-04 | Nvidia Corporation | System, method and article of manufacture for z-texture mapping |
US20020059302A1 (en) | 2000-10-10 | 2002-05-16 | Hitoshi Ebihara | Data communication system and method, computer program, and recording medium |
US6961057B1 (en) | 2000-10-12 | 2005-11-01 | Nvidia Corporation | Method and apparatus for managing and accessing depth data in a computer graphics system |
US6496404B1 (en) | 2000-10-16 | 2002-12-17 | Nvidia Corporation | Memory system for use on a circuit board in which the number of loads is minimized |
US6636212B1 (en) | 2000-11-14 | 2003-10-21 | Nvidia Corporation | Method and apparatus for determining visibility of groups of pixels |
US6778181B1 (en) | 2000-12-07 | 2004-08-17 | Nvidia Corporation | Graphics processing system having a virtual texturing array |
US7027972B1 (en) | 2001-01-24 | 2006-04-11 | Ati Technologies, Inc. | System for collecting and analyzing graphics data and method thereof |
US20020145612A1 (en) | 2001-01-29 | 2002-10-10 | Blythe David R. | Method and system for minimizing an amount of data needed to test data against subarea boundaries in spatially composited digital video |
US20020118308A1 (en) | 2001-02-27 | 2002-08-29 | Ati Technologies, Inc. | Integrated single and dual television tuner having improved fine tuning |
US7130316B2 (en) | 2001-04-11 | 2006-10-31 | Ati Technologies, Inc. | System for frame based audio synchronization and method thereof |
US6542971B1 (en) | 2001-04-23 | 2003-04-01 | Nvidia Corporation | Memory access system and method employing an auxiliary buffer |
US6664960B2 (en) | 2001-05-10 | 2003-12-16 | Ati Technologies Inc. | Apparatus for processing non-planar video graphics primitives and associated method of operation |
US6700583B2 (en) | 2001-05-14 | 2004-03-02 | Ati Technologies, Inc. | Configurable buffer for multipass applications |
US20050259103A1 (en) | 2001-06-08 | 2005-11-24 | Nvidia Corporation | System, method and computer program product for programmable fragment processing |
US6982718B2 (en) | 2001-06-08 | 2006-01-03 | Nvidia Corporation | System, method and computer program product for programmable fragment processing in a graphics pipeline |
US6894687B1 (en) | 2001-06-08 | 2005-05-17 | Nvidia Corporation | System, method and computer program product for vertex attribute aliasing in a graphics pipeline |
US6844879B2 (en) | 2001-07-19 | 2005-01-18 | Nec Corporation | Drawing apparatus |
US6828987B2 (en) | 2001-08-07 | 2004-12-07 | Ati Technologies, Inc. | Method and apparatus for processing video and graphics data |
US6778189B1 (en) | 2001-08-24 | 2004-08-17 | Nvidia Corporation | Two-sided stencil testing system and method |
US6989840B1 (en) | 2001-08-31 | 2006-01-24 | Nvidia Corporation | Order-independent transparency rendering system and method |
US6704025B1 (en) | 2001-08-31 | 2004-03-09 | Nvidia Corporation | System and method for dual-depth shadow-mapping |
US6744433B1 (en) | 2001-08-31 | 2004-06-01 | Nvidia Corporation | System and method for using and collecting information from a plurality of depth layers |
US6947047B1 (en) | 2001-09-20 | 2005-09-20 | Nvidia Corporation | Method and system for programmable pipelined graphics processing with branching instructions |
US6938176B1 (en) | 2001-10-05 | 2005-08-30 | Nvidia Corporation | Method and apparatus for power management of graphics processors and subsystems that allow the subsystems to respond to accesses when subsystems are idle |
US20030080959A1 (en) | 2001-10-29 | 2003-05-01 | Ati Technologies, Inc. | System, Method, and apparatus for early culling |
US6999076B2 (en) | 2001-10-29 | 2006-02-14 | Ati Technologies, Inc. | System, method, and apparatus for early culling |
US7091971B2 (en) | 2001-10-29 | 2006-08-15 | Ati Technologies, Inc. | System, method, and apparatus for multi-level hierarchical Z buffering |
US20030151606A1 (en) | 2001-10-29 | 2003-08-14 | Ati Technologies Inc. | System, method, and apparatus for multi-level hierarchical Z buffering |
US6677953B1 (en) | 2001-11-08 | 2004-01-13 | Nvidia Corporation | Hardware viewport system and method for use in a graphics pipeline |
US20030117971A1 (en) | 2001-12-21 | 2003-06-26 | Celoxica Ltd. | System, method, and article of manufacture for profiling an executable hardware model using calls to profiling functions |
US6683614B2 (en) | 2001-12-21 | 2004-01-27 | Hewlett-Packard Development Company, L.P. | System and method for automatically configuring graphics pipelines by tracking a region of interest in a computer graphical display system |
US20030128197A1 (en) | 2002-01-04 | 2003-07-10 | Ati Technologies, Inc. | Portable device for providing dual display and method thereof |
US6774895B1 (en) | 2002-02-01 | 2004-08-10 | Nvidia Corporation | System and method for depth clamping in a hardware graphics pipeline |
US7224359B1 (en) | 2002-02-01 | 2007-05-29 | Nvidia Corporation | Depth clamping system and method in a hardware graphics pipeline |
US7080194B1 (en) | 2002-02-12 | 2006-07-18 | Nvidia Corporation | Method and system for memory access arbitration for minimizing read/write turnaround penalties |
US6947865B1 (en) | 2002-02-15 | 2005-09-20 | Nvidia Corporation | Method and system for dynamic power supply voltage adjustment for a semiconductor integrated circuit device |
US20050206646A1 (en) | 2002-02-27 | 2005-09-22 | Alcorn Byron A | Distributed resource architecture and system |
US20030164834A1 (en) | 2002-03-01 | 2003-09-04 | Lefebvre Kevin T. | System and method utilizing multiple pipelines to render graphical data |
US20030164832A1 (en) | 2002-03-04 | 2003-09-04 | Alcorn Byron A. | Graphical display system and method |
US20030171907A1 (en) | 2002-03-06 | 2003-09-11 | Shay Gal-On | Methods and Apparatus for Optimizing Applications on Configurable Processors |
US20030179220A1 (en) | 2002-03-20 | 2003-09-25 | Nvidia Corporation | System, method and computer program product for generating a shader program |
US20040012600A1 (en) | 2002-03-22 | 2004-01-22 | Deering Michael F. | Scalable high performance 3d graphics |
US20030212735A1 (en) | 2002-05-13 | 2003-11-13 | Nvidia Corporation | Method and apparatus for providing an integrated network of processors |
US20040153778A1 (en) | 2002-06-12 | 2004-08-05 | Ati Technologies, Inc. | Method, system and software for configuring a graphics processing communication mode |
US6980209B1 (en) | 2002-06-14 | 2005-12-27 | Nvidia Corporation | Method and system for scalable, dataflow-based, programmable processing of graphics data |
US6812927B1 (en) | 2002-06-18 | 2004-11-02 | Nvidia Corporation | System and method for avoiding depth clears using a stencil buffer |
US6876362B1 (en) | 2002-07-10 | 2005-04-05 | Nvidia Corporation | Omnidirectional shadow texture mapping |
US6797998B2 (en) | 2002-07-16 | 2004-09-28 | Nvidia Corporation | Multi-configuration GPU interface device |
US6825843B2 (en) | 2002-07-18 | 2004-11-30 | Nvidia Corporation | Method and apparatus for loop and branch instructions in a programmable graphics pipeline |
US7081895B2 (en) | 2002-07-18 | 2006-07-25 | Nvidia Corporation | Systems and methods of multi-pass data processing |
US7142215B1 (en) | 2002-07-18 | 2006-11-28 | Nvidia Corporation | Method and apparatus for processing stencil data using a programmable graphics processor |
US6864893B2 (en) | 2002-07-19 | 2005-03-08 | Nvidia Corporation | Method and apparatus for modifying depth values using pixel programs |
US6952206B1 (en) | 2002-08-12 | 2005-10-04 | Nvidia Corporation | Graphics application program interface system and method for accelerating graphics processing |
US20040036159A1 (en) | 2002-08-23 | 2004-02-26 | Ati Technologies, Inc. | Integrated circuit having memory disposed thereon and method of making thereof |
US6779069B1 (en) | 2002-09-04 | 2004-08-17 | Nvidia Corporation | Computer system with source-synchronous digital link |
US7324547B1 (en) | 2002-12-13 | 2008-01-29 | Nvidia Corporation | Internet protocol (IP) router residing in a processor chipset |
US6885376B2 (en) | 2002-12-30 | 2005-04-26 | Silicon Graphics, Inc. | System, method, and computer program product for near-real time load balancing across multiple rendering pipelines |
WO2004070652A2 (en) | 2003-01-28 | 2004-08-19 | Lucid Information Technology Ltd. | Method and system for compositing three-dimensional graphics images using associative decision mechanism |
US7145565B2 (en) | 2003-02-27 | 2006-12-05 | Nvidia Corporation | Depth bounds testing |
US20040169651A1 (en) | 2003-02-27 | 2004-09-02 | Nvidia Corporation | Depth bounds testing |
US20040179019A1 (en) | 2003-03-12 | 2004-09-16 | Nvidia Corporation | Double-buffering of pixel data using copy-on-write semantics |
US7129909B1 (en) | 2003-04-09 | 2006-10-31 | Nvidia Corporation | Method and system using compressed display mode list |
US6940515B1 (en) | 2003-04-10 | 2005-09-06 | Nvidia Corporation | User programmable primitive engine |
US6900810B1 (en) | 2003-04-10 | 2005-05-31 | Nvidia Corporation | User programmable geometry engine |
US7120816B2 (en) | 2003-04-17 | 2006-10-10 | Nvidia Corporation | Method for testing synchronization and connection status of a graphics processing unit module |
US20040210788A1 (en) | 2003-04-17 | 2004-10-21 | Nvidia Corporation | Method for testing synchronization and connection status of a graphics processing unit module |
US7068278B1 (en) | 2003-04-17 | 2006-06-27 | Nvidia Corporation | Synchronized graphics processing units |
US20040207618A1 (en) | 2003-04-17 | 2004-10-21 | Nvidia Corporation | Method for synchronizing graphics processing units |
US7038678B2 (en) | 2003-05-21 | 2006-05-02 | Nvidia Corporation | Dependent texture shadow antialiasing |
US7038685B1 (en) | 2003-06-30 | 2006-05-02 | Nvidia Corporation | Programmable graphics processor for multithreaded execution of programs |
US7119808B2 (en) | 2003-07-15 | 2006-10-10 | Alienware Labs Corp. | Multiple parallel processor computer graphics system |
US20060290700A1 (en) | 2003-07-15 | 2006-12-28 | Alienware Labs. Corp. | Multiple parallel processor computer graphics system |
US6995767B1 (en) | 2003-07-31 | 2006-02-07 | Nvidia Corporation | Trilinear optimization for texture filtering |
US7015915B1 (en) | 2003-08-12 | 2006-03-21 | Nvidia Corporation | Programming multiple chips from a command buffer |
US20060114260A1 (en) | 2003-08-12 | 2006-06-01 | Nvidia Corporation | Programming multiple chips from a command buffer |
US20060221086A1 (en) | 2003-08-18 | 2006-10-05 | Nvidia Corporation | Adaptive load balancing in a multi-processor graphics processing system |
US20060221087A1 (en) | 2003-08-18 | 2006-10-05 | Nvidia Corporation | Adaptive load balancing in a multi-processor graphics processing system |
US7075541B2 (en) | 2003-08-18 | 2006-07-11 | Nvidia Corporation | Adaptive load balancing in a multi-processor graphics processing system |
US20050041031A1 (en) | 2003-08-18 | 2005-02-24 | Nvidia Corporation | Adaptive load balancing in a multi-processor graphics processing system |
US20050081115A1 (en) | 2003-09-26 | 2005-04-14 | Ati Technologies, Inc. | Method and apparatus for monitoring and resetting a co-processor |
US20050122330A1 (en) | 2003-11-14 | 2005-06-09 | Microsoft Corporation | Systems and methods for downloading algorithmic elements to a coprocessor and corresponding techniques |
US7098922B1 (en) | 2003-12-10 | 2006-08-29 | Nvidia Corporation | Multiple data buffers for processing graphics data |
US7053901B2 (en) | 2003-12-11 | 2006-05-30 | Nvidia Corporation | System and method for accelerating a special purpose processor |
US7248261B1 (en) | 2003-12-15 | 2007-07-24 | Nvidia Corporation | Method and apparatus to accelerate rendering of shadow effects for computer-generated images |
US20050166207A1 (en) | 2003-12-26 | 2005-07-28 | National University Corporation Utsunomiya University | Self-optimizing computer system |
US20050162437A1 (en) | 2004-01-23 | 2005-07-28 | Ati Technologies, Inc. | Method and apparatus for graphics processing using state and shader management |
US20050265064A1 (en) | 2004-01-27 | 2005-12-01 | Nvidia Corporation | Data sampling clock edge placement training for high speed GPU-memory interface |
US20050190189A1 (en) | 2004-02-25 | 2005-09-01 | Christophe Chefd'hotel | System and method for GPU-based 3D nonrigid registration |
US20050190190A1 (en) | 2004-02-27 | 2005-09-01 | Nvidia Corporation | Graphics device clustering with PCI-express |
US7289125B2 (en) | 2004-02-27 | 2007-10-30 | Nvidia Corporation | Graphics device clustering with PCI-express |
US20060119607A1 (en) | 2004-02-27 | 2006-06-08 | Nvidia Corporation | Register based queuing for texture requests |
US20050195187A1 (en) | 2004-03-02 | 2005-09-08 | Ati Technologies Inc. | Method and apparatus for hierarchical Z buffering and stenciling |
US20050195186A1 (en) | 2004-03-02 | 2005-09-08 | Ati Technologies Inc. | Method and apparatus for object based visibility culling |
US20050275760A1 (en) | 2004-03-02 | 2005-12-15 | Nvidia Corporation | Modifying a rasterized surface, such as by trimming |
US20050223124A1 (en) | 2004-04-01 | 2005-10-06 | Nvidia Corporation | Deadlock avoidance in a bus fabric |
US20050225558A1 (en) | 2004-04-08 | 2005-10-13 | Ati Technologies, Inc. | Two level cache memory architecture |
US7324111B2 (en) | 2004-04-09 | 2008-01-29 | Nvidia Corporation | Method and apparatus for routing graphics processing signals to a stand-alone module |
US6985152B2 (en) | 2004-04-23 | 2006-01-10 | Nvidia Corporation | Point-to-point bus bridging without a bridge controller |
US20060028478A1 (en) | 2004-04-23 | 2006-02-09 | Nvidia Corporation | Point-to-point bus bridging without a bridge controller |
US20050237327A1 (en) | 2004-04-23 | 2005-10-27 | Nvidia Corporation | Point-to-point bus bridging without a bridge controller |
US20050237329A1 (en) | 2004-04-27 | 2005-10-27 | Nvidia Corporation | GPU rendering to system memory |
US20050243215A1 (en) | 2004-05-03 | 2005-11-03 | Ati Technologies Inc. | Film-mode (3:2/2:2 Pulldown) detector, method and video device |
US20060268005A1 (en) | 2004-05-14 | 2006-11-30 | Nvidia Corporation | Method and system for implementing multiple high precision and low precision interpolators for a graphics pipeline |
US20060005178A1 (en) | 2004-07-02 | 2006-01-05 | Nvidia Corporation | Optimized chaining of vertex and fragment programs |
US20060055695A1 (en) | 2004-09-13 | 2006-03-16 | Nvidia Corporation | Increased scalability in the fragment shading pipeline |
US20060059494A1 (en) | 2004-09-16 | 2006-03-16 | Nvidia Corporation | Load balancing |
US20060101218A1 (en) | 2004-11-11 | 2006-05-11 | Nvidia Corporation | Memory controller-adaptive 1T/2T timing control |
US7477256B1 (en) | 2004-11-17 | 2009-01-13 | Nvidia Corporation | Connecting graphics adapters for scalable performance |
US20060274073A1 (en) | 2004-11-17 | 2006-12-07 | Johnson Philip B | Multiple graphics adapter connection systems |
US20060120376A1 (en) | 2004-12-06 | 2006-06-08 | Nvidia Corporation | Method and apparatus for providing peer-to-peer data transfer within a computing environment |
US20060123142A1 (en) | 2004-12-06 | 2006-06-08 | Nvidia Corporation | Method and apparatus for providing peer-to-peer data transfer within a computing environment |
US7372465B1 (en) | 2004-12-17 | 2008-05-13 | Nvidia Corporation | Scalable graphics processing for remote display |
US20060156399A1 (en) | 2004-12-30 | 2006-07-13 | Parmar Pankaj N | System and method for implementing network security using a sequestered partition |
US20060202941A1 (en) | 2005-03-09 | 2006-09-14 | Ati Technologies Inc. | System and method for determining illumination of a pixel by shadow planes |
US20060208960A1 (en) | 2005-03-18 | 2006-09-21 | Ati Technologies Inc. | Display specific image processing in an integrated circuit |
US20060248241A1 (en) | 2005-03-28 | 2006-11-02 | Nvidia Corporation | Universal storage bus adaptor |
US20060225061A1 (en) | 2005-03-31 | 2006-10-05 | Nvidia Corporation | Method and apparatus for register allocation in presence of hardware constraints |
US20060267987A1 (en) | 2005-05-24 | 2006-11-30 | Ati Technologies Inc. | Master/slave graphics adapter arrangement |
US20080143731A1 (en) | 2005-05-24 | 2008-06-19 | Jeffrey Cheng | Video rendering across a high speed peripheral interconnect bus |
US20060282604A1 (en) | 2005-05-27 | 2006-12-14 | Ati Technologies, Inc. | Methods and apparatus for processing graphics data using multiple processing circuits |
US20060271713A1 (en) | 2005-05-27 | 2006-11-30 | Ati Technologies Inc. | Computing device with flexibly configurable expansion slots, and method of operation |
US7325086B2 (en) | 2005-12-15 | 2008-01-29 | Via Technologies, Inc. | Method and system for multiple GPU support |
US20070159488A1 (en) | 2005-12-19 | 2007-07-12 | Nvidia Corporation | Parallel Array Architecture for a Graphics Processor |
US20070195099A1 (en) | 2006-02-21 | 2007-08-23 | Nvidia Corporation | Asymmetric multi-GPU processing |
US20080007559A1 (en) | 2006-06-30 | 2008-01-10 | Nokia Corporation | Apparatus, method and a computer program product for providing a unified graphics pipeline for stereoscopic rendering |
Non-Patent Citations (17)
Title |
---|
Department of Computer Science, University of North Carolina publication by Molnar et al. entitled, "PixelFlow: High-Speed Rendering Using Image Composition," 1992, 10 Pages. |
EP 04 79 9376, Oct. 14, 2008. |
PCT/IB06/01529, Dec. 31, 2007. |
PCT/IB07/03464, Sep. 22, 2008. |
PCT/IL04/001069, Jun. 30, 2005. |
PCT/US07/26466, Jul. 16, 2008. |
Powerpoint presentation entitled, "Go Multiple" by Dennis Yang, Conference Platform , 2007,11 pages. |
Publication by TW Crockett entitled, "An Introduction to Parallel Rendering", in Parallel Computing, 1997, Elsevier Science, 29 Pages. |
Scientific publication entitled "Hybrid Sort-First and Sort-Last Parallel Rendering With a Cluster of PCs" by Rudrajit Samanta et al., Princeton University, 12 pages, c. 2000. |
Scientific publication entitled, "Chromium; A Stream-Processing Framework for Interactive Rendering on Clusters" from Stanford University, Lawrence Livermore National Laboratory, and IBM T.J. Watson Research Center, 2007,10 pages. |
Silicon Graphics, Inc. online document entitled "Additional Information for: OpenGL Multipipe(TM) SDK White Paper (IRIX 6.5)", published Feb. 1, 2003, 2 pages. |
Silicon Graphics, Inc. online document entitled "Additional Information for: OpenGL Multipipe™ SDK White Paper (IRIX 6.5)", published Feb. 1, 2003, 2 pages. |
Silicon Graphics, Inc. pdf. document entitled "OpenGL Multipipe(TM) SDK White Paper", 2002,2003, pp. 1-32. |
Silicon Graphics, Inc. pdf. document entitled "OpenGL Multipipe™ SDK White Paper", 2002,2003, pp. 1-32. |
Technical publication by Li et al entiteled "ParVox-A Parallel Splatting Volume Rendering System for Distributed Visualization," Oct. 1997, 7 Pages. |
TW Crockett, "An introduction to parallel rendering", in Parallel Computing, 1997, Elsevier Science, http://wwwens.uqac.ca/~pdelisle/8inf825/Fichiers/Articles/ParallelRendering.pdf. * |
TW Crockett, "An introduction to parallel rendering", in Parallel Computing, 1997, Elsevier Science, http://wwwens.uqac.ca/˜pdelisle/8inf825/Fichiers/Articles/ParallelRendering.pdf. * |
Cited By (21)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9584592B2 (en) | 2003-11-19 | 2017-02-28 | Lucidlogix Technologies Ltd. | Internet-based graphics application profile management system for updating graphic application profiles stored within the multi-GPU graphics rendering subsystems of client machines running graphics-based applications |
US20110072056A1 (en) * | 2003-11-19 | 2011-03-24 | Reuven Bakalash | Internet-based graphics application profile management system for updating graphic application profiles stored within the multi-gpu graphics rendering subsystems of client machines running graphics-based applications |
US8629877B2 (en) | 2003-11-19 | 2014-01-14 | Lucid Information Technology, Ltd. | Method of and system for time-division based parallelization of graphics processing units (GPUs) employing a hardware hub with router interfaced between the CPU and the GPUs for the transfer of geometric data and graphics commands and rendered pixel data within the system |
US8754894B2 (en) * | 2003-11-19 | 2014-06-17 | Lucidlogix Software Solutions, Ltd. | Internet-based graphics application profile management system for updating graphic application profiles stored within the multi-GPU graphics rendering subsystems of client machines running graphics-based applications |
US20080165196A1 (en) * | 2003-11-19 | 2008-07-10 | Reuven Bakalash | Method of dynamic load-balancing within a PC-based computing system employing a multiple GPU-based graphics pipeline architecture supporting multiple modes of GPU parallelization |
US9405586B2 (en) | 2003-11-19 | 2016-08-02 | Lucidlogix Technologies, Ltd. | Method of dynamic load-balancing within a PC-based computing system employing a multiple GPU-based graphics pipeline architecture supporting multiple modes of GPU parallelization |
US20090284773A1 (en) * | 2008-05-15 | 2009-11-19 | Canon Kabushiki Kaisha | Image processing method, image processing apparatus, and control method thereof |
US8253977B2 (en) * | 2008-05-15 | 2012-08-28 | Canon Kabushiki Kaisha | Controlling share of processing by each processor based on tendency of compositing pixel information in an image area |
US20100262971A1 (en) * | 2008-07-22 | 2010-10-14 | Toyota Jidosha Kabushiki Kaisha | Multi core system, vehicular electronic control unit, and task switching method |
US8856196B2 (en) * | 2008-07-22 | 2014-10-07 | Toyota Jidosha Kabushiki Kaisha | System and method for transferring tasks in a multi-core processor based on trial execution and core node |
US20110153996A1 (en) * | 2009-12-23 | 2011-06-23 | Bader Aleksey A | Parallel and Vectored Gilbert-Johnson-Keerthi Graphics Processing |
US8564601B2 (en) * | 2009-12-23 | 2013-10-22 | Intel Corporation | Parallel and vectored Gilbert-Johnson-Keerthi graphics processing |
US9098350B2 (en) | 2012-10-10 | 2015-08-04 | International Business Machines Corporation | Adaptive auto-pipelining for stream processing applications |
US9569221B1 (en) * | 2014-09-29 | 2017-02-14 | Amazon Technologies, Inc. | Dynamic selection of hardware processors for stream processing |
US20180234625A1 (en) * | 2017-02-15 | 2018-08-16 | Canon Kabushiki Kaisha | Image processing apparatus and image capturing apparatus |
US10412301B2 (en) * | 2017-02-15 | 2019-09-10 | Canon Kabushiki Kaisha | Image processing apparatus and image capturing apparatus |
US10798162B2 (en) * | 2017-08-28 | 2020-10-06 | Texas Instruments Incorporated | Cluster system with fail-safe fallback mechanism |
US11283864B2 (en) | 2017-08-28 | 2022-03-22 | Texas Instruments Incorporated | Cluster system with fail-safe fallback mechanism |
US20220210221A1 (en) * | 2017-08-28 | 2022-06-30 | Texas Instruments Incorporated | Cluster system with fail-safe fallback mechanism |
US11010169B2 (en) | 2018-01-09 | 2021-05-18 | Samsung Electronics Co., Ltd. | Processor device collecting performance information through command-set-based replay |
US20210192844A1 (en) * | 2019-12-20 | 2021-06-24 | Wormhole Labs, Inc. | Passive Data Capture-based Environment Generation |
Also Published As
Publication number | Publication date |
---|---|
US9584592B2 (en) | 2017-02-28 |
US20140297798A1 (en) | 2014-10-02 |
WO2008082641A3 (en) | 2008-10-09 |
WO2008082641A2 (en) | 2008-07-10 |
US8754894B2 (en) | 2014-06-17 |
US20110072056A1 (en) | 2011-03-24 |
CA2674351A1 (en) | 2008-07-10 |
US20090027402A1 (en) | 2009-01-29 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9584592B2 (en) | Internet-based graphics application profile management system for updating graphic application profiles stored within the multi-GPU graphics rendering subsystems of client machines running graphics-based applications | |
US8125487B2 (en) | Game console system capable of paralleling the operation of multiple graphic processing units (GPUS) employing a graphics hub device supported on a game console board | |
US20080094403A1 (en) | Computing system capable of parallelizing the operation graphics processing units (GPUs) supported on a CPU/GPU fusion-architecture chip and one or more external graphics cards, employing a software-implemented multi-mode parallel graphics rendering subsystem | |
US8085273B2 (en) | Multi-mode parallel graphics rendering system employing real-time automatic scene profiling and mode control | |
US20080129747A1 (en) | Multi-mode parallel graphics rendering system employing real-time automatic scene profiling and mode control | |
US20070291040A1 (en) | Multi-mode parallel graphics rendering system supporting dynamic profiling of graphics-based applications and automatic control of parallel modes of operation | |
US7796130B2 (en) | PC-based computing system employing multiple graphics processing units (GPUS) interfaced with the central processing unit (CPU) using a PC bus and a hardware hub, and parallelized according to the object division mode of parallel operation | |
WO2008004135A9 (en) | Multi-mode parallel graphics rendering system employing real-time automatic scene profiling and mode control |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: LUCID INFORMATION TECHNOLOGY, LTD., ISRAELFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:BAKALASH, REUVEN;LEVIATHAN, YANIV;REEL/FRAME:020224/0782Effective date: 20071115 |
|
AS | Assignment |
Owner name: LUCID INFORMATION TECHNOLOGY, LTD., ISRAELFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:BAKALASH, REUVEN;LEVIATHAN, YANIV;REEL/FRAME:020347/0529Effective date: 20071115 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: LUCIDLOGIX SOFTWARE SOLUTIONS, LTD., ISRAELFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:LUCID INFORMATION TECHNOLOGY, LTD.;REEL/FRAME:031945/0510Effective date: 20140112 |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: LUCIDLOGIX TECHNOLOGIES LTD., ISRAELFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:LUCIDLOGIX SOFTWARE SOLUTIONS, LTD.;REEL/FRAME:034748/0277Effective date: 20141231 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:LUCIDLOGIX TECHNOLOGY LTD.;REEL/FRAME:046361/0169Effective date: 20180131 |
|
FEPP | Fee payment procedure |
Free format text: ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: BIG.) |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 12TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1553); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 12 |