US8661341B1 - Simhash based spell correction - Google Patents
Simhash based spell correction Download PDFInfo
- Publication number
- US8661341B1 US8661341B1 US13/009,189 US201113009189A US8661341B1 US 8661341 B1 US8661341 B1 US 8661341B1 US 201113009189 A US201113009189 A US 201113009189A US 8661341 B1 US8661341 B1 US 8661341B1
- Authority
- US
- United States
- Prior art keywords
- character string
- simhashed
- candidate
- dictionary
- hash value
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/20—Natural language analysis
- G06F40/232—Orthographic correction, e.g. spell checking or vowelisation
Definitions
- the present invention is generally directed to automatic spell correction.
- misspelling edit probabilities may be used to determine if a word is misspelled. For example, determining that an ‘e’ and an ‘r’ are more likely to be substitutes for each other than an ‘h’ and an ‘a’ due to the relative proximity of ‘e’ and ‘r’ on most keyboards.
- An alternative spell correction system and method based on a simhashed dictionary dataset, can provide efficient and accurate spell correction of words in real time. Specifically, as a character of a word is inserted, deleted, or substituted, spell correction takes place through referencing a simhashed dictionary dataset to find character strings with a high probability for replacing or completing the word and presenting these character strings to a user as possible candidates for completing the word.
- a character string is simhashed to generate a simhashed character string.
- a plurality of substrings is extracted from the character string by applying a sliding window of at least two characters to the character string.
- the plurality of substrings are hashed to produce a plurality of corresponding hash values.
- Each hash value is processed to generate a simhashed character string.
- the simhashed character string is then compared with character strings within a simhashed dictionary dataset to determine at least one candidate to replace the character string.
- Processing each hash value includes extracting a set of lowest bits from each hash value, and mapping each set of lowest bits to a bitmask representing the simhashed character string.
- comparing the simhashed character string with character strings within a simhashed dictionary may be performed by applying a nearest neighbor algorithm to search the simhashed dictionary dataset for the at least one candidate.
- Applying the nearest neighbor algorithm includes determining a hamming distance between the simhashed character string and each character string within the simhashed dictionary dataset satisfying a threshold, scoring each character string within the simhashed dictionary dataset satisfying the threshold, and ranking the scored character strings.
- the at least one candidate may be presented for selection to replace the character string.
- one of the at least one candidates may automatically replace the character string.
- a starting anchor and an ending anchor are appended to the character string.
- a simhashed dictionary dataset is generated.
- a starting anchor and an ending anchor are appended to each character string within a dictionary dataset to form corresponding composite character strings.
- Substrings from each composite character string are extracted by applying a sliding window of at least two characters to the composite character string.
- Each extracted substring is hashed to produce a corresponding hash value.
- a set of lowest bits is extracted from each hash value.
- a bitmask corresponding to each character string is generated by mapping each set of lowest bits to the bitmask.
- a system for facilitating simhash based spell correction includes means for simhashing a character string to generate a simhashed character string.
- the system includes means for extracting a plurality of substrings from a character string by applying a sliding window of at least two characters to the character string, means for hashing the plurality of substrings to produce a plurality of corresponding hash values, means for processing each hash value to generate a bitmask representing a simhashed character string, and means for comparing the simhashed character string with character strings within a simhashed dictionary dataset to determine at least one candidate to replace the character string.
- the system additionally includes means for performing all other steps described above.
- FIG. 1 is a diagram showing a cloud computing environment that may be used for implementing simhash based spell correction
- FIG. 2 is an exemplary diagram detailing how a word or character string within a dictionary dataset is simhashed
- FIG. 3 is a flowchart showing the steps taken for generating a simhashed dictionary dataset to support simhash based spell correction
- FIG. 4 is a flowchart of a process applying simhash based spell correction on a character string as the character string is input;
- FIG. 5 is a high-level block diagram that may be used for implementing simhash based spell correction.
- An alternative spell correction system and method based on a simhashed dictionary dataset, can provide efficient and accurate spell correction of words in real time. Specifically, as a character of a word is inserted, deleted, or substituted, spell correction takes place through referencing a simhashed dictionary dataset to find character strings with a high probability for replacing or completing the word and presenting these character strings to a user as possible candidates for completing the word.
- FIG. 1 illustrates an exemplary network 100 in which various exemplary embodiments of simhash based spell correction can be provided.
- simhash based spell correction can be provided through a cloud computing environment 130 .
- users at personal computers, such as computer 110 and computer 120 could use simhash based spell correction provided by cloud 130 via network 100 .
- servers 140 , 150 , and/or 160 can provide the simhash based spell correction.
- server 140 may provide a web-enabled application implementing the simhashed based spell correction, such as a search engine.
- a dictionary of simhashed words can be stored in database 165 accessed via a database server 160 , and access to the web-enabled application or search engine can be provided via a web-page at server 150 .
- a web-based implementation of simhash based spell correction can be created using standard technologies.
- a specific server e.g. server 170 or server 180
- the network application can be accessed via the Internet or as a standalone network application (e.g., an application provided within a company intranet).
- a server 170 hosting the network-based simhash based spell correction application can access the dictionary of simhashed words from a server 180 , which is connected to a database 185 .
- a simhash (similarity hash) or locality-sensitive hash represents hash functions useful for determining the degree of similarity between elements. For example, each element within a group is hashed and similar items resulting from the hash may be mapped to the same buckets with a high probability. More specifically, a simhash function maps elements in a domain where a metric between elements within that domain are defined. Elements of the domain may be mapped to sets, and one or more elements of each set are used as the hash value. This results in set similarity being directly proportional to the probability of the hash values being equal.
- comparing a simhashed word and a simhashed misspelled version of the word should result in a low hamming distance between the word and the misspelled version of the word.
- comparing the simhashed word to a random simhashed word would likely result in a high hamming distance.
- a hamming distance between two words represents the number of positions at which corresponding characters are different.
- Simhashing is a permutation of a conventional hash algorithm. Applying a hash function to a character string results in completely different hash values regardless of the similarity of the character strings. Applying hash functions to character strings, such as phrases of words, for example, generally results in completely different hash values.
- applying hash functions may be applied to the following character strings representing phrases of words: the phrase “the bat sat on the cat” results in a hash value of 20595792, the phrase “the bat sat on a cat” results in a hash value of 09212041, and the phrase “blue grits and spam” results in a hash value of “15101262.” If these hash values are mapped to a bit representation, the hamming distance will be high because the initial hash values are all random and different from one another. It should be noted that all phrases and hash values described herein are exemplary.
- simhashing results in hash values that are similar to each other, meaning that the hamming distance between the phrases is low.
- Simhashing in general is performed by identifying certain features corresponding to an object, in this case, words within a phrase or letters within the phrase. The features are then hashed using a hash function to produce hash values similar to those shown above, except with greater similarity. The hash values are then mapped to a bit representation of the sum of all hashed features. For example, if the three phrases above were simhashed, their corresponding simhashed bitstring representations may be:
- simhashed bitstring representations of “the bat sat on the cat” and “the bat sat on a cat” are very similar, while the simhashed bitstring representation of “blue grits and spam” is not similar to the first two.
- Hamming distances can also be calculated.
- Hamming distance measures the minimum number of substitutions required to change one string into the other, or the number of errors that transformed one string into the other. For example, the hamming distance between String 1 and String 2 above is 4 due to four bits of the bitstring representations being different between String 1 and String 2.
- simhash based spell correction Before simhash based spell correction can be applied to a received or input character string set, a simhashed dictionary dataset based on a dictionary dataset of words or character strings must be generated.
- FIG. 2 illustrates an exemplary diagram detailing how a word or character string within a dictionary dataset is simhashed to generate the aforementioned simhashed dictionary dataset.
- Each character string within the dictionary dataset is simhashed according to the exemplary diagram shown in FIG. 2 and the description set forth below in order to generate corresponding simhashed character strings.
- starting anchor 204 and ending anchor 206 are attached.
- Starting anchor 204 and ending anchor 206 may be any character and are added to character string 202 in order to indicate the beginning and the end, respectively, of a given word or character string.
- Starting anchor 204 , character string 202 , and ending anchor 206 collectively represent a composite character string 208 .
- substrings 212 are extracted from composite character string 208 .
- Each substring 212 is hashed using a hash function 220 which maps each substring 212 to a hash value 214 , each representing an integer.
- a set of lowest bits 218 of each hash value 214 is then extracted and mapped to bitmask 216 by setting each bit corresponding to a particular integer to ‘1’.
- the exemplary diagram shown in FIG. 2 and the corresponding description is also applicable to generating simhashed character strings of character strings that are not a part of a dictionary dataset.
- FIG. 3 illustrates a flowchart showing the steps taken for generating a simhashed dictionary dataset to support simhash based spell correction.
- step 302 for each character string 202 within a dictionary dataset, starting anchor 204 and ending anchor 206 are attached resulting in composite string 208 .
- character string 202 is represented by the word “amsterdam”.
- the starting anchor may be “ ⁇ ” and the ending anchor character may be “$”.
- character string “amsterdam” becomes “ ⁇ amsterdam$”.
- sliding window 210 of length W is applied to composite string 208 in order to extract substrings 212 .
- W may be any number between 2 and x, where x represents the length of composite string 208 .
- the extraction produces the following subsets: ⁇ am, ams, mst, step, ter, erd, rda, dam, am$.
- each of the substrings 212 are hashed, producing a corresponding hash value 214 associated with each substring 212 .
- Any type of hash function which outputs pseudo random bits based on the input may be used to hash substrings 212 .
- Each hash value 214 may be represented by an integer.
- a set of lowest bits 218 is extracted from each hash value 214 .
- Each set of lowest bits represents a number that may be mapped to bitmask 216 .
- the lowest 6 bits from each hash value 214 may be extracted, each set of lowest bits representing a number between 0 and 63 of bitmask 216 .
- For the character string “ ⁇ amsterdam$” and a sliding window of W 3, nine substrings are extracted and hashed. This results in nine sets of lowest bits to map to bitmask 216 , with each set of lowest bits representing a number between 0 and 63.
- each set of lowest bits 218 is mapped to bitmask 216 by setting the corresponding bit of bitmask 216 to a value of ‘1.’
- the resulting bitmask 216 represents a simhashed dictionary word or character string.
- the method then returns to step 304 and repeats until all character strings in the dictionary dataset have been simhashed.
- FIG. 4 illustrates a flowchart of a process applying simhash based spell correction on a character string as the character string is input.
- Input may be received from a user or from a component of the cloud environment discussed with respect to FIG. 1 .
- At 402 at least one character of a character string is received.
- the characters may be received piecemeal (i.e., one by one), as a substring of a character string, or as a complete character string.
- the characters of the character string set are received at a computer as input via a keyboard, or other user input device.
- the characters of the character string set are received at a server through a search engine query box.
- a simhash is performed on the received character string to generate a simhashed character string.
- the process for performing simhashing entails steps similar to those discussed above with regard to simhashing words within a dictionary dataset.
- a plurality of substrings is extracted from the received character string by applying a sliding window of at least two characters to the character string.
- a starting anchor and an ending anchor may be appended to the character string before extracting the plurality of substrings.
- the plurality of substrings is hashed to produce a plurality of corresponding hash values.
- each hash value is processed to generate a bitmask representing a simhashed character string.
- Processing each hash value includes extracting a set of lowest bits from each hash value and mapping each set of lowest bits to the bitmask.
- the simhashed character string is compared to character strings within the simhashed dictionary dataset.
- the comparison is performed by applying a nearest neighbor algorithm to determine which character strings within the simhashed dictionary dataset produce the lowest hamming distances when compared to the input sim hashed character string.
- the character strings within the simhashed dictionary dataset producing the lowest hamming distances which satisfy a threshold are presented as candidates. These candidates represent potential spellcorrected versions of the received character string.
- the candidates may be displayed as a list for user selection. Each candidate satisfying the threshold may be scored and presented in the list in a ranked order. Alternatively, the candidate with the highest score may be automatically selected to replace the received character string.
- the method may then return to step 402 and repeat steps 404 through 412 until completion of the character string and spell correction is complete.
- Systems, apparatus, and methods described herein may be implemented using digital circuitry, or using one or more computers using well-known computer processors, memory units, storage devices, computer software, and other components.
- a computer includes a processor for executing instructions and one or more memories for storing instructions and data.
- a computer may also include, or be coupled to, one or more mass storage devices, such as one or more magnetic disks, internal hard disks and removable disks, magneto-optical disks, optical disks, etc.
- Systems, apparatus, and methods described herein may be implemented using computers operating in a client-server relationship.
- the client computers are located remotely from the server computer and interact via a network.
- the client-server relationship may be defined and controlled by computer programs running on the respective client and server computers.
- Systems, apparatus, and methods described herein may be used within a network-based cloud computing system.
- a server or another processor that is connected to a network communicates with one or more client computers via a network.
- a client computer may communicate with the server via a network browser application residing and operating on the client computer, for example.
- a client computer may store data on the server and access the data via the network.
- a client computer may transmit requests for data, or requests for online services, to the server via the network.
- the server may perform requested services and provide data to the client computer(s).
- the server may also transmit data adapted to cause a client computer to perform a specified function, e.g., to perform a calculation, to display specified data on a screen, etc.
- the server may transmit a request adapted to cause a client computer to perform one or more of the method steps described herein, including one or more of the steps of FIGS. 2 and/or 4 .
- Certain steps of the methods described herein, including one or more of the steps of FIGS. 2 and/or 4 may be performed by a server or by another processor in a network-based cloud-computing system.
- Certain steps of the methods described herein, including one or more of the steps of FIGS. 2 and/or 4 may be performed by a client computer in a network-based cloud computing system.
- the steps of the methods described herein, including one or more of the steps of FIGS. 2 and/or 4 may be performed by a server and/or by a client computer in a network-based cloud computing system, in any combination.
- Systems, apparatus, and methods described herein may be implemented using a computer program product tangibly embodied in an information carrier, e.g., in a non-transitory machine-readable storage device, for execution by a programmable processor; and the method steps described herein, including one or more of the steps of FIGS. 2 and/or 4 , may be implemented using one or more computer programs that are executable by such a processor.
- a computer program is a set of computer program instructions that can be used, directly or indirectly, in a computer to perform a certain activity or bring about a certain result.
- a computer program can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.
- Computer 500 comprises a processor 510 operatively coupled to a data storage device 520 and a memory 530 .
- Processor 510 controls the overall operation of computer 500 by executing computer program instructions that define such operations.
- the computer program instructions may be stored in data storage device 520 , or other computer readable medium, and loaded into memory 530 when execution of the computer program instructions is desired.
- FIGS. 2 and/or 4 can be defined by the computer program instructions stored in memory 530 and/or data storage device 520 and controlled by processor 510 executing the computer program instructions.
- Computer 500 can be implemented as computer executable code programmed by one skilled in the art to perform an algorithm defined by the method steps of FIGS. 2 and/or 4 . Accordingly, by executing the computer program instructions, the processor 510 executes an algorithm defined by the method steps of FIGS. 2 and/or 4 .
- Computer 500 also includes one or more network interfaces 540 for communicating with other devices via a network.
- Computer 500 also includes one or more input/output devices 550 that enable user interaction with computer 500 (e.g., display, keyboard, mouse, speakers, buttons, etc.).
- Processor 510 may include both general and special purpose microprocessors, and may be the sole processor or one of multiple processors of computer 500 .
- Processor 510 may comprise one or more central processing units (CPUs), for example.
- CPUs central processing units
- Processor 510 , data storage device 520 , and/or memory 530 may include, be supplemented by, or incorporated in, one or more application-specific integrated circuits (ASICs) and/or one or more field programmable gate arrays (FPGAs).
- ASICs application-specific integrated circuits
- FPGAs field programmable gate arrays
- Data storage device 520 and memory 530 each comprise a tangible non-transitory computer readable storage medium.
- Data storage device 520 , and memory 530 may each include high-speed random access memory, such as dynamic random access memory (DRAM), static random access memory (SRAM), double data rate synchronous dynamic random access memory (DDR RAM), or other random access solid state memory devices, and may include non-volatile memory, such as one or more magnetic disk storage devices such as internal hard disks and removable disks, magneto-optical disk storage devices, optical disk storage devices, flash memory devices, semiconductor memory devices, such as erasable programmable read-only memory (EPROM), electrically erasable programmable read-only memory (EEPROM), compact disc read-only memory (CD-ROM), digital versatile disc read-only memory (DVD-ROM) disks, or other non-volatile solid state storage devices.
- DRAM dynamic random access memory
- SRAM static random access memory
- DDR RAM double data rate synchronous dynamic random access memory
- non-volatile memory such as
- Input/output devices 550 may include peripherals, such as a printer, scanner, display screen, etc.
- input/output devices 550 may include a display device such as a cathode ray tube (CRT) or liquid crystal display (LCD) monitor for displaying information to the user, a keyboard, and a pointing device such as a mouse or a trackball by which the user can provide input to computer 500 .
- display device such as a cathode ray tube (CRT) or liquid crystal display (LCD) monitor for displaying information to the user
- keyboard such as a keyboard
- pointing device such as a mouse or a trackball by which the user can provide input to computer 500 .
- Any or all of the systems and apparatus discussed herein, may be implemented using a computer such as computer 500 .
- FIG. 5 is a high level representation of some of the components of such a computer for illustrative purposes.
Abstract
Description
Claims (16)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/009,189 US8661341B1 (en) | 2011-01-19 | 2011-01-19 | Simhash based spell correction |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/009,189 US8661341B1 (en) | 2011-01-19 | 2011-01-19 | Simhash based spell correction |
Publications (1)
Publication Number | Publication Date |
---|---|
US8661341B1 true US8661341B1 (en) | 2014-02-25 |
Family
ID=50115186
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/009,189 Active 2031-09-11 US8661341B1 (en) | 2011-01-19 | 2011-01-19 | Simhash based spell correction |
Country Status (1)
Country | Link |
---|---|
US (1) | US8661341B1 (en) |
Cited By (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20120284270A1 (en) * | 2011-05-04 | 2012-11-08 | Nhn Corporation | Method and device to detect similar documents |
US20150081564A1 (en) * | 2013-09-16 | 2015-03-19 | International Business Machines Corporation | Privacy preserving content analysis |
US20160139819A1 (en) * | 2014-11-18 | 2016-05-19 | Fujitsu Limited | Computer-readable recording medium, encoding device and encoding method |
CN106469097A (en) * | 2016-09-02 | 2017-03-01 | 北京百度网讯科技有限公司 | A kind of method and apparatus recalling error correction candidate based on artificial intelligence |
CN109635084A (en) * | 2018-11-30 | 2019-04-16 | 宁波深擎信息科技有限公司 | A kind of real-time quick De-weight method of multi-source data document and system |
CN109670153A (en) * | 2018-12-21 | 2019-04-23 | 北京城市网邻信息技术有限公司 | A kind of determination method, apparatus, storage medium and the terminal of similar model |
CN110297879A (en) * | 2019-05-15 | 2019-10-01 | 平安科技（深圳）有限公司 | A kind of method, apparatus and storage medium of the data deduplication based on big data |
US10496706B2 (en) | 2017-04-17 | 2019-12-03 | International Business Machines Corporation | Matching strings in a large relational database |
CN111797285A (en) * | 2020-06-30 | 2020-10-20 | 深圳壹账通智能科技有限公司 | Character string fuzzy matching method, device, equipment and readable storage medium |
CN113011194A (en) * | 2021-04-15 | 2021-06-22 | 电子科技大学 | Text similarity calculation method fusing keyword features and multi-granularity semantic features |
Citations (42)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4780816A (en) * | 1986-05-16 | 1988-10-25 | The United States Of America As Represented By The Secretary Of The Army | Key-to-address transformations |
US5297038A (en) * | 1985-09-27 | 1994-03-22 | Sharp Kabushiki Kaisha | Electronic dictionary and method of codifying words therefor |
US20020059343A1 (en) * | 2000-11-10 | 2002-05-16 | Masahiro Kurishima | Client apparatus and recording medium that records a program thereof |
US20030110163A1 (en) | 2001-12-04 | 2003-06-12 | Compaq Information Technologies Group, L.P. | System and method for efficiently finding near-similar images in massive databases |
US20030120647A1 (en) * | 2000-07-24 | 2003-06-26 | Alex Aiken | Method and apparatus for indexing document content and content comparison with World Wide Web search service |
US6738779B1 (en) * | 2001-02-21 | 2004-05-18 | Telecom Italia S.P.A. | Apparatus for and method of multiple parallel string searching |
US20060013450A1 (en) | 2004-06-22 | 2006-01-19 | Ying Shan | Method and apparatus for recognizing 3-D objects |
US7158961B1 (en) | 2001-12-31 | 2007-01-02 | Google, Inc. | Methods and apparatus for estimating similarity |
US20070005556A1 (en) | 2005-06-30 | 2007-01-04 | Microsoft Corporation | Probabilistic techniques for detecting duplicate tuples |
US20070168182A1 (en) * | 2006-01-17 | 2007-07-19 | Casio Computer Co., Ltd. | Electronic dictionary apparatus and recording medium on which search control program is recorded |
US20070204344A1 (en) * | 2006-02-26 | 2007-08-30 | Chun Xue | Parallel Variable Length Pattern Matching Using Hash Table |
US20070239705A1 (en) * | 2006-03-29 | 2007-10-11 | International Business Machines Corporation | System and method for performing a similarity measure of anonymized data |
US20080028468A1 (en) * | 2006-07-28 | 2008-01-31 | Sungwon Yi | Method and apparatus for automatically generating signatures in network security systems |
US20080059876A1 (en) * | 2006-08-31 | 2008-03-06 | International Business Machines Corporation | Methods and apparatus for performing spelling corrections using one or more variant hash tables |
US7376752B1 (en) * | 2003-10-28 | 2008-05-20 | David Chudnovsky | Method to resolve an incorrectly entered uniform resource locator (URL) |
US20080155398A1 (en) * | 2006-12-21 | 2008-06-26 | International Business Machines Corporation | System and method for adaptive spell checking |
US20080162474A1 (en) | 2006-12-29 | 2008-07-03 | Jm Van Thong | Image-based retrieval for high quality visual or acoustic rendering |
US20080205774A1 (en) | 2007-02-26 | 2008-08-28 | Klaus Brinker | Document clustering using a locality sensitive hashing function |
US20080249764A1 (en) * | 2007-03-01 | 2008-10-09 | Microsoft Corporation | Smart Sentiment Classifier for Product Reviews |
US20090024826A1 (en) * | 2007-07-16 | 2009-01-22 | Ming Zhang | Galois-based incremental hash module |
US7503000B1 (en) * | 2000-07-31 | 2009-03-10 | International Business Machines Corporation | Method for generation of an N-word phrase dictionary from a text corpus |
US20090150371A1 (en) * | 2007-12-05 | 2009-06-11 | Yahoo! Inc. | Methods and apparatus for computing graph similarity via signature similarity |
US20090172523A1 (en) * | 2003-06-02 | 2009-07-02 | Colby Steven M | Correcting Text |
US7574409B2 (en) * | 2004-11-04 | 2009-08-11 | Vericept Corporation | Method, apparatus, and system for clustering and classification |
US7610283B2 (en) | 2007-06-12 | 2009-10-27 | Microsoft Corporation | Disk-based probabilistic set-similarity indexes |
US20100010671A1 (en) | 2008-07-14 | 2010-01-14 | Atsushi Miyamoto | Information processing system, information processing method, robot control system, robot control method, and computer program |
US20100070509A1 (en) | 2008-08-15 | 2010-03-18 | Kai Li | System And Method For High-Dimensional Similarity Search |
US20100077015A1 (en) | 2008-09-23 | 2010-03-25 | Kave Eshghi | Generating a Hash Value from a Vector Representing a Data Object |
US7809722B2 (en) | 2005-05-09 | 2010-10-05 | Like.Com | System and method for enabling search and retrieval from image files based on recognized information |
US20100254615A1 (en) * | 2009-04-02 | 2010-10-07 | Check Point Software Technologies, Ltd. | Methods for document-to-template matching for data-leak prevention |
US7812241B2 (en) | 2006-09-27 | 2010-10-12 | The Trustees Of Columbia University In The City Of New York | Methods and systems for identifying similar songs |
US20100299731A1 (en) * | 2006-03-08 | 2010-11-25 | Steven Paul Atkinson | Electronic System for Securing Electronic Services |
US7849399B2 (en) * | 2007-06-29 | 2010-12-07 | Walter Hoffmann | Method and system for tracking authorship of content in data |
US20110093426A1 (en) * | 2009-06-26 | 2011-04-21 | Michael Gregory Hoglund | Fuzzy hash algorithm |
US8032529B2 (en) * | 2007-04-12 | 2011-10-04 | Cisco Technology, Inc. | Enhanced bloom filters |
US20120016897A1 (en) * | 2010-07-16 | 2012-01-19 | Altruik, Inc. | System and method for improving webpage indexing and optimization |
US20120051657A1 (en) * | 2010-08-30 | 2012-03-01 | Microsoft Corporation | Containment coefficient for identifying textual subsets |
US20120124566A1 (en) * | 2010-11-17 | 2012-05-17 | Federighi Craig M | Shared resource dependencies |
US20120136650A1 (en) * | 2010-11-30 | 2012-05-31 | Microsoft Corporation | Suggesting spelling corrections for personal names |
US20120166942A1 (en) * | 2010-12-22 | 2012-06-28 | Apple Inc. | Using parts-of-speech tagging and named entity recognition for spelling correction |
US20120215853A1 (en) * | 2011-02-17 | 2012-08-23 | Microsoft Corporation | Managing Unwanted Communications Using Template Generation And Fingerprint Comparison Features |
US8370384B2 (en) * | 2007-09-25 | 2013-02-05 | Canon Kabushiki Kaisha | Information processing apparatus, file management method, program, and storage medium |
-
2011
- 2011-01-19 US US13/009,189 patent/US8661341B1/en active Active
Patent Citations (42)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5297038A (en) * | 1985-09-27 | 1994-03-22 | Sharp Kabushiki Kaisha | Electronic dictionary and method of codifying words therefor |
US4780816A (en) * | 1986-05-16 | 1988-10-25 | The United States Of America As Represented By The Secretary Of The Army | Key-to-address transformations |
US20030120647A1 (en) * | 2000-07-24 | 2003-06-26 | Alex Aiken | Method and apparatus for indexing document content and content comparison with World Wide Web search service |
US7503000B1 (en) * | 2000-07-31 | 2009-03-10 | International Business Machines Corporation | Method for generation of an N-word phrase dictionary from a text corpus |
US20020059343A1 (en) * | 2000-11-10 | 2002-05-16 | Masahiro Kurishima | Client apparatus and recording medium that records a program thereof |
US6738779B1 (en) * | 2001-02-21 | 2004-05-18 | Telecom Italia S.P.A. | Apparatus for and method of multiple parallel string searching |
US20030110163A1 (en) | 2001-12-04 | 2003-06-12 | Compaq Information Technologies Group, L.P. | System and method for efficiently finding near-similar images in massive databases |
US7158961B1 (en) | 2001-12-31 | 2007-01-02 | Google, Inc. | Methods and apparatus for estimating similarity |
US20090172523A1 (en) * | 2003-06-02 | 2009-07-02 | Colby Steven M | Correcting Text |
US7376752B1 (en) * | 2003-10-28 | 2008-05-20 | David Chudnovsky | Method to resolve an incorrectly entered uniform resource locator (URL) |
US20060013450A1 (en) | 2004-06-22 | 2006-01-19 | Ying Shan | Method and apparatus for recognizing 3-D objects |
US7574409B2 (en) * | 2004-11-04 | 2009-08-11 | Vericept Corporation | Method, apparatus, and system for clustering and classification |
US7809722B2 (en) | 2005-05-09 | 2010-10-05 | Like.Com | System and method for enabling search and retrieval from image files based on recognized information |
US20070005556A1 (en) | 2005-06-30 | 2007-01-04 | Microsoft Corporation | Probabilistic techniques for detecting duplicate tuples |
US20070168182A1 (en) * | 2006-01-17 | 2007-07-19 | Casio Computer Co., Ltd. | Electronic dictionary apparatus and recording medium on which search control program is recorded |
US20070204344A1 (en) * | 2006-02-26 | 2007-08-30 | Chun Xue | Parallel Variable Length Pattern Matching Using Hash Table |
US20100299731A1 (en) * | 2006-03-08 | 2010-11-25 | Steven Paul Atkinson | Electronic System for Securing Electronic Services |
US20070239705A1 (en) * | 2006-03-29 | 2007-10-11 | International Business Machines Corporation | System and method for performing a similarity measure of anonymized data |
US20080028468A1 (en) * | 2006-07-28 | 2008-01-31 | Sungwon Yi | Method and apparatus for automatically generating signatures in network security systems |
US20080059876A1 (en) * | 2006-08-31 | 2008-03-06 | International Business Machines Corporation | Methods and apparatus for performing spelling corrections using one or more variant hash tables |
US7812241B2 (en) | 2006-09-27 | 2010-10-12 | The Trustees Of Columbia University In The City Of New York | Methods and systems for identifying similar songs |
US20080155398A1 (en) * | 2006-12-21 | 2008-06-26 | International Business Machines Corporation | System and method for adaptive spell checking |
US20080162474A1 (en) | 2006-12-29 | 2008-07-03 | Jm Van Thong | Image-based retrieval for high quality visual or acoustic rendering |
US20080205774A1 (en) | 2007-02-26 | 2008-08-28 | Klaus Brinker | Document clustering using a locality sensitive hashing function |
US20080249764A1 (en) * | 2007-03-01 | 2008-10-09 | Microsoft Corporation | Smart Sentiment Classifier for Product Reviews |
US8032529B2 (en) * | 2007-04-12 | 2011-10-04 | Cisco Technology, Inc. | Enhanced bloom filters |
US7610283B2 (en) | 2007-06-12 | 2009-10-27 | Microsoft Corporation | Disk-based probabilistic set-similarity indexes |
US7849399B2 (en) * | 2007-06-29 | 2010-12-07 | Walter Hoffmann | Method and system for tracking authorship of content in data |
US20090024826A1 (en) * | 2007-07-16 | 2009-01-22 | Ming Zhang | Galois-based incremental hash module |
US8370384B2 (en) * | 2007-09-25 | 2013-02-05 | Canon Kabushiki Kaisha | Information processing apparatus, file management method, program, and storage medium |
US20090150371A1 (en) * | 2007-12-05 | 2009-06-11 | Yahoo! Inc. | Methods and apparatus for computing graph similarity via signature similarity |
US20100010671A1 (en) | 2008-07-14 | 2010-01-14 | Atsushi Miyamoto | Information processing system, information processing method, robot control system, robot control method, and computer program |
US20100070509A1 (en) | 2008-08-15 | 2010-03-18 | Kai Li | System And Method For High-Dimensional Similarity Search |
US20100077015A1 (en) | 2008-09-23 | 2010-03-25 | Kave Eshghi | Generating a Hash Value from a Vector Representing a Data Object |
US20100254615A1 (en) * | 2009-04-02 | 2010-10-07 | Check Point Software Technologies, Ltd. | Methods for document-to-template matching for data-leak prevention |
US20110093426A1 (en) * | 2009-06-26 | 2011-04-21 | Michael Gregory Hoglund | Fuzzy hash algorithm |
US20120016897A1 (en) * | 2010-07-16 | 2012-01-19 | Altruik, Inc. | System and method for improving webpage indexing and optimization |
US20120051657A1 (en) * | 2010-08-30 | 2012-03-01 | Microsoft Corporation | Containment coefficient for identifying textual subsets |
US20120124566A1 (en) * | 2010-11-17 | 2012-05-17 | Federighi Craig M | Shared resource dependencies |
US20120136650A1 (en) * | 2010-11-30 | 2012-05-31 | Microsoft Corporation | Suggesting spelling corrections for personal names |
US20120166942A1 (en) * | 2010-12-22 | 2012-06-28 | Apple Inc. | Using parts-of-speech tagging and named entity recognition for spelling correction |
US20120215853A1 (en) * | 2011-02-17 | 2012-08-23 | Microsoft Corporation | Managing Unwanted Communications Using Template Generation And Fingerprint Comparison Features |
Non-Patent Citations (6)
Title |
---|
Dodds, Reducting Dictionary Size by Using a Hashing Technique, ACM 1982, pp. 368-370. * |
Jain, A Comparison of Hashing Schemes for Address Lookup in Computer Networks, IEEE 1992, pp. 1570-1573. * |
Kann et al., Implementation Aspects and Applications of a Spelling Correction Algorithm, Google 1998, pp. 1-18. * |
Liu et al., Large Scale Hamming Distance Query Processing, IEEE 2011, pp. 553-564. * |
Narayana et al. Near-Duplicate Web Page Detection: A Comparative Study of Two Contrary Approaches, IEEE 2011, pp. 1-8. * |
Pearson, Fast Hashing of Variable-Length Text Strings, ACM 1990, pp. 667-680. * |
Cited By (15)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9448999B2 (en) * | 2011-05-04 | 2016-09-20 | Nhn Corporation | Method and device to detect similar documents |
US20120284270A1 (en) * | 2011-05-04 | 2012-11-08 | Nhn Corporation | Method and device to detect similar documents |
US20150081564A1 (en) * | 2013-09-16 | 2015-03-19 | International Business Machines Corporation | Privacy preserving content analysis |
US20160139819A1 (en) * | 2014-11-18 | 2016-05-19 | Fujitsu Limited | Computer-readable recording medium, encoding device and encoding method |
CN106469097B (en) * | 2016-09-02 | 2019-08-27 | 北京百度网讯科技有限公司 | A kind of method and apparatus for recalling error correction candidate based on artificial intelligence |
CN106469097A (en) * | 2016-09-02 | 2017-03-01 | 北京百度网讯科技有限公司 | A kind of method and apparatus recalling error correction candidate based on artificial intelligence |
US10496706B2 (en) | 2017-04-17 | 2019-12-03 | International Business Machines Corporation | Matching strings in a large relational database |
US11238104B2 (en) | 2017-04-17 | 2022-02-01 | International Business Machines Corporation | Matching strings in a large relational database |
CN109635084A (en) * | 2018-11-30 | 2019-04-16 | 宁波深擎信息科技有限公司 | A kind of real-time quick De-weight method of multi-source data document and system |
CN109670153A (en) * | 2018-12-21 | 2019-04-23 | 北京城市网邻信息技术有限公司 | A kind of determination method, apparatus, storage medium and the terminal of similar model |
CN109670153B (en) * | 2018-12-21 | 2023-11-17 | 北京城市网邻信息技术有限公司 | Method and device for determining similar posts, storage medium and terminal |
CN110297879A (en) * | 2019-05-15 | 2019-10-01 | 平安科技（深圳）有限公司 | A kind of method, apparatus and storage medium of the data deduplication based on big data |
CN110297879B (en) * | 2019-05-15 | 2023-05-30 | 平安科技（深圳）有限公司 | Method, device and storage medium for data deduplication based on big data |
CN111797285A (en) * | 2020-06-30 | 2020-10-20 | 深圳壹账通智能科技有限公司 | Character string fuzzy matching method, device, equipment and readable storage medium |
CN113011194A (en) * | 2021-04-15 | 2021-06-22 | 电子科技大学 | Text similarity calculation method fusing keyword features and multi-granularity semantic features |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8661341B1 (en) | Simhash based spell correction | |
EP3529715B1 (en) | Join with format modification by example | |
TWI454943B (en) | A computer-implemented method and a system for automatic search query correction | |
US8082270B2 (en) | Fuzzy search using progressive relaxation of search terms | |
US10303761B2 (en) | Method, non-transitory computer-readable recording medium storing a program, apparatus, and system for creating similar sentence from original sentences to be translated | |
CN104011712A (en) | Evaluating query translations for cross-language query suggestion | |
US20130339001A1 (en) | Spelling candidate generation | |
US11308286B2 (en) | Method and device for retelling text, server, and storage medium | |
US20090043741A1 (en) | Autocompletion and Automatic Input Method Correction for Partially Entered Search Query | |
US20120330989A1 (en) | Detecting source languages of search queries | |
US9558089B2 (en) | Testing insecure computing environments using random data sets generated from characterizations of real data sets | |
US20160371275A1 (en) | Automated database schema annotation | |
US10691679B2 (en) | Providing query completions based on data tuples | |
US20180203849A1 (en) | Concept Recommendation based on Multilingual User Interaction | |
US9317606B1 (en) | Spell correcting long queries | |
US20190005028A1 (en) | Systems, methods, and computer-readable medium for validation of idiomatic expressions | |
US10032131B2 (en) | Data services for enterprises leveraging search system data assets | |
US20170083513A1 (en) | Method and system of performing a translation | |
US10545958B2 (en) | Language scaling platform for natural language processing systems | |
JP7254925B2 (en) | Transliteration of data records for improved data matching | |
US8971644B1 (en) | System and method for determining an annotation for an image | |
RU2693328C2 (en) | Methods and systems for generating a replacement request for a user input request | |
JP5285491B2 (en) | Information retrieval system, method and program, index creation system, method and program, | |
US7991787B2 (en) | Applying search engine technology to HCM employee searches | |
EP3800562A1 (en) | Methods, apparatus, and computer program products for fuzzy term searching |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE, INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:VAN DIJK, LUUK;REEL/FRAME:025757/0372Effective date: 20110113 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
CC | Certificate of correction | ||
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551)Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044101/0299Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |