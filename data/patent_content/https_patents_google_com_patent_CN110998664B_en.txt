CN110998664B - Calculating representative shapes of polygon groups - Google Patents
Calculating representative shapes of polygon groups Download PDFInfo
- Publication number
- CN110998664B CN110998664B CN201880013484.XA CN201880013484A CN110998664B CN 110998664 B CN110998664 B CN 110998664B CN 201880013484 A CN201880013484 A CN 201880013484A CN 110998664 B CN110998664 B CN 110998664B
- Authority
- CN
- China
- Prior art keywords
- shapes
- shape
- representative
- generated
- representative shape
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T17/00—Three dimensional [3D] modelling, e.g. data description of 3D objects
- G06T17/05—Geographic models
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T11/00—2D [Two Dimensional] image generation
- G06T11/20—Drawing from basic elements, e.g. lines or circles
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/901—Indexing; Data structures therefor; Storage structures
- G06F16/9024—Graphs; Linked lists
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F30/00—Computer-aided design [CAD]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/29—Geographical information databases
Abstract
Techniques for efficiently processing groups of shapes are performed by one or more processors. The technique includes receiving a description of a set of shapes, the description including an indication of a geometry of each shape and an indication of a positioning of the shapes relative to each other; generating a join graph containing each shape in the group to define an ordered list; for each pair of shapes adjacent to each other in the connection graph, generating a respective convex hull surrounding the pair of shapes; generating a representative shape of the set of shapes, the representative shape surrounding each generated convex hull; and operating on the generated representative shape to perform operations related to the shape group.
Description
Technical Field
The present disclosure relates to processing geometric data for various computing applications, and more particularly, to computing a representative shape of a set of polygons.
Background
The background description provided herein is for the purpose of generally presenting the context of the disclosure. Work of the presently named inventors, to the extent it is described in this background section, as well as aspects of the description that may not otherwise qualify as prior art at the time of filing, are neither expressly nor impliedly admitted as prior art against the present disclosure.
Many applications in computer vision, geographic services, games, etc. implement algorithms for characterizing the shape or boundaries of a region, which may be defined by a set of points and/or polygons. In general, the prior art is based on characterizing points and polygons in two and three dimensions using a constraint bag (or alpha shape or representative shape). These techniques include computing power trust, chi shape and other summaries of constraint packages. However, these methods generally do not closely describe the basic compositional geometry of such regions. Although a single minimum area convex hull (convex hull) can be effectively computed for a set of points, the minimum area convex hull is typically not meaningfully representative of the visual "shape" of the set of points. Furthermore, a concave hull (concave hull) construction typically requires careful analysis of the input data to determine the meaningful resolution at which the data should be sampled, as well as defining the allowable concavity level. Depending on the algorithm used, the creation of a visual representation of the concavity may require further adjustment, which further increases the computational cost.
Disclosure of Invention
Using the techniques of this disclosure, the system efficiently and accurately calculates representative shapes of a certain set of geometric shapes, such as polygons. The representative shape includes the set of shapes in a manner that accurately conveys the overall geometry of the set.
More specifically, one embodiment of these techniques is a method performed by one or more processors for efficiently processing a group of shapes. The method includes receiving a description of a set of shapes, the description including an indication of a geometry of each shape and an indication of a positioning of the shapes relative to each other. The method further includes generating a connection graph containing each shape in the group; for each pair of shapes adjacent to each other in the connection graph, generating a respective convex hull surrounding the pair of shapes; and generating a representative shape of the set of shapes, wherein the representative shape encloses each generated convex hull. The method further includes operating on the generated representative shape to perform operations related to the group of shapes (e.g., such as applying a label, selecting a group for highlighting, using the representative shape in image classification, or reconstructing an object from a point cloud).
Another embodiment of these techniques is a system comprising one or more processors and a computer-readable memory storing instructions. The instructions, when executed by the one or more processors, cause the system to receive a description of a set of shapes, the description including an indication of a geometry of each shape and an indication of a positioning of the shapes relative to each other, generate a connection graph containing each shape in the set, generate, for each pair of shapes adjacent to each other in the connection graph, a corresponding convex hull surrounding the pair of shapes, generate a representative shape of the set of shapes, the representative shape surrounding each generated convex hull, and operate on the generated representative shapes to perform operations related to the set of shapes.
Yet another embodiment of these techniques is a non-transitory computer-readable medium storing instructions that implement a method performed by one or more processors for efficiently processing a set of shapes. The method includes receiving a description of a set of shapes, the description including an indication of a geometry of each shape and an indication of a positioning of the shapes relative to each other. The method further includes generating a connection graph containing each shape in the group; for each pair of shapes adjacent to each other in the connection graph, generating a respective convex hull surrounding the pair of shapes; and generating a representative shape of the set of shapes, wherein the representative shape encloses each generated convex hull. The method further includes operating on the generated representative shape to perform operations related to the group of shapes (e.g., such as applying a label, selecting a group for highlighting, using the representative shape in image classification, or reconstructing an object from a point cloud).
Drawings
FIG. 1 is a block diagram of an example computing environment in which the techniques of the present disclosure for computing representative shapes may be implemented;
FIG. 2 is a block diagram of an example geographic system that may be used with geographic features to calculate a representative shape of the presently disclosed technology;
FIG. 3 is a flow chart of an example method for computing a representative shape of a set of polygons;
FIG. 4 is a flow chart of an example method for applying tags to a set of related geographic features using the method of FIG. 3;
FIG. 5A illustrates an example set of polygons in a relative arrangement substantially similar to an arc that the system of FIGS. 1 and 2 may operate.
FIG. 5B illustrates a convex hull generated for the set of polygons of FIG. 5A using known techniques;
FIG. 5C illustrates an example ordering and pairwise convex hulls of the set of polygons of FIG. 5A from which the systems of FIGS. 1 and 2 may generate when computing a representative shape;
FIG. 5D illustrates an example representative shape that the system of FIGS. 1 and 2 may generate using the pairs of convex hulls illustrated in FIG. 5C;
FIG. 6A illustrates an example set of polygons in a relative arrangement generally similar to a ring that the system of FIGS. 1 and 2 may operate.
FIG. 6B illustrates a convex hull generated for the set of polygons of FIG. 6A using known techniques;
FIG. 6C illustrates an example ordering and pairwise convex hull of the set of polygons of FIG. 6A from which the systems of FIGS. 1 and 2 may generate when computing a representative shape;
FIG. 6D illustrates an example representative shape that the system of FIGS. 1 and 2 may generate using the pairs of convex hulls illustrated in FIG. 6C;
FIG. 7A illustrates an example set of polygons in a relative arrangement generally similar to the letter "S" (ess) that the system of FIGS. 1 and 2 may operate.
FIG. 7B illustrates a convex hull generated for the set of polygons of FIG. 7A using known techniques;
FIG. 7C illustrates an example ordering and pairwise convex hull of the set of polygons of FIG. 7A from which the systems of FIGS. 1 and 2 may generate when computing a representative shape;
FIG. 7D illustrates an example representative shape that the system of FIGS. 1 and 2 may generate using the pairs of convex hulls illustrated in FIG. 7C;
FIG. 8A illustrates an example set of polygons in a relative arrangement generally similar to a hook that the system of FIGS. 1 and 2 may operate;
FIG. 8B illustrates a convex hull generated for the set of polygons of FIG. 8A using known techniques;
FIG. 8C illustrates an example ordering and pairwise convex hull of the set of polygons of FIG. 8A from which the systems of FIGS. 1 and 2 may generate when computing a representative shape;
FIG. 8D illustrates an example representative shape that the system of FIGS. 1 and 2 may generate using the pairs of convex hulls illustrated in FIG. 8C;
9A-G illustrate applying a minimum generation method (minimum spanning approach) to a set of polygons to generate a representative shape; and
FIG. 10 illustrates an example digital map of a set of islands and tags whose locations are calculated using the techniques of the present disclosure for calculating representative shapes.
Detailed Description
The present disclosure provides efficient and accurate techniques for constructing representative shapes of a set of polygons and/or points, which may be implemented in one or more computing devices. As discussed in more detail below, techniques may include receiving geometric data specifying polygons and the relative positioning of the polygons, or in some cases, generating polygon data from a set of points. One or more computing devices implementing the techniques may then sort the polygons, traverse the results list, calculate pairs of convex hulls according to the order of traversal, and calculate a union of the pairs of convex hulls (or another suitable grouping of the pairs of convex hulls).
For clarity, the examples discussed below primarily relate to representative shapes that encompass polygons. However, the techniques of this disclosure may also be applied to representative shapes that encompass planar shapes having one or more arcuate sides. Furthermore, these techniques may be applied to 3D representative shapes that encompass three-dimensional (3D) entities.
FIG. 1 illustrates a computing environment 10 in which techniques for constructing representative shapes may be implemented for example applications such as Geographic Information System (GIS) processing, computer vision, computer graphics, computing geometry, reconstructing objects (or other surface reconstruction and region boundary problems) from 3D scan or LIDAR point measurements, collision detection and prediction (as a more specific example, constructing approximate boundaries of complex objects for robotic or augmented reality and/or virtual reality interactions), OCR, and image classification and recognition (e.g., classifying objects by comparing feature shapes).
In computing environment 10, processing system 12 may communicate with various client devices, application servers, web servers, and other devices via a communication network 14. Processing system 12 includes one or more servers or other suitable computing devices. For example, the communication network 14 may be a Wide Area Network (WAN) or a Local Area Network (LAN), and may include wired and/or wireless communication links. The client device 16 may be any suitable portable or non-portable computing device, and the third party server 18 may be any suitable computing device that provides web content, applications, storage, etc. to the various client devices.
The processing system 12 may operate on geometric data stored in a database 20, which database 20 may be implemented in any suitable manner. The geometric data may include a collection of points and/or polygons. The points may be defined using two coordinates (x, y) in two dimensions or three coordinates (x, y, z) in three dimensions. For example, a point cloud may be a collection of data, where each point is specified by three coordinates. In some implementations, the database 20 may store additional data, such as color, z-depth, etc., for each point. A polygon may be defined as a sequence of vertices, two or three dimensions. More generally, the database 20 may store definitions of points and polygons, as well as indications of the relative positioning of points and polygons, in any suitable manner.
The processing system 12 may also receive geometric data from remote or local sources. For example, the third party server 18 may operate on 3D scan data and request the processing system 12 to process a certain data set to determine a representative shape of a set of polygons to determine the boundary of an object. As another example, client device 16 may upload a data set including polygons to processing system 12 and request processing system 12 to calculate a representative shape of the data set for use at client device 16 in an augmented reality application. To this end, a data formatting API for supplying data sets to processing system 12 in a format may be exposed to various devices. A data formatting API may be provided for one or more computing platforms and may include instructions for specifying two-dimensional or three-dimensional data sets that processing system 12 may operate on. In general, a data set describes a set of polygons and/or points, as well as the relative positioning of those polygons and/or points.
As shown in fig. 1, processing system 12 may include one or more processors 30 and memory 32. The one or more processors 30 may include a CPU, GPU, dedicated hardware, etc. Memory 32 may include permanent and non-permanent components of any suitable configuration. These components may be distributed among multiple network nodes, if desired. The memory 32 stores instructions implementing a representative shape generator 34, the representative shape generator 34 being configured to calculate a representative shape.
The functionality of the representative shape generator 34 may also be implemented as a representative shape generation API that various applications executing on the server and/or client devices may call, if desired. For example, client device 16 may store instructions in local memory that implement a representative shape generation API. Image processing, gaming, and other applications executing on the client device 16 may call the representative shape generation API as necessary without having to send data to the processing system 12.
As a more specific example of an implementation of the techniques of this disclosure, fig. 2 illustrates an example geographic system 100 that may calculate representative shapes for various geographic features.
The system 100 includes a map data/navigation server system 102, which server system 102 may include one or more servers at one or more locations. Server system 102 may be communicatively coupled to geographic database 104. In this example, server system 102 accesses geographic database 104 via communication network 108. In other implementations, the geographic database 104 may be integrated with the server system 102. Various client devices, web content servers, etc. may access the server system 102 via the communication network 108.
The example client device 106 includes a user interface 110, one or more processors 112, and memory 114. Memory 114 may include both permanent and non-permanent components. The client device 106 may be a portable device such as a smart phone, a tablet, a wearable device such as a smart watch, a non-portable device such as a desktop computer, or any other suitable type of device.
The geographic application 116 may be stored in the memory 114 as a set of instructions executable by the one or more processors 112. The geographic application 116 may generate an interactive digital map, provide navigation instructions, receive geographic search queries via the user interface 110, and the like.
The geographic database 104 may store map data including two-dimensional descriptions and locations of various geographic features, such as roads, rivers, lakes, islands, buildings, traffic lines, parks, counties, and the like. For example, these definitions may be stored in a vector graphics format supported by client device 106. In some implementations, the map data is divided into tiles (tiles) for efficient assembly into a digital map at the client device 106. The geographic database 104 may also store 3D descriptions of geographic features in the form of interconnected vertices, defined wireframes, and textures to be applied to the wireframes.
In one example scenario, the representative shape generator 120 operates map data stored in the geographic database 104 in a batch mode. The representative shape generator 120 retrieves map data for a set of related features, such as islands of a group of islands, or buildings and various structures associated with a college campus, for example. Each feature is represented by a respective polygon, and the map data retrieved by the representative shape generator 120 includes an indication of the geometry of the polygons and the position of the polygons relative to each other. The representative shape generator 120 generates a representative shape using the techniques of this disclosure and, in one embodiment, stores the generated representative shape in the geographic database 104. At this time or later, the representative shape generator 120 may use these representative shapes to apply labels to the set of relevant geographic features, draw boundaries when generating map tiles and apply shadows to the set of relevant geographic features, and generate a custom representation of the set of relevant geographic features in response to a request from a customer.
In another example scenario, the representative shape generator 120 dynamically calculates the representative shape in response to a particular event. For example, the server system 102 receives an indication that a winter storm warning has been issued for a plurality of counties, which are not necessarily adjacent, and the representative shape generator 120 calculates the designated representative shape of the set of counties to generate map tiles highlighting the representative shape for distribution to the client devices. To this end, the representative shape generator 120 retrieves polygons describing the boundaries of the county from the geographic database 104.
In yet another example scenario, the geographic application 116 displays a digital map of a geographic area via the user interface 110 and the user submits a geographic query, such as a "sandwich location. The geographic application 116 forwards the query to the server system 102, which in turn, the server system 102 identifies a plurality of buildings with sandwich stores within the geographic area shown in the digital map. The representative shape generator 120 retrieves polygons representing the occupied space (footprint) of a building with a sandwich store, and calculates representative shapes of the set of polygons. Server system 102 then provides the representative shape and search results to client device 106. The geographic application 116 may use the representative shape to highlight the geographic area of the sandwich. Thus, similar to the example above, in this case, the representative shape generator 120 operates dynamically in response to a user query.
Similar to the representative shape generator 34 discussed with reference to fig. 1, the functionality of the representative shape generator 120 may be implemented as an API and invoked by the geographic application 116, or simply as a built-in component of the geographic application 116. The server system 102 may provide map data to the client device 106 in a vector graphics format, and the geographic application 116 may determine representative shapes for various sets of map features in response to various user queries, requests, etc., without requesting these representative shapes or new map data from the server system 102.
Referring now to FIG. 3, an example method 200 for computing a representative shape of a set of polygons may be implemented as a set of instructions stored on a computer-readable medium and executable by one or more processors. For example, the method 200 may be implemented in the representative shape generator 34 of fig. 1 or the representative shape generator 120 of fig. 2. Method 200 is discussed below with reference to the diagrams of fig. 5A-8D.
Geometric data is received at block 202 and a set of polygons is determined based on the received geometric data at block 204. The geometric data may correspond to planar objects or 3D entities. In some scenarios, the received geometry data includes an indication of the geometry of a set of polygons and an indication of the relative positions of the polygons, in which case the identification of the polygons at block 204 is unimportant. In other scenarios, the geometric data includes a definition of a set of points rather than a polygon, in which case block 204 may include dividing the set of points into polygons using, for example, a Voronoi diagram or other suitable technique.
Sets of example polygons are shown in fig. 5A, 6A, 7A, and 8A. In particular, FIG. 5A depicts an example polygon group 300 having polygons A-1, B-1, C-1, D-1, and E-1. The relative arrangement of these polygons is substantially similar to an arc. FIG. 6A depicts an example polygon group 350 having polygons A-2, B-2, C-2, D-2, and E-2. These polygons are arranged approximately like a ring. FIG. 7A depicts an example polygon group 400 having polygons A-3, B-3, C-3, D-3, and E-3. The relative arrangement of these polygons is substantially similar to the letter "S". FIG. 8A depicts an example polygon group 450 having polygons A-4, B-4, C-4, D-4, and E-4. The relative arrangement of these polygons is substantially similar to a hook.
Fig. 5B, 6B, 7B, and 8B illustrate convex hulls 310, 360, 410, and 460 generated for the sets of fig. 5A, 6A, 7A, and 8A, respectively. As shown in these figures, convex hulls 310, 360, 410, and 460 do not accurately reflect the basic constituent geometry of the corresponding polygon group.
Referring again to FIG. 3, the flow of method 200 continues to block 206 where the polygon groups are ordered. In general, the method 200 herein determines the order in which each polygon in the set can be "accessed". The order may be such that: each polygon is accessed only once and the path through the set of polygons is shortest. Accordingly, performing block 206 may include performing a suitable algorithm to obtain an acceptable numerical solution to the traveler problem (Traveling Salesman Problem), or more specifically, determining the shortest hamiltonian path (Shortest Hamiltonian Path). One example heuristic that may be used at block 206 is to repeat a nearest neighbor algorithm that generally produces a ranking consistent with the visual ranking. Referring to FIG. 5A, for example, a repeated nearest neighbor algorithm may be applied to a graph that calculates distances between centroids of polygons A-1, B-1, C-1, D-1, and E-1, which in turn may be calculated using any suitable technique, including techniques known in the art. In another embodiment, a repeated nearest neighbor algorithm may be applied to a graph that uses the distance between nearest edges or vertices. Furthermore, as an alternative to repeating nearest neighbor heuristics, a minimum spanning tree (Minimum Spanning Trees) may be used in another embodiment.
For ease of illustration, the ordering generated for the example polygon groups of FIGS. 5A-8D is reflected in the labels used in these figures. In particular, the polygon groups in FIGS. 5A, 6A, 7A, and 8A may be initially received in an unordered form, and execution of block 206 results in ordering the polygon "A-x" before the polygon "B-x", ordering the polygon "B-x" before the polygon "C-x", and so on. Thus, for the polygon group of FIG. 5A, the order is (A-1, B-1, C-1, D-1 and E-1), for the polygon group of FIG. 6A, the order is (A-2, B-2, C-2, D-2 and E-2), etc.
With continued reference to fig. 3, a pair of adjacent polygons is selected from the ordered list at block 208, and overlapping convex hulls are selected for the two adjacent polygons at block 210. The method 200 checks at block 212 whether the list is exhaustive and flow returns to block 208 for another iteration or proceeds to block 214. Ordered list l= (P) for polygons 1 ，P 2 ，P 3 ，……，P N ) In a first instance of execution block 208, a pair (P 1 ，P 2 ) In a second instance of execution block 208, a pair (P 2 ，P 3 ) In a third example of execution block 208, a pair (P 3 ，P 4 ) Etc.
Referring again to the example polygon set of fig. 5A-8D, the pairwise selection and convex hull calculation of blocks 208-212 are shown in fig. 5C, 6C, 7D, and 8D. With specific reference to FIG. 5C, for example, a pair of convex hulls PCH-1 is computed for a first pair of polygons A-1 and B-1, a pair of convex hulls PCH-2 is computed for a second pair of polygons B-1 and C-1, a pair of convex hulls PCH-3 is computed for a third pair of polygons C-1 and D-1, and a pair of convex hulls PCH-4 is computed for a fourth pair of polygons D-1 and E-1.
Referring again to FIG. 3, a composite packet of polygon pairs is determined at block 214. The composite package may be used as a representative shape for the corresponding polygon group. In one embodiment, the composite package is the union of the pairs of convex hulls determined at blocks 208-212.
Referring to fig. 5D, 6D, 7D, and 8D, the application method 200 may generate composite packages 320, 370, 420, and 470 for corresponding polygon groups. As a more specific example, composite package 320 is the union of the pairs of convex hulls PCH-1, PCH-2, PCH-3, and PCH-4. Composite hull 320 is compared to the convex hull of 5B, and composite hulls 370, 420, and 470 are similarly compared to the convex hulls of 5B, 6B, and 7B, more accurately reflecting the underlying constituent geometry of the polygon group in the composite hull generated using method 200 rather than the known techniques.
In some implementations, smoothing techniques may be applied to the composite packet generated at block 214. For example, if the composite packet includes an excessive number of vertices (e.g., exceeding a certain threshold), some vertices may be eliminated by directly connecting the vertices on both sides of the removed vertex with new edges. Additionally or alternatively, for example, the smoothing technique may include applying a base spline function or using a bezier curve.
Next, fig. 4 illustrates an example method 250 for applying labels to a set of related geographic features using the method 200. For example, the method 250 may be implemented in the map data/navigation server 102 or the geographic application 116 of fig. 2. Method 250 is merely an example of applying a representative shape generated in accordance with method 200, and in general, method 200 may be applied in a wide variety of applications.
The method 250 begins at block 252 where map data describing a set of related geographic features is received. Map data may be retrieved from a map database, such as geographic database 104 of fig. 2, received from a third party server or client device, etc. In any event, the map data received at block 252 indicates the geometry of a set of polygons and the relative positioning of those polygons.
At block 254, a representative shape is calculated for the received map data. To this end, the method 200 of fig. 3 may be used.
Next, a label is applied to the generated representative shape at block 256. For example, the longest side of polygon 320 (in this case, the upper side connecting the vertices of polygons B-1 and C-1) may be selected and the label may be located along the longest side. In an embodiment, the positioning of the label relative to the representative shape is also dependent on the length of the label, such that, for example, a shorter label is positioned along the length of the representative shape along the side closer to the label, even though that side is not longest in the representative shape. More generally, the representative shape may be used for label positioning in any suitable manner. As another example, the labels may be superimposed on the representative shape along the central axis of the polygon 320. Another example of label placement selection involves using local curvature/radius to determine the appropriate portion of the boundary of the representative shape to avoid too sharp bending of the label. Other examples of using the generated representative shape include orthogonal offset (expansion/contraction) of the boundaries of the representative shape for label placement, or visual difference of the representative shape from the base geometry boundaries.
More generally, the representative shape may be used at block 256 for any suitable purpose, such as highlighting a polygon group, retrieving information for the entire polygon group, extracting and repositioning the polygon group as a single representative shape with respect to a digital map (e.g., when it is desired to visually compare the overall size of one islands to the overall size of another islands by dragging one island onto another), and so forth.
Another example method of generating a representative shape for a plurality of polygons is discussed with reference to FIGS. 9A-G. The set of polygons 480 shown in fig. 9A may be enclosed within a convex hull 482 generated using conventional techniques (see fig. 9B and 9C). Fig. 9D illustrates an example minimum spanning tree 490 that may be generated by the systems of fig. 1 and 2. Pairs of convex hull sets 492 may be generated using minimum spanning tree 490, as shown in fig. 9E, in a manner substantially similar to that discussed above with reference to fig. 5A-8D. Next, as shown in fig. 9F, a union of groups 492 may be generated. The generated union 494 may be used to generate a representative shape 494.
In general, there are many techniques for generating a connection map of a set of points and/or polygons. The systems of fig. 1 and 2 may use these techniques to organize a set of polygons (or more generally, a set of shapes) for computing a pair of convex hulls.
Fig. 10 shows an example digital map 500 of hawaii, which is obviously an island chain, and a corresponding text label 510. The map data/navigation server system 102 can determine the location of the tag 510 relative to the island using the methods 200 and 250 discussed above. The positioning of the tag 510 clearly conveys to the user the basic geometry of the islands of hawaii being viewed together.
Other considerations
The following additional considerations apply to the discussion above. Throughout this specification, multiple instances may implement a component, operation, or structure described as a single instance. Although individual operations of one or more methods are illustrated and described as separate operations, one or more individual operations may occur simultaneously and are not required to be performed in the order illustrated. Structures and functions presented as separate components in the example configuration may be implemented as a combined structure or component. Similarly, structures and functions presented as a single component may be implemented as separate components. These and other variations, modifications, additions, and improvements may fall within the scope of the subject matter herein.
Certain embodiments are described herein as comprising logic or several components, modules, or mechanisms. A module may constitute a software module (e.g., code embodied on a machine readable medium or in a transmitted signal) or a hardware module. A hardware module is a tangible unit capable of certain operations and may be configured or arranged in some way. In example embodiments, one or more computer systems (e.g., a standalone computer system, a client computer system, or a server computer system) or one or more hardware modules of a computer system (e.g., a processor or a group of processors) may be configured by software (e.g., an application or application portion) as a hardware module that operates to perform certain operations described herein.
Unless specifically stated otherwise, discussions utilizing terms such as "processing," "computing," "calculating," "determining," "presenting," "displaying," or the like, herein may refer to an action or process of a machine (e.g., a computer) that manipulates and transforms data represented as physical (e.g., electronic, magnetic, or optical) quantities within the memories (e.g., volatile memories, non-volatile memories or combinations thereof) registers or other machine components that receive, store, communicate or display information.
As used herein, any reference to "one embodiment" or "an embodiment" means that a particular element, feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase "in one embodiment" in various places in the specification are not necessarily all referring to the same embodiment.
Some embodiments may be described using the expression "coupled" and "connected" along with their derivatives. For example, some embodiments may be described using the term "coupled" to indicate that two or more elements are in direct physical or electrical contact. The term "coupled," however, may also mean that two or more elements are not in direct contact with each other, but yet still co-operate or interact with each other. The embodiments are not limited to this scenario.
As used herein, the terms "comprises," "comprising," "includes," "including," "having," "has," "with" or any other variation thereof, are intended to cover a non-exclusive inclusion. For example, a process, method, article, or apparatus that comprises a list of elements is not necessarily limited to only those elements but may include other elements not expressly listed or inherent to such process, method, article, or apparatus. Furthermore, unless explicitly stated to the contrary, "or" refers to an inclusive or, and not an exclusive or. For example, the condition a or B satisfies any one of the following: a is true (or present) and B is false (or not present), a is false (or not present) and B is true (or present), and a and B are both true (or present).
In addition, the use of "a" or "an" is used to describe elements and components of embodiments herein. This is merely for convenience and to give a general sense of the various embodiments. Unless clearly indicated otherwise, this description should be understood as including one or at least one, and the singular also includes the plural.
Upon reading this disclosure, those of ordinary skill in the art will understand additional alternative structural and functional designs for computing a representative shape of a set of polygons by the principles disclosed herein. Thus, while particular embodiments and applications have been shown and described, it is to be understood that the disclosed embodiments are not limited to the precise construction and components disclosed herein. Various modifications, changes and variations apparent to those skilled in the art may be made in the arrangement, operation and details of the methods and apparatus disclosed herein without departing from the spirit and scope defined in the appended claims.
Claims (16)
1. A computer-implemented method for efficiently processing a group of shapes, the method comprising:
receiving, by one or more processors, a description of a set of shapes, the description including an indication of a geometry of each of the shapes and an indication of a positioning of the shapes relative to each other;
generating, by the one or more processors, a connection graph containing each shape in the set of shapes, determining a shortest path that traverses each shape in the set of shapes exactly once;
for each pair of shapes in the connection graph that are adjacent to each other, generating, by the one or more processors, a respective convex hull that surrounds the pair of shapes;
generating, by the one or more processors, a representative shape of the set of shapes, the representative shape surrounding each of the generated convex hulls; and
the generated representative shape is operated on by the one or more processors to perform operations related to the shape group.
2. The computer-implemented method of claim 1, wherein determining the shortest path comprises using a nearest neighbor algorithm.
3. The computer-implemented method of claim 1, wherein determining the shortest path comprises determining a distance between centroids of the shapes.
4. The computer-implemented method of claim 1, further comprising computing a minimum spanning tree for the set of shapes.
5. The computer-implemented method of claim 1, wherein generating the representative shape of the set of shapes comprises determining a union of the generated convex hulls.
6. The computer-implemented method of claim 1, wherein each shape in the set of shapes is a polygon representing a geographic feature on a digital map.
7. The computer-implemented method of claim 6, wherein operating on the generated representative shape comprises determining, by the one or more processors, a location of a tag relative to the generated representative shape, wherein the tag refers to an entire polygon group.
8. A system, comprising:
one or more processors; and
a non-transitory computer-readable memory storing instructions that, when executed by the one or more processors, cause the system to:
receiving a description of a set of shapes, the description including an indication of the geometry of each of the shapes and an indication of the positioning of the shapes relative to each other,
generating a connection graph containing each shape in the shape group, and determining a shortest path traversing each shape in the shape group exactly once;
for each pair of shapes in the connection graph that are adjacent to each other, a respective convex hull is generated that encloses the pair of shapes,
generating a representative shape of said set of shapes, said representative shape surrounding each of said generated convex hulls, and
the generated representative shape is manipulated to perform operations related to the shape group.
9. The system of claim 8, wherein to generate the representative shape of the set of shapes, the instructions cause the system to determine a union of the generated convex hulls.
10. The system of claim 8, wherein each shape in the set of shapes is a polygon representing a geographic feature on a digital map.
11. The system of claim 10, wherein the instructions further cause the system to determine a label relative to the generated representative shape, wherein the label refers to an entire polygon group.
12. A non-transitory computer-readable medium storing instructions that, when executed by one or more processors, cause the processors to perform a method comprising:
receiving a description of a set of shapes, the description including an indication of the geometry of each of the shapes and an indication of the positioning of the shapes relative to each other;
generating a connection graph containing each shape in the shape group, and determining a shortest path traversing each shape in the shape group exactly once;
for each pair of shapes adjacent to each other in the connection graph, generating a respective convex hull surrounding the pair of shapes;
generating a representative shape of the set of shapes, the representative shape surrounding each of the generated convex hulls; and
the generated representative shape is manipulated to perform operations related to the shape group.
13. The non-transitory computer-readable medium of claim 12, wherein determining the shortest path comprises using a nearest neighbor algorithm.
14. The non-transitory computer-readable medium of claim 12, wherein the method further comprises calculating a minimum spanning tree.
15. The non-transitory computer-readable medium of claim 12, wherein determining the shortest path comprises determining a distance between centroids of the shapes.
16. The non-transitory computer-readable medium of claim 12, wherein generating the representative shape of the set of shapes comprises determining a union of the generated convex hulls.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/689,403 US10460514B2 (en) | 2017-08-29 | 2017-08-29 | Computing representative shapes for polygon sets |
US15/689,403 | 2017-08-29 | ||
PCT/US2018/033178 WO2019045804A1 (en) | 2017-08-29 | 2018-05-17 | Computing representative shapes for polygon sets |
Publications (2)
Publication Number | Publication Date |
---|---|
CN110998664A CN110998664A (en) | 2020-04-10 |
CN110998664B true CN110998664B (en) | 2023-08-25 |
Family
ID=62636268
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201880013484.XA Active CN110998664B (en) | 2017-08-29 | 2018-05-17 | Calculating representative shapes of polygon groups |
Country Status (4)
Country | Link |
---|---|
US (1) | US10460514B2 (en) |
EP (1) | EP3488422B1 (en) |
CN (1) | CN110998664B (en) |
WO (1) | WO2019045804A1 (en) |
Families Citing this family (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10789667B2 (en) * | 2017-06-15 | 2020-09-29 | Treatstock Inc. | Method and apparatus for digital watermarking of three dimensional object |
EP3561726A1 (en) * | 2018-04-23 | 2019-10-30 | Aptiv Technologies Limited | A device and a method for processing data sequences using a convolutional neural network |
JP7252729B2 (en) * | 2018-10-18 | 2023-04-05 | キヤノン株式会社 | Image processing device, image processing method |
US10931929B2 (en) * | 2018-12-07 | 2021-02-23 | Xyken, LLC | Method and system of discriminative recovery of three-dimensional digital data of a target of interest in a cluttered or controlled environment |
US11536842B2 (en) * | 2019-10-22 | 2022-12-27 | At&T Intellectual Property I, L.P. | Constructing compact three-dimensional building models |
CN112070165A (en) * | 2020-09-09 | 2020-12-11 | 深圳市城市规划设计研究院有限公司 | Hamiltonian path fast solving method based on triangular expansion |
Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN104599304A (en) * | 2009-12-23 | 2015-05-06 | 英特尔公司 | Image processing technology |
Family Cites Families (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6665840B1 (en) | 1999-03-02 | 2003-12-16 | Microsoft Corporation | System and method for run time generation of potential label positions |
KR100513735B1 (en) * | 2002-12-05 | 2005-09-08 | 삼성전자주식회사 | Method of perceptual 3D shape description and method and apparatus for searching 3D graphics model database using the same |
US7187378B2 (en) * | 2003-05-14 | 2007-03-06 | Microsoft Corp. | Determining the convex hull of convex polygons with congruent corresponding angles |
US8218910B2 (en) * | 2008-08-25 | 2012-07-10 | Siemens Aktiengesellschaft | 3D ball skinning using partial differential equations for generation of smooth tubular surfaces |
US8655708B2 (en) * | 2008-12-19 | 2014-02-18 | The Toronto Dominion Bank | Systems and methods for generating and using trade areas associated with business branches based on correlated demographics |
US20130328882A1 (en) * | 2012-06-08 | 2013-12-12 | Apple Inc. | Named Area Generation |
US9245366B1 (en) | 2014-01-03 | 2016-01-26 | Amazon Technologies, Inc. | Label placement for complex geographic polygons |
US9436906B2 (en) * | 2014-05-09 | 2016-09-06 | Sap Se | Discovering user-behavior from trajectory-as-polygon (TaP) |
-
2017
- 2017-08-29 US US15/689,403 patent/US10460514B2/en active Active
-
2018
- 2018-05-17 WO PCT/US2018/033178 patent/WO2019045804A1/en unknown
- 2018-05-17 EP EP18732189.8A patent/EP3488422B1/en active Active
- 2018-05-17 CN CN201880013484.XA patent/CN110998664B/en active Active
Patent Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN104599304A (en) * | 2009-12-23 | 2015-05-06 | 英特尔公司 | Image processing technology |
Also Published As
Publication number | Publication date |
---|---|
EP3488422B1 (en) | 2023-08-09 |
US10460514B2 (en) | 2019-10-29 |
CN110998664A (en) | 2020-04-10 |
US20190066372A1 (en) | 2019-02-28 |
WO2019045804A1 (en) | 2019-03-07 |
EP3488422A1 (en) | 2019-05-29 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN110998664B (en) | Calculating representative shapes of polygon groups | |
Lin et al. | Line segment extraction for large scale unorganized point clouds | |
US9417777B2 (en) | Enabling quick display transitions between indoor and outdoor map data | |
EP2954468B1 (en) | Providing indoor facility information on a digital map | |
US9881590B2 (en) | Method and apparatus for multi-resolution point of interest boundary identification in digital map rendering | |
Semmo et al. | Cartography-oriented design of 3D geospatial information visualization–overview and techniques | |
US10445772B1 (en) | Label placement based on objects in photographic images | |
Chao et al. | Parallel algorithm for viewshed analysis on a modern GPU | |
WO2019047524A1 (en) | Information processing method and apparatus | |
CN110502985A (en) | Table recognition method, apparatus and Table recognition equipment | |
US10970458B1 (en) | Logical grouping of exported text blocks | |
CN110926478B (en) | AR navigation route deviation rectifying method and system and computer readable storage medium | |
CN111459269A (en) | Augmented reality display method, system and computer readable storage medium | |
Mustafa et al. | Dynamic simplification and visualization of large maps | |
Ravanbakhsh et al. | Road junction extraction from high‐resolution aerial imagery | |
CN111583381A (en) | Rendering method and device of game resource map and electronic equipment | |
US10067950B1 (en) | Systems and methods for efficiently organizing map styling information | |
Caradonna et al. | Multi-image 3D reconstruction: a photogrammetric and structure from motion comparative analysis | |
Cavallo | 3d city reconstruction from google street view | |
Carneiro et al. | Digital urban morphometrics: automatic extraction and assessment of morphological properties of buildings | |
US6041138A (en) | Method and device for extracting features from gray-scale image and generating boundaries of document elements | |
JP2006227111A (en) | Rough map preparion device | |
US9911205B1 (en) | Visual continuity for arbitrary length stipple patterns | |
Chen et al. | Adaptive multi-resolution labeling in virtual landscapes | |
KR20130101332A (en) | Conversion system and method for 3d object represented by triangle mesh to 3d object represented by dosurface |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
GR01 | Patent grant | ||
GR01 | Patent grant |