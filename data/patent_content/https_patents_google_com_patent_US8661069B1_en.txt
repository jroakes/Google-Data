US8661069B1 - Predictive-based clustering with representative redirect targets - Google Patents
Predictive-based clustering with representative redirect targets Download PDFInfo
- Publication number
- US8661069B1 US8661069B1 US12/059,637 US5963708A US8661069B1 US 8661069 B1 US8661069 B1 US 8661069B1 US 5963708 A US5963708 A US 5963708A US 8661069 B1 US8661069 B1 US 8661069B1
- Authority
- US
- United States
- Prior art keywords
- document
- documents
- representative
- redirect
- target
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
- 238000000034 method Methods 0.000 claims abstract description 119
- 230000004044 response Effects 0.000 claims description 4
- 230000001052 transient effect Effects 0.000 claims 4
- 230000008569 process Effects 0.000 description 75
- 238000010586 diagram Methods 0.000 description 16
- 241000239290 Araneae Species 0.000 description 9
- 238000004891 communication Methods 0.000 description 5
- 238000001514 detection method Methods 0.000 description 3
- HFHZKZSRXITVMK-UHFFFAOYSA-N oxyphenbutazone Chemical compound O=C1C(CCCC)C(=O)N(C=2C=CC=CC=2)N1C1=CC=C(O)C=C1 HFHZKZSRXITVMK-UHFFFAOYSA-N 0.000 description 3
- 238000012545 processing Methods 0.000 description 3
- 230000007246 mechanism Effects 0.000 description 2
- 230000003068 static effect Effects 0.000 description 2
- 230000006399 behavior Effects 0.000 description 1
- 230000009286 beneficial effect Effects 0.000 description 1
- 230000015572 biosynthetic process Effects 0.000 description 1
- 230000001413 cellular effect Effects 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 230000000593 degrading effect Effects 0.000 description 1
- 230000001419 dependent effect Effects 0.000 description 1
- 239000000835 fiber Substances 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 230000003287 optical effect Effects 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/951—Indexing; Web crawling techniques
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/35—Clustering; Classification
- G06F16/355—Class or cluster creation or modification
Definitions
- Crawler-based search engines may employ various algorithms to identify documents on the World Wide Web (“web”) relevant to search terms contained in a user's query.
- a crawler-based search engine will include a crawler, an indexer and a search engine.
- the crawler is a software tool that searches the web for content (e.g., documents) to deliver to the indexer.
- the crawler may be provided with a seed list of addresses (e.g., Uniform Resource Locators (URLs) or some other form of Uniform Resource Identifier (URI)).
- URLs Uniform Resource Locators
- URI Uniform Resource Identifier
- the crawler may visit a document corresponding to an address in the seed list and/or reference a robots.txt file (e.g., on a web site) that provides the crawler with a list of documents that are inaccessible. As the crawler accesses a document, the crawler may, among other things, extract outgoing links (e.g., hyperlinks) to other documents that are associated with the visited document. These outgoing links or addresses may be added to the seed list. The process of visiting documents may be repeated until the crawler decides to stop. The crawler may periodically return to these addresses so that if changes have been made to these documents, the indexer may be updated.
- outgoing links e.g., hyperlinks
- the indexer may create an index of the documents accessed by the crawler. For example, the indexer may catalog and maintain a copy of every document that the crawler discovers and/or a location of or a pointer to the document (e.g., a URL). The indexing process may be performed on a single device or on multiple devices.
- the search engine may sort through the information in the indexer and present the user with the most relevant results in a particular order (e.g., a descending order of relevance).
- indexing duplicate documents wastes resources (e.g., memory, processing, etc.).
- various clustering processes may be employed to determine the most relevant documents to be indexed.
- the indexer can select a single document from the cluster to serve as the canonical document for indexing.
- the clustering processes employed may affect the quality of the documents selectable by the indexer and presented as a search result to a user.
- an automated method may include clustering documents into a plurality of clusters, selecting a representative document, respectively, for two of the plurality of clusters, determining a final redirect target document for each of the representative documents in the two of the plurality of clusters, determining whether the final redirect target documents are duplicate documents of each other, and re-clustering the two of the plurality of clusters together if it is determined that the final redirect target documents are duplicate documents.
- a system may include a memory and a processor connected to the memory.
- the processor may be configured to form documents into a plurality of clusters, determine a measure of quality for each of the documents, select a representative document, respectively, for two of the plurality of clusters, based on the measure of quality, determine a final target document for each of the representative documents, determine addresses associated with the final target documents, determine whether the final target documents are duplicate documents based on the addresses of the final target documents, and combine the final target documents and the two of the plurality of clusters into a combined single cluster, if it is determined that the final target documents are duplicate documents.
- a computer-readable medium may contain instructions executable by at least one processor of a device.
- the computer-readable medium may include one or more instructions for collecting documents, one or more instructions for selecting a representative document, respectively, for two of the plurality of clusters, one or more instructions for determining a final target document for each of the representative documents, one or more instructions for determining whether the final target documents are duplicate documents based on a predictive-based clustering technique, and one or more instructions for re-clustering the two of the plurality of clusters with the final target documents into a single cluster, if it is determined that the final target documents are duplicate documents.
- a system may include means for forming documents into a clusters, means for selecting a representative document, respectively, from two of the clusters, means for identifying redirect information associated with the representative documents, means for determining a final target document for each of the representative documents, means for determining whether the final target documents are duplicate documents, and means for forming the two clusters and the final target documents into a unified cluster if it is determined that the final target documents are duplicate documents.
- FIGS. 1A and 1B are diagrams illustrating concepts described herein;
- FIG. 2 is a diagram illustrating an exemplary network in which systems and methods described herein may be implemented
- FIG. 3 is a diagram illustrating exemplary components of the crawler/indexer system depicted in FIG. 2 ;
- FIG. 4 is a diagram illustrating exemplary functional components of the crawler/indexer system depicted in FIG. 2 ;
- FIG. 5 is a diagram illustrating exemplary functional components of the crawler engine depicted in FIG. 4 ;
- FIG. 6 is a diagram illustrating exemplary functional components of the indexing engine depicted in FIG. 4 ;
- FIGS. 7A and 7B are flow diagrams illustrating an exemplary process for determining clusters and representatives.
- FIGS. 8-15 are diagrams illustrating exemplary operations associated with the exemplary process depicted in FIGS. 7A and 7B .
- a “document,” as the term is used herein, is to be broadly interpreted to include any machine-readable and machine-storable work product.
- a document may include, for example, an e-mail, content on a web site, a file, a combination of files, one or more files with embedded links to other files, a news group posting, a blog, a business listing, an electronic version of printed text, a web advertisement, an image, a database record, a dynamically generated document, etc.
- a common form of a “document” is a web page. Web pages often include textual information and may include embedded information (e.g., metadata, images, or hyperlinks) and/or embedded instructions (e.g., JavaScript).
- quality information may include link information (e.g., a link-based score, a number of links to/from a document, a position of a link within a document, etc.), a date a document is created, a page (or document) rank, anchor text information, an aesthetic value of an address (e.g., a short and/or a word-based URL may have a higher aesthetic value than a long and/or a non-word based URL containing, for example, symbols, such as ?, !, ⁇ , *, etc.), a measure of popularity, information regarding a source of content in the document (e.g., quality of web site that includes the document (e.g., a web site associated with a top-ranked university versus a web site associated with an unknown
- duplicate documents i.e., documents with the same or substantially the same content
- resources e.g., processing, storage, and/or network resources
- One technique described herein may select one duplicate document, as a “canonical” of a cluster of duplicative documents, to index. This canonical document may then be indexed and/or served as a part of the search results.
- Implementations described herein may form clusters of documents and select representative documents from the clusters. This process may be iterated multiple times utilizing different criteria for clustering and/or selecting representative documents in each iteration. The formation of clusters and selection of representative documents may be improved by identifying duplicative relationships.
- FIGS. 1A and 1B are diagrams illustrating this concept.
- a collection of documents “A,” “B,” “C,” “D,” “E,” and “F” may be subject to a clustering process 105 .
- clusters 110 and cluster 115 may be formed.
- Cluster 110 may include documents “A,” “B,” and “C”
- cluster 115 may include documents “D,” “E,” and “F.”
- the documents in each of the respective clusters are considered as having the same or substantially the same content based on one or more criteria associated with clustering process 105 .
- a representative document selection process 120 may be performed in which at least one document may be selected as a representative of the cluster. For example, as illustrated, document “B” may be selected as the representative (as indicated by “REP”) for cluster 110 , and document “E” may be selected as the representative (as indicated by “REP”) for cluster 115 .
- additional clustering processes may be employed based on one or more criteria that may be different than a previous clustering process.
- redirect information associated with document “B” and document “E” may be utilized to determine target documents.
- the target documents may provide a basis for the additional clustering processes. In this regard, it may be beneficial to determine whether respective target documents are duplicative documents.
- FIG. 1B is a diagram illustrating a subsequent clustering process 125 employing the concepts described herein.
- documents “B” and “E” may be selected as representatives of clusters 105 and 110 , respectively.
- clustering process 125 may determine that documents “G” and “H” are target documents associated with documents “B” and “E,” respectively, based on redirect information.
- a duplicate detection process 130 may also determine whether documents “G” and “H” are duplicate documents based on the addresses (e.g., URLs) associated with documents “G” and “H.” It will be appreciated that documents “G” and “H” may have different addresses, but documents “G” and “H” may contain the same, or substantially the same, content.
- duplicate detection process 130 may determine that documents “G” and “H” are duplicate documents.
- clustering process 125 may form a cluster 135 that includes documents “A,” “B,” “C,” “D,” “E,” “F,” “G,” and “H.” It will be appreciated that if duplicate detection process 130 was not employed, clustering process 125 may have unnecessarily formed two clusters based on documents “G” and “H” (e.g., one cluster including document “G” and another cluster including document “H”).
- the iterative forming of clusters to determine relevant documents to be served in a search result may be significantly improved. More particularly, identifying duplicate documents during the clustering process may significantly improve the quality of documents that may be indexed and presented to a user as a search result.
- FIG. 2 is a diagram illustrating an exemplary environment 200 in which systems and methods described herein may be implemented.
- environment 200 may include multiple document hosts 210 connected to a crawler/indexer system 220 via a network 230 .
- the number of document hosts 210 , crawler/indexer system 220 , and/or network 230 may be different, as well as the arrangement. Further, one or more document hosts 210 and crawler indexer system 220 may be the same device.
- Document hosts 210 may include entities that store and/or manage documents.
- An entity may be defined, for example, as a device (e.g., a computer, a personal digital assistant (PDA), a telephone, etc.), a process running on a device (e.g., a program, a thread, a fiber), and/or an object executable by a device.
- a device e.g., a computer, a personal digital assistant (PDA), a telephone, etc.
- PDA personal digital assistant
- process running on a device e.g., a program, a thread, a fiber
- an object executable by a device e.g., a device that stores documents.
- Crawler/indexer system 220 may include an entity that crawls, processes, indexes and/or maintains documents.
- crawler/indexer system 220 may crawl a corpus of documents, index the documents, and/or store information associated with the documents in a repository of documents.
- Crawler/indexer system 220 may be employed as a single entity or as distributed entities.
- Network 230 may include, for example, a local area network (LAN), a wide area network (WAN), a telephone network, such as the Public Switched Telephone Network (PSTN) or a cellular network, an intranet, the Internet, and/or a combination of networks.
- Document hosts 210 and crawler/indexer system 220 may connect to network 230 via wired and/or wireless connections. The connections may either be direct or indirect connections.
- FIG. 3 is a diagram illustrating exemplary components of crawler/indexer system 220 .
- crawler/indexer system 220 may include a bus 310 , a processor 320 , a main memory 330 , a read only memory (ROM) 340 , a storage device 350 , an input device 360 , an output device 370 , and a communication interface 380 .
- the term “component,” as used herein, is intended to be broadly interpreted to include software, hardware, or a combination of hardware and software.
- Bus 310 may include a path that permits communication among the components of crawler/indexer system 220 .
- Processor 320 may include a processor, microprocessor, or processing logic that may interpret and execute instructions.
- Main memory 330 may include a random access memory (RAM) or another type of dynamic storage device that may store information and/or instructions for execution by processor 320 .
- ROM 340 may include a ROM device or another type of static storage device that may store static information and/or instructions for execution by processor 320 .
- Storage device 350 may include a magnetic and/or an optical recording medium and its corresponding drive.
- Input device 360 may include a component that permits an operator to input information to crawler/indexer system 220 , such as a keyboard, a mouse, a pen, voice recognition and/or biometric mechanisms, etc.
- Output device 370 may include a component that outputs information to an operator, including a display, a printer, a speaker, etc.
- Communication interface 380 may include any transceiver-like mechanism that enables crawler/indexer system 220 to communicate with other devices and/or systems.
- communication interface 380 may include components for communicating with another device or system via a network, such as network 230 .
- Crawler/indexer system 220 may perform certain operations, as will be described in detail below, in response to processor 320 executing software instructions contained in a computer-readable medium, such as memory 330 .
- a computer-readable medium may be defined as a physical or a logical memory device.
- the software instructions may be read into memory 330 from another computer-readable medium, such as storage device 350 , or from another device via communication interface 380 .
- the software instructions contained in memory 330 may cause processor 320 to perform processes that will be described later.
- hardwired circuitry may be used in place of or in combination with software instructions to implement processes as described herein.
- implementations as described herein are not limited to any specific combination of hardware circuitry and software.
- FIG. 4 is a diagram illustrating exemplary functional components of crawler/indexer system 220 .
- crawler/indexer system 220 may include a crawler engine 410 , an indexing engine 420 connected to a database 430 . While FIG. 4 illustrates these functional components within crawler/indexer system 220 , in other implementations, crawler engine 410 , indexing engine 420 , and/or database 430 may be implemented partially or wholly within another device or a group of devices, including or excluding, crawler/indexer system 220 .
- Crawler engine 410 may operate from a list of addresses to fetch the corresponding documents from a corpus of documents (e.g., the web). Crawler engine 410 may extract the addresses associated with the outgoing links in the document and add the addresses to the list of addresses to be crawled. Crawler engine 410 may also store information associated with the document, such as all or part of the document, including quality information, in database 430 .
- Indexing engine 420 may process documents provided by crawler engine 410 . For example, indexing engine 420 may create an index of the documents and store the index in database 430 . Indexing engine 420 may form clusters of duplicate documents. Indexing engine 420 may also select a representative document from each cluster. Indexing engine 420 may perform these operations iteratively.
- Database 430 may be embodied within a single memory device, within multiple (possibly distributed) memory devices, and/or within a single or multiple storage devices.
- Database 430 may store various types of information, such as a list of addresses used by crawler engine 410 , information associated with documents crawled by crawler engine 410 , and/or an index generated by indexing engine 420 .
- FIG. 5 is a diagram illustrating exemplary functional components of crawler engine 410 .
- crawler engine 410 may include spiders 510 and a content manager 520 . While FIG. 5 illustrates these functional components within crawler/indexer system 220 , in other implementations, spiders 510 and/or content manager 520 may be implemented partially or wholly within another device or a group of devices, including or excluding, crawler/indexer system 220 .
- a spider 510 may access a document from a corpus of documents and provide the document to a content manager 520 .
- spider 510 may refer to, for example, a robots.txt file.
- Spiders 510 may operate from a list of addresses provided by content manager 520 .
- Spiders 510 may re-visit documents from the corpus for updates or changing information based on re-visit policies (e.g., refresh policies, politeness policies, load on a given host, rate limits, etc.).
- documents may be re-visited at different times and/or frequencies.
- Content manager 520 may parse a document crawled by a spider 510 to identify, among other things, outgoing links that the document contains. Content manager 520 may add addresses associated with the outgoing links to a list of addresses that it maintains. Content manger 520 may provide addresses from the list to spiders 510 as instructions for spiders 510 to crawl the corresponding documents. Content manager 520 may also store the information associated with the documents (e.g., all or a part thereof), including quality information, in database 430 .
- FIG. 6 is a diagram illustrating exemplary functional components of indexing engine 420 .
- indexing engine 420 may include a duplicate detector 610 , a representative selector 620 , and an indexer 630 . While FIG. 6 illustrates these functional components within crawler/indexer system 220 , in other implementations, duplicate detector 610 , representative selector 620 , and/or indexer 630 may be implemented partially or wholly within another device or a group of devices, including or excluding, crawler/indexer system 220 .
- Duplicate detector 610 may include one or more clustering algorithms or decision processes for determining whether two documents are duplicates (including substantial duplicates) of each other. These clustering algorithms or decision processes may employ one or more criteria to cluster (i.e., group) documents. In general, the criteria for determining duplicate documents may include content-based clustering and/or predictive clustering.
- Content-based clustering may require analysis of the contents of the documents.
- duplicate detector 610 may compute a checksum or a hash over the content or a portion of the content of a document. In this instance, two documents that share the same checksum value (or checksum ID) may be considered duplicates of each other.
- Redirection is a technique for making a document available under more than one address (e.g., URL).
- a redirect causes a browser to change from a source address to a target address.
- status code redirects e.g., Hypertext Transfer Protocol (HTTP) status codes 301 or 302
- meta refresh redirects e.g., Hypertext Transfer Protocol (HTTP) status codes 301 or 302
- JavaScript redirects e.g., Hypertext Transfer Protocol (HTTP) status codes 301 or 302
- HTML Hypertext Transfer Protocol
- JavaScript redirects e.g., JavaScript redirects.
- a source document redirects to a target document then the source document and the target document may be considered duplicates of each other, may be clustered together, and may share the same target ID.
- a target document may have multiple sources (i.e., multiple source documents may redirect to the same target document). For example, document “A” may redirect to document “C,” and document “B” may redirect to document “C.”
- the target document may correspond to a final target document. That is, a concatenation of redirects may include an intermediary target document, which may not constitute a final target document.
- document “A” (a source document) may redirect to document “B,” which in turn may redirect to document “C.”
- document “B” may be considered the intermediary target document (or a source document), while document “C” may be considered the final target document.
- a document may not be associated with a source document and may not be considered a (final) target document.
- document “A” may not have another document (e.g., a source document) that redirects to document “A.”
- document “A” may be considered a content document, but not a (final) target document.
- a final target document and a content document may be distinguished based on a presence or an absence of a source document.
- Predictive-based clustering may identify duplicate documents without analyzing the contents of the documents. For example, predictive-based clustering may involve computing checksums or hashes over documents of a web site, a directory, a subdirectory, or a combination of address parameters, and generating a set of rules that given an address, assigns a predictive identifier (ID) for the document associated with the address. The predictive ID may then be utilized to determine whether two documents are duplicates. Additionally, or alternatively, other sets of rules may be generated for a web site, a directory, a sub-directory, or an address parameter combination. In some cases, these rules may include a list of address prefixes that have been determined as being equivalents of each other.
- An example of this may include a rule that specifies that www.mysite.com and www.planetearth.com/mysite are equivalents of each other.
- address pairs such as www.mysite.com/document and www.planetearth.com/mysite/document, or www.mysite.com/index and www.planetearth.com/mysite/index, etc., may be mapped to the same predictive ID, respectively.
- the rules may specify that a portion of an address is unimportant, and may be ignored when considering whether two addresses are equivalent.
- a rule may specify that a session identifier within an address does not matter.
- duplicate detector 610 may assign each document with the same predictive ID.
- duplicate detector 610 may determine whether the document belongs to an existing cluster or forms a new cluster.
- a cluster may include one document, thousands of documents, or millions of documents, sharing the same key.
- Duplicate detector 610 may store information regarding a cluster to which a document belongs in, for example, database 430 .
- Representative selector 620 may process each cluster in a set of clusters to select a representative document. For example, representative selector 620 may rank the documents in a cluster in some manner to create a ranked list. In one implementation, representative selector 620 may utilize information that reflects a measure of quality of the documents to rank the documents. For example, representative selector 620 may utilize quality information as a measure of quality and/or some other type of information as a measure of quality. Representative selector 620 may store information associated with representatives in, for example, database 430 . The information stored may include quality information.
- Indexer 630 may index one or more top-ranked documents (referred to as “canonicals”) from each of the ranked lists. For example, indexer 630 may take the text or other data of a top-ranked document in a ranked list, extract individual terms or other data from the text of the document, and sort those terms or other data (e.g., alphabetically) in an index. Other techniques for extracting and indexing content, that are more than simple word-level indexing, may also or alternatively be used, including techniques for indexing Extensible Markup Language (XML) data, images, videos, etc. Each entity in the index may contain a term or other data stored in association with a list of documents in which the term or other data appears and the location within the document where the term or other data appears.
- XML Extensible Markup Language
- FIGS. 7A and 7B are flowcharts illustrating an exemplary process 700 for determining clusters and representatives.
- process 700 may be performed by indexing engine 420 .
- process 700 may be performed wholly or partially by one or more other components, including or excluding, indexing engine 420 .
- process 700 may begin with identifying documents to be clustered (block 705 ).
- indexing engine 420 may index information stored in a repository (e.g., database 430 ). In such an instance, indexing engine 420 may identify documents to be clustered. In other instances, indexing engine 420 may identify documents to be clustered for other reasons.
- documents 800 (“A,” “B,”, “C,” “D,” “E,” and “F”) correspond to a subset of the identified documents to be clustered, as illustrated in FIG. 8 .
- Quality information 805 , 810 , 815 , 820 , 825 and 830 may be associated with documents “A,” “B,” “C,” “D,” “E,” and “F,” respectively.
- the documents may be clustered (block 710 ).
- Duplicate detector 610 may cluster the identified documents.
- documents 800 may be clustered based on a content-based clustering technique or a predictive-based clustering technique.
- duplicate detector 610 may cluster documents 800 based on a combination of a content-based clustering technique and a predictive-based clustering technique, and/or some other type of clustering technique not specifically mentioned herein.
- duplicate detector 610 may cluster documents 800 based on a predictive-based clustering technique.
- FIG. 9 illustrates an exemplary predictive-based clustering technique.
- documents “A,” “B,” “C,” “D,” “E,” and “F” may have a corresponding address (e.g., a URL).
- the URL for document “A” may be www.united.com
- the URL for document “B” may be www.mycity.com/united
- the URL for document “C” may be united.com
- the URL for document “D” may be www.peace.com
- the URL for document “E” may be www.youandme.com
- the URL for document “F” may be www.altogether.com.
- predictive-based clustering process 905 may cluster these documents. For example, predictive-based clustering process 905 may determine that URLs www.united.com, www.mycity.com/united, and united.com have the same predictive ID and, thus are duplicate documents. Similarly, predictive-based clustering process 905 may determine that URLs www.peace.com, www.youandme.com, and www.alltogether.com have the same predictive ID and, thus are duplicate documents.
- duplicate detector 610 may form clusters 1005 and 1010 , as illustrated in FIG. 10 .
- Cluster 1005 may include documents “A,” “B,” and “C”
- cluster 1010 may include documents “D,” “E,” and “F.”
- documents “A,” “B,” and “C” may share a common key value (e.g., a predictive ID) and documents “D,” “E,” and “F” may share a common key value (e.g., a predictive ID).
- Quality information 805 , 810 , 815 , 820 , 825 , and 830 may remain associated with their respective documents.
- a measure of quality may be determined for document(s) in each cluster (block 715 ).
- a measure of quality e.g., a quality score
- the measure of quality for a document may be based on quality information.
- representative selector 620 may determine the quality score for each document based on quality information 805 , 810 , 815 , 820 , 825 , and 830 .
- quality information may include link information (e.g., a link-based score, a number of links to/from a document, a position of a link within a document, etc.), a date a document is created, a page (or document) rank, anchor text information, an aesthetic value of an address (e.g., a short and/or a word-based URL may have a higher aesthetic value than a long and/or a non-word based URL containing, for example, symbols, such as ?, !, ⁇ , *, etc.), a measure of popularity, information regarding a source of content in the document (e.g., quality of web site that includes the document (e.g., a web site associated with a top-ranked university versus a web site associated with an unknown individual), age of web site that includes the document, etc.), and/or other kinds of information that may indicate whether a document may be a good representative.
- link information e.g., a link-based score, a number of links to
- a representative document for each cluster may be selected based on the measure of quality (block 720 ). For example, representative selector 620 may determine a representative for each cluster based on the measure of quality (e.g., a quality score) associated with each document. In one implementation, representative selector 620 may select a document having the highest quality score in a cluster as the representative document of the cluster.
- the measure of quality e.g., a quality score
- FIG. 11 is a diagram illustrating this exemplary operation.
- representative selector 620 may select document “B” as the representative (as indicated by “REP”) in cluster 1005 , and may select document “E” as the representative (as indicated by “REP”) in cluster 1010 .
- a final target document associated with the representative may be determined (block 725 ).
- duplicate detector 610 may determine a final target document that may be associated with the representative for each cluster.
- duplicate detector 610 may analyze the redirect information associated with the representative document.
- the representative may not redirect to another document.
- the final target document may correspond to the representative document itself.
- the representative may redirect to another document.
- duplicate detector 610 may determine a final target document associated with the representative.
- representative selector 620 may determine that document “G” is the final target document for representative document “B,” and document “I” is the final target document for representative document “E.”
- Document “G” may have an address (e.g., a URL) of www.peaceforall.com and document “I” may have an address (e.g., a URL) of www.geocites.com/peaceforall.
- Document “H” may be considered an intermediate target document.
- duplicate detector 610 may apply the predictive-based clustering technique previously described above.
- predictive-based clustering process 1205 may be applied to documents “G” and “I” to determine whether documents “G” and “I” are duplicate documents.
- predictive-based clustering process 1205 may determine that documents “G” and “I” are not duplicate documents (e.g., they have different predictive IDs). In other instances, predictive-based clustering process 1205 may determine that documents “G” and “I” are duplicate documents (e.g., they have the same predictive ID). For purposes of discussion, assume that predictive-based clustering process 1205 determines that documents “G” and “I” are duplicate documents. That is, as illustrated in FIG. 12 , predictive-based clustering process 1205 provides that, among other addresses, www.peaceforall.com and www.geocites.com/peaceforall have the same predictive ID.
- process 700 may continue with documents being clustered based on the final target document(s) (block 740 ).
- duplicate detector 610 may cluster documents that are associated with the same or equivalent final target document.
- FIG. 13 illustrates an example of this process. As illustrated, documents “A,” “B,” “C,” and “G” may be clustered with documents “D,” “E,” “F,” and “I” to form a cluster 1315 . As further illustrated in FIG. 13 , quality information 1305 and 1310 may be associated with documents “G” and “I,” respectively.
- cluster 1315 may include, for example, documents “A,” “B,” “C,” and “G,” and documents “D,” “E,” “F,” and “I” may be clustered in another cluster.
- a measure of quality may be determined for document(s) in each cluster (block 745 ). Similar to block 715 , a measure of quality for each document may be determined. The measure of quality for a document may be based on quality information. For example, representative selector 620 may determine the quality score for each document based on quality information 805 , 810 , 815 , 820 , 825 , 830 , 1305 , and 1310 .
- a representative document for each cluster may be selected based on the measure of quality (block 750 ).
- representative selector 620 may determine a representative for each cluster based on the measure of quality (e.g., a quality score) associated with each document.
- representative selector 620 may select a document having the highest quality score in a cluster as the representative document of the cluster. For example, as illustrated in FIG. 14 , representative selector 620 may determine that document “I” is the representative document (as indicated by “REP”).
- a checksum of the representative may be determined (block 755 ).
- duplicate detector 610 may determine a checksum of the representative in each cluster.
- the checksum for document “I” may be determined.
- Documents may be clustered based on the checksum of the representative (block 760 ).
- duplicate detector 610 may cluster documents based on the checksum of the representative document.
- FIG. 15 illustrates an example of this process.
- documents “J,” “K,” and “L” are determined to have the same checksum as document “I.”
- Document “L” may be a representative document (as indicated by “REP”).
- Cluster 1520 may include documents “A,” “B,” “C,” “D,” “E,” “F,” “G,” “I,” “J,” “K,” and “L.”
- Quality information 1505 , 1510 , and 1515 may be associated with documents “J,” “K,” and “L,” respectively.
- a canonical in each cluster may be selected (block 765 ).
- indexing engine 430 may select a document, or a set of documents, as the “canonical” for the cluster.
- a “canonical” document may be considered similar to a representative. However, the selection of a canonical document may involve processes in addition to and/or different than those described with respect to selecting a representative. In one implementation, indexing engine 430 may select the highest ranking document as the canonical for the cluster.
- the canonical may be indexed (block 770 ).
- indexing engine 420 e.g., indexer 630
- indexer 630 may take the text or other data of the canonical document, extract individual terms or other data from the text of the canonical document, and sort those terms or other data (e.g., alphabetically) in an index.
- Other techniques for extracting and indexing content that are more complex than simple word-level indexing, may also or alternatively be used, including techniques for indexing XML data, images, videos, etc.
- Each entry in the index may contain a term or other data stored in association with a list of documents in which the term or other data appears and the location within the document where the term or other data appears.
- quality information associated with all or select documents of the cluster from which the canonical document was selected may be associated with the canonical document and indexed.
- a clustering process, a representative selection process, a canonical selection process, or some other indexing process relating to a collection of documents, including or excluding documents 800 may precede process 700 . Additionally, or alternatively, it will be appreciated that a clustering process, a representative selection process, a canonical selection process, or some other indexing process relating to a collection of documents, including or excluding documents 800 , may succeed process 700 .
- a clustering process preceding and/or succeeding process 700 may utilize a different type of clustering than the type of clustering utilized during process 700 .
- a clustering process preceding and/or succeeding process 700 may utilize a predictive-based clustering technique.
- the clustering techniques preceding and/or succeeding process 700 may utilize a clustering process identical to a clustering process performed during process 700 , or similar thereto (e.g., a content-based clustering technique (e.g., checksum ID) during process 700 and a content-based clustering technique (e.g., target ID) preceding and/or succeeding process 700 ).
- one or more of the operations described in connection to process 700 may be omitted.
- one or more of the operations such as, clustering, determining a measure of quality, selecting a representative, etc., may be omitted depending on the number of iterations performed.
- criteria associated with these processes may be different in other implementations.
- blocks 755 and 760 may involve clustering based on a predictive-based clustering technique instead of a content-based clustering technique.
- Implementations described herein may facilitate the indexing process and the quality of search results by significantly improving the clustering of duplicate documents.
Abstract
Description
Claims (25)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/059,637 US8661069B1 (en) | 2008-03-31 | 2008-03-31 | Predictive-based clustering with representative redirect targets |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/059,637 US8661069B1 (en) | 2008-03-31 | 2008-03-31 | Predictive-based clustering with representative redirect targets |
Publications (1)
Publication Number | Publication Date |
---|---|
US8661069B1 true US8661069B1 (en) | 2014-02-25 |
Family
ID=50115166
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/059,637 Active 2031-03-16 US8661069B1 (en) | 2008-03-31 | 2008-03-31 | Predictive-based clustering with representative redirect targets |
Country Status (1)
Country | Link |
---|---|
US (1) | US8661069B1 (en) |
Cited By (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20130060760A1 (en) * | 2011-09-02 | 2013-03-07 | Microsoft Corporation | Determining comprehensive subsets of reviews |
US20140075282A1 (en) * | 2012-06-26 | 2014-03-13 | Rediff.Com India Limited | Method and apparatus for composing a representative description for a cluster of digital documents |
WO2015195545A1 (en) * | 2014-06-20 | 2015-12-23 | Google Inc. | Media store with a canonical layer for content |
US10452734B1 (en) | 2018-09-21 | 2019-10-22 | SSB Legal Technologies, LLC | Data visualization platform for use in a network environment |
US11250075B1 (en) * | 2017-02-17 | 2022-02-15 | Snap Inc. | Searching social media content |
US11386063B2 (en) * | 2017-06-02 | 2022-07-12 | Chaossearch, Inc. | Data edge platform for improved storage and analytics |
US11500945B2 (en) * | 2018-03-27 | 2022-11-15 | Innoplexus Ag | System and method of crawling wide area computer network for retrieving contextual information |
Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5483650A (en) * | 1991-11-12 | 1996-01-09 | Xerox Corporation | Method of constant interaction-time clustering applied to document browsing |
US5832470A (en) * | 1994-09-30 | 1998-11-03 | Hitachi, Ltd. | Method and apparatus for classifying document information |
US6026388A (en) * | 1995-08-16 | 2000-02-15 | Textwise, Llc | User interface and other enhancements for natural language information retrieval system and method |
US20100150453A1 (en) * | 2006-01-25 | 2010-06-17 | Equivio Ltd. | Determining near duplicate "noisy" data objects |
-
2008
- 2008-03-31 US US12/059,637 patent/US8661069B1/en active Active
Patent Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5483650A (en) * | 1991-11-12 | 1996-01-09 | Xerox Corporation | Method of constant interaction-time clustering applied to document browsing |
US5832470A (en) * | 1994-09-30 | 1998-11-03 | Hitachi, Ltd. | Method and apparatus for classifying document information |
US6026388A (en) * | 1995-08-16 | 2000-02-15 | Textwise, Llc | User interface and other enhancements for natural language information retrieval system and method |
US20100150453A1 (en) * | 2006-01-25 | 2010-06-17 | Equivio Ltd. | Determining near duplicate "noisy" data objects |
Cited By (14)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20130060760A1 (en) * | 2011-09-02 | 2013-03-07 | Microsoft Corporation | Determining comprehensive subsets of reviews |
US20140075282A1 (en) * | 2012-06-26 | 2014-03-13 | Rediff.Com India Limited | Method and apparatus for composing a representative description for a cluster of digital documents |
CN106462632B (en) * | 2014-06-20 | 2020-08-04 | 谷歌有限责任公司 | Media store with content specification layer |
CN106462632A (en) * | 2014-06-20 | 2017-02-22 | 谷歌公司 | Media store with a canonical layer for content |
US9767101B2 (en) | 2014-06-20 | 2017-09-19 | Google Inc. | Media store with a canonical layer for content |
WO2015195545A1 (en) * | 2014-06-20 | 2015-12-23 | Google Inc. | Media store with a canonical layer for content |
EP3158470B1 (en) * | 2014-06-20 | 2021-03-10 | Google LLC | Media store with a canonical layer for content |
US11250075B1 (en) * | 2017-02-17 | 2022-02-15 | Snap Inc. | Searching social media content |
US11720640B2 (en) | 2017-02-17 | 2023-08-08 | Snap Inc. | Searching social media content |
US11386063B2 (en) * | 2017-06-02 | 2022-07-12 | Chaossearch, Inc. | Data edge platform for improved storage and analytics |
US11416466B2 (en) * | 2017-06-02 | 2022-08-16 | Chaossearch, Inc. | Data edge platform for improved storage and analytics |
US11500945B2 (en) * | 2018-03-27 | 2022-11-15 | Innoplexus Ag | System and method of crawling wide area computer network for retrieving contextual information |
US10452734B1 (en) | 2018-09-21 | 2019-10-22 | SSB Legal Technologies, LLC | Data visualization platform for use in a network environment |
US11030270B1 (en) | 2018-09-21 | 2021-06-08 | SSB Legal Technologies, LLC | Data visualization platform for use in a network environment |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7783626B2 (en) | Pipelined architecture for global analysis and index building | |
US10162802B1 (en) | Systems and methods for syndicating and hosting customized news content | |
US7953731B2 (en) | Enhancing and optimizing enterprise search | |
JP5425140B2 (en) | System and method for providing search results | |
US9081851B2 (en) | Method and system for autocompletion using ranked results | |
JP5268073B2 (en) | Bookmarking and ranking | |
US20070250501A1 (en) | Search result delivery engine | |
US11361036B2 (en) | Using historical information to improve search across heterogeneous indices | |
JP2016181306A (en) | System and method for scoping searches using index keys | |
US8990193B1 (en) | Method, system, and graphical user interface for improved search result displays via user-specified annotations | |
CA2790421C (en) | Indexing and searching employing virtual documents | |
US8423885B1 (en) | Updating search engine document index based on calculated age of changed portions in a document | |
US8661069B1 (en) | Predictive-based clustering with representative redirect targets | |
US7836108B1 (en) | Clustering by previous representative | |
US9275145B2 (en) | Electronic document retrieval system with links to external documents | |
US8713071B1 (en) | Detecting mirrors on the web | |
US8521746B1 (en) | Detection of bounce pad sites | |
US9424340B1 (en) | Detection of proxy pad sites | |
US7886217B1 (en) | Identification of web sites that contain session identifiers | |
US20130226900A1 (en) | Method and system for non-ephemeral search | |
US8595225B1 (en) | Systems and methods for correlating document topicality and popularity | |
Lin et al. | Vipas: virtual link powered authority search in the web | |
Yanjun et al. | Weak-Linked Document in Search Engine | |
Chen | VIPAS: Virtual Link Powered Authority Search in the Web |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:COX, JEFF;TURITZIN, MIKE;PROUDFOOT, DAVID MICHAEL;SIGNING DATES FROM 20080402 TO 20080609;REEL/FRAME:021074/0964 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551)Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044101/0299Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |