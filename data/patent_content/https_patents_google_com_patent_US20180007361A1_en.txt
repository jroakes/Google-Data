US20180007361A1 - Adaptive Stochastic Entropy Coding - Google Patents
Adaptive Stochastic Entropy Coding Download PDFInfo
- Publication number
- US20180007361A1 US20180007361A1 US15/705,751 US201715705751A US2018007361A1 US 20180007361 A1 US20180007361 A1 US 20180007361A1 US 201715705751 A US201715705751 A US 201715705751A US 2018007361 A1 US2018007361 A1 US 2018007361A1
- Authority
- US
- United States
- Prior art keywords
- probability
- current
- probability distribution
- probabilities
- symbol
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/102—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or selection affected or controlled by the adaptive coding
- H04N19/13—Adaptive entropy coding, e.g. adaptive variable length coding [AVLC] or context adaptive binary arithmetic coding [CABAC]
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M7/00—Conversion of a code where information is represented by a given sequence or number of digits to a code where the same, similar or subset of information is represented by a different sequence or number of digits
- H03M7/30—Compression; Expansion; Suppression of unnecessary data, e.g. redundancy reduction
- H03M7/40—Conversion to or from variable length codes, e.g. Shannon-Fano code, Huffman code, Morse code
- H03M7/4006—Conversion to or from arithmetic code
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M7/00—Conversion of a code where information is represented by a given sequence or number of digits to a code where the same, similar or subset of information is represented by a different sequence or number of digits
- H03M7/30—Compression; Expansion; Suppression of unnecessary data, e.g. redundancy reduction
- H03M7/60—General implementation details not specific to a particular type of compression
- H03M7/6035—Handling of unkown probabilities
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/90—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using coding techniques not provided for in groups H04N19/10-H04N19/85, e.g. fractals
- H04N19/91—Entropy coding, e.g. variable length coding [VLC] or arithmetic coding
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M7/00—Conversion of a code where information is represented by a given sequence or number of digits to a code where the same, similar or subset of information is represented by a different sequence or number of digits
- H03M7/30—Compression; Expansion; Suppression of unnecessary data, e.g. redundancy reduction
- H03M7/40—Conversion to or from variable length codes, e.g. Shannon-Fano code, Huffman code, Morse code
Definitions
- This application relates to video encoding and decoding.
- Digital video can be used, for example, for remote business meetings via video conferencing, high definition video entertainment, video advertisements, or sharing of user-generated videos. Accordingly, it would be advantageous to provide high resolution video transmitted over communications channels having limited bandwidth.
- An aspect is an apparatus for use in decoding a video stream using adaptive stochastic entropy coding, the apparatus comprising a non-transitory computer-readable memory including instructions for super-transform coding, and a processor, operatively coupled to the non-transitory computer-readable memory, for receiving the instructions from the non-transitory computer-readable memory and executing the instructions for super-transform coding comprising identifying a current probability distribution, decoding a modified probability distribution from an encoded video stream using the current probability distribution, generating a decoded current portion of a video stream by decoding the current portion from the encoded video stream using the modified probability distribution, identifying a forward update probability distribution for the current portion, generating an adapted probability distribution based on the current probability distribution and the forward update probability distribution, and including the decoded current portion in an output for presentation.
- Another aspect is an apparatus for use encoding a video stream using adaptive stochastic entropy coding, the apparatus comprising a non-transitory computer-readable memory including instructions for super-transform coding, and a processor, operatively coupled to the non-transitory computer-readable memory, for receiving the instructions from the non-transitory computer-readable memory and executing the instructions for super-transform coding comprising identifying a current portion of an input video stream, identifying a current probability distribution, identifying a forward update probability distribution based on symbol counts for the current portion, generating a modified probability distribution for the current portion based on the forward update probability distribution and the current probability distribution, generating an encoded portion by encoding the current portion using the modified probability distribution, generating an adapted probability distribution based on the current probability distribution and the forward update probability distribution, including the encoded portion in the output bitstream, and storing or transmitting the output bitstream.
- FIG. 1 is a diagram of a video encoding and decoding system in accordance with implementations of this disclosure
- FIG. 2 is a diagram of a typical video stream for encoding and decoding in accordance with implementations of this disclosure
- FIG. 3 is a block diagram of a video compression device in accordance with implementations of this disclosure.
- FIG. 4 is a block diagram of a video decompression device in accordance with implementations of this disclosure.
- FIG. 5 is a block diagram of adaptive stochastic entropy encoding in accordance with implementations of this disclosure.
- FIG. 6 is a block diagram of adaptive stochastic entropy decoding in accordance with implementations of this disclosure.
- Digital video may be used for various purposes including, for example, remote business meetings via video conferencing, high definition video entertainment, video advertisements, and sharing of user-generated videos.
- the generation and display of a video signal can include video compression using one or more video compression schemes.
- Video compression schemes can include encoding and decoding schemes using entropy coding to improve compression without loss of data.
- Entropy coding may include representing symbols from an input data stream, such as a video stream, as codes in an encoded output data stream.
- the codes may be associated with the symbols based on estimated probabilities that the symbols will appear in the input data stream.
- the probabilities may be estimated so that the shortest codes may be associated with the most frequent symbols; however, the symbol frequency in some input data, such as video or other multimedia data, may be non-stationary and may vary significantly over time, which may reduce the accuracy of the probabilities.
- the probabilities may be continuously adapted. For example, symbol counts may be updated and probabilities may be calculated for each symbol processed. However, calculating probabilities for each symbol processed may over-utilize resources, such as processing resources, and may be subject to error caused by noise in the input data stream. To maintain accurate probabilities and reduce noise error using fewer resources adaptive stochastic entropy coding may be used.
- Implementations of adaptive stochastic entropy coding may include using backward adaptation, forward adaptation, or a combination of backwards and forwards adaptation.
- Implementations of backwards adaptation may include periodically updating the probabilities based on symbol counts for a portion of the input data stream associated with the period, such as a frame, a row, a group of rows, a segment, a block, or a group of blocks.
- the symbol probability distribution may vary during the portion of the input data stream and forward adaptation may be used to maintain accuracy for encoding the portion.
- Implementations of forward adaptation may include encoding the portion of the input data stream using a modified probability and indicating the modified probability in the encoded output data.
- FIG. 1 is a diagram of a video encoding and decoding system 10 in accordance with implementations of this disclosure.
- a transmitting station 12 can be, for example, a computing device having an internal configuration of hardware including a processor such as a central processing unit (CPU) 14 and a memory 16 .
- the CPU 14 can be a controller for controlling the operations of the transmitting station 12 .
- the CPU 14 can be connected to the memory 16 by, for example, a memory bus.
- the memory 16 can be read only memory (ROM), random access memory (RAM), or any other suitable memory device.
- the memory 16 can store data and program instructions which can be used by the CPU 14 .
- Other suitable implementations of the transmitting station 12 are possible.
- computing device includes a server, a hand-held device, a laptop computer, a desktop computer, a special purpose computer, a general purpose computer, or any device, or combination of devices, capable of performing any method, or any portion thereof, disclosed herein.
- a network 28 can connect the transmitting station 12 and a receiving station 30 for encoding and decoding of the video stream.
- the video stream can be encoded in the transmitting station 12 and the encoded video stream can be decoded in the receiving station 30 .
- the network 28 can, for example, be the Internet.
- the network 28 can also be a local area network (LAN), wide area network (WAN), virtual private network (VPN), a mobile or cellular telephone network, or any other means of transferring the video stream from the transmitting station 12 to, in this example, receiving station 30 .
- the receiving station 30 can be a computing device having an internal configuration of hardware including a processor such as a central processing unit (CPU) 32 and a memory 34 .
- the CPU 32 may be a controller for controlling the operations of the receiving station 30 .
- the CPU 32 can be connected to the memory 34 by, for example, a memory bus.
- the memory 34 can be ROM, RAM or any other suitable memory device.
- the memory 34 can store data and program instructions can be used by the CPU 32 .
- Other suitable implementations of receiving station 30 are possible. For example, the processing of the receiving station 30 can be distributed among multiple devices.
- a display 36 configured to display a video stream can be connected to the receiving station 30 .
- the display 36 can be implemented in various ways, including by a liquid crystal display (LCD), a cathode-ray tube (CRT), or a light emitting diode display (LED), such as an OLED display.
- the display 36 can be coupled to CPU 32 and can be configured to display a rendering 38 of the video stream decoded by a decoder in receiving station 30 .
- a video stream can be encoded and stored for transmission at a later time by the receiving station 30 or any other device having memory.
- the receiving station 30 can receive (e.g., via network 28 , a computer bus, and/or some communication pathway) the encoded video stream and can store the video stream for later decoding.
- additional components can be added to the video encoding and decoding system 10 .
- a display or a video camera can be attached to the transmitting station 12 to capture the video stream to be encoded.
- a real-time transport protocol (RTP) is used for transmission.
- a transport protocol other than RTP may be used, e.g. a Hyper Text Transport Protocol (HTTP)-based video streaming protocol.
- HTTP Hyper Text Transport Protocol
- FIG. 2 is a diagram of a video stream 50 for encoding and decoding in accordance with implementations of this disclosure.
- video stream 50 includes a video sequence 52 .
- the video sequence 52 includes a number of adjacent frames 54 . While three frames are depicted in adjacent frames 54 , the video sequence 52 can include any number of adjacent frames.
- the adjacent frames 54 can then be further subdivided into a single frame 56 .
- the single frame 56 can be divided into a series of blocks 58 .
- a block 58 can include pixels.
- a block can include a 16 ⁇ 16 group of pixels, an 8 ⁇ 8 group of pixels, an 8 ⁇ 16 group of pixels, or any other group of pixels.
- block can include a macroblock, a segment, a slice, or any other portion of a frame.
- a frame, a block, a pixel, or a combination thereof can include display information, such as luminance information, chrominance information, or any other information that can be used to store, modify, communicate, or display the video stream or a portion thereof.
- FIG. 3 is a block diagram of an encoder 70 in accordance with implementations of this disclosure.
- Encoder 70 can be implemented, as described above, in the transmitting station 12 as a computer software program stored in memory 16 , for example.
- the computer software program can include machine instructions that, when executed by CPU 14 , cause transmitting station 12 to encode video data in the manner described in FIG. 3 .
- Encoder 70 can be implemented as specialized hardware included, for example, in transmitting station 12 .
- Encoder 70 can be implemented as specialized hardware included, for example, in transmitting station 12 .
- the encoder 70 can encode an input video stream 50 .
- the encoder 70 may have the following stages to perform the various functions in a forward path (shown by the solid connection lines) to produce an encoded or a compressed bitstream 88 : an intra/inter prediction stage 72 , a transform stage 74 , a quantization stage 76 , and an entropy encoding stage 78 .
- the encoder 70 can include a reconstruction path (shown by the dotted connection lines) to reconstruct a frame for encoding of further blocks.
- the encoder 70 may have the following stages to perform the various functions in the reconstruction path: a dequantization stage 80 , an inverse transform stage 82 , a reconstruction stage 84 , and a loop filtering stage 86 .
- Other structural variations of the encoder 70 can be used to encode the video stream 50 .
- each frame 56 within the video stream 50 can be processed in units of blocks.
- each block can be encoded using either intra-frame prediction, which may be within a single frame, or inter-frame prediction, which may be from frame to frame. In either case, a prediction block can be formed.
- intra-prediction a prediction block can be formed from samples in the current frame that have been previously encoded and reconstructed.
- inter-prediction a prediction block can be formed from samples in one or more previously constructed reference frames.
- the prediction block can be subtracted from the current block at the intra/inter prediction stage 72 to produce a residual block.
- the transform stage 74 transforms the residual block into transform coefficients in, for example, the frequency domain.
- block-based transforms include the Karhunen-Loève Transform (KLT), the Discrete Cosine Transform (DCT), and the Singular Value Decomposition Transform (SVD).
- KLT Karhunen-Loève Transform
- DCT Discrete Cosine Transform
- SVD Singular Value Decomposition Transform
- the DCT transforms the block into the frequency domain.
- the transform coefficient values may be based on spatial frequency, with the lowest frequency (i.e. DC) coefficient at the top-left of the matrix and the highest frequency coefficient at the bottom-right of the matrix.
- the quantization stage 76 can convert the transform coefficients into discrete quantum values, which may be referred to as quantized transform coefficients or quantization levels.
- the quantized transform coefficients can be entropy encoded by the entropy encoding stage 78 .
- Entropy encoding can include using a probability distribution metric.
- the entropy-encoded coefficients, together with the information used to decode the block, which may include the type of prediction used, motion vectors, and quantizer value, can be output to the compressed bitstream 88 .
- the compressed bitstream 88 can be formatted using various techniques, such as run-length encoding (RLE) and zero-run coding.
- the reconstruction path in FIG. 3 can be used to help provide that both the encoder 70 and a decoder 100 (described below) with the same reference frames to decode the compressed bitstream 88 .
- the reconstruction path can perform functions that are similar to functions that take place during the decoding process that are discussed in more detail below, including dequantizing the quantized transform coefficients at the dequantization stage 80 and inverse transforming the dequantized transform coefficients at the inverse transform stage 82 to produce a derivative residual block.
- the prediction block that was predicted at the intra/inter prediction stage 72 can be added to the derivative residual block to create a reconstructed block.
- the loop filtering stage 86 can be applied to the reconstructed block to reduce distortion such as blocking artifacts.
- encoder 70 can be used to encode the compressed bitstream 88 .
- a non-transform based encoder 70 can quantize the residual block directly without the transform stage 74 .
- an encoder 70 can have the quantization stage 76 and the dequantization stage 80 combined into a single stage.
- FIG. 4 is a block diagram of a decoder 100 in accordance with implementations of this disclosure.
- the decoder 100 can be implemented in a device, such as the receiving station 30 described above, for example, using a computer software program stored in memory 34 .
- the computer software program can include machine instructions that, when executed by CPU 32 , cause receiving station 30 to decode video data in the manner described in FIG. 4 .
- Decoder 100 can also be implemented as specialized hardware included, for example, in transmitting station 12 or receiving station 30 .
- the decoder 100 may be similar to the reconstruction path of the encoder 70 discussed above, and can include, in one example, the following stages to perform various functions to produce an output video stream 116 from the compressed bitstream 88 : an entropy decoding stage 102 , a dequantization stage 104 , an inverse transform stage 106 , an intra/inter prediction stage 108 , a reconstruction stage 110 , a loop filtering stage 112 and a deblocking filtering stage 114 .
- Other structural variations of the decoder 100 can be used to decode the compressed bitstream 88 .
- the data elements within the compressed bitstream 88 can be decoded by the entropy decoding stage 102 (using, for example, Context Adaptive Binary Arithmetic Decoding) to produce a set of quantized transform coefficients.
- the dequantization stage 104 can dequantize the quantized transform coefficients, and the inverse transform stage 106 can inverse transform the dequantized transform coefficients to produce a derivative residual block that can be identical to that created by the inverse transformation stage 84 in the encoder 70 .
- the decoder 100 can use the intra/inter prediction stage 108 to create the same prediction block as was created in the encoder 70 .
- the prediction block can be added to the derivative residual block to create a reconstructed block.
- the loop filtering stage 112 can be applied to the reconstructed block to reduce blocking artifacts.
- the deblocking filtering stage 114 can be applied to the reconstructed block to reduce blocking distortion, and the result is output as the output video stream 116 .
- decoder 100 can be used to decode the compressed bitstream 88 .
- the decoder 100 can produce the output video stream 116 without the deblocking filtering stage 114 .
- FIG. 5 is a block diagram of adaptive stochastic entropy encoding 500 in accordance with implementations of this disclosure.
- Implementations of adaptive stochastic entropy encoding 500 can include identifying a current portion of an input data stream at 510 , performing forward adaptation at 520 , encoding the portion of the input data stream at 530 , performing backwards adaptation at 540 , or a combination thereof.
- Adaptive stochastic entropy encoding 500 , or any portion thereof, can be implemented in a device, such as the transmitting station 12 shown in FIG. 1 .
- an encoder such as the encoder 70 shown in FIG. 3
- a current portion of an input data stream may be identified at 510 .
- the current portion may be any portion of the input data stream, such as a frame, a row, a group of rows, a segment, a block, or a group of blocks.
- the size of the current portion may correspond with an update interval.
- the current portion may be a frame and the update interval may be per frame.
- Identifying the current portion may include generating symbol counts for the current portion. For example, a symbol count may be generated for each symbol in the input data stream. For the current portion, the symbol count for each symbol may be set to zero (0), and may be incremented for each appearance of a respective symbol in the current portion.
- Identifying the current portion may include identifying current probabilities for encoding the current portion.
- the current probability for a symbol such as the binary symbol 0, may be referred to as P.
- the current probabilities for generating an encoded portion may be identified at the encoder such that a decoder may identify equivalent probabilities for decoding the encoded portion.
- the encoder and the decoder may synchronize probabilities.
- the current probabilities may be identified by the encoder and the decoder based on a key frame.
- the current probabilities may be based on backwards adaptation performed for a previously encoded portion of the input data stream.
- Forward adaptation may be performed at 520 .
- Implementations of forward adaptation may include identifying forward update probabilities for the current portion and generating modified probabilities for the current portion.
- the forward update probabilities may be identified based on the distribution of the symbols (symbol counts) in the current portion.
- the current probabilities may include the current probability P for a symbol, such as the binary symbol 0, and the forward update probability Q for the symbol may be identified based on the distribution (count) of the symbol in the current portion.
- the modified probabilities may be based on the current probabilities and the forward update probabilities.
- the modified probability Q′ for a symbol such as the binary symbol 0, may be based on the current probability P and the forward update probability Q for the symbol.
- binary symbols are described for simplicity, any symbols may be used. For example, a non-binary symbol may be converted to a binary symbol.
- Implementations of forward adaptation may include generating modified probabilities based on the current probabilities and the forward update probabilities.
- the forward update probability Q may be encoded lossily and differentially as the modified probability Q′ based on the current probability P.
- Forward adaptation may include differential encoding of the modified probability Q′ for a symbol in the current block using a variable length code.
- forward adaptation may be performed in an open-loop manner.
- the set of candidate probabilities may include probabilities in the range P START to P STOP , where P START and P STOP are limits of probability values that are searched.
- the forward update probability Q may be greater than the current probability P
- P START may be P and P STOP may be Q, such that probabilities between P and Q inclusive are searched.
- Differential encoding may include identifying a number of bits for encoding d, identifying a savings metric based on the savings achieved when P is modified to q for each instance of a symbol in the current portion, and identifying a difference between the savings and a number of bits for encoding d.
- a value of q that maximizes the overall savings may be used as Q′.
- the probabilities may be in the set 1 to P MAX .
- P MAX may be 2 8 ⁇ 1 or 255.
- the probabilities or zero and 256 may be excluded from the encoded bit-stream.
- the differential d may be in the set ⁇ P+1, ⁇ P+2, . . . , ⁇ 1, 0, 1, . . . , P MAX ⁇ d ⁇ .
- the variable length code for the differential d may be generated such that values ⁇ aM, ⁇ (a ⁇ 1)M, . . . , ⁇ 2M, ⁇ M, 0, M, 2M, . . .
- (b ⁇ 1)M, bM ⁇ have a smaller code length than the rest of the values.
- M may be a small number such that every M value of probability (i.e. at a lower precision) is significantly cheaper to encode than the corresponding full precision value. This may ensure that the search process finds a value Q′ that is close enough to Q to produce optimal, or nearly optimal, bit-rate savings, but which is also significantly cheaper to transmit.
- R may be naturally organized such that smaller values correspond to smaller differences and larger values correspond to higher differences.
- Implementations of forward adaptation may include a second round of index mapping where R maps to S in ⁇ 0, 1, . . . , P MAX ⁇ 1 ⁇ such that values of R that are multiples of M, which may be a small value such as ⁇ 0, M, 2M, . . .
- ⁇ may be mapped to ⁇ 0, 1, 2, . . . ⁇ respectively and other values that are not multiples of M may be pushed back to higher values in order.
- This value of S may be between 1 and P MAX ⁇ 1, and can be coded simply using, for example, a terminated exponential Golomb or sub-exponential code.
- the value of S may be encoded separately.
- a single bit may be encoded using, for example, arithmetic coding, which may indicate whether there is a probability update, and if there is an update the value of S ⁇ 1 may be encoded using an exponential Golomb or sub-exponential code.
- arithmetic coding which may indicate whether there is a probability update, and if there is an update the value of S ⁇ 1 may be encoded using an exponential Golomb or sub-exponential code.
- Other implementations of forward adaptation may be used.
- the current portion of the input data stream may be encoded using the modified probabilities at 530 .
- each symbol in the current portion may be encoded using a corresponding code from the modified probabilities identified at 520 .
- a symbol such as the binary symbol 0, may be encoded using the modified probability Q′.
- the encoded symbols may be included in the output data stream.
- Backwards adaptation may be performed at 540 .
- Implementations of backwards adaptation may include determining adapted probabilities based on the current probabilities and the forward update probabilities. For example, the adapted probabilities may be determined based on a weighted average of the current probabilities and the forward update probabilities. Although the forward update probabilities may be used as the adapted probabilities, using a weighted average may reduce noise error and improve stability.
- the weighting may be based on symbol count for the current portion. In some implementations, higher symbol counts may indicate that the generated probabilities are more accurate. For example, the symbol counts may be high and the generated probabilities may be given a high weight, or the symbol counts may be low and the generated probabilities may be given a low weight.
- the adapted probability P′ for a symbol may be determined based on the current probability P for the symbol, the forward update probability Q for the symbol, and a weight ⁇ .
- the weight ⁇ may be based on the count n of the symbol in the current portion, a maximum update threshold A, such as 0.5, and a count saturation threshold N, such as 16.
- the adapted probabilities may be used for encoding another portion of the input data stream.
- FIG. 5 Other implementations of the diagram of adaptive stochastic entropy encoding as shown in FIG. 5 are available. In implementations, additional elements of adaptive stochastic entropy encoding can be added, certain elements can be combined, or certain elements can be removed. For example, in an implementation, forward adaptation can be skipped or omitted for one or more portions and the symbols can be encoded using the current probabilities.
- FIG. 6 is a block diagram of adaptive stochastic entropy decoding 600 in accordance with implementations of this disclosure.
- Implementations of adaptive stochastic entropy decoding 600 can include identifying a current portion of an encoded data stream at 610 , performing forward adaptation at 620 , decoding the current portion at 630 , performing backwards adaptation at 640 , or a combination thereof.
- Adaptive stochastic entropy decoding 600 , or any portion thereof can be implemented in a device, such as the receiving station 30 shown in FIG. 1 .
- a decoder such as the decoder 100 shown in FIG. 4
- a current portion of an encoded data stream may be identified at 610 . Identifying the current portion may include identifying current probabilities associated with the current portion. For example, the current probability p associated with a symbol, such as the binary symbol 0, may identified. In an implementation, the current probabilities may be identified at the decoder such that an encoder may identify equivalent probabilities. In an implementation, the encoder and the decoder may synchronize probabilities. For example, the current probabilities may be identified by the encoder and the decoder using a key frame. In an implementation, the current probabilities may be based on backwards adaptation performed for a previously decoded portion of the input data stream.
- Forward adaptation may be performed at 620 .
- Implementations of forward adaptation may include decoding modified probabilities from the encoded data stream for decoding the current portion.
- the decoder may decode a modified probability Q′ from the encoded video stream using the current probability P.
- the current portion may be decoded at 630 .
- the modified probabilities may be used to decode the current portion.
- the current portion may include a code corresponding to a symbol, such as the binary symbol 0, and the decoder may use the modified probability Q′ corresponding to the code to decode the symbol.
- decoding the current portion may include maintaining symbol counts for each symbol in the current portion.
- decoding the current portion may include identifying forward update probabilities.
- the forward update probabilities may be identified based on the distribution of the symbols (symbol counts) in the current portion.
- the current probabilities may include the current probability P for a symbol, such as the binary symbol 0, and the forward update probability Q for the symbol may be identified based on the distribution (count) of the symbol in the current portion.
- Backwards adaptation may be performed at 640 .
- Implementations of backwards adaptation may include determining adapted probabilities based on the current probabilities and the forward update probabilities. For example, the adapted probabilities may be determined based on a weighted average of the current probabilities and the forward update probabilities. Although the forward update probabilities may be used as the adapted probabilities, using a weighted average may reduce noise error and improve stability.
- the weighting may be based on symbol count for the current portion. In some implementations, higher symbol counts may indicate that the generated probabilities are more accurate. For example, the symbol counts may be high and the generated probabilities may be given a high weight, or the symbol counts may be low and the generated probabilities may be given a low weight.
- the adapted probability P′ for a symbol may be determined based on the current probability P for the symbol, the forward update probability Q for the symbol, and a weight ⁇ .
- the weight ⁇ may be based on the count n of the symbol in the current portion, a maximum update threshold A, such as 0.5, and a count saturation threshold N, such as 16.
- the adapted probabilities may be used for decoding another portion of the input data stream.
- FIG. 6 Other implementations of the diagram of adaptive stochastic entropy decoding as shown in FIG. 6 are available. In implementations, additional elements of adaptive stochastic entropy decoding can be added, certain elements can be combined, or certain elements can be removed. For example, in an implementation, forward adaptation can be skipped or omitted for one or more portions and the symbols can be decoded using the current probabilities.
- example or “exemplary” are used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as “example” or “exemplary” is not necessarily to be construed as preferred or advantageous over other aspects or designs. Rather, use of the words “example” or “exemplary” is intended to present concepts in a concrete fashion.
- the term “or” is intended to mean an inclusive “or” rather than an exclusive “or”. That is, unless specified otherwise, or clear from context, “X includes A or B” is intended to mean any of the natural inclusive permutations.
- the terms “determine” and “identify”, or any variations thereof, includes selecting, ascertaining, computing, looking up, receiving, determining, establishing, obtaining, or otherwise identifying or determining in any manner whatsoever using one or more of the devices shown in FIG. 1 .
- encoding and decoding may include compression, decompression, transformation, or any other processing or change of data.
- the implementations of the transmitting station 12 and/or the receiving station 30 can be realized in hardware, software, or any combination thereof.
- the hardware can include, for example, computers, intellectual property (IP) cores, application-specific integrated circuits (ASICs), programmable logic arrays, optical processors, programmable logic controllers, microcode, microcontrollers, servers, microprocessors, digital signal processors or any other suitable circuit.
- IP intellectual property
- ASICs application-specific integrated circuits
- programmable logic arrays optical processors
- programmable logic controllers microcode, microcontrollers, servers, microprocessors, digital signal processors or any other suitable circuit.
- signal processors should be understood as encompassing any of the foregoing hardware, either singly or in combination.
- signals and “data” are used interchangeably. Further, portions of the transmitting station 12 and the receiving station 30 do not necessarily have to be implemented in the same manner.
- the transmitting station 12 or the receiving station 30 can be implemented using a general purpose computer or general purpose/processor with a computer program that, when executed, carries out any of the respective methods, algorithms and/or instructions described herein.
- a special purpose computer/processor can be utilized which can contain specialized hardware for carrying out any of the methods, algorithms, or instructions described herein.
- the transmitting station 12 and receiving station 30 can, for example, be implemented on computers in a real-time video system.
- the transmitting station 12 can be implemented on a server and the receiving station 30 can be implemented on a device separate from the server, such as a hand-held communications device.
- the transmitting station 12 can encode content using an encoder 70 into an encoded video signal and transmit the encoded video signal to the communications device.
- the communications device can then decode the encoded video signal using a decoder 100 .
- the communications device can decode content stored locally on the communications device, for example, content that was not transmitted by the transmitting station 12 .
- Other suitable transmitting station 12 and receiving station 30 implementation schemes are available.
- the receiving station 30 can be a generally stationary personal computer rather than a portable communications device and/or a device including an encoder 70 may also include a decoder 100 .
- implementations can take the form of a computer program product accessible from, for example, a tangible computer-usable or computer-readable medium.
- a computer-usable or computer-readable medium can be any device that can, for example, tangibly contain, store, communicate, or transport the program for use by or in connection with any processor.
- the medium can be, for example, an electronic, magnetic, optical, electromagnetic, or a semiconductor device. Other suitable mediums are also available.
Abstract
Adaptive stochastic entropy encoding may include identifying a current portion of an input video stream, and identifying a current probability distribution, which may be an adapted probability distribution associated with a previously encoded portion of the video stream. Adaptive stochastic entropy encoding may include identifying a forward update probability distribution based on the current portion, generating a modified probability distribution for the current portion based on the forward update probability distribution and the current probability distribution, generating an encoded portion based on the current portion and the modified probability distribution, and generating an adapted probability distribution based on the current probability distribution and the forward update probability distribution.
Description
- This application is a continuation of U.S. patent application Ser. No. 13/539,753, filed Jul. 2, 2012, now U.S. Pat. No. 9,774,856, the entire disclosure of which is hereby incorporated by reference.
- This application relates to video encoding and decoding.
- Digital video can be used, for example, for remote business meetings via video conferencing, high definition video entertainment, video advertisements, or sharing of user-generated videos. Accordingly, it would be advantageous to provide high resolution video transmitted over communications channels having limited bandwidth.
- Disclosed herein are aspects of systems, methods, and apparatuses for encoding and decoding of a video signal using adaptive stochastic entropy coding.
- An aspect is an apparatus for use in decoding a video stream using adaptive stochastic entropy coding, the apparatus comprising a non-transitory computer-readable memory including instructions for super-transform coding, and a processor, operatively coupled to the non-transitory computer-readable memory, for receiving the instructions from the non-transitory computer-readable memory and executing the instructions for super-transform coding comprising identifying a current probability distribution, decoding a modified probability distribution from an encoded video stream using the current probability distribution, generating a decoded current portion of a video stream by decoding the current portion from the encoded video stream using the modified probability distribution, identifying a forward update probability distribution for the current portion, generating an adapted probability distribution based on the current probability distribution and the forward update probability distribution, and including the decoded current portion in an output for presentation.
- Another aspect is an apparatus for use encoding a video stream using adaptive stochastic entropy coding, the apparatus comprising a non-transitory computer-readable memory including instructions for super-transform coding, and a processor, operatively coupled to the non-transitory computer-readable memory, for receiving the instructions from the non-transitory computer-readable memory and executing the instructions for super-transform coding comprising identifying a current portion of an input video stream, identifying a current probability distribution, identifying a forward update probability distribution based on symbol counts for the current portion, generating a modified probability distribution for the current portion based on the forward update probability distribution and the current probability distribution, generating an encoded portion by encoding the current portion using the modified probability distribution, generating an adapted probability distribution based on the current probability distribution and the forward update probability distribution, including the encoded portion in the output bitstream, and storing or transmitting the output bitstream.
- Variations in these and other aspects will be described in additional detail hereafter.
- The description herein makes reference to the accompanying drawings wherein like reference numerals refer to like parts throughout the several views, and wherein:
-
FIG. 1 is a diagram of a video encoding and decoding system in accordance with implementations of this disclosure; -
FIG. 2 is a diagram of a typical video stream for encoding and decoding in accordance with implementations of this disclosure; -
FIG. 3 is a block diagram of a video compression device in accordance with implementations of this disclosure; -
FIG. 4 is a block diagram of a video decompression device in accordance with implementations of this disclosure; -
FIG. 5 is a block diagram of adaptive stochastic entropy encoding in accordance with implementations of this disclosure; and -
FIG. 6 is a block diagram of adaptive stochastic entropy decoding in accordance with implementations of this disclosure. - Digital video may be used for various purposes including, for example, remote business meetings via video conferencing, high definition video entertainment, video advertisements, and sharing of user-generated videos. The generation and display of a video signal, such as high quality digital video communicated using a limited bandwidth medium, can include video compression using one or more video compression schemes. Video compression schemes can include encoding and decoding schemes using entropy coding to improve compression without loss of data.
- Entropy coding may include representing symbols from an input data stream, such as a video stream, as codes in an encoded output data stream. The codes may be associated with the symbols based on estimated probabilities that the symbols will appear in the input data stream. The probabilities may be estimated so that the shortest codes may be associated with the most frequent symbols; however, the symbol frequency in some input data, such as video or other multimedia data, may be non-stationary and may vary significantly over time, which may reduce the accuracy of the probabilities.
- To maintain entropy coding accuracy, the probabilities may be continuously adapted. For example, symbol counts may be updated and probabilities may be calculated for each symbol processed. However, calculating probabilities for each symbol processed may over-utilize resources, such as processing resources, and may be subject to error caused by noise in the input data stream. To maintain accurate probabilities and reduce noise error using fewer resources adaptive stochastic entropy coding may be used.
- Implementations of adaptive stochastic entropy coding may include using backward adaptation, forward adaptation, or a combination of backwards and forwards adaptation. Implementations of backwards adaptation may include periodically updating the probabilities based on symbol counts for a portion of the input data stream associated with the period, such as a frame, a row, a group of rows, a segment, a block, or a group of blocks. The symbol probability distribution may vary during the portion of the input data stream and forward adaptation may be used to maintain accuracy for encoding the portion. Implementations of forward adaptation may include encoding the portion of the input data stream using a modified probability and indicating the modified probability in the encoded output data.
-
FIG. 1 is a diagram of a video encoding anddecoding system 10 in accordance with implementations of this disclosure. A transmittingstation 12 can be, for example, a computing device having an internal configuration of hardware including a processor such as a central processing unit (CPU) 14 and amemory 16. TheCPU 14 can be a controller for controlling the operations of the transmittingstation 12. TheCPU 14 can be connected to thememory 16 by, for example, a memory bus. Thememory 16 can be read only memory (ROM), random access memory (RAM), or any other suitable memory device. Thememory 16 can store data and program instructions which can be used by theCPU 14. Other suitable implementations of the transmittingstation 12 are possible. As used herein, the term “computing device” includes a server, a hand-held device, a laptop computer, a desktop computer, a special purpose computer, a general purpose computer, or any device, or combination of devices, capable of performing any method, or any portion thereof, disclosed herein. - A
network 28 can connect the transmittingstation 12 and areceiving station 30 for encoding and decoding of the video stream. Specifically, the video stream can be encoded in thetransmitting station 12 and the encoded video stream can be decoded in thereceiving station 30. Thenetwork 28 can, for example, be the Internet. Thenetwork 28 can also be a local area network (LAN), wide area network (WAN), virtual private network (VPN), a mobile or cellular telephone network, or any other means of transferring the video stream from the transmittingstation 12 to, in this example, receivingstation 30. - The
receiving station 30, in one example, can be a computing device having an internal configuration of hardware including a processor such as a central processing unit (CPU) 32 and amemory 34. TheCPU 32 may be a controller for controlling the operations of thereceiving station 30. TheCPU 32 can be connected to thememory 34 by, for example, a memory bus. Thememory 34 can be ROM, RAM or any other suitable memory device. Thememory 34 can store data and program instructions can be used by theCPU 32. Other suitable implementations of receivingstation 30 are possible. For example, the processing of thereceiving station 30 can be distributed among multiple devices. - A
display 36 configured to display a video stream can be connected to thereceiving station 30. Thedisplay 36 can be implemented in various ways, including by a liquid crystal display (LCD), a cathode-ray tube (CRT), or a light emitting diode display (LED), such as an OLED display. Thedisplay 36 can be coupled toCPU 32 and can be configured to display arendering 38 of the video stream decoded by a decoder inreceiving station 30. - Other implementations of the video encoding and
decoding system 10 are possible. For example, an implementation can omit thenetwork 28, thedisplay 36, or both. In an implementation, a video stream can be encoded and stored for transmission at a later time by thereceiving station 30 or any other device having memory. In an implementation, thereceiving station 30 can receive (e.g., vianetwork 28, a computer bus, and/or some communication pathway) the encoded video stream and can store the video stream for later decoding. In another implementation, additional components can be added to the video encoding anddecoding system 10. For example, a display or a video camera can be attached to the transmittingstation 12 to capture the video stream to be encoded. In an implementation, a real-time transport protocol (RTP) is used for transmission. In another implementation, a transport protocol other than RTP may be used, e.g. a Hyper Text Transport Protocol (HTTP)-based video streaming protocol. -
FIG. 2 is a diagram of avideo stream 50 for encoding and decoding in accordance with implementations of this disclosure.video stream 50 includes avideo sequence 52. At the next level, thevideo sequence 52 includes a number ofadjacent frames 54. While three frames are depicted inadjacent frames 54, thevideo sequence 52 can include any number of adjacent frames. Theadjacent frames 54 can then be further subdivided into asingle frame 56. At the next level, thesingle frame 56 can be divided into a series ofblocks 58. Although not shown inFIG. 2 , ablock 58 can include pixels. For example, a block can include a 16×16 group of pixels, an 8×8 group of pixels, an 8×16 group of pixels, or any other group of pixels. Unless otherwise indicated herein, the term ‘block’ can include a macroblock, a segment, a slice, or any other portion of a frame. A frame, a block, a pixel, or a combination thereof can include display information, such as luminance information, chrominance information, or any other information that can be used to store, modify, communicate, or display the video stream or a portion thereof. -
FIG. 3 is a block diagram of anencoder 70 in accordance with implementations of this disclosure.Encoder 70 can be implemented, as described above, in the transmittingstation 12 as a computer software program stored inmemory 16, for example. The computer software program can include machine instructions that, when executed byCPU 14,cause transmitting station 12 to encode video data in the manner described inFIG. 3 .Encoder 70 can be implemented as specialized hardware included, for example, in transmittingstation 12.Encoder 70 can be implemented as specialized hardware included, for example, in transmittingstation 12. Theencoder 70 can encode aninput video stream 50. Theencoder 70 may have the following stages to perform the various functions in a forward path (shown by the solid connection lines) to produce an encoded or a compressed bitstream 88: an intra/inter prediction stage 72, atransform stage 74, aquantization stage 76, and anentropy encoding stage 78. Theencoder 70 can include a reconstruction path (shown by the dotted connection lines) to reconstruct a frame for encoding of further blocks. Theencoder 70 may have the following stages to perform the various functions in the reconstruction path: adequantization stage 80, aninverse transform stage 82, areconstruction stage 84, and aloop filtering stage 86. Other structural variations of theencoder 70 can be used to encode thevideo stream 50. - When the
video stream 50 is presented for encoding, eachframe 56 within thevideo stream 50 can be processed in units of blocks. At the intra/inter prediction stage 72, each block can be encoded using either intra-frame prediction, which may be within a single frame, or inter-frame prediction, which may be from frame to frame. In either case, a prediction block can be formed. In the case of intra-prediction, a prediction block can be formed from samples in the current frame that have been previously encoded and reconstructed. In the case of inter-prediction, a prediction block can be formed from samples in one or more previously constructed reference frames. - Next, still referring to
FIG. 3 , the prediction block can be subtracted from the current block at the intra/inter prediction stage 72 to produce a residual block. Thetransform stage 74 transforms the residual block into transform coefficients in, for example, the frequency domain. Examples of block-based transforms include the Karhunen-Loève Transform (KLT), the Discrete Cosine Transform (DCT), and the Singular Value Decomposition Transform (SVD). In one example, the DCT transforms the block into the frequency domain. In the case of DCT, the transform coefficient values may be based on spatial frequency, with the lowest frequency (i.e. DC) coefficient at the top-left of the matrix and the highest frequency coefficient at the bottom-right of the matrix. - The
quantization stage 76 can convert the transform coefficients into discrete quantum values, which may be referred to as quantized transform coefficients or quantization levels. The quantized transform coefficients can be entropy encoded by theentropy encoding stage 78. Entropy encoding can include using a probability distribution metric. The entropy-encoded coefficients, together with the information used to decode the block, which may include the type of prediction used, motion vectors, and quantizer value, can be output to thecompressed bitstream 88. Thecompressed bitstream 88 can be formatted using various techniques, such as run-length encoding (RLE) and zero-run coding. - The reconstruction path in
FIG. 3 (shown by the dotted connection lines) can be used to help provide that both theencoder 70 and a decoder 100 (described below) with the same reference frames to decode thecompressed bitstream 88. The reconstruction path can perform functions that are similar to functions that take place during the decoding process that are discussed in more detail below, including dequantizing the quantized transform coefficients at thedequantization stage 80 and inverse transforming the dequantized transform coefficients at theinverse transform stage 82 to produce a derivative residual block. At thereconstruction stage 84, the prediction block that was predicted at the intra/inter prediction stage 72 can be added to the derivative residual block to create a reconstructed block. Theloop filtering stage 86 can be applied to the reconstructed block to reduce distortion such as blocking artifacts. - Other variations of the
encoder 70 can be used to encode thecompressed bitstream 88. For example, a non-transform basedencoder 70 can quantize the residual block directly without thetransform stage 74. In another implementation, anencoder 70 can have thequantization stage 76 and thedequantization stage 80 combined into a single stage. -
FIG. 4 is a block diagram of adecoder 100 in accordance with implementations of this disclosure. Thedecoder 100 can be implemented in a device, such as the receivingstation 30 described above, for example, using a computer software program stored inmemory 34. The computer software program can include machine instructions that, when executed byCPU 32,cause receiving station 30 to decode video data in the manner described inFIG. 4 .Decoder 100 can also be implemented as specialized hardware included, for example, in transmittingstation 12 or receivingstation 30. - The
decoder 100, may be similar to the reconstruction path of theencoder 70 discussed above, and can include, in one example, the following stages to perform various functions to produce anoutput video stream 116 from the compressed bitstream 88: anentropy decoding stage 102, adequantization stage 104, aninverse transform stage 106, an intra/inter prediction stage 108, areconstruction stage 110, aloop filtering stage 112 and adeblocking filtering stage 114. Other structural variations of thedecoder 100 can be used to decode thecompressed bitstream 88. - When the
compressed bitstream 88 is presented for decoding, the data elements within the compressedbitstream 88 can be decoded by the entropy decoding stage 102 (using, for example, Context Adaptive Binary Arithmetic Decoding) to produce a set of quantized transform coefficients. Thedequantization stage 104 can dequantize the quantized transform coefficients, and theinverse transform stage 106 can inverse transform the dequantized transform coefficients to produce a derivative residual block that can be identical to that created by theinverse transformation stage 84 in theencoder 70. Using header information decoded from the compressedbitstream 88, thedecoder 100 can use the intra/inter prediction stage 108 to create the same prediction block as was created in theencoder 70. At thereconstruction stage 110, the prediction block can be added to the derivative residual block to create a reconstructed block. Theloop filtering stage 112 can be applied to the reconstructed block to reduce blocking artifacts. Thedeblocking filtering stage 114 can be applied to the reconstructed block to reduce blocking distortion, and the result is output as theoutput video stream 116. - Other variations of the
decoder 100 can be used to decode thecompressed bitstream 88. For example, thedecoder 100 can produce theoutput video stream 116 without thedeblocking filtering stage 114. -
FIG. 5 is a block diagram of adaptivestochastic entropy encoding 500 in accordance with implementations of this disclosure. Implementations of adaptivestochastic entropy encoding 500 can include identifying a current portion of an input data stream at 510, performing forward adaptation at 520, encoding the portion of the input data stream at 530, performing backwards adaptation at 540, or a combination thereof. Adaptivestochastic entropy encoding 500, or any portion thereof, can be implemented in a device, such as the transmittingstation 12 shown inFIG. 1 . For example, an encoder, such as theencoder 70 shown inFIG. 3 , can implement adaptivestochastic entropy encoding 500, or any portion thereof, using instruction stored on a tangible, non-transitory, computer readable media, such asmemory 16 shown inFIG. 1 . - A current portion of an input data stream, such as the
input video stream 50 shown inFIGS. 2 and 3 , may be identified at 510. The current portion may be any portion of the input data stream, such as a frame, a row, a group of rows, a segment, a block, or a group of blocks. The size of the current portion may correspond with an update interval. For example, the current portion may be a frame and the update interval may be per frame. - Identifying the current portion may include generating symbol counts for the current portion. For example, a symbol count may be generated for each symbol in the input data stream. For the current portion, the symbol count for each symbol may be set to zero (0), and may be incremented for each appearance of a respective symbol in the current portion.
- Identifying the current portion may include identifying current probabilities for encoding the current portion. For example, the current probability for a symbol, such as the binary symbol 0, may be referred to as P. In an implementation, the current probabilities for generating an encoded portion may be identified at the encoder such that a decoder may identify equivalent probabilities for decoding the encoded portion. In an implementation, the encoder and the decoder may synchronize probabilities. For example, the current probabilities may be identified by the encoder and the decoder based on a key frame. In an implementation, the current probabilities may be based on backwards adaptation performed for a previously encoded portion of the input data stream.
- Forward adaptation may be performed at 520. Implementations of forward adaptation may include identifying forward update probabilities for the current portion and generating modified probabilities for the current portion. The forward update probabilities may be identified based on the distribution of the symbols (symbol counts) in the current portion. For example, the current probabilities may include the current probability P for a symbol, such as the binary symbol 0, and the forward update probability Q for the symbol may be identified based on the distribution (count) of the symbol in the current portion. The modified probabilities may be based on the current probabilities and the forward update probabilities. For example, the modified probability Q′ for a symbol, such as the binary symbol 0, may be based on the current probability P and the forward update probability Q for the symbol. Although binary symbols are described for simplicity, any symbols may be used. For example, a non-binary symbol may be converted to a binary symbol.
- Implementations of forward adaptation may include generating modified probabilities based on the current probabilities and the forward update probabilities. In an implementation, the forward update probability Q may be encoded lossily and differentially as the modified probability Q′ based on the current probability P. Forward adaptation may include differential encoding of the modified probability Q′ for a symbol in the current block using a variable length code. In an implementation, forward adaptation may be performed in an open-loop manner.
- For example, a differential d may be determined for each candidate probability q in a set of candidate probabilities based on the difference between the candidate probability q and the current probability P, which may be expressed as d=q−P. For example, the set of candidate probabilities may include probabilities in the range PSTART to PSTOP, where PSTART and PSTOP are limits of probability values that are searched. For example, the forward update probability Q may be greater than the current probability P, and PSTART may be P and PSTOP may be Q, such that probabilities between P and Q inclusive are searched. In some implementations, higher values of Q may be searched and PSTOP may be a multiple of Q, which may be expressed as PSTOP=Q+(Q−P)/2.
- Differential encoding may include identifying a number of bits for encoding d, identifying a savings metric based on the savings achieved when P is modified to q for each instance of a symbol in the current portion, and identifying a difference between the savings and a number of bits for encoding d. A value of q that maximizes the overall savings may be used as Q′. The corresponding d may be encoded in the bitstream, and may be decoded, for example at a decoder, to obtain Q′, which may be expressed as Q′=P+d.
- In an implementation, the probabilities may be in the set 1 to PMAX. For example, 8-bit precision may be used to represent the probabilities, and PMAX may be 28−1 or 255. The probabilities or zero and 256 may be excluded from the encoded bit-stream. The differential d may be in the set {−P+1, −P+2, . . . , −1, 0, 1, . . . , PMAX−d}. In some implementations, the variable length code for the differential d may be generated such that values {−aM, −(a−1)M, . . . , −2M, −M, 0, M, 2M, . . . , (b−1)M, bM} have a smaller code length than the rest of the values. M may be a small number such that every M value of probability (i.e. at a lower precision) is significantly cheaper to encode than the corresponding full precision value. This may ensure that the search process finds a value Q′ that is close enough to Q to produce optimal, or nearly optimal, bit-rate savings, but which is also significantly cheaper to transmit.
- In an implementation, forward adaptation may include, for P in {1, 2, . . . , PMAX}, generate an index mapping scheme that maps Q to a value R in {0, 1, 2, . . . , PMAX−1} by scanning the values starting from P and alternating between the positive and negative values, such that consecutive values are at differences d={0, 1, −1, 2, −2, 3, −3, . . . } from P with appropriate corrections for the bounds of P(1 and PMAX). For example, P may be closer to the upper bound PMAX, and the values of d={0, 1, −1, 2, −2, . . . , PMAX−d, −(PMAX−d), −(PMAX−d)−1, (−PMAX−d)−2, . . . , −d+1} may be mapped to values of R={0, 1, 2, 3, 4, . . . , PMAX−1} respectively. R may be naturally organized such that smaller values correspond to smaller differences and larger values correspond to higher differences. Implementations of forward adaptation may include a second round of index mapping where R maps to S in {0, 1, . . . , PMAX−1} such that values of R that are multiples of M, which may be a small value such as {0, M, 2M, . . . }, may be mapped to {0, 1, 2, . . . } respectively and other values that are not multiples of M may be pushed back to higher values in order. This value of S may be between 1 and PMAX−1, and can be coded simply using, for example, a terminated exponential Golomb or sub-exponential code. The value of S=0 may correspond to R=0 and may correspond to the difference d=0, such that S=0 may indicate no update to the probability. In some implementations, the value of S may be encoded separately. For example, a single bit may be encoded using, for example, arithmetic coding, which may indicate whether there is a probability update, and if there is an update the value of S−1 may be encoded using an exponential Golomb or sub-exponential code. Other implementations of forward adaptation may be used.
- The current portion of the input data stream may be encoded using the modified probabilities at 530. For example, each symbol in the current portion may be encoded using a corresponding code from the modified probabilities identified at 520. In an implementation, a symbol, such as the binary symbol 0, may be encoded using the modified probability Q′. The encoded symbols (codes) may be included in the output data stream.
- Backwards adaptation may be performed at 540. Implementations of backwards adaptation may include determining adapted probabilities based on the current probabilities and the forward update probabilities. For example, the adapted probabilities may be determined based on a weighted average of the current probabilities and the forward update probabilities. Although the forward update probabilities may be used as the adapted probabilities, using a weighted average may reduce noise error and improve stability. The weighting may be based on symbol count for the current portion. In some implementations, higher symbol counts may indicate that the generated probabilities are more accurate. For example, the symbol counts may be high and the generated probabilities may be given a high weight, or the symbol counts may be low and the generated probabilities may be given a low weight.
- In an implementation, the adapted probability P′ for a symbol, such as the binary symbol 0, may be determined based on the current probability P for the symbol, the forward update probability Q for the symbol, and a weight α. The weight α may be based on the count n of the symbol in the current portion, a maximum update threshold A, such as 0.5, and a count saturation threshold N, such as 16. For example, generating an adapted probability P′ for a symbol based on a forward update probability Q may be expressed as the following where the weight α=n*A/N for n<=N and α=A for n>N:
-
P′=(1−α)*P+α*Q. [Equation 1] - The adapted probabilities may be used for encoding another portion of the input data stream.
- Other implementations of the diagram of adaptive stochastic entropy encoding as shown in
FIG. 5 are available. In implementations, additional elements of adaptive stochastic entropy encoding can be added, certain elements can be combined, or certain elements can be removed. For example, in an implementation, forward adaptation can be skipped or omitted for one or more portions and the symbols can be encoded using the current probabilities. -
FIG. 6 is a block diagram of adaptivestochastic entropy decoding 600 in accordance with implementations of this disclosure. Implementations of adaptivestochastic entropy decoding 600 can include identifying a current portion of an encoded data stream at 610, performing forward adaptation at 620, decoding the current portion at 630, performing backwards adaptation at 640, or a combination thereof. Adaptivestochastic entropy decoding 600, or any portion thereof, can be implemented in a device, such as the receivingstation 30 shown inFIG. 1 . For example, a decoder, such as thedecoder 100 shown inFIG. 4 , can implement adaptivestochastic entropy decoding 600, or any portion thereof, using instruction stored on a tangible, non-transitory, computer readable media, such asmemory 34 shown inFIG. 1 . - A current portion of an encoded data stream, such as the
compressed bit stream 88 shown inFIGS. 3 and 4 , may be identified at 610. Identifying the current portion may include identifying current probabilities associated with the current portion. For example, the current probability p associated with a symbol, such as the binary symbol 0, may identified. In an implementation, the current probabilities may be identified at the decoder such that an encoder may identify equivalent probabilities. In an implementation, the encoder and the decoder may synchronize probabilities. For example, the current probabilities may be identified by the encoder and the decoder using a key frame. In an implementation, the current probabilities may be based on backwards adaptation performed for a previously decoded portion of the input data stream. - Forward adaptation may be performed at 620. Implementations of forward adaptation may include decoding modified probabilities from the encoded data stream for decoding the current portion. For example, the decoder may decode a modified probability Q′ from the encoded video stream using the current probability P.
- The current portion may be decoded at 630. In an implementation, the modified probabilities may be used to decode the current portion. For example, the current portion may include a code corresponding to a symbol, such as the binary symbol 0, and the decoder may use the modified probability Q′ corresponding to the code to decode the symbol. In an implementation, decoding the current portion may include maintaining symbol counts for each symbol in the current portion.
- In an implementation, decoding the current portion may include identifying forward update probabilities. The forward update probabilities may be identified based on the distribution of the symbols (symbol counts) in the current portion. For example, the current probabilities may include the current probability P for a symbol, such as the binary symbol 0, and the forward update probability Q for the symbol may be identified based on the distribution (count) of the symbol in the current portion.
- Backwards adaptation may be performed at 640. Implementations of backwards adaptation may include determining adapted probabilities based on the current probabilities and the forward update probabilities. For example, the adapted probabilities may be determined based on a weighted average of the current probabilities and the forward update probabilities. Although the forward update probabilities may be used as the adapted probabilities, using a weighted average may reduce noise error and improve stability. The weighting may be based on symbol count for the current portion. In some implementations, higher symbol counts may indicate that the generated probabilities are more accurate. For example, the symbol counts may be high and the generated probabilities may be given a high weight, or the symbol counts may be low and the generated probabilities may be given a low weight.
- In an implementation, the adapted probability P′ for a symbol, such as the binary symbol 0, may be determined based on the current probability P for the symbol, the forward update probability Q for the symbol, and a weight α. The weight α may be based on the count n of the symbol in the current portion, a maximum update threshold A, such as 0.5, and a count saturation threshold N, such as 16. For example, generating an adapted probability P′ for a symbol based on a forward update probability Q may be expressed as the following where the weight α=n*A/N for n<=N and α=A for n>N:
-
P′=(1−α)*P+α*Q. [Equation 2] - The adapted probabilities may be used for decoding another portion of the input data stream.
- Other implementations of the diagram of adaptive stochastic entropy decoding as shown in
FIG. 6 are available. In implementations, additional elements of adaptive stochastic entropy decoding can be added, certain elements can be combined, or certain elements can be removed. For example, in an implementation, forward adaptation can be skipped or omitted for one or more portions and the symbols can be decoded using the current probabilities. - The words “example” or “exemplary” are used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as “example” or “exemplary” is not necessarily to be construed as preferred or advantageous over other aspects or designs. Rather, use of the words “example” or “exemplary” is intended to present concepts in a concrete fashion. As used in this application, the term “or” is intended to mean an inclusive “or” rather than an exclusive “or”. That is, unless specified otherwise, or clear from context, “X includes A or B” is intended to mean any of the natural inclusive permutations. That is, if X includes A; X includes B; or X includes both A and B, then “X includes A or B” is satisfied under any of the foregoing instances. In addition, the articles “a” and “an” as used in this application and the appended claims should generally be construed to mean “one or more” unless specified otherwise or clear from context to be directed to a singular form. Moreover, use of the term “an embodiment” or “one embodiment” or “an implementation” or “one implementation” throughout is not intended to mean the same embodiment or implementation unless described as such. As used herein, the terms “determine” and “identify”, or any variations thereof, includes selecting, ascertaining, computing, looking up, receiving, determining, establishing, obtaining, or otherwise identifying or determining in any manner whatsoever using one or more of the devices shown in
FIG. 1 . - Further, for simplicity of explanation, although the figures and descriptions herein may include sequences or series of steps or stages, elements of the methods disclosed herein can occur in various orders and/or concurrently. Additionally, elements of the methods disclosed herein may occur with other elements not explicitly presented and described herein. Furthermore, not all elements of the methods described herein may be required to implement a method in accordance with the disclosed subject matter.
- The implementations of encoding and decoding described herein illustrate some exemplary encoding and decoding techniques. However, it is to be understood that encoding and decoding, as those terms are used herein may include compression, decompression, transformation, or any other processing or change of data.
- The implementations of the transmitting
station 12 and/or the receiving station 30 (and the algorithms, methods, instructions, etc. stored thereon and/or executed thereby) can be realized in hardware, software, or any combination thereof. The hardware can include, for example, computers, intellectual property (IP) cores, application-specific integrated circuits (ASICs), programmable logic arrays, optical processors, programmable logic controllers, microcode, microcontrollers, servers, microprocessors, digital signal processors or any other suitable circuit. In the claims, the term “processor” should be understood as encompassing any of the foregoing hardware, either singly or in combination. The terms “signal” and “data” are used interchangeably. Further, portions of the transmittingstation 12 and the receivingstation 30 do not necessarily have to be implemented in the same manner. - Further, in one implementation, for example, the transmitting
station 12 or the receivingstation 30 can be implemented using a general purpose computer or general purpose/processor with a computer program that, when executed, carries out any of the respective methods, algorithms and/or instructions described herein. In addition or alternatively, for example, a special purpose computer/processor can be utilized which can contain specialized hardware for carrying out any of the methods, algorithms, or instructions described herein. - The transmitting
station 12 and receivingstation 30 can, for example, be implemented on computers in a real-time video system. Alternatively, the transmittingstation 12 can be implemented on a server and the receivingstation 30 can be implemented on a device separate from the server, such as a hand-held communications device. In this instance, the transmittingstation 12 can encode content using anencoder 70 into an encoded video signal and transmit the encoded video signal to the communications device. In turn, the communications device can then decode the encoded video signal using adecoder 100. Alternatively, the communications device can decode content stored locally on the communications device, for example, content that was not transmitted by the transmittingstation 12. Other suitable transmittingstation 12 and receivingstation 30 implementation schemes are available. For example, the receivingstation 30 can be a generally stationary personal computer rather than a portable communications device and/or a device including anencoder 70 may also include adecoder 100. - Further, all or a portion of implementations can take the form of a computer program product accessible from, for example, a tangible computer-usable or computer-readable medium. A computer-usable or computer-readable medium can be any device that can, for example, tangibly contain, store, communicate, or transport the program for use by or in connection with any processor. The medium can be, for example, an electronic, magnetic, optical, electromagnetic, or a semiconductor device. Other suitable mediums are also available.
- The above-described implementations have been described in order to allow easy understanding of the application are not limiting. On the contrary, the application covers various modifications and equivalent arrangements included within the scope of the appended claims, which scope is to be accorded the broadest interpretation so as to encompass all such modifications and equivalent structure as is permitted under the law.
Claims (22)
1. An apparatus for use in decoding a video stream using adaptive stochastic entropy coding, the apparatus comprising:
a non-transitory computer-readable memory including instructions for adaptive stochastic entropy coding; and
a processor, operatively coupled to the non-transitory computer-readable memory, for receiving the instructions from the non-transitory computer-readable memory and executing the instructions for adaptive stochastic entropy coding comprising:
identifying a current probability distribution;
decoding a modified probability distribution from an encoded video stream using the current probability distribution;
generating a decoded current portion of a video stream by decoding the current portion from the encoded video stream using the modified probability distribution;
identifying a forward update probability distribution for the current portion;
generating an adapted probability distribution based on the current probability distribution and the forward update probability distribution; and
including the decoded current portion in an output for presentation.
2. The apparatus of claim 1 , wherein the processor executes the instructions such that:
identifying the current probability distribution includes using an adapted probability distribution generated for a previously decoded portion of the encoded video stream as the current probability distribution.
3. The apparatus of claim 1 , wherein the processor executes the instructions such that:
decoding the current portion includes generating symbol counts for the current portion.
4. The apparatus of claim 1 , wherein the forward update probability distribution is based on symbol counts for the current portion.
5. The apparatus of claim 1 , wherein the processor executes the instructions such that adaptive stochastic entropy coding includes:
decoding a second modified probability distribution from the encoded video stream using the adapted probability distribution to decode the second modified probability distribution;
decoding a second current portion from the encoded video steam using the second modified probability distribution to decode the second current portion;
identifying a second forward update probability distribution based on the second current portion; and
generating a second adapted probability distribution based on the second modified probability distribution and the second forward update probability distribution.
6. The apparatus of claim 1 , wherein:
the current portion includes a plurality of symbols, wherein decoding the current portion from the encoded video stream using the modified probability distribution includes decoding each symbol from the plurality of symbols using the modified probability distribution;
the current probability distribution includes a plurality of current probabilities such that a symbol in the plurality of symbols is associated with a current probability in the plurality of current probabilities;
the forward update probability distribution includes a plurality of forward update probabilities such that the symbol is associated with a forward update probability in the plurality of forward update probabilities;
the adapted probability distribution includes a plurality of adapted probabilities such that the symbol is associated with an adapted probability in the plurality of adapted probabilities; and
generating the adapted probability distribution includes generating the adapted probability using a weighted average of the current probability and the forward update probability.
7. The apparatus of claim 6 , wherein using the weighted average includes using a sum of a weighted current probability and a weighted forward update probability, and wherein:
the weighted current probability is a product of the current probability and a difference between one and a weight;
the weighted forward update probability is a product of the forward update probability and the weight;
on a condition that a cardinality of a symbol count associated with the symbol and the current portion is greater than a count saturation threshold, the weight is a maximum update threshold; and
on a condition that the cardinality is less than or equal to the count saturation threshold, the weight is a product of the cardinality and a quotient of the maximum update threshold and the count saturation threshold.
8. The apparatus of claim 6 , wherein:
the current portion includes a plurality of symbols;
the current probability distribution includes a plurality of current probabilities such that a symbol in the plurality of symbols is associated with a current probability in the plurality of current probabilities; and
the modified probability distribution includes a plurality of modified probabilities such that a symbol in the plurality of symbols is associated with a modified probability in the plurality of modified probabilities, and wherein decoding the modified probability distribution using the current probability distribution includes:
decoding a differential from the encoded video stream; and
determining the modified probability as a sum of the differential and the current probability.
9. An apparatus for use in encoding a video stream using adaptive stochastic entropy coding, the apparatus comprising:
a non-transitory computer-readable memory including instructions for adaptive stochastic entropy coding; and
a processor, operatively coupled to the non-transitory computer-readable memory, for receiving the instructions from the non-transitory computer-readable memory and executing the instructions for adaptive stochastic entropy coding comprising:
identifying a current portion of an input video stream;
identifying a current probability distribution;
identifying a forward update probability distribution based on symbol counts for the current portion;
generating a modified probability distribution for the current portion based on the forward update probability distribution and the current probability distribution;
generating an encoded portion by encoding the current portion using the modified probability distribution;
generating an adapted probability distribution based on the current probability distribution and the forward update probability distribution;
including the encoded portion in the output bitstream; and
storing or transmitting the output bitstream.
10. The apparatus of claim 9 , wherein the processor executes the instructions such that:
identifying the current probability distribution includes using an adapted probability distribution generated based on a previously encoded portion of the video stream as the current probability distribution.
11. The apparatus of claim 9 , wherein the processor executes the instructions such that:
identifying the current portion includes generating symbol counts for the current portion.
12. The apparatus of claim 9 , wherein the processor executes the instructions such that:
including the encoded portion in the output bitstream includes encoding the modified probability distribution.
13. The apparatus of claim 12 , wherein the processor executes the instructions such that:
encoding the modified probability distribution includes encoding the modified probability distribution on a condition that a cost for encoding the forward update probability exceeds a cost for encoding the modified probability distribution.
14. The apparatus of claim 9 , wherein:
the current portion includes a plurality of symbols;
the current probability distribution includes a plurality of current probabilities such that a symbol in the plurality of symbols is associated with a current probability in the plurality of current probabilities;
the forward update probability distribution includes a plurality of forward update probabilities such that the symbol is associated with a forward update probability in the plurality of forward update probabilities;
the adapted probability distribution includes a plurality of adapted probabilities such that the symbol is associated with an adapted probability in the plurality of adapted probabilities; and
generating the adapted probability distribution includes generating the adapted probability using a weighted average of the current probability and the forward update probability.
15. The apparatus of claim 14 , wherein using the weighted average includes using a sum of a weighted current probability and a weighted forward update probability as the weighted average, and wherein:
the weighted current probability is a product of the current probability and a difference between one and a weight;
the weighted forward update probability is a product of the forward update probability and the weight;
on a condition that a cardinality of a symbol count associated with the symbol and the current portion is greater than a count saturation threshold, the weight is a maximum update threshold; and
on a condition that the cardinality is less than or equal to the count saturation threshold, the weight is a product of the cardinality and a quotient of the maximum update threshold and the count saturation threshold.
16. The apparatus of claim 9 , wherein:
the current portion includes a plurality of symbols, wherein encoding the current portion using the modified probability distribution includes encoding each symbol from the plurality of symbols using the modified probability distribution;
the current probability distribution includes a plurality of current probabilities such that a symbol in the plurality of symbols is associated with a current probability in the plurality of current probabilities;
the forward update probability distribution includes a plurality of forward update probabilities such that the symbol is associated with a forward update probability in the plurality of forward update probabilities; and
generating the modified probability distribution includes identifying a modified probability associated with the symbol by identifying an optimal modified probability that is near the forward update probability based on the current probability.
17. The apparatus of claim 16 , wherein identifying the optimal modified probability that is near the forward update probability based on the current probability includes:
determining a plurality of differentials, wherein each differential from the plurality of differentials is a difference between a respective candidate probability from a plurality of candidate probabilities and the current probability.
18. The apparatus of claim 17 , wherein the plurality of candidate probabilities includes candidate probabilities in a defined range having a defined lower limit and a defined upper limit.
19. The apparatus of claim 18 , wherein, on a condition that the forward update probability is greater than the current probability, the defined lower limit is the current probability and the defined upper limit is the forward update probability.
20. The apparatus of claim 18 , wherein the defined upper limit is a quotient of a sum of the forward update probability and a difference between the forward update probability and the current probability.
21. The apparatus of claim 17 , wherein identifying the optimal modified probability that is near the forward update probability based on the current probability includes:
for each candidate probability from the plurality of candidate probabilities:
identifying a first savings metric as a difference between a cost for encoding the symbol for the current portion using the candidate probability and a cost for encoding the symbol for the current portion using the current probability; and
identifying a second savings metric as a difference between the first savings metric and a cost for encoding a differential from the plurality of differentials, the differential corresponding to the candidate probability; and
identifying a candidate probability from the plurality of candidate probabilities as the optimal modified probability, the candidate probability having a maximal second savings metric.
22. The apparatus of claim 21 , wherein including the encoded portion in the output bitstream includes encoding the modified probability distribution and wherein encoding the modified probability distribution includes:
generating an encoded differential by encoding the differential corresponding to the optimal modified probability; and
including the encoded differential in the output bitstream.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/705,751 US10284854B2 (en) | 2012-07-02 | 2017-09-15 | Adaptive stochastic entropy coding |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/539,753 US9774856B1 (en) | 2012-07-02 | 2012-07-02 | Adaptive stochastic entropy coding |
US15/705,751 US10284854B2 (en) | 2012-07-02 | 2017-09-15 | Adaptive stochastic entropy coding |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/539,753 Continuation US9774856B1 (en) | 2012-07-02 | 2012-07-02 | Adaptive stochastic entropy coding |
Publications (2)
Publication Number | Publication Date |
---|---|
US20180007361A1 true US20180007361A1 (en) | 2018-01-04 |
US10284854B2 US10284854B2 (en) | 2019-05-07 |
Family
ID=59886470
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/539,753 Active 2035-05-26 US9774856B1 (en) | 2012-07-02 | 2012-07-02 | Adaptive stochastic entropy coding |
US15/705,751 Active US10284854B2 (en) | 2012-07-02 | 2017-09-15 | Adaptive stochastic entropy coding |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/539,753 Active 2035-05-26 US9774856B1 (en) | 2012-07-02 | 2012-07-02 | Adaptive stochastic entropy coding |
Country Status (1)
Country | Link |
---|---|
US (2) | US9774856B1 (en) |
Families Citing this family (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11177823B2 (en) | 2018-05-21 | 2021-11-16 | Google Llc | Data compression by local entropy encoding |
US10652581B1 (en) * | 2019-02-27 | 2020-05-12 | Google Llc | Entropy coding in image and video compression using machine learning |
Family Cites Families (121)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JPS60186179A (en) | 1984-03-06 | 1985-09-21 | Nec Corp | System and device for predictive coding of picture signal |
JPS6192073A (en) | 1984-10-12 | 1986-05-10 | Hitachi Ltd | Picture data compression system |
JPH0797753B2 (en) | 1989-01-24 | 1995-10-18 | 日本ビクター株式会社 | Encoding output data amount control method |
JP2743434B2 (en) | 1989-02-17 | 1998-04-22 | 日本ビクター株式会社 | Motion compensated interframe predictive coding circuit |
JPH02272970A (en) | 1989-04-14 | 1990-11-07 | Sony Corp | Data processing circuit |
US5150209A (en) | 1990-05-11 | 1992-09-22 | Picturetel Corporation | Hierarchical entropy coded lattice threshold quantization encoding method and apparatus for image and video compression |
US5260783A (en) | 1991-02-21 | 1993-11-09 | Gte Laboratories Incorporated | Layered DCT video coder for packet switched ATM networks |
US5461423A (en) | 1992-05-29 | 1995-10-24 | Sony Corporation | Apparatus for generating a motion vector with half-pixel precision for use in compressing a digital motion picture signal |
KR970009408B1 (en) | 1994-01-18 | 1997-06-13 | 대우전자 주식회사 | Inter/intra table selection circuit |
KR100213018B1 (en) | 1994-07-30 | 1999-08-02 | 윤종용 | Apparatus for encoding moving picture |
US5708473A (en) | 1994-08-30 | 1998-01-13 | Hughes Aircraft Company | Two stage video film compression method and system |
KR0178198B1 (en) | 1995-03-28 | 1999-05-01 | 배순훈 | Apparatus for encoding an image signal |
US5936673A (en) | 1995-05-26 | 1999-08-10 | Intel Corporation | Temporal tile staggering for block based video compression |
KR0153671B1 (en) | 1995-06-30 | 1998-11-16 | 배순훈 | Rate controller of hdtv encoder |
AU6376296A (en) | 1995-07-11 | 1997-02-10 | Telefonaktiebolaget Lm Ericsson (Publ) | Video coding |
CA2180189C (en) | 1995-08-03 | 2001-07-03 | Satoru Adachi | Variable length coded data transmission device |
GB9519923D0 (en) | 1995-09-29 | 1995-11-29 | Philips Electronics Nv | Motion estimation for predictive image coding |
JP3157101B2 (en) | 1996-03-08 | 2001-04-16 | 沖電気工業株式会社 | Image encoding method and image encoding device |
DE69726661T2 (en) | 1996-03-15 | 2004-09-30 | Koninklijke Philips Electronics N.V. | METHOD AND DEVICE FOR CODING A DIGITAL INFORMATION SIGNAL |
DE19721728C2 (en) | 1997-05-24 | 2001-07-12 | Byk Chemie Gmbh | Dispersants for pigments or fillers based on acrylic acid alkyl ester polymers, use and process for producing them |
JP3381827B2 (en) | 1997-06-04 | 2003-03-04 | 富士ゼロックス株式会社 | Color image encoding device and color image decoding device |
SE512291C2 (en) | 1997-09-23 | 2000-02-28 | Ericsson Telefon Ab L M | Embedded DCT-based still image coding algorithm |
US5956431A (en) | 1997-10-02 | 1999-09-21 | S3 Incorporated | System and method for fixed-rate block-based image compression with inferred pixel values |
US6501860B1 (en) | 1998-01-19 | 2002-12-31 | Canon Kabushiki Kaisha | Digital signal coding and decoding based on subbands |
JP3856262B2 (en) | 1998-03-09 | 2006-12-13 | 日本ビクター株式会社 | Motion compensation encoding apparatus, motion compensation encoding method, and motion compensation code recording medium |
JPH11289544A (en) | 1998-04-02 | 1999-10-19 | Sony Corp | Motion detector and its method |
US6314208B1 (en) | 1998-07-21 | 2001-11-06 | Hewlett-Packard Company | System for variable quantization in JPEG for compound documents |
US6256423B1 (en) | 1998-09-18 | 2001-07-03 | Sarnoff Corporation | Intra-frame quantizer selection for video compression |
US6570924B1 (en) | 1998-11-20 | 2003-05-27 | Interval Research Corp | Low cost video compression using fast, modified Z-coding of wavelet pyramids |
US6418166B1 (en) | 1998-11-30 | 2002-07-09 | Microsoft Corporation | Motion estimation and block matching pattern |
US6434197B1 (en) | 1999-01-07 | 2002-08-13 | General Instrument Corporation | Multi-functional transcoder for compressed bit streams |
EP1035735A3 (en) | 1999-03-12 | 2007-09-05 | Kabushiki Kaisha Toshiba | Moving image coding and decoding apparatus optimised for the application of the Real Time Protocol (RTP) |
JP3302939B2 (en) | 1999-03-12 | 2002-07-15 | アールシーエー トムソン ライセンシング コーポレイシヨン | Video signal decompressor for independently compressed even and odd field data |
EP1120976A4 (en) | 1999-07-29 | 2006-03-29 | Mitsubishi Electric Corp | Moving vector detecting method |
US6671319B1 (en) | 1999-12-28 | 2003-12-30 | Sony Corporation | Methods and apparatus for motion estimation using neighboring macroblocks |
KR100750092B1 (en) | 2000-01-28 | 2007-08-21 | 삼성전자주식회사 | Variable Length Coding method and device therefor |
US6661925B1 (en) | 2000-03-22 | 2003-12-09 | Board Of Supervisors Of Louisiana State University & Agricultural & Mechanical College | Functional set compression |
US6522784B1 (en) | 2000-04-11 | 2003-02-18 | International Business Machines Corporation | Enhanced compression of gray-level images |
KR100856398B1 (en) | 2000-05-17 | 2008-09-04 | 삼성전자주식회사 | Variable-length coding and decoding method and apparatus using plural mapping tables |
KR100708091B1 (en) | 2000-06-13 | 2007-04-16 | 삼성전자주식회사 | Frame rate converter using bidirectional motion vector and method thereof |
FI120125B (en) | 2000-08-21 | 2009-06-30 | Nokia Corp | Image Coding |
US6661842B1 (en) | 2000-09-22 | 2003-12-09 | General Dynamics Decision Systems, Inc. | Methods and apparatus for error-resilient video coding |
US9143546B2 (en) | 2000-10-03 | 2015-09-22 | Realtime Data Llc | System and method for data feed acceleration and encryption |
JP2002141806A (en) | 2000-10-31 | 2002-05-17 | Hitachi Ltd | Variable length code decoding device |
AU2002250278A1 (en) | 2001-03-07 | 2002-09-19 | Pts Corporation | Local constraints for motion estimation |
US7483581B2 (en) | 2001-07-02 | 2009-01-27 | Qualcomm Incorporated | Apparatus and method for encoding digital image data in a lossless manner |
JP2003046944A (en) | 2001-08-02 | 2003-02-14 | Sony Corp | Signal processing equipment and method therefor, recording equipment and method therefor, regenerating equipment and method therefor, video camera, and image monitor |
US7643559B2 (en) | 2001-09-14 | 2010-01-05 | Ntt Docomo, Inc. | Coding method, decoding method, coding apparatus, decoding apparatus, image processing system, coding program, and decoding program |
US6856701B2 (en) | 2001-09-14 | 2005-02-15 | Nokia Corporation | Method and system for context-based adaptive binary arithmetic coding |
EP1470726A1 (en) | 2001-12-31 | 2004-10-27 | STMicroelectronics Asia Pacific Pte Ltd. | Video encoding |
US7190840B2 (en) | 2002-01-07 | 2007-03-13 | Hewlett-Packard Development Company, L.P. | Transform coefficient compression using multiple scans |
DE10204617B4 (en) | 2002-02-05 | 2005-02-03 | Siemens Ag | Methods and apparatus for compressing and decompressing a video data stream |
JP3864098B2 (en) | 2002-02-08 | 2006-12-27 | 日本電信電話株式会社 | Moving picture encoding method, moving picture decoding method, execution program of these methods, and recording medium recording these execution programs |
US7116831B2 (en) | 2002-04-10 | 2006-10-03 | Microsoft Corporation | Chrominance motion vector rounding |
JP3807342B2 (en) | 2002-04-25 | 2006-08-09 | 三菱電機株式会社 | Digital signal encoding apparatus, digital signal decoding apparatus, digital signal arithmetic encoding method, and digital signal arithmetic decoding method |
ES2401991T3 (en) | 2002-04-26 | 2013-04-26 | Ntt Docomo, Inc. | Device for image coding, procedure for image coding and program for image coding |
US6907079B2 (en) | 2002-05-01 | 2005-06-14 | Thomson Licensing S.A. | Deblocking filter conditioned on pixel brightness |
DE50305419D1 (en) | 2002-05-02 | 2006-11-30 | Fraunhofer Ges Forschung | Encoding and decoding of transform coefficients in image or video encoders |
US7469012B2 (en) | 2002-05-14 | 2008-12-23 | Broadcom Corporation | System and method for transcoding entropy-coded bitstreams |
JP2004015501A (en) | 2002-06-07 | 2004-01-15 | Nec Corp | Apparatus and method for encoding moving picture |
KR100865034B1 (en) | 2002-07-18 | 2008-10-23 | 엘지전자 주식회사 | Method for predicting motion vector |
WO2004030369A1 (en) | 2002-09-27 | 2004-04-08 | Videosoft, Inc. | Real-time video coding/decoding |
US20040120398A1 (en) | 2002-12-19 | 2004-06-24 | Ximin Zhang | System and method for adaptive field and frame video encoding using rate-distortion characteristics |
US20040131117A1 (en) | 2003-01-07 | 2004-07-08 | Sheraizin Vitaly S. | Method and apparatus for improving MPEG picture compression |
US8040949B2 (en) | 2003-01-09 | 2011-10-18 | The Regents Of The University Of California | Video encoding methods and devices |
US7373005B2 (en) | 2003-04-10 | 2008-05-13 | Micron Technology, Inc. | Compression system for integrated sensor devices |
US8824553B2 (en) | 2003-05-12 | 2014-09-02 | Google Inc. | Video compression method |
JP4419458B2 (en) | 2003-07-14 | 2010-02-24 | リコープリンティングシステムズ株式会社 | Inkjet head manufacturing method |
CN100541537C (en) | 2003-11-24 | 2009-09-16 | 廖宏 | A kind of method of utilizing computing machine to the compression of digitizing files |
US7379608B2 (en) | 2003-12-04 | 2008-05-27 | Fraunhofer-Gesellschaft Zur Foerderung Der Angewandten Forschung, E.V. | Arithmetic coding for transforming video and picture data units |
KR101044935B1 (en) | 2004-01-14 | 2011-06-28 | 삼성전자주식회사 | Decoding method for detecting transmission error position and recovering correctly decoded data and appratus therefor |
US20050201470A1 (en) | 2004-03-12 | 2005-09-15 | John Sievers | Intra block walk around refresh for H.264 |
KR100982518B1 (en) | 2004-06-11 | 2010-09-16 | 삼성전자주식회사 | Method of and apparatus for predict DC coefficient of video data unit |
JP2006033148A (en) | 2004-07-13 | 2006-02-02 | Matsushita Electric Ind Co Ltd | Variable length code table switching method using information of neighboring block |
JP2006060813A (en) | 2004-08-20 | 2006-03-02 | Polycom Inc | Error concealment in video decoder |
US7620103B2 (en) | 2004-12-10 | 2009-11-17 | Lsi Corporation | Programmable quantization dead zone and threshold for standard-based H.264 and/or VC1 video encoding |
NO322043B1 (en) | 2004-12-30 | 2006-08-07 | Tandberg Telecom As | Procedure for simplified entropy coding |
US8311119B2 (en) | 2004-12-31 | 2012-11-13 | Microsoft Corporation | Adaptive coefficient scan order |
US7706443B2 (en) | 2005-03-11 | 2010-04-27 | General Instrument Corporation | Method, article of manufacture, and apparatus for high quality, fast intra coding usable for creating digital video content |
EP1768415A1 (en) | 2005-09-27 | 2007-03-28 | Matsushita Electric Industrial Co., Ltd. | Adaptive scan order of DCT coefficients and its signaling |
US20070025441A1 (en) | 2005-07-28 | 2007-02-01 | Nokia Corporation | Method, module, device and system for rate control provision for video encoders capable of variable bit rate encoding |
CN100403801C (en) | 2005-09-23 | 2008-07-16 | 联合信源数字音视频技术（北京）有限公司 | Adaptive entropy coding/decoding method based on context |
WO2007063472A2 (en) | 2005-11-30 | 2007-06-07 | Koninklijke Philips Electronics N.V. | Encoding method and apparatus applying coefficient reordering |
US20070136742A1 (en) | 2005-12-13 | 2007-06-14 | General Instrument Corporation | Method, apparatus and system for replacing advertisements in recorded video content |
WO2007081177A1 (en) | 2006-01-12 | 2007-07-19 | Lg Electronics Inc. | Processing multiview video |
WO2007112472A1 (en) | 2006-03-31 | 2007-10-11 | Commonwealth Scientific And Industrial Research Organisation | Decoding frequency channelised signals |
US8275045B2 (en) | 2006-07-12 | 2012-09-25 | Qualcomm Incorporated | Video compression using adaptive variable length codes |
US8254700B1 (en) | 2006-10-03 | 2012-08-28 | Adobe Systems Incorporated | Optimized method and system for entropy coding |
JP4717780B2 (en) | 2006-11-01 | 2011-07-06 | キヤノン株式会社 | Encoding apparatus and control method thereof |
JP5026092B2 (en) | 2007-01-12 | 2012-09-12 | 三菱電機株式会社 | Moving picture decoding apparatus and moving picture decoding method |
US7949195B2 (en) | 2007-01-16 | 2011-05-24 | Cisco Technology, Inc. | Per block breakpoint determining for hybrid variable length coding |
DE102007020292A1 (en) | 2007-04-30 | 2008-11-13 | Siemens Ag | Method for compressing data using run-length coding, in particular for medical image data |
CN101039430B (en) | 2007-05-08 | 2011-01-12 | 清华大学 | Method for scanning quickly residual matrix in video coding |
KR101539240B1 (en) | 2007-06-14 | 2015-07-30 | 삼성전자주식회사 | Method and apparatus for encoding and decoding image data |
US8571104B2 (en) | 2007-06-15 | 2013-10-29 | Qualcomm, Incorporated | Adaptive coefficient scanning in video coding |
US8331444B2 (en) | 2007-06-26 | 2012-12-11 | Qualcomm Incorporated | Sub-band scanning techniques for entropy coding of sub-bands |
US8401083B2 (en) | 2007-09-18 | 2013-03-19 | Ubiquity Holdings, Inc | Extreme video compression over a fixed bandwidth channel |
US8265162B2 (en) | 2007-10-01 | 2012-09-11 | Cisco Technology, Inc. | Context adaptive position and amplitude coding of coefficients for video compression |
US8891615B2 (en) | 2008-01-08 | 2014-11-18 | Qualcomm Incorporated | Quantization based on rate-distortion modeling for CABAC coders |
EP2235950A1 (en) | 2008-01-18 | 2010-10-06 | Intel Corporation | Separate huffman coding of runlength and size data of dct coefficients |
KR101291196B1 (en) | 2008-01-25 | 2013-07-31 | 삼성전자주식회사 | Video encoding method and apparatus, and video decoding method and apparatus |
US20100098169A1 (en) | 2008-10-16 | 2010-04-22 | Texas Instruments Incorporated | Method and apparatus for motion estimation using compressed reference frame |
US7932843B2 (en) | 2008-10-17 | 2011-04-26 | Texas Instruments Incorporated | Parallel CABAC decoding for video decompression |
WO2011022047A1 (en) * | 2009-08-21 | 2011-02-24 | Thomson Licensing | Methods and apparatus for explicit updates for symbol probabilities of an entropy encoder or decoder |
US8340448B2 (en) | 2009-10-06 | 2012-12-25 | Cisco Technology, Inc. | Locally variable quantization and hybrid variable length coding for image and video compression |
SG172459A1 (en) | 2009-12-01 | 2011-08-29 | Intel Corp | Compression using range coding with virtual sliding window |
KR101503269B1 (en) | 2010-04-05 | 2015-03-17 | 삼성전자주식회사 | Method and apparatus for determining intra prediction mode of image coding unit, and method and apparatus for determining intra predion mode of image decoding unit |
PL2559166T3 (en) | 2010-04-13 | 2018-04-30 | Fraunhofer-Gesellschaft zur Förderung der angewandten Forschung e.V. | Probability interval partioning encoder and decoder |
US8934540B2 (en) | 2010-07-20 | 2015-01-13 | Cisco Technology, Inc. | Video compression using multiple variable length coding methods for multiple types of transform coefficient blocks |
US8344917B2 (en) | 2010-09-30 | 2013-01-01 | Sharp Laboratories Of America, Inc. | Methods and systems for context initialization in video coding and decoding |
RU2010140334A (en) | 2010-10-01 | 2012-04-10 | ЭлЭсАй Корпорейшн (US) | IN-FRAME MODE PREDICTION FOR VIDEO TRANSCODER |
US9288496B2 (en) | 2010-12-03 | 2016-03-15 | Qualcomm Incorporated | Video coding using function-based scan order for transform coefficients |
US20120236931A1 (en) | 2010-12-23 | 2012-09-20 | Qualcomm Incorporated | Transform coefficient scan |
US8891617B2 (en) | 2011-01-18 | 2014-11-18 | Google Inc. | Method and system for processing video data |
US8953690B2 (en) | 2011-02-16 | 2015-02-10 | Google Technology Holdings LLC | Method and system for processing video data |
CN102685503B (en) | 2011-03-10 | 2014-06-25 | 华为技术有限公司 | Encoding method of conversion coefficients, decoding method of conversion coefficients and device |
US8938001B1 (en) | 2011-04-05 | 2015-01-20 | Google Inc. | Apparatus and method for coding using combinations |
US9379736B2 (en) | 2011-06-03 | 2016-06-28 | Qualcomm Incorporated | Context-adaptive coding video data |
CN103797803A (en) * | 2011-06-28 | 2014-05-14 | 三星电子株式会社 | Method and apparatus for entropy encoding/decoding |
US9167253B2 (en) | 2011-06-28 | 2015-10-20 | Qualcomm Incorporated | Derivation of the position in scan order of the last significant transform coefficient in video coding |
US20130003829A1 (en) * | 2011-07-01 | 2013-01-03 | Kiran Misra | System for initializing an arithmetic coder |
-
2012
- 2012-07-02 US US13/539,753 patent/US9774856B1/en active Active
-
2017
- 2017-09-15 US US15/705,751 patent/US10284854B2/en active Active
Also Published As
Publication number | Publication date |
---|---|
US9774856B1 (en) | 2017-09-26 |
US10284854B2 (en) | 2019-05-07 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10887595B2 (en) | Using multiple probability models for entropy coding in video compression | |
US11070843B2 (en) | Coding of last significant coefficient flags | |
US10142628B1 (en) | Hybrid transform in video codecs | |
US10735767B2 (en) | Transform coefficient coding using level maps | |
US10694180B2 (en) | Entropy coding transform partitioning information | |
US20170347094A1 (en) | Block size adaptive directional intra prediction | |
US9131073B1 (en) | Motion estimation aided noise reduction | |
US9179151B2 (en) | Spatial proximity context entropy coding | |
US10623731B2 (en) | DC coefficient sign coding scheme | |
USRE49615E1 (en) | Coding interpolation filter type | |
US9503746B2 (en) | Determine reference motion vectors | |
US10284854B2 (en) | Adaptive stochastic entropy coding | |
US10715821B2 (en) | Embedding information about EOB positions | |
US9756331B1 (en) | Advance coded reference prediction | |
KR102335184B1 (en) | Complex motion-compensated prediction | |
US9509998B1 (en) | Conditional predictive multi-symbol run-length coding |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
FEPP | Fee payment procedure |
Free format text: ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: BIG.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: PUBLICATIONS -- ISSUE FEE PAYMENT VERIFIED |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |