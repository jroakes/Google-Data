US9530227B2 - Methods for generating visual data from nodes containing identity data for persons from a set point of view - Google Patents
Methods for generating visual data from nodes containing identity data for persons from a set point of view Download PDFInfo
- Publication number
- US9530227B2 US9530227B2 US13/397,535 US201213397535A US9530227B2 US 9530227 B2 US9530227 B2 US 9530227B2 US 201213397535 A US201213397535 A US 201213397535A US 9530227 B2 US9530227 B2 US 9530227B2
- Authority
- US
- United States
- Prior art keywords
- nodes
- data
- node
- subset
- links
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/242—Query formulation
- G06F16/2425—Iterative querying; Query formulation based on the results of a preceding query
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/901—Indexing; Data structures therefor; Storage structures
- G06F16/9024—Graphs; Linked lists
-
- G06F17/30395—
-
- G06F17/30958—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T11/00—2D [Two Dimensional] image generation
- G06T11/20—Drawing from basic elements, e.g. lines or circles
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99941—Database schema or data structure
- Y10S707/99943—Generating database or data structure, e.g. via user interface
Definitions
- DataSea can be used to visualize the DataSea program itself. Besides visualizing nodes which represent data for the user, as described elsewhere in this document, in so-called ‘dataset nodes’ the nodes that are visualized in DataSea can represent internal programming objects, methods or elements of DataSea itself (providing a sort of built-in debugger).
Abstract
Computer implemented methods for constructing dynamic relationships between data for presentation on a display are provided. The data is obtained from one or more data sources and managed as a plurality of nodes. The nodes increase or decrease in number over time. One method includes setting a point of view from one of the nodes of the plurality of nodes, and the setting of the point of view acting to order certain ones of the plurality of nodes to produce a representation from the point of view. The method generates visual data that illustrates the representation of the plurality of nodes from the set point of view and provides the visual data for rendering on a display of a device. Certain ones of the nodes contain unique identity data for individuals, and the nodes are associated with other nodes based on relationships between the individuals.
Description
The application is a continuation of U.S. patent application Ser. No. 13/198,301, filed on Aug. 4, 2011 which is a continuation of U.S. patent application Ser. No. 10/810,407 (issued as U.S. Pat. No. 8,019,786), filed on Mar. 26, 2004, which is a continuation of U.S. patent application Ser. No. 09/578,127, filed on May 24, 2000 (issued as U.S. Pat. No. 6,714,936), and claims the benefit of U.S. Provisional Application No. 60/135,740, filed May 25, 1999.
The invention is a computer implemented method of storing, manipulating, accessing, and displaying data and its relationships, and a computer system (with memory containing data) programmed to implement such method.
Today's GUI (graphical user interface) software requires a great deal of training for proficiency. They rarely show their context and rarely show internal data and control points. The actions of applications should be fast and easy to use, not confusing and restrictive.
Shortcomings of current technologies include the following:
Awkward Navigation:
Navigating a current GUI is to learn how the programmers have organized the data and the control points. Today's UI (user interface) relies on windows and pull-down menus which hide prior ones as the user makes selections, and an often-complex series of mouse selections to navigate to the desired control point. In performing an action after traversing a path of pull-down menus and button selections on different sub-windows, the user may be returned to the beginning, forced to retrace their steps if they wish to apply an action repeatedly. The UI does not shift from one state to another in a smooth way.
Relationships are Invisible:
Current GUI's with pop-up menus and layers of text-based windows. Today's GUI's suffer from a list mentality: rows of icons with little or no meaning in their position, no relationships readily visible between themselves or to concepts which the user may be interested in or have knowledge of.
The standard GUI concept of a canvas with buttons and pull-downs require reading and thinking about the meaning of text to, hopefully, grasp the model of control flow. Virtually no information is given outside of static text to help the user understand relationships and control points.
Access to Crucial Data is Confusing:
Gaining access to fields or parameters in current applications can also be a challenge. For example, the Microsoft POP mail retrieval service uses a configuration profile defined by the user to access the mail server, and displays the name of that configuration when logging. Although one sees evidence of the existence of this configuration, how does one change it? The answer may not be obvious. An object-oriented system that implemented all actions on an object could also provide the mechanism of self-deletion, but this helps only if the object itself is visible and accessible via the GUI. This is what DataSea does. Windows technology is moving in this direction, by having many words in menus modifiable, but DataSea achieves this automatically by virtue of its design.
GUI Design is Bug-Prone:
A complex GUI, such as a presentation and control system for database administration, today consists of many canvases and widgets which hopefully present, through multiple mouse clicks, all information that is available. Any data can be changed by any part of the program, and this leads to bugs if the programmer can not easily see these interactions. A DataSea presentation of data and control shows all the objects and their relationships, and thus shows immediately what nodes can affect changes to the data, reducing bugs. To turn a DataSea view into an “application” means to set internal parameters, create and link together application nodes, and add programmatic instructions to these nodes. DataSea will implement a means to invoke these instructions.
Interoperability Conflicts:
DataSea can serve as the single source of data for any application. Any RDBMS (relational database management system) can do this, but DataSea is completely flexible in its data storage and linkage, guaranteeing forward compatibility by eliminating the risk of changes to database structure and entity-relationships of RDBs (Relational Databases).
Two separate DataSea databases can be joined, and automatic linkage routines will merge them without programmer effort. This is generally impossible in RDBs. This joining can occur by simply adding nodes and links from the two data sets, and adding together the contents of the master index, NameListObj. Or, the two data sets can be blended, merging their contents: taking two nodes with the same name from the two separate data sets, creating one node which has all the links from the two separate nodes.
In most storage systems, especially RDBMS's, the user must know how information is stored in the computer and which parameter or parameters that the computer is using to store the data, as well as the proper range of values. This is often non-intuitive and may seem somewhat arbitrary for a non-technical user. Ideally, the computer would better mimic human associative memory, allowing the user to look for new information associated with that which is better known, such as a particular context, or a range of values without regard to parameterization, to specify the target of interest.
OLAP (online analytical processing) and data mining require both analytical models and custom code to apply these models to particular database structures. These customizations may be hard-coded, non-portable and irrelevant to the model. The DataSea API (application programming interface) provides access to all data while eliminating the need to worry about database structure such as tables, columns and foreign keys.
Shortcomings of more recent data presentation technologies include the following:
Non-Linear Viewing:
Up-coming non-linear presentation tools such as fish-eye or hyperbolic views do not address the difficult problem of how to lay out the data and their relationships before the viewing method is applied. These may be useful, but do not address the difficult issue of how the graph is laid out initially. Nor are they appropriate for highly linked data sets, because the plethora of links resembles a cobweb from a psychotic spider.
Virtual Reality:
VR takes advantage of visual clues and spatial awareness, but only for data sets that may be appropriately mapped to a 3-dimensional space. Generally data is N-dimensional and thus, in general, virtual-reality which models information as physical objects in 3D space is inappropriate for viewing arbitrary data.
Voice Interface:
even more than a GUI, voice control needs a smooth transition from state to state in response to commands so that the user can follow what is happening. GUIs hide previous states with new windows, while the present invention moves objects gradually and continuously in response to programmatic or user events.
The inventive method (referred to as “DataSea”) is a method for storing, accessing, and visualizing information. Data is stored into nodes and visualized as a ‘sea’ of linked nodes. Nodes can contain anything such as documents, movies, telephone numbers, applications or words containing concepts. Interactions with the user organize the data from a defined, and then refined, point of view, with relevant data brought to their attention by smooth changes in the data's appearance.
Essentially, a handful of nodes (which are typically selected by value) are linked to the point of view turning the web of data into a hierarchical network. Further order is imposed by the use of two types of commands: one which relies on the data values, the other on the links and types of the data nodes.
The user typically enters words into a computer programmed in accordance with DataSea and watches DataSea's response. Individual nodes are rendered according to the sequence of nodes between themselves and the point of view, allowing different presentations of data. Applications may be stored into nodes and can be located and executed by DataSea. These applications can operate on and present information from DataSea in the conventional manner, with windows and menus, or by using the DataSea mechanisms of visualization, including the so-called virtual reality mode (“VR-mode”) which supports deterministic data placement as needed in such things as forms and spread sheets.
Examples of use include:
- 1. Entering keywords and phrases selectively retrieves and emphasizes different data types such as loose notes and email, but these entered keywords and phrases need not match exactly the content of the resulting emphasized data.
- 2. Direct and specific information is retrieved: The user enters the name of “Jim Smith” followed by an appropriate command such as “back” or “and” along with the phrase “Phone number” which refers to a pre-existing AN. Jim's telephone number becomes obvious as it approaches the point of view, which in this case is “Jim Smith”.
- 3. A manufacturing facility has test data from machines and 3-D models of those machines. These data sources are integrated and the user can visualize the facility from different points of view, e.g. a virtual reality mode, tabular presentation or the standard DataSea network connectivity display.
Each of FIGS. 4, 5, 6, 7, 8, and 9 is an example of a display generated in accordance with the invention.
This is a disclosure of computer implemented methods for storing, manipulating, accessing and displaying data and its relationships, and of computer systems programmed to implement such methods.
These methods are flexible, applicable to any kind of data and are useful to diverse groups of users. A prototype is implemented in the Java programming language.
Data is stored into nodes which are linked together. All nodes contain variables, including descriptions, types, magnitudes and timestamps. Links also contain information about themselves, including connection strength of the link and descriptive information.
Data is accessed and modified based on the values of data, their relationships, the values of DataSea parameters and links between nodes, rather than pre-determined locations in memory, as is done in most programming models.
Any existing application can be emulated in DataSea by creating and linking appropriate nodes. Positions of nodes as displayed on the screen are a result of processing force parameters rather than pre-determined positions.
Commands to DataSea are not chosen from hierarchical lists or menus, but rather they are
1. Simple navigation commands;
2. Words (data values) generated by the user; and
3. References to nodes brought to user's attention.
This approach to the command interface, and the smooth changes of state in visual feedback, lends DataSea to voice input and thus wireless ‘PDA’ (personal digital assistant) type devices.
Key aspects of the invention are:
1. nodes which can contain any type of data, links between the nodes;
2. manipulation of internal parameters of nodes and links;
3. visualization of nodes and their internal parameters;
4. smooth transitions during changes in state of the network;
5. integration of virtual reality representations;
6. simple commands and low learning curve;
7. increased robustness to imprecise commands as the data set grows and matures;
8. obviation of the need to predetermine data structures when entering new data; and
9. integration of legacy data with the structure inherent in it.
-
- ‘POV’ stands for ‘Point of View’ and is the designation given a node from which many operations are begun, such as defining a hierarchy of distance in terms of links of any node to the POV.
- ‘DN’ refers to a data node containing specific values of a parameter. ‘AN’ refers to an abstract node, which contains a summary, abstract, or explanation of the data stored in one or more DNs, and represents a concept or parameter name which can link and thereby group one or more DNs. E.g., “address” is an AN, while the specific address “123 Main St.” is a DN.
- DN(“abc”) refers to a data node named “abc”. AN(“xyz”) refers to a AN named “xyz”.
- ‘magnify’ means to change the value of the magnitude variable (‘mag’) or related variables inside a node and or its links.
- ‘distance’ refers to the minimum number of links between two nodes, also called the link-distance.
- ‘conceptual distance’ refers to a more complex function of link distance and other parameters including mag, link-connection-strength and total number of links to a node. For instance, the conceptual distance between two nodes which are several links apart can be proportional to the product of the link connection-strengths times the product of the mag's divided by a function of the link-distance.
- ‘near’ refers to a relatively low distance or conceptual distance.
- ‘commands’ in DataSea are any programmatic methods of accessing, manipulating, creating or deleting data structures or elements of DataSea.
- ‘applications’ in DataSea are programs which use or modify data, links or resources of DataSea, and modify internal parameters of nodes or links, and or create or delete nodes.
- ‘environment checking’ refers to getting information about nodes and links in the neighborhood of or nearby one or more nodes.
- ‘abbreviated’ refers to incompletely rendering and positioning nodes.
- ‘distal path’ is a sequence of linked nodes, each node distal to the prior one.
- ‘multiple paths’ refers to more than one route, through links, between two nodes.
- ‘interaction with DataSea’ refers to either user interaction or programmatic interaction. User interaction is typically through the use of DataSea query language (keyboard or voice interface) and mechanical means such as a mouse. Programmatic interaction can result from DataSea nodes themselves or external programs.
- ‘distal’ refers to those nodes having a higher link-distance value (node.dist) than the link-distance value (this.dist) of the reference point or ‘this’: that is, node.dist>this.dist.
- Proximal is the opposite, referring to lower distance.
- ‘primary node’ refers to a node directly connected to the reference point or ‘this’.
- ‘child’ is a primary distal node, while ‘parent’ is a primary proximal node.
- ‘setting a POV’ means assigning an existing node as a point of view, or creating a new node and linking it directly to a number of existing nodes, specified at the time of creation of the POV or later.
- “spreading mode” refers to the rules used in applying algorithms, possibly recursively, from one node to its neighbor or neighbors. Criteria might be dependent on proximal or distal progression, mag, CS (Connection Strength of a link), potentiation level, or other factors.
- ‘Aliasing’ refers to the mapping of a node to other nodes or a range of nodes. For instance, when an action is performed on the “tomorrow” node, it executes enough code to link itself to a node having the (absolute) value of tomorrow's date, dropping links to any other dates previously established. Linking a node to “today” results in linking to the node representing the absolute date. Depending on the spreading mode, related times will be more or less affected by commands. Nodes with TimeStamps closer to tomorrow will be affected more than those further away. Spreading can also be dependent on values and a range, e.g. decreasing the effect of “more” as 1/((current_value−optimal_value)/fuzziness_range).
- Integration of a GPS receiver, or simply assigning a static location in a map, will be used to alias the word “here”.
- “Presented data set” is what the user sees at the moment, being a collection of nodes with
- (mag>some threshold).
- “Target data set” is an ideal collection of nodes representing the information the user is searching for.
- “Traveling distally” means going from node A to node B only if B.dist is >A.dist.
- “Traveling proximally” means going from node A to node B only if B.dist is <A.dist.
- “Traveling downstream” means going from node A to node B only if A.getPol(B) is ‘-’. The polarization of the link between A and B can be set on entering the link between A and B, the order of A and B determining the polarization:
- A.link(B, {polarization=}true)
- means
- A.getPol(B) is ‘-’. Typically, nodes A and B are linked such that node B is downstream from node A when node A is more general than node B (so that by traveling downstream from node A to Node B, a user encounters more specific, rather than less specific, information). In characterizing a node, a user usually wants to see progressively more general (broader) information about it.
- “Traveling upstream” means going from node A to node B only if A.getPol(B) is ‘+’.
- A “Recently visited” node denotes a node being used in an operation which traverses the network. The node's TimeStamp is updated on a visit.
As shown in FIG. 1 , each node has a link to at least one other node. Each link is defined by three values: CS (which is Connection Strength of a link, initially set to 1.0), Description (which is a free-form String describing the node), and Type (For example DN (data node) and AN (abstract node)).
Example of Using the Invention:
A candy factory supervisor performs the following tasks (there are many different commands and choices of values which will give similar results):
-
- views the facility (the candy factory) to get an overview of its status and sees a VR (virtual reality) rendering of the various stations, color-coded for activity (by using the command “show factory”);
- reviews the recent temperature history of one of the problem machines, a chocolate melter and sees the machine with clusters of data nearby
(“reset, show Choc_2_Melter and Temperature and TimeLine and recent”); - views the melter and groups data from it and sees the abstract nodes “Temp”, “Up-Time” and “Operators” which categorize the data
(“reset, show Choc_2_Melter, group”) - checks for other applications which use data from the chocolate melter (“apps”) and after seeing the familiar application named “AppMelterGraphs” invokes this canned application showing graphs of the melter's history (“reset, show AppMelterGraphs and Choc_2_Melter”);
- saves this point of view named “Daily” (“save Daily”). Later in the week, after forgetting its name is reminded by asking for saved POV's from last week (“show Saved and LastWeek”);
- checks unread mail (“reset, show Mail and unread and TimeLine”), and now de-emphasizes replies by himself (“less Me”)
‘Me’ is an alias node, linking directly to a node representing his user ID; - begins an email to co-worker (“reset, show ‘John Smith’, AppMail”). “AppMail” is a canned application which starts from the current point of view and searches the neighborhood for two data nodes: a data node directly connected to an abstract node that is equivalent to “Name’, and another data node connected to the abstract node “Address”. It then formats a text window for composing an email message; and
- enters appointment with Scharffen Berger chocolate supplier (input “mtg tomorrow 4 pm ‘Scharffen Berger’”) and sees TimeLine with the event for Apr. 28, 1999, more info about the contact person at Scharffen Berger is visible.
DataSea is a comprehensive program that stores, manipulates and visualizes all forms of data. Visually animated objects, or nodes, represent data or abstract concepts. Interactive commands (which something like verbs) operate on nodes and the links between them (which act something like nouns). These commands change internal parameters of the nodes and links. These parameters are visualized by qualities such as position and size. Certain nodes are emphasized, presenting information. The user finds the data or resource needed without knowledge of the data structure.
Unusual features of DataSea include relatively natural commands, robustness to imprecise queries, ability to generalize, absence of restrictive structure, use of semantic information and smooth transitions between visual states of the user interface. The simple commands and feedback from smooth visual transitions is key in integration DataSea with a voice interface.
The front-end of DataSea is a query interpreter and visualization system, and on the back-end is a database and API (application programming interface). Briefly, one sees a ‘Sea of Data’, and after each of a series of commands, one sees increasingly relevant data more prominently.
DataSea nodes act something like nouns of a natural language, and DataSea commands something like verbs. Here are the principal steps involved in a user query:
-
- Establish a point of view (either an existing node or a new, ‘blank’ one: if new, enter one or more reasonable values for broad, relevant terms of the query).
- Invoke commands (such as ‘show’, ‘back’, ‘similar’, ‘abstractions’) followed by more words of the query.
- Directly (e.g. ‘more wordXXX’) or indirectly (via commands such as ‘group’, ‘similar’, etc.) manipulate the presentation, progressively emphasizing information that is more relevant.
In a preferred embodiment, DataSea is a pure-Java application that can serve in a range of roles. It can view and control existing and legacy data such as email, documents, file directories and system utilities. It can ultimately serve as the principal UI to a system managing all data and system resources of a personal computer or workstation.
The natural ability of people to recognize visual patterns can be leveraged to convey information rapidly to the user. For instance, certain algorithms which depend on particular node and link configurations can render and position those nodes for rapid recognition. For example, if a target DN is surrounded by intermediate DNs which are themselves linked each to a distal AN, then those intermediate DNs are probably describing the target DN. The number of intermediates is then a measure of how much information is known about the target DN.
Its ability to gracefully reduce the complexity of the visual output means that a wireless hand-held client can be used to quickly browse and retrieve information from a remote server.
The simplicity of commands and accessibility of DataSea to the novice user lends itself to voice commands that can be used to navigate and control the display of DataSea.
The simplicity of DataSea's data structure allows easy acquisition and integration of legacy data into DataSea. Because new data is integrated with old, the acquisition of new data not only allows its retrieval by the user, but also enhances the user's retrieval of older data. Thus, as DataSea matures in its data content, queries are more robust to imprecise terms from the user. Since DataSea captures the information in the data and its structure from legacy databases, applications in DataSea can emulate legacy applications, while of course making this information available to broader use within DataSea.
While DataSea can emulate a RDBMS, without the complications of tables and foreign keys, the rich connections of DataSea and its ability to insert abstract nodes opens the way for neural-type processing. Learning-by-example is one example of that new capability. Learning-by-example refers to adjusting mag and CS values by ‘voting’ (via ‘more’ or ‘less’, for example) on DNs, without relying on ANs. This selects DNs which the user especially likes or dislikes. Applying commands to DNs (such as files or URLs) changes not only the mag of each DN, but changes the CS and mag in its neighborhood, typically spreading through related ANs, thereby changing the mag of other DNs in the neighborhood, i.e., having similar qualities as the DNs that the user liked. A different point of view applied to DataSea, by virtue of different connections and connection strengths, changes the presentation of data as fundamentally as changing the database design in a relational database, but much more easily.
DataSea can be used to perform simple web-history viewing, data mining, and can be used as the principal Desktop UI for a computer showing all of the computer resources.
Legacy Data and Network Tools:
Viewing domains such as file systems, web history or HTML documents and computer networks are obvious uses of DataSea and are early targets of DataSea. Applied to a web browser, the text of links to the current URL can be retrieved and parsed into DataSea, in effect pre-digesting it for the user.
Voice Interface to Wireless Handheld Devices:
The GUI (Graphical User Interface) of DataSea is important, but the underlying structure of DataSea queries and input methods are curiously appropriate for voice and natural language interfacing. Since queries, input and control of DataSea rely on simple words DataSea, current voice recognition software can be used instead of text input, and would significantly improve the uniqueness and general usability of DataSea. No other UI uses voice or is as appropriate for voice control. Since the results of many queries may be a short answer, voice generation is an appropriate output method, in addition to or instead of graphic output. For instance, the query ‘show John Smith and address’ is precise enough to generate one value significantly stronger than others, and therefore amenable to a programmatic decision for selecting which results to submit to voice output. In this way, voice can be a complete communications method, opening the door to remote access via telephone or wireless device.
Portal:
Another opportunity involves selling server time for web searches, giving away client software initially. A typical interaction might involve throwing a number of search terms, asking for a display of abstraction categories or examples of URL's followed by the user judging prominent nodes, repeating as the search narrows.
Data Warehousing:
DataSea's data structure and tools lend themselves naturally to data warehousing and mining, each with an estimated worldwide budget in 1999 of nearly $2 billion. DataSea intrinsically provides data mining and warehouse support. DataSea supports any type of data without specifying in advance the fields or tables to use. This is good for arbitrary user input, such as free-form notes, or machine-generated input, such as received data from automated test-equipment. DataSea therefore is a completely flexible data warehouse.
Data Mining:
Data mining is supported by DataSea's ability to reorganize any data based on user-defined point of views, the ability to link any and all data, and the ability to store the processing of data and applications into DataSea itself.
Principal UI:
DataSea can serve as the Desktop screen, the principal interface to all system services, independent of operating system. It can do this on demand, without locking the user into a particular operating system.
Architecture of Datasea
Java Objects
The most used variables of object Node are Name, dist, mag and links[ ].
global variables: Node PointOfView_node, lastNode; |
Class Node extends Object { // Important variables in each node |
Object Data; // contains any computer representation of data, and includes get |
and set methods |
int dist; // the number of links from this node to the POV or another node. |
int tdist; // a temporary version of ‘dist’ used in calculating the minimum |
number of links from a node to other nodes. |
double mag, x,y,z; // x is the ‘x’ position in the DataSea coordinate system |
double px, py, pz; // px is pressure in x direction resulting from positioning |
routines |
double potentiation; // used to make node more sensitive to effects such as |
magnify |
TimeStamp potentiationTS; // time of last potentiation, used to degrade effect |
of potentiation as time passes |
String Desc, Type; // used to describe the node. Type is typically DN, AN, |
Event |
LinkObj links[ ]; |
} |
Class DataObj extends Object { // contains any computer representation of data, |
and includes get and set Methods |
String s; |
... |
getDataAsString( ). |
... |
} |
Class LinkObj extends Object { |
Node linked_node; |
Double CS; |
TimeStamp TS; |
String Desc, Type; // used to describe the link, may refer to the source of |
the link, whether its an alias or not. usually set by the creator of the link. |
} |
Class VRObj extends Object { // VR stands for Virtual Reality |
double VRx, VRy, VRz; // relative positions in VR space, typically positions |
offsets from another node identified by recursive calling sequence or | |
information contained in this or in related nodes or links. |
boolean VRlocal, VRenabled; |
VRShape Shape; // data and methods to render semi-realistically, for Virtual |
Reality presentation. |
} |
Class NameListObj extends Object { |
// Acts as an index for all nodes. |
// Vector, hashtable or other implementation of all nodes for rapid access based |
on name and or other fields such as TimeStamp and Desc |
// METHODS |
Node getNodeNamed(String s) { }; |
} |
Examples of Subroutines Used in Preferred Embodiment
-
- Node.getChildCount( )// return the count of distal links
- Node.getChild(int i)// returns ith link with distance>Node's distance
- Node.getParent( )
- Node.getNodeNamed(String s)// finds a node named ‘s’ anywhere
- Node.getNearbyNodeNamed(String s, int max_distance, String type)// finds a node named ‘s’ within ‘max_distance’ links of Node, having Type ‘type’.
- Node.getConceptualDistanceTo (String s, int max_distance, String type)// returns result which is a function of distance to the target_node named ‘s’, Type ‘type’ and the CS's to and including the target_node, and the mag of target_node.
- Node.get/setNodeLinkedToAN(String an_name, Data data_value) get or set the value of the node between ‘this’ and AN(name)
- set_dist(Node starting_node)// recurses, calculates and sets Node.dist by finding the shortest route to each node by recursing from starting_node
- set_POV(Node target_node)// {set_dist(target_node); POV=target_node;}
- show (String name) {create_POV( ); POV.link(getNodeNamed(string)); set_dist(POV);}
Examples of User Commands
Most methods have three versions of arguments: ( ) (String s), and (Node n1, Node n2 . . . ). If null, then lastNode is used, if String, then matching nodes are looked for: both pass one or more nodes to the third version which takes explicit Nodes.
-
- Show( ) (Node target)// link target to point of view, create point of view if necessary
- Abs( )(Node target)// magnify distal ANs showing category of target (the AN is in a sense a category). An AN related to the target by two or more intermediate ANs will accumulate magnification via those intermediates. Follow distal paths, magnifying ANs along the way. Any AN along multiple distal paths will be magnified multiple times. Thus higher level ANs are emphasized.
- Back(Node target)// working proximally from target, increase mag of all until point of view is reached
- And(Node target_1, target_2)// potentiate neighborhood of target_1, then raise mag in neighborhood of target_2 if potentiated
- More(Node target)// raise mag in neighborhood of target, reducing the amount of change in mag as a function of spread_mode: e.g. proportional to the distance or a constant up to some threshold distance.
- Potentiate(Node target)// similar to More( ) but the value of the variable potentiated is increased rather than the variable mag, and the potentiation TimeStamp (‘potentiationTS’) is updated and used to tell other routines when this was last potentiated. Typically other routines will reduce their modifications to variables as the elapsed time (currentTimeS tamp—potentiationTS) increases.
- Sim(Node target)// indicates DNs which are similar to target based on their connections to ANs or other nodes. Similar to abs( ) but DNs on multiple paths are emphasized. Note: ‘abs’ and ‘sim’ use similar mechanisms traversing nodes. One emphasizes ANs resulting in abstracting the categories of the starting point, and the other emphasizes DNs thereby showing nodes that are similar to the starting point.
- Group(Node start, int target_level) {// group DNs around ANs which characterize them. From point of view, go distally until child.dist==target_level. If child is an AN, then force parent.X=child.X which clusters the data nodes between the start and the child abstract node onto the abstract node. Wait a second or so, letting the data nodes spread apart some, and repeat for (target_level—).
- Recent( )// magnify nodes with recent TimeStamps.
- The usage “Recent 1 hour” sets the value “1 hr” into the DN between DN(now) and AN(range).
- where “range x=y” means:
- (DN(now).getDNhavingANnamed(range)).setData(“1 hour”)
We next describe some of the above-mentioned commands in another way, and we describe other commands:
Data Manipulation Commands
-
- Show links specific keyword to a point of view, zooms on it and emphasizes it and its neighbors.
- Group Starting from the point of view, secondary (20) data nodes spread distal magnify to directly connected abstract nodes, and set the secondary nodes position next to the largest directly connected abstract node, thereby grouping them.
- Link|unlink links specific nodes to a point of view or other nodes.
- More|Less emphasizes specific keywords given by the user and their immediate neighbors.
- Abs(tractions) emphasizes abstract nodes related to a data node, higher levels of abstractions being dominant initially.
- Sim(ilarities) emphasizes data nodes which are similar to a selected data node.
- AND emphasizes nodes near two or more selected nodes, similar to the boolean ‘and’ function, although as with most aspects of DataSea, the result is not a binary decision. The non-linearity of the AND operation is adjustable, bringing in more or less of the neighbors. A highly non-linear mechanism akin to neural ‘potentiation’ can also be used, which can give very precise selectivity to the process of adjusting connection strengths and magnitudes.
- SS Spreadsheet simulation, given one data node, this presents related data nodes in tabular form with their principal abstract nodes as column-headers. Useful for tabular output.
- TL A fast synonym for “zoom TimeLine”, “more now”. Now’ is a node updated automatically with the current time, linked to the TimeLine and nodes containing preferences for concepts such as ‘recent’.
Viewing Commands
-
- Back emphasizes data nodes going backwards from a distant abstract node to the point of view.
- Zoom Centers and magnifies the screen image appropriately on a node or group of nodes
Supported Applications
-
- Mail sends email to an address that is either explicitly selected, or begins a dialogue to choose one or more addresses based on their proximity to the current point of view. This is an example of a command which uses information from neighbor-values such as type and distance to make decisions. Uncertainty is resolved by the user who selects from a list of candidates proposed by the application.
- Simple Tabular Presentation (Spread-sheet format)
- Activate runs the most appropriate program on a selected data node. Exactly which program is easily determined and changed if desired, since it is a functional node connected to the selected data node, and is thus viewable through normal DataSea techniques.
- Input takes text given by the user, parses, time-stamps and stores it into DataSea. A typical example of this would be ad hoc notes, such as ‘phone-call from Bob about printer problem’, or ‘phone-number of Mary Smith is 845-1234’.
Example Applications
-
- Mail (Node target) From the target node, search the neighborhood for AN(“name”), and use the DN proximal to it. From that DN, search for a DN connected to AN(“address”). Similar for other ANs of use to a mail program.
- Notes Entire note is made into a DN, words become ANs with links to the parent DN.
The Special Syntax
“word1=word2”
creates AN(word1) linked to DN(word2). - SSheet(Node target) A tabular representation of data and column headers of linked ANs in the neighborhood of target_node is built:
- Collect all DNs linked to target. These represent one row of tabular presentation. Label these with column headers of the names of their directly linked, distal ANs. Each subsequent row is built from DNs linked to ANs and each other.
- Set all of the VR position variables to appear in DataSea display as tabular format when in VRmode.
- Phone(Node target) looks in the neighborhood of target for a DN linked to AN(“phone number”)
- Dir(Node target) is a special case of SSheet, and looks specifically for directory-related information.
Data Acquisition
Any application can store new data into DataSea, e.g. the applications Notes and Email.
Custom programs can translate legacy formats into DataSea linked nodes, e.g. to load information about a file system, the names of files and directories are stored into a tree representation first, then suffix and name can be used to create ANs, then content can be analyzed, e.g. by putting it through the Notes processor.
A RDB (Relational Database) would be loaded by storing the names of databases, tables and columns into ANs, and then values into DNs and keys into links. All these would be linked appropriately: e.g. table name linked to column names linked to all DNs having the values in those columns.
Web indices and browser histories can be stored.
System resources can be represented in DataSea.
A dictionary or synonym list can be loaded. The Type and Desc of links between synonyms or nodes with similar meaning are set. E.g. Type=“synonym”, Desc=“from Webster's 10th Ed.”
The user need not know about the data structure, such as database tables and their entity relationships in a relational database, or the directory structure of a file system. Nor does the user need to parameterize and decide how to store data, but may rather simply stuff it into DataSea. DataSea will parse the textual data and create links to representing abstract nodes. Abstract nodes are typically single words representing simple or complex concepts, and are linked to data nodes related to them. These nodes typically are massively linked.
DataSea is accessible from external programs via its API. More interestingly though, Java code may be stored into a node, fully integrating data and methods. The Java code can then act from within DataSea, for instance modifying the rendering of objects or analyzing data and creating new nodes and links.
The sequence of positioning and rendering flows through the network of nodes from the POV distally. Typically an application will start from one node, specified by name, pointing device or other means, and will search the neighborhood of that node for certain relationships or values and types. For example, invoking “Phone Jim” can find the nearest DN(Jim), then present the nearest DN which is linked to AN(“phone number”). Thus commands like “Phone emergency” can work since ‘emergency’ can be linked to ‘911’ which can have a large default CS which allows it to dominate, and “Phone 123 Main St” can work since the address “123 Main St” can be linked to a phone number through a DN of a person's name.
In addition to the DataSea commands such as show, abs and sim, new applications can be written to extend the base command set of DataSea.
All nodes have the capacity to store a VRObject which contains position and rendering information. It includes a triplet of numbers describing the relative position of a child to its parent, if the rendering mode of DataSea is set to ‘VR-mode’.
Applications in Datasea: How they Differ from Typical Applications Outside of Datasea
Typically computer applications use or set values at specific locations of memory and may or may not check their values by some means or rules or comparisons.
DataSea looks for information by nearness (a fuzzy metric) and/or characteristics of its links and/or characteristics of nodes directly or indirectly linked and/or their values.
Besides looking for DNs which are linked to specific ANs, an application in DataSea can query the distance or conceptual distance from a node to one or more values (of values such as data values, TimeStamps or other parameters). Decisions can be based on complex functions of environment checking.
Visual Presentation
The visual tools of DataSea are based on a visual language which is completely different from today's standard GUI's and gives the user easier access to relevant data, and inhibits irrelevant data. DataSea can visually present large amounts of data and the relationships amongst them, emphasizing that which is relevant while keeping the larger context. The user sees exactly the data that is needed as well as related data, a form of look-ahead, albeit at lower resolution.
The data presentation changes as the user interacts with DataSea. Data moves smoothly from the background to the foreground, bringing it to the users' attention in response to the user. The gradual shift in visual states helps the user to understand what is happening as the query progresses.
The scene begins with a sea of objects representing nodes. Ordering of this sea begins as a result of commands to set a POV or by changing the mode to VRmode on some or all nodes. Typically one sees the sea of data in the background with the POV in the foreground and a TimeLine along an edge such as the bottom. Nodes move and change their appearance with interactions. These interactions can be with the user or with programs inside DataSea or externally.
The positions of nodes are changed by iterative calculations of forces on them, thus they move visibly between positions, rather than jumping suddenly. In this way changes in state, and thus appearance, can be followed by the user better than by sudden changes of appearance.
Visualization (in Accordance with the Invention)
Nodes are positioned dependent a set of pressures from sources, each pressure from a source (e.g. POV, parent, neighbors) being a function of that source's preferred position or distance between the child and the source, the child's mag, dist, etc. The optimum distance to point of view is proportional to dist/f(mag).
A node is stationary once these forces are balanced.
Rendering is also dependent on mag, dist, and mode.
Point of view is either a new temporary node set at a specific position on screen, or is an existing node.
Visual Presentation
The visual tools of DataSea are based on a visual language which is completely different from today's standard GUI's and gives the user easier access to relevant data, and inhibits irrelevant data. DataSea can visually present large amounts of data and the relationships amongst them, emphasizing that which is relevant while keeping the larger context. The user sees exactly the data that is needed as well as related data, a form of look-ahead, albeit at lower resolution.
The data presentation changes as the user interacts with DataSea. Data moves smoothly from the background to the foreground, bringing it to the users' attention in response to the user. The gradual shift in visual states helps the user to understand what is happening as the query progresses. For example, compare the ease of understanding either of these two scenarios: First, watching five animated objects, which represent five words in alphabetical order, reverse their order, representing reverse-alphabetical ordering: Second, watching five words on a line change from ascending alphabetical order to descending. In the first case, reversal is apparent. In the second, the simple operation of reversal is far less apparent: seeing the reversal requires re-analyzing the words and then trying out one or more possible explanations. In DataSea, nodes cluster and move individually and in groups in response to queries. Internal parameters inherent in each node and link change in response to queries. These internal parameters are mapped to visual behavior and appearances, such as size, position, color and shape. These visual cues are used to enhance certain nodes or groups of nodes and their links. The internal parameters are changed by (typically recursive) commands that start at one node and spread through links to others. Commands adjust connection strength and magnitude of nodes based on their programmed algorithms and local node and link information, such as node type and the distance from the point of view. The point of view distance parameters are associated with each node and are functions of the shortest path from that node to the point of view. Recursive commands are self-terminating: typically but not always acting distal to the point of view (where the value of the next nodes distance is greater than or equal to the current distance) and often but not always producing less effect further away from the point of view.
The initial appearance of the GUI is a pseudo-3D view of:
-
- a backdrop containing the entire data set: The representations here are relatively stable, and provide an orienting reference for the user;
- a timeline along the bottom of the backdrop and
- a foreground region in which the user creates Points of Views (point of views) and into which data are brought forward from the backdrop. The dimension from back to front essentially represents the degree of customization of data presented to the user.
A new query is begun by entering words, similar to a web-search, or manipulating regions of the background with the mouse. One or more data nodes are directly ‘hit’, increasing their magnitude, and secondary nodes (those distal to a primary) and their links are affected: exactly how depends on the spread mode of the operation. Nearness to the point of view is usually a function of link-distance and magnitude, but other methods are possible, e.g. link-distance alone which display data in a simple hierarchical set of ‘levels’. Details of nodes are normally suppressed, but with the ‘magnifier mode’ turned on, any node under the cursor presents more information. Another mode is ‘warp mode’, which acts like a large magnifying lens on a region of the screen. This is similar to hyperbolic viewing of networks of nodes.
Which nodes are enhanced depends on the command and the spread mode, which is the way in which it traverses the linked nodes. The simplest spread mode is ‘radial’: this modifies the node at distance n+1 based on the strongest node directly connected to it of distance n, in effect being influenced by the node which is on the strongest path back to the point of view. Another spread-mode is ‘sum’, which adds up all the contributions of nodes of distance n to directly connected nodes of distance n+ 1. In ‘sum’ mode, a single data node distal to a large number of nodes will sum all their contributions. This is especially useful in the Similarity and Abstractions operations. If a specific node is specified in the query, it is enhanced by, for instance, growing in size and moving towards the point of view from the background blur of nodes. If an operation of an abstraction type is used, the abstract nodes are enhanced. The relative positioning of higher or lower levels of abstraction depends on the specific command. If an operation of a similarity type is used, data nodes predominate by approaching the point of view and by being enhanced.
Rather than connecting the hits immediately and directly to the point of view, abstract-nodes in common are first drawn near the point of view. These more abstract nodes are then followed by more detailed ones receding back to the backdrop, positioned to give the sense of their being pulled out of the DataSea. Qualities like time since an event, or distance to one or more chosen abstract nodes can act as a secondary force, or wind, acting to influence the position of nodes along one of the 3 dimensions of the visualization.
Links
Data in DataSea is heavily linked without restrictions on what can be linked. DataSea solves the ‘cobweb’ visual problem by establishing a point of view for the users' queries. The problem of following links that are loops is solved by calculating, on the fly, the shortest number of links from the point of view to the nodes. This turns a series of self-referencing loops into a temporary hierarchy, based on the current point of view.
The user can browse raw data in DataSea, but meaningful structure comes from the interaction between the point of view and raw data. This is analogous to the quantum-physics effect of forcing a wave function into a specific physical state by applying an observation to the wave function: interaction with the user that forces data into its useful, visible state.
A point of view is one form of an abstract node. Once the user finishes a query, the point of view that has been created can be absorbed into DataSea and used later, a form of ‘checkpoint’ used in calculations.
Links can occur rather mindlessly, for instance simply by association to part or all of an inputted document, in a way which captures relationships, for instance field definitions from legacy databases, or semantic meaning from, for example, some level of natural language processing.
Postprocessing inside DataSea creates abstract nodes. These represent abstractions of the data inside DataSea, representing concepts or the results of analysis. A ‘mature’ DataSea will contain a large proportion of these abstract nodes.
Each event which links data within DataSea stores a link ID along with it. Thus any two nodes can be linked together more than once, each link having a different ID to differentiate the context of their being linked. A single link ID can be used between many nodes, as long as that particular subset of nodes has a meaningful context. This context is stored in an abstract node which, linked of course to the subset with that link ID, and contains the reason for the links.
Data
Data is user-defined and customizable: whatever the user puts into DataSea, it merely needs to be in a computer representation. Data is held inside so-called ‘nodes’, which may be linked together. A data-node can be a specific value, text such as a web page or free-form entry, or an object representing something as complex as a virtual-reality view of a manufacturing facility. Text in any language is broken up into words and stored. All of the different forms of data share identical mechanisms of storage, linkage, search, presentation and access. The database contains highly linked data but differs in significant ways from RDBMS's (relational database management systems), including the ability to create links between any data and the elimination of structured tables. Rather than using pre-defined fields to capture relationships, DataSea uses nodes with appropriate links. As new data is introduced and linked to the existing nodes, alternate paths are created between points. This allows data to be found which contains no keywords contained in the query, relying on associations contained in the new data. A simple example would be loading a dictionary into DataSea: there are few related concepts that are not linked through only even two or three definitions of either. Thus, a user may enter a query containing no keywords of a document and be presented with that document, albeit emphasized less than documents that contain more direct links to the query terms. AI or manual ‘digestion’ of information and linkage to abstract concepts is of course possible, as is done by those who compile databases for search engines today.
The user need not know about the data structure, such as database tables and their entity relationships in a relational database, or the directory structure of a file system. Nor does the user need to parameterize and decide how to store data, but may rather simply stuff it into DataSea. DataSea will parse the textual data and create links to representing abstract nodes. Abstract nodes are typically single words representing simple or complex concepts, and are linked to data nodes related to them. These nodes typically are massively linked.
DataSea is accessible from external programs via its API. More interestingly though, Java code may be stored into a node, fully integrating data and methods. The Java code can then act from within DataSea, for instance modifying the rendering of objects or analyzing data and creating new nodes and links.
Applications
A fully integrated application in DataSea uses the DataSea linkage and VR mechanisms to provide the functionality of typical window/menu systems. The program of the application is stored in a DataSea application node.
-
- The typical steps taken by DataSea applications include:
- the neighborhood of the target node is searched by the application for application-specific data requirements
- New formatting nodes are created (eg. A ‘page’ representing the template for a letter)
- Links are made to data nodes and their VR positions are set relative to the formatting nodes.
VR Mechanisms
All nodes have the capacity to store a 3-D vector called a ‘VR-position’. This is a triplet of numbers describing the relative position of a child to its parent, if the rendering mode of DataSea is set to ‘VR-mode’. Any child having non-zero a VR-position variable will position itself relative to the calling parent based on the VR-position values.
Essential Internal Elements of Datasea
In a preferred implementation, DataSea is a pure-Java application. Once loaded, user-defined data-nodes and links are used to visualize information from a range of sources in an interactive or programmatic way. Data-node sources can be email, web sites, databases or whatever is required. FIG. 3 is a block diagram of an embodiment of the invention. All data is contained in objects called nodes. Information describing the data is held in the data-node. A complex data-node may be broken into smaller ones. A data-node has a set of standard fields describing itself and any number of links to other data-nodes.
The DataSea database is a highly linked structure of nodes. A link contains information describing itself and how it relates the linked data-nodes. It therefore contains semantic information, adding a new dimension to interactive or programmed processing of data. That is, DataSea supports not just parametric searches (which find the values at certain storage locations specified by parameters) or content-based analysis (which find particular values and their relations anywhere in the database), but the meaning of a collection of nodes. An example of this could be a link with the description “located near” relating a computer with a person's name.
Processing of data occurs not only on values of certain parameters, but on any value, independent of what it is describing. For instance, one may search for all information related to an individual's name without specifying which table and column of the database to search, and in which tables and columns to look for foreign keys.
Applications can run inside DataSea, in fact these applications are themselves held inside a node. Current applications such as automatic report generators and data formatters, know which pre-defined data fields to place, just where, and how to order the values. This functionality is served by DataSea's mechanism of node and link descriptors, which can act as the column names of RDBMS's. The DataSea link description however also provides semantic information about those relationships.
Objects are positioned and rendered strongly dependent on their content and their links. That is, features of the rendering of nodes and the relative positions of nodes depend on content and links. Thus, DataSea is unique because the presentation is strongly dependent on the data itself.
Usage Scenario
Below is a scenario of events with comparisons between two different application approaches: The user routinely stores information and calls it up later when faced with a decision as to repair a new printer or buy an old one. This example shows the simplicity and time saved with DataSea. It compares:
- 1) DataSea, and
- 2) A mix of applications consisting of “Outlook Express”, “Excel”, and “Internet Explorer” in a Microsoft Office Suit, along with two other applications, “Tracker”, a call-tracking application and a database front-end application called DB-Front-End here. The numbers of seconds in parentheses following these two methods are estimates of time needed by the methods, in addition to the event itself.
Event: The user receives email from a friend who mentions her new H.P. printer
Office Suite: email is stored in Outlook Express.
DataSea: email headers and text are automatically stuffed into DataSea.
Event: The user surfs the web and finds advertisement for HP Printer
Office Suite: Internet Explorer saves the non-overlapping history of URLs temporarily, and relies on the user to bookmark special URLs, and put them in the tree hierarchy defined by the user.
DataSea: with links to DataSea from the browser, each URL visited is stored into DataSea.
Event: The user gets a phone call and makes a note to himself that repairman Bob Smith says that printer A will cost $300 to repair, and that it is in Joe Baker's office.
Office Suite: The user opens the call tracking program ‘Tracker’ and fills in the fields prompted by the wizard, including the note text “Repairman Bob Smith called . . . ”.
To store the location of Printer A in a company-wide database, the user invokes the database editing application DB-Front-End, selects appropriate view (e.g. Machine_View), searches for ‘Printer A’, enters ‘Joe Baker’ for the column ‘Location’.
DataSea: The text of the note is stuffed into DataSea, and explicitly enters: “(Printer A) (office=Joe Baker)”. The information is parsed and time-stamped automatically.
Event: The user now wonders if he should replace printer A with a new one. He remembers seeing a reference in a recent email for an HP printer, and also an HP ad on the web, but can't remember exactly where he filed this information.
Office Suite: User opens Outlook Express, tries to recall the name of the email sender, possibly keywords to search and sets the time range to search (enlarged since an event 1 minute outside the range will be excluded) Immediately he sees messages focussed on one keyword. User skims header and text to decide if this is the correct message. Then, user opens Internet Explorer and browses the names in the History list, trying to recall the context for each as he sees them, or tries to recall the name of the document corresponding to the right URL. He then deduces which database stored procedure, table or view to use, opens the DB-Front-End application, enters ‘Joe Baker’ in the correct search field and sees “Printer A” in the Equipment column. He arranges the four windows from these applications for simultaneous viewing (Outlook, Explorer, Tracker, and DB-Front-End).
DataSea: User starts a point-of-view with the initial associative words “‘Joe Baker”, Printer, email’ and gives his guess of when this all occurred via mouse drag on the time-line. He sees several concept-nodes and some data-nodes. He then judges these by emphasizing/de-emphasizing particular ones, and sees email with appropriate links. He further judges them, adds the word “URL” to the point of view which results in the appropriate URL and data being pulled forward.
DataSea: User starts a point-of-view with the initial associative words “‘Joe Baker”, Printer, email’ and gives his guess of when this all occurred via mouse drag on the time-line. He sees several concept-nodes and some data-nodes. He then judges these by emphasizing/de-emphasizing particular ones, and sees email with appropriate links. He further judges them, adds the word “URL” to the point of view which results in the appropriate URL and data being pulled forward.
Example (Sales Pitch): Laptop starts DataSea, voice interface enabled.
User says ‘show Mail’ . . . mail nodes swell, abstract nodes visible.
User says ‘show Files’ Tax 97′ brings directories forward and shows files.
User says ‘show John Smith’ which crates a point of view, linked to abstract node named “John Smith”
User says ‘BMW’ which shows Smith's “BMW 528 1985” by virtue of abstract node “car” linked to “BMW”, “Ford”.
User says ‘show address’ bringing “123 Main St.” forward.
User says ‘reset’, then ‘show address’ and sees names and addresses of all entries.
User marks timeline over the past week, and says ‘show printer and email and Hewlett Packard’ which shows an abstract node “Printer” linked to email message about printers and a web page of HP printers
User says ‘input “John Smith telephone 848-1234” which creates a node holding the entire message, and parses it into smaller data nodes.
User says ‘show John Smith’; one sees his telephone number.
To demonstrate abstract nodes and learning: have processed 50 URLs from ‘cat’ web search. See all 50 around the abstract nodes surrounding the point of view named ‘show cat’. User deselects URLs not related to technical descriptions, the abstract nodes change, bringing forward URLs with more technical information.
Benefits
- 1) Immediate visualization of user-defined data.
- 2) Quick visual feedback on relevant data.
- 3) Less time required to interpret complex data.
- 4) Higher user productivity because DataSea is an intelligent organizer of data.
- 5) Non-technical user can view data in way they understand, not the way the database may be organized.
- 6) Reduces dependency on programmers.
- 7) Reduced bug-count and time for programmers.
- 8) Simpler usage model through single tool to manage and visualize information.
- 9) Time is saved in storing and retrieving information.
- 10) Databases can be joined automatically without custom code.
- 11) Points of view can themselves be stored into DataSea, storing interactions with the computer.
- 12) Queries and processing results can be stored into DataSea, and used as any other data.
- 13) DataSea learns by example: The user may search for data based on relationships to known data or high-level concepts. Judging can be applied to specific data, such as documents, or to concepts, resulting in ‘learning by example’: the mechanisms of positive and negative feedback to the system are the same.
- 14) New data is automatically integrated: New data can be entered and automatically integrated, allowing non-programmers to store data without adapting to the database.
- 15) Interoperability issues are moot: Programs can be integrated into DataSea as well as simple data. Since all links between nodes use the same mechanisms, any program has access to any data.
- 16) All data can be viewed while maintaining orientation and context: The user can always quickly orient themselves, sparing confusion because data is viewed from the point of view that the user has designated. Context is maintained by position and rendering cues, which indicate the sources of the data and their immediate relationships. The background with its clusters of data-nodes is relatively stable and familiar, and as data is pulled out from it towards the foreground point of view, the data's position is influenced more and more strongly by the criteria of the point of view and nodes connected strongly to it. The user ‘judges’ nodes: emphasizing a node will enlarge it and bring it to a more noticeable position.
Aspects of the invention include the following:
- 1. Methods of automatically creating a highly connected network of nodes containing data from computer-readable sources. Information contained in the structure of legacy databases is captured. All data can be integrated. The nodes are identical in structure, as are their links, differing only in their content.
- 2. Methods to interactively explore, access and visualize information in a highly connected network of nodes. These involve setting a point of view, linking some number of nodes directly to it and calculating individual link distances from all data nodes back to the point of view. This creates a hierarchical network amenable to visualization even though there may be cyclic loops in the links. This hierarchy may change whenever a link is added or deleted. Other internal parameters such as the connection strength of each link and the magnitude of each node are used in the visualization to calculate position and size of each node.
These methods:
- A. emphasize relevant data throughout the query process;
- B. are tolerant to imprecision and errors in queries. This ability improves as the data set grows;
- C. allow access directly, or indirectly; retrieving relevant data containing none of the key-words used in the query;
- D. allow finding data similar to known data, without specifying its characteristics;
- E. give smooth changes in visual state rather than step-wise changes, and provide information to the user in the manner that the nodes move (speed and direction) and appear (size, color);
- F. show available categories that a particular datum is a member of;
- G. integrate virtual reality renderings when appropriate;
- 3. Method of breaking display space into an array of cells, having dimension one more than the dimension of the space displayed on the screen, the extra dimension being size. These are linked to nodes and used by the user interface to rapidly access individual or groups of nodes.
Additionally these methods:
- A. are accessible to the naïve user;
- B. allow emulation of applications such as relational databases and spreadsheets;
- C. use a simple command and query syntax which is amenable to a voice interface;
- D. use time efficiently: user spends time using commands that act directly on data, rather than time spent navigating a pull-down menu interface.
- E. focus time spent on becoming expert on the data set, rather than the user interface.
Variations on the preferred embodiment include:
Variation 1: Voice integration. Front end routines take either keyboard input or voice input, submitting word strings from either to handler functions. Voice word ‘go’ acts as keyboard ‘Enter’.
Variation 2: Client server, a wireless or wired client, display mode set to abbreviate early.
Self Diagnostics and Use as a Debugger:
DataSea can be used to visualize the DataSea program itself. Besides visualizing nodes which represent data for the user, as described elsewhere in this document, in so-called ‘dataset nodes’ the nodes that are visualized in DataSea can represent internal programming objects, methods or elements of DataSea itself (providing a sort of built-in debugger).
Code can be inserted into the program which will visualize each methods invocation and its modifications of user data.
DataSea separates the two tasks of modifying the values of node variables and rendering of those nodes. Thus DataSea can redraw the entire scene not only after traversing the linked nodes and re-calculating their internal parameters, but the entire scene can be re-drawn at any time during these calculations, even once every time a dataset-node variable such as ‘mag’ is changed.
Thus, a self-node can indicate to the user its own activity, by redrawing the entire scene normally and then highlighting itself, or drawing lines to a dataset-node or its elements that it is operating on.
For instance, if a user commands DataSea to increase the variable ‘mag’ of a node, the method which does that (e.g., ‘spread( )’) can draw a line from the self-node representing ‘spread( )’ to the dataset node it is modifying.
A simple implementation could be as follows:
If the method spread( ) recursively calls the method spread_recursive( ) insert a conditional call to touch( ) after spread_recursive:
spread(Node node) { |
// for all children of node | ||
// spread_recursive(child); | ||
// touch(node, child) } | ||
where ‘touch(Node caller, Node target)’ will visualize the accessing and setting of variables in the target, where ‘caller’ is the spread( ) self-node and ‘target’ is the dataset node being operated on.
The method touch(Node caller, Node target) could be implemented as follows:
touch(Node caller, Node target) { // Show a line between caller and target |
nodes |
clear_screen( ); // clear the screen |
render_all( ); // render all the nodes normally |
draw_line_between_nodes( caller, target ); // draw a |
line |
sleep(500); // pause so user can follow what is |
happening }. | ||
Aspects of the invention include:
a method and apparatus for creating nodes containing data, linking the nodes into a network, setting parameters of the nodes (node variables, and maintaining information specific to each node, e.g. mag, CS, direction of the link (polarization). Each node preferably has a name associated with which it can be searched from a master list;
a method and apparatus using “context nodes” to modulate link connection strength (CS) and establish context for groups of nodes. For example, a method for associating a set of links and establishing a context node which can modulate the CS of those links thereby sensitizing or desensitizing them to further operations. The context node can also magnify the nodes linked by each link it modulates;
a method and apparatus for loading data from free-form notes. For example, a method of taking text input (text from user or application, or text resulting from voice translation) and establishing a set of linked nodes therefrom by:
creating a new node for the full text called the full-text-node; discarding selected words (e.g. articles)
linking the full-text-node to individual nodes representing each remaining word in the full text, creating new nodes as needed.
For another example, a method of converting tabular data, i.e., text organized into rows and columns, with column headings (or RDMBS data, with additional links for the keys of the RDBMS), into a set of linked nodes, in which:
each column heading is represented by an AN, the column-heading-AN each cell of data is represented by a DN
links are established between each column-heading-AN (representing a particular column) and those nodes corresponding to the cells in that column
links are established between those nodes corresponding to each cell in a row from the table.
For another example, a method of converting
files from a computer file system or a set of files linked by HTML references into a set of linked nodes, in which:
DNs are established representing each directory or file;
links from each node are established to terms found in the file content, e.g., as is done in the parsing of notes. The procedure can filter the content looking for only certain tag values such as meta-tags or heading values (e.g. <H1> Title Here </H1> has “Title Here” as heading-level-1 in HTML)
Another set of links can be made to ANs representing the suffix of files, or such ANs can be used as ContextNodes for all links to those files.
For HTML files, links are to be established between nodes representing HTML files and other nodes representing HTML files that are referenced by the first HTML file.
For another example, a method of converting files from a computer file system, in which links are established between DNs representing file directory with DNs representing files or sub-directories in that directory;
a method and apparatus for defining a POV (either a particular node or a new node linked to a particular node);
a method and apparatus for defining distance (as a function of the number of links between nodes and the node type) and hierarchy from the POV and determining distal and proximal directions, in which: once a POV is set and distances calculated from it, a hierarchical ‘tree’ is defined from what was an arbitrarily complex cross-linked network of nodes. Thus, if any node ‘x’ has had its distance set by this routine, one is guaranteed to find a path from that node ‘x’ back to the POV by traveling on a path between nodes of ever-decreasing distance values;
a method and apparatus for retrieving data which is linked into a network of nodes interacting with the user to better present the desired data;
a method for emphasizing nodes and paths by tracing backwards from a target node to a POV by following all links to nodes whereby the next node has magnitude less than that of the prior node. Emphasizing those nodes on the path(s) shows nodes ‘between’ the target and POV. By traveling backwards from the target node to the POV, there may be more than one node having a distance less than the target. This is fine, and if all paths backwards (with the requirement that they are consistently proximal) are emphasized it is fine. For example, with Bob being the POV, and traveling backwards from the node representing January 1999, all nodes such as notes and events related to Bob will be emphasized;
a method for assigning position to each node which is dependent on the node's parameter values, including distance, CS and magnitude. Rather than setting the node at the calculated position immediately, it moves there gradually thereby showing the transition between states. One way to do this is to calculate forces on a node which are related to the difference between the node's current position’ and an ideal calculated position.
The ideal position depends on the positioning mode in effect:
a Relations Mode: Most suitable for narrow queries where we wish to see all the links between nodes in the target data set. Nodes fan out from their parent; the angle dependent on the number of children their parent has, their distance dependent either on (mag) or (1/mag); or
a Levels Mode: Most suitable for broad queries where there are too many links between nodes in the target data set. Starting in the center of the screen, fanning out to the left dependent on their distance from the POV, ANs are rendered. Starting in the center and belonging to the right half of the screen are the DNs whose position moves further to the right the lower their mag;
a method and apparatus for visualizing data, by appearance on a screen. For example, a method of assigning visual emphasis (color, size) to each node dependent on the nodes distance, CS and magnitude.
Examples of operations performed on nodes of the inventive set of linked nodes (or on a sea of displayed representations of such nodes) include: ‘ABS’(for characterizing and understanding the environment of nodes and their ANs): from a target node, traveling distally and upstream, find the first AN and emphasize it. This ‘abstracts’ the target node in terms of linked ANs. To abstract it at a higher level, go from those ANs to directly linked ANs which are both distal and upstream. This can continue to arbitrary level until we run out of nodes (realistically not very far, a handful of levels);
‘XABS’ (for emphasizing ANs from a group of nodes, those ANs not having been recently visited by query operations: emphasizing distally from these ANs will result in a relatively large number of DNs being modified. The user may find ANs which are obviously related or not related to their interest, and thereby significantly change the presented data set. Since these ANs haven't been used recently, we in effect triangulate the target data set from more vantage points. Determining categories which, when evaluated by the user as good or bad, have a large effect on narrowing the presented data set, that is helping the user find the target data set;
‘SIM’: a method of emphasizing (magnifying) nodes based on their similarity to a chosen node without specifying values of any node (using the ‘sim’ command which emphasizes DNs linked to any or all of the ANs which are linked to the chosen node(s));
“POTMAG”: a method of modifying the variable Potentiation of a node, and using that value to influence the degree of change to the variable ‘mag’ from a subsequent operation. Thus, one operation on the first set of nodes may call Node1.setPotentiationValue( ) and a subsequent operation on the second set of nodes may set the value of Node1.mag based on Node1.getPotentiationValue( ) This ‘primes’ a set of nodes, and can operate approximately as a soft, or non-binary AND operation.
Another aspect of the invention is structuring of a set of linked nodes (a “network”) including “application nodes” (sometimes referred to as applications). Applications are nodes containing code which get the information they operate on from traversing the network. E.g. an email node-application is linked to, or given a reference to, the node “Bob Smith”, and upon being invoked (by the action function inherent in each node or otherwise) searches the neighborhood of the “Bob Smith” node for a DN linked to an AN representing email address. If more than one is found, the user is presented with the selection to choose from. Thus any node-application can be ‘applied’ to any node.
One aspect of the invention is a method of accessing data, wherein the data is structured as a set of linked nodes, and each of the nodes includes at least one link to another one of the nodes. The method includes the steps of:
preliminary to displaying representations of the nodes on a screen in a screen space having N dimensions, where N is an integer, dividing a display space having dimension N+1 into an array of cells, wherein the dimension of the display space includes a size dimension;
linking each of the nodes to at least one of the cells; and
implementing a user interface which displays representations of at least some of the nodes on the screen having sizes determined by the cells to which said at least some of the nodes are linked, wherein the user interface rapidly accesses individual ones or groups of the nodes in response to selection of at least one of said representations.
The computer program listing appendix filed herewith is incorporated herein by reference. This appendix is a source code listing (in the Java programming language) of a computer program for programming a computer to implement an embodiment of the invention. In the listing (which consists of parts labeled “TL.java,” “Timer.java,” “ColorObj.java,” “Link.java,” “Mode.java,” “Node.java,” “Force.java,” “GetURLInfo.java,” “Input.java,” “Populate.java,” “GUI.java,” “DataSea.java,” “LinkObj.java,” “VRObj.java,” and “nsr.java”), the object “gui” of class “GUI” is the top-level object, and instantiates the object “datasea” of class “DataSea” (and other objects).
Claims (19)
1. A method comprising:
storing values from data of a relational database in one or more data nodes in a plurality of nodes;
storing code for an application in an application node of the plurality of nodes;
creating a plurality of links to connect one or more of the plurality of nodes to one or more other nodes in the plurality of nodes, each link being associated with a connection strength between a respective pair of nodes, wherein creating the plurality of links comprises defining links for the plurality of links using keys from the relational database;
setting a point of view from a specified node from the plurality of nodes in response to a query that identifies a selection of the specified node, the setting of the point of view associating a subset of nodes of the plurality of nodes to the specified node, the subset of nodes comprising one or more data nodes and the application node;
creating an order for the subset of nodes based on connection strengths of links that are associated with the subset of nodes;
generating a visualized hierarchical network of linked nodes that illustrates a representation of the order for one or more of the subset of nodes from the set point of view;
receiving a command to invoke the application node, the application node being linked to a particular node in the subset of nodes, the command comprising a search parameter;
responsive to the command to invoke the application node, searching a neighborhood of nodes within the particular node by the application for application-specific data requirements based on the search parameter in the command, values in the data nodes in the subset of nodes, and types of the subset of nodes to generate a search result; and
providing an updated visualized hierarchical network of updated linked nodes in a virtual reality mode for rendering on a display of a device to present the search result.
2. The method of claim 1 , wherein each link contains a description describing a source node corresponding to the link and type information describing a type for the source node.
3. The method of claim 1 , wherein creating the plurality of links comprises:
applying natural language processing to the values stored in the data nodes to capture semantic meaning from the values.
4. The method of claim 1 , wherein the connection strength between a respective pair of nodes is set to an initial default value.
5. The method of claim 1 , further comprising:
adjusting the connection strength of one or more links based on user input specifying the command.
6. The method of claim 1 , wherein the values stored in the data nodes corresponds to one or more of information in data fields of the relational database, relationship information associated with the data fields, instance field definitions from the relational database, semantic meanings found in the relational database, programming code, or programming data.
7. The method of claim 1 , further comprising:
storing code for a plurality of applications in a plurality of application nodes in the plurality of nodes;
detecting a plurality of events related to a user interacting with a plurality of different instances of one or more of the plurality of applications;
for each of the plurality of events, extracting data from one or more communications associated with a respective event;
creating a plurality of data nodes for the plurality of events, each data node comprising the data for the respective event and a time of the respective event;
identifying the point of view from one of the plurality of data nodes, the identifying of the point of view ordering a subset of the plurality of data nodes that are related to the point of view based on times of events corresponding to the subset of the plurality of data nodes;
generating visual data that illustrates a representation of the order of the subset of the plurality of data nodes from the point of view, the representation comprising a timeline and the subset of data nodes associated with the timeline based on times for the respective events; and
providing the visual data for rendering the representation on the display of the device.
8. The method of claim 1 , wherein the application comprises at least one of an electronic mail application, a web browser, word processing application, a spreadsheet application, or a notes application.
9. The method of claim 1 , further comprising:
executing the application using the virtual reality mode, wherein each of the data nodes store a vector describing a position of the respective data node.
10. A non-transitory computer-readable storage medium including instructions that, when executed by a processor, cause the processor to perform operations comprising:
storing values from data of a relational database in one or more data nodes in a plurality of nodes;
storing code for an application in an application node of the plurality of nodes;
creating a plurality of links to connect one or more of the plurality of nodes to one or more other nodes in the plurality of nodes, each link being associated with a connection strength between a respective pair of nodes, wherein creating the plurality of links comprises defining links for the plurality of links using keys from the relational database;
setting a point of view from a specified node from the plurality of nodes in response to a query that identifies a selection of the specified node, the setting of the point of view associating a subset of nodes of the plurality of nodes to the specified node, the subset of nodes comprising one or more data nodes and the application node;
creating an order for the subset of nodes based on connections strengths of links that are associated with the subset of nodes;
generating a visualized hierarchical network of linked nodes that illustrates a representation of the order for one or more of the subset of nodes from the set point of view;
receiving a command to invoke the application node, the application node being linked to a particular node in the subset of nodes, the command comprising a search parameter;
responsive to the command to invoke the application node, searching the neighborhood of nodes within the particular node by the application for application-specific data requirements based on the search parameter in the command, values in the data nodes in the subset of nodes, and types of the subset of nodes to generate a search result; and
providing an updated visualized hierarchical network of updated linked nodes in a virtual reality mode for rendering on a display of a device to present the search result.
11. The non-transitory computer readable storage medium of claim 10 , wherein each link contains at least one of a description describing a source node corresponding to the link and type information describing a type for the source node or a description comprising semantic information describing a relationship between two nodes defined by the link.
12. The non-transitory computer readable storage medium of claim 10 , wherein creating the plurality of links comprises at least one of:
applying natural language processing to the values stored in the data nodes to capture semantic meaning from the values.
13. The non-transitory computer readable storage medium of claim 10 , wherein the values stored in the data nodes corresponds to one or more of information in data fields of the relational database, relationship information associated with the data fields, instance field definitions from the relational database, semantic meanings found in the relational database, programming code, or programming data.
14. The non-transitory computer readable storage medium of claim 10 , the operations further comprising:
adjusting the connection strength of one or more links based on user input specifying the command.
15. A system comprising:
a memory; and
a processor coupled to the memory to:
store values from data of a relational database in one or more data nodes in a plurality of nodes;
store code for an application in an application node of the plurality of nodes;
create a plurality of links to connect one or more of the plurality of nodes to one or more other nodes in the plurality of nodes, each link being associated with a connection strength between a respective pair of nodes, wherein to create the plurality of links the processor is to define links for the plurality of links using keys from the relational database;
set a point of view from a specified node from the plurality of nodes in response to a query that identifies a selection of the specified node, the setting of the point of view associating a subset of nodes to the specified node, the subset of nodes of the plurality of nodes comprising one or more data nodes and the application node;
create an order for one or more of the subset of nodes based on connection strengths of links that are associated with the subset of nodes;
generate a visualized hierarchical network of linked nodes that illustrates a representation of the order for the subset of nodes from the set point of view;
receive a command to invoke the application node, the application node being linked to a particular node in the subset of nodes, the command comprising a search parameter;
responsive to the command to invoke the application node, search the neighborhood of nodes within the particular node by the application for application-specific data requirements based on the search parameter in the command, values in the data nodes in the subset of nodes, and types of the subset of nodes to generate a search result; and
provide an updated visualized hierarchical network of updated linked nodes in a virtual reality mode for rendering on a display of a device to present the search result.
16. The system of claim 15 , wherein each link contains a description describing a source node corresponding to the link and type information describing a type for the source node.
17. The system of claim 15 , wherein the processor to create the plurality of links comprises:
applying natural language processing to the values stored in the data nodes to capture semantic meaning from the values.
18. The system of claim 15 , wherein the connection strength between a respective pair of nodes is set to an initial default value.
19. The system of claim 15 , wherein the processor is further to:
adjust the connection strength of one or more links based on user input specifying the command.
Priority Applications (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/397,535 US9530227B2 (en) | 1999-05-25 | 2012-02-15 | Methods for generating visual data from nodes containing identity data for persons from a set point of view |
US13/619,953 US20130127864A1 (en) | 1999-05-25 | 2012-09-14 | Methods for Generating Visual Data From Nodes Containing Identify Data for Individuals From a Set View Point |
US13/619,984 US9547923B2 (en) | 1999-05-25 | 2012-09-14 | Methods for generating visual data from nodes containing identify data for individuals from a set view point |
Applications Claiming Priority (5)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13574099P | 1999-05-25 | 1999-05-25 | |
US09/578,127 US6714936B1 (en) | 1999-05-25 | 2000-05-24 | Method and apparatus for displaying data stored in linked nodes |
US10/810,407 US8019786B2 (en) | 1999-05-25 | 2004-03-26 | Method and apparatus for displaying data stored in linked nodes |
US13/198,301 US8799323B2 (en) | 1999-05-25 | 2011-08-04 | Method and apparatus for displaying data stored in linked nodes |
US13/397,535 US9530227B2 (en) | 1999-05-25 | 2012-02-15 | Methods for generating visual data from nodes containing identity data for persons from a set point of view |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/198,301 Continuation US8799323B2 (en) | 1999-05-25 | 2011-08-04 | Method and apparatus for displaying data stored in linked nodes |
Related Child Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/619,953 Continuation US20130127864A1 (en) | 1999-05-25 | 2012-09-14 | Methods for Generating Visual Data From Nodes Containing Identify Data for Individuals From a Set View Point |
US13/619,984 Continuation US9547923B2 (en) | 1999-05-25 | 2012-09-14 | Methods for generating visual data from nodes containing identify data for individuals from a set view point |
Publications (2)
Publication Number | Publication Date |
---|---|
US20120162230A1 US20120162230A1 (en) | 2012-06-28 |
US9530227B2 true US9530227B2 (en) | 2016-12-27 |
Family
ID=31996561
Family Applications (6)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/578,127 Expired - Lifetime US6714936B1 (en) | 1999-05-25 | 2000-05-24 | Method and apparatus for displaying data stored in linked nodes |
US10/810,407 Expired - Fee Related US8019786B2 (en) | 1999-05-25 | 2004-03-26 | Method and apparatus for displaying data stored in linked nodes |
US13/198,301 Expired - Fee Related US8799323B2 (en) | 1999-05-25 | 2011-08-04 | Method and apparatus for displaying data stored in linked nodes |
US13/397,535 Expired - Lifetime US9530227B2 (en) | 1999-05-25 | 2012-02-15 | Methods for generating visual data from nodes containing identity data for persons from a set point of view |
US13/619,984 Expired - Lifetime US9547923B2 (en) | 1999-05-25 | 2012-09-14 | Methods for generating visual data from nodes containing identify data for individuals from a set view point |
US13/619,953 Abandoned US20130127864A1 (en) | 1999-05-25 | 2012-09-14 | Methods for Generating Visual Data From Nodes Containing Identify Data for Individuals From a Set View Point |
Family Applications Before (3)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/578,127 Expired - Lifetime US6714936B1 (en) | 1999-05-25 | 2000-05-24 | Method and apparatus for displaying data stored in linked nodes |
US10/810,407 Expired - Fee Related US8019786B2 (en) | 1999-05-25 | 2004-03-26 | Method and apparatus for displaying data stored in linked nodes |
US13/198,301 Expired - Fee Related US8799323B2 (en) | 1999-05-25 | 2011-08-04 | Method and apparatus for displaying data stored in linked nodes |
Family Applications After (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/619,984 Expired - Lifetime US9547923B2 (en) | 1999-05-25 | 2012-09-14 | Methods for generating visual data from nodes containing identify data for individuals from a set view point |
US13/619,953 Abandoned US20130127864A1 (en) | 1999-05-25 | 2012-09-14 | Methods for Generating Visual Data From Nodes Containing Identify Data for Individuals From a Set View Point |
Country Status (1)
Country | Link |
---|---|
US (6) | US6714936B1 (en) |
Families Citing this family (282)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6772139B1 (en) * | 1998-10-05 | 2004-08-03 | Smith, Iii Julius O. | Method and apparatus for facilitating use of hypertext links on the world wide web |
US6714936B1 (en) | 1999-05-25 | 2004-03-30 | Nevin, Iii Rocky Harry W. | Method and apparatus for displaying data stored in linked nodes |
US7000194B1 (en) * | 1999-09-22 | 2006-02-14 | International Business Machines Corporation | Method and system for profiling users based on their relationships with content topics |
US6816857B1 (en) | 1999-11-01 | 2004-11-09 | Applied Semantics, Inc. | Meaning-based advertising and document relevance determination |
EP1109152A1 (en) * | 1999-12-13 | 2001-06-20 | Sony International (Europe) GmbH | Method for speech recognition using semantic and pragmatic informations |
US20020194267A1 (en) * | 2000-06-23 | 2002-12-19 | Daniel Flesner | Portal server that provides modification of user interfaces for access to computer networks |
US7200600B2 (en) * | 2000-06-30 | 2007-04-03 | Boris Gelfand | Data cells, and a system and method for accessing data in a data cell |
US7603632B1 (en) * | 2000-11-01 | 2009-10-13 | Microsoft Corporation | System and method for creating customizable nodes in a network diagram |
US20060047781A1 (en) * | 2000-11-22 | 2006-03-02 | Ed Anuff | Method and system for providing remote portal service modules |
US6792400B2 (en) * | 2000-12-18 | 2004-09-14 | General Motors Corporation | Visualization of complex system interactions |
US7082386B2 (en) * | 2001-02-21 | 2006-07-25 | International Business Machines Corporation | Generalized software modeling tool |
US20020180789A1 (en) * | 2001-06-01 | 2002-12-05 | Gregory Guttmann | Framework for developing web-based and email-based collaborative programs |
US20030033346A1 (en) * | 2001-08-10 | 2003-02-13 | Sun Microsystems, Inc. | Method, system, and program for managing multiple resources in a system |
US20030033398A1 (en) * | 2001-08-10 | 2003-02-13 | Sun Microsystems, Inc. | Method, system, and program for generating and using configuration policies |
US7293070B2 (en) * | 2001-09-17 | 2007-11-06 | Vignette Corporation | Method and system for deploying web components between portals in a portal framework |
US8606916B2 (en) | 2001-09-17 | 2013-12-10 | Open Text S.A. | Graphical user interface for performing administration on web components of web sites in a portal framework |
US7133907B2 (en) * | 2001-10-18 | 2006-11-07 | Sun Microsystems, Inc. | Method, system, and program for configuring system resources |
US6965559B2 (en) * | 2001-10-19 | 2005-11-15 | Sun Microsystems, Inc. | Method, system, and program for discovering devices communicating through a switch |
US20030079051A1 (en) * | 2001-10-24 | 2003-04-24 | Dean Moses | Method and system for the internationalization of computer programs employing graphical user interface |
WO2003040890A2 (en) * | 2001-11-09 | 2003-05-15 | Sun Microsystems, Inc. | Method, system, and program for rendering a visualization of network devices |
CN1589445B (en) * | 2001-11-19 | 2010-04-28 | 富士通株式会社 | Information navigation system |
US6931416B2 (en) * | 2001-12-05 | 2005-08-16 | International Business Machines Corp. | Ephemeral list for object-action navigation |
US20030115289A1 (en) * | 2001-12-14 | 2003-06-19 | Garry Chinn | Navigation in a voice recognition system |
US20030135499A1 (en) | 2002-01-14 | 2003-07-17 | Schirmer Andrew Lewis | System and method for mining a user's electronic mail messages to determine the user's affinities |
US20030135609A1 (en) * | 2002-01-16 | 2003-07-17 | Sun Microsystems, Inc. | Method, system, and program for determining a modification of a system resource configuration |
JP2003240567A (en) * | 2002-02-13 | 2003-08-27 | Mitsubishi Electric Corp | Navigation apparatus and method therefor |
US7496582B2 (en) * | 2002-02-20 | 2009-02-24 | Microsoft Corporation | Identification of relationships in an environment |
US20030236800A1 (en) * | 2002-06-19 | 2003-12-25 | Goeltzenleuchter Courtney D. | Dynamic recovery system and method |
US7103889B2 (en) | 2002-07-23 | 2006-09-05 | Sun Microsystems, Inc. | Method, system, and article of manufacture for agent processing |
US20040024887A1 (en) * | 2002-07-31 | 2004-02-05 | Sun Microsystems, Inc. | Method, system, and program for generating information on components within a network |
US7143615B2 (en) | 2002-07-31 | 2006-12-05 | Sun Microsystems, Inc. | Method, system, and program for discovering components within a network |
US20040022200A1 (en) * | 2002-07-31 | 2004-02-05 | Sun Microsystems, Inc. | Method, system, and program for providing information on components within a network |
US7472114B1 (en) | 2002-09-18 | 2008-12-30 | Symantec Corporation | Method and apparatus to define the scope of a search for information from a tabular data source |
US7886359B2 (en) * | 2002-09-18 | 2011-02-08 | Symantec Corporation | Method and apparatus to report policy violations in messages |
US8041719B2 (en) * | 2003-05-06 | 2011-10-18 | Symantec Corporation | Personal computing device-based mechanism to detect preselected data |
US7673344B1 (en) | 2002-09-18 | 2010-03-02 | Symantec Corporation | Mechanism to search information content for preselected data |
US8661498B2 (en) * | 2002-09-18 | 2014-02-25 | Symantec Corporation | Secure and scalable detection of preselected data embedded in electronically transmitted messages |
US8225371B2 (en) * | 2002-09-18 | 2012-07-17 | Symantec Corporation | Method and apparatus for creating an information security policy based on a pre-configured template |
US8302019B2 (en) * | 2002-11-05 | 2012-10-30 | International Business Machines Corporation | System and method for visualizing process flows |
US7743061B2 (en) * | 2002-11-12 | 2010-06-22 | Proximate Technologies, Llc | Document search method with interactively employed distance graphics display |
US7703028B2 (en) * | 2002-12-12 | 2010-04-20 | International Business Machines Corporation | Modifying the graphical display of data entities and relational database structures |
US7467125B2 (en) * | 2002-12-12 | 2008-12-16 | International Business Machines Corporation | Methods to manage the display of data entities and relational database structures |
US7224362B2 (en) * | 2003-01-30 | 2007-05-29 | Agilent Technologies, Inc. | Systems and methods for providing visualization and network diagrams |
US9633331B2 (en) | 2003-03-31 | 2017-04-25 | International Business Machines Corporation | Nearest known person directory function |
CA2429284A1 (en) * | 2003-05-22 | 2004-11-22 | Cognos Incorporated | Visual grouping of elements in a diagram |
EP1510940A1 (en) * | 2003-08-29 | 2005-03-02 | Sap Ag | A method of providing a visualisation graph on a computer and a computer for providing a visualisation graph |
EP1510941A1 (en) * | 2003-08-29 | 2005-03-02 | Sap Ag | A method of providing a visualisation graph on a computer and a computer for providing a visualisation graph |
EP1510938B1 (en) * | 2003-08-29 | 2014-06-18 | Sap Ag | A method of providing a visualisation graph on a computer and a computer for providing a visualisation graph |
EP1510939A1 (en) * | 2003-08-29 | 2005-03-02 | Sap Ag | A method of providing a visualisation graph on a computer and a computer for providing a visualisation graph |
US7239985B1 (en) * | 2003-09-23 | 2007-07-03 | Ncr Corporation | Methods, systems, and data structures for modeling information quality and maturity |
US7454428B2 (en) * | 2003-10-29 | 2008-11-18 | Oracle International Corp. | Network data model for relational database management system |
US9288000B2 (en) * | 2003-12-17 | 2016-03-15 | International Business Machines Corporation | Monitoring a communication and retrieving information relevant to the communication |
WO2005069224A1 (en) * | 2004-01-12 | 2005-07-28 | Allegorithmic | Method and tool for modifying a procedural map |
US7836402B2 (en) * | 2004-04-16 | 2010-11-16 | Alcatel Lucent | Multiple link connector list |
US7424476B2 (en) * | 2004-04-16 | 2008-09-09 | Aol Llc | Categorized web browsing history |
WO2005107405A2 (en) | 2004-05-04 | 2005-11-17 | Boston Consulting Group, Inc. | Method and apparatus for selecting, analyzing and visualizing related database records as a network |
US7860838B2 (en) * | 2004-06-04 | 2010-12-28 | Hewlett-Packard Development Company, L.P. | Dynamic hierarchical data structure tree building and state propagation using common information model |
US20070162508A1 (en) * | 2004-11-08 | 2007-07-12 | Mazzagatti Jane C | Updating information in an interlocking trees datastore |
US20060149731A1 (en) * | 2005-01-05 | 2006-07-06 | Schirmer Andrew L | System and method for deriving affinity relationships between objects |
US7844480B2 (en) * | 2005-01-27 | 2010-11-30 | International Business Machines Corporation | Method and system for planning and managing multiple projects on demand with critical chain and replenishment |
US20060184549A1 (en) * | 2005-02-14 | 2006-08-17 | Rowney Kevin T | Method and apparatus for modifying messages based on the presence of pre-selected data |
US8011003B2 (en) * | 2005-02-14 | 2011-08-30 | Symantec Corporation | Method and apparatus for handling messages containing pre-selected data |
US7614005B2 (en) * | 2005-04-19 | 2009-11-03 | International Business Machines Corporation | Method for seamlessly crossing GUI toolkit boundaries |
WO2006127596A2 (en) | 2005-05-20 | 2006-11-30 | Hillcrest Laboratories, Inc. | Dynamic hyperlinking approach |
US7492716B1 (en) * | 2005-10-26 | 2009-02-17 | Sanmina-Sci | Method for efficiently retrieving topology-specific data for point-to-point networks |
US10324899B2 (en) * | 2005-11-07 | 2019-06-18 | Nokia Technologies Oy | Methods for characterizing content item groups |
US7999810B1 (en) | 2006-08-30 | 2011-08-16 | Boice Gina L | System and method for animated computer visualization of historic events |
US20080082519A1 (en) * | 2006-09-29 | 2008-04-03 | Zentner Michael G | Methods and systems for managing similar and dissimilar entities |
US8086637B1 (en) | 2006-12-22 | 2011-12-27 | Emc Corporation | Access control for business process data |
US20080168478A1 (en) * | 2007-01-07 | 2008-07-10 | Andrew Platzer | Application Programming Interfaces for Scrolling |
US7844915B2 (en) | 2007-01-07 | 2010-11-30 | Apple Inc. | Application programming interfaces for scrolling operations |
US20080168402A1 (en) | 2007-01-07 | 2008-07-10 | Christopher Blumenberg | Application Programming Interfaces for Gesture Operations |
US8214797B2 (en) * | 2007-02-01 | 2012-07-03 | Microsoft Corporation | Visual association creation for object relational class development |
US8930331B2 (en) | 2007-02-21 | 2015-01-06 | Palantir Technologies | Providing unique views of data based on changes or rules |
US20080256114A1 (en) * | 2007-04-10 | 2008-10-16 | Microsoft Corporation | Techniques to display associated information between application programs |
US7823761B2 (en) * | 2007-05-16 | 2010-11-02 | The Invention Science Fund I, Llc | Maneuverable surgical stapler |
US8849865B1 (en) * | 2007-08-16 | 2014-09-30 | Google Inc. | Querying a data store of impressions |
EP3327170B1 (en) | 2007-09-12 | 2020-11-04 | Flisom AG | Apparatus for manufacturing a compound film |
US8823709B2 (en) | 2007-11-01 | 2014-09-02 | Ebay Inc. | User interface framework for viewing large scale graphs on the web |
WO2009148473A1 (en) * | 2007-12-12 | 2009-12-10 | 21Ct, Inc. | Method and system for abstracting information for use in link analysis |
US20090158146A1 (en) * | 2007-12-13 | 2009-06-18 | Concert Technology Corporation | Resizing tag representations or tag group representations to control relative importance |
US20090158178A1 (en) * | 2007-12-17 | 2009-06-18 | Dorian Birsan | Graphically navigating tree structures |
US8645827B2 (en) | 2008-03-04 | 2014-02-04 | Apple Inc. | Touch event model |
US8174502B2 (en) * | 2008-03-04 | 2012-05-08 | Apple Inc. | Touch event processing for web pages |
US8416196B2 (en) * | 2008-03-04 | 2013-04-09 | Apple Inc. | Touch event model programming interface |
US8717305B2 (en) * | 2008-03-04 | 2014-05-06 | Apple Inc. | Touch event model for web pages |
US7996373B1 (en) | 2008-03-28 | 2011-08-09 | Symantec Corporation | Method and apparatus for detecting policy violations in a data repository having an arbitrary data schema |
US8065739B1 (en) | 2008-03-28 | 2011-11-22 | Symantec Corporation | Detecting policy violations in information content containing data in a character-based language |
US7996374B1 (en) | 2008-03-28 | 2011-08-09 | Symantec Corporation | Method and apparatus for automatically correlating related incidents of policy violations |
US7958107B2 (en) * | 2008-04-10 | 2011-06-07 | Abo Enterprises, Llc | Fuzzy keyword searching |
US8429194B2 (en) | 2008-09-15 | 2013-04-23 | Palantir Technologies, Inc. | Document-based workflows |
US8826443B1 (en) | 2008-09-18 | 2014-09-02 | Symantec Corporation | Selective removal of protected content from web requests sent to an interactive website |
US8613040B2 (en) * | 2008-12-22 | 2013-12-17 | Symantec Corporation | Adaptive data loss prevention policies |
US9684521B2 (en) | 2010-01-26 | 2017-06-20 | Apple Inc. | Systems having discrete and continuous gesture recognizers |
US8566045B2 (en) | 2009-03-16 | 2013-10-22 | Apple Inc. | Event recognition |
US8566044B2 (en) * | 2009-03-16 | 2013-10-22 | Apple Inc. | Event recognition |
US8285499B2 (en) | 2009-03-16 | 2012-10-09 | Apple Inc. | Event recognition |
US9311112B2 (en) * | 2009-03-16 | 2016-04-12 | Apple Inc. | Event recognition |
US8935752B1 (en) | 2009-03-23 | 2015-01-13 | Symantec Corporation | System and method for identity consolidation |
US20100306708A1 (en) * | 2009-05-29 | 2010-12-02 | Rovi Techonologies Corporation | Systems and methods for handling profiles in a community |
CA2772082C (en) | 2009-08-24 | 2019-01-15 | William C. Knight | Generating a reference set for use during document review |
US20110134127A1 (en) * | 2009-12-03 | 2011-06-09 | Ravishankar Gundlapalli | Global Career Graph |
US9223589B2 (en) * | 2010-02-26 | 2015-12-29 | Microsoft Technology Licensing, Llc | Smooth layout animation of visuals |
US8909950B1 (en) | 2010-04-18 | 2014-12-09 | Aptima, Inc. | Systems and methods of power management |
WO2011137935A1 (en) * | 2010-05-07 | 2011-11-10 | Ulysses Systems (Uk) Limited | System and method for identifying relevant information for an enterprise |
US8552999B2 (en) | 2010-06-14 | 2013-10-08 | Apple Inc. | Control selection approximation |
US8499290B2 (en) * | 2010-06-15 | 2013-07-30 | Microsoft Corporation | Creating text functions from a spreadsheet |
WO2012031301A1 (en) | 2010-09-03 | 2012-03-08 | Jackson Robert Lewis Jr | Sparse dynamic selection trees |
US8683389B1 (en) * | 2010-09-08 | 2014-03-25 | The New England Complex Systems Institute, Inc. | Method and apparatus for dynamic information visualization |
US8983980B2 (en) * | 2010-11-12 | 2015-03-17 | Microsoft Technology Licensing, Llc | Domain constraint based data record extraction |
US8595750B2 (en) | 2010-11-30 | 2013-11-26 | Microsoft Corporation | Adaptive tree structure for visualizing data |
US9002859B1 (en) | 2010-12-17 | 2015-04-07 | Moonshadow Mobile, Inc. | Systems and methods for high-speed searching and filtering of large datasets |
WO2012097009A2 (en) | 2011-01-10 | 2012-07-19 | Ward Roy W | Systems and methods for high-speed searching and filtering of large datasets |
US8984447B2 (en) * | 2011-03-11 | 2015-03-17 | Oracle International Corporation | Comprehensibility of flowcharts |
US9298363B2 (en) | 2011-04-11 | 2016-03-29 | Apple Inc. | Region activation for touch sensitive surface |
EP2530632A1 (en) * | 2011-06-01 | 2012-12-05 | Amadeus S.A.S. | Method and system for dynamic profile structure handling and management |
US9092482B2 (en) | 2013-03-14 | 2015-07-28 | Palantir Technologies, Inc. | Fair scheduling for mixed-query loads |
US8799240B2 (en) | 2011-06-23 | 2014-08-05 | Palantir Technologies, Inc. | System and method for investigating large amounts of data |
US9547693B1 (en) | 2011-06-23 | 2017-01-17 | Palantir Technologies Inc. | Periodic database search manager for multiple data sources |
US8914422B2 (en) * | 2011-08-19 | 2014-12-16 | Salesforce.Com, Inc. | Methods and systems for designing and building a schema in an on-demand services environment |
US8732574B2 (en) | 2011-08-25 | 2014-05-20 | Palantir Technologies, Inc. | System and method for parameterizing documents for automatic workflow generation |
US8504542B2 (en) | 2011-09-02 | 2013-08-06 | Palantir Technologies, Inc. | Multi-row transactions |
US8583678B2 (en) * | 2011-11-21 | 2013-11-12 | Sap Portals Israel Ltd | Graphical exploration of a database |
US9721039B2 (en) * | 2011-12-16 | 2017-08-01 | Palo Alto Research Center Incorporated | Generating a relationship visualization for nonhomogeneous entities |
US9171054B1 (en) | 2012-01-04 | 2015-10-27 | Moonshadow Mobile, Inc. | Systems and methods for high-speed searching and filtering of large datasets |
US8990204B1 (en) | 2012-01-17 | 2015-03-24 | Roy W. Ward | Processing and storage of spatial data |
US9917739B2 (en) | 2012-02-20 | 2018-03-13 | Aptima, Inc. | Systems and methods for network pattern matching |
US8429197B1 (en) * | 2012-02-28 | 2013-04-23 | Symantec Corporation | Systems and methods for maintaining group membership records |
WO2013180330A1 (en) * | 2012-06-01 | 2013-12-05 | 한국과학기술정보연구원 | Method of presenting network search information, device for presenting network search information, and software storage medium storing related software |
US8957896B2 (en) * | 2012-06-11 | 2015-02-17 | Disney Enterprises, Inc. | Streaming hierarchy traversal renderer |
US9123162B2 (en) | 2012-06-11 | 2015-09-01 | Disney Enterprises, Inc. | Integration cone tracing |
US9053582B2 (en) | 2012-06-11 | 2015-06-09 | Disney Enterprises, Inc. | Streaming light propagation |
US9460200B2 (en) | 2012-07-02 | 2016-10-04 | International Business Machines Corporation | Activity recommendation based on a context-based electronic files search |
US9262499B2 (en) * | 2012-08-08 | 2016-02-16 | International Business Machines Corporation | Context-based graphical database |
US9798768B2 (en) * | 2012-09-10 | 2017-10-24 | Palantir Technologies, Inc. | Search around visual queries |
US9251237B2 (en) | 2012-09-11 | 2016-02-02 | International Business Machines Corporation | User-specific synthetic context object matching |
US8620958B1 (en) | 2012-09-11 | 2013-12-31 | International Business Machines Corporation | Dimensionally constrained synthetic context objects database |
US9619580B2 (en) | 2012-09-11 | 2017-04-11 | International Business Machines Corporation | Generation of synthetic context objects |
US9223846B2 (en) | 2012-09-18 | 2015-12-29 | International Business Machines Corporation | Context-based navigation through a database |
US9123154B2 (en) | 2012-10-09 | 2015-09-01 | Disney Enterprises, Inc. | Distributed element rendering |
US9741138B2 (en) | 2012-10-10 | 2017-08-22 | International Business Machines Corporation | Node cluster relationships in a graph database |
US9348677B2 (en) | 2012-10-22 | 2016-05-24 | Palantir Technologies Inc. | System and method for batch evaluation programs |
US8931109B2 (en) | 2012-11-19 | 2015-01-06 | International Business Machines Corporation | Context-based security screening for accessing data |
US9639587B2 (en) * | 2012-12-13 | 2017-05-02 | Sap Se | Social network analyzer |
US8983981B2 (en) | 2013-01-02 | 2015-03-17 | International Business Machines Corporation | Conformed dimensional and context-based data gravity wells |
US9229932B2 (en) | 2013-01-02 | 2016-01-05 | International Business Machines Corporation | Conformed dimensional data gravity wells |
US9123086B1 (en) | 2013-01-31 | 2015-09-01 | Palantir Technologies, Inc. | Automatically generating event objects from images |
US9069752B2 (en) | 2013-01-31 | 2015-06-30 | International Business Machines Corporation | Measuring and displaying facets in context-based conformed dimensional data gravity wells |
US9053102B2 (en) | 2013-01-31 | 2015-06-09 | International Business Machines Corporation | Generation of synthetic context frameworks for dimensionally constrained hierarchical synthetic context-based objects |
US9292506B2 (en) | 2013-02-28 | 2016-03-22 | International Business Machines Corporation | Dynamic generation of demonstrative aids for a meeting |
US9508315B2 (en) | 2013-03-08 | 2016-11-29 | Disney Enterprises, Inc. | Ordering rays in rendered graphics for coherent shading |
US10037314B2 (en) | 2013-03-14 | 2018-07-31 | Palantir Technologies, Inc. | Mobile reports |
US8937619B2 (en) | 2013-03-15 | 2015-01-20 | Palantir Technologies Inc. | Generating an object time series from data objects |
US10275778B1 (en) | 2013-03-15 | 2019-04-30 | Palantir Technologies Inc. | Systems and user interfaces for dynamic and interactive investigation based on automatic malfeasance clustering of related data in various data structures |
US8868486B2 (en) | 2013-03-15 | 2014-10-21 | Palantir Technologies Inc. | Time-sensitive cube |
US8909656B2 (en) | 2013-03-15 | 2014-12-09 | Palantir Technologies Inc. | Filter chains with associated multipath views for exploring large data sets |
US8855999B1 (en) | 2013-03-15 | 2014-10-07 | Palantir Technologies Inc. | Method and system for generating a parser and parsing complex data |
US8903717B2 (en) | 2013-03-15 | 2014-12-02 | Palantir Technologies Inc. | Method and system for generating a parser and parsing complex data |
US8917274B2 (en) | 2013-03-15 | 2014-12-23 | Palantir Technologies Inc. | Event matrix based on integrated data |
US8930897B2 (en) | 2013-03-15 | 2015-01-06 | Palantir Technologies Inc. | Data integration tool |
US8818892B1 (en) | 2013-03-15 | 2014-08-26 | Palantir Technologies, Inc. | Prioritizing data clusters with customizable scoring strategies |
US9965937B2 (en) | 2013-03-15 | 2018-05-08 | Palantir Technologies Inc. | External malware data item clustering and analysis |
US9753960B1 (en) * | 2013-03-20 | 2017-09-05 | Amdocs Software Systems Limited | System, method, and computer program for dynamically generating a visual representation of a subset of a graph for display, based on search criteria |
US10152526B2 (en) | 2013-04-11 | 2018-12-11 | International Business Machines Corporation | Generation of synthetic context objects using bounded context objects |
US8799799B1 (en) | 2013-05-07 | 2014-08-05 | Palantir Technologies Inc. | Interactive geospatial map |
US9195608B2 (en) | 2013-05-17 | 2015-11-24 | International Business Machines Corporation | Stored data analysis |
US9348794B2 (en) | 2013-05-17 | 2016-05-24 | International Business Machines Corporation | Population of context-based data gravity wells |
US9733716B2 (en) | 2013-06-09 | 2017-08-15 | Apple Inc. | Proxy gesture recognizer |
US10262462B2 (en) | 2014-04-18 | 2019-04-16 | Magic Leap, Inc. | Systems and methods for augmented and virtual reality |
US9223773B2 (en) | 2013-08-08 | 2015-12-29 | Palatir Technologies Inc. | Template system for custom document generation |
US9335897B2 (en) | 2013-08-08 | 2016-05-10 | Palantir Technologies Inc. | Long click display of a context menu |
US8713467B1 (en) | 2013-08-09 | 2014-04-29 | Palantir Technologies, Inc. | Context-sensitive views |
US20150066933A1 (en) * | 2013-09-03 | 2015-03-05 | String Enterprises, Inc. | Computer-implemented methods and systems for generating visual representations of complex and voluminous marketing and sales and other data |
US9785317B2 (en) | 2013-09-24 | 2017-10-10 | Palantir Technologies Inc. | Presentation and analysis of user interaction data |
US8938686B1 (en) | 2013-10-03 | 2015-01-20 | Palantir Technologies Inc. | Systems and methods for analyzing performance of an entity |
US8812960B1 (en) | 2013-10-07 | 2014-08-19 | Palantir Technologies Inc. | Cohort-based presentation of user interaction data |
US9116975B2 (en) | 2013-10-18 | 2015-08-25 | Palantir Technologies Inc. | Systems and user interfaces for dynamic and interactive simultaneous querying of multiple data stores |
US8924872B1 (en) | 2013-10-18 | 2014-12-30 | Palantir Technologies Inc. | Overview user interface of emergency call data of a law enforcement agency |
US9367939B2 (en) * | 2013-10-22 | 2016-06-14 | Nokia Technologies Oy | Relevance based visual media item modification |
US9021384B1 (en) | 2013-11-04 | 2015-04-28 | Palantir Technologies Inc. | Interactive vehicle information map |
US8832594B1 (en) | 2013-11-04 | 2014-09-09 | Palantir Technologies Inc. | Space-optimized display of multi-column tables with selective text truncation based on a combined text width |
US8868537B1 (en) | 2013-11-11 | 2014-10-21 | Palantir Technologies, Inc. | Simple web search |
US9105000B1 (en) | 2013-12-10 | 2015-08-11 | Palantir Technologies Inc. | Aggregating data from a plurality of data sources |
US9727622B2 (en) | 2013-12-16 | 2017-08-08 | Palantir Technologies, Inc. | Methods and systems for analyzing entity performance |
US9552615B2 (en) | 2013-12-20 | 2017-01-24 | Palantir Technologies Inc. | Automated database analysis to detect malfeasance |
US10356032B2 (en) | 2013-12-26 | 2019-07-16 | Palantir Technologies Inc. | System and method for detecting confidential information emails |
US9043696B1 (en) | 2014-01-03 | 2015-05-26 | Palantir Technologies Inc. | Systems and methods for visual definition of data associations |
US8832832B1 (en) | 2014-01-03 | 2014-09-09 | Palantir Technologies Inc. | IP reputation |
US9009827B1 (en) | 2014-02-20 | 2015-04-14 | Palantir Technologies Inc. | Security sharing system |
US9483162B2 (en) | 2014-02-20 | 2016-11-01 | Palantir Technologies Inc. | Relationship visualizations |
US10169447B2 (en) | 2014-02-24 | 2019-01-01 | Entefy Inc. | System and method of message threading for a multi-format, multi-protocol communication system |
US11755629B1 (en) | 2014-02-24 | 2023-09-12 | Entefy Inc. | System and method of context-based predictive content tagging for encrypted data |
US10394966B2 (en) | 2014-02-24 | 2019-08-27 | Entefy Inc. | Systems and methods for multi-protocol, multi-format universal searching |
US20170193009A1 (en) | 2015-12-31 | 2017-07-06 | Entefy Inc. | Systems and methods for filtering of computer vision generated tags using natural language processing |
CN103870542A (en) * | 2014-02-25 | 2014-06-18 | 中国人民解放军92859部队 | Storage method for marine environment data based on geographical fragmentation and dynamic tabulation |
US9727376B1 (en) | 2014-03-04 | 2017-08-08 | Palantir Technologies, Inc. | Mobile tasks |
US8924429B1 (en) | 2014-03-18 | 2014-12-30 | Palantir Technologies Inc. | Determining and extracting changed data from a data source |
US9836580B2 (en) | 2014-03-21 | 2017-12-05 | Palantir Technologies Inc. | Provider portal |
US9857958B2 (en) | 2014-04-28 | 2018-01-02 | Palantir Technologies Inc. | Systems and user interfaces for dynamic and interactive access of, investigation of, and analysis of data objects stored in one or more databases |
US9009171B1 (en) | 2014-05-02 | 2015-04-14 | Palantir Technologies Inc. | Systems and methods for active column filtering |
US9535974B1 (en) | 2014-06-30 | 2017-01-03 | Palantir Technologies Inc. | Systems and methods for identifying key phrase clusters within documents |
US9619557B2 (en) | 2014-06-30 | 2017-04-11 | Palantir Technologies, Inc. | Systems and methods for key phrase characterization of documents |
US10572496B1 (en) | 2014-07-03 | 2020-02-25 | Palantir Technologies Inc. | Distributed workflow system and database with access controls for city resiliency |
US9785773B2 (en) * | 2014-07-03 | 2017-10-10 | Palantir Technologies Inc. | Malware data item analysis |
US9021260B1 (en) | 2014-07-03 | 2015-04-28 | Palantir Technologies Inc. | Malware data item analysis |
US9256664B2 (en) | 2014-07-03 | 2016-02-09 | Palantir Technologies Inc. | System and method for news events detection and visualization |
US9202249B1 (en) | 2014-07-03 | 2015-12-01 | Palantir Technologies Inc. | Data item clustering and analysis |
US9454281B2 (en) | 2014-09-03 | 2016-09-27 | Palantir Technologies Inc. | System for providing dynamic linked panels in user interface |
US9767172B2 (en) | 2014-10-03 | 2017-09-19 | Palantir Technologies Inc. | Data aggregation and analysis system |
US9501851B2 (en) | 2014-10-03 | 2016-11-22 | Palantir Technologies Inc. | Time-series analysis system |
US9785328B2 (en) | 2014-10-06 | 2017-10-10 | Palantir Technologies Inc. | Presentation of multivariate data on a graphical user interface of a computing system |
US9984133B2 (en) | 2014-10-16 | 2018-05-29 | Palantir Technologies Inc. | Schematic and database linking system |
US9229952B1 (en) | 2014-11-05 | 2016-01-05 | Palantir Technologies, Inc. | History preserving data pipeline system and method |
US9043894B1 (en) | 2014-11-06 | 2015-05-26 | Palantir Technologies Inc. | Malicious software detection in a computing system |
US10362133B1 (en) | 2014-12-22 | 2019-07-23 | Palantir Technologies Inc. | Communication data processing architecture |
US9367872B1 (en) | 2014-12-22 | 2016-06-14 | Palantir Technologies Inc. | Systems and user interfaces for dynamic and interactive investigation of bad actor behavior based on automatic clustering of related data in various data structures |
US10552994B2 (en) | 2014-12-22 | 2020-02-04 | Palantir Technologies Inc. | Systems and interactive user interfaces for dynamic retrieval, analysis, and triage of data items |
US9348920B1 (en) | 2014-12-22 | 2016-05-24 | Palantir Technologies Inc. | Concept indexing among database of documents using machine learning techniques |
US9335911B1 (en) | 2014-12-29 | 2016-05-10 | Palantir Technologies Inc. | Interactive user interface for dynamic data analysis exploration and query processing |
US9870205B1 (en) | 2014-12-29 | 2018-01-16 | Palantir Technologies Inc. | Storing logical units of program code generated using a dynamic programming notebook user interface |
US9817563B1 (en) | 2014-12-29 | 2017-11-14 | Palantir Technologies Inc. | System and method of generating data points from one or more data stores of data items for chart creation and manipulation |
US10372879B2 (en) | 2014-12-31 | 2019-08-06 | Palantir Technologies Inc. | Medical claims lead summary report generation |
US11302426B1 (en) | 2015-01-02 | 2022-04-12 | Palantir Technologies Inc. | Unified data interface and system |
US10387834B2 (en) * | 2015-01-21 | 2019-08-20 | Palantir Technologies Inc. | Systems and methods for accessing and storing snapshots of a remote application in a document |
US9727560B2 (en) | 2015-02-25 | 2017-08-08 | Palantir Technologies Inc. | Systems and methods for organizing and identifying documents via hierarchies and dimensions of tags |
EP3611632A1 (en) | 2015-03-16 | 2020-02-19 | Palantir Technologies Inc. | Displaying attribute and event data along paths |
US9886467B2 (en) | 2015-03-19 | 2018-02-06 | Plantir Technologies Inc. | System and method for comparing and visualizing data entities and data entity series |
US9348880B1 (en) | 2015-04-01 | 2016-05-24 | Palantir Technologies, Inc. | Federated search of multiple sources with conflict resolution |
US20160321285A1 (en) * | 2015-05-02 | 2016-11-03 | Mohammad Faraz RASHID | Method for organizing and distributing data |
US11416216B2 (en) * | 2015-05-22 | 2022-08-16 | Micro Focus Llc | Semantic consolidation of data |
US10628834B1 (en) | 2015-06-16 | 2020-04-21 | Palantir Technologies Inc. | Fraud lead detection system for efficiently processing database-stored data and automatically generating natural language explanatory information of system results for display in interactive user interfaces |
US9418337B1 (en) | 2015-07-21 | 2016-08-16 | Palantir Technologies Inc. | Systems and models for data analytics |
US9454785B1 (en) | 2015-07-30 | 2016-09-27 | Palantir Technologies Inc. | Systems and user interfaces for holistic, data-driven investigation of bad actor behavior based on clustering and scoring of related data |
US9996595B2 (en) | 2015-08-03 | 2018-06-12 | Palantir Technologies, Inc. | Providing full data provenance visualization for versioned datasets |
US9456000B1 (en) | 2015-08-06 | 2016-09-27 | Palantir Technologies Inc. | Systems, methods, user interfaces, and computer-readable media for investigating potential malicious communications |
US10489391B1 (en) | 2015-08-17 | 2019-11-26 | Palantir Technologies Inc. | Systems and methods for grouping and enriching data items accessed from one or more databases for presentation in a user interface |
US9600146B2 (en) | 2015-08-17 | 2017-03-21 | Palantir Technologies Inc. | Interactive geospatial map |
US10102369B2 (en) | 2015-08-19 | 2018-10-16 | Palantir Technologies Inc. | Checkout system executable code monitoring, and user account compromise determination system |
US10853378B1 (en) | 2015-08-25 | 2020-12-01 | Palantir Technologies Inc. | Electronic note management via a connected entity graph |
US11150917B2 (en) | 2015-08-26 | 2021-10-19 | Palantir Technologies Inc. | System for data aggregation and analysis of data from a plurality of data sources |
US9485265B1 (en) | 2015-08-28 | 2016-11-01 | Palantir Technologies Inc. | Malicious activity detection system capable of efficiently processing data accessed from databases and generating alerts for display in interactive user interfaces |
US10706434B1 (en) | 2015-09-01 | 2020-07-07 | Palantir Technologies Inc. | Methods and systems for determining location information |
US9576015B1 (en) | 2015-09-09 | 2017-02-21 | Palantir Technologies, Inc. | Domain-specific language for dataset transformations |
US10296617B1 (en) | 2015-10-05 | 2019-05-21 | Palantir Technologies Inc. | Searches of highly structured data |
US9542446B1 (en) | 2015-12-17 | 2017-01-10 | Palantir Technologies, Inc. | Automatic generation of composite datasets based on hierarchical fields |
US9823818B1 (en) | 2015-12-29 | 2017-11-21 | Palantir Technologies Inc. | Systems and interactive user interfaces for automatic generation of temporal representation of data objects |
US10089289B2 (en) | 2015-12-29 | 2018-10-02 | Palantir Technologies Inc. | Real-time document annotation |
US9612723B1 (en) | 2015-12-30 | 2017-04-04 | Palantir Technologies Inc. | Composite graphical interface with shareable data-objects |
US10353754B2 (en) | 2015-12-31 | 2019-07-16 | Entefy Inc. | Application program interface analyzer for a universal interaction platform |
US10135764B2 (en) | 2015-12-31 | 2018-11-20 | Entefy Inc. | Universal interaction platform for people, services, and devices |
US10698938B2 (en) | 2016-03-18 | 2020-06-30 | Palantir Technologies Inc. | Systems and methods for organizing and identifying documents via hierarchies and dimensions of tags |
WO2017210618A1 (en) | 2016-06-02 | 2017-12-07 | Fti Consulting, Inc. | Analyzing clusters of coded documents |
US11086471B2 (en) * | 2016-06-06 | 2021-08-10 | Salesforce.Com, Inc. | Visualizing neural networks |
CN106095512B (en) * | 2016-06-21 | 2020-03-17 | 北京小米移动软件有限公司 | Application program opening method and device |
US10719188B2 (en) | 2016-07-21 | 2020-07-21 | Palantir Technologies Inc. | Cached database and synchronization system for providing dynamic linked panels in user interface |
US10324609B2 (en) | 2016-07-21 | 2019-06-18 | Palantir Technologies Inc. | System for providing dynamic linked panels in user interface |
US9740368B1 (en) * | 2016-08-10 | 2017-08-22 | Quid, Inc. | Positioning labels on graphical visualizations of graphs |
US10521411B2 (en) | 2016-08-10 | 2019-12-31 | Moonshadow Mobile, Inc. | Systems, methods, and data structures for high-speed searching or filtering of large datasets |
US10437840B1 (en) | 2016-08-19 | 2019-10-08 | Palantir Technologies Inc. | Focused probabilistic entity resolution from multiple data sources |
US10268345B2 (en) * | 2016-11-17 | 2019-04-23 | General Electric Company | Mehtod and system for multi-modal lineage tracing and impact assessment in a concept lineage data flow network |
US10318630B1 (en) | 2016-11-21 | 2019-06-11 | Palantir Technologies Inc. | Analysis of large bodies of textual data |
AU2017265144B2 (en) | 2016-12-02 | 2022-04-14 | Encompass Corporation Pty Ltd | Information retrieval |
US10460602B1 (en) | 2016-12-28 | 2019-10-29 | Palantir Technologies Inc. | Interactive vehicle information mapping system |
US10491690B2 (en) | 2016-12-31 | 2019-11-26 | Entefy Inc. | Distributed natural language message interpretation engine |
US10956406B2 (en) | 2017-06-12 | 2021-03-23 | Palantir Technologies Inc. | Propagated deletion of database records and derived data |
US10403011B1 (en) | 2017-07-18 | 2019-09-03 | Palantir Technologies Inc. | Passing system with an interactive user interface |
US11636927B2 (en) | 2017-09-29 | 2023-04-25 | Apple Inc. | Techniques for building medical provider databases |
US10824684B2 (en) | 2017-09-29 | 2020-11-03 | Apple Inc. | Techniques for anonymized searching of medical providers |
US11587650B2 (en) | 2017-09-29 | 2023-02-21 | Apple Inc. | Techniques for managing access of user devices to third-party resources |
US11822371B2 (en) | 2017-09-29 | 2023-11-21 | Apple Inc. | Normalization of medical terms |
US11409820B1 (en) * | 2017-10-18 | 2022-08-09 | Comake, Inc. | Workflow relationship management and contextualization |
US11157505B2 (en) | 2017-10-18 | 2021-10-26 | Comake, Inc. | Dynamic presentation of searchable contextual actions and data |
US10970349B1 (en) | 2017-10-18 | 2021-04-06 | Comake, Inc. | Workflow relationship management and contextualization |
US10783162B1 (en) | 2017-12-07 | 2020-09-22 | Palantir Technologies Inc. | Workflow assistant |
US11599369B1 (en) | 2018-03-08 | 2023-03-07 | Palantir Technologies Inc. | Graphical user interface configuration system |
US10754822B1 (en) | 2018-04-18 | 2020-08-25 | Palantir Technologies Inc. | Systems and methods for ontology migration |
US10885021B1 (en) | 2018-05-02 | 2021-01-05 | Palantir Technologies Inc. | Interactive interpreter and graphical user interface |
US11119630B1 (en) | 2018-06-19 | 2021-09-14 | Palantir Technologies Inc. | Artificial intelligence assisted evaluations and user interface for same |
CN109299256A (en) * | 2018-09-14 | 2019-02-01 | 成都信息工程大学 | A kind of online opining mining method and system |
CN111065053B (en) * | 2018-10-16 | 2021-08-17 | 北京凌宇智控科技有限公司 | System and method for video streaming |
WO2020122920A1 (en) * | 2018-12-13 | 2020-06-18 | Hewlett-Packard Development Company, L.P. | Customizable onscreen display reference points |
EP3896593A1 (en) * | 2020-04-14 | 2021-10-20 | ABB Schweiz AG | Method for analyzing effects of operator actions in industrial plants |
Citations (29)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5295261A (en) | 1990-07-27 | 1994-03-15 | Pacific Bell Corporation | Hybrid database structure linking navigational fields having a hierarchial database structure to informational fields having a relational database structure |
US5515487A (en) | 1993-05-28 | 1996-05-07 | International Business Machines Corporation | Displaying partial graphs by expanding and collapsing nodes |
US5546529A (en) * | 1994-07-28 | 1996-08-13 | Xerox Corporation | Method and apparatus for visualization of database search results |
US5740421A (en) | 1995-04-03 | 1998-04-14 | Dtl Data Technologies Ltd. | Associative search method for heterogeneous databases with an integration mechanism configured to combine schema-free data models such as a hyperbase |
US5751931A (en) | 1995-04-18 | 1998-05-12 | Lucent Technologies Inc. | Three dimensional graphical display of information |
US5778377A (en) | 1994-11-04 | 1998-07-07 | International Business Machines Corporation | Table driven graphical user interface |
US5812134A (en) | 1996-03-28 | 1998-09-22 | Critical Thought, Inc. | User interface navigational system & method for interactive representation of information contained within a database |
US5832494A (en) * | 1993-06-14 | 1998-11-03 | Libertech, Inc. | Method and apparatus for indexing, searching and displaying data |
US5835085A (en) * | 1993-10-22 | 1998-11-10 | Lucent Technologies Inc. | Graphical display of relationships |
US5895474A (en) * | 1995-09-04 | 1999-04-20 | International Business Machines Corporation | Interactive, tree structured, graphical visualization aid |
US5905498A (en) * | 1996-12-24 | 1999-05-18 | Correlate Technologies Ltd | System and method for managing semantic network display |
US5963965A (en) | 1997-02-18 | 1999-10-05 | Semio Corporation | Text processing and retrieval system and method |
US5987460A (en) | 1996-07-05 | 1999-11-16 | Hitachi, Ltd. | Document retrieval-assisting method and system for the same and document retrieval service using the same with document frequency and term frequency |
US6067548A (en) | 1998-07-16 | 2000-05-23 | E Guanxi, Inc. | Dynamic organization model and management computing system and method therefor |
US6144962A (en) * | 1996-10-15 | 2000-11-07 | Mercury Interactive Corporation | Visualization of web sites and hierarchical data structures |
US6154750A (en) | 1998-04-01 | 2000-11-28 | Cyberpulse Llc | Method and system for navigation and data entry in heirarchically-organized database views |
US6216134B1 (en) | 1998-06-25 | 2001-04-10 | Microsoft Corporation | Method and system for visualization of clusters and classifications |
US6256623B1 (en) | 1998-06-22 | 2001-07-03 | Microsoft Corporation | Network search access construct for accessing web-based search services |
US6300957B1 (en) * | 1998-07-29 | 2001-10-09 | Inxight Software, Inc. | Mapping a node-link structure to a rendering space beginning from any node |
US20010045952A1 (en) * | 1998-07-29 | 2001-11-29 | Tichomir G. Tenev | Presenting node-link structures with modification |
US6336123B2 (en) | 1996-10-02 | 2002-01-01 | Matsushita Electric Industrial Co., Ltd. | Hierarchical based hyper-text document preparing and management apparatus |
US20020013834A1 (en) | 1998-04-20 | 2002-01-31 | Jeffrey Esakov | Tracking and graphical display of user activity on an information network |
US6360227B1 (en) | 1999-01-29 | 2002-03-19 | International Business Machines Corporation | System and method for generating taxonomies with applications to content-based recommendations |
US6377287B1 (en) | 1999-04-19 | 2002-04-23 | Hewlett-Packard Company | Technique for visualizing large web-based hierarchical hyperbolic space with multi-paths |
US6486898B1 (en) * | 1999-03-31 | 2002-11-26 | Koninklijke Philips Electronics N.V. | Device and method for a lattice display |
US6509898B2 (en) * | 1998-04-17 | 2003-01-21 | Xerox Corporation | Usage based methods of traversing and displaying generalized graph structures |
US6594673B1 (en) * | 1998-09-15 | 2003-07-15 | Microsoft Corporation | Visualizations for collaborative information |
US6714936B1 (en) | 1999-05-25 | 2004-03-30 | Nevin, Iii Rocky Harry W. | Method and apparatus for displaying data stored in linked nodes |
US20040133555A1 (en) | 1998-12-04 | 2004-07-08 | Toong Hoo-Min | Systems and methods for organizing data |
Family Cites Families (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5333254A (en) * | 1991-10-02 | 1994-07-26 | Xerox Corporation | Methods of centering nodes in a hierarchical display |
JPH09153059A (en) * | 1995-11-30 | 1997-06-10 | Matsushita Electric Ind Co Ltd | History display method |
US6154213A (en) * | 1997-05-30 | 2000-11-28 | Rennison; Earl F. | Immersive movement-based interaction with large complex information structures |
US6348927B1 (en) * | 1998-02-27 | 2002-02-19 | Oracle Cor | Composing a description of a virtual 3D world from values stored in a database and generated by decomposing another description of a virtual 3D world |
US5999944A (en) * | 1998-02-27 | 1999-12-07 | Oracle Corporation | Method and apparatus for implementing dynamic VRML |
US6330589B1 (en) * | 1998-05-26 | 2001-12-11 | Microsoft Corporation | System and method for using a client database to manage conversation threads generated from email or news messages |
-
2000
- 2000-05-24 US US09/578,127 patent/US6714936B1/en not_active Expired - Lifetime
-
2004
- 2004-03-26 US US10/810,407 patent/US8019786B2/en not_active Expired - Fee Related
-
2011
- 2011-08-04 US US13/198,301 patent/US8799323B2/en not_active Expired - Fee Related
-
2012
- 2012-02-15 US US13/397,535 patent/US9530227B2/en not_active Expired - Lifetime
- 2012-09-14 US US13/619,984 patent/US9547923B2/en not_active Expired - Lifetime
- 2012-09-14 US US13/619,953 patent/US20130127864A1/en not_active Abandoned
Patent Citations (35)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5295261A (en) | 1990-07-27 | 1994-03-15 | Pacific Bell Corporation | Hybrid database structure linking navigational fields having a hierarchial database structure to informational fields having a relational database structure |
US5515487A (en) | 1993-05-28 | 1996-05-07 | International Business Machines Corporation | Displaying partial graphs by expanding and collapsing nodes |
US5832494A (en) * | 1993-06-14 | 1998-11-03 | Libertech, Inc. | Method and apparatus for indexing, searching and displaying data |
US5835085A (en) * | 1993-10-22 | 1998-11-10 | Lucent Technologies Inc. | Graphical display of relationships |
US5546529A (en) * | 1994-07-28 | 1996-08-13 | Xerox Corporation | Method and apparatus for visualization of database search results |
US5778377A (en) | 1994-11-04 | 1998-07-07 | International Business Machines Corporation | Table driven graphical user interface |
US5740421A (en) | 1995-04-03 | 1998-04-14 | Dtl Data Technologies Ltd. | Associative search method for heterogeneous databases with an integration mechanism configured to combine schema-free data models such as a hyperbase |
US5751931A (en) | 1995-04-18 | 1998-05-12 | Lucent Technologies Inc. | Three dimensional graphical display of information |
US5895474A (en) * | 1995-09-04 | 1999-04-20 | International Business Machines Corporation | Interactive, tree structured, graphical visualization aid |
US5812134A (en) | 1996-03-28 | 1998-09-22 | Critical Thought, Inc. | User interface navigational system & method for interactive representation of information contained within a database |
US5987460A (en) | 1996-07-05 | 1999-11-16 | Hitachi, Ltd. | Document retrieval-assisting method and system for the same and document retrieval service using the same with document frequency and term frequency |
US6336123B2 (en) | 1996-10-02 | 2002-01-01 | Matsushita Electric Industrial Co., Ltd. | Hierarchical based hyper-text document preparing and management apparatus |
US6144962A (en) * | 1996-10-15 | 2000-11-07 | Mercury Interactive Corporation | Visualization of web sites and hierarchical data structures |
US5905498A (en) * | 1996-12-24 | 1999-05-18 | Correlate Technologies Ltd | System and method for managing semantic network display |
US5963965A (en) | 1997-02-18 | 1999-10-05 | Semio Corporation | Text processing and retrieval system and method |
US6154750A (en) | 1998-04-01 | 2000-11-28 | Cyberpulse Llc | Method and system for navigation and data entry in heirarchically-organized database views |
US6509898B2 (en) * | 1998-04-17 | 2003-01-21 | Xerox Corporation | Usage based methods of traversing and displaying generalized graph structures |
US20020013834A1 (en) | 1998-04-20 | 2002-01-31 | Jeffrey Esakov | Tracking and graphical display of user activity on an information network |
US6256623B1 (en) | 1998-06-22 | 2001-07-03 | Microsoft Corporation | Network search access construct for accessing web-based search services |
US6216134B1 (en) | 1998-06-25 | 2001-04-10 | Microsoft Corporation | Method and system for visualization of clusters and classifications |
US6067548A (en) | 1998-07-16 | 2000-05-23 | E Guanxi, Inc. | Dynamic organization model and management computing system and method therefor |
US6300957B1 (en) * | 1998-07-29 | 2001-10-09 | Inxight Software, Inc. | Mapping a node-link structure to a rendering space beginning from any node |
US20010045952A1 (en) * | 1998-07-29 | 2001-11-29 | Tichomir G. Tenev | Presenting node-link structures with modification |
US6594673B1 (en) * | 1998-09-15 | 2003-07-15 | Microsoft Corporation | Visualizations for collaborative information |
US20040133555A1 (en) | 1998-12-04 | 2004-07-08 | Toong Hoo-Min | Systems and methods for organizing data |
US6360227B1 (en) | 1999-01-29 | 2002-03-19 | International Business Machines Corporation | System and method for generating taxonomies with applications to content-based recommendations |
US6486898B1 (en) * | 1999-03-31 | 2002-11-26 | Koninklijke Philips Electronics N.V. | Device and method for a lattice display |
US6377287B1 (en) | 1999-04-19 | 2002-04-23 | Hewlett-Packard Company | Technique for visualizing large web-based hierarchical hyperbolic space with multi-paths |
US6714936B1 (en) | 1999-05-25 | 2004-03-30 | Nevin, Iii Rocky Harry W. | Method and apparatus for displaying data stored in linked nodes |
US20050086238A1 (en) | 1999-05-25 | 2005-04-21 | Nevin Rocky Harry W.Iii | Method and apparatus for displaying data stored in linked nodes |
US8019786B2 (en) | 1999-05-25 | 2011-09-13 | Nevin Iii Rocky Harry W | Method and apparatus for displaying data stored in linked nodes |
US20120005239A1 (en) | 1999-05-25 | 2012-01-05 | Nevin Iii Rocky Harry W | Method and Apparatus for Displaying Data Stored in Linked Nodes |
US20130127865A1 (en) | 1999-05-25 | 2013-05-23 | Google Inc. | Methods for Generating Visual Data From Nodes Containing Identify Data for Individuals From a Set View Point |
US20130127864A1 (en) | 1999-05-25 | 2013-05-23 | Google Inc. | Methods for Generating Visual Data From Nodes Containing Identify Data for Individuals From a Set View Point |
US8799323B2 (en) | 1999-05-25 | 2014-08-05 | Google Inc. | Method and apparatus for displaying data stored in linked nodes |
Non-Patent Citations (5)
Title |
---|
Author Unknown "A Taxonomy of Virtual Reality" retrieved from http://vr.isdale.com/WhatIsVR/noframes/WhatIsVR4.1-A.html on Jan. 16, 2010. |
Collier, George H. "Thoth-II: hypertext with explicit semantics", Conference on Hypertext and Hypermedia Proceedings of the ACM conference on Hypertext, pp. 269-289, 1987. |
USPTO; Office Action for U.S. Appl. No. 13/619,953, mailed Feb. 2, 2015. |
USPTO; Office Action for U.S. Appl. No. 13/619,984, mailed Jan. 30, 2015. |
Webopedia, "Virtual Reality" retrieved from: http://www.webopedia.com/TERM/v/virtual-reality.html on Jan. 16, 2010. |
Also Published As
Publication number | Publication date |
---|---|
US20050086238A1 (en) | 2005-04-21 |
US20120162230A1 (en) | 2012-06-28 |
US8799323B2 (en) | 2014-08-05 |
US8019786B2 (en) | 2011-09-13 |
US20120005239A1 (en) | 2012-01-05 |
US20130127865A1 (en) | 2013-05-23 |
US6714936B1 (en) | 2004-03-30 |
US9547923B2 (en) | 2017-01-17 |
US20130127864A1 (en) | 2013-05-23 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9530227B2 (en) | Methods for generating visual data from nodes containing identity data for persons from a set point of view | |
US7054878B2 (en) | Context-based display technique with hierarchical display format | |
JP3671008B2 (en) | Customer self-service subsystem for context cluster discovery and verification | |
KR100341339B1 (en) | Display Screen and Window Size Related Web Page Adaptation System | |
US8407593B2 (en) | Method, apparatus and computer program product to utilize context ontology in mobile device application personalization | |
US7809721B2 (en) | Ranking of objects using semantic and nonsemantic features in a system and method for conducting a search | |
US6801229B1 (en) | System for creation of visual representation of data | |
US20170039272A1 (en) | Nlp-based content recommender | |
TWI238948B (en) | Visual navigation utilization web technology | |
US6850932B2 (en) | Method, system, and program for merging query search results | |
CN112840335A (en) | User-centric contextual information for browsers | |
US20030038836A1 (en) | Web map tool | |
CN112889043A (en) | User-centric browser location | |
US20040139100A1 (en) | Context-based display technique | |
WO2009064315A1 (en) | A method and system for building text descriptions in a search database | |
WO2009064314A1 (en) | Selection of reliable key words from unreliable sources in a system and method for conducting a search | |
WO2009064318A1 (en) | Search system and method for conducting a local search | |
Bonnel et al. | Meaning metaphor for visualizing search results | |
Tvarožek et al. | Generating exploratory search interfaces for the semantic web | |
Rakotonirainy et al. | Augmenting a museum visitor's tour with a context aware framework | |
WO2009064312A1 (en) | Transformation in a system and method for conducting a search | |
EP0520922A2 (en) | Method and apparatus for accessing location information | |
Zhou et al. | A semantic approach to the dynamic design of interaction controls in conversation systems | |
Potamianos et al. | Human-computer interfaces to multimedia content a review | |
Ngonga Ngomo et al. | Involving the user in semantic search |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044695/0115Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |