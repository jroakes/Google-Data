CN115210717A - Hardware optimized neural architecture search - Google Patents
Hardware optimized neural architecture search Download PDFInfo
- Publication number
- CN115210717A CN115210717A CN202180018034.1A CN202180018034A CN115210717A CN 115210717 A CN115210717 A CN 115210717A CN 202180018034 A CN202180018034 A CN 202180018034A CN 115210717 A CN115210717 A CN 115210717A
- Authority
- CN
- China
- Prior art keywords
- neural network
- architecture
- network architecture
- candidate neural
- hardware resources
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F17/00—Digital computing or data processing equipment or methods, specially adapted for specific functions
- G06F17/10—Complex mathematical operations
- G06F17/15—Correlation function computation including computation of convolution operations
- G06F17/153—Multidimensional correlation or convolution
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
Abstract
Methods, systems, and apparatus, including computer programs encoded on a computer storage medium, for determining an architecture of a task neural network configured to perform a particular machine learning task on a set of target hardware resources. When deployed on a target set of hardware, such as a collection of data center accelerators, a task neural network is able to perform a particular machine learning task with enhanced accuracy and speed.
Description
Cross Reference to Related Applications
This application claims priority to U.S. application No. 17/039,178, filed on 30/9/2020, and priority to U.S. provisional application No. 63/052,927, filed on 16/7/2020. The disclosure of each of the prior applications is considered to be part of the disclosure of the present application and is incorporated by reference into the disclosure of the present application.
Technical Field
This specification relates to modifying neural network architectures.
Background
Neural networks are machine learning models that employ one or more layers of nonlinear units to predict the output of received inputs. In addition to the output layer, some neural networks include one or more hidden layers. The output of each hidden layer is used as input to the next layer in the network, i.e. the next hidden layer or output layer. Each layer of the network generates an output from the received input in accordance with the current values of the respective parameter set.
Some neural networks are recurrent neural networks. A recurrent neural network is a neural network that receives an input sequence and generates an output sequence from the input sequence. In particular, the recurrent neural network may use some or all of the internal states of the network from the previous time step in computing the output for the current time step. One example of a recurrent neural network is a Long Short Term (LSTM) neural network that includes one or more LSTM memory blocks. Each LSTM memory block may include one or more cells (cells), each cell including an input gate, a forgetting gate, and an output gate, allowing the cell to store a previous state of the cell, e.g., for generating current activations or providing to other components of the LSTM neural network.
Disclosure of Invention
This specification describes how a system implemented as a computer program on one or more computers at one or more locations can determine the architecture of a neural network configured to perform a particular neural network task.
Particular embodiments of the subject matter described in this specification can be implemented to realize one or more of the following advantages.
A Neural Architecture Search (NAS) system can select a neural network architecture that will result in a high performance neural network for a particular task efficiently and automatically, i.e., without user intervention. To this end, these systems may employ any of a number of different search techniques, including search techniques based on reinforcement learning, evolutionary search, micro-searchable, and the like. The NAS system can efficiently determine a novel neural network architecture that is suitable for a particular task, allowing the resulting neural network to have improved performance on the task. In general, these systems can effectively explore the large space of possible architectures to identify the architecture of the neural network that is appropriate for a particular task.
While these systems can produce neural network architectures that perform certain tasks with relatively high accuracy, these architectures are not always able to perform these tasks at relatively high speeds or otherwise efficiently when deployed on a set of target hardware resources. Thus, the neural network architecture produced by a NAS system, while highly accurate, may not always be sufficient for its intended applications. In some cases, this may be due, at least in part, to the design of such neural network architectures not being optimized for the set of target hardware resources on which they are to run.
For example, in some examples, such a set of target hardware resources may correspond to one or more data center accelerators, including one or more Tensor Processing Units (TPUs), one or more Graphics Processing Units (GPUs), or a combination thereof. Emerging data center accelerators including TPU and GPU adopt innovative hardware architectures to meet the increasing demands of machine learning models such as neural networks on computing power. Such accelerators may be particularly suitable for machine learning applications because they include a matrix multiply and accumulate unit or "matrix unit" configured to perform matrix multiplication, which may be considered core operations in a neural network. Neural network architectures are capable of achieving much higher computation rates (Ops/sec or FLOPs/sec) on such accelerators (e.g., TPUs and GPUs) than they are capable of achieving on some other type of hardware resource, such as a Central Processing Unit (CPU). However, to achieve a peak computation rate on such accelerators, the operating strength (Ops/Byte, or more specifically, the average number of operands performed when accessing a unit size of memory, e.g., the FLOPs per Byte of memory accessed) of the neural network architecture must be much higher than necessary to achieve the peak computation rate on other types of hardware resources (e.g., CPUs). Such accelerators also require a much higher degree of parallelism from the neural network architecture to achieve higher execution efficiency than other types of hardware resources (e.g., CPUs), because the matrix cells of such accelerators will be idle if the multiply and add operations in the neural network architecture are executed sequentially or too few multiply and add operations per cycle. Thus, a neural network architecture capable of performing tasks at relatively high speeds on a CPU is not necessarily capable of performing the same tasks at relatively high speeds on a TPU or GPU, and vice versa.
In some implementations, one or more of the NAS systems and techniques described herein may seek to select a neural network architecture that is optimized for the set of target hardware resources on which they will run. To this end, the systems and techniques described herein may use a search space that is enhanced with: a multi-target performance metric that is specific to the operation of the set of target hardware resources and that takes into account accuracy and latency when selecting the neural network architecture. For example, for an example in which the set of target hardware resources corresponds to one or more data center accelerators including one or more TPUs and/or GPUs, the search space utilized by one or more of the NAS systems and techniques described herein may include one or more "accelerator-friendly" operations that may provide enhanced operational strength, parallelism, and/or execution efficiency for the neural network architecture. For example, because depth-wise convolutions suffer from lower operational strength, in some embodiments, the search space utilized by one or more of the NAS systems and techniques described herein can include one or more operations to fuse the depth-wise convolution with adjacent 1 x 1 convolutions to increase operational strength. Further, because greater input and output depths may provide a higher degree of parallelism in a data center accelerator (e.g., TPU and/or GPU), in some embodiments, the search space utilized by one or more of the NAS systems and techniques described herein may include one or more operations that shape the input tensor using convolution with n × n kernels to improve parallelism, where n represents an integer value greater than 1 (e.g., n = 2). In some examples, one or more of these operations use a stride-n nxn convolution, such as a stride-2 convolution. Such convolution operations may also be used to benefit the capabilities and accuracy of the neural network architecture. Further, in some implementations, the search space utilized by one or more of the NAS systems and techniques described herein may include an activation function that provides enhanced parallelism in a data center accelerator (e.g., a TPU and/or a GPU).
While it is generally believed that the total number of computations required in a neural network architecture (FLOPS) is proportional to the speed of the neural network architecture, and thus fewer computations result in a faster neural network architecture, in developing the NAS systems and techniques described herein, it has been found that the opposite is true when the neural network architecture is run on a data center accelerator (e.g., TPU and/or GPU). Thus, the total number of computations required in a neural network architecture (FLOPS) alone may not depict a complete or accurate picture of the performance of the neural network architecture when deployed on such accelerators. For at least this reason, the actual measure of speed of each candidate neural network architecture, when deployed on a set of target hardware resources, may be decomposed into multi-objective performance metrics that are determined and utilized in one or more of the systems and techniques described herein. For example, in some embodiments, the systems and techniques described herein may operate to obtain a measure of the accuracy with which a candidate neural network architecture performs a task, run the candidate neural network architecture on a set of target hardware resources (e.g., one or more TPUs and/or GPUs) to obtain an actual measure of the speed (e.g., latency) at which the candidate neural network performs the task when deployed on the set of target hardware resources and/or the performance (e.g., operating strength, execution efficiency, etc.) of such task, and select a final neural network architecture based at least in part on these metrics. In this manner, the systems and techniques described herein may provide for the selection of a final neural network architecture that is configured to perform tasks with a relatively high level of accuracy and at a relatively high speed. This not only benefits the end-user of such neural network architectures, but may also provide significant cost savings to the owner and/or operator of the set of target hardware resources on which these neural network architectures run.
The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
Drawings
FIG. 1 illustrates an example neural architecture search system.
Fig. 2 is a diagram of an example neural network architecture.
FIG. 3 is a flow diagram of an example process for determining the architecture of a task neural network configured to perform a particular machine learning task when deployed on a set of target hardware resources.
FIG. 4 is a flow diagram of an exemplary process representing an iteration of a process for performing a search through a space of candidate neural network architectures to identify one or more candidate neural network architectures.
FIG. 5 is a flow diagram of an example process for generating outputs for network inputs of a particular machine learning task using a task neural network.
Like reference numbers and designations in the various drawings indicate like elements.
Detailed Description
This specification describes a system implemented as a computer program on one or more computers at one or more locations that determines an architecture of a task neural network configured to perform a particular machine learning task on a set of target hardware resources.
The task neural network may be configured to receive any kind of digital data input and generate any kind of scoring, classification, or regression output based on the input. In other words, the particular machine learning task that the task neural network is configured to perform may correspond to any of a variety of different tasks including scoring, classification, and/or regression tasks. As described below, such tasks are useful in a wide range of applications, such as those involving the processing of images, text, speech, and other data.
For example, if the input to the task neural network is an image or features that have been extracted from an image, the output generated by the task neural network for a given image may be a score for each object class in a set of object classes, each score representing an estimated likelihood that the image contains an image of an object that belongs to that class.
As another example, if the input to the task neural network is an internet resource (e.g., a web page), a document or portion of a document or a feature extracted from an internet resource, document or portion of a document, the output generated by the task neural network for a given internet resource, document or portion of a document may be a score for each topic in the set of topics, each score representing an estimated likelihood that the internet resource, document or portion of a document is about that topic.
As another example, if the input to the task neural network is characteristic of an impression context (impression context) of a particular advertisement, the output generated by the task neural network may be a score representing an estimated likelihood that the particular advertisement will be clicked.
As another example, if the input to the task neural network is a feature of a personalized recommendation to the user, e.g., a feature characterizing the context of the recommendation, e.g., a feature characterizing a previous action taken by the user, the output generated by the task neural network may be a score for each content item in the set of content items, each score representing an estimated likelihood that the user will respond favorably to being recommended that content item.
As another example, if the input to the task neural network is a sequence of text in one language, the output generated by the task neural network may be a score for each of a set of text segments in another language, each score representing an estimated likelihood that the text segment in the other language is a correct translation of the input text into the other language.
As another example, if the input to the task neural network is a sequence representing a spoken utterance, the output generated by the task neural network may be a score for each text segment in the set of text segments, each score representing an estimated likelihood that the text segment is a correct transcription of the utterance.
In some examples, the system to determine the architecture of the task neural network may correspond to system 100, as described in further detail below with reference to fig. 1. Similarly, in some examples, the architecture of the task neural network may correspond to one or both of neural network architectures 150 and 200, as described in further detail below with reference to fig. 1 and 2, respectively.
FIG. 1 illustrates an example Neural Architecture Search (NAS) system 100. The neural architecture search system 100 is an example of a system implemented as a computer program on one or more computers at one or more locations, in which the systems, components, and techniques described below may be implemented.
The neural architecture search system 100 is a system that determines the architecture of a task neural network that is configured to perform a particular machine learning task on a set of target hardware resources. The architecture defines the number of layers in the neural network, the operations performed by each layer, and the connectivity between layers in the neural network, i.e., which layers in the neural network receive input from which other layers. As described above, the task neural network may be configured to receive digital data input and perform a particular machine learning task (e.g., scoring, classification, regression, etc.) to generate output based on the input. The architecture determined by the system 100 defines the number of layers in the neural network, the operations performed by each layer, and the connectivity between layers in the neural network, i.e., which layers in the neural network receive inputs from which other layers.
The neural architecture search system 100 includes a controller 110, a training engine 120, a target hardware deployment engine 130, and a performance measurement engine 140. Briefly, as described in further detail below, the controller 110 iteratively selects a candidate neural network architecture from the candidate architecture search space 111 based on performance measurements (e.g., multi-objective performance metrics 142) of previously selected candidate neural network architectures. The training engine 120 trains each candidate neural network architecture selected by the controller 110 using the training data 102 and the validation set 104 to perform a particular machine learning task and determines a first performance metric 122 for each trained candidate neural network architecture based on performance of the corresponding trained candidate neural network architecture on the particular machine learning task. The target hardware deployment engine 130 runs each trained candidate neural network architecture on a set of target hardware resources (e.g., an aggregation hardware accelerator in a data center) and determines second performance metrics 132 for each trained candidate neural network architecture based on performance of the respective trained candidate neural network architecture when deployed on the set of target hardware resources. The performance measurement engine 140 determines a multi-objective performance metric 142 for each trained candidate neural network architecture based on the first and second performance metrics 122, 132 determined for the respective trained candidate neural network architecture. In some examples, the performance measurement engine 140 further provides the multi-objective performance metrics 142 determined for each trained candidate neural network architecture to the controller 110, which in turn, the controller 110 selects one or more additional candidate neural network architectures from the candidate architecture search space 111 based at least in part on the multi-objective performance metrics 142.
As an example, the controller 110 may select a kth candidate neural network architecture from the candidate architecture search space 111 based at least in part on the multi-objective performance metrics 142 determined for one or more previously selected candidate neural network architectures. For example, the selection of the kth candidate neural network architecture is based at least in part on the multi-objective performance metrics 142 determined for the (k-1) th candidate neural network architecture selected by the controller 110, the multi-objective performance metrics 142 determined for the (k-2) th candidate neural network architecture selected by the controller 110, and so on. (Multi-objective Performance metrics 142 will be described in more detail below.) in this example, the training engine 120 may then use the training data 102 and the validation set 104 to train the instance of the kth candidate neural network architecture selected by the controller 110 to perform the particular machine learning task, and determine the first performance metric 122 of the trained instance of the kth candidate neural network architecture based on the performance of its particular machine learning task. Further, in this example, target hardware deployment engine 130 may run the trained instance of the kth candidate neural network architecture on a set of target hardware resources (e.g., an aggregation hardware accelerator in a data center), and determine its second performance metric 132 based on performance of the trained instance of the kth candidate neural network architecture when deployed on the set of target hardware resources. In this example, performance measurement engine 140 may then determine multi-objective performance metrics 142 for the kth candidate neural network architecture selected by controller 110 based on first performance metrics 122 and second performance metrics 132 determined by training engine 120 and target hardware deployment engine 130 for the trained instance of the kth candidate neural network architecture. In this example, the performance measurement engine 140 may provide the multi-objective performance metrics 142 determined for the kth candidate neural network architecture selected by the controller 110, which the controller 110 may then in turn select the (k + 1) th candidate neural network architecture from the candidate architecture search space 111 based at least in part on the multi-objective performance metrics 142 determined for the kth candidate neural network architecture selected by the controller 110, the multi-objective performance metrics 142 determined for the (k-1) th candidate neural network architecture selected by the controller 110, the multi-objective performance metrics 142 determined for the (k-2) th candidate neural network architecture selected by the controller 110, and so on.
In general, the training data 102 and the validation set 104 both comprise a set of neural network inputs, and for each network input, a respective target output that should be generated by the neural network to perform a particular task. For example, a larger training data set may have been randomly partitioned to generate training data 102 and validation set 104.
The system 100 may receive the training data 102 and the validation set 104 in any of a variety of ways. For example, system 100 may receive training data as an upload from a remote user of the system over a data communication network, e.g., using an Application Programming Interface (API) available to system 100, and randomly divide the uploaded data into training data 102 and validation set 104. As another example, the system 100 may receive input from a user specifying which data that has been maintained by the system 100 should be used to train a neural network, and then separate the specified data into training data 102 and a validation set 104.
The controller 110 is configured to select a candidate neural network architecture from the candidate architecture search space 111 and generate an output 112 defining the selected candidate neural network architecture. The candidate architecture search space 111 may include a set or list of operations that may be performed by components of the candidate neural network architecture. The operations reflected in the candidate architecture search space 111 may be considered building blocks from which the system 100 may build, design, or otherwise develop candidate neural network architectures. In some examples, to select each candidate neural network architecture from the candidate architecture search space 111, the controller 110 is configured to, for each of one or more components of each candidate neural network architecture, select an operation to be performed by the component from a set or list of operations reflected in the candidate architecture search space 111.
In some embodiments, the set or list of operations reflected in the candidate architecture search space 111 may include operations specific to the set of target hardware resources, candidate nervesThe network architecture is intended to run on the set of target hardware resources or otherwise be used to take advantage of certain attributes of the set of target hardware resources. As such, for examples in which the set of target hardware resources correspond to one or more TPUs and/or GPUs, the set or list of operations reflected in the candidate architecture search space 111 may include operations that facilitate improved operational strength, parallelism, and/or execution efficiency. In this manner, candidate neural network architectures selected by the controller 110 using the candidate architecture search space 111 may be more likely to be able to perform particular tasks at a relatively high speed when deployed on a set of target hardware resources. In particular, for examples in which the set of target hardware resources corresponds to one or more TPUs and/or GPUs, the set or list of operations reflected in the candidate architecture search space 111 may include one or more operations that fuse a depth-direction convolution with an adjacent 1 x 1 convolution, one or more space-to-depth convolution operations that shape the input tensor by increasing the depth of the input tensor while decreasing the spatial extent of the input tensor (e.g., a 2x2 convolution), or a combination thereof. In some implementations, the one or more space-to-depth operations included in the set or list of operations reflected in the candidate architecture search space 111 may include one or more operations that use an n × n convolution of a stride n (e.g., an operation that uses a convolution with n × n kernels), where n represents an integer value greater than 1 (e.g., 2 or 4), and may be used to shape the hxwxc tensor input into a shape that is larger than 1architecture search space 111 may also include one or more additional operations including one or more other types of convolution operations and/or one or more shaping operations, each of which modifies the shape of the input tensor by performing one or more memory operations in one or more memories of the set of target hardware resources. For example, the candidate architecture search space 111 search space may include copying elements from one memory location by moving the elements of the tensor to a different memory location in memoryAn operation (e.g., a space-to-bulk operation) that is made to another memory location, or both, to reshape the input tensor. As a particular example, the operation may be an operation to rearrange spatial data blocks into depth. More specifically, the operation outputs a copy of the input tensor, where values from the height and width dimensions are moved to the depth dimension. In some embodiments, the operation corresponds to a space-to-batch operation.
In some examples, the controller 110 is configured to generate the output 112 according to a parameter that manages the operation of the controller 110 (referred to herein as a "controller parameter"). In some embodiments, the controller 110 is configured to select at least some candidate neural network architectures from the candidate architecture search space 111 based at least in part on the multi-objective performance metrics 142, as described in further detail below with reference to the performance measurement engine 140 of the system 100 and/or other feedback generated within the system 100. In at least some of the above-described embodiments, one or more of the controller parameters of the controller 110 may be adjusted or regulated based at least in part on the multi-objective performance metrics 142 and/or other feedback generated within the system 100. The controller 110 can select a candidate neural network architecture and/or generate an output 112 that specifies such candidate neural network architecture using any of a number of different NAS technologies, such as a reinforcement learning based, evolutionary search, micro-searchable NAS technology, or the like. In some examples, the controller 110 represents or includes a neural network, such as a Recurrent Neural Network (RNN), configured to generate the output sequence in accordance with the controller parameters. Generally, in these examples, the system 100 determines the architecture of the neural network by training the controller 110 to adjust the values of the controller parameters.
For each candidate neural network architecture selected by the controller 110 and represented in the output 112 generated by the controller 110, the training engine 120 trains an instance of the neural network having the architecture defined by the output 112 on the training data 102 and evaluates the performance (e.g., accuracy) of the trained instance on the validation set 104. In some implementations, to evaluate the performance of a trained instance of a neural network having an architecture defined by the output 112, the training engine 120 determines a first performance metric 122 or measure of performance of the trained instance on a particular machine learning task. In some examples, the first performance metric 122 determined for a given candidate neural network architecture may indicate a level of accuracy with which the candidate neural network architecture is capable of performing a particular machine learning task.
The training engine 120 may provide the performance measurement engine 140 with the first performance metric 122 determined for the candidate neural network architecture selected by the controller 110 for further evaluation. In addition, the training engine 120 may also provide the trained instances 124 of the candidate neural network architecture selected by the controller 110 to the target hardware deployment engine 130.
Target hardware deployment engine 130 performs one or more operations to determine second performance metrics 132 or performance measures for each trained instance of each neural network architecture selected by controller 110 (and defined by output 112) when deployed on a set of target hardware resources. In some examples, the second performance metric 132 determined for a given candidate neural network architecture may indicate a level of latency or speed at which the candidate neural network architecture can perform a particular machine learning task when deployed on a set of target hardware resources. To determine the second performance metric 132 for a given candidate neural network architecture, the target hardware deployment engine 130 may perform one or more operations to run the candidate neural network architecture on the set of target hardware resources.
As described above, in some embodiments, the set of target hardware resources may correspond to one or more TPUs and/or GPUs. In some examples, the set of target hardware resources may correspond to a set of hardware accelerators in the data center, which may include one or more TPUs, GPUs, other types of matrix machines, and/or vector machines, or a combination thereof. Although primarily described with reference to one or more TPUs and/or GPUs, it should be understood that in some examples, the set of target hardware resources may correspond to one or more CPUs, edge or mobile computing devices or other computing units. In such an example, the set or list of operations reflected in the candidate architecture search space 111 may include operations that are specific to the target set of hardware resources or otherwise used to exploit certain properties of the target set of hardware resources. In some implementations, the set of target hardware resources may correspond to a combination of two or more of the foregoing types of hardware resources (e.g., TPU, GPU, CPU, edge or mobile computing device, etc.).
In some examples, the set of target hardware resources may be included as part of system 100, but reserved for performing operations associated with target hardware deployment engine 130. In other examples, the set of target hardware resources may be communicatively coupled to the target hardware deployment engine 130 and/or one or more other components of the system 100. In either case, target hardware deployment engine 130 is configured to deploy the trained instances of the candidate neural network architecture selected by controller 110 on the set of target hardware resources and determine second performance metrics 132 based thereon.
More specifically, when deploying a trained instance of a given candidate neural network on a set of target hardware resources, target hardware deployment engine 130 may measure or determine (i) a latency of generating output using the candidate neural network when deployed on the set of target hardware resources, (ii) an operational strength of the candidate neural network when deployed on the set of target hardware resources, and/or (iii) an execution efficiency of the candidate neural network when deployed on the set of target hardware resources. In some embodiments, second performance metric 132 is based at least in part on one or more of the foregoing parameters (i), (ii), and (iii). In some embodiments, target hardware deployment engine 130 may determine second performance metric 132 for the candidate neural network architecture based at least in part on one or more of the aforementioned parameters (i), (ii), and (iii). In at least some of these embodiments, target hardware deployment engine 130 may use one or more of the foregoing parameters (i), (ii), and (iii) as second performance metrics 132 for the candidate neural network. In some examples, each of the aforementioned parameters (i), (ii), and (iii) is reflected directly or indirectly in the second performance metric 132. Other configurations are also possible.
In some embodiments, the set of target hardware resources may be included as part of system 100 and used to perform operations associated with one or more components of system 100 other than target hardware deployment engine 130. In some such embodiments, some or all of the functionality of target hardware deployment engine 130 may be integrated into training engine 120, and vice versa. For example, in some such embodiments, the system 100 may determine the first performance metric 122 and the second performance metric 132 in a simultaneous or near-simultaneous manner. Further, in some examples, target hardware deployment engine 130 may not necessarily deploy a trained instance of the candidate neural network architecture selected by controller 110 on the set of target hardware resources to determine second performance metrics 132 of the candidate neural network architecture, but may perform one or more operations to approximate or predict second performance metrics 132. For example, in some such examples, target hardware deployment engine 130 may utilize known or predetermined parameters of the target set of hardware resources in conjunction with one or more models to compute second performance metrics 132 or to simulate performance of a given candidate neural network when deployed on the target set of hardware resources and obtain one or more metrics thereof. Other configurations are also possible.
In some embodiments, latency, operational strength, and execution efficiency may be defined as:
where W (in FLOP) is the amount of computation required in the neural network architecture, Q (in bytes) is the amount of memory traffic (bytes of memory transfer) that occurs during execution of the neural network architecture, I is the operating strength of the neural network architecture, C (in FLOP/sec) is the computation rate achieved by the neural network architecture, C is the amount of computation required in the neural network architecture, and Ideal is the ideal computation rate for the implementation of the neural network architecture, E is the execution efficiency of the neural network, b is the memory bandwidth of the target set of hardware resources, C Max Is the peak computation rate achievable on the target set of hardware resources, and R is the "ridge point" or minimum operational strength required by the neural network architecture to achieve the peak computation rate on the target set of hardware resources. As shown in the above equation, C is represented by C Ideal And E is determined (e.g., E is defined as C/C Ideal ) And C is Ideal From I, b, C Max And R is determined. Parameters b, C Max And R may be a constant value associated with the target set of hardware resources. In fact, the end-to-end inference latency of the neural network architecture is a function of W, I and E. Thus, to optimize latency on a data center accelerator (e.g., TPU, GPU, etc.), system 100 may strive to optimize W, I, and E in their entirety and simultaneously, rather than just trying to reduce W (flo). System 100 may be configured to operate in this manner, as reducing W (flow) without considering I and E may cause C to drop faster than W, which may cause latency degradation.
Much like training engine 120, target hardware deployment engine 130 may provide performance measurement engine 140 with second performance metrics 132 determined for the candidate neural network architecture selected by controller 110 for further evaluation. The performance measurement engine 140 then uses the first and second performance metrics 122, 132 to determine multi-objective performance metrics 142. The multi-objective performance metrics 142 determined by the performance measurement engine 140 for a given candidate neural network architecture may combine the first performance metrics 122 determined by the training engine 120 for the candidate neural network architecture with the second performance metrics 132 determined by the target hardware deployment engine 130 for the candidate neural network architecture. As an example, for some embodiments in which the first performance metrics 122 indicate a level of accuracy at which a given candidate neural network architecture may be able to perform a particular machine learning task, and the second performance metrics 132 indicate a latency by which the candidate neural network architecture performs the particular machine learning task when deployed on a set of target hardware resources, the multi-objective performance metrics 142 determined for the mth candidate neural network architecture selected by the controller 110 may combine the accuracy and latency into:
where ACCURACY (m) is the level of ACCURACY of the measurement of the mth candidate neural network architecture in terms of its likely ability to perform a particular machine learning task, as determined by the training engine 120 for the mth candidate neural network architectureThe first performance metric 122 indicates LATENCY Actual (m) is a measured LATENCY of a particular machine learning task performed by the mth candidate neural network architecture when deployed on the set of target hardware resources, as indicated by a second performance metric 132, LATENCY, determined by the target hardware deployment engine 130 of the mth candidate neural network architecture Target (m) is a target or ideal latency for performing a particular machine learning task by the mth candidate neural network architecture when deployed on the set of target hardware resources, as determined based on known or approximate attributes of the set of target hardware resources, user-provided input (e.g., user-specified target latency) searching for the neural network architecture, and/or current operating conditions, and ω is a factor used to decide the weight given by the latency performance in the multi-target performance metrics 142. In some examples, the value of ω may be adjustable. For example, in some of these examples, the value of ω may be determined based on input provided by a user searching for the neural network architecture.
Similarly, for some embodiments in which the first and second performance metrics 122, 132 indicate accuracy and latency, respectively, in much the same manner as they were in the previous example, and the second performance metric 132 further indicates the strength of operation of a given candidate neural network architecture when deployed on a set of target hardware resources and the efficiency of execution of the candidate neural network architecture when deployed on the set of target hardware resources, the multi-objective performance metric 142 determined for the mth candidate neural network architecture selected by the controller 110 may combine accuracy, latency, strength of operation, and efficiency of execution as:
wherein, I Actual (m) is a measured operational strength, I, of the mth candidate neural network architecture as deployed on the set of target hardware resources, as indicated by the second performance metric 132 determined by the target hardware deployment engine 130 for the mth candidate neural network architecture Target (m) is a neural network searched as based on known or approximate attributes of the set of target hardware resourcesA target or ideal operating strength at which the mth candidate neural network architecture is deployed on the set of target hardware resources, as determined by user-provided input of the architecture (e.g., a target operating strength specified by the user) and/or current operating conditions, theta is a factor used to decide a weight to be given to the operating strength in the multi-target performance metrics 142, E A ctual (m) is the measurement execution efficiency when the mth candidate neural network architecture is deployed on the set of target hardware resources, as indicated by the second performance metric 132 determined by the target hardware deployment engine 130 for the mth candidate neural network architecture, E Target (m) a target or ideal execution efficiency for the mth candidate neural network architecture when deployed on the target set of hardware resources, as determined based on known or approximate properties of the target set of hardware resources, input provided by a user of the searching neural network architecture (e.g., a target operating strength specified by the user), and/or current operating conditions, and γ is a factor used to decide the weight given to the execution efficiency in the multi-target performance metrics 142. Much like the value of ω, in some examples, one or both of the value of θ and the value of γ are adjustable. For example, in some of these examples, one or both of the value of θ and the value of γ may be determined based on input provided by a user searching for the neural network architecture. It should be appreciated that terms may be inserted or deleted in the above equations as needed depending on the parameters indicated or not indicated by the second performance metrics 132. For example, where the second performance metric 132 is determined based on execution efficiency (but not including latency and operational strength), the equations governing the multi-target performance metrics 142 may omit latency and operational strength terms. Other configurations of multi-target performance metrics 142 are possible. More specifically, the values of ω, γ, θ may be determined as respective values according to respective search requirements. One or more factors (e.g., latency, operational strength, and execution efficiency) in the multi-target performance metric 142 may be omitted by adjusting one or more of the values of ω, γ, and θ to zero.
As described above, in some embodiments, the multi-objective performance metrics 142 may be provided to the controller 110, and in some such embodiments may be utilized by the controller 110 to select additional candidate neural network architectures. In some examples, the system 100 updates the current values of the controller parameters using the multi-objective performance metrics 142 to improve the expected performance of the architecture defined by the output 112 generated by the controller 110 for the task. For example, the system 100 may update the controller parameters in a manner that maximizes the values of the multi-objective metrics 142 (e.g., using approximate strategy optimization). For embodiments in which the controller 110 includes a neural network, the multi-objective performance metrics 142 may effectively be used as a "reward" for training the neural network of the controller 110. By repeatedly updating the values of the controller parameters in this manner, the system 100 can train or otherwise cause the controller 110 to ultimately generate an output 112 that results in the neural network having increased performance on a particular task, i.e., maximizing the expected accuracy over the validation set 104 of the architecture proposed by the controller 110, and increased performance when deployed over a set of target hardware resources, i.e., maximizing the speed at which a particular task is expected to be performed.
Once the controller 110 has been trained (e.g., the controller parameters have converged), the candidate architecture search space 111 has been exhausted, the maximum number of candidate neural network architectures has been generated, one or more candidate neural network architectures having multi-objective performance metrics 142 that satisfy one or more sets of criteria (e.g., one or more thresholds) have been generated, and/or some other termination criteria have been satisfied, the system 100 may select a final architecture for the neural network. To select the final architecture, the system 100 may generate a new output 112 based on the training values of the controller parameters and use the architecture defined by the new output 112 as the final architecture for the neural network, or may generate a plurality of new outputs 112 based on the training values and then select one of a plurality of candidate neural network architectures defined by the plurality of new outputs 112. In some examples, to select one or more final architectures, the system 100 may select one or more candidate neural network architectures that yield the largest first performance metric 122, second performance metric 132, and/or multi-target performance metric 142. In embodiments where multiple new outputs 112 are generated, the system 100 may evaluate the performance of the architecture defined by each new output 112 on the validation set 104, and then select the highest performing architecture (e.g., the candidate neural network architecture that yields the value of the multi-objective performance metric 142 that is greater than the values of all other candidate neural network architectures considered by the system 100) as the final architecture. Alternatively, the system 100 may further train each selected architecture, and then evaluate the performance of each architecture after further training.
The neural network search system 100 may then output architecture data 150 that specifies the final architecture of the neural network, i.e., data that specifies the layers that are part of the neural network, the connectivity between the layers, and the operations performed by the layers. For example, the neural network search system 100 may output the architecture data 150 to a user submitting training data. In some cases, the data 150 also includes training values for neural network parameters from training of a trained instance of the neural network having the architecture.
In some embodiments, instead of or in addition to outputting the architecture data 150, the system 100 trains an instance of the neural network having the determined architecture, e.g., from scratch or fine-tunes parameter values generated as a result of training the instance of the neural network having the architecture, and then uses the trained neural network to process a request received by a user, e.g., through an API provided by the system. That is, the system 100 may receive an input to be processed, process the input using a trained neural network, and provide an output generated by the trained neural network or data derived from the generated output in response to the received input. In some examples, the system 100 may select a final architecture using one or more of the techniques described above, and then scale the size of the architecture using a model scaling technique to generate the final architecture specified in the data 150. In other examples, one or more systems may receive data 150 from system 100 and use such model scaling techniques to scale up the size of the architecture specified in data 150.
For some embodiments in which the controller 110 includes a neural network, such as an RNN, the system 100 may train the neural network of the controller 110 in a distributed manner. That is, the system 100 includes multiple copies of the neural network of the controller 110. In some of these distributed training embodiments, each replica has a dedicated training engine that generates performance metrics for the batch of outputs 112 output by the replica, and a dedicated controller parameter update engine that determines updates to the controller parameters using the performance metrics. Once the controller parameter update engine has determined an update, the controller parameter update engine may transmit the update to a central parameter update server that is accessible to all controller parameter update engines. The central parameter update server may update the controller parameter values maintained by the server and send the updated values to the controller parameter update engine. In some cases, each of the multiple replicas and its corresponding training engine and parameter update engine may operate asynchronously with each other training engine and parameter update engine set.
In some examples, the final architecture selected by the system 100 for the neural network and specified by the architecture data 150 output by the neural network search system 100 may be similar or equivalent to the architecture of the neural network architecture 200, as described in further detail below with reference to fig. 2. This final architecture of the neural network may be particularly suitable for deployment on one or more TPUs and/or GPUs.
Fig. 2 illustrates an example neural network architecture 200. More specifically, neural network architecture 200 includes an initial convolution sub-network 210, a spatial-to-deep convolution sub-network 220, and one or more additional sub-networks 230. As described above, in some examples, the neural network architecture 200 may correspond to a final neural network architecture selected by the system 100, as described above with reference to fig. 1.
The neural network architecture 200 is designed for optimized performance when deployed on one or more TPUs, one or more GPUs, and/or one or more other matrix or vector machines. As such, where the set of target hardware resources associated with the system 100 includes one or more TPUs and/or GPUs, the system 100 is more likely to select a final neural network architecture that is similar or equivalent to the neural network architecture 200. Given that the neural network architecture 200 may correspond to a final neural network architecture selected by the system 100, the components that follow the neural network architecture 200 may be configured to perform operations from the set or list of operations reflected in the candidate architecture search space 111, as described above with reference to fig. 1. Briefly, as described in further detail below, the neural network architecture 200 is configured to receive and process network inputs 202 to generate network outputs 232 for the network inputs 202 for a particular machine learning task. For example, the particular machine learning task that the neural network architecture 200 is configured to perform may be an image processing task. In this example, the network input 202 may correspond to data representing one or more images, i.e., intensity values of pixels of the images. Examples of image processing tasks include image classification, object detection, image segmentation, and so forth.
The initial convolutional subnetwork 210 of the neural network architecture 200 can include one or more convolutional layers configured to receive the network input 202 and generate an initial feature representation 212 of the network input 202. The initial feature representation 212 of the network input 202 generated by the initial convolution sub-network 210 has a first spatial extent and a first number of depth channels. The initial convolution sub-network 210 may be configured to output the initial feature representation 212 of the network input 202 to the spatial-to-deep convolution sub-network 220.
The spatial-to-depth convolution sub-network 220 of the neural network architecture 200 may include one or more convolution layers configured to receive the initial feature representation 212 from the initial convolution sub-network 210 and perform a spatial-to-depth convolution operation on the initial feature representation 212 to generate a second feature representation 222 of the network input 202. A second feature representation 222 of the network input 202 generated by the spatial-to-depth convolution sub-network 220 has a second spatial extent that is less than the first spatial extent and a second number of depth channels that is greater than the first number of depth channels. In other words, the space-to-depth convolution operation performed by space-to-depth convolution sub-network 220 is an operation that increases the depth of the input tensor while decreasing the spatial extent of the input tensor. By shaping the convolved input tensors in this manner, the operation may be used to improve parallelism in the accelerator (e.g., TPU and/or GPU). Furthermore, this operation can also be used to advantage for the capacity and accuracy of the neural network architecture. Such operations may represent operations from a set or list of operations reflected in the candidate architecture search space 111 (e.g., "accelerator friendly" operations), as described above with reference to FIG. 1.
In some embodiments, the space-to-depth convolution operation performed by space-to-depth convolution sub-network 220 is a step-n convolution (e.g., a convolution with n kernels), where n represents an integer value greater than 1, such as 2 or 4. This operation can be used to shape the H W C tensor input into
The spatial-to-deep convolution sub-network 220 may be configured to output the second feature representation 222 of the network input 202 to one or more additional sub-networks 230 of the neural network architecture 200. One or more sub-networks 230 of the neural network architecture 200 may include one or more layers (e.g., convolutional layers) configured to receive the second feature representation 222 from the spatial-to-deep convolutional sub-network 220 and generate a network output 232 for the network input 202.
FIG. 3 is a flow diagram of an example process 300 for determining the architecture of a task neural network configured to perform a particular machine learning task when deployed on a set of target hardware resources. For convenience, the process 300 will be described as being performed by a system of one or more computers located at one or more locations. For example, a neural architecture search system suitably programmed in accordance with the present description, such as neural architecture search system 100 of fig. 1, may perform process 300.
The system receives training data for performing a particular machine learning task (step 302). This may correspond, for example, to the system 100 receiving the training data 102 and/or the validation set 104 as described above with reference to fig. 1. In some examples, the particular machine learning task may correspond to an image processing task.
The system searches in the space of candidate neural network architectures using the training data to identify one or more candidate neural network architectures (step 304). This may correspond, for example, to the controller 110 of the system 100 performing a search in the candidate architecture search space 111 as described above with reference to fig. 1. As described above, the controller 110 can use any of a number of different NAS technologies, such as those based on reinforcement learning, evolutionary searching, micro-searching, etc., in order to select candidate neural network architectures and/or generate outputs specifying such candidate neural network architectures. In some embodiments, to perform the operations of step 304, the system repeats process 400, as described in further detail below with reference to fig. 4.
FIG. 4 is a flow diagram of an exemplary process 400 representing an iteration of a process for performing a search in a space of candidate neural network architectures to identify one or more candidate neural network architectures. For convenience, the process 400 will be described as being performed by a system of one or more computers located at one or more locations. For example, a neural architecture search system suitably programmed in accordance with the subject specification, such as neural architecture search system 100 of fig. 1, can perform process 400. As described above, in some embodiments, the system repeatedly performs process 400 as part of step 304 of process 300.
The system selects a candidate neural network architecture from a space of candidate neural network architectures (step 402). This may correspond, for example, to the controller 110 of the system 100 selecting a candidate neural network architecture from the candidate architecture search space 111 as described above with reference to fig. 1. More specifically, at step 402, for each of one or more components of the candidate neural network architecture, the system selects an operation to be performed by the component from a set of operations that includes a spatial-to-deep convolution operation. The spatial-to-depth convolution operation included in the set of operations may be an operation of increasing the depth of the input tensor while decreasing the spatial extent of the input tensor. Further, the set of operations may also include one or more other types of convolution operations. For example, the set of operations may correspond to operations reflected in the candidate architecture search space 111 as described above with reference to fig. 1, which may include operations that are specific to a set of target hardware resources on which the candidate neural network architecture is intended to run or otherwise be used to exploit certain properties of the target hardware resources set. In some examples, the spatial-to-depth convolution operation may represent an example of one such operation. In some implementations, the space-to-depth convolution operation can be an n × n convolution of step-n, where n is an integer value greater than 1. For example, in some such embodiments, the space-to-depth convolution operation may be a step-2, 2x2 convolution. As described above, this operation may be advantageously deployed on a hardware accelerator for modifying the shape of the input tensor. It is well known that a shaping operation that increases the channel depth can result in a faster computation rate (Ops/sec) of the convolution, and that such a shaping operation can increase the computation speed without affecting the computation accuracy. Using a 2x2 convolution of step-2 as an alternative to the shaping operation is advantageous, because the convolution can be efficiently calculated in the TPU with high operation strength. In addition, the system can train a 2x2 convolution of stride-2 given the training set to improve the model capability and simulate substantially the same tensor shaping operation. In some implementations, the set of operations can also include one or more shaping operations, each shaping operation modifying a shape of the input tensor by performing one or more memory operations in one or more memories of the set of target hardware resources. For example, such one or more memory operations (e.g., space-to-bulk operations) may include one or more operations that each shape the input tensor by moving an element of the input tensor to a different memory location in one or more memories of the target set of hardware resources, copying an element from one memory location to another memory location, or both. As a particular example, the one or more operations may include one or more operations to rearrange the spatial data blocks into depth. More specifically, each of these one or more operations may output a copy of the input tensor, where values from the height and width dimensions are moved to the depth dimension.
In some examples, the system selects a candidate neural network architecture from a space of candidate neural network architectures based at least in part on performance measures determined for one or more previously selected candidate neural network architectures (step 402). For example, this may correspond to the controller 110 selecting a kth candidate neural network architecture from the candidate architecture search space 111 based at least in part on the multi-objective performance metrics 142 determined for the (k-1) th candidate neural network architecture selected by the controller 110, the multi-objective performance metrics 142 determined for the (k-2) th candidate neural network architecture selected by the controller 110, and so on, as described above with reference to FIG. 1.
The system determines performance measures for the selected candidate neural network architecture based on its (i) performance on a particular machine learning task and (ii) performance when deployed on a set of target hardware resources (step 404). For example, this may correspond to the performance measurement engine 140 determining the multi-objective metrics 142 for the candidate neural network architecture selected by the controller 110 as described above with reference to fig. 1.
Further, in some examples, (i) performance of the selected candidate neural network on the particular machine learning task may correspond to performance of the selected candidate neural network architecture, which is reflected in the first performance metrics 122 determined by the training engine 120 for the selected candidate neural network architecture. As such, in some embodiments, the process 400 includes one or more additional steps in which the system trains the candidate neural network using the training data. For example, this may correspond to an instance in which the training engine 120 uses the training data 102 and/or the validation set 104 to train the selected candidate neural network architecture as described above with reference to fig. 1. In some examples, such one or more additional steps may be performed after step 402 but before step 404.
Similarly, in some examples, (ii) the performance of the selected candidate neural network when deployed on the set of target hardware resources may correspond to the performance of the selected candidate neural network architecture reflected in the second performance metrics 132 determined by the target hardware deployment engine 130 for the selected candidate neural network architecture. As such, in some embodiments, process 400 includes one or more additional steps in which the system runs a trained instance of the candidate neural network on the set of target hardware resources. For example, this may correspond to target hardware deployment engine 130 running a trained instance of the candidate neural network on a set of target hardware resources associated with system 100 as described above with reference to fig. 1. In some implementations, the set of target hardware resources may correspond to one or more TPUs, GPUs, other matrix or vector machines, or a combination thereof.
In some embodiments, (ii) performance of the selected candidate neural network architecture when deployed on the set of target hardware resources is based at least in part on latency of generating output using the selected candidate neural network architecture when deployed on the set of target hardware resources. For example, such latency may correspond to the latency of the selected candidate neural network architecture as measured by target hardware deployment engine 130 when target hardware deployment engine 130 runs the selected candidate neural network architecture on the set of target hardware resources, and the latency is reflected in second performance metrics 132 determined by target hardware deployment engine 130 for the selected candidate neural network architecture.
In some embodiments, (ii) performance of the selected candidate neural network architecture when deployed on the set of target hardware resources is based at least in part on an operational strength of the selected candidate neural network architecture when deployed on the set of target hardware resources. For example, such operational strength may correspond to the operational strength of the selected candidate neural network architecture measured by target hardware deployment engine 130 and reflected in second performance metrics 132 determined by target hardware deployment engine 130 for the selected candidate neural network architecture when target hardware deployment engine 130 runs the selected candidate neural network architecture on the set of target hardware resources. In some examples, such an operating strength corresponds to an "I" parameter, as described above with reference to fig. 1.
In some embodiments, (ii) performance of the selected candidate neural network architecture when deployed on the set of target hardware resources is based at least in part on execution efficiency of the selected candidate neural network architecture when deployed on the set of target hardware resources. For example, such execution efficiency may correspond to the execution efficiency of the selected candidate neural network architecture as measured by target hardware deployment engine 130 and reflected in second performance metrics 132 determined by target hardware deployment engine 130 for the selected candidate neural network architecture when target hardware deployment engine 130 runs the selected candidate neural network architecture on the set of target hardware resources. In some examples, such execution efficiencies correspond to the "E" parameter, as described above with reference to fig. 1.
Referring again to FIG. 3, at step 306, the system generates an architecture for the task neural network that is configured to perform a particular task using the identified candidate neural network architecture. This may correspond, for example, to the system 100 generating the data 150 for output as described above with reference to fig. 1. In some examples, this may correspond to system 100 or another system in communication with system 100, using a model scaling technique to scale up the size of the selected final architecture to generate the architecture of the task neural network.
In some embodiments, the process 300 includes one or more additional steps in which the system performs a particular machine learning task on the new input using a task neural network with the generated architecture. For example, this may correspond to one or more systems using a neural network as reflected in the data 150 described above with reference to fig. 1, or a neural network having an architecture similar or equivalent to the neural network architecture 200 described above with reference to fig. 2, to perform a particular machine learning task. Such tasks may correspond to image processing tasks, for example.
In some embodiments, process 300 includes one or more additional steps in which the system provides data specifying the generated architecture for use in performing a particular machine learning task. This may correspond to, for example, system 100 providing data 150 for output as described above with reference to fig. 1.
FIG. 5 is a flow diagram of an example process 500 for generating output for network inputs of a particular machine learning task using a task neural network. For convenience, process 500 will be described as being performed by a system of one or more computers located at one or more locations. For convenience, process 500 will be described as being performed by a system of one or more computers located at one or more locations. For example, a system on which a neural network having an architecture similar or equivalent to the neural network architecture 150 of fig. 1 and/or the neural network architecture 200 of fig. 2 is deployed, suitably programmed in accordance with the present description, may perform the process 500.
The system receives a network input (step 502). This may correspond to, for example, the system receiving the network input 202, as described above with reference to fig. 2. The system processes the network inputs using the task neural network to generate outputs of the network inputs for a particular machine learning task (steps 504-508). For example, this may correspond to the system using a task neural network having an architecture similar or equivalent to the neural network architecture 200 described above with reference to fig. 2 to generate the network output 232 for the network input 202.
More specifically, at step 504, the system uses the task neural network to generate an initial feature representation of the network input. This may correspond, for example, to the initial convolution subnetwork 210 used to generate the initial feature representation 212 of the network input 202 as described above with reference to fig. 2.
At step 506, the system performs a space-to-depth operation on the initial feature representation using the task neural network to generate a second feature representation of the network input. For example, this may correspond to the space-to-depth convolution sub-network 220 used to generate the second feature representation 222 of the network input 202 based on the initial feature representation 212 as described above with reference to fig. 2. In some implementations, the space-to-depth convolution operation can be a step-n nxn convolution, where n is an integer value greater than 1. For example, in some such embodiments, the space-to-depth convolution operation may be a step-2, 2x2 convolution. As described above, this operation may be advantageously deployed on a hardware accelerator for modifying the shape of the input tensor.
Then, in step 508, the system processes the second feature representation using the task neural network to generate an output for the network input. This may correspond, for example, to one or more additional sub-networks 230 for generating a network output 232 based on the second characteristic representation 222 as described above with reference to fig. 2.
In some examples, the one or more additional subnetworks may include one or more convolutional layers. In some implementations, processing the network input using the task neural network includes processing the network input using the task neural network using a set of one or more hardware accelerators. In at least some of these implementations, the set of one or more hardware may include one or more Tensor Processing Units (TPUs), one or more Graphics Processing Units (GPUs), or a combination thereof.
The term "configured" is used herein in connection with system and computer program components. For a system of one or more computers configured to perform particular operations or actions, it is meant that the system has installed thereon software, firmware, hardware, or a combination thereof, that in operation cause the system to perform the operations or actions. That one or more computer programs are configured to perform certain operations or actions means that the one or more programs include instructions that, when executed by the data processing apparatus, cause the apparatus to perform the operations or actions.
Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, tangibly embodied computer software or firmware, computer hardware, including the structures disclosed in this specification and their structural equivalents, or combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a tangible, non-transitory storage medium for execution by, or to control the operation of, data processing apparatus. The computer storage medium may be a machine-readable storage device, a machine-readable storage substrate, a random or serial access storage device, or a combination of one or more of them. Alternatively or additionally, program instructions may be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
The term "data processing apparatus" refers to data processing hardware and includes all kinds of apparatus, devices and machines for processing data, including for example a programmable processor, a computer or multiple processors or computers. The apparatus can also be or include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can optionally include, in addition to hardware, code that creates an execution environment for the computer program, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
A computer program can also be called or described as a program, software application, module, software module, script, or code, and can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages; and it can be deployed in any form, including as a stand-alone program or as a module, a component, subroutine, or other unit suitable for use in a computing environment. A program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data, such as one or more scripts stored in a markup language document, in a single file dedicated to the program in question, or in multiple coordinated files, such as files that store one or more modules, sub programs, or portions of code. A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a data communication network.
In this specification, the term "database" is used broadly to refer to any collection of data: the data need not be structured in any particular way, or at all, and it may be stored on a storage device in one or more locations. Thus, for example, an index database may include multiple data sets, each of which may be organized and accessed differently.
Similarly, in this specification, the term "engine" is used broadly to refer to a software-based system, subsystem, or process that is programmed to perform one or more particular functions. Typically, the engine will be implemented as one or more software modules or components installed on one or more computers in one or more locations. In some cases, one or more computers will be dedicated to one particular engine; in other cases, multiple engines may be installed and run on the same or multiple computers.
The processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, and in combination with, special purpose logic circuitry, e.g., an FPGA or an ASIC.
A computer adapted to execute a computer program may be based on a general purpose or special purpose microprocessor or both, or any other kind of central processing unit. Generally, a central processing unit will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a central processing unit for carrying out or executing instructions and one or more memory devices for storing instructions and data. The central processing unit and the memory can be supplemented by, or incorporated in, special purpose logic circuitry. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such a device. Moreover, a computer may be embedded in another device, e.g., a mobile telephone, a Personal Digital Assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device, e.g., a Universal Serial Bus (USB) flash drive, to name a few.
Computer readable media suitable for storing computer program instructions and data include all forms of non volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disks; and CD ROM and DVD-ROM disks.
To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other types of devices may also be used to provide for interaction with a user; for example, feedback provided to the user can be any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback; and input from the user may be received in any form, including acoustic, speech, or tactile input. Further, the computer may interact with the user by sending and receiving documents to and from the device used by the user; for example, by sending a web page to a web browser on the user device in response to a request received from the web browser. In addition, a computer may interact with a user by sending a text message or other form of message to a personal device (e.g., a smartphone running a messaging application) and then receiving a response message from the user.
The data processing apparatus for implementing the machine learning model may also comprise, for example, a dedicated hardware accelerator unit for handling the general and computationally intensive parts of the machine learning training or production, i.e. the inference, workload.
The machine learning model may be implemented and deployed using a machine learning framework, such as a TensorFlow framework, a Microsoft cognitive toolkit framework, an Apache Singa framework, or an Apache MXNet framework.
Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface, a web browser, or an app through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a Local Area Network (LAN) and a Wide Area Network (WAN), such as the Internet.
The computing system may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, the server transmits data, such as HTML pages, to the user device, for example, to display data to and receive user input from a user interacting with the device acting as a client. Data generated at the user device, such as a result of the user interaction, may be received at the server from the device.
While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any invention or of what may be claimed, but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Furthermore, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, while operations are depicted in the drawings and are described in the claims below in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous. Moreover, the separation of various system modules and components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
Specific embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous.
Claims (20)
1. A method of determining an architecture of a task neural network configured to perform a particular machine learning task when deployed on a set of target hardware resources, wherein the method comprises:
receiving training data for performing the particular machine learning task;
performing a search in a space of candidate neural network architectures using the training data to identify one or more candidate neural network architectures, wherein performing the search comprises repeatedly performing the steps of:
selecting a candidate neural network architecture from the space, wherein selecting the candidate neural network architecture comprises selecting, for each of one or more components of the candidate neural network architecture, an operation to be performed by that component from a set of operations comprising (1) a space-to-depth convolution operation that increases a depth of an input tensor while decreasing a spatial extent of the input tensor, and (2) one or more other types of convolution operations; and
determining a performance measure for the selected candidate neural network architecture based on (i) performance of the selected candidate neural network architecture on the particular machine learning task and (ii) performance of the selected candidate neural network architecture when deployed on the set of target hardware resources;
generating an architecture for the task neural network using the identified candidate neural network architecture.
2. The method of claim 1, further comprising:
performing the particular machine learning task on new inputs using the task neural network with the generated architecture.
3. The method of claim 1, further comprising:
providing data specifying the generated architecture for performing the particular machine learning task.
4. The method of claim 1, wherein the space-to-depth convolution is a step-n nxn convolution, where n is an integer value greater than 1.
5. The method of claim 1, wherein the operations further comprise one or more shaping operations, each shaping operation modifying a shape of an input tensor by performing one or more memory operations in one or more memories of the set of target hardware resources.
6. The method of claim 1, wherein performance of the selected candidate neural network architecture when deployed on the set of target hardware resources is based at least in part on latency of generating output using the selected candidate neural network architecture when deployed on the set of target hardware resources.
7. The method of claim 1, wherein performance of the selected candidate neural network architecture when deployed on the set of target hardware resources is based at least in part on an operational strength of the selected candidate neural network architecture when deployed on the set of target hardware resources.
8. The method of claim 1, wherein performance of the selected candidate neural network architecture when deployed on the set of target hardware resources is based at least in part on an execution efficiency of the selected candidate neural network architecture when deployed on the set of target hardware resources.
9. The method of claim 1, wherein the set of target resources comprises a set of computing devices comprising one or more matrix machines, one or more vector machines, or a combination thereof.
10. The method of claim 1, wherein the set of target resources comprises a set of one or more hardware accelerators in a data center.
11. The method of claim 10, wherein the one or more hardware accelerators comprise one or more Tensor Processing Units (TPUs), one or more Graphics Processing Units (GPUs), or a combination thereof.
12. The method of claim 1, further comprising:
after selecting the candidate neural network architecture from the space, training an instance of the selected candidate neural network architecture using the training data, wherein determining the performance metric of the selected candidate neural network architecture comprises:
a performance measure of the trained instance of the selected candidate neural network architecture is determined.
13. The method of claim 12, further comprising:
running the trained instance of the selected candidate neural network architecture on the set of target hardware resources, wherein performance of the selected candidate neural network architecture when deployed on the set of target hardware resources comprises performance of the trained instance of the selected candidate neural network architecture on the set of target hardware resources when run on the set of target hardware resources.
14. The method of claim 1, wherein selecting the candidate neural network architecture from the space comprises:
selecting a candidate neural network architecture from the space based at least in part on one or more performance measures of one or more previously selected candidate neural network architectures, respectively.
15. One or more non-transitory storage media storing instructions that, when executed by one or more computers, cause the one or more computers to perform operations for determining an architecture of a task neural network configured to perform a particular machine learning task when deployed on a set of target hardware resources, wherein the operations comprise:
receiving training data for performing the particular machine learning task;
performing a search in a space of candidate neural network architectures using the training data to identify one or more candidate neural network architectures, wherein performing the search comprises repeatedly performing the steps of:
selecting a candidate neural network architecture from the space, wherein selecting the candidate neural network architecture comprises selecting, for each of one or more components of the candidate neural network architecture, an operation to be performed by that component from a set of operations comprising (1) a space-to-depth convolution operation that increases a depth of an input tensor while decreasing a spatial extent of the input tensor, and (2) one or more other types of convolution operations; and
determining a performance measure for the selected candidate neural network architecture based on (i) performance of the selected candidate neural network architecture on the particular machine learning task and (ii) performance of the selected candidate neural network architecture when deployed on the set of target hardware resources;
generating an architecture for the task neural network using the identified candidate neural network architecture.
16. A method, comprising:
receiving a network input; and
processing the network input using a task neural network to generate an output of the network input for a particular machine learning task, wherein processing the network input using the task neural network comprises:
processing the network input using an initial convolutional neural network subnetwork that includes one or more convolutional layers and is configured to generate an initial feature representation of the network input, the initial feature representation having a first spatial extent and a first number of depth channels;
performing a space-to-depth convolution operation on the initial feature representation of the network input to generate a second feature representation having: (i) A second spatial extent that is less than the first spatial extent, and (ii) a second number of depth channels that is greater than the first number; and
processing the second feature representation using one or more additional sub-networks to generate the output for the network input.
17. The method of claim 16, wherein the space-to-depth convolution is a step-n nxn convolution, where n is an integer value greater than 1.
18. The method of claim 16, wherein the one or more additional subnets comprise one or more convolutional layers.
19. The method of claim 16, wherein processing the network input using the task neural network comprises:
processing the network input using the task neural network using a set of one or more hardware accelerators.
20. The method of claim 19, wherein the set of one or more hardware accelerators comprises one or more Tensor Processing Units (TPUs), one or more Graphics Processing Units (GPUs), or a combination thereof.
Applications Claiming Priority (5)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US202063052927P | 2020-07-16 | 2020-07-16 | |
US63/052,927 | 2020-07-16 | ||
US17/039,178 US20220019869A1 (en) | 2020-07-16 | 2020-09-30 | Hardware-optimized neural architecture search |
US17/039,178 | 2020-09-30 | ||
PCT/US2021/029619 WO2022015390A1 (en) | 2020-07-16 | 2021-04-28 | Hardware-optimized neural architecture search |
Publications (1)
Publication Number | Publication Date |
---|---|
CN115210717A true CN115210717A (en) | 2022-10-18 |
Family
ID=79292628
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202180018034.1A Pending CN115210717A (en) | 2020-07-16 | 2021-04-28 | Hardware optimized neural architecture search |
Country Status (6)
Country | Link |
---|---|
US (1) | US20220019869A1 (en) |
EP (1) | EP4182850A1 (en) |
JP (1) | JP2023533631A (en) |
KR (1) | KR20220134627A (en) |
CN (1) | CN115210717A (en) |
WO (1) | WO2022015390A1 (en) |
Families Citing this family (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20220147680A1 (en) * | 2020-11-12 | 2022-05-12 | Samsung Electronics Co., Ltd. | Method for co-design of hardware and neural network architectures using coarse-to-fine search, two-phased block distillation and neural hardware predictor |
Family Cites Families (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10438117B1 (en) * | 2015-05-21 | 2019-10-08 | Google Llc | Computing convolutions using a neural network processor |
US11741342B2 (en) * | 2018-05-18 | 2023-08-29 | Baidu Usa Llc | Resource-efficient neural architects |
US11531861B2 (en) * | 2018-11-06 | 2022-12-20 | Google Llc | Neural architecture search with factorized hierarchical search space |
US11610117B2 (en) * | 2018-12-27 | 2023-03-21 | Tesla, Inc. | System and method for adapting a neural network model on a hardware platform |
US11494616B2 (en) * | 2019-05-09 | 2022-11-08 | Shenzhen Malong Technologies Co., Ltd. | Decoupling category-wise independence and relevance with self-attention for multi-label image classification |
US11153762B1 (en) * | 2020-05-11 | 2021-10-19 | At&T Mobility Ii Llc | Spectrum access optimization including for 5G or other next generation user equipment |
-
2020
- 2020-09-30 US US17/039,178 patent/US20220019869A1/en active Pending
-
2021
- 2021-04-28 WO PCT/US2021/029619 patent/WO2022015390A1/en unknown
- 2021-04-28 CN CN202180018034.1A patent/CN115210717A/en active Pending
- 2021-04-28 KR KR1020227030225A patent/KR20220134627A/en unknown
- 2021-04-28 JP JP2022552370A patent/JP2023533631A/en active Pending
- 2021-04-28 EP EP21728675.6A patent/EP4182850A1/en active Pending
Also Published As
Publication number | Publication date |
---|---|
JP2023533631A (en) | 2023-08-04 |
KR20220134627A (en) | 2022-10-05 |
WO2022015390A1 (en) | 2022-01-20 |
US20220019869A1 (en) | 2022-01-20 |
EP4182850A1 (en) | 2023-05-24 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11651259B2 (en) | Neural architecture search for convolutional neural networks | |
US20210334624A1 (en) | Neural architecture search using a performance prediction neural network | |
US11829874B2 (en) | Neural architecture search | |
US11669744B2 (en) | Regularized neural network architecture search | |
US10984319B2 (en) | Neural architecture search | |
CN111819580A (en) | Neural architecture search for dense image prediction tasks | |
EP3673419A1 (en) | Population based training of neural networks | |
CN115335830A (en) | Neural architecture search with weight sharing | |
CN115210717A (en) | Hardware optimized neural architecture search |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
REG | Reference to a national code |
Ref country code: HKRef legal event code: DERef document number: 40082074Country of ref document: HK |