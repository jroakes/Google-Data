RU2756482C2 - Optimized browser playback process - Google Patents
Optimized browser playback process Download PDFInfo
- Publication number
- RU2756482C2 RU2756482C2 RU2017142592A RU2017142592A RU2756482C2 RU 2756482 C2 RU2756482 C2 RU 2756482C2 RU 2017142592 A RU2017142592 A RU 2017142592A RU 2017142592 A RU2017142592 A RU 2017142592A RU 2756482 C2 RU2756482 C2 RU 2756482C2
- Authority
- RU
- Russia
- Prior art keywords
- resource
- url
- optional
- embedded
- web page
- Prior art date
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/02—Protocols based on web technology, e.g. hypertext transfer protocol [HTTP]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/955—Retrieval from the web using information identifiers, e.g. uniform resource locators [URL]
- G06F16/9566—URL specific, e.g. using aliases, detecting broken or misspelled links
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/957—Browsing optimisation, e.g. caching or content distillation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/957—Browsing optimisation, e.g. caching or content distillation
- G06F16/9577—Optimising the visualization of content, e.g. distillation of HTML documents
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/14—Digital output to display device ; Cooperation and interconnection of the display device with other functional units
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L41/00—Arrangements for maintenance, administration or management of data switching networks, e.g. of packet switching networks
- H04L41/02—Standardisation; Integration
- H04L41/0246—Exchanging or transporting network management information using the Internet; Embedding network management web servers in network elements; Web-services-based protocols
- H04L41/0273—Exchanging or transporting network management information using the Internet; Embedding network management web servers in network elements; Web-services-based protocols using web services for network management, e.g. simple object access protocol [SOAP]
- H04L41/0293—Exchanging or transporting network management information using the Internet; Embedding network management web servers in network elements; Web-services-based protocols using web services for network management, e.g. simple object access protocol [SOAP] for accessing web services by means of a binding identification of the management service or element
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/957—Browsing optimisation, e.g. caching or content distillation
- G06F16/9574—Browsing optimisation, e.g. caching or content distillation of access to content, e.g. by caching
Abstract
Description
УРОВЕНЬ ТЕХНИКИLEVEL OF TECHNOLOGY
[0001] Многие веб-страницы создаются динамически, что означает, что конечная страница, просматриваемая пользователем веб-браузера, генерируется, по меньшей мере частично, процессом воспроизведения браузера. Встраиваемые объекты, такие как сценарий, изображения и таблицы стилей, часто встроены в веб-страницу и могут влиять на контент и внешний вид воспроизводимой веб-страницы или могут быть включены для других целей, не связанных с генерацией динамического контента. Например, код Google Analytics JavaScript может быть встраиваемым объектом, который помогает отслеживать трафик для веб-сайта, но не влияет на контент. Встраиваемые объекты сами по себе могут включать в себя дополнительные встраиваемые объекты. Подобным образом, некоторые встраиваемые объекты могут быть скрытыми и невидимыми для пользователя. Веб-страница может иметь сотни встраиваемых объектов, и подсистема воспроизведения браузера тратит много времени на воспроизведение веб-страницы для пользователя, который тратит время на ожидание выборки браузером этих встраиваемых ресурсов.[0001] Many web pages are dynamically generated, which means that the final page viewed by the user of the web browser is generated, at least in part, by the browser rendering process. Embedded objects such as script, images, and style sheets are often embedded in a web page and can affect the content and appearance of the rendered web page, or can be included for other purposes other than generating dynamic content. For example, Google Analytics JavaScript code can be an embeddable object that helps track traffic to a website, but does not affect content. Embedded objects themselves can include additional embeddable objects. Likewise, some embeddable objects can be hidden and invisible to the user. A web page can have hundreds of embedded objects, and the browser's rendering engine spends a lot of time rendering the web page to the user who wastes time waiting for the browser to fetch these embedded resources.
СУЩНОСТЬ ИЗОБРЕТЕНИЯSUMMARY OF THE INVENTION
[0002] Реализации идентифицируют необязательные встраиваемые ресурсы веб-страниц и обеспечивают подсистеме воспроизведения возможность пропускать такие ресурсы, что улучшает время воспроизведения веб-страниц. Необязательные ресурсы представляют собой встраиваемые объекты, которые могут быть пропущены без значительного или существенного воздействия на контент воспроизводимой веб-страницы. Браузер может пропустить такие необязательные встраиваемые ресурсы во время процесса воспроизведения, что приводит к меньшему времени загрузки.[0002] Implementations identify optional embeddable resources of web pages and allow the rendering engine to skip such resources, which improves the rendering time of web pages. Optional resources are embeddable objects that can be overlooked without significant or significant impact on the content of the rendered web page. The browser can skip such optional embeddable resources during the playback process, resulting in faster load times.
[0003] В одном аспекте, система включает в себя по меньшей мере один процессор и память, запоминающую команды, которые, при исполнении по меньшей мере одним процессором, обеспечивают выполнение системой операций. Операции могут включать в себя идентификацию URL-шаблона, общего для множества URL, хранящихся в записях выборки, и выбор выборочной совокупности URL из множества URL. Операции могут также включать в себя определение, для каждого URL в выборочной совокупности, является ли URL необязательным, посредством воспроизведения первого результата воспроизведения для объекта встраивания URL, с использованием контента для URL, воспроизведения второго результата воспроизведения для объекта встраивания, без использования контента для URL, и вычисления оценки подобия для URL посредством сравнения первого результата воспроизведения и второго результата воспроизведения. Этот способ также включает в себя определение того, что URL является необязательным, когда оценка подобия является большей, чем порог подобия, и, когда заданное количество URL в выборочной совокупности являются необязательными, запоминание URL-шаблона в хранилище данных шаблонов необязательных ресурсов.[0003] In one aspect, a system includes at least one processor and memory that stores instructions that, when executed by at least one processor, cause the system to perform operations. Operations may include identifying a URL pattern common to the set of URLs stored in the fetch records and selecting a sample set of URLs from the set of URLs. The operations may also include determining, for each URL in the sample, whether the URL is optional, by playing the first playout for the URL embed object, using the content for the URL, playing the second playout for the embeddable object, without using the content for the URL, and calculating a similarity score for the URL by comparing the first playback result and the second playback result. The method also includes determining that the URL is optional when the similarity score is greater than the similarity threshold, and when a predetermined number of URLs in the sample are optional, storing the URL pattern in the optional resource pattern data store.
[0004] Одна или несколько реализаций изобретения, описанного здесь, может включать в себя один или несколько из следующих признаков. Например, операции могут также включать в себя прием запроса на контент запрашиваемого встраиваемого ресурса, определение того, соответствует ли запрашиваемый встраиваемый ресурс шаблону в хранилище данных, и возвращение указания на то, что запрашиваемый встраиваемый ресурс является необязательным, если запрашиваемый встраиваемый ресурс соответствует шаблону. В некоторых реализациях, указание может быть ошибкой «URL не найден». В качестве другого примера, идентификация URL-шаблона, общего для множества URL, хранящихся в записях выборки, может включать в себя генерацию группового URL для соответствующих URL, хранящихся в записях выборки, посредством удаления по меньшей мере участка строки запроса из URL, и кластеризацию URL посредством группового URL. В качестве другого примера, идентификация URL-шаблона, общего для множества URL, хранящихся в записях выборки, может включать в себя генерацию группового URL для соответствующих URL, хранящихся в записях выборки, посредством удаления по меньшей мере участка строки запроса из URL, кластеризацию URL посредством группового URL, и выбор группового URL кластера с наибольшим количеством элементов в качестве URL-шаблона. В качестве другого примера, вычисление оценки подобия может включать в себя определение самой длинной общей последовательности для дерева DOM первого результата воспроизведения и дерева DOM второго результата воспроизведения, и использование самой длинной общей последовательности для определения оценки подобия.[0004] One or more implementations of the invention described herein may include one or more of the following features. For example, operations may also include receiving a request for the content of a requested embed, determining if the requested embed matches a pattern in the data store, and returning an indication that the requested embed is optional if the requested embed matches a pattern. In some implementations, the indication may be a "URL not found" error. As another example, identifying a URL pattern common to a plurality of URLs stored in fetch records may include generating a group URL for corresponding URLs stored in fetch records by removing at least a portion of the query string from the URL, and clustering the URL. via a group URL. As another example, identifying a URL pattern common to a plurality of URLs stored in fetch records may include generating a group URL for corresponding URLs stored in fetch records by removing at least a portion of the query string from the URL, clustering the URLs by group URL, and selecting the cluster group URL with the highest cardinality as the URL pattern. As another example, calculating a similarity score may include determining the longest common sequence for the DOM tree of the first playout and the DOM tree of the second playout, and using the longest common sequence to determine the similarity score.
[0005] В другом аспекте, реализуемый на компьютере способ включает в себя идентификацию URL-шаблона, общего для множества URL, хранящихся в записях выборки, и выбор, с использованием по меньшей мере одного процессора, выборочной совокупности URL из множества URL. Способ может также включать в себя определение, для каждого URL в выборочной совокупности, является ли URL необязательным, посредством генерации первого результата воспроизведения для объекта встраивания URL с использованием контента для URL, генерации второго результата воспроизведения для объекта встраивания без использования контента для URL, и вычисления оценки подобия для URL посредством сравнения первого результата воспроизведения и второго результата воспроизведения, причем URL является необязательным, когда оценка подобия является большей, чем порог подобия. Способ может также включать в себя запоминание URL-шаблона в хранилище данных шаблонов необязательных ресурсов, когда большинство URL в выборочной совокупности являются необязательными.[0005] In another aspect, a computer-implemented method includes identifying a URL pattern common to a plurality of URLs stored in fetch records and selecting, using at least one processor, a sample of URLs from the plurality of URLs. The method may also include determining, for each URL in the sample, whether the URL is optional, by generating a first playout for the URL embedding object using the content for the URL, generating a second playout for the embed object without using the content for the URL, and calculating evaluating similarity for the URL by comparing the first playback result and the second playback result, the URL being optional when the similarity score is greater than the similarity threshold. The method may also include storing the URL pattern in the optional resource pattern data store when most of the URLs in the sample are optional.
[0006] Одна или несколько реализаций изобретения, описанного здесь, может включать в себя один или несколько из следующих признаков. Например, способ может также включать в себя определение того, что количество, представленное множеством URL, превышает размер порога, перед определением того, являются ли URL в выборочной совокупности необязательными. В качестве другого примера, способ может включать в себя запоминание URL-шаблона в хранилище данных шаблонов необязательных ресурсов, когда все URL в выборочной совокупности являются необязательными. В качестве другого примера, идентификация URL-шаблона, общего для множества URL в записях выборки, может включать в себя, для соответствующих URL в записях выборки, генерацию группового URL для URL в записи выборки, посредством удаления по меньшей мере участка строки запроса из URL, кластеризации посредством группового URL, и выбора группового URL кластера, когда количество элементов в кластере соответствует порогу.[0006] One or more implementations of the invention described herein may include one or more of the following features. For example, the method may also include determining that the number represented by the plurality of URLs exceeds a threshold size before determining if the URLs in the sample are optional. As another example, the method may include storing the URL pattern in an optional resource pattern data store when all URLs in the sample are optional. As another example, identifying a URL pattern common to multiple URLs in the selection records may include, for corresponding URLs in the selection records, generating a group URL for the URL in the selection record by removing at least a portion of the query string from the URL, clustering via the group URL, and selecting the group's cluster URL when the number of members in the cluster meets the threshold.
[0007] В другом аспекте, способ включает в себя прием запроса на воспроизведение веб-страницы, идентификацию по меньшей мере одного встраиваемого ресурса в веб-странице, которому необходима выборка, определение того, что встраиваемый ресурс является необязательным ресурсом, и воспроизведение веб-страницы, как если бы встраиваемый ресурс был недоступным, без выборки контента для встраиваемого ресурса.[0007] In another aspect, the method includes receiving a request to render a web page, identifying at least one embeddable resource in the web page that needs fetching, determining that the embedded resource is an optional resource, and rendering the web page as if the embeddable resource were unavailable without fetching content for the embeddable resource.
[0008] Одна или несколько реализаций предмета изобретения, описанного здесь, может включать в себя один или несколько из следующих признаков. Например, определение того, что встраиваемый ресурс является необязательным ресурсом, может включать в себя определение того, что URL для встраиваемого ресурса соответствует шаблону в хранилище данных необязательных ресурсов. В качестве другого примера, способ может также включать в себя прием хранилища данных шаблонов для необязательных ресурсов от услуги, причем определение того, что встраиваемый ресурс является необязательным ресурсом, включает в себя определение того, что URL для встраиваемого ресурса соответствует шаблону в хранилище данных. В качестве другого примера, определение того, что встраиваемый ресурс является необязательным ресурсом, может включать в себя перезапись URL для встраиваемого ресурса, посредством удаления участка строки запроса из URL, и установление соответствия перезаписанного URL шаблону в хранилище данных необязательных ресурсов, причем встраиваемый ресурс является необязательным, когда перезаписанный URL соответствует этому шаблону. В качестве другого примера, определение того, что встраиваемый ресурс является необязательным ресурсом, может включать в себя перезапись URL для встраиваемого ресурса, посредством удаления по меньшей мере участка строки запроса из URL, и установление соответствия перезаписанного URL шаблону в хранилище данных необязательных ресурсов, причем встраиваемый ресурс является необязательным, когда перезаписанный URL соответствует этому шаблону.[0008] One or more implementations of the subject invention described herein may include one or more of the following features. For example, determining that an embeddable resource is an optional resource may include determining that the URL for an embeddable resource matches a pattern in the optional resource data store. As another example, the method may also include receiving a template data store for optional resources from a service, wherein determining that the embedded resource is an optional resource includes determining that the URL for the embedded resource matches a pattern in the data store. As another example, determining that an embeddable resource is an optional resource may include rewriting the URL for the embeddable resource by removing a portion of the query string from the URL, and matching the rewritten URL to a pattern in the optional resource datastore, where the embeddable resource is optional. when the rewritten URL matches this pattern. As another example, determining that an embeddable resource is an optional resource may include rewriting the URL for the embeddable resource by removing at least a portion of the query string from the URL, and matching the rewritten URL to a pattern in the optional resource datastore, where the embeddable resource is optional when the rewritten URL matches this pattern.
[0009] В другом аспекте, долговременный машиночитаемый носитель (среда) может включать в себя инструкции, исполняемые по меньшей мере одним процессором, образованном на подложке, которые обеспечивают выполнение вычислительной системой одного или нескольких способов, описанных выше.[0009] In another aspect, a durable computer-readable medium (medium) may include instructions executed by at least one processor formed on a substrate that cause the computing system to perform one or more of the methods described above.
[0010] Одна или несколько реализаций изобретения, описанного здесь, может быть реализована таким образом, чтобы она обеспечивала одно или несколько из следующих преимуществ. В качестве одного примера, пропуск необязательных встраиваемых ресурсов обеспечивает подсистеме воспроизведения возможность более быстрого воспроизведения веб-страницы без потери контента. Браузер может не только пропускать выборку необязательного встраиваемого ресурса, он может также пропускать выборку объектов, встраиваемых в пропущенный необязательный встраиваемый ресурс. Таким образом, описанные реализации сохраняют пропускную способность сети и уменьшают потребление аккумуляторной батареи. Поскольку веб-страницы могут включать в себя сотни встраиваемых объектов, такая оптимизация может быть существенной.[0010] One or more implementations of the invention described herein may be implemented to provide one or more of the following advantages. As one example, omitting optional embeddable resources enables the rendering engine to render a web page faster without losing content. The browser can not only skip fetching an optional embed resource, it can also skip fetching objects to embed in a skipped optional embed resource. Thus, the described implementations conserve network bandwidth and reduce battery consumption. Since web pages can include hundreds of embeds, this optimization can be significant.
КРАТКОЕ ОПИСАНИЕ ЧЕРТЕЖЕЙBRIEF DESCRIPTION OF DRAWINGS
[0011] Фиг. 1 показывает иллюстративную систему, согласно раскрытому изобретению.[0011] FIG. 1 shows an illustrative system in accordance with the disclosed invention.
[0012] Фиг. 2 является блок-схемой результата воспроизведения для воспроизводимой веб-страницы, согласно одной реализации.[0012] FIG. 2 is a block diagram of a reproduction result for a reproduced web page, according to one implementation.
[0013] Фиг. 3 является блок-схемой последовательности операций, показывающей иллюстративный процесс для идентификации шаблонов необязательных ресурсов, согласно одной реализации.[0013] FIG. 3 is a flow diagram showing an exemplary process for identifying optional resource patterns, according to one implementation.
[0014] Фиг. 4 является блок-схемой последовательности операций, показывающей иллюстративный процесс для определения того, являются ли подобными два результата воспроизведения, согласно одной реализации.[0014] FIG. 4 is a flowchart showing an exemplary process for determining whether two playback results are similar, according to one implementation.
[0015] Фиг. 5 является блок-схемой последовательности операций, показывающей иллюстративный процесс для обеспечения информации для оптимизированного воспроизведения, согласно одной реализации.[0015] FIG. 5 is a flow diagram showing an exemplary process for providing information for optimized rendering, according to one implementation.
[0016] Фиг. 6 показывает пример вычислительного устройства, которое может быть использовано для реализации описанных технологий.[0016] FIG. 6 shows an example of a computing device that can be used to implement the described technologies.
[0017] Фиг. 7 показывает пример распределенного вычислительного устройства, которое может быть использовано для реализации описанных технологий.[0017] FIG. 7 shows an example of a distributed computing device that can be used to implement the described technologies.
ПОДРОБНОЕ ОПИСАНИЕDETAILED DESCRIPTION
[0018] Раскрытые реализации идентифицируют необязательные встраиваемые объекты, или встраиваемые объекты, которые незначительно воздействуют на контент воспроизводимой веб-страницы, что обеспечивает подсистеме воспроизведения браузера возможность воспроизведения таких веб-страниц без выборки необязательных встраиваемых объектов. Это уменьшает время воспроизведения и нагрузку на систему выборки, что является важным для вычислительных устройств с ограниченными ресурсами, таких как смартфоны и планшеты. Встраиваемый ресурс может быть подходящим для оптимизированного воспроизведения, когда результат воспроизведения веб-страницы как объекта встраивания, воспроизводимый с необязательным встраиваемым объектом, подобен результату воспроизведения веб-страницы как объекта встраивания, воспроизводимой без необязательного встраиваемого объекта. Подобие может быть определено по подобию маркеров на странице, по подобию внешних связей, по подобию компоновки страницы, и т.д. В некоторых реализациях, система может использовать измерение самой длинной общей последовательности для определения того, являются ли подобными результаты воспроизведения. В некоторых реализациях, когда основные компоненты моментальных снимков имеют оценку подобия, которая соответствует порогу подобия, эти моментальные снимки могут считаться подобными. Если система определяет, что встраиваемый ресурс является необязательным, то система может запомнить встраиваемый ресурс (например, его унифицированный указатель информационного ресурса (URL)) в списке необязательных встраиваемых ресурсов. В некоторых реализациях, система может агрегировать URL необязательных встраиваемых ресурсов для идентификации шаблона, который может быть использован для идентификации других необязательных встраиваемых ресурсов.[0018] The disclosed implementations identify optional embeddable objects, or embeddable objects, that have little effect on the content of a rendered web page, allowing the browser rendering engine to render such web pages without fetching the optional embeddable objects. This reduces playback time and sampling system load, which is important for resource-constrained computing devices such as smartphones and tablets. An embeddable resource may be suitable for optimized rendering when the rendering result of the web page as an embed object, rendered with an optional embeddable object, is similar to the rendering result of the web page as an embed object, rendered without the optional embeddable object. Similarity can be determined by the likeness of the markers on the page, the likeness of external links, the likeness of the page layout, etc. In some implementations, the system may use the measurement of the longest overall sequence to determine if the playback results are similar. In some implementations, when the major components of a snapshot have a similarity score that meets a similarity threshold, the snapshots may be considered similar. If the system determines that an embeddable resource is optional, then the system can store the embeddable resource (for example, its uniform resource locator (URL)) in the list of optional embeddable resources. In some implementations, the system may aggregate the URL of the optional embeddable resources to identify a template that can be used to identify other optional embeddable resources.
[0019] Когда браузер начинает воспроизведение веб-страницы, он может спросить у некоторой услуги, является ли какой-либо из встраиваемых ресурсов необязательным. В некоторых реализациях, это может быть выполнено в виде части запроса выборки. Услуга может установить соответствие URL запрашиваемых встраиваемых ресурсов в хранилище данных необязательных встраиваемых объектов, либо посредством установления точного соответствия, либо посредством установления соответствия шаблону в хранилище данных. Если услуга находит соответствие, то услуга может указать браузеру, какие встраиваемые ресурсы являются необязательными, и браузер может воспроизвести веб-страницу без выборки этих встраиваемых ресурсов. Такое оптимизированное воспроизведение браузера делает процесс воспроизведения браузера гораздо более эффективным с точки зрения ресурсов. В некоторых реализациях, хранилище данных необязательных встраиваемых ресурсов может различать типы браузеров, например, мобильные браузеры и браузеры для настольных компьютеров.[0019] When the browser starts rendering a web page, it may ask some service if any of the embedded resources are optional. In some implementations, this may be done as part of a fetch request. The service can match the URL of the requested embeds in the datastore of optional embeds, either by exact matching or by matching a pattern in the datastore. If the service finds a match, then the service can indicate to the browser which embeddable resources are optional, and the browser can render the web page without fetching those embeddable resources. This optimized browser rendering makes the browser rendering process much more resource efficient. In some implementations, the embeddable resource data store can differentiate between browser types, such as mobile browsers and desktop browsers.
[0020] Фиг. 1 является блок-схемой системы согласно иллюстративной реализации. Система 100 может быть использована для идентификации необязательных встраиваемых ресурсов и шаблонов необязательных ресурсов и использования шаблонов для оптимизации процесса воспроизведения браузера. Система 100 может включать в себя вычислительные устройства, которые принимают форму некоторого количества разных устройств. Например, система 100 может включать в себя вычислительные устройства, которые являются примерами вычислительного устройства 600, показанного на фиг. 6, и вычислительного устройства 700, показанного на фиг. 7.[0020] FIG. 1 is a block diagram of a system in accordance with an illustrative implementation.
[0021] Система 100 может включать в себя систему 110 пакетного воспроизведения. Система 110 пакетного воспроизведения может быть стандартным сервером, группой таких серверов, системой клиент-сервер, или системой стоечных серверов. Дополнительно, система 110 пакетного воспроизведения может быть реализована в персональном компьютере. Система 110 пакетного воспроизведения может включать в себя один или несколько процессоров, выполненных с возможностью исполнения одной или нескольких исполняемых машинами команд или фрагментов программного обеспечения, аппаратно-программного обеспечения, или их комбинации, хранящихся в памяти. Например, система 110 пакетного воспроизведения может включать в себя подсистемы 120 воспроизведения, услугу 122 выборки, подсистема 124 автоматического веб-сканирования, и подсистема 126 идентификации необязательных ресурсов. Система 110 пакетного воспроизведения может создавать воспроизводимую веб-страницу в пакетном режиме, например, в виде части процесса индексирования, и, в этом процессе, может создавать записи 132 выборки, которые система 110 пакетного воспроизведения может использовать для генерации шаблонов 130 необязательных ресурсов.[0021]
[0022] Нижестоящий процесс может запросить, чтобы система 110 пакетного воспроизведения воспроизвела веб-страницу в пакетном режиме. В некоторых реализациях, система 110 пакетного воспроизведения может включать в себя нижестоящий процесс, такой как подсистема 126 идентификации необязательных ресурсов или подсистема индексирования (не показан). В некоторых реализациях, нижестоящий процесс может быть выполнен на вычислительном устройстве, которое отличается от системы 110 пакетного воспроизведения. Например, нижестоящий процесс может быть подсистемой индексирования или рекламной платформой, которая отправляет запросы к системе пакетного воспроизведения посредством вызова удаленной процедуры. Нижестоящий процесс может запросить, чтобы один или несколько подсистем 120 пакетного воспроизведения сгенерировали результат воспроизведения конкретной веб-страницы. Каждый подсистема 120 пакетного воспроизведения может быть выполнен с возможностью эмуляции рендерера для персонального веб-браузера, но с оптимизациями для пакетного воспроизведения. Система 110 пакетного воспроизведения может включать в себя тысячи подсистем 120 пакетного воспроизведения и может использовать балансировку нагрузки для выбора одного из подсистем 120 пакетного воспроизведения в ответ на конкретный запрос. Запрашиваемая веб-страница может включать в себя встраиваемые объекты, такие как таблицы стилей, объекты JavaScript, изображения и т.д. Подсистемы 120 пакетного воспроизведения могут запрашивать контенты для встраиваемых объектов с использованием услуги 122 выборки.[0022] The downstream process may request that the batch playback system 110 reproduce the web page in batch mode. In some implementations, the batch playback system 110 may include a downstream process, such as an optional resource identification subsystem 126 or an indexing subsystem (not shown). In some implementations, the downstream process may be performed on a computing device that is different from batch playback system 110. For example, the downstream process can be an indexing engine or advertising platform that sends requests to the batch playback system via a remote procedure call. The downstream process may request that one or more batch rendering subsystems 120 generate a rendering result for a particular web page. Each batch rendering engine 120 may be configured to emulate a renderer for a personal web browser, but with optimizations for batch playback. The packet playback system 110 can include thousands of packet playback subsystems 120 and can use load balancing to select one of the packet playback subsystems 120 in response to a specific request. The requested web page can include embeddable objects such as stylesheets, JavaScript objects, images, etc. The batch rendering subsystems 120 may query the contents for the embedded objects using the fetch service 122.
[0023] Услуга 122 выборки может определить, какие встраиваемые ресурсы должны быть выбраны с хост-сервера 190, какие встраиваемые ресурсы могут быть возвращены из кэш-памяти, и какие ресурсы не нужно возвращать. Хост-серверы 190 могут быть вычислительными устройствами любого типа, доступными через интернет, которые служат в качестве хостов для одной или нескольких веб-страниц или ресурсов, встраиваемых в одну или несколько веб-страниц. Если встраиваемый ресурс должен быть выбран, услуга 122 выборки может запросить контент для встраиваемого объекта через подсистема 124 автоматического веб-сканирования с использованием общепринятых технологий. Нижестоящий процесс, такой как подсистема индексирования, может также запрашивать контент из серверов 190 через подсистема 124 автоматического веб-сканирования. В результате запросов выборки через подсистема 124 автоматического веб-сканирования, система 110 пакетного воспроизведения может сгенерировать записи 132 выборки. Записи 132 выборки могут включать в себя информацию о том, какие веб-страницы и встраиваемые объекты запрашивались и извлекались из хост-серверов 190. Записи 132 выборки могут также включать в себя дополнительную информацию, например, время запроса, веб-страницу как объект встраивания, при наличии, и т.д.[0023] The fetch service 122 may determine which embedded resources should be fetched from the host server 190, which embedded resources may be returned from the cache, and which resources should not be returned. Host servers 190 can be any type of computing device accessible over the Internet that serves as hosts for one or more web pages or resources that are embedded in one or more web pages. If an embedded resource is to be selected, the fetch service 122 may request content for the embedded object via the automatic web crawling engine 124 using conventional techniques. A downstream process, such as an indexing engine, can also request content from servers 190 through an automatic web crawling engine 124. As a result of sample requests through the automatic web scanning engine 124, the batch playback system 110 may generate sample records 132. Fetch records 132 may include information about which web pages and embeds were requested and retrieved from host servers 190. Fetch records 132 may also include additional information such as request time, web page as an embed object, if available, etc.
[0024] Подсистема 124 автоматического веб-сканирования, подсистемы 120 пакетного воспроизведения, и услуга 122 выборки работают совместно для эффективного воспроизведения большого количества веб-страниц, таких как веб-страницы, которые могут быть найдены во всемирной паутине. Воспроизведение веб-страницы является результатом воспроизведения, который включает в себя различные информационные элементы, доступные и, иначе, недоступные для нижестоящего процесса запрашивания. Подсистема 126 идентификации необязательных ресурсов может использовать подсистемы 120 пакетного воспроизведения для генерации шаблонов 130 необязательных ресурсов. Подсистема 126 идентификации необязательных ресурсов может запускаться периодически (например, ежедневно, два раза в неделю, и т.д.), с использованием записей 132 выборки в качестве входных данных. Подсистема 126 идентификации необязательных ресурсов может анализировать записи 132 выборки и генерировать шаблоны для URL, выбранных в предшествующем периоде. Например, подсистема 126 идентификации необязательных ресурсов может вырезать строку запроса из URL в записях выборки, при генерации группового URL для каждого соответствующего URL. Строка запроса может быть любыми символами после вопросительного знака (?) в URL. В некоторых реализациях, только части строки запроса могут быть вырезаны для генерации группового URL для URL. Подсистема 126 идентификации необязательных ресурсов может, затем, отсортировать или кластеризовать групповые URL и определить, какие групповые URL имели наибольшее количество запросов выборки за данный период времени.[0024] Subsystem 124 automatic web scanning, subsystems 120 batch playback, and service 122 fetch work together to efficiently render a large number of web pages, such as web pages that can be found on the world wide web. The reproduction of a web page is the result of a reproduction that includes various information items that are available and otherwise not available to the downstream request process. The optional resource identification subsystem 126 may use the batch playback subsystems 120 to generate optional resource templates 130. The optional resource identification subsystem 126 may be run periodically (eg, daily, bi-weekly, etc.) using sample records 132 as input. The optional resource identification subsystem 126 may parse the fetch records 132 and generate patterns for the URLs selected in the previous period. For example, the optional resource identification engine 126 may strip the query string from the URL in the fetch records when generating a group URL for each matching URL. The query string can be any characters after the question mark (?) In the URL. In some implementations, only portions of the query string may be stripped to generate a group URL for the URL. The optional resource identification subsystem 126 may then sort or cluster the group URLs and determine which group URLs had the most fetch requests over a given time period.
[0025] Подсистема 126 идентификации необязательных ресурсов может выбрать в качестве потенциальных шаблонов групповые URL с наибольшим количеством запросов выборки. Такие шаблоны представляют встраиваемые ресурсы, которые имеют наилучший потенциал для оптимизации процесса просмотра, поскольку они выбираются чаще всего. Подсистема идентификации необязательных ресурсов может определить, являются ли необязательными URL, которые соответствуют потенциальному шаблону, или выборочная совокупность URL, которая соответствует потенциальному шаблону. Например, подсистема 126 идентификации необязательных ресурсов может идентифицировать встраиваемый ресурс, который соответствует потенциальному шаблону, из записей 132 выборки, и может запросить, чтобы подсистема 120 пакетного воспроизведения воспроизвел первый результат воспроизведения веб-страницы как объекта встраивания для встраиваемого ресурса. Веб-страница как объект встраивания может быть идентифицирована, например, из записи выборки для встраиваемого ресурса. Подсистема 126 идентификации необязательных ресурсов может, затем, запросить, чтобы подсистема 120 пакетного воспроизведения воспроизвел второй результат воспроизведения веб-страницы как объекта встраивания без выборки встраиваемого ресурса.[0025] The optional resource identification subsystem 126 may select the group URLs with the highest number of fetch requests as potential templates. These templates represent the embeddable resources that have the best potential to optimize the browsing experience as they are the most frequently selected. The optional resource identification subsystem can determine whether optional URLs that match a candidate pattern or a sample collection of URLs that match a candidate pattern. For example, optional resource identification engine 126 may identify an embedded resource that matches a candidate pattern from fetch records 132 and may request that the batch playback engine 120 reproduce the first rendering result of the web page as an embed object for the embedded resource. A web page as an embed object can be identified, for example, from a selection record for an embedded resource. The optional resource identification subsystem 126 may then request that the batch rendering engine 120 reproduce the second rendering result of the web page as an embed object without fetching the embedded resource.
[0026] Для определения того, подвергся ли воздействию воспроизводимый контент веб-страницы как объекта встраивания при пропуске конкретного встраиваемого ресурса, подсистема 126 идентификации необязательных ресурсов может сравнить первый результат воспроизведения со вторым результатом воспроизведения. В некоторых реализациях, если контент подвергся значительному воздействию, то конкретный встраиваемый ресурс может быть добавлен в список необходимых ресурсов. Если контент подвергся незначительному воздействию (например, контент является подобным), то подсистема 126 идентификации необязательных ресурсов может идентифицировать встраиваемый ресурс в качестве необязательного ресурса. В некоторых реализациях, встраиваемый ресурс (например, его URL) может храниться в хранилище данных, таких как шаблоны 130 необязательных ресурсов. В некоторых реализациях, встраиваемый ресурс может храниться во временном списке необязательных ресурсов, используемых позже для определения шаблонов для необязательных ресурсов. Подсистема 126 идентификации необязательных ресурсов может выполнить этот тест (сравнение результатов воспроизведения) с каждым встраиваемым ресурсом, который соответствует потенциальному шаблону в записях выборки, или для выборочной совокупности встраиваемых ресурсов, которые соответствуют потенциальному шаблону. В некоторых реализациях, если какие-либо из встраиваемых ресурсов, которые соответствуют потенциальному шаблону, являются релевантными, то потенциальный шаблон не является шаблоном необязательных ресурсов. В некоторых реализациях, если только небольшое процентное отношение встраиваемых ресурсов, которые соответствуют потенциальному шаблону (например, 1% или меньше), являются необходимыми ресурсами, то потенциальный шаблон считается шаблоном необязательных ресурсов, и подсистема 126 идентификации необязательных ресурсов может включить этот потенциальный шаблон в качестве шаблона в шаблоны 130 необязательных ресурсов. Конечно, если все протестированные встраиваемые ресурсы, которые соответствуют потенциальному шаблону, являются необязательными, то подсистема 126 идентификации необязательных ресурсов может добавить этот потенциальный шаблон к шаблонам 130 необязательных ресурсов.[0026] To determine whether the reproduced content of the web page as an embed object has been affected by skipping a particular embedded resource, the optional resource identification subsystem 126 may compare the first rendering result with the second rendering result. In some implementations, if the content has been significantly affected, then the specific embeddable resource can be added to the list of required resources. If the content has been slightly affected (eg, the content is similar), then the optional resource identification subsystem 126 may identify the embedded resource as an optional resource. In some implementations, an embeddable resource (eg, its URL) may be stored in a data store such as optional resource templates 130. In some implementations, an embeddable resource may be stored in a temporary list of optional resources used later to define templates for optional resources. The optional resource identification subsystem 126 may perform this test (comparing playback results) on each embedded resource that matches a potential pattern in the sample records, or on a sample of embedded resources that match a potential pattern. In some implementations, if any of the embeddable resources that match the candidate pattern are relevant, then the candidate pattern is not an optional resource pattern. In some implementations, if only a small percentage of embeddable resources that match a potential pattern (e.g., 1% or less) are required resources, then the candidate pattern is considered an optional resource pattern, and the optional resource identification engine 126 may include that candidate pattern as template to templates 130 optional resources. Of course, if all tested embedded resources that match the candidate pattern are optional, then the optional resource identification engine 126 may add this candidate pattern to the optional resource patterns 130.
[0027] В некоторых реализациях, подсистема 126 идентификации необязательных ресурсов может также проверить то, что шаблоны в шаблонах 130 необязательных ресурсов все еще являются необязательными. Например, подсистема 126 идентификации необязательных ресурсов может выбрать выборочную совокупность URL, соответствующих шаблону, попросить подсистема воспроизведения воспроизвести результат воспроизведения со встраиваемым ресурсом, который соответствует шаблону, и без этого встраиваемого ресурса, и сравнить два результата воспроизведения. Если URL, соответствующий шаблону в шаблонах 130 необязательных ресурсов, больше не является необязательным, то шаблон может быть удален.[0027] In some implementations, the optional resource identification engine 126 may also check that the templates in the optional resource templates 130 are still optional. For example, the optional resource identification engine 126 may select a sample of URLs matching the pattern, ask the rendering engine to reproduce a playback result with an embedded resource that matches the pattern and without the embedded resource, and compare the two playback results. If the URL matching the pattern in the optional resource templates 130 is no longer optional, then the pattern may be removed.
[0028] В некоторых реализациях, подсистема 126 идентификации необязательных ресурсов может определить то, является ли шаблон необязательным, для мобильных браузеров отдельно от полных браузеров. Например, некоторые веб-сайты загружают разный контент для мобильной версии веб-страницы и полной версии, и встраиваемый ресурс может быть необязательным для мобильного браузера, но необходимым для полного браузера. Таким образом, подсистема 126 идентификации необязательных ресурсов может воспроизвести четыре результата воспроизведения для встраиваемого ресурса. Первые два результата воспроизведения могут быть воспроизведены подсистемой воспроизведения, который эмулирует полный браузер, в то время как последние два результата воспроизведения могут быть воспроизведены подсистемой воспроизведения, который эмулирует мобильный браузер на мобильном устройстве, таком как смартфон или планшет. Шаблоны 130 необязательных ресурсов могут, таким образом, включать в себя данные, указывающие на то, является ли шаблон необязательным, согласно типу браузера, например, для мобильного браузера или для полного браузера.[0028] In some implementations, the optional resource identification engine 126 may determine whether a template is optional for mobile browsers separately from full browsers. For example, some websites load different content for the mobile version of the web page and the full version, and the embeddable resource may not be required for the mobile browser but required for the full browser. Thus, the optional resource identification subsystem 126 can reproduce four rendering results for the embedded resource. The first two playback results can be played by a playback engine that emulates a full browser, while the last two playback results can be played by a playback engine that emulates a mobile browser on a mobile device such as a smartphone or tablet. The optional resource templates 130 may thus include data indicating whether the template is optional according to the type of browser, for example, for a mobile browser or for a full browser.
[0029] Хотя это и не показано на фиг. 1 для краткости, в некоторых реализациях, система 110 пакетного воспроизведения может быть распределена по двум или более отдельным вычислительным устройствам. Дополнительно, один или несколько из подсистем 120 пакетного воспроизведения, услуги 122 выборки, подсистемы 124 автоматического веб-сканирования, и подсистемы 126 идентификации необязательных ресурсов могут быть распределены по одному или нескольким вычислительным устройствам. В некоторых реализациях, один или несколько из подсистем 120 пакетного воспроизведения, услуги 122 выборки, подсистемы 124 автоматического веб-сканирования, и подсистемы 126 идентификации необязательных ресурсов могут совместно использовать ресурсы, такие как память или аппаратные процессоры, с другими компонентами системы 110 пакетного воспроизведения. Подобным образом, записи 132 выборки и шаблоны 130 необязательных ресурсов могут также храниться в памяти, распределенной по множественным вычислительным устройствам. В некоторых реализациях, различные компоненты системы 110 пакетного воспроизведения могут совместно использовать аппаратные компоненты вычислительного устройства, или могут быть логическими частями одного и того же вычислительного устройства.[0029] Although not shown in FIG. 1 for brevity, in some implementations, the batch playback system 110 may be distributed across two or more separate computing devices. Additionally, one or more of the batch playback subsystems 120, fetch services 122, automatic web scanning subsystems 124, and optional resource identification subsystems 126 may be distributed across one or more computing devices. In some implementations, one or more of the batch playback subsystems 120, fetch services 122, automatic web scanning engines 124, and optional resource identification subsystems 126 may share resources, such as memory or hardware processors, with other components of the batch playback system 110. Likewise, sample records 132 and optional resource templates 130 may also be stored in memory distributed across multiple computing devices. In some implementations, the various components of the batch playback system 110 may share hardware components of a computing device, or may be logical parts of the same computing device.
[0030] Система 110 пакетного воспроизведения может быть связана с клиентом (клиентами) 180 и серверами 190 через сеть 160. Сеть 160 может быть, например, интернетом, или сеть 160 может быть проводной или беспроводной локальной сетью (LAN), глобальной сетью ( WAN), их комбинацией, и т.д., реализованной с использованием, например, шлюзовых устройств, мостов, коммутаторов и/или т.п. Через сеть 160, система 110 пакетного воспроизведения может устанавливать связь с клиентами 180 и/или хост-серверами 190 и передавать данные к клиентам 180 и/или хост-серверам 190 или принимать данные от них. Например, система 110 пакетного воспроизведения может обеспечить шаблоны 130 необязательных ресурсов для клиента 180, или может принять запрос от клиента 180, спрашивающий, является ли конкретный встраиваемый ресурс необязательным, и может обеспечить ответ на основе шаблонов 130 необязательных ресурсов.[0030] Packet playback system 110 may be connected to client (s) 180 and servers 190 via network 160. Network 160 may be, for example, the Internet, or network 160 may be a wired or wireless local area network (LAN), wide area network (WAN) ), their combination, etc., implemented using, for example, gateway devices, bridges, switches and / or the like. Through the network 160, the packet playback system 110 can communicate with clients 180 and / or host servers 190 and transmit data to or receive data from clients 180 and / or host servers 190. For example, batch rendering system 110 may provide optional resource templates 130 for client 180, or may receive a request from client 180 asking if a particular embeddable resource is optional and may provide a response based on optional resource templates 130.
[0031] Клиент 180 может быть персональным вычислительным устройством, таким как вычислительное устройство 600, показанное на фиг. 6, на котором установлен персональный веб-браузер 140. Примеры персональных веб-браузеров включают в себя CHROME, SAFARI, INTERNET EXPLORER, FIREFOX, и т.д., либо для мобильного устройства, такого как смартфон или планшет, либо для персонального компьютера, такого как компактный портативный компьютер или настольный компьютер. Браузер 140 может быть выполнен с возможностью использования услуги для определения того, следует ли выбрать конкретный встраиваемый ресурс при воспроизведении веб-страницы. В некоторых реализациях, система может переслать копию шаблонов 130 необязательных ресурсов к клиенту 180 для использования браузером 140. В этом смысле, услуга может быть локальной услугой. В некоторых реализациях, браузер 140 может быть выполнен с возможностью запрашивания услуги на базе сервера об определении того, соответствует ли конкретный встраиваемый ресурс одному из шаблонов в шаблонах 130 необязательных ресурсов. Браузер 140 выполняет оптимизированное воспроизведение с использованием услуги, для пропуска необязательных встраиваемых ресурсов при воспроизведении веб-страницы. Таким образом, браузер 140 может быть выполнен с возможностью селективного пропуска встраиваемых ресурсов для улучшения времени воспроизведения и сохранения ресурсов при отсутствии воздействия на контент.[0031] Client 180 may be a personal computing device, such as
[0032] Фиг. 2 является блок-схемой результата 200 воспроизведения, воспроизводимого подсистемой 120 пакетного воспроизведения, согласно одной реализации. Результат 200 воспроизведения может включать в себя множество компонентов, не все из которых показаны на фиг. 2. Например, результат 200 воспроизведения может включать в себя изображение 205 воспроизводимой страницы. Изображение 205 может быть изображением, которое может быть отображено через устройство отображения для пользователя через веб-браузер. Изображение 205 может быть использовано, например, для отображения уменьшенного изображения воспроизводимой страницы для пользователя, а также для определения того, где на устройстве отображения находятся элементы веб-страницы (например, на основе их координат x и y). Результат 200 воспроизведения может также включать в себя дерево 210 объектной модели документа (DOM). Дерево 210 DOM представляет HTML-структуру веб-страницы. Результат 200 воспроизведения может также включать в себя компоновку 215. Компоновка 215 обычно включает в себя блок для элементов веб-страницы, причем этот блок задает координаты x и y элемента в изображении 205. Таким образом, компоновка 215 обеспечивает указание на то, где на веб-странице находится элемент, сколько пространства он занимает на веб-странице, и т.д. Таким образом, компоновка 215 обеспечивает информацию о том, какую часть веб-страницы занимают рекламные объявления, насколько выступает абзац (например, выше сгиба или ниже сгиба), является ли видимым элемент, и т.д. Другими словами, компоновка 215 обеспечивает геометрическую информацию об элементах воспроизводимой веб-страницы. Результат 200 воспроизведения может также включать в себя ошибки 220. Ошибки 220 включают в себя ошибки, происходящие в результате запуска объектов сценариев, например, объектов JavaScript. Результат 200 воспроизведения может также включать в себя список встраиваемых ресурсов 225, выбранных во время воспроизведения, и может включать в себя другие элементы (не показаны), генерируемые в качестве части процесса воспроизведения. Таким образом, результат 200 воспроизведения обеспечивает не только информацию, доступную посредством выборки контента с хост-сервера. Нижестоящие процессы запрашивания, такие как подсистема идентификации необязательных ресурсов, могут использовать информацию о результате воспроизведения в различных целях, например, для определения того, значительно ли изменяется контент воспроизводимой веб-страницы при запуске объектов сценариев. Например, контент в рекламном участке веб-страницы может считаться неважным, так что URL может быть все же необязательным, даже при различиях в рекламном участке. В некоторых реализациях, только различия в основных компонентах результата воспроизведения могут считаться важными. Основные компоненты могут быть наибольшими блоками в компоновке 215 (например, блоками с наибольшей высотой и шириной).[0032] FIG. 2 is a block diagram of a
[0033] Фиг. 3 является блок-схемой последовательности операций, показывающей иллюстративный процесс 300 для идентификации шаблонов необязательных ресурсов, согласно одной реализации. Процесс 300 может быть выполнен системой, такой как система 110 по фиг. 1. Система может использовать процесс 300 для идентификации шаблонов для необязательных ресурсов на основании записей выборки. Система может использовать шаблоны для необязательных ресурсов на основе сравнения результата воспроизведения веб-страницы как объекта встраивания с ресурсом и без ресурса. Шаблоны могут храниться в хранилище данных и могут использоваться в качестве части услуги, которая обеспечивает браузеру, либо полному браузеру, либо мобильному браузеру, либо подсистеме пакетного воспроизведения, возможность оптимизировать воспроизведение посредством пропуска (например, невыборки) необязательных ресурсов.[0033] FIG. 3 is a flow diagram showing an
[0034] Процесс 300 может начаться с системной кластеризации выбранных встраиваемых ресурсов с помощью потенциальных шаблонов (305). Система может выбрать все встраиваемые ресурсы, выбранные в течение некоторого предшествующего периода времени, например, в течение одного дня, двух дней, одной недели, до момента последнего запуска процесса 300, и т.д. Потенциальные шаблоны могут быть сгенерированы посредством вырезания всей или части строки запроса из URL, найденного в записях выборки. Записи выборки могли быть сгенерированы подсистемой автоматического веб-сканирования или услугой выборки. В некоторых реализациях, записи выборки могут быть сгенерированы в качестве части процесса индексирования, например, процесса индексирования для документов, доступных через интернет. Встраиваемый ресурс может быть идентифицирован в записи выборки посредством идентификатора, такого как URL. Таким образом, на веб-страницу или встраиваемый ресурс можно также ссылаться по URL, и следует понимать, что ссылка на встраиваемый ресурс (или веб-страницу) и URL являются, в общем, синонимами, при использовании здесь. Потенциальный шаблон может быть сгенерирован для URL посредством вырезания всей или части строки запроса, причем строка запроса является любыми символами, которые следуют за вопросительным знаком (?) в URL для встраиваемого ресурса. Потенциальный шаблон может быть также сгенерирован для встраиваемого ресурса посредством вырезания или игнорирования поддоменного имени, игнорирования компонентов пути (например, компонентов между первой косой чертой («/») и строкой запроса («?»), или игнорирования некоторых параметров в строке запроса. В некоторых реализациях, встраиваемый ресурс из записей выборки может быть связан более чем с одним потенциальным шаблоном, сгенерированным из его URL. Потенциальные URL могут быть кластеризованы с помощью сортировки или с помощью других известных технологий кластеризации.[0034]
[0035] Система может выбрать кластер, представленный одним из потенциальных шаблонов (310), и определить, является ли количество элементов кластера большим или равным порогу (315). Количество элементов кластера представляет собой количество раз, которое встраиваемые ресурсы, которые соответствуют потенциальному шаблону, были выбраны в течение предшествующего периода времени. Таким образом, один конкретный встраиваемый ресурс может быть представлен много раз в этом количестве, если он был выбран более одного раза. Если это количество для кластера меньше порога (315, Нет), то система может перейти к следующему кластеру (355). Если потенциальный шаблон действительно имеет достаточное количество элементов (315, Да), то система может выбрать выборочную совокупность встраиваемых ресурсов, которые соответствуют потенциальному шаблону (320). Другими словами, система может отобрать уникальные элементы кластера. Конечно, в некоторых реализациях, система может выбрать все уникальные встраиваемые ресурсы в кластере в качестве выборочной совокупности (например, размер выборочной совокупности равен 100%). Затем, система может выбрать один из встраиваемых ресурсов в выборочной совокупности (325) и сгенерировать первый результат воспроизведения веб-страницы, в которую встраивается ресурс (например, веб-страницы как объекта встраивания), с выбранным встраиваемым ресурсом (330). Веб-страница как объект встраивания может быть определена на основании записей выборки. Система может также сгенерировать второй результат воспроизведения веб-страницы как объекта встраивания без выборки выбранного встраиваемого ресурса (330). Система может сгенерировать два результата воспроизведения с использованием, например, подсистемы пакетного воспроизведения. Затем, система может сравнить первый результат воспроизведения и второй результат воспроизведения для определения того, являются ли подобными (335) результаты воспроизведения.[0035] The system may select a cluster represented by one of the candidate patterns (310) and determine if the number of cluster members is greater than or equal to a threshold (315). The cluster member count is the number of times that embedded resources that match a potential pattern have been fetched during the previous time period. Thus, one particular embedded resource can be represented many times in this number if it has been selected more than once. If this number for a cluster is less than the threshold (315, None), then the system can go to the next cluster (355). If the potential template does have a sufficient number of elements (315, Yes), then the system can select a sample set of embedded resources that match the potential template (320). In other words, the system can select unique cluster members. Of course, in some implementations, the system may select all of the unique embedded resources in the cluster as a sample (for example, the sample size is 100%). Then, the system can select one of the embedded resources in the sample population (325) and generate the first rendering result of the web page into which the resource is embedded (for example, a web page as an embed object), with the selected embedded resource (330). The web page as an embed object can be determined based on the selection records. The system can also generate a second result of rendering the web page as an embed object without fetching the selected embed resource (330). The system can generate two playback results using, for example, a batch playback subsystem. Then, the system can compare the first playback result and the second playback result to determine if the playback results are similar (335).
[0036] Система может использовать множество тестов для определения того, являются ли подобными результаты воспроизведения, что описано более подробно в отношении фиг. 4. Если результаты воспроизведения не являются подобными (335, Нет), то система может перейти к следующему кластеру (335). Если результаты воспроизведения являются подобными (335, Да), то система может определить, существуют ли другие встраиваемые ресурсы в выборочной совокупности кластера для проверки (340). Если существуют другие встраиваемые ресурсы (340, Нет), то система может выбрать следующий встраиваемый ресурс для выборочной совокупности (345) и повторить этап 330 и 335, с генерацией двух результатов воспроизведения и сравнением этих результатов. Если все встраиваемые ресурсы в выборочной совокупности были проверены (340, Да), то система может добавить потенциальный шаблон для кластера в хранилище данных шаблонов необязательных ресурсов (350). Это хранилище данных может быть использовано услугой для идентификации встраиваемых ресурсов, которые не должны быть выбраны, как объяснено более подробно в отношении фиг. 5. Затем, система может определить, существуют ли другие кластеры для проверки (355). Если существуют другие оставшиеся кластеры для анализа (355, Нет), то система может выбрать следующий кластер, с повторением этапов 315-355 для встраиваемых ресурсов, которые соответствуют потенциальному шаблону следующего кластера. Если больше не существует кластеров для анализа (355, Да), то процесс 300 завершается.[0036] The system can use a variety of tests to determine if the playback results are similar, as described in more detail with respect to FIG. 4. If the playback results are not similar (335, None), then the system can go to the next cluster (335). If the playback results are similar (335, Yes), then the system can determine if other embedded resources exist in the sample population of the cluster to check (340). If there are other embedded resources (340, No), then the system may select the next embedded resource for the sample (345) and repeat
[0037] Иллюстративный процесс 300 показывает реализацию, в которой один встраиваемый ресурс, который не является необязательным, обеспечивает то, что потенциальный шаблон не будет включен в хранилище данных шаблонов необязательных ресурсов (например, 335, Нет). Однако, в некоторых реализациях, система может хранить список встраиваемых ресурсов для потенциального шаблона, которые являются необязательными, и список встраиваемых ресурсов для потенциального шаблона, которые являются необходимыми (например, два результата воспроизведения не считаются подобными). В таких реализациях, система может вычислить процентное отношение встраиваемых ресурсов, которые соответствуют потенциальному шаблону, которые являются необходимыми. Когда это процентное отношение является очень низким (например, 1% или меньше), система может все же добавить потенциальный шаблон в хранилище данных шаблонов необязательных ресурсов (350). Таким образом, реализации не ограничены точным процессом 300, показанным на фиг. 3.[0037]
[0038] В некоторых реализациях, система может повторить некоторые или все этапы процесса 300 с результатами воспроизведения, воспроизведенными браузером другого типа. Например, тип браузера может быть полным браузером или мобильным браузером. Если первый и второй результат воспроизведения воспроизводились полным браузером, то система может повторить этапы 330-350 с использованием мобильного браузера. Таким образом, список шаблонов необязательных ресурсов может включать в себя указание на тип браузера, и шаблоны в хранилище данных могут также включать в себя указание на тип браузера. Это обеспечивает системе возможность указания на то, что встраиваемый ресурс является необязательным для одного типа браузера (например, мобильного браузера) и является необходимым для другого типа браузера (например, полного браузера).[0038] In some implementations, the system may repeat some or all of the steps of the
[0039] Фиг. 4 является блок-схемой последовательности операций, показывающей иллюстративный процесс 400 для определения того, являются ли подобными два результата воспроизведения, согласно одной реализации. Процесс 400 может быть выполнен, например, в виде части этапа 335 фиг. 3. В то время как процесс 400 показывает три теста для определения подобия результатов воспроизведения, следует понимать, что реализации могут включать в себя один, два, или все показанные тесты, и могут включать в себя дополнительные тесты подобия, которые не показаны.[0039] FIG. 4 is a flowchart showing an
[0040] Процесс 400 может включать в себя сравнение маркеров в двух результатах воспроизведения (405). Маркеры включают в себя текст документа, например, слова, видимые для пользователя. Маркеры могут быть созданы посредством обработки дерева DOM, такого как дерево 210 DOM по фиг. 2. В некоторых реализациях, игнорируемые слова и числа могут быть удалены перед выполнением сравнения. Если маркеры для первого результата воспроизведения отличаются от маркеров для второго результата воспроизведения (410, Да), то система может необязательно определить, является ли количество уникальных маркеров, добавленных при воспроизведении с включенными сценариями, меньшим, чем порог маркеров (415). Другими словами, если воспроизведение с включенными сценариями обеспечивает только малое количество уникальных маркеров, то система может посчитать, что различия являются незначительными. В некоторых реализациях, порог маркеров может быть равен 5. Если количество добавленных уникальных маркеров соответствует порогу маркеров (415, Нет), то система может посчитать, что результаты воспроизведения не являются подобными (430). Когда результаты воспроизведения не являются подобными, встраиваемый ресурс, используемый для генерации результатов воспроизведения, не является необязательным. В некоторых реализациях, система может пропустить тест 415, и любые различия в маркерах могут считаться значительными, а результаты воспроизведения - неподобными. Если количество не соответствует порогу маркеров (415, Да), то система может посчитать, что различие в маркерах является незначительным. Таким образом, если уникальные маркеры для первого результата воспроизведения являются такими же, как маркеры во втором результате воспроизведения (410, Нет), или количество уникальных маркеров не соответствует порогу маркеров (415, Да), то результаты воспроизведения могут считаться подобными, и система может продолжить выполнение других тестов. В реализациях, которые включают в себя только тест маркеров, система может приступить прямо к этапу 445, с определением того, что результаты воспроизведения являются подобными.[0040]
[0041] В некоторых реализациях, если маркеры являются одинаковыми (410, Нет) или (415, Да), то система может сравнить внешние связи (420). Внешние связи представляют собой связи воспроизводимой страницы с другими веб-страницами или другими документами. Внешние связи могут быть также извлечены из узлов тегов привязки (<a> тегов) дерева DOM результата воспроизведения. Если система найдет различие во внешних связях (425, Да), то система посчитать, что различие является значительным, и результаты воспроизведения не являются подобными (430). Таким образом, встраиваемый ресурс не считается необязательным. Если внешние связи в двух результатах воспроизведения являются одинаковыми (425, Нет), то система может посчитать, что результаты воспроизведения являются подобными (например, посредством перехода к этапу 450), или может перейти к выполнению других тестов подобия. В некоторых реализациях, система может выполнить этапы 420 и 425 перед этапами 405 и 415 и независимо от них.[0041] In some implementations, if the tokens are the same (410, No) or (415, Yes), then the system can compare external relationships (420). External links are links of the reproduced page with other web pages or other documents. External links can also be retrieved from the anchor tag nodes (<a> tags) of the playback result DOM tree. If the system finds a difference in external connections (425, Yes), then the system considers that the difference is significant and the results of the reproduction are not similar (430). Thus, the embedded resource is not considered optional. If the external relationships in the two playback results are the same (425, None), then the system may consider the playback results to be similar (eg, by going to block 450), or may proceed to perform other similarity tests. In some implementations, the system may perform blocks 420 and 425 before and independently of
[0042] В другом тесте подобия, который может быть выполнен дополнительно к другим тестам или вместо них, система может определить подобие по изображению (например, моментальному снимку), дереву DOM, или компоновке. Например, система может вычислить самую длинную общую последовательность (LCS) для дерева DOM, компоновки, изображения, или другого компонента результата воспроизведения (435). Система может использовать LCS для вычисления оценки подобия, которая представляет собой процентное отношение компонента, который является таким же (440). Когда это процентное отношение соответствует порогу (445, Да), система может определить, что результаты воспроизведения являются подобными (450). Когда процентное отношение не соответствует порогу (445, Нет), система может определить, что результаты воспроизведения не являются подобными (430). После того, как система определяет, что результаты воспроизведения являются подобными (450) или не являются подобными (430), процесс 400 завершается.[0042] In another similarity test, which can be performed in addition to or instead of other tests, the system can determine the similarity from an image (eg, a snapshot), a DOM tree, or layout. For example, the system can compute the longest common sequence (LCS) for a DOM tree, layout, image, or other component of a rendering result (435). The system can use LCS to calculate a similarity score, which is the percentage of a component that is the same (440). When this percentage meets the threshold (445, Yes), the system can determine that the playback results are similar (450). When the percentage does not meet the threshold (445, None), the system may determine that the playback results are not similar (430). After the system determines that the playback results are like (450) or not like (430), the
[0043] Конечно, система может выполнить другие тесты в качестве части процесса 400. Например, в другом тесте подобия (не показан на фиг. 4), система может определить основные компоненты компоновки. Компоновка результата воспроизведения выполнена из блоков - причем каждый блок определен экранными координатами. Обычно, каждый блок соответствует соответствующему элементу веб-страницы. Например, компоновка может включать в себя блочные представления DOM-узлов в дереве DOM (хотя не все элементы DOM могут иметь соответствующий блок воспроизведения). Блоки могут быть организованы в структуру дерева, также известную как дерево воспроизведения. Таким образом, например, таблица может быть представлена блоком в компоновке, а абзац может быть представлен другим блоком в компоновке. Основные компоненты веб-страницы являются элементами в компоновке с наибольшими блоками, определенными экранными координатами. В некоторых реализациях, система может включать в себя заданное количество основных компонентов в данном наборе, например, таким образом, чтобы этот набор включал в себя наибольший из основных компонентов. В некоторых реализациях, система может включать в себя основные компоненты, которые определяют процентное отношение экрана в этом наборе. В такой реализации, если наибольший основной компонент занимает больше, чем данное процентное отношение, то наибольший основной компонент может быть единственным элементом набора. В некоторых реализациях, любые компоненты с размером блока, большим порогового размера, могут быть включены в набор основных компонентов. Компонент, который не входит в набор основных компонентов, может считаться незначительным компонентом. В некоторых реализациях, система может использовать технологию постепенного углубления в проблему для нахождения основного компонента. Например, начиная с корневого блока дерева воспроизведения, система может, затем, выполнить поиск в ширину и идентифицировать наибольший дочерний блок корневого блока. Затем, система может выбрать наибольшего потомка и пройти глубже, чтобы найти наибольший дочерний блок текущего блока (например, наибольший дочерний блок корневого блока). Система может остановить проход глубже, если никакие из дочерних блоков не будут доминировать, например, не будут занимать больше половины площади родительского блока. Когда система останавливает проход глубже, основным компонентом является блок, не имеющий доминирующего потомка.[0043] Of course, the system may perform other tests as part of
[0044] Система может вычислить оценку подобия по основным компонентам в наборе. Например, система может использовать оценку перекрытия блоков основных компонентов. В одной оценке перекрытия, система может вычислить площадь перекрытия для основного компонента, которая представляет площадь основного компонента в первом результате воспроизведения, которая перекрывается с площадью соответствующего основного компонента во втором результате воспроизведения. Затем, система может вычислить оценку подобия, которая представляет собой гармоническое среднее перекрытия относительно обшей площади каждого основного компонента. Например, система может использовать формулу 2/((a1/oa)+(a2/oa)), где oa является площадью перекрытия, а1 является общей площадью блока основного компонента в первом результате воспроизведения, и а2 является общей площадью блока основного компонента во втором результате воспроизведения. Конечно, система может использовать другие метрики подобия для вычисления оценки. Примеры таких метрик подобия включают в себя, но не ограничены этим, подобие Катца (Katz). Если оценка подобия соответствует порогу подобия, то результаты воспроизведения считаются подобными, и, таким образом, встраиваемый ресурс является необязательным. В некоторых реализациях, порог подобия может быть высоким, например, 80% или более. Если оценка подобия не соответствует порогу, то система может посчитать, что результаты воспроизведения не являются подобными. В некоторых реализациях, если оценка подобия соответствует порогу подобия, то система может выполнить дополнительные тесты подобия на основе результатов воспроизведения, которые не показаны на фиг. 4. В некоторых реализациях, система может также вычислить оценку подобия для различий в незначительных компонентах, но оценить веса этих различий гораздо ниже, например, делая их гораздо меньшей частью конечной оценки подобия для результатов воспроизведения.[0044] The system can compute a similarity score for the major components in the set. For example, the system can use an estimate of the overlap of blocks of major components. In one overlap estimate, the system can calculate the area of overlap for the main component, which represents the area of the main component in the first rendering result that overlaps with the area of the corresponding main component in the second rendering result. The system can then compute a similarity score, which is the harmonic mean of the overlap relative to the total area of each major component. For example, the system can use the formula 2 / ((a1 / oa) + (a2 / oa)), where oa is the area of overlap, a1 is the total area of the main component block in the first rendering result, and a2 is the total area of the main component block in the second. the result of reproduction. Of course, the system can use other similarity metrics to compute the score. Examples of such similarity metrics include, but are not limited to, Katz's similarity. If the similarity score meets the similarity threshold, then the playback results are considered similar, and thus the embedded resource is optional. In some implementations, the similarity threshold may be high, for example 80% or more. If the similarity score does not meet the threshold, then the system may consider that the playback results are not similar. In some implementations, if the similarity score meets a similarity threshold, then the system may perform additional similarity tests based on the playback results that are not shown in FIG. 4. In some implementations, the system can also compute a similarity score for differences in minor components, but estimate the weights of these differences much lower, for example, making them a much smaller part of the final similarity score for reproducible results.
[0045] В некоторых реализациях, система может постараться минимизировать или устранить эффекты неопределенности в процессе 400. Неопределенность имеет место, когда результаты воспроизведения являются разными, даже если встраиваемые ресурсы являются идентичными. Неопределенность может быть причиной того, что встраиваемые ресурсы, которые являются необязательными, будут казаться необходимыми. Таким образом, учет неопределенности может значительно увеличить покрытие необязательных ресурсов. Для учета неопределенности, система может сгенерировать третий результат воспроизведения. Третий результат воспроизведения может быть воспроизведением с использованием ресурсов, возвращенных из генерации первого результата воспроизведения (например, результата воспроизведения, который включает в себя URL выборочной совокупности). Любые различия между третьим результатом воспроизведения и первым результатом воспроизведения происходят вследствие неопределенности. Система может улучшить подобие посредством удаления любых различий, которые происходят вследствие неопределенности (например, различий во внешних связях, маркерах, изображении, дереве воспроизведения, и т.д., которые являются разными в первом и третьем результатах воспроизведения). Например, система может вычислить первое количество, представляющее количество пикселов, которые являются разными в изображении первого результата воспроизведения и изображении третьего результата воспроизведения, и второе количество, представляющее количество пикселов, которые являются разными в изображениях первого результата воспроизведения и второго результата воспроизведения. Система может вычесть первое количество из второго количества для получения некоторой разности. Чем ближе эта разность ко второму количеству, тем более вероятным является то, что любые различия между первым и вторым результатами воспроизведения не происходят вследствие неопределенности. Таким образом, система может настроить оценку подобия LCS на основе этой разности (например, не применять никакой настройки, если эта разность равна второму количеству, уменьшить вдвое, если эта разность равна половине второго количества, и т.д.). В качестве другого примера, система может определить DOM-узлы, которые являются разными в первом результате воспроизведения и третьем результате воспроизведения, и игнорировать эти узлы при сравнении первого результата воспроизведения и второго результата воспроизведения (например, при вычислении LCS).[0045] In some implementations, the system may attempt to minimize or eliminate the effects of ambiguity in
[0046] Фиг. 5 является блок-схемой последовательности операций, показывающей иллюстративный процесс 500 для обеспечения информации для оптимизированного воспроизведения, согласно одной реализации. Процесс 500 может быть запущен в качестве услуги для браузера. Браузер может быть клиентским браузером, либо мобильным, либо полным, таким как браузер 140 фиг. 1, или подсистемой пакетного воспроизведения, таким как подсистемы 120 пакетного воспроизведения фиг. 1. В некоторых реализациях, услуга может быть услугой на основе облака. Другими словами, браузер может отправить запрос через сеть к услуге на основе облака, которая может обеспечить ответ для браузера. В некоторых реализациях, услуга может быть запущена на сервере, таком как система 110 пакетного воспроизведения фиг. 1. В некоторых реализациях, услуга может быть локальной для вычислительного устройства, на котором браузер запускается. Например, хранилище данных шаблонов необязательных ресурсов может быть передано к вычислительному устройству, которое запускает браузер, и услуга может быть выполнена в вычислительном устройстве. В некоторых реализациях, услуга может быть запущена на клиенте, таком как клиент 180 фиг. 1.[0046] FIG. 5 is a flow diagram showing an
[0047] Процесс 500 начинается с услуги, принимающей URL от браузера (505). Браузер может быть мобильным браузером, полным браузером, и может быть запущен на клиенте или в качестве подсистемы пакетного воспроизведения. Услуга может определить, соответствует ли URL из запроса шаблону необязательных ресурсов (510). В некоторых реализациях, шаблон может представлять полный URL, так что установление соответствия выполняется на основе всего запрашиваемого URL. В некоторых реализациях, шаблон может представлять частичный URL, например, с удаленной строкой запроса или с различными участками, замененными символами подстановки. Если запрашиваемый URL не соответствует по меньшей мере одному шаблону в хранилище данных необязательных ресурсов (510, Да), то услуга обеспечивает ответ, который указывает на то, что URL является необязательным, и веб-страница как объект встраивания может быть воспроизведена без выборки контента (515). В некоторых реализациях, это может быть ответом, подобным ответу «URL не найден», который браузер может принять, когда ресурс не может быть обнаружен. В ответ на прием этого указания, браузер может воспроизвести веб-страницу как объект встраивания с пропуском встраиваемого ресурса, что экономит ресурсы обработки и пропускной способности. Если запрашиваемый URL не соответствует шаблону в хранилище данных необязательных ресурсов (510, Нет), то услуга обеспечивает ответ, который указывает на то, что встраиваемый ресурс является необходимым (520). В некоторых реализациях, услуга может фактически выполнить выборку и обеспечить контент для встраиваемого ресурса. В некоторых реализациях, услуга может обеспечить ответ, который указывает браузеру на то, что следует приступить к запросу выборки для встраиваемого ресурса. Таким образом, браузер может воспроизвести веб-страницу как объект встраивания с контентом для встраиваемого ресурса. Затем, процесс 500 завершается, после обеспечения информации, которую браузер может использовать для оптимизации процесса воспроизведения. В некоторых реализациях, браузер может обеспечить тип браузера для услуги, и услуга может использовать тип браузера при установлении соответствия шаблонов в хранилище данных необязательных ресурсов.[0047]
[0048] Фиг. 6 показывает пример обобщенного вычислительного устройства 600, которое может функционировать в качестве системы 110 пакетного воспроизведения, и/или клиента 180 фиг. 1, которые могут быть использованы с технологиями, описанными здесь. Вычислительное устройство 600 предназначено для представления различных иллюстративных форм вычислительных устройств, таких как компактные портативные компьютеры, настольные компьютеры, рабочие станции, персональные цифровые секретари, сотовые телефоны, смартфоны, планшеты, серверы, и другие вычислительные устройства, включая носимые устройства. Компоненты, показанные здесь, их соединения и связи, и их функции, как подразумевается, являются только примерами, и не подразумевается, что они ограничивают реализации изобретений, описанных и/или заявленных в этом документе.[0048] FIG. 6 shows an example of a
[0049] Вычислительное устройство 600 включает в себя процессор 602, например, кремниевый аппаратный процессор, память 604, запоминающее устройство 606, и порты 610 расширений, соединенные через интерфейс 608. В некоторых реализациях, вычислительное устройство 600 может включать в себя приемопередатчик 646, коммуникационный интерфейс 644 и приемный модуль 648 глобальной системы позиционирования (GPS), помимо прочих компонентов, соединенных через интерфейс 608. Устройство 600 может передавать данные беспроводным способом через коммуникационный интерфейс 644, который может включать в себя схемы обработки цифровых сигналов, при необходимости. Каждый из компонентов 602, 604, 606, 608, 610, 640, 644, 646 и 648 может быть установлен на общей системной плате или другими подходящими способами.[0049]
[0050] Процессор 602 может обрабатывать команды для исполнения в пределах вычислительного устройства 600, включая команды, хранящиеся в памяти 604 или в запоминающем устройстве 606, для отображения графической информации для GUI на внешнем устройстве ввода/ вывода данных, таком как устройство 616 отображения. Устройство 616 отображения может быть монитором или плоским устройством отображения с сенсорным экраном. В некоторых реализациях, вместе с множественными устройствами памяти и типами памяти могут быть использованы, при необходимости, множественные процессоры и/или множественные шины. Также, множественные вычислительные устройства 600 могут быть соединены, причем каждое устройство обеспечивает часть необходимых операций (например, в виде банка серверов, группы ячеечных серверов, или многопроцессорной системы).[0050] A
[0051] Память 604 хранит информацию внутри вычислительного устройства 600. В одной реализации, память 604 является блоком или блоками энергозависимой памяти. В другой реализации, память 604 является блоком или блоками энергонезависимой памяти. Память 604 может быть также другой формой машиночитаемой среды, такой как магнитный или оптический диск. В некоторых реализациях, память 604 может включать в себя расширенную память, обеспеченную через интерфейс расширения.[0051]
[0052] Запоминающее устройство 606 может обеспечить хранение больших объемов данных для вычислительного устройства 600. В одной реализации, запоминающее устройство 606 может быть машиночитаемой средой или может включать в себя машиночитаемую среду, такую как устройство на гибких дисках, устройство на жестких дисках, устройство на оптических дисках, или устройство на основе ленты, флэш-память или другое подобное твердотельное устройство памяти, или массив устройств, включающий в себя устройства в сети устройств для хранения данных, или другие конфигурации. Компьютерный программный продукт может быть материально реализован в такой машиночитаемой среде. Компьютерный программный продукт может также включать в себя команды, которые, при исполнении, выполняют один или несколько способов, таких как способы, описанные выше. Считываемая компьютерами или машиночитаемая среда является запоминающим устройством, таким как память 604, запоминающее устройство 606, или память на процессоре 602.[0052] The
[0053] Интерфейс 608 может быть высокоскоростным контроллером, который управляет операциями при интенсивном использовании полосы пропускания для вычислительного устройства 600, или низкоскоростным контроллером, который управляет операциями при менее интенсивном использовании полосы пропускания, или комбинацией таких контроллеров. Внешний интерфейс 640 может быть обеспечен для обеспечения возможности связи ближнего действия устройства 600 с другими устройствами. В некоторых реализациях, контроллер 608 может быть связан с запоминающим устройством 606 и портом 614 расширения. Порт расширения, который может включать в себя различные коммуникационные порты (например, USB, Bluetooth, Ethernet, беспроводной Ethernet), может быть связан с одним или несколькими устройствами ввода/вывода данных, такими как клавиатура, указывающее устройство, сканер, или сетевое устройство, такое как коммутатор или маршрутизатор, например, через сетевой адаптер.[0053]
[0054] Вычислительное устройство 600 может быть реализовано в нескольких разных формах, как показано на фигуре. Например, оно может быть реализовано в виде стандартного сервера 630, или много раз в группе таких серверов. Оно может быть также реализовано в виде части системы стоечных серверов. Дополнительно, оно может быть реализовано в персональном вычислительном устройстве, таком как компактный портативный компьютер 632, настольный компьютер 634, или планшет или смартфон 636. Полная система может быть создана из множественных вычислительных устройств 600, обменивающихся данными друг с другом. Возможны и другие конфигурации.[0054]
[0055] Фиг. 7 показывает пример обобщенного вычислительного устройства 700, которое может быть системой 110 фиг. 1, которое может быть использовано с технологиями, описанными здесь. Вычислительное устройство 700 предназначено для представления различных иллюстративных форм устройств обработки больших объемов данных, таких как серверы, ячеечные серверы, центры обработки данных, мэйнфреймы, и другие устройства обработки больших объемов данных. Вычислительное устройство 700 может быть распределенной системой, имеющей множественные процессоры, возможно, включающей в себя узлы хранения данных, подключенные к сети, которые связаны между собой одной или несколькими сетями связи. Компоненты, показанные здесь, их соединения и связи, и их функции, как подразумевается, являются только примерами, и не подразумевается, что они ограничивают реализации изобретений, описанных и/или заявленных в этом документе.[0055] FIG. 7 shows an example of a
[0056] Распределенное вычислительное устройство 700 может включать в себя любое количество вычислительных устройств 780. Вычислительные устройства 780 могут включать в себя сервер или стоечные серверы, мэйнфреймы и т.д., обменивающиеся данными через локальную или глобальную сеть, специальные оптические каналы, модемы, мосты, маршрутизаторы, коммутаторы, проводные или беспроводные сети и т.д.[0056] Distributed
[0057] В некоторых реализациях, каждое вычислительное устройство может включать в себя множественные стойки. Например, вычислительное устройство 780а включает в себя множественные стойки 758a - 758n. Каждая стойка может включать в себя один или несколько процессоров, таких как процессоры 752a-752n и 762a-762n. Процессоры могут включать в себя процессоры данных, запоминающие устройства, подключенные к сети, и другие управляемые компьютерами устройства. В некоторых реализациях, один процессор может функционировать в качестве главного процессора и может управлять задачами планирования и распределения данных. Процессоры могут быть взаимно соединены через один или несколько стоечных коммутаторов 758, и одна или несколько стоек могут быть соединены через коммутатор 778. Коммутатор 778 может управлять обменом данных между множественными соединенными вычислительными устройствами 700.[0057] In some implementations, each computing device may include multiple racks. For example,
[0058] Каждая стойка может включать в себя память, такую как память 754 и память 764, и запоминающее устройство, такое как запоминающее устройство 756 и 766. Запоминающие устройства 756 и 766 могут обеспечить хранение больших объемов данных и могут включать в себя энергозависимые или энергонезависимые запоминающие устройства, такие как диски, подключенные к сети, гибкие диски, жесткие диски, оптические диски, ленты, флэш-память или другие подобные твердотельные устройства памяти, или массив устройств, включающий в себя устройства в сети устройств для хранения данных, или другие конфигурации. Запоминающие устройства 756 или 766 могут совместно использоваться множественными процессорами, множественными стойками, или множественными вычислительными устройствами, и могут включать в себя машиночитаемую среду, хранящую команды, исполняемые одним или несколькими процессорами. Память 754 и 764 может включать в себя, например, блок или блоки энергозависимой памяти, блок или блоки энергонезависимой памяти, и/или другие формы машиночитаемых сред, такие как магнитные или оптические диски, флэш-память, кэш-память, память с произвольным доступом (RAM), постоянное запоминающее устройство (ROM), и их комбинации. Память, такая как память 754, может также совместно использоваться процессорами 752a-752n. Структуры данных, такие как индекс, могут храниться, например, в запоминающем устройстве 756 и памяти 754. Вычислительное устройство 700 может включать в себя другие компоненты, которые не показаны, такие как контроллеры, шины, устройства ввода/ вывода данных, модули связи, и т.д.[0058] Each rack may include memory such as
[0059] Полная система, такая как система 110, может быть создана из множественных вычислительных устройств 700, обменивающихся данными друг с другом. Например, устройство 780а может обмениваться данными с устройствами 780b, 780c, и 780d, и эти устройства могут совместно представлять систему 100. В качестве другого примера, система 100 фиг. 1 может включать в себя одно или несколько вычислительных устройств 700. Некоторые из вычислительных устройств могут быть расположены географически близко друг к другу, а другие могут быть расположены географически далеко друг от друга. Компоновка вычислительного устройства 700 приведена только в качестве примера, и система может иметь другие компоновки или конфигурации.[0059] A complete system, such as system 110, may be constructed from
[0060] Различные реализации могут включать в себя реализацию в одной или нескольких компьютерных программах, которые могут быть исполнены и/или интерпретированы на программируемой системе, включающей в себя по меньшей мере один программируемый процессор, образованный на подложке, который может быть процессором общего назначения или специального назначения, выполненным с возможностью приема данных и команд от системы хранения данных, по меньшей мере одного устройства ввода данных, и по меньшей мере одного устройства вывода данных, или передачи данных и команд к ним.[0060] Various implementations may include implementation in one or more computer programs that may be executed and / or interpreted on a programmable system including at least one programmable processor formed on a substrate, which may be a general purpose processor or special purpose, configured to receive data and commands from the data storage system, at least one data input device, and at least one data output device, or transmit data and commands to them.
[0061] Эти компьютерные программы (также известные как программы, программное обеспечение, программные приложения или код) включают в себя машинные команды для программируемого процессора, и могут быть реализованы в высокоуровневом процедурном и/или объектно-ориентированном языке, и/или в языке ассемблера/ машинном языке. При использовании здесь, термины «машиночитаемая среда», «читаемая компьютерами среда» относятся к любому долговременному компьютерному программному продукту, аппарату и/или устройству (например, магнитным дискам, оптическим дискам, памяти (включая постоянное запоминающее устройство), программируемым логическим устройствам (PLD)), используемым для обеспечения машинных команд и/или данных для программируемого процессора.[0061] These computer programs (also known as programs, software, software applications, or code) include machine instructions for a programmable processor, and may be implemented in a high-level procedural and / or object-oriented language and / or assembly language. / machine language. As used herein, the terms "computer-readable medium", "computer-readable medium" refer to any durable computer software product, apparatus and / or device (e.g., magnetic disks, optical disks, memory (including read only memory), programmable logic devices (PLD )) used to provide machine instructions and / or data to the programmable processor.
[0062] Системы и технологии, описанные здесь, могут быть реализованы в вычислительной системе, которая включает в себя серверный компонент базы данных (например, сервер базы данных), или которая включает в себя компонент программного обеспечения промежуточного слоя (например, сервер приложений), или которая включает в себя интерфейсный компонент (например, клиентский компьютер, имеющий графический пользовательский интерфейс или веб-браузер, через которые пользователь может взаимодействовать с реализацией систем и технологий, описанных здесь), или любую комбинацию таких серверных компонентов базы данных, компонентов программного обеспечения промежуточного слоя и интерфейсных компонентов. Компоненты системы могут быть взаимно связаны через любую форму или среду цифровой передачи данных (например, сеть связи). Примеры сетей связи включают в себя локальную сеть (ʺLANʺ), глобальную сеть (ʺWANʺ), и интернет.[0062] The systems and technologies described herein may be implemented on a computing system that includes a database server component (eg, a database server), or that includes a middleware component (eg, an application server), or which includes an interface component (for example, a client computer having a graphical user interface or a web browser through which a user can interact with an implementation of the systems and technologies described herein), or any combination of such database server components, middleware software components layer and interface components. The components of the system can be interconnected through any form or medium of digital communication (for example, a communications network). Examples of communication networks include a local area network (LANʺ), a wide area network (WANʺ), and the Internet.
[0063] Вычислительная система может включать в себя клиенты и серверы. Клиент и сервер обычно удалены друг от друга и обычно взаимодействуют через сеть связи. Взаимосвязь клиента и сервера обеспечивается посредством компьютерных программ, запускаемых на соответствующих компьютерах и имеющих взаимосвязь клиент-сервер друг с другом.[0063] A computing system can include clients and servers. The client and server are usually remote from each other and usually communicate through a communications network. The relationship between the client and the server is provided by means of computer programs that run on the respective computers and have a client-server relationship with each other.
[0064] Таким образом, были описаны некоторые реализации. Тем не менее, различные модификации могут быть выполнены, не выходя за рамки сущности и объема настоящего изобретения. Дополнительно, логические последовательности операций, показанные на фигурах, не требуют конкретного показанного порядка, или последовательного порядка, для достижения необходимых результатов. Дополнительно, могут быть обеспечены другие этапы, или этапы могут быть удалены из описанных последовательностей операций, а также другие компоненты могут быть добавлены к описанным системам или удалены из них. Таким образом, другие реализации находятся в пределах объема нижеследующей формулы изобретения.[0064] Thus, some implementations have been described. However, various modifications can be made without departing from the spirit and scope of the present invention. Additionally, the logical sequences of operations shown in the figures do not require the particular order shown, or sequential order, to achieve the desired results. Additionally, other steps may be provided, or steps may be removed from the described sequences of operations, and other components may be added to or removed from the described systems. Thus, other implementations are within the scope of the following claims.
Claims (41)
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
CNPCT/CN2014/080801 | 2014-06-26 | ||
PCT/CN2014/080801 WO2015196405A1 (en) | 2014-06-26 | 2014-06-26 | Optimized browser rendering process |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
RU2017102351A Division RU2638726C1 (en) | 2014-06-26 | 2014-06-26 | Optimized browser reproduction process |
Publications (3)
Publication Number | Publication Date |
---|---|
RU2017142592A RU2017142592A (en) | 2019-06-06 |
RU2017142592A3 RU2017142592A3 (en) | 2021-04-08 |
RU2756482C2 true RU2756482C2 (en) | 2021-09-30 |
Family
ID=54931851
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
RU2017102351A RU2638726C1 (en) | 2014-06-26 | 2014-06-26 | Optimized browser reproduction process |
RU2017142592A RU2756482C2 (en) | 2014-06-26 | 2017-12-06 | Optimized browser playback process |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
RU2017102351A RU2638726C1 (en) | 2014-06-26 | 2014-06-26 | Optimized browser reproduction process |
Country Status (7)
Country | Link |
---|---|
US (2) | US9736212B2 (en) |
EP (1) | EP3161610B1 (en) |
JP (1) | JP6211722B2 (en) |
KR (2) | KR101768181B1 (en) |
CN (1) | CN106662986B (en) |
RU (2) | RU2638726C1 (en) |
WO (1) | WO2015196405A1 (en) |
Families Citing this family (12)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP6386089B2 (en) | 2014-06-26 | 2018-09-05 | グーグル エルエルシー | Optimized browser rendering process |
KR101768181B1 (en) | 2014-06-26 | 2017-08-16 | 구글 인코포레이티드 | Optimized browser rendering process |
EP3161668B1 (en) | 2014-06-26 | 2020-08-05 | Google LLC | Batch-optimized render and fetch architecture |
US10033656B2 (en) * | 2015-05-21 | 2018-07-24 | Sap Portals Israel Ltd | Critical rendering path optimization |
US9965451B2 (en) | 2015-06-09 | 2018-05-08 | International Business Machines Corporation | Optimization for rendering web pages |
TWI611308B (en) * | 2016-11-03 | 2018-01-11 | 財團法人資訊工業策進會 | Webpage data extraction device and webpage data extraction method thereof |
US10691664B1 (en) * | 2017-07-18 | 2020-06-23 | FullStory, Inc. | User interface structural clustering and analysis |
EP3642727B1 (en) * | 2018-08-20 | 2023-05-10 | Google LLC | Resource pre-fetch using age threshold |
US10977333B2 (en) * | 2018-09-24 | 2021-04-13 | International Business Machines Corporation | Link corrections by cognitive analysis of web resources |
US10666528B1 (en) | 2018-11-28 | 2020-05-26 | Sap Portals Israel Ltd. | Decoupling platform as a service providers using a service management platform |
CN112950738B (en) * | 2021-03-30 | 2022-11-11 | 杭州群核信息技术有限公司 | Rendering engine processing method and device, storage medium and electronic equipment |
CN113220366A (en) * | 2021-05-11 | 2021-08-06 | 北京达佳互联信息技术有限公司 | Sub-application starting method and device, terminal and server |
Citations (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20060106844A1 (en) * | 2004-11-18 | 2006-05-18 | International Business Machines Corporation | Method and system for client-side manipulation of tables |
US7054917B1 (en) * | 2002-08-07 | 2006-05-30 | Propel Software Corporation | Method for accelerating delivery of content in a computer network |
US20090300768A1 (en) * | 2008-05-30 | 2009-12-03 | Balachander Krishnamurthy | Method and apparatus for identifying phishing websites in network traffic using generated regular expressions |
RU2409846C2 (en) * | 2004-09-30 | 2011-01-20 | Майкрософт Корпорейшн | Organising resources into collections to facilitate efficient and reliable resource access |
US8156429B2 (en) * | 2004-10-22 | 2012-04-10 | Flash Networks. Ltd | Method and system for accelerating downloading of web pages |
RU2453916C1 (en) * | 2011-05-05 | 2012-06-20 | Игорь Викторович Лебедев | Information resource search method using readdressing |
US20130007586A1 (en) * | 2011-06-29 | 2013-01-03 | Renjit Tom Thomas | Method and system for creating and using web feed display templates |
WO2013038320A1 (en) * | 2011-09-16 | 2013-03-21 | Strangeloop Networks, Inc. | Mobile resource accelerator |
Family Cites Families (102)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5828879A (en) | 1994-12-22 | 1998-10-27 | Fore Systems, Inc. | Method and a scheduler for controlling when a server provides service to an entity |
JP4025379B2 (en) | 1996-09-17 | 2007-12-19 | 株式会社ニューズウオッチ | Search system |
US7103794B2 (en) | 1998-06-08 | 2006-09-05 | Cacheflow, Inc. | Network object cache engine |
US6393526B1 (en) | 1997-10-28 | 2002-05-21 | Cache Plan, Inc. | Shared cache parsing and pre-fetch |
JP2987355B2 (en) | 1998-01-21 | 1999-12-06 | 三菱電機株式会社 | Hypertext display system and hypertext display method |
US6173316B1 (en) * | 1998-04-08 | 2001-01-09 | Geoworks Corporation | Wireless communication device with markup language based man-machine interface |
US6271840B1 (en) | 1998-09-24 | 2001-08-07 | James Lee Finseth | Graphical search engine visual index |
US6631369B1 (en) | 1999-06-30 | 2003-10-07 | Microsoft Corporation | Method and system for incremental web crawling |
US6665838B1 (en) | 1999-07-30 | 2003-12-16 | International Business Machines Corporation | Web page thumbnails and user configured complementary information provided from a server |
US6321265B1 (en) | 1999-11-02 | 2001-11-20 | Altavista Company | System and method for enforcing politeness while scheduling downloads in a web crawler |
US7200677B1 (en) | 2000-04-27 | 2007-04-03 | Microsoft Corporation | Web address converter for dynamic web pages |
US6643641B1 (en) * | 2000-04-27 | 2003-11-04 | Russell Snyder | Web search engine with graphic snapshots |
US6704728B1 (en) * | 2000-05-02 | 2004-03-09 | Iphase.Com, Inc. | Accessing information from a collection of data |
US6714905B1 (en) * | 2000-05-02 | 2004-03-30 | Iphrase.Com, Inc. | Parsing ambiguous grammar |
US8640017B1 (en) * | 2000-05-02 | 2014-01-28 | International Business Machines Corporation | Bootstrapping in information access systems |
JP3703080B2 (en) * | 2000-07-27 | 2005-10-05 | インターナショナル・ビジネス・マシーンズ・コーポレーション | Method, system and medium for simplifying web content |
US7231606B2 (en) | 2000-10-31 | 2007-06-12 | Software Research, Inc. | Method and system for testing websites |
US6865192B1 (en) | 2000-12-22 | 2005-03-08 | Sprint Communications Company L.P. | Integrated services hub self configuration |
JP2002297619A (en) | 2001-03-29 | 2002-10-11 | Brother Ind Ltd | Advertisement information providing system, and device, method, and program for browsing advertisement information |
WO2003012576A2 (en) * | 2001-07-27 | 2003-02-13 | Quigo Technologies Inc. | System and method for automated tracking and analysis of document usage |
US6763362B2 (en) | 2001-11-30 | 2004-07-13 | Micron Technology, Inc. | Method and system for updating a search engine |
US7200680B2 (en) | 2002-03-11 | 2007-04-03 | Ericsson Inc. | Method, apparatus and system for providing multimedia messages to incompatible terminals |
US7136875B2 (en) | 2002-09-24 | 2006-11-14 | Google, Inc. | Serving advertisements based on content |
US7231442B2 (en) * | 2002-04-03 | 2007-06-12 | Tonic Software, Inc. | Global network monitoring system |
US7441010B2 (en) * | 2002-06-06 | 2008-10-21 | International Business Machines Corporation | Method and system for determining the availability of in-line resources within requested web pages |
US7188359B2 (en) * | 2002-12-18 | 2007-03-06 | America Online, Inc. | Optimizing authentication service availability and responsiveness via client-side routing |
US20050132197A1 (en) | 2003-05-15 | 2005-06-16 | Art Medlar | Method and apparatus for a character-based comparison of documents |
GB0315154D0 (en) * | 2003-06-28 | 2003-08-06 | Ibm | Improvements to hypertext integrity |
US7725452B1 (en) | 2003-07-03 | 2010-05-25 | Google Inc. | Scheduler for search engine crawler |
US7895523B2 (en) | 2003-09-04 | 2011-02-22 | International Business Machines Corporation | Method, system and program product for obscuring supplemental web content |
US7457823B2 (en) * | 2004-05-02 | 2008-11-25 | Markmonitor Inc. | Methods and systems for analyzing data related to possible online fraud |
US8353028B2 (en) | 2004-06-21 | 2013-01-08 | Ebay Inc. | Render engine, and method of using the same, to verify data for access and/or publication via a computer system |
US7644107B2 (en) | 2004-09-30 | 2010-01-05 | Microsoft Corporation | System and method for batched indexing of network documents |
EP1821215B1 (en) | 2004-10-22 | 2011-11-30 | Access Co., Ltd. | Parameter setting and storage method |
US20060129463A1 (en) | 2004-12-15 | 2006-06-15 | Zicherman Amir S | Method and system for automatic product searching, and use thereof |
US7536389B1 (en) | 2005-02-22 | 2009-05-19 | Yahoo ! Inc. | Techniques for crawling dynamic web content |
US20070005652A1 (en) | 2005-07-02 | 2007-01-04 | Electronics And Telecommunications Research Institute | Apparatus and method for gathering of objectional web sites |
US8527504B1 (en) | 2005-09-01 | 2013-09-03 | At&T Intellectual Property Ii, L.P. | Data network content filtering using categorized filtering parameters |
US8271611B2 (en) | 2005-09-28 | 2012-09-18 | Telefonaktiebolaget L M Ericsson (Publ) | Method and system of invoking MIDlets from a web browser on a local device |
CN101346634B (en) | 2005-11-04 | 2012-10-24 | 甲骨文国际公司 | System and method for a gatekeeper in a communications network |
CN101075236A (en) | 2006-06-12 | 2007-11-21 | 腾讯科技（深圳）有限公司 | Apparatus and method for accelerating browser webpage display |
US20080010642A1 (en) | 2006-06-30 | 2008-01-10 | Maclellan Scot | Method, system and computer program for scheduling execution of work units with monitoring of progress thereof |
US8015162B2 (en) | 2006-08-04 | 2011-09-06 | Google Inc. | Detecting duplicate and near-duplicate files |
CN101201827B (en) | 2006-12-14 | 2013-02-20 | 阿里巴巴集团控股有限公司 | Method and system for displaying web page |
US7886042B2 (en) | 2006-12-19 | 2011-02-08 | Yahoo! Inc. | Dynamically constrained, forward scheduling over uncertain workloads |
US7694054B2 (en) | 2007-04-26 | 2010-04-06 | Microsoft Corporation | Governing access to a computing resource |
US8578261B1 (en) | 2007-06-22 | 2013-11-05 | Adobe Systems Incorporated | Active preview of hyperlink content in browser supported file-format |
US9906549B2 (en) | 2007-09-06 | 2018-02-27 | Microsoft Technology Licensing, Llc | Proxy engine for custom handling of web content |
US8751626B2 (en) | 2007-10-23 | 2014-06-10 | Microsoft Corporation | Model-based composite application platform |
US20090164502A1 (en) * | 2007-12-24 | 2009-06-25 | Anirban Dasgupta | Systems and methods of universal resource locator normalization |
NZ566291A (en) | 2008-02-27 | 2008-12-24 | Actionthis Ltd | Methods and devices for post processing rendered web pages and handling requests of post processed web pages |
US8131753B2 (en) | 2008-05-18 | 2012-03-06 | Rybak Ilya | Apparatus and method for accessing and indexing dynamic web pages |
US8316124B1 (en) * | 2008-09-29 | 2012-11-20 | Amazon Technologies, Inc. | Managing network data display |
CN101763357B (en) | 2008-11-13 | 2016-09-14 | 北京搜狗科技发展有限公司 | A kind of method and system for browser to load internet resources |
CN101504648A (en) * | 2008-11-14 | 2009-08-12 | 北京搜狗科技发展有限公司 | Method and apparatus for showing web page resources |
US20100131488A1 (en) | 2008-11-26 | 2010-05-27 | Yahoo! Inc. | Digital Images of Web Pages |
US8516080B2 (en) | 2008-12-03 | 2013-08-20 | Mobophiles, Inc. | System and method for providing virtual web access |
US8356247B2 (en) | 2008-12-16 | 2013-01-15 | Rich Media Worldwide, Llc | Content rendering control system and method |
US8543580B2 (en) * | 2008-12-23 | 2013-09-24 | Microsoft Corporation | Mining translations of web queries from web click-through data |
US8880498B2 (en) * | 2008-12-31 | 2014-11-04 | Fornova Ltd. | System and method for aggregating and ranking data from a plurality of web sites |
US8539359B2 (en) * | 2009-02-11 | 2013-09-17 | Jeffrey A. Rapaport | Social network driven indexing system for instantly clustering people with concurrent focus on same topic into on-topic chat rooms and/or for generating on-topic search results tailored to user preferences regarding topic |
US9311425B2 (en) | 2009-03-31 | 2016-04-12 | Qualcomm Incorporated | Rendering a page using a previously stored DOM associated with a different page |
CN101587495A (en) | 2009-07-08 | 2009-11-25 | 伍帝州 | Method and system for downloading and disposing application through browser and providing application entrance |
US8868637B2 (en) * | 2009-09-02 | 2014-10-21 | Facebook, Inc. | Page rendering for dynamic web pages |
JP2011065488A (en) | 2009-09-17 | 2011-03-31 | Sony Corp | Information processing apparatus, data acquisition method and program |
US8392748B2 (en) | 2009-10-06 | 2013-03-05 | Microsoft Corporation | Reliable media streaming |
US20110112995A1 (en) | 2009-10-28 | 2011-05-12 | Industrial Technology Research Institute | Systems and methods for organizing collective social intelligence information using an organic object data model |
US8689117B1 (en) | 2009-10-30 | 2014-04-01 | Google Inc. | Webpages with conditional content |
JP2011108102A (en) | 2009-11-19 | 2011-06-02 | Sony Corp | Web server, web browser and web system |
US8738686B2 (en) * | 2009-12-30 | 2014-05-27 | Teradata Us, Inc. | Dynamic resource management |
US8768926B2 (en) * | 2010-01-05 | 2014-07-01 | Yahoo! Inc. | Techniques for categorizing web pages |
US8250478B2 (en) * | 2010-01-28 | 2012-08-21 | Microsoft Corporation | State persistence and background initialization for post-back web applications |
KR101122700B1 (en) * | 2010-03-08 | 2012-03-12 | (주)이앤비소프트 | URL information transmitting method |
JP2011221616A (en) | 2010-04-05 | 2011-11-04 | Nec Corp | Url filtering system, system control method, and system control program |
US8346755B1 (en) * | 2010-05-04 | 2013-01-01 | Google Inc. | Iterative off-line rendering process |
US8446411B2 (en) | 2010-06-11 | 2013-05-21 | Microsoft Corporation | Adaptive image rendering and use of imposter |
US8676978B2 (en) * | 2010-08-03 | 2014-03-18 | Facebook, Inc. | Efficient storage and retrieval of resources for rendering structured documents |
JP5279793B2 (en) | 2010-10-25 | 2013-09-04 | 京セラ株式会社 | Mobile terminal, mobile terminal control method and program |
US8849991B2 (en) | 2010-12-15 | 2014-09-30 | Blue Coat Systems, Inc. | System and method for hypertext transfer protocol layered reconstruction |
WO2012101585A1 (en) | 2011-01-28 | 2012-08-02 | Strangeloop Networks, Inc. | Prioritized image rendering based on position within a web page |
US10204327B2 (en) * | 2011-02-05 | 2019-02-12 | Visa International Service Association | Merchant-consumer bridging platform apparatuses, methods and systems |
US8707162B1 (en) | 2011-03-22 | 2014-04-22 | Google Inc. | Methods and systems for reducing web page transmission bandwidth |
US8799262B2 (en) | 2011-04-11 | 2014-08-05 | Vistaprint Schweiz Gmbh | Configurable web crawler |
US8655865B1 (en) | 2011-05-27 | 2014-02-18 | Adobe Systems Incorporated | Method and apparatus for indexing rich internet content using contextual information |
US8538949B2 (en) * | 2011-06-17 | 2013-09-17 | Microsoft Corporation | Interactive web crawler |
US20130117252A1 (en) | 2011-11-09 | 2013-05-09 | Google Inc. | Large-scale real-time fetch service |
WO2013103912A1 (en) * | 2012-01-05 | 2013-07-11 | Visa International Service Association | Transaction visual capturing apparatuses, methods and systems |
US20150172228A1 (en) * | 2012-04-17 | 2015-06-18 | George Zalepa | Method and system for communicating information over a network |
US8910132B2 (en) * | 2012-07-13 | 2014-12-09 | Facebook, Inc. | Client-side script bundle management system |
US20140053056A1 (en) | 2012-08-16 | 2014-02-20 | Qualcomm Incorporated | Pre-processing of scripts in web browsers |
CN102917067B (en) * | 2012-10-24 | 2015-06-10 | 网宿科技股份有限公司 | Method and device for increasing response speed based on self-adaption concurrency control of client |
EP2728481A1 (en) | 2012-11-04 | 2014-05-07 | Rightware Oy | Evaluation of page load performance of web browser |
CN103034503B (en) | 2012-12-25 | 2016-07-06 | 北京奇虎科技有限公司 | A kind of script execution, system and browser |
US20140189534A1 (en) * | 2012-12-31 | 2014-07-03 | Google Inc. | Customizing shared web resource snapshots |
US9286408B2 (en) * | 2013-01-30 | 2016-03-15 | Hewlett-Packard Development Company, L.P. | Analyzing uniform resource locators |
US9256795B1 (en) * | 2013-03-15 | 2016-02-09 | A9.Com, Inc. | Text entity recognition |
US8601565B1 (en) | 2013-06-19 | 2013-12-03 | Edgecast Networks, Inc. | White-list firewall based on the document object model |
US8924850B1 (en) | 2013-11-21 | 2014-12-30 | Google Inc. | Speeding up document loading |
US9646254B2 (en) * | 2014-06-20 | 2017-05-09 | Amazon Technologies, Inc. | Predicting next web pages |
EP3161668B1 (en) | 2014-06-26 | 2020-08-05 | Google LLC | Batch-optimized render and fetch architecture |
JP6386089B2 (en) | 2014-06-26 | 2018-09-05 | グーグル エルエルシー | Optimized browser rendering process |
KR101768181B1 (en) | 2014-06-26 | 2017-08-16 | 구글 인코포레이티드 | Optimized browser rendering process |
-
2014
- 2014-06-26 KR KR1020177000222A patent/KR101768181B1/en active IP Right Grant
- 2014-06-26 KR KR1020177021521A patent/KR102133486B1/en active IP Right Grant
- 2014-06-26 WO PCT/CN2014/080801 patent/WO2015196405A1/en active Application Filing
- 2014-06-26 JP JP2016574382A patent/JP6211722B2/en active Active
- 2014-06-26 CN CN201480079987.9A patent/CN106662986B/en active Active
- 2014-06-26 RU RU2017102351A patent/RU2638726C1/en active
- 2014-06-26 EP EP14895822.6A patent/EP3161610B1/en active Active
- 2014-11-03 US US14/531,080 patent/US9736212B2/en active Active
-
2017
- 2017-08-09 US US15/672,895 patent/US10284623B2/en active Active
- 2017-12-06 RU RU2017142592A patent/RU2756482C2/en active
Patent Citations (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7054917B1 (en) * | 2002-08-07 | 2006-05-30 | Propel Software Corporation | Method for accelerating delivery of content in a computer network |
RU2409846C2 (en) * | 2004-09-30 | 2011-01-20 | Майкрософт Корпорейшн | Organising resources into collections to facilitate efficient and reliable resource access |
US8156429B2 (en) * | 2004-10-22 | 2012-04-10 | Flash Networks. Ltd | Method and system for accelerating downloading of web pages |
US20060106844A1 (en) * | 2004-11-18 | 2006-05-18 | International Business Machines Corporation | Method and system for client-side manipulation of tables |
US20090300768A1 (en) * | 2008-05-30 | 2009-12-03 | Balachander Krishnamurthy | Method and apparatus for identifying phishing websites in network traffic using generated regular expressions |
RU2453916C1 (en) * | 2011-05-05 | 2012-06-20 | Игорь Викторович Лебедев | Information resource search method using readdressing |
US20130007586A1 (en) * | 2011-06-29 | 2013-01-03 | Renjit Tom Thomas | Method and system for creating and using web feed display templates |
WO2013038320A1 (en) * | 2011-09-16 | 2013-03-21 | Strangeloop Networks, Inc. | Mobile resource accelerator |
Also Published As
Publication number | Publication date |
---|---|
EP3161610A4 (en) | 2017-11-29 |
RU2017142592A (en) | 2019-06-06 |
KR102133486B1 (en) | 2020-07-13 |
CN106662986B (en) | 2019-06-21 |
KR20170007521A (en) | 2017-01-18 |
KR101768181B1 (en) | 2017-08-16 |
CN106662986A (en) | 2017-05-10 |
US20150381699A1 (en) | 2015-12-31 |
EP3161610B1 (en) | 2020-08-05 |
US20170359402A1 (en) | 2017-12-14 |
US10284623B2 (en) | 2019-05-07 |
US9736212B2 (en) | 2017-08-15 |
RU2017142592A3 (en) | 2021-04-08 |
KR20170092707A (en) | 2017-08-11 |
EP3161610A1 (en) | 2017-05-03 |
JP6211722B2 (en) | 2017-10-11 |
JP2017527005A (en) | 2017-09-14 |
RU2638726C1 (en) | 2017-12-15 |
WO2015196405A1 (en) | 2015-12-30 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
RU2756482C2 (en) | Optimized browser playback process | |
US11328114B2 (en) | Batch-optimized render and fetch architecture | |
US10713330B2 (en) | Optimized browser render process | |
CN105431844B (en) | Third party for search system searches for application | |
US9075914B2 (en) | Analytics driven development | |
JP6568985B2 (en) | Batch optimized rendering and fetch architecture | |
Taneja et al. | AirBits: a web application development using microsoft azure | |
JP6397101B2 (en) | Optimized browser rendering process | |
CN107315780B (en) | Application software pushing method and device | |
Shojaatmand et al. | Improving replica selection in data grid using a dynamic ant algorithm | |
Pang et al. | Energy consumption analysis of ARM-based system | |
RU2651424C2 (en) | Method and system for determining time of creation of web resource | |
RU2577479C2 (en) | Apparatus and method for determining time of creation of web resource |