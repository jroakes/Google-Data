US20140006418A1 - Method and apparatus for ranking apps in the wide-open internet - Google Patents
Method and apparatus for ranking apps in the wide-open internet Download PDFInfo
- Publication number
- US20140006418A1 US20140006418A1 US13/540,249 US201213540249A US2014006418A1 US 20140006418 A1 US20140006418 A1 US 20140006418A1 US 201213540249 A US201213540249 A US 201213540249A US 2014006418 A1 US2014006418 A1 US 2014006418A1
- Authority
- US
- United States
- Prior art keywords
- application
- ranking
- developer
- computing
- user
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Abandoned
Links
- 238000000034 method Methods 0.000 title claims abstract description 50
- 230000000694 effects Effects 0.000 claims description 14
- 238000003058 natural language processing Methods 0.000 claims description 14
- 238000004891 communication Methods 0.000 claims description 10
- 238000010586 diagram Methods 0.000 description 7
- 238000010411 cooking Methods 0.000 description 6
- 230000001413 cellular effect Effects 0.000 description 3
- 230000006870 function Effects 0.000 description 3
- 230000002155 anti-virotic effect Effects 0.000 description 2
- 230000004044 response Effects 0.000 description 2
- 230000016776 visual perception Effects 0.000 description 2
- 238000001514 detection method Methods 0.000 description 1
- 210000005069 ears Anatomy 0.000 description 1
- 238000004880 explosion Methods 0.000 description 1
- 238000001914 filtration Methods 0.000 description 1
- 238000009434 installation Methods 0.000 description 1
- 230000007774 longterm Effects 0.000 description 1
- 230000036651 mood Effects 0.000 description 1
- 230000003287 optical effect Effects 0.000 description 1
- 230000035755 proliferation Effects 0.000 description 1
- 230000001960 triggered effect Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/953—Querying, e.g. by the use of web search engines
- G06F16/9536—Search customisation based on social or collaborative filtering
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/953—Querying, e.g. by the use of web search engines
- G06F16/9535—Search customisation based on user profiles and personalisation
Definitions
- the present disclosure relates generally to applications and, more particularly, to a method and apparatus for ranking applications in the wide-open Internet.
- Mobile endpoint device use has increased in popularity in the past few years. Associated with the mobile endpoint devices are the proliferation of software applications (broadly known as “apps” or “applications”) that are created for the mobile endpoint device.
- apps software applications
- the apps that are found in response to the user's search may not be presented in any particular order.
- the apps may be listed in an order based upon how much the developers pay to be ordered first or a simple alphabetical listing. This type of listing may not be helpful to the user.
- the present disclosure provides a method for ranking an application. For example, the method collects meta-data from the application, determines a reputation of a developer of the application using the meta-data, and computes an initial ranking of the application based upon the reputation of the developer.
- FIG. 1 illustrates one example of a communications network of the present disclosure
- FIG. 2 illustrates an example functional framework flow diagram for application searching
- FIG. 3 illustrates an example flowchart of one embodiment of a method for ranking apps
- FIG. 4 illustrates a high-level block diagram of a general-purpose computer suitable for use in performing the functions described herein.
- the present disclosure broadly discloses a method, non-transitory computer readable medium and apparatus for ranking software applications (“apps”).
- apps software applications
- apps are presented to the user in an order that is not necessarily an order or ranking that is most useful to the user.
- One embodiment of the present disclosure ranks apps in an order that is most relevant to what the user is looking for and ensures that the apps are from developers that have a good reputation for providing the type of app the user is looking for.
- FIG. 1 is a block diagram depicting one example of a communications network 100 .
- the communications network 100 may be any type of communications network, such as for example, a traditional circuit switched network (e.g., a public switched telephone network (PSTN)) or a packet network such as an Internet Protocol (IP) network (e.g., an IP Multimedia Subsystem (IMS) network, an asynchronous transfer mode (ATM) network, a wireless network, a cellular network (e.g., 2G, 3G and the like), a long term evolution (LTE) network, and the like) related to the current disclosure.
- IP Internet Protocol
- IMS IP Multimedia Subsystem
- ATM asynchronous transfer mode
- wireless network e.g., a wireless network
- a cellular network e.g., 2G, 3G and the like
- LTE long term evolution
- IP network is broadly defined as a network that uses Internet Protocol to exchange data packets.
- Additional exemplary IP networks include Voice over IP (VoIP) networks
- the network 100 may comprise a core network 102 .
- the core network 102 may be in communication with one or more access networks 120 and 122 .
- the access networks 120 and 122 may include a wireless access network (e.g., a WiFi network and the like), a cellular access network, a PSTN access network, a cable access network, a wired access network and the like.
- the access networks 120 and 122 may all be different types of access networks, may all be the same type of access network, or some access networks may be the same type of access network and other may be different types of access networks.
- the core network 102 and the access networks 120 and 122 may be operated by different service providers, the same service provider or a combination thereof.
- the core network 102 may include an application server (AS) 104 and a database (DB) 106 .
- AS application server
- DB database
- the AS 104 may comprise a general purpose computer as illustrated in FIG. 4 and discussed below. In one embodiment, the AS 104 may perform the methods and algorithms discussed below related to ranking the apps.
- the DB 106 may store various indexing schemes used for searching.
- the DB 106 may store indexing schemes such as text indexing, semantic indexing, context indexing, user feedback indexing and the like.
- the DB 106 may store various information related to apps. For example, as meta-data is extracted from the apps, the meta-data may be stored in the DB 106 .
- the meta-data may include information such as a type of app, a developer of the app, app keywords and the like.
- the meta-data may then be used to search the Internet for additional information about the app, such as a reputation of the developer for creating the type of app being analyzed, and the like.
- the additional information obtained from searching the Internet may also be stored in the DB 106 .
- the DB 106 may store all of the rankings that are computed.
- the DB 106 may also store a plurality of apps that may be accessed by a user via the user's endpoint device.
- a plurality of databases storing a plurality of apps may be deployed.
- the databases may be co-located or located remotely from one another throughout the communications network 100 .
- the plurality of databases may be operated by different vendors or service providers.
- the access network 120 may be in communication with one or more user endpoint devices (also referred to as “endpoint devices” or “UE”) 108 and 110 .
- the access network 122 may be in communication with one or more user endpoint devices 112 and 114 .
- the user endpoint devices 108 , 110 , 112 and 114 may be any type of endpoint device such as a desktop computer or a mobile endpoint device such as a cellular telephone, a smart phone, a tablet computer, a laptop computer, a netbook, an ultrabook, a tablet computer, a portable media device (e.g., an iPod® touch or MP3 player), and the like. It should be noted that although only four user endpoint devices are illustrated in FIG. 1 , any number of user endpoint devices may be deployed.
- the network 100 has been simplified.
- the network 100 may include other network elements (not shown) such as border elements, routers, switches, policy servers, security devices, a content distribution network (CDN) and the like.
- CDN content distribution network
- FIG. 2 illustrates an example of a functional framework flow diagram 200 for app searching.
- the functional framework flow diagram 200 may be executed for example, in a communication network described in FIG. 1 above.
- the functional framework flow diagram 200 includes four different phases, phase I 202 , phase II 1204 , phase III 206 and phase IV 208 .
- phase I 202 operations are performed without user input.
- phase I 202 may pre-process each one of the apps to obtain and/or generate meta-data and perform app fingerprinting to generate a “crawled app.”
- Apps may be located in a variety of online locations, for example, an app store, an online retailer, an app marketplace or individual app developers who provide their apps via the Internet, e.g., websites.
- meta-data may include information such as a type or category of the app, a name of the developer (individual or corporate entity) of the app, key words associated with the app and the like. In one embodiment, the meta-data information may then be further used to crawl the Internet or the World Wide Web to obtain additional information.
- the reputation of a developer for developing particular types of apps may be obtained. For example, if the developer for a security app is a security company, the security company may have a high reputation for creating security apps. In contrast, if the developer for a database app is by a security company, the security company may have a low reputation for creating database apps.
- the reputation may be calculated based on a number of different methods.
- a web search on a particular topic or category associated with an app may have a set of ranked results.
- the ranking of the results may be an indication of a level of reputation of a developer for the particular topic or category. For example, if a search for “antivirus tools” is performed, one of the top results may be “Norton®”. Thus, Norton® may have a high reputation for apps related to “antivirus tools”.
- the reputation may be based on whether the developer has more positive comments than negative comments related to various categories or types of apps, the number of apps in a particular category the developer has developed, and the like.
- the reputation information may then be used to calculate an initial ranking for each one of the apps. For example, based upon a reputation of the developer for developing a particular type of app, a weight value may be assigned to the app from a particular developer. For example, the weight may be a value between 0 and 1, where a highest reputation for developing a particular type of app may be assigned a value of 1 and a lowest reputation for developing a particular type of app may be assigned a value of 0. For example, if a developer only makes security apps, then a security app from this particular developer may be assigned a weighted value of 1.
- the security app from this particular developer may be assigned a weighted value of 0.67 and the productivity app from this particular developer may be assigned a weighted value of 0.33. This is only an illustrative example.
- weights may be assigned using any appropriate method.
- phase II 204 is triggered by user input.
- a user may input a search query for a particular app.
- the search may be based upon a natural language processing (NLP) or semantic query.
- NLP natural language processing
- the search may simply be a search based upon matches of keywords provided by the user in the search query.
- a NLP ranking of the app may be computed.
- the search may be based upon a context based query.
- the search may be performed based upon context information associated with a user and context information associated with an app.
- context information associated with the user may include which human senses are being used or are free.
- the context information associated with the user may also include what (an activity type parameter, e.g., a type of activity the user is participating in such as a particular type of sports activity, a particular work related activity, a particular school related activity and so on), where (a location parameter, e.g., a location of an activity, such as indoor, outdoor, at a particular location, at home, at work, and the like), when (a time parameter, e.g., a time of day, in the morning, in the afternoon, a day of the week, etc.) and with whom (a person parameter, e.g., a single user, a group of users, friends, family, an age of the user and the like) the user is performing an activity.
- an activity type parameter e.g., a type of activity the user is participating in such as a particular type of sports activity, a particular work related activity, a particular school related activity and so on
- a location parameter e.g., a location of an activity, such as indoor, outdoor
- the context information may be provided by a user.
- the user may enter a search based upon context information or provide information as to what activity he or she is performing, who is with the user, and the like.
- search phrases may include “apps to use while I'm driving,” “apps to use while I'm cooking,” “gaming apps for a large group of people,” and the like.
- the user may enter information on what senses are available. For example, the user may provide information that the user's hands are free or that the user may listen or interact verbally with an app, and the like.
- the context information may be automatically provided via one or more sensors on an endpoint device of the user.
- the sensors may include a microphone, a video camera, a gyroscope, an accelerometer, a thermometer, a global positioning satellite (GPS) sensor, and the like.
- the endpoint may provide context information such as the user is moving based upon detection of movement by the accelerometer, who is in the room with the user based upon images captured by the video camera, where the user is based upon images captured by the video camera and location information from the GPS sensor, and the like.
- the context information of the user may be compared against the context information labeled in the apps.
- the apps may be modified to include context information.
- the searching algorithm may provide in the search results apps that have matching context information or do not require the use of any of the senses that are being used. In other words, if the user's sense of sight/eyes is being used, then no apps that require the sense of sight/eyes would be returned in the search results.
- the user may be cooking.
- the system may receive the context search request by requesting apps suitable for when they are cooking.
- the algorithm may consider what senses are available while engaging in a particular activity and return apps that can be used with the available senses.
- the search request may be processed to determine that cooking requires the use of the user's senses such as touch/hands and sight/eyes and that the senses of smell/nose, sound/ears, voice/mouth and mood/mind are available.
- the context based search may try to search for apps that allow the user to listen to the app, for example, a radio app, an audio book app, and the like.
- a weight value may be assigned to each app found in response to the context search. For example, if the user has the senses of hearing and sight available, then an app that only utilizes hearing may be assigned a weight value of 0.50. Alternatively, if an app utilizes the senses of hearing and sight, then the app may be assigned a weight value of 1.00. Based upon the context search a context based ranking of the apps may be calculated.
- user feedback may also be used to calculate a user feedback ranking.
- user feedback may include data obtained during phase I 202 of user ratings of a particular app or feedback collected from users that have previously used the final ranking algorithm with respect to how accurate the final rankings of the apps were.
- a ranking algorithm may be applied to the apps that accounts for at least the initial ranking to compute a final ranking of the apps.
- the final ranking may be calculated based upon the initial ranking, the context based ranking, the NLP ranking and/or the user feedback ranking. For example, the weight values of each of the rankings may be added together to compute a total weight value, which may then be compared to the total weight values of the other apps.
- the results of the final ranking are presented to the user.
- the user may apply one or more optional post search filters to the ranked apps, e.g., various filtering criteria such as cost, hardware requirement, popularity of the app, other users' feedback, and so on.
- the post search filters may then be applied to the relevant ranked apps to generate a final set of apps that will be presented to the user.
- the user may interact with the apps. For example, the user may select one of the apps and either preview the app or download the app for installation and execution on the user's endpoint device.
- FIG. 3 illustrates a flowchart of a method 300 for ranking apps.
- the method 300 may be performed by the AS 104 or a general purpose computing device as illustrated in FIG. 4 and discussed below.
- the method 300 begins at step 302 .
- the method 300 collects meta-data from an app.
- the meta-data may include information such as a type or category of the app, a developer of the app, key words associated with the app and the like.
- the meta-data information may then be used to crawl the Internet or the World Wide Web to obtain additional information.
- the method 300 determines a reputation of a developer of the app using the meta-data.
- the information about the developer from the meta-data may be used to perform a search on the developer with respect to a particular category of app.
- the search result may include a ranking.
- the ranking of the search results may be used to determine a reputation of the developer. For example, if the developer has the highest ranking result, then the developer may have a high reputation for the particular category of app.
- the reputation of the developer may be determined using other methods described above as well. For example, whether the developer has more positive comments than negative comments related to various categories or types of apps, the number of apps in a particular category the developer has developed, and the like.
- the method 300 computes an initial ranking of the app based upon the reputation of the developer. For example, as discussed above, using the meta-data a developer's reputation for developing a particular type of app or category of app may be obtained. Using the reputation, a weight may be assigned to the app. Using the weight and reputation of the developer for the type of app that is presently being analyzed an initial ranking may be computed.
- the method 300 may then perform optional steps 310 , 312 and 314 or proceed straight to step 316 .
- one of the steps 310 , 312 and 314 may be performed, all of the steps 310 , 312 and 314 may be performed or any combination of steps 310 , 312 and 314 may be performed.
- the method 300 may compute a context based ranking of the app.
- the search may be performed based upon what, where, when and with whom a user is performing an activity.
- the user may be cooking.
- the context based search may try to search for apps that allow the user to listen to the app, for example, a radio app, an audio book app, and the like.
- a weight value may be assigned to the app based on how well the app matches the context search. Based upon the weight value a context based ranking of the apps may be calculated.
- the method 300 may compute an NLP ranking of the app based upon a user query string.
- the search may simply be a search based upon matches of keywords provided by the user in the search query.
- a weight value may be assigned to the apps based on how well the app matches the NLP query. Using the weight value, an NLP ranking of the app may be computed.
- the method 300 may compute a user feedback ranking of the app.
- user feedback may include data obtained during phase 202 of user ratings of a particular app or feedback collected from users that have previously used the final ranking algorithm with respect to how accurate the final rankings of the apps were.
- a weight value may be assigned to the app based on how high or low the user feedback is.
- the method 300 computes a final ranking of the app.
- the final ranking may be computed based upon at least the initial ranking.
- the final ranking may be calculated based upon the initial ranking, the context based ranking, the NLP ranking and/or the user feedback ranking. For example, the weight values of each of the rankings may be added together to compute a total weight value for the final ranking.
- the method 300 determines if there are additional apps that need to be analyzed to have a final ranking computed. If there are additional apps, the method 300 may go back to step 304 and the method 300 may be repeated for each one of the apps. If there are no additional apps, then the method 300 may proceed to step 320 where the method 300 ends.
- the apps are ranked in an order that is most relevant to the user with respect to who has developed the app and based upon a type of search the user has requested (e.g., NLP search, context search, and the like).
- apps that are developed by developers that have no reputations for creating a particular type of app may be presented to a user at a bottom portion of a ranked list of apps.
- the apps are ranked in an order that is most appropriate for their activity.
- one or more steps of the method 300 described above may include a storing, displaying and/or outputting step as required for a particular application.
- any data, records, fields, and/or intermediate results discussed in the methods can be stored, displayed, and/or outputted to another device as required for a particular application.
- operations, steps or blocks in FIG. 3 that recite a determining operation, or involve a decision do not necessarily require that both branches of the determining operation be practiced. In other words, one of the branches of the determining operation can be deemed as an optional step.
- operations, steps or blocks of the above described methods can be combined, separated, and/or performed in a different order from that described above, without departing from the example embodiments of the present disclosure.
- FIG. 4 depicts a high-level block diagram of a general-purpose computer suitable for use in performing the functions described herein.
- the system 400 comprises a hardware processor element 402 (e.g., a CPU), a memory 404 , e.g., random access memory (RAM) and/or read only memory (ROM), a module 405 for ranking apps, and various input/output devices 406 , e.g., storage devices, including but not limited to, a tape drive, a floppy drive, a hard disk drive or a compact disk drive, a receiver, a transmitter, a speaker, a display, a speech synthesizer, an output port, and a user input device (such as a keyboard, a keypad, a mouse, and the like).
- a hardware processor element 402 e.g., a CPU
- memory 404 e.g., random access memory (RAM) and/or read only memory (ROM)
- module 405 for ranking apps
- the present disclosure can be implemented in software and/or in a combination of software and hardware, e.g., using application specific integrated circuits (ASIC), a general purpose computer or any other hardware equivalents, e.g., computer readable instructions pertaining to the method(s) discussed above can be used to configure a hardware processor to perform the steps of the above disclosed method.
- the present module or process 405 for ranking apps can be implemented as computer-executable instructions (e.g., a software program comprising computer-executable instructions) and loaded into memory 404 and executed by hardware processor 402 to implement the functions as discussed above.
- the present method 405 for ranking apps as discussed above in method 300 (including associated data structures) of the present disclosure can be stored on a non-transitory (e.g., tangible or physical) computer readable storage medium, e.g., RAM memory, magnetic or optical drive or diskette and the like.
- a non-transitory e.g., tangible or physical
- computer readable storage medium e.g., RAM memory, magnetic or optical drive or diskette and the like.
Abstract
Description
- The present disclosure relates generally to applications and, more particularly, to a method and apparatus for ranking applications in the wide-open Internet.
- Mobile endpoint device use has increased in popularity in the past few years. Associated with the mobile endpoint devices are the proliferation of software applications (broadly known as “apps” or “applications”) that are created for the mobile endpoint device.
- The number of available apps is growing at an alarming rate. Currently, hundreds of thousands of apps are available to users via app stores such as Apple's® app store and Google's® Android marketplace. With such a large number of available apps, it would be very time consuming for users to manually search for an app that is of interest to them.
- Currently, a user can only search for an app in a rudimentary fashion. In addition, it is currently difficult to quickly determine if a particular app that a user has searched for is relevant to what the user was looking for or for a user to determine if the quality of the app can be trusted from a particular developer.
- Furthermore, the apps that are found in response to the user's search may not be presented in any particular order. For example, the apps may be listed in an order based upon how much the developers pay to be ordered first or a simple alphabetical listing. This type of listing may not be helpful to the user.
- In one embodiment, the present disclosure provides a method for ranking an application. For example, the method collects meta-data from the application, determines a reputation of a developer of the application using the meta-data, and computes an initial ranking of the application based upon the reputation of the developer.
- The present disclosure can be readily understood by considering the following detailed description in conjunction with the accompanying drawings, in which:
-
FIG. 1 illustrates one example of a communications network of the present disclosure; -
FIG. 2 illustrates an example functional framework flow diagram for application searching; -
FIG. 3 illustrates an example flowchart of one embodiment of a method for ranking apps; and -
FIG. 4 illustrates a high-level block diagram of a general-purpose computer suitable for use in performing the functions described herein. - To facilitate understanding, identical reference numerals have been used, where possible, to designate identical elements that are common to the figures.
- The present disclosure broadly discloses a method, non-transitory computer readable medium and apparatus for ranking software applications (“apps”). The growing popularity of apps for mobile endpoint devices has lead to an explosion of the number of apps that are available. Currently, there are hundreds of thousands of apps available for mobile endpoint devices.
- However, for a user to search for a particular app or browse through each one of the apps would be a very time consuming process. Currently, apps are presented to the user in an order that is not necessarily an order or ranking that is most useful to the user. One embodiment of the present disclosure ranks apps in an order that is most relevant to what the user is looking for and ensures that the apps are from developers that have a good reputation for providing the type of app the user is looking for.
-
FIG. 1 is a block diagram depicting one example of acommunications network 100. Thecommunications network 100 may be any type of communications network, such as for example, a traditional circuit switched network (e.g., a public switched telephone network (PSTN)) or a packet network such as an Internet Protocol (IP) network (e.g., an IP Multimedia Subsystem (IMS) network, an asynchronous transfer mode (ATM) network, a wireless network, a cellular network (e.g., 2G, 3G and the like), a long term evolution (LTE) network, and the like) related to the current disclosure. It should be noted that an IP network is broadly defined as a network that uses Internet Protocol to exchange data packets. Additional exemplary IP networks include Voice over IP (VoIP) networks, Service over IP (SoIP) networks, and the like. It should be noted that the present disclosure is not limited by the underlying network that is used to support the various embodiments of the present disclosure. - In one embodiment, the
network 100 may comprise acore network 102. Thecore network 102 may be in communication with one ormore access networks 120 and 122. Theaccess networks 120 and 122 may include a wireless access network (e.g., a WiFi network and the like), a cellular access network, a PSTN access network, a cable access network, a wired access network and the like. In one embodiment, theaccess networks 120 and 122 may all be different types of access networks, may all be the same type of access network, or some access networks may be the same type of access network and other may be different types of access networks. Thecore network 102 and theaccess networks 120 and 122 may be operated by different service providers, the same service provider or a combination thereof. - In one embodiment, the
core network 102 may include an application server (AS) 104 and a database (DB) 106. Although only asingle AS 104 and asingle DB 106 are illustrated, it should be noted that any number ofapplication servers 104 ordatabases 106 may be deployed. - In one embodiment, the AS 104 may comprise a general purpose computer as illustrated in
FIG. 4 and discussed below. In one embodiment, the AS 104 may perform the methods and algorithms discussed below related to ranking the apps. - In one embodiment, the DB 106 may store various indexing schemes used for searching. For example, the DB 106 may store indexing schemes such as text indexing, semantic indexing, context indexing, user feedback indexing and the like.
- In one embodiment, the DB 106 may store various information related to apps. For example, as meta-data is extracted from the apps, the meta-data may be stored in the DB 106. The meta-data may include information such as a type of app, a developer of the app, app keywords and the like. The meta-data may then be used to search the Internet for additional information about the app, such as a reputation of the developer for creating the type of app being analyzed, and the like. The additional information obtained from searching the Internet may also be stored in the DB 106. In addition, the DB 106 may store all of the rankings that are computed.
- In one embodiment, the DB 106 may also store a plurality of apps that may be accessed by a user via the user's endpoint device. In one embodiment, a plurality of databases storing a plurality of apps may be deployed. In one embodiment, the databases may be co-located or located remotely from one another throughout the
communications network 100. In one embodiment, the plurality of databases may be operated by different vendors or service providers. Although only asingle AS 104 and asingle DB 106 are illustrated inFIG. 1 , it should be noted that any number of application servers or databases may be deployed. - In one embodiment, the
access network 120 may be in communication with one or more user endpoint devices (also referred to as “endpoint devices” or “UE”) 108 and 110. In one embodiment, the access network 122 may be in communication with one or moreuser endpoint devices - In one embodiment, the
user endpoint devices FIG. 1 , any number of user endpoint devices may be deployed. - It should be noted that the
network 100 has been simplified. For example, thenetwork 100 may include other network elements (not shown) such as border elements, routers, switches, policy servers, security devices, a content distribution network (CDN) and the like. -
FIG. 2 illustrates an example of a functional framework flow diagram 200 for app searching. In one embodiment, the functional framework flow diagram 200 may be executed for example, in a communication network described inFIG. 1 above. - In one embodiment, the functional framework flow diagram 200 includes four different phases, phase I 202, phase II 1204, phase III 206 and phase IV 208. In phase I 202, operations are performed without user input. For example, from a universe of apps, phase I 202 may pre-process each one of the apps to obtain and/or generate meta-data and perform app fingerprinting to generate a “crawled app.” Apps may be located in a variety of online locations, for example, an app store, an online retailer, an app marketplace or individual app developers who provide their apps via the Internet, e.g., websites.
- In one embodiment, meta-data may include information such as a type or category of the app, a name of the developer (individual or corporate entity) of the app, key words associated with the app and the like. In one embodiment, the meta-data information may then be further used to crawl the Internet or the World Wide Web to obtain additional information.
- In one embodiment, using the meta-data, the reputation of a developer for developing particular types of apps may be obtained. For example, if the developer for a security app is a security company, the security company may have a high reputation for creating security apps. In contrast, if the developer for a database app is by a security company, the security company may have a low reputation for creating database apps.
- The reputation may be calculated based on a number of different methods. In one embodiment, a web search on a particular topic or category associated with an app may have a set of ranked results. The ranking of the results may be an indication of a level of reputation of a developer for the particular topic or category. For example, if a search for “antivirus tools” is performed, one of the top results may be “Norton®”. Thus, Norton® may have a high reputation for apps related to “antivirus tools”.
- In another embodiment, the reputation may be based on whether the developer has more positive comments than negative comments related to various categories or types of apps, the number of apps in a particular category the developer has developed, and the like.
- The reputation information may then be used to calculate an initial ranking for each one of the apps. For example, based upon a reputation of the developer for developing a particular type of app, a weight value may be assigned to the app from a particular developer. For example, the weight may be a value between 0 and 1, where a highest reputation for developing a particular type of app may be assigned a value of 1 and a lowest reputation for developing a particular type of app may be assigned a value of 0. For example, if a developer only makes security apps, then a security app from this particular developer may be assigned a weighted value of 1. In another example, if two third of the apps developed by a developer are security apps and another third of the apps developed by the developer are productivity apps, the security app from this particular developer may be assigned a weighted value of 0.67 and the productivity app from this particular developer may be assigned a weighted value of 0.33. This is only an illustrative example.
- The example above is only one example of a type of weighting system that may be used. However, the weights may be assigned using any appropriate method.
- Once the apps are weighted and an initial ranking for each of the apps is computed, phase II 204 is triggered by user input. For example, during phase II 204 a user may input a search query for a particular app. In one embodiment, the search may be based upon a natural language processing (NLP) or semantic query. For example, the search may simply be a search based upon matches of keywords provided by the user in the search query. Using the NLP query, a NLP ranking of the app may be computed.
- In one embodiment, the search may be based upon a context based query. For example, the search may be performed based upon context information associated with a user and context information associated with an app. In one embodiment, context information associated with the user may include which human senses are being used or are free. The context information associated with the user may also include what (an activity type parameter, e.g., a type of activity the user is participating in such as a particular type of sports activity, a particular work related activity, a particular school related activity and so on), where (a location parameter, e.g., a location of an activity, such as indoor, outdoor, at a particular location, at home, at work, and the like), when (a time parameter, e.g., a time of day, in the morning, in the afternoon, a day of the week, etc.) and with whom (a person parameter, e.g., a single user, a group of users, friends, family, an age of the user and the like) the user is performing an activity.
- In one embodiment, the context information may be provided by a user. For example, via a web interface, the user may enter a search based upon context information or provide information as to what activity he or she is performing, who is with the user, and the like. Some examples of search phrases may include “apps to use while I'm driving,” “apps to use while I'm cooking,” “gaming apps for a large group of people,” and the like. In addition, the user may enter information on what senses are available. For example, the user may provide information that the user's hands are free or that the user may listen or interact verbally with an app, and the like.
- In another embodiment, the context information may be automatically provided via one or more sensors on an endpoint device of the user. For example, the sensors may include a microphone, a video camera, a gyroscope, an accelerometer, a thermometer, a global positioning satellite (GPS) sensor, and the like. As a result, the endpoint may provide context information such as the user is moving based upon detection of movement by the accelerometer, who is in the room with the user based upon images captured by the video camera, where the user is based upon images captured by the video camera and location information from the GPS sensor, and the like.
- In one embodiment, after the context information is processed from the search request, the context information of the user may be compared against the context information labeled in the apps. As discussed above, in phase I 202 the apps may be modified to include context information. Using the context information of the user from the search request and the context information labeled in the apps, the searching algorithm may provide in the search results apps that have matching context information or do not require the use of any of the senses that are being used. In other words, if the user's sense of sight/eyes is being used, then no apps that require the sense of sight/eyes would be returned in the search results.
- To illustrate one example of a context search, the user may be cooking. The system may receive the context search request by requesting apps suitable for when they are cooking. In one embodiment, the algorithm may consider what senses are available while engaging in a particular activity and return apps that can be used with the available senses. In one embodiment, the search request may be processed to determine that cooking requires the use of the user's senses such as touch/hands and sight/eyes and that the senses of smell/nose, sound/ears, voice/mouth and mood/mind are available. Thus, the context based search may try to search for apps that allow the user to listen to the app, for example, a radio app, an audio book app, and the like.
- Based on the senses required for the app and the senses that are available to the user, a weight value may be assigned to each app found in response to the context search. For example, if the user has the senses of hearing and sight available, then an app that only utilizes hearing may be assigned a weight value of 0.50. Alternatively, if an app utilizes the senses of hearing and sight, then the app may be assigned a weight value of 1.00. Based upon the context search a context based ranking of the apps may be calculated.
- In one embodiment, user feedback may also be used to calculate a user feedback ranking. For example, user feedback may include data obtained during phase I 202 of user ratings of a particular app or feedback collected from users that have previously used the final ranking algorithm with respect to how accurate the final rankings of the apps were.
- A ranking algorithm may be applied to the apps that accounts for at least the initial ranking to compute a final ranking of the apps. In one embodiment, the final ranking may be calculated based upon the initial ranking, the context based ranking, the NLP ranking and/or the user feedback ranking. For example, the weight values of each of the rankings may be added together to compute a total weight value, which may then be compared to the total weight values of the other apps.
- At phase III 206, the results of the final ranking are presented to the user. During phase III 206, the user may apply one or more optional post search filters to the ranked apps, e.g., various filtering criteria such as cost, hardware requirement, popularity of the app, other users' feedback, and so on. The post search filters may then be applied to the relevant ranked apps to generate a final set of apps that will be presented to the user.
- At
phase IV 208, the user may interact with the apps. For example, the user may select one of the apps and either preview the app or download the app for installation and execution on the user's endpoint device. -
FIG. 3 illustrates a flowchart of amethod 300 for ranking apps. In one embodiment, themethod 300 may be performed by theAS 104 or a general purpose computing device as illustrated inFIG. 4 and discussed below. - The
method 300 begins atstep 302. Atstep 304, themethod 300 collects meta-data from an app. For example, the meta-data may include information such as a type or category of the app, a developer of the app, key words associated with the app and the like. The meta-data information may then be used to crawl the Internet or the World Wide Web to obtain additional information. - At
step 306, themethod 300 determines a reputation of a developer of the app using the meta-data. For example, the information about the developer from the meta-data may be used to perform a search on the developer with respect to a particular category of app. The search result may include a ranking. The ranking of the search results may be used to determine a reputation of the developer. For example, if the developer has the highest ranking result, then the developer may have a high reputation for the particular category of app. - The reputation of the developer may be determined using other methods described above as well. For example, whether the developer has more positive comments than negative comments related to various categories or types of apps, the number of apps in a particular category the developer has developed, and the like.
- At
step 308, themethod 300 computes an initial ranking of the app based upon the reputation of the developer. For example, as discussed above, using the meta-data a developer's reputation for developing a particular type of app or category of app may be obtained. Using the reputation, a weight may be assigned to the app. Using the weight and reputation of the developer for the type of app that is presently being analyzed an initial ranking may be computed. - The
method 300 may then performoptional steps steps steps steps - At
step 310, themethod 300 may compute a context based ranking of the app. For example, as discussed above, the search may be performed based upon what, where, when and with whom a user is performing an activity. For example, the user may be cooking. Thus, the user's physical senses and sight senses may be occupied by the cooking activity. However, the user's hearing sense may be free. Thus, the context based search may try to search for apps that allow the user to listen to the app, for example, a radio app, an audio book app, and the like. A weight value may be assigned to the app based on how well the app matches the context search. Based upon the weight value a context based ranking of the apps may be calculated. - At
step 312, themethod 300 may compute an NLP ranking of the app based upon a user query string. For example, the search may simply be a search based upon matches of keywords provided by the user in the search query. For example, a weight value may be assigned to the apps based on how well the app matches the NLP query. Using the weight value, an NLP ranking of the app may be computed. - At
step 314, themethod 300 may compute a user feedback ranking of the app. For example, user feedback may include data obtained during phase 202 of user ratings of a particular app or feedback collected from users that have previously used the final ranking algorithm with respect to how accurate the final rankings of the apps were. A weight value may be assigned to the app based on how high or low the user feedback is. - At
step 316, themethod 300 computes a final ranking of the app. In one embodiment, the final ranking may be computed based upon at least the initial ranking. In one embodiment, the final ranking may be calculated based upon the initial ranking, the context based ranking, the NLP ranking and/or the user feedback ranking. For example, the weight values of each of the rankings may be added together to compute a total weight value for the final ranking. - At
step 318, themethod 300 determines if there are additional apps that need to be analyzed to have a final ranking computed. If there are additional apps, themethod 300 may go back to step 304 and themethod 300 may be repeated for each one of the apps. If there are no additional apps, then themethod 300 may proceed to step 320 where themethod 300 ends. - As a result, the apps are ranked in an order that is most relevant to the user with respect to who has developed the app and based upon a type of search the user has requested (e.g., NLP search, context search, and the like). In other words, apps that are developed by developers that have no reputations for creating a particular type of app may be presented to a user at a bottom portion of a ranked list of apps. In addition, the apps are ranked in an order that is most appropriate for their activity.
- It should be noted that although not explicitly specified, one or more steps of the
method 300 described above may include a storing, displaying and/or outputting step as required for a particular application. In other words, any data, records, fields, and/or intermediate results discussed in the methods can be stored, displayed, and/or outputted to another device as required for a particular application. Furthermore, operations, steps or blocks inFIG. 3 that recite a determining operation, or involve a decision, do not necessarily require that both branches of the determining operation be practiced. In other words, one of the branches of the determining operation can be deemed as an optional step. Furthermore, operations, steps or blocks of the above described methods can be combined, separated, and/or performed in a different order from that described above, without departing from the example embodiments of the present disclosure. -
FIG. 4 depicts a high-level block diagram of a general-purpose computer suitable for use in performing the functions described herein. As depicted inFIG. 4 , thesystem 400 comprises a hardware processor element 402 (e.g., a CPU), amemory 404, e.g., random access memory (RAM) and/or read only memory (ROM), amodule 405 for ranking apps, and various input/output devices 406, e.g., storage devices, including but not limited to, a tape drive, a floppy drive, a hard disk drive or a compact disk drive, a receiver, a transmitter, a speaker, a display, a speech synthesizer, an output port, and a user input device (such as a keyboard, a keypad, a mouse, and the like). - It should be noted that the present disclosure can be implemented in software and/or in a combination of software and hardware, e.g., using application specific integrated circuits (ASIC), a general purpose computer or any other hardware equivalents, e.g., computer readable instructions pertaining to the method(s) discussed above can be used to configure a hardware processor to perform the steps of the above disclosed method. In one embodiment, the present module or
process 405 for ranking apps can be implemented as computer-executable instructions (e.g., a software program comprising computer-executable instructions) and loaded intomemory 404 and executed byhardware processor 402 to implement the functions as discussed above. As such, thepresent method 405 for ranking apps as discussed above in method 300 (including associated data structures) of the present disclosure can be stored on a non-transitory (e.g., tangible or physical) computer readable storage medium, e.g., RAM memory, magnetic or optical drive or diskette and the like. - While various embodiments have been described above, it should be understood that they have been presented by way of example only, and not limitation. Thus, the breadth and scope of a preferred embodiment should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents.
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/540,249 US20140006418A1 (en) | 2012-07-02 | 2012-07-02 | Method and apparatus for ranking apps in the wide-open internet |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/540,249 US20140006418A1 (en) | 2012-07-02 | 2012-07-02 | Method and apparatus for ranking apps in the wide-open internet |
Publications (1)
Publication Number | Publication Date |
---|---|
US20140006418A1 true US20140006418A1 (en) | 2014-01-02 |
Family
ID=49779271
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/540,249 Abandoned US20140006418A1 (en) | 2012-07-02 | 2012-07-02 | Method and apparatus for ranking apps in the wide-open internet |
Country Status (1)
Country | Link |
---|---|
US (1) | US20140006418A1 (en) |
Cited By (12)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20140189572A1 (en) * | 2012-12-31 | 2014-07-03 | Motorola Mobility Llc | Ranking and Display of Results from Applications and Services with Integrated Feedback |
US20150172060A1 (en) * | 2012-06-05 | 2015-06-18 | Lookout, Inc. | Monitoring installed applications on user devices |
US9208215B2 (en) | 2012-12-27 | 2015-12-08 | Lookout, Inc. | User classification based on data gathered from a computing device |
US20160162269A1 (en) * | 2014-12-03 | 2016-06-09 | Oleg POGORELIK | Security evaluation and user interface for application installation |
US20160328402A1 (en) * | 2015-05-06 | 2016-11-10 | App Annie Inc. | Keyword Reporting for Mobile Applications |
US9589129B2 (en) | 2012-06-05 | 2017-03-07 | Lookout, Inc. | Determining source of side-loaded software |
US9760767B1 (en) | 2016-09-27 | 2017-09-12 | International Business Machines Corporation | Rating applications based on emotional states |
US10218697B2 (en) | 2017-06-09 | 2019-02-26 | Lookout, Inc. | Use of device risk evaluation to manage access to services |
CN109918572A (en) * | 2019-03-19 | 2019-06-21 | 苏州迈荣祥信息科技有限公司 | Application software priority setting method and system, computer readable storage medium |
WO2020106314A1 (en) * | 2018-11-21 | 2020-05-28 | Google Llc | Consolidation of responses from queries to disparate data sources |
US11259183B2 (en) | 2015-05-01 | 2022-02-22 | Lookout, Inc. | Determining a security state designation for a computing device based on a source of software |
CN114374953A (en) * | 2022-01-06 | 2022-04-19 | 西安交通大学 | APP usage prediction method and system under multi-source feature conversion base station based on Hadoop and RAPIDS |
Citations (13)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20050261919A1 (en) * | 2004-05-19 | 2005-11-24 | Yahoo! Inc., A Delaware Corporation | Apparatus, system and method for use in providing user ratings according to prior transactions |
US20070078699A1 (en) * | 2005-09-30 | 2007-04-05 | Scott James K | Systems and methods for reputation management |
US20070118802A1 (en) * | 2005-11-08 | 2007-05-24 | Gather Inc. | Computer method and system for publishing content on a global computer network |
US20110238665A1 (en) * | 2010-03-26 | 2011-09-29 | Ebay Inc. | Category management and analysis |
US20110320307A1 (en) * | 2010-06-18 | 2011-12-29 | Google Inc. | Context-influenced application recommendations |
US20120130860A1 (en) * | 2010-11-19 | 2012-05-24 | Microsoft Corporation | Reputation scoring for online storefronts |
US20120166411A1 (en) * | 2010-12-27 | 2012-06-28 | Microsoft Corporation | Discovery of remotely executed applications |
US20120317266A1 (en) * | 2011-06-07 | 2012-12-13 | Research In Motion Limited | Application Ratings Based On Performance Metrics |
US20130097659A1 (en) * | 2011-10-17 | 2013-04-18 | Mcafee, Inc. | System and method for whitelisting applications in a mobile network environment |
US20130185246A1 (en) * | 2012-01-17 | 2013-07-18 | Microsoft Corporation | Application quality testing time predictions |
US20130191397A1 (en) * | 2012-01-23 | 2013-07-25 | Qualcomm Innovation Center, Inc. | Location based apps ranking for mobile wireless computing and communicating devices |
US20130318613A1 (en) * | 2012-05-22 | 2013-11-28 | Verizon Patent And Licensing Inc. | Mobile application security score calculation |
US9558348B1 (en) * | 2012-03-01 | 2017-01-31 | Mcafee, Inc. | Ranking software applications by combining reputation and code similarity |
-
2012
- 2012-07-02 US US13/540,249 patent/US20140006418A1/en not_active Abandoned
Patent Citations (13)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20050261919A1 (en) * | 2004-05-19 | 2005-11-24 | Yahoo! Inc., A Delaware Corporation | Apparatus, system and method for use in providing user ratings according to prior transactions |
US20070078699A1 (en) * | 2005-09-30 | 2007-04-05 | Scott James K | Systems and methods for reputation management |
US20070118802A1 (en) * | 2005-11-08 | 2007-05-24 | Gather Inc. | Computer method and system for publishing content on a global computer network |
US20110238665A1 (en) * | 2010-03-26 | 2011-09-29 | Ebay Inc. | Category management and analysis |
US20110320307A1 (en) * | 2010-06-18 | 2011-12-29 | Google Inc. | Context-influenced application recommendations |
US20120130860A1 (en) * | 2010-11-19 | 2012-05-24 | Microsoft Corporation | Reputation scoring for online storefronts |
US20120166411A1 (en) * | 2010-12-27 | 2012-06-28 | Microsoft Corporation | Discovery of remotely executed applications |
US20120317266A1 (en) * | 2011-06-07 | 2012-12-13 | Research In Motion Limited | Application Ratings Based On Performance Metrics |
US20130097659A1 (en) * | 2011-10-17 | 2013-04-18 | Mcafee, Inc. | System and method for whitelisting applications in a mobile network environment |
US20130185246A1 (en) * | 2012-01-17 | 2013-07-18 | Microsoft Corporation | Application quality testing time predictions |
US20130191397A1 (en) * | 2012-01-23 | 2013-07-25 | Qualcomm Innovation Center, Inc. | Location based apps ranking for mobile wireless computing and communicating devices |
US9558348B1 (en) * | 2012-03-01 | 2017-01-31 | Mcafee, Inc. | Ranking software applications by combining reputation and code similarity |
US20130318613A1 (en) * | 2012-05-22 | 2013-11-28 | Verizon Patent And Licensing Inc. | Mobile application security score calculation |
Cited By (29)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10419222B2 (en) | 2012-06-05 | 2019-09-17 | Lookout, Inc. | Monitoring for fraudulent or harmful behavior in applications being installed on user devices |
US10256979B2 (en) | 2012-06-05 | 2019-04-09 | Lookout, Inc. | Assessing application authenticity and performing an action in response to an evaluation result |
US9215074B2 (en) | 2012-06-05 | 2015-12-15 | Lookout, Inc. | Expressing intent to control behavior of application components |
US11336458B2 (en) | 2012-06-05 | 2022-05-17 | Lookout, Inc. | Evaluating authenticity of applications based on assessing user device context for increased security |
US9407443B2 (en) | 2012-06-05 | 2016-08-02 | Lookout, Inc. | Component analysis of software applications on computing devices |
US20150172060A1 (en) * | 2012-06-05 | 2015-06-18 | Lookout, Inc. | Monitoring installed applications on user devices |
US9589129B2 (en) | 2012-06-05 | 2017-03-07 | Lookout, Inc. | Determining source of side-loaded software |
US9940454B2 (en) | 2012-06-05 | 2018-04-10 | Lookout, Inc. | Determining source of side-loaded software using signature of authorship |
US9992025B2 (en) * | 2012-06-05 | 2018-06-05 | Lookout, Inc. | Monitoring installed applications on user devices |
US9208215B2 (en) | 2012-12-27 | 2015-12-08 | Lookout, Inc. | User classification based on data gathered from a computing device |
US20140189572A1 (en) * | 2012-12-31 | 2014-07-03 | Motorola Mobility Llc | Ranking and Display of Results from Applications and Services with Integrated Feedback |
US20160162269A1 (en) * | 2014-12-03 | 2016-06-09 | Oleg POGORELIK | Security evaluation and user interface for application installation |
US11259183B2 (en) | 2015-05-01 | 2022-02-22 | Lookout, Inc. | Determining a security state designation for a computing device based on a source of software |
US11144555B2 (en) * | 2015-05-06 | 2021-10-12 | App Annie Inc. | Keyword reporting for mobile applications |
US20160328402A1 (en) * | 2015-05-06 | 2016-11-10 | App Annie Inc. | Keyword Reporting for Mobile Applications |
US11200244B2 (en) | 2015-05-06 | 2021-12-14 | App Annie Inc. | Keyword reporting for mobile applications |
US9760767B1 (en) | 2016-09-27 | 2017-09-12 | International Business Machines Corporation | Rating applications based on emotional states |
US10218697B2 (en) | 2017-06-09 | 2019-02-26 | Lookout, Inc. | Use of device risk evaluation to manage access to services |
US11038876B2 (en) | 2017-06-09 | 2021-06-15 | Lookout, Inc. | Managing access to services based on fingerprint matching |
KR20200134311A (en) * | 2018-11-21 | 2020-12-01 | 구글 엘엘씨 | Integration of questions and answers from different data sources |
JP2021526673A (en) * | 2018-11-21 | 2021-10-07 | グーグル エルエルシーＧｏｏｇｌｅ ＬＬＣ | Consolidation of responses from queries to disparate data sources |
CN111465932A (en) * | 2018-11-21 | 2020-07-28 | 谷歌有限责任公司 | Integrating responses from queries to heterogeneous data sources |
WO2020106314A1 (en) * | 2018-11-21 | 2020-05-28 | Google Llc | Consolidation of responses from queries to disparate data sources |
KR102435433B1 (en) * | 2018-11-21 | 2022-08-24 | 구글 엘엘씨 | Integration of query responses from different data sources |
US11429665B2 (en) * | 2018-11-21 | 2022-08-30 | Google Llc | Consolidation of responses from queries to disparate data sources |
JP7135099B2 (en) | 2018-11-21 | 2022-09-12 | グーグル エルエルシー | Integrate responses from queries to disparate data sources |
US11748402B2 (en) | 2018-11-21 | 2023-09-05 | Google Llc | Consolidation of responses from queries to disparate data sources |
CN109918572A (en) * | 2019-03-19 | 2019-06-21 | 苏州迈荣祥信息科技有限公司 | Application software priority setting method and system, computer readable storage medium |
CN114374953A (en) * | 2022-01-06 | 2022-04-19 | 西安交通大学 | APP usage prediction method and system under multi-source feature conversion base station based on Hadoop and RAPIDS |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US20140006418A1 (en) | Method and apparatus for ranking apps in the wide-open internet | |
US11637797B2 (en) | Automated image processing and content curation | |
US9489457B2 (en) | Methods and apparatus for initiating an action | |
US8812474B2 (en) | Methods and apparatus for identifying and providing information sought by a user | |
TWI522819B (en) | Methods and apparatus for performing an internet search | |
US20220365939A1 (en) | Methods and systems for client side search ranking improvements | |
TWI540448B (en) | Methods and apparatus for selecting a search engine to which to provide a search query | |
US9195703B1 (en) | Providing context-relevant information to users | |
US20130144857A1 (en) | Methods and apparatus for searching the internet | |
US20120259636A1 (en) | Method and apparatus for processing spoken search queries | |
US20120060113A1 (en) | Methods and apparatus for displaying content | |
US8635201B2 (en) | Methods and apparatus for employing a user's location in providing information to the user | |
KR20150113994A (en) | Apparatus and method for representing a level of interest in an available item | |
CN107436893A (en) | A kind of webpage recommending method and device | |
US9773068B2 (en) | Method and apparatus for deriving and using trustful application metadata | |
US20130018864A1 (en) | Methods and apparatus for identifying and providing information of various types to a user | |
US20150347543A1 (en) | Federated search | |
US11061893B2 (en) | Multi-domain query completion | |
US11297027B1 (en) | Automated image processing and insight presentation | |
JP2010009315A (en) | Recommended store presentation system | |
US20200081930A1 (en) | Entity-based search system using user engagement | |
US20140006440A1 (en) | Method and apparatus for searching for software applications | |
US11392589B2 (en) | Multi-vertical entity-based search system | |
CN106462603B (en) | Disambiguation of queries implied by multiple entities | |
US8838596B2 (en) | Systems and methods to process enquires by receving and processing user defined scopes first |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: AT&T INTELLECTUAL PROPERTY I, L.P., GEORGIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:FORTE, ANDREA G.;COSKUN, BARIS;SHEN, QI;AND OTHERS;SIGNING DATES FROM 20120614 TO 20120711;REEL/FRAME:028601/0213 |
|
AS | Assignment |
Owner name: AT&T INTELLECTUAL PROPERTY I, L.P., GEORGIAFree format text: CORRECTIVE ASSIGNMENT TO CORRECT THE ASSSIGNOR ROGER PIQUERAS JOVER NAME PREVIOUSLY RECORDED ON REEL 028601 FRAME 0213. ASSIGNOR(S) HEREBY ASSIGNMENT;ASSIGNORS:FORTE, ANDREA G.;COSKUN, BARIS;SHEN, QI;AND OTHERS;SIGNING DATES FROM 20120614 TO 20120711;REEL/FRAME:041647/0971 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:AT&T INTELLECTUAL PROPERTY I, L.P.;REEL/FRAME:042513/0761Effective date: 20170328 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044129/0001Effective date: 20170929 |
|
STCB | Information on status: application discontinuation |
Free format text: ABANDONED -- FAILURE TO RESPOND TO AN OFFICE ACTION |