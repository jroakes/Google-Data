US20060230005A1 - Empirical validation of suggested alternative queries - Google Patents
Empirical validation of suggested alternative queries Download PDFInfo
- Publication number
- US20060230005A1 US20060230005A1 US11/095,920 US9592005A US2006230005A1 US 20060230005 A1 US20060230005 A1 US 20060230005A1 US 9592005 A US9592005 A US 9592005A US 2006230005 A1 US2006230005 A1 US 2006230005A1
- Authority
- US
- United States
- Prior art keywords
- revised queries
- queries
- query
- revised
- predictive model
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Abandoned
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/953—Querying, e.g. by the use of web search engines
- G06F16/9532—Query formulation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/951—Indexing; Web crawling techniques
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/33—Querying
- G06F16/3331—Query processing
- G06F16/3332—Query translation
- G06F16/3338—Query expansion
Definitions
- This application is related to:
- the present invention relates to information retrieval systems generally, and more particularly to system architectures for revising user queries.
- query refinement is used to automatically generate more precise (i.e., narrower) queries from a more general query.
- Query refinement is primarily useful when users enter over-broad queries whose top results include a superset of documents related to the user's information needs. For example, a user wanting information on the Mitsubishi Galant automobile might enter the query “Mitsubishi,” which is overly broad, as the results will cover the many different Mitsubishi companies, not merely the automobile company. Thus, refining the query would be desirable (though difficult here because of the lack of additional context to determine the specific information need of the user).
- query revision strategy uses synonym lists or thesauruses to expand the query to capture a user's potential information need.
- query expansion is not always the appropriate way to revise the query, and the quality of the results is very dependent on the context of the query terms.
- An information retrieval system includes a query revision architecture that provides a number of different query revisers, each of which implements its own query revision strategy.
- Each query reviser evaluates a user query to determine one or more potential revised queries of the user query.
- a revision server interacts with the query revisers to obtain the potential revised queries.
- the revision server also interacts with a search engine in the information retrieval system to obtain for each potential revised query a set of search results.
- the revision server selects one or more of the revised queries for presentation to the user, along with a subset of search results for each of the selected revised queries. The user is thus able to observe the quality of the search results for the revised queries, and then select one of the revised queries to obtain a full set of search results for the revised query.
- a system and method provide the ability to improve the likelihood of success of suggested revised queries derived from various revision strategies. This is accomplished by tracking user queries, query revision links, results associated with revised queries, and various features of the original query and revised queries. This data is then analyzed using a predictive model to generate a set of rules that can be used to estimate the likelihood of a revised query being a successful revision for a given query.
- FIG. 1 a is an overall system diagram of an embodiment of an information retrieval system providing for query revision.
- FIG. 1 b is an overall system diagram of an alternative information retrieval system.
- FIG. 2 is an illustration of a sample results page to an original user query.
- FIG. 3 is an illustration of a sample revised queries page.
- FIG. 1 a illustrates a system 100 in accordance with one embodiment of the present invention.
- System 100 comprises a front-end server 102 , a search engine 104 and associated content server 106 , a revision server 107 , and a number of query revisers 108 .
- a user accesses the system 100 via a conventional client 118 over a network (such as the Internet, not shown) operating on any type of client computing device, for example, executing a browser application or other application adapted to communicate over Internet related protocols (e.g., TCP/IP and HTTP).
- TCP/IP and HTTP Internet related protocols
- the system 100 can support a large number of concurrent sessions with many clients.
- the system 100 operates on high performance server class computers, and the client device 118 can be any type of computing device. The details of the hardware aspects of server and client computers is well known to those of skill in the art and is not further described here.
- the front-end server 102 is responsible for receiving a search query submitted by the client 118 .
- the front-end server 102 provides the query to the search-engine 104 , which evaluates the query to retrieve a set of search results in accordance with the search query, and returns the results to the front-end server 102 .
- the search engine 104 communicates with one or more of the content servers 106 to select a plurality of documents that are relevant to user's search query.
- a content server 106 stores a large number of documents indexed (and/or retrieved) from different websites. Alternately, or in addition, the content server 106 stores an index of documents stored on various websites.
- the search engine 104 assigns a score to each document based on the document's page rank (and/or other query-independent measures of the document's importance), as well as one or more query-dependent signals of the document's importance (e.g., the location and frequency of the search terms in the document).
- the front-end server 102 also provides the query to the revision server 107 .
- the revision server 107 interfaces with a number of different query revisers 108 , each of which implements a different query revision strategy or set of strategies.
- the query revisers 108 include: a broadening reviser 108 . 1 , a syntactical reviser 108 . 2 , a refinement reviser 108 . 3 , and a session-based reviser 108 . 4 .
- the revision server 107 provides the query to each reviser 108 , and obtains in response from each reviser 108 one or more potential revised queries (called ‘potential’ here, since they have not been adopted at this point by the revision server 107 ).
- the system architecture is specifically designed to allow any number of different query revisers 108 to be used, for poor performing query revisers 108 to be removed, and for new query revisers 108 (indicated by generic reviser 108 . n ) to be added as desired in the future.
- This gives the system 100 particular flexibility, and also enables it to be customized and adapted for specific subject matter domains (e.g., revisers for use in domains like medicine, law, etc.), enterprises (revisers specific to particular business fields or corporate domains, for internal information retrieval systems), or for different languages (e.g., revisers for specific languages and dialects).
- each revised query is associated with a confidence measure representing the probability that the revision is a good revision, i.e., that the revised query will produce results more relevant to the user's information needs than the original query.
- each potential revised query can be represented by the tuple (Ri, Ci), where R is a potential revised query, and C is the confidence measure associated with the revised query.
- these confidence measures are manually estimated beforehand for each revision strategy of each reviser 108 .
- the measures can be derived from analysis of the results of sample queries and revised queries under test. For example, the refinement reviser 108 .
- the broadening reviser 108 . 1 can assign a high confidence measure to revised queries that drop one or more terms from, or add synonyms to, a long query.
- one or more of the revisers 108 may dynamically generate a confidence measure (e.g., at run time) for one or more of its potential revised queries. Such an embodiment is further described below in conjunction with FIG. 1 b .
- the assignment of confidence measures may be performed by other components (e.g., the revision server 107 ), and may take into account both query-dependent and query-independent data.
- the revision server 107 can select one or more (or all) of the potential revised queries, and provide these to the search engine 104 .
- the search engine 104 processes a revised query in the same manner as normal queries, and provides the results of each submitted revised query to the revision server 107 .
- the revision server 107 evaluates the results of each revised query, including comparing the results for the revised query with the results for the original query.
- the revision server 107 can then select one or more of the revised queries as being the best revised queries (or at least revised queries that are well-suited for the original query), as described below.
- the revision server 107 receives all of the potential revised queries R, and sorts them by their associated confidence measures C, from highest to lowest confidence.
- the revision server 107 iterates through the sorted list of potential revised queries, and passes each potential revised query to the search engine 104 to obtain a set of search results.
- the revision server 107 may first select a subset of the potential revised queries, e.g., those with a confidence measure above a threshold level).
- the top search results may already have been fetched (e.g., by a reviser 108 or the revision server 107 ) while executing a revision strategy or in estimating confidence measures, in which case the revision server 107 can use the search results so obtained.
- the revision server 107 decides whether to select the potential revised query or discard it. The selection can depend on an evaluation of the top N search results for the revised query, both independently and with respect to the search results of the original query. Generally, a revised query should produce search results that are more likely to accurately reflect the user's information needs than the original query. Typically the top ten results are evaluated, though more or less results can be processed, as desired.
- a potential revised query is selected if the following conditions holds:
- the revised query produces at least a minimum number of search results. For example, setting this parameter to 1 will discard all (and only) revisions with no search results.
- the general range of an acceptable minimum number of results is 1 to 100.
- the revised query produces a minimum number of “new” results in a revision's top results.
- a result is “new” when it does not also occur in the top results of the original query or a previously selected revised query. For example, setting this parameter to 2 would require each selected revision to have at least two top results that do not occur in the top results of any previously selected revised query or in the top results of the original query. This constraint ensures that there is a diversity of results in the selected revisions, maximizing the chance that at least one of the revisions will prove to be useful.
- the top three results 304 for each revised query are distinct from the other result sets. This gives the user a broad survey of search results that are highly relevant to the revised queries.
- a maximum number of revised queries have not yet been selected. In other words, when a maximum number of revised queries have already been selected, then all remaining revised queries are discarded. In one embodiment, the maximum number of revised queries is set at 4. In another embodiment, the maximum number of revised queries is set between 2 and 10.
- the results of the foregoing selection parameters are a set of selected revised queries that will be included on the revised queries page 300 .
- the revision server 107 constructs a link to this page, and provides this link to the front-end server 102 , as previously discussed.
- the revision server 107 determines the order and layout of the revised queries on the revised queries page 300 .
- the revised queries are preferably listed in order of their confidence measures (from highest to lowest).
- the front-end server 102 includes the provided links in a search results page, which is then transmitted to the client 118 .
- the user can then review the search results to the original query, or select the link to the revised queries page, and thereby view the selected revised queries and their associated results.
- FIG. 2 illustrates a sample results page 200 provided to a client 118 .
- the search results 200 page includes the original query 202 of [sheets] along with the results 204 to this query.
- a link 206 to a set of revised queries is included at the bottom of the page 200 .
- the user can then click on the link 206 , and access the page of revised queries.
- An example page 300 is shown in FIG. 3 .
- the top three revised queries are presented, as shown by revised query links 302 . 1 , 302 . 2 , and 302 . 3 for the revised queries of [linens], [bedding], and [bed sheets], respectively.
- Below each revised query link 302 are the top three search results 304 for that query.
- the user can see results associated with query revisions, click on each revised query link 302 , and access the entire set of search results for the selected revised query.
- this approach will also be preferable to automatically using the revised queries to obtain search results and automatically presenting them to the user (e.g., without user selection or interaction).
- this approach has the added benefit of indirectly teaching the user how to create better queries, by showing the best potential revisions.
- the revision server 107 can force the query revisions to be shown on the original result page 200 , for example, in a separate window or within the original result page 200 .
- the method of displaying additional information (e.g., search results 304 ), about query revisions to help users better understand the revisions can also be used on the main results page 200 . This is particularly useful when there is a single very high quality revised query (or a small number of very high quality revisions) such as is the case with revisions that correct spellings. Spell corrected revised queries can be shown on the results page 200 , along with additional information such as title, URL, and snippet of the top results to help the user in determining whether or not the spell correction suggestion is a good one.
- revision server 107 uses the confidence measures to determine whether to show query revisions at all, and if so, how prominently to place the revisions or the link thereto. This embodiment is discussed below.
- this reviser 108 . 1 can broaden the query by adding synonyms and related terms as disjuncts. Queries are often overly specific because the user happens to choose a particular word to describe a general concept. If the documents of interest do not contain the word, the user's information need remains unfulfilled. Query revisions that add synonyms as disjuncts can broaden the query and bring the desired documents into the result set. Similarly, it is sometimes helpful to add a related word, rather than an actual synonym, as a disjunct. Any suitable method of query broadening, such as related terms, synonyms, thesauruses or dictionaries, or the like may be used here. One method for query broadening is disclosed in U.S. application Ser. No. 11/_______, filed on Mar. 30, 2005, entitled “Determining Query Term Synonyms Within Query Context,” which is incorporated by reference.
- the refinement reviser 108 . 3 uses a clustering algorithm to form dusters of the search result documents based on term vectors formed from the terms of matched stored queries and corresponding weights.
- the term vectors are unit length normalized multi-dimensional vectors, with each dimension corresponding to a term, which can be an individual word or word combination.
- the clusters are ranked based on the relevance scores of the original search documents corresponding to the matched stored documents and the number of stored documents occurring in each duster. The highest ranking clusters are selected as potential refinement dusters.
- the dusters can be formed using various clustering algorithms, such as a hierarchical agglomerative clustering algorithm, as described in E. Rasmussen, “Clustering Algorithms,” in “Information Retrieval,” (W. Frakes & R. Baeza-Yates eds. 92), the disclosure of which is incorporated by reference.
- refinement reviser 108 . 3 provides the selected revised refinement queries to the revision server 107 .
- the details of one suitable refinement reviser are further described in U.S. patent application Ser. No. 10/668,721, filed on Sep. 22, 2003, entitled “System and Method for Providing Search Query Refinements,” which is incorporated by reference herein.
- an increase in quality of the second query in the query pair over the first query in the pair is calculated using two additional tables generated by the session-based reviser 108 . 4 from the user click data.
- a table of quality scores is generated for each of the queries of the pair. From the table, the improvement, if any, in the quality of the second query in the pair over the first query in the pair, is calculated.
- quality scores are determined by estimating user satisfaction from click behavior data.
- One such method for determining quality scores is the use of interaction profiles, as described in U.S. application Ser. No. 10/878,926, “Systems and Methods for Deriving and Using an Interaction Profile,” filed on Jun. 28, 2004, which is incorporated by reference.
- the quality score calculation is based on user click data stored, for example, in log files 110 .
- Quality scores are based on the estimated duration of a first click on a search result.
- the duration of a particular click is estimated from the times at which a first and subsequent click occurred, which may be stored with other user session query data, for example in the log files 110 of FIG. 1 b .
- Scoring includes assigning search results with no click a score of zero, and proceeds along an S-curve applied to the duration between the first click and a subsequent click, with longer clicks approaching a quality score of 1.
- 20 seconds corresponds to 0.1
- 40 seconds corresponds to 0.5
- 60 seconds corresponds to 0.9.
- Clicks on unrelated content, for example banner ads are excluded from the data.
- all result clicks for a query, rather than just the first are collected.
- the session-based reviser 108 . 4 can then calculate an expected utility for the second query as a candidate revised query over a first query using the frequency occurrence and quality score data from above.
- the expected utility is the product of the frequency of occurrence of a query pair and the improvement of quality of the second query over the first query in the pair. In this example, an improvement in quality occurs if the quality score for a second query is higher that the quality score for the first query. If the expected utility of the second query exceeds a threshold, the second query is marked as a potential revised query.
- the threshold is 0.02, for example, corresponding to a 10% frequency and a 0.2 increase in quality, or a 20% frequency and a 0.1 increase in quality. Other variations of an expected utility calculation can be used as well.
- each revised query can be associated with a confidence measure representing the probability that the revision is a good revision.
- the expected utility of a revised query can be used as the confidence measure for that revised query.
- a first user query is [sheets].
- Stored data indicates that one commonly user-entered (second) query following [sheets] is [linens] and another commonly entered second query is [silk sheets].
- the frequency of the query pair [sheets, linens] is 30%, and the frequency of the query pair [sheets, silk sheets] is 1%, as a percentage of occurrences of the first query [sheets]. For example, if the query [sheets] occurred 100 times in the table, [sheets, linens] occurred 30 times and [sheets, silk sheets] occurred once. Assuming a 1% threshold for second queries as candidate revisions, both of these queries would be retained.
- the session-based reviser 108 . 4 calculates the expected utility of each revision as the product of the frequency score and the improvement in quality. For [sheets, linens] the product of the frequency (30%) and the increase in quality ( 0 . 6 ) yields an expected utility of 0.18. For [sheets, silk sheets] the product of the frequency (1%) and the increase in quality (0.7) yields an expected utility of 0.007.
- the second query [linens] has a higher expected utility then the query [silk sheets] for a user who enters a first query [sheets], and hence [linens] is a better query revision suggestion.
- FIG. 1 b there is shown another embodiment of an information retrieval system in accordance with the present invention.
- a query reviser 108 may provide a confidence measure with one or more of the revised queries that it provides to the revision server 107 .
- the revision server 107 uses the confidence measures to determine which of the possible revised queries to select for inclusion on the revised queries page 300 .
- confidence measures can be derived at runtime, based at least in part on historical user activity in selecting revised queries with respect to a given original query.
- the front-end server 102 provides the session tracker 114 with user click-through behavior, along with the original query and revised query information.
- the session tracker 114 maintains log files 110 that store each user query in association with which query revision links 302 were accessed by the user, the results associated with each revised query, along with various features of the original query and revised queries for modeling the quality of the revised queries.
- the stored information can include, for example:
- a long click can be deemed to occur when the user stays on the clicked through page for some minimum period of time, for example a minimum of 60 seconds.
- the reviser confidence estimator 112 can train the predictive model to predict the likelihood of a long click given the various features of the revised query and the original query. Revised queries having high predicted likelihoods of a long click are considered to be better (i.e., more successful) revisions for their associated original queries.
- the confidence estimator 112 selects features associated with the revised queries, collects click data from the log files, formulates rules using the features and click data, and adds the rules to the predictive model.
- the confidence estimator 112 can train the predictive model by formulating additional rules using the click data and selectively adding the additional rules to the model.
- the revision server 107 provides the reviser confidence estimator 112 with the original query, and each of the revised queries received from the various query revisers 108 .
- the reviser confidence estimator 112 applies the original query and revised queries to the predictive model to obtain the prediction measures, which serve as the previously mentioned confidence measures.
- each query reviser 108 can directly call the reviser confidence estimator 112 to obtain the prediction measures, and then pass these values back to the revision server 107 .
- the depicted embodiment shows the reviser confidence estimator 112 as a separate module, the revision server 107 may provide the confidence estimator functionality instead. In either case, the revision server 107 uses the confidence measures, as described above, to select and order which revised queries will be shown to the user.
- revision server 107 uses the confidence measures to determine whether to show query revisions at all, and if so, how prominently to place the revisions or the link thereto. To do so, the revision server 107 may use either the initial confidence measures discussed previously or the dynamically generated confidence measures discussed above. For example, if the best confidence measure falls below a threshold value, this can indicate that none of the potential candidate revisions is very good, in which case no modification is made to the original result page 200 .
- Certain aspects of the present invention include process steps and instructions described herein in the form of an algorithm. It should be noted that the process steps and instructions of the present invention could be embodied in software, firmware, or hardware, and when embodied in software, could be downloaded to reside on and be operated from different platforms used by real time network operating systems.
- the present invention also relates to an apparatus for performing the operations herein.
- This apparatus may be specially constructed for the required purposes, or it may comprise a general-purpose computer selectively activated or reconfigured by a computer program stored on a computer readable medium that can be accessed by the computer.
- a computer program may be stored in a computer readable storage medium, such as, but not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs; magnetic or optical cards, or any type of media suitable for storing electronic instructions, and each coupled to a computer system bus.
Abstract
An information retrieval system includes a query revision architecture that integrates multiple different query revisers, each implementing one or more query revision strategies. A revision server receives a user's query, and interfaces with the various query revisers, each of which generates one or more potential revised queries. The revision server evaluates the potential revised queries, and selects one or more of them to provide to the user. A confidence estimator and method provide the ability to improve the likelihood of success of suggested revised queries derived from various revision strategies. This is accomplished by tracking user queries, query revision links, results associated with revised queries, and various features of the original query and revised queries. This data is then analyzed using a predictive model to generate a set of rules that can be used to estimate the likelihood of a revised query being a successful revision for a given query.
Description
- This application is related to:
-
- U.S. patent application Ser. No. 10/668,721, filed on Sep. 22, 2003, entitled “System and Method for Providing Search Query Refinements;”
- U.S. application Ser. No. 10/676,571, filed on Sep. 30, 2003, entitled “Method and Apparatus for Characterizing Documents Based on Clusters of Related Words;”
- U.S. application Ser. No. 10/734,584, filed Dec. 15, 2003, entitled “Large Scale Machine Learning Systems and Methods;”
- U.S. application Ser. No. 10/878,926, “Systems and Methods for Deriving and Using an Interaction Profile,” filed on Jun. 28, 2004;”
- U.S. application Ser. No. 10/900,021, filed Jul. 26, 2004, entitled “Phrase Identification in an Information Retrieval System;”
- U.S. application Ser. No. 11/______, filed Mar. 28, 2005, entitled “Determining Query Terms of Little Significance;”
- U.S. Application Ser. No. 11/______, filed on Mar. 30, 2005, entitled “Determining Query Term Synonyms Within Query Context;” and
- U.S. Pat. No. 6,285,999;
- each of which is incorporated herein by reference.
- The present invention relates to information retrieval systems generally, and more particularly to system architectures for revising user queries.
- Information retrieval systems, as exemplified by Internet search engines, are generally capable of quickly providing documents that are generally relevant to a user's query. Search engines may use a variety of statistical measures of term and document frequency, along with linkages between documents and between terms to determine the relevance of document to a query. A key technical assumption underlying most search engine designs is that a user query accurately represents the user's desired information goal.
- In fact, users typically have difficulty formulating good queries. Often, a single query does not provide desired results, and users frequently enter a number of different queries about the same topic. These multiple queries will typically include variations in the breadth or specificity of the query terms, guessed names of entities, variations in the order of the words, the number of words, and so forth. Because different users have widely varying abilities to successfully revise their queries, various automated methods of query revision have been proposed.
- Most commonly, query refinement is used to automatically generate more precise (i.e., narrower) queries from a more general query. Query refinement is primarily useful when users enter over-broad queries whose top results include a superset of documents related to the user's information needs. For example, a user wanting information on the Mitsubishi Galant automobile might enter the query “Mitsubishi,” which is overly broad, as the results will cover the many different Mitsubishi companies, not merely the automobile company. Thus, refining the query would be desirable (though difficult here because of the lack of additional context to determine the specific information need of the user).
- However, query refinement is not useful when users enter overly specific queries, where the right revision is to broaden the query, or when the top results are unrelated to the user's information needs. For example, the query “Mitsubishi Galant information” might lead to poor results (in this case, too few results about the Mistubishi Galant automobile) because of the term “information.” In this case, the right revision is to broaden the query to “Mitsubishi Galant.” Thus, while query refinement works in some situations, there are a large number of situations where a user's information needs are best met by using other query revision techniques.
- Another query revision strategy uses synonym lists or thesauruses to expand the query to capture a user's potential information need. As with query refinement, however, query expansion is not always the appropriate way to revise the query, and the quality of the results is very dependent on the context of the query terms.
- Because no one query revision technique can provide the desired results in every instance, it is desirable to have a methodology that provides a number of different query revision methods (or strategies).
- An information retrieval system includes a query revision architecture that provides a number of different query revisers, each of which implements its own query revision strategy. Each query reviser evaluates a user query to determine one or more potential revised queries of the user query. A revision server interacts with the query revisers to obtain the potential revised queries. The revision server also interacts with a search engine in the information retrieval system to obtain for each potential revised query a set of search results. The revision server selects one or more of the revised queries for presentation to the user, along with a subset of search results for each of the selected revised queries. The user is thus able to observe the quality of the search results for the revised queries, and then select one of the revised queries to obtain a full set of search results for the revised query.
- A system and method provide the ability to improve the likelihood of success of suggested revised queries derived from various revision strategies. This is accomplished by tracking user queries, query revision links, results associated with revised queries, and various features of the original query and revised queries. This data is then analyzed using a predictive model to generate a set of rules that can be used to estimate the likelihood of a revised query being a successful revision for a given query.
- In one embodiment, a revision confidence estimator and method operate on the assumption that a long click indicates that the user is satisfied with the revision as being an accurate representation of the user's original information need. From the length of the clicks on the revised query links, the predictive model is trained to predict the likelihood of a long click given the various features.
- The present invention is next described with respect to various figures, diagrams, and technical information. The figures depict various embodiments of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following discussion that alternative embodiments of the illustrated and described structures, methods, and functions may be employed without departing from the principles of the invention.
-
FIG. 1 a is an overall system diagram of an embodiment of an information retrieval system providing for query revision. -
FIG. 1 b is an overall system diagram of an alternative information retrieval system. -
FIG. 2 is an illustration of a sample results page to an original user query. -
FIG. 3 is an illustration of a sample revised queries page. - System Overview
-
FIG. 1 a illustrates asystem 100 in accordance with one embodiment of the present invention.System 100 comprises a front-end server 102, asearch engine 104 and associatedcontent server 106, arevision server 107, and a number of query revisers 108. During operation, a user accesses thesystem 100 via aconventional client 118 over a network (such as the Internet, not shown) operating on any type of client computing device, for example, executing a browser application or other application adapted to communicate over Internet related protocols (e.g., TCP/IP and HTTP). While only asingle client 118 is shown, thesystem 100 can support a large number of concurrent sessions with many clients. In one implementation, thesystem 100 operates on high performance server class computers, and theclient device 118 can be any type of computing device. The details of the hardware aspects of server and client computers is well known to those of skill in the art and is not further described here. - The front-
end server 102 is responsible for receiving a search query submitted by theclient 118. The front-end server 102 provides the query to the search-engine 104, which evaluates the query to retrieve a set of search results in accordance with the search query, and returns the results to the front-end server 102. Thesearch engine 104 communicates with one or more of thecontent servers 106 to select a plurality of documents that are relevant to user's search query. Acontent server 106 stores a large number of documents indexed (and/or retrieved) from different websites. Alternately, or in addition, thecontent server 106 stores an index of documents stored on various websites. “Documents” are understood here to be any form of indexable content, including textual documents in any text or graphics format, images, video, audio, multimedia, presentations, web pages (which can include embedded hyperlinks and other metadata, and/or programs, e.g., in Javascript), and so forth. In one embodiment, each indexed document is assigned a page rank according to the document's link structure. The page rank serves as a query independent measure of the document's importance. An exemplary form of page rank is described in U.S. Pat. No. 6,285,999, which is incorporated herein by reference. Thesearch engine 104 assigns a score to each document based on the document's page rank (and/or other query-independent measures of the document's importance), as well as one or more query-dependent signals of the document's importance (e.g., the location and frequency of the search terms in the document). - The front-
end server 102 also provides the query to therevision server 107. Therevision server 107 interfaces with a number of different query revisers 108, each of which implements a different query revision strategy or set of strategies. In one embodiment, the query revisers 108 include: a broadening reviser 108.1, a syntactical reviser 108.2, a refinement reviser 108.3, and a session-based reviser 108.4. Therevision server 107 provides the query to each reviser 108, and obtains in response from each reviser 108 one or more potential revised queries (called ‘potential’ here, since they have not been adopted at this point by the revision server 107). The system architecture is specifically designed to allow any number of different query revisers 108 to be used, for poor performing query revisers 108 to be removed, and for new query revisers 108 (indicated by generic reviser 108.n) to be added as desired in the future. This gives thesystem 100 particular flexibility, and also enables it to be customized and adapted for specific subject matter domains (e.g., revisers for use in domains like medicine, law, etc.), enterprises (revisers specific to particular business fields or corporate domains, for internal information retrieval systems), or for different languages (e.g., revisers for specific languages and dialects). - Preferably, each revised query is associated with a confidence measure representing the probability that the revision is a good revision, i.e., that the revised query will produce results more relevant to the user's information needs than the original query. Thus, each potential revised query can be represented by the tuple (Ri, Ci), where R is a potential revised query, and C is the confidence measure associated with the revised query. In one embodiment, these confidence measures are manually estimated beforehand for each revision strategy of each reviser 108. The measures can be derived from analysis of the results of sample queries and revised queries under test. For example, the refinement reviser 108.3 can assign a high confidence measure to revised queries from an original short query (e.g., three or less terms), and a low confidence measure to revised queries from an original long query (four or more terms). These assignments are based on empirical evaluations that show that adding terms to short queries tends to significantly improve the relevance of the queries with respect to the underlying information need (i.e., short queries are likely to be over broad, and refinements of such queries are likely to focus on narrower and more relevant result sets). Conversely, the broadening reviser 108.1 can assign a high confidence measure to revised queries that drop one or more terms from, or add synonyms to, a long query. In other embodiments, one or more of the revisers 108 may dynamically generate a confidence measure (e.g., at run time) for one or more of its potential revised queries. Such an embodiment is further described below in conjunction with
FIG. 1 b. The assignment of confidence measures may be performed by other components (e.g., the revision server 107), and may take into account both query-dependent and query-independent data. - The
revision server 107 can select one or more (or all) of the potential revised queries, and provide these to thesearch engine 104. Thesearch engine 104 processes a revised query in the same manner as normal queries, and provides the results of each submitted revised query to therevision server 107. Therevision server 107 evaluates the results of each revised query, including comparing the results for the revised query with the results for the original query. Therevision server 107 can then select one or more of the revised queries as being the best revised queries (or at least revised queries that are well-suited for the original query), as described below. - The
revision server 107 receives all of the potential revised queries R, and sorts them by their associated confidence measures C, from highest to lowest confidence. Therevision server 107 iterates through the sorted list of potential revised queries, and passes each potential revised query to thesearch engine 104 to obtain a set of search results. (Alternatively, therevision server 107 may first select a subset of the potential revised queries, e.g., those with a confidence measure above a threshold level). In some cases the top search results may already have been fetched (e.g., by a reviser 108 or the revision server 107) while executing a revision strategy or in estimating confidence measures, in which case therevision server 107 can use the search results so obtained. - For each potential revised query, the
revision server 107 decides whether to select the potential revised query or discard it. The selection can depend on an evaluation of the top N search results for the revised query, both independently and with respect to the search results of the original query. Generally, a revised query should produce search results that are more likely to accurately reflect the user's information needs than the original query. Typically the top ten results are evaluated, though more or less results can be processed, as desired. - In one embodiment, a potential revised query is selected if the following conditions holds:
- i) The revised query produces at least a minimum number of search results. For example, setting this parameter to 1 will discard all (and only) revisions with no search results. The general range of an acceptable minimum number of results is 1 to 100.
- ii) The revised query produces a minimum number of “new” results in a revision's top results. A result is “new” when it does not also occur in the top results of the original query or a previously selected revised query. For example, setting this parameter to 2 would require each selected revision to have at least two top results that do not occur in the top results of any previously selected revised query or in the top results of the original query. This constraint ensures that there is a diversity of results in the selected revisions, maximizing the chance that at least one of the revisions will prove to be useful. For example, as can be seen in
FIG. 3 , the top threeresults 304 for each revised query are distinct from the other result sets. This gives the user a broad survey of search results that are highly relevant to the revised queries. - iii) A maximum number of revised queries have not yet been selected. In other words, when a maximum number of revised queries have already been selected, then all remaining revised queries are discarded. In one embodiment, the maximum number of revised queries is set at 4. In another embodiment, the maximum number of revised queries is set between 2 and 10.
- The results of the foregoing selection parameters are a set of selected revised queries that will be included on the revised
queries page 300. Therevision server 107 constructs a link to this page, and provides this link to the front-end server 102, as previously discussed. Therevision server 107 determines the order and layout of the revised queries on the revisedqueries page 300. The revised queries are preferably listed in order of their confidence measures (from highest to lowest). - The front-
end server 102 includes the provided links in a search results page, which is then transmitted to theclient 118. The user can then review the search results to the original query, or select the link to the revised queries page, and thereby view the selected revised queries and their associated results. - Presentation of Revised Queries
-
FIG. 2 illustrates a sample resultspage 200 provided to aclient 118. In this simple implementation, the search results 200 page includes theoriginal query 202 of [sheets] along with theresults 204 to this query. Alink 206 to a set of revised queries is included at the bottom of thepage 200. The user can then click on thelink 206, and access the page of revised queries. Anexample page 300 is shown inFIG. 3 . Here, the top three revised queries are presented, as shown by revised query links 302.1, 302.2, and 302.3 for the revised queries of [linens], [bedding], and [bed sheets], respectively. Below each revised query link 302 are the top threesearch results 304 for that query. - There are various benefits to providing the revised queries on a
separate page 300 from theoriginal results page 200. First, screen area is a limited resource, and thus listing the revised queries by themselves (without a preview of their associated results), while possible, is less desirable because the user does not see revised queries in the context of their results. By placing the revised queries on aseparate page 300, the user can see the best revised queries and their associated top results, enabling the user to choose which revised query appears to best meet their information needs, before selecting the revised query itself. While it would be possible to include both the results of the original query and the revised queries on a single (albeit long) page, this approach would either require to the user to scroll down the page to review all of the revised queries, or would clutter the initially visible portion of the page. Instead, in the preferred embodiment illustrated inFIGS. 2 and 3 , the user can see results associated with query revisions, click on each revised query link 302, and access the entire set of search results for the selected revised query. In many cases this approach will also be preferable to automatically using the revised queries to obtain search results and automatically presenting them to the user (e.g., without user selection or interaction). In addition, this approach has the added benefit of indirectly teaching the user how to create better queries, by showing the best potential revisions. In another embodiment, therevision server 107 can force the query revisions to be shown on theoriginal result page 200, for example, in a separate window or within theoriginal result page 200. - The method of displaying additional information (e.g., search results 304), about query revisions to help users better understand the revisions can also be used on the
main results page 200. This is particularly useful when there is a single very high quality revised query (or a small number of very high quality revisions) such as is the case with revisions that correct spellings. Spell corrected revised queries can be shown on theresults page 200, along with additional information such as title, URL, and snippet of the top results to help the user in determining whether or not the spell correction suggestion is a good one. - In another embodiment,
revision server 107 uses the confidence measures to determine whether to show query revisions at all, and if so, how prominently to place the revisions or the link thereto. This embodiment is discussed below. - Query Revisers
- Referring again to
FIG. 1 , various query revisers 108 are now described. The broadening reviser 108.1 generates one or more revised queries that effectively broaden the scope of the original query. These revisions are particularly useful where the original query is overly narrow. There are several different strategies that can be used by the broadening reviser 108.1. - First, this reviser 108.1 can broaden the query by adding synonyms and related terms as disjuncts. Queries are often overly specific because the user happens to choose a particular word to describe a general concept. If the documents of interest do not contain the word, the user's information need remains unfulfilled. Query revisions that add synonyms as disjuncts can broaden the query and bring the desired documents into the result set. Similarly, it is sometimes helpful to add a related word, rather than an actual synonym, as a disjunct. Any suitable method of query broadening, such as related terms, synonyms, thesauruses or dictionaries, or the like may be used here. One method for query broadening is disclosed in U.S. application Ser. No. 11/______, filed on Mar. 30, 2005, entitled “Determining Query Term Synonyms Within Query Context,” which is incorporated by reference.
- Second, this reviser 108.1 can broaden the query by dropping one or more query terms. As an earlier example showed, sometimes dropping a query term (like “information” in the example query “Mitsubishi Gallant information”) can result in a good query revision. In this approach, the broadening reviser 108.1 determines which terms of the query are unimportant in that their presence does not significantly improve the search results as compared to their absence. Techniques for identifying unimportant terms for purposes of search are described in U.S. application Ser. No. 11/______, filed Mar. 28, 2005, entitled “Determining Query Terms of Little Significance,” which is incorporated by reference. The results of such techniques can be used to revise queries by dropping unimportant terms.
- The syntactical reviser 108.2 can revise queries by making various types of syntactic changes to the original query. These include the following revision strategies:
-
- Remove any quotes in the original query, if present. A query in quotes is treated as a single literal by the
search engine 104, which returns only documents having the entire query string. This revision increases the number of search results by allowing thesearch engine 104 to return documents based on the overall relevancy the document to any of the query terms. - Add quotes around the whole query. In some instances, the query is more properly treated as an entire phrase.
- Add quotes around query n-grams (some number of successive terms within the query) that are likely to be actual phrases. The identification of an n-gram within the query can be made using a variety of sources:
- Remove any quotes in the original query, if present. A query in quotes is treated as a single literal by the
- A) Hand-built dictionary of common phrases.
- B) List of phrases built from frequency data. Here, phrases are identified based on sequences of terms that occur together with statistically significant frequency. For instance, a good bi-gram [t1 t2] has the property that if both [t1] and [t2] appear in a document together, with higher than random likelihood, they appear as the bi-gram [t1 t2]. One method for constructing lists of phrases is disclosed in U.S. application Ser. No. 10/900,021, filed Jul. 26, 2004, entitled “Phrase Identification in an Information Retrieval System,” which is incorporated by reference herein.
- C) Lists of common first names and last names (e.g., obtained from census data or any other source). The syntactical reviser 108.2 determines for each successive pair of query terms [t1 t2] whether [t1] is included in the list of common first names, and [t2] is included in the list of common last names. If so, then the subportion of the query [t1 t2] is placed in quotation marks, to form a potential revised query.
- A common problem is the use of stopwords in queries. Ranking algorithms commonly ignore frequent terms such as “the,” “a,” “an,” “to,” etc. In some cases, these are actually important terms in the query (consider queries like “to be or not to be”). Accordingly, the syntactical reviser 108.2 also creates a number of revised queries that use the “+” operator (or similar operator) to force inclusion of such terms whenever they are present in the query. For example, for the query [the link], it will suggest [+the link].
-
- Strip punctuation and other symbols. Users occasionally add punctuation or other syntax (such as symbols) that changes the meaning of a query. Since most users who do this do so unintentionally, the syntactical reviser 108.2 also generates revised queries by stripping punctuation and other similar syntax whenever present. For instance, for the query [rear window+movie], the syntactical reviser generates the query [rear window movie], which will prevent the
search engine 104 from searching on the character sequence “window+,” which is unlikely to produce any results at all.
- Strip punctuation and other symbols. Users occasionally add punctuation or other syntax (such as symbols) that changes the meaning of a query. Since most users who do this do so unintentionally, the syntactical reviser 108.2 also generates revised queries by stripping punctuation and other similar syntax whenever present. For instance, for the query [rear window+movie], the syntactical reviser generates the query [rear window movie], which will prevent the
- The refinement reviser 108.3 can use any suitable method that refines, i.e., narrows, the query to more specifically describe the user's potential information need. In one embodiment, the refinement reviser 108.3 generates query revisions by comparing a term vector representation of the search query with the term vectors of known search queries, which have been previously associated and weighted with their respective search results. The known search query (or queries) that have the closest vectors are selected as potential revised queries.
- More specifically, in one embodiment the refinement reviser 108.3 operates as follows. The refinement reviser 108.3 uses the user's original query to obtain a selected number of search results from the search engine 104 (e.g., top 100 results). The refinement reviser 108.3 accesses a pre-existing database and matches each of these documents with one or more previously used search queries that included the document in its results. The pre-existing database stores documents in association with search queries, where the association between a query and document is weighted by the query's relevance score for the document.
- Second, the refinement reviser 108.3 uses a clustering algorithm to form dusters of the search result documents based on term vectors formed from the terms of matched stored queries and corresponding weights. The term vectors are unit length normalized multi-dimensional vectors, with each dimension corresponding to a term, which can be an individual word or word combination. The clusters are ranked based on the relevance scores of the original search documents corresponding to the matched stored documents and the number of stored documents occurring in each duster. The highest ranking clusters are selected as potential refinement dusters. The dusters can be formed using various clustering algorithms, such as a hierarchical agglomerative clustering algorithm, as described in E. Rasmussen, “Clustering Algorithms,” in “Information Retrieval,” (W. Frakes & R. Baeza-Yates eds. 92), the disclosure of which is incorporated by reference.
- Third, the refinement reviser 108.3 computes a cluster centroid for each potential refinement duster. The refinement reviser 108.3 then determines for each cluster a potential revised query. In a given refinement duster, for each previously stored search query that is associated with a document in the cluster, the refinement reviser 108.3 scores the stored search query based on its term vector distance to the cluster centroid and the number of stored documents with which the search query is associated. In each potential refinement cluster, the previously stored query that scores the highest is selected as a potential revised query.
- Finally, the refinement reviser 108.3 provides the selected revised refinement queries to the
revision server 107. The details of one suitable refinement reviser are further described in U.S. patent application Ser. No. 10/668,721, filed on Sep. 22, 2003, entitled “System and Method for Providing Search Query Refinements,” which is incorporated by reference herein. - The session-based reviser 108.4 can use any suitable method that uses session-based user data to more correctly capture the user's potential information need based on analysis of changes other users have made in the past. In one embodiment, the session-based reviser 108.4 provides one or more revised queries based on click data collected from many individual user sessions. Initially, a frequency of occurrence for query pairs is calculated using two tables generated by the session-based reviser 108.4. A query pair is a sequence of two queries that occur in a single user session, for example, the first query [sheets], followed by the second query [linens] or the second query [silk sheets]. A first table of recurring individual queries is generated from user session query data, for example stored in the log files 110 of
FIG. 1 b. In one embodiment, the recurring queries occur with a minimum frequency, for example once per day. A second table of recurring query pairs is also generated from the log files 110, each query pair including a first query that was followed by a second query. From the two tables, the frequency of occurrence of each query pair is calculated as a fraction of the occurrence count for the first query in the first table. For example, if a first query [sheets] occurs 100 times, and is followed by a second query [linens] 30 times out of 100, then the frequency of occurrence of the query pair [sheets, linens], as a fraction of the occurrence count for the first query, is 30/100, or 30%. For any given first query, a query pair is retained, with the second query as a candidate revision for the first query, if the frequency of occurrence exceeds a certain threshold. In one embodiment, the threshold is 1%. - For candidate revised queries, an increase in quality of the second query in the query pair over the first query in the pair is calculated using two additional tables generated by the session-based reviser 108.4 from the user click data. A table of quality scores is generated for each of the queries of the pair. From the table, the improvement, if any, in the quality of the second query in the pair over the first query in the pair, is calculated.
- In one embodiment, quality scores are determined by estimating user satisfaction from click behavior data. One such method for determining quality scores is the use of interaction profiles, as described in U.S. application Ser. No. 10/878,926, “Systems and Methods for Deriving and Using an Interaction Profile,” filed on Jun. 28, 2004, which is incorporated by reference.
- In one embodiment, the quality score calculation is based on user click data stored, for example, in log files 110. Quality scores are based on the estimated duration of a first click on a search result. In one embodiment, the duration of a particular click is estimated from the times at which a first and subsequent click occurred, which may be stored with other user session query data, for example in the log files 110 of
FIG. 1 b. Scoring includes assigning search results with no click a score of zero, and proceeds along an S-curve applied to the duration between the first click and a subsequent click, with longer clicks approaching a quality score of 1. In one embodiment, 20 seconds corresponds to 0.1, 40 seconds corresponds to 0.5, and 60 seconds corresponds to 0.9. Clicks on unrelated content, for example banner ads, are excluded from the data. In another embodiment, all result clicks for a query, rather than just the first, are collected. - The session-based reviser 108.4 can then calculate an expected utility for the second query as a candidate revised query over a first query using the frequency occurrence and quality score data from above. In one embodiment, the expected utility is the product of the frequency of occurrence of a query pair and the improvement of quality of the second query over the first query in the pair. In this example, an improvement in quality occurs if the quality score for a second query is higher that the quality score for the first query. If the expected utility of the second query exceeds a threshold, the second query is marked as a potential revised query. In one embodiment, the threshold is 0.02, for example, corresponding to a 10% frequency and a 0.2 increase in quality, or a 20% frequency and a 0.1 increase in quality. Other variations of an expected utility calculation can be used as well.
- As described above, each revised query can be associated with a confidence measure representing the probability that the revision is a good revision. In the case of the session-based reviser 108.4, the expected utility of a revised query can be used as the confidence measure for that revised query.
- An example of query revision using a session-based reviser 108.4 follows. A first user query is [sheets]. Stored data indicates that one commonly user-entered (second) query following [sheets] is [linens] and another commonly entered second query is [silk sheets]. Based on the data stored in the log files 110, the frequency of the query pair [sheets, linens] is 30%, and the frequency of the query pair [sheets, silk sheets] is 1%, as a percentage of occurrences of the first query [sheets]. For example, if the query [sheets] occurred 100 times in the table, [sheets, linens] occurred 30 times and [sheets, silk sheets] occurred once. Assuming a 1% threshold for second queries as candidate revisions, both of these queries would be retained.
- Next, data indicates that the quality score for [sheets] is 0.1, whereas quality scores for the second queries [linens] and [silk sheets], respectively, are 0.7 and 0.8. Thus, the improvement in quality for [linens] over [sheets] is 0.6 (0.7-0.1) and the improvement in quality for [silk sheets] over [sheets] is 0.7 (0.8-0.1).
- Then, the session-based reviser 108.4 calculates the expected utility of each revision as the product of the frequency score and the improvement in quality. For [sheets, linens] the product of the frequency (30%) and the increase in quality (0.6) yields an expected utility of 0.18. For [sheets, silk sheets] the product of the frequency (1%) and the increase in quality (0.7) yields an expected utility of 0.007. Thus, the second query [linens] has a higher expected utility then the query [silk sheets] for a user who enters a first query [sheets], and hence [linens] is a better query revision suggestion. These expected utilities can be used as the confidence measures for the revised queries as discussed above.
- Generating Revision Confidence Measures at Runtime
- Referring now to
FIG. 1 b, there is shown another embodiment of an information retrieval system in accordance with the present invention. In addition to the previously described elements ofFIG. 1 a, there arelog files 110, asession tracker 114, and areviser confidence estimator 112. As discussed above, a query reviser 108 may provide a confidence measure with one or more of the revised queries that it provides to therevision server 107. Therevision server 107 uses the confidence measures to determine which of the possible revised queries to select for inclusion on the revisedqueries page 300. In one embodiment, confidence measures can be derived at runtime, based at least in part on historical user activity in selecting revised queries with respect to a given original query. - In the embodiment of
FIG. 1 b, the front-end server 102 provides thesession tracker 114 with user click-through behavior, along with the original query and revised query information. Thesession tracker 114 maintains log files 110 that store each user query in association with which query revision links 302 were accessed by the user, the results associated with each revised query, along with various features of the original query and revised queries for modeling the quality of the revised queries. The stored information can include, for example: - For the original query:
-
- the original query itself;
- each word in original query;
- length of original query;
- topic cluster of the original query;
- the information retrieval score for the original query; and
- the number of results for the original query.
- For a revised query:
-
- the revised query itself;
- each word in the revised query;
- identification of the revision technique that generated it;
- length of revised query;
- topic cluster associated with the revised query;
- information retrieval score (e.g., page rank) for top search result;
- number of results found for revised query;
- length of click on revised query link 302; and
- length of click on revised query results 304.
- Topic clusters for queries are identified using any suitable topic identification method. One suitable method is described in U.S. application Ser. No. 10/676,571, filed on Sep. 30, 2003, entitled “Method and Apparatus for Characterizing Documents Based on Clusters of Related Words,” which is incorporated by reference.
- The
reviser confidence estimator 112 analyzes the log files 110 using a predictive model, e.g., a multiple, logical regression model, to generate a set of rules based on the features of the query and the revised queries that can be used to estimate the likelihood of a revised query being a successful revision for a given query. One suitable regression model is described in U.S. application Ser. No. 10/734,584, filed Dec. 15, 2003, entitled “Large Scale Machine Learning Systems and Methods,” which is incorporated by reference. Thereviser confidence estimator 112 operates on the assumption that a long click by a user on a revised query link 302 indicates that the user is satisfied with the revision as being an accurate representation of the user's original information need. A long click can be deemed to occur when the user stays on the clicked through page for some minimum period of time, for example a minimum of 60 seconds. From the length of the clicks on the revised query links 302, thereviser confidence estimator 112 can train the predictive model to predict the likelihood of a long click given the various features of the revised query and the original query. Revised queries having high predicted likelihoods of a long click are considered to be better (i.e., more successful) revisions for their associated original queries. - In one embodiment for a predictive model the
confidence estimator 112 selects features associated with the revised queries, collects click data from the log files, formulates rules using the features and click data, and adds the rules to the predictive model. In addition, theconfidence estimator 112 can train the predictive model by formulating additional rules using the click data and selectively adding the additional rules to the model. - At runtime, the
revision server 107 provides thereviser confidence estimator 112 with the original query, and each of the revised queries received from the various query revisers 108. Thereviser confidence estimator 112 applies the original query and revised queries to the predictive model to obtain the prediction measures, which serve as the previously mentioned confidence measures. Alternatively, each query reviser 108 can directly call thereviser confidence estimator 112 to obtain the prediction measures, and then pass these values back to therevision server 107. Although the depicted embodiment shows thereviser confidence estimator 112 as a separate module, therevision server 107 may provide the confidence estimator functionality instead. In either case, therevision server 107 uses the confidence measures, as described above, to select and order which revised queries will be shown to the user. - In one embodiment,
revision server 107 uses the confidence measures to determine whether to show query revisions at all, and if so, how prominently to place the revisions or the link thereto. To do so, therevision server 107 may use either the initial confidence measures discussed previously or the dynamically generated confidence measures discussed above. For example, if the best confidence measure falls below a threshold value, this can indicate that none of the potential candidate revisions is very good, in which case no modification is made to theoriginal result page 200. On the other hand, if one or more of the revised queries has a very high confidence measure above another threshold value, therevision server 107 can force the query revisions, or the link to the revisedquery page 300, to be shown very prominently on theoriginal result page 200, for example, near the top of page and in a distinctive font, or in some other prominent position. If the confidence measures are in between the two thresholds, then a link to the revisedquery page 300 can be placed in a less prominent position, for example at the end of the search resultspage 200, e.g., as shown forlink 206. - The steps of the processes described above can performed in parallel (e.g., getting results for a query revision and calculating a confidence measure for the query revision), and/or interleaved (e.g., receiving multiple query revisions from the query revisers and constructing a sorted list of query revisions on-the-fly, rather than receiving all the query revisions and then sorting the list of query revisions). In addition, although the embodiments above are described in the context of a client/server search system, the invention can also be implemented as part of a stand-alone machine (e.g., a stand-alone PC). This could be useful, for example, in the context of a desktop search application such as Google Desktop Search.
- The present invention has been described in particular detail with respect to one possible embodiment. Those of skill in the art will appreciate that the invention may be practiced in other embodiments. First, the particular naming of the components, capitalization of terms, the attributes, data structures, or any other programming or structural aspect is not mandatory or significant, and the mechanisms that implement the invention or its features may have different names, formats, or protocols. Further, the system may be implemented via a combination of hardware and software, as described, or entirely in hardware elements. Also, the particular division of functionality between the various system components described herein is merely exemplary, and not mandatory; functions performed by a single system component may instead be performed by multiple components, and functions performed by multiple components may instead be performed by a single component.
- Some portions of the above description present the features of the present invention in terms of algorithms and symbolic representations of operations on information. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. These operations, while described functionally or logically, are understood to be implemented by computer programs. Furthermore, it has also proven convenient at times to refer to these arrangements of operations as modules or by functional names, without loss of generality.
- Unless specifically stated otherwise as apparent from the above discussion, it is appreciated that throughout the description the described actions and processes are those of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system memories or registers or other such information storage, transmission, or display devices. A detailed description of the underlying hardware of such computer systems is not provided herein as this information is commonly known to those of skill in the art of computer engineering.
- Certain aspects of the present invention include process steps and instructions described herein in the form of an algorithm. It should be noted that the process steps and instructions of the present invention could be embodied in software, firmware, or hardware, and when embodied in software, could be downloaded to reside on and be operated from different platforms used by real time network operating systems.
- Certain aspects of the present invention have been described with respect to individual or singular examples; however it is understood that the operation of the present invention is not limited in this regard. Accordingly, all references to a singular element or component should be interpreted to refer to plural such components as well. Likewise, references to “a,” “an,” or “the” should be interpreted to include reference to pluralities, unless expressed stated otherwise. Finally, use of the term “plurality” is meant to refer to two or more entities, items of data, or the like, as appropriate for the portion of the invention under discussion, and does cover an infinite or otherwise excessive number of items.
- The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general-purpose computer selectively activated or reconfigured by a computer program stored on a computer readable medium that can be accessed by the computer. Such a computer program may be stored in a computer readable storage medium, such as, but not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs; magnetic or optical cards, or any type of media suitable for storing electronic instructions, and each coupled to a computer system bus. Those of skill in the art of integrated circuit design and video codecs appreciate that the invention can be readily fabricated in various types of integrated circuits based on the above functional and structural descriptions, including application specific integrated circuits (ASICs). In addition, the present invention may be incorporated into various types of video coding devices.
- The algorithms and operations presented herein are not inherently related to any particular computer or other apparatus. Various general-purpose systems may also be used with programs in accordance with the teachings herein, or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will be apparent to those of skill in the art, along with equivalent variations. In addition, the present invention is not described with reference to any particular programming language. It is appreciated that a variety of programming languages may be used to implement the teachings of the present invention as described herein, and any references to specific languages are provided for disclosure of enablement and best mode of the present invention.
- Finally, it should be noted that the language used in the specification has been principally selected for readability and instructional purposes, and may not have been selected to delineate or circumscribe the inventive subject matter. Accordingly, the disclosure of the present invention is intended to be illustrative, but not limiting, of the scope of the invention.
Claims (21)
1. A method for improving the likelihood of success of suggested revised queries for original queries, where the revised queries are generated from the original queries using one or more revision strategies, the method comprising:
maintaining log files of user clicks on revised queries associated with an original query;
generating, using the log files, a predictive model to estimate a likelihood of success of the revised queries with respect to the original queries; and
applying the original query and the revised queries to the predictive model to obtain scores for the revised queries.
2. The method of claim 1 , wherein the log files include features associated with the original query and the revised queries and the predictive model generates a series of rules using the features.
3. The method of claim 2 , wherein the features include at least one from the group consisting of the original query, each word in original query, the length of original query, a topic duster of the original query, an information retrieval score for the original query, and the number of results for the original query.
4. The method of claim 2 , wherein the features include at least one from the group consisting of one of the revised queries, each word in the one of the revised queries, an identification of the revision technique that generated the one of the revised queries, the length of the one of the revised queries, a topic cluster associated with the one of the revised queries, an information retrieval score for a top search result for the one of the revised queries, the number of results found for the one of the revised queries, the length of a click on a link for the one of the revised queries, and the length of a click on results for the one of the revised queries.
5. The method of claim 1 , wherein generating the predictive model to estimate a likelihood of success of the revised queries comprises:
selecting features associated with the revised queries;
collecting click data from the log files;
formulating a rule using the features and the click data; and
adding the rule to the predictive model.
6. The method of claim 5 , further comprising training the predictive model, comprising:
formulating additional rules using the click data; and
selectively adding the additional rules to the predictive model.
7. The method of claim 5 or 6 , wherein the click data includes click length data.
8. The method of claim 7 , wherein the click length data is associated with the revised queries or corresponding search results.
9. The method of claim 1 , wherein the prediction measures serve as confidence measures for ranking the revised queries.
10. The method of claim 1 , further comprising sorting the revised queries by the prediction measures.
11. A method for improving the likelihood of success of suggested revised queries, comprising:
maintaining log files of user clicks on a list of revised queries associated with an original query;
selecting features associated with the revised queries;
collecting click data from the log files;
formulating a rule using the features and the click data;
using the rule to generate a predictive model to estimate a likelihood of success of the revised queries;
applying the original query and the revised queries to the predictive model to obtain prediction measures for the revised queries; and
sorting the revised queries by the prediction measures.
12. The method of claim 11 , further comprising training the predictive model, comprising:
formulating additional rules using the click data; and
selectively adding the additional rules to the predictive model.
13. The method of claim 11 , wherein the prediction measures serve as confidence measures for ranking the revised queries.
14. The method of claim 11 , further comprising sorting the revised queries by the prediction measures.
15. A method for improving the likelihood of success of suggested revised queries, comprising:
maintaining log files of user clicks on a list of revised queries associated with an original query, the log files including features associated with the original query and the revised queries;
selecting a subset of features associated with the revised queries;
collecting click data from the log files, the click data including click length data, wherein longer clicks indicate greater user satisfaction;
formulating a rule using the subset of features and the click data;
using the rule to generate a predictive model to estimate a likelihood of success of the revised queries, the predictive model including a series of rules using the subset of the features;
training the predictive model, comprising:
formulating additional rules using the click data; and
selectively adding the additional rules to the predictive model;
applying the original query and the revised queries to the predictive model to obtain prediction measures for the revised queries, the prediction measures serving as confidence measures for ranking the revised queries; and
sorting the revised queries by the prediction measures.
16. A computer program product for improving the likelihood of success of suggested revised queries, the computer program product comprising:
a computer-readable medium; and
computer program code, coded on the medium, for:
maintaining log files of user clicks on revised queries associated with an original query;
generating, using the log files, a predictive model to estimate a likelihood of success of the revised queries with respect to the original queries; and
applying the original query and the revised queries to the predictive model to obtain scores for the revised queries.
17. A computer program product for improving the likelihood of success of suggested revised queries, the computer program product comprising:
a computer-readable medium; and
computer program code, coded on the medium, for:
maintaining log files of user clicks on a list of revised queries associated with an original query;
selecting features associated with the revised queries;
collecting click data from the log files;
formulating a rule using the features and the click data;
using the rule to generate a predictive model to estimate a likelihood of success of the revised-queries;
applying the original query and the revised queries to the predictive model to obtain prediction measures for the revised queries; and
sorting the revised queries by the prediction measures.
18. A computer program product for improving the likelihood of success of suggested revised queries, the computer program product comprising:
a computer-readable medium; and
computer program code, coded on the medium, for:
maintaining log files of user clicks on a list of revised queries associated with an original query, the log files including features associated with the original query and the revised queries;
selecting a subset of features associated with the revised queries;
collecting click data from the log files, the click data including click length data, wherein longer clicks indicate greater user satisfaction;
formulating a rule using the subset of features and the click data;
using the rule to generate a predictive model to estimate a likelihood of success of the revised queries, the predictive model including a series of rules using the subset of the features;
training the predictive model, comprising:
formulating additional rules using the click data; and
selectively adding the additional rules to the predictive model;
applying the original query and the revised queries to the predictive model to obtain prediction measures for the revised queries, the prediction measures serving as confidence measures for ranking the revised queries; and
sorting the revised queries by the prediction measures.
19. A system for improving the likelihood of success of suggested revised queries, the system comprising:
means for maintaining log files of user clicks on revised queries associated with an original query;
means for generating, using the log files, a predictive model to estimate a likelihood of success of the revised queries with respect to the original queries; and
means for applying the original query and the revised queries to the predictive model to obtain scores for the revised queries.
20. A system for improving the likelihood of success of suggested revised queries, the system comprising:
means for maintaining log files of user clicks on a list of revised queries associated with an original query;
means for selecting features associated with the revised queries;
means for collecting click data from the log files;
means for formulating a rule using the features and the click data;
means for using the rule to generate a predictive model to estimate a likelihood of success of the revised queries;
means for applying the original query and the revised queries to the predictive model to obtain prediction measures for the revised queries; and
means for sorting the revised queries by the prediction measures.
21. A system for improving the likelihood of success of suggested revised queries, the system comprising:
means for maintaining log files of user clicks on a list of revised queries associated with an original query, the log files including features associated with the original query and the revised queries;
means for selecting a subset of features associated with the revised queries;
means for collecting click data from the log files, the click data including click length data, wherein longer clicks indicate greater user satisfaction;
means for formulating a rule using the subset of features and the dick data;
means for using the rule to generate a predictive model to estimate a likelihood of success of the revised queries, the predictive model including a series of rules using the subset of the features;
means for training the predictive model, comprising:
means for formulating additional rules using the click data; and
means for selectively adding the additional rules to the predictive model;
means for applying the original query and the revised queries to the predictive model to obtain prediction measures for the revised queries, the prediction measures serving as confidence measures for ranking the revised queries; and
means for sorting the revised queries by the prediction measures.
Priority Applications (12)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/095,920 US20060230005A1 (en) | 2005-03-30 | 2005-03-30 | Empirical validation of suggested alternative queries |
US11/285,814 US7870147B2 (en) | 2005-03-29 | 2005-11-22 | Query revision using known highly-ranked queries |
CN2006800171066A CN101176058B (en) | 2005-03-29 | 2006-03-13 | Integration of multiple query revision models |
JP2008504089A JP4950174B2 (en) | 2005-03-29 | 2006-03-13 | Query modification using known high-ranked queries |
KR1020077024804A KR101269105B1 (en) | 2005-03-29 | 2006-03-13 | Query revision using known highly-ranked queries |
CA2603718A CA2603718C (en) | 2005-03-29 | 2006-03-13 | Query revision using known highly-ranked queries |
PCT/US2006/009076 WO2006104683A2 (en) | 2005-03-29 | 2006-03-13 | Query revision using known highly-ranked queries |
EP06738165A EP1869586A4 (en) | 2005-03-29 | 2006-03-13 | Query revision using known highly-ranked queries |
AU2006229761A AU2006229761B2 (en) | 2005-03-29 | 2006-03-13 | Query revision using known highly-ranked queries |
ARP060101231A AR052956A1 (en) | 2005-03-29 | 2006-03-29 | REVISIONS OF CONSULTATIONS USING HIGH HIERARCHY KNOWLEDGE CONSULTATIONS |
US12/876,896 US8375049B2 (en) | 2005-03-29 | 2010-09-07 | Query revision using known highly-ranked queries |
AU2011201142A AU2011201142B2 (en) | 2005-03-29 | 2011-03-15 | Query revision using known highly-ranked queries |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/095,920 US20060230005A1 (en) | 2005-03-30 | 2005-03-30 | Empirical validation of suggested alternative queries |
Related Child Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/096,198 Continuation-In-Part US7617205B2 (en) | 2003-09-30 | 2005-03-30 | Estimating confidence for query revision models |
US11/285,814 Continuation-In-Part US7870147B2 (en) | 2005-03-29 | 2005-11-22 | Query revision using known highly-ranked queries |
Publications (1)
Publication Number | Publication Date |
---|---|
US20060230005A1 true US20060230005A1 (en) | 2006-10-12 |
Family
ID=37084248
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/095,920 Abandoned US20060230005A1 (en) | 2005-03-29 | 2005-03-30 | Empirical validation of suggested alternative queries |
Country Status (1)
Country | Link |
---|---|
US (1) | US20060230005A1 (en) |
Cited By (22)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20040260621A1 (en) * | 2002-10-21 | 2004-12-23 | Foster Benjamin David | Listing recommendation in a network-based commerce system |
US20060288000A1 (en) * | 2005-06-20 | 2006-12-21 | Raghav Gupta | System to generate related search queries |
US20070038615A1 (en) * | 2005-08-11 | 2007-02-15 | Vadon Eric R | Identifying alternative spellings of search strings by analyzing self-corrective searching behaviors of users |
US20080256035A1 (en) * | 2007-04-10 | 2008-10-16 | Wei Vivian Zhang | Query substitution using active learning |
US20080306934A1 (en) * | 2007-06-11 | 2008-12-11 | Microsoft Coporation | Using link structure for suggesting related queries |
US20080306938A1 (en) * | 2007-06-08 | 2008-12-11 | Ebay Inc. | Electronic publication system |
US20090077037A1 (en) * | 2007-09-14 | 2009-03-19 | Jun Wu | Suggesting alternative queries in query results |
US20090144262A1 (en) * | 2007-12-04 | 2009-06-04 | Microsoft Corporation | Search query transformation using direct manipulation |
US8260771B1 (en) | 2005-07-22 | 2012-09-04 | A9.Com, Inc. | Predictive selection of item attributes likely to be useful in refining a search |
US20120239653A1 (en) * | 2007-06-28 | 2012-09-20 | Microsoft Corporation | Machine Assisted Query Formulation |
US20130238588A1 (en) * | 2009-06-19 | 2013-09-12 | Blekko, Inc. | Dynamic Inference Graph |
US20130238587A1 (en) * | 2010-10-30 | 2013-09-12 | Blekko, Inc. | Search Query Transformations |
US20130246404A1 (en) * | 2010-10-30 | 2013-09-19 | Blekko, Inc. | Display of Dynamic Interference Graph Results |
US20140201181A1 (en) * | 2009-11-04 | 2014-07-17 | Google Inc. | Selecting and presenting content relevant to user input |
US20140280290A1 (en) * | 2013-03-14 | 2014-09-18 | Microsoft Corporation | Selection and display of alternative suggested sub-strings in a query |
US9116957B1 (en) | 2013-03-05 | 2015-08-25 | Google Inc. | Substitute term scoring |
US9378247B1 (en) * | 2009-06-05 | 2016-06-28 | Google Inc. | Generating query refinements from user preference data |
US9396268B2 (en) | 2009-08-31 | 2016-07-19 | Google Inc. | Framework for selecting and presenting answer boxes relevant to user input as query suggestions |
US9563692B1 (en) | 2009-08-28 | 2017-02-07 | Google Inc. | Providing result-based query suggestions |
US9740780B1 (en) | 2009-03-23 | 2017-08-22 | Google Inc. | Autocompletion using previously submitted query data |
US10007705B2 (en) | 2010-10-30 | 2018-06-26 | International Business Machines Corporation | Display of boosted slashtag results |
US10255326B1 (en) * | 2013-02-19 | 2019-04-09 | Imdb.Com, Inc. | Stopword inclusion for searches |
Citations (29)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5826260A (en) * | 1995-12-11 | 1998-10-20 | International Business Machines Corporation | Information retrieval system and method for displaying and ordering information based on query element contribution |
US20020002438A1 (en) * | 2000-06-28 | 2002-01-03 | Hiroshi Ohmura | Information service system, server and in-vehicle unit for use in information service system, and record medium on which program readable by in-vehicle unit or computer is recorded |
US20030014399A1 (en) * | 2001-03-12 | 2003-01-16 | Hansen Mark H. | Method for organizing records of database search activity by topical relevance |
US6519585B1 (en) * | 1999-04-27 | 2003-02-11 | Infospace, Inc. | System and method for facilitating presentation of subject categorizations for use in an on-line search query engine |
US20030093408A1 (en) * | 2001-10-12 | 2003-05-15 | Brown Douglas P. | Index selection in a database system |
US20030135413A1 (en) * | 2002-01-11 | 2003-07-17 | Takashi Nishi | Advertisement system and a control program therefor |
US20030210666A1 (en) * | 2002-04-26 | 2003-11-13 | Nokia Corporation | Relcocation of application-specific functionality during seamless network layer-level handoffs |
US20030212666A1 (en) * | 2002-05-10 | 2003-11-13 | Sankar Basu | Adaptive probabilistic query expansion |
US6651054B1 (en) * | 1999-10-30 | 2003-11-18 | International Business Machines Corporation | Method, system, and program for merging query search results |
US20030217052A1 (en) * | 2000-08-24 | 2003-11-20 | Celebros Ltd. | Search engine method and apparatus |
US6675159B1 (en) * | 2000-07-27 | 2004-01-06 | Science Applic Int Corp | Concept-based search and retrieval system |
US6701309B1 (en) * | 2000-04-21 | 2004-03-02 | Lycos, Inc. | Method and system for collecting related queries |
US6718363B1 (en) * | 1999-07-30 | 2004-04-06 | Verizon Laboratories, Inc. | Page aggregation for web sites |
US20040083211A1 (en) * | 2000-10-10 | 2004-04-29 | Bradford Roger Burrowes | Method and system for facilitating the refinement of data queries |
US6732088B1 (en) * | 1999-12-14 | 2004-05-04 | Xerox Corporation | Collaborative searching by query induction |
US6751611B2 (en) * | 2002-03-01 | 2004-06-15 | Paul Jeffrey Krupin | Method and system for creating improved search queries |
US20040199419A1 (en) * | 2001-11-13 | 2004-10-07 | International Business Machines Corporation | Promoting strategic documents by bias ranking of search results on a web browser |
US20040199498A1 (en) * | 2003-04-04 | 2004-10-07 | Yahoo! Inc. | Systems and methods for generating concept units from search queries |
US6829599B2 (en) * | 2002-10-02 | 2004-12-07 | Xerox Corporation | System and method for improving answer relevance in meta-search engines |
US20050027691A1 (en) * | 2003-07-28 | 2005-02-03 | Sergey Brin | System and method for providing a user interface with search query broadening |
US20050044224A1 (en) * | 2003-06-29 | 2005-02-24 | Gyuchang Jun | Dynamic indicator for context sensitive real-time communications |
US20050071337A1 (en) * | 2003-09-25 | 2005-03-31 | International Business Machines Corporation | Encryption of query execution details in a database management system |
US20050125215A1 (en) * | 2003-12-05 | 2005-06-09 | Microsoft Corporation | Synonymous collocation extraction using translation information |
US20050149499A1 (en) * | 2003-12-30 | 2005-07-07 | Google Inc., A Delaware Corporation | Systems and methods for improving search quality |
US20050198068A1 (en) * | 2004-03-04 | 2005-09-08 | Shouvick Mukherjee | Keyword recommendation for internet search engines |
US20050256848A1 (en) * | 2004-05-13 | 2005-11-17 | International Business Machines Corporation | System and method for user rank search |
US20060031214A1 (en) * | 2004-07-14 | 2006-02-09 | Microsoft Corporation | Method and system for adaptive categorial presentation of search results |
US7031961B2 (en) * | 1999-05-05 | 2006-04-18 | Google, Inc. | System and method for searching and recommending objects from a categorically organized information repository |
US20070106937A1 (en) * | 2004-03-16 | 2007-05-10 | Microsoft Corporation | Systems and methods for improved spell checking |
-
2005
- 2005-03-30 US US11/095,920 patent/US20060230005A1/en not_active Abandoned
Patent Citations (29)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5826260A (en) * | 1995-12-11 | 1998-10-20 | International Business Machines Corporation | Information retrieval system and method for displaying and ordering information based on query element contribution |
US6519585B1 (en) * | 1999-04-27 | 2003-02-11 | Infospace, Inc. | System and method for facilitating presentation of subject categorizations for use in an on-line search query engine |
US7031961B2 (en) * | 1999-05-05 | 2006-04-18 | Google, Inc. | System and method for searching and recommending objects from a categorically organized information repository |
US6718363B1 (en) * | 1999-07-30 | 2004-04-06 | Verizon Laboratories, Inc. | Page aggregation for web sites |
US6651054B1 (en) * | 1999-10-30 | 2003-11-18 | International Business Machines Corporation | Method, system, and program for merging query search results |
US6732088B1 (en) * | 1999-12-14 | 2004-05-04 | Xerox Corporation | Collaborative searching by query induction |
US6701309B1 (en) * | 2000-04-21 | 2004-03-02 | Lycos, Inc. | Method and system for collecting related queries |
US20020002438A1 (en) * | 2000-06-28 | 2002-01-03 | Hiroshi Ohmura | Information service system, server and in-vehicle unit for use in information service system, and record medium on which program readable by in-vehicle unit or computer is recorded |
US6675159B1 (en) * | 2000-07-27 | 2004-01-06 | Science Applic Int Corp | Concept-based search and retrieval system |
US20030217052A1 (en) * | 2000-08-24 | 2003-11-20 | Celebros Ltd. | Search engine method and apparatus |
US20040083211A1 (en) * | 2000-10-10 | 2004-04-29 | Bradford Roger Burrowes | Method and system for facilitating the refinement of data queries |
US20030014399A1 (en) * | 2001-03-12 | 2003-01-16 | Hansen Mark H. | Method for organizing records of database search activity by topical relevance |
US20030093408A1 (en) * | 2001-10-12 | 2003-05-15 | Brown Douglas P. | Index selection in a database system |
US20040199419A1 (en) * | 2001-11-13 | 2004-10-07 | International Business Machines Corporation | Promoting strategic documents by bias ranking of search results on a web browser |
US20030135413A1 (en) * | 2002-01-11 | 2003-07-17 | Takashi Nishi | Advertisement system and a control program therefor |
US6751611B2 (en) * | 2002-03-01 | 2004-06-15 | Paul Jeffrey Krupin | Method and system for creating improved search queries |
US20030210666A1 (en) * | 2002-04-26 | 2003-11-13 | Nokia Corporation | Relcocation of application-specific functionality during seamless network layer-level handoffs |
US20030212666A1 (en) * | 2002-05-10 | 2003-11-13 | Sankar Basu | Adaptive probabilistic query expansion |
US6829599B2 (en) * | 2002-10-02 | 2004-12-07 | Xerox Corporation | System and method for improving answer relevance in meta-search engines |
US20040199498A1 (en) * | 2003-04-04 | 2004-10-07 | Yahoo! Inc. | Systems and methods for generating concept units from search queries |
US20050044224A1 (en) * | 2003-06-29 | 2005-02-24 | Gyuchang Jun | Dynamic indicator for context sensitive real-time communications |
US20050027691A1 (en) * | 2003-07-28 | 2005-02-03 | Sergey Brin | System and method for providing a user interface with search query broadening |
US20050071337A1 (en) * | 2003-09-25 | 2005-03-31 | International Business Machines Corporation | Encryption of query execution details in a database management system |
US20050125215A1 (en) * | 2003-12-05 | 2005-06-09 | Microsoft Corporation | Synonymous collocation extraction using translation information |
US20050149499A1 (en) * | 2003-12-30 | 2005-07-07 | Google Inc., A Delaware Corporation | Systems and methods for improving search quality |
US20050198068A1 (en) * | 2004-03-04 | 2005-09-08 | Shouvick Mukherjee | Keyword recommendation for internet search engines |
US20070106937A1 (en) * | 2004-03-16 | 2007-05-10 | Microsoft Corporation | Systems and methods for improved spell checking |
US20050256848A1 (en) * | 2004-05-13 | 2005-11-17 | International Business Machines Corporation | System and method for user rank search |
US20060031214A1 (en) * | 2004-07-14 | 2006-02-09 | Microsoft Corporation | Method and system for adaptive categorial presentation of search results |
Cited By (43)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8712868B2 (en) | 2002-10-21 | 2014-04-29 | Ebay Inc. | Listing recommendation using generation of a user-specific query in a network-based commerce system |
US20040260621A1 (en) * | 2002-10-21 | 2004-12-23 | Foster Benjamin David | Listing recommendation in a network-based commerce system |
US7831476B2 (en) | 2002-10-21 | 2010-11-09 | Ebay Inc. | Listing recommendation in a network-based commerce system |
US20060288000A1 (en) * | 2005-06-20 | 2006-12-21 | Raghav Gupta | System to generate related search queries |
US9892156B2 (en) | 2005-06-20 | 2018-02-13 | Paypal, Inc. | System to generate related search queries |
US9183309B2 (en) | 2005-06-20 | 2015-11-10 | Paypal, Inc. | System to generate related search queries |
US8200687B2 (en) * | 2005-06-20 | 2012-06-12 | Ebay Inc. | System to generate related search queries |
US8260771B1 (en) | 2005-07-22 | 2012-09-04 | A9.Com, Inc. | Predictive selection of item attributes likely to be useful in refining a search |
US20070038615A1 (en) * | 2005-08-11 | 2007-02-15 | Vadon Eric R | Identifying alternative spellings of search strings by analyzing self-corrective searching behaviors of users |
US7321892B2 (en) | 2005-08-11 | 2008-01-22 | Amazon Technologies, Inc. | Identifying alternative spellings of search strings by analyzing self-corrective searching behaviors of users |
US20080256035A1 (en) * | 2007-04-10 | 2008-10-16 | Wei Vivian Zhang | Query substitution using active learning |
US8051040B2 (en) | 2007-06-08 | 2011-11-01 | Ebay Inc. | Electronic publication system |
US20080306938A1 (en) * | 2007-06-08 | 2008-12-11 | Ebay Inc. | Electronic publication system |
US8606811B2 (en) | 2007-06-08 | 2013-12-10 | Ebay Inc. | Electronic publication system |
US20080306934A1 (en) * | 2007-06-11 | 2008-12-11 | Microsoft Coporation | Using link structure for suggesting related queries |
US7822774B2 (en) | 2007-06-11 | 2010-10-26 | Microsoft Corporation | Using link structure for suggesting related queries |
US20120239653A1 (en) * | 2007-06-28 | 2012-09-20 | Microsoft Corporation | Machine Assisted Query Formulation |
US8812534B2 (en) * | 2007-06-28 | 2014-08-19 | Microsoft Corporation | Machine assisted query formulation |
US8595252B2 (en) * | 2007-09-14 | 2013-11-26 | Google Inc. | Suggesting alternative queries in query results |
US20090077037A1 (en) * | 2007-09-14 | 2009-03-19 | Jun Wu | Suggesting alternative queries in query results |
US20090144262A1 (en) * | 2007-12-04 | 2009-06-04 | Microsoft Corporation | Search query transformation using direct manipulation |
US9740780B1 (en) | 2009-03-23 | 2017-08-22 | Google Inc. | Autocompletion using previously submitted query data |
US9378247B1 (en) * | 2009-06-05 | 2016-06-28 | Google Inc. | Generating query refinements from user preference data |
US9342607B2 (en) * | 2009-06-19 | 2016-05-17 | International Business Machines Corporation | Dynamic inference graph |
US20130238588A1 (en) * | 2009-06-19 | 2013-09-12 | Blekko, Inc. | Dynamic Inference Graph |
US9563692B1 (en) | 2009-08-28 | 2017-02-07 | Google Inc. | Providing result-based query suggestions |
US10459989B1 (en) | 2009-08-28 | 2019-10-29 | Google Llc | Providing result-based query suggestions |
US9396268B2 (en) | 2009-08-31 | 2016-07-19 | Google Inc. | Framework for selecting and presenting answer boxes relevant to user input as query suggestions |
US20140201181A1 (en) * | 2009-11-04 | 2014-07-17 | Google Inc. | Selecting and presenting content relevant to user input |
US9361381B2 (en) * | 2009-11-04 | 2016-06-07 | Google Inc. | Selecting and presenting content relevant to user input |
US10089393B2 (en) | 2009-11-04 | 2018-10-02 | Google Llc | Selecting and presenting content relevant to user input |
US20130246404A1 (en) * | 2010-10-30 | 2013-09-19 | Blekko, Inc. | Display of Dynamic Interference Graph Results |
US9864805B2 (en) * | 2010-10-30 | 2018-01-09 | International Business Machines Corporation | Display of dynamic interference graph results |
US20130238587A1 (en) * | 2010-10-30 | 2013-09-12 | Blekko, Inc. | Search Query Transformations |
US10007705B2 (en) | 2010-10-30 | 2018-06-26 | International Business Machines Corporation | Display of boosted slashtag results |
US20160239576A1 (en) * | 2010-10-30 | 2016-08-18 | International Business Machines Corporation | Dynamic inference graph |
US10223456B2 (en) | 2010-10-30 | 2019-03-05 | International Business Machines Corporation | Boosted slashtags |
US10726083B2 (en) * | 2010-10-30 | 2020-07-28 | International Business Machines Corporation | Search query transformations |
US11194872B2 (en) * | 2010-10-30 | 2021-12-07 | International Business Machines Corporation | Dynamic inference graph |
US10255326B1 (en) * | 2013-02-19 | 2019-04-09 | Imdb.Com, Inc. | Stopword inclusion for searches |
US10877981B1 (en) | 2013-02-19 | 2020-12-29 | Imdb.Com, Inc. | Stopword inclusion for searches |
US9116957B1 (en) | 2013-03-05 | 2015-08-25 | Google Inc. | Substitute term scoring |
US20140280290A1 (en) * | 2013-03-14 | 2014-09-18 | Microsoft Corporation | Selection and display of alternative suggested sub-strings in a query |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9697249B1 (en) | Estimating confidence for query revision models | |
CA2603673C (en) | Integration of multiple query revision models | |
US20060230005A1 (en) | Empirical validation of suggested alternative queries | |
US7870147B2 (en) | Query revision using known highly-ranked queries | |
US9009146B1 (en) | Ranking search results based on similar queries | |
US7627548B2 (en) | Inferring search category synonyms from user logs | |
US6564210B1 (en) | System and method for searching databases employing user profiles | |
US8812541B2 (en) | Generation of refinement terms for search queries | |
CA2536265C (en) | System and method for processing a query | |
US20080195601A1 (en) | Method For Information Retrieval | |
AU2011247862B2 (en) | Integration of multiple query revision models | |
Qumsiyeh et al. | Web Search Using Summarization on Clustered Web Documents Retrieved by User Queries | |
Bhatia | Enabling easier information access in online discussion forums |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE, INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:BAILEY, DAVID R.;BATTLE, ALEXIS J.;GOMES, BENEDICT A.;AND OTHERS;REEL/FRAME:016392/0494;SIGNING DATES FROM 20050524 TO 20050525 |
|
STCB | Information on status: application discontinuation |
Free format text: ABANDONED -- FAILURE TO PAY ISSUE FEE |