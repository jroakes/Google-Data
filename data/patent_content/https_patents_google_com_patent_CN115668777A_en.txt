CN115668777A - System and method for improved machine learning compression - Google Patents
System and method for improved machine learning compression Download PDFInfo
- Publication number
- CN115668777A CN115668777A CN202180040637.1A CN202180040637A CN115668777A CN 115668777 A CN115668777 A CN 115668777A CN 202180040637 A CN202180040637 A CN 202180040637A CN 115668777 A CN115668777 A CN 115668777A
- Authority
- CN
- China
- Prior art keywords
- data
- input data
- computer
- computing system
- implemented method
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
Images
Classifications
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M7/00—Conversion of a code where information is represented by a given sequence or number of digits to a code where the same, similar or subset of information is represented by a different sequence or number of digits
- H03M7/30—Compression; Expansion; Suppression of unnecessary data, e.g. redundancy reduction
- H03M7/3059—Digital compression and data reduction techniques where the original information is represented by a subset or similar information, e.g. lossy compression
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/044—Recurrent networks, e.g. Hopfield networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
- G06N3/0455—Auto-encoder networks; Encoder-decoder networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/047—Probabilistic or stochastic networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/084—Backpropagation, e.g. using gradient descent
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/088—Non-supervised learning, e.g. competitive learning
Abstract
A computer-implemented method for compressing computer-readable data with improved efficiency may include: obtaining, by a computing system comprising one or more computing devices, input data associated with the computing system; and encoding, by the computing system, the input data and additive noise from the noisy channel based at least in part on the encoder model to produce encoded data, wherein encoding the input data and the additive noise comprises additively combining the additive noise and the input data to obtain noisy input data and rounding the noisy input data by a soft rounding function, the soft rounding function having a sharpness to produce the encoded data, wherein the machine-learned encoder model is trained on training data, wherein the training data is encoded with the additive noise from the noisy channel.
Description
Cross Reference to Related Applications
This application claims priority and benefit from U.S. provisional patent application No. 63/034,172, filed on 3/6/2020, which is hereby incorporated by reference in its entirety.
Technical Field
The present disclosure relates generally to data compression, such as end-to-end machine learning data compression.
Background
Reverse channel coding refers to a method of transmitting samples (e.g., consecutive samples) through a digital channel. One type of common reverse channel coding algorithm generates a large number of samples from the distribution. An index corresponding to the sample having a conditional distribution based on the input is then transmitted.
Reverse channel coding may be useful for data compression. For example, computer-readable data may be compressed for storage and/or transmission. The compressed data may have a reduced computational resource requirement for storage and/or transmission relative to the original data. The compressed data may be decompressed to reconstruct or approximate the original data.
Disclosure of Invention
Aspects and advantages of embodiments of the present disclosure will be set forth in part in the description which follows, or may be learned by practice of the embodiments.
One example aspect of the present disclosure is directed to a computer-implemented method for compressing computer-readable data with improved efficiency. The computer-implemented method may include: obtaining, by a computing system comprising one or more computing devices, input data associated with the computing system; and encoding, by the computing system, the input data and additive noise from the noisy channel based at least in part on the encoder model to produce encoded data, wherein encoding the input data and the additive noise comprises additively combining the additive noise and the input data to obtain noisy input data and rounding the noisy input data by a soft rounding function, the soft rounding function having a sharpness to produce the encoded data, wherein the machine-learned encoder model is trained on training data, wherein the training data is encoded with the additive noise from the noisy channel.
Another example aspect of the present disclosure is directed to a computer-implemented method of decoding encoded data. The computer-implemented method includes: obtaining, by a computing system comprising one or more computing devices, encoded data that is encoded based at least in part on input data and additive noise from a noisy channel, wherein the encoded data is encoded by additively combining the additive noise and the input data to obtain noisy input data and rounding the noisy input data by a soft rounding function, the soft rounding function having a sharpness to produce the encoded data; and applying, by the computing system, a reconstruction defined by the expected value for the given smoothed generic quantization approximation to reconstruct the approximated input data.
Another example aspect of the present disclosure is directed to a computer-implemented method of encoding input data with improved computational and statistical efficiency. The computer-implemented method includes obtaining, by a computing system including one or more computing devices, input data associated with the computing system. The computer-implemented method includes obtaining, by a computing system, data indicative of a target distribution based at least in part on input data. The computer-implemented method includes determining, by a computing system, a uniform distribution based at least in part on a target distribution. The computer-implemented method includes obtaining, by a computing system, a plurality of samples from a uniform distribution. The computer-implemented method includes identifying, by a computing system, an index corresponding to a selected sample from the uniformly distributed plurality of samples such that the selected sample is distributed according to a target distribution. The computer-implemented method includes transmitting, by a computing system, encoded sample representation data including an index corresponding to a selected sample and a decoding factor including a subtractive combination of the selected sample and a uniform random variable corresponding to the selected sample.
Other aspects of the disclosure are directed to various systems, apparatuses, non-transitory computer-readable media, user interfaces, and electronic devices.
These and other features, aspects, and advantages of various embodiments of the present disclosure will become better understood with reference to the following description and appended claims. The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate exemplary embodiments of the disclosure and together with the description, serve to explain the relevant principles.
The attached appendix is incorporated into and constitutes a part of this application. The accompanying appendix provides details regarding example embodiments of the systems and methods described herein. The systems and methods of the present disclosure are not limited to the specific example embodiments included in the appendix.
Drawings
A detailed discussion of embodiments directed to one of ordinary skill in the art may be set forth in the specification with reference to the drawings, in which:
fig. 1A depicts a block diagram of an example computing system, according to an example embodiment of the present disclosure.
Fig. 1B depicts a block diagram of an example computing device, according to an example embodiment of the present disclosure.
Fig. 1C depicts a block diagram of an example computing device, according to an example embodiment of the present disclosure.
Fig. 2 depicts a block diagram of an example compression model, according to an example embodiment of the present disclosure.
Fig. 3 depicts a block diagram of an example compression model, according to an example embodiment of the present disclosure.
Fig. 4 depicts a block diagram of an example system for compressing data, according to an example embodiment of the disclosure.
Fig. 5 depicts a flowchart of an example method of data compression, according to an example embodiment of the present disclosure.
FIG. 6 depicts a flowchart of an example method for compressing computer-readable data with improved efficiency, according to an example embodiment of the disclosure.
Fig. 7 depicts a flowchart of an example method of encoding input data with improved computational and statistical efficiency, according to an example embodiment of the present disclosure.
Detailed Description
SUMMARY
Example aspects of the present disclosure are directed to systems and methods that are capable of compressing data (e.g., images, tensors, etc.) to reduce the amount of stored and/or transmitted data needed to preserve information. As one example, the data may be image data (e.g., RGB image data, CYMB image data, etc.). One example method of compressing data may be to employ one or more machine learning models (such as neural networks, convolutional neural networks, recurrent neural networks, etc.) to compress, decompress, store, and/or transmit the data. For example, one or more machine learning models may be employed in the encoder and/or decoder. The encoder may receive input data and, in response to receipt of the input data, generate encoded data according to an encoding scheme. The encoded data may be stored and/or transmitted (e.g., via or over a channel) to a decoder. The decoder may receive encoded data and, in response to receipt of the encoded data, generate output data that at least closely approximates the input data and/or is identical to the input data.
For example, one example approach to end-to-end training lossy compression optimizes rate-distortion loss in the form of:
where f is the encoder, g is the decoder, P is the probability mass function, and
More specifically, the information may be stored as data in the computing system. The data may represent words, numbers, or other suitable types of information in a format that can be processed and/or otherwise interpreted by a computing system. For example, data may be represented as a collection of numbers (e.g., bits) in a memory device. Example memory devices include, but are not limited to, non-transitory computer-readable storage media such as RAM, ROM, EEPROM, EPROM, flash memory devices, disks, etc., and combinations thereof.
It may be desirable to reduce the amount of memory and/or other computing resources used to store and/or transfer information. For example, it may be desirable to reduce the data size used to store information. As another example, it may be desirable to reduce the number of bits that must be transmitted in order to fully transmit the information in the data. Techniques to reduce the size of data are referred to as data compression techniques. Lossless compression refers to compression techniques that allow data to be compressed and subsequently decompressed without loss of information. Lossy compression refers to compression techniques that introduce unrecoverable errors into the data after compression and/or decompression, resulting in a loss of information. For example, lossy compression techniques may slightly increase and/or decrease the value represented by the data. As another example, lossy compression techniques may result in a loss of precision associated with the data. As another example, lossy compression techniques may introduce blurring or other distortions to the image.
While it may be desirable to reduce or eliminate information loss, lossy compression may allow a significant reduction in data size compared to lossless compression, so that some applications may choose to use lossy compression rather than lossless compression. For example, in many cases, errors introduced by lossy compression do not significantly affect the functionality of the data. Nevertheless, it is desirable to reduce the error associated with lossy compression while at least partially maintaining the improved compression size from lossy compression.
Deep learning (e.g., machine learning, such as by one or more machine learning models) research into lossy compression (e.g., image compression) has made tremendous progress. End-to-end trained neural networks have improved, sometimes even better, than the best manually designed compression schemes. However, efficient but easily optimized computational complexity, temporal inconsistencies, and perceptual metrics still present challenges for deep learning approaches such as neural networks. Practical lossy compression schemes may rely on quantization to compute a discrete representation that can be digitally transmitted. Quantization is an indiscernible operation and therefore can prevent direct optimization of the encoder via back-propagation. Therefore, it is often desirable to perform approximate quantization to approximate so-called "hard" quantization.
One approach to approximate quantization is to replace hard quantization with differentiable approximations during training, but use hard quantization during test time. However, this creates a mismatch between training and testing times and may negatively impact performance. Another alternative is to get rid of quantization altogether. For example, the systems and methods may communicate information in different ways at training and testing times. The core of this approach is the recognition that samples from a possibly continuous distribution can be transmitted using a limited number of bits. This is the well-known inverse shannon theorem. However, some existing implementations of this approach tend to be either computationally expensive or statistically inefficient. For example, they may require more bits than they transmit information.
Some example aspects of the present disclosure bridge the gap between two methods of processing quantization. According to example aspects of the present disclosure, one approach to learning an encoder for compression (e.g., lossy compression) may be to use additive noise (e.g., uniform noise) during training. The noise may be an approximation of the test time quantization. A uniform noise channel can also be achieved at test time using universal quantization. This may eliminate any mismatch between the training and testing phases while maintaining a fully differentiable loss function. Implementing a uniformly noisy channel may be a special case of the more general problem of transmitting samples, which may be computationally difficult without assumptions about their distribution. The uniform noise profile can be both effective and easy to implement, and is therefore particularly beneficial from a practical standpoint. Finally, quantization can be obtained as a limit case for a soft quantizer applied to uniformly noisy channels, bridging the compression with quantization and without quantization.
Some other example aspects of the disclosure may provide for transmitting samples from a distribution that need not be uniformly distributed (e.g., where the noise need not be uniform noise). For example, some example aspects of the present disclosure may be directed to a hybrid algorithm that may transmit samples from an arbitrary smooth target distribution with improved computational efficiency, especially if a large portion of the relevant information to be transmitted is contained in a support set (support) of the target distribution. According to example aspects of the present disclosure, a plurality of candidate samples may be extracted from a uniform distribution having the same or larger support set as the target distribution. An index corresponding to a selected sample of the plurality of candidate samples may be identified (e.g., by a reverse channel coding algorithm) such that the selected sample has a target distribution. Since the uniform distribution is related to the target distribution (e.g., by having an equivalent or larger support set), this may provide a reduced number of candidate samples compared to applying reverse channel coding directly to candidate samples extracted from the fixed distribution. The uniform distribution and the candidate samples drawn from it are unknown to the receiver who can only access the fixed distribution. However, if the candidate sample is generated using generalized quantization as described herein, the candidate sample may be reconstructed at the receiver based at least in part on a rounded subtractive combination of the input data and the selected sample (which is transmitted to the receiver with the index).
Systems and/or methods according to example aspects of the present disclosure may achieve a variety of technical effects and/or benefits, including, for example, improvements to computing technologies. As one example, example aspects of the present disclosure may provide an improved compression scheme for computer-readable data. The improved compression scheme may have, for example, reduced errors between the input data and the output data, better compression characteristics (e.g., data reduction), better reliability and/or robustness, improved noise description, and/or various other advantages. The improved image and video data compression provided by example aspects of the present disclosure may improve the global distribution and/or diffusion of video, images, and other media.
One approach for approximate quantization is to replace (e.g., hard) rounding with uniform noise during training. As used herein, so-called "hard" rounding refers to rounding with a discrete, discontinuous rounding threshold (e.g., a rounding function in which each number less than the threshold, such as the midpoint between intervals, is rounded down to the nearest interval, while other numbers are rounded up to the nearest interval). Unlike some other methods without quantization compression, such noisy channels can be easily implemented in a way that is both statistically and computationally efficient for small and large amounts of information. One example channel is a uniformly noisy channel, represented as:
z＝f(x)+U,U～U([-0.5,0.5) D )。
according to an example aspect of the disclosure, the noise is considered a form of compression without quantization (e.g., as opposed to a simple approximation). From a computational and statistical perspective, a uniform noise channel is easily modeled efficiently using noisy channels. This makes it feasible to use low-dimensional and high-dimensional sets of coefficients at test time. Smooth interpolation between uniform noise and hard quantization is possible while preserving differentiability.
According to example aspects of the present disclosure, uniform noise may also be integrated analytically when calculating the gradient, and in some cases significantly reduce their variance. A better match between the training and testing phases can improve performance even in settings where hard quantization is known to be optimal.
Instead of approximating quantization or relying on a shoot-through gradient estimate during training, systems and methods according to example aspects of the present disclosure may employ differentiable channels, thereby eliminating any need for approximation. Techniques to model noisy channel q (z | x) may require generation of magnitude expD for each input vector x to be transmitted KL [q Z|x ||p Z ]Sample z of (2) n ～p Z . The encoder selects a single sample and transmits its index n, which the decoder then uses to reconstruct the sample.
A trade-off is observed because the mutual information I [ X, Z ] is the lower bound of the average Kullback-Leibler divergence. It is desirable to keep divergence small to limit computational cost, for example by encoding coefficient blocks separately. However, the information transmitted is desirably large enough to keep the statistical overhead small.
In addition to and/or instead of uniform noise, other types of noise may be added according to example aspects of the present disclosure. While the method of utilizing uniform noise may be statistically and computationally efficient, it may only allow for the transmission of samples from a simple uniform distribution.
One method of including other noise may be generalization to lattice quantizers. Let Λ be a crystal lattice, and Q Λ (y) is the nearest neighbor of y in the lattice. In addition, let
Q Λ (y-U)+U～y+U。
for a particular lattice and in high dimensional space, U will approximate a gaussian distribution. Thus, a generalized quantization can be used to approximate an additive white gaussian noise channel.
Another method of obtaining gaussian noise is described below. Let S be a positive random variable independent of Y and U-U ([ -0.5, 0.5)). And S and U are known to both the encoder and decoder. Then, for another uniform random variable U':
if it is not
H[K|U,S]＝I[Y,(Z,S)]≥I[Y,Z]
wherein Z = Y + SU'. If (Z, S) is data to be transmitted, only as many bits as the information to be transmitted are used.
According to example aspects of the present disclosure, generic quantization may be employed in the inference phase to achieve noisy channels for use during the training phase, thereby providing improved compression characteristics. For a given
For a given coefficient y, the encoder may compute the dispersion
wherein p is density, and U to U ([ -0.5, 0.5) D ) Is a random vector of uniform noise. If the distortion is the mean square error and λ =1, then this method can be considered as training a variational auto-encoder, where the encoder distribution is conditionally uniform.
In order to model the rate term in the loss function, it is necessary to model the density p (f (x) + U). Cumulative distribution c of density of Y + U via Y Y Modeled as p Y+U (y)＝c Y (y+0.5)-c Y (y-0.5) (corresponding to p Y Convolved with a unit width box). This can be summarized as h (Y) + U (where
Another advantage of generic quantization over other approximate or non-quantized compression schemes is that it is more computationally efficient. Its computational complexity only grows linearly with the number of coefficients to be transmitted, not exponentially with the Kullback-Leibler divergence.
The common quantization, U, can be applied using the same shift for all coefficients i ＝U j . This form of universal quantization may be different from adding the same or separate noise during training. Adding the same noiseAdding to different coefficients does not create an information bottleneck, since the decoder can recover the noise using a single coefficient that is always zero, thus recovering the exact values of the other coefficients. Furthermore, correlated noise may lead to irreducibility. Thus, according to example aspects of the present disclosure, in some embodiments, independent noise may be used.
The general quantization can be made similar to quantization. For example, applying rounding as the last step of the encoder and again as the first step of the decoder may be performed by
Wherein parameter α controls the approximate fidelity:
given z = s α (y) + U, if our goal is to minimize the MSE for y, rather than the second soft rounding, then the reconstruction can be obtained by:
In addition, probability
wherein s is α (z+1)＝s α (z) +1. This form is assumed for r α . It is noted that,
When alpha is larger, s α And r α The derivative of (a) tends to approach zero with a large probability and to be very large with a small probability. This results in a potentially large variance in the gradient of the encoder. To compensate for this, the uniform noise can be analytically integrated as follows.
Setting h:
to get a low variance estimate of the desired derivative, many samples of U may be averaged. However, the following equation is also true:
that is, the desired gradient may be computed analytically with finite differences. Furthermore, this equation can be used to calculate the desired derivative even when f is not differentiable.
Now consider a case where h is applied pointwise to a vector y + U (where U (0.5, 0.5)) D ) Followed by a multivariable function
wherein the third equation is approximated by assuming partial derivatives
Accordingly, aspects of the present disclosure may allow for reducing the variance of the gradient during back propagation by: the forward pass may be calculated in a standard manner (e.g., evaluating l (h (y + u))) but in the reverse pass, the derivative is calculated for the sampling instance u
Consider a model in which soft rounding follows the encoder, y = s α (f (x)), and using a factorial entropy model. The rate-distortion loss becomes:
this equation can be applied directly to the rate term to calculate the gradient of y without any approximation. For the distortion term, we use
As used herein, various symbols may indicate various mathematical functions and elements. For example, Z represents a continuous random vector. Z represents a continuous random variable. K represents a discrete random variable. z represents a scalar observation. z represents a vector observation. p is a radical of formula Z (z) represents a continuous probability density function. P K (k) = Pr (K = K) represents a discrete probability mass function. H [ K ]]Representing discrete entropy. h [ Z ]]Representing differential entropy.
Further, some example aspects of the disclosure may provide for transmitting samples from any continuous distribution across channels. For example, example aspects of the present disclosure may provide a computer-implemented method of encoding input data with improved computational and statistical efficiency. The method may include obtaining, by a computing system including one or more computing devices, input data associated with the computing system. For example, the input data may be data to be compressed.
The method may include obtaining, by the computing system, data indicative of the target distribution based at least in part on the input data. For example, the target distribution may be a conditional distribution based on the input data. The method may also include determining, by the computing system, a uniform distribution based at least in part on the target distribution. For example, the uniform distribution may have at least a target distribution of support sets. For example, a support set may be defined by a range from a minimum value to a maximum value. The uniformly distributed support set may have at least one or both of a minimum value below a minimum value of the target distribution and/or a maximum value above a maximum value of the target distribution. As one example, the support set for the target distribution may be limited to the interval [ c-0.5, c + 0.5), where c is the input. In some embodiments, a target distribution with a different support set may be transformed to have such a support set, for example, by scaling the distribution with the limited support set until the support set is less than one, or by approximating the distribution with the infinite support set (e.g., gaussian) to the distribution with the limited support set (e.g., truncated gaussian). In some embodiments, the target distribution may be an approximate gaussian with variance of 1 and random mean. Samples from a truncated gaussian can be used instead of samples from a true gaussian.
The method may include obtaining, by the computing system, a plurality of (e.g., candidate) samples from the uniform distribution. For example, multiple samples may be extracted from a uniform distribution, and each sample may be assigned an index.
The method may include identifying, by the computing system, an index corresponding to a selected sample from the plurality of samples that are uniformly distributed such that the selected sample is distributed according to a target distribution. For example, according to example aspects of the present disclosure, multiple samples may be scored. As one example, in some implementations, identifying, by the computing system, an index corresponding to a selected sample of the plurality of samples may include, for at least one sample of the plurality of samples, iteratively scoring the sample based at least in part on the target distribution, and selecting the sample as the selected sample if the score of the sample is less than or equal to the target score. For example, the target score may be the index sum of the indices of the plurality of samples divided by the maximum of the target distribution. As one example, if the minimum possible weight is known (or some other target weight), the sample may be selected once the product of the sample value and the minimum weight exceeds the sample value multiplied by the ratio of the fixed distribution to the target distribution for all values (e.g., the bounds of the density ratio weight).
The method may include transmitting, by the computing system, the encoded sample representation data. The encoded sample representation data may include an index corresponding to the selected sample and a decoding factor including a rounding difference between the selected sample and a uniform random variable corresponding to the selected sample. For example, in some embodiments, the encoder and decoder may have access to a uniform random variable U n A shared random source of form. Each U n Can pass through
In some cases, a uniformly distributed edge distribution may not be guaranteed to be uniform. Thus, in some embodiments, the sample may be transformed by replacing the sample with a cumulative density function of the edge distribution of the sample and a product of the index and a width M, where the width M is ideally large but small enough such that the support set of each target distribution is defined by one. The transform may be applied such that the transformed samples are transmitted and the inverse of the samples are applied after decoding to obtain the original samples.
In order to entropy encode the coded sample representative data, it may be necessary to know the distribution. In some implementations, the empirical distribution can be used for indexing. Additionally and/or alternatively, if the average conditional entropy of the samples is known, the Zipf distribution can be used to achieve the coding bound. Since the decoder can reconstruct the uniform distribution from the indices, the uniform distribution can also be used to encode the decoding factors. In particular, with a single model of the edge distribution of the samples, the probability of any conditional distribution over the decoding factors can be derived. The transform may additionally make the decoding factors independent of the uniform distribution.
In some cases, it may be desirable to know the minimum weight, or minimum of the ratio of the fixed distribution to the target distribution. For example, the minimum weight may be represented by a value having a minimum ratio of the fixed distribution and the target distribution. According to the system and method of the present disclosure, since reverse channel coding is applied to target distribution and uniform distribution, the minimum weight for the purpose of algorithm may be represented by the minimum weight w min And the width M.
Example apparatus and System
Fig. 1A depicts a block diagram of an example computing system 100 that performs data compression in accordance with an example embodiment of the present disclosure. The system 100 includes a user computing device 102, a server computing system 130, and a training computing system 150 communicatively coupled via a network 180.
The user computing device 102 may be any type of computing device, such as a personal computing device (e.g., laptop or desktop), a mobile computing device (e.g., smartphone or tablet), a gaming console or controller, a wearable computing device, an embedded computing device, or any other type of computing device.
The user computing device 102 includes one or more processors 112 and memory 114. The one or more processors 112 may be any suitable processing device (e.g., processor core, microprocessor, ASIC, FPGA, controller, microcontroller, etc.) and may be an operatively connected processor or processors. Memory 114 may include one or more non-transitory computer-readable storage media, such as RAM, ROM, EEPROM, EPROM, flash memory devices, disks, etc., and combinations thereof. The memory 114 may store data 116 and instructions 118 that are executed by the processor 112 to cause the user computing device 102 to perform operations.
In some implementations, the user computing device 102 can store or include one or more compression models 120. For example, the compression model 120 may be or may otherwise include various machine learning models, such as a neural network (e.g., a deep neural network) or other types of machine learning models, including non-linear models and/or linear models. The neural network may include a feed-forward neural network, a recurrent neural network (e.g., a long-short term memory recurrent neural network), a convolutional neural network, or other form of neural network. An example compression model 120 is discussed with reference to fig. 2-4.
In some implementations, the one or more compression models 120 can be received from the server computing system 130 over the network 180, stored in the user computing device memory 114, and then used or otherwise implemented by the one or more processors 112. In some implementations, the user computing device 102 can implement multiple parallel instances of a single compression model 120 (e.g., perform parallel compression across multiple instances of a compression service).
More specifically, the compression model 120 may include one or more encoder and/or decoder models. The encoder model may be configured to receive input data and, in response to receipt of the input data, generate encoded data that is transmitted to the decoder model (e.g., at the user computing device 102, the server computing system 130 (e.g., the model 140), another user computing device 102, and/or any other suitable location). The decoder model may be configured to receive encoded data and, in response to receipt of the encoded data, generate output data (e.g., decoded data) that closely approximates and/or replicates the input data. For example, computing system 100 may be configured for uploading (e.g., an encoder at user computing device 102 and/or a decoder at server computing system 130) and/or downloading (e.g., a decoder at user computing device 102 and/or an encoder at server computing system 130).
According to example aspects of the disclosure, a noisy channel may be used to introduce noise at encoded data during a training time and a testing time to eliminate a mismatch between the training time and the testing time. For example, the noisy channel may include uniform noise, gaussian noise, and the like.
Additionally or alternatively, one or more compression models 140 may be included in a server computing system 130 in communication with the user computing device 102 according to a client-server relationship, or otherwise stored and implemented by the server computing system 130. For example, the compression model 140 may be implemented by the server computing system 140 as part of a web service (e.g., a compressed data transmission service). Thus, one or more models 120 may be stored and implemented at the user computing device 102, and/or one or more models 140 may be stored and implemented at the server computing system 130.
The user computing device 102 may also include one or more user input components 122 that receive user input. For example, the user input component 122 may be a touch-sensitive component (e.g., a touch-sensitive display screen or touchpad) that is sensitive to touch by a user input object (e.g., a finger or stylus). The touch sensitive component may be used to implement a virtual keyboard. Other example user input components include a microphone, a conventional keyboard, or other devices that a user may use to provide user input.
The server computing system 130 includes one or more processors 132 and memory 134. The one or more processors 132 may be any suitable processing device (e.g., processor core, microprocessor, ASIC, FPGA, controller, microcontroller, etc.) and may be an operatively connected processor or processors. Memory 134 may include one or more non-transitory computer-readable storage media, such as RAM, ROM, EEPROM, EPROM, flash memory devices, disks, etc., and combinations thereof. Memory 134 may store data 136 and instructions 138 that are executed by processor 132 to cause server computing system 130 to perform operations.
In some implementations, the server computing system 130 includes or is otherwise implemented by one or more server computing devices. Where the server computing system 130 includes multiple server computing devices, such server computing devices may operate according to a sequential computing architecture, a parallel computing architecture, or some combination thereof.
As described above, the server computing system 130 may store or otherwise include one or more machine learning compression models 140. For example, the model 140 may be or may include various machine learning models. Example machine learning models include neural networks or other multi-layered nonlinear models. Example neural networks include feed-forward neural networks, deep neural networks, recurrent neural networks, and convolutional neural networks. An example model 140 is discussed with reference to fig. 2-4.
The user computing device 102 and/or the server computing system 130 may train the models 120 and/or 140 via interaction with a training computing system 150 communicatively coupled through a network 180. Training computing system 150 may be separate from server computing system 130 or may be part of server computing system 130.
In particular, the model trainer 160 may train the compression models 120 and/or 140 based on a set of training data 162. Training data 162 may include, for example, image data, matrix data, or any other suitable data. According to example aspects of the present disclosure, training data may be quantified by a universal quantization at training time and inference time to eliminate mismatches between training time and inference time.
In some implementations, the training examples may be provided by the user computing device 102 if the user has provided consent. Thus, in such implementations, the model 120 provided to the user computing device 102 may be trained by the training computing system 150 according to user-specific data received from the user computing device 102. In some cases, this process may be referred to as personalizing the model.
The model trainer 160 includes computer logic for providing the desired functionality. Model trainer 160 may be implemented in hardware, firmware, and/or software that controls a general purpose processor. For example, in some embodiments, model trainer 160 includes program files stored on a memory device, loaded into memory, and executed by one or more processors. In other embodiments, model trainer 160 includes one or more sets of computer-executable instructions stored in a tangible computer-readable storage medium, such as a RAM hard disk or an optical or magnetic medium.
FIG. 1A illustrates one example computing system that may be used to implement the present disclosure. Other computing systems may also be used. For example, in some implementations, the user computing device 102 may include a model trainer 160 and a training data set 162. In such implementations, the model 120 may be both trained and used locally at the user computing device 102. In some such implementations, the user computing device 102 may implement a model trainer 160 to personalize the model 120 based on user-specific data.
FIG. 1B depicts a block diagram of an example computing device 10, performed in accordance with an example embodiment of the present disclosure. Computing device 10 may be a user computing device or a server computing device.
As shown in fig. 1B, each application may communicate with a plurality of other components of the computing device, such as one or more sensors, a context manager, a device state component, and/or additional components. In some implementations, each application can communicate with each device component using an API (e.g., a public API). In some embodiments, the API used by each application is specific to that application.
Fig. 1C depicts a block diagram of an example computing device 50, performed in accordance with an example embodiment of the present disclosure. Computing device 50 may be a user computing device or a server computing device.
The central smart tier includes a plurality of machine learning models. For example, as shown in FIG. 1C, a respective machine learning model (e.g., model) may be provided for each application and managed by a central intelligence layer. In other embodiments, two or more applications may share a single machine learning model. For example, in some embodiments, the central smart inlay may provide a single model (e.g., a single model) for all applications. In some embodiments, the central smart inlay is included in the operating system of the computing device 50, or is otherwise implemented by the operating system of the computing device 50.
The central smart inlay may communicate with a central device data plane. The central device data layer may be a centralized data repository for the computing device 50. As shown in fig. 1C, the central device data layer may communicate with a plurality of other components of the computing device, such as one or more sensors, a context manager, a device state component, and/or additional components. In some implementations, the central device data layer can communicate with each device component using an API (e.g., a proprietary API).
In some implementations, the input to the machine learning model(s) (e.g., 120, 140) of the present disclosure can be image data. The machine learning model(s) may process the image data to generate an output. As an example, the machine learning model(s) may process the image data to generate an image recognition output (e.g., an identification of the image data, a potential embedding of the image data, an encoded representation of the image data, a hash of the image data, etc.). As another example, the machine learning model(s) may process the image data to generate an image segmentation output. As another example, the machine learning model(s) may process the image data to generate an image classification output. As another example, the machine learning model(s) may process the image data to generate an image data modification output (e.g., alteration of the image data, etc.). As another example, the machine learning model(s) may process the image data to generate an encoded image data output (e.g., an encoded and/or compressed representation of the image data, etc.). As another example, the machine learning model(s) may process the image data to generate an upgraded image data output. As another example, the machine learning model(s) may process the image data to generate a prediction output.
In some implementations, the input to the machine learning model(s) of the present disclosure can be text or natural language data. The machine learning model(s) may process textual or natural language data to generate an output. For example, the machine learning model(s) may process natural language data to generate a language coded output. As another example, the machine learning model(s) may process text or natural language data to generate potential text-embedded output. As another example, the machine learning model(s) may process text or natural language data to generate translation output. As another example, the machine learning model(s) may process text or natural language data to generate a classification output. As another example, the machine learning model(s) may process text or natural language data to generate a text segmentation output. As another example, the machine learning model(s) may process text or natural language data to generate a semantic intent output. As another example, the machine learning model(s) may process textual or natural language data to generate upgraded textual or natural language output (e.g., textual or natural language data of higher quality than the input text or natural language, etc.). As another example, the machine learning model(s) may process textual or natural language data to generate a prediction output.
In some implementations, the input to the machine learning model(s) of the present disclosure can be speech data. The machine learning model(s) may process the speech data to generate an output. For example, the machine learning model(s) may process speech data to generate speech recognition output. As another example, the machine learning model(s) may process speech data to generate a speech translation output. As another example, the machine learning model(s) may process speech data to generate potential embedded output. As another example, the machine learning model(s) may process speech data to generate an encoded speech output (e.g., an encoded and/or compressed representation of the speech data, etc.). As another example, the machine learning model(s) may process the speech data to generate an upgraded speech output (e.g., speech data of higher quality than the input speech data, etc.). As another example, the machine learning model(s) may process speech data to generate a textual representation output (e.g., a textual representation of the input speech data, etc.). As another example, the machine learning model(s) may process speech data to generate a prediction output.
In some implementations, the input to the machine learning model(s) of the present disclosure can be potentially encoded data (e.g., a potential spatial representation of the input, etc.). The machine learning model(s) may process the latent encoding data to generate an output. For example, the machine learning model(s) may process the potentially encoded data to generate the recognition output. As another example, the machine learning model(s) may process the potentially encoded data to generate a reconstructed output. As another example, the machine learning model(s) may process the potentially encoded data to generate a search output. As another example, the machine learning model(s) may process the potential encoding data to generate a re-clustering output. As another example, the machine learning model(s) may process the potentially encoded data to generate a prediction output.
In some implementations, the input to the machine learning model(s) of the present disclosure can be statistical data. The machine learning model(s) may process the statistics to generate an output. For example, the machine learning model(s) may process the statistics to generate recognition output. As another example, the machine learning model(s) may process the statistics to generate a prediction output. As another example, the machine learning model(s) may process the statistics to generate a classification output. As another example, the machine learning model(s) may process the statistics to generate a segmentation output. As another example, the machine learning model(s) may process the statistics to generate a segmentation output. As another example, the machine learning model(s) may process the statistics to generate a visual output. As another example, the machine learning model(s) may process the statistics to generate a diagnostic output.
In some embodiments, the input to the machine learning model(s) of the present disclosure may be sensor data. The machine learning model(s) may process the sensor data to generate an output. For example, the machine learning model(s) may process sensor data to generate recognition output. As another example, the machine learning model(s) may process sensor data to generate a predicted output. As another example, the machine learning model(s) may process sensor data to generate classification outputs. As another example, the machine learning model(s) may process sensor data to generate a segmented output. As another example, the machine learning model(s) may process sensor data to generate a segmented output. As another example, the machine learning model(s) may process sensor data to generate a visual output. As another example, the machine learning model(s) may process sensor data to generate a diagnostic output. As another example, the machine learning model(s) may process sensor data to generate detection output.
Example model arrangements
Fig. 2 depicts a block diagram of an example compression model 200, according to an example embodiment of the present disclosure. In some implementations, the compression model 200 is trained to receive a set of input data 204 and, as a result of receiving the input data 204, provide output data 206 that approximates and/or reconstructs the input data. Accordingly, in some embodiments, the compression model 200 may include an encoder model and/or a decoder model 202 operable to encode and/or decode input data 204 in accordance with example aspects of the present disclosure.
Fig. 3 depicts a block diagram of an example compression model 300, according to an example embodiment of the present disclosure. The compression model 300 is similar to the compression model 200 of fig. 2, except that the compression model 300 further includes an encoder model 302 configured to produce encoded data 304 from the input data 204 and a decoder model 306 configured to produce the output data 206 from the encoded data 304. The encoder model 302 and/or the decoder model 306 may be
Fig. 4 depicts a block diagram of an example compression model 400, according to an example embodiment of the present disclosure. The compression model 400 may receive input data 402 and produce output data 404 that approximates the input data 402. The compression model 400 may be distributed among multiple computing devices. For example, noisy channel 410, soft rounding function 412, and/or general quantization 414 may be applied at a first computing device, and/or reconstructor function 416 and/or decoder model 418 may be applied at a second computing device (e.g., remote from and/or separate from the first computing device).
The noisy channel 410 may apply noise (e.g., uniform noise) to the input data 402. The soft rounding function 412 may round the input data 402 with the applied noise based on a continuous rounding function to produce rounded data. Generic quantization 414 may encode the rounded data for transmission to decoder model 418. The reconstructor function 416 may reconstruct the encoded data, mitigating the effects of uniform noise, prior to the decoder model 418.
Example method
Fig. 5 depicts a flowchart of an example method of performing data compression in accordance with an example embodiment of the present disclosure. Although fig. 5 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particular illustrated order or arrangement. The various steps of the method 500 may be omitted, rearranged, combined, and/or modified in various ways without departing from the scope of the present disclosure.
At 502, method 500 may include obtaining, by a computing system including one or more processors, input data. For example, the input data may be image data.
At 504, the method 500 may include providing, by the one or more processors, the input data to the machine learning encoder model. For example, a machine-learned encoder model may include one or more neural networks trained to function as encoders. The machine learning encoder model may receive input data and, in response to receipt of the input data, output encoded data as a result.
At 506, method 500 may include encoding, by a machine learning encoder model, the input data and additive noise from the noisy channel to produce encoded data. For example, a noisy channel may provide uniform noise, gaussian noise, independent noise, and the like. As one example, the machine-learned encoder model may apply quantization, rounding (e.g., soft rounding), or other permutations to encode the input data. For example, in some embodiments, encoding may include additively combining additive noise and input data to obtain noisy input data, rounding the noisy input data by a soft rounding function having a sharpness α to produce rounded data comprising a set of coefficients, and inputting the rounded data into a machine-learned encoder model to produce encoded data.
At 508, method 500 may include receiving, by one or more processors, encoded data from a machine learning encoder model. Further, at 510, the method 500 may include providing, by the one or more processors, the encoded data to a machine learning decoder model. In some embodiments, these steps may be the same. The machine learning decoder model may receive encoded data and, in response to receipt of the encoded data, provide output data that approximates or replicates the input data. A penalty may be defined between the output data and the input data.
At 512, the method 500 may include decoding, by the machine learning decoder, the encoded data to produce decoded data. For example, the decoder may perform an inverse function to reconstruct the input data from the encoded data. As one example, a decoder may apply a reconstruction function and/or a soft rounding function to remove the effect of noise on the input data. At 514, method 500 may include receiving, by one or more processors, decoded data from a machine learning decoder model.
Fig. 6 depicts a flowchart of an example method of performing data compression according to an example embodiment of the disclosure. Although fig. 6 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particular illustrated order or arrangement. The various steps of the method 600 may be omitted, rearranged, combined, and/or modified in various ways without departing from the scope of the present disclosure.
At 602, the method 600 may include obtaining, by a computing system comprising one or more computing devices, input data associated with the computing system. For example, the input data may be data to be compressed. At 604, method 600 can include encoding, by a computing system, input data and additive noise from a noisy channel based at least in part on an encoder model to produce encoded data. For example, encoding the input data and the additive noise may include additively combining the additive noise and the input data to obtain noisy input data and rounding the noisy input data by a soft rounding function, the soft rounding function having sharpness, to produce encoded data. The machine learning encoder model may be trained on training data that is encoded with additive noise from a noisy channel.
At 606, method 600 may include obtaining encoded data. For example, the encoded data may be transmitted from an encoder model (e.g., an encoder computing system) to a decoder model (e.g., a decoder computing system). Additionally and/or alternatively, the encoded data may be stored and retrieved at a later time. The encoded data may be based at least in part on the input data and additive noise from a noisy channel, where the encoded data is encoded by additively combining the additive noise and the input data to obtain noisy input data and rounding the noisy input data with a soft rounding function having a sharpness to produce the encoded data.
At 608, the method 600 may include applying, by the computing system, a reconstruction defined by an expected value of the given smooth generic quantization approximation to reconstruct the approximated input data. In some embodiments, the gradient of the approximated input data is calculated without any loss of the distortion term including the expected value of the derivative of the loss function. In some embodiments, the machine-learned encoder model is trained on training data, where the training data is encoded with additive noise from a noisy channel.
Fig. 7 depicts a flowchart of an example method of performing data compression in accordance with an example embodiment of the present disclosure. Although fig. 7 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particular illustrated order or arrangement. The various steps of the method 700 may be omitted, rearranged, combined, and/or modified in various ways without departing from the scope of the present disclosure.
At 702, the method 700 may include obtaining, by the computing system, data indicative of the target distribution based at least in part on the input data. For example, the target distribution may be a conditional distribution based on the input data. At 704, method 700 may additionally include determining, by the computing system, a uniform distribution based at least in part on the target distribution. For example, the uniform distribution may have at least a target distribution of support sets. For example, a support set may be defined by a range from a minimum value to a maximum value. The uniformly distributed support set may have at least one or both of a minimum value below a minimum value of the target distribution and/or a maximum value above a maximum value of the target distribution. As one example, the support set for the target distribution may be limited to the interval [ c-0.5, c + 0.5), where c is the input. In some embodiments, a target distribution with a different support set may be transformed to have such a support set, for example, by scaling the distribution with the limited support set until the support set is less than one, or by approximating the distribution with the infinite support set (e.g., gaussian) to the distribution with the limited support set (e.g., truncated gaussian). In some embodiments, the target distribution may be an approximate gaussian with variance of 1 and random mean. Samples from a truncated gaussian can be used instead of samples from a true gaussian.
At 706, the method 700 may include obtaining, by the computing system, a plurality of (e.g., candidate) samples from the uniform distribution. For example, multiple samples may be extracted from a uniform distribution, and each sample may be assigned an index.
At 708, the method 700 may include identifying, by the computing system, an index corresponding to a selected sample from the uniformly distributed plurality of samples such that the selected sample is distributed according to the target distribution. For example, according to example aspects of the present disclosure, multiple samples may be scored. As one example, in some implementations, identifying, by the computing system, an index corresponding to a selected sample of the plurality of samples may include, for at least one sample of the plurality of samples, iteratively scoring the sample based at least in part on the target distribution, and selecting the sample as the selected sample if the score of the sample is less than or equal to the target score. For example, the target score may be the index sum of the indices of the plurality of samples divided by the maximum of the target distribution. As one example, if the minimum possible weight is known (or some other target weight), the sample may be selected once the product of the sample value and the minimum weight exceeds the sample value multiplied by the ratio of the fixed distribution to the target distribution for all values (e.g., the bounds of the density ratio weight).
At 710, the method 700 may include transmitting, by the computing system, the encoded sample representation data. The encoded sample representation data may include an index corresponding to the selected sample and a decoding factor including a rounding difference between the selected sample and a uniform random variable corresponding to the selected sample. For example, in some embodiments, the encoder and decoder may have access to a uniform random variable U n A shared random source of form. Each U n Can pass through
In some cases, a uniformly distributed edge distribution may not be guaranteed to be uniform. Thus, in some embodiments, the sample may be transformed by replacing the sample with a cumulative density function of the edge distribution of the sample and a product of the index and a width M, where the width M is ideally large but small enough such that the support set of each target distribution is defined by one. The transform may be applied such that the transformed samples are transmitted and the inverse of the samples are applied after decoding to obtain the original samples.
In order to entropy encode the coded sample representative data, it may be necessary to know the distribution. In some implementations, empirical distributions can be used for indexing. Additionally and/or alternatively, if the average conditional entropy of the samples is known, the Zipf distribution can be used to achieve the coding boundary. Since the decoder can reconstruct the uniform distribution from the indices, the uniform distribution can also be used to encode the decoding factors. In particular, with a single model of the edge distribution of the samples, the probability of any conditional distribution over the decoding factors can be derived. The transform may additionally make the decoding factors independent of the uniform distribution.
In some cases, it may be desirable to know the minimum weight, or the minimum of the ratio of the fixed distribution to the target distribution. For example, the minimum weight may be represented by a value having a minimum ratio of the fixed distribution and the target distribution. According to the system and method of the present disclosure, since reverse channel coding is applied to target distribution and uniform distribution, the minimum weight for the purpose of algorithm may be represented by the minimum weight w min And the width M.
Additional disclosure
The technology discussed herein relates to servers, databases, software applications, and other computer-based systems, and the actions taken and information sent to and received from these systems. The inherent flexibility of computer-based systems allows for a variety of possible configurations, combinations, and divisions of tasks and functions between components. For example, the processes discussed herein may be implemented using a single device or component or multiple devices or components operating in combination. Databases and applications may be implemented on a single system or may be distributed across multiple systems. The distributed components may operate sequentially or in parallel.
While the present subject matter has been described in detail with respect to various specific example embodiments thereof, each example can be provided by way of explanation, not limitation of the disclosure. Alterations, modifications, and equivalents may readily occur to those skilled in the art, upon a reading of the foregoing description. Accordingly, the subject disclosure does not preclude inclusion of such modifications, variations and/or additions to the present subject matter as would be readily apparent to one of ordinary skill in the art. For instance, features illustrated or described as part of one embodiment, can be used with another embodiment to yield a still further embodiment. It is therefore contemplated that the present disclosure cover such alternatives, modifications and equivalents.
Claims (20)
1. A computer-implemented method for compressing computer-readable data with improved efficiency, the method comprising:
obtaining, by a computing system comprising one or more computing devices, input data associated with the computing system; and
encoding, by the computing system, the input data and additive noise from a noisy channel based at least in part on a machine-learned encoder model to produce encoded data, wherein encoding the input data and additive noise comprises additively combining the additive noise and the input data to obtain noisy input data and rounding the noisy input data with a soft rounding function, the soft rounding function having a sharpness, to produce the encoded data;
wherein the machine learning encoder model is trained on training data, wherein the training data is encoded with the additive noise from the noisy channel.
2. The computer-implemented method of claim 1, wherein the sharpness gradually increases during training of the machine-learned encoder model.
3. The computer-implemented method of claim 1, wherein the soft rounding function responsive to input comprises a sum of a rounding input and a ratio of a tanh of the sharpness multiplied by a quantization factor to a tanh of half the sharpness.
4. The computer-implemented method of claim 1, wherein the encoder model comprises one or more neural networks.
5. The computer-implemented method of claim 1, wherein the input data comprises image data.
6. The computer-implemented method of claim 1, wherein the additive noise comprises uniform noise.
7. The computer-implemented method of claim 1, wherein the noisy channel is differentiable.
8. The computer-implemented method of claim 1, wherein the noisy input data is quantized by adding uniform noise during training of the machine-learned encoder model and during inference by the machine-learned encoder model through universal quantization.
9. The computer-implemented method of claim 1, wherein the additive noise comprises gaussian noise.
10. The computer-implemented method of claim 1, wherein the noisy channel comprises a lattice quantizer and the additive noise comprises lattice quantization noise.
11. The computer-implemented method of claim 1, wherein the machine learning encoder model is trained by:
during forward pass, the loss is calculated by l (h (y + u)) for sample instance u; and
12. The computer-implemented method of claim 1, wherein the encoder model is trained using a training loss, wherein the training loss comprises a sum over all values of an expectation of a logarithm of a probability of a sum of the input data and a corresponding uniform random variable and an expectation of a decoder model.
13. A computer-implemented method of decoding encoded data, the method comprising:
obtaining, by a computing system comprising one or more computing devices, encoded data that is encoded based at least in part on input data and additive noise from a noisy channel, wherein the encoded data is encoded by additively combining the additive noise and the input data to obtain noisy input data and rounding the noisy input data with a soft rounding function having a sharpness to produce the encoded data; and
applying, by the computing system, a reconstruction defined by the expected value for a given smooth generic quantization approximation to reconstruct the approximated input data.
14. The computer-implemented method of claim 13, wherein the gradient of the approximation input data is calculated without any loss of a distortion term that includes an expected value of a derivative of a loss function.
15. The computer-implemented method of claim 13, wherein the machine-learned encoder model is trained on training data, wherein the training data is encoded with the additive noise from the noisy channel.
16. A computer-implemented method of encoding input data with improved computational and statistical efficiency, the method comprising:
obtaining, by a computing system comprising one or more computing devices, input data associated with the computing system;
obtaining, by the computing system, data indicative of a target distribution based at least in part on the input data;
determining, by the computing system, a uniform distribution based at least in part on the target distribution;
obtaining, by the computing system, a plurality of samples from the uniform distribution;
identifying, by the computing system, an index corresponding to a selected sample from the plurality of samples of the uniform distribution such that the selected sample is distributed according to the target distribution; and
transmitting, by the computing system, encoded sample representation data comprising an index corresponding to the selected sample and a decoding factor comprising a subtractive combination of the selected sample and a uniform random variable corresponding to the selected sample.
17. The computer-implemented method of claim 16, wherein the input data includes parameters of a machine learning model, and wherein the target distribution includes a distribution of parameters of the machine learning model.
18. The computer-implemented method of claim 16, wherein the uniformly distributed support set is at least equal to the target distributed support set.
19. The computer-implemented method of claim 16, wherein identifying, by the computing system, an index corresponding to a selected sample of the plurality of samples comprises:
for at least one sample of the plurality of samples, iteratively scoring the sample based at least in part on the target distribution; and
selecting the sample as the selected sample if the score of the sample is less than or equal to a target score, the target score comprising an exponential sum of the indices of the plurality of samples divided by a maximum of the target distribution.
20. The computer-implemented method of claim 16, wherein the selected sample is transformed into a cumulative density function of an edge distribution of the selected sample and a product of the index and a width of the target distribution.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US202063034172P | 2020-06-03 | 2020-06-03 | |
US63/034,172 | 2020-06-03 | ||
PCT/US2021/035672 WO2021247840A2 (en) | 2020-06-03 | 2021-06-03 | Systems and methods for improved machine-learned compression |
Publications (1)
Publication Number | Publication Date |
---|---|
CN115668777A true CN115668777A (en) | 2023-01-31 |
Family
ID=76662547
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202180040637.1A Pending CN115668777A (en) | 2020-06-03 | 2021-06-03 | System and method for improved machine learning compression |
Country Status (4)
Country | Link |
---|---|
US (1) | US20230299788A1 (en) |
EP (1) | EP4143978A2 (en) |
CN (1) | CN115668777A (en) |
WO (1) | WO2021247840A2 (en) |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN116471585A (en) * | 2023-05-04 | 2023-07-21 | 山东大学 | Task-oriented semantic communication method and system considering privacy protection |
Families Citing this family (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN114448733A (en) * | 2022-04-11 | 2022-05-06 | 广州易道智慧信息科技有限公司 | Encryption transmission model training method and encryption and decryption method for virtual machine vision system |
Family Cites Families (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11544606B2 (en) * | 2018-09-14 | 2023-01-03 | Disney Enterprises, Inc. | Machine learning based video compression |
-
2021
- 2021-06-03 EP EP21735816.7A patent/EP4143978A2/en active Pending
- 2021-06-03 CN CN202180040637.1A patent/CN115668777A/en active Pending
- 2021-06-03 WO PCT/US2021/035672 patent/WO2021247840A2/en unknown
- 2021-06-03 US US18/008,045 patent/US20230299788A1/en active Pending
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN116471585A (en) * | 2023-05-04 | 2023-07-21 | 山东大学 | Task-oriented semantic communication method and system considering privacy protection |
CN116471585B (en) * | 2023-05-04 | 2023-12-15 | 山东大学 | Task-oriented semantic communication method and system considering privacy protection |
Also Published As
Publication number | Publication date |
---|---|
WO2021247840A2 (en) | 2021-12-09 |
WO2021247840A3 (en) | 2022-01-13 |
US20230299788A1 (en) | 2023-09-21 |
EP4143978A2 (en) | 2023-03-08 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11310509B2 (en) | Method and apparatus for applying deep learning techniques in video coding, restoration and video quality analysis (VQA) | |
US10565499B2 (en) | Autoencoding image residuals for improving upsampled images | |
CN111641832B (en) | Encoding method, decoding method, device, electronic device and storage medium | |
KR20200089635A (en) | Systems and methods for image compression at multiple, different bitrates | |
CN115668777A (en) | System and method for improved machine learning compression | |
US20230186166A1 (en) | Compression of Machine-Learned Models via Entropy Penalized Weight Reparameterization | |
JP7168896B2 (en) | Image encoding method and image decoding method | |
CN110753225A (en) | Video compression method and device and terminal equipment | |
García Aranda et al. | Logarithmical hopping encoding: a low computational complexity algorithm for image compression | |
Wang et al. | Improved nonlinear transform source-channel coding to catalyze semantic communications | |
CN112968886B (en) | Vibration signal compression method and device, storage medium and computer equipment | |
JP2022078735A (en) | Image processing device, image processing program, image recognition device, image recognition program, and image recognition system | |
US11979587B2 (en) | Hybrid inter-frame coding using an autoregressive model | |
US20230395086A1 (en) | Method and apparatus for processing of audio using a neural network | |
KR20220065306A (en) | Apparatus and method for successive deep image compression | |
US20230336738A1 (en) | Multi-rate of computer vision task neural networks in compression domain | |
US20230316048A1 (en) | Multi-rate computer vision task neural networks in compression domain | |
US20230334718A1 (en) | Online training computer vision task models in compression domain | |
US20230306239A1 (en) | Online training-based encoder tuning in neural image compression | |
US20230316588A1 (en) | Online training-based encoder tuning with multi model selection in neural image compression | |
US20220321879A1 (en) | Processing image data | |
KR20220077098A (en) | Method and Apparatus for Point Cloud Coding Using Adaptive Dead Sone Quantization | |
US20230012229A1 (en) | Image encoding method, image decoding method, image encoding apparatus, image decoding apparatus and program | |
WO2022229495A1 (en) | A method, an apparatus and a computer program product for video encoding and video decoding | |
Gotoh et al. | Video Compression Method Using Vector Quantization |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |