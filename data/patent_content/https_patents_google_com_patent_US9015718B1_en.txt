US9015718B1 - Identifying task instances that interfere with processor performance - Google Patents
Identifying task instances that interfere with processor performance Download PDFInfo
- Publication number
- US9015718B1 US9015718B1 US13/247,948 US201113247948A US9015718B1 US 9015718 B1 US9015718 B1 US 9015718B1 US 201113247948 A US201113247948 A US 201113247948A US 9015718 B1 US9015718 B1 US 9015718B1
- Authority
- US
- United States
- Prior art keywords
- task
- performance
- instance
- execution
- data associated
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/48—Program initiating; Program switching, e.g. by interrupt
- G06F9/4806—Task transfer initiation or dispatching
- G06F9/4843—Task transfer initiation or dispatching by program, e.g. task dispatcher, supervisor, operating system
- G06F9/4881—Scheduling strategies for dispatcher, e.g. round robin, multi-level priority queues
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/48—Program initiating; Program switching, e.g. by interrupt
- G06F9/4806—Task transfer initiation or dispatching
- G06F9/4843—Task transfer initiation or dispatching by program, e.g. task dispatcher, supervisor, operating system
- G06F9/485—Task life-cycle, e.g. stopping, restarting, resuming execution
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/50—Allocation of resources, e.g. of the central processing unit [CPU]
- G06F9/5005—Allocation of resources, e.g. of the central processing unit [CPU] to service a request
- G06F9/5011—Allocation of resources, e.g. of the central processing unit [CPU] to service a request the resources being hardware resources other than CPUs, Servers and Terminals
- G06F9/5022—Mechanisms to release resources
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2209/00—Indexing scheme relating to G06F9/00
- G06F2209/50—Indexing scheme relating to G06F9/50
- G06F2209/501—Performance criteria
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2209/00—Indexing scheme relating to G06F9/00
- G06F2209/50—Indexing scheme relating to G06F9/50
- G06F2209/504—Resource capping
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y02—TECHNOLOGIES OR APPLICATIONS FOR MITIGATION OR ADAPTATION AGAINST CLIMATE CHANGE
- Y02D—CLIMATE CHANGE MITIGATION TECHNOLOGIES IN INFORMATION AND COMMUNICATION TECHNOLOGIES [ICT], I.E. INFORMATION AND COMMUNICATION TECHNOLOGIES AIMING AT THE REDUCTION OF THEIR OWN ENERGY USE
- Y02D10/00—Energy efficient computing, e.g. low power processors, power management or thermal management
Definitions
- This document relates to managing task performance.
- Systems for large-scale parallel processing can include performing computer tasks and/or processes on a cluster of computers and/or servers (e.g., task parallelism).
- Each computer in the cluster can perform part of a particular task by executing one or more task instances.
- different task instances of a particular task can be performed in parallel on various servers within a cluster of servers and can interact with the same or different data.
- a large number of tasks can be handled on the cluster of servers, and each task can be executed in multiple task instances.
- each task instance executes the same set of software instructions, although the various tasks are typically executed in support of various different processes.
- the tasks can use common resources, such as the CPU, network bandwidth or memory. Because the tasks share these common resources, one task can interfere with the performance of other tasks executing on the same computer. For example, one task can require or use a greater share of the CPU and/or memory than other tasks and can cause the other tasks executed on the computer to have increased task latency or increase the number of CPU cycles needed to complete an instruction.
- common resources such as the CPU, network bandwidth or memory.
- This specification describes techniques for managing task performance, including identifying poorly performing tasks.
- one innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of: receiving an indication that execution of an instance of a first task on a computing device is degraded relative to a performance threshold associated with the first task; collecting performance data associated with the execution of the instance of the first task and performance data associated with execution of a plurality of additional tasks executed on the computing device; for each of the plurality of additional tasks: determining a score for the respective additional task based on the performance data associated with the execution of the instance of the first task and performance data associated with the respective additional task; identifying one or more additional tasks as a potential cause of degraded performance for the instance of the first task based on the scores associated with each of the plurality of additional tasks; and modifying an execution of a particular identified task.
- the method can include modifying the execution of the particular identified task by modifying the execution of the particular identified task to determine whether the particular identified task is a cause of degraded performance for the instance of the first task, wherein the particular identified task is selected from the one or more additional tasks based on a score.
- the particular identified task can include a highest ranked task in a ranking of the one or more identified additional tasks, a highest ranked task other than a high priority task or a task with a score above a predetermined score.
- the performance data associated with the instance of the first task includes cycles per instruction data associated with the instance of the first task.
- the performance data associated with the plurality of additional tasks includes processor usage data associated with each of the plurality of additional tasks.
- the time period associated with the cycles per instruction data corresponds to a time period associated with the processor usage data.
- Each score can represent a correlation between the performance data associated with the instance of the first task and the performance data associated with the respective additional task.
- the method can include determining the score by normalizing the performance data associated with the instance of the first task before determining the score.
- the method can include determining whether the particular identified task is a high-priority task and modifying the execution of the particular identified task based on the determination that the particular identified task is a not a high-priority task.
- the method can include selecting a second particular identified task from the one or more additional tasks and modifying the execution of the second particular task based on the determination that the particular task is a high priority task.
- FIG. 1 is a block diagram of an example system for managing task performance.
- FIG. 2 is an illustration of an example ranking of possible performance antagonists.
- FIG. 3 is an illustration of an example process for managing task performance.
- a computer can execute one or more tasks that share common resources (e.g., cache, memory, processor cycles, etc.).
- a task can be identified as a poorly performing task, and both performance data associated with the poorly performing task (“a protagonist task”) and performance data associated with other tasks executed on the computer (“possible performance antagonists”) can be collected.
- the system can collect cycles per instruction data associated with the protagonist task and CPU usage data associated with the possible performance antagonists.
- a score can be generated for each of the possible performance antagonists. The scores can be based on the performance data associated with the protagonist task and the possible performance antagonists. The score can represent a probability that a particular performance antagonist is causing the protagonist task's degraded performance.
- the possible performance antagonists can be ranked based on the scores.
- the execution of the possible performance antagonists can be modified to determine whether a particular performance antagonist is the cause of the protagonist task's degraded performance (“the probable performance antagonist”). For example, the performance antagonist with the largest score can be throttled or rescheduled to a different machine. After the throttling or rescheduling the performance antagonist with the largest score, the protagonist task's performance data can be monitored to determine whether the protagonist task's performance improves. If the protagonist task's performance data improves and the amount of improvement is greater than a predetermined threshold, the particular suspected performance antagonist can be identified as the probable performance antagonist.
- FIG. 1 is a block diagram of an example system 100 for managing task performance.
- the example system 100 includes a computer 102 , multiple tasks and/or task instances 104 stored in memory 103 and executed on the computer 102 , and a performance management system 105 that includes a performance data collector 106 , a database 108 , a performance antagonist predictor 110 , and a report generator 112 .
- the computer 102 can be various types of data processing apparatus.
- the computer 102 can be a server included in a group of servers (e.g., a server farm) or part of a cluster of computers.
- the computer 102 can be a laptop, a personal computer or a mobile device.
- FIG. 1 illustrates only one computer 102 , additional computers can be included in the system 100 .
- the computer 102 can perform multiple tasks or task instances 104 , which are stored in memory 103 .
- a task can be a set of executable instructions that can be performed by the computer 102 , and a task instance can be a particular copy of the task executed on a particular computer.
- a particular task can have multiple task instances executed on multiple computers or on a single computer.
- the computer 102 can perform multiple tasks or task instances 104 in parallel.
- the computer 102 can execute one or more instances of a dictionary lookup task, a data analysis task, and one or more graphics rendering tasks.
- Each of the tasks or task instances 104 can access or share the computer's resources.
- the tasks and/or task instances 104 can share the computer's cache or CPU.
- the term “task” will be used to refer to either a task or task instance.
- the computer 102 can include one or more performance counters to measure performance data associated with the computer 102 and the tasks 104 executed on the computer.
- the computer 102 can include a CPU that includes a performance counter.
- a first performance counter can count the number of instructions performed and a second performance counter can count the CPU cycles used by the computer to execute a task. This information can be represented by cycles per instruction (CPI) data, where lower CPI values are interpreted to correspond with better performance.
- the performance counter can measure CPU usage associated with each task 104 . For example, the performance counter can determine the relative amount of the CPU's resources that are used to perform a particular task.
- the performance counter data can reflect the memory usage associated with each task (e.g., the number of cache misses and the number of cache references, hereinafter referred to as “cache data”) and the amount of time or number of cycles each task waits for a memory access.
- the performance counter can store or associate time stamp information with the performance data.
- the performance counter can store a time stamp with each CPI data measurement and/or CPU usage measurement.
- the CPU usage and/or the performance counter data can be reported by an operating system associated with the computer 102 .
- the performance counter can sample CPI data or the CPU usage once every second or can be sampled once every five minutes.
- the performance counter samples the performance data every 100 milliseconds for five minutes and averages the collected performance data measurements over the five minute period.
- the performance counter can collect averaged performance data measurement over a period of time.
- the performance counter measures the performance data after receiving an instruction from the performance management system 105 .
- the performance data collector 106 can provide an instruction to the performance counter in the computer 102 to begin collecting performance data (e.g., the CPI data and CPU usage data associated with one or more tasks executed on the computer 102 ).
- the performance data collector 106 can instruct the performance counter to collect data for a predetermined amount of time (e.g., 5 minutes, 10 minutes, 30 minutes, etc.).
- the performance counter can continuously measure the performance data and provide the performance data associated with each task to the performance management system 105 .
- the performance data can be monitored or collected on-the-fly and can be provided to the performance data collector 106 via a network connection or other data connection.
- the performance counter collects performance data and periodically provides the collected performance data to the performance data collector 106 .
- the performance counter can store performance data in a memory, and the performance data collector 106 can periodically retrieve the performance data from the memory.
- the performance data collector 106 can store the performance data received from the computer 102 in the database 108 .
- the database 108 can be any appropriate type of database or other memory that can be accessed by the performance data collector 106 , the antagonist predictor 110 and/or the report generator 112 .
- the database 108 can organize the performance data based on the time stamp information associated with the performance data. For example, each task's performance data can be arranged in chronological order.
- the performance data collector 106 can also associate information to uniquely identify a task with the performance data associated with the task. For example, the database 108 can store the task name, an index number associated with the task and the user that initiated the task corresponding to the task and associate this information with the performance data.
- the antagonist predictor 110 can receive an indicator or signal that identifies a poorly performing task (e.g., a protagonist task).
- the antagonist predictor 110 can receive an indicator from the computer 102 or other system that identifies the protagonist task.
- An example system to identify a protagonist task is described in U.S. patent application Ser. No. 13/183,234, “IDENTIFYING TASK OUTLIERS BASED ON METRIC DATA IN A LARGE SCALE PARALLEL PROCESSING SYSTEM” and is incorporated by reference.
- the protagonist task is identified as poorly performing because the protagonist task's performance data is greater than a predetermined threshold (e.g., “CPIBad_Threshold”).
- the value of the predetermined threshold can be an expected CPI value.
- the predetermined threshold can be based on the protagonist task's performance data associated with other computers.
- the value of the predetermined threshold can be based on previously observed performance data measurements associated with the protagonist task at a time when it was performing within acceptable levels.
- the predetermined threshold is provided to the antagonist predictor 110 as part of the indicator or signal. It is noted that a protagonist task can be either a task (i.e., all of the instances of a particular task collectively) or individual task instances.
- the antagonist predictor 110 can use the stored performance data to generate scores for the other tasks executed on the computer (e.g., possible performance antagonists). For example, the antagonist predictor 110 can use the correlation between the protagonist task's CPI data and the CPU usage data associated with the possible performance antagonist that is causing the protagonist task's degraded performance (e.g., the probable performance antagonist) to generate a score for each of the possible performance antagonists. The score can be based on the performance data associated with the protagonist task and the performance data associated with the particular possible performance antagonist.
- the score is based on the n collected performance data measurements.
- the score can represent a probability or a prediction that a particular performance antagonist (e.g., the probable performance antagonist) is causing the protagonist task's degraded performance because the degraded performance can be correlated with abnormal CPU usage in a possible performance antagonist.
- the antagonist predictor 110 is configured to normalize the scores. For example, the antagonist predictor 110 can normalize the generated scores to have values between ⁇ 1 and 1. In some implementations, the antagonist predictor 110 can use the expected CPI value (e.g., CPIBad_Threshold) to normalize the scores.
- the expected CPI value e.g., CPIBad_Threshold
- the antagonist predictor 110 can rank the possible performance antagonists using the scores associated with the possible performance antagonists. For example, the antagonist predictor 110 can use the scores to rank the possible performance antagonists such that the possible performance antagonists that are most likely to be the probable performance antagonist are ranked higher than the possible performance antagonists that are less likely to be the probable performance antagonist.
- FIG. 2 illustrates an example ranking 200 of possible performance antagonists.
- the ranking 200 lists the names of five possible performance antagonists and the scores associated with the five possible performance antagonists. As seen in ranking 200 , the possible performance antagonists are ranked in descending order based on the scores. Other ranking schemes can be used.
- the antagonist predictor 110 can use the ranking of possible performance antagonists to select a possible performance antagonist and modify the execution of the selected performance antagonist. For example, the antagonist predictor 110 can select the highest ranked possible antagonist predictor (e.g., OCR_Task) and limit the CPU usage or other resource usage associated with the selected performance antagonist (e.g., “throttling.”) In some implementations, the antagonist predictor 110 can reschedule the possible antagonist such that it is executed on a different computer or can pause or halt the execution of the selected performance antagonist.
- the highest ranked possible antagonist predictor e.g., OCR_Task
- limit the CPU usage or other resource usage associated with the selected performance antagonist e.g., “throttling.”
- the antagonist predictor 110 can reschedule the possible antagonist such that it is executed on a different computer or can pause or halt the execution of the selected performance antagonist.
- the performance data collector 106 can instruct the performance counter associated with the computer 102 to collect additional performance data associated with the protagonist task for a predetermined amount of time and provide the collected performance data to the performance data collector 106 .
- the predetermined amount of time is based on the sampling rate of the performance counter. For example, the predetermined amount of time can be equal to an amount of time sufficient to collect 5-10 performance data measurements.
- the antagonist predictor 110 can then analyze the newly collected performance data to determine whether the selected performance antagonist is the probable performance antagonist. For example, the antagonist predictor can analyze the newly collected CPI data associated with the protagonist task and compare it to the CPIBad_Threshold to determine whether the protagonist task's performance has improved. If the collected CPI data is less than or equal to the CPIBad_Threshold, then the antagonist predictor 110 can determine that the selected performance antagonist is the probable performance antagonist.
- the antagonist predictor 110 can restore the possible antagonist's execution (e.g., reverse the modification of possible antagonist's execution), select the next highest ranked performance antagonist and modify the execution of the newly selected performance antagonist to determine whether the newly selected performance antagonist is the probable antagonist.
- possible antagonist's execution e.g., reverse the modification of possible antagonist's execution
- the antagonist predictor 110 selects a possible performance antagonist for throttling based on the rank and a priority associated with the possible performance antagonist. For example, if OCR_Task 1 is a high priority task that should not be modified and Dictionary_Task is a low priority task, the antagonist predictor 110 can select Dictionary_Task and modify its execution. In some implementations, the antagonist predictor 110 can access a database that includes priority information associated with tasks and whether a task can be modified.
- the antagonist predictor 110 can compare the selected performance antagonist's priority and the protagonist task's priority. If the selected performance antagonist's priority is greater than the protagonist task's priority, the analytic predictor 110 can record this in the database 108 and then select the next highest ranked performance antagonist that has a priority less than or equal to the protagonist task's priority for throttling. This information can be included in a report generated by the report generator 112 .
- the report generator 112 can be used to generate a report.
- the report can include the ranked possible performance antagonists, the scores associated with the ranked performance antagonists, the performance data associated with the protagonist task and the possible performance antagonists.
- the report can include priority data associated with the possible performance antagonists.
- FIG. 3 is an illustration of an example process 300 for managing task performance.
- multiple tasks are executed on a computer.
- computer 102 can execute an optical character recognition task, one or more graphics rendering tasks, data processing tasks and/or a dictionary lookup. As the tasks are executed, the tasks share and/or compete for the computer's resources (e.g., cache, CPU, memory, network bandwidth, etc.).
- the computer 102 can collect performance data associated with the multiple tasks executed on the computer. The performance data can be stored in the computer 102 .
- the performance management system can receive an indication or signal that identifies a poorly performing task (at 304 ).
- the antagonist predictor 110 can receive the indication or signal from the computer 102 , a different portion of the performance management system 105 or a system that identifies poorly performing tasks (protagonist tasks).
- the indication or signal can identify the protagonist task (“A”) using the task name, an index number associated with the task and the user that initiated the task corresponding to the task.
- the indication or signal can also include expected performance data associated with the protagonist task.
- the indication can include a threshold CPI value (“CPIBad_Threshold”) that is associated with a task that is performing within acceptable levels.
- the CPIBad_Threshold can be based on the protagonist task's performance on other computing devices that are executing the same task.
- the performance management system can collect performance data from the computer.
- the performance data collector 106 can instruct the computer 102 to collect performance data associated with the tasks executed on the computer 102 and time stamp information associated with the performance data.
- the performance data includes CPI data and CPU usage data associated with the tasks executed on the computer 102 .
- the performance data includes CPI data associated with the protagonist task and CPU usage data associated with the other tasks executed on the computer 102 .
- Various amounts of data can be collected.
- the performance data collector 106 can instruct the computer 102 to collect data during a time period of thirty minutes. The sampling rate of the performance counter can vary depending on the computer 102 .
- the computer 102 collects performance data every 100 milliseconds and provides an averaged performance data measurement every five minutes during the time period for collecting performance data.
- the performance data is provided to the performance data collector 106 .
- the performance data collector 106 can instruct computer 102 to provide stored performance data (e.g., performance data previously collected and used to identify the protagonist task).
- the performance data can be stored in the database 108 .
- the performance data collector 106 can organize the performance data based on the time stamp information associated with the performance data. For example, each task's performance data can be arranged in chronological order. Alternatively, the performance data can be arranged in order of increasing performance (e.g., performance data for time periods in which the task used a larger number of cycles per instruction can be ranked higher than for time periods in which the task used a smaller number of cycles per instruction).
- the performance data collector 106 can also associate information to uniquely identify a task with the performance data associated with the task. For example, the performance data collector 106 can store the task name, an index number associated with the task and the user that initiated the task corresponding to the task.
- the performance management system can generate a score for each of the tasks executed on the computer other than the protagonist task (e.g., possible performance antagonists).
- the antagonist predictor 110 can use the correlation between the protagonist task's CPI data and the CPU usage data associated with each of the possible performance antagonist to generate a score for each of the possible performance antagonists.
- the score can be based on the performance data associated with the protagonist task and the performance data associated with the particular possible performance antagonist.
- the score is based on the n performance data measurements.
- the CPU usage data can be normalized for different reasons. For example, the CPU usage data can be normalized to prevent any bias against tasks normally associated with large CPU usage U i
- the score can represent a probability that a particular performance antagonist (e.g., the probable performance antagonist) is causing the protagonist task's degraded performance.
- the antagonist predictor 110 normalizes the scores.
- the performance management system can rank the possible performance antagonists using the scores (at 310 ). For example, the antagonist predictor 110 can rank the possible performance antagonists such that a possible performance antagonist with the highest score is ranked first.
- the performance management system can select a possible performance antagonist and modify the execution of the selected performance antagonist.
- the antagonist predictor 110 can select the highest ranked possible performance antagonist (e.g., the possible performance antagonist having the highest score) and throttle the selected possible performance antagonist.
- the antagonist predictor 110 can reschedule the selected possible performance antagonist such that it is executed on a separate computer or halt the execution of the selected possible performance antagonist.
- the performance management system monitors the protagonist task's performance data.
- the performance data collector 106 can instruct the computer 102 to collect performance data associated with the protagonist task.
- the computer 102 monitors the performance data for a predetermined amount of time.
- the computer 102 can monitor the protagonist task's performance data for a time sufficient to capture five to ten performance data measurements. The actual amount of time can vary depending on sampling rate associated with the performance counter.
- the performance management system analyzes the protagonist task's performance data to determine whether the protagonist task's performance has improved.
- the antagonist predictor 110 can average the newly collected performance data (e.g., CPI data) and compare the averaged CPI data to the CPIBad_Threshold to determine whether the protagonist task's performance has improved. If the averaged CPI data is greater than the CPIBad_Threshold, the antagonist predictor 110 can de-throttle the selected performance antagonist (at 317 ) and select the next highest ranked performance antagonist (at 312 ). If the averaged CPI data is less than or equal to the CPIBad_Threshold, the antagonist predictor 110 can determine that the selected performance antagonist is the probable performance antagonist. In some implementations, the antagonist predictor 110 can repeat 312 - 316 for each of the possible performance antagonists and identify multiple probable performance antagonists.
- the antagonist predictor 110 can determine the difference between the average CPI data and the average of the CPI data collected at 306 and compare the difference to a predetermined threshold (“improvement threshold”). If the difference is greater than or equal to the improvement threshold, the antagonist predictor 110 can determine that the selected performance antagonist is the probable performance antagonist. If the difference is less than the improvement threshold, the antagonist predictor 110 can de-throttle the selected performance antagonist and select a different performance antagonist to be modified.
- improved threshold a predetermined threshold
- Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer storage medium for execution by, or to control the operation of, data processing apparatus.
- the program instructions can be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- a computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Moreover, while a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially generated propagated signal. The computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
- the operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
- the term “data processing apparatus” encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing
- the apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit).
- the apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them.
- the apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
- a computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment.
- a computer program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code).
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- the processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output.
- the processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit).
- processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer.
- a processor will receive instructions and data from a read only memory or a random access memory or both.
- the essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks.
- mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks.
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), to name just a few.
- Devices suitable for storing computer program instructions and data include all forms of non volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; and CD ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back end, middleware, or front end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network.
- Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
- LAN local area network
- WAN wide area network
- inter-network e.g., the Internet
- peer-to-peer networks e.g., ad hoc peer-to-peer networks.
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- a server transmits data (e.g., an HTML page) to a client device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device).
- client device e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device.
- Data generated at the client device e.g., a result of the user interaction
- performance management system can filter the performance data received from the cluster by removing potentially unreliable performance data (e.g., data representing low CPU usage or performance data that is extremely high or low). For example the performance management system can compare the performance data to predetermined parameters (e.g., CPU usage thresholds) that indicate the performance data is potentially unreliable. As another example, the threshold value can be based on a weighted average or a piecewise linear function. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results.
Abstract
Description
Score(A,B)=Σ(C i−CPIBad_threshold)*U i (1)
where A is the protagonist task, B is a possible performance antagonist, Ci is the CPI data associated with A at time instance i, and Ui is the CPU usage data associated with B at time instance i. The score is based on the n collected performance data measurements. In some implementations, the CPU usage data can be normalized such that the sum of the Ui for the n data measurements equals 1 (i.e. ΣUi=1). The score can represent a probability or a prediction that a particular performance antagonist (e.g., the probable performance antagonist) is causing the protagonist task's degraded performance because the degraded performance can be correlated with abnormal CPU usage in a possible performance antagonist.
If C i>CPIBad_Threshold, then Cn i=(1−CPIBad_Threshold/C i)*U i (2)
If C i<CPIBad_Threshold, then Cn i=(C i/CPIBad_Threshold−1)*U i (3)
Score(A,B)=ΣCn i (4)
Score(A,B)=Σ(C i−CPIBad_threshold)*U i
where A is the protagonist task, B is a possible performance antagonist, Ci is the CPI data associated with A at time instance i and Ui is the CPU usage data associated with B at time instance i. The score is based on the n performance data measurements. In some implementations, the CPU usage data can be normalized such that the sum of the Ui for the n performance data measurements equals 1 (i.e. ΣUi=1). The CPU usage data can be normalized for different reasons. For example, the CPU usage data can be normalized to prevent any bias against tasks normally associated with large CPU usage Ui The score can represent a probability that a particular performance antagonist (e.g., the probable performance antagonist) is causing the protagonist task's degraded performance.
If C i>CPIBad_Threshold, then Cn i=(1−CPIBad_Threshold/C i)*U i
If C i<CPIBad_Threshold, then Cn i=(C i/CPIBad_Threshold−1)*U i
Score(A,B)=Cn i
Claims (24)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/247,948 US9015718B1 (en) | 2011-09-28 | 2011-09-28 | Identifying task instances that interfere with processor performance |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/247,948 US9015718B1 (en) | 2011-09-28 | 2011-09-28 | Identifying task instances that interfere with processor performance |
Publications (1)
Publication Number | Publication Date |
---|---|
US9015718B1 true US9015718B1 (en) | 2015-04-21 |
Family
ID=52822712
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/247,948 Active 2033-12-19 US9015718B1 (en) | 2011-09-28 | 2011-09-28 | Identifying task instances that interfere with processor performance |
Country Status (1)
Country | Link |
---|---|
US (1) | US9015718B1 (en) |
Cited By (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20210149712A1 (en) * | 2017-08-02 | 2021-05-20 | Felica Networks, Inc. | Information processing apparatus and method for processing information |
US11269686B2 (en) * | 2019-11-25 | 2022-03-08 | Red Hat, Inc. | Adaptive consumer thread pool |
US11593335B2 (en) * | 2019-05-31 | 2023-02-28 | Teradata Us, Inc. | Automatically defining arrival rate meters |
Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5655120A (en) * | 1993-09-24 | 1997-08-05 | Siemens Aktiengesellschaft | Method for load balancing in a multi-processor system where arising jobs are processed by a plurality of processors under real-time conditions |
US5838968A (en) * | 1996-03-01 | 1998-11-17 | Chromatic Research, Inc. | System and method for dynamic resource management across tasks in real-time operating systems |
US7698707B2 (en) * | 2003-09-25 | 2010-04-13 | International Business Machines Corporation | Scheduling compatible threads in a simultaneous multi-threading processor using cycle per instruction value occurred during identified time interval |
US8789052B2 (en) * | 2007-03-28 | 2014-07-22 | BlackBery Limited | System and method for controlling processor usage according to user input |
-
2011
- 2011-09-28 US US13/247,948 patent/US9015718B1/en active Active
Patent Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5655120A (en) * | 1993-09-24 | 1997-08-05 | Siemens Aktiengesellschaft | Method for load balancing in a multi-processor system where arising jobs are processed by a plurality of processors under real-time conditions |
US5838968A (en) * | 1996-03-01 | 1998-11-17 | Chromatic Research, Inc. | System and method for dynamic resource management across tasks in real-time operating systems |
US7698707B2 (en) * | 2003-09-25 | 2010-04-13 | International Business Machines Corporation | Scheduling compatible threads in a simultaneous multi-threading processor using cycle per instruction value occurred during identified time interval |
US8789052B2 (en) * | 2007-03-28 | 2014-07-22 | BlackBery Limited | System and method for controlling processor usage according to user input |
Cited By (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20210149712A1 (en) * | 2017-08-02 | 2021-05-20 | Felica Networks, Inc. | Information processing apparatus and method for processing information |
US11625267B2 (en) * | 2017-08-02 | 2023-04-11 | Felica Networks, Inc. | Information processing apparatus and information processing method for changing contents of a process to be performed after an interrupt is detected |
US11593335B2 (en) * | 2019-05-31 | 2023-02-28 | Teradata Us, Inc. | Automatically defining arrival rate meters |
US11269686B2 (en) * | 2019-11-25 | 2022-03-08 | Red Hat, Inc. | Adaptive consumer thread pool |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10877986B2 (en) | Obtaining performance data via an application programming interface (API) for correlation with log data | |
US9658910B2 (en) | Systems and methods for spatially displaced correlation for detecting value ranges of transient correlation in machine data of enterprise systems | |
US10291463B2 (en) | Large-scale distributed correlation | |
US10318541B2 (en) | Correlating log data with performance measurements having a specified relationship to a threshold value | |
US9880879B1 (en) | Identifying task instance outliers based on metric data in a large scale parallel processing system | |
US9590880B2 (en) | Dynamic collection analysis and reporting of telemetry data | |
US10997191B2 (en) | Query-triggered processing of performance data and log data from an information technology environment | |
US8868541B2 (en) | Scheduling resource crawls | |
US10904112B2 (en) | Automatic capture of detailed analysis information based on remote server analysis | |
US20230401122A1 (en) | Detecting, diagnosing, and alerting anomalies in network applications | |
US8593946B2 (en) | Congestion control using application slowdown | |
US20170255711A1 (en) | Processing of Performance Data and Raw Log Data from an Information Technology Environment | |
US20090228587A1 (en) | Intelligent Performance Monitoring Based on User Transactions | |
US9774654B2 (en) | Service call graphs for website performance | |
US8631280B2 (en) | Method of measuring and diagnosing misbehaviors of software components and resources | |
US20150143180A1 (en) | Validating software characteristics | |
US20170255639A1 (en) | Processing of Performance Data and Structure Data from an Information Technology Environment | |
US20090006066A1 (en) | Method and System for Automatic Selection of Test Cases | |
WO2013023030A2 (en) | Application performance analysis that is adaptive to business activity patterns | |
US8275581B2 (en) | Managing statistical profile data | |
US20160225042A1 (en) | Determining a cost of an application programming interface | |
US10459835B1 (en) | System and method for controlling quality of performance of digital applications | |
US10057155B2 (en) | Method and apparatus for determining automatic scanning action | |
WO2015080742A1 (en) | Production sampling for determining code coverage | |
US9015718B1 (en) | Identifying task instances that interfere with processor performance |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:ZHANG, XIAO;TUNE, ERIC S.;JNAGAL, ROHIT;AND OTHERS;SIGNING DATES FROM 20110923 TO 20110927;REEL/FRAME:027460/0734 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044334/0466Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |