US8824337B1 - Alternate directions in hierarchical road networks - Google Patents
Alternate directions in hierarchical road networks Download PDFInfo
- Publication number
- US8824337B1 US8824337B1 US13/420,165 US201213420165A US8824337B1 US 8824337 B1 US8824337 B1 US 8824337B1 US 201213420165 A US201213420165 A US 201213420165A US 8824337 B1 US8824337 B1 US 8824337B1
- Authority
- US
- United States
- Prior art keywords
- node
- nodes
- graph
- levels
- meeting
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G01—MEASURING; TESTING
- G01C—MEASURING DISTANCES, LEVELS OR BEARINGS; SURVEYING; NAVIGATION; GYROSCOPIC INSTRUMENTS; PHOTOGRAMMETRY OR VIDEOGRAMMETRY
- G01C21/00—Navigation; Navigational instruments not provided for in groups G01C1/00 - G01C19/00
- G01C21/26—Navigation; Navigational instruments not provided for in groups G01C1/00 - G01C19/00 specially adapted for navigation in a road network
- G01C21/34—Route searching; Route guidance
- G01C21/3446—Details of route searching algorithms, e.g. Dijkstra, A*, arc-flags, using precalculated routes
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L45/00—Routing or path finding of packets in data switching networks
- H04L45/02—Topology update or discovery
- H04L45/03—Topology update or discovery by updating link state protocols
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L45/00—Routing or path finding of packets in data switching networks
- H04L45/12—Shortest path evaluation
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L45/00—Routing or path finding of packets in data switching networks
- H04L45/22—Alternate routing
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L45/00—Routing or path finding of packets in data switching networks
- H04L45/02—Topology update or discovery
Definitions
- the embodiments relate generally to hierarchical routes and more particularly, to road networks in a computing environment.
- the road network can be represented as a graph with nodes and arcs.
- a path is a sequence of nodes traversed from a source node to a target node.
- a cost such as the travel time, is associated with an arc connecting two nodes.
- the shortest path computation may determine a path whose sum of arc costs is the smallest among all paths between the source and target nodes.
- a good candidate of alternate path is a meaningful path that sufficiently differs from the shortest path and other alternates, but may be a bit more expensive. Accordingly, computation of alternates in the road network is even more expensive.
- Some conventional systems attempt to address these issues using a bidirectional search: a forward search from the source node and a backward search from the target node.
- the forward and backward searches meet at an intermediate meeting node between the source and target nodes.
- An alternate may be the concatenation of two shortest paths: from the source node to the meeting node, and from the meeting node to the target node.
- Such bidirectional search may result in improved performance and reduced memory consumptions.
- many efficient bidirectional searches that are faster in finding the shortest paths lead to less alternative paths due to the limited number of meeting nodes identified. Therefore, while the conventional systems may be able to quickly find a single shortest path, they fail to efficiently identify an optimal path with adequate alternates in the road network.
- Embodiments relate to determining shortest paths between a source node and a target node in a road network.
- a hierarchy of nodes with a number of levels of a first graph is determined. Each node in the hierarchy of nodes is assigned to a level based on a priority factor of the node.
- a first shortest path between the source node and the target node traversing a meeting node is calculated in the first graph. Each node in the first shortest path traverses to a node of an equal or higher level in the direction from the source node to the meeting node and from the target node to the meeting node.
- the number of levels in the first graph is reduced, with one or more levels of the first graph consolidated to form reduced levels in a second reduced graph.
- One or more second shortest paths between the source node and the target node traversing one or more meeting nodes in the second reduced graph is determined.
- Each node in the second shortest paths traverses to a node of an equal or higher reduced level in the direction from the source node to the meeting nodes and from the target node to the meeting nodes.
- the second shortest paths are a concatenation of the shortest paths from the source node to the one or more meeting nodes, and from the one or more meeting nodes to the target node.
- the first shortest path is assigned as a primary route and the one or more second shortest paths are assigned as alternate routes.
- a system for determining shortest paths between a source node and a target node in a graph includes a level determiner, configured to determine a hierarchy of nodes with a number of levels contained in a first graph, each node in the hierarchy of nodes assigned to a level based on a priority factor of the node.
- the system further includes a first path calculator, configured to calculate a first shortest path between the source node and the target node traversing a meeting node in the first graph and each node in the first shortest path traverses to a node of higher level in the direction from the source node to the meeting node and from the target node to the meeting node.
- the system also includes a level reducer, configured to reduce the number of levels in the first graph, so that one or more levels of the graph are consolidated to form reduced levels in a second reduced graph.
- the system includes a second path calculator, configured to calculate one or more second shortest paths between the source node and the target node traversing one or more meeting nodes in the second reduced graph. Each node in the second shortest paths traverses to a node of higher reduced level in the direction from the source node to the meeting nodes and from the target node to the meeting nodes.
- the second shortest paths are a concatenation of the shortest paths from the source node to the one or more meeting nodes, and from the one or more meeting nodes to the target node.
- the system includes a path assignor, configured to assign the first shortest path as a primary route and the one or more second shortest paths as alternate routes.
- Embodiments may be implemented using hardware, firmware, software, or a combination thereof and may be implemented in one or more computer systems or other processing systems.
- FIG. 1 is a diagram illustrating a system for determining shortest paths between a source node and a target node in a graph, according to an embodiment.
- FIGS. 2A-2B are illustrations of example graphs before and after the reduction of node levels using an alternate directions module, according to an embodiment.
- FIG. 3 illustrates elements of an alternate directions module, according to an embodiment.
- FIG. 4 is a flowchart of a method for determining shortest paths between a source node and a target node in a graph using an alternate directions module, according to an embodiment.
- FIG. 5 is a diagram of an example computer system in which embodiments can be implemented.
- FIG. 6 is an illustration of example graph suitable to be reduced using an alternate directions module, according to an embodiment.
- FIGS. 7A-7B illustrate modification of the alternate routes using an alternate directions module, according to an embodiment.
- Embodiments relate to determining shortest paths between a source node and a target node in a graph using an alternate directions module.
- An alternate directions module is capable of determining a hierarchy of nodes with a number of levels contained in a first graph, each node in the hierarchy of nodes assigned to a level based on a priority factor of the node.
- the system calculates a first shortest path between the source node and the target node traversing a meeting node in the first graph, with each node in the first shortest path traversing to a node of an equal or higher level in the direction from the source node to the meeting node and from the target node to the meeting node.
- the system further reduces the number of levels in the first graph, consolidating one or more levels of the first graph to form reduced levels in a second reduced graph.
- the system calculates one or more second shortest paths between the source node and the target node traversing one or more meeting nodes in the second reduced graph.
- Each node in the second shortest paths traverses to a node of an equal or higher reduced level in the direction from the source node to the meeting nodes and from the target node to the meeting nodes.
- the system assigns the first shortest path as a primary route and the one or more second shortest paths as alternate routes.
- embodiments can provide adequate alternate directions that are sufficiently different and also not much longer than the shortest path.
- embodiments are conceptually simple and adaptive to live update and dynamic routing, such as traffic delays.
- FIG. 1 illustrates a system 100 according to an embodiment.
- system 100 includes an alternate directions module 130 , a network 150 , and clients 160 .
- Network 150 may be any network or combination of networks that carry data communication. Such network can include, but is not limited to, a local area network, medium area network, and/or wide area network such as the Internet.
- Client 160 includes a storage device 162 and a browser 164 .
- Browser 164 may be any application software or program designed to enable users to access, retrieve and view a map, a graph, a road network and other resources on the Internet.
- Storage device 162 which will be described in detail with respect to FIG. 5 , can be any device for recording and storing information, which includes but is not limited to, flash memory, magnetic tape and optical discs.
- Alternate module 130 further includes a preprocessing server 135 which is configured to preprocess a weighted graph into a hierarchy of nodes with a plurality of levels, and reduce the levels of the nodes to facilitate computation and finding alternate directions.
- a preprocessing server 135 which is configured to preprocess a weighted graph into a hierarchy of nodes with a plurality of levels, and reduce the levels of the nodes to facilitate computation and finding alternate directions.
- Alternate directions module 130 can be software, firmware, or hardware or any combination thereof in a computing device.
- System 100 can be implemented on or implemented by one or more computing devices.
- a computing device can be any type of computing device having one or more processors.
- a computing device can be a computer, server, workstation, mobile device (e.g., a mobile phone, personal digital assistant, navigation device, tablet, laptop or any other user carried device), game console, set-top box, kiosk, embedded system or other device having at least one processor and memory.
- a computing device may include a communication port or I/O device for communicating over wired or wireless communication link(s).
- FIG. 2A is an illustration of example graphs before the reduction of node levels using an alternate directions module, according to an embodiment.
- a graph representing a road network with 6 nodes is illustrated.
- Each arc connecting two nodes is associated with a cost value, corresponding to a distance or travel time.
- the arc between node 2 and node 6 is associated cost value 2.
- a path may traverse nodes 2, 6 and 5.
- another path may traverse nodes 2, 6, 1, 4, 3, and 5 consecutively. Thus, it is not necessary to traverse all nodes to find a shortest path.
- FIG. 2A further shows a hierarchy of nodes with a number of levels. Given that each node in FIG. 2A is associated with a different weight or priority, nodes 1 to 6 reside on different levels. For example, node 1 is on level 0, which is the lowest level in the graph. Node 2 to 5 reside on levels 1, 2, 3 and 4, respectively, while node 6 is on level 5, the highest level in the graph.
- a bidirectional search method such as a Highway Hierarchies or a Contraction Hierarchies method
- a forward search from the source node to a target node and a backward search from the target node to the source node are conducted.
- the forward search and backward search meet at one or more intermediate meeting nodes between the source node and the target node, representing alternate routes from source to target. Due to the fact that the forward and backward searches use nodes and arcs on the same or higher levels as they evolve, searching for shortest path of a hierarchical graph, such as using a Contraction Hierarchy method, does not find adequate meeting modes. Accordingly, the users are not presented with adequate options of alternate routes.
- FIG. 2B is an illustration of example graph after the reduction of node levels using an alternate directions module, according to an embodiment.
- the six nodes originally residing on six levels in FIG. 2A have been reduced to 3 levels: with reduced level 0 containing nodes 1 and 2; with reduced level 1 containing nodes 3 and 4; and with reduced level 2 containing nodes 5 and 6.
- Each reduced level contains more nodes than the original level does and a search can both go up and down the node hierarchy in the same reduced level. For this reason, reducing levels increases the number of meeting nodes the forward and backward searches can find. For example, in the original graph of FIG.
- a forward or backward search can traverse from node 4 to node 5, which resides on a higher level than node 4.
- node 4 at reduced level 1 can traverse both to node 5 of reduced level 2, and node 3 of the same reduced level where node 4 resides. Therefore, more alternatives within the same reduced level provide opportunity to find more meeting nodes in the forward and backward searches, corresponding to more alternate routes in a shortest path calculation.
- FIG. 3 illustrates elements of an alternate directions module 130 , according to an embodiment.
- alternate directions module 130 includes a preprocessing server 135 , a first path calculator 304 , a second path calculator 308 , and a path assignor 310 .
- Preprocessor server 135 prepares and preprocesses nodes in a hierarchical graph representing a road network from a source node and a target node. This hierarchical graph is considered as the first graph.
- Preprocessing server 135 further includes a level determiner 302 and level reducer 306 .
- Level determiner 302 determines the levels of the nodes in the graph in order of their importance or priorities. In a hierarchical contraction method, for example, nodes of a weighted directed graph are numbered 1 . . . n in order of ascending “importance.” Level determiner 302 uses a priority queue whose minimum element contains the node looking most attractive to be contracted next.
- level determiner 302 uses an edge difference, the number of shortcuts introduced when contracting a node v minus the number of edges incident to v, to determine the position of the nodes in the priority queue.
- level determiner 302 uses criteria such as uniformity to contract nodes everywhere in the graph in a uniform way, rather than to keep contracting nodes in a small region.
- level determiner 302 uses a linear combination of several terms or criteria together. One skilled in the relevant art would appreciate that these terms or criteria described are illustrative and other types of terms may be used to determine the position in the priority queue.
- first path calculator 304 may calculate a first shortest path between the source node and the target node traversing a meeting node in the first graph. Each node in the first shortest path traverses to a node of equal or higher level in the direction from the source node to the meeting node and from the target node to the meeting node.
- First path calculator 304 calculates a first shortest path from source node s to target node t, by performing a modified bidirectional Dijkstra shortest path search, including a forward search in G ⁇ and a backward search in G ⁇ . If, and only if, there exists a shortest s-t path in the first graph, then both search scopes eventually meet at a node v that has the highest level of all nodes in a shortest s-t-path.
- Level reducer 306 reduces the Lumber of levels in the first graph, so that one or more levels of the graph are consolidated to form reduced levels in a second reduced graph.
- level reducer 306 groups the lowest ten levels of the first graph into one reduced level, and then every subsequent thirty levels into another reduced level.
- levels 0-9 in the first graph are reduced into a new level 0 in the second reduced graph; levels 10-39 in the first graph are reduced into a new level 1, levels 40-79 in the first graph are reduced into a new level 2 in the second reduced graph, and so on.
- the full hierarchical graph for Zurich in the first graph has about 400 levels and level reducer 306 may reduce it to about 14 levels.
- the hierarchy of nodes in the first graph contain a first level including nodes within a first range of priority values and a second level including nodes within a second range of priority values
- the second reduced graph contains a level including both the nodes within the first range of priority values and the nodes within the second range of priority values.
- second path calculator 308 calculates one or more second shortest paths between the source node and the target node traversing one or more meeting nodes in the second reduced graph. Similar to the fashion performed by first path calculator 304 , each node in the second shortest paths traverses to a node of an equal or higher reduced level in the direction from the source node to the meeting nodes and from the target node to the meeting nodes.
- Reducing levels may increase the number of nodes the forward and backward search find, due to the fact that the search can go down in the original hierarchy of the first graph.
- the search at the reduced level 1 can go from a node at original level 30 to 29 of the first graph, because both levels are in the reduced level 1 of the second reduced graph.
- the searches would not go down a level, namely from level 30 to level 29.
- the reduced levels in the second graph allow users to find more meeting nodes, corresponding to more alternates as candidate second shortest paths between the source node and the target node.
- Path assignor 310 assigns the first shortest path as a primary route and the one or more second shortest paths as alternate routes, obtained from first path calculator 304 and second path calculator 308 respectively. In one embodiment, path assignor 310 evaluates all the meeting nodes found by second path calculator 308 and filters the meeting nodes according to some criteria. For example, path assignor 310 compares the one or more second shortest paths with the first shortest path and ensures that the alternates are sufficiently different and not much longer than the primary shortest path. Alternatively, filtering may remove alternate routes containing cuspy routes that encompass meaningless U-turns or pointed arcs. A cuspy route may be characterized by a fixed point on a path that reverses its direction of motion. For example, if the query finds a shorter path than the sub-path on an alternate route, this alternate is considered to be cuspy.
- a path modifier may be configured to unpack shortcuts contained in the second shortest paths found in the second reduced graph.
- the path modifier may be further configured to select nodes left and right of the one or more meeting nodes in the second reduced graph as new meeting nodes.
- the second shortest paths can be modified to concatenate the shortest paths from the source node to the new meeting nodes and from the new meeting nodes to the target node. For example, due to the fact that cusps usually occur around the meeting nodes, considering the nodes left and right of the meeting node as potential new meeting modes, and running a shortest path query from the source node to the new meeting nodes and from the new meeting nodes to the target node may yield more desirable alternate routes.
- nodes located within a threshold distance can be considered as potential candidates for modified meeting nodes.
- the threshold distance may be 5% of the total distance of the shortest path to the left and right of the initial meeting nodes.
- embodiments of the elements of alternate directions module 130 in FIG. 3 may be further configured to run in parallel. Such parallel execution of these elements would greatly increase the efficiency and speed of alternate directions module 130 .
- FIG. 4 is a flowchart of a method for determining shortest paths between a source node and a target node in a graph using an alternate directions module, according to an embodiment.
- the method in FIG. 4 will be described with respect to module 130 of FIG. 3 , as described above. However, this method is not intended to be limited thereto.
- a hierarchy of nodes with a number of levels is determined in a first graph based on a priority factor assigned to each node.
- level determiner 302 determines a hierarchy of nodes with a number of levels in the first graph from a source node and a target node.
- the priority factor may reflect the importance of the node, such as factors measuring edge difference and uniformity consideration.
- factors relevant to global measurement indicating some path based centrality measurements can be used to determine the level of the node.
- cost of queries as indicated by the size of the query search spaces can be used to determine the priority factors.
- cost of contraction can be used as priority factor in a hierarchical contraction method.
- a hierarchical contraction method given that the time consuming part of the contraction may be the forward shortest-path searches to decide the necessity of shortcuts, the sum of these search space sizes may be used as a priority term.
- a hierarchy may be constructed by contracting the nodes following the order of the levels of the nodes.
- a node v may be contracted by removing it from the network in such a way that shortest paths in the remaining overlay graph are preserved. This goal may be achieved by replacing paths of the from nodes u, v, w by a shortcut edge from nodes u and w.
- the shortcut u, w may be required if u, v, w is the only shortest path from u to w.
- FIG. 6 An example hierarchical graph with six nodes connected by arcs is illustrated in FIG. 6 .
- the height of the node may represent its level in the hierarchical graph.
- nodes 1 and 6 are on the lowest level and node 3 is on the highest.
- the costs are shown on the arcs connecting the nodes.
- a first shortest path between the source node and the target node is calculated traversing a meeting node in the first graph, with each node in the first shortest path traversing to a node of an equal or higher level in the direction from the source node to the meeting node and from the target node to the meeting node.
- first path calculator 304 calculates the first shortest path between the source node and the target node in the first graph.
- first graph calculator 304 calculates the first shortest path between the source node and the target node in the reduced graph in the similar fashion as illustrated at stage 408 below.
- the number of levels in the first graph is reduced to consolidate one or more levels of the first graph to form reduced levels in a second reduced graph.
- level reducer 306 reduces one or more levels of first graph to generate a reduced second graph. Due to the fact that the forward and the backward searches traverse nodes in the same or higher levels as they evolve, reducing levels increases the number of meeting nodes the forward and backward searches find.
- the path 1 ⁇ 2 ⁇ 4 ⁇ 5 ⁇ 6 of total cost 42 may be a good alternate because it is sufficiently different and not much longer than the shortest path with a cost 40.
- the search of the first graph does not find this alternate because the forward search uses arcs in the same or higher levels in an upwards direction.
- the arc from node 2 ⁇ 4 is never used because it goes in a downward direction.
- the arc 5 ⁇ 4 is never used because it goes in a downward direction.
- nodes 2, 4, and 5 may be reduced into a single level, and the search can use the arcs 2 ⁇ 4 and 5 ⁇ 4 to find the meeting node 4 and thus the concatenated alternate path 1 ⁇ 2 ⁇ 4 ⁇ 5 ⁇ 6.
- the hierarchy of nodes in the first graph contain a first level including nodes within a first range of priority values and a second level including nodes within a second range of priority values.
- Stage 406 can further determine the second reduced graph to include a level containing both the nodes within the first range of priority values and the nodes within the second range of priority values.
- the levels can be further reduced or modified to provide additional alternate routes.
- forward and backward searches in the second reduced graph may go down even further in the reduced hierarchy on the first 5 arcs that the searches encounter and lead to a lower level. This may be necessary in cases where the source node or target node is already high up in the hierarchy and there is a need for a mechanism to further traverse down the reduced levels to have a sufficiently large search space.
- the number 5 is arbitrary and the number of levels for further reduction in the already reduced graph may be modified according to the specific need and characteristics of the graph processed.
- HH highway hierarchical method
- CH contraction hierarchical method
- one or more second shortest paths between the source node and the target node traversing one or more meeting nodes in the second reduced graph is calculated.
- the first shortest path can be calculated either in the first graph or the second reduced graph.
- each node in the second shortest paths may traverse to a node of an equal or higher reduced level in the direction from the source node to the meeting nodes and from the target node to the meeting nodes.
- second path calculator 308 calculates one or more second shortest paths between the source node and the target nodes.
- FIGS. 7A-7B are illustrations of modification of the alternate routes using an alternate directions module, according to an embodiment.
- Graph 700 in FIG. 7A illustrates a 5-node road network with source node 1 and target node 2. Node 0 is at level 0, while nodes 1 and 2 are at level 1, node 3 is at level 2 and node 4 is at level 3, respectively.
- Graph 700 is transformed into a graph 750 in FIG. 7B using an embodiment of the present disclosure.
- node 0 is at the reduced level 0, and nodes 1, 2 and 3 are at the reduced level 1 and node 4 is at reduced level 2.
- the shortest path from node 1 to node 2 is 1 ⁇ 4 ⁇ 2 with cost 10, while the alternate is path 1 ⁇ 3 ⁇ 2 with node 3 being identified as a meeting node.
- node 0 is not identified as a meeting node in the bidirectional search, because it resides on a lower reduced level than that of the source and target nodes.
- arc 1 ⁇ 3 is a shortcut for the path 1 ⁇ 0 ⁇ 3
- arc 3 ⁇ 2 is a shortcut for the path 3 ⁇ 0 ⁇ 2. Accordingly, path 1 ⁇ 3 ⁇ 2 can be replaced by path 1 ⁇ 0 ⁇ 3 ⁇ 0 ⁇ 2. However, given that path 1 ⁇ 0 ⁇ 3 ⁇ 0 ⁇ 2 includes a meaningless U-turn, such alternate is less desirable than path 1 ⁇ 0 ⁇ 2, which skips the U-turn.
- This better alternate 1 ⁇ 0 ⁇ 2 selects node 0 as the new meeting node, which can be identified by unpacking path 1 ⁇ 3 ⁇ 2 and replacing the shortcuts with alternative paths.
- path 1 ⁇ 3 ⁇ 2 is replaced by path 1 ⁇ 0 ⁇ 3 ⁇ 0 ⁇ 2.
- nodes located within a threshold range to the left and right of the initial meeting node 3 can be considered as potential new meeting nodes.
- the potential new meeting nodes can be found moving left and right 5% of the total distance of the shortest path from the initial meeting nodes. A person skilled in the relevant art would appreciate that 5% is for illustration purpose only and not intended to limit.
- multiple new meeting nodes can be identified, which correspond to multiple potential alternate routes.
- the potential alternate routes can be further ranked and filtered according to the tuning parameters such as query time associated with the number of alternate routes identified using such query.
- the second shortest path can be modified concatenating two shortest paths from node 1 to node 0 and from node 0 to 2 to obtain the second shortest path 1 ⁇ 0 ⁇ 2. Because the initial alternate 1 ⁇ 3 ⁇ 2 is associated with cost 14 and the modified alternate 1 ⁇ 0 ⁇ 2 has cost 12, after unpacking and modification of the initial alternate to locate new meeting node, a more desirable alternate 1 ⁇ 0 ⁇ 2 is obtained.
- the first shortest path is assigned as a primary route and the one or more second shortest paths are assigned as alternate routes.
- path assignor 310 assigns a primary route and one or more alternate routes.
- One or more second paths may be filtered to ensure that they are sufficient different from the primary shortest path and they are not much longer than the primary shortest path. Additional filtering criteria may be applied to further restrict the number of alternate routes.
- Embodiments shown in FIGS. 1-4 , and 6 may be implemented using hardware, software modules, firmware, tangible computer readable media having instructions stored thereon, or a combination thereof and may be implemented in one or more computer systems or other processing systems.
- FIG. 5 illustrates an example computer system 500 in which embodiments, or portions thereof, may be implemented as computer-readable code.
- alternate directions module 130 including, its components, as shown in FIG. 3 can be implemented in computer system 500 using hardware, software, firmware, tangible computer readable media having instructions stored thereon, or a combination thereof and may be implemented in one or more computer systems or other processing systems.
- Hardware, software, or any combination of such may embody any of the modules and components in FIGS. 1-3 .
- programmable logic may execute on a commercially available processing platform or a special purpose device.
- programmable logic may execute on a commercially available processing platform or a special purpose device.
- One of ordinary skill in the art may appreciate that embodiments of the disclosed subject matter can be practiced with various computer system configurations, including multi-core multiprocessor systems, minicomputers, mainframe computers, computer linked or clustered with distributed functions, as well as pervasive or miniature computers that may be embedded into virtually any device.
- processor devices may be used to implement the above described embodiments.
- a processor device may be a single processor, a plurality of processors, or combinations thereof.
- Processor devices may have one or more processor “cores.”
- Processor device 504 may be a single processor in a multi-core/multiprocessor system, such system operating alone, or in a cluster of computing devices operating in a cluster or server farm.
- Processor device 504 is connected to a communication infrastructure 506 , for example, a bus, message queue, network, or multi-core message-passing scheme.
- Computer system 500 also includes a main memory 508 , for example, random access memory (RAM), and may also include a secondary memory 510 .
- Secondary memory 510 may include, for example, a hard disk drive 512 , removable storage drive 514 .
- Removable storage drive 514 may comprise a floppy disk drive, a magnetic tape drive, an optical disk drive, a flash memory, or the like.
- the removable storage drive 514 reads from and/or writes to a removable storage unit 518 in a well-known manner.
- Removable storage unit 518 may comprise a floppy disk, magnetic tape, optical disk, etc. which is read by and written to by removable storage drive 514 .
- removable storage unit 518 includes a computer usable storage medium having stored therein computer software and/or data.
- secondary memory 510 may include other similar means for allowing computer programs or other instructions to be loaded into computer system 500 .
- Such means may include, for example, a removable storage unit 522 and an interface 520 .
- Examples of such means may include a program cartridge and cartridge interface (such as that found in video game devices), a removable memory chip (such as an EPROM, or PROM) and associated socket, and other removable storage units 522 and interfaces 520 which allow software and data to be transferred from the removable storage unit 522 to computer system 500 .
- Computer system 500 may also include a network interface 524 .
- Network interface 524 allows software and data to be transferred between computer system 500 and external devices.
- Network interface 524 may include a modem, a network interface (such as an Ethernet card), a communications port, a PCMCIA slot and card, or the like.
- Software and data transferred via network interface 524 may be in the form of signals, which may be electronic, electromagnetic, optical, or other signals capable of being received by network interface 524 . These signals may be provided to network interface 524 via a communications path 526 .
- Communications path 526 carries signals and may be implemented using wire or cable, fiber optics, a phone line, a cellular phone link, an RF link or other communications channels.
- Computer program medium and “computer usable medium” are used to generally refer to media such as removable storage unit 518 , removable storage unit 522 , and a hard disk installed in hard disk drive 512 .
- Computer program medium and computer usable medium may also refer to memories, such as main memory 508 and secondary memory 510 , which may be memory semiconductors (e.g. DRAMs, etc.).
- Computer programs are stored in main memory 508 and/or secondary memory 510 . Computer programs may also be received via network interface 524 . Such computer programs, when executed, enable computer system 500 to implement embodiments as discussed herein. In particular, the computer programs, when executed, enable processor device 504 to implement the processes of embodiments of the present invention, such as the stages in the method illustrated by flowchart of FIG. 4 , discussed above. Accordingly, such computer programs represent controllers of the computer system 500 . Where embodiments are implemented using software, the software may be stored in a computer program product and loaded into computer system 500 using removable storage drive 514 , interface 520 , hard disk drive 512 , or network interface 524 .
- Embodiments of the invention also may be directed to computer program products comprising, software stored on any computer useable medium. Such software, when executed in one or more data processing device(s), causes a data processing device(s) to operate as described herein.
- Embodiments of the invention employ any computer useable or readable medium. Examples of computer readable storage mediums include, but are not limited to, primary storage devices (e.g., any type of random access memory), and secondary storage devices (e.g., hard drives, floppy disks, CD ROMS, ZIP disks, tapes, magnetic storage devices, and optical storage devices, MEMS, nano-technological storage device, etc.).
Abstract
Description
Claims (25)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/420,165 US8824337B1 (en) | 2012-03-14 | 2012-03-14 | Alternate directions in hierarchical road networks |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/420,165 US8824337B1 (en) | 2012-03-14 | 2012-03-14 | Alternate directions in hierarchical road networks |
Publications (1)
Publication Number | Publication Date |
---|---|
US8824337B1 true US8824337B1 (en) | 2014-09-02 |
Family
ID=51400035
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/420,165 Active 2032-06-27 US8824337B1 (en) | 2012-03-14 | 2012-03-14 | Alternate directions in hierarchical road networks |
Country Status (1)
Country | Link |
---|---|
US (1) | US8824337B1 (en) |
Cited By (20)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20140200807A1 (en) * | 2013-01-17 | 2014-07-17 | Google Inc. | Route Planning |
US20150278301A1 (en) * | 2014-03-31 | 2015-10-01 | Honeywell International Inc. | Systems and methods to reduce computing overhead in a data management application |
US20150338224A1 (en) * | 2014-05-21 | 2015-11-26 | Google Inc. | Routing with Data Version Stitching |
US20160180720A1 (en) * | 2014-12-19 | 2016-06-23 | Thales | Method and Device for Calculating a Conjugated Airport Navigation Graph, Related Method and System for Generating a Taxi Routing of an Aircraft, Related Computer Program Product |
US9523583B2 (en) * | 2015-02-27 | 2016-12-20 | Here Global B.V. | Generating routes using navigation meshes |
WO2017120458A1 (en) * | 2016-01-08 | 2017-07-13 | Oracle International Corporation | Methods, systems, and computer readable media for job scheduling using travel costs between job locations |
US20170207993A1 (en) * | 2016-01-18 | 2017-07-20 | Alcatel-Lucent Canada Inc. | Bidirectional constrained path search |
US9715658B2 (en) | 2014-02-28 | 2017-07-25 | Honeywell International Inc. | Methods for producing customer configurable technical manuals |
CN107330030A (en) * | 2017-06-23 | 2017-11-07 | 南京师范大学 | A kind of hierarchical network construction method that storage is compressed towards magnanimity road net data |
US10018476B2 (en) * | 2016-08-17 | 2018-07-10 | Apple Inc. | Live traffic routing |
US10060753B2 (en) | 2016-08-17 | 2018-08-28 | Apple Inc. | On-demand shortcut computation for routing |
US10260900B2 (en) * | 2014-10-30 | 2019-04-16 | Here Global B.V. | Method, apparatus and computer program product for route generation |
US20200097879A1 (en) * | 2018-09-25 | 2020-03-26 | Oracle International Corporation | Techniques for automatic opportunity evaluation and action recommendation engine |
US10635856B2 (en) | 2013-06-28 | 2020-04-28 | Honeywell International Inc. | Cross tab editor with reverse editing capability |
US10949561B2 (en) * | 2016-03-08 | 2021-03-16 | Oracle International Corporation | Policy storage using syntax graphs |
CN113204348A (en) * | 2021-04-30 | 2021-08-03 | 北京连山科技股份有限公司 | Domestic road network data compiling method based on linkage hierarchy |
US11238409B2 (en) | 2017-09-29 | 2022-02-01 | Oracle International Corporation | Techniques for extraction and valuation of proficiencies for gap detection and remediation |
US11367034B2 (en) | 2018-09-27 | 2022-06-21 | Oracle International Corporation | Techniques for data-driven correlation of metrics |
US11585666B2 (en) * | 2019-04-02 | 2023-02-21 | Verizon Patent And Licensing Inc. | Using partitioned contraction hierarchies to determine a route from an origination point to a destination point |
CN116539056A (en) * | 2023-04-28 | 2023-08-04 | 北京大数据先进技术研究院 | Path planning method and device and electronic equipment |
Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20100262359A1 (en) * | 2009-04-14 | 2010-10-14 | Masaki Motoyama | Route search method and apparatus for navigation system utilizing map data of XML format |
US20110251789A1 (en) * | 2010-04-12 | 2011-10-13 | Karlsruher Institut Fur Technologie | Method and system for time-dependent routing |
US20120310523A1 (en) * | 2011-06-03 | 2012-12-06 | Microsoft Corporation | Customizable route planning |
-
2012
- 2012-03-14 US US13/420,165 patent/US8824337B1/en active Active
Patent Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20100262359A1 (en) * | 2009-04-14 | 2010-10-14 | Masaki Motoyama | Route search method and apparatus for navigation system utilizing map data of XML format |
US20110251789A1 (en) * | 2010-04-12 | 2011-10-13 | Karlsruher Institut Fur Technologie | Method and system for time-dependent routing |
US20120310523A1 (en) * | 2011-06-03 | 2012-12-06 | Microsoft Corporation | Customizable route planning |
Cited By (31)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20140200807A1 (en) * | 2013-01-17 | 2014-07-17 | Google Inc. | Route Planning |
US9175972B2 (en) * | 2013-01-17 | 2015-11-03 | Google Inc. | Route planning |
US10635856B2 (en) | 2013-06-28 | 2020-04-28 | Honeywell International Inc. | Cross tab editor with reverse editing capability |
US9715658B2 (en) | 2014-02-28 | 2017-07-25 | Honeywell International Inc. | Methods for producing customer configurable technical manuals |
US20150278301A1 (en) * | 2014-03-31 | 2015-10-01 | Honeywell International Inc. | Systems and methods to reduce computing overhead in a data management application |
US20150338224A1 (en) * | 2014-05-21 | 2015-11-26 | Google Inc. | Routing with Data Version Stitching |
US9435658B2 (en) * | 2014-05-21 | 2016-09-06 | Google Inc. | Routing with data version stitching |
US9778052B2 (en) | 2014-05-21 | 2017-10-03 | Google Inc. | Routing with data version stitching |
US10288437B2 (en) | 2014-05-21 | 2019-05-14 | Google Llc | Routing with data version stitching |
US10260900B2 (en) * | 2014-10-30 | 2019-04-16 | Here Global B.V. | Method, apparatus and computer program product for route generation |
US20160180720A1 (en) * | 2014-12-19 | 2016-06-23 | Thales | Method and Device for Calculating a Conjugated Airport Navigation Graph, Related Method and System for Generating a Taxi Routing of an Aircraft, Related Computer Program Product |
US9779630B2 (en) * | 2014-12-19 | 2017-10-03 | Thales | Method and device for calculating a conjugated airport navigation graph, related method and system for generating a taxi routing of an aircraft, related computer program product |
US9523583B2 (en) * | 2015-02-27 | 2016-12-20 | Here Global B.V. | Generating routes using navigation meshes |
US10740702B2 (en) | 2016-01-08 | 2020-08-11 | Oracle International Corporation | Method, system, and non-transitory computer-readable medium for reducing computation time in one-to-many path searching using heuristics and limited boundary adjustment |
WO2017120458A1 (en) * | 2016-01-08 | 2017-07-13 | Oracle International Corporation | Methods, systems, and computer readable media for job scheduling using travel costs between job locations |
US10560367B2 (en) * | 2016-01-18 | 2020-02-11 | Nokia Of America Corporation | Bidirectional constrained path search |
US20170207993A1 (en) * | 2016-01-18 | 2017-07-20 | Alcatel-Lucent Canada Inc. | Bidirectional constrained path search |
US10949561B2 (en) * | 2016-03-08 | 2021-03-16 | Oracle International Corporation | Policy storage using syntax graphs |
US11288390B2 (en) | 2016-03-08 | 2022-03-29 | Oracle International Corporation | Language-localized policy statements |
US10997309B2 (en) | 2016-03-08 | 2021-05-04 | Oracle International Corporation | Partial-context policy enforcement |
US10018476B2 (en) * | 2016-08-17 | 2018-07-10 | Apple Inc. | Live traffic routing |
US10060753B2 (en) | 2016-08-17 | 2018-08-28 | Apple Inc. | On-demand shortcut computation for routing |
CN107330030A (en) * | 2017-06-23 | 2017-11-07 | 南京师范大学 | A kind of hierarchical network construction method that storage is compressed towards magnanimity road net data |
CN107330030B (en) * | 2017-06-23 | 2019-10-15 | 南京师范大学 | A kind of hierarchical network construction method towards the compression storage of magnanimity road net data |
US11238409B2 (en) | 2017-09-29 | 2022-02-01 | Oracle International Corporation | Techniques for extraction and valuation of proficiencies for gap detection and remediation |
US20200097879A1 (en) * | 2018-09-25 | 2020-03-26 | Oracle International Corporation | Techniques for automatic opportunity evaluation and action recommendation engine |
US11367034B2 (en) | 2018-09-27 | 2022-06-21 | Oracle International Corporation | Techniques for data-driven correlation of metrics |
US11585666B2 (en) * | 2019-04-02 | 2023-02-21 | Verizon Patent And Licensing Inc. | Using partitioned contraction hierarchies to determine a route from an origination point to a destination point |
CN113204348A (en) * | 2021-04-30 | 2021-08-03 | 北京连山科技股份有限公司 | Domestic road network data compiling method based on linkage hierarchy |
CN116539056A (en) * | 2023-04-28 | 2023-08-04 | 北京大数据先进技术研究院 | Path planning method and device and electronic equipment |
CN116539056B (en) * | 2023-04-28 | 2024-03-01 | 北京大数据先进技术研究院 | Path planning method and device and electronic equipment |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8824337B1 (en) | Alternate directions in hierarchical road networks | |
KR102164427B1 (en) | Determining the order of execution of neural networks | |
JP6828044B2 (en) | Route deviation recognition method, terminal, and storage medium | |
US20200012755A1 (en) | Road network generation | |
CN106110656B (en) | Method and device for calculating route in game scene | |
US8214527B2 (en) | Fast algorithm for peer-to-peer shortest path problem | |
WO2015078238A1 (en) | Dispatching map matching tasks by cluster server in internet of vehicles | |
US20130132369A1 (en) | Batched shortest path computation | |
CN110926491B (en) | Planning method and system for shortest path | |
JP6352958B2 (en) | Graph index search device and operation method of graph index search device | |
US9904844B1 (en) | Clustering large database of images using multilevel clustering approach for optimized face recognition process | |
US11748387B2 (en) | Spatial computing for location-based services | |
CN114357105B (en) | Pre-training method and model fine-tuning method of geographic pre-training model | |
US20200082026A1 (en) | Graph data processing | |
US20180322093A1 (en) | Method and apparatus for solving a mixed integer programming problem | |
US20240152517A1 (en) | Shortest path determining method and apparatus, electronic device, and storage medium | |
CN113850675A (en) | Information processing method and device for enterprise transaction relation data | |
CN107368281B (en) | Data processing method and device | |
CN111582456B (en) | Method, apparatus, device and medium for generating network model information | |
CN114690786A (en) | Path planning method and device for mobile machine | |
US9835460B2 (en) | GPS map-matching based on space map-matching | |
CN109325127A (en) | A kind of Risk Identification Method and device | |
US11914593B2 (en) | Generate digital signature of a query execution plan using similarity hashing | |
CN110285819B (en) | Method and device for determining shortest path | |
CN113851007B (en) | Time interval dividing method and device, electronic equipment and storage medium |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:GEISBERGER, ROBERT;REEL/FRAME:027864/0584Effective date: 20120313 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044277/0001Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551)Year of fee payment: 4 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |