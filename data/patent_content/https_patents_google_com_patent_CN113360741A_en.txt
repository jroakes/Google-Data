CN113360741A - Dynamically injecting relevant content in search results - Google Patents
Dynamically injecting relevant content in search results Download PDFInfo
- Publication number
- CN113360741A CN113360741A CN202110637286.4A CN202110637286A CN113360741A CN 113360741 A CN113360741 A CN 113360741A CN 202110637286 A CN202110637286 A CN 202110637286A CN 113360741 A CN113360741 A CN 113360741A
- Authority
- CN
- China
- Prior art keywords
- result
- viewport
- search results
- score
- search
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2457—Query processing with adaptation to user needs
- G06F16/24578—Query processing with adaptation to user needs using ranking
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/01—Input arrangements or combined input and output arrangements for interaction between user and computer
- G06F3/048—Interaction techniques based on graphical user interfaces [GUI]
- G06F3/0484—Interaction techniques based on graphical user interfaces [GUI] for the control of specific functions or operations, e.g. selecting or manipulating an object, an image or a displayed text element, setting a parameter value or selecting a range
- G06F3/0485—Scrolling or panning
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/953—Querying, e.g. by the use of web search engines
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/31—Indexing; Data structures therefor; Storage structures
- G06F16/316—Indexing structures
- G06F16/319—Inverted lists
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/903—Querying
- G06F16/9032—Query formulation
- G06F16/90324—Query formulation using system suggestions
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/953—Querying, e.g. by the use of web search engines
- G06F16/9535—Search customisation based on user profiles and personalisation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/953—Querying, e.g. by the use of web search engines
- G06F16/9538—Presentation of query results
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/955—Retrieval from the web using information identifiers, e.g. uniform resource locators [URL]
- G06F16/9558—Details of hyperlinks; Management of linked annotations
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/01—Input arrangements or combined input and output arrangements for interaction between user and computer
- G06F3/048—Interaction techniques based on graphical user interfaces [GUI]
- G06F3/0481—Interaction techniques based on graphical user interfaces [GUI] based on specific properties of the displayed interaction object or a metaphor-based environment, e.g. interaction with desktop elements like windows or icons, or assisted by a cursor's changing behaviour or appearance
- G06F3/0482—Interaction with lists of selectable items, e.g. menus
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/01—Input arrangements or combined input and output arrangements for interaction between user and computer
- G06F3/048—Interaction techniques based on graphical user interfaces [GUI]
- G06F3/0484—Interaction techniques based on graphical user interfaces [GUI] for the control of specific functions or operations, e.g. selecting or manipulating an object, an image or a displayed text element, setting a parameter value or selecting a range
- G06F3/04842—Selection of displayed objects or displayed text elements
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/01—Input arrangements or combined input and output arrangements for interaction between user and computer
- G06F3/048—Interaction techniques based on graphical user interfaces [GUI]
- G06F3/0487—Interaction techniques based on graphical user interfaces [GUI] using specific features provided by the input device, e.g. functions controlled by the rotation of a mouse with dual sensing arrangements, or of the nature of the input device, e.g. tap gestures based on pressure sensed by a digitiser
- G06F3/0488—Interaction techniques based on graphical user interfaces [GUI] using specific features provided by the input device, e.g. functions controlled by the rotation of a mouse with dual sensing arrangements, or of the nature of the input device, e.g. tap gestures based on pressure sensed by a digitiser using a touch-screen or digitiser, e.g. input of commands through traced gestures
Abstract
The present disclosure relates to dynamically injecting relevant content in search results. Systems and methods use a residency score to inject relevant content into search results. For example, a method may include: for at least one result displayed at least partially in the viewport, a residency score of the result is accounted for based on an amount of time the result has been in the viewport and a location of the result in the viewport, and a suggested link to the result is displayed in the viewport if the residency score satisfies a threshold. Another example method includes displaying a scrollable search result set in a viewport, and while waiting for a scrolling action or link selection, accounting for a dwell score for at least one result having content visible in the viewport and updating a ranking signal based on the dwell score. The updated ranking signal is used to generate the next set of search results for the query.
Description
Technical Field
The present disclosure relates to dynamically injecting relevant content in search results.
Background
Search engines traditionally search for query terms that appear in documents, such as web pages accessible over the internet. The content returned by a search engine in response to a query is referred to as search results to the query. Each search result typically contains a link and a snippet and possibly additional content such as images and/or titles. The search engine uses the plurality of ranking signals to determine which search results to provide in response to the query and the order of the search results. Studies show that most users interact with the results in a decreasing manner, with fewer interactions being made for results farther from the top result. The user will typically interact with one (or more) of the top results, e.g., top 10, top 20, etc. These results are typically listed in the first page or the second page of results. The number of search results displayed in each page depends on the search engine used, the user's preferences and settings, and the type of display, e.g., personal computer versus mobile phone. Users who do not find useful results in the first few pages tend to abandon the search or reformulate the search.
Disclosure of Invention
Implementations use the park signal to display relevant suggested items and/or to influence "next page" search results for dynamic paging. For example, some implementations may account for relevant suggestions for search results presented in response to a query. The suggestions may include improved queries and/or links to particular items. One or more of the search results initially presented to the user may have relevant suggestions. Implementations account for a resident score for search results in a viewport (e.g., visible to a user without scrolling). If the dwell score of a particular search result satisfies a specified criterion, an implementation may display the relevant suggested term. The relevant suggestions may be highly relevant to the search results or may deviate from the search results. The additional suggestions may include documents or queries that may help the user improve the search. Additionally or alternatively, the suggestions may provide deviating suggestions that take the user in slightly different directions, e.g., providing related queries, alternative interpretations of query terms, and/or documents in the same category/classification as the particular search result and highly similar to the result.
As another example, some implementations may use the residency score in generating a "next page" of search results for a query. Traditionally, search engines may pre-compute a large (e.g., 100 or more) set of search results for a query and provide the large set in response, although only a few (e.g., around 10) search results may be displayed in the first page and the remaining results are visible after the user's "next page" request. Instead of pre-computing a large set of search results, an implementation may pre-compute a much smaller set of results (e.g., 20). If the user provides a "next page" request, an implementation may use the first set of dwell scores to inform the search results calculated for the next page. The next page may include another smaller set of results, which may include some of the original smaller set not included in the first page and the results added due to the resident score signal. Thus, implementations may support dynamic paging of search results and use the dwell score(s) to determine which search results to provide next. Dynamic paging may be used regardless of manual paging. In other words, the user may interact with a "next page" type UI element, or may interact via automatic inline paging, which appends new results to existing pages.
According to certain aspects of the disclosure, a method includes, for each result displayed at least partially in a viewport, the result being part of a reduced result set identified in response to a query, accounting for a residency score for the result based on an amount of time the result has been in the viewport and a location of the result in the viewport, and in response to determining that the residency score satisfies a threshold, displaying a suggested link for the result in the viewport.
According to certain aspects of the present disclosure, a method comprises: a query is received from a client device, a first plurality of search results is determined from an inverted index responsive to the query, and the first plurality of search results is provided for display in a viewport at the client device. The method may also include receiving a dwell score for at least a first result of the first plurality of search results, receiving a request for a next page of search results, determining a second plurality of search results from the inverted index responsive to the query, and ranking the second plurality of search results based in part on the dwell score, such that results from the second plurality of search results that are similar to the first result receive an increase in ranking.
According to certain aspects, a method comprises: displaying a scrollable search result set in a viewport, wherein the search result set represents a reduced search result set in response to a query; and while waiting for a scroll action or link selection, accounting for a respective dwell score for each result of the set of search results that has content visible in the viewport and updating a ranking signal based on the respective dwell score, wherein the updated ranking signal is used to generate a next set of search results responsive to the query in response to a request for a next page of search results.
In another aspect, a tangible computer-readable storage medium has instructions recorded thereon and embodied thereon, which, when executed by one or more processors of a computer system, cause the computer system to perform any of the foregoing methods or operations.
One or more implementations of the subject matter described herein can be implemented to realize one or more of the following advantages. As one example, the system may initially select smaller set results (e.g., 15 or 20 instead of 100) for the search results, which saves time and may result in faster generation of the results page. In addition, implementations improve the quality and relevance of results appearing on the "next page" by using information about which results the user paused on to inform the selection and ranking of further results. This has the benefit of reducing the amount of queries a user may submit before reaching an answer. As another example, implementations provide automated assistance to a user. For example, when a user is resident on a search results page but does not scroll (change the viewport) or interact with individual results, the user may be stuck, e.g., not know how to proceed. Implementations provide highly similar and divergent recommendations for procedural and unobtrusive help. Highly similar suggestions may help the user refine the query, such as representing results that are close to what the user is considering (e.g., based on a dwell score for a particular result). Deviating suggestions may help users explore different but related content, e.g., help users who are stagnant, e.g., users do not find the sought content but do not determine how to obtain the sought content. Implementations may also include sponsored content in deviating and/or highly relevant suggestions, which provides the user with an opportunity to be aware of content related to the user's interests. As another example, implementations may inject content by automatically extending a list, such as a grid package, without having the user explicitly extend the list. Automatic expansion of the list may reduce user input by helping the user reach the correct intent more quickly, reducing network bandwidth usage. Thus, implementations are directed to the generation and use of novel signals for search systems.
The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features will be apparent from the description and drawings, and from the claims.
Drawings
Fig. 1 illustrates an example system according to some implementations.
FIG. 2 shows an example of a viewport displaying search results for a query.
Fig. 3A-3E illustrate example injection of relevant content into the viewport of fig. 2, according to some implementations.
FIG. 4 shows an example of a user viewport displaying search results for a query.
Fig. 5 illustrates example injection of relevant content into the viewport of fig. 4, according to some implementations.
FIG. 6 illustrates a flow diagram of a process for injecting relevant content into search results, according to some implementations.
FIG. 7 shows an example of a computer device that may be used to implement the described techniques.
FIG. 8 illustrates an example of a distributed computer device that can be used to implement the described techniques.
Like reference symbols in the various drawings indicate like elements.
Detailed description of the invention
Implementations include systems and methods for injecting content into search results without explicit user action. The disclosed implementations use a park signal to provide additional content to a user. The park signal serves as an indication that the user is inactive. In other words, when the search results are presented to the user, if the user has not changed the content in the viewport (i.e., has not scrolled) and has not selected any search results, the user will reside in the search results in the viewport. This may be because the user is consuming content in the snippet, the user has walked away, the user may not be able to find helpful search results provided in the first results page, or the user is stuck and does not know how to proceed. If the user is resident on the page long enough, the implementation may automatically inject suggestions for the user into the content. Content injected in the form of suggested items may help users find relevant content faster. In some implementations, items that the user spends more time residing (reflected in the residence scores for those items) may provide a signal of various content that the user thinks are more helpful, even if not helpful enough to select. These signals may inform the next set of search results if the user requests the next page of results.
FIG. 1 is a block diagram of a search service system 100 according to an example implementation. The system 100 may be used to implement a search service that automatically injects relevant suggested content into a search interface using a resident score. The description of system 100 in FIG. 1 is described as a search service for content accessible by the Internet that is configured to generate and use a resident score of search results generated in response to a query. Other configurations and applications of the described techniques may be used. For example, the resident scores may be used to interact similarly with non-Internet sources, such as internal documents of a company or items in a corpus protected by login (e.g., a membership-only library). The implementation may be applied in any setting in which a search service provides search results via a browser.
The search service system 100 may include a search engine 110. The search engine 110 may be a computing device in the form of many different devices, such as a standard server, a group of such servers, or a rack server system. In some implementations, the search engine 110 may be a single system-shared component, such as a processor and memory. Additionally, the search engine 110 may be implemented in a personal computer (e.g., a laptop computer). The search engine 110 may be an example of a computer device 800, as shown in FIG. 8. The search engine 110 may include one or more servers that receive queries from and provide search results to a requestor, such as a client 170.
The search engine 110 may include one or more processors 113, an operating system (not shown), and one or more computer memories 114 formed in a substrate. Computer memory 114 may represent any kind of memory (e.g., RAM, flash memory, cache, disk, tape, etc.). The memory 114 may represent a variety of memories. In some implementations (not shown), the memory 114 may include external storage, e.g., memory physically remote from the search engine 110 but accessible by the search engine 110. The search engine 110 may include one or more modules or engines representing specially programmed software. For example, the search engine may include a query system 120, the query system 120 enabling the search engine 110 to receive and respond to queries.
The query system 120 itself may include modules. For example, the query system 120 may include a query engine 125 and an index engine 127. The index engine 127 may be configured to update the item index 140. For example, the index engine 127 can add items to the index of items 140, update items in the index 140, and delete items from the index 140. In some implementations, the indexing engine 127 can work with one or more crawlers. The crawler searches for items accessible via the internet and returns the content (including metadata) of the items. The index engine 127 may use the content and/or metadata to generate and update the index 140.
The query system 120 may also include a query engine 125. The query engine 125 may receive a query from a requestor, such as the client 170, analyze the query to determine how to search the item index 140, and initiate a search of the item index 140. A user may submit a query, such as a word, phrase, word list, image, record, etc., to the query engine 110. Search engine 110, and in particular query engine 125, uses one or more indexes (item index 140) to identify items returned in response to a query. Items returned to the query engine 125 in response to a query may also be referred to as responsive items. The query engine 125 may generate search results for some or all of the responsive terms. As used herein, a search result is data related to a responsive item. The search results may include links. The link may initiate some action with respect to the responsive item. For example, the search results link may take the user to a web page, may start paying for a video or audio file, may open a map application to a certain geographic location, may initiate a phone call, or perform some other operation. The search results for an item may also include a small image or icon related to the item. For example, the search results related to the actor may include an image of the actor. The search results for the web page may include a preview of the web page, and the like. The search results for the items may include a brief description of the items or information extracted from the items, also referred to as snippets. The search results may include other information related to and/or descriptive of the item.
The query engine 125 may rank the responsive items. Ranking may include applying one or more ranking signals to the responsive items. The ranking signal may include a number of factors. Non-limiting examples are a web page rank of the item, a relevance score of the item, a source of the item, and the like. In addition to the known ranking signals, the query engine 125 can also utilize the resident signals for ranking. The park signal may be used in dynamic paging.
In many conventional search engines, the query engine generates a large set of response items for a query, e.g., a set having hundreds of members. Many search engines organize responsive items into pages. Each page may have a preset number of response items. Thus, for example, the first ten response items may be returned as a first page, the next ten response items may be on a second page, and so on. The user may use the links or controls to move between pages, e.g., request the last page, the next page, the previous page, etc. Thus, conventional search engines pre-generate a large set of response items and enable users to page through the pre-generated set. Pre-generation means that the terms represented in the page are set when the first page of search results is presented to the user.
In contrast, in dynamic paging, the next page of the response item is not generated in advance. Rather, the query engine 125 may re-rank the remaining responsive items and/or run the revised query before providing the next page of search results. In other words, in dynamic paging, the query engine may use information that is not available when the query is first executed to improve the response terms presented in the next page of search results. Improving can include increasing the ranking of one or more responsive items based on the additional information, e.g., such that responsive items move to a next page of results in response to an increase in the ranking. In such implementations, the response items may be generated in advance, but the ranking of the items may change based on the additional information. In such implementations, once a responsive item is included on a page viewed by a user, the page assignment for that item does not change. Thus, the re-ranking may be applied to the remaining items, or in other words, items that have not yet been presented to the user. The improvement may include generating a new list of responsive items using the modified query based on the additional information. In such implementations, the query engine 125 may generate a smaller set of response items, e.g., 15 instead of 100 or 200. In response to a user request for a next page of search results, query engine 125 may run the modified query to obtain a next set of response items, e.g., another 15 response items. In such implementations, the query engine 125 may return the first page of results faster using less bandwidth than implementations in which the query engine 125 generates a large set of responsive items. Additional information used in dynamic paging may include resident information obtained during presentation of the current page of search results to the user. As illustrated herein, the resident information may be obtained using an agent (e.g., agent 177) of the search engine 110.
Upon finding a responsive item, the query system 120 may be responsible for searching one or more indexes, collectively represented as item index 140. The item index 140 may include a Web document index, e.g., an inverted index that associates terms, phrases, and/or n-grams with documents. A Web document may be any content accessible over the internet such as a Web page, image, video, PDF document, word processing document, audio recording, etc. The item index 140 may also include an index of entities, for example, from a knowledge base or knowledge graph. In a knowledge graph, entities are modeled as nodes, while facts about the entities are modeled as attributes or labeled relationships between the entities. As used herein, an entity may refer to a physical embodiment or representation of a person, place, or thing, e.g., text or other information referring to the entity. For example, a node representing Eiffel Tower may be linked to a node representing Paris by a localized in relationship. The Paris entity may have attributes representing geographic coordinates and may be linked to a node representing France (France) by a localized in relationship. The item index 140 may also include an index of advertisements that associate words or phrases with advertisement campaigns. Thus, the response item may be an advertisement from a campaign. The item index 140 may also include an index of proprietary documents, such as documents accessible only via authentication (including images, audio recordings, videos, etc.). Thus, as used herein, an item may refer to a web document, entity, advertisement, proprietary document, image, record, and the like.
The item index 140 may be stored on a tangible computer-readable storage device, such as a disk, flash memory, buffer memory, or a combination thereof, configured to store data in a semi-permanent or non-transitory form. In some implementations, the index 140 may be stored in a combination of various memories. The query engine 125 may obtain the response terms from the term index 140, rank the response terms, generate search results for at least some of the response terms, and provide the search results to a query requestor, such as the client 170.
In addition to finding responsive items, the query system 120 may also identify suggested items, for example, from suggested items 135 or from responsive items to the query. The suggested term may be related to the query. The suggested term may be related to a particular response item. The suggested terms may include additional responsive terms not initially displayed in the search results page. For example, the query system 120 may identify a list of responsive items with similar types, categories, etc., such as a list of actors appearing in a particular movie or a list of businesses of a certain type "near me". In some implementations, the query system 120 can select some items from the list to display as combined search results, such as rich features. At least some of the remaining items in the list may be provided as suggested items for the rich features, for example, as shown in fig. 4 and 5.
As another example, the query system 120 may use suggested terms 135. Suggested terms 135 may include terms that are pre-computed (e.g., in a process that occurs prior to receiving a query) as being relevant to the query and/or response terms. For example, suggested terms 135 may include queries that generally follow a received query, as determined by analyzing search records. The search records may include aggregated search logs, aggregated data collected from queries, or other aggregated data related to previously processed queries. In some implementations, the search record can be generated by the search engine 110 in the normal course of generating search results. In some implementations, suggested subsequent queries may be ranked by similarity to the query and/or the number of times the suggested query follows the received query. In some implementations, suggested subsequent queries may be ranked by similarity to information in the session information 130. Thus, suggested queries may deviate from the received query and/or response items, but are highly relevant to the information in the session information 130. In some implementations, the suggested follow-up queries can be related to a particular response item. For example, responsive items may be associated with one or more queries, e.g., because responsive items are typically selected after being presented as search results for related queries. If the responsive items have related queries, these queries may be included as suggested items for the responsive items. For example, suggested items 135 may include portions of a subject itinerary that other users have taken. For example, if the current query is "jobs in Pittsburgh," the search system may take "houseing in Pittsburgh's house" or "best elementary school in Pittsburgh" as suggested item 135. As another example, suggested terms 135 may include alternative interpretations of the query term. For example, a query of "jaguar" may generate "jaguar car", "jaguar cat", and/or "jaguar team" as suggestions. Similarly, suggested items 135 may include alternative possibilities. For example, a query for "washing machine" may have "new washing machine" or "washing machine repair" as the suggested item 135, and a query for "university" may include "trade school" or "journey program" as the suggested item 135. Another example of a suggestion that deviates from a query is an alternative perspective. For example, for "How long should I foam roll after running? (how long Should I roll the foam after running? (i i.e. should you roll foam after running. "as a suggested item.
In a similar manner, the responsive items may be related to one or more other items, e.g., because they appear together in a search results page or because they include similar content. Thus, rather than including several items with similar content, the search engine may include the highest ranked items with similar content and use the other items as suggested items for the highest ranked items. As another example, suggested items 135 may include advertisements. The query system 120 may include advertisements that match the keywords in the query. The advertisement may be an item associated with a keyword that the sponsor has selected. In some implementations, the response item may be associated with one or more keywords, and the advertisement may be a suggested item for the response item.
As previously described, the search engine 110 may identify a set of suggested terms for the query and/or a set of terms for at least some of the responsive terms included in the current search results page. Some implementations may associate an icon or other visual queue with each suggested item. The icon may serve as an indication of the type of suggested item. For example, a suggested query, a suggested item, a suggested entity, and a suggested advertisement may each have a different visual queue. The query system 120 may apply a ranking of suggested items. The query system 120 may provide the information needed to display suggested items as part of a response to the query, although the information and suggested items themselves are not initially displayed. In such implementations, a browser, such as browser 175, may be able to display one or more suggested items based on the dwell score without further communication with search engine 110.
The query system 120 may communicate with clients 170 over a network 160. The network 160 may be, for example, the internet, a cellular network, a wired or wireless Local Area Network (LAN), a Wide Area Network (WAN), etc. Network 160 may represent multiple types of networks. Via network 160, query system 120 may communicate with clients 170 and with other domains (not shown) and transfer data to/from clients 170 and other domains.
The search service system 100 may also include an agent 177 running on the client 170. The client 170 may be an example of a computer device 700, as shown in FIG. 7. For example, the client 170 may be a personal computer, mobile phone, tablet, laptop, wearable device, smart television, and the like. The client 170 may include one or more processors 173 formed in a substrate that are configured to execute one or more machine executable instructions or a piece of software, firmware, or a combination thereof. Processor 173 may be semiconductor-based — that is, the processor may comprise semiconductor material that may execute digital logic. The client 170 may also include one or more computer memories 174. Memory 174, such as main memory, may be configured to store one or more data temporarily, permanently, semi-permanently, or a combination thereof. The memory 174 may include any type of storage device that stores information in a format that may be read and/or executed by the one or more processors 173. The memory 174 may store applications, modules, and/or engines that perform certain operations when executed by the one or more processors 173. In some implementations, the applications, modules, or engines can be stored in an external storage device and loaded into memory 174.
The applications may include any number of applications configured to execute on the client 170, such as an operating system, a messaging application, a shopping application, an editing application, a search assistant, a map, and so forth. In particular, these applications include a browser 175. Browser 175 is operable to receive web page code (e.g., HTML, JavaScript, etc.) and render the web page for presentation to a user of client 170. The client 170 thus includes a display device having a viewport. As used herein, a viewport is a polygonal area that displays content rendered by a browser. Typically, the view port is rectangular. The size of the viewport is device dependent, e.g., a viewport on a smartphone is smaller than a viewport of a personal computer or tablet. The content of the rendered web page may not fit entirely within the viewport. In this case, the user can scroll, e.g., perform a scrolling action, to bring content into the viewport and move content out of the viewport. A scroll action is any input that browser 175 (possibly in conjunction with the operating system of client 170) recognizes as performing scrolling to move content into the viewport. Example scroll actions are actuating a scroll wheel on a mouse, a click and drag action, a sliding action (e.g., using a finger or stylus), actuation of a scroll bar in a browser window, and so forth. The browser 175 thus displays scrollable content (e.g., a rendered web page) and the viewport determines which portion of the content the user of the client 170 can actually see, or in other words, which portion of the content is visible.
Browser 175 may include a proxy 177. Agent 177 is a module or lightweight application that is approved for installation by the user. Agent 177 communicates with query system 120. For example, proxy 177 may exchange session information 130 with query system 120. The session information 130 may include data items for providing certain search system functionality. Among other information included in session information 130, agent 177 may account for the resident scores of one or more search results visible in the viewport. Agent 177 can account for the resident scores of search terms in the viewport when the user is not scrolling (performing a scrolling operation). In other words, agent 177 may not account for any dwell scores while the user is actively scrolling. When the user stops scrolling, the content in the viewport is fixed until the user performs other scrolling operations, selects a link, submits a different query, or switches focus. While the content in the viewport is fixed, the agent 177 can periodically calculate a respective dwell score for each search result displayed in the viewport. In other words, each search result displayed in the viewport has its own resident score, which the agent 177 may periodically update. The dwell score of a search result may depend on a number of factors. In some implementations, the residency score may be a weighted combination of factors. In some implementations, a machine learning algorithm, such as linear regression, logistic regression, neural networks, or the like, may be used to determine whether the weights and/or dwell scores satisfy the threshold.
The factors may include a location of the search result in the viewport. For example, the factor may be lower for search results that appear toward the bottom of the viewport (e.g., bottom third, bottom fourth, etc.) than search results that appear toward the middle or top of the viewport. Factors may include how long the search results have been in the viewport. For example, the longer the result is in the viewport, the factor may increase the residency score of the result. The factors can include the amount of search results that appear in the viewport. For example, a search result that is only partially in the viewport may receive a reduction or penalty in its resident score. Factors may include the proximity of the cursor to the search results. In some implementations, the proximity of the cursor may be highly weighted. In some implementations, the proximity of the cursor may be weighted more than any other factor. The cursor may be an icon used in conjunction with a mouse, trackball, or trackpad. When the client 170 includes a touch screen, the cursor may also be the location of the touch. For the purpose of the dwell score, the cursor may be a stationary touch. A stationary touch occurs when a user touches the screen (e.g., with a number or stylus) but does not change the location of the touch or remove the touch. In some implementations, such as a mobile device with a user enabled for eye tracking of browser 175, the factors may include proximity to gaze direction. The factor may be weighted similarly to the proximity of the cursor factor. Agent 177 may periodically calculate the resident score of the search results in the viewport, e.g., so that the time in the viewport may be considered. In some implementations, after the results have been scrolled out of the viewport, the search results may retain their last accounted resident scores.
In some implementations, the agent 177 can inject content based on the residency score. For example, in response to determining that a search result has a resident score that meets (e.g., is greater than or equal to) a predetermined threshold, the agent 177 can automatically inject suggested items into the viewport. Suggested terms may include terms specific to the search results. Suggested terms may include terms of the query for which search results are returned. In some implementations, the dwell score may satisfy the predetermined threshold if the proximity factor to the cursor or the proximity factor to the gaze direction indicates that the gaze direction or the cursor overlaps a portion of the search results and the time in the viewing region indicates that the minimum time has been reached. In some implementations, the dwell score may meet a predetermined threshold if the time in the viewing region indicates that the minimum time has been reached and the factor of position in the viewport is sufficiently high. Some implementations may use a machine learning classifier to determine whether the dwell score meets a predetermined threshold. The agent 177 can use various methods to inject suggested items (also referred to as suggested links), as described in more detail with respect to fig. 2-3C, 4, and 5.
Agent 177 may also send the dwell score to search engine 110. The residence score may be associated with the session information, for example, in the session information 130. The residency score of a session may be deleted when the session is closed. In some implementations, the search engine 110, and in particular the query engine 125, can use the dwell score as one of a ranking signal that generates the next page of search results and provides it as part of dynamic pagination. In particular, as described herein, a term responsive to a query that is similar to a search result of another term having a high dwell score may receive an increase in ranking, as described in more detail with respect to fig. 3D and 3E.
Further to the above description, a user of the client device 170 may be provided with controls that allow the user to make selections regarding whether and when the systems, programs, or features described herein may enable the collection of user information (e.g., information regarding the user's activities, the user's preferences, or the user's current geographic location), and whether to send the user content or communications from a server, such as the search engine 110. Further, certain data may be processed in one or more ways before it is stored or used, such that personally identifiable information is removed. For example, the identity of the user may be processed such that no personally identifiable information can be determined for the user, or the geographic location of the user (such as a city, zip code, or state level) may be summarized where geographic location information is obtained such that a particular geographic location of the user cannot be determined. Thus, the user of the client 170 may control which information about the user is collected, how the information is used, and what information is provided to the user and/or the search engine 110 or agent 177.
The client 170 may include one or more input devices, such as a touch screen, a keyboard, a mouse, a pointer, a microphone, a camera, one or more physical buttons, and the like. The input device may initiate input events, such as scrolling, link selection, cursor movement, which may be received and analyzed by browser 175 and/or agent 177. The client 170 may also include a communication device operable to transmit data from other computing devices (such as another client, server, search engine 110, etc.) and receive data from other computing devices (such as another client, server, search engine 110, etc.) over one or more networks (such as network 160). The configuration of fig. 1 represents one example configuration and implementations may incorporate other configurations.
FIG. 2 shows an example of a viewport 200 displaying search results for a query. A query system, such as query system 120 of fig. 1, may generate content to be rendered by a browser, such as browser 175, in response to query 205. In the example of FIG. 2, the user has submitted a query 205 of "restaurants near me". The content in viewport 200 includes a set of search results 203, such as search results 210, search results 220, search results 230, and so forth. Each search result is associated with a responsive item. The set of search results 203 can include additional search results that are not currently visible in the viewport 200. These additional search results may be moved into the viewport, for example, via a scrolling action. The search result set 203 may be considered a first page of search results. In the example of fig. 2, a cursor 215 is also shown. The cursor 215 is proximate to the search results 210.
3A-3E illustrate examples of dynamically injecting suggested links based on a residency score. Fig. 3A illustrates an example injection of a suggestion link into the viewport 200 of fig. 2 according to some implementations. In the example of FIG. 3A, the dwell score of the search results 210 satisfies a predetermined threshold. As a result of determining that the resident score satisfies the threshold, the system injects (e.g., via agent 177 of fig. 1) the suggested link 330 into the viewport, thereby generating viewport 300 a. Suggested links 330 represent content related to search results 210 and/or queries 205 having a dwell score that satisfies a predefined threshold. In the example of FIG. 3A, suggested link 330 is injected below search result 210 and scrolls the other search results (220 and 230) downward. In the example of FIG. 3A, suggested link 330 includes suggested query 332 and suggested document 334. Although not shown in FIG. 3A, the suggested link may include a suggested entity or advertisement/advertisements. Suggested links 330 may include links similar to responsive terms of search results 210. For example, "Springfield east restaurants" and "Mall Food Court guides" are highly similar to the search results 210. Suggestion link 330 may also include deviating suggestions. For example, "Italian restaurants" and "the Mexican restaurants menu" provide content similar to search results 210 (e.g., related to restaurants near me), but represent a more specific direction to the user. The user may use the deviating suggestions to refine the search in directions not explicitly represented in the query 205. In some implementations, the deviation suggestion can be based on information about the session or the user, with the user's consent.
In some implementations, the suggested links can be presented in a carousel. Suggestion link 330' shows an example carousel. In some implementations, the suggested link 330' can replace the suggested link 330 in the viewport 300 a. The suggested links 330' in the carousel may be scrollable. Suggested links may be listed with icons indicating the type of link, e.g., whether the suggested link is a new query, document, entity, advertisement, etc. For example, icon 336 may indicate that "Springfield east reservations" is a query, where icon 338 may indicate that "the post. Fig. 3B shows another injection suggested to link into the viewport 200 of fig. 2. In the example of fig. 3B, suggested link 330' replaces search result 210 in the viewport. In some implementations, the suggested links 330 of FIG. 3A may also replace the search results 210. Implementations using the technique of fig. 3B have the advantage of not scrolling other search results, which can be advantageous for devices such as mobile phones that have smaller viewports.
Fig. 3C shows another injection suggested to link into the viewport 200 of fig. 2. In the example of FIG. 3C, the viewport is divided into a main content region 342 and a sidebar region 344. The suggested link 340 is injected into the sidebar area 344 using the implementation of fig. 3C. As with FIGS. 3A and 3B, suggested link 340 represents content related to search result 210 having a dwell score that satisfies a predetermined threshold. Suggested links 340 include similar content and deviating (diverse) content related to search results 210. The suggestions in suggested links 340 have a similar format as suggested links 330', e.g., in a carousel format, optionally with icons related to the links and/or the type of link. Other formats may be used, such as suggested links 340', for example. In some implementations, suggested links 340 are anchored to search results 210, i.e., search results having a resident score that results in the injection of the suggested link.
Fig. 3D and 3E illustrate exemplary dynamic paging injection of relevant content into the viewport of fig. 2, according to some implementations. In the example of fig. 3D, the user of the client device is always viewing the viewport 200, and thus, each search result 203 in the viewport has a calculated dwell score. For purposes of the example of fig. 3D, the user positions the cursor 215 near the search results 220 most of the time when the viewport 200 is stationary. Thus, in this example, the search result 220 has the highest dwell score of the search result in the first page of results. The interface represented in viewport 200 includes next page control 225. In the example of FIG. 3D, the user has selected next page control 225. A next page control is any control that initiates a next page action. The next page action indicates that the user wishes to display the next set of search results. If the user clicks or otherwise selects next page control 225, the search engine will provide the next page of search results for rendering by the browser. Implementations are not limited to the exact representation of next page control 225 as shown in FIG. 2. For example, next page control 225 may be some other icon, or may take the form of an alternative number (e.g., "Page 12 3…12") or" next page "or" more results "links. In some implementations, a next page control 225 may be implied. In such an implementation, rather than the user selecting an icon or link, the system may employ super-scrolling (overscroll) as the next page control 225. When the boundary of the scroll zone is reached, super-scrolling occurs. In other words, the browser has exhausted the content to be displayed and scrolling ceases. In some implementations, after the boundary is reached, the user may perform a scrolling action. If no action is defined for the hyper-roll,the client device will typically provide a bounce effect or page refresh. In some implementations, the super-scroll can be interpreted as a selection of a next page control. In other words, the system may interpret the super-scroll as a request for the next page of search results. Accordingly, next page control 225 may be any control or action that causes the browser to display the next page of search results for query 205.
After the user selects next page control 225, the system may generate a next set of search results for query 205. The system may use the dwell score of the search result in the first page as part of the ranking signal and/or as part of the criteria for selecting the search result for the next page. For example, in the example of FIG. 3D, because the search results 220 have the highest dwell scores, the search engine may increase the ranking of items that are more similar to the items represented by the search results 220 (e.g., Italian restaurants). This increase in ranking may result in more italian restaurants (such as search results 350) being included in the search results included in the next page, as shown in fig. 3D. In addition, the italian restaurant's review sites (such as search results 352 and 354) may receive an increase in ranking and appear in the next page of results. Other items not relevant to italian restaurants that are responsive to the query 205 may also be included in the next page, such as search results 356.
In the example of FIG. 3E, the user of the client device is always viewing the viewport 200, and thus, each search result 203 in the view has a resident score. For purposes of the example of fig. 3E, the user positions the cursor 215 near the search result 230 while viewing the first page of the search result. Thus, in this example, the search result 230 has the highest dwell score of the search result in the first page of results. In the example of FIG. 3E, the user has selected next page control 225, indicating that the search engine should provide the next page (second set) of search results. The search engine uses the dwell scores of the search results 203, e.g., to select and/or rank the returned items, when generating the next page. In this example, because the search results 230 have the highest dwell scores, at least some of the responsive items will be similar to the items associated with the search results 230. Thus, for example, as shown in FIG. 3E, the next set of search results may include other small restaurants, such as search results 360. Additionally, or alternatively, the next set of search results may include reviews related to american cafes, such as search results 362 and search results 364. As with FIG. 3D, the next page of search results may also include other results responsive to the query 205, not necessarily only those more similar to the search results 230, such as the search results 356.
Fig. 3D and 3E are examples of how an implementation may use a residency score in dynamic paging. For example, depending on the dwell score of the search results in the first page of search results (e.g., search result set 203), the next page may include search results 350, 352, and 354, or the next page may include search results 360, 362, and 364. Thus, as shown in FIGS. 3D and 3E, implementations may use the dwell score to inject relevant suggestions in the next page of search results using dynamic paging.
FIG. 4 shows an example of a user interface 400 displaying search results for a query 405. In the example of fig. 4, query 405 is "actor of games of chance" (game of troops). The search engine may provide search results 410 and 425 in a first page of search results. The client device can display a first page of search results in the viewport 402. Additional search results not shown in the viewport 402 can be returned as part of the first page of results. The user can scroll down to see these additional results. Search result 410 in the example of FIG. 4 is a grid package. A grid package is an example of a rich feature. Rich features are search results that include graphical elements and facts that are sometimes related to an item. The rich features may be presented in a box such as a knowledge panel or in a carousel format or grid package. In the case where the carousel format can scroll from left to right, the grid package can typically scroll up and down and be initially presented in a collapsed state. For example, the grid package of FIG. 4 may initially display three actors and a control 415 for expanding the grid package. In the example of fig. 4, each item in the grid package includes a photograph of the actor, the actor's name, and the role the actor plays in the Game of threads.
Some implementations may automatically expand the grid package using the resident scores of the search results 410 without the user explicitly selecting the control 415. For example, if the user holds a finger (e.g., cursor 420) in search results 410, the system may account for the dwell score. The longer the user holds a finger close to the search result 410, the higher the dwell score of the search result 410 will be. Once the system determines that the residency score meets (e.g., meets or exceeds) the threshold, the system may automatically expand the grid package, as shown in FIG. 5. Thus, fig. 5 illustrates an example injection of suggested content 510 into viewport 402 of fig. 4. The injection may cause other search results, such as search result 425, to scroll out of the viewport.
In any of the examples represented in fig. 2-5, the system may account for a resident score of injected content in the viewport. Thus, for example, once a grid package is expanded, the system may account for the residency score of each individual item in the grid package. The residency score may then be used to dynamically page or inject other suggested content. For example, in FIG. 3B, the user may position cursor 215 over a suggested link for "Italian stops". This may result in the suggested link having a resident score that results in the search results shown in FIG. 3D after the user selects the next page control 225 of FIG. 3B. In other words, a resident score computed for Italian reservations may result in the interface of FIG. 3D in response to a request for the next page of results. Likewise, the dwell score for a particular actor in the suggested content 510 may result in a request for the next page of search results that includes search results for items more closely related to the particular actor. Thus, implementations may enable suggested links to influence and inject suggested content for dynamic paging. The proposed links may be implemented without dynamic paging. Dynamic paging may be implemented without suggesting links. Suggestion links may also be implemented using dynamic paging without affecting dynamic paging (e.g., some implementations may not account for suggested item residency scores).
FIG. 6 illustrates a flow diagram of a process 600 for injecting relevant suggested content into search results, according to some implementations. Process 600 may be performed by a search service system, such as system 100 of FIG. 1. In particular, process 600 may be performed in part by a search engine, such as search engine 110 of FIG. 1, and an agent on a client device, such as agent 177 of FIG. 1. Process 600 may be one process performed during a browsing session. Process 600 may begin in response to receiving a query from a requestor (605), such as from a client device. The system may obtain items that are considered responsive to the query, or in other words, responsive to a collection of items (610). In implementations using dynamic paging, the number of items in the set of response items may be reduced as compared to search engines that do not use dynamic paging. For example, a response item set may include 10 or 15 items, rather than 100 or more. The system may rank the responsive items. The system may assign the response item to a page, e.g., a first page, a second page. The search system may generate search results for each responsive item assigned to the first page. In some implementations, the search system can also obtain suggested content for at least some of the response items assigned to the first page (615). The response item assigned to the first page may not have suggested content if, for example, the result is not understood, is badly marked or of poor quality, is a new result or marginal topic. In some implementations, the suggested content may be sent with the initial page load. In some implementations, the suggested content may be "slowly loaded" after the initial page becomes visible. In some implementations, suggested content may be downloaded as needed based on interaction with the page, e.g., retrieved when the residency score reaches or approaches a threshold for display. Whether suggested content is downloaded with search results, loaded slowly, or loaded on demand may be based on the user's connection speed, the user's device, the location of the results on the page, etc.
The suggested content may be provided to a client rendering the content along with the search results. Thus, at least some of the search results are visible in the viewport on the client device. The suggested content is initially invisible. Thus, the client displays at least the beginning of the first page of search results (620). It is well known that a user of a client device can interact with search results, e.g., scroll through the search results and/or select one or more search results, etc. When the user is actively scrolling (625, yes), the system takes no action with respect to the resident score. If the system receives a request for the next page of search results (630, yes), the system may obtain the results for the next page (610). In some implementations, the ranking and selection of items for the next page can depend at least in part on the dwell scores computed for items in the previous page or pages. In some implementations, the residency score may be included in the session information.
Once the user stops scrolling (625, NO), the system may account for the dwell score (635). In particular, for each search result that is at least partially in the viewport, the system can account for a dwell score (640). In some implementations, the search results in the viewport can include suggested links, such as suggested links 330,330 ', 340, or 340', and/or expanded content, such as content 510. As described above, the residency score may be based on a combination of factors. The factors include an amount of time that the search results have been in the viewport. In some implementations, the dwell score may include a factor in the proximity of the cursor to the result. In some implementations, the stay score may include the proximity of the gaze direction to the result. In some implementations, the resident score can include factors for the location of the result in the viewport. In some implementations, the resident score can include a factor in the amount of search results visible in the viewport. In some implementations, the residency score may be a weighted combination of one or more factors. In some implementations, the system can use a machine learning model to determine the residency score.
In some implementations, the dwell score may be sent back to the search engine, e.g., to update the session information (655). If the dwell score is communicated back to the search engine, the search engine may use the score as one of many signals in ranking and selecting responsive items, for example as part of step 610. In some implementations, the session information may include one residency score for each item for which the residency score is calculated. In some implementations, the session information may retain a history of the residency scores of the response items accounted for during the session.
In some implementations, if the dwell score of the search results reaches a predetermined threshold (645, yes), the system can inject suggested content (650). The injection may include displaying suggested links for the search results, such as suggested links 330,330 ', 340, and/or 340'. Injecting may include displaying collapsed content, such as content 510. The injection may cause other search results to be moved away from the viewport (e.g., as shown in fig. 3A and 5). If the search result is moved completely out of the viewport, the system stops accounting for the resident score of the result until it is moved back into the viewport. In addition, injecting content may be the result of accounting for the residency score for it. In other words, step 650 may modify the search results for which the dwell score was calculated as part of step 635.
The system may continue to periodically (e.g., continuously, every second, every tenth of a second, at every interaction, etc., or some combination of these) account for the dwell score as part of step 635 until either the user begins scrolling (a scrolling action is received) or the user selects one of the search results. Of course, if the user switches focus to some other window or browser tab, the process 600 may pause the resident score accounting. If the user selects a search result (665, yes), the system obtains the content of the selected result and may update the session information (670). Process 600 then ends, although in some implementations the resulting resident scores may remain in the session information until the browser is closed. Thus, if the user navigates back to the search results page, the dwell score may be used, as described herein. If the user does not select the search result (665, no) but has requested the next page of results (630, yes), the system generates the next page of results (610), which in some implementations uses the residency score to notify and rank the response items represented in the next page.
FIG. 7 illustrates an example of a general purpose computer device 700 that may be operated as the search engine 110 and/or client 170 of FIG. 1 that may be used with the techniques described herein. Computing device 700 is intended to represent various example forms of computing devices, such as laptops, desktops, workstations, personal digital assistants, cellular telephones, smartphones, tablets, televisions, servers, and other computing devices, including wearable devices. The components shown here, their connections and relationships, and their functions, are meant to be examples only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
The processor 702 can process instructions for execution within the computing device 700, including instructions stored in the memory 704 or on the storage device 706 to display graphical information for a GUI on an external input/output device, such as display 716. The display 716 may be a monitor or a flat touch screen display. In some implementations, multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory. Moreover, multiple computing devices 700 may be connected, with each device providing portions of the necessary operations (e.g., as a server farm, a group of blade servers, or a multi-processor system).
The memory 704 stores information within the computing device 700. In one implementation, the memory 704 is a volatile memory unit or units. In another implementation, the memory 704 is a non-volatile memory unit or units. The memory 704 may also be another form of computer-readable medium, such as a magnetic or optical disk. In some implementations, the memory 704 may include expansion memory provided through an expansion interface.
The storage device 706 is capable of providing large amounts of storage for the computing device 700. In one implementation, the storage device 706 may be or include a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory, or other similar solid state storage device. Or an array of devices, including devices in a storage area network or other configuration. A computer program product may be tangibly embodied in such a computer-readable medium. The computer program product may also include instructions that, when executed, perform one or more methods, such as those described above. The computer-or machine-readable medium is a storage device such as the memory 704, the storage device 706, or memory on the processor 702.
The interface 708 may be a high-speed controller that manages bandwidth-intensive operations for the computing device 700, or a low-speed controller that manages lower bandwidth-intensive operations, or a combination of such controllers. An external interface 740 may be provided to enable near area communication of device 700 with other devices. In some implementations, the controller 408 can be coupled to a storage device 706 and an expansion port 714. The expansion port, which may include various communication ports (e.g., USB, bluetooth, ethernet, wireless ethernet) may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, one or more cameras, or to networking devices such as switches and routers, for example, through network adapters.
The computing device 700 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server 730, or more times in a group of such servers. It may also be implemented as part of a rack server system. Additionally, it may be implemented in a computing device such as laptop 732, personal computer 734, or tablet/smartphone 736. An entire system may be made up of multiple computing devices 700 in communication with each other. Other configurations are also possible.
FIG. 8 illustrates an example of a general purpose computer device 800, which may be the search engine 110 of FIG. 1, that may be used with the techniques described herein. Computing device 800 is intended to represent various example forms of large-scale data processing equipment, such as servers, rack servers, data centers, mainframes, and other large-scale computing devices. Computing device 800 may be a distributed system with multiple processors, possibly including network attached storage nodes interconnected by one or more communication networks. The components shown herein, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
The distributed computing system 800 may include any number of computing devices 880. Computing devices 880 may include servers or rack servers, mainframes, etc. that communicate over local or wide area networks, dedicated optical links, modems, bridges, routers, switches, wired or wireless networks, etc.
In some implementations, each computing device may include multiple racks. For example, computing device 880a includes multiple racks 858a-858 n. Each rack may include one or more processors, such as processors 852a-852n and 862a-862 n. The processors may include data processors, network attached storage devices, and other computer controlled devices. In some implementations, one processor may act as a master processor and control scheduling and data allocation tasks. The processors may be interconnected through one or more rack switches 858, and one or more racks may be connected through a switch 878. The switch 878 can handle communications between multiple connected computing devices 800.
Each chassis may include memory, such as memory 854 and memory 864, as well as storage, such as 856 and 866. Storage 856 and 866 may provide mass storage and may include volatile or non-volatile storage, such as network attached disks, floppy disks, hard disks, optical disks, tape, flash memory, or other similar solid state memory devices or arrays of devices, including devices in a storage area network or other configurations. Storage 856 or 866 may be shared among multiple processors, multiple racks, or multiple computing devices, and may include a computer-readable medium storing instructions executable by one or more processors. The memory 854 and 864 may include, for example, one or more volatile memory units, one or more non-volatile memory units, and/or other forms of computer-readable media, such as magnetic disks, optical disks, flash memory, cache, Random Access Memory (RAM), Read Only Memory (ROM), and combinations thereof. Memory, such as memory 854, may also be shared between the processors 852a-852 n. A data structure such as an index may be stored, for example, across storage 856 and memory 854. Computing device 800 may include other components not shown, such as controllers, buses, input/output devices, communication modules, and so forth.
An entire system may be made up of multiple computing devices 800 communicating with each other. For example, device 880a may communicate with devices 880b, 880c, and 880d, and these devices may be collectively referred to as search engine 110. As another example, the search engine 110 of fig. 1 may include two or more computing devices 800. Some computing devices may be geographically close to each other, while other computing devices may be geographically distant. The layout of system 800 is merely an example, and the system may take on other layouts or configurations.
According to certain aspects of the disclosure, a method includes, for each result displayed at least partially in a viewport, the result being part of a reduced set of results identified in response to a query, accounting for a residency score for the result based on an amount of time the result has been in the viewport and a location of the result in the viewport, and in response to determining that the residency score satisfies a threshold, displaying a suggested link for the result in the viewport.
These and other aspects may include one or more of the following, alone or in combination. For example, the dwell score may be accounted for based on an amount of time the result has been in the viewport, a location of the result in the viewport, and a distance of the result from a cursor. As another example, the residency score may be accounted for based on an amount of time the result has been in the viewport, a location of the result in the viewport, and a percentage of the result in the viewport. As another example, displaying the suggested link may include inserting the suggested link into a page element for a result, displaying the suggested link in a sidebar anchored to the result, or replacing the result with the suggested link. As another example, the method may further include updating the ranking signal based on the residency score. In some implementations, the method can further include: determining that a last result of a reduced set of results is displayed in the viewport and a next page is requested, requesting additional search results, and displaying at least some of the additional search results, the additional search results selected in part using the updated ranking signal, wherein the additional search results are a second reduced set of search results. As another example, the suggested links represent both content that is similar to the results and content that deviates from the results.
According to certain aspects of the present disclosure, a method comprises: a query is received from a client device, a first plurality of search results is determined from an inverted index responsive to the query, and the first plurality of search results is provided for display in a viewport at the client device. The method may also include receiving a dwell score for at least a first result of the first plurality of search results, receiving a request for a next page of search results, determining a second plurality of search results from the inverted index responsive to the query, and ranking the second plurality of search results based in part on the dwell score, such that results from the second plurality of search results that are similar to the first result receive an increase in ranking.
These and other aspects may include one or more of the following features, alone or in combination. For example, the number of search results in the first plurality of search results may be a small multiple of the number of search results that fit into the viewport. As another example, the residency score may be received in response to the residency score satisfying a threshold. As another example, a dwell score may be calculated based on an amount of time the first result has been in the viewport, a location of the first result in the viewport, and a distance of the first result from a cursor. As another example, the residency score may represent an amount of time the first result has been in the viewport, a location of the first result in the viewport, and a percentage of the first result in the viewport. As another example, the first plurality of search results may be determined using at least one resident score of a result previously displayed in the viewport. As another example, ranking the second plurality of search results may include: ranking the results is increased in response to determining that the results have the same category as the results in the first plurality of search results that have a corresponding dwell score that satisfies a threshold.
According to certain aspects, a method comprises: displaying a scrollable search result set in a viewport, wherein the search result set represents a reduced search result set in response to a query; and while waiting for a scroll action or link selection, accounting for a respective dwell score for each result of the set of search results that has content visible in the viewport and updating a ranking signal based on the respective dwell score, wherein the updated ranking signal is used to generate a next set of search results responsive to the query in response to a request for a next page of search results.
These and other aspects may include one or more of the following, alone or in combination. For example, in response to determining that the respective dwell score of a first search result in the set of search results satisfies a threshold, the method may further include displaying a suggested link for the first search result in the viewport. In some implementations, the suggested links can include at least one link associated with content that deviates from content associated with the first search result and at least one link associated with content that is similar to content associated with the first search result. As another example, generating the next set of search results using the updated ranking signal may include: ranking the results is increased in response to determining that the results are similar to results in the set of search results that have respective dwell scores that satisfy a threshold. As another example, the respective residency score for the result may be accounted for based on at least two of: an amount of time the result has been in the viewport, a location of the result in the viewport, a distance of the result from a cursor, or a percentage of the result in the viewport.
According to one aspect, a system comprises: means for generating a dwell score for at least one result in the reduced set of search results responsive to the query and means for using the dwell score to generate a second reduced set of search results responsive to the query. According to one aspect, a system comprises: the computer-readable medium may include instructions for generating a dwell score for at least one result in a set of search results and instructions for injecting suggested links in a search results page based on the dwell score.
According to certain aspects of the present disclosure, a system includes at least one processor (formed in a substrate) and a memory storing instructions that cause a computing device to perform any of the methods disclosed herein and variations thereof.
Various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
These computer programs (also known as programs, software applications or code) include machine instructions for a programmable processor, and can be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. As used herein, the terms "machine-readable medium," "computer-readable medium" refer to any non-transitory computer program product, apparatus and/or device (e.g., magnetic discs, optical disks, memory (including read-access memory), Programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor.
The systems and techniques described here can be implemented in a computing system that includes a back-end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front-end component (e.g., a client computer having a graphical user interface or a web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network ("LAN"), a wide area network ("WAN"), and the internet.
The computing system may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
Many implementations have been described. Nevertheless, various modifications may be made without departing from the spirit and scope of the invention. In addition, the logic flows depicted in the figures do not require the particular order shown, or sequential order, to achieve desirable results. In addition, other steps may be provided, or steps may be eliminated, from the described flows, and components may be added to, or removed from, the described systems. Accordingly, other implementations are within the scope of the following claims.
Claims (21)
1. A method, comprising:
for each result displayed at least partially in the viewport, the result is part of a reduced set of results identified in response to the query:
computing a dwell score for the result based on an amount of time the result has been in the viewport and a location of the result in the viewport; and
in response to determining that the residency score satisfies a threshold, displaying a suggested link for the result in the viewport.
2. The method of claim 1, wherein the residency score is accounted for based on an amount of time the result has been in the viewport, a location of the result in the viewport, and a distance of the result from a cursor.
3. The method of claim 1, wherein the residency score is accounted for based on an amount of time the result has been in the viewport, a location of the result in the viewport, and a percentage of the result in the viewport.
4. The method of claim 1, wherein displaying the suggested link comprises inserting the suggested link into a page element of the result.
5. The method of claim 1, wherein displaying the suggested link comprises displaying the suggested link in a sidebar anchored to the result.
6. The method of claim 1, wherein displaying the suggested link comprises replacing the result with the suggested link.
7. The method of claim 1, wherein the method further comprises:
updating a ranking signal based on the residency score.
8. The method of claim 7, wherein the method further comprises:
determining that a last result in the reduced set of results is displayed in the viewport and a next page is requested;
requesting additional search results; and
displaying at least some of the additional search results, the additional search results selected in part using the updated ranking signal,
wherein the additional search results are a second reduced set of search results.
9. The method of claim 1, wherein the suggested links represent both content similar to the results and content deviating from the results.
10. A method, comprising:
receiving a query from a client device;
determining a first plurality of search results from an inverted index responsive to the query;
providing the first plurality of search results for display in a viewport at the client device;
receiving a dwell score for at least a first result of the first plurality of search results;
receiving a request for a next page of search results;
determining a second plurality of search results from the inverted index responsive to the query; and
ranking the second plurality of search results based in part on the dwell score, such that results from the second plurality of search results that are similar to the first results receive a boost in ranking.
11. The method of claim 10, wherein a number of search results in the first plurality of search results is a small multiple of a number of search results that fit into the viewport.
12. The method of claim 10, wherein the residency score is received in response to the residency score satisfying a threshold.
13. The method of claim 10, wherein the residency score is accounted for based on an amount of time the first result has been in the viewport, a location of the first result in the viewport, and a distance of the first result from a cursor.
14. The method of claim 10, wherein the residency score represents an amount of time the first result has been in the viewport, a location of the first result in the viewport, and a percentage of the first result in the viewport.
15. The method of claim 10, wherein the first plurality of search results are determined using at least one resident score of results previously displayed in the viewport.
16. The method of claim 10, wherein ranking the second plurality of search results comprises: ranking the results in response to determining that the results have the same category as the results in the first plurality of search results that have a respective dwell score that satisfies a threshold.
17. A method, comprising:
displaying a scrollable search result set in a viewport, wherein the search result set represents a reduced search result set in response to a query; and
while waiting for a scroll action or link selection:
computing a respective dwell score for each result in the search result set that has content visible in the viewport, an
Updating a ranking signal based on the respective residency score,
wherein the updated ranking signal is used to generate a next set of search results responsive to the query in response to a request for a next page of search results.
18. The method of claim 17, further comprising: in response to determining that a respective dwell score of a first search result in the set of search results satisfies a threshold, displaying, in the viewport, a suggested link for the first search result.
19. The method of claim 18, wherein the suggested links include at least one link associated with content that deviates from content associated with the first search result and at least one link associated with content that is similar to content associated with the first search result.
20. The method of claim 17, wherein generating the next set of search results using the updated ranking signal comprises: ranking the results is increased in response to determining that the results are similar to results in the set of search results that have respective dwell scores that satisfy a threshold.
21. The method of claim 17, wherein the respective residency score of a result is accounted for based on at least two of: an amount of time the result has been in the viewport, a location of the result in the viewport, a distance of the result from a cursor, or a percentage of the result in the viewport.
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US16/946,150 US11379490B2 (en) | 2020-06-08 | 2020-06-08 | Dynamic injection of related content in search results |
US16/946,150 | 2020-06-08 |
Publications (1)
Publication Number | Publication Date |
---|---|
CN113360741A true CN113360741A (en) | 2021-09-07 |
Family
ID=77533134
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202110637286.4A Pending CN113360741A (en) | 2020-06-08 | 2021-06-08 | Dynamically injecting relevant content in search results |
Country Status (2)
Country | Link |
---|---|
US (1) | US11379490B2 (en) |
CN (1) | CN113360741A (en) |
Families Citing this family (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN112799561A (en) * | 2021-02-05 | 2021-05-14 | 北京字节跳动网络技术有限公司 | Information display method and device and computer storage medium |
Family Cites Families (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8117197B1 (en) * | 2008-06-10 | 2012-02-14 | Surf Canyon, Inc. | Adaptive user interface for real-time search relevance feedback |
US7693869B2 (en) | 2006-09-06 | 2010-04-06 | International Business Machines Corporation | Method and apparatus for using item dwell time to manage a set of items |
US8959104B2 (en) * | 2008-03-21 | 2015-02-17 | Microsoft Corporation | Presenting query suggestions based upon content items |
WO2011117320A1 (en) * | 2010-03-23 | 2011-09-29 | Philipp Von Hilgers | Method and device for dynamically updating a list of search results |
US20150193390A1 (en) | 2012-12-03 | 2015-07-09 | Google Inc. | Visited hyperlink appearance based on user activity |
US20140280890A1 (en) * | 2013-03-15 | 2014-09-18 | Yahoo! Inc. | Method and system for measuring user engagement using scroll dwell time |
US10007957B2 (en) * | 2015-04-14 | 2018-06-26 | Amadeus S.A.S. | Selecting search results for responding to search query |
US20180011854A1 (en) | 2016-07-07 | 2018-01-11 | Yahoo Holdings, Inc. | Method and system for ranking content items based on user engagement signals |
-
2020
- 2020-06-08 US US16/946,150 patent/US11379490B2/en active Active
-
2021
- 2021-06-08 CN CN202110637286.4A patent/CN113360741A/en active Pending
Also Published As
Publication number | Publication date |
---|---|
US20210382905A1 (en) | 2021-12-09 |
US11379490B2 (en) | 2022-07-05 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US20210027203A1 (en) | Action suggestions for user-selected content | |
US10733360B2 (en) | Simulated hyperlinks on a mobile device | |
US10175860B2 (en) | Search intent preview, disambiguation, and refinement | |
US10635677B2 (en) | Hierarchical entity information for search | |
US10061820B2 (en) | Generating a user-specific ranking model on a user electronic device | |
US9449079B2 (en) | Method of and system for displaying a plurality of user-selectable refinements to a search query | |
US20170140006A1 (en) | Method and system for presenting a search result in a search result card | |
US20210406268A1 (en) | Search result annotations | |
US11379490B2 (en) | Dynamic injection of related content in search results | |
RU2608468C2 (en) | Easy two-dimensional navigation of video database | |
US20230350955A1 (en) | Comparative search within user-generated content | |
US11714867B2 (en) | Discovering alternate online service providers | |
TW201447615A (en) | Social entity previews in query formulation |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |