EP4047500B1 - Privacy preserving data collection and analysis - Google Patents
Privacy preserving data collection and analysis Download PDFInfo
- Publication number
- EP4047500B1 EP4047500B1 EP21211089.4A EP21211089A EP4047500B1 EP 4047500 B1 EP4047500 B1 EP 4047500B1 EP 21211089 A EP21211089 A EP 21211089A EP 4047500 B1 EP4047500 B1 EP 4047500B1
- Authority
- EP
- European Patent Office
- Prior art keywords
- user
- data structure
- users
- data
- probabilistic data
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
- 238000013480 data collection Methods 0.000 title description 5
- 238000007405 data analysis Methods 0.000 title 1
- 238000000034 method Methods 0.000 claims description 59
- 238000012545 processing Methods 0.000 claims description 49
- 230000004044 response Effects 0.000 claims description 20
- 230000008569 process Effects 0.000 description 36
- 230000004931 aggregating effect Effects 0.000 description 20
- 238000004590 computer program Methods 0.000 description 13
- 238000010586 diagram Methods 0.000 description 10
- 238000013479 data entry Methods 0.000 description 9
- 238000004458 analytical method Methods 0.000 description 7
- 238000004891 communication Methods 0.000 description 7
- 230000006870 function Effects 0.000 description 6
- 230000003993 interaction Effects 0.000 description 4
- 230000003287 optical effect Effects 0.000 description 3
- 230000000644 propagated effect Effects 0.000 description 3
- 230000009286 beneficial effect Effects 0.000 description 2
- 239000003795 chemical substances by application Substances 0.000 description 2
- 238000003780 insertion Methods 0.000 description 2
- 230000037431 insertion Effects 0.000 description 2
- 238000010295 mobile communication Methods 0.000 description 2
- 230000004224 protection Effects 0.000 description 2
- 238000013515 script Methods 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 230000006399 behavior Effects 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 238000013500 data storage Methods 0.000 description 1
- 238000013461 design Methods 0.000 description 1
- 230000000694 effects Effects 0.000 description 1
- 238000005516 engineering process Methods 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000007726 management method Methods 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
- G06F21/6218—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database
- G06F21/6245—Protecting personal data, e.g. for financial or medical purposes
- G06F21/6254—Protecting personal data, e.g. for financial or medical purposes by anonymising data, e.g. decorrelating personal data from the owner's identification
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
- G06F21/6218—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database
- G06F21/6245—Protecting personal data, e.g. for financial or medical purposes
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/901—Indexing; Data structures therefor; Storage structures
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F17/00—Digital computing or data processing equipment or methods, specially adapted for specific functions
- G06F17/10—Complex mathematical operations
- G06F17/18—Complex mathematical operations for evaluating statistical data, e.g. average values, frequency distributions, probability functions, regression analysis
Definitions
- This specification relates to data processing and preserving user privacy when collecting and analyzing user data.
- the Internet facilitates exchange of information and transactions between users and providers across the globe.
- Providers may make content (e.g., news articles, audio, etc.), products (e.g., consumer goods), and/or services (e.g., advertising services) available over the Internet, which users may access and/or purchase.
- providers may receive significant amount of user data (assuming that the users consent to such data collection).
- Examples of the types of user data that providers may collect include, but are not limited to, the user's location, the types of content that the user accesses, the types of products and/or services that the user purchases, the date the user last accessed the provider's website, and the amount that the user spent on the provider's products.
- providers can aggregate data for multiple users to, for example, improve the provider's operations and/or improve user experience. For example, providers may aggregate the data for multiple users visiting the provider's website to identify and drop the least purchased products available from the provider's website. As another example, providers that provide advertising services may use the user data to determine effectiveness of particular advertising campaigns or to select content that is of most interest to the users.
- Prior art document US2016/378796-A1 discloses a technology providing for a match fix-up stage that removes matching documents identified for a search query that don't actually contain terms from the search query.
- a representation of each document e.g., a forward index storing a list of terms for each document
- one innovative aspect of the subject matter described in this specification can be embodied in methods including the operations of receiving, by a data processing apparatus and from a client device, user data specifying one or more attributes of a user; generating, by the data processing apparatus, a unique entry for the user using the user data and a user identifier unique to the user; inserting, by the data processing apparatus, a privacy enhanced representation of the unique entry into a probabilistic data structure that includes a plurality of privacy enhanced representations of unique entries for a plurality of users, including: generating, by the data processing apparatus, a hash representation of the unique entry; updating, by the data processing apparatus, the probabilistic data structure based on the hash representation; discarding, by the data processing apparatus, the user data after inserting the privacy enhanced representation of the unique entry into the probabilistic data structure; receiving a query requesting a response specifying how many users have an attribute that matches a given attribute specified in the query; obtaining, by the data processing apparatus and using the probabilistic data structure, a first number of users that
- inventions of this aspect include corresponding systems, devices, apparatus, and computer programs configured to perform the actions of the methods.
- the computer programs e.g., instructions
- Methods can include obtaining, by the data processing apparatus, a false negative rate; determining, by the data processing apparatus, that the unique entry is to be inserted into the probabilistic data structure based on the false negative rate; wherein inserting, by the data processing apparatus, a privacy enhanced representation of the unique entry into a probabilistic data structure that includes a plurality of privacy enhanced representations of unique entries for a plurality of users, including generating the hash representation of the unique entry and updating the probabilistic data structure based on the hash representation only in response to determining that the unique entry is to be inserted into the probabilistic data structure based on the false negative rate; and wherein determining, by the data processing apparatus, the estimated number of users based on the first number of users and a false positive rate of the probabilistic data structure, including scaling, by data processing apparatus, the estimated number of users based on the false negative rate to obtain a scaled estimated number of users.
- Methods can include identifying, at random and using a specified percentage, one or more locations of the probabilistic data structure; updating values of the one or more locations of the probabilistic data structure; and scaling the scaled estimated number of users based on a number of the one or more locations.
- Methods can include receiving, by a data processing apparatus and from a client device, user data specifying one or more attributes of a user, wherein the one or more attributes comprises a continuous value attribute that includes values ranging from a minimum value to a maximum value; generating, by the data processing apparatus, a normalized probability for a value of the continuous value attribute that is proportional to the maximum value; determining, by the data processing apparatus, that the unique entry is to be inserted into the probabilistic data structure based on the normalized probability; wherein inserting, by the data processing apparatus, a privacy enhanced representation of the unique entry into a probabilistic data structure that includes a plurality of privacy enhanced representations of unique entries for a plurality of users, including generating the hash representation of the unique entry and updating the probabilistic data structure based on the hash representation only in response to determining that the unique entry is to be inserted into the probabilistic data structure based on the normalized probability; and receiving a query requesting an aggregate value of a continuous value attribute specified in the query; determining, by the
- Determining, by the data processing apparatus and using the probabilistic data structure, the aggregate value of the continuous value attribute based on the estimated number of inserted users and maximum value includes scaling the estimated number of inserted users using the maximum value to generate the aggregate value of the continuous value attribute.
- Methods can include determining, by the data processing apparatus, the date of receipt of the user data specifying one or more attributes of the user; adjusting, by the data processing apparatus, the data updated in the probabilistic data structure using data specifying the date of receipt of the user data; receiving a query requesting a response specifying how many users have an attribute that matches a given attribute within a specified period; determining, using the probabilistic data structure, the dates of receipt of the given attribute for the estimated number of users; and identifying a number of users among the estimated number of users for which the respective date of receipt is within the specified period.
- Methods can include discarding, by the data processing apparatus, data in the probabilistic data structure that is older than a predetermined period.
- Methods can include identifying, at random and using a specified percentage, one or more locations of the probabilistic data structure; updating values of the one or more locations of the probabilistic data structure; and scaling the scaled estimated number of users based on a number of the one or more locations.
- the innovations described in this specification reduce the privacy risks associated with storing raw user data (e.g., data leaks or unauthorized access to user data).
- a provider may store user data in its raw form, but such raw data storage is susceptible to unauthorized access. For instance, if a malicious party gains access to the provider's systems, the raw user data stored in these systems may be readily accessible.
- the innovations described in this specification reduce this risk by inserting a privacy-enhanced representation of the user data, such as a hash representation of the user data, into a probabilistic data structure that further masks the user data.
- the combination of using hashed representations of the user data in combination with a probabilistic data structure not only masks the data itself (e.g., using the hash representation rather than the actual user data), but also masks the number of users that have a specific set of user data.
- probabilistic data structures upon being queried, may identify a number of entries that actually match the query (i.e., true positives) as well as entries that do not match the query (i.e., false positives).
- the probabilistic data structure reveals the likelihood or probability that certain user data is present in the probabilistic data structure.
- the likelihood or probability that certain user data is present in the probabilistic data structure may be sufficient for a provider to perform its analysis. For example, for a probabilistic data structure that stores users' visits to a particular store, a provider does not know which entries correspond to a particular user. However, the provider can estimate, using the probabilistic data structure, the number of times that users visited the store. Furthermore, because the probabilistic data structure allows the provider to analyze the user data, the provider does not need to store the user data in its raw format, thereby further reducing the likelihood of a data leak revealing the user data.
- innovations described in this specification allow significant resource savings (e.g., reduced utilization of data processing resources and/or memory resources) by allowing the provider to discard raw user data (which can consume significant amount of resources) and instead store a privacy-enhanced representation of this data in the probabilistic data structure, which requires much fewer resources.
- false negatives in the context of probabilistic data structures refers to a query of the probabilistic data structure that does not output one or more matching entries, when in fact the probabilistic data structure does include such matching entries.
- most types of probabilistic data structures do not generate any false negatives.
- a malicious party may be able to query the conventional probabilistic data structure to determine with certainty that a particular user is not among the users that have certain attributes. As such, the malicious party may be able to implicitly determine information about a user based on information obtained from a conventional probabilistic data structure.
- a malicious party may query the conventional probabilistic data structure and be able to determine that user A did not buy a security system from the only store, store B, that sells security systems in a particular geographical region.
- the innovations described in this specification enable insertion of false negatives into the probabilistic data structure and thus, can thwart attempts by the malicious party to determine information about a user that could otherwise be obtained from conventional probabilistic data structures.
- the providers are aware of the false negative rate and can scale the output of the probabilistic data structure to determine the true number of users with one or more particular attributes, while still providing the enhanced privacy protections achieved by way of the false negatives.
- conventional probabilistic data structures may store binary data (i.e., 1s and 0s)
- innovations described in this specification facilitate storing non-binary information in the probabilistic data structure. This enables storing richer data in the probabilistic data structure than the data stored in conventional probabilistic data structures. Examples of the types of non-binary information that may be stored in the probabilistic data structure include continuous values and dates.
- the techniques described in this specification allow memory efficient storing of continuous values, which conventionally can take up a large amount of storage space, using a probabilistic data structure, thereby reducing the amount of storage space required to store the continuous values. Storing such continuous values in the probabilistic data structures allows providers to perform more sophisticated analysis than the analysis that is possible using conventional probabilistic data structures. For example, rather than just determining how many users shopped at a particular store, storing continuous values may allow providers to determine how much money was spent by all these users at a particular store.
- the techniques described in this specification also allow storing dates in the probabilistic data structure.
- This technique is advantageous when a new data point needs to be collected on a regular basis while the other attributes for the user remain relatively constant.
- This technique also efficiently manages the finite space of the probabilistic data structure, which conventionally can become fully committed by repeated insertion of a large volume of user data.
- the probabilistic data structure may store the date when the user data was last updated. Thus, data older than a certain predefined period may be removed from the data structure.
- storing date information in probabilistic data structures allows providers to perform more sophisticated analysis, such as determining current user trends and demands. For example, without date information, the provider may infer that product A is very popular because it was purchased by 100 users. However, with date information, the provider may further discern that product A is not that popular because only two users have purchased product A in the last six months.
- This disclosure relates to computer implemented methods and systems that preserve user privacy when collecting and analyzing user data.
- providers may receive significant amount of user data, such as, for example, the types of content that the user accesses, when the user last accessed the provider's website, and the amount that the user spent on the provider's products. If users allow the provider to collect such user data, the providers can analyze this data to improve the provider's operations and/or improve user experience. For example, providers may use user data to identify the most viewed and/or purchased products while dropping products that are not regularly viewed or do not generate revenue for the provider.
- providers can preserve user privacy with respect to data collected from users, while maintaining the data in a form that allows providers to perform analyses on the user data.
- the provider Upon receiving user data specifying one or more attributes, the provider generates a privacy-enhanced representations of the user data using, for example, one or more hash functions.
- the provider stores the privacy-enhanced representation of the user data in a probabilistic data structure. The provider may then discard the user data, thereby preventing direct access to that data even if an unauthorized third party gained access to the system.
- the provider may query the probabilistic data structure to estimate the actual number of users that have an attribute that matches a given attribute specified in the query.
- the probabilistic data structure identifies the number of users that match the given attribute. This number represents the actual number of users that have the given attribute as well as a number of false positives identified by the probabilistic data structure.
- the provider can scale the number of users using the false positive rate of the probabilistic data structure.
- the phrase false positive rate refers to a value that identifies the expected rate or number of false positives associated with a probabilistic data structure.
- the false positive rate may be, for example, a function of the number of items inserted into the probabilistic data structure and the size of the probabilistic data structure.
- false negatives may be inserted into the probabilistic data structure by dropping some user data entries. This may be accomplished by establishing a false negative rate and then discarding user data entries based on the false negative rate.
- the phrase false negative rate refers to a value that identifies the rate of false negatives associated with data in a probabilistic data structure.
- the provider may be able to determine the actual number of users with a given attribute by scaling the number of users returned by the probabilistic data structure based on both the false positive rate and the false negative rate.
- the probabilistic data structure may also store more than binary information (i.e., 0s and 1s) and in particular, the probabilistic data structure may store continuous values.
- the probabilistic data may store the revenue per transaction ranging from $0 to $1000 at a particular store Store A.
- the provider may receive user data where one or more attributes is/are measured using continuous values (such as transaction revenue in the above example).
- the provider may generate a normalized probability for this attribute by dividing the continuous value by the maximum possible value of the attribute. In the above example, if there are 10 transactions at store A of $400 each (totaling $4000), the normalized probability is 400/1000, which is 0.4 or 40%.
- the provider generates a privacy enhanced representation of the user data and updates the probabilistic data structure using this privacy enhanced representation.
- the number of entries inserted into the probabilistic data structure is scaled by the normalized probability.
- 40% of the ten entries, i.e., four entries, are inserted into the probabilistic data structure.
- the provider may be able to determine the total amount of the continuous value attribute for all the privacy enhanced user data stored in the probabilistic data structure.
- the provider first estimates the actual number of users with a given attribute (e.g., the particular store where users spent money) by obtaining the number of users returned by the probabilistic data structure having the given attribute and then scaling this number using the false positive rate.
- the provider then scales the actual number of users by the maximum value (e.g., by multiplying the actual number of users by the maximum value).
- the provider may query the probabilistic data structure to obtain four entries. The number of entries (four) is then multiplied by the maximum value of $1000 to obtain the total amount of $4000.
- the provider may store in the probabilistic data structure the date when an entry in the probabilistic data structure was last updated. As described above (and in greater detail below), the provider generates a privacy enhanced representation of the user data and updates the probabilistic data structure using this privacy enhanced representation. Rather than insert a binary value into the data structure at the appropriate locations, the provider inserts the date. Subsequently, based on the dates stored in the probabilistic data structure, the provider may perform garbage collection by removing data from the probabilistic data structure that is older than a certain period. The provider may also query the probabilistic data structure to identify the number of users with one or more attributes in a specified period.
- a user may be provided with controls allowing the user to make an election as to both if and when systems, programs, or features described herein may enable collection of user information (e.g., information about a user's social network, social actions, or activities, profession, a user's preferences, or a user's current location), and if the user is sent content or communications from a server.
- user information e.g., information about a user's social network, social actions, or activities, profession, a user's preferences, or a user's current location
- certain data may be treated in one or more ways before it is stored or used, so that personally identifiable information is removed.
- a user's identity may be treated so that no personally identifiable information can be determined for the user, or a user's geographic location may be generalized where location information is obtained (such as to a city, ZIP code, or state level), so that a particular location of a user cannot be determined.
- location information such as to a city, ZIP code, or state level
- the user may have control over what information is collected about the user, how that information is used, and what information is provided to the user.
- FIG. 1 is a block diagram of an example environment 100 in which information is exchanged between client devices and providers.
- the example environment 100 includes a network 108, such as a local area network (LAN), a wide area network (WAN), the Internet, or a combination thereof.
- the network 108 connects providers 130 and client devices 102.
- the example environment 100 may include many different providers 130 and client devices 102.
- a client device 102 is an electronic device that is capable of requesting and receiving content and resources over the network 108.
- Example client devices 102 include personal computers, mobile communication devices, digital assistant devices, and other devices that can send and receive data over the network 108.
- a client device 102 typically includes a user application, such as a web browser, to facilitate the sending and receiving of data over the network 108, but native applications executed by the client device 102 can also facilitate the sending and receiving of content over the network 108.
- a client device 102 may exchange information with one or more providers 130.
- a provider 130 may be implemented as a data processing apparatus or as a computer system that is described with reference to Figure 5 , or any other appropriate processing system.
- the provider 130 includes a request handler 110, one or more response servers 118, a data aggregating engine 112, a data warehouse 122, and a query server 120.
- the provider 130 is depicted as a single block with various sub-blocks.
- the provider 130 could be a single device or single set of devices, this specification contemplates that the provider 130 could also be a group of devices, or even multiple different systems that communicate in order to provide content, products, and/or service to client devices and to collect and aggregate information.
- the provider could encompass one or more of a search system, a video streaming service, an audio streaming service, a navigation service, an advertising service, or any other service.
- one or more components of the provider or operations performed by these components may be performed by one or more components that are included with the client device.
- components of the provider 130 such as the data entry generator 114 and the hash generator 116 (which are further described below) may be located at the client device 102 and thus, their respective operations (which are also described below) may be performed by the client device 102, instead of the provider 130.
- Providers may make content, services, and/or products available on the Internet, e.g., on the providers' websites or on third party websites.
- a client device 102 may request content, services, and/or products.
- the provider 130 may receive this request on its website, which it may transmit to the request handler server 110 of the provider 130. Alternatively, the request may be routed directly to the request handler server 110 of the provider 130 from one or more third parties that received the request from client device 102.
- the request handler server 110 analyzes the received request to determine the type of response to provide to the client device 102. For example, the request handler server 110 may receive a user request from a client device 102 to purchase one of the products listed on the provider's website. The request handler server 110 may parse the user request to identify the appropriate attributes and then send these attributes to the transaction server 124.
- the types of attributes that may be identified from the user request include discrete data about the user that the provider may need to respond to the user's request as well as data the provider may want to analyze and aggregate. These may include, among others, the product/service name, product/service identifier, unique identifier assigned to the user, geographic information (e.g., region where request was submitted, network location, user address, zip code), a name (or network location) of the requesting device (e.g., the client device 102), the cost of the product/service/content purchased, the day of the transaction, and the location of the provider from which the product/service is requested (e.g., the website through which the request was received).
- the attributes may also include information that may be used for debugging purposes, such as process name, version numbers, etc.
- the request handler server 110 identifies attributes such as the user identifier, the product identifier, shipping speed, the shipping information, the purchase price of the product, the shipping cost, and the website where the request originated (e.g., in the case where the provider may operate more than one website).
- the transaction server 124 may execute a transaction based on the received attributes.
- the transaction server 124 may determine a total cost for the product including the shipping cost and the purchase price of the product.
- the transaction server 124 schedules the shipping for the product at the received shipping address and at the desired shipping speed. Once scheduled, the transaction server 124 may send a notification to a shipping center to pickup the product. In parallel, the transaction server 124 may send a notification to the user, confirming that the transaction was successful and that the user's order is confirmed.
- the user may allow the provider 130 to collect data with respect to this transaction.
- the user may allow such data collection by opting into the provider's data collection policy, which may be provided to the user at the outset of the user's relationship with the provider 130, e.g., at the time when the user signs up as a member for the provider's website.
- the user may be expressly asked for permission for such data collection during the transaction.
- the transaction server 118 may include in the notification to the user of the client device 102, a request to collect the user data specific to the present transaction.
- the user may confirm that the provider 130 may collect the transaction specific information.
- the request handler server 110 sends the identified attributes from the user request to the data aggregating engine 112.
- the data aggregating engine 112 generates and stores a privacy enhanced representation of the user data in one or more data structures (e.g., 122-A, 122-B) stored in the data warehouse 122 (as described further with reference to Figures 2 to 4 ).
- the query server 120 may receive a query requesting certain information about the data stored in the data warehouse 122.
- the query may request the number of users that purchased a particular product, Product A, from a particular website (Website B).
- the query server 120 may use the attributes ⁇ Product A> and ⁇ Website B> to query the appropriate data structure in the data warehouse to determine the query response. This response is then provided to the requestor via the query server 120. Additional details regarding the processing of queries is described further with reference to Figures 2 to 4 .
- Figure 2 is a flow chart of an example process 200 that describes storing and analyzing user data using a probabilistic data structure.
- the operations of the process 200 are described below for purposes of illustration only.
- the operations of the process 200 can be performed by any appropriate device or system, e.g., any appropriate data processing apparatus.
- the operations of the process 200 can also be implemented as instructions that are stored on a computer readable medium, which, when executed by one or more data processing apparatus, cause the one or more data processing apparatus to perform the operations of the process 200.
- the operation of the process 200 are described below with reference to the components of the provider 130.
- the probabilistic data structure referenced in Figure 2 may be a Bloom filter, but it may also be other types of probabilistic data structures, such as, for example, HyperLogLog and Count-Min sketch.
- the provider 130 receives user data specifying one or more user attributes from a client device (at 202).
- the request handler server 110 may receive a user request from a client device 102 to purchase one of the products, Product A, listed on one of the provider's websites, Website B.
- the request handler server 110 may parse the user request to identify the attributes in the user request.
- the request handler server 110 may use an existing list of attributes that it maintains to identify the same attributes in the user request.
- the attributes include product sales (with a value of Product A) and store (with a value of Website B).
- the request handler server 110 identifies attributes such as user identifier (e.g., a unique identifier assigned to each user who is a member of the provider's website), the product identifier (e.g., a unique identifier assigned to each of the provider's products), payment information, shipping speed, the shipping information, the purchase price of the product, the shipping cost, and the website where the request originated (e.g., in the case where the provider may operate more than one website). As described with reference to Figure 1 , the request handler server 110 may identify several other types of attributes. The request handler server 110 sends the identified attributes to the data aggregating engine 112.
- user identifier e.g., a unique identifier assigned to each user who is a member of the provider's website
- the product identifier e.g., a unique identifier assigned to each of the provider's products
- payment information e.g., shipping speed, the shipping information, the purchase price of the product, the shipping cost, and the website where
- the data aggregating engine 112 upon receiving the attributes, may select for storage only data for one or more attributes that are presently stored in the data warehouse 122. Alternatively, the data aggregating engine 112 may select for storage all the attributes received in the user request. If the attributes do not already include the user identifier (e.g., in the case where the user is a first time shopper on the provider's website), the data aggregating engine generates a unique identifier for the user. In the above example, the data aggregating engine may identify the following attributes for storage: the user identifier (943215), the product identifier (Product A), and the website where the request originated (Website B). Note that in this example, the user already had an existing unique user identifier. Alternatively, the data aggregating engine 112 may generate a unique identifier for the user using, for example, a random number generator.
- the provider 130 generates a unique entry for the user using the user data and the unique user identifier (at 204).
- the data entry generator 114 generates a unique entry as a tuple with the following form: ⁇ User ID, Attribute 1, Attribute 2, ..., Attribute n>.
- the data entry generator 114 generates a tuple for the following attributes: user identifier (943215), the product identifier (Product A), and the website where the request originated (Website B). The generated tuple would thus be: ⁇ 943215, Product A, Website B>.
- Generating a tuple is one of many ways of concatenating the user identifier and the one or more attributes. For example, another way of concatenating this information includes generating a hash representation for the user identifier and for each of the attributes, and then concatenating the hash representations of the user identifier and each of the attributes.
- the provider 130 desires to insert false negatives in the probabilistic data structure, then it obtains a false negative rate (at 206).
- the data aggregating engine 112 may maintain design information for the probabilistic data structure, which may include individual false negative rates for each data structure stored in the data warehouse 122.
- the provider 130 may assign the same false negative rate for all probabilistic data structures stored in the data warehouse 122. In the above example, the false negative rate may be 25%.
- the provider 130 discards user entries based on a false negative rate (at 208). For example, if the false negative rate is 25% and the provider is inserting 100 user entries, the provider 130 may generate unique entries for each of the user entries (for example, in the manner described above) and then drop 25% of these 100 user entries (i.e., 25 entries). The provider 130 retains (e.g., in a temporary storage) the remaining user entries, i.e., the non-discarded user entries.
- the provider 130 determines whether the unique entry that is generated at operation 204 is among the non-discarded user entries (at 210). In some implementations, the provider 130 can compare the unique entry generated at operation 204 with the unique entries corresponding to the non-discarded user entries (at operation 208). If the provider 130 does not find a match based on this comparison (at 212), it determines that the unique entry generated at operation 204 is among the discarded entries and discards the unique entry and the corresponding user data at operation 220 (described below).
- the provider 130 can send a command to the data aggregating engine 112 to insert a privacy enhanced representation of the tuple into a probabilistic data structure stored in the data warehouse 122, as further described below with reference to operation 214.
- a certain percentage (or number) of the locations of the probabilistic data structure can also be set at random to a value of 1.
- the data aggregating engine 112 inserts the privacy enhanced representation of the unique entry into the probabilistic data structure (at 214) by generating a hash representation of the unique entry (at 216) and updating the probabilistic data structure based on the hash representation (at 218).
- the data aggregating engine 112 can send a command along with the unique entry (generated at 204) to the hash generator 116 to generate the hash representation of the unique entry.
- the hash generator 116 may input the unique entry to one or more hash functions, each of which outputs a hash representation of the unique entry.
- the hash generator may use any available hash functions, such as, for example, SuperFastHash, CityHash, MurmurHash, SHA-256, and SpookyHash.
- the hash generator 116 may use three hash functions (e.g., SuperFastHash, CityHash, and MurmurHash), each of which may generate a different hash value.
- the hash generator 116 may send a message, including the unique identifier (e.g., the tuple ⁇ 943215, Product A, Website B>) as well as the three hash values corresponding to the unique identifier to the data interface 118.
- the data interface 118 may maintain a list of all the data structures stored in the data warehouse 122.
- the data warehouse 122 may routinely communicate with the data interface 118 to provide the data interface 118 with an updated list of probabilistic data structures stored in the data warehouse 122.
- the data interface 118 uses this list as well as the received message from the hash generator 116 to identify the appropriate data structure that needs to be updated.
- the data interface 118 parses the attributes of the unique entry to identify the appropriate data structure. For example, for the tuple ⁇ 943215, Product A, Website B>, the data interface may evaluate the attributes (Product A and Website B) to identify the appropriate data structure in its maintained list of data structures, that stores these attributes.
- the data interface 118 can send a message, including the hash representation of the unique entry along with the data structure identifier corresponding to the data structure 122-A to be updated.
- the data warehouse 122 updates the probabilistic data structure 122-A using the hash values in the message. In the above example, the data warehouse 122 uses the hash values to identify the appropriate locations in the data structure 122-A, and the data warehouse then updates the values at these locations from 0 to 1.
- the provider 130 discards the user data (at 220). For example, after the data warehouse 122 confirms that the data structure 122-A was successfully updated (e.g., by sending an acknowledgement message to the data interface 118), the data aggregating engine 112 deletes the user data and the unique entry (i.e., the tuple including the user identifier and the one or more attributes), thereby preventing further access to the user data itself. The data aggregating engine 112 also sends a message to the request handler 110 to delete any instances of the user data that the request handler server 110 initially sent to the data aggregating engine 112. Alternatively or additionally, the data aggregating engine 112 may re-assign memory where user data is currently stored such that the re-assigned memory locations may be updated with other data.
- the data aggregating engine 112 may re-assign memory where user data is currently stored such that the re-assigned memory locations may be updated with other data.
- the provider 130 generates or receives a query requesting a response specifying how many users have an attribute that matches a given attribute specified in the query (at 222).
- an administrator or an operator for the provider 130 may send a query to the query server 120.
- the query may be requesting a response specifying how many users in a set of users bought a particular product, Product A.
- the query may specify the set of users and their corresponding unique identifier.
- tot_users refers to the total number of users
- product_sales ⁇ Product A refers to an attribute "product_sales” with a desired value of Product A
- stored Website B refers to a store attribute with a desired value of Website B
- user_set identifies the set of users to include as part of the query, which in this case includes users with unique identifiers ranging from 1231 to 1299.
- the query may not specify set of users, in which case the query server 120 includes all (or some subset, depending on the user identifiers represented by data in the appropriate data structure) stored user identifiers (e.g., which may be stored in a separate data structure in the data warehouse 122) as part of the query.
- Queries need not be limited to number of users with particular attributes.
- queries can also request information about particular attributes or behavior of the users based on the data stored in the probabilistic data structure.
- a query can request the number of purchases made by an average user at a particular store.
- the same query as referenced in the previous paragraph may be executed, and the response may be scaled (e.g., divided) by the number of users for whom data is stored in the probabilistic data structure, to obtain the average purchases per user.
- the query server 120 estimates the actual number of users that match the given attribute (at 224). To accomplish this, the query server 120 first obtains the number of users that match the given attribute using the appropriate probabilistic data structure (at 226). In some implementations, the query server 120 communicates with the data warehouse 122 to obtain data requested in the query. The data warehouse 122 may routinely communicate with the query server 120 to provide the query server 120 with a current list of probabilistic data structures stored in the data warehouse 122. The query server 120 uses this list as well as the received query to identify the appropriate data structure that needs to be updated. In some implementations, the query server 120 may parse the attributes specified in the query to identify the appropriate data structure. In the above example, the query server 120 uses the ⁇ product_sales> attribute to identify the data structure that includes this attribute, which in this example is data structure 122-A.
- the query server 120 generates a tuple (or other appropriate concatenated data, as described above) for each unique user identifier in the set of users.
- the order of the user identifier and the attributes in the tuple for query purposes is the same as the order used to initially enter the user entries into the probabilistic data structure. For example, for user identifier 1231, the appropriate tuple would be ⁇ 1231, Product A, Website B>.
- the query server 120 then generates hash representations (as described above) for each of the tuples and uses the resulting hash values as indices for the data structure 122-A.
- the query server 120 checks the value stored in bit locations or indices specified by the resulting hash values and maintains a count of all locations where the corresponding bit value is "1."
- the total number of locations with the bit value of "1" represents the number of users that match the given attribute using the appropriate probabilistic data structure. In this way, in the above example, the query server 120 may obtain a total number of users of 40 who purchased Product A from Website B.
- the query server 120 scales the number of users determined at step 226 based on the false positive rate of the probabilistic data structure to estimate the actual number of users (i.e., the true positives in the probabilistic data structure) (at 228).
- the true positives can be estimated using the following formula: P - (FPR * TN) / (1 - FPR), where P represents the value returned from querying the probabilistic data structure (as in preceding paragraph), FPR represents the false positive rate of the probabilistic data structure, and TN represents the true negatives (which can also be represented by the number of users minus P).
- the true negatives TN is 60, i.e., 100 (total number of users) - 40 (total number of users returned by querying the data structure).
- the provider 130 determines an estimate of the actual number of users with attributes that match the given attribute (e.g., "Product A" and "Website B") is 25.
- the scaled value determined at operation 228 needs to be further scaled based on the false negative rate that was previously obtained at step 206.
- the scaled number of users determined at step 228 is 25 and the false negative rate is 12%.
- the query server 120 drops 12% of the users and stores the remaining 88% of users (i.e., 100%-12%). To accomplish this, the query server 120 adjusts the 25 users (determined at 228) by this number of users by 88%, to obtain 28.4 users. Therefore, 28.4 represents an estimate of actual number of users with the specified attribute that match the attribute identified in the query (which is "Product A" in this example).
- a certain percentage of the locations of the probabilistic data structure are set to a value of 1, then the same percentage can be used to further scale, using this percentage, the actual number of user determined in the preceding paragraph, to obtain the actual number of users.
- FIG. 3 is a flow diagram of an example process 300 that describes storing and analyzing user data, which includes a continuous value attribute, using a probabilistic data structure.
- the operations of the process 300 are described below for purposes of illustration only.
- the operations of the process 300 can be performed by any appropriate device or system, e.g., any appropriate data processing apparatus.
- the operations of the process 300 can also be implemented as instructions that are stored on a computer readable medium, which, when executed by one or more data processing apparatus, cause the one or more data processing apparatus to perform the operations of the process 300.
- the operation of the process 300 are described below with reference to the components of the provider 130.
- the probabilistic data structure referenced in Figure 3 may be a Bloom filter, but it may also be other types of probabilistic data structures, such as, for example, HyperLogLog and Count-Min sketch.
- the provider 130 receives user data specifying one or more user attributes from a client device, including a continuous value attribute (at 302).
- the request handler server 110 may receive 10 user requests from one or more client devices 102 to purchase a particular product, Product A, which is listed for $400 on one of the provider's websites, Website B.
- the request handler server 110 may parse the user request to identify the attributes in the user request.
- the request handler server 110 may use an existing list of attributes that it maintains to identify the same attributes in the user request.
- the attributes include product sales (with a value of Product A), product price (which is a continuous value attribute with a value of 300), and store (with a value of Website B).
- the provider 130 generates a normalized probability for a value of continuous value attribute using a maximum value of the attribute (at 304). For example, the provider 130 may determine by evaluating the product prices of all products listed on website B, that the product prices range from $0 to $1000. In this example, the maximum value for the product price attribute is 1000. The provider 130 normalizes continuous value of 400 using the maximum value of 1000 by dividing 400 by 1000. The resulting normalized probability is 40% or 0.4 (i.e., 400/1000).
- the provider 130 generates a unique entry for the user using the user data and a unique user identifier (at 306).
- the data entry generator 114 generates a unique entry as a tuple (or other form of concatenated information as described above) with the following form: ⁇ User ID, Attribute 1, Attribute 2, ... , Attribute n>.
- the data entry generator 114 generates a tuple for the following attributes: user identifier (943215), the product identifier (Product A), and the website where the request originated (Website B).
- the tuple would be as follows: ⁇ 943215, Product A, Website B>.
- the data entry generator 114 does not include the continuous value attribute (which is product price in the above example) as part of the tuple.
- the provider 130 inserts a privacy-enhanced representation of the unique entry into a probabilistic data structure (at 308). In some implementations, this may be performed in four steps.
- the provider 130 identifies user entries based on the normalized probability (at 310).
- the normalized probability is 40% and the number of entries to be inserted is 10.
- the provider 130 may generate unique entries for each of the user entries (as described above and with reference to Figure 2 ) and then identify 40% of 10 user entries (i.e., 4 entries) to insert into the probabilistic data structure.
- the identified user entries may be stored in a temporary storage (e.g., a cache).
- the provider 130 determines whether the unique entry that is generated at operation 306 is among the identified user entries (at 310). In some implementations, the provider 130 can compare the unique entry generated at operation 306 with the unique entries identified at 310. If the provider 130 does not find a match based on this comparison (at 314), it determines that the unique entry generated at operation 306 is not among the identified entries and discards the unique entry and the corresponding user data at operation 316 (described below). On the other hand, if the provider 130 finds a match, the provider 130 can send a command to the data aggregating engine 112 to insert a privacy enhanced representation of the tuple into a probabilistic data structure stored in the data warehouse 122, as further described below with reference to operation 330.
- the provider 130 generates a hash representation of the unique entry (at 330), for example, as described with reference to the corresponding step of process 200.
- the provider 130 updates the probabilistic data structure based on the hash representation (at 332), for example, as described with reference to the corresponding step of process 200.
- the hash functions generate three hash values for the tuple ⁇ 943215, Product A, Website B>, which then results in setting the appropriate locations of the data structure 122-A based on the hash values, from 0 to 1.
- the provider 130 After inserting the privacy enhanced representation of the unique entry into a probabilistic data structure, the provider 130 discards the user data (at 316) in the same way as described with reference to the corresponding step of process 200.
- the query server 120 receives a query requesting the aggregate value of the continuous value attribute (at 318).
- a webmaster or operator for the provider 130 may send a query to the query server 120.
- the query may request a response specifying the total money spent by users on Product A at Website B.
- the query received by the query server 120 in this example may have the following format: get tot_revenue (product ⁇ Product A, store ⁇ Website B, user_set ⁇ 1231, 1232, 1233, ...., 1299 ⁇ ).
- tot_revenue refers to the total revenue or money spent
- product ⁇ Product A refers to an attribute "product” with a desired value of Product A
- stored Website B refers to an attribute "store” with a desired value of "Website B
- user_set ⁇ 1231, 1232, 1233, ...., 1299 ⁇ identifies the set of users to include as part of the query, which in this case includes users with unique identifiers ranging from 1231 to 1299.
- the query may not specify set of users, in which case the query server 120 includes all (or some subset, depending on the user identifiers represented by data in the appropriate data structure) stored user identifiers (e.g., which may be stored in a separate data structure in the data warehouse 122) as part of the query.
- the query server 120 includes all (or some subset, depending on the user identifiers represented by data in the appropriate data structure) stored user identifiers (e.g., which may be stored in a separate data structure in the data warehouse 122) as part of the query.
- the provider 130 determines the aggregate value of the continuous value attribute (at 320). In some implementations, this operation can include three steps. First, the provider 130 obtains the number of users that match the given attribute using the probabilistic data structure (at 322). This operation may be performed in a manner similar to that described with reference to the corresponding step of process 200.
- the provider 130 scales the number of users based on the false positive rate (and optionally the false negative rate) of the probabilistic data structure (at 324) in a manner similar to that described with reference to the corresponding step in process 200.
- the provider 130 scales the actual number of inserted users using the maximum value (at 328).
- the provider 130 multiplies the estimate of the actual number of inserted users (i.e., the true positives obtained by querying the data structure and scaling using the false positive rate) by the maximum value.
- the actual number of inserted users was 4, which when multiplied by the maximum value of 1000, results in total value of 4000 (i.e., 4 ⁇ 1000).
- $4000 represents the aggregate value of the continuous value attribute, which in this case, is the total revenue or total amount spent by users on Product A at Website B.
- FIG. 4 is a flow diagram of an example process 400 that describes storing and analyzing a date value in a probabilistic data structure.
- the operations of the process 400 are described below for purposes of illustration only.
- the operations of the process 400 can be performed by any appropriate device or system, e.g., any appropriate data processing apparatus.
- the operations of the process 400 can also be implemented as instructions that are stored on a computer readable medium, which, when executed by one or more data processing apparatus, cause the one or more data processing apparatus to perform the operations of the process 400.
- the operation of the process 400 are described below with reference to the components of the provider 130.
- the probabilistic data structure referenced in Figure 4 may be a Bloom filter, but it may also be other types of probabilistic data structures, such as, for example, HyperLogLog and Count-Min sketch.
- the provider 130 receives user data specifying one or more user attributes from a client device (at 402) in a manner similar to that described with reference to the corresponding step of process 200.
- the provider 130 determines the date of receipt of the user data (at 404).
- the data aggregating engine 112 may obtain the current date, for example, from the request handler server's timestamp.
- the data aggregating engine 112 may also obtain the current date from other sources, such as, for example, from the date field that may be sent along with the request received from the client device 102.
- the provider 130 generates a unique entry for the user using the user data and a unique user identifier (at 406). This operation may be performed in a manner similar to that described with reference to the corresponding step of process 200.
- the provider 130 inserts a privacy enhanced representation of the unique entry into a probabilistic data structure (at 408). This operation may be performed in a manner similar to that described with reference to the corresponding step of process 200, with one exception. Instead of updating the locations of the probabilistic data structure to "1," the locations are updated to the date value determined at step 404.
- the provider 130 After inserting the privacy-enhanced representation of the unique entry into a probabilistic data structure, the provider 130 discards the user data (at 410). This operation is in the same way as described above with reference to the corresponding step of process 200.
- the provider 130 adjusts data in the probabilistic data structure older than a predetermined period (at 412).
- the provider 130 discards user data older than a predetermined period, e.g., one day, one week, one year, or some other specified period (at 412).
- the provider 130 may have an agent that routinely (e.g., at specified time intervals) checks whether the values stored in the probabilistic data structures in data warehouse 122, are more than seven days old.
- the provider 130 may use the present date to identify a date from seven days ago and then looks for all entries with a date earlier than that date. For those entries, the agent may change the values to 0.
- the query server 120 receives a query requesting a response specifying how many users have an attribute that matches a given attribute specified in the query within a specified period (at 414).
- the administrator or operator for the provider 130 may send a query to the query server 120.
- the query may request a response specifying the number of users who purchased product A in the last 6 months.
- tot_users refers to the total number of users
- product Product A refers to an attribute “product purchased” with a desired value of “Product A”
- a user_set identifies the users to include in this query.
- the provider 130 estimates the actual number of users with attributes that match the attribute specified in the query (at 416). This operation may be performed in a manner similar to the corresponding step of process 200.
- the provider 130 determines an estimate of the actual number of users that match the given attribute in the specified period (at 418). In some implementations, for each of the actual number of users estimated at step 416, the provider 130 first looks up the corresponding date value stored in the probabilistic data structure. In the above example where the query requests a number of users who purchased product A in the last 6 months, the query server 120 looks up the date values for all the actual users identified in step 416. The query server 120 may use the present date to identify a date 6 months before the present date. Thus, if the present date is 01/01/2019, the query server 120 may determine 07/01/2018 as the date from 6 months ago.
- the query server 120 evaluates whether the date values for the actual users exceed 07/01/2018 and keeps a count of entries with a corresponding date value after 07/01/2018. The query server 120 adjusts this count to account for the false positive rate (and optionally the false negative rate) to estimate the number of users who purchased product A in the last 6 months.
- FIG. 5 is block diagram of an example computer system 500 that can be used to perform operations described above.
- the system 500 includes a processor 510, a memory 520, a storage device 530, and an input/output device 540.
- Each of the components 510, 520, 530, and 540 can be interconnected, for example, using a system bus 550.
- the processor 510 is capable of processing instructions for execution within the system 500.
- the processor 510 is a single-threaded processor.
- the processor 510 is a multi-threaded processor.
- the processor 510 is capable of processing instructions stored in the memory 520 or on the storage device 530.
- the memory 520 stores information within the system 500.
- the memory 520 is a computer-readable medium.
- the memory 520 is a volatile memory unit.
- the memory 520 is a non-volatile memory unit.
- the storage device 530 is capable of providing mass storage for the system 500.
- the storage device 530 is a computer-readable medium.
- the storage device 530 can include, for example, a hard disk device, an optical disk device, a storage device that is shared over a network by multiple computing devices (e.g., a cloud storage device), or some other large capacity storage device.
- the input/output device 540 provides input/output operations for the system 500.
- the input/output device 540 can include one or more of a network interface devices, e.g., an Ethernet card, a serial communication device, e.g., and RS-232 port, and/or a wireless interface device, e.g., and 802.11 card.
- the input/output device can include driver devices configured to receive input data and send output data to other input/output devices, e.g., keyboard, printer and display devices 560.
- Other implementations, however, can also be used, such as mobile computing devices, mobile communication devices, set-top box television client devices, etc.
- Media does not necessarily correspond to a file.
- Media may be stored in a portion of a file that holds other documents, in a single file dedicated to the document in question, or in multiple coordinated files.
- Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer storage media (or medium) for execution by, or to control the operation of, data processing apparatus.
- the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- a computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them.
- a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal.
- the computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
- the operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
- the term "data processing apparatus” encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing.
- the apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- the apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them.
- the apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
- a computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment.
- a computer program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code).
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- the processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output.
- the processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors.
- a processor will receive instructions and data from a read-only memory or a random access memory or both.
- the essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), to name just a few.
- Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network.
- Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
- LAN local area network
- WAN wide area network
- inter-network e.g., the Internet
- peer-to-peer networks e.g., ad hoc peer-to-peer networks.
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- a server transmits data (e.g., an HTN ⁇ , page) to a client device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device).
- client device e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device.
- Data generated at the client device e.g., a result of the user interaction
Description
- This specification relates to data processing and preserving user privacy when collecting and analyzing user data.
- The Internet facilitates exchange of information and transactions between users and providers across the globe. Providers may make content (e.g., news articles, audio, etc.), products (e.g., consumer goods), and/or services (e.g., advertising services) available over the Internet, which users may access and/or purchase. Through these interactions, providers may receive significant amount of user data (assuming that the users consent to such data collection). Examples of the types of user data that providers may collect include, but are not limited to, the user's location, the types of content that the user accesses, the types of products and/or services that the user purchases, the date the user last accessed the provider's website, and the amount that the user spent on the provider's products.
- Collecting and analyzing such user data can be beneficial to providers. In some cases, providers can aggregate data for multiple users to, for example, improve the provider's operations and/or improve user experience. For example, providers may aggregate the data for multiple users visiting the provider's website to identify and drop the least purchased products available from the provider's website. As another example, providers that provide advertising services may use the user data to determine effectiveness of particular advertising campaigns or to select content that is of most interest to the users.
- Prior art document
US2016/378796-A1 discloses a technology providing for a match fix-up stage that removes matching documents identified for a search query that don't actually contain terms from the search query. A representation of each document (e.g., a forward index storing a list of terms for each document) is used to identify valid matching documents (i.e., documents containing terms from the search query) and invalid matching documents (i.e., documents that don't contain terms from the search query). Any invalid matching documents are removed from further processing and ranking for the search query. - In general, one innovative aspect of the subject matter described in this specification can be embodied in methods including the operations of receiving, by a data processing apparatus and from a client device, user data specifying one or more attributes of a user; generating, by the data processing apparatus, a unique entry for the user using the user data and a user identifier unique to the user; inserting, by the data processing apparatus, a privacy enhanced representation of the unique entry into a probabilistic data structure that includes a plurality of privacy enhanced representations of unique entries for a plurality of users, including: generating, by the data processing apparatus, a hash representation of the unique entry; updating, by the data processing apparatus, the probabilistic data structure based on the hash representation; discarding, by the data processing apparatus, the user data after inserting the privacy enhanced representation of the unique entry into the probabilistic data structure; receiving a query requesting a response specifying how many users have an attribute that matches a given attribute specified in the query; obtaining, by the data processing apparatus and using the probabilistic data structure, a first number of users that includes both an estimated number of users that match the given attribute and false positives returned from the probabilistic data structure; and determining, by the data processing apparatus, the estimated number of users based on the first number of users and a false positive rate of the probabilistic data structure. Other embodiments of this aspect include corresponding systems, devices, apparatus, and computer programs configured to perform the actions of the methods. The computer programs (e.g., instructions) can be encoded on computer storage devices. These and other embodiments can each optionally include one or more of the following features.
- Methods can include obtaining, by the data processing apparatus, a false negative rate; determining, by the data processing apparatus, that the unique entry is to be inserted into the probabilistic data structure based on the false negative rate; wherein inserting, by the data processing apparatus, a privacy enhanced representation of the unique entry into a probabilistic data structure that includes a plurality of privacy enhanced representations of unique entries for a plurality of users, including generating the hash representation of the unique entry and updating the probabilistic data structure based on the hash representation only in response to determining that the unique entry is to be inserted into the probabilistic data structure based on the false negative rate; and wherein determining, by the data processing apparatus, the estimated number of users based on the first number of users and a false positive rate of the probabilistic data structure, including scaling, by data processing apparatus, the estimated number of users based on the false negative rate to obtain a scaled estimated number of users.
- Methods can include identifying, at random and using a specified percentage, one or more locations of the probabilistic data structure; updating values of the one or more locations of the probabilistic data structure; and scaling the scaled estimated number of users based on a number of the one or more locations.
- Methods can include receiving, by a data processing apparatus and from a client device, user data specifying one or more attributes of a user, wherein the one or more attributes comprises a continuous value attribute that includes values ranging from a minimum value to a maximum value; generating, by the data processing apparatus, a normalized probability for a value of the continuous value attribute that is proportional to the maximum value; determining, by the data processing apparatus, that the unique entry is to be inserted into the probabilistic data structure based on the normalized probability; wherein inserting, by the data processing apparatus, a privacy enhanced representation of the unique entry into a probabilistic data structure that includes a plurality of privacy enhanced representations of unique entries for a plurality of users, including generating the hash representation of the unique entry and updating the probabilistic data structure based on the hash representation only in response to determining that the unique entry is to be inserted into the probabilistic data structure based on the normalized probability; and receiving a query requesting an aggregate value of a continuous value attribute specified in the query; determining, by the data processing apparatus and using the probabilistic data structure, the aggregate value of the continuous value attribute based on the estimated number of users and maximum value.
- Determining, by the data processing apparatus and using the probabilistic data structure, the aggregate value of the continuous value attribute based on the estimated number of inserted users and maximum value, includes scaling the estimated number of inserted users using the maximum value to generate the aggregate value of the continuous value attribute.
- Methods can include determining, by the data processing apparatus, the date of receipt of the user data specifying one or more attributes of the user; adjusting, by the data processing apparatus, the data updated in the probabilistic data structure using data specifying the date of receipt of the user data; receiving a query requesting a response specifying how many users have an attribute that matches a given attribute within a specified period; determining, using the probabilistic data structure, the dates of receipt of the given attribute for the estimated number of users; and identifying a number of users among the estimated number of users for which the respective date of receipt is within the specified period.
- Methods can include discarding, by the data processing apparatus, data in the probabilistic data structure that is older than a predetermined period.
- Methods can include identifying, at random and using a specified percentage, one or more locations of the probabilistic data structure; updating values of the one or more locations of the probabilistic data structure; and scaling the scaled estimated number of users based on a number of the one or more locations.
- As noted above, collecting and analyzing user data can be beneficial for providers. However, providers may generally not be able to retain the data in a form sufficient to perform their analyses while providing sufficient privacy protection. This specification discusses various techniques and systems for preserving user privacy with respect to data collected from users, while still maintaining the data in a form that allows providers to perform the analyses that are used to improve the providers' content offerings and/or providing a customized user experience.
- Particular embodiments of the subject matter described in this specification can be implemented to realize one or more of the following advantages. For example, the innovations described in this specification reduce the privacy risks associated with storing raw user data (e.g., data leaks or unauthorized access to user data). Conventionally, a provider may store user data in its raw form, but such raw data storage is susceptible to unauthorized access. For instance, if a malicious party gains access to the provider's systems, the raw user data stored in these systems may be readily accessible. The innovations described in this specification reduce this risk by inserting a privacy-enhanced representation of the user data, such as a hash representation of the user data, into a probabilistic data structure that further masks the user data. More specifically, the combination of using hashed representations of the user data in combination with a probabilistic data structure not only masks the data itself (e.g., using the hash representation rather than the actual user data), but also masks the number of users that have a specific set of user data. This is because probabilistic data structures, upon being queried, may identify a number of entries that actually match the query (i.e., true positives) as well as entries that do not match the query (i.e., false positives). Thus, even if a malicious party can access the probabilistic data structure, the malicious party cannot discern with any certainty the user data stored in this data structure, or even the actual number of users that have a specified combination of user attributes. This is because the probabilistic data structure reveals the likelihood or probability that certain user data is present in the probabilistic data structure.
- On the other hand, the likelihood or probability that certain user data is present in the probabilistic data structure may be sufficient for a provider to perform its analysis. For example, for a probabilistic data structure that stores users' visits to a particular store, a provider does not know which entries correspond to a particular user. However, the provider can estimate, using the probabilistic data structure, the number of times that users visited the store. Furthermore, because the probabilistic data structure allows the provider to analyze the user data, the provider does not need to store the user data in its raw format, thereby further reducing the likelihood of a data leak revealing the user data. Relatedly, the innovations described in this specification allow significant resource savings (e.g., reduced utilization of data processing resources and/or memory resources) by allowing the provider to discard raw user data (which can consume significant amount of resources) and instead store a privacy-enhanced representation of this data in the probabilistic data structure, which requires much fewer resources.
- The innovations described in this specification also allow inserting false negatives into probabilistic data structures. As used throughout this document, false negatives in the context of probabilistic data structures refers to a query of the probabilistic data structure that does not output one or more matching entries, when in fact the probabilistic data structure does include such matching entries. Conventionally, most types of probabilistic data structures do not generate any false negatives. As a result, a malicious party may be able to query the conventional probabilistic data structure to determine with certainty that a particular user is not among the users that have certain attributes. As such, the malicious party may be able to implicitly determine information about a user based on information obtained from a conventional probabilistic data structure. For example, a malicious party may query the conventional probabilistic data structure and be able to determine that user A did not buy a security system from the only store, store B, that sells security systems in a particular geographical region. The innovations described in this specification enable insertion of false negatives into the probabilistic data structure and thus, can thwart attempts by the malicious party to determine information about a user that could otherwise be obtained from conventional probabilistic data structures. The providers, on the other hand, are aware of the false negative rate and can scale the output of the probabilistic data structure to determine the true number of users with one or more particular attributes, while still providing the enhanced privacy protections achieved by way of the false negatives.
- Moreover, although conventional probabilistic data structures may store binary data (i.e., 1s and 0s), the innovations described in this specification facilitate storing non-binary information in the probabilistic data structure. This enables storing richer data in the probabilistic data structure than the data stored in conventional probabilistic data structures. Examples of the types of non-binary information that may be stored in the probabilistic data structure include continuous values and dates.
- The techniques described in this specification allow memory efficient storing of continuous values, which conventionally can take up a large amount of storage space, using a probabilistic data structure, thereby reducing the amount of storage space required to store the continuous values. Storing such continuous values in the probabilistic data structures allows providers to perform more sophisticated analysis than the analysis that is possible using conventional probabilistic data structures. For example, rather than just determining how many users shopped at a particular store, storing continuous values may allow providers to determine how much money was spent by all these users at a particular store.
- The techniques described in this specification also allow storing dates in the probabilistic data structure. This technique is advantageous when a new data point needs to be collected on a regular basis while the other attributes for the user remain relatively constant. This technique also efficiently manages the finite space of the probabilistic data structure, which conventionally can become fully committed by repeated insertion of a large volume of user data. To efficiently manage the finite space of the probabilistic data structure, the probabilistic data structure may store the date when the user data was last updated. Thus, data older than a certain predefined period may be removed from the data structure. Moreover, storing date information in probabilistic data structures allows providers to perform more sophisticated analysis, such as determining current user trends and demands. For example, without date information, the provider may infer that product A is very popular because it was purchased by 100 users. However, with date information, the provider may further discern that product A is not that popular because only two users have purchased product A in the last six months.
- The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
-
-
FIG. 1 is a block diagram of an example environment in which information is exchanged between client devices and providers. -
FIG. 2 is a flow diagram of an example process of storing and analyzing user data using a probabilistic data structure. -
FIG. 3 is a flow diagram of an example process of storing and analyzing user data, which includes a continuous value attribute, using a probabilistic data structure. -
FIG. 4 is a flow diagram of an example process of storing and analyzing a date value in a probabilistic data structure. -
FIG. 5 is a block diagram of an example computer system. - Like reference numbers and designations in the various drawings indicate like elements.
- This disclosure relates to computer implemented methods and systems that preserve user privacy when collecting and analyzing user data.
- Through the exchange of information and transaction between users and providers, providers may receive significant amount of user data, such as, for example, the types of content that the user accesses, when the user last accessed the provider's website, and the amount that the user spent on the provider's products. If users allow the provider to collect such user data, the providers can analyze this data to improve the provider's operations and/or improve user experience. For example, providers may use user data to identify the most viewed and/or purchased products while dropping products that are not regularly viewed or do not generate revenue for the provider.
- As described below and in greater detail throughout this specification, providers can preserve user privacy with respect to data collected from users, while maintaining the data in a form that allows providers to perform analyses on the user data.
- Upon receiving user data specifying one or more attributes, the provider generates a privacy-enhanced representations of the user data using, for example, one or more hash functions. The provider stores the privacy-enhanced representation of the user data in a probabilistic data structure. The provider may then discard the user data, thereby preventing direct access to that data even if an unauthorized third party gained access to the system.
- Subsequently, the provider may query the probabilistic data structure to estimate the actual number of users that have an attribute that matches a given attribute specified in the query. In response, the probabilistic data structure identifies the number of users that match the given attribute. This number represents the actual number of users that have the given attribute as well as a number of false positives identified by the probabilistic data structure. To identify the actual number of users that have the given attribute, the provider can scale the number of users using the false positive rate of the probabilistic data structure. As used throughout this document, the phrase false positive rate refers to a value that identifies the expected rate or number of false positives associated with a probabilistic data structure. The false positive rate may be, for example, a function of the number of items inserted into the probabilistic data structure and the size of the probabilistic data structure.
- In some implementations, false negatives may be inserted into the probabilistic data structure by dropping some user data entries. This may be accomplished by establishing a false negative rate and then discarding user data entries based on the false negative rate. As used throughout this document, the phrase false negative rate refers to a value that identifies the rate of false negatives associated with data in a probabilistic data structure. The false negative rate can be specified or determined (as described further below). For example, if the false negative rate is 40% and if 10 user data entries are to be inserted into the probabilistic data structure, 40% of the ten entries (i.e., four entries) are discarded, while the remaining entries (10-4=6 entries) are inserted into the probabilistic data structure. In a subsequent query, the provider may be able to determine the actual number of users with a given attribute by scaling the number of users returned by the probabilistic data structure based on both the false positive rate and the false negative rate.
- In some implementations, the probabilistic data structure may also store more than binary information (i.e., 0s and 1s) and in particular, the probabilistic data structure may store continuous values. For example, the probabilistic data may store the revenue per transaction ranging from $0 to $1000 at a particular store Store A. The provider may receive user data where one or more attributes is/are measured using continuous values (such as transaction revenue in the above example). The provider may generate a normalized probability for this attribute by dividing the continuous value by the maximum possible value of the attribute. In the above example, if there are 10 transactions at store A of $400 each (totaling $4000), the normalized probability is 400/1000, which is 0.4 or 40%.
- As described above (and in greater detail below), the provider generates a privacy enhanced representation of the user data and updates the probabilistic data structure using this privacy enhanced representation. Rather than inserting each of the 10 transactions into the probabilistic data structure, the number of entries inserted into the probabilistic data structure is scaled by the normalized probability. Thus, using the above example, only 40% of the ten entries, i.e., four entries, are inserted into the probabilistic data structure.
- In a subsequent query, the provider may be able to determine the total amount of the continuous value attribute for all the privacy enhanced user data stored in the probabilistic data structure. To accomplish this, the provider first estimates the actual number of users with a given attribute (e.g., the particular store where users spent money) by obtaining the number of users returned by the probabilistic data structure having the given attribute and then scaling this number using the false positive rate. The provider then scales the actual number of users by the maximum value (e.g., by multiplying the actual number of users by the maximum value). Using the above example, the provider may query the probabilistic data structure to obtain four entries. The number of entries (four) is then multiplied by the maximum value of $1000 to obtain the total amount of $4000.
- In some implementations, the provider may store in the probabilistic data structure the date when an entry in the probabilistic data structure was last updated. As described above (and in greater detail below), the provider generates a privacy enhanced representation of the user data and updates the probabilistic data structure using this privacy enhanced representation. Rather than insert a binary value into the data structure at the appropriate locations, the provider inserts the date. Subsequently, based on the dates stored in the probabilistic data structure, the provider may perform garbage collection by removing data from the probabilistic data structure that is older than a certain period. The provider may also query the probabilistic data structure to identify the number of users with one or more attributes in a specified period.
- These features and additional features are described in more detail below with reference to
Figures 1-5 . - Further to the descriptions throughout this document, a user may be provided with controls allowing the user to make an election as to both if and when systems, programs, or features described herein may enable collection of user information (e.g., information about a user's social network, social actions, or activities, profession, a user's preferences, or a user's current location), and if the user is sent content or communications from a server. In addition, certain data may be treated in one or more ways before it is stored or used, so that personally identifiable information is removed. For example, a user's identity may be treated so that no personally identifiable information can be determined for the user, or a user's geographic location may be generalized where location information is obtained (such as to a city, ZIP code, or state level), so that a particular location of a user cannot be determined. Thus, the user may have control over what information is collected about the user, how that information is used, and what information is provided to the user.
-
FIG. 1 is a block diagram of anexample environment 100 in which information is exchanged between client devices and providers. Theexample environment 100 includes anetwork 108, such as a local area network (LAN), a wide area network (WAN), the Internet, or a combination thereof. Thenetwork 108 connectsproviders 130 andclient devices 102. Theexample environment 100 may include manydifferent providers 130 andclient devices 102. - A
client device 102 is an electronic device that is capable of requesting and receiving content and resources over thenetwork 108.Example client devices 102 include personal computers, mobile communication devices, digital assistant devices, and other devices that can send and receive data over thenetwork 108. Aclient device 102 typically includes a user application, such as a web browser, to facilitate the sending and receiving of data over thenetwork 108, but native applications executed by theclient device 102 can also facilitate the sending and receiving of content over thenetwork 108. - A
client device 102 may exchange information with one ormore providers 130. Aprovider 130 may be implemented as a data processing apparatus or as a computer system that is described with reference toFigure 5 , or any other appropriate processing system. In some implementations, theprovider 130 includes arequest handler 110, one ormore response servers 118, adata aggregating engine 112, adata warehouse 122, and aquery server 120. - As depicted in the block diagram of
Figure 1 , theprovider 130 is depicted as a single block with various sub-blocks. However, while theprovider 130 could be a single device or single set of devices, this specification contemplates that theprovider 130 could also be a group of devices, or even multiple different systems that communicate in order to provide content, products, and/or service to client devices and to collect and aggregate information. For example, the provider could encompass one or more of a search system, a video streaming service, an audio streaming service, a navigation service, an advertising service, or any other service. Moreover, one or more components of the provider or operations performed by these components may be performed by one or more components that are included with the client device. For example, components of theprovider 130, such as thedata entry generator 114 and the hash generator 116 (which are further described below) may be located at theclient device 102 and thus, their respective operations (which are also described below) may be performed by theclient device 102, instead of theprovider 130. - Providers may make content, services, and/or products available on the Internet, e.g., on the providers' websites or on third party websites. A
client device 102 may request content, services, and/or products. Theprovider 130 may receive this request on its website, which it may transmit to therequest handler server 110 of theprovider 130. Alternatively, the request may be routed directly to therequest handler server 110 of theprovider 130 from one or more third parties that received the request fromclient device 102. - The
request handler server 110 analyzes the received request to determine the type of response to provide to theclient device 102. For example, therequest handler server 110 may receive a user request from aclient device 102 to purchase one of the products listed on the provider's website. Therequest handler server 110 may parse the user request to identify the appropriate attributes and then send these attributes to thetransaction server 124. - The types of attributes that may be identified from the user request include discrete data about the user that the provider may need to respond to the user's request as well as data the provider may want to analyze and aggregate. These may include, among others, the product/service name, product/service identifier, unique identifier assigned to the user, geographic information (e.g., region where request was submitted, network location, user address, zip code), a name (or network location) of the requesting device (e.g., the client device 102), the cost of the product/service/content purchased, the day of the transaction, and the location of the provider from which the product/service is requested (e.g., the website through which the request was received). The attributes may also include information that may be used for debugging purposes, such as process name, version numbers, etc.
- In the above example, the
request handler server 110 identifies attributes such as the user identifier, the product identifier, shipping speed, the shipping information, the purchase price of the product, the shipping cost, and the website where the request originated (e.g., in the case where the provider may operate more than one website). - In response to receiving the attributes from the
request handler server 110, thetransaction server 124 may execute a transaction based on the received attributes. In the above example, thetransaction server 124 may determine a total cost for the product including the shipping cost and the purchase price of the product. Thetransaction server 124 schedules the shipping for the product at the received shipping address and at the desired shipping speed. Once scheduled, thetransaction server 124 may send a notification to a shipping center to pickup the product. In parallel, thetransaction server 124 may send a notification to the user, confirming that the transaction was successful and that the user's order is confirmed. - The user may allow the
provider 130 to collect data with respect to this transaction. The user may allow such data collection by opting into the provider's data collection policy, which may be provided to the user at the outset of the user's relationship with theprovider 130, e.g., at the time when the user signs up as a member for the provider's website. Alternatively, the user may be expressly asked for permission for such data collection during the transaction. For example, thetransaction server 118 may include in the notification to the user of theclient device 102, a request to collect the user data specific to the present transaction. The user may confirm that theprovider 130 may collect the transaction specific information. - If the user allows the
provider 130 to collect its data with respect to this transaction, therequest handler server 110 sends the identified attributes from the user request to thedata aggregating engine 112. Thedata aggregating engine 112 generates and stores a privacy enhanced representation of the user data in one or more data structures (e.g., 122-A, 122-B) stored in the data warehouse 122 (as described further with reference toFigures 2 to 4 ). - Subsequently, the
query server 120 may receive a query requesting certain information about the data stored in thedata warehouse 122. For example, the query may request the number of users that purchased a particular product, Product A, from a particular website (Website B). Thequery server 120 may use the attributes <Product A> and <Website B> to query the appropriate data structure in the data warehouse to determine the query response. This response is then provided to the requestor via thequery server 120. Additional details regarding the processing of queries is described further with reference toFigures 2 to 4 . -
Figure 2 is a flow chart of anexample process 200 that describes storing and analyzing user data using a probabilistic data structure. The operations of theprocess 200 are described below for purposes of illustration only. The operations of theprocess 200 can be performed by any appropriate device or system, e.g., any appropriate data processing apparatus. The operations of theprocess 200 can also be implemented as instructions that are stored on a computer readable medium, which, when executed by one or more data processing apparatus, cause the one or more data processing apparatus to perform the operations of theprocess 200. The operation of theprocess 200 are described below with reference to the components of theprovider 130. Moreover, the probabilistic data structure referenced inFigure 2 may be a Bloom filter, but it may also be other types of probabilistic data structures, such as, for example, HyperLogLog and Count-Min sketch. - The
provider 130 receives user data specifying one or more user attributes from a client device (at 202). For example, therequest handler server 110 may receive a user request from aclient device 102 to purchase one of the products, Product A, listed on one of the provider's websites, Website B. Therequest handler server 110 may parse the user request to identify the attributes in the user request. In some implementations, therequest handler server 110 may use an existing list of attributes that it maintains to identify the same attributes in the user request. In this example, the attributes include product sales (with a value of Product A) and store (with a value of Website B). - In the above example, the
request handler server 110 identifies attributes such as user identifier (e.g., a unique identifier assigned to each user who is a member of the provider's website), the product identifier (e.g., a unique identifier assigned to each of the provider's products), payment information, shipping speed, the shipping information, the purchase price of the product, the shipping cost, and the website where the request originated (e.g., in the case where the provider may operate more than one website). As described with reference toFigure 1 , therequest handler server 110 may identify several other types of attributes. Therequest handler server 110 sends the identified attributes to thedata aggregating engine 112. - The
data aggregating engine 112, upon receiving the attributes, may select for storage only data for one or more attributes that are presently stored in thedata warehouse 122. Alternatively, thedata aggregating engine 112 may select for storage all the attributes received in the user request. If the attributes do not already include the user identifier (e.g., in the case where the user is a first time shopper on the provider's website), the data aggregating engine generates a unique identifier for the user. In the above example, the data aggregating engine may identify the following attributes for storage: the user identifier (943215), the product identifier (Product A), and the website where the request originated (Website B). Note that in this example, the user already had an existing unique user identifier. Alternatively, thedata aggregating engine 112 may generate a unique identifier for the user using, for example, a random number generator. - The
provider 130 generates a unique entry for the user using the user data and the unique user identifier (at 204). In some implementations, thedata entry generator 114 generates a unique entry as a tuple with the following form: <User ID,Attribute 1, Attribute 2, ..., Attribute n>. In the above example, thedata entry generator 114 generates a tuple for the following attributes: user identifier (943215), the product identifier (Product A), and the website where the request originated (Website B). The generated tuple would thus be: <943215, Product A, Website B>. Generating a tuple is one of many ways of concatenating the user identifier and the one or more attributes. For example, another way of concatenating this information includes generating a hash representation for the user identifier and for each of the attributes, and then concatenating the hash representations of the user identifier and each of the attributes. - If the
provider 130 desires to insert false negatives in the probabilistic data structure, then it obtains a false negative rate (at 206). For example, thedata aggregating engine 112 may maintain design information for the probabilistic data structure, which may include individual false negative rates for each data structure stored in thedata warehouse 122. Alternatively, theprovider 130 may assign the same false negative rate for all probabilistic data structures stored in thedata warehouse 122. In the above example, the false negative rate may be 25%. - The
provider 130 discards user entries based on a false negative rate (at 208). For example, if the false negative rate is 25% and the provider is inserting 100 user entries, theprovider 130 may generate unique entries for each of the user entries (for example, in the manner described above) and then drop 25% of these 100 user entries (i.e., 25 entries). Theprovider 130 retains (e.g., in a temporary storage) the remaining user entries, i.e., the non-discarded user entries. - The
provider 130 determines whether the unique entry that is generated atoperation 204 is among the non-discarded user entries (at 210). In some implementations, theprovider 130 can compare the unique entry generated atoperation 204 with the unique entries corresponding to the non-discarded user entries (at operation 208). If theprovider 130 does not find a match based on this comparison (at 212), it determines that the unique entry generated atoperation 204 is among the discarded entries and discards the unique entry and the corresponding user data at operation 220 (described below). On the other hand, if theprovider 130 finds a match, theprovider 130 can send a command to thedata aggregating engine 112 to insert a privacy enhanced representation of the tuple into a probabilistic data structure stored in thedata warehouse 122, as further described below with reference to operation 214. - Optionally, or in addition to using the false negative rate to discard certain user entries, a certain percentage (or number) of the locations of the probabilistic data structure can also be set at random to a value of 1.
- The
data aggregating engine 112 inserts the privacy enhanced representation of the unique entry into the probabilistic data structure (at 214) by generating a hash representation of the unique entry (at 216) and updating the probabilistic data structure based on the hash representation (at 218). - In some implementations, the
data aggregating engine 112 can send a command along with the unique entry (generated at 204) to thehash generator 116 to generate the hash representation of the unique entry. Thehash generator 116 may input the unique entry to one or more hash functions, each of which outputs a hash representation of the unique entry. The hash generator may use any available hash functions, such as, for example, SuperFastHash, CityHash, MurmurHash, SHA-256, and SpookyHash. For example, thehash generator 116 may use three hash functions (e.g., SuperFastHash, CityHash, and MurmurHash), each of which may generate a different hash value. - In some implementations, the
hash generator 116 may send a message, including the unique identifier (e.g., the tuple <943215, Product A, Website B>) as well as the three hash values corresponding to the unique identifier to thedata interface 118. The data interface 118 may maintain a list of all the data structures stored in thedata warehouse 122. Thedata warehouse 122 may routinely communicate with the data interface 118 to provide the data interface 118 with an updated list of probabilistic data structures stored in thedata warehouse 122. The data interface 118 uses this list as well as the received message from thehash generator 116 to identify the appropriate data structure that needs to be updated. In some implementations, thedata interface 118 parses the attributes of the unique entry to identify the appropriate data structure. For example, for the tuple <943215, Product A, Website B>, the data interface may evaluate the attributes (Product A and Website B) to identify the appropriate data structure in its maintained list of data structures, that stores these attributes. - In some implementations, the
data interface 118 can send a message, including the hash representation of the unique entry along with the data structure identifier corresponding to the data structure 122-A to be updated. Upon receiving this message, thedata warehouse 122 updates the probabilistic data structure 122-A using the hash values in the message. In the above example, thedata warehouse 122 uses the hash values to identify the appropriate locations in the data structure 122-A, and the data warehouse then updates the values at these locations from 0 to 1. - After inserting the privacy-enhanced representation of the unique entry into the probabilistic data structure, the
provider 130 discards the user data (at 220). For example, after thedata warehouse 122 confirms that the data structure 122-A was successfully updated (e.g., by sending an acknowledgement message to the data interface 118), thedata aggregating engine 112 deletes the user data and the unique entry (i.e., the tuple including the user identifier and the one or more attributes), thereby preventing further access to the user data itself. Thedata aggregating engine 112 also sends a message to therequest handler 110 to delete any instances of the user data that therequest handler server 110 initially sent to thedata aggregating engine 112. Alternatively or additionally, thedata aggregating engine 112 may re-assign memory where user data is currently stored such that the re-assigned memory locations may be updated with other data. - The
provider 130 generates or receives a query requesting a response specifying how many users have an attribute that matches a given attribute specified in the query (at 222). In some implementations, an administrator or an operator for theprovider 130 may send a query to thequery server 120. Using the above example, the query may be requesting a response specifying how many users in a set of users bought a particular product, Product A. In some implementations, the query may specify the set of users and their corresponding unique identifier. The query received by thequery server 120 in this example may have the following format: get tot_users (product_sales→Product A; store→Website B; user_set={1231, 1232, 1233, ...., 1299). As shown in this query, tot_users refers to the total number of users, "product_sales→Product A" refers to an attribute "product_sales" with a desired value of Product A, stored Website B" refers to a store attribute with a desired value of Website B, and user_set identifies the set of users to include as part of the query, which in this case includes users with unique identifiers ranging from 1231 to 1299. Alternatively, the query may not specify set of users, in which case thequery server 120 includes all (or some subset, depending on the user identifiers represented by data in the appropriate data structure) stored user identifiers (e.g., which may be stored in a separate data structure in the data warehouse 122) as part of the query. - Queries need not be limited to number of users with particular attributes. For example, queries can also request information about particular attributes or behavior of the users based on the data stored in the probabilistic data structure. For example, a query can request the number of purchases made by an average user at a particular store. In this example, the same query as referenced in the previous paragraph may be executed, and the response may be scaled (e.g., divided) by the number of users for whom data is stored in the probabilistic data structure, to obtain the average purchases per user. As another example, a query can request the number of yellow pants purchased at a particular store. In this example, the query would specify all the users in the set and the attributes of product type=pants and color=yellow.
- The
query server 120 estimates the actual number of users that match the given attribute (at 224). To accomplish this, thequery server 120 first obtains the number of users that match the given attribute using the appropriate probabilistic data structure (at 226). In some implementations, thequery server 120 communicates with thedata warehouse 122 to obtain data requested in the query. Thedata warehouse 122 may routinely communicate with thequery server 120 to provide thequery server 120 with a current list of probabilistic data structures stored in thedata warehouse 122. Thequery server 120 uses this list as well as the received query to identify the appropriate data structure that needs to be updated. In some implementations, thequery server 120 may parse the attributes specified in the query to identify the appropriate data structure. In the above example, thequery server 120 uses the <product_sales> attribute to identify the data structure that includes this attribute, which in this example is data structure 122-A. - In some implementations, the
query server 120 generates a tuple (or other appropriate concatenated data, as described above) for each unique user identifier in the set of users. The order of the user identifier and the attributes in the tuple for query purposes is the same as the order used to initially enter the user entries into the probabilistic data structure. For example, for user identifier 1231, the appropriate tuple would be <1231, Product A, Website B>. Thequery server 120 then generates hash representations (as described above) for each of the tuples and uses the resulting hash values as indices for the data structure 122-A. In this example, thequery server 120 checks the value stored in bit locations or indices specified by the resulting hash values and maintains a count of all locations where the corresponding bit value is "1." The total number of locations with the bit value of "1" represents the number of users that match the given attribute using the appropriate probabilistic data structure. In this way, in the above example, thequery server 120 may obtain a total number of users of 40 who purchased Product A from Website B. - The
query server 120 scales the number of users determined at step 226 based on the false positive rate of the probabilistic data structure to estimate the actual number of users (i.e., the true positives in the probabilistic data structure) (at 228). In some implementations, the true positives can be estimated using the following formula: P - (FPR * TN) / (1 - FPR), where P represents the value returned from querying the probabilistic data structure (as in preceding paragraph), FPR represents the false positive rate of the probabilistic data structure, and TN represents the true negatives (which can also be represented by the number of users minus P). In the above example, if the number of users whose data is stored in the probabilistic data structure is 100, then the true negatives TN is 60, i.e., 100 (total number of users) - 40 (total number of users returned by querying the data structure). Using the above formula, and assuming a 20% false positive rate, the number of true positives = 40 - (20% * 60) / (1 - 20%) = 40 - (12) / 0.8 = 25. Thus, if the probabilistic data structure in this example does not include any false negatives, then theprovider 130 determines an estimate of the actual number of users with attributes that match the given attribute (e.g., "Product A" and "Website B") is 25. - If, however, the probabilistic data structure includes false negatives, then the scaled value determined at operation 228 needs to be further scaled based on the false negative rate that was previously obtained at step 206. In the above example, the scaled number of users determined at step 228 is 25 and the false negative rate is 12%. Using the false negative rate of 12%, the
query server 120 drops 12% of the users and stores the remaining 88% of users (i.e., 100%-12%). To accomplish this, thequery server 120 adjusts the 25 users (determined at 228) by this number of users by 88%, to obtain 28.4 users. Therefore, 28.4 represents an estimate of actual number of users with the specified attribute that match the attribute identified in the query (which is "Product A" in this example). - If, in addition to using the false negative rate to discard certain user entries, a certain percentage of the locations of the probabilistic data structure are set to a value of 1, then the same percentage can be used to further scale, using this percentage, the actual number of user determined in the preceding paragraph, to obtain the actual number of users.
-
FIG. 3 is a flow diagram of anexample process 300 that describes storing and analyzing user data, which includes a continuous value attribute, using a probabilistic data structure. The operations of theprocess 300 are described below for purposes of illustration only. The operations of theprocess 300 can be performed by any appropriate device or system, e.g., any appropriate data processing apparatus. The operations of theprocess 300 can also be implemented as instructions that are stored on a computer readable medium, which, when executed by one or more data processing apparatus, cause the one or more data processing apparatus to perform the operations of theprocess 300. The operation of theprocess 300 are described below with reference to the components of theprovider 130. Moreover, the probabilistic data structure referenced inFigure 3 may be a Bloom filter, but it may also be other types of probabilistic data structures, such as, for example, HyperLogLog and Count-Min sketch. - The
provider 130 receives user data specifying one or more user attributes from a client device, including a continuous value attribute (at 302). For example, therequest handler server 110 may receive 10 user requests from one ormore client devices 102 to purchase a particular product, Product A, which is listed for $400 on one of the provider's websites, Website B. Therequest handler server 110 may parse the user request to identify the attributes in the user request. In some implementations, therequest handler server 110 may use an existing list of attributes that it maintains to identify the same attributes in the user request. In this example, the attributes include product sales (with a value of Product A), product price (which is a continuous value attribute with a value of 300), and store (with a value of Website B). - The
provider 130 generates a normalized probability for a value of continuous value attribute using a maximum value of the attribute (at 304). For example, theprovider 130 may determine by evaluating the product prices of all products listed on website B, that the product prices range from $0 to $1000. In this example, the maximum value for the product price attribute is 1000. Theprovider 130 normalizes continuous value of 400 using the maximum value of 1000 by dividing 400 by 1000. The resulting normalized probability is 40% or 0.4 (i.e., 400/1000). - The
provider 130 generates a unique entry for the user using the user data and a unique user identifier (at 306). In some implementations, thedata entry generator 114 generates a unique entry as a tuple (or other form of concatenated information as described above) with the following form: <User ID,Attribute 1, Attribute 2, ... , Attribute n>. In the above example, thedata entry generator 114 generates a tuple for the following attributes: user identifier (943215), the product identifier (Product A), and the website where the request originated (Website B). Thus, the tuple would be as follows: <943215, Product A, Website B>. Note that thedata entry generator 114 does not include the continuous value attribute (which is product price in the above example) as part of the tuple. - The
provider 130 inserts a privacy-enhanced representation of the unique entry into a probabilistic data structure (at 308). In some implementations, this may be performed in four steps. - First, the
provider 130 identifies user entries based on the normalized probability (at 310). In the above example, the normalized probability is 40% and the number of entries to be inserted is 10. Accordingly, theprovider 130 may generate unique entries for each of the user entries (as described above and with reference toFigure 2 ) and then identify 40% of 10 user entries (i.e., 4 entries) to insert into the probabilistic data structure. The identified user entries may be stored in a temporary storage (e.g., a cache). - Second, the
provider 130 determines whether the unique entry that is generated atoperation 306 is among the identified user entries (at 310). In some implementations, theprovider 130 can compare the unique entry generated atoperation 306 with the unique entries identified at 310. If theprovider 130 does not find a match based on this comparison (at 314), it determines that the unique entry generated atoperation 306 is not among the identified entries and discards the unique entry and the corresponding user data at operation 316 (described below). On the other hand, if theprovider 130 finds a match, theprovider 130 can send a command to thedata aggregating engine 112 to insert a privacy enhanced representation of the tuple into a probabilistic data structure stored in thedata warehouse 122, as further described below with reference to operation 330. - Third, the
provider 130 generates a hash representation of the unique entry (at 330), for example, as described with reference to the corresponding step ofprocess 200. Next, theprovider 130 updates the probabilistic data structure based on the hash representation (at 332), for example, as described with reference to the corresponding step ofprocess 200. In the above example, and as described with reference to process 200, the hash functions generate three hash values for the tuple <943215, Product A, Website B>, which then results in setting the appropriate locations of the data structure 122-A based on the hash values, from 0 to 1. - After inserting the privacy enhanced representation of the unique entry into a probabilistic data structure, the
provider 130 discards the user data (at 316) in the same way as described with reference to the corresponding step ofprocess 200. - The
query server 120 receives a query requesting the aggregate value of the continuous value attribute (at 318). In some implementations, a webmaster or operator for theprovider 130 may send a query to thequery server 120. Using the above example, the query may request a response specifying the total money spent by users on Product A at Website B. The query received by thequery server 120 in this example may have the following format: get tot_revenue (product→Product A, store→Website B, user_set→{1231, 1232, 1233, ...., 1299}). As shown in this query, tot_revenue refers to the total revenue or money spent, "product→Product A" refers to an attribute "product" with a desired value of Product A, "stored Website B" refers to an attribute "store" with a desired value of "Website B, and user_set={1231, 1232, 1233, ...., 1299} identifies the set of users to include as part of the query, which in this case includes users with unique identifiers ranging from 1231 to 1299. Alternatively, the query may not specify set of users, in which case thequery server 120 includes all (or some subset, depending on the user identifiers represented by data in the appropriate data structure) stored user identifiers (e.g., which may be stored in a separate data structure in the data warehouse 122) as part of the query. - The
provider 130 determines the aggregate value of the continuous value attribute (at 320). In some implementations, this operation can include three steps. First, theprovider 130 obtains the number of users that match the given attribute using the probabilistic data structure (at 322). This operation may be performed in a manner similar to that described with reference to the corresponding step ofprocess 200. - Second, the
provider 130 scales the number of users based on the false positive rate (and optionally the false negative rate) of the probabilistic data structure (at 324) in a manner similar to that described with reference to the corresponding step inprocess 200. - Third, the
provider 130 scales the actual number of inserted users using the maximum value (at 328). In the above example, theprovider 130 multiplies the estimate of the actual number of inserted users (i.e., the true positives obtained by querying the data structure and scaling using the false positive rate) by the maximum value. In the above example, the actual number of inserted users was 4, which when multiplied by the maximum value of 1000, results in total value of 4000 (i.e., 4∗1000). Thus, $4000 represents the aggregate value of the continuous value attribute, which in this case, is the total revenue or total amount spent by users on Product A at Website B. -
FIG. 4 is a flow diagram of anexample process 400 that describes storing and analyzing a date value in a probabilistic data structure. The operations of theprocess 400 are described below for purposes of illustration only. The operations of theprocess 400 can be performed by any appropriate device or system, e.g., any appropriate data processing apparatus. The operations of theprocess 400 can also be implemented as instructions that are stored on a computer readable medium, which, when executed by one or more data processing apparatus, cause the one or more data processing apparatus to perform the operations of theprocess 400. The operation of theprocess 400 are described below with reference to the components of theprovider 130. Moreover, the probabilistic data structure referenced inFigure 4 may be a Bloom filter, but it may also be other types of probabilistic data structures, such as, for example, HyperLogLog and Count-Min sketch. - The
provider 130 receives user data specifying one or more user attributes from a client device (at 402) in a manner similar to that described with reference to the corresponding step ofprocess 200. - The
provider 130 determines the date of receipt of the user data (at 404). Thedata aggregating engine 112 may obtain the current date, for example, from the request handler server's timestamp. Thedata aggregating engine 112 may also obtain the current date from other sources, such as, for example, from the date field that may be sent along with the request received from theclient device 102. - The
provider 130 generates a unique entry for the user using the user data and a unique user identifier (at 406). This operation may be performed in a manner similar to that described with reference to the corresponding step ofprocess 200. - The
provider 130 inserts a privacy enhanced representation of the unique entry into a probabilistic data structure (at 408). This operation may be performed in a manner similar to that described with reference to the corresponding step ofprocess 200, with one exception. Instead of updating the locations of the probabilistic data structure to "1," the locations are updated to the date value determined at step 404. - After inserting the privacy-enhanced representation of the unique entry into a probabilistic data structure, the
provider 130 discards the user data (at 410). This operation is in the same way as described above with reference to the corresponding step ofprocess 200. - The
provider 130 adjusts data in the probabilistic data structure older than a predetermined period (at 412). In some implementations, theprovider 130 discards user data older than a predetermined period, e.g., one day, one week, one year, or some other specified period (at 412). For example, theprovider 130 may have an agent that routinely (e.g., at specified time intervals) checks whether the values stored in the probabilistic data structures indata warehouse 122, are more than seven days old. Theprovider 130 may use the present date to identify a date from seven days ago and then looks for all entries with a date earlier than that date. For those entries, the agent may change the values to 0. - The
query server 120 receives a query requesting a response specifying how many users have an attribute that matches a given attribute specified in the query within a specified period (at 414). In some implementations, the administrator or operator for theprovider 130 may send a query to thequery server 120. Using the above example, the query may request a response specifying the number of users who purchased product A in the last 6 months. The query received by thequery server 120 in this example may have the following format: get tot_users (product - The
provider 130 estimates the actual number of users with attributes that match the attribute specified in the query (at 416). This operation may be performed in a manner similar to the corresponding step ofprocess 200. - The
provider 130 determines an estimate of the actual number of users that match the given attribute in the specified period (at 418). In some implementations, for each of the actual number of users estimated atstep 416, theprovider 130 first looks up the corresponding date value stored in the probabilistic data structure. In the above example where the query requests a number of users who purchased product A in the last 6 months, thequery server 120 looks up the date values for all the actual users identified instep 416. Thequery server 120 may use the present date to identify a date 6 months before the present date. Thus, if the present date is 01/01/2019, thequery server 120 may determine 07/01/2018 as the date from 6 months ago. Then, thequery server 120 evaluates whether the date values for the actual users exceed 07/01/2018 and keeps a count of entries with a corresponding date value after 07/01/2018. Thequery server 120 adjusts this count to account for the false positive rate (and optionally the false negative rate) to estimate the number of users who purchased product A in the last 6 months. -
FIG. 5 is block diagram of anexample computer system 500 that can be used to perform operations described above. Thesystem 500 includes aprocessor 510, amemory 520, astorage device 530, and an input/output device 540. Each of thecomponents system bus 550. Theprocessor 510 is capable of processing instructions for execution within thesystem 500. In one implementation, theprocessor 510 is a single-threaded processor. In another implementation, theprocessor 510 is a multi-threaded processor. Theprocessor 510 is capable of processing instructions stored in thememory 520 or on thestorage device 530. - The
memory 520 stores information within thesystem 500. In one implementation, thememory 520 is a computer-readable medium. In one implementation, thememory 520 is a volatile memory unit. In another implementation, thememory 520 is a non-volatile memory unit. - The
storage device 530 is capable of providing mass storage for thesystem 500. In one implementation, thestorage device 530 is a computer-readable medium. In various different implementations, thestorage device 530 can include, for example, a hard disk device, an optical disk device, a storage device that is shared over a network by multiple computing devices (e.g., a cloud storage device), or some other large capacity storage device. - The input/
output device 540 provides input/output operations for thesystem 500. In one implementation, the input/output device 540 can include one or more of a network interface devices, e.g., an Ethernet card, a serial communication device, e.g., and RS-232 port, and/or a wireless interface device, e.g., and 802.11 card. In another implementation, the input/output device can include driver devices configured to receive input data and send output data to other input/output devices, e.g., keyboard, printer anddisplay devices 560. Other implementations, however, can also be used, such as mobile computing devices, mobile communication devices, set-top box television client devices, etc. - Although an example processing system has been described in
Figure 5 , implementations of the subject matter and the functional operations described in this specification can be implemented in other types of digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. - Media does not necessarily correspond to a file. Media may be stored in a portion of a file that holds other documents, in a single file dedicated to the document in question, or in multiple coordinated files.
- Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer storage media (or medium) for execution by, or to control the operation of, data processing apparatus. Alternatively, or in addition, the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. A computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Moreover, while a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal. The computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
- The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
- The term "data processing apparatus" encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing. The apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
- A computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), to name just a few. Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's client device in response to requests received from the web browser.
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network ("LAN") and a wide area network ("WAN"), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
- The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, a server transmits data (e.g., an HTNΠ, page) to a client device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device). Data generated at the client device (e.g., a result of the user interaction) can be received from the client device at the server.
- While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any inventions or of what may be claimed, but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination.
- Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
- Thus, particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In certain implementations, multitasking and parallel processing may be advantageous.
Claims (9)
- A computer implemented method, comprising:receiving (222) a query requesting a response specifying how many users have an attribute that matches a particular attribute specified in the query;obtaining (226), using a probabilistic data structure, a first number of users that includes both an estimated number of users that match the given attribute and false positives returned from the probabilistic data structure, wherein the probabilistic data structure includes a plurality of privacy enhanced representations of unique entries for a plurality of users; anddetermining (224) the estimated number of users based on the first number of users and a false positive rate of the probabilistic data structure.
- The computer implemented method of claim 1, comprising:receiving, from a client device, user data specifying one or more attributes of a user;generating a unique entry for the user using the user data and a user identifier unique to the user;determining that the unique entry is to be inserted into the probabilistic data structure based on at least one of: a false negative rate or a normalized probability for a value of a continuous value attribute, wherein the continuous value attribute is included among the one or more attributes;in response to determining that the unique entry is to be inserted into the probabilistic data structure based on at least one of the false negative rate or the normalized probability, inserting a privacy enhanced representation of the unique entry into the probabilistic data structure that includes a plurality of privacy enhanced representations of unique entries for a plurality of users; anddiscarding the user data after inserting the privacy enhanced representation of the unique entry into the probabilistic data structure.
- The computer implemented method of claim 2, wherein inserting the privacy enhanced representation of the unique entry into the probabilistic data structure, comprises:generating a hash representation of the unique entry; andupdating the probabilistic data structure based on the hash representation.
- The computer implemented method of claims 2 or 3, wherein the continuous value attribute includes values ranging from a minimum value to a maximum value; and
the method further comprising:generating the normalized probability for a value of the continuous value attribute that is proportional to the maximum value;receiving a query requesting an aggregate value of continuous value attribute specified in the query; anddetermining, using the probabilistic data structure, the aggregate value of the continuous value attribute specified in the query based on the estimated number of users and the maximum value. - The computer implemented method of claim 4, wherein determining, using the probabilistic data structure, the aggregate value of the continuous value attribute specified in the query based on an estimated number of inserted users and the maximum value, comprising:
scaling the estimated number of inserted users using the maximum value to generate the aggregate value of the continuous value attribute. - The computer implemented method of any preceding claim, further comprising:determining a date of receipt of the user data specifying the one or more attributes of the user;adjusting the data in the probabilistic data structure using data specifying the date of receipt of the user data;receiving a query requesting a response specifying how many users have an attribute that matches a particular attribute within a specified period;determining, using the probabilistic data structure, dates of receipt of the particular attribute for the estimated number of users; andidentifying a number of users among the estimated number of users for which the respective date of receipt is within the specified period.
- The computer implemented method of claim 6, further comprising:
discarding data in the probabilistic data structure that is older than a predetermined period. - The computer implemented method of any preceding claim, further comprising:identifying, at random and using a specified percentage, one or more locations of the probabilistic data structure;updating values of the one or more locations of the probabilistic data structure; andscaling the scaled estimated number of users based on a number of the one or more locations.
- A computer readable medium storing instructions that, when executed by one or more data processing apparatus, cause the one or more data processing apparatus to perform operations recited in any of claims 1-8.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
EP21211089.4A EP4047500B1 (en) | 2019-05-01 | 2019-05-01 | Privacy preserving data collection and analysis |
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
EP19724320.7A EP3750098B1 (en) | 2019-05-01 | 2019-05-01 | Privacy preserving data collection and analysis |
PCT/US2019/030234 WO2020222840A1 (en) | 2019-05-01 | 2019-05-01 | Privacy preserving data collection and analysis |
EP21211089.4A EP4047500B1 (en) | 2019-05-01 | 2019-05-01 | Privacy preserving data collection and analysis |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP19724320.7A Division EP3750098B1 (en) | 2019-05-01 | 2019-05-01 | Privacy preserving data collection and analysis |
Publications (2)
Publication Number | Publication Date |
---|---|
EP4047500A1 EP4047500A1 (en) | 2022-08-24 |
EP4047500B1 true EP4047500B1 (en) | 2023-03-15 |
Family
ID=66542544
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP21211089.4A Active EP4047500B1 (en) | 2019-05-01 | 2019-05-01 | Privacy preserving data collection and analysis |
EP19724320.7A Active EP3750098B1 (en) | 2019-05-01 | 2019-05-01 | Privacy preserving data collection and analysis |
Family Applications After (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP19724320.7A Active EP3750098B1 (en) | 2019-05-01 | 2019-05-01 | Privacy preserving data collection and analysis |
Country Status (4)
Country | Link |
---|---|
US (2) | US11314895B2 (en) |
EP (2) | EP4047500B1 (en) |
CN (1) | CN112189199B (en) |
WO (1) | WO2020222840A1 (en) |
Families Citing this family (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11568078B2 (en) * | 2020-07-21 | 2023-01-31 | Constella Intelligence, Inc. | Obfuscation of queries and responses in a security data search system |
US20220414258A1 (en) * | 2021-01-15 | 2022-12-29 | Google Llc | Cross-domain frequency filters for fraud detection |
US11966878B2 (en) | 2022-06-01 | 2024-04-23 | VendEx Solutions, Inc. | Multi-entity platform using uniform labeling of data products and services |
Family Cites Families (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20050021488A1 (en) | 2003-07-21 | 2005-01-27 | Rakesh Agrawal | Mining association rules over privacy preserving data |
WO2008121824A1 (en) * | 2007-03-29 | 2008-10-09 | Initiate Systems, Inc. | Method and system for data exchange among data sources |
US9256686B2 (en) * | 2008-09-15 | 2016-02-09 | International Business Machines Corporation | Using a bloom filter in a web analytics application |
US9189650B2 (en) * | 2012-07-31 | 2015-11-17 | J.D. Power And Associates | Privacy preserving method for summarizing user data |
US9298808B2 (en) * | 2013-05-24 | 2016-03-29 | Symantec Corporation | Encrypted search acceleration |
US10600076B2 (en) * | 2014-08-14 | 2020-03-24 | Google Llc | Systems and methods for obfuscated audience measurement |
US10108817B2 (en) | 2014-09-26 | 2018-10-23 | Microsoft Technology Licensing, Llc | Privacy-preserving cookies for personalization without user tracking |
US10114900B2 (en) * | 2015-03-23 | 2018-10-30 | Virtru Corporation | Methods and systems for generating probabilistically searchable messages |
US11281639B2 (en) * | 2015-06-23 | 2022-03-22 | Microsoft Technology Licensing, Llc | Match fix-up to remove matching documents |
GB2554435B (en) * | 2016-09-27 | 2019-10-23 | Univ Leicester | Image processing |
-
2019
- 2019-05-01 EP EP21211089.4A patent/EP4047500B1/en active Active
- 2019-05-01 CN CN201980005181.8A patent/CN112189199B/en active Active
- 2019-05-01 EP EP19724320.7A patent/EP3750098B1/en active Active
- 2019-05-01 WO PCT/US2019/030234 patent/WO2020222840A1/en unknown
- 2019-10-23 US US16/661,568 patent/US11314895B2/en active Active
-
2022
- 2022-03-21 US US17/699,909 patent/US11720708B2/en active Active
Also Published As
Publication number | Publication date |
---|---|
EP3750098A1 (en) | 2020-12-16 |
US11314895B2 (en) | 2022-04-26 |
US20200349277A1 (en) | 2020-11-05 |
CN112189199B (en) | 2024-03-12 |
CN112189199A (en) | 2021-01-05 |
US20220207180A1 (en) | 2022-06-30 |
EP3750098B1 (en) | 2021-12-01 |
WO2020222840A1 (en) | 2020-11-05 |
US11720708B2 (en) | 2023-08-08 |
EP4047500A1 (en) | 2022-08-24 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10445525B2 (en) | Data privacy management system and method | |
US11720708B2 (en) | Privacy preserving data collection and analysis | |
US8655819B1 (en) | Predicting user navigation events based on chronological history data | |
US8862529B1 (en) | Predicting user navigation events in a browser using directed graphs | |
WO2011031433A2 (en) | Audience segment estimation | |
EP4070223B1 (en) | Using secure multi-party computation to improve content selection process integrity | |
US11074369B2 (en) | Privacy preserving remarketing | |
EP4081971B1 (en) | Using secure mpc and vector computations to protect access to information in content distribution | |
US20200380172A1 (en) | Data integrity | |
EP4038532B1 (en) | Secured management of data distribution restrictions | |
EP4197156A1 (en) | Cryptographically secure control using secure multi-party computation | |
WO2022015371A1 (en) | Privacy preserving data collection and analysis | |
KR20220107035A (en) | Addition and subtraction noise for privacy protection | |
JP2023524366A (en) | Privacy-Preserving Measurements Using Secure Multi-Party Computation | |
CN113743975A (en) | Advertisement effect processing method and device | |
EP3374889A1 (en) | Balancing data requests over a network |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: UNKNOWN |
|
PUAI | Public reference made under article 153(3) epc to a published international application that has entered the european phase |
Free format text: ORIGINAL CODE: 0009012 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: THE APPLICATION HAS BEEN PUBLISHED |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: REQUEST FOR EXAMINATION WAS MADE |
|
AC | Divisional application: reference to earlier application |
Ref document number: 3750098Country of ref document: EPKind code of ref document: P |
|
AK | Designated contracting states |
Kind code of ref document: A1Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
17P | Request for examination filed |
Effective date: 20220817 |
|
RBV | Designated contracting states (corrected) |
Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
GRAP | Despatch of communication of intention to grant a patent |
Free format text: ORIGINAL CODE: EPIDOSNIGR1 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: GRANT OF PATENT IS INTENDED |
|
INTG | Intention to grant announced |
Effective date: 20221110 |
|
GRAS | Grant fee paid |
Free format text: ORIGINAL CODE: EPIDOSNIGR3 |
|
GRAA | (expected) grant |
Free format text: ORIGINAL CODE: 0009210 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: THE PATENT HAS BEEN GRANTED |
|
AC | Divisional application: reference to earlier application |
Ref document number: 3750098Country of ref document: EPKind code of ref document: P |
|
AK | Designated contracting states |
Kind code of ref document: B1Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
REG | Reference to a national code |
Ref country code: CHRef legal event code: EPRef country code: GBRef legal event code: FG4D |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R096Ref document number: 602019026549Country of ref document: DE |
|
REG | Reference to a national code |
Ref country code: IERef legal event code: FG4D |
|
REG | Reference to a national code |
Ref country code: ATRef legal event code: REFRef document number: 1554417Country of ref document: ATKind code of ref document: TEffective date: 20230415 |
|
P01 | Opt-out of the competence of the unified patent court (upc) registered |
Effective date: 20230510 |
|
REG | Reference to a national code |
Ref country code: LTRef legal event code: MG9D |
|
REG | Reference to a national code |
Ref country code: NLRef legal event code: MPEffective date: 20230315 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: RSFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230315Ref country code: NOFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230615Ref country code: LVFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230315Ref country code: LTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230315Ref country code: HRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230315 |
|
PGFP | Annual fee paid to national office [announced via postgrant information from national office to epo] |
Ref country code: FRPayment date: 20230526Year of fee payment: 5Ref country code: DEPayment date: 20230530Year of fee payment: 5 |
|
REG | Reference to a national code |
Ref country code: ATRef legal event code: MK05Ref document number: 1554417Country of ref document: ATKind code of ref document: TEffective date: 20230315 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: SEFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230315Ref country code: NLFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230315Ref country code: GRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230616Ref country code: FIFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230315 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: SMFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230315Ref country code: ROFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230315Ref country code: PTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230717Ref country code: ESFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230315Ref country code: EEFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230315Ref country code: CZFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230315Ref country code: ATFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230315 |
|
PGFP | Annual fee paid to national office [announced via postgrant information from national office to epo] |
Ref country code: GBPayment date: 20230529Year of fee payment: 5 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: SKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230315Ref country code: PLFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230315Ref country code: ISFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230715 |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R097Ref document number: 602019026549Country of ref document: DE |
|
REG | Reference to a national code |
Ref country code: CHRef legal event code: PL |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: MCFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230315 |
|
PLBE | No opposition filed within time limit |
Free format text: ORIGINAL CODE: 0009261 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: NO OPPOSITION FILED WITHIN TIME LIMIT |
|
REG | Reference to a national code |
Ref country code: BERef legal event code: MMEffective date: 20230531 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: SIFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230315Ref country code: MCFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230315Ref country code: LIFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20230531Ref country code: DKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230315Ref country code: CHFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20230531Ref country code: LUFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20230501 |
|
26N | No opposition filed |
Effective date: 20231218 |
|
REG | Reference to a national code |
Ref country code: IERef legal event code: MM4A |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: IEFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20230501 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: IEFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20230501 |