US20080221866A1 - Machine Learning For Transliteration - Google Patents
Machine Learning For Transliteration Download PDFInfo
- Publication number
- US20080221866A1 US20080221866A1 US12/043,854 US4385408A US2008221866A1 US 20080221866 A1 US20080221866 A1 US 20080221866A1 US 4385408 A US4385408 A US 4385408A US 2008221866 A1 US2008221866 A1 US 2008221866A1
- Authority
- US
- United States
- Prior art keywords
- word
- transliteration
- script
- input
- characters
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Abandoned
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/40—Processing or translation of natural language
- G06F40/42—Data-driven translation
- G06F40/44—Statistical methods, e.g. probability models
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/12—Use of codes for handling textual entities
- G06F40/126—Character encoding
- G06F40/129—Handling non-Latin characters, e.g. kana-to-kanji conversion
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/40—Processing or translation of natural language
- G06F40/42—Data-driven translation
- G06F40/45—Example-based machine translation; Alignment
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/40—Processing or translation of natural language
- G06F40/53—Processing of non-Latin text
Definitions
- This invention relates to automatic transliteration of words from one writing system to another writing system.
- Electronic documents are typically written in many different languages.
- Each language is normally expressed in a particular writing system (i.e., a script), which is usually characterized by a particular alphabet.
- a script which is usually characterized by a particular alphabet.
- the English language is expressed using the Latin alphabet while the Hindi language is normally expressed using the Devan ⁇ gar ⁇ alphabet.
- the scripts used by some languages include a particular alphabet that has been extended to include additional marks or characters.
- the French language is written using a script that includes the basic Latin alphabet (i.e., the 26 unaccented characters from A to Z, upper and lower case) and also includes diacritics (i.e., accented characters) and ligatures (e.g., ).
- a user may not be able to use these input devices to conveniently produce the letters of the script that they prefer. Instead, the user will often use the input device to provide a character or character sequence that is a close substitute. For example, a user may provide AE in lieu of .
- These substitutions are a form of transliteration, whereby the script of one language (e.g., Latin alphabet) is used to express the script of another language (e.g., the French alphabet).
- the system receiving the substitute characters is often expected to transliterate the given characters into characters of the desired script.
- the rules and conventions of transliteration between scripts can vary even among the same two languages, often by geographic region and even from user to user. For example, in some regions of India the Hindi word “ ” is expressed in the Latin alphabet as “Sharda”, whereas in other regions the same Hindi word is expressed as “Sharada”.
- the conventional approach for transliteration is to use rules, which specify that one or two particular characters in one script can be mapped to one or two particular characters in another script. These rules are typically provided by a language expert. This approach depends heavily on the expertise of the language expert or on cultural conventions.
- Embodiments feature methods, systems, apparatus, including computer program product apparatus. Each of these will be described in this summary be reference to the methods, for which there are corresponding systems and apparatus.
- one aspect of the subject matter described in this specification can be embodied in a method that includes receiving from a user an input of a sequence of multiple input characters entered in an input script. The sequence is terminated by entry of a word-break character where the word-break character is not part of the sequence. A transliteration model is used, after entry of the word-break character, to determine an output word in an output script from the sequence of multiple input characters.
- Other embodiments of this aspect include corresponding systems, apparatus, and computer program products.
- the transliteration model can include a plurality of segments, each segment mapping one or more characters of the input script to one or more characters of the output script. Each segment in the plurality of segments can correspond to a word pair in a corpus of word pairs, where each segment can have a score based on a frequency of occurrence of the word pair in the corpus of word pairs.
- Using the transliteration model can include generating potential transliterations from the segments, each potential transliteration being derived from a combination of one or more segments; and selecting the transliteration to use to determine the output word based on the scores of the segments in each of the potential transliterations.
- the transliteration model can include a dictionary having entries in the input script and, for each entry, a corresponding word in the output script.
- the word-break character can be a space character or an end-of-sentence character.
- the sequence of multiple input characters in a user interface can be replaced with the output word in the output script.
- another aspect of the subject matter described in this specification can be embodied in a method that includes deriving multiple word pairs from multiple electronic documents that contain parallel text.
- the parallel text including text in a first script corresponding to text in a different, second script.
- a similarity score between the words in each word pair is determined based on a phonetic metric value of each word in the word pair.
- Word pairs are used that have a similarity score satisfying a threshold criterion for automatic transliteration.
- Other embodiments of this aspect include corresponding systems, apparatus, and computer program products.
- Each phonetic metric value can be a soundex value.
- Deriving word pairs from multiple electronic documents can include aligning text within each document to identify text that is parallel; and deriving word pairs based on word alignments between parallel text.
- Deriving word pairs from multiple electronic documents can include using phonetic metric scoring and matching to align corresponding word pairs in unstructured text.
- the phonetic metric scoring can be a soundex scoring.
- each word pair in the corpus includes a source word and a target word.
- Each source word is specified in a source script and each target word is a transliteration of the corresponding source word in a different, target script.
- Relevant word pairs from the corpus are selected. Selection includes excluding trivial words in the corpus, where trivial words comprising one letter words and numerical characters, and selecting the word pairs based on how frequently the source words of the word pairs occur in the corpus. The relevant word pairs are ranked for use in automatic transliteration.
- Other embodiments of this aspect include corresponding systems, apparatus, and computer program products.
- Trivial words can include acronyms.
- the corpus of word pairs can include user-generated word pairs. Multiple possible transliterations for a source word can be provided to a user. A selection of a first transliteration from among the multiple transliterations can be received from the user. A word pair comprising the source word and the first transliteration are added to the corpus of word pairs. The frequencies of source words can be measured based on a number of documents in which the source words occur. Selecting relevant word pairs can include selecting additional word pairs from the corpus based on a randomized statistically biased selection. Selecting relevant word pairs can include filtering from the selected word pairs based on the respective sources of the word pairs.
- Another aspect of the subject matter described in this specification can be embodied in a method that includes generating a training model from ranked word pairs.
- Each word pair in the ranked word pairs includes a source word and a target word.
- Each source word is specified in a source script and each target word is a transliteration of the corresponding source word in a different, target script.
- Training model includes alignments between the letters of each of a plurality of source words and the letters of the corresponding target word.
- Generating the training model includes generating alignments from each of multiple word pairs including: for each word pair, matching the letters from the source word with the letters of the target word of the word pair. The letters are matched based on a statistical likelihood that one or more letters in the source word co-occur with one or more letters in the target word.
- Other embodiments of this aspect include corresponding systems, apparatus, and computer program products.
- the statistical likelihood can be measured by Dice coefficients.
- the letter-to-letter matches can include a k-to-n alignment, where k and n are each integers greater than 2. Some characters in the target script can be ignored or skipped in determining the alignment of letters.
- Pre-determined consonant maps can be used to map specific letters from source words to target words.
- Another aspect of the subject matter described in this specification can be embodied in a method that includes clustering users into groups based on usage patterns of the users in selecting or correction transliterations. A transliteration of a word for a first user in a first group is automatically corrected based on corrections made by other users in the first group.
- Other embodiments of this aspect include corresponding systems, apparatus, and computer program products.
- Another aspect of the subject matter described in this specification can be embodied in a method that includes clustering users into groups by identifying geographic locations of the users. A transliteration of a word for a first user in a first group is automatically corrected based on corrections made by other users in the first group.
- Other embodiments of this aspect include corresponding systems, apparatus, and computer program products.
- Another aspect of the subject matter described in this specification can be embodied in a method that includes recording word pairs for transliteration.
- Each word pair has a source word in a source script and one or more target words in a different, target script.
- the method includes generating an entry-aligned dictionary of transliterations.
- the dictionary includes, for every source word in the dictionary, a single target word. Whenever a particular source word is mapped to multiple target words, then the entry-aligned dictionary includes an entry for each target word, where each entry includes the same source word repeated in each entry.
- Other embodiments of this aspect include corresponding systems, apparatus, and computer program products.
- the entry-aligned dictionary of transliterations can include parts of a global dictionary of transliterations.
- the entry-aligned dictionary of transliterations can include a user's dictionary of transliterations.
- another aspect of the subject matter described in this specification can be embodied in a method that includes generating a transliteration model based on statistical information derived from a corpus of parallel text having first text in an input script and corresponding second text in an output script.
- the transliteration model is used to transliterate a sequence of input characters in the input script to a sequence of output characters in the output script.
- Other embodiments of this aspect include corresponding systems, apparatus, and computer program products.
- Multiple input words can be identified from the sequence of input characters.
- a first portion of the multiple input words can be transliterated, using the transliteration model, based on one or more of: 1) a second portion of the multiple input words preceding the first portion, or 2) a third portion of the multiple input words following the first portion.
- Each of the first, second and third portions correspond to a word, a phrase, or a sentence in the multiple input words.
- a transliteration of the first portion can be selected from a plurality of potential transliterations of the first portion based on a statistical likelihood that a potential transliteration in the plurality of potential transliterations co-occurs in the corpus with a transliteration of the second portion preceding the first portion.
- the rules that govern transliteration are automatically learned from a corpus of examples.
- the rules that govern transliteration are also learned and improved through use and user interaction.
- Dynamic rule sets enable transliteration to adapt to the dynamic nature of language and the varying expectations of users.
- Transliteration rules can be automatically customized for each individual user. Groups of users can be identified, based on geographical location or usage patterns, and can be provided with transliterations that are more likely to meet the particular expectations of users in the group.
- Transliteration rules can be provided to a client, such as a web browser, to provide interactive and timely transliterations. Common transliterations can be cached to further expedite transliteration. Common transliterations can be provided at least in part to a client to efficiently enable interactive transliteration.
- FIG. 1 is a diagram of a user interface for receiving text for transliteration.
- FIG. 2 is a diagram of alignment between characters of a target and source word.
- FIG. 3 is a diagram of segmentations of the aligned words shown in FIG. 2 .
- FIG. 4A is a diagram of segmentations derived from multiple word pairs.
- FIG. 4B is a diagram of partially generated potential transliterations.
- FIG. 5 is a flow diagram for selecting relevant words pairs from a corpus.
- FIG. 6 is a flow diagram for transliterating words.
- FIG. 7 shows an input string from which two potential transliterations are derived.
- FIG. 8 shows a hierarchy of groups and their associated dictionaries
- FIG. 9 is a block diagram of a transliteration system.
- an exemplary graphical user interface 100 includes a text box 110 for receiving text-based user input.
- the graphical user interface 100 can be that of a web page rendered by a web browser 120 or, in other implementations, can be a part of a stand alone application.
- Textual user input e.g., the text 130
- the textual user input is provided in a particular input script (e.g., using the Latin alphabet).
- text is provided by a user using an input device (e.g., a keyboard, a mouse, stylus, or microphone).
- Exemplary user input 130 is shown displayed in the text box, representing text received from a user in a particular input script (e.g., Latin alphabet).
- the user interface also includes a selection list 140 .
- the selection list includes one or more transliterations 145 A, 145 B.
- Each transliteration is a string that includes characters in a script other than the input script.
- the exemplary transliterations 145 are strings in an Indic script, e.g., Devan ⁇ gar ⁇ , that ideally correspond to the Latin input 130 .
- Indic script e.g., Devan ⁇ gar ⁇
- Transliteration is, in general, an imprecise process that can be dependent on context of both the transliterated string and the expectations of the user.
- the expectations of a user may be shaped by social norms, personal habits, regional practices or any number of external influences.
- the transliterations 145 presented in the selection list 140 can be presented in an order that reflects the likelihood that the transliteration correctly corresponds to one or more words in the input string 130 .
- that selection can be recognized as a correction.
- the transliteration 145 A is presented first because it is considered the most likely transliteration of the input string 130 . If a user selects another transliteration 145 B, that selection represents a correction, namely that the second transliteration 145 B is considered by the user as a more accurate transliteration than the first transliteration 145 A.
- User corrections can be recorded to improve the accuracy of subsequent transliterations.
- a record of user corrections identifies characteristics of the correction including the input word (or source word) as well as the transliterated word (or target word) that was selected by the user.
- correction records generated by multiple users can also include other statistical information. Statistical information can include how many users made the correction and how frequently the correction occurred both absolutely and relatively to the number of times the transliteration was presented (but not necessarily selected).
- a user may manually correct a particular transliteration by adding, removing or replacing characters in a transliterated word.
- a user may use a letter-level transliteration software or a software keyboard to insert individual letters into a transliterated word.
- Such manually corrected transliterations are also recognized as corrections and can be recorded as such.
- Context information can include how a user provided a correction (e.g. selection compared to manual correction) and the time the user provided the corrections.
- the context information can be used to rank corrections and determine their relative relevance and confidence.
- any context information can be used to dynamically personalize services for users, as described in U.S. patent application Ser. No. 11/324,736, entitled “Automatically Generating and Maintaining an Address Book”, to inventors Lalitesh Katragadda and Bret Steven Taylor, filed on Dec. 29, 2005, Express Mail No. EV542667757US, U.S. patent application Ser. No.
- user input received from the user can be transliterated on a word by word basis. For example, all of a user's text immediately preceding a word-break character (e.g., punctuation, a space, carriage return, end-of-line or end-of-file character) can be transliterated at once as a complete word—even while the user continues to provide additional input. In other implementations, the entire user input provided is transliterated at once (e.g., when the user submits the input or explicitly selects to have user input transliterated on demand). For example, a user can position a cursor over a particular word, and in response, the selection list 140 of transliterations can be presented. In other implementations, word fragments can be transliterated before the user has provided input that completes the word.
- word-break character e.g., punctuation, a space, carriage return, end-of-line or end-of-file character
- Transliteration can be performed between any two scripts where the letters of one script can be expressed using a combination of letters in another script.
- Latin and an Indic alphabet will be used to illustrate concepts of automatic machine-assisted transliteration.
- source-words specified in Latin characters
- target-words specified in Indic characters. Note, however, that the methods and processes described below can apply, in general, between any two differing scripts where transliteration is applicable.
- a process 500 for selecting relevant word pairs from a training corpus of word pairs for use with automatic transliteration learning algorithms.
- Each training pair has a word-set, a source-word and one or more target-words.
- the following description assumes a single target-word.
- the source-word is specified in the source script and the target-word is a transliteration of the source-word.
- the target-word is in the target script.
- Word pairs in the corpus can be derived from a variety of sources including existing electronic documents and recorded interaction with individual users (e.g., transliteration corrections).
- word pairs are automatically derived from electronic documents, such as documents that include parallel text (e.g., text in one script corresponding to a transliteration of text in another script).
- documents that include parallel text e.g., text in one script corresponding to a transliteration of text in another script.
- publicly accessible web pages which contain parallel text, can include language instruction material and transliteration guidance (e.g., governmental, corporate and academic literature).
- Suitable documents can be identified based on whether the document includes two different scripts.
- Well-known text and word alignment techniques can be used to align text within the document and determine whether the text is parallel (e.g., whether the text in one script is likely the translation of text in the other script).
- Word pairs can be derived based on word alignments between parallel text. Word pairs can be verified by comparing each word's soundex value (or other phonetic metric).
- scoring can be used to align and match corresponding word pairs in unstructured text. For example, the soundex score of words are used to determine a similarity score for each word in a potential word pair. A potential word pair whose similarly score exceeds a particular criterion threshold can be identified and recorded. Using soundex scoring can help prevent erroneous word pairs (e.g., incorrectly transliterated words) from being subsequently used during automatic transliteration.
- the corpus of word pairs can include user generated-word pairs.
- a user generated word pairs is derived when a user provides or selects one or more transliterations for a particular source-word specified in the input text. For example, a user selecting one of several possible transliterations for a particular input word (e.g., as described in reference to FIG. 1 ) generates a word pair between the input word and the selected transliteration.
- User generated word pairs can also be provided by an expert user.
- the process 500 includes omitting or ignoring trivial words in the corpus (step 510 ).
- Trivial words are words from which meaningful transliteration information cannot be acquired. Trivial words include one letter words and numerical characters. Acronyms can also be ignored.
- From the remaining word pairs in the corpus several word pairs can be selected based on how frequently the source-word occurs in the corpus (step 520 ). In some implementations, selection is based on how often the word appears anywhere in the corpus (e.g., all instances in all documents in the corpus). In other implementations, selection is based on the number of unique documents in which the word occurs (e.g., multiple instances of the same word in a particular document count only as one occurrence).
- the top 90% of all non-unique words can be selected.
- the number of selected words may be significantly less than the total number of distinct words that occur in the corpus. For example, some estimate that in English fewer than 5,000 unique words are used in 80% of all written texts.
- the process 500 includes selecting additional word pairs from the corpus based on any sampling method such as a randomized statistically biased selection (e.g. the higher the frequency, higher the probability of selection) (step 530 ). For example, an additional 5% of words can be selected that are both non-trivial and not selected (e.g., not among the top 90%). Thus, if 10,000 non-trivial words occur in less than 10% of all documents, then an additional 500 words are randomly selected from the 10,000 words.
- any sampling method such as a randomized statistically biased selection (e.g. the higher the frequency, higher the probability of selection)
- the process 500 includes filtering from the selected word pairs based on the source of a word pair (step 540 ).
- the sources from which each word pair originates can be grouped into entities. Words that originate from users can be grouped according to the particular user. Words that originate from web pages or documents can be grouped according to an associated characteristic of the document (e.g., domain name, article, author, directory, or database). Words that have been used by only a few entities (e.g., three or less) can be filtered (e.g., ignored or omitted). Alternatively, a squashing function can be used to score each word based on how often the word occurs both across different entities and within a particular entity, and words below a pre-defined score can be filtered.
- Each of the word pairs can be weighted based on their source (e.g., particular user or location). For example, the word pairs provided by a language expert or derived from a user correction (e.g., as described in reference to FIG. 1 ) can be given more weight compared to the same word pair derived from another source.
- the process 500 includes filtering from the selected word pairs based on the frequency of a word pair in the corpus (step 550 ) (e.g., based on how often the target-word or source-word appears in the corpus).
- a threshold can be used to filter all word pairs that include a word that infrequently occurs in the corpus.
- a word pair can be filtered if it the target-word occurs proportionally very rarely compared to other target-words that all share the same source-word.
- a word pair can be filtered if the target-word occurs proportionally rarely compared to all other words in the target script (e.g., words that occur less than 2% of the time, compared to all other words in the same script).
- all of the above filtering techniques can be used as an aggregate of signals.
- a single filtering function can be used to score a word pair based on its signals, whereby any word pair with sufficiently low score is subsequently omitted.
- the remaining selected word pairs are ranked (step 560 ).
- the rank of a word pair is a function of the number of times the word pair occurs in the corpus, a confidence signal and the weight of the word pair.
- the confidence signal is based on the number of unique word-pair sources (e.g., distinct users and document sources) which have used the transliteration represented by the word pair.
- word pairs can be ranked according to a squashing function (e.g., using values 1, 10->2, 100->10).
- the number of unique word-pair sources can be squashed to some small, maximal value for frequently occurring word-pairs, while the value of less frequently occurring words are boosted relatively.
- the squashing function is a non-linear function used to normalize linear predictions into probabilities (e.g., that range between 0 and 1).
- a training model is generated using the ranked word pairs.
- the training model includes alignments between the letters of a source word and the letters of the source word's corresponding target word.
- An alignment between source letters and target letters ideally identify letter transliterations (e.g., the source letters are a transliteration of the target letters and vice-versa).
- the letters from the source word are matched with the letters of the target word.
- Letters are matched based on the statistical likelihood that one or more letters in the source word co-occur with one or more letters in the target word.
- co-occurrence probabilities are measured by Dice coefficients.
- normal alignment techniques are relatively unconstrained and purely Dice-based alignment can be error-prone.
- letter-level alignment is a many-to-many mapping of characters, however in practice, alignments are typically one-to-one, two-to-one, one-to-two, one-to-three, or three-to-one mappings.
- viramas In determining the alignment of letters, some characters in the target script can be ignored or skipped. For example, in some Indic scripts, a class of characters known as viramas can be skipped during alignment. Even if viramas are skipped for alignment, they may still be considered during subsequent analysis (e.g., distance scoring and segmentation, as described below).
- Pre-determined consonant maps can be used to map specific characters from the source word to characters of the target word. Generally, consonants produce well-defined sounds. The consonants of one script map to one or a small number of consonants letters in another script. Consonant maps can be pre-determined by an expert user, or can be learned in a separate consonant mapping process. Consonant maps provide additional constraints during alignment requiring a specific consonants in the source word to map to one of a specific consonants in the corresponding word. Using consonant maps reduces the number of potential alignments, reducing the search space, increasing efficiency and reducing the likelihood of alignment error.
- a monotonic constraint can be used to constrain alignment mapping.
- the following description assumes that both source and destination are in the same direction.
- the monotonic constraint requires that the beginning and end of a source and corresponding target word align.
- the character preceding an aligned sub-part of the source word must align with the preceding character of the corresponding sub-part of the target word.
- the monotonic constraint makes alignment mapping a smaller, linear, chained-alignment problem.
- the alignment problem can be treated as a discrete or non-linear, constrained optimization problem, and techniques like BFGS (Broyden-Fletcher-Goldfarb-Shanno method), simulated annealing, SPSA (simultaneous perturbation stochastic approximation) can be applied to finding an optimal or near optimal solution.
- BFGS Broyden-Fletcher-Goldfarb-Shanno method
- SPSA Simultaneous perturbation stochastic approximation
- a monotonic constraint is used as a potential field (energy field) when aligning word-pairs using a constraint-based optimization.
- a measure of distance between the first (and last) character of one word and the first (and last) character of the corresponding word is zero.
- the distance between corresponding consonants e.g., based on the consonant maps
- the distances of all other characters are measured with respect to these zero points.
- the probability of a character in one word mapping to a character in the corresponding word is highest if their respective distances from corresponding zero points are the same. The probability decreases as the difference in distances increase.
- Using the monotonic constraint to set distance values makes the alignment mapping a smaller optimization problem.
- silent characters like viramas can be used to modify the distance functions.
- additional constraint rules can be used to simplify the alignment mapping.
- the inherent language-based characteristics of a script can be used to derive special constraints.
- matras are characters that represent a phonetic modifier to a consonant.
- Special rules that map matras to particular character can be used to improve alignment.
- Matras in an Indic-script word can be represented in a corresponding Latin-script transliteration as a vowel or as no character at all, depending on preceding characters. These conventions can be encoded as constraint rules.
- One such rule restricts which characters occur after a Latin character representing a corresponding Indic character. For example, the matra ‘ ’ (in ) extends the preceding sound with ‘aa’ or ‘ah’.
- a rule can indicate that the letter ‘a’ occurring after another letter that aligns with an Indic consonant character (e.g., ) will most likely align with the matra following the consonant character, if such a matra exists.
- FIG. 2 is an illustration 200 of an alignment between characters in a source word 210 and a target word 240 .
- the source word 210 is specified in Latin script while the target word 240 is specified in Devan ⁇ gar ⁇ script.
- the target word 240 includes the ten characters 230 A- 230 K. Note that the rendering of the target word 240 can appear to betray the actual order of the word's constituent characters.
- the ten individual characters 230 A- 230 K are shown in their actual order (e.g., the character 230 A is in a memory location successive to the memory location of character 230 B).
- Some characters between the source and target words align one-to-one, such as the alignment 220 between the first ‘n’ in the source word 210 and character 230 A.
- One or more letter alignments between a word pair can be grouped together producing a segmentation consisting of one or more contiguous alignments.
- the segmentation of a word pair effectively provides a mapping of a segment (e.g., one or more letters) from a source word to a segment in a target word.
- Each segmentation represents a transliteration that can potentially be applied to another source-word.
- a word pair may be used to generate multiple varying length overlapping segments; however, each segment obeys intra-word alignment boundaries.
- alignments between consonants are used to constrain segmentation. Consonant alignments are used as a boundary to limit segmentation, which effectively prevents coalescing letters on both sides of a consonant into a single segment.
- Each segment can be associated with an occurrence or frequency property whose value is based on how often the segment (e.g., a particular sequence of letters) occurs within the corpus. This property can be expressed as a segment prior probability derived from the number of times the segment occurs in the corpus relative to all other segments.
- Each segmentation can also be associated with an occurrence or frequency property whose value is based on the number of times the segmentation can be derived from word pairs in the corpus. This property can be expressed as a segmentation prior probability derived from the number of segmentations relative to all other segmentations.
- Each segment and segmentation can be associated with information about its conditional probability.
- the conditional probability of a segment indicates the probability that a particular series of target letters is generated given a particular series of source letters.
- Statistical similarity (co-occurrence) metrics such as Dice's coefficient, which measures the correlation between discrete events, can be used to measure the likelihood of a particular segment mapping to one or more corresponding segments.
- Each potential segmentation can be scored based on the frequency of occurrences in the corpus and a confidence signal (e.g., how many times the segmentation is used by users). Segmentations whose scores are not enough to exceed a preset threshold can be removed, omitted or ignored.
- Segmentation rules can be used to aggregate segments.
- a segmentation rule can specify that viramas, which are particular characters that occur before or after consonants, can be collapsed with (e.g., added to) their associated consonant into the same segment.
- Accents e.g., a matra
- Accents and viramas can be recursively collapsed to generate larger segments.
- Individual segments can be associated with information identifying whether the segment is a prefix or suffix depending on whether the segment occurs most frequently at the beginning or end of the word.
- Common prefixes and suffixes are can be identified from specific target-script letter sequences that frequently occur at the beginning or end of a word.
- a corresponding suffix or prefix in a source-script can be identified where the occurrence of a particular source-script letter sequence correlates with a corresponding occurrence of the target-script suffix or prefix.
- Prefixes and suffixes are automatically detected based on frequency of occurrence in the corpus and conditional probability correlation.
- a particular segmentation can be checked by computing a soundex value for the source segment and its corresponding target segment. Segmentations whose soundex values are determined to be significantly different can be removed, omitted or ignored. In addition to computing soundex values, other phonetic comparisons (e.g., pre-defined consonant maps, matra-vowel maps and syllable maps) can be used to verify segment mappings.
- character classes include consonants, vowels, consonant clusters (e.g., consecutive consonants), vowel clusters (e.g., consecutive vowels e.g. occurring for matras), accented characters, or viramas. For example, statistics identifying the probability that a particular consonant cluster follows another consonant cluster or that a particular accented character precedes a particular vowel can be collected.
- Statistical information can also be collected which describes the likelihood that a character or character class has particular characteristics with respect to the word in which the character is found (e.g., whether a character is usually accented, appears at the beginning or end of the word, or is followed or preceded by a virama). This statistical information can be generated for all corpora and can be used to determine whether a potential automatic transliteration is likely valid or not. This statistical information can also be verified to check validity and usefulness of particular segments. Automatic transliteration is described in further detail in reference to FIG. 6 .
- Information about additional combinations or consonant clusters can be generated using one and two letter generation rules, which can include language specific information (e.g., accents and viramas). These generation rules can be provided by expert users.
- a global dictionary of common transliteration mappings can be recorded. That is, a source word that occurs in the corpus with sufficient frequency can be recorded in the global dictionary with the source word's corresponding target words.
- This global dictionary serves as a transliteration cache from which the transliteration of common words can be quickly and easily retrieved.
- a global dictionary can be generated for each script or corpus.
- FIG. 3 is an illustration 300 of segmentations of the aligned words shown in FIG. 2 .
- the segmentation 320 includes the first two alignments and represents a mapping of ‘ni’ source-word characters to the characters 230 A and 230 B of the target word 240 .
- the segmentation 330 includes the next three alignments.
- the segmentation 340 includes the last two alignments between the source and target word.
- the segmentation 350 includes the last five alignments and overlaps with the segmentation 340 (e.g., the last two alignments are in both segmentations). Notice that each segmentation obeys the character alignments between the words (e.g., no segmentation crosses an alignment boundary). Although, only four alignments are shown, in general, the word pair can be used to generate as many segmentations as possible (e.g., every combination of contiguous alignments).
- a process 600 for transliterating a source word includes receiving a source word from a user (step 610 ).
- the particular user can be identified, separate from all other users from which source words may be received.
- a user accessing transliteration through the use of a web browser can be identified through login authentication, session keys, cookies, IP addresses or a combination thereof.
- an identified user has a profile which can include a user transliteration dictionary.
- a user transliteration dictionary identifies particular source words and respective target words that the user has identified.
- the user's transliteration dictionary can include mappings that have been explicitly or implicitly identified by the user (e.g., when the user makes a correction).
- a user's transliteration dictionary may differ from the global dictionary.
- a user transliteration dictionary is described in further detail below in reference to FIG. 8 .
- the corresponding target word can be provided to the user (step 620 ). Otherwise, the source word is used to search the global dictionary of common transliteration mappings (step 630 ). If the source word is found in the global dictionary, the corresponding target word can be provided to the user.
- the global dictionary can include region specific or group specific dictionaries that the user may belong to. In one implementation, the more specific the group, the higher the priority of that dictionary for the user. The most specific group being the user's personal dictionary, as described in reference to FIG. 8 .
- the source word can be transliterated as a sequence of segments.
- a list of potential transliterations are generated (step 640 ).
- the generation of potential transliterations can begin by matching either prefix segments or suffix segments, or by matching both prefix and suffix segments.
- the portion of the word that remains e.g., end, beginning or middle, respectively
- the entire word can be transliterated by the application of segment maps in no particular order using a global optimization approach.
- a source word can be transliterated by first identifying all applicable prefix and suffix segments based on the letters in the source word. All of these segments, in combination constitute a list of potential partial transliterations. Each partial transliteration includes only prefix and suffix segments. A partial transliteration will also include some unmapped letters of the source word, namely those letters between the end of the prefix and the beginning of the suffix. The partial transliteration can be “filled in” by applying additional segment maps. Applying the segment maps can produce additional transliterations if more than one segment mapping applies to a particular combination of characters in the source word.
- FIG. 4A is an illustration 400 A of segmentations 410 - 450 derived from multiple word pairs.
- the segmentations 410 - 440 are exemplary segmentations that can be derived from the word pair illustrated in FIG. 3 .
- the segmentation 450 is a segmentation that is derived from another word pair.
- Each segmentation represents a mapping of word segments in the source script (e.g., Latin) to word segments in the target script (e.g., an Indic script). As described above, some of these segmentations can be associated with information identifying whether the segmentation is a prefix or a suffix.
- the segmentations 410 - 430 each derived from the beginning of the word pair in FIG. 3 are prefix segmentations.
- the segmentation 440 is derived from the end of the same word pair and can be designated as a suffix segmentation.
- the segmentation 450 is not derived from the word pair shown in FIG. 3 , this segmentation is assumed to be derived from another word pair where ‘ya’ maps to ‘ ’. Although only five segmentations are illustrated in FIG. 4A , the segmentations derived from all word pairs in the corpus are typically used to transliterate a word.
- FIG. 4B is an illustration 400 B of generating potential transliterations 470 A-D for an input string 460 .
- Each potential transliteration 470 A-D is generated based on the segmentations shown in FIG. 4A .
- the potential transliteration 470 A is generated from the segmentation 410 .
- the potential transliteration 470 B is generated from the prefix segmentation 420 and the suffix segmentation 440 . Every character of the input string 460 is used to generate characters in the potential transliterations 470 A-B.
- the potential transliterations 470 C-D do not map every character from the input. Instead, each of these transliterations are generated based on the suffix segmentation 440 and two distinct prefix segmentations 430 and 450 .
- the prefix segmentation 430 and 450 map that same source-word characters to distinct target-word characters, so each segmentation is used to derive a potential transliteration.
- These transliterations 470 A-D are generated from all combinations of prefix and suffix transliterations illustrated in FIG. 4A .
- the blank 490 represents the characters in the target word that are unknown.
- the unmapped characters of the potential transliterations 470 C-D can be used to generate missing characters to fill in the blank 490 .
- Each potential transliteration 470 A-D is subject to pruning and scoring to identify a likely transliteration for the input string 460 .
- Unviable transliterations are potential transliterations that exhibit letter and segment patterns that are not supported by the statistical information collected from the corpus. For example, if, according to corpus statistics, there are no words that begin with an accent, then all potential transliterations with an initial accent can be pruned. All aspects of the statistical information collected from the corpus can be used to prune potential transliterations (e.g., prefix/suffixes, segment combinations, character pair and character-class pair co-occurrences, and other letter characteristics). In some implementations, a threshold can be specified to further increase the pruning rate.
- the threshold can specify that the statistical information from the corpus must exceed a particular value before a transliteration is considered viable. Therefore, characteristics of the potential transliteration (e.g., character-class combinations, suffixes, prefixes and so on) must not only have occurred in the corpus but must constitute a certain proportion thereof. For example, a particular segment may occur as a prefix in only 1% of all words in which the segment occurs. A potential transliteration that has the particular segment occurring as a prefix can be pruned if 1% does not exceed the threshold value.
- special characters can be inserted between segments that are otherwise not viable. For example, a special character can be inserted between a segment that ends with a consonant and the next segment that begins with a consonant. The special character can be later mapped to a vowel and is added to a potential transliteration when doing so would increase the score of the potential transliteration significantly.
- All potential transliterations are scored based on the conditional and prior probability and the length of each segment used to generate the transliteration (step 660 ). In general, long segments are scored more favorably than short segments because a longer segment typically represents a more specific and, ideally, a more accurate transliteration. In some implementations, the transliteration can be scored based on the prior and conditional probability of the entire word (e.g., rather than an individual segment). Transliterations can also be scored based on co-occurrence probabilities of each segment pair in the potential transliteration. The contribution of each segment to the score of the transliteration can be additive, multiplicative or some other monotonically increasing function.
- Other words in the input string can be used to contextually score potential transliterations.
- the score of several transliterations are all below a particular threshold value or alternatively, if the score of the transliterations are all near in value, then the score of each transliteration can be re-evaluated based on other words in the input string.
- the preceding or following words from the input string can be used.
- multi-word (e.g., phrase or sentence) matching can be used with preceding or following characters in the input string.
- the prior probability of word co-occurrences e.g., according to the corpus
- FIG. 7 shows an input string 710 from which two equally viable transliterations are derived 760 and 770 .
- the input string 710 includes two words, the first word 712 corresponds to the transliteration 740 .
- the second word 714 has an ambiguous transliteration as it can be transliterated into either of the words 720 or 730 .
- Both transliterations 720 and 730 are equally viable transliterations of the second word in the string 710 .
- the complete combined transliteration of the whole input string 710 can either be 760 or 770 .
- the relative occurrences 780 of each whole transliteration can be considered to determine which of the combined transliterations is likely more accurate.
- the score of the transliteration 720 can be improved relative to the transliteration of 730 .
- n-word portions of the transliteration which includes the ambiguous transliteration, are considered. For example, in a four word transliteration that included a word transliterated from the word 714 , the potential transliterations for 714 are grouped in a 2-word portion including a transliteration for a single preceding or succeeding word. The relative occurrence in the corpus of the n-word portion is used to score each potential transliteration of the source-word.
- the portion of the input string 710 being transliterated and the preceding and following portions of the input string used to affect the transliteration can each correspond to a word, multiple words (e.g., a phrase) or sentences.
- each potential, viable transliteration is ordered or ranked based on the respective score of the transliteration (step 670 ).
- the transliterations are presented in order to the user (step 680 ). If the user corrects the transliteration (e.g. selects any but the first transliteration in the ordered list), then the corrected word is added to the user's dictionary. All transliterations used by the user (e.g., whether corrected or not) can also be added to the training corpus, thus altering corpus and segmentation statistics. Transliterations of the same source word by a particular user can be added to a user's inferred dictionary.
- the word is added to the inferred dictionary and can be used to boost the score of subsequent potential transliterations.
- users can be clustered into groups of users together based on their usage patterns.
- a group of users who make one or more particular transliteration corrections can be recognized by statistical correlation—or by applying any collaborative filtering method.
- a culturally similar group of users can be identified based on their input, transliteration choices, and other context information such as their geographical location (e.g., based on the user's IP address or information in the user's profile), language preference, age, place of birth and so on.
- the users in a group share at least one particular commonality.
- User groups can be used to refine the transliterations provided to users of the group and to use for other services that may require personalization.
- the transliteration of words for these recognized users can automatically be corrected based on corrections made by other users in the group.
- user groups can also be identified based on words that are most frequently transliterated by the user.
- a particular group of users may be more likely to use and transliterate particular words than another group of users.
- Transliteration conventions often differ from one geographic region to another, so the usage pattern of users from a particular geographical region can be used to adapt transliterations for those users.
- user groups can be associated with particular group specific transliteration information.
- a particular group is associated with unique segment mappings, and group-specific transliteration statistics such as segmentation frequency, word pair frequency and prior probability information.
- This transliteration information can be based on transliteration selection and corrections by users in the group.
- the transliteration information can be included in a group dictionary which can include word pairs that are frequently used by users within the group.
- the global dictionary, one or more group dictionaries and a user's own personalized dictionary represent a prioritized hierarchy of dictionaries that can affect a particular user's transliterations.
- FIG. 8 shows a hierarchy 800 of groups and their associated dictionaries.
- the transliteration information applicable to all users e.g., the global dictionary and corpus-wide transliteration statistics
- a first group 810 is a group derived based on a particular geographical location of users.
- the first group 810 has an associated groups-specific transliteration information 815 identifying particular transliterations often used by users of the group 810 .
- the group may be one of other groups that respectively correspond to other particular geographical locations.
- the first group 810 includes at least two other sub-groups.
- the group 820 may correspond to users in the first group that correspond to users having a particular language preference.
- the group 820 is also associated with group-specific transliteration information 825 .
- group-specific transliteration information 825 In general, a user may belong to many groups at many varying levels in a hierarchy of groups.
- One particular user 840 in the group 820 is also associated with a personal transliteration information 845 , such as the user's personalized transliteration dictionary or the user's inferred dictionary.
- the transliteration information associated with the user, and the user's groups can be consulted in order of personalization.
- the entries of a user's personalized transliteration information 845 can be used first, the transliteration information 825 of sub-group 820 used second, the transliteration information 815 of group 810 used third and the global transliteration information used last.
- the information associated with all relevant transliteration information applicable to a user is used simultaneously.
- the information of each group can be weighted, (e.g., during potential transliteration generation and scoring) according to relevance of the group with respect to the user.
- FIG. 9 is a block diagram of a transliteration system 900 for providing transliterations responsive to user requests includes a transliteration module 910 .
- user input is received by the transliteration module 910 , upon which transliteration is performed.
- the transliteration module 910 provides a transliteration of the user input back to the user.
- the transliteration module 910 is a server that communicates with a client 920 such as a web browser, which is running on a device (e.g., a computer 964 or portable device 962 ) connected to the server using a wired or wireless network 958 .
- the client 920 provides user input to the transliteration module 910 using any convenient data submission techniques.
- the system 900 can provide a user interface 952 to the client 920 in accordance with the hyper-text transfer protocol (HTTP).
- HTTP hyper-text transfer protocol
- the client 920 can include client-side scripting capabilities that allow instructions to be received from the transliteration module 910 that are executed by the client 920 . These instructions can be specified in client-side scripting languages such as JavaScript, VBScript, Flash, and others.
- the transliteration module 910 can provide data and client-side instructions to enable the client to generate complete or partial transliterations within the client 920 .
- the transliteration module 910 can provide the client with a client-side copy of the user's transliteration dictionary 923 (or common words from the global transliteration dictionary).
- the client will also receive instructions that enable the client to automatically transliterate words that appear in the client-side dictionary without further interaction with the transliteration module 910 .
- segment maps 927 can be provided to the client along with instructions such that the client can generate viable transliterations for some words through application of the segment maps.
- the segment maps sent to the user can be identified based on a confidence score of the map and the frequency with which the map is used to produce a successful transliteration.
- the segments that are both likely to be correct and often used can be provided to the client for client-side transliteration. If a transliteration cannot be computed on the client (e.g., the word is not in the user's dictionary, or the provided rules are insufficient) the text can be provided to the transliteration module 910 .
- the particular maps and dictionary entries that are provided to the client compared to the maps and dictionaries that reside only on the server can depend on a caching strategy.
- the caching strategy can require that all transliteration occur on the server-side without client-side computation (e.g., unsupported web-browsers, mobile devices, slow devices, memory-constrained devices).
- the caching strategy can require that maps and dictionary entries are provided to the client for client-side computation.
- the selected mapping strategy can depend on the words being transliterated, the capabilities of the client, the capacity of the network connection or a combination thereof.
- transliteration module 910 includes two sub-modules, a back end 930 and a front end 940 . Each sub-module can be distinguished by its role in transliteration.
- the front end can include the user dictionary 914 and the global dictionary 918 .
- the front end on receipt of a particular input string, can attempt to transliterate the string based on word look-ups each dictionary.
- the back end can include a transliteration processor for transliterating a word algorithmically based on segmentation maps 985 and the training corpus of word pairs 974 (e.g., using corpus-related statistics such as prior probabilities).
- the training corpus of word pairs 974 is derived from the search corpus 972 .
- the front end can ideally transliterate many common words while the back end transliterates the obscure or rare words that the front end is unable to translate directly.
- the caching behaviors of the front and back end can reflect the unique role of each sub-module during transliteration.
- the front end can cache the top 500 transliterations in the global dictionary, while the back end caches the top 1000 segmentation maps.
- Caching policies affecting how often caches are refreshed or when cache items are replaced e.g., based on least-recently-used (LRU) or least-frequently-used (LFU) cache algorithms).
- the transliteration provided by the client may be undesirable.
- the user can provide user input indicating that the user would prefer to select a transliteration from other potential transliterations.
- the word can be provided to the transliteration server 920 , and potential transliterations can be received from the transliteration server 920 and presented to the user.
- the system 900 can include an entry-aligned dictionary of transliterations.
- the entry aligned dictionary of transliterations includes, for every source word in the dictionary, a single target word.
- the dictionary can include parts of the global dictionary of transliterations and or the user's dictionary of transliterations. If a particular source word can be mapped to multiple target words, then the entry-aligned dictionary includes an entry for each target word, where each entry includes the same source word repeated in each entry.
- the entry-aligned dictionary is a space-efficient way to record word pairs.
- a consecutive word stream of the same language and encoding will compress (e.g., using convention compression techniques) more effectively than alternating languages and encodings.
- each word in the entry-aligned dictionary has a simple one-to-one relationship and therefore does not require any special structural overhead for recording potential alternatives.
- the entry-aligned dictionary can be provided by the system 900 to the user's client 920 .
- the client 920 can subsequently use the dictionary to transliterate words that appear in the dictionary.
- compression can be achieved by HTTP compression as specified in the HTTP 1.1 protocol standard.
- the system 900 can include an alignment and segmentation module 980 .
- the alignment and segmentation module 980 can analyze the training corpus 974 to derive alignment, segmentation maps, transliteration dictionaries and corpus statistics.
- the analysis of the training corpus is conducted asynchronously from receiving user input or generating potential transliterations for such user input.
- the system 900 can include a search engine.
- the search engine receives a source word as a search query.
- the source word can be transliterated producing, potentially, several transliterated words that can be used to replace or amend the search query.
- Embodiments of the invention and all of the functional operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Embodiments of the invention can be implemented as one or more computer program products, i.e., one or more modules of computer program instructions encoded on a computer-readable medium for execution by, or to control the operation of, data processing apparatus.
- the computer-readable medium can be a machine-readable storage device, a machine-readable storage substrate, a memory device, a composition of matter effecting a machine-readable propagated signal, or a combination of one or more of them.
- data processing apparatus encompasses all apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers.
- the apparatus can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
- a propagated signal is an artificially generated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus.
- a computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.
- a computer program does not necessarily correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code).
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- the processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output.
- the processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer.
- a processor will receive instructions and data from a read-only memory or a random access memory or both.
- the essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio player, a Global Positioning System (GPS) receiver, to name just a few.
- Computer-readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- embodiments of the invention can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- Embodiments of the invention can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the invention, or any combination of one or more such back-end, middleware, or front-end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), e.g., the Internet.
- LAN local area network
- WAN wide area network
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network.
- the relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
Abstract
Methods, systems, and apparatus, including computer program products, for performing transliteration between text in different scripts. In one aspect, a method includes generating a transliteration model based on statistical information derived from parallel text having first text in an input script and corresponding second text in an output script; and using the transliteration model to transliterate input characters in the input script to output characters in the output script. In another aspect, a method includes performing word level transliterations. In another aspect, a method includes using an entry-aligned dictionary of source and target script pairs, in which, whenever a particular source word is mapped to multiple target words, the dictionary includes an entry for each target word including the same source word repeated in each entry. In another aspect, a method includes using phonetic scores of words in different scripts to identify corresponding parallel text.
Description
- This application claims benefit under 35 U.S.C. § 119(e) of U.S. Patent Application No. 60/893,370, filed Mar. 6, 2007, which is incorporated herein by reference.
- This invention relates to automatic transliteration of words from one writing system to another writing system.
- Electronic documents are typically written in many different languages. Each language is normally expressed in a particular writing system (i.e., a script), which is usually characterized by a particular alphabet. For example, the English language is expressed using the Latin alphabet while the Hindi language is normally expressed using the Devanāgarī alphabet. The scripts used by some languages include a particular alphabet that has been extended to include additional marks or characters. For example, the French language is written using a script that includes the basic Latin alphabet (i.e., the 26 unaccented characters from A to Z, upper and lower case) and also includes diacritics (i.e., accented characters) and ligatures (e.g.,
- Unfortunately, the ability and ease of producing characters of any particular alphabet varies greatly from one input device to another. For example, many input devices, such as keyboards or mobile devices, are configured to generate characters of the basic Latin alphabet. These input devices are quite frequently used by users who want to produce characters and words in non-Latin based scripts (e.g., Indic, Russian, Hebrew, Chinese or Japanese).
- A user may not be able to use these input devices to conveniently produce the letters of the script that they prefer. Instead, the user will often use the input device to provide a character or character sequence that is a close substitute. For example, a user may provide AE in lieu of
- The conventional approach for transliteration is to use rules, which specify that one or two particular characters in one script can be mapped to one or two particular characters in another script. These rules are typically provided by a language expert. This approach depends heavily on the expertise of the language expert or on cultural conventions.
- In some regions of the world no standardized transliteration rule systems exist, and even if they do exist can be difficult to use. For example, to phonetically spell an Indic language word in Latin script, some transliteration systems use mixed-case Latin text to write a word unambiguously. Such systems are not intuitive to the user.
- This specification discloses various embodiments of technologies for machine-assisted transliteration. Embodiments feature methods, systems, apparatus, including computer program product apparatus. Each of these will be described in this summary be reference to the methods, for which there are corresponding systems and apparatus.
- In general, one aspect of the subject matter described in this specification can be embodied in a method that includes receiving from a user an input of a sequence of multiple input characters entered in an input script. The sequence is terminated by entry of a word-break character where the word-break character is not part of the sequence. A transliteration model is used, after entry of the word-break character, to determine an output word in an output script from the sequence of multiple input characters. Other embodiments of this aspect include corresponding systems, apparatus, and computer program products.
- These and other embodiments can optionally include one or more of the following features. The transliteration model can include a plurality of segments, each segment mapping one or more characters of the input script to one or more characters of the output script. Each segment in the plurality of segments can correspond to a word pair in a corpus of word pairs, where each segment can have a score based on a frequency of occurrence of the word pair in the corpus of word pairs. Using the transliteration model can include generating potential transliterations from the segments, each potential transliteration being derived from a combination of one or more segments; and selecting the transliteration to use to determine the output word based on the scores of the segments in each of the potential transliterations. Potential transliterations that exhibit letter and segment patterns that are statistically unlikely in reference to statistics collected from the corpus of word pairs can be pruned. The transliteration model can include a dictionary having entries in the input script and, for each entry, a corresponding word in the output script. The word-break character can be a space character or an end-of-sentence character. The sequence of multiple input characters in a user interface can be replaced with the output word in the output script. User input generated from an input device configured to generate characters in the input script is received.
- In general, another aspect of the subject matter described in this specification can be embodied in a method that includes deriving multiple word pairs from multiple electronic documents that contain parallel text. The parallel text including text in a first script corresponding to text in a different, second script. A similarity score between the words in each word pair is determined based on a phonetic metric value of each word in the word pair. Word pairs are used that have a similarity score satisfying a threshold criterion for automatic transliteration. Other embodiments of this aspect include corresponding systems, apparatus, and computer program products.
- These and other embodiments can optionally include one or more of the following features. Each phonetic metric value can be a soundex value. Deriving word pairs from multiple electronic documents can include aligning text within each document to identify text that is parallel; and deriving word pairs based on word alignments between parallel text. Deriving word pairs from multiple electronic documents can include using phonetic metric scoring and matching to align corresponding word pairs in unstructured text. The phonetic metric scoring can be a soundex scoring.
- In general, another aspect of the subject matter described in this specification can be embodied in a method that includes receiving a corpus of word pairs. Each word pair in the corpus includes a source word and a target word. Each source word is specified in a source script and each target word is a transliteration of the corresponding source word in a different, target script. Relevant word pairs from the corpus are selected. Selection includes excluding trivial words in the corpus, where trivial words comprising one letter words and numerical characters, and selecting the word pairs based on how frequently the source words of the word pairs occur in the corpus. The relevant word pairs are ranked for use in automatic transliteration. Other embodiments of this aspect include corresponding systems, apparatus, and computer program products.
- These and other embodiments can optionally include one or more of the following features. Trivial words can include acronyms. The corpus of word pairs can include user-generated word pairs. Multiple possible transliterations for a source word can be provided to a user. A selection of a first transliteration from among the multiple transliterations can be received from the user. A word pair comprising the source word and the first transliteration are added to the corpus of word pairs. The frequencies of source words can be measured based on a number of documents in which the source words occur. Selecting relevant word pairs can include selecting additional word pairs from the corpus based on a randomized statistically biased selection. Selecting relevant word pairs can include filtering from the selected word pairs based on the respective sources of the word pairs.
- In general, another aspect of the subject matter described in this specification can be embodied in a method that includes generating a training model from ranked word pairs. Each word pair in the ranked word pairs includes a source word and a target word. Each source word is specified in a source script and each target word is a transliteration of the corresponding source word in a different, target script. Training model includes alignments between the letters of each of a plurality of source words and the letters of the corresponding target word. Generating the training model includes generating alignments from each of multiple word pairs including: for each word pair, matching the letters from the source word with the letters of the target word of the word pair. The letters are matched based on a statistical likelihood that one or more letters in the source word co-occur with one or more letters in the target word. Other embodiments of this aspect include corresponding systems, apparatus, and computer program products.
- These and other embodiments can optionally include one or more of the following features. The statistical likelihood can be measured by Dice coefficients. The letter-to-letter matches can include a k-to-n alignment, where k and n are each integers greater than 2. Some characters in the target script can be ignored or skipped in determining the alignment of letters. Pre-determined consonant maps can be used to map specific letters from source words to target words.
- In general, another aspect of the subject matter described in this specification can be embodied in a method that includes clustering users into groups based on usage patterns of the users in selecting or correction transliterations. A transliteration of a word for a first user in a first group is automatically corrected based on corrections made by other users in the first group. Other embodiments of this aspect include corresponding systems, apparatus, and computer program products.
- In general, another aspect of the subject matter described in this specification can be embodied in a method that includes clustering users into groups by identifying geographic locations of the users. A transliteration of a word for a first user in a first group is automatically corrected based on corrections made by other users in the first group. Other embodiments of this aspect include corresponding systems, apparatus, and computer program products.
- In general, another aspect of the subject matter described in this specification can be embodied in a method that includes recording word pairs for transliteration. Each word pair has a source word in a source script and one or more target words in a different, target script. The method includes generating an entry-aligned dictionary of transliterations. The dictionary includes, for every source word in the dictionary, a single target word. Whenever a particular source word is mapped to multiple target words, then the entry-aligned dictionary includes an entry for each target word, where each entry includes the same source word repeated in each entry. Other embodiments of this aspect include corresponding systems, apparatus, and computer program products.
- These and other embodiments can optionally include one or more of the following features. The entry-aligned dictionary of transliterations can include parts of a global dictionary of transliterations. The entry-aligned dictionary of transliterations can include a user's dictionary of transliterations.
- In general, another aspect of the subject matter described in this specification can be embodied in a method that includes generating a transliteration model based on statistical information derived from a corpus of parallel text having first text in an input script and corresponding second text in an output script. The transliteration model is used to transliterate a sequence of input characters in the input script to a sequence of output characters in the output script. Other embodiments of this aspect include corresponding systems, apparatus, and computer program products.
- These and other embodiments can optionally include one or more of the following features. Multiple input words can be identified from the sequence of input characters. A first portion of the multiple input words can be transliterated, using the transliteration model, based on one or more of: 1) a second portion of the multiple input words preceding the first portion, or 2) a third portion of the multiple input words following the first portion. Each of the first, second and third portions correspond to a word, a phrase, or a sentence in the multiple input words. A transliteration of the first portion can be selected from a plurality of potential transliterations of the first portion based on a statistical likelihood that a potential transliteration in the plurality of potential transliterations co-occurs in the corpus with a transliteration of the second portion preceding the first portion.
- Particular embodiments of the invention can be implemented to realize one or more of the following advantages. The rules that govern transliteration are automatically learned from a corpus of examples. The rules that govern transliteration are also learned and improved through use and user interaction. Dynamic rule sets enable transliteration to adapt to the dynamic nature of language and the varying expectations of users. Transliteration rules can be automatically customized for each individual user. Groups of users can be identified, based on geographical location or usage patterns, and can be provided with transliterations that are more likely to meet the particular expectations of users in the group. Transliteration rules can be provided to a client, such as a web browser, to provide interactive and timely transliterations. Common transliterations can be cached to further expedite transliteration. Common transliterations can be provided at least in part to a client to efficiently enable interactive transliteration.
- The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the invention will be apparent from the description and drawings, and from the claims.
-
FIG. 1 is a diagram of a user interface for receiving text for transliteration. -
FIG. 2 is a diagram of alignment between characters of a target and source word. -
FIG. 3 is a diagram of segmentations of the aligned words shown inFIG. 2 . -
FIG. 4A is a diagram of segmentations derived from multiple word pairs. -
FIG. 4B is a diagram of partially generated potential transliterations. -
FIG. 5 is a flow diagram for selecting relevant words pairs from a corpus. -
FIG. 6 is a flow diagram for transliterating words. -
FIG. 7 shows an input string from which two potential transliterations are derived. -
FIG. 8 shows a hierarchy of groups and their associated dictionaries -
FIG. 9 is a block diagram of a transliteration system. - Like reference numbers and designations in the various drawings indicate like elements.
- As shown in
FIG. 1 , an exemplarygraphical user interface 100 includes atext box 110 for receiving text-based user input. Thegraphical user interface 100 can be that of a web page rendered by a web browser 120 or, in other implementations, can be a part of a stand alone application. Textual user input (e.g., the text 130) can be received in thetext box 110. The textual user input is provided in a particular input script (e.g., using the Latin alphabet). Generally text is provided by a user using an input device (e.g., a keyboard, a mouse, stylus, or microphone). -
Exemplary user input 130 is shown displayed in the text box, representing text received from a user in a particular input script (e.g., Latin alphabet). The user interface also includes aselection list 140. The selection list includes one ormore transliterations Latin input 130. In general, given a particular string in one script, there could be multiple corresponding transliterations. Transliteration is, in general, an imprecise process that can be dependent on context of both the transliterated string and the expectations of the user. The expectations of a user may be shaped by social norms, personal habits, regional practices or any number of external influences. - The transliterations 145 presented in the
selection list 140 can be presented in an order that reflects the likelihood that the transliteration correctly corresponds to one or more words in theinput string 130. Whenever a user selects any but the first transliteration in the selection list, that selection can be recognized as a correction. For example, thetransliteration 145A is presented first because it is considered the most likely transliteration of theinput string 130. If a user selects anothertransliteration 145B, that selection represents a correction, namely that thesecond transliteration 145B is considered by the user as a more accurate transliteration than thefirst transliteration 145A. User corrections can be recorded to improve the accuracy of subsequent transliterations. A record of user corrections identifies characteristics of the correction including the input word (or source word) as well as the transliterated word (or target word) that was selected by the user. In general, correction records generated by multiple users can also include other statistical information. Statistical information can include how many users made the correction and how frequently the correction occurred both absolutely and relatively to the number of times the transliteration was presented (but not necessarily selected). - In some implementations, a user may manually correct a particular transliteration by adding, removing or replacing characters in a transliterated word. For example, a user may use a letter-level transliteration software or a software keyboard to insert individual letters into a transliterated word. Such manually corrected transliterations are also recognized as corrections and can be recorded as such.
- Note that context information associated with user interactions can be also be recorded and used to improve the accuracy of subsequent transliterations. Context information can include how a user provided a correction (e.g. selection compared to manual correction) and the time the user provided the corrections. The context information can be used to rank corrections and determine their relative relevance and confidence. In general, any context information can be used to dynamically personalize services for users, as described in U.S. patent application Ser. No. 11/324,736, entitled “Automatically Generating and Maintaining an Address Book”, to inventors Lalitesh Katragadda and Bret Steven Taylor, filed on Dec. 29, 2005, Express Mail No. EV542667757US, U.S. patent application Ser. No. 11/323,482, entitled “Automatically Generating and Maintaining a Personal Data Book”, to inventor Lalitesh Katragadda, filed on Dec. 29, 2005, Express Mail No. EV542667788US, U.S. patent application Ser. No. 11/323,134, entitled “Dynamically Autocompleting a Data Entry”, to inventor Lalitesh Katragadda, filed on Dec. 29, 2005, Express Mail No. EV542667791US, and U.S. patent application Ser. No. 11/323,364, entitled “Dynamically Ranking Entries in a Personal Data Book”, to inventor Lalitesh Katragadda, filed on Dec. 29, 2005, Express Mail No. EV542667805US, each of which applications is incorporated by reference herein.
- In some implementations, user input received from the user can be transliterated on a word by word basis. For example, all of a user's text immediately preceding a word-break character (e.g., punctuation, a space, carriage return, end-of-line or end-of-file character) can be transliterated at once as a complete word—even while the user continues to provide additional input. In other implementations, the entire user input provided is transliterated at once (e.g., when the user submits the input or explicitly selects to have user input transliterated on demand). For example, a user can position a cursor over a particular word, and in response, the
selection list 140 of transliterations can be presented. In other implementations, word fragments can be transliterated before the user has provided input that completes the word. - Transliteration can be performed between any two scripts where the letters of one script can be expressed using a combination of letters in another script. In the remainder of this specification, the Latin and an Indic alphabet will be used to illustrate concepts of automatic machine-assisted transliteration. In particular, the following specification assumes that source-words, specified in Latin characters, are being transliterated to target-words, specified in Indic characters. Note, however, that the methods and processes described below can apply, in general, between any two differing scripts where transliteration is applicable.
- As shown in
FIG. 5 , aprocess 500 for selecting relevant word pairs from a training corpus of word pairs (e.g., parallel text) for use with automatic transliteration learning algorithms. Each training pair has a word-set, a source-word and one or more target-words. The following description assumes a single target-word. The source-word is specified in the source script and the target-word is a transliteration of the source-word. The target-word is in the target script. Word pairs in the corpus can be derived from a variety of sources including existing electronic documents and recorded interaction with individual users (e.g., transliteration corrections). - In some implementations, word pairs are automatically derived from electronic documents, such as documents that include parallel text (e.g., text in one script corresponding to a transliteration of text in another script). For example, publicly accessible web pages, which contain parallel text, can include language instruction material and transliteration guidance (e.g., governmental, corporate and academic literature). Suitable documents can be identified based on whether the document includes two different scripts. Well-known text and word alignment techniques can be used to align text within the document and determine whether the text is parallel (e.g., whether the text in one script is likely the translation of text in the other script). Word pairs can be derived based on word alignments between parallel text. Word pairs can be verified by comparing each word's soundex value (or other phonetic metric). In some implementations, scoring can be used to align and match corresponding word pairs in unstructured text. For example, the soundex score of words are used to determine a similarity score for each word in a potential word pair. A potential word pair whose similarly score exceeds a particular criterion threshold can be identified and recorded. Using soundex scoring can help prevent erroneous word pairs (e.g., incorrectly transliterated words) from being subsequently used during automatic transliteration.
- The corpus of word pairs can include user generated-word pairs. A user generated word pairs is derived when a user provides or selects one or more transliterations for a particular source-word specified in the input text. For example, a user selecting one of several possible transliterations for a particular input word (e.g., as described in reference to
FIG. 1 ) generates a word pair between the input word and the selected transliteration. User generated word pairs can also be provided by an expert user. - Note that in some language groups, for example Indic languages, it is possible to transliterate the words of one Indic script to the words of another Indic script. These transliterations can often be derived using a small set of deterministically defined transliteration mappings. These mappings can be used to generate multiple corpora in each script which can be transliterated using the mappings. These corpora can subsequently be used to produce word pairs between a source script and a target script. For example, the corpus of each Indic script can be made larger by using the word-pairs of one corpus to generate word-pairs in another corpus, thus making all corpora larger, and ideally more expressive, than would be otherwise possible.
- The
process 500 includes omitting or ignoring trivial words in the corpus (step 510). Trivial words are words from which meaningful transliteration information cannot be acquired. Trivial words include one letter words and numerical characters. Acronyms can also be ignored. From the remaining word pairs in the corpus, several word pairs can be selected based on how frequently the source-word occurs in the corpus (step 520). In some implementations, selection is based on how often the word appears anywhere in the corpus (e.g., all instances in all documents in the corpus). In other implementations, selection is based on the number of unique documents in which the word occurs (e.g., multiple instances of the same word in a particular document count only as one occurrence). For example, the top 90% of all non-unique words can be selected. Using this method, the number of selected words may be significantly less than the total number of distinct words that occur in the corpus. For example, some estimate that in English fewer than 5,000 unique words are used in 80% of all written texts. - The
process 500 includes selecting additional word pairs from the corpus based on any sampling method such as a randomized statistically biased selection (e.g. the higher the frequency, higher the probability of selection) (step 530). For example, an additional 5% of words can be selected that are both non-trivial and not selected (e.g., not among the top 90%). Thus, if 10,000 non-trivial words occur in less than 10% of all documents, then an additional 500 words are randomly selected from the 10,000 words. - The
process 500 includes filtering from the selected word pairs based on the source of a word pair (step 540). The sources from which each word pair originates can be grouped into entities. Words that originate from users can be grouped according to the particular user. Words that originate from web pages or documents can be grouped according to an associated characteristic of the document (e.g., domain name, article, author, directory, or database). Words that have been used by only a few entities (e.g., three or less) can be filtered (e.g., ignored or omitted). Alternatively, a squashing function can be used to score each word based on how often the word occurs both across different entities and within a particular entity, and words below a pre-defined score can be filtered. These filtered words are removed because their narrow usage suggests obscure, specialized or errant use. Each of the word pairs can be weighted based on their source (e.g., particular user or location). For example, the word pairs provided by a language expert or derived from a user correction (e.g., as described in reference toFIG. 1 ) can be given more weight compared to the same word pair derived from another source. - The
process 500 includes filtering from the selected word pairs based on the frequency of a word pair in the corpus (step 550) (e.g., based on how often the target-word or source-word appears in the corpus). In some implementations, a threshold can be used to filter all word pairs that include a word that infrequently occurs in the corpus. A word pair can be filtered if it the target-word occurs proportionally very rarely compared to other target-words that all share the same source-word. A word pair can be filtered if the target-word occurs proportionally rarely compared to all other words in the target script (e.g., words that occur less than 2% of the time, compared to all other words in the same script). - In some implementations, all of the above filtering techniques can be used as an aggregate of signals. A single filtering function can be used to score a word pair based on its signals, whereby any word pair with sufficiently low score is subsequently omitted.
- The remaining selected word pairs are ranked (step 560). The rank of a word pair is a function of the number of times the word pair occurs in the corpus, a confidence signal and the weight of the word pair. The confidence signal is based on the number of unique word-pair sources (e.g., distinct users and document sources) which have used the transliteration represented by the word pair. In some implementations, word pairs can be ranked according to a squashing function (e.g., using
values 1, 10->2, 100->10). The number of unique word-pair sources can be squashed to some small, maximal value for frequently occurring word-pairs, while the value of less frequently occurring words are boosted relatively. The squashing function is a non-linear function used to normalize linear predictions into probabilities (e.g., that range between 0 and 1). - Alignment
- A training model is generated using the ranked word pairs. Generally, the training model includes alignments between the letters of a source word and the letters of the source word's corresponding target word. An alignment between source letters and target letters ideally identify letter transliterations (e.g., the source letters are a transliteration of the target letters and vice-versa). Given a particular word pair, the letters from the source word are matched with the letters of the target word. Letters are matched based on the statistical likelihood that one or more letters in the source word co-occur with one or more letters in the target word. In some implementations, co-occurrence probabilities are measured by Dice coefficients. However normal alignment techniques are relatively unconstrained and purely Dice-based alignment can be error-prone. In general, letter-level alignment is a many-to-many mapping of characters, however in practice, alignments are typically one-to-one, two-to-one, one-to-two, one-to-three, or three-to-one mappings.
- In determining the alignment of letters, some characters in the target script can be ignored or skipped. For example, in some Indic scripts, a class of characters known as viramas can be skipped during alignment. Even if viramas are skipped for alignment, they may still be considered during subsequent analysis (e.g., distance scoring and segmentation, as described below).
- Pre-determined consonant maps can be used to map specific characters from the source word to characters of the target word. Generally, consonants produce well-defined sounds. The consonants of one script map to one or a small number of consonants letters in another script. Consonant maps can be pre-determined by an expert user, or can be learned in a separate consonant mapping process. Consonant maps provide additional constraints during alignment requiring a specific consonants in the source word to map to one of a specific consonants in the corresponding word. Using consonant maps reduces the number of potential alignments, reducing the search space, increasing efficiency and reducing the likelihood of alignment error.
- When the characters of a word in both the source and target scripts are pronounced in the order written (e.g. left to right or right to left, where the source and destination languages could be in opposing orders), a monotonic constraint can be used to constrain alignment mapping. The following description assumes that both source and destination are in the same direction. The monotonic constraint requires that the beginning and end of a source and corresponding target word align. Moreover, the character preceding an aligned sub-part of the source word must align with the preceding character of the corresponding sub-part of the target word. The monotonic constraint makes alignment mapping a smaller, linear, chained-alignment problem.
- Using these constraints where the alignment score is a number, the alignment problem can be treated as a discrete or non-linear, constrained optimization problem, and techniques like BFGS (Broyden-Fletcher-Goldfarb-Shanno method), simulated annealing, SPSA (simultaneous perturbation stochastic approximation) can be applied to finding an optimal or near optimal solution.
- In some implementation, a monotonic constraint is used as a potential field (energy field) when aligning word-pairs using a constraint-based optimization. Under the monotonic constraint a measure of distance between the first (and last) character of one word and the first (and last) character of the corresponding word is zero. The distance between corresponding consonants (e.g., based on the consonant maps) is also zero. The distances of all other characters are measured with respect to these zero points. The probability of a character in one word mapping to a character in the corresponding word is highest if their respective distances from corresponding zero points are the same. The probability decreases as the difference in distances increase. Using the monotonic constraint to set distance values makes the alignment mapping a smaller optimization problem. Here silent characters like viramas can be used to modify the distance functions.
- In some implementations, additional constraint rules can be used to simplify the alignment mapping. The inherent language-based characteristics of a script can be used to derive special constraints. In Indic scripts, for example, matras are characters that represent a phonetic modifier to a consonant. Special rules that map matras to particular character can be used to improve alignment. Matras in an Indic-script word can be represented in a corresponding Latin-script transliteration as a vowel or as no character at all, depending on preceding characters. These conventions can be encoded as constraint rules. One such rule restricts which characters occur after a Latin character representing a corresponding Indic character. For example, the matra ‘
-
FIG. 2 is anillustration 200 of an alignment between characters in asource word 210 and atarget word 240. Thesource word 210 is specified in Latin script while thetarget word 240 is specified in Devanāgarī script. Thetarget word 240 includes the tencharacters 230A-230K. Note that the rendering of thetarget word 240 can appear to betray the actual order of the word's constituent characters. The tenindividual characters 230A-230K are shown in their actual order (e.g., thecharacter 230A is in a memory location successive to the memory location ofcharacter 230B). Some characters between the source and target words align one-to-one, such as thealignment 220 between the first ‘n’ in thesource word 210 andcharacter 230A. Other characters align one-to-two, such as thealignment 223 between the last ‘n’ in thesource word 210 and thecharacters alignment 227 between the two last characters of thesource word 210 andcharacter 230K. In general, other alignment combinations are also possible. - Segmentation
- One or more letter alignments between a word pair can be grouped together producing a segmentation consisting of one or more contiguous alignments. The segmentation of a word pair effectively provides a mapping of a segment (e.g., one or more letters) from a source word to a segment in a target word. Each segmentation represents a transliteration that can potentially be applied to another source-word.
- In general, a word pair may be used to generate multiple varying length overlapping segments; however, each segment obeys intra-word alignment boundaries. In some implementations, alignments between consonants are used to constrain segmentation. Consonant alignments are used as a boundary to limit segmentation, which effectively prevents coalescing letters on both sides of a consonant into a single segment.
- Each segment can be associated with an occurrence or frequency property whose value is based on how often the segment (e.g., a particular sequence of letters) occurs within the corpus. This property can be expressed as a segment prior probability derived from the number of times the segment occurs in the corpus relative to all other segments. Each segmentation can also be associated with an occurrence or frequency property whose value is based on the number of times the segmentation can be derived from word pairs in the corpus. This property can be expressed as a segmentation prior probability derived from the number of segmentations relative to all other segmentations.
- Each segment and segmentation can be associated with information about its conditional probability. The conditional probability of a segment indicates the probability that a particular series of target letters is generated given a particular series of source letters.
- Statistical similarity (co-occurrence) metrics, such as Dice's coefficient, which measures the correlation between discrete events, can be used to measure the likelihood of a particular segment mapping to one or more corresponding segments. Each potential segmentation can be scored based on the frequency of occurrences in the corpus and a confidence signal (e.g., how many times the segmentation is used by users). Segmentations whose scores are not enough to exceed a preset threshold can be removed, omitted or ignored.
- Segmentation rules can be used to aggregate segments. For example, in Indic scripts, a segmentation rule can specify that viramas, which are particular characters that occur before or after consonants, can be collapsed with (e.g., added to) their associated consonant into the same segment. Accents (e.g., a matra) that follow a consonant can be collapsed with the consonant. Accents and viramas can be recursively collapsed to generate larger segments.
- Individual segments can be associated with information identifying whether the segment is a prefix or suffix depending on whether the segment occurs most frequently at the beginning or end of the word. Common prefixes and suffixes are can be identified from specific target-script letter sequences that frequently occur at the beginning or end of a word. A corresponding suffix or prefix in a source-script can be identified where the occurrence of a particular source-script letter sequence correlates with a corresponding occurrence of the target-script suffix or prefix. Prefixes and suffixes are automatically detected based on frequency of occurrence in the corpus and conditional probability correlation.
- A particular segmentation can be checked by computing a soundex value for the source segment and its corresponding target segment. Segmentations whose soundex values are determined to be significantly different can be removed, omitted or ignored. In addition to computing soundex values, other phonetic comparisons (e.g., pre-defined consonant maps, matra-vowel maps and syllable maps) can be used to verify segment mappings.
- In addition to alignment and segmentation, statistical information about the corpus can be collected. This information can include the probability that particular pairs, triples, four-tuples, and n-tuples of characters follow each other consecutively. Additionally, statistical information can be collected about consecutive character-class pairs, and prefix and suffix segments. Character classes include consonants, vowels, consonant clusters (e.g., consecutive consonants), vowel clusters (e.g., consecutive vowels e.g. occurring for matras), accented characters, or viramas. For example, statistics identifying the probability that a particular consonant cluster follows another consonant cluster or that a particular accented character precedes a particular vowel can be collected. Statistical information can also be collected which describes the likelihood that a character or character class has particular characteristics with respect to the word in which the character is found (e.g., whether a character is usually accented, appears at the beginning or end of the word, or is followed or preceded by a virama). This statistical information can be generated for all corpora and can be used to determine whether a potential automatic transliteration is likely valid or not. This statistical information can also be verified to check validity and usefulness of particular segments. Automatic transliteration is described in further detail in reference to
FIG. 6 . - Not all possible consonant and vowel combinations or all possible consonant clusters may be encountered in the training corpus. Information about additional combinations or consonant clusters can be generated using one and two letter generation rules, which can include language specific information (e.g., accents and viramas). These generation rules can be provided by expert users.
- A global dictionary of common transliteration mappings can be recorded. That is, a source word that occurs in the corpus with sufficient frequency can be recorded in the global dictionary with the source word's corresponding target words. This global dictionary serves as a transliteration cache from which the transliteration of common words can be quickly and easily retrieved. A global dictionary can be generated for each script or corpus.
-
FIG. 3 is anillustration 300 of segmentations of the aligned words shown inFIG. 2 . Thesegmentation 320 includes the first two alignments and represents a mapping of ‘ni’ source-word characters to thecharacters target word 240. Likewise, thesegmentation 330 includes the next three alignments. Thesegmentation 340 includes the last two alignments between the source and target word. Thesegmentation 350 includes the last five alignments and overlaps with the segmentation 340 (e.g., the last two alignments are in both segmentations). Notice that each segmentation obeys the character alignments between the words (e.g., no segmentation crosses an alignment boundary). Although, only four alignments are shown, in general, the word pair can be used to generate as many segmentations as possible (e.g., every combination of contiguous alignments). - Transliteration
- As shown in
FIG. 6 , aprocess 600 for transliterating a source word includes receiving a source word from a user (step 610). In some implementations, the particular user can be identified, separate from all other users from which source words may be received. For example, a user accessing transliteration through the use of a web browser can be identified through login authentication, session keys, cookies, IP addresses or a combination thereof. In such implementations, an identified user has a profile which can include a user transliteration dictionary. A user transliteration dictionary identifies particular source words and respective target words that the user has identified. In particular, the user's transliteration dictionary can include mappings that have been explicitly or implicitly identified by the user (e.g., when the user makes a correction). A user's transliteration dictionary may differ from the global dictionary. A user transliteration dictionary is described in further detail below in reference toFIG. 8 . - If the source word is found in the user's transliteration dictionary, the corresponding target word can be provided to the user (step 620). Otherwise, the source word is used to search the global dictionary of common transliteration mappings (step 630). If the source word is found in the global dictionary, the corresponding target word can be provided to the user. The global dictionary can include region specific or group specific dictionaries that the user may belong to. In one implementation, the more specific the group, the higher the priority of that dictionary for the user. The most specific group being the user's personal dictionary, as described in reference to
FIG. 8 . - If the source word is not found in either the global or user dictionary, the source word can be transliterated as a sequence of segments. For a given source word, a list of potential transliterations are generated (step 640). The generation of potential transliterations can begin by matching either prefix segments or suffix segments, or by matching both prefix and suffix segments. The portion of the word that remains (e.g., end, beginning or middle, respectively) can be generated by applying segment maps using a greedy approach, simulated annealing or other stochastic search method. Alternatively, the entire word can be transliterated by the application of segment maps in no particular order using a global optimization approach.
- For example, a source word can be transliterated by first identifying all applicable prefix and suffix segments based on the letters in the source word. All of these segments, in combination constitute a list of potential partial transliterations. Each partial transliteration includes only prefix and suffix segments. A partial transliteration will also include some unmapped letters of the source word, namely those letters between the end of the prefix and the beginning of the suffix. The partial transliteration can be “filled in” by applying additional segment maps. Applying the segment maps can produce additional transliterations if more than one segment mapping applies to a particular combination of characters in the source word.
- For example,
FIG. 4A is anillustration 400A of segmentations 410-450 derived from multiple word pairs. The segmentations 410-440 are exemplary segmentations that can be derived from the word pair illustrated inFIG. 3 . Thesegmentation 450 is a segmentation that is derived from another word pair. Each segmentation represents a mapping of word segments in the source script (e.g., Latin) to word segments in the target script (e.g., an Indic script). As described above, some of these segmentations can be associated with information identifying whether the segmentation is a prefix or a suffix. The segmentations 410-430, each derived from the beginning of the word pair inFIG. 3 are prefix segmentations. Thesegmentation 440 is derived from the end of the same word pair and can be designated as a suffix segmentation. Thesegmentation 450 is not derived from the word pair shown inFIG. 3 , this segmentation is assumed to be derived from another word pair where ‘ya’ maps to ‘FIG. 4A , the segmentations derived from all word pairs in the corpus are typically used to transliterate a word. -
FIG. 4B is anillustration 400B of generatingpotential transliterations 470A-D for aninput string 460. Eachpotential transliteration 470A-D is generated based on the segmentations shown inFIG. 4A . For example, thepotential transliteration 470A is generated from thesegmentation 410. Thepotential transliteration 470B is generated from theprefix segmentation 420 and thesuffix segmentation 440. Every character of theinput string 460 is used to generate characters in thepotential transliterations 470A-B. In contrast, thepotential transliterations 470C-D do not map every character from the input. Instead, each of these transliterations are generated based on thesuffix segmentation 440 and twodistinct prefix segmentations prefix segmentation transliterations 470A-D are generated from all combinations of prefix and suffix transliterations illustrated inFIG. 4A . The blank 490 represents the characters in the target word that are unknown. The unmapped characters of thepotential transliterations 470C-D can be used to generate missing characters to fill in the blank 490. Eachpotential transliteration 470A-D is subject to pruning and scoring to identify a likely transliteration for theinput string 460. - Referring again to
FIG. 6 , as potential transliterations are generated, the statistical information collected from the corpus is used to prune unviable transliterations (step 650). Unviable transliterations are potential transliterations that exhibit letter and segment patterns that are not supported by the statistical information collected from the corpus. For example, if, according to corpus statistics, there are no words that begin with an accent, then all potential transliterations with an initial accent can be pruned. All aspects of the statistical information collected from the corpus can be used to prune potential transliterations (e.g., prefix/suffixes, segment combinations, character pair and character-class pair co-occurrences, and other letter characteristics). In some implementations, a threshold can be specified to further increase the pruning rate. The threshold can specify that the statistical information from the corpus must exceed a particular value before a transliteration is considered viable. Therefore, characteristics of the potential transliteration (e.g., character-class combinations, suffixes, prefixes and so on) must not only have occurred in the corpus but must constitute a certain proportion thereof. For example, a particular segment may occur as a prefix in only 1% of all words in which the segment occurs. A potential transliteration that has the particular segment occurring as a prefix can be pruned if 1% does not exceed the threshold value. - In some implementations, special characters can be inserted between segments that are otherwise not viable. For example, a special character can be inserted between a segment that ends with a consonant and the next segment that begins with a consonant. The special character can be later mapped to a vowel and is added to a potential transliteration when doing so would increase the score of the potential transliteration significantly.
- All potential transliterations are scored based on the conditional and prior probability and the length of each segment used to generate the transliteration (step 660). In general, long segments are scored more favorably than short segments because a longer segment typically represents a more specific and, ideally, a more accurate transliteration. In some implementations, the transliteration can be scored based on the prior and conditional probability of the entire word (e.g., rather than an individual segment). Transliterations can also be scored based on co-occurrence probabilities of each segment pair in the potential transliteration. The contribution of each segment to the score of the transliteration can be additive, multiplicative or some other monotonically increasing function.
- Other words in the input string can be used to contextually score potential transliterations. In some implementations, if the score of several transliterations are all below a particular threshold value or alternatively, if the score of the transliterations are all near in value, then the score of each transliteration can be re-evaluated based on other words in the input string. In particular, the preceding or following words from the input string can be used. In some implementations, multi-word (e.g., phrase or sentence) matching can be used with preceding or following characters in the input string. The prior probability of word co-occurrences (e.g., according to the corpus) can be used to augment the score of each transliteration, ideally identifying a likely transliteration from among several.
- For example,
FIG. 7 shows aninput string 710 from which two equally viable transliterations are derived 760 and 770. Theinput string 710 includes two words, thefirst word 712 corresponds to thetransliteration 740. Thesecond word 714 has an ambiguous transliteration as it can be transliterated into either of thewords transliterations string 710. The complete combined transliteration of thewhole input string 710 can either be 760 or 770. Therelative occurrences 780 of each whole transliteration can be considered to determine which of the combined transliterations is likely more accurate. If thestring 760 occurs more frequently than 770 in the corpus, then the score of thetransliteration 720 can be improved relative to the transliteration of 730. In some implementations, rather than consider the relative occurrence of whole transliterations, only n-word portions of the transliteration, which includes the ambiguous transliteration, are considered. For example, in a four word transliteration that included a word transliterated from theword 714, the potential transliterations for 714 are grouped in a 2-word portion including a transliteration for a single preceding or succeeding word. The relative occurrence in the corpus of the n-word portion is used to score each potential transliteration of the source-word. In general, the portion of theinput string 710 being transliterated and the preceding and following portions of the input string used to affect the transliteration can each correspond to a word, multiple words (e.g., a phrase) or sentences. - Referring again to
FIG. 6 , each potential, viable transliteration is ordered or ranked based on the respective score of the transliteration (step 670). The transliterations are presented in order to the user (step 680). If the user corrects the transliteration (e.g. selects any but the first transliteration in the ordered list), then the corrected word is added to the user's dictionary. All transliterations used by the user (e.g., whether corrected or not) can also be added to the training corpus, thus altering corpus and segmentation statistics. Transliterations of the same source word by a particular user can be added to a user's inferred dictionary. For example, if the user accepts the first word, the word is added to the inferred dictionary and can be used to boost the score of subsequent potential transliterations. In some implementations, users can be clustered into groups of users together based on their usage patterns. A group of users who make one or more particular transliteration corrections can be recognized by statistical correlation—or by applying any collaborative filtering method. For example, a culturally similar group of users can be identified based on their input, transliteration choices, and other context information such as their geographical location (e.g., based on the user's IP address or information in the user's profile), language preference, age, place of birth and so on. - The users in a group share at least one particular commonality. User groups can be used to refine the transliterations provided to users of the group and to use for other services that may require personalization. The transliteration of words for these recognized users can automatically be corrected based on corrections made by other users in the group. In some implementations, user groups can also be identified based on words that are most frequently transliterated by the user. A particular group of users may be more likely to use and transliterate particular words than another group of users. Transliteration conventions often differ from one geographic region to another, so the usage pattern of users from a particular geographical region can be used to adapt transliterations for those users.
- In general, user groups can be associated with particular group specific transliteration information. For example, a particular group is associated with unique segment mappings, and group-specific transliteration statistics such as segmentation frequency, word pair frequency and prior probability information. This transliteration information can be based on transliteration selection and corrections by users in the group. The transliteration information can be included in a group dictionary which can include word pairs that are frequently used by users within the group. The global dictionary, one or more group dictionaries and a user's own personalized dictionary represent a prioritized hierarchy of dictionaries that can affect a particular user's transliterations.
-
FIG. 8 shows ahierarchy 800 of groups and their associated dictionaries. The transliteration information applicable to all users (e.g., the global dictionary and corpus-wide transliteration statistics) is not shown but assumed to exist as the root of such a hierarchy. Afirst group 810 is a group derived based on a particular geographical location of users. Thefirst group 810 has an associated groups-specific transliteration information 815 identifying particular transliterations often used by users of thegroup 810. The group may be one of other groups that respectively correspond to other particular geographical locations. Thefirst group 810 includes at least two other sub-groups. For example, thegroup 820 may correspond to users in the first group that correspond to users having a particular language preference. Thegroup 820 is also associated with group-specific transliteration information 825. In general, a user may belong to many groups at many varying levels in a hierarchy of groups. Oneparticular user 840 in thegroup 820 is also associated with apersonal transliteration information 845, such as the user's personalized transliteration dictionary or the user's inferred dictionary. - When the
user 840 provides user input for transliteration the transliteration information associated with the user, and the user's groups, can be consulted in order of personalization. For example, the entries of a user'spersonalized transliteration information 845 can be used first, thetransliteration information 825 ofsub-group 820 used second, thetransliteration information 815 ofgroup 810 used third and the global transliteration information used last. In some implementations, the information associated with all relevant transliteration information applicable to a user is used simultaneously. The information of each group can be weighted, (e.g., during potential transliteration generation and scoring) according to relevance of the group with respect to the user. -
FIG. 9 is a block diagram of atransliteration system 900 for providing transliterations responsive to user requests includes atransliteration module 910. In some implementations, user input is received by thetransliteration module 910, upon which transliteration is performed. Thetransliteration module 910 provides a transliteration of the user input back to the user. In some implementations, thetransliteration module 910 is a server that communicates with aclient 920 such as a web browser, which is running on a device (e.g., acomputer 964 or portable device 962) connected to the server using a wired orwireless network 958. Theclient 920 provides user input to thetransliteration module 910 using any convenient data submission techniques. For example, thesystem 900 can provide auser interface 952 to theclient 920 in accordance with the hyper-text transfer protocol (HTTP). - In some implementations, the
client 920 can include client-side scripting capabilities that allow instructions to be received from thetransliteration module 910 that are executed by theclient 920. These instructions can be specified in client-side scripting languages such as JavaScript, VBScript, Flash, and others. In some implementations, thetransliteration module 910 can provide data and client-side instructions to enable the client to generate complete or partial transliterations within theclient 920. For example, thetransliteration module 910, can provide the client with a client-side copy of the user's transliteration dictionary 923 (or common words from the global transliteration dictionary). The client will also receive instructions that enable the client to automatically transliterate words that appear in the client-side dictionary without further interaction with thetransliteration module 910. - In another example,
several segment maps 927 can be provided to the client along with instructions such that the client can generate viable transliterations for some words through application of the segment maps. The segment maps sent to the user can be identified based on a confidence score of the map and the frequency with which the map is used to produce a successful transliteration. Thus, the segments that are both likely to be correct and often used can be provided to the client for client-side transliteration. If a transliteration cannot be computed on the client (e.g., the word is not in the user's dictionary, or the provided rules are insufficient) the text can be provided to thetransliteration module 910. - The particular maps and dictionary entries that are provided to the client compared to the maps and dictionaries that reside only on the server can depend on a caching strategy. In particular situations the caching strategy can require that all transliteration occur on the server-side without client-side computation (e.g., unsupported web-browsers, mobile devices, slow devices, memory-constrained devices). In other situations the caching strategy can require that maps and dictionary entries are provided to the client for client-side computation. The selected mapping strategy can depend on the words being transliterated, the capabilities of the client, the capacity of the network connection or a combination thereof.
- In some implementations,
transliteration module 910 includes two sub-modules, aback end 930 and afront end 940. Each sub-module can be distinguished by its role in transliteration. The front end can include theuser dictionary 914 and theglobal dictionary 918. The front end, on receipt of a particular input string, can attempt to transliterate the string based on word look-ups each dictionary. The back end can include a transliteration processor for transliterating a word algorithmically based onsegmentation maps 985 and the training corpus of word pairs 974 (e.g., using corpus-related statistics such as prior probabilities). In some implementations, the training corpus of word pairs 974 is derived from the search corpus 972. The front end can ideally transliterate many common words while the back end transliterates the obscure or rare words that the front end is unable to translate directly. - The caching behaviors of the front and back end can reflect the unique role of each sub-module during transliteration. For example, the front end can cache the top 500 transliterations in the global dictionary, while the back end caches the top 1000 segmentation maps. Caching policies affecting how often caches are refreshed or when cache items are replaced (e.g., based on least-recently-used (LRU) or least-frequently-used (LFU) cache algorithms).
- In some implementations, the transliteration provided by the client may be undesirable. The user can provide user input indicating that the user would prefer to select a transliteration from other potential transliterations. In response, the word can be provided to the
transliteration server 920, and potential transliterations can be received from thetransliteration server 920 and presented to the user. - The
system 900 can include an entry-aligned dictionary of transliterations. The entry aligned dictionary of transliterations includes, for every source word in the dictionary, a single target word. The dictionary can include parts of the global dictionary of transliterations and or the user's dictionary of transliterations. If a particular source word can be mapped to multiple target words, then the entry-aligned dictionary includes an entry for each target word, where each entry includes the same source word repeated in each entry. - The entry-aligned dictionary is a space-efficient way to record word pairs. A consecutive word stream of the same language and encoding will compress (e.g., using convention compression techniques) more effectively than alternating languages and encodings. Moreover, each word in the entry-aligned dictionary has a simple one-to-one relationship and therefore does not require any special structural overhead for recording potential alternatives. In some implementations, for example, the entry-aligned dictionary can be provided by the
system 900 to the user'sclient 920. Theclient 920 can subsequently use the dictionary to transliterate words that appear in the dictionary. In such implementations, where the server is a web server and the client a web browser, compression can be achieved by HTTP compression as specified in the HTTP 1.1 protocol standard. - The
system 900 can include an alignment andsegmentation module 980. The alignment andsegmentation module 980 can analyze the training corpus 974 to derive alignment, segmentation maps, transliteration dictionaries and corpus statistics. In some implementations, the analysis of the training corpus is conducted asynchronously from receiving user input or generating potential transliterations for such user input. - The
system 900 can include a search engine. The search engine receives a source word as a search query. The source word can be transliterated producing, potentially, several transliterated words that can be used to replace or amend the search query. - Embodiments of the invention and all of the functional operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the invention can be implemented as one or more computer program products, i.e., one or more modules of computer program instructions encoded on a computer-readable medium for execution by, or to control the operation of, data processing apparatus. The computer-readable medium can be a machine-readable storage device, a machine-readable storage substrate, a memory device, a composition of matter effecting a machine-readable propagated signal, or a combination of one or more of them. The term “data processing apparatus” encompasses all apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers. The apparatus can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them. A propagated signal is an artificially generated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus.
- A computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A computer program does not necessarily correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio player, a Global Positioning System (GPS) receiver, to name just a few. Computer-readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- To provide for interaction with a user, embodiments of the invention can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- Embodiments of the invention can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the invention, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), e.g., the Internet.
- The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- While this specification contains many specifics, these should not be construed as limitations on the scope of the invention or of what may be claimed, but rather as descriptions of features specific to particular embodiments of the invention. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
- Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
- Thus, particular embodiments of the invention have been described. Other embodiments are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results.
Claims (42)
1. A method comprising:
receiving from a user an input of a sequence of multiple input characters entered in an input script, the sequence being terminated by entry of a word-break character, the word-break character not being part of the sequence; and
using a transliteration model after entry of the word-break character to determine an output word in an output script from the sequence of multiple input characters.
2. The method of claim 1 , wherein the transliteration model comprises:
a plurality of segments, each segment mapping one or more characters of the input script to one or more characters of the output script.
3. The method of claim 2 , wherein each segment in the plurality of segments corresponds to a word pair in a corpus of word pairs, each segment having a score based on a frequency of occurrence of the word pair in the corpus of word pairs.
4. The method of claim 3 , wherein using the transliteration model comprises:
generating potential transliterations from the segments, each potential transliteration being derived from a combination of one or more segments; and
selecting the transliteration to use to determine the output word based on the scores of the segments in each of the potential transliterations.
5. The method of claim 4 , further comprising:
pruning potential transliterations that exhibit letter and segment patterns that are statistically unlikely in reference to statistics collected from the corpus of word pairs.
6. The method of claim 1 , wherein the transliteration model includes:
a dictionary having entries in the input script and, for each entry, a corresponding word in the output script.
7. The method of claim 1 , wherein the word-break character is a space character or an end-of-sentence character.
8. The method of claim 1 , further comprising replacing the sequence of multiple input characters in a user interface with the output word in the output script.
9. The method of claim 1 , further comprising:
receiving input generated from an input device configured to generate characters in the input script.
10-31. (canceled)
32. A method comprising:
generating a transliteration model based on statistical information derived from a corpus of parallel text having first text in an input script and corresponding second text in an output script; and
using the transliteration model to transliterate a sequence of input characters in the input script to a sequence of output characters in the output script.
33. The method of claim 32 , further comprising:
identifying multiple input words from the sequence of input characters;
transliterating, using the transliteration model, a first portion of the multiple input words based on one or more of:
a second portion of the multiple input words preceding the first portion, or
a third portion of the multiple input words following the first portion.
34. The method of claim 33 , wherein the each of the first, second and third portions correspond to a word, a phrase, or a sentence in the multiple input words.
35. The method of claim 33 , further comprising:
selecting a transliteration of the first portion from a plurality of potential transliterations of the first portion based on a statistical likelihood that a potential transliteration in the plurality of potential transliterations co-occurs in the corpus with a transliteration of the second portion preceding the first portion.
36. A computer program product, encoded on a computer-readable medium, operable to cause data processing apparatus to perform operations comprising:
receiving from a user an input of a sequence of multiple input characters entered in an input script, the sequence being terminated by entry of a word-break character, the word-break character not being part of the sequence; and
using a transliteration model after entry of the word-break character to determine an output word in an output script from the sequence of multiple input characters.
37. The program product of claim 36 , wherein the transliteration model comprises:
a plurality of segments, each segment mapping one or more characters of the input script to one or more characters of the output script.
38. The program product of claim 37 , wherein each segment in the plurality of segments corresponds to a word pair in a corpus of word pairs, each segment having a score based on a frequency of occurrence of the word pair in the corpus of word pairs.
39. The program product of claim 38 , wherein using the transliteration model comprises:
generating potential transliterations from the segments, each potential transliteration being derived from a combination of one or more segments; and
selecting the transliteration to use to determine the output word based on the scores of the segments in each of the potential transliterations.
40. The program product of claim 39 , further operable to perform operations comprising:
pruning potential transliterations that exhibit letter and segment patterns that are statistically unlikely in reference to statistics collected from the corpus of word pairs.
41. The program product of claim 36 , wherein the transliteration model includes:
a dictionary having entries in the input script and, for each entry, a corresponding word in the output script.
42. The program product of claim 36 , wherein the word-break character is a space character or an end-of-sentence character.
43. The program product of claim 36 , further comprising replacing the sequence of multiple input characters in a user interface with the output word in the output script.
44. The program product of claim 36 , further operable to perform operations comprising:
receiving input generated from an input device configured to generate characters in the input script.
45-66. (canceled)
67. A computer program product, encoded on a computer-readable medium, operable to cause data processing apparatus to perform operations comprising:
generating a transliteration model based on statistical information derived from a corpus of parallel text having first text in an input script and corresponding second text in an output script; and
using the transliteration model to transliterate a sequence of input characters in the input script to a sequence of output characters in the output script.
68. The program product of claim 67 , further operable to perform operations comprising:
identifying multiple input words from the sequence of input characters;
transliterating, using the transliteration model, a first portion of the multiple input words based on one or more of:
a second portion of the multiple input words preceding the first portion, or
a third portion of the multiple input words following the first portion.
69. The program product of claim 68 , wherein each of the first, second and third portions correspond to a word, a phrase, or a sentence in the multiple input words.
70. The program product of claim 68 , further operable to perform operations comprising:
selecting a transliteration of the first portion from a plurality of potential transliterations of the first portion based on a statistical likelihood that a potential transliteration in the plurality of potential transliterations co-occurs in the corpus with a transliteration of the second portion preceding the first portion.
71. A system comprising:
means for receiving from a user an input of a sequence of multiple input characters entered in an input script, the sequence being terminated by entry of a word-break character, the word-break character not being part of the sequence; and
means for using a transliteration model after entry of the word-break character to determine an output word in an output script from the sequence of multiple input characters.
72. The system of claim 71 , wherein the transliteration model comprises:
a plurality of segments, each segment mapping one or more characters of the input script to one or more characters of the output script.
73. The system of claim 72 , wherein each segment in the plurality of segments corresponds to a word pair in a corpus of word pairs, each segment having a score based on a frequency of occurrence of the word pair in the corpus of word pairs.
74. The system of claim 73 , wherein using the transliteration model comprises:
means for generating potential transliterations from the segments, each potential transliteration being derived from a combination of one or more segments; and
means for selecting the transliteration to use to determine the output word based on the scores of the segments in each of the potential transliterations.
75. The system of claim 74 , further comprising:
means for pruning potential transliterations that exhibit letter and segment patterns that are statistically unlikely in reference to statistics collected from the corpus of word pairs.
76. The system of claim 71 , wherein the transliteration model includes:
a dictionary having entries in the input script and, for each entry, a corresponding word in the output script.
77. The system of claim 71 , wherein the word-break character is a space character or an end-of-sentence character.
78. The system of claim 71 , further comprising means for replacing the sequence of multiple input characters in a user interface with the output word in the output script.
79. The system of claim 71 , further comprising:
means for receiving input generated from an input device configured to generate characters in the input script.
80-101. (canceled)
102. A system comprising:
means for generating a transliteration model based on statistical information derived from a corpus of parallel text having first text in an input script and corresponding second text in an output script; and
means for using the transliteration model to transliterate a sequence of input characters in the input script to a sequence of output characters in the output script.
103. The system of claim 102 , further comprising:
means for identifying multiple input words from the sequence of input characters;
means for transliterating, using the transliteration model, a first portion of the multiple input words based on one or more of:
a second portion of the multiple input words preceding the first portion, or
a third portion of the multiple input words following the first portion.
104. The system of claim 103 , wherein each of the first, second and third portions correspond to a word, a phrase, or a sentence in the multiple input words.
105. The system of claim 103 , further comprising:
means for selecting a transliteration of the first portion from a plurality of potential transliterations of the first portion based on a statistical likelihood that a potential transliteration in the plurality of potential transliterations co-occurs in the corpus with a transliteration of the second portion preceding the first portion.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/043,854 US20080221866A1 (en) | 2007-03-06 | 2008-03-06 | Machine Learning For Transliteration |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US89337007P | 2007-03-06 | 2007-03-06 | |
US12/043,854 US20080221866A1 (en) | 2007-03-06 | 2008-03-06 | Machine Learning For Transliteration |
Publications (1)
Publication Number | Publication Date |
---|---|
US20080221866A1 true US20080221866A1 (en) | 2008-09-11 |
Family
ID=39742530
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/043,854 Abandoned US20080221866A1 (en) | 2007-03-06 | 2008-03-06 | Machine Learning For Transliteration |
Country Status (1)
Country | Link |
---|---|
US (1) | US20080221866A1 (en) |
Cited By (200)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20080120540A1 (en) * | 2004-08-02 | 2008-05-22 | Shekhar Ramachandra Borgaonkar | System And Method For Inputting Syllables Into A Computer |
US20090070095A1 (en) * | 2007-09-07 | 2009-03-12 | Microsoft Corporation | Mining bilingual dictionaries from monolingual web pages |
US20090281788A1 (en) * | 2008-05-11 | 2009-11-12 | Michael Elizarov | Mobile electronic device and associated method enabling identification of previously entered data for transliteration of an input |
US20100002004A1 (en) * | 2008-07-01 | 2010-01-07 | Google Inc. | Exception Processing of Character Entry Sequences |
US20100057439A1 (en) * | 2008-08-27 | 2010-03-04 | Fujitsu Limited | Portable storage medium storing translation support program, translation support system and translation support method |
US20100088085A1 (en) * | 2008-10-02 | 2010-04-08 | Jae-Hun Jeon | Statistical machine translation apparatus and method |
US20110137635A1 (en) * | 2009-12-08 | 2011-06-09 | Microsoft Corporation | Transliterating semitic languages including diacritics |
US20110218796A1 (en) * | 2010-03-05 | 2011-09-08 | Microsoft Corporation | Transliteration using indicator and hybrid generative features |
US20120016658A1 (en) * | 2009-03-19 | 2012-01-19 | Google Inc. | Input method editor |
US20120034939A1 (en) * | 2010-08-06 | 2012-02-09 | Al-Omari Hussein K | System and methods for cost-effective bilingual texting |
WO2012027262A1 (en) * | 2010-08-23 | 2012-03-01 | Google Inc. | Parallel document mining |
US8224836B1 (en) * | 2011-11-02 | 2012-07-17 | Google Inc. | Searching in multiple languages |
US20120259614A1 (en) * | 2011-04-06 | 2012-10-11 | Centre National De La Recherche Scientifique (Cnrs ) | Transliterating methods between character-based and phonetic symbol-based writing systems |
US20130035926A1 (en) * | 2010-01-18 | 2013-02-07 | Google Inc. | Automatic transliteration of a record in a first language to a word in a second language |
US8438005B1 (en) | 2009-08-31 | 2013-05-07 | Google Inc. | Generating modified phonetic representations of indic words |
US20130262994A1 (en) * | 2012-04-03 | 2013-10-03 | Orlando McMaster | Dynamic text entry/input system |
US8612205B2 (en) * | 2010-06-14 | 2013-12-17 | Xerox Corporation | Word alignment method and system for improved vocabulary coverage in statistical machine translation |
US20140012569A1 (en) * | 2012-07-03 | 2014-01-09 | National Taiwan Normal University | System and Method Using Data Reduction Approach and Nonlinear Algorithm to Construct Chinese Readability Model |
JP2014021863A (en) * | 2012-07-20 | 2014-02-03 | Nippon Telegr & Teleph Corp <Ntt> | Symbol string association device, symbol string conversion model learning device, symbol string conversion device, method, and program |
US8682643B1 (en) * | 2010-11-10 | 2014-03-25 | Google Inc. | Ranking transliteration output suggestions |
US20140095143A1 (en) * | 2012-09-28 | 2014-04-03 | International Business Machines Corporation | Transliteration pair matching |
US20140278357A1 (en) * | 2013-03-14 | 2014-09-18 | Wordnik, Inc. | Word generation and scoring using sub-word segments and characteristic of interest |
WO2014158101A1 (en) * | 2013-03-28 | 2014-10-02 | Sun Vasan | Methods, systems and devices for interacting with a computing device |
US8892446B2 (en) | 2010-01-18 | 2014-11-18 | Apple Inc. | Service orchestration for intelligent automated assistant |
US8918308B2 (en) | 2012-07-06 | 2014-12-23 | International Business Machines Corporation | Providing multi-lingual searching of mono-lingual content |
CN104272223A (en) * | 2012-02-28 | 2015-01-07 | 谷歌公司 | Techniques for transliterating input text from a first character set to a second character set |
US20150154958A1 (en) * | 2012-08-24 | 2015-06-04 | Tencent Technology (Shenzhen) Company Limited | Multimedia information retrieval method and electronic device |
US20150186362A1 (en) * | 2012-08-31 | 2015-07-02 | Mu Li | Personal language model for input method editor |
US9190062B2 (en) | 2010-02-25 | 2015-11-17 | Apple Inc. | User profiling for voice input processing |
US9201876B1 (en) * | 2012-05-29 | 2015-12-01 | Google Inc. | Contextual weighting of words in a word grouping |
US9262612B2 (en) | 2011-03-21 | 2016-02-16 | Apple Inc. | Device access using voice authentication |
US9300784B2 (en) | 2013-06-13 | 2016-03-29 | Apple Inc. | System and method for emergency calls initiated by voice command |
US20160110341A1 (en) * | 2014-10-15 | 2016-04-21 | Microsoft Technology Licensing, Llc | Construction of a lexicon for a selected context |
US9323726B1 (en) * | 2012-06-27 | 2016-04-26 | Amazon Technologies, Inc. | Optimizing a glyph-based file |
US9330720B2 (en) | 2008-01-03 | 2016-05-03 | Apple Inc. | Methods and apparatus for altering audio output signals |
US9338493B2 (en) | 2014-06-30 | 2016-05-10 | Apple Inc. | Intelligent automated assistant for TV user interactions |
US9342503B1 (en) * | 2013-03-12 | 2016-05-17 | Amazon Technologies, Inc. | Correlation across languages |
US9368114B2 (en) | 2013-03-14 | 2016-06-14 | Apple Inc. | Context-sensitive handling of interruptions |
US9430463B2 (en) | 2014-05-30 | 2016-08-30 | Apple Inc. | Exemplar-based natural language processing |
US9483461B2 (en) | 2012-03-06 | 2016-11-01 | Apple Inc. | Handling speech synthesis of content for multiple languages |
US9495129B2 (en) | 2012-06-29 | 2016-11-15 | Apple Inc. | Device, method, and user interface for voice-activated navigation and browsing of a document |
US9502031B2 (en) | 2014-05-27 | 2016-11-22 | Apple Inc. | Method for supporting dynamic grammars in WFST-based ASR |
US9535906B2 (en) | 2008-07-31 | 2017-01-03 | Apple Inc. | Mobile device having human language translation capability with positional feedback |
US9576574B2 (en) | 2012-09-10 | 2017-02-21 | Apple Inc. | Context-sensitive handling of interruptions by intelligent digital assistant |
US9582608B2 (en) | 2013-06-07 | 2017-02-28 | Apple Inc. | Unified ranking with entropy-weighted information for phrase-based semantic auto-completion |
US9620104B2 (en) | 2013-06-07 | 2017-04-11 | Apple Inc. | System and method for user-specified pronunciation of words for speech synthesis and recognition |
US9620105B2 (en) | 2014-05-15 | 2017-04-11 | Apple Inc. | Analyzing audio input for efficient speech and music recognition |
US9626955B2 (en) | 2008-04-05 | 2017-04-18 | Apple Inc. | Intelligent text-to-speech conversion |
US9633674B2 (en) | 2013-06-07 | 2017-04-25 | Apple Inc. | System and method for detecting errors in interactions with a voice-based digital assistant |
US9633004B2 (en) | 2014-05-30 | 2017-04-25 | Apple Inc. | Better resolution when referencing to concepts |
US9646609B2 (en) | 2014-09-30 | 2017-05-09 | Apple Inc. | Caching apparatus for serving phonetic pronunciations |
US9646614B2 (en) | 2000-03-16 | 2017-05-09 | Apple Inc. | Fast, language-independent method for user authentication by voice |
US9668121B2 (en) | 2014-09-30 | 2017-05-30 | Apple Inc. | Social reminders |
US9697822B1 (en) | 2013-03-15 | 2017-07-04 | Apple Inc. | System and method for updating an adaptive speech recognition model |
US9697820B2 (en) | 2015-09-24 | 2017-07-04 | Apple Inc. | Unit-selection text-to-speech synthesis using concatenation-sensitive neural networks |
US9711141B2 (en) | 2014-12-09 | 2017-07-18 | Apple Inc. | Disambiguating heteronyms in speech synthesis |
US9715875B2 (en) | 2014-05-30 | 2017-07-25 | Apple Inc. | Reducing the need for manual start/end-pointing and trigger phrases |
US9721566B2 (en) | 2015-03-08 | 2017-08-01 | Apple Inc. | Competing devices responding to voice triggers |
US20170228360A1 (en) * | 2015-06-30 | 2017-08-10 | Rakuten, Inc. | Transliteration apparatus, transliteration method, transliteration program, and information processing apparatus |
US9734193B2 (en) | 2014-05-30 | 2017-08-15 | Apple Inc. | Determining domain salience ranking from ambiguous words in natural speech |
US9760559B2 (en) | 2014-05-30 | 2017-09-12 | Apple Inc. | Predictive text input |
RU2632137C2 (en) * | 2015-06-30 | 2017-10-02 | Общество С Ограниченной Ответственностью "Яндекс" | Method and server of transcription of lexical unit from first alphabet in second alphabet |
US9785630B2 (en) | 2014-05-30 | 2017-10-10 | Apple Inc. | Text prediction using combined word N-gram and unigram language models |
US9798393B2 (en) | 2011-08-29 | 2017-10-24 | Apple Inc. | Text correction processing |
US9818400B2 (en) | 2014-09-11 | 2017-11-14 | Apple Inc. | Method and apparatus for discovering trending terms in speech requests |
US9842101B2 (en) | 2014-05-30 | 2017-12-12 | Apple Inc. | Predictive conversion of language input |
US9842105B2 (en) | 2015-04-16 | 2017-12-12 | Apple Inc. | Parsimonious continuous-space phrase representations for natural language processing |
US20170371850A1 (en) * | 2016-06-22 | 2017-12-28 | Google Inc. | Phonetics-based computer transliteration techniques |
US9858925B2 (en) | 2009-06-05 | 2018-01-02 | Apple Inc. | Using context information to facilitate processing of commands in a virtual assistant |
US9865280B2 (en) | 2015-03-06 | 2018-01-09 | Apple Inc. | Structured dictation using intelligent automated assistants |
US9886953B2 (en) | 2015-03-08 | 2018-02-06 | Apple Inc. | Virtual assistant activation |
US9886432B2 (en) | 2014-09-30 | 2018-02-06 | Apple Inc. | Parsimonious handling of word inflection via categorical stem + suffix N-gram language models |
US9899019B2 (en) | 2015-03-18 | 2018-02-20 | Apple Inc. | Systems and methods for structured stem and suffix language models |
US9922642B2 (en) | 2013-03-15 | 2018-03-20 | Apple Inc. | Training an at least partial voice command system |
US9934775B2 (en) | 2016-05-26 | 2018-04-03 | Apple Inc. | Unit-selection text-to-speech synthesis based on predicted concatenation parameters |
US9953088B2 (en) | 2012-05-14 | 2018-04-24 | Apple Inc. | Crowd sourcing information to fulfill user requests |
US9959870B2 (en) | 2008-12-11 | 2018-05-01 | Apple Inc. | Speech recognition involving a mobile device |
US9966065B2 (en) | 2014-05-30 | 2018-05-08 | Apple Inc. | Multi-command single utterance input method |
US9966068B2 (en) | 2013-06-08 | 2018-05-08 | Apple Inc. | Interpreting and acting upon commands that involve sharing information with remote devices |
US9972304B2 (en) | 2016-06-03 | 2018-05-15 | Apple Inc. | Privacy preserving distributed evaluation framework for embedded personalized systems |
US9971774B2 (en) | 2012-09-19 | 2018-05-15 | Apple Inc. | Voice-based media searching |
US10043516B2 (en) | 2016-09-23 | 2018-08-07 | Apple Inc. | Intelligent automated assistant |
US10049668B2 (en) | 2015-12-02 | 2018-08-14 | Apple Inc. | Applying neural network language models to weighted finite state transducers for automatic speech recognition |
US10049663B2 (en) | 2016-06-08 | 2018-08-14 | Apple, Inc. | Intelligent automated assistant for media exploration |
US10057736B2 (en) | 2011-06-03 | 2018-08-21 | Apple Inc. | Active transport based notifications |
US10067938B2 (en) | 2016-06-10 | 2018-09-04 | Apple Inc. | Multilingual word prediction |
US10074360B2 (en) | 2014-09-30 | 2018-09-11 | Apple Inc. | Providing an indication of the suitability of speech recognition |
US10078631B2 (en) | 2014-05-30 | 2018-09-18 | Apple Inc. | Entropy-guided text prediction using combined word and character n-gram language models |
US10079014B2 (en) | 2012-06-08 | 2018-09-18 | Apple Inc. | Name recognition system |
US10083688B2 (en) | 2015-05-27 | 2018-09-25 | Apple Inc. | Device voice control for selecting a displayed affordance |
US10089072B2 (en) | 2016-06-11 | 2018-10-02 | Apple Inc. | Intelligent device arbitration and control |
US10101822B2 (en) | 2015-06-05 | 2018-10-16 | Apple Inc. | Language input correction |
US10127220B2 (en) | 2015-06-04 | 2018-11-13 | Apple Inc. | Language identification from short strings |
US10127911B2 (en) | 2014-09-30 | 2018-11-13 | Apple Inc. | Speaker identification and unsupervised speaker adaptation techniques |
US10134385B2 (en) | 2012-03-02 | 2018-11-20 | Apple Inc. | Systems and methods for name pronunciation |
US10170123B2 (en) | 2014-05-30 | 2019-01-01 | Apple Inc. | Intelligent assistant for home automation |
US10169079B2 (en) | 2015-12-11 | 2019-01-01 | International Business Machines Corporation | Task status tracking and update system |
US10176167B2 (en) | 2013-06-09 | 2019-01-08 | Apple Inc. | System and method for inferring user intent from speech inputs |
US10185542B2 (en) | 2013-06-09 | 2019-01-22 | Apple Inc. | Device, method, and graphical user interface for enabling conversation persistence across two or more instances of a digital assistant |
US10186254B2 (en) | 2015-06-07 | 2019-01-22 | Apple Inc. | Context-based endpoint detection |
US10192552B2 (en) | 2016-06-10 | 2019-01-29 | Apple Inc. | Digital assistant providing whispered speech |
US10199051B2 (en) | 2013-02-07 | 2019-02-05 | Apple Inc. | Voice trigger for a digital assistant |
US10223066B2 (en) | 2015-12-23 | 2019-03-05 | Apple Inc. | Proactive assistance based on dialog communication between devices |
US10241752B2 (en) | 2011-09-30 | 2019-03-26 | Apple Inc. | Interface for a virtual digital assistant |
US10241644B2 (en) | 2011-06-03 | 2019-03-26 | Apple Inc. | Actionable reminder entries |
US10249300B2 (en) | 2016-06-06 | 2019-04-02 | Apple Inc. | Intelligent list reading |
US10255907B2 (en) | 2015-06-07 | 2019-04-09 | Apple Inc. | Automatic accent detection using acoustic models |
US10269345B2 (en) | 2016-06-11 | 2019-04-23 | Apple Inc. | Intelligent task discovery |
US10269353B2 (en) | 2016-08-30 | 2019-04-23 | Tata Consultancy Services Limited | System and method for transcription of spoken words using multilingual mismatched crowd unfamiliar with a spoken language |
US10276170B2 (en) | 2010-01-18 | 2019-04-30 | Apple Inc. | Intelligent automated assistant |
US20190129935A1 (en) * | 2017-11-01 | 2019-05-02 | International Business Machines Corporation | Recognizing transliterated words |
US10283110B2 (en) | 2009-07-02 | 2019-05-07 | Apple Inc. | Methods and apparatuses for automatic speech recognition |
US10289433B2 (en) | 2014-05-30 | 2019-05-14 | Apple Inc. | Domain specific language for encoding assistant dialog |
US10297253B2 (en) | 2016-06-11 | 2019-05-21 | Apple Inc. | Application integration with a digital assistant |
US10303715B2 (en) | 2017-05-16 | 2019-05-28 | Apple Inc. | Intelligent automated assistant for media exploration |
US10311144B2 (en) | 2017-05-16 | 2019-06-04 | Apple Inc. | Emoji word sense disambiguation |
US10318871B2 (en) | 2005-09-08 | 2019-06-11 | Apple Inc. | Method and apparatus for building an intelligent automated assistant |
US10332518B2 (en) | 2017-05-09 | 2019-06-25 | Apple Inc. | User interface for correcting recognition errors |
US10356243B2 (en) | 2015-06-05 | 2019-07-16 | Apple Inc. | Virtual assistant aided communication with 3rd party service in a communication session |
US10354011B2 (en) | 2016-06-09 | 2019-07-16 | Apple Inc. | Intelligent automated assistant in a home environment |
US10366158B2 (en) | 2015-09-29 | 2019-07-30 | Apple Inc. | Efficient word encoding for recurrent neural network language models |
US10395654B2 (en) | 2017-05-11 | 2019-08-27 | Apple Inc. | Text normalization based on a data-driven learning network |
US10403278B2 (en) | 2017-05-16 | 2019-09-03 | Apple Inc. | Methods and systems for phonetic matching in digital assistant services |
US10403283B1 (en) | 2018-06-01 | 2019-09-03 | Apple Inc. | Voice interaction at a primary device to access call functionality of a companion device |
US10410637B2 (en) | 2017-05-12 | 2019-09-10 | Apple Inc. | User-specific acoustic models |
US10417266B2 (en) | 2017-05-09 | 2019-09-17 | Apple Inc. | Context-aware ranking of intelligent response suggestions |
US10446143B2 (en) | 2016-03-14 | 2019-10-15 | Apple Inc. | Identification of voice inputs providing credentials |
US10445429B2 (en) | 2017-09-21 | 2019-10-15 | Apple Inc. | Natural language understanding using vocabularies with compressed serialized tries |
US10446141B2 (en) | 2014-08-28 | 2019-10-15 | Apple Inc. | Automatic speech recognition based on user feedback |
US10474753B2 (en) | 2016-09-07 | 2019-11-12 | Apple Inc. | Language identification using recurrent neural networks |
US10482874B2 (en) | 2017-05-15 | 2019-11-19 | Apple Inc. | Hierarchical belief states for digital assistants |
US10490187B2 (en) | 2016-06-10 | 2019-11-26 | Apple Inc. | Digital assistant providing automated status report |
US10496705B1 (en) | 2018-06-03 | 2019-12-03 | Apple Inc. | Accelerated task performance |
US10496753B2 (en) | 2010-01-18 | 2019-12-03 | Apple Inc. | Automatically adapting user interfaces for hands-free interaction |
US10509862B2 (en) | 2016-06-10 | 2019-12-17 | Apple Inc. | Dynamic phrase expansion of language input |
US10521466B2 (en) | 2016-06-11 | 2019-12-31 | Apple Inc. | Data driven natural language event detection and classification |
US10553209B2 (en) | 2010-01-18 | 2020-02-04 | Apple Inc. | Systems and methods for hands-free notification summaries |
US10552013B2 (en) | 2014-12-02 | 2020-02-04 | Apple Inc. | Data detection |
US10567477B2 (en) | 2015-03-08 | 2020-02-18 | Apple Inc. | Virtual assistant continuity |
US10568032B2 (en) | 2007-04-03 | 2020-02-18 | Apple Inc. | Method and system for operating a multi-function portable electronic device using voice-activation |
US10572586B2 (en) * | 2018-02-27 | 2020-02-25 | International Business Machines Corporation | Technique for automatically splitting words |
US10592604B2 (en) | 2018-03-12 | 2020-03-17 | Apple Inc. | Inverse text normalization for automatic speech recognition |
US10592095B2 (en) | 2014-05-23 | 2020-03-17 | Apple Inc. | Instantaneous speaking of content on touch devices |
US10593346B2 (en) | 2016-12-22 | 2020-03-17 | Apple Inc. | Rank-reduced token representation for automatic speech recognition |
US10636424B2 (en) | 2017-11-30 | 2020-04-28 | Apple Inc. | Multi-turn canned dialog |
US10643611B2 (en) | 2008-10-02 | 2020-05-05 | Apple Inc. | Electronic devices with voice command and contextual data processing capabilities |
US10652394B2 (en) | 2013-03-14 | 2020-05-12 | Apple Inc. | System and method for processing voicemail |
US10659851B2 (en) | 2014-06-30 | 2020-05-19 | Apple Inc. | Real-time digital assistant knowledge updates |
US10657328B2 (en) | 2017-06-02 | 2020-05-19 | Apple Inc. | Multi-task recurrent neural network architecture for efficient morphology handling in neural language modeling |
US10671428B2 (en) | 2015-09-08 | 2020-06-02 | Apple Inc. | Distributed personal assistant |
US10679605B2 (en) | 2010-01-18 | 2020-06-09 | Apple Inc. | Hands-free list-reading by intelligent automated assistant |
US10684703B2 (en) | 2018-06-01 | 2020-06-16 | Apple Inc. | Attention aware virtual assistant dismissal |
US10691473B2 (en) | 2015-11-06 | 2020-06-23 | Apple Inc. | Intelligent automated assistant in a messaging environment |
WO2020140129A1 (en) * | 2018-12-28 | 2020-07-02 | Paypal, Inc. | Algorithm for scoring partial matches between words |
US10706373B2 (en) | 2011-06-03 | 2020-07-07 | Apple Inc. | Performing actions associated with task items that represent tasks to perform |
US10705794B2 (en) | 2010-01-18 | 2020-07-07 | Apple Inc. | Automatically adapting user interfaces for hands-free interaction |
US10728351B2 (en) * | 2015-01-30 | 2020-07-28 | Rovi Guides, Inc. | Systems and methods for resolving ambiguous terms in social chatter based on a user profile |
US10726832B2 (en) | 2017-05-11 | 2020-07-28 | Apple Inc. | Maintaining privacy of personal information |
US10733982B2 (en) | 2018-01-08 | 2020-08-04 | Apple Inc. | Multi-directional dialog |
US10733375B2 (en) | 2018-01-31 | 2020-08-04 | Apple Inc. | Knowledge-based framework for improving natural language understanding |
US10733993B2 (en) | 2016-06-10 | 2020-08-04 | Apple Inc. | Intelligent digital assistant in a multi-tasking environment |
US10747498B2 (en) | 2015-09-08 | 2020-08-18 | Apple Inc. | Zero latency digital assistant |
US10755703B2 (en) | 2017-05-11 | 2020-08-25 | Apple Inc. | Offline personal assistant |
US10755051B2 (en) | 2017-09-29 | 2020-08-25 | Apple Inc. | Rule-based natural language processing |
US10762293B2 (en) | 2010-12-22 | 2020-09-01 | Apple Inc. | Using parts-of-speech tagging and named entity recognition for spelling correction |
US10789041B2 (en) | 2014-09-12 | 2020-09-29 | Apple Inc. | Dynamic thresholds for always listening speech trigger |
US10789945B2 (en) | 2017-05-12 | 2020-09-29 | Apple Inc. | Low-latency intelligent automated assistant |
US10789959B2 (en) | 2018-03-02 | 2020-09-29 | Apple Inc. | Training speaker recognition models for digital assistants |
US10791216B2 (en) | 2013-08-06 | 2020-09-29 | Apple Inc. | Auto-activating smart responses based on activities from remote devices |
US10791176B2 (en) | 2017-05-12 | 2020-09-29 | Apple Inc. | Synchronization and task delegation of a digital assistant |
US10810274B2 (en) | 2017-05-15 | 2020-10-20 | Apple Inc. | Optimizing dialogue policy decisions for digital assistants using implicit feedback |
US10818288B2 (en) | 2018-03-26 | 2020-10-27 | Apple Inc. | Natural assistant interaction |
US10892996B2 (en) | 2018-06-01 | 2021-01-12 | Apple Inc. | Variable latency device coordination |
US10896184B2 (en) | 2013-05-10 | 2021-01-19 | Veveo, Inc. | Method and system for capturing and exploiting user intent in a conversational interaction based information retrieval system |
US10902215B1 (en) * | 2016-06-30 | 2021-01-26 | Facebook, Inc. | Social hash for language models |
US10902221B1 (en) * | 2016-06-30 | 2021-01-26 | Facebook, Inc. | Social hash for language models |
US10909331B2 (en) | 2018-03-30 | 2021-02-02 | Apple Inc. | Implicit identification of translation payload with neural machine translation |
US10928918B2 (en) | 2018-05-07 | 2021-02-23 | Apple Inc. | Raise to speak |
US10978094B2 (en) | 2013-05-07 | 2021-04-13 | Veveo, Inc. | Method of and system for real time feedback in an incremental speech input interface |
US10984780B2 (en) | 2018-05-21 | 2021-04-20 | Apple Inc. | Global semantic word embeddings using bi-directional recurrent neural networks |
US11010550B2 (en) | 2015-09-29 | 2021-05-18 | Apple Inc. | Unified language modeling framework for word prediction, auto-completion and auto-correction |
US11025565B2 (en) | 2015-06-07 | 2021-06-01 | Apple Inc. | Personalized prediction of responses for instant messaging |
US11023513B2 (en) | 2007-12-20 | 2021-06-01 | Apple Inc. | Method and apparatus for searching using an active ontology |
US11062621B2 (en) * | 2018-12-26 | 2021-07-13 | Paypal, Inc. | Determining phonetic similarity using machine learning |
US11062615B1 (en) * | 2011-03-01 | 2021-07-13 | Intelligibility Training LLC | Methods and systems for remote language learning in a pandemic-aware world |
US11093538B2 (en) | 2012-07-31 | 2021-08-17 | Veveo, Inc. | Disambiguating user intent in conversational interaction system for large corpus information retrieval |
CN113396455A (en) * | 2018-12-12 | 2021-09-14 | 谷歌有限责任公司 | Transliteration for speech recognition training and scoring |
US11145294B2 (en) | 2018-05-07 | 2021-10-12 | Apple Inc. | Intelligent automated assistant for delivering content from user experiences |
US11204787B2 (en) | 2017-01-09 | 2021-12-21 | Apple Inc. | Application integration with a digital assistant |
US11217255B2 (en) | 2017-05-16 | 2022-01-04 | Apple Inc. | Far-field extension for digital assistant services |
US11231904B2 (en) | 2015-03-06 | 2022-01-25 | Apple Inc. | Reducing response latency of intelligent automated assistants |
US11281993B2 (en) | 2016-12-05 | 2022-03-22 | Apple Inc. | Model and ensemble compression for metric learning |
US11301477B2 (en) | 2017-05-12 | 2022-04-12 | Apple Inc. | Feedback analysis of a digital assistant |
US11314370B2 (en) | 2013-12-06 | 2022-04-26 | Apple Inc. | Method for extracting salient dialog usage from live data |
US11386266B2 (en) | 2018-06-01 | 2022-07-12 | Apple Inc. | Text correction |
US11417322B2 (en) * | 2018-12-12 | 2022-08-16 | Google Llc | Transliteration for speech recognition training and scoring |
US11423074B2 (en) | 2014-12-23 | 2022-08-23 | Rovi Guides, Inc. | Systems and methods for determining whether a negation statement applies to a current or past query |
US11436296B2 (en) | 2012-07-20 | 2022-09-06 | Veveo, Inc. | Method of and system for inferring user intent in search input in a conversational interaction system |
US11495218B2 (en) | 2018-06-01 | 2022-11-08 | Apple Inc. | Virtual assistant operation in multi-device environments |
US11587559B2 (en) | 2015-09-30 | 2023-02-21 | Apple Inc. | Intelligent device identification |
Citations (25)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5270927A (en) * | 1990-09-10 | 1993-12-14 | At&T Bell Laboratories | Method for conversion of phonetic Chinese to character Chinese |
US5794177A (en) * | 1995-07-19 | 1998-08-11 | Inso Corporation | Method and apparatus for morphological analysis and generation of natural language text |
US5893133A (en) * | 1995-08-16 | 1999-04-06 | International Business Machines Corporation | Keyboard for a system and method for processing Chinese language text |
US6360197B1 (en) * | 1996-06-25 | 2002-03-19 | Microsoft Corporation | Method and apparatus for identifying erroneous characters in text |
US6460015B1 (en) * | 1998-12-15 | 2002-10-01 | International Business Machines Corporation | Method, system and computer program product for automatic character transliteration in a text string object |
US20030097252A1 (en) * | 2001-10-18 | 2003-05-22 | Mackie Andrew William | Method and apparatus for efficient segmentation of compound words using probabilistic breakpoint traversal |
US20030191626A1 (en) * | 2002-03-11 | 2003-10-09 | Yaser Al-Onaizan | Named entity translation |
US6848080B1 (en) * | 1999-11-05 | 2005-01-25 | Microsoft Corporation | Language input architecture for converting one text form to another text form with tolerance to spelling, typographical, and conversion errors |
US20050033565A1 (en) * | 2003-07-02 | 2005-02-10 | Philipp Koehn | Empirical methods for splitting compound words with application to machine translation |
US20050043941A1 (en) * | 2003-08-21 | 2005-02-24 | International Business Machines Corporation | Method, apparatus, and program for transliteration of documents in various indian languages |
US20050108213A1 (en) * | 2003-11-13 | 2005-05-19 | Whereonearth Limited | Geographical location extraction |
US20050119875A1 (en) * | 1998-03-25 | 2005-06-02 | Shaefer Leonard Jr. | Identifying related names |
US20050216253A1 (en) * | 2004-03-25 | 2005-09-29 | Microsoft Corporation | System and method for reverse transliteration using statistical alignment |
US20060143207A1 (en) * | 2004-12-29 | 2006-06-29 | Microsoft Corporation | Cyrillic to Latin script transliteration system and method |
US20060230350A1 (en) * | 2004-06-25 | 2006-10-12 | Google, Inc., A Delaware Corporation | Nonstandard locality-based text entry |
US20070011132A1 (en) * | 2005-06-17 | 2007-01-11 | Microsoft Corporation | Named entity translation |
US7165019B1 (en) * | 1999-11-05 | 2007-01-16 | Microsoft Corporation | Language input architecture for converting one text form to another text form with modeless entry |
US20070021956A1 (en) * | 2005-07-19 | 2007-01-25 | Yan Qu | Method and apparatus for generating ideographic representations of letter based names |
US20070022134A1 (en) * | 2005-07-22 | 2007-01-25 | Microsoft Corporation | Cross-language related keyword suggestion |
US7177794B2 (en) * | 2002-04-12 | 2007-02-13 | Babu V Mani | System and method for writing Indian languages using English alphabet |
US7398199B2 (en) * | 2004-03-23 | 2008-07-08 | Xue Sheng Gong | Chinese romanization |
US7403888B1 (en) * | 1999-11-05 | 2008-07-22 | Microsoft Corporation | Language input user interface |
US7412385B2 (en) * | 2003-11-12 | 2008-08-12 | Microsoft Corporation | System for identifying paraphrases using machine translation |
US20090070095A1 (en) * | 2007-09-07 | 2009-03-12 | Microsoft Corporation | Mining bilingual dictionaries from monolingual web pages |
US20110137636A1 (en) * | 2009-12-02 | 2011-06-09 | Janya, Inc. | Context aware back-transliteration and translation of names and common phrases using web resources |
-
2008
- 2008-03-06 US US12/043,854 patent/US20080221866A1/en not_active Abandoned
Patent Citations (29)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5270927A (en) * | 1990-09-10 | 1993-12-14 | At&T Bell Laboratories | Method for conversion of phonetic Chinese to character Chinese |
US5794177A (en) * | 1995-07-19 | 1998-08-11 | Inso Corporation | Method and apparatus for morphological analysis and generation of natural language text |
US5893133A (en) * | 1995-08-16 | 1999-04-06 | International Business Machines Corporation | Keyboard for a system and method for processing Chinese language text |
US6360197B1 (en) * | 1996-06-25 | 2002-03-19 | Microsoft Corporation | Method and apparatus for identifying erroneous characters in text |
US20050119875A1 (en) * | 1998-03-25 | 2005-06-02 | Shaefer Leonard Jr. | Identifying related names |
US6460015B1 (en) * | 1998-12-15 | 2002-10-01 | International Business Machines Corporation | Method, system and computer program product for automatic character transliteration in a text string object |
US7403888B1 (en) * | 1999-11-05 | 2008-07-22 | Microsoft Corporation | Language input user interface |
US7165019B1 (en) * | 1999-11-05 | 2007-01-16 | Microsoft Corporation | Language input architecture for converting one text form to another text form with modeless entry |
US6848080B1 (en) * | 1999-11-05 | 2005-01-25 | Microsoft Corporation | Language input architecture for converting one text form to another text form with tolerance to spelling, typographical, and conversion errors |
US20030097252A1 (en) * | 2001-10-18 | 2003-05-22 | Mackie Andrew William | Method and apparatus for efficient segmentation of compound words using probabilistic breakpoint traversal |
US20030191626A1 (en) * | 2002-03-11 | 2003-10-09 | Yaser Al-Onaizan | Named entity translation |
US7249013B2 (en) * | 2002-03-11 | 2007-07-24 | University Of Southern California | Named entity translation |
US7177794B2 (en) * | 2002-04-12 | 2007-02-13 | Babu V Mani | System and method for writing Indian languages using English alphabet |
US7711545B2 (en) * | 2003-07-02 | 2010-05-04 | Language Weaver, Inc. | Empirical methods for splitting compound words with application to machine translation |
US20050033565A1 (en) * | 2003-07-02 | 2005-02-10 | Philipp Koehn | Empirical methods for splitting compound words with application to machine translation |
US7369986B2 (en) * | 2003-08-21 | 2008-05-06 | International Business Machines Corporation | Method, apparatus, and program for transliteration of documents in various Indian languages |
US7805290B2 (en) * | 2003-08-21 | 2010-09-28 | International Business Machines Corporation | Method, apparatus, and program for transliteration of documents in various indian languages |
US20050043941A1 (en) * | 2003-08-21 | 2005-02-24 | International Business Machines Corporation | Method, apparatus, and program for transliteration of documents in various indian languages |
US7412385B2 (en) * | 2003-11-12 | 2008-08-12 | Microsoft Corporation | System for identifying paraphrases using machine translation |
US20050108213A1 (en) * | 2003-11-13 | 2005-05-19 | Whereonearth Limited | Geographical location extraction |
US7398199B2 (en) * | 2004-03-23 | 2008-07-08 | Xue Sheng Gong | Chinese romanization |
US20050216253A1 (en) * | 2004-03-25 | 2005-09-29 | Microsoft Corporation | System and method for reverse transliteration using statistical alignment |
US20060230350A1 (en) * | 2004-06-25 | 2006-10-12 | Google, Inc., A Delaware Corporation | Nonstandard locality-based text entry |
US20060143207A1 (en) * | 2004-12-29 | 2006-06-29 | Microsoft Corporation | Cyrillic to Latin script transliteration system and method |
US20070011132A1 (en) * | 2005-06-17 | 2007-01-11 | Microsoft Corporation | Named entity translation |
US20070021956A1 (en) * | 2005-07-19 | 2007-01-25 | Yan Qu | Method and apparatus for generating ideographic representations of letter based names |
US20070022134A1 (en) * | 2005-07-22 | 2007-01-25 | Microsoft Corporation | Cross-language related keyword suggestion |
US20090070095A1 (en) * | 2007-09-07 | 2009-03-12 | Microsoft Corporation | Mining bilingual dictionaries from monolingual web pages |
US20110137636A1 (en) * | 2009-12-02 | 2011-06-09 | Janya, Inc. | Context aware back-transliteration and translation of names and common phrases using web resources |
Non-Patent Citations (11)
Title |
---|
Chris Callison-Burch, Philipp Koehn, and Miles Osborne. 2006. Improved statistical machine translation using paraphrases. In Proceedings of the main conference on Human Language Technology Conference of the North American Chapter of the Association of Computational Linguistics (HLT-NAACL '06). * |
Chun-Jen Lee, JasonS Chang, Jyh-Shing, Roger Jang. Extraction of transliteration pairs from parallel corpora using a statistical transliteration model. 9 Oct 2004. * |
Dolan, Bill, Chris Quirk, and Chris Brockett. "Unsupervised construction of large paraphrase corpora: Exploiting massively parallel news sources." Proceedings of the 20th international conference on Computational Linguistics. Association for Computational Linguistics, 2004. * |
Fei Huang, Stephan Vogel, and Alex Waibel. 2003. Extracting named entity translingual equivalence with limited resources. 2, 2 (June 2003), 124-129. DOI=10.1145/974740.974745 http://doi.acm.org/10.1145/974740.974745 * |
Hany Hassan and Jeffrey Sorensen. 2005. An integrated approach for Arabic-English named entity translation. In Proceedings of the ACL Workshop on Computational Approaches to Semitic Languages (Semitic '05). Association for Computational Linguistics, Stroudsburg, PA, USA, 87-93. * |
Lin, Tracy; Wu, Jian-Cheng; Chang, Jason. Extraction of Name and Transliteration in Monolingual and Parallel Corpora Book Title: Machine Translation: From Real Users to Research Book Series Title: Lecture Notes in Computer Science Copyright: 2004 * |
Melamed, I. Dan. "Automatic evaluation and uniform filter cascades for inducing n-best translation lexicons." arXiv preprint cmp-lg/9505044 (1995). * |
Quirk, Chris, Chris Brockett, and William B. Dolan. "Monolingual Machine Translation for Paraphrase Generation." EMNLP. 2004. * |
Richard Sproat, Tao Tao, and ChengXiang Zhai. 2006. Named entity transliteration with comparable corpora. In Proceedings of the 21st International Conference on Computational Linguistics and the 44th annual meeting of the Association for Computational Linguistics (ACL-44). Association for Computational Linguistics, Stroudsburg, PA, USA, 73-80. * |
Yan Qu and Gregory Grefenstette. 2004. Finding ideographic representations of Japanese names written in Latin script via language identification and corpus validation. In Proceedings of the 42nd Annual Meeting on Association for Computational Linguistics (ACL '04). Association for Computational Linguistics, Stroudsburg, PA, USA, , Article 183 * |
Yaser Al-Onaizan and Kevin Knight. 2002. Translating named entities using monolingual and bilingual resources. In Proceedings of the 40th Annual Meeting on Association for Computational Linguistics (ACL '02). Association for Computational Linguistics, Stroudsburg, PA, USA, 400-408. * |
Cited By (304)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9646614B2 (en) | 2000-03-16 | 2017-05-09 | Apple Inc. | Fast, language-independent method for user authentication by voice |
US7979795B2 (en) * | 2004-08-02 | 2011-07-12 | Hewlett-Packard Development Company, L.P. | System and method for inputting syllables of a phonetic script into a computer |
US20080120540A1 (en) * | 2004-08-02 | 2008-05-22 | Shekhar Ramachandra Borgaonkar | System And Method For Inputting Syllables Into A Computer |
US10318871B2 (en) | 2005-09-08 | 2019-06-11 | Apple Inc. | Method and apparatus for building an intelligent automated assistant |
US9117447B2 (en) | 2006-09-08 | 2015-08-25 | Apple Inc. | Using event alert text as input to an automated assistant |
US8942986B2 (en) | 2006-09-08 | 2015-01-27 | Apple Inc. | Determining user intent based on ontologies of domains |
US8930191B2 (en) | 2006-09-08 | 2015-01-06 | Apple Inc. | Paraphrasing of user requests and results by automated digital assistant |
US10568032B2 (en) | 2007-04-03 | 2020-02-18 | Apple Inc. | Method and system for operating a multi-function portable electronic device using voice-activation |
US7983903B2 (en) * | 2007-09-07 | 2011-07-19 | Microsoft Corporation | Mining bilingual dictionaries from monolingual web pages |
US20090070095A1 (en) * | 2007-09-07 | 2009-03-12 | Microsoft Corporation | Mining bilingual dictionaries from monolingual web pages |
US11023513B2 (en) | 2007-12-20 | 2021-06-01 | Apple Inc. | Method and apparatus for searching using an active ontology |
US10381016B2 (en) | 2008-01-03 | 2019-08-13 | Apple Inc. | Methods and apparatus for altering audio output signals |
US9330720B2 (en) | 2008-01-03 | 2016-05-03 | Apple Inc. | Methods and apparatus for altering audio output signals |
US9626955B2 (en) | 2008-04-05 | 2017-04-18 | Apple Inc. | Intelligent text-to-speech conversion |
US9865248B2 (en) | 2008-04-05 | 2018-01-09 | Apple Inc. | Intelligent text-to-speech conversion |
US8725491B2 (en) | 2008-05-11 | 2014-05-13 | Blackberry Limited | Mobile electronic device and associated method enabling identification of previously entered data for transliteration of an input |
US20090281788A1 (en) * | 2008-05-11 | 2009-11-12 | Michael Elizarov | Mobile electronic device and associated method enabling identification of previously entered data for transliteration of an input |
US8463597B2 (en) * | 2008-05-11 | 2013-06-11 | Research In Motion Limited | Mobile electronic device and associated method enabling identification of previously entered data for transliteration of an input |
US20100002004A1 (en) * | 2008-07-01 | 2010-01-07 | Google Inc. | Exception Processing of Character Entry Sequences |
US8847962B2 (en) * | 2008-07-01 | 2014-09-30 | Google Inc. | Exception processing of character entry sequences |
US10108612B2 (en) | 2008-07-31 | 2018-10-23 | Apple Inc. | Mobile device having human language translation capability with positional feedback |
US9535906B2 (en) | 2008-07-31 | 2017-01-03 | Apple Inc. | Mobile device having human language translation capability with positional feedback |
US20100057439A1 (en) * | 2008-08-27 | 2010-03-04 | Fujitsu Limited | Portable storage medium storing translation support program, translation support system and translation support method |
US20100088085A1 (en) * | 2008-10-02 | 2010-04-08 | Jae-Hun Jeon | Statistical machine translation apparatus and method |
US11348582B2 (en) | 2008-10-02 | 2022-05-31 | Apple Inc. | Electronic devices with voice command and contextual data processing capabilities |
US10643611B2 (en) | 2008-10-02 | 2020-05-05 | Apple Inc. | Electronic devices with voice command and contextual data processing capabilities |
US9959870B2 (en) | 2008-12-11 | 2018-05-01 | Apple Inc. | Speech recognition involving a mobile device |
US9026426B2 (en) * | 2009-03-19 | 2015-05-05 | Google Inc. | Input method editor |
US20120016658A1 (en) * | 2009-03-19 | 2012-01-19 | Google Inc. | Input method editor |
US10475446B2 (en) | 2009-06-05 | 2019-11-12 | Apple Inc. | Using context information to facilitate processing of commands in a virtual assistant |
US10795541B2 (en) | 2009-06-05 | 2020-10-06 | Apple Inc. | Intelligent organization of tasks items |
US9858925B2 (en) | 2009-06-05 | 2018-01-02 | Apple Inc. | Using context information to facilitate processing of commands in a virtual assistant |
US11080012B2 (en) | 2009-06-05 | 2021-08-03 | Apple Inc. | Interface for a virtual digital assistant |
US10283110B2 (en) | 2009-07-02 | 2019-05-07 | Apple Inc. | Methods and apparatuses for automatic speech recognition |
US8438005B1 (en) | 2009-08-31 | 2013-05-07 | Google Inc. | Generating modified phonetic representations of indic words |
US8612206B2 (en) * | 2009-12-08 | 2013-12-17 | Microsoft Corporation | Transliterating semitic languages including diacritics |
US20110137635A1 (en) * | 2009-12-08 | 2011-06-09 | Microsoft Corporation | Transliterating semitic languages including diacritics |
US20130035926A1 (en) * | 2010-01-18 | 2013-02-07 | Google Inc. | Automatic transliteration of a record in a first language to a word in a second language |
US10679605B2 (en) | 2010-01-18 | 2020-06-09 | Apple Inc. | Hands-free list-reading by intelligent automated assistant |
US9009021B2 (en) * | 2010-01-18 | 2015-04-14 | Google Inc. | Automatic transliteration of a record in a first language to a word in a second language |
US10553209B2 (en) | 2010-01-18 | 2020-02-04 | Apple Inc. | Systems and methods for hands-free notification summaries |
US9318108B2 (en) | 2010-01-18 | 2016-04-19 | Apple Inc. | Intelligent automated assistant |
US10706841B2 (en) | 2010-01-18 | 2020-07-07 | Apple Inc. | Task flow identification based on user intent |
US10496753B2 (en) | 2010-01-18 | 2019-12-03 | Apple Inc. | Automatically adapting user interfaces for hands-free interaction |
US10705794B2 (en) | 2010-01-18 | 2020-07-07 | Apple Inc. | Automatically adapting user interfaces for hands-free interaction |
US10276170B2 (en) | 2010-01-18 | 2019-04-30 | Apple Inc. | Intelligent automated assistant |
US8892446B2 (en) | 2010-01-18 | 2014-11-18 | Apple Inc. | Service orchestration for intelligent automated assistant |
US11423886B2 (en) | 2010-01-18 | 2022-08-23 | Apple Inc. | Task flow identification based on user intent |
US9548050B2 (en) | 2010-01-18 | 2017-01-17 | Apple Inc. | Intelligent automated assistant |
US8903716B2 (en) | 2010-01-18 | 2014-12-02 | Apple Inc. | Personalized vocabulary for digital assistant |
US10692504B2 (en) | 2010-02-25 | 2020-06-23 | Apple Inc. | User profiling for voice input processing |
US10049675B2 (en) | 2010-02-25 | 2018-08-14 | Apple Inc. | User profiling for voice input processing |
US9633660B2 (en) | 2010-02-25 | 2017-04-25 | Apple Inc. | User profiling for voice input processing |
US9190062B2 (en) | 2010-02-25 | 2015-11-17 | Apple Inc. | User profiling for voice input processing |
US20110218796A1 (en) * | 2010-03-05 | 2011-09-08 | Microsoft Corporation | Transliteration using indicator and hybrid generative features |
US8612205B2 (en) * | 2010-06-14 | 2013-12-17 | Xerox Corporation | Word alignment method and system for improved vocabulary coverage in statistical machine translation |
US8473280B2 (en) * | 2010-08-06 | 2013-06-25 | King Abdulaziz City for Science & Technology | System and methods for cost-effective bilingual texting |
US20120034939A1 (en) * | 2010-08-06 | 2012-02-09 | Al-Omari Hussein K | System and methods for cost-effective bilingual texting |
WO2012027262A1 (en) * | 2010-08-23 | 2012-03-01 | Google Inc. | Parallel document mining |
US8682643B1 (en) * | 2010-11-10 | 2014-03-25 | Google Inc. | Ranking transliteration output suggestions |
US10762293B2 (en) | 2010-12-22 | 2020-09-01 | Apple Inc. | Using parts-of-speech tagging and named entity recognition for spelling correction |
US11062615B1 (en) * | 2011-03-01 | 2021-07-13 | Intelligibility Training LLC | Methods and systems for remote language learning in a pandemic-aware world |
US10417405B2 (en) | 2011-03-21 | 2019-09-17 | Apple Inc. | Device access using voice authentication |
US10102359B2 (en) | 2011-03-21 | 2018-10-16 | Apple Inc. | Device access using voice authentication |
US9262612B2 (en) | 2011-03-21 | 2016-02-16 | Apple Inc. | Device access using voice authentication |
US8977535B2 (en) * | 2011-04-06 | 2015-03-10 | Pierre-Henry DE BRUYN | Transliterating methods between character-based and phonetic symbol-based writing systems |
US20120259614A1 (en) * | 2011-04-06 | 2012-10-11 | Centre National De La Recherche Scientifique (Cnrs ) | Transliterating methods between character-based and phonetic symbol-based writing systems |
US11120372B2 (en) | 2011-06-03 | 2021-09-14 | Apple Inc. | Performing actions associated with task items that represent tasks to perform |
US10057736B2 (en) | 2011-06-03 | 2018-08-21 | Apple Inc. | Active transport based notifications |
US10241644B2 (en) | 2011-06-03 | 2019-03-26 | Apple Inc. | Actionable reminder entries |
US10706373B2 (en) | 2011-06-03 | 2020-07-07 | Apple Inc. | Performing actions associated with task items that represent tasks to perform |
US11350253B2 (en) | 2011-06-03 | 2022-05-31 | Apple Inc. | Active transport based notifications |
US9798393B2 (en) | 2011-08-29 | 2017-10-24 | Apple Inc. | Text correction processing |
US10241752B2 (en) | 2011-09-30 | 2019-03-26 | Apple Inc. | Interface for a virtual digital assistant |
US8224836B1 (en) * | 2011-11-02 | 2012-07-17 | Google Inc. | Searching in multiple languages |
CN104272223A (en) * | 2012-02-28 | 2015-01-07 | 谷歌公司 | Techniques for transliterating input text from a first character set to a second character set |
US9613029B2 (en) * | 2012-02-28 | 2017-04-04 | Google Inc. | Techniques for transliterating input text from a first character set to a second character set |
US20150088487A1 (en) * | 2012-02-28 | 2015-03-26 | Google Inc. | Techniques for transliterating input text from a first character set to a second character set |
US10134385B2 (en) | 2012-03-02 | 2018-11-20 | Apple Inc. | Systems and methods for name pronunciation |
US11069336B2 (en) | 2012-03-02 | 2021-07-20 | Apple Inc. | Systems and methods for name pronunciation |
US9483461B2 (en) | 2012-03-06 | 2016-11-01 | Apple Inc. | Handling speech synthesis of content for multiple languages |
US8930813B2 (en) * | 2012-04-03 | 2015-01-06 | Orlando McMaster | Dynamic text entry/input system |
US20130262994A1 (en) * | 2012-04-03 | 2013-10-03 | Orlando McMaster | Dynamic text entry/input system |
US9953088B2 (en) | 2012-05-14 | 2018-04-24 | Apple Inc. | Crowd sourcing information to fulfill user requests |
US9201876B1 (en) * | 2012-05-29 | 2015-12-01 | Google Inc. | Contextual weighting of words in a word grouping |
US10079014B2 (en) | 2012-06-08 | 2018-09-18 | Apple Inc. | Name recognition system |
US9323726B1 (en) * | 2012-06-27 | 2016-04-26 | Amazon Technologies, Inc. | Optimizing a glyph-based file |
US9495129B2 (en) | 2012-06-29 | 2016-11-15 | Apple Inc. | Device, method, and user interface for voice-activated navigation and browsing of a document |
US20140012569A1 (en) * | 2012-07-03 | 2014-01-09 | National Taiwan Normal University | System and Method Using Data Reduction Approach and Nonlinear Algorithm to Construct Chinese Readability Model |
US10140371B2 (en) | 2012-07-06 | 2018-11-27 | International Business Machines Corporation | Providing multi-lingual searching of mono-lingual content |
US9418158B2 (en) | 2012-07-06 | 2016-08-16 | International Business Machines Corporation | Providing multi-lingual searching of mono-lingual content |
US9792367B2 (en) | 2012-07-06 | 2017-10-17 | International Business Machines Corporation | Providing multi-lingual searching of mono-lingual content |
US8918308B2 (en) | 2012-07-06 | 2014-12-23 | International Business Machines Corporation | Providing multi-lingual searching of mono-lingual content |
US11436296B2 (en) | 2012-07-20 | 2022-09-06 | Veveo, Inc. | Method of and system for inferring user intent in search input in a conversational interaction system |
JP2014021863A (en) * | 2012-07-20 | 2014-02-03 | Nippon Telegr & Teleph Corp <Ntt> | Symbol string association device, symbol string conversion model learning device, symbol string conversion device, method, and program |
US11093538B2 (en) | 2012-07-31 | 2021-08-17 | Veveo, Inc. | Disambiguating user intent in conversational interaction system for large corpus information retrieval |
US11847151B2 (en) | 2012-07-31 | 2023-12-19 | Veveo, Inc. | Disambiguating user intent in conversational interaction system for large corpus information retrieval |
US9704485B2 (en) * | 2012-08-24 | 2017-07-11 | Tencent Technology (Shenzhen) Company Limited | Multimedia information retrieval method and electronic device |
US20150154958A1 (en) * | 2012-08-24 | 2015-06-04 | Tencent Technology (Shenzhen) Company Limited | Multimedia information retrieval method and electronic device |
US20150186362A1 (en) * | 2012-08-31 | 2015-07-02 | Mu Li | Personal language model for input method editor |
US9824085B2 (en) * | 2012-08-31 | 2017-11-21 | Microsoft Technology Licensing, Llc | Personal language model for input method editor |
US9576574B2 (en) | 2012-09-10 | 2017-02-21 | Apple Inc. | Context-sensitive handling of interruptions by intelligent digital assistant |
US9971774B2 (en) | 2012-09-19 | 2018-05-15 | Apple Inc. | Voice-based media searching |
US20140095143A1 (en) * | 2012-09-28 | 2014-04-03 | International Business Machines Corporation | Transliteration pair matching |
US9176936B2 (en) * | 2012-09-28 | 2015-11-03 | International Business Machines Corporation | Transliteration pair matching |
US10199051B2 (en) | 2013-02-07 | 2019-02-05 | Apple Inc. | Voice trigger for a digital assistant |
US10978090B2 (en) | 2013-02-07 | 2021-04-13 | Apple Inc. | Voice trigger for a digital assistant |
US9342503B1 (en) * | 2013-03-12 | 2016-05-17 | Amazon Technologies, Inc. | Correlation across languages |
US10652394B2 (en) | 2013-03-14 | 2020-05-12 | Apple Inc. | System and method for processing voicemail |
US20140278357A1 (en) * | 2013-03-14 | 2014-09-18 | Wordnik, Inc. | Word generation and scoring using sub-word segments and characteristic of interest |
US9368114B2 (en) | 2013-03-14 | 2016-06-14 | Apple Inc. | Context-sensitive handling of interruptions |
US11388291B2 (en) | 2013-03-14 | 2022-07-12 | Apple Inc. | System and method for processing voicemail |
US9922642B2 (en) | 2013-03-15 | 2018-03-20 | Apple Inc. | Training an at least partial voice command system |
US9697822B1 (en) | 2013-03-15 | 2017-07-04 | Apple Inc. | System and method for updating an adaptive speech recognition model |
WO2014158101A1 (en) * | 2013-03-28 | 2014-10-02 | Sun Vasan | Methods, systems and devices for interacting with a computing device |
US9189158B2 (en) | 2013-03-28 | 2015-11-17 | Vasan Sun | Methods, devices and systems for entering textual representations of words into a computing device by processing user physical and verbal interactions with the computing device |
US10978094B2 (en) | 2013-05-07 | 2021-04-13 | Veveo, Inc. | Method of and system for real time feedback in an incremental speech input interface |
US10896184B2 (en) | 2013-05-10 | 2021-01-19 | Veveo, Inc. | Method and system for capturing and exploiting user intent in a conversational interaction based information retrieval system |
US9633674B2 (en) | 2013-06-07 | 2017-04-25 | Apple Inc. | System and method for detecting errors in interactions with a voice-based digital assistant |
US9620104B2 (en) | 2013-06-07 | 2017-04-11 | Apple Inc. | System and method for user-specified pronunciation of words for speech synthesis and recognition |
US9966060B2 (en) | 2013-06-07 | 2018-05-08 | Apple Inc. | System and method for user-specified pronunciation of words for speech synthesis and recognition |
US9582608B2 (en) | 2013-06-07 | 2017-02-28 | Apple Inc. | Unified ranking with entropy-weighted information for phrase-based semantic auto-completion |
US10657961B2 (en) | 2013-06-08 | 2020-05-19 | Apple Inc. | Interpreting and acting upon commands that involve sharing information with remote devices |
US9966068B2 (en) | 2013-06-08 | 2018-05-08 | Apple Inc. | Interpreting and acting upon commands that involve sharing information with remote devices |
US11048473B2 (en) | 2013-06-09 | 2021-06-29 | Apple Inc. | Device, method, and graphical user interface for enabling conversation persistence across two or more instances of a digital assistant |
US10185542B2 (en) | 2013-06-09 | 2019-01-22 | Apple Inc. | Device, method, and graphical user interface for enabling conversation persistence across two or more instances of a digital assistant |
US10769385B2 (en) | 2013-06-09 | 2020-09-08 | Apple Inc. | System and method for inferring user intent from speech inputs |
US10176167B2 (en) | 2013-06-09 | 2019-01-08 | Apple Inc. | System and method for inferring user intent from speech inputs |
US9300784B2 (en) | 2013-06-13 | 2016-03-29 | Apple Inc. | System and method for emergency calls initiated by voice command |
US10791216B2 (en) | 2013-08-06 | 2020-09-29 | Apple Inc. | Auto-activating smart responses based on activities from remote devices |
US11314370B2 (en) | 2013-12-06 | 2022-04-26 | Apple Inc. | Method for extracting salient dialog usage from live data |
US9620105B2 (en) | 2014-05-15 | 2017-04-11 | Apple Inc. | Analyzing audio input for efficient speech and music recognition |
US10592095B2 (en) | 2014-05-23 | 2020-03-17 | Apple Inc. | Instantaneous speaking of content on touch devices |
US9502031B2 (en) | 2014-05-27 | 2016-11-22 | Apple Inc. | Method for supporting dynamic grammars in WFST-based ASR |
US9734193B2 (en) | 2014-05-30 | 2017-08-15 | Apple Inc. | Determining domain salience ranking from ambiguous words in natural speech |
US10169329B2 (en) | 2014-05-30 | 2019-01-01 | Apple Inc. | Exemplar-based natural language processing |
US10170123B2 (en) | 2014-05-30 | 2019-01-01 | Apple Inc. | Intelligent assistant for home automation |
US10657966B2 (en) | 2014-05-30 | 2020-05-19 | Apple Inc. | Better resolution when referencing to concepts |
US9430463B2 (en) | 2014-05-30 | 2016-08-30 | Apple Inc. | Exemplar-based natural language processing |
US10699717B2 (en) | 2014-05-30 | 2020-06-30 | Apple Inc. | Intelligent assistant for home automation |
US10083690B2 (en) | 2014-05-30 | 2018-09-25 | Apple Inc. | Better resolution when referencing to concepts |
US10078631B2 (en) | 2014-05-30 | 2018-09-18 | Apple Inc. | Entropy-guided text prediction using combined word and character n-gram language models |
US9715875B2 (en) | 2014-05-30 | 2017-07-25 | Apple Inc. | Reducing the need for manual start/end-pointing and trigger phrases |
US11257504B2 (en) | 2014-05-30 | 2022-02-22 | Apple Inc. | Intelligent assistant for home automation |
US9633004B2 (en) | 2014-05-30 | 2017-04-25 | Apple Inc. | Better resolution when referencing to concepts |
US10714095B2 (en) | 2014-05-30 | 2020-07-14 | Apple Inc. | Intelligent assistant for home automation |
US10497365B2 (en) | 2014-05-30 | 2019-12-03 | Apple Inc. | Multi-command single utterance input method |
US11133008B2 (en) | 2014-05-30 | 2021-09-28 | Apple Inc. | Reducing the need for manual start/end-pointing and trigger phrases |
US9966065B2 (en) | 2014-05-30 | 2018-05-08 | Apple Inc. | Multi-command single utterance input method |
US10417344B2 (en) | 2014-05-30 | 2019-09-17 | Apple Inc. | Exemplar-based natural language processing |
US9760559B2 (en) | 2014-05-30 | 2017-09-12 | Apple Inc. | Predictive text input |
US9785630B2 (en) | 2014-05-30 | 2017-10-10 | Apple Inc. | Text prediction using combined word N-gram and unigram language models |
US9842101B2 (en) | 2014-05-30 | 2017-12-12 | Apple Inc. | Predictive conversion of language input |
US10289433B2 (en) | 2014-05-30 | 2019-05-14 | Apple Inc. | Domain specific language for encoding assistant dialog |
US9668024B2 (en) | 2014-06-30 | 2017-05-30 | Apple Inc. | Intelligent automated assistant for TV user interactions |
US10659851B2 (en) | 2014-06-30 | 2020-05-19 | Apple Inc. | Real-time digital assistant knowledge updates |
US9338493B2 (en) | 2014-06-30 | 2016-05-10 | Apple Inc. | Intelligent automated assistant for TV user interactions |
US10904611B2 (en) | 2014-06-30 | 2021-01-26 | Apple Inc. | Intelligent automated assistant for TV user interactions |
US10446141B2 (en) | 2014-08-28 | 2019-10-15 | Apple Inc. | Automatic speech recognition based on user feedback |
US9818400B2 (en) | 2014-09-11 | 2017-11-14 | Apple Inc. | Method and apparatus for discovering trending terms in speech requests |
US10431204B2 (en) | 2014-09-11 | 2019-10-01 | Apple Inc. | Method and apparatus for discovering trending terms in speech requests |
US10789041B2 (en) | 2014-09-12 | 2020-09-29 | Apple Inc. | Dynamic thresholds for always listening speech trigger |
US10127911B2 (en) | 2014-09-30 | 2018-11-13 | Apple Inc. | Speaker identification and unsupervised speaker adaptation techniques |
US9986419B2 (en) | 2014-09-30 | 2018-05-29 | Apple Inc. | Social reminders |
US9886432B2 (en) | 2014-09-30 | 2018-02-06 | Apple Inc. | Parsimonious handling of word inflection via categorical stem + suffix N-gram language models |
US9668121B2 (en) | 2014-09-30 | 2017-05-30 | Apple Inc. | Social reminders |
US10453443B2 (en) | 2014-09-30 | 2019-10-22 | Apple Inc. | Providing an indication of the suitability of speech recognition |
US10390213B2 (en) | 2014-09-30 | 2019-08-20 | Apple Inc. | Social reminders |
US10438595B2 (en) | 2014-09-30 | 2019-10-08 | Apple Inc. | Speaker identification and unsupervised speaker adaptation techniques |
US10074360B2 (en) | 2014-09-30 | 2018-09-11 | Apple Inc. | Providing an indication of the suitability of speech recognition |
US9646609B2 (en) | 2014-09-30 | 2017-05-09 | Apple Inc. | Caching apparatus for serving phonetic pronunciations |
US10853569B2 (en) * | 2014-10-15 | 2020-12-01 | Microsoft Technology Licensing, Llc | Construction of a lexicon for a selected context |
US20190361976A1 (en) * | 2014-10-15 | 2019-11-28 | Microsoft Technology Licensing, Llc | Construction of a lexicon for a selected context |
US9697195B2 (en) * | 2014-10-15 | 2017-07-04 | Microsoft Technology Licensing, Llc | Construction of a lexicon for a selected context |
US20160110341A1 (en) * | 2014-10-15 | 2016-04-21 | Microsoft Technology Licensing, Llc | Construction of a lexicon for a selected context |
US10296583B2 (en) * | 2014-10-15 | 2019-05-21 | Microsoft Technology Licensing Llc | Construction of a lexicon for a selected context |
US20170337179A1 (en) * | 2014-10-15 | 2017-11-23 | Microsoft Technology Licensing, Llc | Construction of a lexicon for a selected context |
US10552013B2 (en) | 2014-12-02 | 2020-02-04 | Apple Inc. | Data detection |
US11556230B2 (en) | 2014-12-02 | 2023-01-17 | Apple Inc. | Data detection |
US9711141B2 (en) | 2014-12-09 | 2017-07-18 | Apple Inc. | Disambiguating heteronyms in speech synthesis |
US11423074B2 (en) | 2014-12-23 | 2022-08-23 | Rovi Guides, Inc. | Systems and methods for determining whether a negation statement applies to a current or past query |
US11811889B2 (en) | 2015-01-30 | 2023-11-07 | Rovi Guides, Inc. | Systems and methods for resolving ambiguous terms based on media asset schedule |
US10728351B2 (en) * | 2015-01-30 | 2020-07-28 | Rovi Guides, Inc. | Systems and methods for resolving ambiguous terms in social chatter based on a user profile |
US11076008B2 (en) * | 2015-01-30 | 2021-07-27 | Rovi Guides, Inc. | Systems and methods for resolving ambiguous terms in social chatter based on a user profile |
US11843676B2 (en) | 2015-01-30 | 2023-12-12 | Rovi Guides, Inc. | Systems and methods for resolving ambiguous terms based on user input |
US9865280B2 (en) | 2015-03-06 | 2018-01-09 | Apple Inc. | Structured dictation using intelligent automated assistants |
US11231904B2 (en) | 2015-03-06 | 2022-01-25 | Apple Inc. | Reducing response latency of intelligent automated assistants |
US11087759B2 (en) | 2015-03-08 | 2021-08-10 | Apple Inc. | Virtual assistant activation |
US9886953B2 (en) | 2015-03-08 | 2018-02-06 | Apple Inc. | Virtual assistant activation |
US10311871B2 (en) | 2015-03-08 | 2019-06-04 | Apple Inc. | Competing devices responding to voice triggers |
US10529332B2 (en) | 2015-03-08 | 2020-01-07 | Apple Inc. | Virtual assistant activation |
US9721566B2 (en) | 2015-03-08 | 2017-08-01 | Apple Inc. | Competing devices responding to voice triggers |
US10567477B2 (en) | 2015-03-08 | 2020-02-18 | Apple Inc. | Virtual assistant continuity |
US9899019B2 (en) | 2015-03-18 | 2018-02-20 | Apple Inc. | Systems and methods for structured stem and suffix language models |
US9842105B2 (en) | 2015-04-16 | 2017-12-12 | Apple Inc. | Parsimonious continuous-space phrase representations for natural language processing |
US10083688B2 (en) | 2015-05-27 | 2018-09-25 | Apple Inc. | Device voice control for selecting a displayed affordance |
US11127397B2 (en) | 2015-05-27 | 2021-09-21 | Apple Inc. | Device voice control |
US10127220B2 (en) | 2015-06-04 | 2018-11-13 | Apple Inc. | Language identification from short strings |
US10356243B2 (en) | 2015-06-05 | 2019-07-16 | Apple Inc. | Virtual assistant aided communication with 3rd party service in a communication session |
US10101822B2 (en) | 2015-06-05 | 2018-10-16 | Apple Inc. | Language input correction |
US10255907B2 (en) | 2015-06-07 | 2019-04-09 | Apple Inc. | Automatic accent detection using acoustic models |
US11025565B2 (en) | 2015-06-07 | 2021-06-01 | Apple Inc. | Personalized prediction of responses for instant messaging |
US10186254B2 (en) | 2015-06-07 | 2019-01-22 | Apple Inc. | Context-based endpoint detection |
RU2632137C2 (en) * | 2015-06-30 | 2017-10-02 | Общество С Ограниченной Ответственностью "Яндекс" | Method and server of transcription of lexical unit from first alphabet in second alphabet |
US10185710B2 (en) * | 2015-06-30 | 2019-01-22 | Rakuten, Inc. | Transliteration apparatus, transliteration method, transliteration program, and information processing apparatus |
US10073832B2 (en) | 2015-06-30 | 2018-09-11 | Yandex Europe Ag | Method and system for transcription of a lexical unit from a first alphabet into a second alphabet |
US20170228360A1 (en) * | 2015-06-30 | 2017-08-10 | Rakuten, Inc. | Transliteration apparatus, transliteration method, transliteration program, and information processing apparatus |
EP3318979A4 (en) * | 2015-06-30 | 2019-03-13 | Rakuten, Inc. | Transliteration processing device, transliteration processing method, transliteration processing program and information processing device |
US10747498B2 (en) | 2015-09-08 | 2020-08-18 | Apple Inc. | Zero latency digital assistant |
US11500672B2 (en) | 2015-09-08 | 2022-11-15 | Apple Inc. | Distributed personal assistant |
US10671428B2 (en) | 2015-09-08 | 2020-06-02 | Apple Inc. | Distributed personal assistant |
US9697820B2 (en) | 2015-09-24 | 2017-07-04 | Apple Inc. | Unit-selection text-to-speech synthesis using concatenation-sensitive neural networks |
US11010550B2 (en) | 2015-09-29 | 2021-05-18 | Apple Inc. | Unified language modeling framework for word prediction, auto-completion and auto-correction |
US10366158B2 (en) | 2015-09-29 | 2019-07-30 | Apple Inc. | Efficient word encoding for recurrent neural network language models |
US11587559B2 (en) | 2015-09-30 | 2023-02-21 | Apple Inc. | Intelligent device identification |
US10691473B2 (en) | 2015-11-06 | 2020-06-23 | Apple Inc. | Intelligent automated assistant in a messaging environment |
US11526368B2 (en) | 2015-11-06 | 2022-12-13 | Apple Inc. | Intelligent automated assistant in a messaging environment |
US10354652B2 (en) | 2015-12-02 | 2019-07-16 | Apple Inc. | Applying neural network language models to weighted finite state transducers for automatic speech recognition |
US10049668B2 (en) | 2015-12-02 | 2018-08-14 | Apple Inc. | Applying neural network language models to weighted finite state transducers for automatic speech recognition |
US10169079B2 (en) | 2015-12-11 | 2019-01-01 | International Business Machines Corporation | Task status tracking and update system |
US10223066B2 (en) | 2015-12-23 | 2019-03-05 | Apple Inc. | Proactive assistance based on dialog communication between devices |
US10446143B2 (en) | 2016-03-14 | 2019-10-15 | Apple Inc. | Identification of voice inputs providing credentials |
US9934775B2 (en) | 2016-05-26 | 2018-04-03 | Apple Inc. | Unit-selection text-to-speech synthesis based on predicted concatenation parameters |
US9972304B2 (en) | 2016-06-03 | 2018-05-15 | Apple Inc. | Privacy preserving distributed evaluation framework for embedded personalized systems |
US10249300B2 (en) | 2016-06-06 | 2019-04-02 | Apple Inc. | Intelligent list reading |
US11069347B2 (en) | 2016-06-08 | 2021-07-20 | Apple Inc. | Intelligent automated assistant for media exploration |
US10049663B2 (en) | 2016-06-08 | 2018-08-14 | Apple, Inc. | Intelligent automated assistant for media exploration |
US10354011B2 (en) | 2016-06-09 | 2019-07-16 | Apple Inc. | Intelligent automated assistant in a home environment |
US11037565B2 (en) | 2016-06-10 | 2021-06-15 | Apple Inc. | Intelligent digital assistant in a multi-tasking environment |
US10733993B2 (en) | 2016-06-10 | 2020-08-04 | Apple Inc. | Intelligent digital assistant in a multi-tasking environment |
US10490187B2 (en) | 2016-06-10 | 2019-11-26 | Apple Inc. | Digital assistant providing automated status report |
US10192552B2 (en) | 2016-06-10 | 2019-01-29 | Apple Inc. | Digital assistant providing whispered speech |
US10509862B2 (en) | 2016-06-10 | 2019-12-17 | Apple Inc. | Dynamic phrase expansion of language input |
US10067938B2 (en) | 2016-06-10 | 2018-09-04 | Apple Inc. | Multilingual word prediction |
US11152002B2 (en) | 2016-06-11 | 2021-10-19 | Apple Inc. | Application integration with a digital assistant |
US10942702B2 (en) | 2016-06-11 | 2021-03-09 | Apple Inc. | Intelligent device arbitration and control |
US10580409B2 (en) | 2016-06-11 | 2020-03-03 | Apple Inc. | Application integration with a digital assistant |
US10297253B2 (en) | 2016-06-11 | 2019-05-21 | Apple Inc. | Application integration with a digital assistant |
US10521466B2 (en) | 2016-06-11 | 2019-12-31 | Apple Inc. | Data driven natural language event detection and classification |
US10269345B2 (en) | 2016-06-11 | 2019-04-23 | Apple Inc. | Intelligent task discovery |
US10089072B2 (en) | 2016-06-11 | 2018-10-02 | Apple Inc. | Intelligent device arbitration and control |
US20170371850A1 (en) * | 2016-06-22 | 2017-12-28 | Google Inc. | Phonetics-based computer transliteration techniques |
US10902215B1 (en) * | 2016-06-30 | 2021-01-26 | Facebook, Inc. | Social hash for language models |
US10902221B1 (en) * | 2016-06-30 | 2021-01-26 | Facebook, Inc. | Social hash for language models |
US10269353B2 (en) | 2016-08-30 | 2019-04-23 | Tata Consultancy Services Limited | System and method for transcription of spoken words using multilingual mismatched crowd unfamiliar with a spoken language |
US10474753B2 (en) | 2016-09-07 | 2019-11-12 | Apple Inc. | Language identification using recurrent neural networks |
US10553215B2 (en) | 2016-09-23 | 2020-02-04 | Apple Inc. | Intelligent automated assistant |
US10043516B2 (en) | 2016-09-23 | 2018-08-07 | Apple Inc. | Intelligent automated assistant |
US11281993B2 (en) | 2016-12-05 | 2022-03-22 | Apple Inc. | Model and ensemble compression for metric learning |
US10593346B2 (en) | 2016-12-22 | 2020-03-17 | Apple Inc. | Rank-reduced token representation for automatic speech recognition |
US11204787B2 (en) | 2017-01-09 | 2021-12-21 | Apple Inc. | Application integration with a digital assistant |
US10417266B2 (en) | 2017-05-09 | 2019-09-17 | Apple Inc. | Context-aware ranking of intelligent response suggestions |
US10332518B2 (en) | 2017-05-09 | 2019-06-25 | Apple Inc. | User interface for correcting recognition errors |
US10395654B2 (en) | 2017-05-11 | 2019-08-27 | Apple Inc. | Text normalization based on a data-driven learning network |
US10755703B2 (en) | 2017-05-11 | 2020-08-25 | Apple Inc. | Offline personal assistant |
US10847142B2 (en) | 2017-05-11 | 2020-11-24 | Apple Inc. | Maintaining privacy of personal information |
US10726832B2 (en) | 2017-05-11 | 2020-07-28 | Apple Inc. | Maintaining privacy of personal information |
US10789945B2 (en) | 2017-05-12 | 2020-09-29 | Apple Inc. | Low-latency intelligent automated assistant |
US10410637B2 (en) | 2017-05-12 | 2019-09-10 | Apple Inc. | User-specific acoustic models |
US11405466B2 (en) | 2017-05-12 | 2022-08-02 | Apple Inc. | Synchronization and task delegation of a digital assistant |
US10791176B2 (en) | 2017-05-12 | 2020-09-29 | Apple Inc. | Synchronization and task delegation of a digital assistant |
US11301477B2 (en) | 2017-05-12 | 2022-04-12 | Apple Inc. | Feedback analysis of a digital assistant |
US10482874B2 (en) | 2017-05-15 | 2019-11-19 | Apple Inc. | Hierarchical belief states for digital assistants |
US10810274B2 (en) | 2017-05-15 | 2020-10-20 | Apple Inc. | Optimizing dialogue policy decisions for digital assistants using implicit feedback |
US10403278B2 (en) | 2017-05-16 | 2019-09-03 | Apple Inc. | Methods and systems for phonetic matching in digital assistant services |
US11217255B2 (en) | 2017-05-16 | 2022-01-04 | Apple Inc. | Far-field extension for digital assistant services |
US10311144B2 (en) | 2017-05-16 | 2019-06-04 | Apple Inc. | Emoji word sense disambiguation |
US10303715B2 (en) | 2017-05-16 | 2019-05-28 | Apple Inc. | Intelligent automated assistant for media exploration |
US10657328B2 (en) | 2017-06-02 | 2020-05-19 | Apple Inc. | Multi-task recurrent neural network architecture for efficient morphology handling in neural language modeling |
US10445429B2 (en) | 2017-09-21 | 2019-10-15 | Apple Inc. | Natural language understanding using vocabularies with compressed serialized tries |
US10755051B2 (en) | 2017-09-29 | 2020-08-25 | Apple Inc. | Rule-based natural language processing |
US11163950B2 (en) | 2017-11-01 | 2021-11-02 | International Business Machines Corporation | Recognizing transliterated words using suffix and/or prefix outputs |
US10558748B2 (en) * | 2017-11-01 | 2020-02-11 | International Business Machines Corporation | Recognizing transliterated words using suffix and/or prefix outputs |
US20190129935A1 (en) * | 2017-11-01 | 2019-05-02 | International Business Machines Corporation | Recognizing transliterated words |
US11694026B2 (en) | 2017-11-01 | 2023-07-04 | International Business Machines Corporation | Recognizing transliterated words using suffix and/or prefix outputs |
US10636424B2 (en) | 2017-11-30 | 2020-04-28 | Apple Inc. | Multi-turn canned dialog |
US10733982B2 (en) | 2018-01-08 | 2020-08-04 | Apple Inc. | Multi-directional dialog |
US10733375B2 (en) | 2018-01-31 | 2020-08-04 | Apple Inc. | Knowledge-based framework for improving natural language understanding |
US10909316B2 (en) * | 2018-02-27 | 2021-02-02 | International Business Machines Corporation | Technique for automatically splitting words |
US20200065378A1 (en) * | 2018-02-27 | 2020-02-27 | International Business Machines Corporation | Technique for automatically splitting words |
US10572586B2 (en) * | 2018-02-27 | 2020-02-25 | International Business Machines Corporation | Technique for automatically splitting words |
US10789959B2 (en) | 2018-03-02 | 2020-09-29 | Apple Inc. | Training speaker recognition models for digital assistants |
US10592604B2 (en) | 2018-03-12 | 2020-03-17 | Apple Inc. | Inverse text normalization for automatic speech recognition |
US10818288B2 (en) | 2018-03-26 | 2020-10-27 | Apple Inc. | Natural assistant interaction |
US10909331B2 (en) | 2018-03-30 | 2021-02-02 | Apple Inc. | Implicit identification of translation payload with neural machine translation |
US10928918B2 (en) | 2018-05-07 | 2021-02-23 | Apple Inc. | Raise to speak |
US11145294B2 (en) | 2018-05-07 | 2021-10-12 | Apple Inc. | Intelligent automated assistant for delivering content from user experiences |
US10984780B2 (en) | 2018-05-21 | 2021-04-20 | Apple Inc. | Global semantic word embeddings using bi-directional recurrent neural networks |
US11386266B2 (en) | 2018-06-01 | 2022-07-12 | Apple Inc. | Text correction |
US10892996B2 (en) | 2018-06-01 | 2021-01-12 | Apple Inc. | Variable latency device coordination |
US10684703B2 (en) | 2018-06-01 | 2020-06-16 | Apple Inc. | Attention aware virtual assistant dismissal |
US10984798B2 (en) | 2018-06-01 | 2021-04-20 | Apple Inc. | Voice interaction at a primary device to access call functionality of a companion device |
US10403283B1 (en) | 2018-06-01 | 2019-09-03 | Apple Inc. | Voice interaction at a primary device to access call functionality of a companion device |
US11009970B2 (en) | 2018-06-01 | 2021-05-18 | Apple Inc. | Attention aware virtual assistant dismissal |
US11495218B2 (en) | 2018-06-01 | 2022-11-08 | Apple Inc. | Virtual assistant operation in multi-device environments |
US10504518B1 (en) | 2018-06-03 | 2019-12-10 | Apple Inc. | Accelerated task performance |
US10496705B1 (en) | 2018-06-03 | 2019-12-03 | Apple Inc. | Accelerated task performance |
US10944859B2 (en) | 2018-06-03 | 2021-03-09 | Apple Inc. | Accelerated task performance |
CN113396455A (en) * | 2018-12-12 | 2021-09-14 | 谷歌有限责任公司 | Transliteration for speech recognition training and scoring |
US11417322B2 (en) * | 2018-12-12 | 2022-08-16 | Google Llc | Transliteration for speech recognition training and scoring |
US11062621B2 (en) * | 2018-12-26 | 2021-07-13 | Paypal, Inc. | Determining phonetic similarity using machine learning |
WO2020140129A1 (en) * | 2018-12-28 | 2020-07-02 | Paypal, Inc. | Algorithm for scoring partial matches between words |
US11580320B2 (en) | 2018-12-28 | 2023-02-14 | Paypal, Inc. | Algorithm for scoring partial matches between words |
US10943143B2 (en) | 2018-12-28 | 2021-03-09 | Paypal, Inc. | Algorithm for scoring partial matches between words |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US20080221866A1 (en) | Machine Learning For Transliteration | |
US8341520B2 (en) | Method and system for spell checking | |
US8626486B2 (en) | Automatic spelling correction for machine translation | |
US8762358B2 (en) | Query language determination using query terms and interface language | |
US8255376B2 (en) | Augmenting queries with synonyms from synonyms map | |
US7475063B2 (en) | Augmenting queries with synonyms selected using language statistics | |
JP5608766B2 (en) | System and method for search using queries written in a different character set and / or language than the target page | |
US8386237B2 (en) | Automatic correction of user input based on dictionary | |
US8521761B2 (en) | Transliteration for query expansion | |
US8386240B2 (en) | Domain dictionary creation by detection of new topic words using divergence value comparison | |
US7890500B2 (en) | Systems and methods for using and constructing user-interest sensitive indicators of search results | |
US8612206B2 (en) | Transliterating semitic languages including diacritics | |
US7818332B2 (en) | Query speller | |
US7835903B2 (en) | Simplifying query terms with transliteration | |
US20110184723A1 (en) | Phonetic suggestion engine | |
US9514098B1 (en) | Iteratively learning coreference embeddings of noun phrases using feature representations that include distributed word representations of the noun phrases | |
WO2009000103A1 (en) | Word probability determination | |
KR20090087435A (en) | Typing candidate generating method for enhancing typing efficiency | |
Way et al. | wEBMT: developing and validating an example-based machine translation system using the world wide web | |
Naseem et al. | A novel approach for ranking spelling error corrections for Urdu | |
EP2132657A1 (en) | Machine learning for transliteration | |
WO2007124385A2 (en) | Processing of query terms | |
KR102552811B1 (en) | System for providing cloud based grammar checker service | |
Shibli et al. | Automatic back transliteration of romanized bengali (banglish) to bengali | |
Liu et al. | Professor or screaming beast? Detecting words misuse in Chinese |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:KATRAGADDA, LALITESH;DESHPANDE, PAWAN;DUTTA, ANUPAMA;AND OTHERS;REEL/FRAME:020974/0340;SIGNING DATES FROM 20080311 TO 20080318 |
|
STCB | Information on status: application discontinuation |
Free format text: ABANDONED -- FAILURE TO RESPOND TO AN OFFICE ACTION |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044142/0357Effective date: 20170929 |