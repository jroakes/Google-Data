US8453153B1 - Loadbalancing multiple files across computing devices - Google Patents
Loadbalancing multiple files across computing devices Download PDFInfo
- Publication number
- US8453153B1 US8453153B1 US12/606,252 US60625209A US8453153B1 US 8453153 B1 US8453153 B1 US 8453153B1 US 60625209 A US60625209 A US 60625209A US 8453153 B1 US8453153 B1 US 8453153B1
- Authority
- US
- United States
- Prior art keywords
- load
- files
- file
- computing devices
- devices
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/50—Allocation of resources, e.g. of the central processing unit [CPU]
- G06F9/5005—Allocation of resources, e.g. of the central processing unit [CPU] to service a request
- G06F9/5027—Allocation of resources, e.g. of the central processing unit [CPU] to service a request the resource being a machine, e.g. CPUs, Servers, Terminals
- G06F9/505—Allocation of resources, e.g. of the central processing unit [CPU] to service a request the resource being a machine, e.g. CPUs, Servers, Terminals considering the load
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99931—Database or file accessing
- Y10S707/99937—Sorting
Definitions
- the present invention relates generally to computing devices, and more particularly, to loadbalancing of computing devices.
- the World Wide Web (“web”) contains a vast amount of information. Search engines assist users in locating desired portions of this information by cataloging web pages. Typically, in response to a user's request, the search engine returns references to documents relevant to the request.
- Search engines may base their determination of the user's interest on search terms (called a search query) entered by the user.
- the goal of the search engine is to identify links to high quality relevant results based on the search query.
- the search engine accomplishes this by matching the terms in the search query to a corpus of pre-stored web documents. Web documents that contain the user's search terms are considered “hits” and are returned to the user.
- the corpus of pre-stored web documents may be stored by the search engine as an index of terms found in the web pages.
- the index may be formed as an inverted index data structure that stores, for each term, a list of all documents that contain the term. In the context of the web, such an index can be very large, such as one covering three billion or more documents. Such a large data structure will generally not fit on one device, but instead may be partitioned over multiple devices (“back end devices”). Given a user search query to a “front end” device, the search request is then sent to the back end devices. Each back end device may perform a search over its portion of the data structure and return its results to the front end device.
- Different search requests may take varying amounts of time on different parts of the index. It is possible that the search request over one portion of the index can be completed very quickly for most of the searches while taking a longer time on different portions of the index. In this situation, the device servicing the “slow” portion of the index can become a bottleneck that may tend to slow down the other devices.
- a method includes dividing a data structure into files and determining loads for the files. The method further includes assigning the loads to computing devices such that each of the computing devices is assigned a predetermined number of files, plus or minus one file, and such that a maximum total load assigned to a computing device is approximately equal to the average load assigned to the computing devices.
- a method of assigning files to computing devices includes sorting the files based on load values estimated for each of the files and assigning the files to the computing devices such that a maximum load value assigned to a computing device is approximately equal to the average load assigned to the computing devices.
- FIG. 1 is a diagram conceptually illustrating loadbalancing as performed consistent with aspects of the invention
- FIG. 2 is an exemplary diagram of a network in which systems and methods consistent with the principles of the invention may be implemented;
- FIG. 3 is an exemplary diagram of a client or server according to an implementation consistent with the principles of the invention.
- FIG. 4 is a block diagram conceptually illustrating an implementation for loadbalancing consistent with aspects of the invention
- FIG. 5 is a flowchart illustrating exemplary processes for loadbalancing consistent with aspects of the invention
- FIG. 6 is a flowchart illustrating exemplary processes for performing portions of the processes illustrated in FIG. 5 ;
- FIGS. 7A-7D illustrate the processes of FIG. 6 applied to an exemplary set of files
- FIG. 8 is a diagram illustrating an exemplary implementation of the load balancer shown in FIG. 4 implemented in the context of an Internet search engine.
- a load balancing system allocates portions of a data structure, such as portions of a large document index, over a number of devices.
- the portions of the data structure are allocated in such a way that the processing load across the devices is generally balanced.
- FIG. 1 is a diagram conceptually illustrating loadbalancing as performed consistent with aspects of the invention.
- Data structure 110 may be a relatively large data structure, such as one that indexes a large number of documents. Access to data structure 110 may be performed by a number of devices, labeled as machines 120 - 1 through 120 - m in FIG. 1 .
- Machines 120 may be, for example, computing and/or storage devices.
- each machine 120 may be assigned a portion of data structure 110 , labeled in FIG. 1 as portions 130 - 1 through 130 - n .
- Portions 130 of data structure 110 should ideally be assigned to machines 120 in a manner that balances the computing resources (i.e., the load) used by each of machines 120 as much as possible.
- FIG. 2 is an exemplary diagram of a network 200 in which systems and methods consistent with the principles of the invention may be implemented.
- Network 200 may include multiple clients 210 connected to one or more servers 220 via a network 240 .
- Network 240 may include a local area network (LAN), a wide area network (WAN), a telephone network, such as the Public Switched Telephone Network (PSTN), an intranet, the Internet, or a combination of networks.
- PSTN Public Switched Telephone Network
- An intranet the Internet
- the Internet or a combination of networks.
- Two clients 210 and a server 220 have been illustrated as connected to network 240 for simplicity. In practice, there may be more or fewer clients and servers. Also, in some instances, a client may perform the functions of a server and a server may perform the functions of a client.
- Clients 210 may include client entities.
- An entity may be defined as a device, such as a wireless telephone, a personal computer, a personal digital assistant (PDA), a lap top, or another type of computation or communication device, a thread or process running on one of these devices, and/or an object executable by one of these device.
- Server 220 may include server entities that process, search, and/or maintain documents in a manner consistent with the principles of the invention.
- Clients 210 and server 220 may connect to network 240 via wired, wireless, or optical connections.
- Server 220 may operate as a web server and include appropriate web server software 225 .
- web server software 225 may function as a search engine, such as a query-based web page search engine.
- search engine 225 may return sets of documents to clients 210 .
- the documents may be returned to clients 210 as a web page containing a list of links to web pages that are relevant to the search query. This list of links may be ranked and displayed in an order based on the search engine's determination of relevance to the search query.
- server 220 is illustrated as a single entity, in practice, server 220 may be implemented as a number of server devices.
- FIG. 3 is an exemplary diagram of a client 210 or server 220 according to an implementation consistent with the principles of the invention.
- Client/server 210 / 220 may include a bus 310 , a processor 320 , a main memory 330 , a read only memory (ROM) 340 , a storage device 350 , one or more input devices 360 , one or more output devices 370 , and a communication interface 380 .
- Bus 310 may include one or more conductors that permit communication among the components of client/server 210 / 220 .
- Processor 320 may include any type of conventional processor or microprocessor that interprets and executes instructions.
- Main memory 330 may include a random access memory (RAM) or another type of dynamic storage device that stores information and instructions for execution by processor 320 .
- ROM 340 may include a conventional ROM device or another type of static storage device that stores static information and instructions for use by processor 320 .
- Storage device 350 may include a magnetic and/or optical recording medium and its corresponding drive.
- Input device(s) 360 may include one or more conventional mechanisms that permit a user to input information to client/server 210 / 220 , such as a keyboard, a mouse, a pen, voice recognition and/or biometric mechanisms, etc.
- Output device(s) 370 may include one or more conventional mechanisms that output information to the user, including a display, a printer, a speaker, etc.
- Communication interface 380 may include any transceiver-like mechanism that enables client/server 210 / 220 to communicate with other devices and/or systems.
- communication interface 380 may include mechanisms for communicating with another device or system via a network, such as network 240 .
- Processes consistent with principles of the invention may be implemented as software instructions which may be read into memory 330 from another computer-readable medium, such as data storage device 350 , or from another device via communication interface 380 .
- hardwired circuitry may be used in place of or in combination with software instructions to implement processes consistent with the present invention.
- implementations consistent with the principles of the invention are not limited to any specific combination of hardware circuitry and software.
- FIG. 4 is a block diagram conceptually illustrating an implementation consistent with aspects of the invention.
- m computing devices labeled as machines 405 - 1 through 405 - m , are to be used to store n files 410 - 1 through 410 - n .
- Files 410 may together define a larger data structure, such as data structure 110 .
- the term file, as used herein, is intended to broadly define a unit of information in a computer-readable format.
- Each file 410 may be associated with a load that relates to the processing resources required to service the file.
- the loads for files 410 are indicated as loads Load 1 through Load n , respectively, in FIG. 4 .
- the load for a file may be estimated based on, for example, a historical analysis of the processing resources required by the file.
- machines 405 may be computing devices that can collectively be considered to be a part of search engine 225 and server 220 .
- Load balancer 420 may assign files 410 to machines 405 . Ideally, load balancer 420 should assign the files in such a way that the average load per machine is balanced.
- each file f j has a load l(j) associated with it.
- a file 410 may be stored on multiple machines 405 .
- the load associated with each file can be arbitrarily divided over the multiple machines, assigning each machine m i only a partial load fl(j,i).
- max i FL i the maximum value of FL i , taken over the m machines, called max i FL i , is minimized and the number of files assigned to machine m i is at most s i . That is, in the best case, the loads are perfectly balanced, i.e.,
- FIG. 5 is a flowchart illustrating exemplary processes for assigning loads to machines 405 .
- the processes in FIG. 5 generally operate to assign a load of approximately A to each of machines 405 .
- a data structure such as data structure 110 may be divided into a number of files (act 501 ).
- the data structure may be divided so that each of the files is of approximately the same size and is of a size that is conveniently processed by machines 405 .
- the loads corresponding to each of the files may determined (act 502 ).
- the load of a file can be estimated based on, for example, a historical analysis of the processing resources required by the file.
- the loads may be quantified by assigning numerical values to the loads. For example, a load value of 20 may indicate a load that requires approximately twice the processing resources of a load value of 10.
- the loads may then be assigned to machines 405 such that max i FL i is minimized and the number of files assigned to a machine is at most s i (act 503 ).
- FIG. 6 is a flowchart illustrating exemplary processes for performing act 503 .
- FIGS. 7A-7D illustrate the processes of FIG. 6 applied to an exemplary set of files.
- Files 410 may be initially sorted according to increasing load of files 410 (act 601 ).
- FIG. 7A is a diagram illustrating six exemplary files f 1 to f 6 and corresponding exemplary load values, before and after sorting the files. As shown in FIG. 7A , the sorted files are arranged based on increasing loads.
- the files may next be assigned to machines 405 in sequence as long as no file “fills” its machine (act 602 ).
- the files are assigned in a round-robin sequence to the machines.
- a file is said to “fill” its machine when the load of the file, when assigned to the machine, increases the load of the machine to Average.
- a machine can be said to be “filled” or “not available” if the load assigned to the machine is equal to or greater than Average. Otherwise, the machine is available.
- FIG. 7B is a diagram illustrating assigning files f 1 to f 6 to three machines, labeled m 1 to m 3 , as performed in act 602 .
- Average is equal to 37
- the file f 4 may first be assigned to m 1 , followed by f 1 being assigned to m 2 , followed by f 3 being assigned to m 3 , followed by f 2 being assigned to m 1 .
- the load corresponding to file f 5 (28) would next be scheduled to be assigned to m 2 .
- the potential combined load at this machine is greater than A (10+28 is greater than 37). Accordingly, file f 5 is not assigned to m 2 and processing proceeds to act 603 .
- a “current machine” may be selected as an available machine with a maximum number of assigned files (act 603 ).
- machine m 1 is assigned more files than machines m 2 or m 3 . Accordingly, machine m 1 is selected as the current machine.
- the next unassigned file in sorted order e.g., file f 5
- the current file may then be assigned to the current machine and as much of the load of the current file until the current machine reaches load Average or all of the load of the current file is assigned to the current machine (act 605 ).
- current file f 5 is assigned to current machine m 1 along with 9/28 of the load of f 5 .
- Machine m 1 is now filled and is unavailable. The load of f 5 , however, has not been fully assigned.
- Load balancer 420 may determine whether the whole load of the current file has been assigned (act 606 ). If so, the next unassigned file is set as the current file (act 604 ). Otherwise, load balancer 420 determines whether the remaining load of the current file fills an available machine with a maximum number of assigned files (act 607 ). If yes, this available machine is set as the current machine, (act 608 ), and the process returns to act 605 . If no, the current machine is set as an available machine with a minimum number of assigned files, (act 609 ), and the process returns to act 605 .
- the whole load of f 5 will be determined to have not been assigned in act 606 .
- the remaining load of f 5 (19/28) of l 5 , does not fill either machine m 2 or m 3 , and accordingly, the current machine is set as either machine m 2 or machine m 3 (acts 607 and 609 ). Assume m 2 is set as the current machine.
- the remainder of l 5 is then assigned to machine m 2 (act 605 ).
- the assigned state of the files is shown in FIG. 7C .
- the next unassigned file, f 6 may next be set as the current file (acts 606 , 604 ).
- the load of f 6 will then be divided between machines m 2 and m 3 .
- the final assigned state of the files and loads is shown in FIG. 7D .
- machines, m 1 , m 2 , and m 3 are assigned equal total load values.
- the number of files assigned to each machine is within one file of all the other machines. In the example of FIG. 7D , for instance, each machine is assigned two or three files.
- the processes and systems described above operate to balance loads over multiple computing devices.
- the number of files assigned to each machine will generally be equal (plus or minus at most one file).
- the loads may be processing loads associated with files that collectively define a larger data structure, such as an index of a large corpus of documents.
- FIG. 8 is a diagram illustrating an exemplary implementation of load balancer 420 implemented in the context of an Internet search engine.
- a number of users 805 may connect to a search engine 810 over a network 815 , such as the Internet.
- Search engine 810 may be a traditional search engine that returns a ranked set of documents related to a user query.
- Search engine 810 may be a general search engine, such as one based on all documents from a large collection, such as documents on the web, or a more specialized search engine, such as a news search engine.
- search engine 810 may be implemented over a specialized corpus of documents, such as a corporate document database made available over a corporate network 815 .
- search engine 810 may receive a user query and submit the search query to search component 830 .
- Search component may compare terms in the search query to document index 840 .
- Document index 840 may be distributed as a number of files, associated with processing loads, stored on multiple computing devices 845 .
- Computing devices 845 may simultaneously process the request from search component 830 .
- the files and loads may have been previously assigned by load balancer 420 such that the loads are approximately evenly distributed over computing devices 845 .
- Search component 830 may return the results of the search query to the requesting user 805 .
Abstract
A load balancer evenly distributes processing loads to multiple computing devices. A data structure may be divided into multiple files, each of which corresponds to an estimated load value. The files are assigned to the computing devices in such a way that the processing load at each of the computing devices and the number of files assigned to each of the computing devices is generally balanced.
Description
This application is a continuation of U.S. patent application Ser. No. 10/930,848, filed Sep. 1, 2004 (now U.S. Pat. No. 7,631,310), which claims priority under 35 U.S.C. §119(e) based on U.S. Provisional Application No. 60/519,631, filed Nov. 14, 2003, the disclosures of which are incorporated herein by reference.
A. Field of the Invention
The present invention relates generally to computing devices, and more particularly, to loadbalancing of computing devices.
B. Description of the Related Art
The World Wide Web (“web”) contains a vast amount of information. Search engines assist users in locating desired portions of this information by cataloging web pages. Typically, in response to a user's request, the search engine returns references to documents relevant to the request.
Search engines may base their determination of the user's interest on search terms (called a search query) entered by the user. The goal of the search engine is to identify links to high quality relevant results based on the search query. Typically, the search engine accomplishes this by matching the terms in the search query to a corpus of pre-stored web documents. Web documents that contain the user's search terms are considered “hits” and are returned to the user.
The corpus of pre-stored web documents may be stored by the search engine as an index of terms found in the web pages. The index may be formed as an inverted index data structure that stores, for each term, a list of all documents that contain the term. In the context of the web, such an index can be very large, such as one covering three billion or more documents. Such a large data structure will generally not fit on one device, but instead may be partitioned over multiple devices (“back end devices”). Given a user search query to a “front end” device, the search request is then sent to the back end devices. Each back end device may perform a search over its portion of the data structure and return its results to the front end device.
Different search requests may take varying amounts of time on different parts of the index. It is possible that the search request over one portion of the index can be completed very quickly for most of the searches while taking a longer time on different portions of the index. In this situation, the device servicing the “slow” portion of the index can become a bottleneck that may tend to slow down the other devices.
According to one aspect, a method includes dividing a data structure into files and determining loads for the files. The method further includes assigning the loads to computing devices such that each of the computing devices is assigned a predetermined number of files, plus or minus one file, and such that a maximum total load assigned to a computing device is approximately equal to the average load assigned to the computing devices.
According to another aspect, a method of assigning files to computing devices includes sorting the files based on load values estimated for each of the files and assigning the files to the computing devices such that a maximum load value assigned to a computing device is approximately equal to the average load assigned to the computing devices.
The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate one or more embodiments of the invention and, together with the description, explain the invention. In the drawings,
The following detailed description of the invention refers to the accompanying drawings. The detailed description does not limit the invention.
As described herein, a load balancing system allocates portions of a data structure, such as portions of a large document index, over a number of devices. The portions of the data structure are allocated in such a way that the processing load across the devices is generally balanced.
Input device(s) 360 may include one or more conventional mechanisms that permit a user to input information to client/server 210/220, such as a keyboard, a mouse, a pen, voice recognition and/or biometric mechanisms, etc. Output device(s) 370 may include one or more conventional mechanisms that output information to the user, including a display, a printer, a speaker, etc. Communication interface 380 may include any transceiver-like mechanism that enables client/server 210/220 to communicate with other devices and/or systems. For example, communication interface 380 may include mechanisms for communicating with another device or system via a network, such as network 240.
Processes consistent with principles of the invention may be implemented as software instructions which may be read into memory 330 from another computer-readable medium, such as data storage device 350, or from another device via communication interface 380. Alternatively, hardwired circuitry may be used in place of or in combination with software instructions to implement processes consistent with the present invention. Thus, implementations consistent with the principles of the invention are not limited to any specific combination of hardware circuitry and software.
Each file 410 may be associated with a load that relates to the processing resources required to service the file. The loads for files 410 are indicated as loads Load1 through Loadn, respectively, in FIG. 4 . The load for a file may be estimated based on, for example, a historical analysis of the processing resources required by the file. In one implementation, machines 405 may be computing devices that can collectively be considered to be a part of search engine 225 and server 220.
Before describing the operation of load balancer 420, it will be helpful to more formally describe the relationships of machines 405, files 410, and the loads associated with files 410. Given m machines m1, . . . , mm (i.e., machines 405) and n files f1, . . . , fn (i.e., files 410), assume that each machine mi can store si many files such that
and each file fj has a load l(j) associated with it. A
This value, which represents an average file load per machine, will be referred to hereafter as the “Average” load.
A data structure, such as data structure 110, may be divided into a number of files (act 501). For example, the data structure may be divided so that each of the files is of approximately the same size and is of a size that is conveniently processed by machines 405. The loads corresponding to each of the files may determined (act 502). As mentioned, the load of a file can be estimated based on, for example, a historical analysis of the processing resources required by the file. The loads may be quantified by assigning numerical values to the loads. For example, a load value of 20 may indicate a load that requires approximately twice the processing resources of a load value of 10. The loads may then be assigned to machines 405 such that maxiFLi is minimized and the number of files assigned to a machine is at most si (act 503).
The files may next be assigned to machines 405 in sequence as long as no file “fills” its machine (act 602). In one implementation, the files are assigned in a round-robin sequence to the machines. As used herein, a file is said to “fill” its machine when the load of the file, when assigned to the machine, increases the load of the machine to Average. Thus, a machine can be said to be “filled” or “not available” if the load assigned to the machine is equal to or greater than Average. Otherwise, the machine is available.
Continuing with the example shown in FIG. 7A , FIG. 7B is a diagram illustrating assigning files f1 to f6 to three machines, labeled m1 to m3, as performed in act 602. In this example, Average is equal to 37
The file f4 may first be assigned to m1, followed by f1 being assigned to m2, followed by f3 being assigned to m3, followed by f2 being assigned to m1. The load corresponding to file f5 (28) would next be scheduled to be assigned to m2. The potential combined load at this machine, however, is greater than A (10+28 is greater than 37). Accordingly, file f5 is not assigned to m2 and processing proceeds to act 603.
A “current machine” may be selected as an available machine with a maximum number of assigned files (act 603). In the example of FIGS. 7A and 7B , machine m1 is assigned more files than machines m2 or m3. Accordingly, machine m1 is selected as the current machine. The next unassigned file in sorted order (e.g., file f5) is set as the “current file” (act 604). The current file may then be assigned to the current machine and as much of the load of the current file until the current machine reaches load Average or all of the load of the current file is assigned to the current machine (act 605). In the example of FIG. 7 , current file f5 is assigned to current machine m1 along with 9/28 of the load of f5. Machine m1 is now filled and is unavailable. The load of f5, however, has not been fully assigned.
Returning to the example of FIG. 7B , the whole load of f5 will be determined to have not been assigned in act 606. The remaining load of f5, (19/28) of l5, does not fill either machine m2 or m3, and accordingly, the current machine is set as either machine m2 or machine m3 (acts 607 and 609). Assume m2 is set as the current machine. The remainder of l5 is then assigned to machine m2 (act 605). At this point, the assigned state of the files is shown in FIG. 7C . The next unassigned file, f6, may next be set as the current file (acts 606, 604). The load of f6 will then be divided between machines m2 and m3. The final assigned state of the files and loads is shown in FIG. 7D . As shown, machines, m1, m2, and m3 are assigned equal total load values. Additionally, the number of files assigned to each machine is within one file of all the other machines. In the example of FIG. 7D , for instance, each machine is assigned two or three files.
The processes and systems described above operate to balance loads over multiple computing devices. In addition to balancing loads, the number of files assigned to each machine will generally be equal (plus or minus at most one file). In one implementation, the loads may be processing loads associated with files that collectively define a larger data structure, such as an index of a large corpus of documents.
The processes and systems described above work particularly well with “greedy” assignment algorithms. In a greedy assignment algorithm, requests for processing resources, such as requests to access a file stored at a machine, are always sent to the machine with the least total request load of all the machines that are assigned the file applicable to the request.
In operation, search engine 810 may receive a user query and submit the search query to search component 830. Search component may compare terms in the search query to document index 840. Document index 840 may be distributed as a number of files, associated with processing loads, stored on multiple computing devices 845. Computing devices 845 may simultaneously process the request from search component 830. The files and loads may have been previously assigned by load balancer 420 such that the loads are approximately evenly distributed over computing devices 845. Search component 830 may return the results of the search query to the requesting user 805.
Techniques for evenly distributing loads to multiple computing devices were described.
It will be apparent to one of ordinary skill in the art that aspects of the invention, as described above, may be implemented in many different forms of software, firmware, and hardware in the implementations illustrated in the figures. The actual software code or specialized control hardware used to implement aspects consistent with the present invention is not limiting of the present invention. Thus, the operation and behavior of the aspects were described without reference to the specific software code—it being understood that a person of ordinary skill in the art would be able to design software and control hardware to implement the aspects based on the description herein.
The foregoing description of preferred embodiments of the present invention provides illustration and description, but is not intended to be exhaustive or to limit the invention to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the invention. For example, although many of the operations described above were described in a particular order, many of the operations are amenable to being performed simultaneously or in different orders.
No element, act, or instruction used in the present application should be construed as critical or essential to the invention unless explicitly described as such. Also, as used herein, the article “a” is intended to potentially allow for one or more items. Where only one item is intended, the term “one” or similar language is used. Further, the phrase “based on” is intended to mean “based, at least in part, on” unless explicitly stated otherwise. The scope of the invention is defined by the claims and their equivalents.
Claims (17)
1. A method comprising:
determining, by one or more processors associated with one or more server devices, loads for a plurality of files, where the load of a file represents a measure of processing resources required for processing the file;
sorting, by one or more processors associated with the one or more server devices, the plurality of files, based on the determined loads, to create a sorted order;
determining, by one or more processors associated with the one or more server devices, a first load for the plurality of files based on the determined loads for the plurality of files;
assigning, by one or more processors associated with the one or more server devices and based on the sorted order, approximately a same number of the plurality of files to a plurality of computing devices, the assigning occurring until assignment of one file, of the plurality of files, causes a load of one computing device, of the plurality of computing devices, to equal or exceed the determined first load, the assigning including:
assigning a partial load of a particular file, of the plurality of files, to the one computing device when the assignment of the one file causes the load of the one computing device to equal or exceed the determined first load, and
assigning a remainder load of the particular file to another computing device of the plurality of computing devices; and
storing the assigned files in the plurality of computing devices based on the assigning.
2. The method of claim 1 , further comprising:
dividing a data structure into the plurality of files.
3. The method of claim 2 , where the data structure corresponds to a document index, and
where the method further comprises:
performing a search using the document index.
4. The method of claim 1 , where the partial load corresponds to a load amount that causes a load of the one computing device to equal the determined first load.
5. The method of claim 1 , where the assigning occurs in a round-robin sequence.
6. The method of claim 1 , where the determining the first load includes:
summing the loads for the plurality of files to obtain a value, and
dividing the value by a value corresponding to a quantity of computing devices, in the plurality of computing devices, to obtain the first load.
7. The method of claim 1 , where determining the loads for the plurality of files includes:
determining the loads for the plurality of files based on a historical analysis of processing resources used for processing the plurality of files.
8. A system comprising:
one or more server devices to:
determine loads for a plurality of files, where the load of a file represents a measure of processing resources required for processing the file,
sort the plurality of files, based on the determined loads, to create a sorted order,
determine a first load for the plurality of files based on the determined loads for the plurality of files,
assign, based on the sorted order, approximately a same number of the plurality of files to a plurality of computing devices, until an assignment of one file, of the plurality of files, causes a load of one computing device, of the plurality of computing devices, to equal or exceed the determined first load, where, when assigning, the one or more server devices are to:
assign a partial load of a particular file, of the plurality of files, to the one computing device after the assignment of the one file causes the load of the one computing device to equal or exceed the determined first load, and
assign a remainder load of the particular file to another computing device of the plurality of computing devices, and
store the assigned files in the plurality of computing devices.
9. The system of claim 8 , where the plurality of computing devices is included in the one or more server devices.
10. The system of claim 8 , where at least one of the one or more server devices includes a search engine.
11. The system of claim 8 , where the one or more server devices are further to:
divide a data structure into the plurality of files.
12. The system of claim 11 , where the data structure corresponds to a document index, and
where the one or more server devices are further to:
perform a search using the document index.
13. The system of claim 8 , where the partial load corresponds to a load amount that causes a load of the one computing device to equal the determined first load.
14. The system of claim 8 , where the one or more server devices are to assign approximately the same number of the plurality of files to the plurality of computing devices in a round-robin sequence.
15. The system of claim 8 , where, when determining the first load, the one or more server devices are to:
sum the loads for the plurality of files to obtain a value, and
divide the value by a value corresponding to a quantity of computing devices, in the plurality of computing devices, to obtain the first load.
16. One or more memory devices including one or more instructions executable by one or more processors, the one or more instructions including:
one or more instructions that, when executed by the one or more processors, cause the one or more processors to:
compute load values for a plurality of files based on historical analyses of processing resources used to process the plurality of files;
sort the plurality of files, based on the load values determined for each of the plurality of files, to create a sorted order;
determine a first load value for the plurality of files based on the determined load values for the plurality of files; and
assign, based on the sorted order, approximately a same number of the plurality of files to a plurality of computing devices, until an assignment of one file, of the plurality of files, causes a load of one computing device, of the plurality of computing devices, to equal or exceed the determined first load, where the one or more instructions that cause the one or more processors to assign further include:
one or more instructions that cause the one or more processors to:
assign a partial load of a particular file, of the plurality of files, to the one computing device after the assignment of the one file causes the load of the one computing device to equal or exceed the determined first load, and
assign a remainder load of the particular file to another computing device of the plurality of computing devices.
17. The one or more memory devices of claim 16 , where the partial load corresponds to a load amount that causes a load of the one computing device to equal the determined first load.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/606,252 US8453153B1 (en) | 2003-11-14 | 2009-10-27 | Loadbalancing multiple files across computing devices |
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US51963103P | 2003-11-14 | 2003-11-14 | |
US10/930,848 US7631310B1 (en) | 2003-11-14 | 2004-09-01 | Loadbalancing multiple files across computing devices |
US12/606,252 US8453153B1 (en) | 2003-11-14 | 2009-10-27 | Loadbalancing multiple files across computing devices |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/930,848 Continuation US7631310B1 (en) | 2003-11-14 | 2004-09-01 | Loadbalancing multiple files across computing devices |
Publications (1)
Publication Number | Publication Date |
---|---|
US8453153B1 true US8453153B1 (en) | 2013-05-28 |
Family
ID=41394384
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/930,848 Active 2027-03-26 US7631310B1 (en) | 2003-11-14 | 2004-09-01 | Loadbalancing multiple files across computing devices |
US12/606,252 Active 2025-10-31 US8453153B1 (en) | 2003-11-14 | 2009-10-27 | Loadbalancing multiple files across computing devices |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/930,848 Active 2027-03-26 US7631310B1 (en) | 2003-11-14 | 2004-09-01 | Loadbalancing multiple files across computing devices |
Country Status (1)
Country | Link |
---|---|
US (2) | US7631310B1 (en) |
Families Citing this family (60)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20060242647A1 (en) * | 2005-04-21 | 2006-10-26 | Kimbrel Tracy J | Dynamic application placement under service and memory constraints |
US8584122B2 (en) * | 2006-03-31 | 2013-11-12 | Ebay Inc. | Batch scheduling |
US8837465B2 (en) | 2008-04-02 | 2014-09-16 | Twilio, Inc. | System and method for processing telephony sessions |
US8306021B2 (en) | 2008-04-02 | 2012-11-06 | Twilio, Inc. | System and method for processing telephony sessions |
WO2010040010A1 (en) | 2008-10-01 | 2010-04-08 | Twilio Inc | Telephony web event system and method |
US8509415B2 (en) | 2009-03-02 | 2013-08-13 | Twilio, Inc. | Method and system for a multitenancy telephony network |
CN102415068B (en) | 2009-03-02 | 2015-09-02 | 特维里奥公司 | For the method and system of many tenants telephone network |
US8582737B2 (en) | 2009-10-07 | 2013-11-12 | Twilio, Inc. | System and method for running a multi-module telephony application |
US9210275B2 (en) | 2009-10-07 | 2015-12-08 | Twilio, Inc. | System and method for running a multi-module telephony application |
US8638781B2 (en) | 2010-01-19 | 2014-01-28 | Twilio, Inc. | Method and system for preserving telephony session state |
US9459925B2 (en) | 2010-06-23 | 2016-10-04 | Twilio, Inc. | System and method for managing a computing cluster |
US20120208495A1 (en) | 2010-06-23 | 2012-08-16 | Twilio, Inc. | System and method for monitoring account usage on a platform |
US9459926B2 (en) | 2010-06-23 | 2016-10-04 | Twilio, Inc. | System and method for managing a computing cluster |
US9338064B2 (en) | 2010-06-23 | 2016-05-10 | Twilio, Inc. | System and method for managing a computing cluster |
US9590849B2 (en) | 2010-06-23 | 2017-03-07 | Twilio, Inc. | System and method for managing a computing cluster |
US8416923B2 (en) | 2010-06-23 | 2013-04-09 | Twilio, Inc. | Method for providing clean endpoint addresses |
US8838707B2 (en) | 2010-06-25 | 2014-09-16 | Twilio, Inc. | System and method for enabling real-time eventing |
US8649268B2 (en) | 2011-02-04 | 2014-02-11 | Twilio, Inc. | Method for processing telephony sessions of a network |
WO2012162397A1 (en) | 2011-05-23 | 2012-11-29 | Twilio, Inc. | System and method for connecting a communication to a client |
US20140044123A1 (en) | 2011-05-23 | 2014-02-13 | Twilio, Inc. | System and method for real time communicating with a client application |
US9648006B2 (en) | 2011-05-23 | 2017-05-09 | Twilio, Inc. | System and method for communicating with a client application |
WO2013044138A1 (en) | 2011-09-21 | 2013-03-28 | Twilio, Inc. | System and method for authorizing and connecting application developers and users |
US10182147B2 (en) | 2011-09-21 | 2019-01-15 | Twilio Inc. | System and method for determining and communicating presence information |
US9495227B2 (en) | 2012-02-10 | 2016-11-15 | Twilio, Inc. | System and method for managing concurrent events |
US9602586B2 (en) | 2012-05-09 | 2017-03-21 | Twilio, Inc. | System and method for managing media in a distributed communication network |
US9240941B2 (en) | 2012-05-09 | 2016-01-19 | Twilio, Inc. | System and method for managing media in a distributed communication network |
US20130304928A1 (en) | 2012-05-09 | 2013-11-14 | Twilio, Inc. | System and method for managing latency in a distributed telephony network |
US9247062B2 (en) | 2012-06-19 | 2016-01-26 | Twilio, Inc. | System and method for queuing a communication session |
US8737962B2 (en) | 2012-07-24 | 2014-05-27 | Twilio, Inc. | Method and system for preventing illicit use of a telephony platform |
US8738051B2 (en) | 2012-07-26 | 2014-05-27 | Twilio, Inc. | Method and system for controlling message routing |
US8948356B2 (en) | 2012-10-15 | 2015-02-03 | Twilio, Inc. | System and method for routing communications |
US8938053B2 (en) | 2012-10-15 | 2015-01-20 | Twilio, Inc. | System and method for triggering on platform usage |
US9253254B2 (en) | 2013-01-14 | 2016-02-02 | Twilio, Inc. | System and method for offering a multi-partner delegated platform |
US9282124B2 (en) | 2013-03-14 | 2016-03-08 | Twilio, Inc. | System and method for integrating session initiation protocol communication in a telecommunications platform |
US9001666B2 (en) | 2013-03-15 | 2015-04-07 | Twilio, Inc. | System and method for improving routing in a distributed communication platform |
US9160696B2 (en) | 2013-06-19 | 2015-10-13 | Twilio, Inc. | System for transforming media resource into destination device compatible messaging format |
US9338280B2 (en) | 2013-06-19 | 2016-05-10 | Twilio, Inc. | System and method for managing telephony endpoint inventory |
US9225840B2 (en) | 2013-06-19 | 2015-12-29 | Twilio, Inc. | System and method for providing a communication endpoint information service |
US9483328B2 (en) | 2013-07-19 | 2016-11-01 | Twilio, Inc. | System and method for delivering application content |
US9137127B2 (en) | 2013-09-17 | 2015-09-15 | Twilio, Inc. | System and method for providing communication platform metadata |
US9338018B2 (en) | 2013-09-17 | 2016-05-10 | Twilio, Inc. | System and method for pricing communication of a telecommunication platform |
US9274858B2 (en) | 2013-09-17 | 2016-03-01 | Twilio, Inc. | System and method for tagging and tracking events of an application platform |
US20150081400A1 (en) * | 2013-09-19 | 2015-03-19 | Infosys Limited | Watching ARM |
US9325624B2 (en) | 2013-11-12 | 2016-04-26 | Twilio, Inc. | System and method for enabling dynamic multi-modal communication |
US9553799B2 (en) | 2013-11-12 | 2017-01-24 | Twilio, Inc. | System and method for client communication in a distributed telephony network |
US9344573B2 (en) | 2014-03-14 | 2016-05-17 | Twilio, Inc. | System and method for a work distribution service |
US9226217B2 (en) | 2014-04-17 | 2015-12-29 | Twilio, Inc. | System and method for enabling multi-modal communication |
US9774687B2 (en) | 2014-07-07 | 2017-09-26 | Twilio, Inc. | System and method for managing media and signaling in a communication platform |
US9246694B1 (en) | 2014-07-07 | 2016-01-26 | Twilio, Inc. | System and method for managing conferencing in a distributed communication network |
US9251371B2 (en) | 2014-07-07 | 2016-02-02 | Twilio, Inc. | Method and system for applying data retention policies in a computing platform |
US9516101B2 (en) | 2014-07-07 | 2016-12-06 | Twilio, Inc. | System and method for collecting feedback in a multi-tenant communication platform |
US9749428B2 (en) | 2014-10-21 | 2017-08-29 | Twilio, Inc. | System and method for providing a network discovery service platform |
US9477975B2 (en) | 2015-02-03 | 2016-10-25 | Twilio, Inc. | System and method for a media intelligence platform |
US10419891B2 (en) | 2015-05-14 | 2019-09-17 | Twilio, Inc. | System and method for communicating through multiple endpoints |
US9948703B2 (en) | 2015-05-14 | 2018-04-17 | Twilio, Inc. | System and method for signaling through data storage |
US10659349B2 (en) | 2016-02-04 | 2020-05-19 | Twilio Inc. | Systems and methods for providing secure network exchanged for a multitenant virtual private cloud |
US10063713B2 (en) | 2016-05-23 | 2018-08-28 | Twilio Inc. | System and method for programmatic device connectivity |
US10686902B2 (en) | 2016-05-23 | 2020-06-16 | Twilio Inc. | System and method for a multi-channel notification service |
US10387207B2 (en) * | 2016-12-06 | 2019-08-20 | International Business Machines Corporation | Data processing |
US11075987B1 (en) * | 2017-06-12 | 2021-07-27 | Amazon Technologies, Inc. | Load estimating content delivery network |
Citations (17)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5202982A (en) | 1990-03-27 | 1993-04-13 | Sun Microsystems, Inc. | Method and apparatus for the naming of database component files to avoid duplication of files |
US5727197A (en) | 1995-11-01 | 1998-03-10 | Filetek, Inc. | Method and apparatus for segmenting a database |
US5864863A (en) | 1996-08-09 | 1999-01-26 | Digital Equipment Corporation | Method for parsing, indexing and searching world-wide-web pages |
US5963944A (en) | 1996-12-30 | 1999-10-05 | Intel Corporation | System and method for distributing and indexing computerized documents using independent agents |
US6138025A (en) * | 1998-02-26 | 2000-10-24 | Nortel Networks Limited | Method for distributing paging load in a cellular wireless communication system and system within which such method is implemented |
US6230164B1 (en) | 1997-05-09 | 2001-05-08 | Alcatel Usa Sourcing, L.P. | Communication system with rapid database synchronization |
US20020069241A1 (en) * | 2000-12-06 | 2002-06-06 | Girija Narlikar | Method and apparatus for client-side proxy selection |
US20020078184A1 (en) | 2000-12-18 | 2002-06-20 | Eiji Ujyo | Record medium, multicast delivery method and multicast receiving method |
US20020099844A1 (en) | 2000-08-23 | 2002-07-25 | International Business Machines Corporation | Load balancing and dynamic control of multiple data streams in a network |
US20020194526A1 (en) | 2001-01-29 | 2002-12-19 | Ulrich Thomas R. | Dynamic redistribution of parity groups |
US20030145093A1 (en) | 2001-03-19 | 2003-07-31 | Elan Oren | System and method for peer-to-peer file exchange mechanism from multiple sources |
US20030195940A1 (en) * | 2002-04-04 | 2003-10-16 | Sujoy Basu | Device and method for supervising use of shared storage by multiple caching servers |
US20040019655A1 (en) | 2002-07-23 | 2004-01-29 | Hitachi, Ltd. | Method for forming virtual network storage |
US20040073639A1 (en) | 2002-09-06 | 2004-04-15 | Tony Basoglu | Method of load balancing across two or more servers in a computer network |
US20040236798A1 (en) | 2001-09-11 | 2004-11-25 | Sudhir Srinivasan | Migration of control in a distributed segmented file system |
US6857012B2 (en) | 2000-10-26 | 2005-02-15 | Intel Corporation | Method and apparatus for initializing a new node in a network |
US7054927B2 (en) | 2001-01-29 | 2006-05-30 | Adaptec, Inc. | File system metadata describing server directory information |
-
2004
- 2004-09-01 US US10/930,848 patent/US7631310B1/en active Active
-
2009
- 2009-10-27 US US12/606,252 patent/US8453153B1/en active Active
Patent Citations (17)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5202982A (en) | 1990-03-27 | 1993-04-13 | Sun Microsystems, Inc. | Method and apparatus for the naming of database component files to avoid duplication of files |
US5727197A (en) | 1995-11-01 | 1998-03-10 | Filetek, Inc. | Method and apparatus for segmenting a database |
US5864863A (en) | 1996-08-09 | 1999-01-26 | Digital Equipment Corporation | Method for parsing, indexing and searching world-wide-web pages |
US5963944A (en) | 1996-12-30 | 1999-10-05 | Intel Corporation | System and method for distributing and indexing computerized documents using independent agents |
US6230164B1 (en) | 1997-05-09 | 2001-05-08 | Alcatel Usa Sourcing, L.P. | Communication system with rapid database synchronization |
US6138025A (en) * | 1998-02-26 | 2000-10-24 | Nortel Networks Limited | Method for distributing paging load in a cellular wireless communication system and system within which such method is implemented |
US20020099844A1 (en) | 2000-08-23 | 2002-07-25 | International Business Machines Corporation | Load balancing and dynamic control of multiple data streams in a network |
US6857012B2 (en) | 2000-10-26 | 2005-02-15 | Intel Corporation | Method and apparatus for initializing a new node in a network |
US20020069241A1 (en) * | 2000-12-06 | 2002-06-06 | Girija Narlikar | Method and apparatus for client-side proxy selection |
US20020078184A1 (en) | 2000-12-18 | 2002-06-20 | Eiji Ujyo | Record medium, multicast delivery method and multicast receiving method |
US20020194526A1 (en) | 2001-01-29 | 2002-12-19 | Ulrich Thomas R. | Dynamic redistribution of parity groups |
US7054927B2 (en) | 2001-01-29 | 2006-05-30 | Adaptec, Inc. | File system metadata describing server directory information |
US20030145093A1 (en) | 2001-03-19 | 2003-07-31 | Elan Oren | System and method for peer-to-peer file exchange mechanism from multiple sources |
US20040236798A1 (en) | 2001-09-11 | 2004-11-25 | Sudhir Srinivasan | Migration of control in a distributed segmented file system |
US20030195940A1 (en) * | 2002-04-04 | 2003-10-16 | Sujoy Basu | Device and method for supervising use of shared storage by multiple caching servers |
US20040019655A1 (en) | 2002-07-23 | 2004-01-29 | Hitachi, Ltd. | Method for forming virtual network storage |
US20040073639A1 (en) | 2002-09-06 | 2004-04-15 | Tony Basoglu | Method of load balancing across two or more servers in a computer network |
Non-Patent Citations (7)
Title |
---|
Azar et al., "Ancient and new algorithims for load balancing in the Lp Norm", 2001, Springer-Verlag New York Inc., pp. 422-441. |
Badue et al., "Distributed processing using partitioned inverted files", 2001, IEEE, pp. 1-12. |
Chen et al., "Approximation algorithms for data distribution with load balancing of web servers", 2001, IEEE, pp. 1-8. |
Co-pending U.S. Appl. No. 10/930,848, filed Sep. 1, 2004 entitled "Loadbalancing Multiple Files Across Computing Devices" Monika H. Henzinger, 33 pages. |
Distributed Processing Using Partitioned Inverted Files 2001, IEEE Badue et al. * |
Moura et al., "Efficient distributed algorithms to build inverted files", 1999, ACM, pp. 105-112. |
Zomaya et al., "Observation on using Genetic algorithms for dynamic load balancing", 2001, IEEE, pp. 899-911. |
Also Published As
Publication number | Publication date |
---|---|
US7631310B1 (en) | 2009-12-08 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8453153B1 (en) | Loadbalancing multiple files across computing devices | |
US11314822B2 (en) | Interface for a universal search | |
US10152520B1 (en) | Ranking documents based on user behavior and/or feature data | |
CA2286097C (en) | Data summariser | |
US7624047B1 (en) | Managing server load by varying responses to requests for dynamically-generated web pages | |
US8176056B1 (en) | Determining quality of linked documents | |
US7987172B1 (en) | Minimizing visibility of stale content in web searching including revising web crawl intervals of documents | |
US6167398A (en) | Information retrieval system and method that generates weighted comparison results to analyze the degree of dissimilarity between a reference corpus and a candidate document | |
US6567806B1 (en) | System and method for implementing hash-based load-balancing query processing in a multiprocessor database system | |
Robertson et al. | The TREC 2002 Filtering Track Report. | |
US9129004B2 (en) | Multi-interval quicksort algorithm for complex objects | |
US20110179023A1 (en) | Methods and Apparatus for Employing Usage Statistics in Document Retrieval | |
US6993400B2 (en) | System and method for real-time assignment of jobs to production cells | |
US8977630B1 (en) | Personalizing search results | |
US20090012833A1 (en) | Search engine for most helpful employees | |
US20030225763A1 (en) | Self-improving system and method for classifying pages on the world wide web | |
JP2009505292A (en) | Ranking function that uses the biased click distance of documents on the network | |
US20110041075A1 (en) | Separating reputation of users in different roles | |
EP1626339B1 (en) | Data processing system and method for assigning objects to processing units | |
EP1654647B1 (en) | A method of assigning objects to processing units | |
US8719276B1 (en) | Ranking nodes in a linked database based on node independence | |
CN108984582A (en) | A kind of inquiry request processing method | |
JP3275813B2 (en) | Document search apparatus, method and recording medium | |
EP1612672B1 (en) | A data processing system for assigning objects to processing units | |
US11822875B2 (en) | Automatically evaluating summarizers |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044695/0115Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |