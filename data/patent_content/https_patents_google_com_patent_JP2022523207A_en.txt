JP2022523207A - Systems and methods for generating pyramid layer architectures - Google Patents
Systems and methods for generating pyramid layer architectures Download PDFInfo
- Publication number
- JP2022523207A JP2022523207A JP2021549673A JP2021549673A JP2022523207A JP 2022523207 A JP2022523207 A JP 2022523207A JP 2021549673 A JP2021549673 A JP 2021549673A JP 2021549673 A JP2021549673 A JP 2021549673A JP 2022523207 A JP2022523207 A JP 2022523207A
- Authority
- JP
- Japan
- Prior art keywords
- model
- pyramid
- output
- computing system
- feature
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/004—Artificial life, i.e. computing arrangements simulating life
- G06N3/006—Artificial life, i.e. computing arrangements simulating life based on simulated virtual individual or collective life forms, e.g. social simulations or particle swarm optimisation [PSO]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/082—Learning methods modifying the architecture, e.g. adding, deleting or silencing nodes or connections
Abstract
ピラミッドレイヤのアーキテクチャを生成するためのコンピューティングシステムについて開示する。コンピューティングシステムは、バックボーンモデルによって出力された複数の入力特徴表現を受信し、それに応答して、複数の出力特徴表現を出力するピラミッドレイヤのための新規アーキテクチャを生成するように構成されたコントローラモデルを含み得る。複数の入力特徴表現は、複数の異なる入力解像度を有してよく、複数の出力特徴表現は、複数の異なる出力解像度を有し得る。コンピューティングシステムは、複数の反復を実施するように構成され得る。各反復について、コンピューティングシステムは、コントローラモデルの出力として、新規ピラミッドレイヤアーキテクチャを受信し、バックボーンモデルと、新規ピラミッドレイヤアーキテクチャを有する1つまたは複数のピラミッドレイヤとを含む機械学習済みピラミッド状特徴モデルの1つまたは複数の性能特性を評価してよい。A computing system for generating a pyramid layer architecture is disclosed. The computing system is a controller model configured to receive multiple input feature representations output by the backbone model and in response to generate a new architecture for the pyramid layer that outputs multiple output feature representations. May include. A plurality of input feature representations may have a plurality of different input resolutions and a plurality of output feature representations may have a plurality of different output resolutions. The computing system can be configured to perform multiple iterations. For each iteration, the computing system receives a new pyramid layer architecture as the output of the controller model, a machine-learned pyramid-like feature model that includes a backbone model and one or more pyramid layers with the new pyramid layer architecture. Performance characteristics of one or more of the may be evaluated.
Description
関連出願の相互参照
本出願は、参照によって全体が本明細書に組み込まれている、2019年2月25日の出願日を有する米国仮特許出願第62/810,143号の出願利益を主張する。
Cross-reference to related applications This application claims the filing interests of US Provisional Patent Application No. 62 / 810,143 with a filing date of February 25, 2019, which is incorporated herein by reference in its entirety.
本開示は概して、ニューラルネットワークアーキテクチャに関する。より詳細には、本開示は、ピラミッドレイヤのアーキテクチャを生成するためのシステムおよび方法に関する。 The present disclosure relates generally to neural network architectures. More specifically, the present disclosure relates to systems and methods for generating pyramid layer architectures.
現在の最新の畳み込みニューラルネットワークアーキテクチャ(たとえば、オブジェクト検出を実施するのに使われるアーキテクチャ)は、手作業で設計される。この手法は成功しており、多くのベンチマークにおいて優れた性能をもたらしたが、これらのアーキテクチャは概して、最適化されていない。たとえば、RetinaNet、Mask RCNN、Fast RCNN、およびFaster RCNNのバックボーンモデルは、最新分類ネットワークにおける何年もの研究から、高度に最適化されたアーキテクチャを継承するが、それらの特徴ピラミッドネットワークは、複数のスケールにおける特徴を組み合わせ、概して見落とされ、したがって、最適化不足である。ただし、特徴ピラミッドネットワークのアーキテクチャは、大規模な、関連付けられた探索空間を表す。異なるスケールからの特徴表現を組み合わせるための可能な接続および動作は、アーキテクチャ中のレイヤの数とともに、指数関数的に大きくなる。 Current modern convolutional neural network architectures (eg, the architecture used to perform object detection) are designed by hand. Although this approach has been successful and has provided excellent performance in many benchmarks, these architectures are generally not optimized. For example, the backbone models of RetinaNet, Mask RCNN, Fast RCNN, and Faster RCNN inherit a highly optimized architecture from years of research in the latest classification networks, but their feature pyramid networks are on multiple scales. Combined with the features in, it is generally overlooked and therefore under-optimized. However, the architecture of the feature pyramid network represents a large, associated exploration space. The possible connections and behaviors for combining feature representations from different scales grow exponentially with the number of layers in the architecture.
本開示の実施形態の態様および利点が、以下の記述において部分的に説明され、または記述から学ぶことができ、または実施形態の実践を通して学ぶことができる。 The embodiments and advantages of the embodiments of the present disclosure can be partially described or learned from the description in the following description, or can be learned through the practice of the embodiments.
本開示の1つの例示的態様は、1つまたは複数のプロセッサと、バックボーンモデルによって出力された複数の入力特徴表現を受信し、それに応答して、複数の出力特徴表現を出力するピラミッドレイヤのための新規アーキテクチャを生成するように構成されたコントローラモデルとを含み得るコンピューティングシステムを対象とする。入力特徴表現の大多数は、複数の異なる入力解像度を有し得る。複数の出力特徴表現は、複数の異なる出力解像度を有し得る。コンピューティングシステムは、1つまたは複数のプロセッサによって実行されると、コンピューティングシステムに動作を実施させる命令をまとめて記憶する1つまたは複数の非一時的コンピュータ可読媒体を含み得る。動作は、複数の反復の各々について、コントローラモデルの出力として、新規ピラミッドレイヤアーキテクチャを受信し、バックボーンモデルと、新規ピラミッドレイヤアーキテクチャを有する1つまたは複数のピラミッドレイヤとを含む機械学習済みピラミッド状特徴モデルの1つまたは複数の性能特性を評価することを含み得る。 One exemplary embodiment of the present disclosure is for a pyramid layer that receives one or more processors and multiple input feature representations output by the backbone model and outputs multiple output feature representations in response. It targets computing systems that may include controller models configured to generate new architectures for. The majority of input feature representations can have multiple different input resolutions. Multiple output feature representations may have multiple different output resolutions. A computing system, when executed by one or more processors, may include one or more non-temporary computer-readable media that collectively store instructions that cause the computing system to perform operations. The behavior is a machine-learned pyramid-like feature that receives a new pyramid layer architecture as output of the controller model for each of the multiple iterations and includes a backbone model and one or more pyramid layers with the new pyramid layer architecture. It may include evaluating the performance characteristics of one or more of the models.
本開示の別の例示的態様は、1つまたは複数のプロセッサと、入力を受信し、入力を受信したことに応答して、出力を出力するように構成された機械学習済みモデルとを含み得るコンピューティングシステムを対象とし、機械学習済みモデルは、バックボーンモデルと、次々に順に積み重ねられた複数のピラミッドレイヤとを含む。バックボーンモデルは、入力を受信し、初期の複数の出力特徴表現を生成するように構成され得る。複数のピラミッドレイヤの各ピラミッドレイヤは、バックボーンモデルまたは以前の順次ピラミッドレイヤから、複数の異なる解像度を有するそれぞれの複数の入力特徴表現を受信し、同じ複数の異なる解像度を有するそれぞれの複数の出力特徴表現を生成するように構成され得る。コンピューティングシステムは、1つまたは複数のプロセッサによって実行されると、コンピューティングシステムに動作を実施させる命令をまとめて記憶する1つまたは複数の非一時的コンピュータ可読媒体を含み得る。動作は、機械学習済みモデルに入力を入力し、機械学習済みモデルの出力として、出力を受信することを含み得る。 Another exemplary embodiment of the disclosure may include one or more processors and a machine-learned model configured to receive an input and output an output in response to the reception of the input. For computing systems, machine-learned models include backbone models and multiple pyramid layers stacked one after the other. The backbone model can be configured to receive inputs and generate multiple initial output feature representations. Each pyramid layer of multiple pyramid layers receives multiple input feature representations of each with different resolutions from the backbone model or previous sequential pyramid layers, and each of multiple output features with the same multiple different resolutions. It can be configured to produce a representation. A computing system, when executed by one or more processors, may include one or more non-temporary computer-readable media that collectively store instructions that cause the computing system to perform operations. The operation may include inputting an input to the machine-learned model and receiving the output as the output of the machine-learned model.
本開示の別の例示的態様は、バックボーンモデルによって出力されたピラミッド状特徴表現のセットを処理するピラミッドレイヤのアーキテクチャを生成するためのコンピュータ実装方法を対象とする。この方法は、複数の反復の各々について、1つまたは複数のコンピューティングデバイスによって、新規ピラミッドレイヤアーキテクチャをコントローラモデルの出力として受信するステップを含み得る。コントローラモデルは、バックボーンモデルによって出力された複数の入力特徴表現を受信し、それに応答して、複数の出力特徴表現を出力するように構成されるピラミッドレイヤのための新規アーキテクチャを生成するように構成され得る。複数の入力特徴表現は、複数の異なる入力解像度を有してよく、複数の出力特徴表現が複数の異なる出力解像度を有する。方法は、1つまたは複数のコンピューティングデバイスによって、バックボーンモデルと、新規ピラミッドレイヤアーキテクチャを有する1つまたは複数のピラミッドレイヤとを含む機械学習済みピラミッド状特徴モデルの1つまたは複数の性能特性を評価するステップを含み得る。 Another exemplary embodiment of the disclosure is directed to a computer implementation method for generating a pyramid layer architecture that processes a set of pyramidal feature representations output by a backbone model. This method may include receiving the new pyramid layer architecture as the output of the controller model by one or more computing devices for each of the iterations. The controller model is configured to receive multiple input feature representations output by the backbone model and, in response, generate a new architecture for the pyramid layer configured to output multiple output feature representations. Can be done. The plurality of input feature representations may have a plurality of different input resolutions, and the plurality of output feature representations may have a plurality of different output resolutions. The method evaluates one or more performance characteristics of a machine-learned pyramid-like feature model that includes a backbone model and one or more pyramid layers with a new pyramid layer architecture by one or more computing devices. May include steps to do.
本開示の他の態様は、様々なシステム、装置、非一時的コンピュータ可読媒体、ユーザインターフェース、および電子デバイスを対象とする。 Other aspects of the present disclosure cover various systems, devices, non-temporary computer readable media, user interfaces, and electronic devices.
本開示の様々な実施形態のこれらおよび他の特徴、態様、および利点は、以下の説明および添付の特許請求の範囲を参照してより良く理解されよう。添付の図面は、本明細書に組み込まれるとともにその一部をなし、本開示の例示的実施形態を示し、記述と一緒に、関連原理を説明するのに役立つ。 These and other features, embodiments, and advantages of the various embodiments of the present disclosure will be better understood with reference to the following description and the appended claims. The accompanying drawings are incorporated into and are part of this specification, show exemplary embodiments of the present disclosure, and, together with description, serve to explain the relevant principles.
当業者を対象とする、実施形態の詳細な考察が本明細書において説明され、本明細書は、添付の図面を参照する。 A detailed discussion of embodiments for those of skill in the art is described herein, which is by reference to the accompanying drawings.
複数の図面にわたって繰り返される参照番号は、様々な実装形態において同じ特徴を識別することを意図している。 Reference numbers that are repeated across multiple drawings are intended to identify the same feature in different implementations.
概して、本開示は、複数のスケールにおける特徴表現を組み合わせる特徴ピラミッドネットワークのピラミッドレイヤのためのアーキテクチャを最適化するために反復探索を実施するシステムおよび方法を対象とする。たとえば、強化学習および/または進化論的技法が、反復探索を実施するのに使われてよい。本開示によって提案される探索空間は、異なるスケールにおける特徴表現を組み合わせるための可能なクロススケール接続をカバーするように設計される。探索は、繰り返し適用され得るアーキテクチャを見つけるように制約されてもよい。その結果、得られたアーキテクチャは、積重ね可能であってよく、かつ/または常時オブジェクト検出(「早期終了」)に使うことができる。 In general, the present disclosure relates to systems and methods for performing iterative searches to optimize the architecture for the pyramid layer of a feature pyramid network that combines feature representations at multiple scales. For example, reinforcement learning and / or evolutionary techniques may be used to perform iterative searches. The search space proposed by the present disclosure is designed to cover possible cross-scale connections for combining feature representations at different scales. The search may be constrained to find an architecture that can be applied repeatedly. As a result, the resulting architecture may be stackable and / or can be used for constant object detection (“early termination”).
より具体的には、いくつかの実装形態では、ピラミッドレイヤの異なるアーキテクチャが、進化論的方法を通して反復して生成され、または、たとえば、強化学習コンテキストにおいて学習され得る。たとえば、コントローラモデルが、強化学習を使って、所与の探索空間中で新規モデルアーキテクチャを選択またはそうでなければ生成するようにトレーニングされ得る。コントローラモデルは、直近に提案されたアーキテクチャを有する1つまたは複数のピラミッドレイヤを含む機械学習済みモデルの1つまたは複数の性能特性に基づく報酬に基づいてトレーニングされ得る。したがって、試行錯誤を通して、特定の性能特性向けにピラミッドレイヤアーキテクチャが設計または最適化され得る。 More specifically, in some implementations, different architectures of the pyramid layer can be iteratively generated through evolutionary methods or, for example, learned in a reinforcement learning context. For example, a controller model can be trained to use reinforcement learning to select or otherwise generate a new model architecture in a given search space. The controller model can be trained on a reward based on one or more performance characteristics of a machine-learned model containing one or more pyramid layers with the most recently proposed architecture. Therefore, through trial and error, the pyramid layer architecture can be designed or optimized for specific performance characteristics.
得られたアーキテクチャは、軽量であり柔軟であり得る。第1に、得られたアーキテクチャは、性能を向上するために繰り返し適用され得るという点で、スケーラブルであり得る。第2に、得られたアーキテクチャは、ResNet-10、ResNet-50、ResNet-101、およびAmoebaNetなど、様々なバックボーンモデルとうまくいくことができる。第3に、得られたアーキテクチャは、様々なバックボーンモデルと組み合わされると、速さ、正確さ、または他の特性に関連した、優れた性能特性を達成することができる。さらに、学習されたアーキテクチャは、オブジェクト検出、オブジェクト認識、画像分類、他の視覚処理タスク、または他の非視覚機械学習タスクを含む、様々なタスク用に構成されてよい。 The resulting architecture can be lightweight and flexible. First, the resulting architecture can be scalable in that it can be repeatedly applied to improve performance. Second, the resulting architecture can work with a variety of backbone models such as ResNet-10, ResNet-50, ResNet-101, and AmoebaNet. Third, the resulting architecture can be combined with various backbone models to achieve excellent performance characteristics related to speed, accuracy, or other characteristics. In addition, the trained architecture may be configured for a variety of tasks, including object detection, object recognition, image classification, other visual processing tasks, or other non-visual machine learning tasks.
したがって、本開示の一態様によると、コンピューティングシステムは、ピラミッドレイヤ用の新規アーキテクチャを反復して生成するように構成されたコントローラモデルを含み得る。ピラミッドレイヤは、バックボーンモデル(または、複数の積重ねピラミッドレイヤがある場合は以前の順次ピラミッドレイヤ)によって出力された複数の入力特徴表現(たとえば、特徴マップ)を受信するように構成されてよい。複数の入力特徴表現は、複数の異なる入力解像度を有し得る。ピラミッドレイヤは、入力特徴表現に関して、畳み込みおよび/または他の動作を実施するように構成され得る。具体的には、入力特徴表現は、同じまたは異なる解像度を有する2つの特徴表現の組合せを含む、他の特徴表現(たとえば、入力特徴表現、内部特徴表現、および/または出力特徴表現)との組合せを行うこと(たとえば、それらと合計し、大域プールすることなど)ができる。特徴表現に対してピラミッドレイヤによって実施される動作の結果、ピラミッドレイヤは、複数の出力特徴表現を生成し、出力し得る。複数の出力特徴表現は、複数の異なる出力解像度を有し得る。 Therefore, according to one aspect of the present disclosure, a computing system may include a controller model configured to iteratively generate a new architecture for the pyramid layer. Pyramid layers may be configured to receive multiple input feature representations (eg, feature maps) output by the backbone model (or previous sequential pyramid layers if there are multiple stacked pyramid layers). A plurality of input feature representations may have a plurality of different input resolutions. Pyramid layers may be configured to perform convolution and / or other actions with respect to the input feature representation. Specifically, the input feature representation is a combination with other feature representations (eg, input feature representation, internal feature representation, and / or output feature representation), including a combination of two feature representations with the same or different resolutions. Can be done (for example, summing with them and global pooling). As a result of the actions performed by the pyramid layer on the feature representation, the pyramid layer can generate and output multiple output feature representations. Multiple output feature representations may have multiple different output resolutions.
いくつかの実装形態では、ピラミッドレイヤによって生成される新規特徴表現は、ピラミッドレイヤアーキテクチャに対して内部である1つまたは複数の内部特徴表現を含み得る。内部特徴表現は、入力特徴表現および出力特徴表現とは別個であってよい。内部特徴表現は、他の内部特徴表現、入力特徴表現、および/または出力特徴表現と接続されてよい。複数の出力特徴表現のうちの少なくとも1つは、内部特徴表現のうちの1つまたは複数に基づいて生成され得る。 In some implementations, the new feature representation produced by the pyramid layer may contain one or more internal feature representations that are internal to the pyramid layer architecture. The internal feature representation may be separate from the input feature representation and the output feature representation. The internal feature representation may be connected to other internal feature representations, input feature representations, and / or output feature representations. At least one of the plurality of output feature representations may be generated based on one or more of the internal feature representations.
いくつかの実装形態では、複数の探索反復の各々について、コントローラモデルは、新規ピラミッドアーキテクチャを生成するために複数のマージセルを構築し、付加することによって、新規ピラミッドレイヤアーキテクチャを生成するように構成されてよい。各マージセルは、2つの入力特徴表現および1つの出力特徴表現を有し得る。このことにより、ピラミッドレイヤの様々な特徴表現の間のクロススケール接続を生成することができ、意味論的に強力な特徴表現を結果としてもたらし得る。 In some implementations, for each of multiple search iterations, the controller model is configured to generate a new pyramid layer architecture by building and adding multiple merged cells to generate a new pyramid architecture. It's okay. Each merged cell can have two input feature representations and one output feature representation. This allows cross-scale connections between the various feature representations of the pyramid layer to be created, resulting in semantically powerful feature representations.
より具体的には、マージセルのうちの1つを構築するために、コントローラモデルは、複数の入力特徴表現を含む利用可能な特徴表現のセットから、第1の入力特徴表現を選択するように構成されてよい。コントローラモデルは、利用可能な特徴表現のセットのうちの、第2の、異なる入力特徴表現を選択してよい。コントローラモデルは、複数の異なる出力解像度のうちの第1の解像度を選択し、第1の入力特徴表現を第2の、異なる入力特徴表現と組み合わせて、第1の解像度をもつ新規特徴表現を生成する演算を選択してよい。たとえば、演算は、和演算および大域プーリング演算など、様々な適切なバイナリ演算を含み得る。複数のマージセルが、このようにして別々および/または順次に構築されてよい。複数のマージセルは次いで、ピラミッドレイヤアーキテクチャを生成するように付加され得る。したがって、コントローラモデルは、マージセルを、新規ピラミッドレイヤアーキテクチャを生成するのに使うことができる。 More specifically, in order to build one of the merged cells, the controller model is configured to select the first input feature representation from a set of available feature representations containing multiple input feature representations. May be done. The controller model may select a second, different input feature representation from the set of feature representations available. The controller model selects the first resolution of several different output resolutions and combines the first input feature representation with the second, different input feature representations to generate a new feature representation with the first resolution. You may select the operation to be performed. For example, the operation may include various suitable binary operations such as sum and global pooling operations. Multiple merge cells may be constructed separately and / or sequentially in this way. Multiple merge cells can then be added to generate a pyramid layer architecture. Therefore, the controller model can use the merged cells to generate a new pyramid layer architecture.
いくつかの実装形態では、マージセルのうちの少なくともいくつかについて、コントローラモデルは、次のマージセルにおける潜在的選択のために、利用可能な特徴表現のセットに、新規特徴表現を追加してよい。したがって、いくつかの事例では、新たに作成された特徴表現が、次のマージセル中の別の特徴表現とマージされ得る。そのような動作は、様々なクロススケール接続の発見または学習を容易にし得る。 In some implementations, for at least some of the merged cells, the controller model may add new feature representations to the set of feature representations available for potential selection in the next merged cell. Therefore, in some cases, the newly created feature representation may be merged with another feature representation in the next merge cell. Such behavior can facilitate the discovery or learning of various cross-scale connections.
いくつかの実装形態では、第1の入力特徴表現および第2の、異なる入力特徴表現は、異なるそれぞれの解像度を有するように制約され得る。たとえば、第1の入力特徴表現および第2の、異なる入力特徴表現は、複数の入力解像度のピラミッド状構造化内で非隣接である異なるそれぞれの解像度を有し得る。したがって、ピラミッドレイヤの新規アーキテクチャは、異なるスケールにおける特徴表現を組み合わせるクロススケール接続を有するように制約されてよい。 In some implementations, the first input feature representation and the second, different input feature representations can be constrained to have different resolutions, respectively. For example, the first input feature representation and the second different input feature representation may have different resolutions that are non-adjacent within a pyramidal structure of multiple input resolutions. Therefore, the new architecture of the pyramid layer may be constrained to have cross-scale connections that combine feature representations at different scales.
いくつかの実装形態では、複数のマージセルのうちの少なくともいくつかについて、コントローラモデルは、マージセルによって生成される新規特徴表現が複数の出力表現のうちの1つを形成し得るように、出力解像度のうちの1つを選択するように制約されてよい。したがって、ピラミッドレイヤのアーキテクチャは、所定の出力解像度を有するように制約されてよい。さらに、いくつかの実装形態では、入力解像度のうちの2つ以上が、出力解像度のうちの少なくとも2つと同一となるように制約されてよい。そのような特徴は、ピラミッドレイヤの積重ねを容易にし得る。 In some implementations, for at least some of the merged cells, the controller model will have the output resolution so that the new feature representation generated by the merged cell can form one of the output representations. You may be constrained to choose one of them. Therefore, the architecture of the pyramid layer may be constrained to have a given output resolution. Further, in some implementations, two or more of the input resolutions may be constrained to be identical to at least two of the output resolutions. Such features may facilitate the stacking of pyramid layers.
マージセルの数は、得られたピラミッドアーキテクチャの複雑さおよびサイズに影響し得る。マージセルの数はユーザ定義ハイパーパラメータであってよく、このパラメータは、得られたピラミッドアーキテクチャに対する増大した制御をユーザに与えることができる。ただし、他の実施形態では、マージセルの数は、得られたピラミッドアーキテクチャのサイズおよび/または複雑さが、得られたピラミッドアーキテクチャの所望の性能特性(たとえば、高速解決時間、高い正確さなど)を最適化し得るような、学習可能パラメータであってよい。 The number of merged cells can affect the complexity and size of the resulting pyramid architecture. The number of merged cells may be a user-defined hyperparameter, which can give the user greater control over the resulting pyramid architecture. However, in other embodiments, the number of merged cells is the size and / or complexity of the resulting pyramid architecture, which provides the desired performance characteristics of the resulting pyramid architecture (eg, fast resolution time, high accuracy, etc.). It may be a learnable parameter that can be optimized.
別の態様によると、介入なしで、本明細書に記載するマージセルは、他の特徴表現との出力接続が欠けている特徴表現を結果としてもたらし得る。そのような構成は概して、望ましくなく、というのは、そのような特徴表現は、ピラミッドレイヤの出力を与えずにリソースを消費するからである。この構成を防止するために、いくつかの実装形態では、コントローラモデルは、対応する解像度を有する出力特徴表現をもつ複数の出力特徴表現のうちのどれにも接続しない各特徴表現を合計するように構成されてよい。したがって、コントローラモデルは、後続特徴表現との出力接続が欠けている特徴表現の形成を防止するようにピラミッドレイヤアーキテクチャを制約またはそうでなければ修正するように構成されてよい。 According to another aspect, without intervention, the merged cells described herein can result in feature representations that lack an output connection to other feature representations. Such configurations are generally undesirable because such feature representations consume resources without giving the output of the pyramid layer. To prevent this configuration, in some implementations, the controller model should sum each feature representation that does not connect to any of the multiple output feature representations with output feature representations with the corresponding resolutions. May be configured. Therefore, the controller model may be configured to constrain or otherwise modify the pyramid layer architecture to prevent the formation of feature representations that lack an output connection to subsequent feature representations.
コンピューティングシステムは、ピラミッドレイヤアーキテクチャを改善するようにピラミッドレイヤアーキテクチャが反復して修正され、評価される一連の反復を実施するように構成されてよい。たとえば、コンピューティングシステムは、コントローラモデルの出力として、新規ピラミッドレイヤアーキテクチャを受信し、バックボーンモデルと、新規ピラミッドレイヤアーキテクチャを有する1つまたは複数のピラミッドレイヤとを含む機械学習済みピラミッド状特徴モデルの1つまたは複数の性能特性を評価してよい。例示的性能特性は、正確さ、精度、解決時間、反復もしくはフロップの数、および/またはそれらの組合せを含み得る。 The computing system may be configured to perform a series of iterations in which the pyramid layer architecture is iteratively modified and evaluated to improve the pyramid layer architecture. For example, a computing system receives a new pyramid layer architecture as the output of a controller model and is a machine-learned pyramid-like feature model that includes a backbone model and one or more pyramid layers with the new pyramid layer architecture. One or more performance characteristics may be evaluated. Illustrative performance characteristics may include accuracy, accuracy, resolution time, number of iterations or flops, and / or combinations thereof.
コンピューティングシステムは、機械学習済みピラミッド状特徴モデルの評価された性能に基づいて、アーキテクチャについての出力結果を判断することができる。一例として、いくつかの実装形態では、コントローラモデルは、強化学習エージェントを含み得る。複数の反復の各々について、コンピューティングシステムは、バックボーンモデルと、新規ピラミッドレイヤアーキテクチャを有する1つまたは複数のピラミッドレイヤとを含む機械学習済みピラミッド状特徴モデルに関連付けられた1つまたは複数の評価された性能特性に少なくとも部分的に基づいて、報酬を判断するように構成されてよい。コンピューティングシステムは、報酬に基づいて、コントローラモデルによって実装されるポリシーの1つまたは複数のパラメータを修正してよい。コントローラモデルは、ニューラルネットワーク(たとえば、回帰型ニューラルネットワーク)を含み得る。したがって、コントローラモデルは、得られた機械学習済みピラミッド状特徴モデルに関連付けられた性能特性を最大限にし、最適化し、またはそうでなければ調節するようにピラミッドアーキテクチャを設計するようにトレーニングされ得る。 The computing system can determine the output result for the architecture based on the evaluated performance of the machine-learned pyramidal feature model. As an example, in some implementations, the controller model may include a reinforcement learning agent. For each of the iterations, the computing system is evaluated one or more associated with a machine-learned pyramid-like feature model that includes a backbone model and one or more pyramid layers with a novel pyramid layer architecture. It may be configured to determine the reward based at least in part on the performance characteristics. The computing system may modify one or more parameters of the policy implemented by the controller model based on the reward. The controller model may include a neural network (eg, a recurrent neural network). Therefore, the controller model can be trained to design the pyramid architecture to maximize, optimize, or otherwise adjust the performance characteristics associated with the resulting machine-learned pyramidal feature model.
別の例として、進化論的方式では、直近に提案されたアーキテクチャの性能は、たとえば、直近に提案されたアーキテクチャを保持するか、それとも直近に提案されたアーキテクチャを破棄し、代わりに最良の以前観察されたアーキテクチャに戻るかを判断するために、最良の以前観察された性能と比較され得る。次の反復アーキテクチャを生成するために、コントローラモデルは、上述した比較に基づいて選択されたモデルに対して進化的変異を実施してよい。 As another example, in evolutionary schemes, the performance of the most recently proposed architecture, for example, either retains the most recently proposed architecture or discards the most recently proposed architecture and instead best observes it before. It can be compared to the best previously observed performance to determine if it will return to the architecture that was used. To generate the next iterative architecture, the controller model may undergo evolutionary mutations to the model selected based on the comparisons described above.
いくつかの実装形態では、機械学習済みピラミッド状特徴モデルの1つまたは複数の性能特性を評価することは、バックボーンモデルと、新規ピラミッドレイヤアーキテクチャを各々が有する複数の積重ねピラミッドレイヤとを含む機械学習済みピラミッド状特徴モデルの1つまたは複数の性能特性を評価することを含み得る。たとえば、機械学習済みモデルの評価中に、バックボーンモデルは、入力として画像をとり得る。機械学習済みモデルは、1つまたは複数のピラミッドレイヤのうちの最終ピラミッドレイヤによって出力された複数の出力特徴表現に基づいて、画像のためのオブジェクト検出、オブジェクト分類、および/または意味論的セグメント化を実施してよい。したがって、ピラミッドレイヤのアーキテクチャの性能特性は、評価され、反復して改善され得る。 In some implementations, evaluating the performance characteristics of one or more machine-learned pyramidal feature models involves machine learning, including a backbone model and multiple stacked pyramid layers, each with a new pyramid layer architecture. It may include evaluating the performance characteristics of one or more of the completed pyramidal feature models. For example, during evaluation of a machine-learned model, the backbone model may take an image as input. Machine-learned models have object detection, object classification, and / or semantic segmentation for images based on multiple output feature representations output by the final pyramid layer of one or more pyramid layers. May be carried out. Therefore, the performance characteristics of the pyramid layer architecture can be evaluated and iteratively improved.
いくつかの実施形態では、性能特性は、ピラミッドアーキテクチャが最適化または設計されている実際のタスク(たとえば、「実タスク」)を使って評価され得る。たとえば、性能特性は、ピラミッドレイヤを含む、得られたモデルをトレーニングするのに使われる画像のセットを使って評価され得る。ただし、他の実施形態では、性能特性は、比較的短いトレーニング時間を有するとともに実タスクとも相関するプロキシタスクを使って評価され得る。たとえば、プロキシタスクを使って性能特性を評価することは、実タスクよりも低解像度の画像(たとえば、画像のダウンサンプリングされたバージョン)を使うこと、バックボーンモデルのより小さいバージョンを使うこと、および/または概して実タスクを使ってモデルをトレーニングするのに使われるはずであるよりも少ないエポックのための実タスクを評価することを含み得る。 In some embodiments, performance characteristics can be evaluated using actual tasks (eg, "real tasks") for which the pyramid architecture is optimized or designed. For example, performance characteristics can be evaluated using a set of images used to train the resulting model, including pyramid layers. However, in other embodiments, performance characteristics can be evaluated using a proxy task that has a relatively short training time and also correlates with the actual task. For example, using a proxy task to evaluate performance characteristics means using a lower resolution image (for example, a downsampled version of the image) than the actual task, using a smaller version of the backbone model, and / Or it may include evaluating real tasks for less epochs than would generally be used to train a model with real tasks.
いくつかの実装形態では、機械学習済みモデルの評価中に、機械学習済みモデルは、たとえば、「常時」オブジェクト検出のための早期終了を実施するために、1つまたは複数のピラミッドレイヤのうちのいずれか1つによって出力されたそれぞれの複数の出力特徴表現に基づいて予測を生成し得る。言い換えると、推論中、モデルは、バックボーンモデルに対して内部であるピラミッドレイヤからソリューション(たとえば、オブジェクト検出情報)を生成し得る。たとえば、モデル内の複数のピラミッドレイヤからの出力は、ソリューション(たとえば、オブジェクト検出情報)を含み得る。このプロパティは、推論中の計算リソースまたは待ち時間が懸念事項であるときに望ましい場合がある。さらに、「常時」オブジェクト検出が、推論時に使うべきリソースの量を動的に調節するのに使われてよい。 In some implementations, during the evaluation of a machine-learned model, the machine-learned model is out of one or more pyramid layers, for example, to perform early termination for "always" object detection. Predictions can be generated based on each of the multiple output feature representations output by any one. In other words, during inference, the model may generate a solution (eg, object detection information) from a pyramid layer that is internal to the backbone model. For example, the output from multiple pyramid layers in the model may include a solution (eg, object detection information). This property may be desirable when computational resources or latency during inference are a concern. In addition, "always" object detection may be used to dynamically adjust the amount of resources that should be used during inference.
本開示のシステムおよび方法は、いくつかの技術的効果および利益を提供する。たとえば、本明細書に記載する実装形態は、他の、手作業で生成されたモデルアーキテクチャと比較して、正確さ/待ち時間トレードオフを改善したモデルアーキテクチャを生成することができる。さらに、本明細書に記載する実装形態に従って生成される積重ね可能モデルアーキテクチャは、推論時に使うべき計算リソースを動的に調節するのに使うことができ、「常時」オブジェクト検出をできるようにする。本明細書に記載する様々な例示的実装形態は、オブジェクト検出、または画像分類もしくは意味論的セグメント化などの他の視覚処理タスクに特に適応されるモデルアーキテクチャを生成する。 The systems and methods of the present disclosure provide some technical benefits and benefits. For example, the implementations described herein can generate model architectures with improved accuracy / latency trade-offs compared to other manually generated model architectures. In addition, the stackable model architecture generated according to the implementations described herein can be used to dynamically adjust the computational resources to be used during inference, enabling "always" object detection. The various exemplary implementations described herein generate model architectures that are specifically adapted for object detection or other visual processing tasks such as image classification or semantic segmentation.
一例として、本開示のシステムおよび方法は、アプリケーション、ブラウザプラグインのコンテキスト内に、または他のコンテキストに、含められるか、またはそうでなければその中で利用され得る。したがって、いくつかの実装形態では、本開示のモデルは、ラップトップ、タブレット、またはスマートフォンなどのユーザコンピューティングデバイスに含まれるか、またはそうでなければユーザコンピューティングデバイスによって記憶され、実装され得る。さらに別の例として、モデルは、クライアント-サーバ関係に従ってユーザコンピューティングデバイスと通信するサーバコンピューティングデバイスに含まれるか、またはそうでなければ、サーバコンピューティングデバイスによって記憶され、実装され得る。たとえば、モデルは、ウェブサービス(たとえば、ウェブeメールサービス)の一部分として、サーバコンピューティングデバイスによって実装され得る。 As an example, the systems and methods of the present disclosure may be included or otherwise utilized within the context of an application, browser plug-in, or other context. Accordingly, in some implementations, the model of the present disclosure may be included in a user computing device such as a laptop, tablet, or smartphone, or otherwise stored and implemented by the user computing device. As yet another example, the model can be included in a server computing device that communicates with the user computing device according to a client-server relationship, or otherwise stored and implemented by the server computing device. For example, the model can be implemented by a server computing device as part of a web service (eg, a web email service).
ここで図面を参照して、本開示の例示的実施形態についてさらに詳しく論じる。 Here, with reference to the drawings, the exemplary embodiments of the present disclosure will be discussed in more detail.
例示的デバイスおよびシステム
図1Aは、本開示の例示的実施形態による、ピラミッドレイヤのアーキテクチャを生成するための例示的コンピューティングシステムのブロック図を示す。システム100は、ネットワーク180を介して通信可能に結合されている、ユーザコンピューティングデバイス102、サーバコンピューティングシステム130、およびトレーニング用コンピューティングシステム150を含む。
Illustrative Devices and Systems Figure 1A shows a block diagram of an exemplary computing system for generating a pyramid layer architecture according to an exemplary embodiment of the present disclosure. The
ユーザコンピューティングデバイス102は、たとえば、パーソナルコンピューティングデバイス(たとえば、ラップトップもしくはデスクトップ)、モバイルコンピューティングデバイス(たとえば、スマートフォンもしくはタブレット)、ゲーム機もしくはコントローラ、装着可能コンピューティングデバイス、埋め込み型コンピューティングデバイス、または任意の他のタイプのコンピューティングデバイスなど、どのタイプのコンピューティングデバイスであってもよい。
The
ユーザコンピューティングデバイス102は、1つまたは複数のプロセッサ112およびメモリ114を含む。1つまたは複数のプロセッサ112は、どの適切な処理デバイス(たとえば、プロセッサコア、マイクロプロセッサ、ASIC、FPGA、コントローラ、マイクロコントローラなど)であってもよく、1つのプロセッサ、または動作可能に接続されている複数のプロセッサであってよい。メモリ114は、RAM、ROM、EEPROM、EPROM、フラッシュメモリデバイス、磁気ディスクなど、およびそれらの組合せのような、1つまたは複数の非一時的コンピュータ可読記憶媒体を含み得る。メモリ114は、データ116と、ユーザコンピューティングデバイス102に動作を実施させるようにプロセッサ112によって実行される命令118とを記憶することができる。
The
ユーザコンピューティングデバイス102は、1つまたは複数のコントローラモデル120を記憶するか、または含むことができる。たとえば、コントローラモデル120は、ニューラルネットワーク(たとえば、回帰型ニューラルネットワーク)または他のマルチレイヤ非線形モデルなど、機械学習済みモデルであってよく、またはそうでなければ、それらの機械学習済みモデルを含むことができる。ニューラルネットワークは、回帰型ニューラルネットワーク(たとえば、長短期メモリ回帰型ニューラルネットワーク)、順伝播型ニューラルネットワーク、または他の形のニューラルネットワークを含み得る。例示的コントローラモデル120については、図3Aおよび図3Bを参照して論じる。
The
いくつかの実装形態では、1つまたは複数のコントローラモデル120は、ネットワーク180を介してサーバコンピューティングシステム130から受信され、ユーザコンピューティングデバイスメモリ114に記憶され、次いで、1つまたは複数のプロセッサ112によって使われ、またはそうでなければ実装され得る。いくつかの実装形態では、ユーザコンピューティングデバイス102は、単一強化学習エージェントモデルの複数の並列インスタンスを実装することができる。
In some implementations, one or
追加または代替として、1つまたは複数のコントローラモデル140は、クライアント-サーバ関係に従ってユーザコンピューティングデバイス102と通信するサーバコンピューティングシステム130に含まれ、またはそうでなければ、サーバコンピューティングシステム130によって記憶され、実装され得る。たとえば、コントローラモデル140は、ウェブサービス(たとえば、強化学習シミュレーションサービス)の一部分として、サーバコンピューティングシステム130によって実装され得る。したがって、1つまたは複数のコントローラモデル120が、ユーザコンピューティングデバイス102において記憶され、実装されてよく、かつ/または1つもしくは複数のコントローラモデル140が、サーバコンピューティングシステム130において記憶され、実装されてよい。
As an addition or alternative, one or
ユーザコンピューティングデバイス102は、ユーザ入力を受信する1つまたは複数のユーザ入力構成要素122も含み得る。たとえば、ユーザ入力構成要素122は、ユーザ入力オブジェクト(たとえば、指またはスタイラス)のタッチに敏感な、タッチ感応構成要素(たとえば、タッチ感応表示画面またはタッチパッド)であってよい。タッチ感応構成要素は、仮想キーボードを実装するのに役立ち得る。他の例示的ユーザ入力構成要素は、マイクロフォン、従来のキーボード、またはユーザが通信を入れることができる他の手段を含む。
The
サーバコンピューティングシステム130は、1つまたは複数のプロセッサ132およびメモリ134を含む。1つまたは複数のプロセッサ132は、どの適切な処理デバイス(たとえば、プロセッサコア、マイクロプロセッサ、ASIC、FPGA、コントローラ、マイクロコントローラなど)であってもよく、1つのプロセッサ、または動作可能に接続されている複数のプロセッサであってよい。メモリ134は、RAM、ROM、EEPROM、EPROM、フラッシュメモリデバイス、磁気ディスクなど、およびそれらの組合せなど、1つまたは複数の非一時的コンピュータ可読記憶媒体を含み得る。メモリ134は、データ136と、サーバコンピューティングシステム130に動作を実施させるようにプロセッサ132によって実行される命令138とを記憶することができる。
The
いくつかの実装形態では、サーバコンピューティングシステム130は、1つまたは複数のサーバコンピューティングデバイスを含むか、またはそうでなければ、1つまたは複数のサーバコンピューティングデバイスによって実装される。サーバコンピューティングシステム130が複数のサーバコンピューティングデバイスを含む事例では、そのようなサーバコンピューティングデバイスは、順次コンピューティングアーキテクチャ、並列コンピューティングアーキテクチャ、またはそれらの何らかの組合せに従って動作することができる。
In some implementations, the
上述したように、サーバコンピューティングシステム130は、1つまたは複数のコントローラモデル140を記憶することができ、またはそうでなければ、1つまたは複数のコントローラモデル140を含む。たとえば、コントローラモデル140は、ニューラルネットワーク(たとえば、深層回帰型ニューラルネットワーク)または他のマルチレイヤ非線形モデルなど、様々な機械学習済みモデルであってよく、またはそうでなければ、それらの機械学習済みモデルを含むことができる。例示的コントローラモデル140については、図3Aおよび図3Bを参照して論じる。
As mentioned above, the
いくつかの実装形態では、システムおよび方法は、クラウドベースのサービスとして(たとえば、サーバコンピューティングシステム130によって)提供され得る。ユーザは、事前トレーニングまたは事前構成された強化学習エージェントモデルを提供することができる。ユーザは、シミュレートされた環境をカスタマイズするように、たとえば、ユーザが強化学習エージェントモデルを展開することを意図する実世界環境をシミュレートするように、入力および/または設定をセットし、または調節することができる。ユーザは次いで、実世界環境におけるエージェントモデルまたはその複数の異なる変形体の性能を予測および/または最適化するために、シミュレートされた環境において時間をかけて強化学習エージェントモデルの性能をシミュレートしてよい。 In some implementations, the system and method may be provided as a cloud-based service (eg, by the server computing system 130). Users can provide pre-training or pre-configured reinforcement learning agent models. The user sets or adjusts the inputs and / or settings to customize the simulated environment, for example, to simulate a real-world environment in which the user intends to deploy a reinforcement learning agent model. can do. The user then takes time to simulate the performance of the reinforcement learning agent model in the simulated environment in order to predict and / or optimize the performance of the agent model or its multiple different variants in the real world environment. It's okay.
サーバコンピューティングシステム130は、ネットワーク180を介して通信可能に結合されるトレーニング用コンピューティングシステム150との対話により、コントローラモデル140をトレーニングすることができる。トレーニング用コンピューティングシステム150は、サーバコンピューティングシステム130とは別個であってよく、またはサーバコンピューティングシステム130の一部分であってよい。
The
トレーニング用コンピューティングシステム150は、1つまたは複数のプロセッサ152およびメモリ154を含む。1つまたは複数のプロセッサ152は、どの適切な処理デバイス(たとえば、プロセッサコア、マイクロプロセッサ、ASIC、FPGA、コントローラ、マイクロコントローラなど)であってもよく、1つのプロセッサ、または動作可能に接続されている複数のプロセッサであってよい。メモリ154は、RAM、ROM、EEPROM、EPROM、フラッシュメモリデバイス、磁気ディスクなど、およびそれらの組合せなど、1つまたは複数の非一時的コンピュータ可読記憶媒体を含み得る。メモリ154は、データ156と、トレーニング用コンピューティングシステム150に動作を実施させるようにプロセッサ152によって実行される命令158とを記憶することができる。いくつかの実装形態では、トレーニング用コンピューティングシステム150は、1つまたは複数のサーバコンピューティングデバイスを含むか、またはそうでなければ、サーバコンピューティングデバイスによって実装される。
The
トレーニング用コンピューティングシステム150は、サーバコンピューティングシステム130において記憶されたコントローラモデル140を、たとえば、誤差逆伝播など、様々なトレーニングまたは学習技法を使ってトレーニングするモデル訓練器160を含み得る。いくつかの実装形態では、誤差逆伝播を実施することは、時間をかけて短縮逆伝播を実施することを含み得る。モデル訓練器160は、トレーニングされるモデルの汎化能力を向上するために、いくつかの汎化技法(たとえば、重み減衰、ドロップアウトなど)を実施することができる。
The
特に、モデル訓練器160は、トレーニングデータ142に基づいてコントローラモデル140をトレーニングまたは事前トレーニングすることができる。トレーニングデータ142は、ラベル付きおよび/またはラベルなしデータを含み得る。たとえば、トレーニングデータ142は、トレーニング用ピラミッドレイヤ設計者構造を含み得る。
In particular, the
いくつかの実装形態では、ユーザが同意を与えた場合、ユーザコンピューティングデバイス102によって(たとえば、ユーザコンピューティングデバイス102のユーザによってあらかじめ提供された通信に基づいて)トレーニング例を与えることができる。したがって、そのような実装形態では、ユーザコンピューティングデバイス102に与えられるコントローラモデル120は、ユーザコンピューティングデバイス102から受信されたユーザ固有通信データについて、トレーニング用コンピューティングシステム150によってトレーニングされ得る。いくつかの事例では、このプロセスは、モデルの個別化と呼ばれ得る。
In some implementations, if the user gives consent, a training example can be given by the user computing device 102 (eg, based on the communication previously provided by the user of the user computing device 102). Therefore, in such an implementation, the
モデル訓練器160は、所望の機能性を提供するのに使用されるコンピュータ論理を含む。モデル訓練器160は、汎用プロセッサを制御するハードウェア、ファームウェア、および/またはソフトウェアにおいて実装することができる。たとえば、いくつかの実装形態では、モデル訓練器160は、記憶デバイス上に記憶され、メモリにロードされ、1つまたは複数のプロセッサによって実行されるプログラムファイルを含む。他の実装形態では、モデル訓練器160は、RAMハードディスクまたは光学もしくは磁気媒体などの有形コンピュータ可読記憶媒体に記憶されるコンピュータ実行可能命令の1つまたは複数のセットを含む。
The
ネットワーク180は、ローカルエリアネットワーク(たとえば、イントラネット)、ワイドエリアネットワーク(たとえば、インターネット)、またはそれらの何らかの組合せなど、どのタイプの通信ネットワークであってもよく、任意の数のワイヤードまたはワイヤレスリンクを含み得る。概して、ネットワーク180を介した通信は、非常に様々な通信プロトコル(たとえば、TCP/IP、HTTP、SMTP、FTP)、符号化もしくはフォーマット(たとえば、HTML、XML)、および/または保護方式(たとえば、VPN、セキュアHTTP、SSL)を使って、どのタイプのワイヤードおよび/またはワイヤレス接続を介しても搬送することができる。
図1Aは、本開示を実装するのに使うことができる1つの例示的コンピューティングシステムを示す。他のコンピューティングシステムが使われてもよい。たとえば、いくつかの実装形態では、ユーザコンピューティングデバイス102は、モデル訓練器160およびトレーニングデータセット162を含み得る。そのような実装形態では、モデル120は、ユーザコンピューティングデバイス102においてローカルにトレーニングされることと使われることの両方が可能である。そのような実装形態のうちのいくつかでは、ユーザコンピューティングデバイス102は、ユーザ固有データに基づいてモデル120を個別化するために、モデル訓練器160を実装することができる。
FIG. 1A shows one exemplary computing system that can be used to implement the present disclosure. Other computing systems may be used. For example, in some implementations, the
図1Bは、本開示の例示的実施形態に従って実施する例示的コンピューティングデバイス10のブロック図を示す。コンピューティングデバイス10は、ユーザコンピューティングデバイスまたはサーバコンピューティングデバイスであってよい。
FIG. 1B shows a block diagram of an
コンピューティングデバイス10は、いくつかのアプリケーション(たとえば、アプリケーション1～N)を含む。各アプリケーションは、それ自体の機械学習ライブラリおよび機械学習済みモデルを含む。たとえば、各アプリケーションは、機械学習済みモデルを含み得る。例示的アプリケーションは、テキストメッセージングアプリケーション、eメールアプリケーション、ディクテーションアプリケーション、仮想キーボードアプリケーション、ブラウザアプリケーションなどを含む。
The
図1Bに示すように、各アプリケーションは、コンピューティングデバイスのいくつかの他の構成要素、たとえば、1つもしくは複数のセンサー、コンテキストマネージャ、デバイス状態構成要素、および/または追加構成要素などと通信することができる。いくつかの実装形態では、各アプリケーションは、API(たとえば、パブリックAPI)を使って、各デバイス構成要素と通信することができる。いくつかの実装形態では、各アプリケーションによって使われるAPIは、そのアプリケーションに固有である。 As shown in Figure 1B, each application communicates with some other component of the computing device, such as one or more sensors, a context manager, a device state component, and / or an additional component. be able to. In some implementations, each application can use an API (eg, a public API) to communicate with each device component. In some implementations, the API used by each application is specific to that application.
図1Cは、本開示の例示的実施形態に従って実施する例示的コンピューティングデバイス50のブロック図を示す。コンピューティングデバイス50は、ユーザコンピューティングデバイスまたはサーバコンピューティングデバイスであってよい。
FIG. 1C shows a block diagram of an
コンピューティングデバイス50は、いくつかのアプリケーション(たとえば、アプリケーション1～N)を含む。各アプリケーションは、中央インテリジェンスレイヤと通信する。例示的アプリケーションは、テキストメッセージングアプリケーション、eメールアプリケーション、ディクテーションアプリケーション、仮想キーボードアプリケーション、ブラウザアプリケーションなどを含む。いくつかの実装形態では、各アプリケーションは、API(たとえば、すべてのアプリケーションにわたる共通API)を使って、中央インテリジェンスレイヤ(およびその中に記憶されるモデル)と通信することができる。
The
中央インテリジェンスレイヤは、いくつかの機械学習済みモデルを含む。たとえば、図1Cに示すように、それぞれの機械学習済みモデル(たとえば、モデル)が、各アプリケーションに与えられ、中央インテリジェンスレイヤによって管理され得る。他の実装形態では、2つ以上のアプリケーションが、単一の機械学習済みモデルを共有することができる。たとえば、いくつかの実装形態では、中央インテリジェンスレイヤは、アプリケーションすべてに単一モデル(たとえば、単一モデル)を提供することができる。いくつかの実装形態では、中央インテリジェンスレイヤは、コンピューティングデバイス50のオペレーティングシステムに含まれるか、またはそうでなければ、オペレーティングシステムによって実装される。
The central intelligence layer contains several machine-learned models. For example, as shown in Figure 1C, each machine-learned model (eg, model) can be given to each application and managed by a central intelligence layer. In other implementations, two or more applications can share a single machine-learned model. For example, in some implementations, the central intelligence layer can provide a single model (eg, a single model) for all applications. In some implementations, the central intelligence layer is included in or otherwise implemented by the operating system of the
中央インテリジェンスレイヤは、中央デバイスデータレイヤと通信することができる。中央デバイスデータレイヤは、コンピューティングデバイス50向けのデータの集中型リポジトリであってよい。図1Cに示すように、中央デバイスデータレイヤは、コンピューティングデバイスのいくつかの他の構成要素、たとえば、1つもしくは複数のセンサー、コンテキストマネージャ、デバイス状態構成要素、および/または追加構成要素などと通信することができる。いくつかの実装形態では、中央デバイスデータレイヤは、API(たとえば、プライベートAPI)を使って、各デバイス構成要素と通信することができる。
The central intelligence layer can communicate with the central device data layer. The central device data layer may be a centralized repository of data for the
例示的モデル配置
図2は、本開示の例示的実施形態による、ピラミッドレイヤアーキテクチャを改善するためにピラミッドレイヤアーキテクチャが反復して修正され、評価される一連の反復を実施するように構成される例示的システム200を示す。システム200は、本開示の例示的実施形態によるコントローラモデル202を含み得る。コントローラモデル202は、報酬206に基づいて新規ピラミッドアーキテクチャ204を生成するように構成され得る。報酬206は、バックボーンモデルと、新規ピラミッドレイヤアーキテクチャを有する1つまたは複数のピラミッドレイヤとを含む機械学習済みピラミッド状特徴モデルに関連付けられた1つまたは複数の性能特性に少なくとも部分的に基づき得る。コンピューティングシステムは、たとえば、バックボーンモデルと、新規ピラミッドレイヤアーキテクチャ204を有する1つまたは複数のピラミッドレイヤとを含む機械学習済みピラミッド状特徴モデルの1つまたは複数の性能特性を評価することによって、新規ピラミッドアーキテクチャ204の性能評価208を実施することができる。コンピューティングシステムは、報酬206に基づいてコントローラモデル202の1つまたは複数のパラメータを修正することができる。したがって、コンピューティングシステムは、機械学習済みピラミッド状特徴モデルの性能評価208に基づいて、新規ピラミッドアーキテクチャ204についての出力結果を判断することができる。したがって、コントローラモデルは、得られた機械学習済みピラミッド状特徴モデルに関連付けられた性能特性を最大限にし、最適化し、またはそうでなければ調節するようにピラミッドアーキテクチャを設計するようにトレーニングされ得る。
Illustrative Model Arrangement Figure 2 is an exemplary embodiment of the present disclosure configured to perform a series of iterations in which the pyramid layer architecture is iteratively modified and evaluated to improve the pyramid layer architecture. The
別の例として、進化論的方式では、直近に提案されたアーキテクチャの性能は、たとえば、直近に提案されたアーキテクチャを保持するか、それとも直近に提案されたアーキテクチャを破棄し、代わりに最良の以前観察されたアーキテクチャに戻るかを判断するために、最良の以前観察された性能と比較され得る。次の反復アーキテクチャを生成するために、コントローラモデルは、上述した比較に基づいて選択されたモデルに対して進化的変異を実施してよい。 As another example, in evolutionary schemes, the performance of the most recently proposed architecture, for example, either retains the most recently proposed architecture or discards the most recently proposed architecture and instead best observes it before. It can be compared to the best previously observed performance to determine if it will return to the architecture that was used. To generate the next iterative architecture, the controller model may undergo evolutionary mutations to the model selected based on the comparisons described above.
いくつかの実装形態では、機械学習済みピラミッド状特徴モデルの1つまたは複数の性能特性を評価すること(ブロック208によって表される)は、バックボーンモデルと、新規ピラミッドレイヤアーキテクチャを各々が有する複数の積重ねピラミッドレイヤとを含む機械学習済みピラミッド状特徴モデルの1つまたは複数の性能特性を評価することを含み得る。たとえば、機械学習済みモデルの評価中に、バックボーンモデルは、入力として画像をとり得る。機械学習済みモデルは、1つまたは複数のピラミッドレイヤのうちの最終ピラミッドレイヤによって出力された複数の出力特徴表現に基づいて、画像のためのオブジェクト検出、オブジェクト分類、および/または意味論的セグメント化を実施してよい。したがって、ピラミッドレイヤのアーキテクチャの性能特性は、評価され、反復して改善され得る。 In some implementations, assessing the performance characteristics of one or more machine-learned pyramidal feature models (represented by block 208) is a backbone model and multiple pyramid layer architectures, each with a new pyramid layer architecture. It may include evaluating the performance characteristics of one or more machine-learned pyramidal feature models, including stacked pyramid layers. For example, during evaluation of a machine-learned model, the backbone model may take an image as input. Machine-learned models have object detection, object classification, and / or semantic segmentation for images based on multiple output feature representations output by the final pyramid layer of one or more pyramid layers. May be carried out. Therefore, the performance characteristics of the pyramid layer architecture can be evaluated and iteratively improved.
いくつかの実施形態では、性能特性は、ピラミッドアーキテクチャが最適化または設計されている実際のタスク(たとえば、「実タスク」)を使って評価され得る。たとえば、性能特性は、ピラミッドレイヤを含む、得られたモデルをトレーニングするのに使われる画像のグループを使って評価され得る。ただし、他の実施形態では、性能特性は、比較的短いトレーニング時間を有するとともに実タスクとも相関するプロキシタスクを使って評価され得る。たとえば、プロキシタスクを使って性能特性を評価することは、実タスクよりも低解像度の画像(たとえば、画像のダウンサンプリングされたバージョン)を使うこと、バックボーンモデルのより小さいバージョンを使うこと、および/または概して実タスクを使ってモデルをトレーニングするのに使われるはずであるよりも少ないエポックのための実タスクを評価することを含み得る。 In some embodiments, performance characteristics can be evaluated using actual tasks (eg, "real tasks") for which the pyramid architecture is optimized or designed. For example, performance characteristics can be evaluated using a group of images used to train the resulting model, including pyramid layers. However, in other embodiments, performance characteristics can be evaluated using a proxy task that has a relatively short training time and also correlates with the actual task. For example, using a proxy task to evaluate performance characteristics means using a lower resolution image (for example, a downsampled version of the image) than the actual task, using a smaller version of the backbone model, and / Or it may include evaluating real tasks for less epochs than would generally be used to train a model with real tasks.
いくつかの実装形態では、機械学習済みモデルの評価中に、機械学習済みモデルは、たとえば、「常時」オブジェクト検出のための早期終了を実施するために、1つまたは複数のピラミッドレイヤのうちのいずれか1つによって出力されたそれぞれの複数の出力特徴表現に基づいて予測を生成し得る。言い換えると、推論中、モデルは、バックボーンモデルに対して内部であるピラミッドレイヤからソリューション(たとえば、オブジェクト検出情報)を生成し得る。たとえば、モデル内の複数のピラミッドレイヤからの出力は、ソリューション(たとえば、オブジェクト検出情報)を含み得る。このプロパティは、推論中の計算リソースまたは待ち時間が懸念事項であるときに望ましい場合がある。さらに、「常時」オブジェクト検出が、推論時に使うべきリソースの量を動的に調節するのに使われてよい。 In some implementations, during the evaluation of a machine-learned model, the machine-learned model is out of one or more pyramid layers, for example, to perform early termination for "always" object detection. Predictions can be generated based on each of the multiple output feature representations output by any one. In other words, during inference, the model may generate a solution (eg, object detection information) from a pyramid layer that is internal to the backbone model. For example, the output from multiple pyramid layers in the model may include a solution (eg, object detection information). This property may be desirable when computational resources or latency during inference are a concern. In addition, "always" object detection may be used to dynamically adjust the amount of resources that should be used during inference.
図3は、本開示の例示的実施形態による、ピラミッドレイヤアーキテクチャを改善するためにピラミッドレイヤアーキテクチャが反復して修正され、評価される一連の反復を実施するように構成される例示的システム300を示す。コントローラモデル302は、報酬306に基づいて新規ピラミッドアーキテクチャ304を生成するように構成される強化学習エージェント310を含み得る。図2および図3を参照すると、コントローラモデル202、302は、たとえば、図4～図8を参照して以下で説明する追加動作を実施するように構成され得る。
FIG. 3 illustrates an
図4は、本開示の例示的実施形態によるバックボーンモデル400およびピラミッドレイヤ402を示す。ピラミッドレイヤ402は、バックボーンモデル400(または、複数の積重ねピラミッドレイヤがある場合は以前の順次ピラミッドレイヤ)によって出力された複数の入力特徴表現404(たとえば、特徴マップ)を受信するように構成されてよい。複数の入力特徴表現は、複数の異なる入力解像度を有し得る。ピラミッドレイヤは、入力特徴表現に関して、畳み込みおよび/または他の動作を実施するように構成され得る。具体的には、入力特徴表現は、同じまたは異なる解像度を有する2つの特徴表現の組合せを含む、他の特徴表現(たとえば、入力特徴表現、内部特徴表現、および/または出力特徴表現)との組合せを行うこと(たとえば、合計し、大域プールすることなど)ができる。特徴表現に対してピラミッドレイヤによって実施される動作の結果、ピラミッドレイヤは、複数の出力特徴表現を生成し、出力し得る。複数の出力特徴表現は、複数の異なる出力解像度を有し得る。
FIG. 4 shows the
本明細書の他の箇所に記載され、図4において「×N」によって示されるように、一連のピラミッドレイヤ402が次々と積み重ねられてよい(たとえば、特定のピラミッドレイヤについての入力表現は、以前の順次ピラミッドレイヤからの出力表現であってよく、特定のピラミッドレイヤによって提供される出力表現は、次の順次ピラミッドレイヤのための入力表現であってよい)。第1のピラミッドレイヤへの入力は、バックボーンモデル400中の特徴階層から直接とられた特徴であってよい。
A series of pyramid layers 402 may be stacked one after the other, as described elsewhere herein and indicated by "xN" in FIG. 4 (eg, the input representation for a particular pyramid layer was previously It may be an output representation from a sequential pyramid layer of, and the output representation provided by a particular pyramid layer may be an input representation for the next sequential pyramid layer). The input to the first pyramid layer may be a feature taken directly from the feature hierarchy in the
いくつかの実装形態では、最終ピラミッドレイヤ(および/または常時終了が可能にされる場合は中間ピラミッドレイヤ)向けの出力特徴表現は、さらなるネットワーク406への入力として与えられてよく、このネットワークは、たとえば、受信された出力表現に基づいて分類および/または回帰を実施してよい。したがって、いくつかの実装形態では、モデルのトレーニング中に、ピラミッドレイヤすべての後に、追加分類器および/またはボックス回帰ヘッド406が取り付けられてよい。推論中、ヘッド406は、最終ピラミッドレイヤ(および/または常時終了が可能にされる場合は中間ピラミッドレイヤ)によって生成された特徴表現に基づいて検出を生成し得る。
In some implementations, the output feature representation for the final pyramid layer (and / or the intermediate pyramid layer if always terminated is possible) may be given as an input to
具体的には、常時終了に関して、繰り返されるピラミッドレイヤとのスケーリングの1つの利点は、特徴ピラミッド表現が、どの所与のレイヤにおいても取得され得ることである。このことは、どの所与のピラミッドレイヤにおいても検出結果を生成し得る常時検出を可能にする。したがって、いくつかの実装形態では、トレーニング中に、ピラミッドレイヤすべての後に、分類器およびボックス回帰ヘッド406が取り付けられてよい。推論中、モデルは、どのピラミッドレイヤからも検出を生成し得る。このプロパティは、推論中に計算リソースまたは待ち時間が懸念事項であるときに望ましい場合があり、検出を生成するためにどれだけ多くのリソースを使うべきかを動的に決定し得るソリューションを与える。
Specifically, with respect to constant termination, one advantage of scaling with a repeating pyramid layer is that a feature pyramid representation can be obtained at any given layer. This allows constant detection that can produce detection results at any given pyramid layer. Therefore, in some implementations, the classifier and
一例では、入力特徴404は、{8, 16, 32, 64, 128}ピクセルという対応するストライドをもつ5つのスケール{C3, C4, C5, C6, C7}中にある。C6およびC7は、ストライド2およびストライド4の最大プーリングをC5に適用することによって作成された。入力特徴は次いで、特徴をクロススケール接続と組み合わせ、拡張特徴表現{P3, P4, P5, P6, P7}を生成するために、ピラミッドレイヤ中の一連のマージセルに渡された。ピラミッドレイヤ402の入力と出力の両方が同じスケールを有し得るので、ピラミッドレイヤ402のアーキテクチャは、スケーラブルモデルアーキテクチャを生成するように、繰り返し複製され、連結され得る。ピラミッドレイヤの数は、速さおよび正確さをトレードオフするように制御されてよい。より多くのピラミッドレイヤは概して、より高い正確さ、ただしより遅い性能を生じる。より少ないピラミッドレイヤは概して、より速い性能、ただしより低い正確さを生じる。
In one example, the
図5は、本開示の例示的実施形態による複数の特徴表現500およびマージセル502を示す。複数の探索反復の各々に対して、コントローラモデルは、新規ピラミッドアーキテクチャを生成するために複数のマージセル502を構築し、付加することによって、新規ピラミッドレイヤアーキテクチャを生成するように構成されてよい。各マージセル502は、2つの入力特徴表現および1つの出力特徴表現を有し得る。このことにより、ピラミッドレイヤの様々な特徴表現の間のクロススケール接続を生成することができ、意味論的に強力な特徴表現を結果としてもたらし得る。
FIG. 5 shows a plurality of
より具体的には、マージセル502のうちの1つを構築するために、コントローラモデルは、複数の入力特徴表現500を含む利用可能な特徴表現のセットから、第1の入力特徴表現504を選択するように構成されてよい。コントローラモデルは、利用可能な特徴表現のセットのうちの、第2の、異なる入力特徴表現506を選択してよい。コントローラモデルは、複数の異なる出力解像度のうちの第1の解像度を選択し、第1の入力特徴表現504を第2の、異なる入力特徴表現506と組み合わせて、第1の解像度をもつ新規特徴表現510を生成する演算508を選択してよい。たとえば、演算508は、和演算および大域プーリング演算など、様々な適切なバイナリ演算を含み得る。マージセル502は、畳み込み512(たとえば、3×3畳み込み)を実施するように構成され得る。複数のマージセル502が、このようにして別々および/または順次に構築されてよい。複数のマージセル502は次いで、ピラミッドレイヤアーキテクチャを生成するように付加され得る。したがって、コントローラモデルは、たとえば図6A～図6Fを参照して以下で説明するように、新規ピラミッドレイヤアーキテクチャを生成するのにマージセル502を使うことができる。
More specifically, to build one of the
いくつかの実装形態では、マージセル502のうちの少なくともいくつかについて、コントローラモデルは、次のマージセルにおける潜在的選択のために、利用可能な特徴表現のセットに、新規特徴表現を追加してよい(矢印514によって示される)。したがって、いくつかの事例では、新たに作成された特徴表現が、次のマージセル中の別の特徴表現とマージされ得る。そのような動作は、様々なクロススケール接続の発見または学習を容易にし得る。
In some implementations, for at least some of the
いくつかの実装形態では、第1の入力特徴表現504および第2の、異なる入力特徴表現506は、異なるそれぞれの解像度を有するように制約され得る。たとえば、第1の入力特徴表現504および第2の、異なる入力特徴表現506は、たとえば図6A～図7を参照して以下で説明するように、複数の入力解像度のピラミッド状構造化内で非隣接である異なるそれぞれの解像度を有し得る。したがって、ピラミッドレイヤの新規アーキテクチャは、異なるスケールにおける特徴表現を組み合わせるクロススケール接続を有するように制約されてよい。
In some implementations, the first
図6A～図6Fは、本開示の例示的実施形態による、コントローラモデルによって生成される連続ピラミッドレイヤのアーキテクチャグラフを示す。ドットは特徴表現を表し、矢印は特徴表現の間の接続を表す。入力特徴レイヤは、円で囲まれ、各グラフの左側に位置する。同じ行にある特徴表現は、同じ解像度を有し得る。解像度は、上方向に低下していく。たとえば、図6Aを参照すると、ドットの最下行602は、同じ解像度を有する特徴表現および潜在的特徴表現を表す。ドットの次の行604は、最下行602にあるドットの解像度よりも低い、同じ解像度を有する特徴表現および潜在的特徴表現を表す。この例では、出力特徴表現は、より大きい解像度を有する他の出力特徴表現との接続を形成することを許され得るだけである。
6A-6F show an architectural graph of the continuous pyramid layer generated by the controller model according to the exemplary embodiments of the present disclosure. Dots represent feature representations and arrows represent connections between feature representations. The input feature layer is circled and located on the left side of each graph. Feature representations on the same line can have the same resolution. The resolution decreases upward. For example, referring to FIG. 6A, the
図6Aは、本開示の態様による、ベースライン、または初期のピラミッド構造アーキテクチャを示す。図6B～図6Fは、本開示の態様による、様々な探索反復を使って発見されるアーキテクチャを示す。この例では、プロキシタスクが、ピラミッドアーキテクチャを評価するのに使われた。発見されたアーキテクチャは、プロキシタスクの報酬が次第に改善すると、収束した。図6Fは、他のバックボーンモデルを用いて後続実験において使われる最終的アーキテクチャを示す。図6Fに示される最終的アーキテクチャは、図7にも示される。 FIG. 6A shows a baseline, or early pyramid structure architecture, according to aspects of the present disclosure. 6B-6F show the architecture discovered using various search iterations according to aspects of the present disclosure. In this example, a proxy task was used to evaluate the pyramid architecture. The architecture discovered converged as the rewards for proxy tasks gradually improved. Figure 6F shows the final architecture used in subsequent experiments using other backbone models. The final architecture shown in Figure 6F is also shown in Figure 7.
いくつかの実装形態では、ピラミッドレイヤによって生成される新規特徴表現は、ピラミッドレイヤアーキテクチャに対して内部である1つまたは複数の内部特徴表現を含み得る。たとえば、図6Bを参照すると、ピラミッドレイヤアーキテクチャは、第1の内部特徴表現606および第2の内部特徴表現608を含み得る。内部特徴表現606、608は、入力特徴表現610、612、614および出力特徴表現616、618、620、622とは別個であってよい。
In some implementations, the new feature representation produced by the pyramid layer may contain one or more internal feature representations that are internal to the pyramid layer architecture. For example, referring to FIG. 6B, the pyramid layer architecture may include a first
内部特徴表現は、他の内部特徴表現、入力特徴表現、および/または出力特徴表現と接続されてよい。たとえば、図6Bを参照すると、第1の内部特徴表現606は、入力としての2つの入力特徴表現610、614と接続され、出力としての第2の内部特徴表現608と接続されてよい。第2の特徴表現608は、第1の内部特徴表現606の各々および入力特徴表現614のうちの1つと、入力として、および出力特徴表現618のうちの1つと、出力として接続されてよい。複数の出力特徴表現616、618、620、622のうちの少なくとも1つは、内部特徴表現606、608のうちの1つまたは複数に基づいて生成され得る。
The internal feature representation may be connected to other internal feature representations, input feature representations, and / or output feature representations. For example, referring to FIG. 6B, the first
上述したように、複数のマージセルは、ピラミッドレイヤアーキテクチャを生成するように付加されてよい。図6Bを参照すると、接続された特徴表現は、それぞれの付加されたマージセルを表し得る。たとえば、1つのマージセルでは、たとえば図5を参照して上述したように、入力特徴表現610、614のうちの2つが選択されてよい。入力特徴表現610、614は、新規特徴表現(たとえば、第1の内部特徴表現608)を生成するように組み合わされてよい。図示するように、第1の内部特徴表現608は、クロススケール接続が作成されるような、入力特徴表現610、614の一方または両方とは異なる解像度を有し得る。
As mentioned above, multiple merge cells may be added to generate a pyramid layer architecture. Referring to FIG. 6B, the connected feature representations may represent each added merge cell. For example, in one merge cell, two of the
いくつかの実装形態では、新規特徴表現が、次のマージセルにおける潜在的選択に利用可能であってよい。たとえば、図6Bを参照すると、第1の内部特徴表現606と入力特徴表現610のうちの1つが、第2の内部特徴表現608を生成するように組み合わされた。したがって、いくつかの事例では、新たに作成された特徴表現(たとえば、第1の内部特徴表現606)が、次のマージセル中の別の特徴表現(たとえば、入力特徴表現610)とマージされてよい。そのような動作は、様々なクロススケール接続の発見または学習を容易にし得る。
In some implementations, new feature representations may be available for potential selection in the next merged cell. For example, referring to FIG. 6B, one of the first
いくつかの実装形態では、第1の入力特徴表現および第2の、異なる入力特徴表現は、異なるそれぞれの解像度を有するように制約され得る。たとえば、第1の入力特徴表現および第2の、異なる入力特徴表現は、複数の入力解像度のピラミッド状構造化内で非隣接である異なるそれぞれの解像度を有し得る。たとえば、図6Bに示されるように、第1の内部特徴表現606および入力特徴表現610は、異なる解像度を有する。さらに、第2の内部特徴表現608は、第1の内部特徴表現606および入力特徴表現610の各々とは異なる解像度を有する。したがって、ピラミッドレイヤの新規アーキテクチャは、異なるスケールにおける特徴表現を組み合わせるクロススケール接続を有するように制約されてよい。
In some implementations, the first input feature representation and the second, different input feature representations can be constrained to have different resolutions, respectively. For example, the first input feature representation and the second different input feature representation may have different resolutions that are non-adjacent within a pyramidal structure of multiple input resolutions. For example, as shown in FIG. 6B, the first
いくつかの実装形態では、複数のマージセルのうちの少なくともいくつかについて、コントローラモデルは、マージセルによって生成される新規特徴表現が複数の出力表現のうちの1つを形成し得るように、出力解像度のうちの1つを選択するように制約されてよい。たとえば、図6Bを参照すると、コントローラモデルは、出力特徴表現616のうちの1つを、第1の内部特徴表現606向けの出力として、および入力特徴表現614のうちの1つを選択してよい。したがって、ピラミッドレイヤのアーキテクチャは、所定の出力解像度を有するように制約されてよい。さらに、いくつかの実装形態では、入力解像度のうちの2つ以上(たとえば、それぞれ、入力特徴表現610、612、614を含む下の3行)が、出力解像度のうちの少なくとも2つ(たとえば、出力特徴表現620、622、624を含む行)と同一であるように制約されてよい。そのような制約は、ピラミッドレイヤの積重ねを容易にし得る。
In some implementations, for at least some of the merged cells, the controller model will have the output resolution so that the new feature representation generated by the merged cell can form one of the output representations. You may be constrained to choose one of them. For example, referring to FIG. 6B, the controller model may select one of the
マージセルの数は、得られたピラミッドアーキテクチャの複雑さおよびサイズに影響し得る。マージセルの数はユーザ定義ハイパーパラメータであってよく、このパラメータは、得られたピラミッドアーキテクチャに対する増大した制御をユーザに与えることができる。ただし、他の実施形態では、マージセルの数は、得られたピラミッドアーキテクチャのサイズおよび/または複雑さが、得られたピラミッドアーキテクチャの所望の性能特性(たとえば、高速解決時間、高い正確さなど)を最適化し得るような、学習可能パラメータであってよい。 The number of merged cells can affect the complexity and size of the resulting pyramid architecture. The number of merged cells may be a user-defined hyperparameter, which can give the user greater control over the resulting pyramid architecture. However, in other embodiments, the number of merged cells is the size and / or complexity of the resulting pyramid architecture, which provides the desired performance characteristics of the resulting pyramid architecture (eg, fast resolution time, high accuracy, etc.). It may be a learnable parameter that can be optimized.
別の態様によると、介入なしで、本明細書に記載するマージセルは、他の特徴表現との出力接続が欠けている特徴表現を結果としてもたらし得る。そのような構成は概して、望ましくなく、というのは、そのような特徴表現は、ピラミッドレイヤの出力を与えずにリソースを消費するからである。この構成を防止するために、いくつかの実装形態では、コントローラモデルは、対応する解像度を有する出力特徴表現をもつ複数の出力特徴表現のうちのどれにも接続しない各特徴表現を合計するように構成されてよい。したがって、コントローラモデルは、後続特徴表現との出力接続が欠けている特徴表現の形成を防止するようにピラミッドレイヤアーキテクチャを制約またはそうでなければ修正するように構成されてよい。 According to another aspect, without intervention, the merged cells described herein can result in feature representations that lack an output connection to other feature representations. Such configurations are generally undesirable because such feature representations consume resources without giving the output of the pyramid layer. To prevent this configuration, in some implementations, the controller model should sum each feature representation that does not connect to any of the multiple output feature representations with output feature representations with the corresponding resolutions. May be configured. Therefore, the controller model may be configured to constrain or otherwise modify the pyramid layer architecture to prevent the formation of feature representations that lack an output connection to subsequent feature representations.
たとえば、図6Fを参照すると、内部特徴表現626が、複数の出力特徴表現628、630、632、634、636のうちのいずれへの接続にも欠けている場合、コントローラモデルは、内部特徴表現626を、同じ出力解像度を有する出力特徴表現634と接続するように構成されてよい。
For example, referring to Figure 6F, if the
図7は、図6Fのピラミッドレイヤアーキテクチャ700を示す。ピラミッドレイヤアーキテクチャ700は、図6A～図6Fを参照して上述したように、反復して生成された。入力特徴表現702、704、706が、ピラミッドレイヤアーキテクチャ700に入力され得る。入力特徴表現702、704、706は、内部特徴表現708、710を生成するために、図示されるように組み合わされてよい。たとえば、入力特徴表現702、704、706は、必要とされるか、または有用である場合、最近傍アップサンプリングまたは最大プーリングによって出力解像度に調節されてよい。マージされた特徴マップには、たとえば図示するように、正規化線形ユニット(ReLU)、3×3畳み込み、および/またはバッチ正規化レイヤが続き得る。ピラミッドレイヤアーキテクチャ700は、出力特徴表現712、714、716、718、720を含み得る。
Figure 7 shows the
図8A～図8Fは、本開示の例示的実施形態による、コントローラモデルによって生成される連続ピラミッドレイヤのアーキテクチャグラフを示す。この例では、図6A～図6Fを参照して上述した例とは対照的に、各出力特徴表現は、より大きいか、またはより低い解像度を有する他の出力特徴表現との接続を自由に形成してよい。図7が、図6Fのピラミッドレイヤアーキテクチャを示すのと同じように、図9は、図8Fのピラミッドレイヤアーキテクチャを示す。 8A-8F show an architectural graph of a continuous pyramid layer generated by a controller model according to an exemplary embodiment of the present disclosure. In this example, in contrast to the example described above with reference to FIGS. 6A-6F, each output feature representation is free to form connections with other output feature representations with larger or lower resolutions. You can do it. Just as Figure 7 shows the pyramid layer architecture of Figure 6F, Figure 9 shows the pyramid layer architecture of Figure 8F.
本開示のシステムおよび方法は、いくつかの技術的効果および利益を提供する。たとえば、本明細書に記載する実装形態は、他の、手作業で生成された、モデルアーキテクチャと比較して、正確さ/待ち時間トレードオフを改善したモデルアーキテクチャを生成することができる。さらに、本明細書に記載する実装形態に従って生成される積重ね可能モデルアーキテクチャは、推論時に使うべき計算リソースを動的に調節するのに使うことができ、「常時」オブジェクト検出をできるようにする。本明細書に記載する様々な例示的実装形態は、オブジェクト検出、または画像分類もしくは意味論的セグメント化などの他の視覚処理タスクに特に適応されるモデルアーキテクチャを生成する。 The systems and methods of the present disclosure provide some technical benefits and benefits. For example, the implementations described herein can generate model architectures with improved accuracy / latency trade-offs compared to other, manually generated model architectures. In addition, the stackable model architecture generated according to the implementations described herein can be used to dynamically adjust the computational resources to be used during inference, enabling "always" object detection. The various exemplary implementations described herein generate model architectures that are specifically adapted for object detection or other visual processing tasks such as image classification or semantic segmentation.
一例として、本開示のシステムおよび方法は、アプリケーション、ブラウザプラグインのコンテキスト内に、または他のコンテキストに、含められるか、またはそうでなければその中で利用され得る。したがって、いくつかの実装形態では、本開示のモデルは、ラップトップ、タブレット、またはスマートフォンなどのユーザコンピューティングデバイスに含まれるか、またはそうでなければユーザコンピューティングデバイスによって記憶され、実装され得る。さらに別の例として、モデルは、クライアント-サーバ関係に従ってユーザコンピューティングデバイスと通信するサーバコンピューティングデバイスに含まれるか、またはそうでなければ、サーバコンピューティングデバイスによって記憶され、実装され得る。たとえば、モデルは、ウェブサービス(たとえば、ウェブeメールサービス)の一部分として、サーバコンピューティングデバイスによって実装され得る。 As an example, the systems and methods of the present disclosure may be included or otherwise utilized within the context of an application, browser plug-in, or other context. Accordingly, in some implementations, the model of the present disclosure may be included in a user computing device such as a laptop, tablet, or smartphone, or otherwise stored and implemented by the user computing device. As yet another example, the model can be included in a server computing device that communicates with the user computing device according to a client-server relationship, or otherwise stored and implemented by the server computing device. For example, the model can be implemented by a server computing device as part of a web service (eg, a web email service).
例示的方法
図10は、本開示の例示的実施形態に従って実施するための例示的方法のフローチャート図を示す。図10は、説明および考察のために、具体的順序で実施されるステップを示すが、本開示の方法は、具体的に示す順序または配置には限定されない。方法800の様々なステップは、本開示の範囲から逸脱することなく、様々な手段で省かれ、並べ替えられ、組み合わされ、かつ/または適応されてよい。
Illustrative Method FIG. 10 shows a flow chart of an exemplary method for implementation according to an exemplary embodiment of the present disclosure. FIG. 10 shows the steps performed in a specific order for illustration and consideration, but the methods of the present disclosure are not limited to the specific order or arrangement. The various steps of
コンピューティングシステムは、本開示の例示的実施形態に従って、ピラミッドレイヤアーキテクチャを改善するためにピラミッドレイヤアーキテクチャが反復して修正され、評価される一連の反復を実施し得る。たとえば、802において、コンピューティングシステムは、たとえば、図2～図9を参照して上述したように、ピラミッドレイヤのための新規アーキテクチャを生成するように構成されるコントローラモデルの出力として、新規ピラミッドレイヤアーキテクチャを受信し得る。 The computing system may perform a series of iterations in which the pyramid layer architecture is iteratively modified and evaluated in order to improve the pyramid layer architecture in accordance with the exemplary embodiments of the present disclosure. For example, in 802, the computing system is a new pyramid layer, for example, as the output of a controller model configured to generate a new architecture for the pyramid layer, as described above with reference to FIGS. 2-9. Can receive architecture.
804において、コンピューティングシステムは、たとえば、図2～図9を参照して上述したように、バックボーンモデルと、新規ピラミッドレイヤアーキテクチャを有する1つまたは複数のピラミッドレイヤとを含む機械学習済みピラミッド状特徴モデルの1つまたは複数の性能特性を評価し得る。 In 804, the computing system is a machine-learned pyramid-like feature that includes, for example, a backbone model and one or more pyramid layers with a novel pyramid layer architecture, as described above with reference to FIGS. 2-9. The performance characteristics of one or more models can be evaluated.
806において、コンピューティングシステムは、たとえば、図2～図9を参照して上述したように、評価された性能特性に基づいて、新規ピラミッドレイヤアーキテクチャについての出力結果を判断し得る。コンピューティングシステムは次いで、ステップ802に戻り得る。 At 806, the computing system may determine the output result for the new pyramid layer architecture based on the evaluated performance characteristics, for example, as described above with reference to FIGS. 2-9. The computing system can then return to step 802.
追加開示
本明細書において論じた技術は、サーバ、データベース、ソフトウェアアプリケーション、および他のコンピュータベースのシステム、ならびに行われるアクションおよびそのようなシステムとの間で送られる情報を参照する。コンピュータベースのシステムの固有の柔軟性により、構成要素の間での、タスクおよび機能性の多種多様の可能な構成、組合せ、および分割が可能である。たとえば、本明細書において論じるプロセスは、組合せで動く、単一のデバイスもしくは構成要素または複数のデバイスもしくは構成要素を使って実装することができる。データベースおよびアプリケーションは、単一のシステム上で実装するか、または複数のシステムに分散することができる。分散構成要素は、順次、または並行して動作することができる。
Additional Disclosure The techniques discussed herein refer to servers, databases, software applications, and other computer-based systems, as well as actions taken and information sent to and from such systems. The inherent flexibility of computer-based systems allows for a wide variety of possible configurations, combinations, and divisions of tasks and functionality among the components. For example, the processes discussed herein can be implemented using a single device or component or multiple devices or components that operate in combination. Databases and applications can be implemented on a single system or distributed across multiple systems. Distributed components can operate sequentially or in parallel.
本主題を、その様々な具体的な例示的実施形態に関して詳しく記載したが、各例は、本開示の限定ではなく、説明として与えられている。当業者は、上記を理解すると、そのような実施形態への改変、変形、および等価物を容易に生じることができよう。したがって、本開示は、当業者には容易に明らかであるような、本主題に対するそのような修正、変形および/または追加の包含を排除しない。たとえば、一実施形態の一部として示し、または記載した特徴は、別の実施形態とともに使われて、またさらなる実施形態をもたらすことができる。したがって、本開示は、そのような改変、変形、および等価物をカバーすることを意図するものである。 The subject matter has been described in detail with respect to its various specific exemplary embodiments, but each example is given as an explanation, not a limitation of the present disclosure. Those skilled in the art will be able to easily make modifications, modifications, and equivalents to such embodiments, once they have understood the above. Accordingly, this disclosure does not preclude such modifications, modifications and / or additional inclusions to the subject matter that are readily apparent to those of skill in the art. For example, the features shown or described as part of one embodiment can be used in conjunction with another embodiment and can result in further embodiments. Accordingly, the present disclosure is intended to cover such modifications, modifications, and equivalents.
10 コンピューティングデバイス
50 コンピューティングデバイス
100 システム
102 ユーザコンピューティングデバイス
112 プロセッサ
114 メモリ、ユーザコンピューティングデバイスメモリ
116 データ
118 命令
120 コントローラモデル
122 ユーザ入力構成要素
130 サーバコンピューティングシステム
132 プロセッサ
134 メモリ
136 データ
138 命令
140 コントローラモデル
142 トレーニングデータ
150 トレーニング用コンピューティングシステム
152 プロセッサ
154 メモリ
156 データ
158 命令
160 モデル訓練器
162 トレーニングデータセット
180 ネットワーク
200 システム
202 コントローラモデル
204 新規ピラミッドアーキテクチャ、ピラミッドレイヤ
206 報酬
208 性能評価
300 システム
302 コントローラモデル
304 新規ピラミッドアーキテクチャ
306 報酬
310 強化学習エージェント
400 バックボーンモデル
402 ピラミッドレイヤ
406 ネットワーク、追加分類器および/またはボックス回帰ヘッド、ヘッド
502 マージセル
508 演算
512 畳み込み
700 ピラミッドレイヤアーキテクチャ
10 computing devices
50 computing devices
100 systems
102 User computing device
112 processor
114 memory, user computing device memory
116 data
118 instructions
120 controller model
122 User input component
130 server computing system
132 processor
134 memory
136 data
138 Order
140 controller model
142 training data
150 Training computing system
152 processor
154 memory
156 data
158 Order
160 model trainer
162 Training dataset
180 networks
200 system
202 controller model
204 New Pyramid Architecture, Pyramid Layer
206 Reward
208 Performance evaluation
300 system
302 controller model
304 New Pyramid Architecture
306 Reward
310 Reinforcement Learning Agent
400 backbone model
402 Pyramid layer
406 Network, additional classifier and / or box regression head, head
502 merge cell
508 arithmetic
512 convolution
700 Pyramid Layer Architecture
Claims (22)
1つまたは複数のプロセッサと、
バックボーンモデルによって出力された複数の入力特徴表現を受信し、それに応答して、複数の出力特徴表現を出力するピラミッドレイヤのための新規アーキテクチャを生成するように構成されたコントローラモデルであって、前記複数の入力特徴表現は複数の異なる入力解像度を有し、前記複数の出力特徴表現は、複数の異なる出力解像度を有する、コントローラモデルと、
前記1つまたは複数のプロセッサによって実行されると、前記コンピューティングシステムに動作を実施させる命令をまとめて記憶する1つまたは複数の非一時的コンピュータ可読媒体とを備え、前記動作は、
複数の反復の各々について、
前記コントローラモデルの出力として、新規ピラミッドレイヤアーキテクチャを受信することと、
前記バックボーンモデル、および前記新規ピラミッドレイヤアーキテクチャを有する1つまたは複数のピラミッドレイヤを含む機械学習済みピラミッド状特徴モデルの1つまたは複数の性能特性を評価することとを含む、コンピューティングシステム。 It ’s a computing system,
With one or more processors
A controller model configured to receive multiple input feature representations output by the backbone model and, in response, generate a new architecture for the pyramid layer that outputs multiple output feature representations. The plurality of input feature representations have a plurality of different input resolutions, and the plurality of output feature representations have a plurality of different output resolutions.
When executed by the one or more processors, the operation comprises one or more non-temporary computer-readable media that collectively store instructions for causing the computing system to perform the operation.
For each of the multiple iterations
Receiving the new pyramid layer architecture as the output of the controller model,
A computing system comprising assessing the performance characteristics of a machine-learned pyramidal feature model comprising the backbone model and one or more pyramid layers having the novel pyramid layer architecture.
前記新規ピラミッドレイヤアーキテクチャは、前記ピラミッドレイヤアーキテクチャに対して内部である少なくとも1つの内部特徴表現を生成するために、前記複数の入力特徴表現のうちの少なくとも2つの、少なくとも1つの組合せを実施し、
前記複数の出力特徴表現のうちの少なくとも1つは、前記少なくとも1つの内部特徴表現に基づいて生成される、請求項1に記載のコンピューティングシステム。 For each of the plurality of iterations
The new pyramid layer architecture implements at least one combination of at least two of the plurality of input feature representations in order to generate at least one internal feature representation that is internal to the pyramid layer architecture.
The computing system of claim 1, wherein at least one of the plurality of output feature representations is generated based on the at least one internal feature representation.
前記複数の入力特徴表現を含む利用可能な特徴表現のセットから、第1の入力特徴表現を選択することと、
前記利用可能な特徴表現のセットのうちの第2の、異なる入力特徴表現を選択することと、
前記複数の異なる出力解像度のうちの第1の解像度を選択することと、
前記第1の入力特徴表現を前記第2の、異なる入力特徴表現と組み合わせて、前記第1の解像度をもつ新規特徴表現を生成する演算を選択することとを含む、請求項1または2に記載のコンピューティングシステム。 For each of the plurality of iterations, the controller model is configured to generate the new pyramid layer architecture by performing a controller operation, the controller operation is to build a plurality of merged cells, said. The operation is for each of the plurality of merged cells.
To select a first input feature expression from the set of available feature expressions that include the plurality of input feature expressions.
Choosing a second, different input feature representation from the set of feature representations available,
Choosing the first resolution of the multiple different output resolutions
The first or second aspect of claim 1 or 2, comprising combining the first input feature representation with the second, different input feature representation to select an operation that produces a new feature representation with the first resolution. Computing system.
前記1つまたは複数の性能特性に少なくとも部分的に基づいて、報酬を判断することと、
前記報酬に基づいて、前記コントローラモデルの1つまたは複数のパラメータを修正することとをさらに含む、請求項1から13のいずれか一項に記載のコンピューティングシステム。 The controller model comprises a reinforcement learning agent and the behavior is for each of the plurality of iterations.
Determining rewards based, at least in part, on one or more of the performance characteristics mentioned above.
The computing system of any one of claims 1-13, further comprising modifying one or more parameters of the controller model based on said reward.
1つまたは複数のプロセッサと、
入力を受信し、前記入力を受信したことに応答して、出力を出力するように構成された機械学習済みモデルであって、前記機械学習済みモデルは、バックボーンモデルと、次々に順に積み重ねられた複数のピラミッドレイヤとを含み、前記バックボーンモデルは、前記入力を受信し、初期の複数の出力特徴表現を生成するように構成され、前記複数のピラミッドレイヤの各ピラミッドレイヤは、前記バックボーンモデルまたは以前の順次ピラミッドレイヤから、複数の異なる解像度を有する、それぞれの複数の入力特徴表現を受信し、同じ複数の異なる解像度を有するそれぞれの複数の出力特徴表現を生成するように構成される、機械学習済みモデルと、
前記1つまたは複数のプロセッサによって実行されると、前記コンピューティングシステムに動作を実施させる命令をまとめて記憶する1つまたは複数の非一時的コンピュータ可読媒体とを備え、前記動作は、
前記機械学習済みモデルに前記入力を入力することと、
前記機械学習済みモデルの出力として、前記出力を受信することとを含む、コンピューティングシステム。 It ’s a computing system,
With one or more processors
A machine-learned model configured to receive an input and output an output in response to receiving the input, the machine-learned model being stacked one after another with a backbone model. The backbone model comprises a plurality of pyramid layers, the backbone model is configured to receive the input and generate a plurality of initial output feature representations, and each pyramid layer of the plurality of pyramid layers is the backbone model or earlier. Machine-learned, configured to receive multiple input feature representations, each with different resolutions, and generate multiple output feature representations, each with the same multiple different resolutions, from the sequential pyramid layer of. With the model
When executed by the one or more processors, the operation comprises one or more non-temporary computer-readable media that collectively store instructions for causing the computing system to perform the operation.
Entering the input into the machine-learned model
A computing system comprising receiving the output as the output of the machine-learned model.
1つまたは複数のコンピューティングデバイスによって、バックボーンモデルによって出力された複数の入力特徴表現を受信し、それに応答して、複数の出力特徴表現を出力するように構成されるピラミッドレイヤのための新規アーキテクチャを生成するように構成されるコントローラモデルの出力として、新規ピラミッドレイヤアーキテクチャを受信するステップであって、前記複数の入力特徴表現は、複数の異なる入力解像度を有し、前記複数の出力特徴表現は、複数の異なる出力解像度を有する、受信するステップと、
前記1つまたは複数のコンピューティングデバイスによって、前記バックボーンモデル、および前記新規ピラミッドレイヤアーキテクチャを有する1つまたは複数のピラミッドレイヤを含む機械学習済みピラミッド状特徴モデルの1つまたは複数の性能特性を評価するステップとを含む、方法。 A computer implementation method for generating a pyramid layer architecture that processes the set of pyramidal feature representations output by the backbone model, for each of the multiple iterations.
New architecture for pyramid layers configured to receive and respond to multiple input feature representations output by the backbone model by one or more computing devices. A step of receiving a new pyramid layer architecture as the output of a controller model configured to generate the plurality of input feature representations, wherein the plurality of input feature representations have a plurality of different input resolutions. , With multiple different output resolutions, receiving steps,
Evaluate one or more performance characteristics of the backbone model and a machine-learned pyramid feature model containing one or more pyramid layers with the novel pyramid layer architecture by the one or more computing devices. Methods, including steps.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201962810143P | 2019-02-25 | 2019-02-25 | |
US62/810,143 | 2019-02-25 | ||
PCT/US2020/019581 WO2020176435A1 (en) | 2019-02-25 | 2020-02-25 | Systems and methods for producing an architecture of a pyramid layer |
Publications (2)
Publication Number | Publication Date |
---|---|
JP2022523207A true JP2022523207A (en) | 2022-04-21 |
JP7317979B2 JP7317979B2 (en) | 2023-07-31 |
Family
ID=69846602
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
JP2021549673A Active JP7317979B2 (en) | 2019-02-25 | 2020-02-25 | System and method for generating pyramid layer architecture |
Country Status (6)
Country | Link |
---|---|
US (1) | US20220092387A1 (en) |
EP (1) | EP3931762A1 (en) |
JP (1) | JP7317979B2 (en) |
KR (1) | KR20210116640A (en) |
CN (1) | CN113490955A (en) |
WO (1) | WO2020176435A1 (en) |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP7371188B2 (en) | 2022-01-17 | 2023-10-30 | ネイバー コーポレーション | Deep learning model tuning method and system |
Families Citing this family (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN113052812B (en) * | 2021-03-22 | 2022-06-24 | 山西三友和智慧信息技术股份有限公司 | AmoebaNet-based MRI prostate cancer detection method |
Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2017154284A1 (en) * | 2016-03-09 | 2017-09-14 | ソニー株式会社 | Information processing method and information processing device |
JP2019008383A (en) * | 2017-06-21 | 2019-01-17 | キヤノン株式会社 | Image processing device, imaging device, image processing method, program and storage medium |
WO2019018375A1 (en) * | 2017-07-21 | 2019-01-24 | Google Llc | Neural architecture search for convolutional neural networks |
Family Cites Families (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO1997029437A1 (en) | 1996-02-09 | 1997-08-14 | Sarnoff Corporation | Method and apparatus for training a neural network to detect and classify objects with uncertain training data |
US20130107061A1 (en) | 2011-10-31 | 2013-05-02 | Ankit Kumar | Multi-resolution ip camera |
EP3204888A4 (en) * | 2014-10-09 | 2017-10-04 | Microsoft Technology Licensing, LLC | Spatial pyramid pooling networks for image processing |
KR101834279B1 (en) | 2016-10-04 | 2018-03-06 | 네이버 주식회사 | Image processing method and system for detecting face using lazy feature extract |
CN116957055A (en) * | 2017-06-05 | 2023-10-27 | 渊慧科技有限公司 | Selecting actions using multimodal input |
US10679351B2 (en) * | 2017-08-18 | 2020-06-09 | Samsung Electronics Co., Ltd. | System and method for semantic segmentation of images |
CN109376667B (en) | 2018-10-29 | 2021-10-01 | 北京旷视科技有限公司 | Target detection method and device and electronic equipment |
-
2020
- 2020-02-25 KR KR1020217026940A patent/KR20210116640A/en unknown
- 2020-02-25 EP EP20712782.0A patent/EP3931762A1/en active Pending
- 2020-02-25 US US17/433,677 patent/US20220092387A1/en active Pending
- 2020-02-25 JP JP2021549673A patent/JP7317979B2/en active Active
- 2020-02-25 CN CN202080015418.3A patent/CN113490955A/en active Pending
- 2020-02-25 WO PCT/US2020/019581 patent/WO2020176435A1/en unknown
Patent Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2017154284A1 (en) * | 2016-03-09 | 2017-09-14 | ソニー株式会社 | Information processing method and information processing device |
JP2019008383A (en) * | 2017-06-21 | 2019-01-17 | キヤノン株式会社 | Image processing device, imaging device, image processing method, program and storage medium |
WO2019018375A1 (en) * | 2017-07-21 | 2019-01-24 | Google Llc | Neural architecture search for convolutional neural networks |
Non-Patent Citations (2)
Title |
---|
BARRET ZOPH ET AL.: "Learning Transferable Architectures for Scalable Image Recognition", ARXIV.ORG, JPN6022050874, 11 April 2018 (2018-04-11), ISSN: 0004935847 * |
TAO KONG ET AL.: "Deep Feature Pyramid Reconfiguration for Object Detection", ARXIV.ORG, JPN6022050873, 24 August 2018 (2018-08-24), ISSN: 0004935846 * |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP7371188B2 (en) | 2022-01-17 | 2023-10-30 | ネイバー コーポレーション | Deep learning model tuning method and system |
Also Published As
Publication number | Publication date |
---|---|
CN113490955A (en) | 2021-10-08 |
WO2020176435A1 (en) | 2020-09-03 |
KR20210116640A (en) | 2021-09-27 |
JP7317979B2 (en) | 2023-07-31 |
US20220092387A1 (en) | 2022-03-24 |
EP3931762A1 (en) | 2022-01-05 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN111680721B (en) | Accurate and interpretable classification with hard attention | |
US11907853B2 (en) | Using hierarchical representations for neural network architecture searching | |
US20230267330A1 (en) | Parameter-Efficient Multi-Task and Transfer Learning | |
JP2021521505A (en) | Application development platform and software development kit that provides comprehensive machine learning services | |
JP2021501392A (en) | Capsule neural network | |
JP2018195314A (en) | Domain specific language for generation of recurrent neural network architectures | |
WO2022068623A1 (en) | Model training method and related device | |
KR20190117713A (en) | Neural Network Architecture Optimization | |
CN109313721A (en) | Training machine learning model | |
US20220366257A1 (en) | Small and Fast Video Processing Networks via Neural Architecture Search | |
JP7317979B2 (en) | System and method for generating pyramid layer architecture | |
US11488007B2 (en) | Building of custom convolution filter for a neural network using an automated evolutionary process | |
JP2020140673A (en) | Learning device, information output device, and program | |
CN115699041A (en) | Extensible transfer learning using expert models | |
US20210383237A1 (en) | Training Robust Neural Networks Via Smooth Activation Functions | |
US20230059708A1 (en) | Generation of Optimized Hyperparameter Values for Application to Machine Learning Tasks | |
US20220036191A1 (en) | System and Related Methods for Reducing the Resource Consumption of a Convolutional Neural Network | |
JP2022165395A (en) | Method for optimizing neural network model and method for providing graphical user interface for neural network model | |
US20210256374A1 (en) | Method and apparatus with neural network and training | |
KR20210141150A (en) | Method and apparatus for image analysis using image classification model | |
KR20210103912A (en) | Method and apparatus for trining neural network, method and apparatus for processing data using neural network | |
US20210248472A1 (en) | Neural Network Layers with a Controlled Degree of Spatial Invariance | |
KR102613844B1 (en) | Apparatus and method for automating artificial intelligence model design | |
US20220245428A1 (en) | Machine-Learned Attention Models Featuring Omnidirectional Processing | |
US20210383221A1 (en) | Systems And Methods For Machine-Learned Models With Message Passing Protocols |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
A521 | Request for written amendment filed |
Free format text: JAPANESE INTERMEDIATE CODE: A523Effective date: 20211014 |
|
A621 | Written request for application examination |
Free format text: JAPANESE INTERMEDIATE CODE: A621Effective date: 20211014 |
|
A977 | Report on retrieval |
Free format text: JAPANESE INTERMEDIATE CODE: A971007Effective date: 20221017 |
|
A131 | Notification of reasons for refusal |
Free format text: JAPANESE INTERMEDIATE CODE: A131Effective date: 20221205 |
|
A521 | Request for written amendment filed |
Free format text: JAPANESE INTERMEDIATE CODE: A523Effective date: 20230303 |
|
TRDD | Decision of grant or rejection written | ||
A01 | Written decision to grant a patent or to grant a registration (utility model) |
Free format text: JAPANESE INTERMEDIATE CODE: A01Effective date: 20230619 |
|
A61 | First payment of annual fees (during grant procedure) |
Free format text: JAPANESE INTERMEDIATE CODE: A61Effective date: 20230719 |
|
R150 | Certificate of patent or registration of utility model |
Ref document number: 7317979Country of ref document: JPFree format text: JAPANESE INTERMEDIATE CODE: R150 |