US10210256B2 - Anchor tag indexing in a web crawler system - Google Patents
Anchor tag indexing in a web crawler system Download PDFInfo
- Publication number
- US10210256B2 US10210256B2 US15/088,670 US201615088670A US10210256B2 US 10210256 B2 US10210256 B2 US 10210256B2 US 201615088670 A US201615088670 A US 201615088670A US 10210256 B2 US10210256 B2 US 10210256B2
- Authority
- US
- United States
- Prior art keywords
- url
- document
- anchor
- link
- text
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime, expires
Links
- 238000000034 method Methods 0.000 claims abstract description 47
- 238000003860 storage Methods 0.000 description 23
- 230000006870 function Effects 0.000 description 18
- 230000009193 crawling Effects 0.000 description 17
- 238000004519 manufacturing process Methods 0.000 description 16
- 230000008569 process Effects 0.000 description 15
- 238000012545 processing Methods 0.000 description 9
- 230000008859 change Effects 0.000 description 8
- 230000008901 benefit Effects 0.000 description 6
- 238000005192 partition Methods 0.000 description 6
- 238000013459 approach Methods 0.000 description 5
- 230000007246 mechanism Effects 0.000 description 5
- 238000004891 communication Methods 0.000 description 4
- 238000004590 computer program Methods 0.000 description 4
- 238000010586 diagram Methods 0.000 description 3
- 239000003550 marker Substances 0.000 description 3
- 238000012986 modification Methods 0.000 description 3
- 230000004048 modification Effects 0.000 description 3
- 230000004044 response Effects 0.000 description 3
- 241000282326 Felis catus Species 0.000 description 2
- 230000008094 contradictory effect Effects 0.000 description 2
- 230000007423 decrease Effects 0.000 description 2
- 238000001514 detection method Methods 0.000 description 2
- 230000000694 effects Effects 0.000 description 2
- 230000002123 temporal effect Effects 0.000 description 2
- 230000004931 aggregating effect Effects 0.000 description 1
- 230000006378 damage Effects 0.000 description 1
- 238000012217 deletion Methods 0.000 description 1
- 230000037430 deletion Effects 0.000 description 1
- 230000001419 dependent effect Effects 0.000 description 1
- 238000013461 design Methods 0.000 description 1
- 238000011161 development Methods 0.000 description 1
- 238000009826 distribution Methods 0.000 description 1
- 238000005516 engineering process Methods 0.000 description 1
- 230000003993 interaction Effects 0.000 description 1
- 238000012423 maintenance Methods 0.000 description 1
- 238000013507 mapping Methods 0.000 description 1
- 230000002085 persistent effect Effects 0.000 description 1
- 238000012913 prioritisation Methods 0.000 description 1
- 238000011084 recovery Methods 0.000 description 1
- 230000000717 retained effect Effects 0.000 description 1
- 238000000638 solvent extraction Methods 0.000 description 1
- 230000000153 supplemental effect Effects 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
Images
Classifications
-
- G06F17/30864—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/951—Indexing; Web crawling techniques
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/22—Indexing; Data structures therefor; Storage structures
- G06F16/2228—Indexing structures
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/93—Document management systems
- G06F16/94—Hypermedia
-
- G06F17/2235—
-
- G06F17/30014—
-
- G06F17/30321—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/12—Use of codes for handling textual entities
- G06F40/134—Hyperlinking
-
- G06F17/2705—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/20—Natural language analysis
- G06F40/205—Parsing
Definitions
- the present invention relates to the field of crawler systems for crawling a collection of linked documents, such as hyperlinked documents stored on servers coupled to the Internet or in an intranet, and in particular the present invention relates to a method and apparatus for indexing anchor tags and other information from documents other than the indexed document that contains a link to the indexed document.
- Search engines provide a powerful source of indexed documents from the Internet that can be rapidly scanned.
- the information in or neighboring a hyperlink pointing to a web page can be especially useful when the web page contains little or no textual information itself.
- methods and systems of indexing information about a document the information residing on other documents in a collection of linked documents, so as to produce an index that can return a list of the most highly relevant documents in response to a user-submitted query.
- the present invention addresses the problems alluded to above by enabling information from other documents in a collection of linked documents to be included in the part of an index that corresponds to a particular document.
- Some embodiments associate a subset of the text on a first web page containing a link to a second web page with an index entry corresponding to the second web page. This is advantageous where the first web page contains a more accurate description of the second web page than the text of the second web page itself.
- some types of web pages e.g., image files, video files, programs, and so on
- Some embodiments provide a method of processing information related to documents in a collection of linked documents.
- a link log is accessed.
- the link log includes a plurality of link records.
- Each link record in turn includes a respective source document identifier corresponding to a respective source document address and a respective list of target document identifiers corresponding to respective target document addresses.
- a sorted anchor map is output.
- the sorted anchor map includes a plurality of anchor records.
- Each anchor record includes a respective target document identifier corresponding to a respective target document address and a respective list of source document identifiers corresponding to a respective list of source document addresses.
- the anchor records are ordered in the sorted anchor map based on their respective target document identifiers.
- a document located at the source document address, corresponding to an anchor record's source document identifier in the record's list of source document identifiers contains at least one outbound link, the at least one outbound link pointing to a corresponding target document address.
- the target document address corresponds to the respective target document identifier for the anchor record.
- each anchor record in the sorted anchor map further comprises a respective list of annotations.
- Some embodiments provide methods that include repeating the accessing and outputting so as to produce a layered set of sorted anchor maps.
- a merge condition has been satisfied, a subset of the layered set of sorted anchor maps is merged, producing a merged anchor map.
- the merged anchor map includes a plurality of merged anchor map records, each merged anchor record corresponding to at least one anchor record from the subset of the layered set of sorted anchor maps, wherein the merged anchor records are ordered in the merged anchor map based on their respective target document identifiers.
- Some embodiments further include outputting a sorted link map.
- the sorted link map includes a plurality of link map records. Each link map record includes a respective source document identifier and a respective list of target document identifiers.
- Some embodiments provide methods that further include repeating the accessing, outputting a sorted anchor map, and outputting a sorted link map so as to produce a layered set of sorted anchor maps and a layered set of sorted link maps.
- a merge condition when a merge condition has been satisfied, a subset of the layered set of sorted link maps is merged, producing a merged link map.
- the merged link map includes a plurality of merged link map records. Each merged link record corresponds to at least one link record from the subset of the layered set of sorted link maps.
- the merged link records are ordered in the merged link map based on their respective source document identifiers.
- Some embodiments provide a system for processing information about documents in a collection of linked documents.
- the system includes a link log and a global state manager configured to access the link log.
- the link log includes a plurality of link records.
- Each link record includes a respective source document identifier corresponding to a respective source document address and a respective list of target document identifiers corresponding to respective target document addresses.
- the global state manager is configured to output a sorted anchor map.
- the sorted anchor map includes a plurality of anchor records, each anchor record comprising a respective target document identifier and a respective list of source document identifiers.
- the plurality of anchor records are ordered in the sorted anchor map based, at least in part, on their respective target document identifiers.
- a document located at the source document address corresponding to a source document identifier in the list of source document identifiers contains at least one outbound link.
- the at least one outbound link points to a corresponding target document address.
- the target document address corresponds to the respective target document identifier for the at least one anchor record.
- Some embodiments further provide a page ranker.
- the page ranker determines a PageRank, or some other query-independent relevance metric, for a particular document based on the output of the global state manager.
- the computer program product includes a computer readable storage medium and a computer program mechanism therein.
- the computer program mechanism includes:
- the global state manager module contains instructions for writing to the sorted anchor map data structure.
- the plurality of anchor records are ordered in the sorted anchor map data structure based, at least in part, on their respective target document identifiers.
- the collection of linked documents is arranged such that, for at least one anchor record, a document located at the source document address corresponds to a source document identifier in the list of source document identifiers contains at least one outbound link.
- the outbound link points to a corresponding target document address.
- the target document address corresponds to the respective target document identifier for the at least one anchor record.
- Some embodiments further include an indexer module.
- the indexer module includes instructions for building an index of the collection of documents based, at least in part, on the contents of the sorted anchor map data structure.
- FIG. 1 illustrates a data structure for storing uniform resource locations (URLs).
- URLs uniform resource locations
- FIG. 2 illustrates a system for crawling web pages.
- FIGS. 3A-3B illustrate a method of web crawling.
- FIG. 4 illustrates a hash table for storing state information about URLs that are queued to be crawled.
- FIGS. 5A-5D respectively illustrate data structures for a link log, an Rtlog, a history log, and a status log.
- FIG. 6 illustrates part of a collection of documents in which some documents contained annotated links to other documents.
- FIG. 7 is a schematic diagram of part of a web crawling system, including a global state manager.
- FIG. 8 is a schematic diagram of an embodiment of a global state manager, showing details of the interaction between the global state manager and the layered sets of sorted link maps and sorted anchor maps.
- FIG. 9 illustrates details of a sorted anchor map.
- FIG. 10 illustrates details of a sorted link map.
- FIG. 11 illustrates a merging operation performed on several sorted anchor maps, resulting in a merged anchor map.
- FIG. 12 is a block diagram of an embodiment of a computer system for implementing the methods disclosed herein.
- Base layer 102 of data structure 100 comprises a sequence of segments 112 .
- each segment 112 comprises more than two hundred million uniform resource locations (URLs). Together, segments 112 represent a substantial percentage of the addressable URLs in the entire Internet.
- daily crawl layer 104 Periodically (e.g., daily) one of the segments 112 is deployed for crawling purposes, as described in more detail below.
- daily crawl layer 104 comprises more than fifty million URLs.
- Daily crawl layer 104 comprises the URLs that are to be crawled more frequently than the URLs in segments 112 .
- daily crawl layer 104 comprises high priority URLs that are discovered by system 200 during a current epoch.
- data structure 100 further comprises an optional real-time layer 106 .
- optional real-time layer 106 comprises more than five million URLs.
- the URLs in real-time layer 106 are those URLs that are to be crawled multiple times during a given epoch (e.g., multiple times per day). For example, in some embodiments, the URLs in optional real-time layer 106 are crawled every few minutes. Real-time layer 106 also comprises newly discovered URLs that have not been crawled but should be crawled as soon as possible.
- the URLs in layers 102 , 104 , and 106 are all crawled by the same robots 208 ( FIG. 2 ). However, the results of the crawl are placed in indexes that correspond to layers 102 , 104 , and 106 as illustrated in FIG. 2 and described in more detail below. Layers 102 , 104 , and 106 are populated by a URL scheduler based on the historical (or expected) frequency of change of the content of the web pages at the URLs and a measure of URL importance, as described in more detail below.
- URL Discovery There are a number of different sources for the URLs used to populate data structure 100 .
- One source of URLs is the direct submission of URLs by users to the search engine system.
- Another source of URLs is through discovery of outgoing links on crawled pages.
- a third source of URLs is through submissions (e.g., time-based submissions) from third parties who have agreed to provide content. For example, such third parties can give links as they are published, updated, or changed.
- RSS is a protocol, an application of XML, that provides an open method of syndicating and aggregating Web content.
- RSS files Using RSS files, a data feed can be created that supplies headlines, links, and article summaries from a Web site.
- RDF is a syntax for specifying metadata.
- a URL (and the content of the corresponding page) is processed by a series of modules that are designed to ensure content uniformity and to prevent the indexing of duplicate pages.
- a URL rewrite module strips or rewrites commands in URL statements that would produce undesirable output. For example, if a URL includes a statement that inhibits output of a certain column, the statement is stripped from the URL.
- a host duplicate detection module In addition to examining the syntax of specific URLs, there is a host duplicate detection module. The host duplicate detection module attempts to determine which hosts are complete duplicates of each other by examining incoming URLs.
- FIGS. 2 and 3 An exemplary system 200 and method by which the URLs in data structure 100 ( FIG. 1 ) are crawled is respectively illustrated in FIGS. 2 and 3 .
- the exemplary method illustrated in FIGS. 3A and 3B describes events that take place during a predetermined time period, termed an epoch. Each time an epoch elapses, a new epoch is initiated by re-executing steps 302 and 304 of the process illustrated in FIGS. 3A and 3B .
- An epoch can be set to any length of time. In one embodiment, an epoch is one day.
- Step 302 URL scheduler 202 determines which URLs will be crawled in each epoch, and stores that information in data structure 100 . Controller 201 selects a segment 112 from base layer 102 for crawling. The selected segment 112 is referred to herein as the “active segment.” Typically, at the start of each epoch, controller 201 selects a different segment 112 from base layer 102 as the active segment so that, over the course of several epochs, all the segments 112 are selected for crawling in a round-robin style.
- URL scheduler 202 revises daily layer 104 and optional real-time layer 106 by moving URLs to layers 104 and 106 from base layer 102 or vice versa.
- the decision as to whether to add or remove URLs from daily layer 104 and real-time layer 106 is based on information in history logs 218 that indicates how frequently the content associated with the URLs is changing as well as individual URL page ranks that are set by page rankers 222 .
- URL scheduler 202 obtains URL change frequency data is best understood by reviewing FIG. 2 .
- the information is passed through content filters 210 .
- Content filters 210 determine whether a URL has changed and when a URL was last accessed by a robot 208 . This information is placed in history logs 218 , which are passed back to URL scheduler 202 .
- the URL schedule 202 (or other module) can compute a URL change frequency.
- the computation of a URL change frequency can include using supplemental information about the URL.
- the URL scheduler 202 may maintain or access information about web sites (i.e., URLs) whose content is known to change quickly.
- a query-independent score (also called a document score) is computed for each URL by URL page rankers 222 .
- Page rankers 222 compute a page rank for a given URL by considering not only the number of URLs that reference a given URL but also the page rank of such referencing URLs. Page rank data can be obtained from URL managers 204 . A more complete explanation of the computation of page rank is found in U.S. Pat. No. 6,285,999, which is hereby incorporated by reference as background information.
- URL history log 218 can contain URLs that are not found in data structure 100 .
- the URL history log 218 may contain log records for URLs that no longer exist.
- the URL history log 218 may also contain log records for URLs that exist but that which the URL scheduler 202 will no longer schedule for crawling (e.g., due to a request by the website owner that the URL not be crawled, due to objectionable content, or for any other reasons).
- URL scheduler 202 determines that a URL should be placed in a segment 112 of base layer 102 .
- an effort is made to ensure that the placement of the URL into a given segment 112 of base layer 102 is random (or pseudo-random), so that the URLs to be crawled are evenly distributed (or approximately evenly distributed) over the segments.
- the fingerprint of the URL is used to achieve the random selection of a segment 112 to place the URL.
- a fingerprint is, for example, a 64-bit number (or a value of some other predetermined bit length) that is generated from the corresponding URL by first normalizing the URL text (for example, converting host names to lower case) and then passing the normalized URL through a fingerprinting function that is similar to a hash function with the exception that the fingerprint function guarantees that the fingerprints are well distributed across the entire space of possible numbers.
- the fingerprint modulus N where N is the number of segments 112 in base layer 102 (e.g. “fingerprint modulus 12 ”, in the case where there are 12 segments 112 in base layer 102 ) is used to select the segment 112 in which to place a given URL.
- additional rules are used to partition URLs into a segment 112 of base layer 102 , daily layer 104 , and real-time layer 106 .
- a crawl score is computed for each URL in active segment 112 , daily layer 104 , and real-time layer 106 . Only those URLs that receive a high crawl score (e.g., above a threshold value) are passed on to the next stage (URL managers 204 , FIG. 2 ).
- URL scheduler 202 refines an optimum crawl frequency for each such URL and passes the crawl frequency information on to URL managers 204 . The crawl frequency information is then ultimately used by URL managers 204 to decide which URLs to crawl.
- URL scheduler 202 determines which URLs will be crawled on the Internet during the epoch by computing a crawl score for each URL. Those URLs that receive a high crawl score (e.g., above a predefined threshold) are passed on to the next stage (URL managers 204 ) whereas those URLs that receive a low crawl score (e.g., below the predefined threshold) are not passed on to the next stage during the given epoch.
- There are many different factors that can be used to compute a crawl score including the current location of the URL (active segment 112 , daily segment 104 or real-time segment 106 ), URL page rank, and URL crawl history.
- the crawl score of URLs that have not been crawled in a relatively long period of time can be upweighted so that the minimum refresh time for a URL is a predetermined period of time, such as two months.
- URL scheduler 202 sets and refines a URL crawl frequency for each URL in data structure 100 .
- URL crawl frequency for a given URL represents the optimum crawl frequency (or, more generally, a selected or computed crawl frequency) for a URL.
- the crawl frequency for URLs in daily layer 104 and real-time layer 106 will tend to be shorter than the crawl frequency of URLs in base layer 102 .
- Crawl frequency for any given URL can range from a minute or less to a time period that is on the order of months.
- the optimal crawl frequency for a URL is computed based on the historical change frequency of the URL and the page rank of the URL.
- URL scheduler 202 determines which URLs are deleted from data structure 100 and therefore dropped from system 200 . URLs are removed from data structure 100 to make room for new URLs that are to be added to data structure 100 . In some embodiments, a “keep score” is computed for each URL in data structure 200 . The URLs are then sorted by this “keep score” and URLs that receive a low “keep score” are eliminated as newly discovered URLs are added to data structure 100 . In some embodiments, the “keep score” is the page rank of a URL that is determined by page rankers 222 ( FIG. 2 ).
- Step 304 URL managers 204 receive the active segment as well as layers 104 and 106 from URL scheduler 202 .
- each manager 204 is resident on its own dedicated server.
- real-time layer 106 is managed by a separate URL manager 204 that holds all or a substantial portion of layer 106 in high speed random access memory.
- the active segment and daily layers are partitioned into the remaining URL managers 204 . Typically, this partitioning is performed using a modulo function or similar function on the fingerprint values (or a portion of a fingerprint value) derived from each URL in the active segment and daily layers so as to partition these URLs into a set of approximately equal sets (partitions). Each of these sets is assigned to a different URL manager 204 of a plurality of URL managers 204 .
- data structure 100 is partitioned and stored in a plurality of servers.
- this plurality of servers is represented by URL scheduler 202 .
- URLs that are copied from the URL scheduler 202 servers are distributed to the servers hosting the URL managers 204 on a random basis.
- the number of servers used by URL scheduler 202 and the number of servers that host URL managers 204 are constrained such that they are relatively primed. That is, there is no common divider between (i) the number of servers used by URL scheduler 202 and (ii) the number of servers hosting URL managers 204 .
- One example of a relatively primed topology is the case in which URL scheduler 202 is partitioned across 11 servers and there are 13 servers for the URL managers 204 .
- a modulo function can be used to randomly distribute URLs to servers in the next stage.
- the fingerprint of each URL that is be copied from URL scheduler 202 to URL manager 204 is obtained.
- a modulus of the fingerprint (or the modulus of a portion of the fingerprint or of a function of the fingerprint) is taken.
- the modulus that is taken of the fingerprint is the number of possible destination servers.
- modulus 13 of the URL fingerprint of a respective URL is used to determine which of the 13 servers the respective URL will be sent.
- real-time layer 106 is managed by a separate URL manager 204 that holds all or a substantial portion of the real-time layer in high speed random access memory.
- the (i) number of servers that host URLs other than those from real-time layer 106 and (ii) number of servers that host portions of data structure 100 , other than real-time layer 106 are relatively primed (e.g., 11 and 13).
- constrained numbers of servers is used in various stages of system 200 ( FIG. 2 ).
- the number of DupServers 224 , global state managers 216 , indexers 232 , 240 and 242 , and page rankers 222 is constrained so that they are hosted by relatively primed numbers of servers.
- Advantages of such a randomization scheme are at least two-fold. First, this scheme reduces the complexity of the computer code required to ensure random distribution of URLs across a plurality of servers at a given stage of system 200 . Rather than relying on complex randomization schemes, all that is required is computation of the URL fingerprint (or a portion of the URL fingerprint) modulus the number of servers in the next stage.
- the randomization itself ensures that, if a server fails at any stage of system 200 , the data that is not processed due to the failure represents a randomized sample of the URLs in data structure 100 , rather than a complete category of URLs. Such randomization, therefore, reduces the effect that individual server failure has on system 200 .
- a server fails isolated URLs from across data structure 100 may not get indexed or updated during a given epoch.
- the impact of a server failure on users of the search engine is less noticeable when the impacted URLs are randomized than when whole categories of URLs are impacted (e.g., not indexed) by a failure of a server in system 200 .
- the process illustrated in FIGS. 3A and 3B can progress even when a server at any given stage is working slower than other servers at the same stage or is, in fact, down altogether.
- state information for URLs is stored in a hash table 600 .
- Each URL manager 204 stores information about the URLs that have been assigned to the URL manager in the hash table 600 ( FIG. 4 ), which is stored in random access memory.
- the normalized hash 602 of the URL fingerprint 604 serves as the index to the table 600 .
- the storage of URLs in hash tables 600 on each server hosted by a URL manager 204 is advantageous because it provides a way of quickly accessing URL state information. For example, to obtain state information for a particular URL, all that is required is to look up the record having the hash value that corresponds to the hash of the URL. Such a lookup process is more efficient than searching through records of all the URLs held by all the URL managers 204 for a desired URL.
- Representative URL state information stored in hash tables 600 includes the URL's fingerprint (called the URL fingerprint) 604 , URL page rank 606 , and the layer ( 102 , 104 , or 106 ) to which the URL belongs.
- URL page rank 606 is not stored in hash table 600 but is stored in a data structure that is available to each URL manager 204 .
- a wide range of additional URL state information can be stored in hash table, including information that is obtained from or derived from status logs, history logs, and page rankers. Representative state information that can be stored in hash tables 600 is described below.
- Each of the URL managers 204 perform a variety of functions. For instance, they scan link logs 214 to discover new URLs. Link logs 214 comprise all the links that are found on scanned web pages during the current epoch. URLs that have been seen by system 200 before but have not been scheduled for crawl during the current epoch are ignored. Newly discovered URLs are added to a hash table 600 of a URL manager 204 .
- the hash table data structure provides an advantageous mechanism for quickly determining whether a table 600 contains a URL discovered in a link log.
- the URL from the link log is simply hashed and a search is made for the resultant hash value in each hash table 600 . If a URL is found in a link log 214 and is not in any hash table 600 , it is added to the hash table 600 of one of the URL managers 204 .
- URL managers 204 scan status logs 212 in order to update the state of URLs that have been delivered to URL server 206 to be crawled.
- the URL server 206 distributes the URLs to be crawled among the robot crawlers 208 .
- Status logs 212 are sequential logs that are generated by content filters 210 .
- Content filters 210 receive content (i.e., retrieved documents) from the robot crawlers 208 .
- Status logs 212 include the status of URLs that have been handed to URL server 206 by URL manager 204 during the current epoch.
- Status logs 212 indicate whether a URL was successfully crawled by a robot.
- a URL manager 204 knows that the URL has been crawled and work with the URL is finished until the crawl period for that URL has elapsed. Crawl status is stored in field 610 in the exemplary hash table 600 illustrated in FIG. 4 . Likewise, if status log 212 returns a “HTTP 404” value, indicating that the URL does not exist, then the URL manager 204 knows that work with the URL is complete, at least until the next crawl period. Alternatively, if status log 212 does not include a record of the URL or indicates that that the URL was busy when the web crawler 208 (robot; FIG. 2 ) attempted to access the URL, than URL manager 204 reschedules the URL for crawling. Still further, if a status log 212 indicates that content filter 210 has deleted the URL, the URL manager 202 removes the URL from the respective hash table 600 and the URL is no longer crawled.
- the number of URLs hosted by URL managers 204 exceeds the number of URLs than can be crawled during a given epoch and/or there is a risk that URLs hosted by URL managers 204 will be crawled on an infrequent basis during a given epoch.
- the URL status information maintained for URLs by URL managers 204 can be used to ensure that, to the extent possible, the URLs matching select criteria are given high priority for crawling.
- URL state information can be used to prioritize which URLs will be sent to URL server 206 .
- URL crawl interval 608 and URL page rank 606 can be used to accomplish this prioritization.
- URL managers 204 obtain the page rank of URLs from page rankers 222 .
- Page rankers 222 maintain a persistent record of the page rank of URLs and actively update the page rank of URLs using link maps 220 as described in more detail below.
- Crawl interval 608 represents a target frequency that a URL should be crawled. For example, if a URL has a crawl interval 608 of two hours, the URL manager will attempt to crawl the URL every two hours. Any number of criteria to be used to prioritize which URLs will be delivered upon request to URL server 206 , including “URL characteristics” 612 such as the category of the URL.
- Representative URL categories include, but are not limited to news URLs, international URLs, language categories (e.g., French, German, Japanese, etc.), and file type categories (e.g., postscript, powerpoint, pdf, html).
- the URL characteristics 612 for a URL may identify a plurality of URL categories to which the URL belongs.
- Step 306 Periodically, URL server 206 makes requests from URL managers 204 for URLs. In response, URL managers 204 provide URL server 206 with URLs. In some embodiments, URL server 206 requests specific types of URLs from URL managers 204 based on a policy (e.g., eighty percent foreign URLs/twenty percent news URLs) that URL server 206 is enforcing. URL managers 204 are able to service such requests because of the URL state information they store for each URL in hash tables 600 . Additionally, URL server 206 attempts to ensure that each URL manager 204 contributes URL requests.
- a policy e.g., eighty percent foreign URLs/twenty percent news URLs
- URL server 206 distributes URLs from URL managers 204 to robots 208 to be crawled.
- a robot 208 is a program that automatically traverses the Web's hypertext structure by retrieving a document at a URL, and recursively retrieving all documents that are referenced by the retrieved document.
- the term “recursive” as used here is not limited to any specific traversal algorithm. However, in a system that retrieves and indexes billions of documents, this simple recursive methodology is not workable. Instead, each robot 208 crawls the documents assigned to it by the URL server 206 . The robot passes retrieved documents to the content filters 210 , which process the links in the downloaded pages, from which the URL scheduler 202 determines which pages are to be crawled.
- Robots 208 are unlike normal web browsers, such as Internet Explorer (Microsoft, Redmond Wash.). For instance, when a robot retrieves the document at a URL, it does not automatically retrieve content (e.g., images) embedded in the document through the use of object or other tags. Also, in one embodiment, the robots are configured to not follow “permanent redirects”. Thus, when a robot encounters a URL that is permanently redirected to another URL, the robot does not automatically retrieve the document at the target address of the permanent redirect.
- content e.g., images
- the robots are configured to not follow “permanent redirects”. Thus, when a robot encounters a URL that is permanently redirected to another URL, the robot does not automatically retrieve the document at the target address of the permanent redirect.
- URL server 206 avoids overloading any particular target server (not shown) that is accessed by the robots 208 .
- the URL server 206 determines the maximum number of URL requests to be sent to any particular host. It does this by making a procedure call to a server called the host load server (not shown).
- the host load server stores information for each known host server (i.e., a server storing documents known to the search engine) indicating the maximum request load to be imposed by entire search engine on the host server number, and the portion of that load which is currently in use or reserved by robots.
- the URL server 206 sends a load reservation request to the host load server, requesting the right to send download requests to a specified host server, and receives back an indication of the number of download requests that the URL server can allocate to a robot. In other words, the URL server will be told how many URLs the URL server can send to a robot for downloading. Then, URL server 206 parcels out the proper number of URLs to robots in accordance with the load reservation granted to the URL server 206 by the host load server. The robots 208 take these URLs and download (or at least attempts to download) the documents at those URLs. When URL server 206 runs out of URLs to process, it requests more URLs from URL managers 204 .
- the host load reservations made by the URL server are released.
- host load reservations are made for a fixed period of time, and are automatically released upon the expiration of that fixed period of time.
- Step 308 a plurality of robots 208 crawl URLs that are provided to the robots 208 by URL server 206 .
- robots 208 use a calling process that requires domain name system (DNS) resolution.
- DNS resolution is the process by which host names (URLs) are resolved into their Internet Protocol (IP) addresses using a database that provides a mapping between host names (URLs) and IP addresses.
- enhancements to known DNS resolution schemes are provided in order to prevent DNS resolution from becoming a bottleneck to the web crawling process, in which hundreds of millions of URLs must be resolved in a matter of hours.
- One of these enhancements is the use of a dedicated local database 250 ( FIG.
- Robots 208 use various protocols to download pages associated with URLs (e.g., HTTP, HTTPS, gopher, File Transfer Protocol, etc.). Robots 208 do not follow permanent redirects that are found at URLs that they have been requested to crawl. Rather they send the source and target (i.e., redirect) URLs of the redirect to the content filters 210 . Referring to FIG. 2 , content filters 210 take the redirect URLs and place them in link logs 214 where they are passed back to URL managers 204 . The URL managers 204 , in turn, determine when and if such redirect URLs will be assigned to a robot 208 for crawling. Robots 208 do follow temporary redirects and obtain page information from the temporary redirects.
- URLs e.g., HTTP, HTTPS, gopher, File Transfer Protocol, etc.
- Step 310 Pages obtained from URLs that have been crawled by robots 208 are delivered to the content filters 210 .
- content filter 210 sends information about each retrieved page to DupServer 224 to determine if the document is a duplicate of other pages.
- the information sent to the DupServer 224 about each page includes the URL fingerprint of the page, the content fingerprint of the page, the page's page rank, and an indicator as to whether the page is source for a temporary or permanent redirect.
- the page rankings of the duplicate pages are compared and the “canonical” page for the set of duplicate pages is identified. If the page presented to the DupServer 224 is not the canonical page (of the set of duplicate pages), the content filter 210 does not forward the page (to the respective RT log 226 , 228 , 230 ) for indexing. Rather, the content filter 210 makes an entry for the page in the history log 218 , creates or updates an entry for the URL in the status log 212 , and then ceases work on the page. In effect, a non-canonical page is deleted from the search engine, except for the entries in the history log and status log. In addition to identifying duplicate web pages, DupServer 224 assists in the handling of both temporary and permanent redirects encountered by the robots 208 .
- stages where the number of servers used to host the stage is constrained have been described.
- the number of servers used to host data structure 100 is constrained relative to the number of servers used to host URL managers 204 such that they are relatively primed.
- system 200 there are examples in system 200 in which the number of servers used to host a stage is not constrained such that it is relatively primed with respect to the number of servers used to host a prior or subsequent stage.
- the number of servers used to host content filters 210 represents one such example. In other words, the number of servers used to host content filters 210 is not constrained such that it is relatively primed with respect to the number of robots 208 . In fact, in some embodiments, the number of servers used to host content filters 210 is a multiple of the number of servers used to host robots 208 .
- Step 312 the content filters write out four types of log files, link logs 214 , RT logs ( 226 , 228 , or 230 ), history logs 218 , and status logs 212 .
- link logs 214 the content filters write out four types of log files, link logs 214 , RT logs ( 226 , 228 , or 230 ), history logs 218 , and status logs 212 .
- URLs that have been crawled by robots 208 are processed as described below.
- content filter 210 will insert corresponding records in all RT logs, the appropriate link log 214 , and the history logs 218 .
- a link log 214 contains one link record 502 per URL document.
- a URL document is a document obtained from a URL by a robot 208 and passed to content filter 210 .
- Each record 502 lists the URL fingerprints 504 of all the links (URLs) that are found in the URL document associated with a record 502 as well as the text 506 that surrounds the link. For example, text 506 can state “to see a picture of Mount Everest click here”, where the page identified by the link represents an image of Mount Everest.
- link log 214 is partitioned or segmented across multiple servers, typically using a modulo function or similar function on a fingerprint value (or a portion of a fingerprint value) associated with the URL so as to partition records 502 across a plurality of servers so that content filter 210 can append to the link logs 214 at a very high bandwidth.
- an RT log stores the documents 512 obtained by robots 208 .
- Each document 512 is coupled with the page rank 514 that was assigned to the source URL of the document to form a pair 510 .
- the document is paired with the page rank 514 assigned to the URL “XYZ” and this pair 510 is stored in an RT log.
- each RT log is partitioned or segmented, typically using a modulo function or similar function on a fingerprint value (or a portion of a fingerprint value) associated with the source URL of each document 514 so as to partition pairs 510 across a plurality of servers so that data can be written to and read from the RT logs at a very high bandwidth.
- the RT log includes the document URL or URL fingerprint.
- a history log 218 comprises a record 520 for each URL 522 that has been crawled by a robot 208 .
- crawl status 524 indicates whether the corresponding URL 522 has been successfully crawled.
- content checksum 526 also known as the content fingerprint. When pages have identical content, they will also have the same content fingerprint 526 .
- URL scheduler 202 can compare these content fingerprint with a previous content fingerprint obtained for the corresponding URL (identified by URL fingerprint 522 in the history log record 520 ) on a previous crawl to ascertain whether the web page has changed since the last crawl. Similarly, URL scheduler 202 can use link checksum 530 to determine whether any of the outbound links on the web page associated with the corresponding URL 522 have changed since the last crawl.
- Source 532 provides an indication of whether robot 208 accessed the URL using the Internet or an internal repository of URLs.
- “Time taken to download” 534 provides an indication of how long it took a robot 208 to download the web page associated with the corresponding URL in the last crawl.
- Error condition 536 records any errors that were encountered by a robot 208 during the crawl. An example of an error condition is “HTTP 404”, which indicates that the web page does not exist.
- status log 212 comprises the outgoing links 556 that were identified in the web page associated with the URL 552 during the crawl.
- the outgoing links 556 comprise a list of the URL fingerprints of the URLs that are found in the web page.
- status log 212 has a duplicate status field 558 that stores information about whether DupServer 224 has identified the corresponding URL 552 as a duplicate (i.e., non-canonical) URL or not.
- Step 314 indexers 232 , 240 and 242 obtain documents from the RT logs on a high throughput basis, and generate indices for those documents.
- the indices are provided to the servers of the front-end querying system (not shown), these documents become searchable by the users of the front-end querying system.
- Step 316 global state manager 216 reads link logs 214 and uses the information in the log files to create link maps 220 and anchor maps 238 .
- Link maps 220 are keyed by the fingerprints of the source URLs in the link logs (i.e., the URLs that respectively correspond to each record 502 ).
- the records in link map 220 are similar to records 502 in link log 214 with the exception that text 506 is stripped and the records are keyed by the fingerprint of the normalized value of the source URL.
- Link maps are used by page rankers 222 to adjust the page rank of URLs within data structure 100 . Such page rankings persists between epochs.
- global state manager 216 creates anchor maps 238 .
- records in an anchor map 238 are keyed by the fingerprints of outbound URLs 504 present in link log 214 ( FIG. 5A ).
- each record in an anchor map 238 comprises the fingerprint of an outbound URL 504 and the text 506 that corresponds to the URL 504 in link log 214 .
- Anchor maps 238 are used by indexer 232 , 240 and 242 to facilitate the indexing of “anchor text” as well as to facilitate the indexing of URLs that do not contain words.
- indexers 232 , 240 and 242 use anchor maps 238 to make associations between outbound URLs 504 and text 506 . These associations are used to index outbound URLs for searching by users in a front-end search system (not shown).
- the documents 1002 , 1004 , and 1012 may be one of any number of types of information that can be transmitted over a network, including text files, word processing files, audio clips, video clips, and any other type of electronic data.
- the collection of documents made available to computers over the Internet in this way is commonly referred to as the World Wide Web (“the Web”).
- Each document 1002 , 1004 , and 1012 in the collection 1000 is locatable via a respective document address.
- the respective document addresses are typically uniform resource locators (“URLs”).
- the respective document addresses include other forms of network addresses.
- the entire collection 1000 may reside on one computer system, the respective document addresses including file system directory information.
- the documents 1002 , 1004 , and 1012 in collection 1000 are available at URLs from one of the segments 112 ( FIG. 1 ) in base layer 102 .
- the documents 1002 , 1004 , and 1012 in collection 1000 are available at URLs, the URLs belonging to a subset of the segment 112 in base layer 102 . Such a subset is referred to as a partition of segment 112 .
- the documents 1002 , 1004 , and 1012 in collection 1000 are available at URLs, the URLs belonging to daily crawl layer 104 .
- the documents 1002 , 1004 , and 1012 in collection 1000 are available at URLs, the URLs belonging to real-time crawl layer 106 .
- collection 1000 includes a large subset of the documents available on the World Wide Web, currently comprising approximately 3 billion documents.
- document 1002 contains a plurality of outbound links 1010 .
- Each outbound link 1010 points to a target document address, typically the URL of a target document.
- link 1010 - 1 points to the URL of target document 1012 - 1 .
- Links 1010 are typically contained within a region 1011 of document 1002 known as an “anchor tag.”
- anchor tag 1011 may include anchor text.
- Anchor text is contained in document 1002 near the URL associated with link 1011 .
- the anchor text in anchor tag 1011 is delimited by the opening and closing markup tags “ ⁇ a>” and “ ⁇ /a>,” respectively.
- the anchor text in anchor tag 1011 may contain useful information about document 1012 - 1 .
- the anchor text may include the statement “this is an interesting website about cats.” If document 1012 - 1 is unavailable for retrieval at the time crawling of collection 1000 is performed, this anchor text provides textual information that can be searched by keyword.
- Document 1012 - 1 may be unavailable for crawling because the server on which it is hosted is not operational at the time of crawling, the server on which it is hosted challenges the robot for a password, or any number of other reasons. Additionally, document 1012 - 1 may be an image file, a video file, or an audio file, in which case there is no textual information readily available from the contents of document 1012 - 1 .
- document 1002 may be a relatively authoritative web page that contains text near or in an anchor tag associated with link 1010 - 1 stating that “the server that hosts web page 1012 - 1 is frequently unavailable.” Page 1012 - 1 may contain no text indicating that it is frequently unavailable.
- page 1012 - 1 is successfully crawled and indexed, a user of a search engine employing the index will have no way to learn of the potential unavailability of page 1012 - 1 unless information from page 1002 is returned in response to a query.
- inbound links 1008 associated with document 1002 are inbound links 1008 .
- document 1002 is a target document.
- source document 1004 - 1 includes link 1008 - 1 , link 1008 - 1 pointing to the URL at which document 1002 resides.
- Document 1004 - 1 which is a source document relative to link 1008 - 1 , may also contain an annotation in region 1006 of link 1008 - 1 .
- the annotation may also be an anchor tag.
- source documents 1004 containing links 1008 pointing to the URL of target document 1002 contain only one link, documents 1004 may contain any number of links.
- FIG. 7 depicts part of a web crawling system in accordance with some embodiments.
- URL scheduler 202 includes one or more link log records 1104 .
- Each record 1104 includes a respective source document identifier, a respective list of target document identifiers, and, preferably, a respective list of annotations.
- record 1104 - 1 includes the source document identifier “URL 1 .”
- the source document identifier is a URL fingerprint (also referred to as “URL FP” or simply as “FP”) associated with the URL.
- a URL fingerprint is preferably a 64-bit integer determined by applying a hash function or other one way function to a URL.
- Record 1104 - 1 also contains a list of target document identifiers, the list including “URL 2 ,” “URL 3 ,” and “URL 6 .” Each of the target document identifiers are preferably represented by URL fingerprints in link log 214 .
- each record 1104 in link log 214 further includes a respective list of annotations 1105 .
- record 1104 - 1 includes a list of annotations 1105 , the list including annotations 1105 - 1 - 2 , 1105 - 1 - 3 , and 1105 - 1 - 6 .
- An annotation 1105 can include text from an anchor tag in the document at the source document address corresponding to the source document identifier URL 1 .
- the text included in an annotation 1105 can be a continuous block of text from the source document, in which case it is referred to as a text passage.
- Annotations 1105 also, in some embodiments, include text outside the anchor tag in the document referred to by URL 1 .
- a text passage for inclusion in annotation 1105 may be determined from text within a predetermined distance of an anchor tag in a source document.
- the predetermined distance could be based on a number of characters in the HTML code of the source document, the placement of other anchor tags in the source document, or any one of a number of other predefined criteria, hereinafter called anchor text identification criteria.
- annotations 1005 also include a list of attributes of the text they include.
- the list may contain one, two, or any number of entries.
- attributes include, but are not limited to:
- URL 1 may be the fingerprint of the URL at which document 1002 resides.
- each entry in the list of target document addresses in record 1104 - 1 correspond to a link 1010 in document 1002 .
- target document identifier URL 2 may be the URL fingerprint of the URL to which link 1010 - 1 points.
- target document identifier URL 3 may be the URL fingerprint of the document to which link 1010 - 2 points.
- Each entry in the list of annotations 1105 preferably also refers to a link 1010 in document 1002 .
- annotation 1105 - 1 - 2 may contain text from the anchor tag 1011 associated with link 1010 - 1 .
- source document identifier URL 8 in record 1104 -L from link log 214 includes the URL fingerprint of the URL at which document 1004 - 1 ( FIG. 6 ) resides
- URL 1 will be the URL fingerprint of the URL at which document 1002 resides
- annotation 1105 - 8 - 1 may include text from anchor tag 1006 in document 1004 - 1 .
- global state manager 216 accesses a portion 1103 of link log 214 .
- Global state manager 216 then produces sorted link map 1110 -M and sorted anchor map 1112 -N.
- production of link map 1110 -M and anchor map 1112 -N do not occur simultaneously, as explained in more detail in conjunction with the discussion of FIG. 8 , below.
- the portion 1103 of link log 214 that is accessed by global state manager 216 is chosen by global state manager 216 so that all records 1104 in portion 1103 can reside in the random access memory (RAM) of global state manager 216 .
- RAM random access memory
- portion 1103 may correspond the largest subset of records 1104 that require no more than 1 GB (gigabyte) of RAM to store.
- processing necessary to produce sorted anchor map 1112 -N and sorted link map 1110 -M can be performed rapidly, as minimal access to secondary storage, such as a hard disk drive, in required by global state manage 216 .
- Anchor map 1112 may contain annotations 1304 that include information from the anchor tags in source documents.
- Indexer 232 / 240 / 242 is configured to build an index of the collection of documents based, at least in part, on the sorted anchor map.
- the search engine receives a query, not only can it search the contents of a document itself for one or more of the query terms; it can also search any annotations associated with a document for one or more of the query terms.
- Sorted anchor map 1112 includes one or more anchor map records 1302 .
- Each record 1302 includes a respective target document identifier, a respective list of source document identifiers, and a respective list of annotations.
- record 1302 - 2 includes source document identifier 1303 .
- target document identifier 1303 is a URL fingerprint of a corresponding URL.
- Identifier 1303 contains the URL fingerprint URL- 2 . Records 1302 are ordered in map 1112 in accordance with their respective target document identifiers.
- records 1302 are ordered so the target document identifier monotonically increases with the position of the record in the map. For example, in these embodiments URL- 2 is greater than URL- 1 , so record 1302 - 2 appears after record 1302 - 1 in map 1112 . In other embodiments where the target document identifiers are URL fingerprints, records 1302 are ordered so the target document identifier monotonically decreases with the position of the record in the map.
- indexers 232 , 240 , or 242 access map 1112 for information about a particular target document identifier, not all records 1304 need to be searched in embodiments where records 1304 are ordered based on the target document identifier. For example, binary search techniques can be used to quickly locate the record corresponding to the particular target document identifier.
- record 1302 - 2 further includes a list of source document identifiers, including the entries URL- 2 - 1 , URL- 2 - 2 , . . . , URL- 2 -N 2 .
- Each entry in the list of source document identifiers corresponds to a source document address.
- the source document residing at each of the corresponding source document addresses contains a link pointing to the target document residing at the URL corresponding to the target document identifier 1303 .
- the document at the URL corresponding to URL- 2 - 1 contains a link pointing to the document corresponding to URL- 2 .
- the source document identifiers are preferably the URL fingerprints of their corresponding source document addresses.
- record 1302 - 2 includes a list of annotations 1304 .
- Each annotation 1304 is associated with an entry in the list of source document identifiers.
- annotation 1304 - 1 is associated with URL- 2 - 1
- annotation 1304 - 2 with URL- 2 - 2
- An annotation 1304 - 1 may contain text near or in an anchor tag in the source document corresponding to the associated source document identifier. For example, when annotation 1304 - 1 contains the text “what URL- 2 - 1 says about URL- 2 ,” this text is found in the source document corresponding to URL fingerprint URL- 2 - 2 .
- annotation 1304 is a delete entry.
- annotation 1304 - 2 is a delete entry.
- a delete entry is generated by global state manager 216 ( FIG. 7 ) when it determines that a link no longer exists.
- global state manager 216 may have written a record in sorted anchor map 1112 - 1 ( FIG. 7 ) with target document identifier URL- 2 and a respective entry for source document identifier URL- 2 - 2 .
- manager 216 by examining link log 214 , layered set 220 of sorted link maps 1110 , or both, may determine that the document corresponding to URL- 2 - 2 no longer contains a link to the document corresponding to URL- 2 .
- the global state manager 216 is configured to generate a delete entry 1304 - 2 in the current sorted anchor map 1112 .
- Map 1110 includes one or more link map records 1402 .
- Each record 1402 includes a respective source document identifier.
- record 1402 - 2 contains source document identifier 1403 .
- the source document identifiers are preferably URL fingerprints.
- source document identifier 1403 contains URL fingerprint URL- 2 .
- URL- 2 is the fingerprint of a URL of an associated source document.
- URL- 2 is the fingerprint of document 1002 ( FIG. 6 ).
- Each record 1402 further includes a list of target document identifiers.
- record 1402 - 2 contains a list of target document identifiers 1404 .
- Target document identifiers 1404 are preferably URL fingerprints.
- target identifiers 1404 each correspond to a link contained in source document 1002 ( FIG. 6 ) corresponding to (and identified by) source document identifier URL- 1 .
- document 1002 contains a link 1010 - 1 to document 1012 - 1 , and there is a corresponding target document identifier 1404 - 1 that corresponds to the URL in link 1010 - 1 .
- the URL in link 1010 - 1 has a URL fingerprint URL- 2 - 1 ( FIG. 10 ), and document 1012 - 1 ( FIG. 6 ) resides at this URL.
- map 1110 is organized so as to make the link information readily accessible.
- records 1402 are ordered in map 1110 based on their respective source document identifiers.
- the source document identifiers are URL fingerprints
- records 1402 are ordered so the source document identifier monotonically increases with the position of the record in the map.
- URL- 2 is greater than URL- 1 , so record 1402 - 2 appears after record 1402 - 1 in map 1110 .
- the target document identifiers are URL fingerprints
- records 1402 are ordered so the source document identifier monotonically decreases with the position of the record in the map.
- sorted link maps 1110 - 1 , 1110 - 2 , and 1110 - 3 are produced by global state manager 216 .
- link record sorter 1202 , link map merger 1204 , anchor sorter 1208 , and anchor map merger 1210 are separate modules in state manager 216 , in other embodiments they may all be contained in the same module. In still other embodiments, any number of modules may perform the functions of state manager 216 , with the duties of the various modules in FIG. 8 divided in any number of ways thereupon.
- sorted link maps 1110 - 1 , 1110 - 2 , and 1110 - 3 are produced by link record sorter module 1202 in global state manager 216 whenever a link log flush condition is satisfied.
- the flush condition may be a function of the time since a last link map was produced, the amount of new data present in the link log 214 , the amount of memory available to the global state manager (i.e., memory available in the server that executes the global state manager) or any combination or subset thereof.
- Link record sorter 1202 outputs each sorted link map 1110 at a specific time, referred to as an associated production time. Each sorted link map 1110 is thus associated with a production time. The production time of a sorted link map 1110 may be stored explicitly in the map.
- the production time is implicitly stored by the position of a sorted link map 1110 in the layered set 220 of sorted link maps.
- sorted link map 1110 - 2 can be determined to have an associated production time that is earlier than that of sorted link map 1110 - 3 but later than that of sorted link map 1110 - 1 .
- Anchor log 1206 includes a plurality of records.
- the records in anchor log 1206 have a format similar to that of the records in link log 214 .
- Some records in anchor log 1206 includes a source document identifier, a list of target document identifiers, and a list of annotations.
- Records in anchor log 1206 can also contain a delete link entry or a delete node entry.
- a delete link entry includes a source document identifier, a target document identifier, and a special marker in the annotation field of the record indicating that all links between the source document identifier and the target document identifier are to be removed.
- Link record sorter 1202 generates a delete link entry when it encounters two records for a particular source document a portion 1103 of link log 214 (shown in FIG. 7 ), and the two records contain contradictory information about the target documents of the particular source document. For example, when a first and a second record both contain URL 1 as the source document identifier, the first record contains URL 2 in the list of target document identifiers, and the second record does not contain URL 2 in the list of target document identifiers, sorter 1202 may generate a delete link entry. If the first record is older (appearing earlier in link log 214 ) than the second record, sorter 1202 generates a delete link entry in anchor log 1206 .
- the delete link entry contains URL 1 , URL 2 , and a special marker as the source document identifier, the target document identifier, and the annotation, respectively. If, on the other hand, the first record is newer (appearing later in log 214 ) than the second record, the link from URL 1 to URL 2 was published after the generation of the second record. Thus, in this case, sorter 1202 does not generate a delete link entry.
- a delete node entry is generated by link record sorter 1202 when sorter 1202 determines, based on the records in portion 1103 of link log 214 , that a target (or source) document has been removed altogether. For example, if by comparing the records in link log 214 it is determined that two links no longer exist, both of which point to URL 2 , sorter 1202 determines in some embodiments that the document corresponding to URL 2 has disappeared altogether and generates an appropriate delete node entry. Alternately, the web crawler may receive information when attempting to download URL 2 that the document no longer exists, and this information may be inserted by the content filters 210 into the link log 214 .
- a delete node entry includes the document identifier of the document to be deleted, and a special marker identifying the record as a delete node entry.
- page rankers 222 when page rankers 222 require information from the layered set 220 of sorted link maps about a document with a particular source document identifier, page rankers 222 sometimes search each sorted link map 1110 in layered set 220 . If more than one record containing the particular source document is found, each record possibly from a different map 1110 , page rankers 222 must determine how to merge the information in the more than one record. In some embodiments, page rankers 222 simply take the most recent information available in set 220 , i.e., the respective list of target documents from the record containing the particular source document identifier in the sorted link map 1110 with the most recent production time. Other records that contain the particular source document identifier are disregarded.
- page rankers 222 need not traverse all the maps 1110 in layered set 220 to determine the information required about a particular source document. Rather, page rankers 222 traverse maps 1110 in order of descending recency. Thus, map 1110 -N is searched first, followed by map 1110 -(N ⁇ 1), map 1110 -(N ⁇ 2), and so on. However, in other embodiments, all the maps 1110 are searched in parallel, using parallel threads or servers, because this is the fastest and most efficient way to search the sorted link maps. While this methodology may appear to use more resources, it completes the search task faster, which is of primary importance in a web crawler that crawls very large numbers of pages (e.g., hundreds of billions of pages).
- sorted link maps 1110 are not written to again.
- a mechanism is needed to consolidate the information contained in older maps in layered set 220 of link maps 1110 .
- global state manager 216 when a merge condition has been satisfied, performs a merge operation on a subset of the maps 1110 in layered set 220 .
- state manager 216 may have a predetermined time schedule for determining when the merge condition has been satisfied and, consequently, when to perform merge operations.
- state manager 216 may periodically merge subsets of maps 1110 .
- other criteria are used as part of the merge condition. For example, state manager 216 may find that the merge condition is satisfied any time the number of maps 1110 in set 220 exceeds a predetermined number. As another example, the merge condition may be satisfied any time state manager 216 has been idle for a predetermined amount of time or predetermined number of processor cycles.
- the merge condition may also be a function of the amount of link data in the unmerged sorted link maps 1110 (the amount of link data may vary from one set of sort link maps to another).
- link map merger module 1204 part of global state manager 216 , performs a merge operation on a subset of the set 220 of sorted link maps 1110 .
- the subset contains the three maps 1110 - 1 , 1110 - 2 , and 1110 - 3 , in other embodiments and under other conditions the subset could contain fewer or more maps.
- the set of sorted link maps that are merged are generally contiguous or neighboring maps within the layered set 238 of sorted link maps 1110 .
- the sorted link maps that are merged are preferably similar in size, for example, having sizes that are within a factor of 2 of each other. Merging large files with much smaller files is less efficient, in terms of computational resources used, than merging similarly sized files.
- small link maps are merged with other small link maps, and similarly sized, larger merged link maps are merged with each other.
- Merger 1204 outputs merged link map 1110 -(M+1).
- Merged link map 1110 -(M+1) includes one or more records, each record containing a source document identifier and list of target document identifiers. Each record in map 1110 -(M+1) contains the same document identifier as one or more records in the subset of sorted link maps. When more than one record in the subset exists for a particular source document identifier, the most recent record is transferred to merged map 1110 -(M+1). Additionally, the merge operation may generate delete link and delete node entries in anchor log 1206 upon detecting contradictory information in two or more records in the subset for a particular source document identifier.
- the link map merger 1204 outputs the merged link map to layered set 220 and schedules the link maps 1110 in the merged subset (in FIG. 8 , maps 1110 - 1 , 1110 - 2 , and 1110 - 3 ) for destruction at a later time.
- the merged link maps are retained temporarily to enable rollbacks and other recovery operations.
- sorted anchor maps 1112 - 1 , 1112 - 2 , and 1112 - 3 are produced by global state manager 216 at various production times.
- the production times of each sorted anchor map 1112 may be stored explicitly or implicitly, for example by ordering in the layered set 238 of sorted anchor maps 1112 .
- Anchor sorter 1208 part of state manager 216 , outputs sorted anchor maps 1112 at their respective production times.
- sorter 1208 reads all or a portion of anchor log 1206 and consolidates all of the information about a particular target document therein, generating an anchor map record for the particular target document.
- Sorter 1208 repeats this process for all target document identifiers in anchor log 1206 , generating a plurality of anchor map records. If there are any delete link or delete node entries for the particular target document, they are processed if possible or left in the record. It is not possible to process a delete link entry, for example, when the portion of the anchor log 1206 selected for processing by sorter 1208 contains no other information about the referenced link. Finally, sorter 1208 sorts all consolidated records based on the value of their respective target document identifiers and outputs a sorted anchor map 1112 .
- Indexers access information in the set 238 of sorted anchor maps, and must access all maps 1112 containing a particular target document identifier. Referring back to FIG. 7 , when indexers 232 / 240 / 242 require information from the layered set 238 of sorted anchor maps about a document with a particular target document identifier, indexers 232 / 240 / 242 sometimes search each sorted anchor map 1112 in layered set 238 . If more than one record containing the particular target document is found, each record possibly from a different map 1112 , indexers 238 must determine how to merge the information in the more than one record.
- indexers 232 / 240 / 242 simply take all the information available in set 238 , i.e., the lists of target documents from all records containing the particular target document identifier in the sorted anchor map 1112 . In these embodiments, indexers 232 / 240 / 242 222 must traverse all the maps 1112 in layered set 238 to determine the information required about a particular target document.
- the indexers also access information in the set 238 of sorted anchor maps corresponding to links to one or more duplicates of a page that is being indexed.
- the RT log entry for a page contains a list of the URL fingerprints of a set of such duplicate pages (for pages having duplicate pages).
- the list is preferably limited in size to have no more than K entries, where K is a predetermined integer, preferably having a value between 2 and 10.
- the indexers access the anchor text for the links pointing to each of the identified duplicate pages and index that anchor text as part of the process of indexing the page.
- a wider range of anchor text is included in the text that is treated as being part of or associated with a page for purposes of indexing the content of the page. This is particularly useful, for instance, when one or more of the links to one or more of the non-canonical pages has anchor text in a different language than the anchor text of the links to the canonical page.
- Global state manager 216 when an anchor merge condition has been satisfied, performs a merge operation on a subset of the maps 1112 in layered set 238 .
- state manager 216 may have a predetermined time schedule for determining when the anchor merge condition has been satisfied and, consequently, when to perform anchor merge operations. For example, state manager 216 may periodically merge subsets of maps 1112 .
- other criteria are used as part of the anchor merge condition. For example, state manager 216 may find that the anchor merge condition is satisfied any time the number of maps 1112 in set 238 exceeds a predetermined number, or the amount of data in the maps 1112 exceeds a predefined threshold. As another example, the anchor merge condition may be satisfied any time state manager 216 has been idle for a predetermined amount of time or predetermined number of processor cycles. ??
- anchor map merger 1210 when global state manager 216 detects that an anchor merge condition has been satisfied, anchor map merger 1210 performs a merge operation on a subset ( 1112 -, 1112 - 2 , and 1112 - 3 ) of layered set 238 of sorted anchor maps 1112 . As a result, anchor map merger 1210 produces merged anchor map 1112 -(N+1).
- the anchor merge condition is not necessarily satisfied at the same time that the link merge condition related to set 220 is satisfied.
- Anchor sorter 1208 outputs sorted anchor maps 1112 at specific times, referred to hereafter as associated production times. Each sorted anchor map 1112 is thus associated with a production time. The production time of a sorted link map 1112 may be stored explicitly in the map.
- the production time is implicitly stored by the position of a sorted anchor map 1112 in the layered set 238 of sorted anchor maps.
- sorted anchor map 1112 - 2 can be determined to have an associated production time that is earlier than that of sorted anchor map 1112 - 3 but later than that of sorted anchor map 1112 - 1 .
- a subset of sorted anchor maps 1112 are collected for merging. Although K such maps are shown in FIG. 11 ( 1112 - 1 , 1112 - 2 , . . . , 1112 -K), any number of two or more maps 1112 may be gathered for this purpose.
- all records containing a particular target document identifier in the subset of maps 1112 are accessed, read, and flagged. All such records are flagged so that information contained therein is not processed twice. Flagging can comprise actual deletion of the record in its corresponding map, maintenance of a list (for example, in the anchor map merger 1210 in FIG.
- the particular target document identifier is URL- 2 .
- the set of all records 1501 containing source document identifier URL- 2 include records 1501 - 1 from map 1112 - 1 , record 1501 - 2 from map 1112 - 2 , and record 1501 - 3 from map 1112 -K.
- URL- 2 - 2 appears in the list of source document identifiers, and some anchor text appears in a corresponding entry in the list of annotations.
- URL- 2 - 2 appears in the list of source document identifiers, and a delete entry appears in a corresponding entry in the list of annotations. Because map 1112 - 2 is more recent than map 1112 - 1 , the conflicting information about the link from URL- 2 - 2 to URL- 2 is resolved by not including URL- 2 - 2 in the list of source document identifiers 1502 in merged anchor map 1112 -(N+1). Were map 1112 - 2 less recent than map 1112 - 1 , the conflict would be resolved by inserting URL- 2 - 2 in the list of source document identifiers 1502 . Record 1501 - 4 in merged anchor map 1112 -(N+1) also contains, for a given target-source document pairing, the most recent annotation found from amongst the subset of sorted anchor maps 1112 being merged.
- Page ranking query-independent relevance determination.
- a page rank can be computed for one or more documents.
- Page rankers 222 FIG. 2 ) compute a page rank for a given document by considering not only the number of documents that contain links pointing to the URL at which the document resides, but also the page rank of such documents. For example, referring to FIG. 6 , documents 1004 - 1 , 1004 - 2 , . . . , 1004 -X all contain links 1008 pointing to the URL at which document 1002 resides. Thus, the page rank of document 1002 depends on the number of links 1008 as well as the page ranks of documents 1004 .
- Each of the documents 1004 may contain other links, not depicted, that do not point to the URL of document 1002 .
- the computation of page rank proceeds by starting with an initial page rank for each document, computing, for one or more records in one or more maps 1110 , a partial page rank contribution from the source document to each of the target documents in the record, and continuously updating the estimates of the page ranks of documents as new information becomes available from set 220 .
- Page rank data can also be obtained from URL managers 204 .
- a more complete explanation of the computation of page rank is found in U.S. Pat. No. 6,285,999, which is hereby incorporated by reference in its entirety.
- web page indexing system 1600 is implemented using one or more computer systems, as schematically shown in FIG. 12 .
- search engine systems designed to process large volumes of queries may use more complicated computer architectures than the one shown in FIG. 12 .
- a front end set of servers may be used to receive and distribute queries among a set of back end servers that actually process the queries.
- the system 1600 shown in FIG. 12 would be one of the back end servers.
- the computer system will typically have one or more processors, e.g., central processing units (CPUs) 1602 , a network or other communications interface 1604 , primary and secondary storage 1608 , and one or more communication busses 1606 for interconnecting these components.
- Primary and secondary storage 1608 can include high speed random access memory and can also include non-volatile memory, such as one or more magnetic disk storage devices (not shown).
- Primary and secondary storage 1608 can include mass storage that is remotely located from the central processing unit(s) 1602 .
- Primary and secondary storage 1608 or alternatively one or more storage devices (e.g., one or more nonvolatile storage devices) within storage 1608 , includes a non-transitory computer readable storage medium.
- the primary and secondary storage 1608 or the non-transitory computer readable storage medium of storage 1608 preferably stores:
- the primary and secondary storage 1608 or the non-transitory computer readable storage medium of storage 1608 of the computer system 1600 may also store one or more of the following additional modules and data structures:
- link log data structure 214 further includes one or more link log records 1104 .
- Each record 1104 preferably includes
- Global state manager 216 can include executable procedures, sub-modules, tables and other data structures.
- global state manager 216 includes instructions for detecting the satisfaction of a merge condition and executing a merge operation.
- the merge condition may depend on any number of temporal or storage considerations.
- global state manager 216 further includes instructions for detecting the satisfaction of an anchor merge condition and executing an anchor merge operation.
- the anchor merge condition may depend on any number of temporal or storage considerations.
Abstract
Description
-
- a link log data structure, the link log comprising a plurality of link records, wherein each link record comprises a respective source document identifier corresponding to a respective source document address and a respective list of target document identifiers corresponding to respective target document addresses;
- a global state manager module configured to access the link log; and
- a sorted anchor map data structure.
daily score=[page rank]2*URL change frequency
crawl score=[page rank]2*(change frequency)*(time since last crawl).
-
- Emphasized, as when the text is enclosed by the HTML tags <EM> and </EM>;
- Citation, as when the text is enclosed by the HTML tags <CITE> and </CITE>;
- Variable name, as when the text is enclosed by the HTML tags <VAR> and </VAR>;
- Strongly Emphasized, as when the text is enclosed by the HTML tags <STRONG> and </STRONG>; and
- Source Code, as when the text is enclosed by the HTML tags <CODE>Source Code</CODE>.
Other examples of attributes include text position, number of characters in the text passage, number of words in the text passage, and so on.
PR(1002)=(1−d)+d*(PR(1004-1)/C(1004-1)+PR(1004-2)/C(1004-2)+ . . . +PR(1004-X)/C(1004-X)),
where PR(n) denotes the page rank of document n, C(n) is the number of outgoing links in document n, and d is a number in the range between 0 and 1. In some embodiments, d is 0.85.
PR1002(1012-1)=d*PR(1002)/C(1002).
The current estimate of the page rank of document 1012-1 at any time is simply
PR(1012-1)=(1−d)+ΣPRn(1012-1),
where the sum is taken over all documents that are known to link to document 1012-1.
-
- an
operating system 1610 that includes procedures for handling various basic system services and for performing hardware dependent tasks; - a
network interface module 1612 that is used for connecting thesystem 1600 to various other computers (e.g., thepage rankers 222 andcontent filters 210 inFIG. 7 ) and for accessing and receiving associated log files (e.g.,link log 214 inFIG. 7 ) via one or more communication networks, such as, the Internet, other wide area networks, local area networks, metropolitan area networks, and so on; and - a global
state manager module 216, configured to access a linklog data structure 214, and preferably including instructions for writing to asorted link map 1110 and a sorted anchor map.
- an
-
- an
indexer module 232/240/242 for generating a real-time index, daily index, base index, or any subset or combination thereof; - a link
log data structure 214, including one or morelink log records 1104; - a
layered set 220 of sorted linkmap data structures 1110; and - a
layered set 238 of sorted anchormap data structures 1112.
However, in some embodiments, the index modules and these data structures, or a subset thereof, are stored on different servers than the server that executes the globalstate manager module 216. These servers are interconnected by a high speed communication network, enabling the global state manager to efficiently perform its tasks despite the fact that the link log data it reads and/or the sets of maps it generates are stored elsewhere.
- an
-
- a respective source document identifier (URL1 in record 1104-1);
- a respective list of target document identifiers (including URL2, URL3, and URL6 in record 1104-1); and
- a respective list of annotations 1105.
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/088,670 US10210256B2 (en) | 2003-07-03 | 2016-04-01 | Anchor tag indexing in a web crawler system |
Applications Claiming Priority (4)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/614,113 US7308643B1 (en) | 2003-07-03 | 2003-07-03 | Anchor tag indexing in a web crawler system |
US11/936,421 US8484548B1 (en) | 2003-07-03 | 2007-11-07 | Anchor tag indexing in a web crawler system |
US13/300,516 US9305091B2 (en) | 2003-07-03 | 2011-11-18 | Anchor tag indexing in a web crawler system |
US15/088,670 US10210256B2 (en) | 2003-07-03 | 2016-04-01 | Anchor tag indexing in a web crawler system |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/300,516 Continuation US9305091B2 (en) | 2003-07-03 | 2011-11-18 | Anchor tag indexing in a web crawler system |
Publications (2)
Publication Number | Publication Date |
---|---|
US20160321252A1 US20160321252A1 (en) | 2016-11-03 |
US10210256B2 true US10210256B2 (en) | 2019-02-19 |
Family
ID=38792984
Family Applications (4)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/614,113 Active 2025-02-09 US7308643B1 (en) | 2003-07-03 | 2003-07-03 | Anchor tag indexing in a web crawler system |
US11/936,421 Expired - Fee Related US8484548B1 (en) | 2003-07-03 | 2007-11-07 | Anchor tag indexing in a web crawler system |
US13/300,516 Expired - Fee Related US9305091B2 (en) | 2003-07-03 | 2011-11-18 | Anchor tag indexing in a web crawler system |
US15/088,670 Expired - Lifetime US10210256B2 (en) | 2003-07-03 | 2016-04-01 | Anchor tag indexing in a web crawler system |
Family Applications Before (3)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/614,113 Active 2025-02-09 US7308643B1 (en) | 2003-07-03 | 2003-07-03 | Anchor tag indexing in a web crawler system |
US11/936,421 Expired - Fee Related US8484548B1 (en) | 2003-07-03 | 2007-11-07 | Anchor tag indexing in a web crawler system |
US13/300,516 Expired - Fee Related US9305091B2 (en) | 2003-07-03 | 2011-11-18 | Anchor tag indexing in a web crawler system |
Country Status (1)
Country | Link |
---|---|
US (4) | US7308643B1 (en) |
Cited By (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20180336371A1 (en) * | 2017-05-16 | 2018-11-22 | Apple Inc. | Techniques for enabling a software application to access files at a computing device while enforcing privacy measures |
US11347579B1 (en) | 2021-04-29 | 2022-05-31 | Bank Of America Corporation | Instinctive slither application assessment engine |
US11455460B2 (en) * | 2018-02-12 | 2022-09-27 | Zhangyue Technology Co., Ltd | Method for displaying handwritten note in electronic book, electronic device and computer storage medium |
Families Citing this family (88)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6883135B1 (en) * | 2000-01-28 | 2005-04-19 | Microsoft Corporation | Proxy server using a statistical model |
US7308643B1 (en) | 2003-07-03 | 2007-12-11 | Google Inc. | Anchor tag indexing in a web crawler system |
US8707312B1 (en) | 2003-07-03 | 2014-04-22 | Google Inc. | Document reuse in a search engine crawler |
US7725452B1 (en) * | 2003-07-03 | 2010-05-25 | Google Inc. | Scheduler for search engine crawler |
US7882139B2 (en) * | 2003-09-29 | 2011-02-01 | Xunlei Networking Technologies, Ltd | Content oriented index and search method and system |
US7346839B2 (en) | 2003-09-30 | 2008-03-18 | Google Inc. | Information retrieval based on historical data |
US7519726B2 (en) * | 2003-12-12 | 2009-04-14 | International Business Machines Corporation | Methods, apparatus and computer programs for enhanced access to resources within a network |
US7831581B1 (en) | 2004-03-01 | 2010-11-09 | Radix Holdings, Llc | Enhanced search |
EP1728138A1 (en) * | 2004-03-16 | 2006-12-06 | Grid Analytics Llc | System and method for aggregation and analysis of information from multiple disparate sources while assuring source and record anonymity using an exchange hub |
US7987172B1 (en) * | 2004-08-30 | 2011-07-26 | Google Inc. | Minimizing visibility of stale content in web searching including revising web crawl intervals of documents |
US7606793B2 (en) | 2004-09-27 | 2009-10-20 | Microsoft Corporation | System and method for scoping searches using index keys |
US7739277B2 (en) | 2004-09-30 | 2010-06-15 | Microsoft Corporation | System and method for incorporating anchor text into ranking search results |
US7827181B2 (en) * | 2004-09-30 | 2010-11-02 | Microsoft Corporation | Click distance determination |
US7761448B2 (en) * | 2004-09-30 | 2010-07-20 | Microsoft Corporation | System and method for ranking search results using click distance |
US20060117257A1 (en) * | 2004-11-30 | 2006-06-01 | International Business Machines Corporation | System and method for processing JavaScript resource files |
US7716198B2 (en) | 2004-12-21 | 2010-05-11 | Microsoft Corporation | Ranking search results using feature extraction |
US7792833B2 (en) | 2005-03-03 | 2010-09-07 | Microsoft Corporation | Ranking search results using language types |
US8386459B1 (en) * | 2005-04-25 | 2013-02-26 | Google Inc. | Scheduling a recrawl |
US8666964B1 (en) | 2005-04-25 | 2014-03-04 | Google Inc. | Managing items in crawl schedule |
US8661459B2 (en) * | 2005-06-21 | 2014-02-25 | Microsoft Corporation | Content syndication platform |
US7509315B1 (en) | 2005-06-24 | 2009-03-24 | Google Inc. | Managing URLs |
US7599917B2 (en) | 2005-08-15 | 2009-10-06 | Microsoft Corporation | Ranking search results using biased click distance |
US7761423B1 (en) * | 2005-10-11 | 2010-07-20 | OneSpot, Inc. | System and method for indexing a network of interrelated elements |
US7814102B2 (en) * | 2005-12-07 | 2010-10-12 | Lexisnexis, A Division Of Reed Elsevier Inc. | Method and system for linking documents with multiple topics to related documents |
US8307275B2 (en) * | 2005-12-08 | 2012-11-06 | International Business Machines Corporation | Document-based information and uniform resource locator (URL) management |
US7599931B2 (en) * | 2006-03-03 | 2009-10-06 | Microsoft Corporation | Web forum crawler |
US7437373B2 (en) * | 2006-03-06 | 2008-10-14 | The Real Time Matrix Corporation | Method and system for correlating information |
US8126874B2 (en) * | 2006-05-09 | 2012-02-28 | Google Inc. | Systems and methods for generating statistics from search engine query logs |
US7912831B2 (en) * | 2006-10-03 | 2011-03-22 | Yahoo! Inc. | System and method for characterizing a web page using multiple anchor sets of web pages |
US7593935B2 (en) | 2006-10-19 | 2009-09-22 | Paxfire | Methods and systems for node ranking based on DNS session data |
US7672943B2 (en) * | 2006-10-26 | 2010-03-02 | Microsoft Corporation | Calculating a downloading priority for the uniform resource locator in response to the domain density score, the anchor text score, the URL string score, the category need score, and the link proximity score for targeted web crawling |
US7788253B2 (en) * | 2006-12-28 | 2010-08-31 | International Business Machines Corporation | Global anchor text processing |
US7701944B2 (en) * | 2007-01-19 | 2010-04-20 | International Business Machines Corporation | System and method for crawl policy management utilizing IP address and IP address range |
US7809705B2 (en) * | 2007-02-13 | 2010-10-05 | Yahoo! Inc. | System and method for determining web page quality using collective inference based on local and global information |
US7756867B2 (en) * | 2007-02-16 | 2010-07-13 | Yahoo! Inc. | Ranking documents |
US7930286B2 (en) * | 2007-02-16 | 2011-04-19 | Yahoo! Inc. | Federated searches implemented across multiple search engines |
US20080215541A1 (en) * | 2007-03-01 | 2008-09-04 | Microsoft Corporation | Techniques for searching web forums |
US8959433B2 (en) * | 2007-08-19 | 2015-02-17 | Multimodal Technologies, Llc | Document editing using anchors |
US7840569B2 (en) | 2007-10-18 | 2010-11-23 | Microsoft Corporation | Enterprise relevancy ranking using a neural network |
US9348912B2 (en) | 2007-10-18 | 2016-05-24 | Microsoft Technology Licensing, Llc | Document length as a static relevance feature for ranking search results |
US9935919B2 (en) * | 2008-02-25 | 2018-04-03 | Ca, Inc. | Directory partitioned system and method |
US20090240670A1 (en) * | 2008-03-20 | 2009-09-24 | Yahoo! Inc. | Uniform resource identifier alignment |
US20090249178A1 (en) * | 2008-04-01 | 2009-10-01 | Ambrosino Timothy J | Document linking |
US8812493B2 (en) | 2008-04-11 | 2014-08-19 | Microsoft Corporation | Search results ranking using editing distance and document information |
US8010526B1 (en) * | 2008-07-30 | 2011-08-30 | Zscaler, Inc. | Instance counting and ranking |
US8713009B2 (en) * | 2008-09-25 | 2014-04-29 | Yahoo! Inc. | Associating objects in databases by rate-based tagging |
US8321401B2 (en) * | 2008-10-17 | 2012-11-27 | Echostar Advanced Technologies L.L.C. | User interface with available multimedia content from multiple multimedia websites |
US8468158B2 (en) * | 2008-11-06 | 2013-06-18 | Yahoo! Inc. | Adaptive weighted crawling of user activity feeds |
US20100131563A1 (en) * | 2008-11-25 | 2010-05-27 | Hongfeng Yin | System and methods for automatic clustering of ranked and categorized search objects |
US8386314B2 (en) * | 2008-12-11 | 2013-02-26 | Accenture Global Services Limited | Online ad detection and ad campaign analysis |
US8433998B2 (en) * | 2009-01-16 | 2013-04-30 | International Business Machines Corporation | Tool and method for annotating an event map, and collaborating using the annotated event map |
US9225794B2 (en) * | 2009-03-31 | 2015-12-29 | Google Inc. | Adaptive DNS pre-resolution |
US8190645B1 (en) | 2009-06-04 | 2012-05-29 | Matthew Charles Bashaw | Method and system for storing, retrieving, and sharing data using a field-accessed database system comprising a mobile unit |
US9213780B2 (en) * | 2009-06-26 | 2015-12-15 | Microsoft Technology Licensing Llc | Cache and index refreshing strategies for variably dynamic items and accesses |
CN102117437A (en) * | 2009-12-31 | 2011-07-06 | 鸿富锦精密工业（深圳）有限公司 | Distributed electronic sing-off realization system and method |
US8660976B2 (en) | 2010-01-20 | 2014-02-25 | Microsoft Corporation | Web content rewriting, including responses |
US8738635B2 (en) | 2010-06-01 | 2014-05-27 | Microsoft Corporation | Detection of junk in search result ranking |
US9582575B2 (en) | 2010-07-09 | 2017-02-28 | Lexisnexis, A Division Of Reed Elsevier Inc. | Systems and methods for linking items to a matter |
US8732697B2 (en) | 2010-08-04 | 2014-05-20 | Premkumar Jonnala | System, method and apparatus for managing applications on a device |
EP2601591A4 (en) * | 2010-08-04 | 2017-02-08 | Copia Interactive, LLC | System for and method of collaborative annotation of digital content |
US8676783B1 (en) * | 2011-06-28 | 2014-03-18 | Google Inc. | Method and apparatus for managing a backlog of pending URL crawls |
US20130031455A1 (en) | 2011-07-28 | 2013-01-31 | Peter Griffiths | System for Linking to Documents with Associated Annotations |
US9495462B2 (en) | 2012-01-27 | 2016-11-15 | Microsoft Technology Licensing, Llc | Re-ranking search results |
EP2885731B1 (en) | 2012-08-17 | 2019-12-18 | Twitter, Inc. | Search infrastructure |
CN103631794B (en) * | 2012-08-22 | 2019-05-07 | 百度在线网络技术（北京）有限公司 | A kind of method, apparatus and equipment for being ranked up to search result |
KR102110281B1 (en) * | 2012-09-07 | 2020-05-13 | 아메리칸 케미칼 소사이어티 | Automated composition evaluator |
US11270058B2 (en) * | 2012-11-29 | 2022-03-08 | Red Hat, Inc. | Referencing a portion of a document |
US20140280086A1 (en) * | 2013-03-15 | 2014-09-18 | Alcatel Lucent | Method and apparatus for document representation enhancement via social information integration in information retrieval systems |
US9477557B2 (en) * | 2013-03-28 | 2016-10-25 | Microsoft Technology Licensing, Llc | Transaction processing using torn write detection |
US9753817B2 (en) * | 2013-09-17 | 2017-09-05 | Opshub, Inc. | System and method for synchronizing links and attachments between two computing devices |
USD768665S1 (en) | 2014-02-27 | 2016-10-11 | Amazon Technologies, Inc. | Display screen having a graphical user interface |
US9501851B2 (en) | 2014-10-03 | 2016-11-22 | Palantir Technologies Inc. | Time-series analysis system |
US9767172B2 (en) * | 2014-10-03 | 2017-09-19 | Palantir Technologies Inc. | Data aggregation and analysis system |
CN105808607A (en) * | 2014-12-31 | 2016-07-27 | 北京奇虎科技有限公司 | Generation method and device of document index |
US10657177B1 (en) | 2014-12-31 | 2020-05-19 | Groupon, Inc. | Method and apparatus for implementing a search index generator |
RU2606309C2 (en) * | 2015-06-09 | 2017-01-10 | Общество С Ограниченной Ответственностью "Яндекс" | Method to create annotated search index and server used therein |
US10956512B2 (en) * | 2015-11-11 | 2021-03-23 | Quest Software Inc. | Document link migration |
US10417240B2 (en) * | 2016-06-03 | 2019-09-17 | International Business Machines Corporation | Identifying potential patient candidates for clinical trials |
US20180357381A1 (en) | 2017-06-09 | 2018-12-13 | Intelligent Medical Objects, Inc. | Method and System for Generating Persistent Local Instances of Ontological Mappings |
CA3060362A1 (en) * | 2017-07-24 | 2019-02-28 | Wix.Com Ltd. | Editing a database during preview of a virtual web page |
US11409814B2 (en) * | 2017-12-01 | 2022-08-09 | The Regents Of The University Of Colorado | Systems and methods for crawling web pages and parsing relevant information stored in web pages |
CN109992754B (en) * | 2017-12-29 | 2023-06-16 | 阿里巴巴（中国）有限公司 | Document processing method and device |
CN109871476A (en) * | 2019-03-06 | 2019-06-11 | 陈包容 | A kind of system automatically generating contact person's address list |
CN109902073B (en) * | 2019-04-03 | 2020-12-29 | 奇安信科技集团股份有限公司 | Log processing method and device, computer equipment and computer readable storage medium |
WO2023028599A1 (en) * | 2021-08-27 | 2023-03-02 | Rock Cube Holdings LLC | Systems and methods for time-dependent hyperlink presentation |
US20230061394A1 (en) * | 2021-08-27 | 2023-03-02 | Rock Cube Holdings LLC | Systems and methods for dynamic hyperlinking |
US20230252092A1 (en) * | 2022-02-09 | 2023-08-10 | International Business Machines Corporation | Reflecting metadata annotated in crawled documents to original data sources |
US20230252065A1 (en) * | 2022-02-09 | 2023-08-10 | International Business Machines Corporation | Coordinating schedules of crawling documents based on metadata added to the documents by text mining |
Citations (25)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5634062A (en) | 1993-10-27 | 1997-05-27 | Fuji Xerox Co., Ltd. | System for managing hypertext node information and link information |
US5801702A (en) | 1995-03-09 | 1998-09-01 | Terrabyte Technology | System and method for adding network links in a displayed hierarchy |
US6094649A (en) * | 1997-12-22 | 2000-07-25 | Partnet, Inc. | Keyword searches of structured databases |
US6145003A (en) * | 1997-12-17 | 2000-11-07 | Microsoft Corporation | Method of web crawling utilizing address mapping |
US6163778A (en) | 1998-02-06 | 2000-12-19 | Sun Microsystems, Inc. | Probabilistic web link viability marker and web page ratings |
US6189019B1 (en) | 1996-08-14 | 2001-02-13 | Microsoft Corporation | Computer system and computer-implemented process for presenting document connectivity |
US6233571B1 (en) | 1993-06-14 | 2001-05-15 | Daniel Egger | Method and apparatus for indexing, searching and displaying data |
US6243091B1 (en) | 1997-11-21 | 2001-06-05 | International Business Machines Corporation | Global history view |
US6285999B1 (en) | 1997-01-10 | 2001-09-04 | The Board Of Trustees Of The Leland Stanford Junior University | Method for node ranking in a linked database |
US6336123B2 (en) | 1996-10-02 | 2002-01-01 | Matsushita Electric Industrial Co., Ltd. | Hierarchical based hyper-text document preparing and management apparatus |
US20020049787A1 (en) * | 2000-06-21 | 2002-04-25 | Keely Leroy B. | Classifying, anchoring, and transforming ink |
US20020065678A1 (en) * | 2000-08-25 | 2002-05-30 | Steven Peliotis | iSelect video |
US20020065673A1 (en) * | 2000-04-28 | 2002-05-30 | Rooke William Armstrong | Business intelligence system |
US6404446B1 (en) | 1997-08-15 | 2002-06-11 | International Business Machines Corporation | Multi-node user interface component and method thereof for use in displaying visual indication of search results |
US20020078035A1 (en) | 2000-02-22 | 2002-06-20 | Frank John R. | Spatially coding and displaying information |
US20020078014A1 (en) | 2000-05-31 | 2002-06-20 | David Pallmann | Network crawling with lateral link handling |
US6418433B1 (en) * | 1999-01-28 | 2002-07-09 | International Business Machines Corporation | System and method for focussed web crawling |
US20020138509A1 (en) * | 2001-01-18 | 2002-09-26 | Michael Burrows | System and method for storing connectivity information in a web database |
US20020169770A1 (en) * | 2001-04-27 | 2002-11-14 | Kim Brian Seong-Gon | Apparatus and method that categorize a collection of documents into a hierarchy of categories that are defined by the collection of documents |
US20050165778A1 (en) | 2000-01-28 | 2005-07-28 | Microsoft Corporation | Adaptive Web crawling using a statistical model |
US7080073B1 (en) * | 2000-08-18 | 2006-07-18 | Firstrain, Inc. | Method and apparatus for focused crawling |
US7133870B1 (en) * | 1999-10-14 | 2006-11-07 | Al Acquisitions, Inc. | Index cards on network hosts for searching, rating, and ranking |
US7266762B1 (en) * | 2000-03-10 | 2007-09-04 | International Business Machines Corporation | Method and system for distributed autonomous maintenance of bidirectional hyperlink metadata on the web and similar hypermedia repository |
US7308643B1 (en) | 2003-07-03 | 2007-12-11 | Google Inc. | Anchor tag indexing in a web crawler system |
US8495483B1 (en) * | 2002-03-13 | 2013-07-23 | Google Inc. | Using text surrounding hypertext links when indexing and generating page summaries |
-
2003
- 2003-07-03 US US10/614,113 patent/US7308643B1/en active Active
-
2007
- 2007-11-07 US US11/936,421 patent/US8484548B1/en not_active Expired - Fee Related
-
2011
- 2011-11-18 US US13/300,516 patent/US9305091B2/en not_active Expired - Fee Related
-
2016
- 2016-04-01 US US15/088,670 patent/US10210256B2/en not_active Expired - Lifetime
Patent Citations (26)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6233571B1 (en) | 1993-06-14 | 2001-05-15 | Daniel Egger | Method and apparatus for indexing, searching and displaying data |
US5634062A (en) | 1993-10-27 | 1997-05-27 | Fuji Xerox Co., Ltd. | System for managing hypertext node information and link information |
US5801702A (en) | 1995-03-09 | 1998-09-01 | Terrabyte Technology | System and method for adding network links in a displayed hierarchy |
US6189019B1 (en) | 1996-08-14 | 2001-02-13 | Microsoft Corporation | Computer system and computer-implemented process for presenting document connectivity |
US6336123B2 (en) | 1996-10-02 | 2002-01-01 | Matsushita Electric Industrial Co., Ltd. | Hierarchical based hyper-text document preparing and management apparatus |
US6285999B1 (en) | 1997-01-10 | 2001-09-04 | The Board Of Trustees Of The Leland Stanford Junior University | Method for node ranking in a linked database |
US6404446B1 (en) | 1997-08-15 | 2002-06-11 | International Business Machines Corporation | Multi-node user interface component and method thereof for use in displaying visual indication of search results |
US6243091B1 (en) | 1997-11-21 | 2001-06-05 | International Business Machines Corporation | Global history view |
US6145003A (en) * | 1997-12-17 | 2000-11-07 | Microsoft Corporation | Method of web crawling utilizing address mapping |
US6094649A (en) * | 1997-12-22 | 2000-07-25 | Partnet, Inc. | Keyword searches of structured databases |
US6163778A (en) | 1998-02-06 | 2000-12-19 | Sun Microsystems, Inc. | Probabilistic web link viability marker and web page ratings |
US6418433B1 (en) * | 1999-01-28 | 2002-07-09 | International Business Machines Corporation | System and method for focussed web crawling |
US7133870B1 (en) * | 1999-10-14 | 2006-11-07 | Al Acquisitions, Inc. | Index cards on network hosts for searching, rating, and ranking |
US20050165778A1 (en) | 2000-01-28 | 2005-07-28 | Microsoft Corporation | Adaptive Web crawling using a statistical model |
US20020078035A1 (en) | 2000-02-22 | 2002-06-20 | Frank John R. | Spatially coding and displaying information |
US7266762B1 (en) * | 2000-03-10 | 2007-09-04 | International Business Machines Corporation | Method and system for distributed autonomous maintenance of bidirectional hyperlink metadata on the web and similar hypermedia repository |
US20020065673A1 (en) * | 2000-04-28 | 2002-05-30 | Rooke William Armstrong | Business intelligence system |
US20020078014A1 (en) | 2000-05-31 | 2002-06-20 | David Pallmann | Network crawling with lateral link handling |
US20020049787A1 (en) * | 2000-06-21 | 2002-04-25 | Keely Leroy B. | Classifying, anchoring, and transforming ink |
US7080073B1 (en) * | 2000-08-18 | 2006-07-18 | Firstrain, Inc. | Method and apparatus for focused crawling |
US20020065678A1 (en) * | 2000-08-25 | 2002-05-30 | Steven Peliotis | iSelect video |
US20020138509A1 (en) * | 2001-01-18 | 2002-09-26 | Michael Burrows | System and method for storing connectivity information in a web database |
US20020169770A1 (en) * | 2001-04-27 | 2002-11-14 | Kim Brian Seong-Gon | Apparatus and method that categorize a collection of documents into a hierarchy of categories that are defined by the collection of documents |
US8495483B1 (en) * | 2002-03-13 | 2013-07-23 | Google Inc. | Using text surrounding hypertext links when indexing and generating page summaries |
US7308643B1 (en) | 2003-07-03 | 2007-12-11 | Google Inc. | Anchor tag indexing in a web crawler system |
US9305091B2 (en) | 2003-07-03 | 2016-04-05 | Google Inc. | Anchor tag indexing in a web crawler system |
Non-Patent Citations (13)
Title |
---|
Brin, et al., "The Anatomy of a Large-Scale Hypertextual Web Search Engine," Proceedings of the 7th Int'l World Wide Web Conf. 1998, 28 pages. |
Brusilovsky , et al., "Map-Based Horizontal Navigation in Educational Hypertext", ACM Press, Jun. 2002, 10 pages. |
Brusilovsky et al., "Adaptive hypermedia: Map Based horizontal navigation in educational hypertext," ACM Press, Jun. 11, 2002, 10 pages. |
Cho, "Crawling the Web: Discovery and Maintenance of Large-Scale Web Data", PhD Thesis, Dept. of Computer Science, Stanford University, 2001, 188 pages. |
Haveliwala, et al., "Topic-Sensitive PageRank," WWW2002, May 7-11, 2002, 10 pages. |
Haveliwala, Tasher H., "Topic-Sensitive PageRank", In Proceedings of the 11th International World Wide Web Conference, May 2002, 10 pages. |
Jeh et al., "Scaling Personalized Web Search," Proceedings of the 11th Int'l World Wide Web Con., 2003, 26 pages. |
Joachims et al, "WebWatcher: A Tour Guide for the World Wide Web", Sep. 1996, Carnegie Mellon University, 29 pages. * |
Kamvar et al., "Exploiting the Block Structure of the Web for Computing PageRank," Stanford Univ. Technical Report, 2003, 13 pages. |
Kennedy et al., "HTML & XHTML: The Definitive Guide, 5th Edition", O'Reilly, Aug. 2002, 652 pages. |
Koman, "How the Wayback Machine Works," XML.com, Jan. 21, 2002, 6 pages. |
Lieberman, "Letizia: An Agent That Assists Web Browsing", 1995, MIT, 97-102, 6 pages. * |
Notess, "The Wayback Machine: The Web's Archive," Online, vol. 26, No. 2 Mar./Apr. 2002, 4 pages. |
Cited By (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20180336371A1 (en) * | 2017-05-16 | 2018-11-22 | Apple Inc. | Techniques for enabling a software application to access files at a computing device while enforcing privacy measures |
US10643004B2 (en) * | 2017-05-16 | 2020-05-05 | Apple Inc. | Techniques for enabling a software application to access files at a computing device while enforcing privacy measures |
US11455460B2 (en) * | 2018-02-12 | 2022-09-27 | Zhangyue Technology Co., Ltd | Method for displaying handwritten note in electronic book, electronic device and computer storage medium |
US11347579B1 (en) | 2021-04-29 | 2022-05-31 | Bank Of America Corporation | Instinctive slither application assessment engine |
US11663071B2 (en) | 2021-04-29 | 2023-05-30 | Bank Of America Corporation | Instinctive slither application assessment engine |
Also Published As
Publication number | Publication date |
---|---|
US7308643B1 (en) | 2007-12-11 |
US20120066576A1 (en) | 2012-03-15 |
US20160321252A1 (en) | 2016-11-03 |
US8484548B1 (en) | 2013-07-09 |
US9305091B2 (en) | 2016-04-05 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10210256B2 (en) | Anchor tag indexing in a web crawler system | |
US9411889B2 (en) | Assigning document identification tags | |
US10216847B2 (en) | Document reuse in a search engine crawler | |
US6952730B1 (en) | System and method for efficient filtering of data set addresses in a web crawler | |
JP5323300B2 (en) | System and method for narrowing a search using index keys | |
US10621241B2 (en) | Scheduler for search engine crawler | |
US7552109B2 (en) | System, method, and service for collaborative focused crawling of documents on a network | |
US7979427B2 (en) | Method and system for updating a search engine | |
US8027974B2 (en) | Method and system for URL autocompletion using ranked results | |
US6301614B1 (en) | System and method for efficient representation of data set addresses in a web crawler | |
KR100971863B1 (en) | System and method for batched indexing of network documents | |
CN1202257A (en) | System and method for locating pages on the world wide web and for locating documents from network of computers | |
US7305610B1 (en) | Distributed crawling of hyperlinked documents | |
US7836108B1 (en) | Clustering by previous representative | |
US7502773B1 (en) | System and method facilitating page indexing employing reference information | |
US20050033861A1 (en) | Apparatus, method and computer program product for producing a resource descriptor | |
JP2004021900A (en) | Www information retrieval system and www information retrieval method | |
CRAWLER | 20 Web crawling and indexes |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:ZHU, HUICAN;DEAN, JEFFREY;GHEMAWAT, SANJAY;AND OTHERS;SIGNING DATES FROM 20040930 TO 20041011;REEL/FRAME:040907/0923 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044129/0001Effective date: 20170929 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
CC | Certificate of correction | ||
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |