JP5479490B2 - Asynchronous distributed garbage collection for replicated storage clusters - Google Patents
Asynchronous distributed garbage collection for replicated storage clusters Download PDFInfo
- Publication number
- JP5479490B2 JP5479490B2 JP2011542575A JP2011542575A JP5479490B2 JP 5479490 B2 JP5479490 B2 JP 5479490B2 JP 2011542575 A JP2011542575 A JP 2011542575A JP 2011542575 A JP2011542575 A JP 2011542575A JP 5479490 B2 JP5479490 B2 JP 5479490B2
- Authority
- JP
- Japan
- Prior art keywords
- negotiation
- negotiation message
- delete
- message
- storage cluster
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
- 238000000034 method Methods 0.000 claims description 50
- 230000010076 replication Effects 0.000 claims description 37
- 230000004044 response Effects 0.000 claims description 35
- 238000012217 deletion Methods 0.000 claims description 29
- 230000037430 deletion Effects 0.000 claims description 29
- 230000003362 replicative effect Effects 0.000 claims description 7
- 238000012790 confirmation Methods 0.000 claims description 5
- 230000001960 triggered effect Effects 0.000 claims description 3
- 102100036409 Activated CDC42 kinase 1 Human genes 0.000 description 39
- 230000008569 process Effects 0.000 description 21
- 101000741965 Homo sapiens Inactive tyrosine-protein kinase PRAG1 Proteins 0.000 description 20
- 102100038659 Inactive tyrosine-protein kinase PRAG1 Human genes 0.000 description 20
- 239000003999 initiator Substances 0.000 description 11
- 238000010586 diagram Methods 0.000 description 9
- 238000004891 communication Methods 0.000 description 6
- 230000007246 mechanism Effects 0.000 description 4
- 230000006870 function Effects 0.000 description 3
- 238000012545 processing Methods 0.000 description 3
- 230000003068 static effect Effects 0.000 description 2
- 230000003213 activating effect Effects 0.000 description 1
- 230000006399 behavior Effects 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 239000004020 conductor Substances 0.000 description 1
- 230000001419 dependent effect Effects 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 230000003287 optical effect Effects 0.000 description 1
- 230000002085 persistent effect Effects 0.000 description 1
- 230000000644 propagated effect Effects 0.000 description 1
- 230000009467 reduction Effects 0.000 description 1
- 230000001360 synchronised effect Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/27—Replication, distribution or synchronisation of data between databases or within a distributed database system; Distributed database system architectures therefor
- G06F16/273—Asynchronous replication or reconciliation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/10—File systems; File servers
- G06F16/18—File system types
- G06F16/182—Distributed file systems
- G06F16/184—Distributed file systems implemented as replicated file system
- G06F16/1844—Management specifically adapted to replicated file systems
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/06—Digital input from, or digital output to, record carriers, e.g. RAID, emulated record carriers or networked record carriers
- G06F3/0601—Interfaces specially adapted for storage systems
- G06F3/0602—Interfaces specially adapted for storage systems specifically adapted to achieve a particular effect
- G06F3/0604—Improving or facilitating administration, e.g. storage management
- G06F3/0605—Improving or facilitating administration, e.g. storage management by facilitating the interaction with a user or administrator
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/06—Digital input from, or digital output to, record carriers, e.g. RAID, emulated record carriers or networked record carriers
- G06F3/0601—Interfaces specially adapted for storage systems
- G06F3/0602—Interfaces specially adapted for storage systems specifically adapted to achieve a particular effect
- G06F3/0614—Improving the reliability of storage systems
- G06F3/0619—Improving the reliability of storage systems in relation to data integrity, e.g. data losses, bit errors
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/06—Digital input from, or digital output to, record carriers, e.g. RAID, emulated record carriers or networked record carriers
- G06F3/0601—Interfaces specially adapted for storage systems
- G06F3/0628—Interfaces specially adapted for storage systems making use of a particular technique
- G06F3/0646—Horizontal data movement in storage systems, i.e. moving data in between storage devices or systems
- G06F3/0652—Erasing, e.g. deleting, data cleaning, moving of data to a wastebasket
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/06—Digital input from, or digital output to, record carriers, e.g. RAID, emulated record carriers or networked record carriers
- G06F3/0601—Interfaces specially adapted for storage systems
- G06F3/0668—Interfaces specially adapted for storage systems adopting a particular infrastructure
- G06F3/067—Distributed or networked storage systems, e.g. storage area networks [SAN], network attached storage [NAS]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F12/00—Accessing, addressing or allocating within memory systems or architectures
- G06F12/02—Addressing or allocation; Relocation
- G06F12/0223—User address space allocation, e.g. contiguous or non contiguous base addressing
- G06F12/023—Free address space management
- G06F12/0253—Garbage collection, i.e. reclamation of unreferenced memory
- G06F12/0269—Incremental or concurrent garbage collection, e.g. in real-time systems
Description
背景
企業コンピューティングの景観は、ストレージ構造において、中央サービス構造が分散ストレージクラスタに取って代わられるという抜本的な転換期にある。企業が記憶効率を高める方法を求めるにつれ、汎用のコンピュータで作られたそのようなクラスタは、一体型のディスクアレイに比べて僅かなコストで高い能力、可用性、新しいデータ集約型アプリケーションに対する拡張性を実現し得る。ストレージクラスタの潜在能力を全て解き放つため、データは、可用性を高め、クライアントからのネットワーク距離を短くする複数の地理的な場所に亘って複製される。
Background The landscape of enterprise computing is at a radical turning point in storage structures where the central service structure is replaced by a distributed storage cluster. As companies seek ways to increase storage efficiency, such clusters made of general-purpose computers offer higher capacity, availability, and scalability for new data-intensive applications at a fraction of the cost of an all-in-one disk array. It can be realized. To unleash the full potential of the storage cluster, data is replicated across multiple geographical locations that increase availability and reduce network distance from clients.
ガーベッジコレクションは、大きな分散オブジェクトを管理する管理分散型ストレージシステムに対する問題となり得る。ガーベッジコレクタはもはや参照されないオブジェクトを削除することによってディスクスペースを再利用することに対して責任を有する。ストレージクラスタにおける分散型ガーベッジコレクションは機械の一般的な故障および、オブジェクトならびにそれらの参照の全体的な同時表示を得ることが不可能でなければ難しくするネットワークパーティションによってさらに複雑にされる。 Garbage collection can be a problem for managed distributed storage systems that manage large distributed objects. The garbage collector is responsible for reclaiming disk space by deleting objects that are no longer referenced. Distributed garbage collection in storage clusters is further complicated by network failures that make it difficult if not impossible to obtain a general failure of the machine and an overall simultaneous display of objects and their references.
概要
ある実施例によると、方法は、分散型データ複製システムにおける複数の装置のうちの装置によって実行され得る。方法は、分散型データ複製システムを用いて少なくとも１つ以上が複製されるオブジェクトを、データストアに記憶するステップと、データストア内のオブジェクトのスキャンを実行するステップと、オブジェクトのうちの１つを、オブジェクトを指し示す参照を有さないものとして特定するステップと、１つのオブジェクトに関連付けられたメタデータとして、削除ネゴシエーションメッセージを記憶するステップと、複数の装置のうちの１つ以上の別の装置に、削除ネゴシエーションメッセージを有するメタデータを複製するステップとを含み得る。
Overview According to certain embodiments, a method may be performed by a device of a plurality of devices in a distributed data replication system. The method includes storing at least one or more objects to be replicated using a distributed data replication system in a data store, performing a scan of the objects in the data store, and one of the objects. Identifying as having no reference pointing to the object, storing a delete negotiation message as metadata associated with one object, and one or more other devices of the plurality of devices Replicating the metadata with the delete negotiation message.
別の実施例によると、分散型データ複製システムにおける複数の装置のうちの装置は、オブジェクトに関連付けられたネゴシエーションメッセージを有するものとして、データストア内のオブジェクトを特定するための手段と、オブジェクトの状態に基づく新しいネゴシエーションメッセージを、オブジェクトに関連付けるための手段と、ストレージクラスタに新しいネゴシエーションメッセージを複製するための手段と、オブジェクトのレプリカに関連付けられた別のネゴシエーションメッセージを受け取るための手段と、別のネゴシエーションメッセージが成功したネゴシエーションを示す場合、オブジェクトを削除するための手段とを含み得る。 According to another embodiment, the device of the plurality of devices in the distributed data replication system has a negotiation message associated with the object, means for identifying the object in the data store, and the state of the object Means for associating a new negotiation message based on the object with the object, means for replicating the new negotiation message to the storage cluster, means for receiving another negotiation message associated with the replica of the object, and another negotiation And means for deleting the object if the message indicates a successful negotiation.
さらに別の実施例によると、システムは、命令およびデータストアを記憶するメモリと、プロセッサとを備える。プロセッサは、データストア内のオブジェクトが参照を有するか否か、ならびに削除ネゴシエーションメッセージがオブジェクトに関連付けられているか否かに関する、オブジェクトの状態を特定し、オブジェクトの状態に基づいてオブジェクトメタデータに新しいネゴシエーションメッセージを書込み、新しいネゴシエーションメッセージを有するメタデータを１つ以上の装置に複製し、１つ以上の装置のうちの１つから、オブジェクトに関連付けられた別のネゴシエーションメッセージを受け取るために、メモリ内の命令を実行する。新しいネゴシエーションメッセージおよび別のネゴシエーションメッセージは、オブジェクトの削除ネゴシエーションに対するコンセンサスを提供する。 According to yet another embodiment, the system includes a memory that stores instructions and a data store, and a processor. The processor identifies the state of the object as to whether the object in the data store has a reference, and whether a delete negotiation message is associated with the object, and based on the state of the object, a new negotiation is made on the object metadata. In order to write a message, replicate the metadata with the new negotiation message to one or more devices, and receive another negotiation message associated with the object from one of the one or more devices. Execute the instruction. New negotiation messages and other negotiation messages provide consensus on object deletion negotiations.
さらに別の実施例によると、方法は、分散型マルチマスタデータ複製システム内のストレージクラスタ間で、１つ以上の削除ネゴシエーションメッセージを交換するステップを含み、各々の削除ネゴシエーションメッセージは、ネゴシエーションメッセージの対象であるオブジェクトのメタデータ内に含まれ、削除ネゴシエーションメッセージは、分散型マルチマスタデータ複製システムの複製層を用いてストレージクラスタ間で送られ、さらに、１つ以上の削除ネゴシエーションメッセージに基づいて、ストレージクラスタ間において、分散型コンセンサスが合意すると、オブジェクトを削除するステップを含み得る。 According to yet another embodiment, the method includes exchanging one or more delete negotiation messages between storage clusters in a distributed multi-master data replication system, each delete negotiation message being subject to the negotiation message. Included in the object's metadata, the delete negotiation message is sent between the storage clusters using the replication layer of the distributed multi-master data replication system, and further, based on the one or more delete negotiation messages, the storage negotiation Once the distributed consensus is agreed between the clusters, it may include deleting the object.
さらに別の実施例によると、コンピュータ読取可能メモリは、コンピュータ実行可能命令を含み得る。コンピュータ読取可能メモリは、データストア内のオブジェクトが参照を有するか否か、ならびに削除ネゴシエーションメッセージがオブジェクトに関連付けられているか否かに関する、オブジェクトの状態を特定するための１つ以上の命令と、オブジェクトの状態に基づいて、オブジェクトのメタデータに、オブジェクトに関連付けられた新しいネゴシエーションメッセージを書込むための１つ以上の命令と、新しいネゴシエーションメッセージを有するオブジェクトメタデータをストレージクラスタに複製するための１つ以上の命令と、１つ以上の別の装置から、オブジェクトに関連付けられた別のネゴシエーションメッセージを受け取るための１つ以上の命令と、オブジェクトに関連付けられた別のネゴシエーションメッセージに基づいて、オブジェクトの削除ネゴシエーションに対するコンセンサスを判定するための１つ以上の命令とを含み得る。 According to yet another embodiment, the computer readable memory may include computer executable instructions. The computer readable memory includes one or more instructions for identifying the state of the object as to whether the object in the data store has a reference and whether a delete negotiation message is associated with the object; One or more instructions for writing a new negotiation message associated with the object to the object's metadata based on the state of the object, and one for replicating the object metadata with the new negotiation message to the storage cluster. Based on the above instructions, one or more instructions for receiving another negotiation message associated with the object from one or more other devices, and another negotiation message associated with the object. Te may include one or more instructions for determining a consensus for deletion negotiation object.
図面の簡単な説明
この明細書に組入れられ明細書の一部を形成する添付の図面は、ここで説明される１つ以上の実施例を記載し、記述とともに、これらの実施例を説明する。
BRIEF DESCRIPTION OF THE DRAWINGS The accompanying drawings, which are incorporated in and form a part of this specification, describe one or more embodiments described herein and, together with the description, explain these embodiments.
詳細な説明
以下の詳細な説明は添付の図面を参照する。異なる図面における同じ参照番号は同じまたは同様の要素を特定し得る。また、以下の詳細な説明は発明を限定しない。
DETAILED DESCRIPTION The following detailed description refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements. Also, the following detailed description does not limit the invention.
ここで説明されるシステムおよび／または方法は、複製ストレージクラスタに対して非同期式分散ガーベッジコレクションを実行し得る。ここで説明される実施例は、分散型マルチマスタデータ複製システムの異なるクラスタの間で削除ネゴシエーションを送るために、分散型マルチマスタデータ複製システムの下層複製層を用い得る。活動中の参照も複製された参照もシステムにはないということに分散型コンセンサスが合意したとき、オブジェクトが削除され得る。 The systems and / or methods described herein may perform asynchronous distributed garbage collection on a replicated storage cluster. The embodiments described herein may use the underlying replication layer of a distributed multi-master data replication system to send deletion negotiations between different clusters of the distributed multi-master data replication system. An object can be deleted when the distributed consensus agrees that there are no active or replicated references in the system.
例示のネットワーク構造
図１は、ここで説明されるシステムおよび方法が実現され得る例示のシステム１００の図である。システム１００は、クライアント１１０−１からクライアント１１０−Ｎ（まとめてクライアント１１０と呼ばれる）およびネットワーク１３０を介して接続された、ストレージクラスタ１２０−１から１２０−Ｍ（まとめてストレージクラスタ１２０と呼ばれる）を含み得る。ストレージクラスタ１２０は、ファイルシステム１４０（図１において破線で示される）を形成し得る。
Exemplary Network Structure FIG. 1 is a diagram of an
ネットワーク１３０は、ローカルエリアネットワーク（ＬＡＮ）、ワイドエリアネットワーク（ＷＡＮ）、公衆交換電話網（ＰＳＴＮ）のような電話網、イントラネット、インターネット、類似もしくは非類似のネットワーク、またはネットワークの組合せ等の１つ以上のネットワークを含み得る。クライアント１１０およびストレージクラスタ２０は、有線、および／または無線接続を介してネットワーク１３０に接続され得る。
The
クライアント１１０は、パーソナルコンピュータ、無線電話、携帯情報端末（ＰＤＡ）、ラップトップ、または別の種類の通信装置等の１つ以上の種類の装置、これらの装置の１つ上で実行しているスレッドまたはプロセス、および／またはこれらの装置によって実行されるオブジェクトを含み得る。ある実施例において、クライアント１１０は、ファイルデータを読出すもしくは変更（たとえば書込）するためにクライアント１１０の代わりにストレージクラスタ１２０と通信するアプリケーションを含む、もしくはこのアプリケーションに繋げられる。
Client 110 is one or more types of devices, such as personal computers, wireless telephones, personal digital assistants (PDAs), laptops, or other types of communication devices, and threads executing on one of these devices. Or it may include processes and / or objects executed by these devices. In certain embodiments, client 110 includes or is linked to an application that communicates with
ストレージクラスタ１２０は、１つ以上のサーバ装置、または、ここで説明される態様で情報を記憶、処理、検索、および／もしくは提供し得る別の種類の演算または通信装置を含み得る。１つの実施例において、ストレージクラスタ１２０は、ファイルに対して大型のランダムリード／ライトアクセスデータストアを維持することが可能な１つ以上のサーバ（たとえばコンピュータシステムおよび／またはアプリケーション）を含み得る。ストレージクラスタ１２０のデータストアは、変化が生じた場合にインデックスの一部を速やかに更新することをインデックス付けシステムに許可し得る。ストレージクラスタ１２０のデータストアは、１つ以上のテーブル（たとえば、ユニフォームリソースロケータ（ＵＲＬ）毎に１つの行を含み得るドキュメントテーブル、ＵＲＬとは異なる値が入力された補助テーブル等）を含み得る。一例として、ストレージクラスタ１２０は、非常に大きなサイズ（たとえば数千のサーバに亘るデータのペタバイト）を計測するように設計され得る構造化データ（たとえばドキュメントのランダムアクセスストレージクラスタ）を管理するための分散型ストレージシステム（たとえば、チャンその他、「ビッグテーブル：構造化データのための分散型ストレージシステム」、第７回ＯＳＤＩ会報、ｐｐ．２０５−２１８（２００６年１１月）において説明されるような「ビッグテーブル」）内に含まれ得る。
The
図１には示されないが、システム１００は１つ以上の専用の民生用サーバまたはハブ等の別のコンポーネント、さまざまな別のコンポーネントを含み得る。ここで用いられるように、コンポーネントはハードウェアまたはソフトウェアとハードウェアとの組合せを含み得る。民生用サーバはたとえば、クライアント１１０からのアクセスのために、１つ以上のストレージクラスタ１２０からの、データストアの読出専用のコピーを記憶し得る。ハブはたとえば、１つ以上の民生用サーバへの配布のために、１つ以上のストレージクラスタ１２０からのデータストアの読出専用コピーを記憶し得る。
Although not shown in FIG. 1, the
例示のストレージクラスタ構造
図２は、ファイルシステムの例示の構造の図である。図２において示されるように、ファイルシステム１４０は、ストレージクラスタ１２０−１，１２０−２，１２０−３，および１２０−４を含み得る。ある実施例において、ファイルシステム１４０は、各々のストレージクラスタ１２０−１，１２０−２，１２０−３，および１２０−４が別のストレージクラスタに対してマスタサーバとして振る舞い得る分散型マルチマスタデータ複製システムであり得る。ファイルシステム１４０において、データの可用性を高め、かつ、クライアント（たとえばクライアント１１０）からのネットワーク距離を短くするために、（たとえば複数の地理的位置における）ストレージクラスタ１２０−１，１２０−２，１２０−３，および１２０−４に亘ってデータが複製され得る。一般的に、分散されたオブジェクトおよび参照は、異なるストレージクラスタ１２０において動的に作成、変形、複製および削除され得、最終的には全てのストレージクラスタ１２０が同じバージョンのデータに行き着くことを確実にするために下層データ複製層（図示せず）が書込指令の忠実性を維持する。したがって、データ複製層が、単一のオブジェクトに対する同じレプリカへの書込の指令を遵守する。
Exemplary Storage Cluster Structure FIG. 2 is a diagram of an exemplary structure of a file system. As shown in FIG. 2, the
図２はファイルシステム１４０の例示の機能的なコンポーネントを示すが、別の実施例において、ファイルシステム１４０は図２に示されたものよりも少ない、付加的な、異なる、または異なって配置されたコンポーネントを含み得る。さらに別の実施例において、１つ以上の、ファイルシステム１４０の１つ以上のコンポーネントは、ファイルシステム１４０の１つ以上の別のコンポーネントによって実行されるものとして説明された１つ以上の別のタスクを実行し得る。
Although FIG. 2 shows exemplary functional components of
図３は、ストレージクラスタ１２０の例示のコンポーネントの図である。ストレージクラスタ１２０は、バス３１０、プロセッサ３２０、メインメモリ３３０、ＲＯＭ３４０、記憶装置３５０、入力装置３６０、出力装置３７０、および通信インターフェイス３８０を含み得る。バス３１０は、ストレージクラスタ１２０のコンピュータの間での通信を許容する１つ以上のコンダクタを含み得る。
FIG. 3 is a diagram of exemplary components of
プロセッサ３２０は、命令を解釈し実行し得る任意のタイプのプロセッサまたはマイクロプロセッサを含み得る。メインメモリ３３０は、ＲＡＭまたは、情報ならびにプロセッサ３２０による実行のための命令を記憶し得る別の種類の動的記憶装置を含み得る。ＲＯＭ３４０は、ＲＯＭ装置または、静的情報ならびにプロセッサ３２０のよる使用のための命令を記憶し得る別の種類の静的記憶装置を含み得る。記憶装置３５０は、磁気および／または光学記録媒体ならびにその対応するドライブを含み得る。たとえば、記憶装置３５０は、永続的なストレージを提供する１つ以上のローカルディスク３５５を含み得る。ある実施例において、ストレージクラスタ１２０は、メインメモリ３３０および／または記憶装置３５０等の１つ以上のコンピュータ読取可能媒体内において、ファイルシステム１４０内に記憶されたオブジェクトに対して、メタデータを維持し得る。たとえば、ストレージクラスタ１２０は、バージョン番号、タイムスタンプ、カテゴリ、および／またはオブジェクトに対する参照インジケータを記憶装置３５０内に記憶し得る。
The
入力装置３６０はキーボード、キーパッド、ボタン、マウス、ペン等の、操作者がストレージクラスタ１２０に情報を入力することを可能にする１つ以上の機構を含み得る。出力装置３７０は、ディスプレイ、発光ダイオード（ＬＥＤ）等を含む、操作者に対して情報を出力する１つ以上の機構を含み得る。通信インターフェイス３８０は、ストレージクラスタ１２０が別の装置および／またはシステムと通信できるようにする任意のトランシーバのような機構を含み得る。たとえば、通信インターフェイス３８０は、別のストレージクラスタ１２０およびクライアント１１０と通信するための機構を含み得る。
図４はストレージクラスタ１２０の機能ブロック図を示す。図４に示されるように、ストレージクラスタ１２０はデータストア４１０およびガーベッジコレクタロジック４２０を含み得る。ある実施例において、図４において示されるように、データストア４１０はストレージクラスタ１２０内に配置され得る。別の実施例において、データストア４１０は、外部メモリ装置またはインデックス付けシステムに関連付けられた装置（図示せず）等の、ストレージクラスタ１２０と通信するシステム１００の１つ以上の別の装置内に設けられてもよい。
FIG. 4 shows a functional block diagram of the
データストア４１０は、検索システムに対して１つ以上のインデックスを提供するためのドキュメントテーブルおよび二次テーブルを含み得る。一例として、ドキュメントテーブルおよび二次テーブルは、ＵＲＬに関連付けられた情報にアクセスすることおよび／または情報を更新することを手助けするために、ＵＲＬのプロパティによって適合され得る。各データストア４１０の少なくとも一部は、複数のストレージクラスタ１２０上で複製され得る。各データストア４１０に対するレプリカの数はユーザが設定可能である。
ガーベッジコレクタロジック４２０は、以前に削除されたファイル等の、参照されていないコンテンツを取り除くためのロジックを含み得る。ガーベッジコレクタロジック４２０は、たとえばデータストア４１０から参照されていないコンテンツを取り除き得る。たとえば、ガーベッジコレクタロジック４２０は、データストア４１０からのオブジェクト（たとえばドキュメント）がもはや参照されていないか（すなわちオブジェクトを指し示すリンクを含まないオブジェクトであるか）を判断し、ストレージクラスタ１２０から、もはや参照されていない任意のオブジェクトを、ストレージクラスタ１２０を移動し、参照されていないオブジェクトを取り除く機能（たとえばマップ削減機能）を介して取り除き得る。オブジェクが、オブジェクトを指し示すリンクを有していれば、そのオブジェクトは「参照されている」または「活動している」であり得る。したがって、ガーベッジコレクタロジック４２０は、活動しているオブジェクトを維持する一方でストレージクラスタ１２０から不必要な情報を取り除き得る。
オブジェクトは別のストレージクラスタ１２０内において存在し得るため、そのオブジェクトを取り除くことは単にオブジェクトを削除することほど単純ではない。したがって、ガーベッジコレクタロジック４２０は、ファイルシステム１４０の異なるストレージクラスタ１２０間で送られ得る削除ネゴシエーションメッセージを作成し得る。ガーベッジコレクタロジック４２０は、システム内に活動している参照も、複製された参照も存在しないということに、（たとえばそのオブジェクトのレプリカを含むファイルシステム１４０の全てのストレージクラスタ１２０の間において）分散型コンセンサスが合意した場合、オブジェクトを削除し得る。ガーベッジコレクタロジック４２０は、削除ネゴシエーションの対象となっているオブジェクトのメタデータ内に削除ネゴシエーションメッセージを含み得る。そしてメッセージは、オブジェクトのレプリカを含む全ての別のストレージクラスタ１２０に対して非同期的に複製され得る。
Since an object can exist in another
ガーベッジコレクタロジック４２０によって作成されたメッセージは、たとえば、削除ネゴシエーションを起動するための「Ｄｅｌｅｔｅ」インジケータ、削除ネゴシエーションに対して肯定応答を提供するための応答（「ＡＣＫ」）インジケータ、削除ネゴシエーションに対して否定応答を提供するための否定応答（「ＮＡＣＫ」）インジケータ、および応答が別のストレージクラスタ１２０から受取られたという確認を与えるための同期（「ＧｏｔＡｌｌ」）インジケータを含み得る。ある実施例において、未処理のＤｅｌｅｔｅまたはＡＣＫメッセージを有するオブジェクトに対しては新しい参照は付与されない。メッセージは、メッセージの形式および使用は以下により詳細に説明される。
The message created by the
図３はストレージクラスタ１２０の例示の機能的なコンポーネントを示すが、別の実施例において、ストレージクラスタ１２０は図３に示される機能的なコンポーネントよりも少ない、付加的な、異なる、または異なって配置されたコンポーネントを含み得る。さらに別の実施例において、ストレージクラスタ１２０の１つ以上の機能的なコンポーネントは、１つ以上の別の機能的なコンポーネントによって実行されるものとして説明された１つ以上の別のタスクを実行し得る。
Although FIG. 3 illustrates exemplary functional components of
例示のメッセージ構造
図５は、例示の実施例において用いられ得るネゴシエーションメッセージに対する例示のメッセージ構造５００の図を与える。図５に示されるように、メッセージ構造５００は、メッセージ部５１０、ストレージクラスタ識別部５２０、およびネゴシエーション要求識別部５３０を含み得る。メッセージ部５１０は、たとえば、「Ｄｅｌｅｔｅ」インジケータ、「ＡＣＫ」インジケータ、「ＮＡＣＫ」インジケータ、または「ＧｏｔＡｌｌ」インジケータを含み得る。ストレージクラスタ識別部５２０は、メッセージ部５１０内のメッセージを起動するストレージクラスタ１２０に対する固有の識別情報（たとえばクラスタＩＤ）を含み得る。ネゴシエーション要求識別部５３０は、オリジナルの削除ネゴシエーションに対する固有の識別情報（たとえばＲｅｑＩＤ）を含み得る。
Exemplary Message Structure FIG. 5 provides a diagram of an
メッセージ構造５００は、メッセージ：クラスタＩＤ：ＲｅｑＩＤの形式で記述され得る。たとえば、オブジェクトに対する削除ネゴシエーションは、メッセージ「Ｄｅｌｅｔｅ：０１：５５５５」を用いてストレージクラスタ１２０−１によって起動され得る。ここで、「０１」はストレージクラスタ１２０−１に対するクラスタＩＤであって、「５５５５」はＲｅｑＩＤである。ストレージクラスタ１２０−２による、ネゴシエーションに対する応答は、「ＡＣＫ：０２：５５５５」であり得る。ここで、ストレージクラスタ１２０−２に対するクラスタＩＤであり、「５５５５」は、依然として、応答（およびオリジナルのネゴシエーションに関連する任意の将来のメッセージ」に対するＲｅｑＩＤである。
The
例示のプロセスフロー
図６は、分散型マルチマスタデータ複製システム（たとえばファイルシステム１４０）においてガーベッジコレクションを実行するための例示のプロセス６００のフローチャートである。ある実施例において、プロセス６００は、ストレージクラスタ１２０のうちの１つによって実行される。別の実施例において、プロセス６００のうちのいくつかまたは全ては、ストレージクラスタ１２０を含みあるいは除く別の装置または装置の組によって実行され得る。プロセス６００は各ストレージクラスタ１２０において周期的に実現され得、かつ、ストレージクラスタ１２０内のオブジェクトの全てあるいは一部のスキャンを含み得る。以下に説明するプロセス６００の特定の例において、ファイルシステム１４０のストレージクラスタ１２０−１に対して参照が作成され得る。ここで、ストレージクラスタ１２０−１は、「０１」のクラスタＩＤを含む。
Exemplary Process Flow FIG. 6 is a flowchart of an
図６に記載されるように、プロセス６００は、オブジェクトのスキャンの実行（ブロック６１０）、および、参照されておらず、ネゴシエートされたオブジェクトの識別（ブロック６２０）で始まり得る。たとえば、ストレージクラスタ１２０−１（たとえばガーベッジコレクタロジック４２０を用いる）は、ストレージクラスタ１２０−１（たとえばデータストア４１０内）に記憶されたオブジェクトの全てあるいは一部のスキャンを実行し得る。スキャンは、たとえば、オブジェクトに関連付けられたメタデータを読むことによって、参照を有しないオブジェクトおよび削除ネゴシエーションメッセージを有するオブジェクトを識別し得る。
As described in FIG. 6,
オブジェクトに対して完了した削除ネゴシエーションが特定されたか否かが判断され得る（ブロック６３０）。完了した削除ネゴシエーションは、たとえば、成功あるいは失敗した削除ネゴシエーションの指標である。たとえば、ストレージクラスタ１２０−１は、成功あるいは失敗した削除ネゴシエーションを確認するメタデータを有するオブジェクトを特定し得る。 A determination may be made whether a completed delete negotiation has been identified for the object (block 630). Completed deletion negotiation is an indicator of successful or unsuccessful deletion negotiation, for example. For example, storage cluster 120-1 may identify an object having metadata that confirms a successful or unsuccessful deletion negotiation.
オブジェクトに対して完了した削除ネゴシエーションが特定された場合（ブロック３６０−ＹＥＳ）、ストレージクラスタを起動することによって、成功した削除ネゴシエーションあるいは失敗した削除ネゴシエーションメッセージを有するオブジェクトが削除され得る（ブロック６４０）。例示の実施例において、ストレージクラスタ１２０−１が以前にオブジェクトに対して削除ネゴシエーションを起動し、かつ、オブジェクトを削除可能であることを、（たとえば、オブジェクトメタデータに対してＡＣＫメッセージおよび／あるいはＧｏｔＡｌｌメッセージを書き込むことによって）オブジェクトのレプリカを記憶する全ての別のストレージクラスタが認識したことを示すオブジェクトにおいて、ストレージクラスタ１２０−１がメタデータを特定する場合、ストレージクラスタ１２０−１はオブジェクトならびに関連するメタデータを削除し得る。たとえば、ストレージクラスタ１２０−１内のスキャンが、オブジェクトのレプリカを記憶する全ての別のストレージクラスタ（たとえばストレージクラスタ１２０−２，１２０−３，および１２０−４）からの「Ｄｅｌｅｔｅ：０１：ＲｅｑＩＤ」および「ＧｏｔＡｌｌ：＊：ＲｅｑＩＤ」（ここで「＊」は、各ストレージクラスタ１２０に対するストレージクラスタＩＤを示す）を有するオブジェクトに遭遇した場合、オブジェクトおよびメタデータは削除され得る。したがって、ストレージクラスタ１２０−１は、成功したネゴシエーションのイニシエータであり得る。 If a completed delete negotiation is identified for the object (block 360-YES), an object having a successful delete negotiation or a failed delete negotiation message may be deleted by activating the storage cluster (block 640). In the illustrated embodiment, the storage cluster 120-1 previously initiated a delete negotiation for the object and can delete the object (eg, an ACK message and / or GotAll for object metadata). If the storage cluster 120-1 identifies metadata in an object that indicates that all other storage clusters that store the replica of the object have recognized (by writing a message), the storage cluster 120-1 is associated with the object. Metadata can be deleted. For example, a scan in storage cluster 120-1 may result in “Delete: 01: ReqID” from all other storage clusters (eg, storage clusters 120-2, 120-3, and 120-4) that store the replica of the object. And “GotAll: *: ReqID” (where “*” indicates the storage cluster ID for each storage cluster 120), the object and metadata may be deleted. Thus, the storage cluster 120-1 may be an initiator of a successful negotiation.
さらにブロック６４０を参照して、別の例示の実施例において、ストレージクラスタ１２０−１が以前にオブジェクトに対して削除ネゴシエーションを起動し、かつ、オブジェクトが削除されるべきでないことを、少なくとも１つの別のストレージクラスタ１２０が、ＮＡＣＫメッセージを書き込むことによって示したことを示すオブジェクトにおいてストレージクラスタがメタデータを特定した場合、ストレージクラスタ１２０−１は、オリジナルのネゴシエーションメッセージと別のストレージクラスタ１２０からの全ての対応するメッセージを含むメタデータを削除している。たとえば、全ての別のストレージクラスタからの「Ｄｅｌｅｔｅ：０１：ＲｅｑＩＤ」、「ＡＣＫ：＊：ＲｅｑＩＤ」および「ＮＡＣＫ：＊：ＲｅｑＩＤ」（ここで「＊」はストレージクラスタＩＤを示す）を有するオブジェクトにストレージクラスタ１２０−１内のスキャンが遭遇し、かつ少なくとも１つのＮＡＣＫメッセージが存在する場合、ＲｅｑＩＤに対応する全てのＤｅｌｅｔｅ、ＮＣＫ、ＡＣＫおよびＮＡＣＫメッセージが、オブジェクトに関連付けられたメタデータから削除され得る。したがって、ストレージクラスタ１２０−１は、失敗したネゴシエーションのイニシエータであり得る。
Still referring to block 640, in another exemplary embodiment, the storage cluster 120-1 has previously initiated a delete negotiation for the object and that the object should not be deleted. Storage cluster 120-1 identifies the metadata in the object that indicates that the
完了した削除ネゴシエーションがオブジェクトに対して特定されない場合（ブロック６３０−ＮＯ）、ネゴシエーションメッセージがオブジェクトステータスに基づいてオブジェクトメタデータに書き込まれ得る（ブロック６５０）。ここでさらに説明されるように、オブジェクトのステータスに基づいて、メッセージ（たとえば「Ｄｅｌｅｔｅ」、「ＡＣＫ」、「ＮＡＣＫ」、「ＧｏｔＡｌｌ」）が１つのクラスタ内のオブジェクトメタデータに書き込まれ、オブジェクトのレプリカを含む全ての別のクラスタに複製される。たとえば、オブジェクトステータスに依存して、ストレージクラスタ１２０−１が、オブジェクトを削除するために新しいネゴシエーションメッセージを書き込み得る。代替的に、ストレージクラスタ１２０−１が継続中のネゴシエーションに応答してＡＣＫメッセージ、ＮＡＣＫメッセージ、またはＧｏｔＡｌｌメッセージを書き込み得る。ネゴシエーションメッセージの使用は図７に関してさらに説明される。 If a completed delete negotiation is not specified for the object (block 630-NO), a negotiation message may be written to the object metadata based on the object status (block 650). As described further herein, based on the status of the object, a message (eg, “Delete”, “ACK”, “NACK”, “GotAll”) is written to the object metadata in one cluster, Replicated to all other clusters, including replicas. For example, depending on the object status, storage cluster 120-1 may write a new negotiation message to delete the object. Alternatively, storage cluster 120-1 may write an ACK message, a NACK message, or a GotAll message in response to an ongoing negotiation. The use of the negotiation message is further described with respect to FIG.
オブジェクトメタデータが別のストレージクラスタに対して複製され得る（ブロック６６０）。たとえば、ストレージクラスタ１２０−１は、ストレージクラスタ１２０−２、ストレージクラスタ１２０−３、ストレージクラスタ１２０−４等にネゴシエーションメッセージを複製するために、分散型マルチマスタデータ複製システムの下層の複製層を用い得る。したがって、ネゴシエーションメッセージは、別々のメッセージとしてよりも、むしろオブジェクトメタデータと共に別のクラスタに分散され得る。 Object metadata may be replicated to another storage cluster (block 660). For example, the storage cluster 120-1 uses the lower replication layer of the distributed multi-master data replication system to replicate the negotiation message to the storage cluster 120-2, storage cluster 120-3, storage cluster 120-4, etc. obtain. Thus, negotiation messages can be distributed to different clusters with object metadata rather than as separate messages.
ストレージクラスタ（たとえばストレージクラスタ１２０−１）内の全てのオブジェクトがスキャンされるまでプロセス６００が繰返され、周期的に繰返され得る。分散型マルチマスタデータ複製システム（たとえばファイルシステム１４０）内の各々の別のストレージクラスタ（たとえばストレージクラスタ１２０−２，１２０−３，．．．、１２０−Ｍ）によってプロセス６００が同様に実行され得る。したがって、別のストレージクラスタから複製されたオブジェクトメタデータは、ストレージクラスタ１２０−１からのネゴシエーションメッセージに応答してネゴシエーションメッセージを含み得る。削除のために別のストレージクラスタによって印が付けられたオブジェクトに対するネゴシエーションを非同期的に実行するために、各々のストレージクラスタは、ファイルシステムの複製層においてネゴシエーションメッセージを交換し続け得る。
図７は、図６において参照されたネゴシエーションメッセージを書き込むための例示のプロセス６５０のフローチャートである。プロセス６５０は、分散型マルチマスタデータ複製システム（たとえばファイルシステム１４０）内のストレージクラスタ（たとえばストレージクラスタ１２０の１つ）によって実行され得る。分散型マルチマスタデータ複製システムのストレージクラスタ１２０−１（「０１」のクラスタＩＤを有する）およびストレージクラスタ１２０−２（「０２」のクラスタＩＤを有する）について述べられ得る。
FIG. 7 is a flowchart of an
継続中のネゴシエーションが存在するかどうかが判断される（ブロック７１０）。たとえば、ストレージクラスタ１２０−１（たとえばガーベッジコレクタロジック４２０を用いる）は、オブジェクトに対するメタデータが削除ネゴシエーションメッセージを含むかどうかを判断し得る。１つの実施例において、オブジェクトに対する削除ネゴシエーションは、ストレージクラスタ１２０−１によって以前に起動することが可能であったか、または、たとえば別のストレージクラスタ（たとえばストレージクラスタ１２０−２，１２０−３，または１２０−４うちの１つ）によって起動され得た。 A determination is made whether there is an ongoing negotiation (block 710). For example, storage cluster 120-1 (eg, using garbage collector logic 420) may determine whether the metadata for the object includes a delete negotiation message. In one embodiment, the deletion negotiation for the object could have previously been initiated by storage cluster 120-1 or, for example, another storage cluster (eg, storage cluster 120-2, 120-3, or 120- 1 of 4).
継続しているネゴシエーションが存在しないと判断された場合（ブロック７１０−ＮＯ）、いずれかの参照がオブジェクトを指すかどうかが判断され得る（ブロック７１５）。たとえば、ストレージクラスタ１２０−１（たとえばガーベッジコレクタロジック４２０を用いる）は、（たとえば参照の有向グラフを分析することによって）特定のオブジェクトが参照を有するかどうかを判断する。オブジェクトを指す参照がないと判断された場合（ブロック７１５−ＮＯ）、新しい「削除」メッセージが書き込まれ得る（ブロック７２０）。たとえば、参照を有さないオブジェクタにストレージクラスタ１２０−１内のスキャンが遭遇し、かつ、継続中のネゴシエーション（たとえば「Ｄｅｌｅｔｅ」メッセージがない）がない場合、ストレージクラスタ１２０−１は、固有のＲｅｑＩＤを生成し、オブジェクトに対して新しい削除ネゴシエーションメッセージ（たとえば「Ｄｅｌｅｔｅ：０１：ＲｅｑＩＤ」）を書き込むことができる。参照がオブジェクトを指すと判断された場合（ブロック７１５−ＹＥＳ）、メッセージが要求されない（ブロック７９０）。たとえば、ストレージクラスタ１２０−１内のスキャンが参照を有するオブジェクトに遭遇し、かつ、継続中の削除ネゴシエーションがない場合、このとき、オブジェクトは付加的な処理を要求し得ない。 If it is determined that there is no ongoing negotiation (block 710-NO), it may be determined whether any reference points to the object (block 715). For example, storage cluster 120-1 (eg, using garbage collector logic 420) determines whether a particular object has a reference (eg, by analyzing a directed graph of references). If it is determined that there is no reference to the object (block 715-NO), a new “delete” message may be written (block 720). For example, if an objector that does not have a reference encounters a scan in storage cluster 120-1 and has no ongoing negotiation (eg, no “Delete” message), storage cluster 120-1 A ReqID can be generated and a new delete negotiation message (eg, “Delete: 01: ReqID”) can be written to the object. If it is determined that the reference points to an object (block 715-YES), no message is requested (block 790). For example, if a scan in storage cluster 120-1 encounters an object that has a reference, and there is no ongoing deletion negotiation, then the object may not require additional processing.
継続中のネゴシエーションが存在すると判断された場合（ブロック７１０−ＹＥＳ）、いずれかの参照がオブジェクトを指すかどうかが判断され得る（ブロック７３０）。たとえば、ストレージクラスタ１２０−１（たとえばガーベッジコレクタロジック４２０を用いる）は、特定のオブジェクトが参照を有するかどうかを判断し得る。参照がオブジェクトを指すと判断された場合（ブロック７３０−ＹＥＳ）、以前の否定応答が既にオブジェクトのメタデータ内に記憶されているかどうかが判断され得る（ブロック７３５）。たとえば、ストレージクラスタ１２０−１（たとえばガーベッジコレクタロジック４２０を用いる）は、ストレージクラスタ１２０−１からのＮＡＣＫメッセージ（たとえば「ＮＡＣＫ：０１：ＲｅｑＩＤ」）が既にオブジェクトのメタデータ内に含まれているかどうかを判断し得る。 If it is determined that there is an ongoing negotiation (block 710—YES), it may be determined whether any reference points to the object (block 730). For example, storage cluster 120-1 (eg, using garbage collector logic 420) may determine whether a particular object has a reference. If it is determined that the reference refers to an object (block 730—YES), it may be determined whether a previous negative response has already been stored in the object's metadata (block 735). For example, storage cluster 120-1 (eg, using garbage collector logic 420) determines whether a NACK message from storage cluster 120-1 (eg, “NACK: 01: ReqID”) is already included in the object's metadata. Can be judged.
以前の否定応答が既にオブジェクトのメタデータに記憶されてはいないと判断された場合（ブロック７３５−ＮＯ）、否定応答（「ＮＡＣＫ」）メッセージが書き込まれ得る（ブロック７４０）。たとえば、参照ならびに別のストレージクラスタ（たとえばストレージクラスタ１２０−２）からの継続中のネゴシエーション（たとえば「Ｄｅｌｅｔｅ：０２：ＲｅｑＩＤ」）を有するオブジェクトにストレージクラスタ１２０−１内のスキャンが遭遇した場合、ストレージクラスタ１２０−１は、否定応答（たとえば「ＮＡＣＫ：０１：ＲｅｑＩＤ」）をオブジェクトのメタデータに書き込み得る。以前の否定応答が既にオブジェクトのメタデータ内に記憶されていると判断された場合（ブロック７３５−ＹＥＳ）、このときにさらなるオブジェクトの処理は要求されない（ブロック７９０）。 If it is determined that a previous negative response has not already been stored in the object's metadata (block 735-NO), a negative response ("NACK") message may be written (block 740). For example, if a scan in storage cluster 120-1 encounters an object that has a reference as well as an ongoing negotiation (eg, “Delete: 02: ReqID”) from another storage cluster (eg, storage cluster 120-2), the storage Cluster 120-1 may write a negative response (eg, “NACK: 01: ReqID”) to the object's metadata. If it is determined that a previous negative response has already been stored in the object's metadata (block 735-YES), then no further object processing is required at this time (block 790).
オブジェクトを指すリファレンスがないと判断された場合（ブロック７３０−ＮＯ）、全てのＡＣＫが受取られたかどうかが判断される（ブロック７５０）。たとえば、ストレージクラスタ１２０−１（たとえばガーベッジコレクタロジック４２０を用いる）は、システム１４０内の各ストレージクラスタ１２０からの応答（たとえば「ＡＣＫ：＊：ＲｅｑＩＤ」、ここで「＊」はストレージクラスタＩＤを示す）がオブジェクトのメタデータ内に含まれているかどうかを判断し得る。全てのＡＣＫが受取られたと判断された場合（ブロック７５０−ＹＥＳ）、「ＧｏｔＡｌｌ」メッセージが書き込まれ得る（ブロック７６０）。たとえば、削除メッセージ（たとえば「Ｄｅｌｅｔｅ：０２：ＲｅｑＩＤ」）ならびにシステム１４０内の各ストレージクラスタ１２０からの応答（たとえば「ＡＣＫ：＊：ＲｅｑＩＤ」、ここで「＊」はストレージクラスタＩＤを示す）を有するオブジェクトにストレージクラスタ１２０−１内のスキャンが遭遇した場合、ストレージクラスタ１２０−１はイニシエータストレージクラスタ１２０−２による使用のために応答確認メッセージ（たとえば「ＧｏｔＡｌｌ：０１：ＲｅｑＩＤ」）を書き込み得る。全てのＡＣＫが受取られてはいないと判断された場合（ブロック７５０−ＮＯ）、以前の応答がオブジェクトのメタデータ内に既に記憶されているかどうかが判断され得る（ブロック７７０）。たとえば、ストレージクラスタ１２０−１（たとえばガーベッジコレクタロジック４２０を用いる）は、ストレージクラスタ１２０−１（たとえば「ＡＣＫ：０１：ＲｅｑＩＤ」）からのＡＣＫメッセージが既にオブジェクトのメタデータ内に含まれているかどうかを判断し得る。
If it is determined that there is no reference to the object (block 730-NO), it is determined whether all ACKs have been received (block 750). For example, storage cluster 120-1 (eg, using garbage collector logic 420) responds from each
以前の応答がオブジェクトのメタデータに既に記憶されてはいないと判断された場合（ブロック７７０−ＮＯ）、新しい応答（「ＡＣＫ」）メッセージが書き込まれ得る（ブロック７８０）。たとえば、参照を有さず、かつ、別のレプリカ（たとえばストレージクラスタ１２０−２）からの継続中のネゴシエーション（たとえば「Ｄｅｌｅｔｅ：０２：ＲｅｑＩＤ」）を有するオブジェクトにストレージクラスタ１２０−１内のスキャンが遭遇した場合、ストレージクラスタ１２０−１はオブジェクトのメタデータに対して応答（たとえば「ＡＣＫ：０１：ＲｅｑＩＤ」）を書き込み得る。以前の応答が既にオブジェクトのメタデータに記憶されていると判断された場合（ブロック７７０−ＹＥＳ）、このときにさらなるオブジェクトの処理は要求されない（ブロック７９０）。 If it is determined that the previous response is not already stored in the object's metadata (block 770—NO), a new response (“ACK”) message may be written (block 780). For example, an object that has no reference and has an ongoing negotiation (eg, “Delete: 02: ReqID”) from another replica (eg, storage cluster 120-2) is scanned in storage cluster 120-1. If encountered, the storage cluster 120-1 may write a response (eg, “ACK: 01: ReqID”) to the object's metadata. If it is determined that a previous response has already been stored in the object's metadata (block 770—YES), no further object processing is required at this time (block 790).
図８は、ここで説明されるシステムおよび方法と一致する実施例に従って新しい参照をオブジェクトに対して生成するための例示のプロセス８００のフローチャートを提供する。プロセス８００は、分散型マルチマスタデータ複製システム（たとえばファイルシステム１４０）内のストレージクラスタ（たとえばストレージクラスタ１２０の１つ）によって実行され得る。プロセス８００の特定の例について、ファイルシステム１４０のストレージクラスタ１２０−１（クラスタＩＤ「０１」を有する）に対して参照が作成され得る。
FIG. 8 provides a flowchart of an
オブジェクトに対する参照表示が受取られ得る（ブロック８１０）。たとえば、ストレージクラスタ１２０−１は、オブジェクトに対して新しい参照を加えるための要求を受取り得る。ストレージクラスタにおいて起動されたネゴシエーションメッセージに対してオブジェクトメタデータが見直され得る（ブロック８２０）。たとえば、ストレージクラスタ１２０−１は、任意の削除ネゴシエーションメッセージ、および、特に、ストレージクラスタ１２０−１によって以前に起動された任意のＤｅｌｅｔｅまたはＡＣＫネゴシエーションメッセージ（たとえば「Ｄｅｌｅｔｅ：０１：ＲｅｑＩＤ」または「ＡＣＫ：０１：ＲｅｑＩＤ」）を特定するためにオブジェクトのメタデータを見直し得る。ここで説明される実施例において、ストレージクラスタ１２０−１によって起動されたＤｅｌｅｔｅまたはＡＣＫメッセージを有するオブジェクトメタデータ内に継続するネゴシエーションを有するオブジェクトに対して、ストレージクラスタ１２０−１は新しい参照を書き込み得ない。 A reference indication for the object may be received (block 810). For example, storage cluster 120-1 may receive a request to add a new reference to the object. The object metadata may be reviewed for the negotiation message initiated at the storage cluster (block 820). For example, the storage cluster 120-1 may delete any delete negotiation message and, in particular, any Delete or ACK negotiation message previously initiated by the storage cluster 120-1 (eg, “Delete: 01: ReqID” or “ACK: 01: ReqID ") may be reviewed to determine the object's metadata. In the embodiment described herein, storage cluster 120-1 may write a new reference to an object that has a continuing negotiation in the object metadata with Delete or ACK message initiated by storage cluster 120-1. Absent.
ＤｅｌｅｔｅまたはＡＣＫメッセージが存在するかどうかが判断される（ブロック８３０）。ＤｅｌｅｔｅまたはＡＣＫメッセージが存在する場合（ブロック８３０−ＹＥＳ）、別のストレージクラスタ内のレプリカがフェイルオーバーとして用いられ得る（ブロック８４０）。たとえば、オブジェクトメタデータ内において「Ｄｅｌｅｔｅ：０１：ＲｅｑＩＤ」メッセージをストレージクラスタ１２０−１が特定した場合、メッセージは、オブジェクトに対する新しい参照の書込からストレージクラスタ１２０−１を有効にロックアウトする。したがって、ストレージクラスタ１２０−１内のオブジェクトに対する参照の書込要求は別のストレージクラスタ（たとえばストレージクラスタ１２０−２）に転送される。 A determination is made whether there is a Delete or ACK message (block 830). If there is a Delete or ACK message (block 830—YES), a replica in another storage cluster may be used as a failover (block 840). For example, if the storage cluster 120-1 identifies a “Delete: 01: ReqID” message in the object metadata, the message effectively locks out the storage cluster 120-1 from writing a new reference to the object. Therefore, the reference write request for the object in the storage cluster 120-1 is transferred to another storage cluster (for example, the storage cluster 120-2).
ＤｅｌｅｔｅまたはＡＣＫメッセージが存在しない場合（ブロック８３０−ＮＯ）、オブジェクトに対して新しい参照が書き込まれ得る（ブロック８５０）。たとえば、ストレージクラスタ１２０−１は、活動中のオブジェクトに対して単に要求された参照を書き込む。 If there is no Delete or ACK message (block 830—NO), a new reference may be written to the object (block 850). For example, storage cluster 120-1 simply writes the requested reference to the active object.
事例
図９は、ここで説明される実施例に従う例示の削除ネゴシエーションの一部を実行する例示のネットワークを提供する。ガーベッジコレクションアルゴリズムは各々のストレージクラスタＸＸ，ＹＹおよびＺＺにおいて周期的に実行し、ストレージクラスタ内の全てのオブジェクトをスキャンし得る。メッセージ（たとえばＤｅｌｅｔｅ、ＡＣＫ、ＮＡＣＫ、ＧｏｔＡｌｌ）は、１つのクラスタ（たとえばストレージクラスタＹＹ）内のオブジェクトのメタデータに対してガーベッジコレクタによって書き込まれ、かつ、オブジェクトのレプリカを含む全ての別のクラスタ（たとえばストレージクラスタＸＸおよびＺＺ）に対して複製され得る。
Example FIG. 9 provides an example network that performs a portion of an example delete negotiation in accordance with the embodiments described herein. The garbage collection algorithm can be executed periodically in each storage cluster XX, YY and ZZ to scan all objects in the storage cluster. Messages (eg, Delete, ACK, NACK, GotAll) are written by the garbage collector to the object's metadata in one cluster (eg, storage cluster YY) and all other clusters (including replicas of the object) For example, it can be replicated for storage clusters XX and ZZ).
ここで説明される原則に一致するガイドラインを用いて、ガベッジコレクタによって用いられるガーベッジコレクションアルゴリズムは作動し得る。参照を有さないオブジェクトにストレージクラスタＹＹ内のガーベッジコレクタのスキャンが遭遇し、かつ、継続中のネゴシエーションが無い（たとえば、Ｄｅｌｅｔｅ：ＹＹ：ＲｅｑＩＤメッセージが無い）場合、ストレージクラスタＹＹ内のガーベッジコレクタは、固有のＲｅｑＩＤ（たとえば、２２２２２）の生成し、オブジェクトのメタデータに対して「Ｄｅｌｅｔｅ：ＹＹ：２２２２２」を書き込むことができる。ストレージクラスタＸＸ内のガーベッジコレクタのスキャンが、別のレプリカからの（たとえば、ストレージクラスタＹＹからの）削除ネゴシエーション（たとえば、Ｄｅｌｅｔｅ：ＹＹ：２２２２２）に初めて遭遇する場合、オブジェクトが参照を有しないか、そうでなければ「ＮＡＣＫ：ＸＸ：２２２２２」を有すると、ガーベッジコレクタは、「ＡＣＫ：ＸＸ：２２２２２」を書き込む。ストレージクラスタＸＸは、未処理のＤｅｌｅｔｅ：ＸＸ：ＲｅｑＩＤまたはＡＣＫ：ＸＸ：ＲｅｑＩＤメッセージを有するオブジェクトに対して新しい参照を不可することができない。ストレージクラスタＸＸ内のガーベッジコレクタのスキャンが、全ての別のレプリカからのＤｅｌｅｔｅ：ＹＹ：２２２２２およびＡＣＫ：＊：２２２２２に初めて遭遇する場合、ガーベッジコレクタは、ＧｏｔＡｌｌ：ＸＸ：２２２２２を書き込み得る。この場合、ストレージクラスタＸＸは、イニシエータではない。ストレージクラスタＹＹのガーベッジコレクタのスキャンが、全ての別のレプリカからのＤｅｌｅｔｅ：ＹＹ：２２２２２およびＧｏｔＡｌｌ：＊：２２２２２に遭遇した場合、オブジェクトおよびメタデータが削除される。（ストレージクラスタＹＹは、成功したネゴシエーションのイニシエータである）。ストレージクラスＹＹ内のガーベッジコレクタのスキャンが、別のレプリカからのＤｅｌｅｔｅ：ＹＹ：２２２２２、ＡＣＫ：ＸＸ：２２２２２およびＮＡＣＫ：ＺＺ：２２２２２に遭遇すると、少なくとも１つのＮＡＣＫメッセージがあるので、ＲｅｑＩＤに対応する全てのＤｅｌｅｔｅ、ＡＣＫおよびＮＡＣＫメッセージは、オブジェクトのメタデータから削除される。この場合、ストレージクラスタＹＹは、失敗したネゴシエータのイニシエータである。 With guidelines consistent with the principles described herein, the garbage collection algorithm used by the garbage collector can operate. If an object that has no reference encounters a garbage collector scan in storage cluster YY and there is no ongoing negotiation (eg, there is no Delete: YY: ReqID message), then the garbage collector in storage cluster YY , A unique ReqID (eg, 22222) can be generated, and “Delete: YY: 22222” can be written to the metadata of the object. If a garbage collector scan in storage cluster XX first encounters a delete negotiation (eg, from storage cluster YY) from another replica (eg, Delete: YY: 22222), the object has no reference, Otherwise, having “NACK: XX: 22222”, the garbage collector writes “ACK: XX: 22222”. The storage cluster XX cannot disable new references to objects that have an outstanding Delete: XX: ReqID or ACK: XX: ReqID message. If a garbage collector scan in storage cluster XX first encounters Delete: YY: 22222 and ACK: *: 22222 from all other replicas, the garbage collector may write GotAll: XX: 22222. In this case, the storage cluster XX is not an initiator. If a storage collector YY garbage collector scan encounters Delete: YY: 22222 and GotAll: *: 22222 from all other replicas, the objects and metadata are deleted. (Storage cluster YY is the initiator of a successful negotiation). When a garbage collector scan in storage class YY encounters Delete: YY: 22222, ACK: XX: 22222 and NACK: ZZ: 22222 from another replica, there is at least one NACK message, so it corresponds to ReqID All Delete, ACK and NACK messages are deleted from the object's metadata. In this case, the storage cluster YY is the initiator of the failed negotiator.
図９のシステムにおいて、ストレージクラスタＸＸ，ＹＹおよびＺＺは、各々、オブジェクトメタデータのレプリカを記憶するように設計され得る。図９は、オブジェクト「オブジェクト１」のメタデータのレプリカ（「メタデータ１Ａ」）を示す。メタデータ１Ａは、ストレージクラスタＸＸに送られた、ストレージクラスタＹＹにより起動された削除ネゴシエーションを含む。応答において、ストレージクラスタＸＸは、オブジェクトメタデータに対して返信メッセージを付加し、ストレージクラスタＹＹにメタデータレプリカ（「メタデータ１Ｂ」）を送り得る。図９のファイルシステムにおいて、メタデータ１Ａおよびメタデータ１Ｂは、ストレージクラスタＺＺ（図示せず）に対しても複製され得る。ストレージクラスタＸＸ，ＹＹおよびＺＺ間で送られる後のメタデータレプリカ（図示せず）は、オブジェクト１を削除するかあるいはオブジェクト１を放置する、ならびに、ストレージクラスタＹＹによって起動されたネゴシエーションに関連するメッセージを削除するということに、分散型コンセンサスが合意するため、オブジェクト１のメタデータ内に付加的なネゴシエーションメッセージを含み得る。
In the system of FIG. 9, storage clusters XX, YY, and ZZ can each be designed to store a replica of object metadata. FIG. 9 shows a metadata replica (“metadata 1A”) of the object “
ここで説明されるシステムおよび／または方法のアプリケーションは、活動中のレプリカを有するオブジェクトが削除されずに、常時利用可能であり得るように、プロトコル可用性補償を提供することができる。たとえば、さらに図９を参照して、ストレージクラスタＸＸ内のオブジェクト１の活動中のレプリカがある場合、オブジェクト削除ネゴシエーションは、ストレージクラスタＸＸによって肯定応答されず、したがって、オブジェクト１は削除されない。また、ストレージクラスタＹＹによって起動された削除ネゴシエーションが進行中である場合、ストレージクラスタＹＹ内のクローン要求（たとえば、新しいオブジェクト参照を生成する要求）が、フェイルオーバ（たとえば、自動切換）を通して、ストレージクラスタＸＸ内のオブジェクト１の活動中のレプリカに引き継がれる。
Applications of the systems and / or methods described herein can provide protocol availability compensation so that objects with active replicas can be always available without being deleted. For example, with further reference to FIG. 9, if there is an active replica of
ここで説明されるシステム及および／または方法のアプリケーションは、プロトコルライブネス補償を提供し得る。たとえば、任意の起動された削除ネゴシエーション要求Ｄｅｌｅｔｅ：ＸＸ：ＲｅｑＩＤに対して、ストレージクラスタＹＹ内のガーベッジコレクタのスキャンプロセスは、最終的には、ＡＣＫ：ＹＹ：ＲｅｑＩＤまたはＮＡＣＫ：ＹＹ：ＲｅｑＩＤを書込み、ストレージクラスタＸＸ内のネゴシエーションプロセスは、全てのこれらのＡＣＫおよび／またはＮＡＣＫが複製されたときにＹｅｓまたはＮｏの判断を下して終了する。そして、判断が肯定であって、下層の複製層を介して別のストレージクラスタＹＹおよびＺＺに伝搬するストレージクラスタＸＸによる実際の削除を最終的に引き起こす場合に、ストレージクラスタの全てによってオブジェクトのメタデータに対してＧｏｔＡｌｌ：＊：ＲｅｑＩＤが書き込まれ得る。活動中のレプリカが、たとえばストレージクラスタＺＺ内に存在する場合、判断は否定であり、イニシエータ（たとえばストレージクラスタＸＸ）は、ネゴシエーションメッセージを削除することによってオブジェクトのメタデータが浄化される。浄化されたメタデータは、最終的には、ＡＣＫを書き込んだ全てのストレージクラスタに伝搬され、そこでオブジェクトが利用可能になる。 Applications of the systems and / or methods described herein may provide protocol liveness compensation. For example, for any triggered delete negotiation request Delete: XX: ReqID, the garbage collector scan process in storage cluster YY will eventually write ACK: YY: ReqID or NACK: YY: ReqID, The negotiation process in storage cluster XX ends with a Yes or No determination when all these ACKs and / or NACKs have been replicated. And if the determination is affirmative and eventually causes an actual deletion by the storage cluster XX that propagates to another storage cluster YY and ZZ via the underlying replication layer, all of the storage cluster will have object metadata GotAll: *: ReqID can be written. If there is an active replica, for example in storage cluster ZZ, the determination is negative and the initiator (eg, storage cluster XX) cleans up the object's metadata by deleting the negotiation message. The cleaned metadata is eventually propagated to all storage clusters that wrote the ACK, where the object becomes available.
ここで説明されるシステムおよび／方法のアプリケーションは、オブジェクトが削除された後で、ファントム参照が再出現できないことの補償も提供できる。たとえば、オブジェクト１が、ＸＸにおいて最初に削除されたと想定する。ガーベッジコレクションアルゴリズムに基づき、別のストレージクラスタからのＧｏｔＡｌｌ：＊：ＲｅｑＩＤが、削除が行なわれる前にストレージクラスタＸＸに対して複製されていなければならない。この推論によって、さらに別のストレージクラスタＺＺから複製されたファントム参照から、ストレージクラスタＹＹ域の全ての複製データが浄化される。これは、別のストレージクラスタ、特にストレージクラスタＺＺからの全てのＡＣＫが受け取られたときに、ストレージクラスタＹＹがＧｏｔＡｌｌ：ＹＹ：ＲｅｑＩＤを書き込む一方で、ＡＣＫ：ＺＺ：ＲｅｑＩＤが書き込まれた後ではストレージクラスタＺＺに新たな参照を付加することができず、かつ、このときにはストレージクラスタＺＺ内に活動中の参照がなかったということに起因する。なお、ＡＣＫ：ＹＹ：ＲｅｑＩＤが書き込まれた後であって、ＡＣＫ：ＺＺ：ＲｅｑＩＤが複製される前にはストレージクラスタＹＹにストレージクラスタＺＺから参照がまだ複製され得るが、単一のレプリカに対する書込みの順番を複製層が遵守するので、ＡＣＫ：ＺＺ：ＲｅｑＩＤがストレージクラスタＹＹに複製される時までに、すべてのそのような参照が削除される。
The system and / or method applications described herein can also provide compensation for phantom references that cannot reappear after an object is deleted. For example, assume that
ここに説明されるシステムおよび／または方法のアプリケーションは、さらに、ノープロトコルガーベッジ補償を提供することができる。たとえば、削除ネゴシエーションが失敗すると、イニシエータは、Ｄｅｌｅｔｅ、ＡＣＫおよびＮＡＣＫネゴシエーションメッセージを削除し、複製を介して別のオブジェクトレプリカに削除が伝搬する。イニシエータにより削除される前にイニシエータによって全ての関連するメッセージが受け取られなければならないようにアルゴリズムが構成されているため、ガーベッジは残らない。 Applications of the systems and / or methods described herein can further provide no protocol garbage compensation. For example, if the delete negotiation fails, the initiator deletes the Delete, ACK, and NACK negotiation messages, and the delete propagates to another object replica via replication. Since the algorithm is configured so that all relevant messages must be received by the initiator before they are deleted by the initiator, no garbage remains.
結論
ここで説明されたシステムおよび／または方法は、複製ストレージクラスタに対して、可用性、ライブネスおよび一貫性保証を与える非同期式分散ガーベッジコレクションアルゴリズムを提供し得る。アルゴリズムは、異なるクラスタ間でメッセージを移送するために下層の複製層を用いる。各削除ネゴシエーションはクラスタのうちの１つにおけるガーベッジコレクタロジックによって起動され、固有の識別子を有する。アルゴリズムは、複数の同時ネゴシエーションをサポートする。オブジェクトは、分散型コンセンサスが合意したときにイニシエータによって削除され得、そうでなければネゴシエーションは無効であり得る。
CONCLUSION The systems and / or methods described herein may provide an asynchronous distributed garbage collection algorithm that provides availability, liveness and consistency guarantees for replicated storage clusters. The algorithm uses an underlying replication layer to transport messages between different clusters. Each delete negotiation is triggered by garbage collector logic in one of the clusters and has a unique identifier. The algorithm supports multiple simultaneous negotiations. The object can be deleted by the initiator when the distributed consensus agrees, otherwise the negotiation can be invalid.
実施例の前述の説明は、解説と説明を提供するが、完全なものであることや開示された形式通りに発明を限定することを意図するものではない。上記の教示を踏まえて修正および変更が可能であり、または発明の実施から理解される。 The foregoing description of the embodiments provides explanation and explanation, but is not intended to be exhaustive or to limit the invention to the form disclosed. Modifications and variations are possible in light of the above teaching, or are understood from the practice of the invention.
たとえば、別の実施例において、異なるストレージクラスタにおけるガーベッジコレクタが、複製層を用いずに、直接通信するガーベッジコレクションアルゴリズムの同期式バージョンが用いられ得る。また、図６および７に関して一連のブロックが説明されたが、別の実施例においてブロックの順番を変更してもよい。さらに、非従属のブロックが平行的に実行され得る。 For example, in another embodiment, a synchronous version of a garbage collection algorithm may be used in which garbage collectors in different storage clusters communicate directly without using a replication layer. Also, while a series of blocks have been described with respect to FIGS. 6 and 7, the order of the blocks may be changed in other embodiments. Furthermore, non-dependent blocks can be executed in parallel.
ここで説明されるように、実施の形態が、図において記載された実施例においてソフトウェア、ファームウェアおよびハードウェアの多くの異なる形式で実現され得ることが明らかである。ここで説明された実施の形態を実現するために用いられる実際のソフトウェアコードまたは専用の制御ハードウェアは発明を限定するものではない。したがって、実施の形態の作動および挙動は特定のソフトウェアコードを参照することなしに説明された。ソフトウェアおよび制御ハードウェアはここでの説明に基づく実施の形態を実現するために設計され得ることが理解される。 As will now be described, it will be apparent that embodiments may be implemented in many different forms of software, firmware and hardware in the examples described in the figures. The actual software code or dedicated control hardware used to implement the embodiments described herein is not intended to limit the invention. Thus, the operation and behavior of the embodiments have been described without reference to specific software code. It will be understood that the software and control hardware may be designed to implement embodiments based on the description herein.
さらに、ここで説明されたある実施例は１つ以上の機能を実行する「ロジック」として実現され得る。このロジックは、プロセッサ、マイクロプロセッサなどのハードウェア、アプリケーション特有の集積回路、または、フィールドプログラマブルゲートアレイ、あるいはハードウェアとソフトウェアとの組合せ（たとえばソフトウェア、プロセッサにより実行されるソフトウェア）。 Further, certain embodiments described herein may be implemented as “logic” that performs one or more functions. This logic may be hardware such as a processor, microprocessor, application specific integrated circuit, or field programmable gate array, or a combination of hardware and software (eg, software, software executed by a processor).
この明細書において用いられるときの「含む」という用語は、述べられた特徴、整数、ステップ、または構成要素が存在することを特定するものとされるが、１つ以上の別の特徴、整数、ステップ、構成要素またはそれらの組の存在または付加を妨げるものではない。 The term “comprising” as used in this specification is intended to identify the presence of the stated feature, integer, step, or component, but one or more other features, integer, It does not preclude the presence or addition of steps, components or combinations thereof.
特許請求の範囲および／または明細書中の開示において特定の特徴の組合せが記載されているが、これらの組合せは、発明の開示を限定することを意図するものではない。実際に、特許請求の範囲および／または明細書中の開示において具体的には記載されていない方法で、これらの特徴の多くが組み合わせられ得る。 Although particular combinations of features are described in the claims and / or disclosure in the specification, these combinations are not intended to limit the disclosure of the invention. Indeed, many of these features may be combined in ways that are not specifically described in the claims and / or the disclosure.
本明細書の説明において用いられる要素、動作、または命令は、明確に記載されない限り、発明にとって重要であり不可欠なものとして解釈されるべきではない。また、ここで用いられるように、「ある」という冠詞は１つ以上の品目を含む。１つだけの品目が意図される場合、「１つ」という用語または類似の言葉が用いられる。さらに、「基づく」という表現は、ここで用いられるように、明確に述べられない限り、「少なくとも部分的に基づく」ことが意図される。 Any element, operation, or instruction used in the description of the specification is not critical to the invention and should not be construed as essential unless explicitly stated. Also, as used herein, the article “a” includes one or more items. Where only one item is intended, the term “one” or similar language is used. Further, the phrase “based on”, as used herein, is intended to be “based at least in part” unless explicitly stated.
Claims (24)
データストアにオブジェクトを記憶するステップを備え、少なくとも１つ以上のオブジェクトは、前記分散型マルチマスタデータ複製システム内で複製され、
前記データストア内の前記オブジェクトのスキャンを実行するステップと、
前記データストアにおけるオブジェクトのスキャンに基づいて、前記オブジェクトのうちの１つを、前記オブジェクトのうちの１つを指し示す参照を有さないものとして特定するステップと、
前記オブジェクトのうちの１つについて、固有のネゴシエーション要求識別子を含む削除ネゴシエーションメッセージを生成するステップと、
前記オブジェクトのうちの１つに関連付けられたメタデータとして、前記削除ネゴシエーションメッセージを記憶するステップと、
前記複数の装置のうちの１つ以上の別の装置に、前記削除ネゴシエーションメッセージを有する前記メタデータを、前記オブジェクトのうちの１つに関連付けて複製するステップとを備え、前記削除ネゴシエーションメッセージは、前記オブジェクトのうちの１つの削除ネゴシエーションについてのコンセンサスを与えるために、別の削除ネゴシエーションメッセージに付与される、方法。 A method performed by a device of a plurality of devices in a distributed multi-master data replication system, comprising:
Storing the object in a data store, wherein at least one or more objects are replicated in the distributed multi-master data replication system;
Performing a scan of the object in the data store;
Identifying one of the objects as having no reference pointing to one of the objects based on a scan of the object in the data store;
Generating a delete negotiation message including a unique negotiation request identifier for one of the objects;
Storing the delete negotiation message as metadata associated with one of the objects;
Replicating the metadata having the delete negotiation message to one or more other devices of the plurality of devices in association with one of the objects, wherein the delete negotiation message comprises: A method that is attached to another delete negotiation message to provide consensus about the delete negotiation of one of the objects.
前記複数の装置のうちの１つ以上の装置に、前記削除ネゴシエーションメッセージに対する前記応答または前記否定応答を有する前記別の１つのオブジェクトに関連付けられたメタデータを複製するステップとをさらに備える、請求項３に記載の方法。 Storing one of a response, a negative response or a confirmation to said another delete negotiation message as metadata associated with said another one of said objects;
Replicating metadata associated with the one other object having the response or the negative response to the delete negotiation message to one or more devices of the plurality of devices. 3. The method according to 3.
オブジェクトに関連付けられたネゴシエーションメッセージを有するものとして、データストア内に記憶されたオブジェクトを特定するための手段を備え、前記ネゴシエーションメッセージは固有のネゴシエーション要求識別子を含み、
前記オブジェクトの状態に基づく新しいネゴシエーションメッセージを、前記オブジェクトに関連付けるための手段と、
ストレージクラスタに前記新しいネゴシエーションメッセージを複製するための手段と、
前記オブジェクトのレプリカに関連付けられた別のネゴシエーションメッセージを受け取るための手段と、
前記別のネゴシエーションメッセージが成功したネゴシエーションを示す場合、前記オブジェクトを削除するための手段とを備える、装置。 A device among a plurality of devices in a distributed multi-master data replication system,
Means for identifying an object stored in a data store as having a negotiation message associated with the object, the negotiation message including a unique negotiation request identifier;
Means for associating a new negotiation message based on the state of the object with the object;
Means for replicating the new negotiation message to a storage cluster;
Means for receiving another negotiation message associated with the replica of the object;
Means for deleting said object if said another negotiation message indicates a successful negotiation.
前記データストア内におけるオブジェクトの状態であって、当該オブジェクトが参照を有するか否か、および、削除ネゴシエーションが当該オブジェクトに関連付けられているか否かに関係している状態を判断するために、前記データストアの複数のオブジェクトのスキャンを行ない、
前記オブジェクトの前記状態に基づいて、前記オブジェクトに関連付けられたメタデータに新しいネゴシエーションメッセージを書込み、前記新しいネゴシエーションメッセージは、固有のネゴシエーション要求識別子を含み、
１つ以上の装置に対する前記新しいネゴシエーションメッセージを有するオブジェクトに関連付けられた前記メタデータを複製し、
前記１つ以上の装置のうちの１つから、前記オブジェクトに関連付けられた別のネゴシエーションメッセージを受け取るために、
前記メモリ内の前記命令を実行するプロセッサとを備え、
前記新しいネゴシエーションメッセージおよび前記別のネゴシエーションメッセージは
、前記オブジェクトの削除ネゴシエーションに対するコンセンサスを提供する、システム。 Memory for storing instructions and data stores;
In order to determine the state of the object in the data store, which is related to whether the object has a reference and whether a deletion negotiation is associated with the object Scan multiple objects in the store,
Based on the state of the object, writes a new negotiation message to metadata associated with the object, the new negotiation message including a unique negotiation request identifier;
Duplicating the metadata associated with an object having the new negotiation message for one or more devices;
In order to receive another negotiation message associated with the object from one of the one or more devices,
A processor for executing the instructions in the memory,
The new negotiation message and the another negotiation message provide consensus for the deletion negotiation of the object.
ネゴシエーションメッセージインジケータと、
ストレージクラスタ識別子とを備える、請求項１１に記載のシステム。 The new negotiation message is
A negotiation message indicator;
The system of claim 11, comprising a storage cluster identifier.
削除ネゴシエーションを起動するための削除インジケータ、
前記削除ネゴシエーションに対する肯定応答を提供するための応答インジケータ、
前記削除ネゴシエーションに対する否定応答を提供するための否定応答インジケータ、または、
前記１つ以上の装置から応答が受け取られたことの確証を与えるための同期インジケータのうちの１つを含む、請求項１５に記載のシステム。 The negotiation message indicator is:
A deletion indicator to trigger the deletion negotiation,
A response indicator for providing an acknowledgment to the delete negotiation;
A negative response indicator to provide a negative response to the delete negotiation, or
The system of claim 15, comprising one of a synchronization indicator to provide confirmation that a response has been received from the one or more devices.
前記分散型マルチマスタデータ複製システム内の前記複数のストレージクラスタ間で、前記スキャンに基づいて、１つ以上の削除ネゴシエーションメッセージを交換するステップとを備え、前記１つ以上の削除ネゴシエーションメッセージのうちの各削除ネゴシエーションメッセージは、前記削除ネゴシエーションメッセージの対象である対応するオブジェクトのメタデータ内に含まれ、前記削除ネゴシエーションメッセージは、前記分散型マルチマスタデータ複製システムの複製層を用いて前記ストレージクラスタ間で送られ、さらに、
前記１つ以上の削除ネゴシエーションメッセージに基づいて、前記複数のストレージクラスタ間において、分散型コンセンサスが合意すると、前記オブジェクトを削除するステップを備える、方法。 Scanning an object in a data store of one storage cluster of a plurality of storage clusters in a distributed multi-master data replication system;
Exchanging one or more deletion negotiation messages between the plurality of storage clusters in the distributed multi-master data replication system based on the scan, wherein the one or more deletion negotiation messages include: Each deletion negotiation message is included in the metadata of the corresponding object that is the target of the deletion negotiation message, and the deletion negotiation message is transmitted between the storage clusters using the replication layer of the distributed multi-master data replication system. Sent, and
A method comprising deleting the object when a distributed consensus is agreed between the plurality of storage clusters based on the one or more deletion negotiation messages.
ネゴシエーションメッセージインジケータと、
ストレージクラスタ識別子と、
固有のネゴシエーション要求識別子とを含む、請求項１７に記載の方法。 Each of the one or more delete negotiation messages includes:
A negotiation message indicator;
A storage cluster identifier,
The method of claim 17, comprising a unique negotiation request identifier.
削除ネゴシエーションを起動するための削除インジケータと、
前記削除ネゴシエーションに対して肯定応答を提供するための応答インジケータと、
前記削除ネゴシエーションに対して否定応答を提供するための否定応答インジケータと、
別のストレージクラスタから応答が受け取られたことの確証を提供するための同期インジケータとを含む、請求項１８に記載の方法。 The negotiation message indicator is:
A delete indicator to trigger the delete negotiation; and
A response indicator for providing a positive response to the delete negotiation;
A negative response indicator for providing a negative response to the delete negotiation;
19. A method according to claim 18, comprising a synchronization indicator for providing confirmation that a response has been received from another storage cluster.
分散型マルチマスタデータ複製システムのデータストアに記憶された複数のオブジェクトのスキャンを行なって、前記データストア内に記憶された前記複数のオブジェクトのうちの一つのオブジェクトの状態を判断するための１つ以上の命令を備え、前記状態は、当該オブジェクトが参照を有するか否か、および、削除ネゴシエーションメッセージが前記オブジェクトに関連付けられているか否かに関係しており、
前記オブジェクトの前記状態に基づいて、前記オブジェクトのメタデータに、前記オブジェクトに関連付けられた新しいネゴシエーションメッセージを書込むための１つ以上の命令を含み、前記新しいネゴシエーションメッセージは、固有のネゴシエーション要求識別子を含み、
１つ以上の他のデータストアに対する前記新しいネゴシエーションメッセージを有する前記メタデータを複製するための１つ以上の命令と、
１つ以上の別の装置から、前記オブジェクトに関連付けられた別のネゴシエーションメッセージを受け取るための１つ以上の命令と、
前記オブジェクトに関連付けられた前記別のネゴシエーションメッセージに基づいて、前記オブジェクトの削除ネゴシエーションに対するコンセンサスを判定するための１つ以上の命令とを備える、コンピュータ読取可能メモリ。 A computer readable memory comprising computer executable instructions,
One for scanning a plurality of objects stored in a data store of a distributed multi-master data replication system to determine the state of one of the plurality of objects stored in the data store Comprising the above instructions, wherein the state is related to whether the object has a reference and whether a delete negotiation message is associated with the object;
Based on the state of the object, the object's metadata includes one or more instructions for writing a new negotiation message associated with the object, the new negotiation message including a unique negotiation request identifier. Including
One or more instructions for replicating the metadata with the new negotiation message for one or more other data stores;
One or more instructions for receiving another negotiation message associated with the object from one or more other devices;
One or more instructions for determining a consensus for a deletion negotiation of the object based on the other negotiation message associated with the object.
前記コンセンサスが、成功したネゴシエーションを示す場合、前記オブジェクトを削除するための１つ以上の命令とをさらに備える、請求項２１に記載のコンピュータ読取可能メモリ。 If the consensus indicates a failed negotiation, one or more instructions to delete the new negotiation message and the another negotiation message;
The computer-readable memory of claim 21, further comprising one or more instructions for deleting the object if the consensus indicates a successful negotiation.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13985308P | 2008-12-22 | 2008-12-22 | |
US61/139,853 | 2008-12-22 | ||
PCT/US2009/069228 WO2010075401A2 (en) | 2008-12-22 | 2009-12-22 | Asynchronous distributed garbage collection for replicated storage clusters |
Publications (2)
Publication Number | Publication Date |
---|---|
JP2012513639A JP2012513639A (en) | 2012-06-14 |
JP5479490B2 true JP5479490B2 (en) | 2014-04-23 |
Family
ID=42267618
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
JP2011542575A Active JP5479490B2 (en) | 2008-12-22 | 2009-12-22 | Asynchronous distributed garbage collection for replicated storage clusters |
Country Status (9)
Country | Link |
---|---|
US (2) | US8346820B2 (en) |
EP (1) | EP2380101B1 (en) |
JP (1) | JP5479490B2 (en) |
CN (1) | CN102317939B (en) |
AU (1) | AU2009330067B2 (en) |
BR (1) | BRPI0922542B1 (en) |
CA (1) | CA2747786C (en) |
DE (1) | DE202009019149U1 (en) |
WO (1) | WO2010075401A2 (en) |
Families Citing this family (68)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8930331B2 (en) | 2007-02-21 | 2015-01-06 | Palantir Technologies | Providing unique views of data based on changes or rules |
US8429194B2 (en) | 2008-09-15 | 2013-04-23 | Palantir Technologies, Inc. | Document-based workflows |
WO2010075401A2 (en) | 2008-12-22 | 2010-07-01 | Google Inc. | Asynchronous distributed garbage collection for replicated storage clusters |
US8799240B2 (en) | 2011-06-23 | 2014-08-05 | Palantir Technologies, Inc. | System and method for investigating large amounts of data |
US9092482B2 (en) | 2013-03-14 | 2015-07-28 | Palantir Technologies, Inc. | Fair scheduling for mixed-query loads |
US9547693B1 (en) | 2011-06-23 | 2017-01-17 | Palantir Technologies Inc. | Periodic database search manager for multiple data sources |
US9280532B2 (en) | 2011-08-02 | 2016-03-08 | Palantir Technologies, Inc. | System and method for accessing rich objects via spreadsheets |
US8504542B2 (en) | 2011-09-02 | 2013-08-06 | Palantir Technologies, Inc. | Multi-row transactions |
US8719417B1 (en) * | 2011-10-14 | 2014-05-06 | Google Inc. | Resource allocation in distributed systems |
US9378526B2 (en) * | 2012-03-02 | 2016-06-28 | Palantir Technologies, Inc. | System and method for accessing data objects via remote references |
CN102722445B (en) * | 2012-06-06 | 2015-03-25 | 北京航空航天大学 | Staged track record method of object state in memory garbage collector |
US8898410B1 (en) | 2013-02-20 | 2014-11-25 | Google Inc. | Efficient garbage collection in a data storage device |
US8855999B1 (en) | 2013-03-15 | 2014-10-07 | Palantir Technologies Inc. | Method and system for generating a parser and parsing complex data |
US10275778B1 (en) | 2013-03-15 | 2019-04-30 | Palantir Technologies Inc. | Systems and user interfaces for dynamic and interactive investigation based on automatic malfeasance clustering of related data in various data structures |
US9230280B1 (en) | 2013-03-15 | 2016-01-05 | Palantir Technologies Inc. | Clustering data based on indications of financial malfeasance |
US8903717B2 (en) | 2013-03-15 | 2014-12-02 | Palantir Technologies Inc. | Method and system for generating a parser and parsing complex data |
US8930897B2 (en) | 2013-03-15 | 2015-01-06 | Palantir Technologies Inc. | Data integration tool |
US9600558B2 (en) | 2013-06-25 | 2017-03-21 | Google Inc. | Grouping of objects in a distributed storage system based on journals and placement policies |
US9158472B2 (en) | 2013-06-25 | 2015-10-13 | Google Inc. | Hierarchical chunking of objects in a distributed storage system |
US9116975B2 (en) | 2013-10-18 | 2015-08-25 | Palantir Technologies Inc. | Systems and user interfaces for dynamic and interactive simultaneous querying of multiple data stores |
WO2015065369A1 (en) * | 2013-10-30 | 2015-05-07 | Hewlett-Packard Development Company, L.P. | Asynchronous garbage collection in a distributed database system |
US9396202B1 (en) | 2013-12-27 | 2016-07-19 | Google Inc. | Weakly synchronized garbage collection and compaction for aggregated, replicated object stores |
US9043696B1 (en) | 2014-01-03 | 2015-05-26 | Palantir Technologies Inc. | Systems and methods for visual definition of data associations |
US9535974B1 (en) | 2014-06-30 | 2017-01-03 | Palantir Technologies Inc. | Systems and methods for identifying key phrase clusters within documents |
US9619557B2 (en) | 2014-06-30 | 2017-04-11 | Palantir Technologies, Inc. | Systems and methods for key phrase characterization of documents |
US9419992B2 (en) | 2014-08-13 | 2016-08-16 | Palantir Technologies Inc. | Unwanted tunneling alert system |
US9454281B2 (en) | 2014-09-03 | 2016-09-27 | Palantir Technologies Inc. | System for providing dynamic linked panels in user interface |
US10031934B2 (en) | 2014-09-30 | 2018-07-24 | International Business Machines Corporation | Deleting tuples using separate transaction identifier storage |
US10255304B2 (en) | 2014-09-30 | 2019-04-09 | International Business Machines Corporation | Removal of garbage data from a database |
US9348920B1 (en) | 2014-12-22 | 2016-05-24 | Palantir Technologies Inc. | Concept indexing among database of documents using machine learning techniques |
US10362133B1 (en) | 2014-12-22 | 2019-07-23 | Palantir Technologies Inc. | Communication data processing architecture |
US10552994B2 (en) | 2014-12-22 | 2020-02-04 | Palantir Technologies Inc. | Systems and interactive user interfaces for dynamic retrieval, analysis, and triage of data items |
US10452651B1 (en) | 2014-12-23 | 2019-10-22 | Palantir Technologies Inc. | Searching charts |
US9817563B1 (en) | 2014-12-29 | 2017-11-14 | Palantir Technologies Inc. | System and method of generating data points from one or more data stores of data items for chart creation and manipulation |
US9672257B2 (en) | 2015-06-05 | 2017-06-06 | Palantir Technologies Inc. | Time-series data storage and processing database system |
US9384203B1 (en) | 2015-06-09 | 2016-07-05 | Palantir Technologies Inc. | Systems and methods for indexing and aggregating data records |
US9407652B1 (en) | 2015-06-26 | 2016-08-02 | Palantir Technologies Inc. | Network anomaly detection |
US10650024B2 (en) | 2015-07-30 | 2020-05-12 | Google Llc | System and method of replicating data in a distributed system |
US9537880B1 (en) | 2015-08-19 | 2017-01-03 | Palantir Technologies Inc. | Anomalous network monitoring, user behavior detection and database system |
US10402385B1 (en) | 2015-08-27 | 2019-09-03 | Palantir Technologies Inc. | Database live reindex |
US9454564B1 (en) | 2015-09-09 | 2016-09-27 | Palantir Technologies Inc. | Data integrity checks |
JP6457364B2 (en) | 2015-09-11 | 2019-01-23 | 東芝メモリ株式会社 | Memory system |
US10044745B1 (en) | 2015-10-12 | 2018-08-07 | Palantir Technologies, Inc. | Systems for computer network security risk assessment including user compromise analysis associated with a network of devices |
US9542446B1 (en) | 2015-12-17 | 2017-01-10 | Palantir Technologies, Inc. | Automatic generation of composite datasets based on hierarchical fields |
US9753935B1 (en) | 2016-08-02 | 2017-09-05 | Palantir Technologies Inc. | Time-series data storage and processing database system |
US10133588B1 (en) | 2016-10-20 | 2018-11-20 | Palantir Technologies Inc. | Transforming instructions for collaborative updates |
US10318630B1 (en) | 2016-11-21 | 2019-06-11 | Palantir Technologies Inc. | Analysis of large bodies of textual data |
US10884875B2 (en) | 2016-12-15 | 2021-01-05 | Palantir Technologies Inc. | Incremental backup of computer data files |
US10223099B2 (en) | 2016-12-21 | 2019-03-05 | Palantir Technologies Inc. | Systems and methods for peer-to-peer build sharing |
US10289529B2 (en) | 2017-01-26 | 2019-05-14 | International Business Machines Corporation | Testing a guarded storage facility |
US10459631B2 (en) | 2017-03-28 | 2019-10-29 | Nicira, Inc. | Managing deletion of logical objects of a managed system |
US10896097B1 (en) | 2017-05-25 | 2021-01-19 | Palantir Technologies Inc. | Approaches for backup and restoration of integrated databases |
GB201708818D0 (en) | 2017-06-02 | 2017-07-19 | Palantir Technologies Inc | Systems and methods for retrieving and processing data |
US10248562B2 (en) | 2017-06-30 | 2019-04-02 | Microsoft Technology Licensing, Llc | Cost-based garbage collection scheduling in a distributed storage environment |
US10241716B2 (en) | 2017-06-30 | 2019-03-26 | Microsoft Technology Licensing, Llc | Global occupancy aggregator for global garbage collection scheduling |
US11334552B2 (en) | 2017-07-31 | 2022-05-17 | Palantir Technologies Inc. | Lightweight redundancy tool for performing transactions |
US10417224B2 (en) | 2017-08-14 | 2019-09-17 | Palantir Technologies Inc. | Time series database processing system |
US10216695B1 (en) | 2017-09-21 | 2019-02-26 | Palantir Technologies Inc. | Database system for time series data storage, processing, and analysis |
US10614069B2 (en) | 2017-12-01 | 2020-04-07 | Palantir Technologies Inc. | Workflow driven database partitioning |
US11281726B2 (en) | 2017-12-01 | 2022-03-22 | Palantir Technologies Inc. | System and methods for faster processor comparisons of visual graph features |
US11016986B2 (en) | 2017-12-04 | 2021-05-25 | Palantir Technologies Inc. | Query-based time-series data display and processing system |
CN108415986B (en) * | 2018-02-11 | 2020-10-30 | 杭州朗和科技有限公司 | Data processing method, device, system, medium and computing equipment |
US20190303035A1 (en) * | 2018-03-27 | 2019-10-03 | EMC IP Holding Company LLC | Copying garbage collector for geographically distributed data storage environment |
GB201807534D0 (en) | 2018-05-09 | 2018-06-20 | Palantir Technologies Inc | Systems and methods for indexing and searching |
US11048430B2 (en) | 2019-04-12 | 2021-06-29 | Netapp, Inc. | Object store mirroring where during resync of two storage bucket, objects are transmitted to each of the two storage bucket |
US11481319B2 (en) * | 2020-05-22 | 2022-10-25 | Vmware, Inc. | Using data mirroring across multiple regions to reduce the likelihood of losing objects maintained in cloud object storage |
US11442652B1 (en) | 2020-07-23 | 2022-09-13 | Pure Storage, Inc. | Replication handling during storage system transportation |
US11349917B2 (en) | 2020-07-23 | 2022-05-31 | Pure Storage, Inc. | Replication handling among distinct networks |
Family Cites Families (26)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4665520A (en) * | 1985-02-01 | 1987-05-12 | International Business Machines Corporation | Optimistic recovery in a distributed processing system |
US5485613A (en) * | 1991-08-27 | 1996-01-16 | At&T Corp. | Method for automatic memory reclamation for object-oriented systems with real-time constraints |
US5446901A (en) * | 1993-06-30 | 1995-08-29 | Digital Equipment Corporation | Fault tolerant distributed garbage collection system and method for collecting network objects |
US5852666A (en) * | 1996-07-01 | 1998-12-22 | Sun Microsystems, Inc. | Capability security for distributed object systems |
JP3385957B2 (en) * | 1998-03-04 | 2003-03-10 | 日本電気株式会社 | Distributed system, memory management device and method, and recording medium |
US6615383B1 (en) * | 1998-05-29 | 2003-09-02 | Sun Microsystems, Inc. | System and method for message transmission between network nodes connected by parallel links |
US6594698B1 (en) * | 1998-09-25 | 2003-07-15 | Ncr Corporation | Protocol for dynamic binding of shared resources |
US6865657B1 (en) * | 2000-06-02 | 2005-03-08 | Sun Microsystems, Inc. | Garbage collector for a virtual heap |
US6513059B1 (en) * | 2000-08-24 | 2003-01-28 | Cambira Corporation | Adaptive collaborative intelligent network system |
JP4096147B2 (en) * | 2000-10-25 | 2008-06-04 | 株式会社日立製作所 | Replication method for duplicated and replicated data in distributed computer systems |
US6839752B1 (en) * | 2000-10-27 | 2005-01-04 | International Business Machines Corporation | Group data sharing during membership change in clustered computer system |
US20020161907A1 (en) * | 2001-04-25 | 2002-10-31 | Avery Moon | Adaptive multi-protocol communications system |
US7573500B2 (en) * | 2003-03-24 | 2009-08-11 | Sensormatic Electronics Corporation | System and method for communicating data in a video system |
US8364948B2 (en) * | 2004-07-02 | 2013-01-29 | Hewlett-Packard Development Company, L.P. | System and method for supporting secured communication by an aliased cluster |
JP2006185041A (en) * | 2004-12-27 | 2006-07-13 | Matsushita Electric Ind Co Ltd | Content distributed arrangement system, terminal, and operation method of content distributed arrangement system |
US7581232B2 (en) * | 2005-05-16 | 2009-08-25 | Microsoft Corporation | Coordinating reference counting between entities executing within separate address spaces |
CN100512293C (en) * | 2005-09-07 | 2009-07-08 | 华为技术有限公司 | Conversation initialization protocol message body content processing method and network |
US7788223B2 (en) * | 2005-12-05 | 2010-08-31 | Microsoft Corporation | Resource freshness and replication |
JP4920979B2 (en) * | 2006-01-25 | 2012-04-18 | 株式会社日立製作所 | Storage apparatus and control method thereof |
US7921077B2 (en) * | 2006-06-29 | 2011-04-05 | Netapp, Inc. | System and method for managing data deduplication of storage systems utilizing persistent consistency point images |
JP4945232B2 (en) * | 2006-12-21 | 2012-06-06 | 株式会社日立製作所 | Access control method, computer system, and object replication program |
US7660831B2 (en) * | 2007-01-07 | 2010-02-09 | Apple Inc. | Synchronization methods and systems |
US8719375B2 (en) * | 2007-03-22 | 2014-05-06 | Microsoft Corporation | Remote data access techniques for portable devices |
US8768895B2 (en) * | 2007-04-11 | 2014-07-01 | Emc Corporation | Subsegmenting for efficient storage, resemblance determination, and transmission |
US8315984B2 (en) * | 2007-05-22 | 2012-11-20 | Netapp, Inc. | System and method for on-the-fly elimination of redundant data |
WO2010075401A2 (en) | 2008-12-22 | 2010-07-01 | Google Inc. | Asynchronous distributed garbage collection for replicated storage clusters |
-
2009
- 2009-12-22 WO PCT/US2009/069228 patent/WO2010075401A2/en active Application Filing
- 2009-12-22 CN CN200980156985.4A patent/CN102317939B/en active Active
- 2009-12-22 CA CA2747786A patent/CA2747786C/en active Active
- 2009-12-22 AU AU2009330067A patent/AU2009330067B2/en active Active
- 2009-12-22 US US12/644,689 patent/US8346820B2/en active Active
- 2009-12-22 JP JP2011542575A patent/JP5479490B2/en active Active
- 2009-12-22 EP EP09833898.1A patent/EP2380101B1/en active Active
- 2009-12-22 DE DE202009019149.4U patent/DE202009019149U1/en not_active Expired - Lifetime
- 2009-12-22 BR BRPI0922542-0A patent/BRPI0922542B1/en active IP Right Grant
-
2012
- 2012-12-31 US US13/732,041 patent/US9081841B2/en active Active
Also Published As
Publication number | Publication date |
---|---|
US20100161688A1 (en) | 2010-06-24 |
JP2012513639A (en) | 2012-06-14 |
AU2009330067A1 (en) | 2011-07-14 |
CA2747786C (en) | 2015-06-09 |
BRPI0922542B1 (en) | 2020-10-13 |
US20130124470A1 (en) | 2013-05-16 |
US8346820B2 (en) | 2013-01-01 |
CA2747786A1 (en) | 2010-07-01 |
AU2009330067B2 (en) | 2013-05-02 |
WO2010075401A3 (en) | 2010-11-11 |
DE202009019149U1 (en) | 2017-01-30 |
CN102317939A (en) | 2012-01-11 |
WO2010075401A2 (en) | 2010-07-01 |
CN102317939B (en) | 2014-05-21 |
EP2380101A2 (en) | 2011-10-26 |
EP2380101B1 (en) | 2019-10-30 |
US9081841B2 (en) | 2015-07-14 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
JP5479490B2 (en) | Asynchronous distributed garbage collection for replicated storage clusters | |
JP5433074B2 (en) | Asynchronous distributed object upload for replicated content that can specify a storage cluster | |
JP5902222B2 (en) | Computer-implemented method, distributed storage system, and computer-readable recording medium | |
JP5556816B2 (en) | Distributed storage system, distributed storage method, distributed storage program and storage node | |
JP5081631B2 (en) | Method and apparatus for managing data deletion | |
JP5339432B2 (en) | Storage system | |
JP5516575B2 (en) | Data insertion system | |
US20080028169A1 (en) | Extending non-volatile storage at a computer system | |
JP2010102738A (en) | Apparatus and method for hardware-based file system | |
Al Hubail | Data replication and fault tolerance in AsterixDB | |
KR20090124829A (en) | Distributed file system and method for replica-based fault treatment | |
Pandey et al. | A review on google file system | |
JP2008097087A (en) | Method for copying hierarchical structure object |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
A977 | Report on retrieval |
Free format text: JAPANESE INTERMEDIATE CODE: A971007Effective date: 20130308 |
|
A131 | Notification of reasons for refusal |
Free format text: JAPANESE INTERMEDIATE CODE: A131Effective date: 20130409 |
|
A601 | Written request for extension of time |
Free format text: JAPANESE INTERMEDIATE CODE: A601Effective date: 20130709 |
|
A602 | Written permission of extension of time |
Free format text: JAPANESE INTERMEDIATE CODE: A602Effective date: 20130717 |
|
A521 | Request for written amendment filed |
Free format text: JAPANESE INTERMEDIATE CODE: A523Effective date: 20130809 |
|
A131 | Notification of reasons for refusal |
Free format text: JAPANESE INTERMEDIATE CODE: A131Effective date: 20130903 |
|
A521 | Request for written amendment filed |
Free format text: JAPANESE INTERMEDIATE CODE: A523Effective date: 20131127 |
|
TRDD | Decision of grant or rejection written | ||
A01 | Written decision to grant a patent or to grant a registration (utility model) |
Free format text: JAPANESE INTERMEDIATE CODE: A01Effective date: 20140114 |
|
A61 | First payment of annual fees (during grant procedure) |
Free format text: JAPANESE INTERMEDIATE CODE: A61Effective date: 20140212 |
|
R150 | Certificate of patent or registration of utility model |
Ref document number: 5479490Country of ref document: JPFree format text: JAPANESE INTERMEDIATE CODE: R150 |
|
R250 | Receipt of annual fees |
Free format text: JAPANESE INTERMEDIATE CODE: R250 |
|
S533 | Written request for registration of change of name |
Free format text: JAPANESE INTERMEDIATE CODE: R313533 |
|
R250 | Receipt of annual fees |
Free format text: JAPANESE INTERMEDIATE CODE: R250 |
|
R350 | Written notification of registration of transfer |
Free format text: JAPANESE INTERMEDIATE CODE: R350 |
|
R250 | Receipt of annual fees |
Free format text: JAPANESE INTERMEDIATE CODE: R250 |
|
R250 | Receipt of annual fees |
Free format text: JAPANESE INTERMEDIATE CODE: R250 |
|
R250 | Receipt of annual fees |
Free format text: JAPANESE INTERMEDIATE CODE: R250 |
|
R250 | Receipt of annual fees |
Free format text: JAPANESE INTERMEDIATE CODE: R250 |
|
R250 | Receipt of annual fees |
Free format text: JAPANESE INTERMEDIATE CODE: R250 |
|
R250 | Receipt of annual fees |
Free format text: JAPANESE INTERMEDIATE CODE: R250 |