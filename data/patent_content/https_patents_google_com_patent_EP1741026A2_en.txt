EP1741026A2 - Methods and systems for interfacing applications with a search engine - Google Patents
Methods and systems for interfacing applications with a search engineInfo
- Publication number
- EP1741026A2 EP1741026A2 EP05731490A EP05731490A EP1741026A2 EP 1741026 A2 EP1741026 A2 EP 1741026A2 EP 05731490 A EP05731490 A EP 05731490A EP 05731490 A EP05731490 A EP 05731490A EP 1741026 A2 EP1741026 A2 EP 1741026A2
- Authority
- EP
- European Patent Office
- Prior art keywords
- event
- application
- schema
- event schema
- determining
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Withdrawn
Links
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/25—Integrating or interfacing systems involving database management systems
- G06F16/252—Integrating or interfacing systems involving database management systems between a Database Management System and a front-end application
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/958—Organisation or management of web site content, e.g. publishing, maintaining pages or automatic linking
- G06F16/972—Access to data in other repository systems, e.g. legacy data or dynamic Web page generation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/21—Design, administration or maintenance of databases
- G06F16/211—Schema design and management
Definitions
- the invention generally relates to search engines. More particularly, the invention relates to methods and systems for interfacing applications with a search engine.
- Conventional client-device search applications may significantly degrade the performance of the client device.
- certain conventional client-device search applications typically use batch processing to index all articles, which can result in noticeably slower performance of the client device during the batch processing.
- batch processing occurs only periodically. Therefore, when a user performs a search, the most recent articles are sometimes not included in the results.
- the index of articles associated with the client device can become outdated.
- Conventional client-device search applications can also need to rebuild the index at each batch processing or build new partial indexes and perform a merge operation that can use a lot of client-device resources.
- Conventional client-device search applications also sometimes use a great deal of system resources when operational, resulting in slower performance of the client device.
- conventional client-device search applications can require an explicit search query from a user to generate results, and may be limited to examining file names or the contents of a particular application's files.
- Embodiments of the present invention provide systems and methods for an application interface for unified searching.
- One embodiment comprises systems and methods for determining an event schema for an application, wherein the application has associated articles, determining event data for an event, based at least in part on the event schema, wherein the event relates to user interactions with an article associated with the application, transferring the event data to a search application and storing the event data in a searchable database, wherein the events and articles associated with an application are searchable by the search application.
- Figure 1 is a block diagram illustrating an exemplary operating environment, in accordance with one embodiment of the invention.
- Figure 2 is a block diagram illustrating components of an interface between an exemplary capture component and a search engine, in accordance with an embodiment of the invention.
- Figure 3 is a flow diagram illustrating an exemplary method in accordance with an embodiment of the invention.
- Figure 4 is another flow diagram illustrating an exemplary method in accordance with an embodiment of the invention. DETAILED DESCRIPTION OF SPECIFIC EMBODIMENTS
- Figure 1 is a block diagram illustrating an exemplary environment for implementation of an embodiment of the present invention. While the environment shown in Figure 1 reflects a client-side search engine architecture embodiment, other embodiments are possible.
- the system 100 shown in Figure 1 includes multiple client devices 102a-n that can communicate with a server device 150 over a network 106.
- the network 106 shown in Figure 1 comprises the Internet. In other embodiments, other networks, such as an intranet, may be used instead.
- methods according to the present invention may operate within a single client device that does not communicate with a server device or a network.
- the client devices 102a-n shown in Figure 1 each include a computer- readable medium 108.
- the embodiment shown in Figure 1 includes a random access memory (RAM) 108 coupled to a processor 110.
- the processor 110 executes computer- executable program instructions stored in memory 108.
- Such processors may include a microprocessor, an ASIC, state machines, or other processor, and can be any of a number of suitable computer processors, such as processors from Intel Corporation of Santa Clara, California and Motorola Corporation of Schaumburg, Illinois.
- processors include, or may be in communication with, media, for example computer-readable media, which stores instructions that, when executed by the processor, cause the processor to perform the steps described herein.
- Embodiments of computer-readable media include, but are not limited to, an electronic, optical, magnetic, or other storage or transmission device capable of providing a processor, such as the processor 110 of client 102a, with computer-readable instructions.
- suitable media include, but are not limited to, a floppy disk, CD-ROM, DVD, magnetic disk, memory chip, ROM, RAM, an ASIC, a configured processor, all optical media, all magnetic tape or other magnetic media, or any other medium from which a computer processor can read instructions.
- various other forms of computer-readable media may transmit or carry instructions to a computer, including a router, private or public network, or other transmission device or channel, both wired and wireless.
- the instructions may comprise code from any suitable computer-programming language, including, for example, C, C++, C#, Visual Basic, Java, Python, Perl, and JavaScript.
- Client devices 102a-n can be coupled to a network 106, or alternatively, can be stand alone machines. Client devices 102a-n may also include a number of external or internal devices such as a mouse, a CD-ROM, DVD, a keyboard, a display device, or other input or output devices. Examples of client devices 102a-n are personal computers, digital assistants, personal digital assistants, cellular phones, mobile phones, smart phones, pagers, digital tablets, laptop computers, Internet appliances, and other processor-based devices. In general, the client devices 102a-n may be any type of processor-based platform that operates on any suitable operating system, such as Microsoft® Windows® or Linux, capable of supporting one or more client application programs.
- any suitable operating system such as Microsoft® Windows® or Linux
- the client device 102a can comprise a personal computer executing client application programs, also known as client applications 120.
- the client applications 120 can be contained in memory 108 and can include, for example, a word processing application, a spreadsheet application, an email application, an instant messenger application, a presentation application, an Internet browser application, a calendar/organizer application, a video playing application, an audio playing application, an image display application, a file management program, an operating system shell, and other applications capable of being executed by a client device.
- Client applications may also include client-side applications that interact with or accesses other applications (such as, for example, a web-browser executing on the client device 102a that interacts with a remote e-mail server to access e-mail).
- the user 112a can interact with the various client applications 120 and articles associated with the client applications 120 via various input and output devices of the client device 102a.
- Articles include, for example, word processor documents, spreadsheet documents, presentation documents, emails, instant messenger messages, database entries, calendar entries, appointment entries, task manager entries, source code files, and other client application program content, files, messages, items, web pages of various formats, such as HTML, XML, XHTML, Portable Document Format (PDF) files, and media files, such as image files, audio files, and video files, or any other documents or items or groups of documents or items or information of any suitable type whatsoever.
- PDF Portable Document Format
- event data that may be observed, recorded, analyzed or otherwise used.
- An event can be any occurrence possible associated with an article, client application 120, or client device 102a, such as inputting text in an article, displaying an article on a display device, sending an article, receiving an article, manipulating an input device, opening an article, saving an article, printing an article, closing an article, opening a client application program, closing a client application program, idle time, processor load, disk access, memory usage, bringing a client application program to the foreground, changing visual display details of the application (such as resizing or minimizing) and any other suitable occurrence associated with an article, a client application program, or the client device whatsoever.
- event data can be generated when the client device 102a interacts with an article independent of the user 112a, such as when receiving an email or performing a scheduled task.
- the memory 108 of the client device 102a shown also contains a capture processor 124, a queue 126, a web server 127, and a search engine 122. According to some embodiments, the queue 126 or the web server 127 may not be present.
- the client device 102a shown also contains or is in communication with a data store 140.
- the capture processor 124 can capture events and pass them to the queue 126 or to a web server 127, for example through a web services API.
- the queue 126 can pass the captured events to the search engine 122 or the search engine 122 can retrieve new events from the queue 126.
- the queue 126 notifies the search engine 122 when a new event arrives in the queue 126 and the search engine 122 retrieves the event (or events) from the queue 126 when the search engine 122 is ready to process the event (or events).
- the search engine receives an event it can be processed and can be stored in the data store 140.
- the search engine 122 can receive an explicit query from the user 112a or generate an implicit query and it can retrieve information from the data store 140 in response to the query.
- the queue is located in the search engine 122.
- the client device 102a does not have a queue and the events are passed from the capture processor 124 directly to the search engine 122.
- the event data is transferred using an information exchange protocol.
- the information exchange protocol can comprise, for example, any suitable rule or convention facilitating data exchange, and can include, for example, any one of the following communication mechanisms: Extensible Markup Language - Remote Procedure Calling protocol (XML/RPC), Hypertext Transfer Protocol (HTTP), Simple Object Access Protocol (SOAP), shared memory, sockets, local or remote procedure calling, or any other suitable information exchange mechanism.
- XML/RPC Extensible Markup Language - Remote Procedure Calling protocol
- HTTP Hypertext Transfer Protocol
- SOAP Simple Object Access Protocol
- shared memory sockets, local or remote procedure calling, or any other suitable information exchange mechanism.
- the capture processor 124 can capture an event by identifying and compiling event data associated with an event. Examples of events include sending or receiving an email message, a user viewing a web page, saving a word processing document, printing a spreadsheet document, inputting text to compose or edit an email, opening a presentation application, closing an instant messenger application, entering a keystroke, moving the mouse, and hovering the mouse over a hyperlink.
- An example of event data captured by the capture processor 124 for an event involving the receipt of an email message by the user 112a can comprise the sender of the message, the recipients of the message, the time and date the message was received, and the content of the message.
- Event data for an event can also include location information associated with the location of the client device when the event occurred.
- Location information can include one or more of a local time, location coordinates, a geographical location, and or a physical location.
- Location coordinates can include latitude and longitude coordinates and/or grid coordinates of the client device.
- the geographical location can include a city, state and/or country.
- the physical location can include the user's home, the user's office, and a particular location, such as, for example an airport or a restaurant.
- the capture processor 124 comprises multiple capture components.
- the capture processor 124 shown in Figure 1 comprises a separate capture component for each client application in order to capture events associated with each application.
- the capture processor 124 can also comprises a separate capture component that monitors overall network activity in order to capture event data associated with network activity, such as the receipt or sending of an instant messenger message.
- the capture processor 124 shown in Figure 1 also can comprise a separate client device capture component that monitors overall client device performance data, such as processor load, idle time, disk access, the client applications in use, and the amount of memory available.
- the capture processor 124 shown in Figure 1 also comprises a separate capture component to monitor and capture keystrokes input by the user and a separate capture component to monitor and capture items, such as text, displayed on a display device associated with the client device 102a.
- An individual capture component can monitor multiple client applications and multiple capture components can monitor different aspects of a single client application.
- the capture processor 124 can monitor activity on the client device and can capture events by a generalized event definition and registration mechanism, such as an event schema.
- Each capture component can define its own event schema or can use a predefined one.
- Event schemas can differ depending on the client application or activity the capture component is monitoring.
- the event schema can describe the format for an event, for example, by providing fields for event data associated with the event (such as the time of the event) and fields related to any associated article (such as the title) as well as the content of any associated article (such as the document body).
- An event schema can describe the format for any suitable event data that relates to an event.
- an event schema for an email message event received by the user 112a can include the sender, the recipient or list of recipients, the time sent, the date sent, and the content of the message.
- An event schema for a web page currently being viewed by a user can include the Uniform Resource Locator (URL) of the web page, the time being viewed, and the content of the web page.
- An event schema for a word processing document being saved by a user can include the title of the document, the time saved, the format of the document, the text of the document, and the location of the document. More generally, an event schema can describe the state of the system around the time of the event. For example, an event schema can contain a URL for a web page event associated with a previous web page that the user navigated from. In addition, event schema can describe fields with more complicated structure like lists. For example, an event schema can contain fields that list multiple recipients. An event schema can also contain optional fields so that an application can include additional event data if desired. An event schema can also contain location information as described above.
- the capture processor 124 can capture events occurring presently (or "realtime events") and can capture events that have occurred in the past (or “historical events”).
- Real-time events can be "indexable” or “non-indexable”.
- the search engine 122 indexes indexable real-time events, but does not index non- indexable real-time events.
- the search engine 122 may determine whether to index an event based on the importance of the event. Indexable real-time events can be more important events associated with an article, such as viewing a web page, loading or saving a file, and receiving or sending an instant message or email.
- Non-indexable events can be deemed not important enough by the search engine 122 to index and store the event, such as moving the mouse or selecting a portion of text in an article.
- Non- indexable events can be used by the search engine 122 to update the current user state. While all real-time events can relate to what the user is currently doing (or the current user state), indexable real-time events can be indexed and stored in the data store 140. Alternatively, the search engine 122 can index all real-time events.
- Real-time events can include, for example, sending or receiving an article, such as an instant messenger message, examining a portion of an article, such as selecting a portion of text or moving a mouse over a portion of a web page, changing an article, such as typing a word in an email or pasting a sentence in a word processing document, closing an article, such as closing an instant messenger window or changing an email message being viewed, loading, saving, opening, or viewing an article, such as a word processing document, web page, or email, listening to or saving an MP3 file or other audio/video file, or updating the metadata of an article, such as book marking a web page, printing a presentation document, deleting a word processing document, or moving a spreadsheet document.
- an article such as an instant messenger message
- examining a portion of an article such as selecting a portion of text or moving a mouse over a portion of a web page
- changing an article such as typing a word in an email or pasting a sentence in a word processing document
- closing an article such as
- Historical events are similar to indexable real-time events except that the event occurred before the installation of the search engine 122 or was otherwise not captured, because, for example, the search engine 122 was not operational for a period of time while the client device 102a was operational or because no capture component existed for a specific type of historical event at the time the event took place.
- Examples of historical events include the user's saved word processing documents, media files, presentation documents, calendar entries, and spreadsheet documents, the emails in a user's inbox, and the web pages bookmarked by the user.
- the capture processor 124 can capture historical events by periodically crawling the memory 108 and any associated data storage device for events not previously captured by the capture processor 124.
- the capture processor 124 can also capture historical events by requesting certain client applications, such as a web browser or an email application, to retrieve articles and other associated information. For example, the capture processor 124 can request that the web browser application obtain all viewed web pages by the user or request that the email application obtain all email messages associated with the user. These articles may not currently exist in memory 108 or on a storage device of the client device 102a. For example, the email application may have to retrieve emails from a server device. In one embodiment, the search engine 122 indexes historical events.
- events captured by the capture processor 124 are sent to the queue 126 in the format described by an event schema.
- the capture processor 124 can also send performance data to the queue 126. Examples of performance data include current processor load, average processor load over a predetermined period of time, idle time, disk access, the client applications in use, and the amount of memory available. Performance data can also be provided by specific performance monitoring components, some of which may be part of the search engine 122, for example. The performance data in the queue 126 can be retrieved by the search engine 122 and the capture components of the capture processor 124.
- capture components can retrieve the performance data to alter how many events are sent to the queue 126 or how detailed the events are that are sent (fewer or smaller events when the system is busy) or how frequently events are sent (events are sent less often when the system is busy or there are too many events waiting to be processed).
- the search engine 122 can use performance data to determine when it indexes various events and when and how often it issues implicit queries.
- the queue 126 holds events until the search engine 122 is ready to process an event or events.
- the queue 126 uses the performance data to help determine how quickly to provide the events to the search engine 122.
- the queue 126 can comprise one or more separate queues including a user state queue and an index queue.
- the index queue can queue indexable events, for example.
- the queue 126 can have additional queues or comprise a single queue.
- the queue 126 can be implemented as a circular priority queue using memory mapped files.
- the queue can be a multiple priority queue where higher priority events are served before lower priority events, and other components may be able to specify the type of events they are interested in.
- real-time events can be given higher priority than historical events, and indexable events can be given higher priority than non-indexable real-time events.
- Other implementations of the queue 126 are possible.
- the client device 102a does not have a queue 126.
- events are passed directly from the capture processor to the search engine 122.
- events captured by the capture processor 124 are sent to the web server 127 using web services APIs. The web server 127 can then pass the events to the search engine 122.
- events can be transferred between the capture components and the search engine using suitable information exchange mechanisms such as: Extensible Markup Language - Remote Procedure Calling protocol (XML RPC), Hypertext Transfer Protocol (HTTP), Simple Object Access Protocol (SOAP), shared memory, sockets, local or remote procedure calling, or any other suitable information exchange mechanism.
- suitable information exchange mechanisms such as: Extensible Markup Language - Remote Procedure Calling protocol (XML RPC), Hypertext Transfer Protocol (HTTP), Simple Object Access Protocol (SOAP), shared memory, sockets, local or remote procedure calling, or any other suitable information exchange mechanism.
- the search engine 122 can contain an indexer 130, a query system 132, and a formatter 134.
- the query system 132 can retrieve real-time events and performance data from the queue 126.
- the query system 132 can use performance data and real-time events to update the current user state and generate an implicit query.
- An implicit query can be an automatically generated query based on the current user state.
- the query system 132 can also receive and process explicit queries from the user 112a.
- Performance data can also be retrieved by the search engine 122 from the queue 126 for use in determining the amount of activity possible by the search engine 122.
- indexable real-time events and historical events are retrieved from the queue 126 by the indexer 130.
- the queue 126 may send the indexable events to the indexer 130.
- the indexer 130 can index the indexable events and can send them to the data store 140 where they are stored.
- the data store 140 can be any type of computer-readable media and can be integrated with the client device 102a, such as a hard drive, or external to the client device 102a, such as an external hard drive or on another data storage device accessed through the network 106.
- the data store can be one or more logical or physical storage areas. In one embodiment, the data store 140 can be in memory 108.
- the data store 140 may facilitate one or a combination of methods for storing data, including without limitation, arrays, hash tables, lists, and pairs, and may include compression and encryption.
- the data store comprises an index 142, a database 144 and a repository 146.
- the indexer 130 when the indexer 130 receives an event, the indexer 130 can determine, from the event, terms (if any) associated with the event, location information associated with the event (if available), the time of the event (if available), images (if any) associated with the event, and/or other information defining the event.
- the indexer 130 can also determine if the event relates to other events and associate the event with related events. For example, for a received email event, the indexer 130 can associate the email event with other message events from the same conversation or string. The emails from the same conversation can be associated with each other in a related events object, which can be stored in the data store 140.
- the indexer 130 can send and incorporate the terms and location information, associated with the event in the index 142 of the data store 140.
- the event can be sent to the database 144 for storage and the content of the associated article and any associated images can be stored in the repository 146.
- the conversation object associated with email messages can be stored in the database 144.
- a user 112a can input an explicit query into a search engine interface displayed on the client device 102a, which is received by the search engine 122.
- the search engine 122 can also generate an implicit query based on a current user state, which can be determined by the query system 132 from real-time events.
- the query system 132 can locate relevant information in the data store 140 and provide a result set.
- the result set comprises article identifiers for articles associated with the client applications 120 or client articles.
- Client articles include articles associated with the user 112a or client device 102a, such as the user's emails, word processing documents, instant messenger messages, previously viewed web pages and any other article or portion of an article associated with the client device 102a or user 112a.
- An article identifier may be, for example, a Uniform Resource Locator (URL), a file name, a link, an icon, a path for a local file, or other suitable information that may identify an article.
- the result set also comprises article identifiers for articles located on the network 106 or network articles located by a search engine on a server device.
- Network articles include articles located on the network 106 not previously viewed or otherwise referenced by the user 112a, such as web pages not previously viewed by the user 112a.
- the formatter 134 can receive the search result set from the query system 132 of the search engine 122 and can format the results for output to a display processor 128.
- the formatter 134 can format the results in XML, HTML, or tab delineated text.
- the display processor 128 can be contained in memory 108 and can control the display of the result set on a display device associated with the client device 102a.
- the display processor 128 may comprise various components.
- the display processor 128 comprises a Hypertext Transfer Protocol (HTTP) server that receives requests for information and responds by constructing and transmitting Hypertext Markup Language (HTML) pages.
- the HTTP server comprises a scaled-down version of the Apache Web server.
- the display processor 128 can be associated with a set of APIs to allow various applications to receive the results and display them in various formats.
- the display APIs can be implemented in various ways, including as, for example, DLL exports, COM interface, VB, JAVA, or .NET libraries, or a web service.
- a server device 150 can be coupled to the network 106.
- the search engine 122 can transmit a search query comprised of an explicit or implicit query or both to the server device 150.
- the user 112a can also enter a search query in a search engine interface, which can be transmitted to the server device 150 by the client device 102a via the network 106.
- the query signal may instead be sent to a proxy server (not shown), which then transmits the query signal to server device 150.
- a proxy server not shown
- the server device 150 can include a server executing a search engine application program, such as the GoogleTM search engine. In other embodiments, the server device 150 can comprise a related information server or an advertising server. Similar to the client devices 102a-n, the server device 150 can include a processor 160 coupled to a computer-readable memory 162. Server device 150, depicted as a single computer system, may be implemented as a network of computer processors. Examples of a server device 150 are servers, mainframe computers, networked computers, a processor-based device, and similar types of systems and devices.
- the server processor 160 can be any of a number of computer processors, such as processors from Intel Corporation of Santa Clara, California and Motorola Corporation of Schaumburg, Illinois. In another embodiment, the server device 150 may exist on a client-device. In still another embodiment, there can be multiple server devices 150.
- Memory 162 contains the search engine application program, also known as a network search engine 170.
- the search engine 170 can locate relevant information from the network 106 in response to a search query from a client device 102a.
- the search engine 170 then can provide a result set to the client device 102a via the network 106.
- the result set can comprise one or more article identifiers.
- An article identifier may be, for example, a Uniform Resource Locator (URL), a file name, a link, an icon, a path for a local file, or anything else that identifies an article.
- an article identifier can comprise a URL associated with an article.
- the server device 150 has previously performed a crawl of the network 106 to locate articles, such as web pages, stored at other devices or systems coupled to the network 106, and indexed the articles in memory 162 or on another data storage device.
- articles such as web pages
- the client device 102a is a stand-alone device that is not permanently coupled to a network.
- the system 100 shown in Figure 1 is merely exemplary, and is used to explain the exemplary methods shown in Figure 2.
- the capture components discussed above in connection with Figure 1 are exemplary capture components that work with a set of predefined applications. Usually those applications use a predefined set of registered event schemas originally included with the search engine application.
- the search engine application also comprises a set of Application Programming Interfaces (API).
- APIs allow an application capture component to retrieve existing event schemas, to register new events schemas customized for a particular application, to identify events and articles associated with the application, to create events based on an event schema, to send events to the search engine and generally to send and receive any other suitable information such as performance data, application state or search engine parameters.
- An application capture component can define and register an event schema for each of the types of events and articles that it intends to send to the search engine.
- the use of the term "event schema" herein is intended to apply to a schema that is related to either an event or an article.
- the event schema can be based on one of the predefined event schemas provided by the search engine or can be unique to a particular application.
- an application capture component captures real-time events, both contextual and indexable events, and historical events in a manner similar to that discussed above in connection with Figure 1.
- application capture components communicate with the search engine using the capture component Application Programming Interface (APIs).
- Figure 2 illustrates a possible implementation of the communication between an application capture component 202 and the search engine.
- the APIs between the capture component and the search engine can be implemented in a DLL (dynamic link library) which can minimize the memory working set.
- the APIs can be exposed as DLL exports or COM (Component Object Model) interfaces using standard operating system techniques.
- the DLL 204 is mapped to an address space associated with both the search engine 210 and the application 212 to permit sharing of certain data structures.
- the application is associated with a capture component 202 and the search engine is associated with a search engine service component 208.
- the capture component communicates with the search engine service component using the event queue 206 and the APIs 204 shown in Figure 2.
- the event queue 206 is a shared memory queue that is implemented as a circular priority queue using memory mapped files. In one embodiment, when the queue is full, messages are cached on disk. In one embodiment, the event queue is implemented as two queues, one queue for contextual events and one queue for indexable events. In this embodiment, the indexable queue is a two-priority queue where higher priority events are served before lower priority events. Generally, real-time events are given higher priority than historical events. [0040] In another embodiment the programming interface between an application capture component 202 and the search engine 208 is implemented using basic operating system services such as Remote Procedure Calls (RPC), windows messages or sockets.
- RPC Remote Procedure Calls
- the communication between an application capture component 202 and the search engine is achieved through a web server.
- the APIs are implemented as a web service.
- the web service can expose several multi-language interfaces based on web information exchange protocols such as SOAP (Simple Object Access Protocol).
- SOAP Simple Object Access Protocol
- the capture component can use any suitable language to call into the web service.
- one embodiment comprises a method for determining an event schema for an application, and determining event data for an event, based at least in part on the event schema, wherein the event relates to user interactions with an article associated with the application.
- the method may further comprise transferring the event data to a search engine application and storing the event data in a searchable database, wherein the events and articles associated with the application are searchable by a search application.
- determining the event schema can comprise one of either receiving, creating or providing the event schema.
- determining the event schema comprises accessing a registered event schema.
- the registered events schema can comprise an event schema indicating information to be captured for a designated application or class of applications on a client device.
- the event schema can comprise an extension of a registered event schema.
- the registered event schema can have different versions.
- the registered event schema can be an extension of a predefined base event schema provided by a search application.
- the event relates to a current user state associated with the application or to user interaction with an article associated with the application.
- determining an event schema can comprise registering a new event schema.
- the event data can be transferred using one or a combination of the following information exchange mechanisms: Extensible Markup Language-Remote Procedure Calling protocol (XML/RPC), Hypertext Transfer Protocol (HTTP), Simple Object Access Protocol (SOAP), shared memory, sockets, local or remote procedure calling, or any other information exchange mechanism.
- XML/RPC Extensible Markup Language-Remote Procedure Calling protocol
- HTTP Hypertext Transfer Protocol
- SOAP Simple Object Access Protocol
- shared memory sockets, local or remote procedure calling, or any other information exchange mechanism.
- Figure 3 illustrates an exemplary method for an application capture component to register a new event schema.
- the new event schema is defined by the application capture component.
- the new event schema can be defined by extending an existing schema of a set of already registered event schemas.
- the set of registered event schemas can comprise, for example, predefined base event schemas included with a search application, or schemas registered by different application capture components defining types of event data associated with those applications.
- the predefined base event schemas include basic event schemas for a number of events, including, for example, e-mail events, web page events, instant messaging events, file events and context events.
- An application capture component can use any registered event schemas directly, including search application predefined schemas, or it can create and register a new event schema by extending an already registered schema with additional application-specific fields.
- An advantage of using a schema based on one of the predefined schemas is that the specialized field processing associated with the predefined schema is available.
- the event schema for an email event can include sender information, recipient information, time that the email message was received, a date that the email message was received, the subject of the email message, and the content of the email message.
- the events schema can also comprise optional fields. Optional fields can allow the selective capture of information associated with an article.
- the event schema can be a unique event schema that is defined by the capture component.
- the unique event schema can comprise, for example, an event schema created for a new application.
- an event schema is identified by a unique name and defines an event by defining one or more fields associated with data related to the event, an article associated with the event, and/or the content of the article.
- a new media application such as an mp3 player
- a capture component associated with the new application can create an event schema based specifically on events possible in the new mp3 player application, or a subset thereof.
- the mp3 player can allow a song to be downloaded, assigned a label, and copied to a CD.
- the capture component associated with the mp3 application can create an event schema including location information of the downloaded song, a name of the label assigned to the song, a time indicating when the song was copied to the CD, an artist of the song an album associated with the song, a genre for the song and other suitable information.
- Predefined, extended and unique event schemas can be used for both historical and/or real-time events.
- the capture component registers the event schema with the search engine at 304.
- Registering the event schema can comprise, for example, associating a schema ID with the new event schema and storing the event schema and event schema ID in the data store 140 or other suitable location.
- the event schema ID can comprise, for example, a unique identifier, such as a number, associated with the new event schema.
- Registering the new event schema allows the capture components and the search engine to determine types of event data associated with an event. Registering the new event schema also allows other capture components to use the new schema. Registering the event schema can also determine a particular event schema for use with an application or class of applications on a client device.
- registering a word processing event schema can allow all or some of the word processing applications on the client device 102a to use the schema to capture specific events.
- each word processing application can define and register its own event schema.
- an application capture component for an e-mail program on the client device 102a can register a new email event schema by extending a predefined email event schema and adding additional fields, for example an e-mail summary field and an e-mail importance field. Capture components for email applications that provide such summary and e-mail importance information, such as Eudora or Outlook, can use the new registered schema to send the search engine additional information about the email message.
- the capture component registers the event schema using the APIs.
- the event schema is registered using an event schema registration utility. Once the event schema is registered, then the search engine stores the event schema at 306.
- the event schema can be stored in the data store 140, for example, or any other suitable location.
- a capture component or the search engine can add fields to a registered event schema and still retain the same schema name.
- the appropriate version of an event schema is identified by the capture component when a new event is created.
- the capture component does not identify a version. Instead, the most recent version of the schema is used and if there is no data for a field that was added to the most recent version, then the field is ignored by the search engine.
- Figure 4 illustrates an exemplary method for capturing and transmitting an event to the search engine 122.
- the method 400 begins in block 402, wherein the capture component determines an event schema.
- the capture component can determine an event schema by creating a new event schema, for example, according to one embodiment of the method 300 or by accessing a pre-existing event schema indexed and stored, for example, in the data store 140.
- the capture component can determine an event schema associated with an application from which events are being generated. For example, if the user 112a is sending an email, an email event can be generated.
- the capture component can then determine an email schema associated with the application which the user 112a is using to send the email.
- the method 400 proceeds to block 404 wherein the capture component captures an event.
- the capture component captures an event by compiling event data associated with the event.
- the capture component can compile the event data based on the event schema using, for example, a "create compiled event” API.
- the "create compiled event” API can comprise, for example, an API that returns an "event handle” to the capture component.
- the “event handle” can be used by the capture component to determine event data associated with an event.
- the capture component can then invoke a "property setter” API.
- the "property setter” API can comprise, for example, an API configured to compile the event data associated with an event based on the event schema.
- the user 112a can download a song using an mp3 media application.
- the capture component can compile event data associated with downloading the song by loading an mp3 event schema and then using the "create compiled event" and "property setter” APIs to determine from the mp3 media application the name of the downloaded song, the path where the song was stored, the artist of the song, and other song information indicated in the mp3 event schema.
- a "send" API encodes the event object as a variable length byte stream before placing it in the event queue 206. Encoding the event data as a variable length byte stream can comprise configuring the event data to minimize system resource requirements for transferring and storing an event.
- the indexer 130 can retrieve the event from the event queue 126 using, for example, a "retrieve" API. The retrieve API can be configured to allow the indexer 130 to receive event data from the queue 126 based on availability of system resources.
- the event data can be sent to the indexer 130 using a web service API or XML encoding.
- Transferring the event data using a web service API or XML encoding can comprise posting the data via Hypertext Transfer Protocol (HTTP).
- HTTP Hypertext Transfer Protocol
- the event data is transferred using one or a combination of the following information exchange mechanisms: Extensible Markup Language-Remote Procedure Calling protocol (XML RPC), Hypertext Transfer Protocol (HTTP), Simple Object Access Protocol (SOAP), shared memory, sockets, local or remote procedure calling, or any other information exchange mechanism.
- XML RPC Extensible Markup Language-Remote Procedure Calling protocol
- HTTP Hypertext Transfer Protocol
- SOAP Simple Object Access Protocol
Abstract
Description
Claims
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/814,387 US20050234929A1 (en) | 2004-03-31 | 2004-03-31 | Methods and systems for interfacing applications with a search engine |
PCT/US2005/010987 WO2005098595A2 (en) | 2004-03-31 | 2005-03-30 | Methods and systems for interfacing applications with a search engine |
Publications (2)
Publication Number | Publication Date |
---|---|
EP1741026A2 true EP1741026A2 (en) | 2007-01-10 |
EP1741026A4 EP1741026A4 (en) | 2008-05-28 |
Family
ID=35097548
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP05731490A Withdrawn EP1741026A4 (en) | 2004-03-31 | 2005-03-30 | Methods and systems for interfacing applications with a search engine |
Country Status (3)
Country | Link |
---|---|
US (1) | US20050234929A1 (en) |
EP (1) | EP1741026A4 (en) |
WO (1) | WO2005098595A2 (en) |
Families Citing this family (66)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7801905B1 (en) * | 2003-11-25 | 2010-09-21 | Prabhdeep Singh | Knowledge archival and recollection systems and methods |
US8590013B2 (en) | 2002-02-25 | 2013-11-19 | C. S. Lee Crawford | Method of managing and communicating data pertaining to software applications for processor-based devices comprising wireless communication circuitry |
US8010553B2 (en) * | 2004-04-05 | 2011-08-30 | George Eagan | Knowledge archival and recollection systems and methods |
US8037041B2 (en) * | 2005-04-11 | 2011-10-11 | Alden Byird Investments, Llc | System for dynamic keyword aggregation, search query generation and submission to third-party information search utilities |
US8832100B2 (en) | 2005-09-14 | 2014-09-09 | Millennial Media, Inc. | User transaction history influenced search results |
US8290810B2 (en) | 2005-09-14 | 2012-10-16 | Jumptap, Inc. | Realtime surveying within mobile sponsored content |
US8503995B2 (en) | 2005-09-14 | 2013-08-06 | Jumptap, Inc. | Mobile dynamic advertisement creation and placement |
US10911894B2 (en) | 2005-09-14 | 2021-02-02 | Verizon Media Inc. | Use of dynamic content generation parameters based on previous performance of those parameters |
US8666376B2 (en) | 2005-09-14 | 2014-03-04 | Millennial Media | Location based mobile shopping affinity program |
US20110313853A1 (en) | 2005-09-14 | 2011-12-22 | Jorey Ramer | System for targeting advertising content to a plurality of mobile communication facilities |
US9201979B2 (en) | 2005-09-14 | 2015-12-01 | Millennial Media, Inc. | Syndication of a behavioral profile associated with an availability condition using a monetization platform |
US8660891B2 (en) | 2005-11-01 | 2014-02-25 | Millennial Media | Interactive mobile advertisement banners |
US9471925B2 (en) | 2005-09-14 | 2016-10-18 | Millennial Media Llc | Increasing mobile interactivity |
US7577665B2 (en) | 2005-09-14 | 2009-08-18 | Jumptap, Inc. | User characteristic influenced search results |
US8195133B2 (en) | 2005-09-14 | 2012-06-05 | Jumptap, Inc. | Mobile dynamic advertisement creation and placement |
US8819659B2 (en) | 2005-09-14 | 2014-08-26 | Millennial Media, Inc. | Mobile search service instant activation |
US9076175B2 (en) | 2005-09-14 | 2015-07-07 | Millennial Media, Inc. | Mobile comparison shopping |
US8229914B2 (en) | 2005-09-14 | 2012-07-24 | Jumptap, Inc. | Mobile content spidering and compatibility determination |
US7660581B2 (en) | 2005-09-14 | 2010-02-09 | Jumptap, Inc. | Managing sponsored content based on usage history |
US8433297B2 (en) | 2005-11-05 | 2013-04-30 | Jumptag, Inc. | System for targeting advertising content to a plurality of mobile communication facilities |
US7676394B2 (en) | 2005-09-14 | 2010-03-09 | Jumptap, Inc. | Dynamic bidding and expected value |
US8812526B2 (en) | 2005-09-14 | 2014-08-19 | Millennial Media, Inc. | Mobile content cross-inventory yield optimization |
US8364521B2 (en) | 2005-09-14 | 2013-01-29 | Jumptap, Inc. | Rendering targeted advertisement on mobile communication facilities |
US8209344B2 (en) | 2005-09-14 | 2012-06-26 | Jumptap, Inc. | Embedding sponsored content in mobile applications |
US8302030B2 (en) | 2005-09-14 | 2012-10-30 | Jumptap, Inc. | Management of multiple advertising inventories using a monetization platform |
US8311888B2 (en) | 2005-09-14 | 2012-11-13 | Jumptap, Inc. | Revenue models associated with syndication of a behavioral profile using a monetization platform |
US8615719B2 (en) | 2005-09-14 | 2013-12-24 | Jumptap, Inc. | Managing sponsored content for delivery to mobile communication facilities |
US8103545B2 (en) | 2005-09-14 | 2012-01-24 | Jumptap, Inc. | Managing payment for sponsored content presented to mobile communication facilities |
US7752209B2 (en) | 2005-09-14 | 2010-07-06 | Jumptap, Inc. | Presenting sponsored content on a mobile communication facility |
US10592930B2 (en) | 2005-09-14 | 2020-03-17 | Millenial Media, LLC | Syndication of a behavioral profile using a monetization platform |
US8238888B2 (en) | 2006-09-13 | 2012-08-07 | Jumptap, Inc. | Methods and systems for mobile coupon placement |
US7769764B2 (en) | 2005-09-14 | 2010-08-03 | Jumptap, Inc. | Mobile advertisement syndication |
US8805339B2 (en) | 2005-09-14 | 2014-08-12 | Millennial Media, Inc. | Categorization of a mobile user profile based on browse and viewing behavior |
US8989718B2 (en) | 2005-09-14 | 2015-03-24 | Millennial Media, Inc. | Idle screen advertising |
US9703892B2 (en) | 2005-09-14 | 2017-07-11 | Millennial Media Llc | Predictive text completion for a mobile communication facility |
US7702318B2 (en) | 2005-09-14 | 2010-04-20 | Jumptap, Inc. | Presentation of sponsored content based on mobile transaction event |
US9058406B2 (en) | 2005-09-14 | 2015-06-16 | Millennial Media, Inc. | Management of multiple advertising inventories using a monetization platform |
US8027879B2 (en) | 2005-11-05 | 2011-09-27 | Jumptap, Inc. | Exclusivity bidding for mobile sponsored content |
US7860871B2 (en) | 2005-09-14 | 2010-12-28 | Jumptap, Inc. | User history influenced search results |
US8364540B2 (en) | 2005-09-14 | 2013-01-29 | Jumptap, Inc. | Contextual targeting of content using a monetization platform |
US8156128B2 (en) | 2005-09-14 | 2012-04-10 | Jumptap, Inc. | Contextual mobile content placement on a mobile communication facility |
US8688671B2 (en) | 2005-09-14 | 2014-04-01 | Millennial Media | Managing sponsored content based on geographic region |
US10038756B2 (en) | 2005-09-14 | 2018-07-31 | Millenial Media LLC | Managing sponsored content based on device characteristics |
US8131271B2 (en) | 2005-11-05 | 2012-03-06 | Jumptap, Inc. | Categorization of a mobile user profile based on browse behavior |
US7912458B2 (en) | 2005-09-14 | 2011-03-22 | Jumptap, Inc. | Interaction analysis and prioritization of mobile content |
US8175585B2 (en) | 2005-11-05 | 2012-05-08 | Jumptap, Inc. | System for targeting advertising content to a plurality of mobile communication facilities |
US8719265B1 (en) | 2005-11-07 | 2014-05-06 | Google Inc. | Pre-fetching information in anticipation of a user request |
US8571999B2 (en) | 2005-11-14 | 2013-10-29 | C. S. Lee Crawford | Method of conducting operations for a social network application including activity list generation |
US7636766B2 (en) * | 2005-11-15 | 2009-12-22 | Yahoo! Inc. | Remote selection and installation of auxiliary content |
US7475054B2 (en) * | 2005-11-30 | 2009-01-06 | The Boeing Company | Integrating multiple information-providing systems |
US20080005068A1 (en) * | 2006-06-28 | 2008-01-03 | Microsoft Corporation | Context-based search, retrieval, and awareness |
US7853932B2 (en) | 2006-07-10 | 2010-12-14 | International Business Machines Corporation | System, method and computer program product for checking a software entity |
US20090097493A1 (en) * | 2007-10-12 | 2009-04-16 | Gururaja Patil | Queuing mixed messages for configurable searching |
US8970870B2 (en) * | 2010-06-30 | 2015-03-03 | Canon Kabushiki Kaisha | Delivery of scan services over a device service port |
EP2410441A1 (en) * | 2010-07-16 | 2012-01-25 | Research In Motion Limited | Registration of applications and unified media search |
US8694625B2 (en) * | 2010-09-10 | 2014-04-08 | International Business Machines Corporation | Selective registration for remote event notifications in processing node clusters |
US20120066694A1 (en) | 2010-09-10 | 2012-03-15 | International Business Machines Corporation | Event overflow handling by coalescing and updating previously-queued event notification |
US8984119B2 (en) | 2010-11-05 | 2015-03-17 | International Business Machines Corporation | Changing an event identifier of a transient event in an event notification system |
US8433760B2 (en) | 2010-12-03 | 2013-04-30 | International Business Machines Corporation | Inter-node communication scheme for node status sharing |
US8634328B2 (en) | 2010-12-03 | 2014-01-21 | International Business Machines Corporation | Endpoint-to-endpoint communications status monitoring |
US8667126B2 (en) | 2010-12-03 | 2014-03-04 | International Business Machines Corporation | Dynamic rate heartbeating for inter-node status updating |
US8634330B2 (en) | 2011-04-04 | 2014-01-21 | International Business Machines Corporation | Inter-cluster communications technique for event and health status communications |
US10621189B2 (en) * | 2015-06-05 | 2020-04-14 | Apple Inc. | In-application history search |
US10755032B2 (en) | 2015-06-05 | 2020-08-25 | Apple Inc. | Indexing web pages with deep links |
US10445462B2 (en) * | 2016-10-12 | 2019-10-15 | Terarecon, Inc. | System and method for medical image interpretation |
US11449495B2 (en) * | 2017-02-01 | 2022-09-20 | United Parcel Service Of America, Inc. | Indexable database profiles comprising multi-language encoding data and methods for generating the same |
Family Cites Families (98)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5305205A (en) * | 1990-10-23 | 1994-04-19 | Weber Maria L | Computer-assisted transcription apparatus |
US5321838A (en) * | 1991-02-28 | 1994-06-14 | Hensley Billy W | Event capturing for computer software evaluation |
JPH06237300A (en) * | 1992-12-23 | 1994-08-23 | American Teleph & Telegr Co <Att> | Message service inherent in position in telecommunication network |
US5623652A (en) * | 1994-07-25 | 1997-04-22 | Apple Computer, Inc. | Method and apparatus for searching for information in a network and for controlling the display of searchable information on display devices in the network |
US5592378A (en) * | 1994-08-19 | 1997-01-07 | Andersen Consulting Llp | Computerized order entry system and method |
JP2626598B2 (en) * | 1994-11-25 | 1997-07-02 | 日本電気株式会社 | Operability evaluation device for interactive system with graphical user interface |
US5881315A (en) * | 1995-08-18 | 1999-03-09 | International Business Machines Corporation | Queue management for distributed computing environment to deliver events to interested consumers even when events are generated faster than consumers can receive |
US6581056B1 (en) * | 1996-06-27 | 2003-06-17 | Xerox Corporation | Information retrieval system providing secondary content analysis on collections of information objects |
US6370563B2 (en) * | 1996-09-30 | 2002-04-09 | Fujitsu Limited | Chat system terminal device therefor display method of chat system and recording medium |
GB2331166B (en) * | 1997-11-06 | 2002-09-11 | Ibm | Database search engine |
US6199073B1 (en) * | 1997-04-21 | 2001-03-06 | Ricoh Company, Ltd. | Automatic archiving of documents during their transfer between a peripheral device and a processing device |
JP3008872B2 (en) * | 1997-01-08 | 2000-02-14 | 日本電気株式会社 | GUI system automatic operation device and operation macro execution device |
US5893093A (en) * | 1997-07-02 | 1999-04-06 | The Sabre Group, Inc. | Information search and retrieval with geographical coordinates |
US6078916A (en) * | 1997-08-01 | 2000-06-20 | Culliss; Gary | Method for organizing information |
US6182068B1 (en) * | 1997-08-01 | 2001-01-30 | Ask Jeeves, Inc. | Personalized search methods |
US6014665A (en) * | 1997-08-01 | 2000-01-11 | Culliss; Gary | Method for organizing information |
US6865715B2 (en) * | 1997-09-08 | 2005-03-08 | Fujitsu Limited | Statistical method for extracting, and displaying keywords in forum/message board documents |
US5956722A (en) * | 1997-09-23 | 1999-09-21 | At&T Corp. | Method for effective indexing of partially dynamic documents |
US6073130A (en) * | 1997-09-23 | 2000-06-06 | At&T Corp. | Method for improving the results of a search in a structured database |
US6779030B1 (en) * | 1997-10-06 | 2004-08-17 | Worldcom, Inc. | Intelligent network |
US6236768B1 (en) * | 1997-10-14 | 2001-05-22 | Massachusetts Institute Of Technology | Method and apparatus for automated, context-dependent retrieval of information |
US6061678A (en) * | 1997-10-31 | 2000-05-09 | Oracle Corporation | Approach for managing access to large objects in database systems using large object indexes |
US6055579A (en) * | 1997-11-17 | 2000-04-25 | Silicon Graphics, Inc. | Distributed control and synchronization of multiple data processors using flexible command queues |
US6346952B1 (en) * | 1999-12-01 | 2002-02-12 | Genesys Telecommunications Laboratories, Inc. | Method and apparatus for summarizing previous threads in a communication-center chat session |
US7233948B1 (en) * | 1998-03-16 | 2007-06-19 | Intertrust Technologies Corp. | Methods and apparatus for persistent control and protection of content |
US6347374B1 (en) * | 1998-06-05 | 2002-02-12 | Intrusion.Com, Inc. | Event detection |
US6263348B1 (en) * | 1998-07-01 | 2001-07-17 | Serena Software International, Inc. | Method and apparatus for identifying the existence of differences between two files |
US6604236B1 (en) * | 1998-06-30 | 2003-08-05 | Iora, Ltd. | System and method for generating file updates for files stored on read-only media |
US6226630B1 (en) * | 1998-07-22 | 2001-05-01 | Compaq Computer Corporation | Method and apparatus for filtering incoming information using a search engine and stored queries defining user folders |
US6275957B1 (en) * | 1998-09-21 | 2001-08-14 | Microsoft Corporation | Using query language for provider and subscriber registrations |
US6363373B1 (en) * | 1998-10-01 | 2002-03-26 | Microsoft Corporation | Method and apparatus for concept searching using a Boolean or keyword search engine |
US6380924B1 (en) * | 1998-10-22 | 2002-04-30 | Young Yee | Mouse/keyboard capture recorder (MCR) apparatus and methodology |
US6401239B1 (en) * | 1999-03-22 | 2002-06-04 | B.I.S. Advanced Software Systems Ltd. | System and method for quick downloading of electronic files |
US6175830B1 (en) * | 1999-05-20 | 2001-01-16 | Evresearch, Ltd. | Information management, retrieval and display system and associated method |
US6467052B1 (en) * | 1999-06-03 | 2002-10-15 | Microsoft Corporation | Method and apparatus for analyzing performance of data processing system |
US6592627B1 (en) * | 1999-06-10 | 2003-07-15 | International Business Machines Corporation | System and method for organizing repositories of semi-structured documents such as email |
US6560655B1 (en) * | 1999-06-22 | 2003-05-06 | Microsoft Corporation | Synchronization manager for standardized synchronization of separate programs |
US6873982B1 (en) * | 1999-07-16 | 2005-03-29 | International Business Machines Corporation | Ordering of database search results based on user feedback |
US6532023B1 (en) * | 1999-08-12 | 2003-03-11 | International Business Machines Corporation | Recording selected applet events of a user interaction sequence |
US6999957B1 (en) * | 2000-01-11 | 2006-02-14 | The Relegence Corporation | System and method for real-time searching |
US6877027B1 (en) * | 2000-02-19 | 2005-04-05 | Hewlett-Packard Development Company, L.P. | System and method for providing synchronization verification of multiple applications across remote systems |
US6691175B1 (en) * | 2000-02-25 | 2004-02-10 | Sun Microsystems, Inc. | Method and apparatus for managing data propagation between software modules |
US20020049608A1 (en) * | 2000-03-03 | 2002-04-25 | Hartsell Neal D. | Systems and methods for providing differentiated business services in information management environments |
US6728763B1 (en) * | 2000-03-09 | 2004-04-27 | Ben W. Chen | Adaptive media streaming server for playing live and streaming media content on demand through web client's browser with no additional software or plug-ins |
GB2361555A (en) * | 2000-04-17 | 2001-10-24 | Apama Inc | Method of evaluating queries against received event information |
US7500249B2 (en) * | 2000-05-02 | 2009-03-03 | Sun Microsystems, Inc. | Cluster event service method and system |
US6697838B1 (en) * | 2000-05-03 | 2004-02-24 | Software Leader, Llc | Method and system for annotating information resources in connection with browsing, in both connected and disconnected states |
GB0012354D0 (en) * | 2000-05-22 | 2000-07-12 | Nokia Networks Oy | A method and system for providing location dependent information |
US6711572B2 (en) * | 2000-06-14 | 2004-03-23 | Xosoft Inc. | File system for distributing content in a data network and related methods |
JP2004531780A (en) * | 2000-06-22 | 2004-10-14 | マイクロソフト コーポレーション | Distributed computing service platform |
US7035852B2 (en) * | 2000-07-21 | 2006-04-25 | International Business Machines Corporation | Implementing a message queuing interface (MQI) indexed queue support that adds a key to the index on put commit |
US6907577B2 (en) * | 2000-09-06 | 2005-06-14 | Trace Tervo | System and method for accessing screen fields, functions and programs using a simple single key stroke |
US6934740B1 (en) * | 2000-09-19 | 2005-08-23 | 3Com Corporation | Method and apparatus for sharing common data objects among multiple applications in a client device |
US6614729B2 (en) * | 2000-09-26 | 2003-09-02 | David D. Griner | System and method of creating digital recordings of live performances |
US20020042789A1 (en) * | 2000-10-04 | 2002-04-11 | Zbigniew Michalewicz | Internet search engine with interactive search criteria construction |
US7680672B2 (en) * | 2000-10-20 | 2010-03-16 | Adobe Systems, Incorporated | Event collection architecture |
US7136881B2 (en) * | 2000-12-15 | 2006-11-14 | International Business Machines Corporation | Method and system for processing directory events |
US6983310B2 (en) * | 2000-12-29 | 2006-01-03 | International Business Machines Corporation | System and method for providing search capabilties on a wireless device |
US6772143B2 (en) * | 2001-01-02 | 2004-08-03 | Sprint Spectrum L.P. | Method and system for managing messages |
US8782541B2 (en) * | 2001-03-12 | 2014-07-15 | Nice-Systems Ltd. | System and method for capturing analyzing and recording screen events |
WO2002079993A1 (en) * | 2001-03-29 | 2002-10-10 | Reallegal.Com | Methods for synchronizing on-line and off-line transcript projects |
US20030126136A1 (en) * | 2001-06-22 | 2003-07-03 | Nosa Omoigui | System and method for knowledge retrieval, management, delivery and presentation |
US20030028506A1 (en) * | 2001-06-29 | 2003-02-06 | Lin Yu | Deferred index building systems, methods and computer program products for storing temporally spaced apart bursts of data records in a database |
CN1547720A (en) * | 2001-07-05 | 2004-11-17 | System and method for generating and propagating business events | |
US7082365B2 (en) * | 2001-08-16 | 2006-07-25 | Networks In Motion, Inc. | Point of interest spatial rating search method and system |
JP2003067306A (en) * | 2001-08-24 | 2003-03-07 | Hitachi Ltd | Storage management method for electronic mail |
US7328242B1 (en) * | 2001-11-09 | 2008-02-05 | Mccarthy Software, Inc. | Using multiple simultaneous threads of communication |
IL162008A0 (en) * | 2001-11-15 | 2005-11-20 | Visto Corp | System and methods for asychronous synchronization |
US7363590B2 (en) * | 2001-11-27 | 2008-04-22 | International Business Machines Corporation | Calendar bar interface for electronic mail interaction |
US20030131061A1 (en) * | 2001-11-28 | 2003-07-10 | Active Buddy, Inc. | Transparent proxy server for instant messaging system and methods |
US20030123442A1 (en) * | 2001-12-27 | 2003-07-03 | Drucker Benjamin T. | Distributed usage metering of multiple networked devices |
US7343365B2 (en) * | 2002-02-20 | 2008-03-11 | Microsoft Corporation | Computer system architecture for automatic context associations |
US7016919B2 (en) * | 2002-03-29 | 2006-03-21 | Agilent Technologies, Inc. | Enterprise framework and applications supporting meta-data and data traceability requirements |
US7096255B2 (en) * | 2002-05-21 | 2006-08-22 | Bellsouth Intellectual Property Corp. | System and method for providing a roster list of temporary contacts having expiration periods designated by a user in an instant messaging environment |
US20040002959A1 (en) * | 2002-06-26 | 2004-01-01 | International Business Machines Corporation | Method and system for providing context sensitive support for data processing device user search requests |
US20040003038A1 (en) * | 2002-06-27 | 2004-01-01 | Microsoft Corporation | Live content processing for online presentation |
JP4452012B2 (en) * | 2002-07-04 | 2010-04-21 | ヒューレット・パッカード・カンパニー | Document uniqueness evaluation method |
US20070022155A1 (en) * | 2002-08-22 | 2007-01-25 | Owens David H | Method and system for integrating enterprise software applications with desktop software applications |
US7370035B2 (en) * | 2002-09-03 | 2008-05-06 | Idealab | Methods and systems for search indexing |
US7933957B2 (en) * | 2002-09-17 | 2011-04-26 | At&T Intellectual Property Ii, L.P. | Tracking email and instant messaging (IM) thread history |
WO2004027649A1 (en) * | 2002-09-18 | 2004-04-01 | Netezza Corporation | Asymmetric streaming record data processor method and apparatus |
US20040064447A1 (en) * | 2002-09-27 | 2004-04-01 | Simske Steven J. | System and method for management of synonymic searching |
US7360096B2 (en) * | 2002-11-20 | 2008-04-15 | Microsoft Corporation | Securely processing client credentials used for Web-based access to resources |
GB0228447D0 (en) * | 2002-12-06 | 2003-01-08 | Nicholls Charles M | System for detecting and interpreting transactions events or changes in computer systems |
US6864901B2 (en) * | 2003-02-11 | 2005-03-08 | Academia Sinica | Real-time screen recording system |
US7213235B2 (en) * | 2003-02-21 | 2007-05-01 | Sap Ag | Method for using a business model user interface |
US7562367B1 (en) * | 2003-04-11 | 2009-07-14 | Marvell Israel (M.I.S.L.) Ltd. | Sorted-tree-based event queue for discrete event simulators |
US7412491B2 (en) * | 2003-04-30 | 2008-08-12 | International Business Machines Corporation | Method and apparatus for enhancing instant messaging systems |
US7565425B2 (en) * | 2003-07-02 | 2009-07-21 | Amazon Technologies, Inc. | Server architecture and methods for persistently storing and serving event data |
US7330536B2 (en) * | 2003-09-05 | 2008-02-12 | Emc Corporation | Message indexing and archiving |
US7454417B2 (en) * | 2003-09-12 | 2008-11-18 | Google Inc. | Methods and systems for improving a search ranking using population information |
US20050060719A1 (en) * | 2003-09-12 | 2005-03-17 | Useractive, Inc. | Capturing and processing user events on a computer system for recording and playback |
US7499974B2 (en) * | 2003-09-30 | 2009-03-03 | International Business Machines Corporation | Instant message user management |
US20050080866A1 (en) * | 2003-10-14 | 2005-04-14 | Kent Larry G. | Selectively displaying time indications for instant messaging (IM) messages |
US8150923B2 (en) * | 2003-10-23 | 2012-04-03 | Microsoft Corporation | Schema hierarchy for electronic messages |
US20050114487A1 (en) * | 2003-11-12 | 2005-05-26 | Jin Peng | Notification framework and method of distributing notification |
US7475406B2 (en) * | 2003-12-15 | 2009-01-06 | International Business Machines Corporation | Event notification structure for dynamically aggregated logical components |
US7383307B2 (en) * | 2004-01-07 | 2008-06-03 | International Business Machines Corporation | Instant messaging windowing for topic threads |
-
2004
- 2004-03-31 US US10/814,387 patent/US20050234929A1/en not_active Abandoned
-
2005
- 2005-03-30 EP EP05731490A patent/EP1741026A4/en not_active Withdrawn
- 2005-03-30 WO PCT/US2005/010987 patent/WO2005098595A2/en active Application Filing
Non-Patent Citations (5)
Title |
---|
BACON J ET AL: "Event Storage and Federation using ODMG" INTERNET, [Online] vol. 2135, 2000, pages 265-281, XP002476661 Lecture Notes In Computer Science; Revised Papers from the 9th International Workshop on Persistent Object Systems Retrieved from the Internet: URL:http://citeseer.ist.psu.edu/bacon00event.html> [retrieved on 2008-04-15] * |
DUMAIS SUSAN ET AL: "Stuff I've Seen: A System for Personal Information Retrieval and Re-Use" PROCEEDINGS OF THE 26TH ANNUAL INTERNATIONAL ACM SIGIR CONFERENCE ON RESEARCH AND DEVELOPMENT IN INFORMAION RETRIEVAL, JULY 28 - AUGUST 1, 2003, TORONTO, CANADA, [Online] 1 August 2003 (2003-08-01), pages 72-79, XP002476662 Retrieved from the Internet: URL:http://doi.acm.org/10.1145/860435.860451> [retrieved on 2008-04-15] * |
See also references of WO2005098595A2 * |
SPITERI M D ET AL: "An architecture to support storage and retrieval of events" INTERNET CITATION, [Online] September 1998 (1998-09), pages 443-458, XP002193397 Retrieved from the Internet: URL:http://citeseer.nj.nec.com/spiteri98architecture.html> [retrieved on 2002-03-18] * |
SPITERI M D: "An architecture for the notification, storage and retrieval of events" INTERNET, [Online] January 2000 (2000-01), pages 1,51-73, XP002476660 UNIVERSITY OF CAMBRIDGE, UK Retrieved from the Internet: URL:http://citeseer.ist.psu.edu/spiteri00architecture.html> [retrieved on 2008-04-15] * |
Also Published As
Publication number | Publication date |
---|---|
EP1741026A4 (en) | 2008-05-28 |
WO2005098595A3 (en) | 2007-05-24 |
WO2005098595A2 (en) | 2005-10-20 |
US20050234929A1 (en) | 2005-10-20 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US20050234929A1 (en) | Methods and systems for interfacing applications with a search engine | |
US7725508B2 (en) | Methods and systems for information capture and retrieval | |
AU2005231112B2 (en) | Methods and systems for structuring event data in a database for location and retrieval | |
US9836544B2 (en) | Methods and systems for prioritizing a crawl | |
US7941439B1 (en) | Methods and systems for information capture | |
US10180980B2 (en) | Methods and systems for eliminating duplicate events | |
US8275839B2 (en) | Methods and systems for processing email messages | |
US8099407B2 (en) | Methods and systems for processing media files | |
US7412708B1 (en) | Methods and systems for capturing information | |
US7707142B1 (en) | Methods and systems for performing an offline search | |
US7580568B1 (en) | Methods and systems for identifying an image as a representative image for an article | |
US20080059419A1 (en) | Systems and methods for providing search results | |
US8346777B1 (en) | Systems and methods for selectively storing event data | |
US20080040315A1 (en) | Systems and methods for generating a user interface | |
US7680888B1 (en) | Methods and systems for processing instant messenger messages | |
US7499958B1 (en) | Systems and methods of replicating all or part of a data store | |
US7853606B1 (en) | Alternate methods of displaying search results | |
US7581227B1 (en) | Systems and methods of synchronizing indexes | |
US8595214B1 (en) | Systems and methods for article location and retrieval |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PUAI | Public reference made under article 153(3) epc to a published international application that has entered the european phase |
Free format text: ORIGINAL CODE: 0009012 |
|
17P | Request for examination filed |
Effective date: 20061106 |
|
AK | Designated contracting states |
Kind code of ref document: A2Designated state(s): AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HU IE IS IT LI LT LU MC NL PL PT RO SE SI SK TR |
|
AX | Request for extension of the european patent |
Extension state: AL BA HR LV MK YU |
|
RIN1 | Information on inventor provided before grant (corrected) |
Inventor name: KHAN, OMAR, HABIBInventor name: IONESCU, MIHAI, FLORIN |
|
PUAK | Availability of information related to the publication of the international search report |
Free format text: ORIGINAL CODE: 0009015 |
|
DAX | Request for extension of the european patent (deleted) | ||
RIC1 | Information provided on ipc code assigned before grant |
Ipc: G06F 17/00 20060101ALI20071030BHEPIpc: G06F 7/00 20060101AFI20071030BHEP |
|
A4 | Supplementary search report drawn up and despatched |
Effective date: 20080428 |
|
RAP1 | Party data changed (applicant data changed or rights of an application transferred) |
Owner name: GOOGLE INC. |
|
17Q | First examination report despatched |
Effective date: 20080731 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: THE APPLICATION IS DEEMED TO BE WITHDRAWN |
|
18D | Application deemed to be withdrawn |
Effective date: 20090211 |
|
P01 | Opt-out of the competence of the unified patent court (upc) registered |
Effective date: 20230519 |