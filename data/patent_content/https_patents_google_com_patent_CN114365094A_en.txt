CN114365094A - Timing anomaly detection using inverted indices - Google Patents
Timing anomaly detection using inverted indices Download PDFInfo
- Publication number
- CN114365094A CN114365094A CN201980098834.1A CN201980098834A CN114365094A CN 114365094 A CN114365094 A CN 114365094A CN 201980098834 A CN201980098834 A CN 201980098834A CN 114365094 A CN114365094 A CN 114365094A
- Authority
- CN
- China
- Prior art keywords
- interval
- test
- dimension
- value
- event
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/30—Monitoring
- G06F11/3065—Monitoring arrangements determined by the means or processing involved in reporting the monitored data
- G06F11/3072—Monitoring arrangements determined by the means or processing involved in reporting the monitored data where the reporting involves data filtering, e.g. pattern matching, time or event triggered, adaptive or policy-based reporting
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/006—Identification
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/30—Monitoring
- G06F11/3003—Monitoring arrangements specially adapted to the computing system or computing system component being monitored
- G06F11/3034—Monitoring arrangements specially adapted to the computing system or computing system component being monitored where the computing system component is a storage system, e.g. DASD based or network based
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/30—Monitoring
- G06F11/34—Recording or statistical evaluation of computer activity, e.g. of down time, of input/output operation ; Recording or statistical evaluation of user activity, e.g. usability assessment
- G06F11/3452—Performance evaluation by statistical analysis
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F17/00—Digital computing or data processing equipment or methods, specially adapted for specific functions
- G06F17/10—Complex mathematical operations
- G06F17/18—Complex mathematical operations for evaluating statistical data, e.g. average values, frequency distributions, probability functions, regression analysis
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N20/00—Machine learning
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2201/00—Indexing scheme relating to error detection, to error correction, and to monitoring
- G06F2201/835—Timestamp
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2201/00—Indexing scheme relating to error detection, to error correction, and to monitoring
- G06F2201/86—Event-based monitoring
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q10/00—Administration; Management
- G06Q10/04—Forecasting or optimisation specially adapted for administrative or management purposes, e.g. linear programming or "cutting stock problem"
Abstract
Embodiments identify an exception event from an index event. An exemplary system receives dimensions of events, defines a test start time and a test duration for a test interval. The system can identify a set of events that match the dimension. The set of events includes events occurring within a test interval or within one of at least two reference intervals. For the test interval and the reference interval, the system generates an aggregate value for each unique combination of dimensional values in the event set. The system selects at least one of the unique combinations of dimensional values for anomaly detection based on a comparison of the aggregated values for the reference interval and the test interval, and performs anomaly detection on a historical timing of the selected unique combinations of dimensional values. The system may report any one of the unique combinations of selected dimension values identified as anomalous.
Description
Background
Anomaly and trend detection, production monitoring, banking transactions, medical transactions, or even breaking or trending news identification are beneficial to many different problems. Such detection systems act on time series data, for example, tracking over a period of time some value of an event having a particular dimension label or combination of dimension labels. Some anomaly/trend detection systems may use predictive models to determine whether values fall outside of a prediction horizon. However, the predictive model is highly dependent on the dimensions being modeled and requires a large number of calculations when trained. Thus, such systems run on pre-trained models with particular dimensions or as batch jobs.
Disclosure of Invention
Anomaly or trend detection systems, or simply, detection systems, are distributed computer systems that identify anomalies or trends based on large-scale aggregation of time-series data. The detection system is flexible and efficient, enabling real-time identification of anomalies/trends for any requested combination of dimensions tracked by the time series data. A dimension represents a particular type of data. For example, a dimension may be language, status, service provider, temperature, and the like. The label indicates the value of the dimension. For example, the status dimension may have labels "pending", "approved" and "rejected", and the temperature dimension may have any number that represents a temperature measurement as a label. The detection system takes one or more of these dimensions as parameters. The detection system identifies data points, which may represent anomalies, from all possible combinations of dimensional labels in a large (millions or billions) of time series. For example, if the parameters identify a status and a transaction type, the system determines which unique combinations of status and transaction type tags are present in the event repository within a specified time interval (e.g., < to be reviewed, deposit >, < approval, transfer >, < to be reviewed, transfer >, < decline, deposit >, etc.). These unique combinations may be referred to as unique dimension labels or fragments. The detection system compares the aggregate value (or values) of the different unique combinations and determines which are of interest, e.g., which are candidates for further analysis. The detection system performs intensive computations to train the predictive model only for those candidates that are selected for further analysis. The detection system uses a predictive model to determine whether a candidate represents an anomaly. Because the detection system eliminates most potential combinations of dimension labels, the system can operate in real-time even if it is not known in advance which combination of dimensions to model.
The disclosed embodiments first query the event repository for time series data that can be used to identify and analyze unique combinations of requested dimensions. The analysis compares the aggregate value of the test interval to the aggregate value of each of the one or more reference intervals. The test interval or data for determining the test interval may be provided as a parameter. The reference interval or the data for determining the reference interval may also be provided as a parameter. In some embodiments, the reference interval may be determined from information of the test interval. Analysis of the data in the test and reference intervals enables the detection system to quickly select an anomaly candidate. For the one-dimensional provided as a parameter, the anomaly candidate is a unique dimension label. For two or more dimensions provided as parameters, an anomaly candidate is a unique combination of dimension labels, including labels for each dimension provided as parameters. The system may perform a complete predictive analysis, such as training and using predictive models, on several outlier candidates identified by the candidate selection process. Prediction may be used to determine whether the most recent value of an anomaly candidate is far enough away from the predicted value to qualify as an anomaly. If so, the detection system may provide the dimension label in response, for example for reporting or further processing.
The disclosed embodiments can be implemented to realize one or more of the following advantages. For example, even for previously unknown combinations of dimensions, the system can provide anomaly detection in real time as long as the dimensions are captured in the time series library. As another example, the detection system has a tree structure. The tree structure scales billions of data points approximately linearly to the number of leaves added. In other words, embodiments may extend to billions of timings while still achieving real-time latency. Large-scale detection systems present inherent scalability challenges, particularly when used in applications with very low latency requirements, e.g., providing real-time alerts for applications related to financial transactions, mechanical systems, fraud detection, malware identification, etc. Many predictive and anomaly detection systems observe a predetermined domain threshold over time or dynamically adjust the resolution interval. However, such systems cannot scale to hundreds of billions of data points and rely on either large-scale batch jobs (sacrifice delay) or running on only a subset of the data (sacrifice recall). In contrast, the disclosed embodiments can run in real-time on the entire event repository, as the computationally intensive work of training the predictive model is performed only for relatively few dimensional combinations. That is, candidate dimension combinations are identified and the prediction model is executed based on the identified dimension combinations rather than on each dimension contribution, which significantly reduces the computational burden. As another example, the disclosed embodiments may be provided as a service to any timing repository. Embodiments are flexible and highly customizable to the underlying data points. Embodiments may be run in batch as well as in real time.
The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
Drawings
FIG. 1 illustrates an example detection system for identifying anomalies from an event repository based on requested dimensions in accordance with the disclosed subject matter.
FIG. 2 is a flow chart of an exemplary process for identifying anomalies in a requested dimension from a time sequence in accordance with the disclosed subject matter.
FIG. 3 is a flow chart of an exemplary process for evaluating an anomaly candidate according to the disclosed subject matter.
FIG. 4 is an exemplary event repository in accordance with the disclosed subject matter.
FIG. 5 illustrates an exemplary anomaly candidate selection based on the example event repository of FIG. 4 and the disclosed embodiments.
FIG. 6 illustrates an example of a computer device that can be used to implement the described technology.
FIG. 7 illustrates an example of a distributed computer device that can be used to implement the described techniques.
Like reference symbols in the various drawings indicate like elements.
Detailed description of the embodiments
Embodiments provide enhancements to event tracking systems by identifying anomalies in a requested dimension from a typed event timing repository (time-series event retrieval). Embodiments may use an index of typed events to identify an anomaly candidate segment (slice). Embodiments may use historical data from a repository of typed event-sequences (time-series) to build a prediction model for only those candidate fragments, and use the prediction model to predict whether the fragment represents an anomaly.
As used herein, time series data means data representing events occurring during a particular time period. An event is associated with one or more data points. Each data point has a dimension. Each dimension may be associated with a particular timestamp in time sequence and have a tag. The label represents a dimension value. For example, if the dimension is "language," the dimension tags may be "English," "Russian," "Japanese," and so on. Similarly, if the dimension is "pressure," the dimension label may be a number representing a pressure measurement. The time-series data points may include an indication of a dimension and an indication of a tag of a timestamp. In some embodiments, each time-series data point has an implicit value representing a count of occurrences, i.e., a count of one (1). In some embodiments, a time-series data point has an expression value representing a count, which may be one or a number greater than one. In some embodiments, the time-series data points have an expression value representing another suitable aggregation function (aggregation function), such as a mean, a maximum, a median, a minimum, a sum, and the like.
The timing data may be retained for a short period of time. The length of the short period of time may be a system adjustable parameter. The time series event repository may only maintain enough historical time series data to provide accurate predictions. For real-time anomaly detection, this may be weeks, days, or even hours, depending on the type of event being analyzed. Thus, the short period of time may typically be on the order of minutes, hours or days, rather than months or years.
Event timing data, such as dimensions associated with a particular event, can be organized in a number of different ways. For example, the system may generate a single document that includes data representing all dimensions that co-occur at a single time or over a single period of time. As another example, a repository (repository) may store each data point as a separate record. As another example, the repository may be an inverted index (inverted index). For example, the dimension tag may be stored with a list of timestamps or with a list of documents representing different timestamps. Suitable techniques for event indexing are described in U.S. patent publication No. 2018/0314742, "cloud inference system," which is incorporated by reference. In some implementations, the inverted index may be arranged in a tree-based hierarchy (hierarchy) with a root server, a plurality of intermediate servers in one or more levels, and a plurality of leaf servers. In such a system, the root server sends a query to each leaf server, and each leaf server responds with any responsive event data points. The root server may then perform an n-way merge (n-way merge) of the returned data. This arrangement allows real-time searching of a collection of index data, which is important if the size of the searchable dimension is such that a complete index cannot be pre-generated.
The trend is an anomaly with directionality. For example, a breaking news story may indicate a trend that occurs more frequently (rather than less frequently) than the time series data forecast. Thus, as used herein, any reference to an anomaly may also apply to a trend when directionality is also considered.
As used herein, a segment represents a combination of label values for certain dimensions, i.e., dimensions provided as parameters. Thus, a segment represents a unique combination of dimension labels, one label per dimension. As shown in fig. 5, if dimensions of "pressure" and "temperature" are required, the segments may be the only combination of pressure tags and temperature tags. As used herein, when a segment represents two or more dimensions, the two dimensions must have the label of the requested interval.
As used herein, a Test Interval (Test Interval) is a time period for selecting an abnormality candidate for comprehensive predictive analysis. The test interval may be provided as a parameter. For example, the request process may provide a start time as a parameter and the detection system assumes a duration. As another example, the request process may provide a start time and a duration as parameters, and the detection uses the start time and the duration to define the test interval.
As used herein, a Reference Interval (Reference Interval) is a period of time that occurs before a test Interval, and the duration of the Reference Interval is a multiple of the duration of the test Interval. The detection system may operate using multiple reference intervals. In some embodiments, a reference interval may be determined from the test interval. For example, it may be assumed that the reference interval is a time period occurring before the test interval, e.g., starting 1 hour, 5 hours, 1 day, etc. before the test interval. In some embodiments, the request process may provide information from which to determine the reference interval. For example, the request process may provide a start time of the reference interval. The detection system may generate a number of reference intervals, wherein a first reference interval starts at a start time. The request process may provide an age for the reference interval. In such embodiments, the detection system may subtract the age from the test interval start time and generate some number of reference intervals beginning at that time. The request process may provide a start time and a duration for each of the plurality of intervals. In such an embodiment, the detection system may generate a reference interval for each provided start time and duration.
FIG. 1 is a block diagram of an anomaly detection system according to an exemplary embodiment. The system 100 can be used to identify unique dimensional tags or combinations of dimensional tags, i.e., segments, that represent anomalies in an event monitoring system. The system 100 can operate in real-time even if the requested dimension is not known in advance. However, the system 100 may also operate in an offline mode, for example, where the querying system does not support obtaining data in a real-time manner or does not require real-time feedback. For ease of description, the depiction of the system 100 in fig. 1 is sometimes described as handling certain dimensions (e.g., pressure, volume, temperature, etc.), but embodiments may operate on any type of event timing data.
The salient feature extraction system (salient feature extraction system)100 may be one or more computing devices in the form of a number of different devices, such as a standard server, a group of such servers, or a rack server system, among others. Further, system 100 may be implemented in a personal computer, such as a laptop computer. The system 100 may be an example of a computer device 600 as shown in fig. 6 or a computer device 700 as shown in fig. 7.
Although not shown in fig. 1, the system 100 may include one or more processors formed in a substrate that are configured to execute one or more machine-executable instructions or pieces of software, firmware, or a combination thereof. The processor may be semiconductor-based, i.e., the processor may comprise semiconductor material capable of executing digital logic. The processor may be a special purpose processor such as a Graphics Processing Unit (GPU). The system 100 may also include an operating system and one or more computer memories, such as a main memory, configured to store one or more pieces of data temporarily, permanently, semi-permanently, or a combination thereof. The memory may include any type of storage device that stores information in a format that is readable and/or executable by the one or more processors. The memory may include volatile memory, non-volatile memory, or a combination thereof, and storage modules that, when executed by the one or more processors, perform certain operations. In some implementations, the modules may be stored in an external storage device and loaded into the memory of the system 100.
The system 100 includes an example request process 180, the example request process 180 being an example of using the detection system 100 to identify anomalies for any request dimension in real-time from typed time-series data. The typed timing data is represented as an index event 115. The indexed events 115 may also be referred to as an event repository. The indexed events 115 are typed in that they have associated dimensions and dimension tags. A single time-series data point is represented by event 120. Each individual event 120 may include a type 122 and a timestamp 124. Type 122 is the dimension and dimension tag of the event. Thus, < pressure, 15>, < status, to be audited >, and < transaction, deposit > are non-exclusive examples of types represented by type 122. The time stamp 124 represents a specific time period. The granularity (granularity) of the time period depends on the type of data represented by the event data point. For example, a banking transaction may have a very short period of time, and a timestamp 124 for such an event may record a date, hour, minute, and second, or even tenths of seconds. Conversely, some monitoring systems may only process one event every five minutes, so the time period of the timestamp 124 may only record the date, hour, and minute.
Some events 120 may also have an aggregation value 126. The aggregation value 126 represents some value that may be used in the aggregation function. Examples of aggregation functions include counting, summing, averaging, and the like. In some embodiments, the aggregate value 126 is implicit rather than actually stored. For example, if the aggregate value of events 120 is a count, the presence of events 120 can be considered a value of one (1), or in other words, the event type is a count of one (1). In some embodiments, the count may be stored explicitly.
In some implementations, the index events 115 can be stored as an inverted index. In the inverted index, events 120 may be stored in a manner that associates a dimension tag with a list of times at which the type of event occurred. Thus, for example, a < pressure, 15> type may be associated with three different timestamps. Embodiments also encompass alternative arrangements, for example, where a timestamp is associated with a group or document identifier. In this case, < pressure, 15> may be associated with three document identifiers, and the document identifiers may be used to locate three timestamps. Time-dependent events with different types (dimension tags) allow the detection system to perform aggregate cross dimension (aggregate cross-dimension) detection without knowing in advance which dimensions are included in the cross.
In the example of fig. 1, the indexed events 115 represent a distributed inverted index, where typed events are sharded (sharded) among several leaf servers 114. Each leaf server 114 (e.g., leaf 114(1), leaf 114(2), … leaf 114(n)) may store a unique portion of the index or may store a copy. Access to events 120 in leaf servers 114 may be controlled by root server 112. The root server 112 of the query system 110 may receive the query request and may distribute the query to the leaf servers 114. Leaf server 114 may provide any responsive event data points to root server 112. Although not illustrated in fig. 1, the query system 110 may include one or more intermediate servers between the root server 112 and the leaf servers 114. Embodiments also include index events 115 having a format different from the inverted index. But for index repositories storing billions of data points, this format may not respond as quickly as a distributed inverted index.
In the example of FIG. 1, the index event 115 is shown as part of the detection system 100. In some embodiments, however, the indexed events 115 may be remote from the detection system 100, but accessible by the detection system 100. Similarly, the example of FIG. 1 shows the query system 110 as part of the detection system 100, but the query system 110 may also be remote from, but accessible by, the detection system 100. In other words, the detection system 100 may use an interface to the query system 110 to request and receive events from the index events 115.
The query system 110 takes one or more dimensions as input. The dimensions are provided in a request 185 from the requesting process 180. The dimensions provided in the request define a combination of dimensions. Others, although shown in fig. 1 as being included in the detection system 100, the request process 180 may be separate from, but in communication with, the detection system 100. For example, request process 180 may provide request 185 to detection system 100 via an API. In some implementations, the request 185 can also include information about different time periods used in the anomaly or trend detection process. If no such information is provided, the system 100 may use default values. Example time periods include test intervals and one or more reference intervals used in the candidate selector 140, and historical durations used in the anomaly detector. For example, request 185 may include a start time of a test interval. In some implementations, the query system 110 defines the test interval using a default test interval duration and a test interval start time. In some embodiments, the test interval duration is also provided in request 185.
In some embodiments, a reference interval may be determined from the test interval. The reference interval occurs before the test interval start time. In some embodiments, the reference interval age may be provided as part of the request 185. The system 100 may determine the reference interval start time by subtracting the reference interval age from the test interval start time. In some embodiments, a respective reference interval age may be provided in the request 185 for each reference interval. In some embodiments, the request interval is not related to or determined from the test interval. For example, the request 185 may include a respective start time for each of one or more reference intervals. In some embodiments, the system 100 may use a default duration for each reference interval. In some embodiments, the default duration may be the same for each reference interval. In some embodiments, the default duration may be different for some reference intervals. In some embodiments, the duration of the reference interval is a multiple of the test interval. The multiple may be 1, 2, 3, 4, etc. If the duration of the reference interval is longer than the test interval duration (e.g., the multiple is 2 or more), the system may average the aggregated value over the number of test intervals in the reference interval. Thus, for example, if the reference interval is 5 hours, but the test interval is one hour, the system 100 may find 5 hours of aggregate values per 1 hour duration and then average the 5 aggregate values.
The request 185 may also include other parameters, such as a history duration. The historical duration is an indication of how far the anomaly detector 150 should return in order to obtain time series data to train the predictive model. If no history duration is provided in the request 185, the system 100 may use a default history duration. Other optional parameters include a flag (flag) related to the content included in the response. For example, in addition to the exception event 160, the system 100 may optionally return exception candidates 145 evaluated by the exception detector 150 and/or the response interval segment 135. Optional parameters in the request 185 may also provide various threshold and comparison values used by the candidate selector 140 and the anomaly detector 150. For example, request 185 may include parameters for evaluating a relative change threshold, an absolute change threshold, a maximum error threshold of the predictive model, and parameters for other variables described herein. Thus, the detection system 100 may provide a highly customizable process via an API.
The query system 110 uses the parameters (and/or default values) to determine the test intervals and the reference intervals. The query system 110 then queries the indexed events 115 to identify responsive events in each interval. Response events are those data points that match the requested dimension (regardless of the label of the dimension) and have timestamps that fall within the test or reference interval. For each span, the query system 110 executes the n-way merge span segments 135 when a response event is returned. n-way merging combines events with the same dimension label/dimension label combination by aggregating the aggregated values. For example, if the aggregate value is a count and the query parameter specifies dimension 1, then each instance of a particular < dimension 1, label (x) > is a segment of the response interval with an associated count representing the number of times label (x) was found in the interval, where label (x) is any unique label for dimension 1. If the query parameters specify two or more dimensions, then each response interval segment is a unique combination of the aggregate values with which the dimension labels are associated. For example, if the state and transaction are the requested dimensions, the combination of dimensions is a combination of state tags and transaction tags. The query system 110 returns each instance in which any tags for state co-occur with any tags for transactions. Co-occurrence (Co-occurrence) means that the data point with the state tag has the same timestamp as the data point with the transaction tag. In other words, the state and transaction are multiple dimensions of the same event with a single timestamp. The number of times that state cancellation occurs concurrently with withdrawal of transactions is the aggregate value of the interval time segment < state, cancel, transaction, withdrawal >. Of course, other aggregation functions may be similarly applied.
In some embodiments, when the reference interval has a longer duration than the test interval, the n-way merge calculates an aggregate value for each test interval duration within the reference interval, and then averages these aggregate values. Thus, for example, if the test interval duration for the above example is one minute and the reference interval is a five minute time period, the n-way merge would determine the counts of the unique combinations of dimensional labels that occur in each minute of the five minute time period and then calculate the average of the counts. The average of these five counts is the aggregate value for that particular reference interval. Although system 100 is described as calculating one aggregate value (e.g., count) for each interval of each segment, system 100 may calculate multiple aggregate values, e.g., count and average, for each interval of each segment.
The detection system 100 provides the response interval segment 135 (i.e., the unique combination of tags for the requested dimension) to the candidate selector 140. The candidate selector 140 is configured to determine which segments are likely to represent anomalies by comparing the aggregate value in the test interval with the aggregate value in the reference interval. In some embodiments, the candidate selector 140 may be configured to select only the first k interval segments. In some embodiments, the first k interval segments are the segments that occur most frequently over all intervals (i.e., the test interval and all reference intervals). The count used to determine the occurrence may be an aggregate value for the interval, or may be calculated separately from, or in addition to, the aggregate value for the interval. The value of k may be a parameter provided in the request 185 or may be a default, e.g., 2, 3, 5, 8, 10, etc.
The candidate selector 140 may determine whether each of the first k segments (or each unique segment) is an anomaly candidate based on the test interval and the reference interval. If a segment is present in the reference interval but not in the test interval, the candidate selector 140 may select the segment as the anomaly candidate 145. If a segment exists in all of the intervals but has an aggregate value in the test interval that is significantly different from one of the reference intervals, then the candidate selector 140 may select the segment as an anomaly candidate 145. Fig. 2 describes in more detail whether the aggregate values are significantly different.
Any anomaly candidates 145 are provided to an anomaly detector 150. The anomaly detector 150 may be configured to obtain, for each candidate segment, a time sequence for that segment over a historical period. The historical time period may be defined by a historical duration provided as a parameter, or by a default time period. The anomaly detector 150 may use historical timing to train a predictive model. The anomaly detector 150 may use any known or later developed predictive model. Example predictive models include linear regression, simple moving average, LOESS (locally estimated scatter plot smoothing) with or without STL, and the like. The model used may depend on the length of the historical period. For example, a shorter time period may use a moving average, while a longer time period may use LOESS. The anomaly detector 150 may use a predictive model to generate a predicted or predicted value, which is then compared to the actual value from the index event 115. If the values are very different, the anomaly detector 150 returns the segment as an anomaly event 160.
Thus, for each anomaly candidate 145, the anomaly detector 150 may query the index events 115, e.g., via the query system 110, for events that are responsive to the candidate segment. An event is responsive to a candidate segment if the event falls within a historical period or evaluation interval and matches the combination of the dimension and label represented by the segment. The evaluation interval may have an evaluation duration. The evaluation duration may be the same as the duration of the test interval used to identify the candidate segment. The evaluation duration may be different from the test interval duration. The query system 110 may perform n-way merging of response events. The n-way merge may merge events from different leaf servers 114 and generate an aggregate value for each evaluation duration in the historical data. The evaluation interval may be provided as part of the parameters in the request 185, for example by specifying an interval or information to determine the evaluation interval.
The anomaly detector 150 may train a predictive model using aggregated values of historical timing data (e.g., values calculated for an evaluation duration). The anomaly detector 150 may use a first portion of the historical data, also referred to as a test portion, to train a predictive model. The anomaly detector 150 may use the remainder of the historical data to evaluate the quality of the predictive model. The remaining portion may be referred to as a hold (hardout) portion and is not used to train the predictive model. The retained portion may be used to calculate a training error or, in other words, to determine a confidence in the prediction model prediction.
Exemplary training errors are the median absolute percentage error (MdAPE) and the Relative Mean Deviation (RMD). These training errors measure the fit interval, e.g., how accurate the model is. The anomaly detector 150 may ignore prediction models with high training errors, or in other words, low confidence. To determine whether the predictive model has a high training error, MdAPE can be compared to MdAPE thresholds. The threshold may be provided as a parameter in request 185. If MdAPE meets or exceeds the MdAPE threshold, the model can be considered to have a high training error. Likewise, the RMD error of the model may be compared to an RMD threshold. If the RMD error meets or exceeds the threshold, the model may be considered to have a high training error. The RMD threshold may be provided as a parameter in request 185. In some embodiments, a combination of MdAPE and RMD errors, or some other error measurement, may be used.
In some implementations, the anomaly detector 150 may stop processing candidates if the training error is too high. In some embodiments, if the training error is too high, the anomaly detector 150 may decompose the segments, or in other words, use fewer dimensions in the segments and re-evaluate, e.g., place different combinations of dimensions into the candidate selection process. This may increase the number of occurrences and may lead to a better model. In any case, candidate segments that produce models with low confidence will not be further evaluated as anomaly detection.
If the prediction model has sufficient confidence, the anomaly detector 150 may query the event index 115 for response events (events that match dimensions and labels in the candidate segment) that occurred in the most recent evaluation interval. These events may be combined and an aggregate value is generated. The aggregate value represents the actual value or actualval. The anomaly detector 150 may compare the actual value with a predicted value predicted by a prediction model for the same interval.
The anomaly detector 150 may calculate a confidence interval for the predictive model based on the retained portion. The confidence interval may be based on a measure of the performance of the predictive model, such as a log accuracy ratio. For each evaluation duration in the retained portion of the historical time series, the log accuracy ratio may be in | ln (hardout)val)/(forecastval) And | represents. HoldoutvalIs a value of a reserved portion of historical time series data from a particular interval, and is forecastvalIs the predicted value of the interval from the prediction model. In some embodiments, additional weight may be added to avoid an empty Time bucket (Time bucket). In this case, the log accuracy ratio can be expressed as | ln (hardout)val+extra_weight)/(forecastval+ extra _ weight) |. extra _ weight may reflect sensitivity to differences between predicted and retained values. For example, for applications that are sensitive to differences, extra _ weight may be smaller, e.g., 1.0, but for applications that are less sensitive to divergence values (divergent value), extra _ weight may be larger, e.g., 100 or 1000. Thus, the value of the extra _ weight parameter may depend on the implementation and may be provided as one of the parameters.
Once the distribution of log-accuracy ratios over the retained portion is known, the anomaly detector 150 can calculate a confidence interval. In some embodiments, the confidence interval may be a 99% confidence interval. In some embodiments, the confidence interval may be a 95% confidence interval. The confidence interval used may be based on the confidence in the predictive model. For example, a prediction model with low error (e.g., MdAPE and/or RMD) may use a 99% confidence interval, while a prediction with moderate error may use a lower confidence interval, e.g., 95%. The 99% confidence interval represents the range of values within which the model is 99% confident that the true (actual) value lies. The 95% confidence interval represents the range of values within which the model is 95% confident that the true (actual) value lies. Each confidence interval has an upper limit. The anomaly detector 150 may use an upper bound (i.e., error _ ci) to determine whether the actual value from the event index differs from the predicted value provided by the trained predictive model by a predetermined amount.
In some implementations, the anomaly detector 150 can consider a candidate segment as anomalous when any of the following conditions is true:
1.e^error_ci*(forecastval+extra_weight)>(actualval+extra_weight)*max_delta
2.actualval+extra_weight<(e^error_ci*(forecastval+extra_weight)/max_delta，
where max _ delta is the maximum difference between the actual and predicted values and e is the euler number. Max delta may be provided as a parameter in request 185 or may be a default value. Max delta may be configured to the type of event being evaluated and represents a tolerance level for outliers. If the actual value fails either test, then the anomaly detector 150 considers actualvalIn forecastvalIs outside of the predetermined range, and the candidate segment is considered abnormal. These fragments are returned as exception events 160.
Because training the predictive models is computationally expensive and time consuming, the detection system 100 minimizes the number of predictive models that need to be trained (or otherwise generated) by the candidate selection process. Thus, while there may be hundreds or even thousands of potential segments (e.g., cross products of possible labels representing different dimensions), only a few segments are selected for comprehensive predictive analysis. The candidate selection process may be completed in hundreds of milliseconds using an indexing event 115 having a distributed, inverted indexing structure. The resources (RAM and CPU) used to compute the preceding segments scale linearly with the number of segments and are almost independent of the dimension. For example, computing the first 20k segment with 6 dimensions may be done in less than 1 second, while computing the first 100k segment with 10 dimensions may be done in 10 seconds.
System 100 may include or communicate with other computing devices (not shown). For example, the request process 180 may be remote from the detection system 100 but capable of communicating with the detection system 100. Likewise, the query system 110 may be remote from the detection system 100 but capable of communicating with the detection system 100. Thus, the system 100 may be implemented in multiple computing devices in communication with each other. Thus, the detection system 100 represents one example configuration, and other configurations are possible. Further, the components of system 100 may be combined or distributed in a different manner than shown.
FIG. 2 is a flow chart of an exemplary process for identifying anomalies in a requested dimension from a time sequence in accordance with the disclosed subject matter. Process 200 may be performed by a detection system, such as system 100 of FIG. 1. The process 200 may be performed in real-time or off-line or batch mode. The speed at which an anomaly is detected may depend on the structure of the event repository (e.g., index events 115), the computing resources (e.g., processors and memory), and the number of candidate segments identified. Process 200 may begin with receiving a parameter set (205). The process 200 may be highly flexible and customizable. Although a large number of parameters may be provided, if these parameters are not provided, embodiments may use default values. At a minimum, the parameter set includes at least one dimension. One or more dimensions are used to select time series data to be centralized in an event repository. Dimensions in the parameter set may lack corresponding labels. In such an implementation, any tag of the dimension is considered a response to the query of the dimension. One or more dimensions in the parameter set may have one or more tags requested. In such an embodiment, only tags of dimensions that match tags from the parameter set are considered in response to a query for the dimensions. In some embodiments, the set of parameters may include the test interval or data from which the test interval is calculated. For example, the set of parameters may indicate a test start time. The test start time defines the start of the test interval. The set of parameters may include a test duration. In this embodiment, the test duration defines the duration of the test interval starting at the test start time. In some embodiments, a default test duration is used when no test duration is provided in the parameter set.
The parameter set may include information from which m (m being one or more) reference intervals are determined. The reference interval occurs before the start time of the test interval. The reference intervals all have a duration that is a multiple (e.g., 1, 2, 3, etc.) of the duration of the test interval. Not every reference interval needs to have the same duration. For example, the first reference interval may have a duration that matches the duration of the test interval, while the second interval may have a duration that is twice the duration of the test interval. In some embodiments, a start time and duration for each of the m reference intervals may be provided in the parameter set. In some embodiments, the age of each of the m reference intervals may be provided, and the start time of the interval may be calculated based on the start time of the test interval, e.g., the test interval start time minus the age. It may be assumed that the duration of the reference interval is the same as the test interval until a different duration is provided. In some embodiments, if no information is provided in the parameter set, the age and duration of the reference interval may be assumed.
The parameter set may also include other parameters. Examples of such parameters may be whether to return an exception candidate segment in addition to the exception, whether to return a response event segment with the exception, a duration of a historical timing used to train the prediction model, a duration of an evaluation interval, a maximum difference between an actual value and a predicted value over the evaluation interval, a minimum absolute change to select a candidate segment, a minimum relative change to select a candidate segment, a prediction timing count offset, a prediction additional weight, a prediction MdAPE threshold, a prediction RMD threshold, and so forth. Not all of the listed parameters need to be provided, and if not, default values may be used. The parameter set may be provided as part of an API of the detection system.
The system may use the set of parameters to identify segments of the requested dimension and analyze the segments to identify outlier candidate segments (210). The anomaly candidate identification using the reference interval is a coarse-grain filter. The coarse-grained filter identifies segments of interest, or in other words, segments that are more likely to represent anomalies. In embodiments using a coarse-grained filter based on a comparison of the test interval to the reference interval, the system can minimize computationally intensive anomaly detection. For example, the system may first determine a test interval and m reference intervals defined by parameters and/or default values. For each interval (e.g., for each of the test interval and the m reference intervals), the system can determine the first k unique segments in the interval (215). To find the first k unique pieces of an interval, the system may query an event repository, such as index event 115, for response events for the interval (220). An event repository query may specify dimensions (and optionally any tags for a particular dimension) and intervals. The query returns all data points that match the query parameters, e.g., for the specified dimensions that occur within the interval (and optionally, the labels that match the specified dimension labels). The system can aggregate the data points for the interval, e.g., determine which unique combinations of dimensional labels occur within the interval. Each unique combination of dimension labels is an event segment, or just a segment. Using the example event index 415 of fig. 4 and the request 585(a) of fig. 5, the interval T1 has a segment, < temperature 37, pressure 110>, which represents a unique combination of pressure and temperature dimensions. In contrast, interval T3 has four segments; temperature 37, pressure 110, temperature 17, pressure 17, temperature 37, pressure 17, and temperature 17, pressure 110. In other words, a fragment represents the Cross product (Cross product) of tags that occur in an interval of the desired dimension.
The system calculates an aggregate value for each segment (225). The aggregate value may be the number of occurrences of the segment in the time interval, or in other words, the number of occurrences of a particular combination in the segment. The aggregate value may be calculated from the aggregate values stored in the index, e.g., averaged. In some embodiments, the system may calculate more than one aggregate value for each segment, e.g., calculate a count and average. In some embodiments, where the interval is a reference interval of duration longer than the test duration, the system may calculate an aggregate value for the time periods within the reference interval equal to the test duration and average the aggregate values for these durations. For example, if the test interval is 5 minutes and the reference interval is 1 hour, the system may calculate an aggregate value (e.g., count) for every 5 minute interval over the hour and then average the 12 count values. The average value is considered as the aggregate value of the reference interval. In some embodiments, the system may consider the one-hour reference interval to be twelve different reference intervals.
In some embodiments, the system selects a predetermined number of segments for further consideration (230). For example, the system may select the first k segments. A segment may be considered the first k segments if it is the segment of the k segments with the highest occurrence over all intervals. Using fig. 5, where k is 2 as an example, < temperature 37, pressure 110> and < temperature 17, the pressure 17> segments were selected because they had 5 and 3 occurrences, respectively, with the remaining segments having 1 occurrence each. Similarly, for individual requests 185(b), segment < volume 71> and segment < volume 77> are selected because they have a higher incidence than segment < volume 70 >. In some implementations, if the number of segments exceeds a threshold, the system can select the top k segments.
The system may analyze the unique segments (or the first K unique segments) to determine if the segments are outlier candidates (240). If a segment is in any of the m reference intervals but not in the test interval (245, yes), the system may consider the segment as an abnormal candidate. If the segment is within the reference interval but not within the test interval, the system may select or mark the segment as an anomalous candidate (250). If the segment does appear in the test interval (245, no), in some embodiments, the system may determine whether the segment appears in all of the reference intervals (255). If the segment is not in all of the reference intervals (255,no), the system may not consider the segment as an anomalous candidate. If the segment is in all intervals (255, yes), the system can determine if the relative change between the test interval and any one of the reference intervals exceeds a relative change threshold (260). The relative change threshold may be one of the parameters provided with the original request. The relative change can be based on the | referenceval–testval|/(referenceval+testval) Calculation of, wherein referencevalIs an aggregate value of one of the m reference intervals, and testvalIs the aggregate value of the test interval. If the relative change meets or exceeds the relative change threshold (260, YES), the system may consider the segment as an anomaly candidate (250). The system performs this relative change test for each of the m reference intervals.
In some embodiments, in addition to checking for relative changes, the system may also check for absolute changes. For example, if the relative change meets or exceeds a relative threshold, the system may determine whether the absolute difference between the test interval and the reference interval meets or exceeds an absolute threshold. The absolute difference comparison may be used to filter out noise that is more likely at low probability of occurrence. In other words, the absolute threshold comparison may prevent the candidate selection process from selecting noise segments, e.g., segments for which there is insufficient data to make the correlation threshold meaningful.
After identifying anomaly candidates (e.g., those segments determined to have sufficient relative change or sufficient relative change and sufficient absolute change), the system may evaluate the anomaly candidates to identify segments that represent anomalies (265). An example of this process will be explained in more detail with reference to fig. 3. In some embodiments, further evaluation is optional, and the system may return the candidate segment to the requesting process for further evaluation. Once the anomalies are identified, the segments can be returned to the requesting process. The requesting process may choose to perform further analysis, send an alert, add the segment to a watch list, etc. In addition to the anomaly segments, and depending on the parameters of the request, the system may provide one or more of candidate segments, unique segments that are analyzed to determine anomaly candidates, or the first K unique segments. The process 200 then ends.
FIG. 3 illustrates a flow chart of an exemplary process 300 for evaluating an anomaly candidate in accordance with the disclosed subject matter. The process 300 may be performed by an anomaly/trend detection system, such as the system 100 of fig. 1. Process 300 may be performed as part of step 265 of fig. 2. The process 300 may begin by querying an event repository for dimension labels represented by anomalous candidate segments that occur during a specified historical time period to obtain historical timing data for the segments (305). The start time of the specified historical time period may be a default value or may be provided as part of the parameters of the original request (e.g., request 185 of fig. 1 or the parameters mentioned in step 205 of fig. 2). The duration of the specified historical time period may be a default value or may be provided as a parameter of the original request. The historical time period represents a period of time sufficient to train the predictive model. The duration of the historical time period should be a multiple of the duration of the evaluation interval used in the anomaly analysis of the process 300. The evaluation interval duration may be the same as or different from the test interval duration used to determine the anomaly candidates.
The system may determine an aggregate value for each evaluation duration in the historical timing data. Thus, for example, if the historical time period is three days and the evaluation duration is one hour, the system determines an aggregate value for each of the 72 hours in the three day time period. The 72 one hour periods with corresponding aggregate values are considered historical time series data for the segment. In some embodiments, the historical time period may be broken down; for example, a total of 36 hours including a week. The system may divide the historical timing data into a training portion (training data) and a retained portion (retained data) (310). Thus, the training portion may represent a first portion of historical timing data. The training data may represent most of the historical timing data. In some implementations, the parameters of the original request can include a percentage used to determine what percentage of historical timing data is retained data. The training data may be used to train the predictive model (315). The reserved portion may be used for evaluation and guided training. The predictive model may be any time-sequential predictive model. The predictive model may be any model suitable for the type of data being analyzed. Non-exclusive examples of predictive models include simple moving averages, LOESS, LOWESS, regression, and the like.
As part of evaluating the model, the system may calculate one or more training errors. The training error may be the median absolute percentage error (MdAPE). The training error may be a Relative Mean Deviation (RMD). The training error may be used to determine the quality of the prediction model. For example, the MdAPE error may be compared to a maximum MdAPE threshold, and if the MdAPE error meets or exceeds the threshold (320, yes), the error of the model is too high. Likewise, the RMD error may be compared to an RMD threshold. In some embodiments, the system may use both errors, and if both errors meet or exceed respective thresholds (320, yes), the predictive models may be too independent. In some embodiments, if one error meets or exceeds its threshold but the other error does not meet or exceed its threshold, the error of the model is not too high (320, no). In some embodiments, an error threshold or thresholds may be provided as a parameter with the original request.
In some embodiments, models with high errors are ignored and the system continues to analyze another abnormal candidate segment. In some embodiments, the system may decompose the dimensions in the segment and try again. For example, if the abnormal candidate segment has five dimensions but the resulting training model has high error (320, yes), the system may issue a new request and use three of the five dimensions. Reducing dimensionality may result in having more emerging candidates, which may result in more reliable patterns. However, such reprocessing is optional.
If the model is sufficiently deterministic (320, no), the system may calculate the actual value for the evaluation interval from the event index entry (325). In some implementations, this may be a query to the event repository for the most recent time period covered by the evaluation duration. In some embodiments, it may cover the most recent time period. In some implementations, queries that return historical time-series data also return data points used to calculate actual values. The actual value also represents an aggregate value, such as a count or average over a time period represented by the evaluation interval.
The system also obtains a prediction value from the predictive model (330). The system then compares the predicted value to the actual value to determine if the actual value is within a predetermined range of the predicted value (335). If the actual value is outside the predetermined range (335, NO), the candidate segment is considered an anomalous segment and is provided to the requesting process (340). The predetermined range may depend on a number of factors. One factor may be the maximum change or max _ delta. The maximum change may be a default value or may be a parameter by the requesting process.
Another factor is the confidence interval calculated using the log accuracy ratio of the prediction model. For each evaluation interval time in the retained portion of the historical time series, the log accuracy ratio may be in | ln (hardout)val)/(forecastval) And | represents. HoldoutvalIs a value from an evaluation interval in a reserved portion of historical time series data, and is forecastvalIs the predicted value for that interval from the prediction model. In some embodiments, additional weights may be added to avoid empty time buckets. In this case, the log accuracy ratio can be expressed as | ln (hardout)val+extra_weight)/(forecastval+ extra _ weight) |. The extra _ weight may reflect the magnitude of the change that is considered an anomaly. In other words, the extra _ weight parameter controls the sensitivity of anomaly detection. For example, the system may use the extra _ weight of (1.0) when relatively small changes may be considered exceptions. When small changes are not considered as exceptions, the system may use a larger additional weight, such as 100 or 1000. The log accuracy ratio may be calculated for each evaluation interval in the retained data. This provides for distribution of the retained data.
The log precision ratio distribution may be used to determine a confidence interval. The confidence interval is a range of values within which the predictive model has a high percentage of confidence (e.g., 90%, 95%, or 99%) that the actual value falls. The system may use the upper limit of the confidence interval (ci _ upper) to determine whether the actual value falls within a predetermined range of the predicted value, or in other words within the variance of the predicted value. In some embodiments, when e ^ ci_upper*forecastval>actualvalMax delta, the system may determine a predicted value (forecast)val) At the actual value (actual)val) Is outside the predetermined range. In some embodiments, when actualval<(e^ci_upper*forecastval) At/max _ delta, the system may determine that the predicted value is outside of a predetermined range of actual values. In some embodiments, if either test is true, the system determines that the predicted value is outside of a predetermined range of actual values. In some embodiments, additional weights may be used to avoid empty time buckets, e.g., e ^ ci _ upper ^ eval+extra_weight)>(actualval+ extra _ weight) max _ delta or (actual)val+extra_weight)<(e^ci_upper*(forecastval+extra_weight))/max_delta。
The system repeats this process for each anomalous candidate segment. Because process 300 is performed only for a small subset of possible segments in the event repository, process 300 may be performed in real-time for previously unspecified segments. In other words, the computationally expensive step of generating the prediction model is only performed after a coarser granularity of the candidate selection process that can be performed quickly. The process 300 may also be performed efficiently as a batch process, and may be performed without a candidate selection process (i.e., all segments identified at step 225 of FIG. 2). In some embodiments, process 300 is optional, and other methods of evaluating an anomaly candidate may be used.
FIG. 4 illustrates an example event repository, while FIG. 5 illustrates example requests, such as request 585(a) and request 585(b), and a candidate selection process for the request. Fig. 4 and 5 are provided for ease of discussion and illustration, and are in no way limiting. In the example of FIG. 4, three leaf servers 414 are shown for simplicity. Leaf server 414 is similar to leaf server 114 of FIG. 1, and root server 410 is similar to root server 110 of FIG. 1. Each leaf server stores a slice of the event repository, such as index event 415. In this example, three dimensions are recorded as part of a possible event; pressure, temperature and volume. In the example of fig. 4, each event data Pint (Pint)420 in the index 415 has a dimension label and an associated time (e.g., T1, T2, T3, etc.). A count of one (1) is assumed for each instance in the index.
In fig. 5, the requesting process provides three parameters as part of request 585 (a); two dimensions and a test interval. Request 585(a) may provide other parameters (not shown). The system may use two dimensions to retrieve event data points 420 from an index 415 that matches the dimensions of temperature and pressure. The system may obtain events, e.g., event data points 420, that occur in test intervals of one hour duration (e.g., T1) and eight reference durations (e.g., T2 to T9). For ease of illustration, the times of the event data points 420 are shown in FIG. 4 as the intervals to which they belong rather than as timestamps.
For example, for test interval T1, root 410 receives pressure dimension events labeled 110 from leaves 414(1) and 414 (2). Root 410 also receives a temperature dimension event labeled 37 for test interval T1. The root 410 (or another server) performs n-way merging of responses and calculates the aggregate value of two (2) for the combination of < temperature-37, pressure-110 > for the test interval T1. The aggregate value represents the count of occurrences of fragment < temperature-37 and pressure-110 > in test interval T1. Similarly, a root. In a similar manner, for reference interval T3, root 410 receives two dimensional labels for the pressure dimension and two dimensional labels for the temperature dimension. This means that the n-way merge results in a cross-product (cross-product) of dimension labels, each with a total count of one (1).
In the example of fig. 4, there is one pressure dimension event in time interval T2, but no corresponding temperature dimension. T2 has no valid fragment because there is no label in the temperature dimension. This is considered an empty reference interval. The segment 505 is generated 520 as a result of the n-way merge of the remaining reference intervals. The system may select the first two segments. Segments 505 and 510 were chosen because their overall incidence is higher than segments 515 and 520. The system compares the aggregate value of the test interval (T1) with the aggregate value of the reference interval for each of the first 2 segments. For example, the system may consider segment 510 to be an anomalous candidate segment because it lacks aggregation in test interval T1. The segment 505 has an aggregate value in T1, but because the value is the same as that in T7, the segment 505 is not considered an abnormal candidate. Thus, only the segment 510 is an anomaly candidate and is further evaluated (e.g., generating a predictive model and comparing the predicted value to the actual value from the event index 415). If further analysis indicates that segment 510 represents an anomaly, then segments, i.e., < temperature 17 and pressure 17> are provided to the requesting process.
In the second example of fig. 5, the request process provides only one dimension as a parameter. As a result of the n-way merge, fragments 550, 555, and 560 are provided. Selecting the first two segments results in segments 555 and 560 being considered for outlier candidates. Only segment 560 was selected because it lacks the value of test interval T1. Thus, as described herein, only segment 560 is an aberrant candidate segment and is presented for further analysis.
Fig. 6 illustrates an example of a general purpose computer device 600, which may be the system 100 of fig. 1, that may be used with the techniques described herein. Computing device 600 is intended to represent various example forms of computing devices, such as laptops, desktops, workstations, personal digital assistants, cellular telephones, smartphones, tablets, servers, and other computing devices, including wearable devices. The components shown herein, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit embodiments of the inventions described and/or claimed in this document.
The processor 602 may process instructions for execution within the computing device 600, including instructions stored in the memory 604 or on the storage device 606, to display graphical information for a GUI on an external input/output device, such as the display 616. The display 616 may be a monitor or a flat touch screen display. In some embodiments, multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory. Moreover, multiple computing devices 600 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).
The memory 604 stores information within the computing device 600. In one implementation, the memory 604 is a volatile memory unit or units. In another implementation, the memory 604 is a non-volatile memory unit or units. The memory 604 may also be another form of computer-readable medium, such as a magnetic or optical disk. In some implementations, the memory 604 may include expansion memory provided through an expansion interface.
The storage device 606 is capable of providing large volumes of storage for the computing device 600. In one implementation, the storage device 606 may be or include a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations. A computer program product may be tangibly embodied in such a computer-readable medium. The computer program product may also include instructions that, when executed, perform one or more methods, such as those described above. The computer-or machine-readable medium is a storage device such as the memory 604, the storage device 606, or memory on the processor 602.
The interface 608 may be a high-speed controller that manages bandwidth-intensive operations for the computing device 600, or a low-speed controller that manages lower bandwidth-intensive operations, or a combination of such controllers. An external interface 640 may be provided to enable near field communication of device 600 with other devices. In some implementations, controller 608 may be coupled to storage 606 and expansion ports 614. An expansion port, which may include various communication ports (e.g., USB, bluetooth, ethernet, wireless ethernet) may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, for example, through a network adapter.
Fig. 7 illustrates an example of a general purpose computer device 700, which may be the system 100 of fig. 1, that may be used with the techniques described herein. Computing device 700 is intended to represent various example forms of large-scale data processing devices, such as servers, blade servers, data centers, mainframes, and other large-scale computing devices. The computing device 700 may be a distributed system with multiple processors, possibly including network attached storage nodes interconnected by one or more communication networks. The components shown herein, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit embodiments of the inventions described and/or claimed in this document.
The distributed computing system 700 may include any number of computing devices 780. Computing device 780 may include a server or rack server, mainframe, etc. that communicates over a local or wide area network, dedicated optical link, modem, bridge, router, switch, wired or wireless network, etc.
In some implementations, each computing device may include multiple racks. For example, the computing device 780a includes a plurality of racks 758a-758 n. Each rack may include one or more processors, such as processors 752a-752n and 762a-762 n. The processor may include a data processor, a network attached storage device, and other computer controlled devices. In some embodiments, one processor may operate as a master processor and control scheduling and data distribution tasks. The processors may be interconnected by one or more rack switches 758, and one or more racks may be connected by a switch 778. The switch 778 may handle communications between multiple connected computing devices 700.
Each rack may include storage, such as storage 754 and storage 764, and storage, such as 756 and 766. The memories 756 and 766 may provide bulk storage and may include volatile or non-volatile storage, such as network-attached disks, floppy disks, hard disks, optical disks, tapes, flash memory or other similar solid-state memory devices, or an array of devices, including devices in a storage area network or other configurations. The memory 756 or 766 may be shared among multiple processors, multiple racks, or multiple computing devices, and may include a computer-readable medium storing instructions executable by one or more of the processors. The memories 754 and 764 may include, for example, one or more volatile memory units, one or more non-volatile memory units, and/or other forms of computer-readable media, such as magnetic or optical disks, flash memory, cache, Random Access Memory (RAM), Read Only Memory (ROM), and combinations thereof. A memory, such as memory 754, may also be shared among the processors 752a-752 n. Data structures, such as indices, may be stored in, for example, the memory 756 and the memory 754. Computing device 700 may include other components not shown, such as controllers, buses, input/output devices, communication modules, and so forth.
An entire system, such as system 100, may be made up of multiple computing devices 700 in communication with each other. For example, device 780a may communicate with devices 780b, 780c, and 780d, and these devices may be collectively referred to as system 100. As another example, the system 100 of fig. 1 may include one or more computing devices 700. Some computing devices may be geographically close to each other, while other computing devices may be geographically distant. The layout of system 700 is merely an example, and the system may assume other layouts or configurations.
According to one aspect, a method for identifying exceptional events includes obtaining, from an event index associating a timestamp with a dimension tag and an aggregate value of the timestamp, a set of data points from the index having dimensions that match a query dimension of one or more query dimensions and having timestamps within a reference interval of a test interval or a plurality of reference intervals, wherein the one or more query dimensions define a combination of dimensions. The method further comprises the following steps: for each reference interval of the plurality of reference intervals and each unique segment in the test interval, a respective aggregate value is calculated. The unique segment may be a combination of unique dimensional label combinations from the set of data points that match the dimensional combination of the query. The method further includes identifying an abnormal candidate segment by determining, for at least some of the unique segments, that the unique segment occurs in at least one reference interval but not in the test interval, or that the unique segment occurs in all of the reference intervals and test intervals, and that relative changes between the aggregate value of the test intervals and the corresponding aggregate value of the human one of the plurality of reference intervals satisfy a relative change threshold. The method also includes, for each abnormal candidate segment, generating a prediction model from a historical timing obtained from an event index, the historical timing being an index entry having a dimension tag matching the dimension tag of the abnormal candidate segment, determining an actual value of an evaluation interval of the abnormal candidate segment using data from the event index, obtaining a predicted value of the abnormal candidate segment from the prediction model, and reporting the abnormal candidate segment as an abnormal segment in response to determining that the predicted value is outside a predetermined range of the actual value.
These and other aspects may include one or more of the following, alone or in combination. For example, at least some of the unique segments evaluated for an anomaly candidate may be a predetermined number of segments that are most frequently occurring within the test interval and the plurality of reference intervals. As another example, the one or more query dimensions and the test interval may be obtained from a requesting process via an API, and reporting an exception candidate segment as an exception segment may include reporting the dimension label of an exception segment. As another example, for a reference interval, a relative change between the aggregate value of the test interval and the respective aggregate value of the reference interval satisfies a relative change threshold, the unique segment may also be identified as an abnormal candidate segment in response to determining that an absolute change between an aggregate value of a test interval and the respective aggregate value of the reference interval satisfies an absolute change threshold. As another example, the aggregate value may be a count. In some implementations, the count is implied in the event index, and each timestamp is a count of one of each dimension tag.
As another example, the test interval has a test interval duration and each of the plurality of reference intervals has an associated duration that is a multiple of the test interval duration. In some embodiments, for a reference interval having a duration longer than the test interval duration, the average of the aggregate values is calculated for each of the test interval durations in the duration of the reference interval. As another example, the predictive model may be one of a linear regression model, a moving average model, or a local estimation scatter plot smoothing (LOESS) model. As another example, the historical timing may include training data and retained data, and generating the predictive model may include evaluating an accuracy of the predictive model using the retained data, and the predetermined range depends on the accuracy of the predictive model. In some embodiments, determining that the predicted value is outside of the predetermined range of actual values may include calculating an error on the retained data using a log-accuracy ratio and determining a confidence threshold c by determining a confidence interval from a distribution of the error on the retained data. The predetermined range may be based on a confidence threshold c. In some embodiments, determining that the predicted value is outside of the predetermined range of the retained data comprises: obtaining a maximum difference threshold d and obtaining an extra weight w; in response to determining c (forecast)val+w)＞(actualval+ w) d, determining that the predicted value is outside a predetermined range, wherein forecastvali is a predicted value and actualvalIs an actual value, and is responsive to determining actualval+w＜(c*(forecastval+ w))/d, determining the predicted value to be in a predetermined rangeOutside the enclosure. As another example, obtaining an index entry for an interval may include a root server sending a request to a plurality of leaf servers identifying the one or more query dimensions and the interval, searching, at each leaf server of the plurality of leaf servers, for an event index entry having a dimension that matches a query dimension of the one or more query dimensions and the event index entry having a timestamp within the interval, and providing, by each leaf server of the plurality of leaf servers, to the root server each response index entry including a tag of the matching dimension, the timestamp, and the aggregate value.
According to one aspect, a method may include receiving at least one dimension, a test duration, a test start time, a reference start time, and a historical duration from a requesting program, the test start time and the test duration defining a test interval, determining at least one reference interval based on the reference start time and the test duration, wherein the duration of each reference interval is a multiple of the test duration, and obtaining an event from an index of events, the event being responsive to the at least one dimension and having a timestamp within the test interval or within the at least one reference interval at the event. The method may further comprise: for each unique segment in each of the at least one reference interval and the test interval, calculating a respective aggregate value, a unique segment being a unique combination of dimension labels from the response event; for each of at least some of the unique segments, identifying an anomalous candidate segment by comparing the aggregate value in the test interval to the aggregate value in the at least one reference interval; and for each anomalous candidate segment, building a predictive model of the anomalous candidate segment based on events from the index of events occurring over a historical duration; comparing a predicted value obtained from the prediction model with an actual value of an abnormal candidate segment; and reporting the abnormal candidate segment as an abnormal segment in response to determining that the comparison indicates that the actual value differs from the predicted value by at least a predetermined amount beyond a confidence interval.
These and other aspects may include one or more of the following, alone or in combination. For example, building a predictive model for an anomaly candidate segment may include obtaining a historical timing from an index of events that have dimension labels that match the dimension labels of the anomaly candidate segment and the events have timestamps within the historical duration, and training the predictive model using a first portion of the historical timing. In some embodiments, constructing a predictive model for the anomaly candidate segment includes determining the confidence interval based on a remainder of the historical timing. As another example, the predetermined amount may be received from a requesting program. As another example, the reference start time is a reference age, and the at least one reference time period is also received from the requesting program, and determining the at least one reference interval based on the reference start time and the test duration includes determining the start time of the at least one reference interval by subtracting the reference age from the test start time. Calculating the respective aggregate value for the reference interval may include: for each test duration in the at least one reference period, calculating an interval aggregation value; and calculating the respective aggregate values as an average of the interval aggregate values. As another example, receiving a reference epoch from the requesting program, and calculating a respective aggregated value for at least one reference interval may include: for each test duration in the reference period, a span aggregate value is calculated, and the respective aggregate value is calculated as an average of the span aggregate values.
According to one aspect, a method includes receiving parameters from a requesting process, the parameters identifying at least one dimension of an event, the event captured in an event repository, a test start time, and a test duration. The method may further include identifying from the event repository a set of events for at least one dimension, the set including events occurring within a test interval defined by a test start time and a test duration and the set including events occurring within at least two reference intervals, the reference intervals occurring before the test interval and having respective durations that are multiples of the test duration. The method may further include generating, for each of the test interval and the at least two reference intervals, an aggregate value for each unique combination of dimensional values in a set of events occurring in the interval, selecting at least one of the unique combinations of dimensional values for anomaly detection based on a comparison of the aggregate values for the reference interval and the test interval, and performing anomaly detection on a historical timing of the selected unique combination of dimensional values. The method may include reporting a resultant anomaly of the anomaly detection in response to the anomaly detection indicating that the selected unique combination of the dimension values has an anomaly.
These and other aspects may include one or more of the following, alone or in combination. For example, the parameter may identify two dimensions, and generating the aggregated value for an interval may include including, in a unique combination of dimensional values, a cross product of dimensional values that exist in a set of events occurring within the interval for each of the two dimensions. In some embodiments, the aggregate value is a count, and each dimension value with a unique timestamp is an input to the cross-product, each cross-product resulting in a count of 1. As another example, the method further includes selecting a predetermined number of unique combinations of dimensional values for anomaly detection, wherein the selected unique combinations have a highest occurrence rate within the event. As another example, performing anomaly detection may include: training a predictive model using historical timing; obtaining a predicted value from the prediction model; obtaining actual values for the unique combination of selected dimension values from an event repository; and indicating that the unique combination of selected dimension values has an anomaly in response to determining that the actual value exceeds the variance from the predicted value.
According to one aspect, a system comprises: at least one processor; means for querying an event index for events occurring in a specified interval for a specified dimension; means for generating a unique combination of dimension labels for events occurring in the specified interval; means for determining whether any of the unique segments are anomaly candidates; and means for evaluating the anomaly candidate using a predictive model.
According to one aspect, a system includes at least one processor and a memory storing instructions that, when executed by the at least one processor, cause the system to perform any of the methods disclosed herein.
The aspects and optional features of each aspect may be combined in any suitable manner. For example, optional embodiments of one aspect may be used with other aspects.
In addition to the above embodiments, the following embodiments are also innovative:
Embodiment 3 is the method of any one of embodiments 1-2, wherein obtaining one or more query dimensions and test intervals from the requesting process via the API, and reporting the exception candidate segment as an exception segment includes reporting a dimension tag of the exception segment.
Embodiment 5 is the method of any one of embodiments 1 to 4, wherein the aggregate value is a count.
Embodiment 6 is the method of embodiment 5, wherein a count is implied in the event index, each timestamp being a count for one of each dimension tag.
Embodiment 7 is the method of any one of embodiments 1-5, wherein the test interval has a test interval duration and each of the plurality of reference intervals has an associated duration that is a multiple of the test interval duration.
Embodiment 8 is the method of embodiment 7, wherein for a reference interval having a duration longer than the test interval duration, the average of the aggregated values is calculated for each of the test interval durations in the duration of the reference interval.
Embodiment 9 is the method of any one of embodiments 1-7, wherein the predictive model is one of a linear regression model, a moving average model, or a local estimation scatter plot smoothing (LOESS) model.
Embodiment 10 is the method of any one of embodiments 1-8, wherein the historical time series includes training data and retained data, and generating the predictive model includes using the retained data to evaluate an accuracy of the predictive model, and the predetermined range depends on the accuracy of the predictive model.
Embodiment 11 is the method of embodiment 10, wherein determining that the predicted value is outside of the predetermined range of actual values comprises: an error on the retained data is calculated using a logarithmic accuracy ratio, and a confidence threshold c is determined by determining a confidence interval from a distribution of the error on the retained data, wherein the predetermined range is based on the confidence threshold c.
Embodiment 12 is the method of embodiment 11, wherein determining that the predicted value is outside of the predetermined range of retained data comprises: obtaining a maximum difference threshold d; obtaining a predicted extra weight w; in response to determining c (forecast)val+w)＞(actualval+ w) d, determining that the predicted value is outside the predetermined range, wherein forecastvalIs a predicted value and actualvalIs an actual value, and is responsive to determining actualval+w＜(c*(forecastval+ w))/d, determining that the predicted value is outside the predetermined range.
Embodiment 13 is the method of any one of embodiments 1-12, wherein obtaining an index entry for an interval comprises: the root server sends a request to a plurality of leaf servers identifying the one or more query dimensions and the interval, searches, at each of the plurality of leaf servers, for an event index entry having a dimension matching a query dimension of the one or more query dimensions and having a timestamp within the interval, and each of the plurality of leaf servers provides, to the root server, a response index entry, each response index entry including the tag, timestamp, and the aggregate value of the matching dimension.
Embodiment 14 is a method, comprising: receiving parameters from a requesting process, the parameters identifying at least one dimension of an event captured in an event repository, a test start time, and a test duration; identifying from the event repository a set of events for the at least one dimension, the set comprising events occurring within a test interval defined by the test start time and the test duration and comprising events occurring within at least two reference intervals, the reference intervals occurring before the test interval and having respective durations that are multiples of the test duration; for each of the test interval and the at least two reference intervals, generating an aggregate value for each unique combination of dimensional values in the set of events occurring in the interval; selecting at least one of the unique combinations of dimensional values for anomaly detection based on a comparison of the aggregated values for the reference interval and the test interval; and performing anomaly detection on the historical timing for the unique combination of selected dimension values; and reporting a result of the anomaly detection in response to the anomaly detection indicating that the selected unique combination of dimension values has an anomaly.
Embodiment 15 is the method of embodiment 14, wherein the parameter identifies two dimensions, and generating the aggregated value of intervals may include an interval that includes, in a unique combination of dimensional values, dimensional values that exist for events in a set of events that occur during the interval for each of the two dimensions.
Embodiment 16 is the method of embodiment 15, wherein the aggregate value is a count and each dimension value with a unique timestamp is counted as an input to an interval, and wherein each interval results in a count of 1.
Embodiment 17 is the method of embodiment 14, 15, or 16, further comprising: selecting a predetermined number of unique combinations of dimensional values for anomaly detection, wherein the selected unique combinations have a highest occurrence rate within the set of events.
Embodiment 18 is the method of any one of embodiments 12-17, wherein performing anomaly detection comprises: training a predictive model using historical timing; obtaining a predicted value from the prediction model; obtaining actual values for the unique combination of selected dimension values from an event repository; and indicating that the unique combination of selected dimension values has an anomaly in response to determining that the actual value exceeds the variance from the predicted value.
Various embodiments may include implementations in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
These computer programs (also known as programs, software applications or code) include machine instructions for a programmable processor, and may be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. As used herein, the terms "machine-readable medium," "computer-readable medium" refer to any non-transitory computer program product, apparatus and/or Device (e.g., magnetic discs, optical disks, memory (including read-access memory), Programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a Programmable processor.
The systems and techniques described here can be implemented in a computing system that includes a back-end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front-end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network ("LAN"), a wide area network ("WAN"), and the internet.
The computing system may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
A number of embodiments have been described. Nevertheless, various modifications may be made without departing from the spirit and scope of the disclosure. In addition, the logic flows depicted in the figures do not require the particular order shown, or sequential order, to achieve desirable results. In addition, other steps may be provided, or steps may be eliminated, from the described flows, and other components may be added to, or removed from, the described systems. Accordingly, other implementations are within the scope of the following claims.
Claims (25)
1. A method for identifying an abnormal event, the method comprising:
obtaining a set of data points from the indexed event from an event index associating timestamps with dimension labels and aggregate values of the timestamps, the set of data points having dimensions that match a query dimension of one or more query dimensions and having timestamps within a reference interval of a test interval or a plurality of reference intervals, wherein the one or more query dimensions define a combination of dimensions;
for each reference interval of the plurality of reference intervals and each unique segment of the test interval, a respective aggregate value is calculated, a unique segment being a combination of unique combinations of dimension labels from the set of data points that match the combination of dimensions of the query;
for at least some of the unique segments, identifying an anomaly candidate by determining:
the unique fragment occurs in at least one reference interval, but not in the test interval, or
The unique segments occur in all of the reference intervals and the test intervals, and a relative change between the aggregate value of the test interval and a corresponding aggregate value of any of the plurality of reference intervals satisfies a relative change threshold; and
for each anomalous candidate segment:
generating a prediction model from historical timing obtained from the event index, the historical timing being an index entry having a dimension tag that matches the dimension tag of the abnormal candidate segment,
determining an actual value of an evaluation interval of the anomaly candidate segment using data from the event index,
obtaining a prediction value of the abnormal candidate segment from the prediction model, an
Reporting the outlier candidate segment as an outlier segment in response to determining that the predicted value is outside of a predetermined range of the actual value.
2. The method of claim 1, wherein the at least some unique segments evaluated as anomaly candidates are a predetermined number of segments with the highest frequency of occurrence within the test interval and the plurality of reference intervals.
3. The method of claim 1 or 2, wherein obtaining the one or more query dimensions and the test interval from a requesting process via an API, and reporting the anomaly candidate segment as an anomaly segment comprises reporting the dimension label of the anomaly segment.
4. The method of claim 1, 2 or 3, wherein for a reference interval, a relative change between the aggregate value of the test interval and the corresponding aggregate value of the reference interval satisfies a relative change threshold, and wherein the unique segment is identified as an abnormal candidate segment in response to also determining that an absolute change between the aggregate value of the test interval and the corresponding aggregate value of the reference interval satisfies an absolute change threshold.
5. The method of any preceding claim, wherein the aggregate value is a count.
6. The method of claim 5, wherein the count is implied in the event index and each timestamp is a count of one of each dimension tag.
7. The method of any preceding claim, wherein the test interval has a test interval duration and each of the plurality of reference intervals has an associated duration that is a multiple of the test interval duration.
8. The method according to claim 7, characterized in that for a reference interval having a duration longer than the duration of the test interval, the average of the aggregated values is calculated for each of the duration of the reference interval.
9. The method of any preceding claim, wherein the predictive model is one of a linear regression model, a moving average model, or a locally estimated scatter plot smoothing (LOESS) model.
10. The method of any preceding claim, wherein the historical timing comprises training data and retention data, and generating the predictive model comprises using the retention data to evaluate an accuracy of the predictive model, and the predetermined range is dependent on the accuracy of the predictive model.
11. The method of claim 10, wherein determining that the predicted value is outside of the predetermined range of the actual value comprises:
calculating an error on the retained data using a logarithmic accuracy ratio; and
determining a confidence threshold c by determining a confidence interval from the distribution of the error over the retained data,
wherein the predetermined range is based on the confidence threshold c.
12. The method of claim 11, wherein determining that the predicted value is outside of the predetermined range of the retained data comprises:
obtaining a maximum difference threshold d;
obtaining a predicted additional weight w;
in response to determining c (forecast)val+w)＞(actualval+ w) d, determining that said predicted value is outside said predetermined range, wherein forecastvalIs the predicted value and actualvalIs the actual value, and
in response to determining actualval+w＜(c*(forecastval+ w))/d, determining that the predicted value is outside the predetermined value range.
13. The method of any preceding claim, wherein obtaining an index entry for an interval comprises:
the root server sends a request to a plurality of leaf servers identifying the one or more query dimensions and intervals,
searching for an event index entry at each of the plurality of leaf servers, the event index entry having a dimension that matches a query dimension of the one or more query dimensions, and the event index entry having a timestamp within the interval, an
Each leaf server of the plurality of leaf servers provides a response index entry to the root server, each response index entry including the tag, the timestamp, and the aggregate value for the matching dimension.
14. A method, characterized in that the method comprises:
receiving at least one dimension, a test duration, a test start time, a reference start time, and a history duration from a requesting program, the test start time and the test duration defining a test interval;
determining at least one reference interval based on the reference start time and the test duration, wherein the duration of each reference interval is a multiple of the test duration;
obtaining an event from an index of events, the event being responsive to the at least one dimension and the event having a timestamp within the test interval or within the at least one reference interval;
for each of the at least one reference interval and each unique segment in the test interval, computing a respective aggregate value, a unique segment being a unique combination of dimension labels from the response event;
for each of at least some of the unique segments, identifying an anomalous candidate segment by comparing the aggregate value in the test interval to the aggregate value in the at least one reference interval; and
for each anomalous candidate segment:
building a predictive model of the anomalous candidate segment based on events from an event index occurring over the historical duration,
comparing a predicted value obtained from the prediction model with an actual value of the abnormal candidate segment, and
reporting the abnormal candidate segment as an abnormal segment in response to determining that the comparison indicates that the actual value differs from the predicted value by at least a predetermined amount beyond a confidence interval.
15. The method of claim 14, wherein constructing the predictive model for the abnormal candidate segment comprises:
obtaining a historical timing from the event index, the historical timing being an event having a dimension tag that matches the dimension tag of the anomaly candidate segment, and the event having a timestamp within the historical duration; and
training a predictive model using a first portion of the historical timing.
16. The method of claim 15, wherein constructing the predictive model for the abnormal candidate segment comprises:
determining the confidence interval based on a remaining portion of the historical timing.
17. The method of claim 14, 15 or 16, wherein the predetermined amount is received from the requesting program.
18. The method of any one of claims 14 to 17, wherein the reference start time is a reference age, and further receiving at least one reference time period from the requesting procedure, and determining the at least one reference interval based on the reference start time and the test duration comprises:
determining a start time of the at least one reference time interval by subtracting the reference age from the test start time,
wherein calculating the respective aggregate value for the reference interval comprises:
calculating an interval aggregation value for each test duration in the at least one reference period, and
calculating the respective aggregate value as an average of the interval aggregate values.
19. The method of any one of claims 14 to 18, wherein a reference epoch is received from the requesting program, and wherein calculating the respective aggregated value for the at least one reference interval comprises:
calculating an interval aggregation value for each test duration in the reference period, and
calculating the respective aggregate value as an average of the interval aggregate values.
20. A method, comprising:
receiving parameters from a requesting process, the parameters identifying at least one dimension of an event captured in an event repository, a test start time, and a test duration;
identifying a set of events for at least one dimension from the event repository, the set comprising events occurring within a test interval defined by the test start time and the test duration, and the set comprising events occurring within at least two reference intervals, the reference intervals occurring before the test interval and having respective durations, the respective durations being multiples of the test duration;
for each of the test interval and the at least two reference intervals, generating an aggregate value for each unique combination of dimensional values in the set of events occurring in the interval;
selecting at least one of the unique combinations of dimensional values for anomaly detection based on a comparison of the aggregate values of the reference interval and the test interval;
performing anomaly detection on the historical timing of the selected unique combination of the dimensional values; and
reporting a result of the anomaly detection in response to the anomaly detection indicating that the selected unique combination of the dimension values has an anomaly.
21. The method of claim 20, wherein the parameters identify two dimensions and generating the aggregated value of intervals comprises:
including in the unique combination of dimension values a cross product of dimension values that exist in a set of events occurring within the interval for each of the two dimensions.
22. The method of claim 21, wherein the aggregate value is a count and each dimension value with a unique timestamp count is an input to the cross product, and wherein each cross product results in a count of 1.
23. The method of claim 20, 21 or 22, further comprising:
selecting a predetermined number of unique combinations of dimensional values for anomaly detection, wherein the selected unique combinations have a highest rate of occurrence within the set of events.
24. The method of any one of claims 20 to 23, wherein performing anomaly detection comprises:
training a predictive model using the historical timing;
obtaining a prediction value from the prediction model;
obtaining actual values for the unique combination of selected dimension values from the event repository; and
indicating that the selected unique combination of dimensional values has an anomaly in response to determining that the actual value exceeds the variance of the predicted value.
25. A system, comprising:
at least one processor; and
a memory storing instructions that, when executed by the at least one processor, cause the system to perform the method of any of claims 1 to 24.
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2019/052437 WO2021061090A1 (en) | 2019-09-23 | 2019-09-23 | Time-series anomaly detection using an inverted index |
Publications (1)
Publication Number | Publication Date |
---|---|
CN114365094A true CN114365094A (en) | 2022-04-15 |
Family
ID=68159159
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201980098834.1A Pending CN114365094A (en) | 2019-09-23 | 2019-09-23 | Timing anomaly detection using inverted indices |
Country Status (3)
Country | Link |
---|---|
US (1) | US20220245010A1 (en) |
CN (1) | CN114365094A (en) |
WO (1) | WO2021061090A1 (en) |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2023241484A1 (en) * | 2022-06-16 | 2023-12-21 | 中兴通讯股份有限公司 | Method for processing abnormal event, and electronic device and storage medium |
Families Citing this family (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP2022136708A (en) * | 2021-03-08 | 2022-09-21 | 富士通株式会社 | Information processing method and information processing program |
CN115829160B (en) * | 2022-12-29 | 2023-09-01 | 上海鼎茂信息技术有限公司 | Time sequence abnormality prediction method, device, equipment and storage medium |
CN117421610B (en) * | 2023-12-19 | 2024-03-15 | 山东德源电力科技股份有限公司 | Data anomaly analysis method for electric energy meter running state early warning |
Family Cites Families (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20160062950A1 (en) * | 2014-09-03 | 2016-03-03 | Google Inc. | Systems and methods for anomaly detection and guided analysis using structural time-series models |
US10504026B2 (en) * | 2015-12-01 | 2019-12-10 | Microsoft Technology Licensing, Llc | Statistical detection of site speed performance anomalies |
US10375098B2 (en) * | 2017-01-31 | 2019-08-06 | Splunk Inc. | Anomaly detection based on relationships between multiple time series |
US10423638B2 (en) | 2017-04-27 | 2019-09-24 | Google Llc | Cloud inference system |
-
2019
- 2019-09-23 US US17/596,155 patent/US20220245010A1/en active Pending
- 2019-09-23 CN CN201980098834.1A patent/CN114365094A/en active Pending
- 2019-09-23 WO PCT/US2019/052437 patent/WO2021061090A1/en active Application Filing
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2023241484A1 (en) * | 2022-06-16 | 2023-12-21 | 中兴通讯股份有限公司 | Method for processing abnormal event, and electronic device and storage medium |
Also Published As
Publication number | Publication date |
---|---|
US20220245010A1 (en) | 2022-08-04 |
WO2021061090A1 (en) | 2021-04-01 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10579494B2 (en) | Methods and systems for machine-learning-based resource prediction for resource allocation and anomaly detection | |
CN108052528B (en) | A kind of storage equipment timing classification method for early warning | |
CN114365094A (en) | Timing anomaly detection using inverted indices | |
CN105677538B (en) | A kind of cloud computing system self-adaptive monitoring method based on failure predication | |
CN103354924B (en) | For monitoring the method and system of performance indications | |
US10572512B2 (en) | Detection method and information processing device | |
US9639585B2 (en) | Database and method for evaluating data therefrom | |
US7225103B2 (en) | Automatic determination of high significance alert thresholds for system performance metrics using an exponentially tailed model | |
CN110413227B (en) | Method and system for predicting remaining service life of hard disk device on line | |
CN106030565B (en) | Use the computer performance prediction of search technique | |
CN111367747B (en) | Index abnormal detection early warning device based on time annotation | |
WO2012153400A1 (en) | Data processing system, data processing method, and program | |
CN104572795B (en) | Automatic generation and dynamic update of rules | |
WO2011036448A2 (en) | Database and method for evaluating data therefrom | |
US9116804B2 (en) | Transient detection for predictive health management of data processing systems | |
US20180307218A1 (en) | System and method for allocating machine behavioral models | |
JP6658507B2 (en) | Load estimation system, information processing device, load estimation method, and computer program | |
JP6252309B2 (en) | Monitoring omission identification processing program, monitoring omission identification processing method, and monitoring omission identification processing device | |
Lin et al. | An adaptive workload-aware power consumption measuring method for servers in cloud data centers | |
CN113742118A (en) | Method and system for detecting anomalies in a data pipeline | |
Zeydan et al. | Cloud 2 HDD: large-scale HDD data analysis on cloud for cloud datacenters | |
KR102184892B1 (en) | Realtime data quality management system for internet of things and method therefore | |
Agrawal et al. | Adaptive anomaly detection in cloud using robust and scalable principal component analysis | |
JP2015184818A (en) | Server, model application propriety determination method and computer program | |
Praveen Kumar et al. | An optimized fuzzy based FP-growth algorithm for mining temporal data |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |