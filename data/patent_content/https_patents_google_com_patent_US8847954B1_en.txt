US8847954B1 - Methods and systems to compute 3D surfaces - Google Patents
Methods and systems to compute 3D surfaces Download PDFInfo
- Publication number
- US8847954B1 US8847954B1 US13/311,243 US201113311243A US8847954B1 US 8847954 B1 US8847954 B1 US 8847954B1 US 201113311243 A US201113311243 A US 201113311243A US 8847954 B1 US8847954 B1 US 8847954B1
- Authority
- US
- United States
- Prior art keywords
- voxel
- voxels
- locations
- voxel grid
- computing
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related, expires
Links
- 238000000034 method Methods 0.000 title claims abstract description 18
- 238000004422 calculation algorithm Methods 0.000 claims description 10
- 238000012545 processing Methods 0.000 claims description 7
- 238000004590 computer program Methods 0.000 claims description 3
- 230000006870 function Effects 0.000 description 10
- 238000013459 approach Methods 0.000 description 4
- 238000004891 communication Methods 0.000 description 4
- 238000010586 diagram Methods 0.000 description 3
- 230000008901 benefit Effects 0.000 description 2
- 238000013507 mapping Methods 0.000 description 2
- 238000012986 modification Methods 0.000 description 2
- 230000004048 modification Effects 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 230000006978 adaptation Effects 0.000 description 1
- 238000004364 calculation method Methods 0.000 description 1
- 238000013500 data storage Methods 0.000 description 1
- 238000001514 detection method Methods 0.000 description 1
- 230000000694 effects Effects 0.000 description 1
- 238000007689 inspection Methods 0.000 description 1
- 238000004519 manufacturing process Methods 0.000 description 1
- 238000009877 rendering Methods 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T17/00—Three dimensional [3D] modelling, e.g. data description of 3D objects
- G06T17/05—Geographic models
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T7/00—Image analysis
- G06T7/50—Depth or shape recovery
- G06T7/55—Depth or shape recovery from multiple images
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T2207/00—Indexing scheme for image analysis or image enhancement
- G06T2207/10—Image acquisition modality
- G06T2207/10032—Satellite or aerial image; Remote sensing
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T2207/00—Indexing scheme for image analysis or image enhancement
- G06T2207/30—Subject of image; Context of image processing
- G06T2207/30181—Earth observation
- G06T2207/30184—Infrastructure
Definitions
- Embodiments generally relate to digital imagery and three dimensional (3D) surfaces.
- Stereo or the determination of 3D structure from multiple two dimensional (2D) images of a scene, is one of the fundamental problems of computer vision.
- 2D two dimensional
- Embodiments relate to computing 3D surfaces.
- An embodiment includes constructing a slanted voxel grid oriented in a direction between at least two camera locations, projecting images from respective camera locations onto the constructed voxel grid, calculating, for one or more voxels in the voxel grid, a magnitude of difference between pixels corresponding to respective projected images to provide a difference value for each of the one or more voxels, and computing a three dimensional surface passing through voxel locations corresponding to one or more calculated difference values of the one or more voxels.
- the three dimensional surface is computed as a surface passing through voxel locations corresponding to calculated difference values having lower magnitudes with respect to other calculated difference values.
- FIG. 1 illustrates a system for computing 3D surfaces, according to an embodiment.
- FIG. 2A illustrates an example conventional parameterization for wide-angle cameras.
- FIG. 2B illustrates an example conventional parameterization for high-altitude, downward-looking cameras.
- FIG. 2C illustrates an example parameterization for oblique-looking cameras using a slanted voxel grid, according to an embodiment.
- FIG. 3A illustrates an example slanted voxel grid cross-section of the slanted voxel grid of FIG. 2C , according to an embodiment.
- FIG. 3B illustrates voxel centers of voxels (of FIG. 3A ) at which difference values are calculated, according to an embodiment.
- FIG. 4 illustrates a diagram of a surface computer, according to an embodiment.
- FIG. 5A illustrates use of a conventional camera-aligned voxel grid (e.g., the voxel grid of FIG. 2A ) to compute a surface.
- a conventional camera-aligned voxel grid e.g., the voxel grid of FIG. 2A
- FIG. 5B illustrates photo-consistency signals on the conventional camera-aligned voxel grid of FIG. 5A .
- FIG. 5C illustrates a surface computed using the conventional camera-aligned voxel grid of FIG. 5A and photo-consistency signals of FIG. 5B .
- FIG. 5D illustrates an example surface computed using a slanted voxel grid, according to an embodiment.
- FIG. 6A illustrates a conventional world-aligned grid (e.g., the voxel grid of FIG. 2B ) having voxel lines parallel to the ground.
- a conventional world-aligned grid e.g., the voxel grid of FIG. 2B
- FIG. 6B illustrates photo-consistency signals on the conventional world-aligned voxel grid of FIG. 6A .
- FIG. 6C illustrates a surface computed using the conventional world-aligned voxel grid of FIG. 6A and photo-consistency signals of FIG. 6B .
- FIGS. 7A and 7B are example oblique aerial images, each captured from slightly different viewpoints that not only point downwards, but are also inclined to a side.
- FIGS. 8A-8C illustrate example projections of images to horizontal slices of a slanted voxel grid, according to an embodiment.
- FIGS. 9A-9E illustrate screenshots and wireframes of computed surfaces, according to an embodiment.
- FIG. 10 is a flowchart illustrating an exemplary overall operation for computing a 3D surface, according to an embodiment.
- FIG. 11 illustrates an example computer useful for implementing components of embodiments.
- Embodiments relate to computing 3D surfaces.
- An embodiment includes constructing a slanted voxel grid oriented in a direction between at least two camera locations (e.g., a direction towards the center of at least two camera locations) and projecting images from respective camera locations onto the constructed voxel grid.
- the projected images can be oblique aerial images, including one or more structures (e.g., buildings), captured from marginally different viewpoints.
- the embodiment proceeds by calculating, for one or more voxels in the voxel grid, a magnitude of difference between pixels corresponding to respective projected images to provide a difference value for each of the one or more voxels.
- a three dimensional surface is computed that passes through voxel locations corresponding to one or more calculated difference values of the one or more voxels.
- the one or more difference values used to compute the 3D surface have lower magnitudes (or lower photo-consistency errors) with respect to other computed difference values.
- embodiments accurately reconstruct smooth 3D surfaces representing structures (e.g., buildings) from oblique (or slanted) aerial imagery, i.e., imagery that is captured from a viewpoint that not only points downwards but is also inclined to a side (e.g., oblique images of FIGS. 7A and 7B ).
- FIG. 1 is a diagram of system 100 for computing 3D surfaces, according to an embodiment. While the following is described in terms of aerial and oblique imagery, the embodiments are not limited to such imagery and the techniques described herein and can be applied to any other form of imagery and data, including, but not limited to, non-aerial imagery, imagery captured from any orientation/direction, oceanic imagery, geographic and terrain imagery, astronomical imagery, extraterrestrial imagery, or any combination thereof. The embodiments are applicable to any system having generally the structure of FIG. 1 , or that would benefit from the operation, methods and functions as described herein.
- System 100 includes voxel grid constructor 120 , image projector 130 and surface computer 140 .
- voxel grid constructor 120 is configured to construct a slanted voxel grid oriented in a direction between at least two camera locations.
- image projector 130 is configured to project images 110 A-N (e.g., oblique aerial images) from respective camera locations onto the constructed voxel grid.
- surface computer 140 is configured to calculate, for one or more voxels in the voxel grid, a magnitude of difference between pixels corresponding to respective projected images 110 A-N to provide a difference value for each of the one or more voxels, and compute a three dimensional surface passing through voxel locations corresponding to one or more calculated difference values of the one or more voxels. It is to be appreciated that calculation of a difference value is not limited to a magnitude of difference between pixel values, and the difference value may be computed by any other technique known to those skilled in the art.
- surface computer 140 computes the three dimensional surface as a surface passing through voxel locations corresponding to calculated difference values having lower magnitudes with respect to other calculated difference values.
- embodiments accurately reconstruct smooth 3D surfaces representing structures (e.g., buildings) from oblique imagery, i.e., imagery that is captured from a viewpoint that not only points downwards but is also inclined to a side (e.g., oblique images of FIGS. 7A and 7B ).
- voxel grid constructor 120 , image projector 130 and surface computer 140 can each be any type of processing (or computing) device having one or more processors and memory for storage.
- voxel grid constructor 120 , image projector 130 and surface computer 140 can each be implemented as a workstation, mobile device (such as a mobile phone tablet or laptop), computer, cluster of computers, set-top box, embedded system, console, or other device having at least one processor.
- a processing device may include software, firmware, hardware, or a combination thereof.
- Software may include one or more applications and an operating system.
- Hardware can include, but is not limited to, a processor, memory and graphical user interface display.
- Voxel grid constructor 120 , image projector 130 and surface computer 140 may also be implemented in a cloud or distributed computing infrastructure, at a client or server or any combination thereof. The operation of voxel grid constructor 120 , image projector 130 and surface computer 140 is described further below.
- 3D space may be parameterized as (x,y,d), where (x,y) are image coordinates for a “base camera,” and (d) is disparity or inverse scene depth.
- the base camera can coincide with a real-world “inspection camera” that provides at least one of input images, or it can be a separate virtual camera.
- a specification of the base camera determines a mapping between physical (or real-world) space and the (x,y,d) parameter space in which computations can be performed.
- 3D space parameterization corresponds to a real or virtual camera.
- FIG. 2A illustrates a conventional parameterization for wide-angle cameras (e.g., cameras for vision-based obstacle detection for mobile robots or automated cars) that correspond to a virtual but otherwise identical camera placed between the two real-world cameras (e.g., two aerial oblique looking cameras).
- FIG. 2B illustrates a conventional parameterization for high-altitude, downward-looking cameras (e.g., cameras for classical photogrammetry) that corresponds to an ideal orthographic camera.
- embodiments enable parameterization (e.g., (x,y,d) parameterization) of 3D space to be defined arbitrarily by constructing a slanted voxel grid.
- FIG. 2C illustrates an example parameterization for oblique-looking cameras (e.g., mid-altitude oblique looking cameras) using a slanted voxel grid, according to an embodiment.
- oblique-looking cameras e.g., mid-altitude oblique looking cameras
- a slanted voxel grid for projection of imagery, embodiments accurately construct smooth 3D surfaces representing structures (e.g., buildings) from oblique aerial imagery (e.g., images of FIGS. 7A and 7B ).
- Embodiments can also be used to ortho-rectify (or geometrically correct) oblique aerial imagery for 2D mapping and 3D terrain viewing applications.
- FIG. 3A illustrates an example slanted voxel grid cross-section 302 (hereinafter “voxel grid 302 ”) of the slanted voxel grid of FIG. 2C , according to an embodiment.
- Voxel grid 302 also illustrates a plurality of voxel cross-sections 310 A-N (hereinafter “voxels 310 A-N”).
- FIG. 3A can be considered to represent a 2D cross-section of a 3D world and is used for the purposes of discussion and not limitation. Although the following is discussed with reference to cross-sectional FIG. 3A , it is to be appreciated that embodiments are not limited to operating on 2D cross-sections, but operate in 3D space (e.g., voxel grid of FIG. 2C ).
- FIG. 3A also illustrates two cameras, namely camera 304 and camera 306 that are oriented to capture oblique aerial imagery.
- cameras 304 and 306 are oriented in such a manner that the cameras capture imagery from marginally different viewpoints.
- FIG. 7A illustrates an image captured by camera 304
- FIG. 7B illustrates an image captured by camera 306 .
- slanted voxel grid 302 is constructed by voxel grid constructor 120 and is oriented in a direction between locations of camera 304 and camera 306 .
- image projector 130 is configured to project images, captured from cameras 304 and 306 , onto the constructed voxel grid 302 . Because cameras 304 and 306 can be oriented at slightly (or marginally) different viewpoints, image projector 130 can project one or more images, captured from different viewpoints, onto voxel grid 302 . In another non-limiting embodiment, image projector 130 may project one or more images, which may be captured from any respective viewpoint(s), onto voxel grid 302 .
- surface 308 represents surface geometry of a 3D structure (e.g., building on the ground) that appears in respective images captured by camera 304 or 306 that are projected onto slanted voxel grid 302 by image projector 130 .
- Surface 308 appearing in the projected images is approximated (or reconstructed into 3D space) by surface computer 140 , according to an embodiment.
- FIG. 4 illustrates a diagram of surface computer 140 , according to an embodiment.
- surface computer 140 is configured to construct smooth 3D surfaces representing structures (e.g., buildings) from oblique aerial imagery.
- surface computer includes difference determiner 410 and surface point determiner 420 .
- difference determiner 410 is configured to calculate, for one or more voxels 310 A-N in voxel grid 302 , a magnitude of difference between pixels corresponding to respective projected images to provide a difference value for each of the one or more voxels 310 A-N.
- the difference values are computed by difference determiner 410 at a center of each respective voxel 310 A-N in voxel grid 302 .
- points 320 A-N represent voxel centers of voxels 310 A-N at which difference values are calculated by difference determiner 410 . It is to be appreciated that difference determiner 410 is not limited to calculating difference values at centers of voxels 310 A-N and may compute difference values at any other location(s) within voxels 310 A-N.
- the one or more difference values calculated by difference determiner 410 are used by surface point determiner 420 to compute points corresponding to a three dimensional surface passing through voxel locations corresponding to the difference values.
- points 320 A-N may represent voxel locations corresponding to difference values having lower magnitudes with respect to other computed difference values. Because these difference values having lower magnitudes (or lower photo-consistency errors) with respect to other computed difference values, surface computer 140 determines that the points correspond to surface 308 of a 3D structure. In this way, by interpolating points representing voxel locations corresponding to lower difference values, surface computer can compute surface 324 as an approximation of surface 308 .
- surface point determiner 420 computes points 320 A-N that correspond to a three dimensional surface using a minimum-cut (“min-cut”) algorithm.
- the min-cut algorithm is configured to approximate a smooth surface passing through points 320 A-N.
- the center (i, j, k) of each voxel 310 A-N corresponds to a 3D world position W(i, j, k).
- W(i, j, k) corresponds to a 3D world position W(i, j, k).
- i, j and k to respectively index x/East, y/North, z/Up directions.
- i indexes to the right of a display screen
- j indexes into the display screen
- k indexes up on the display screen.
- embodiments estimate the similarity of parts of the images that seen (or are located at) world position W(i, j, k).
- the 3D world position W(i, j, k) is projected to the two images captured by cameras 304 and 306 by projections P 1 and P 2 to pixels p 1 i, j, k and p 2 i, j, k, respectively, where p 1 i, j, k and p 2 i, j, k are 2D image coordinates for the two images.
- the photo-consistency can be estimated by calculating a difference in value of the two pixels, i.e., pixels p 1 i, j, k and p 2 i, j, k, or the difference of the image in the neighborhood of the two pixels, or even a normalized cross correlation of the neighborhood of the two pixels.
- Normalized cross correlation is known to those skilled in the art and is a method used for template matching, a process used for finding incidences of a pattern or object within an image.
- difference determiner 410 determines a magnitude of the gradients of two images captured by cameras 304 and 306 , and calculates a difference between the determined magnitudes.
- E pv (i, j, k) represents an absolute value of difference in gradients between the images at the projected pixel locations p 1 i, j, k and p 2 i, j, k.
- the “pv” in the subscript of E pv (i, j, k) indicates that E pv (i, j, k) represents a per-voxel error measure.
- surface computer 140 generates a 3D surface that is a height-map relative to voxel grid 302 .
- surface computer 140 generates a 3D surface that passes once through each column of voxel grid 302 that is indexed by (i, j). The surface can then be described as a function S(i, j), and provides a value of the third index (k) for a given column.
- surface computer 140 generates a 3D surface that has low photo-consistency errors at surface points 320 A-N.
- surface computer 140 generates a smooth surface where a value of S(i, j) does not significantly deviate from another neighboring values of S(i, j).
- surface computer 140 computes a surface in a manner that minimizes smoothness function E s (S), where:
- E s (S) is a summation over all neighboring columns of voxel grid 302 , where the summation computes an absolute value of height differences representing a 3D surface that is a height-map relative to voxel grid 302 .
- encouraging a smaller Es(S) is equivalent to encouraging generation of a flat, horizontal surface.
- a flat, horizontal surface is referred to as a “prior.”
- surface computer 140 utilizes such a horizontal surface as a prior to compute surfaces constructed from aerial imagery. Because a flat, horizontal surface is utilized as a prior, a slanted voxel constructed in accordance with the embodiments enables generation of smoother and accurate surfaces compared to a conventional voxel grid.
- a photo-consistency error function E p (S) for a given surface can be expressed as:
- E p (S) represents a sum over all voxels in the surface of the per-voxel error, E pv (i,j,k), discussed above.
- surface computer 140 applies a min-cut algorithm to a graph constructed based on voxel grid 302 .
- FIG. 5A illustrates use of a conventional camera-aligned voxel grid 502 (e.g., the voxel grid of FIG. 2A ) to compute surface 308 .
- camera-aligned voxel grid 502 unlike slanted voxel grid 302 , has voxel edges parallel to the plane of images captured by cameras 504 and 506 . In other words, the voxel edges are not parallel to voxel grid 502 .
- smoothness error E(S)
- E(S) can have a significant effect on determining location of surface 308 .
- the smoothness error encourages the surface to follow consistent altitudes in the voxel spaces (represented by diagonal voxel lines in FIG. 5A ).
- use of a conventional camera-aligned voxel grid 502 can result in computed surface 510 illustrated in FIG. 5C .
- FIG. 5D illustrates a surface 520 computed using slanted voxel grid 302 , according to an embodiment. Because many more surfaces captured in aerial images are horizontal to the ground rather than to an image plane, the computed 3D surface is more accurate.
- FIG. 6A illustrates a conventional world-aligned grid (e.g., the voxel grid of FIG. 2B ) having voxel lines parallel to the ground. Because voxel lines are parallel to the ground, the prior forces computed surface 608 to be horizontal (or parallel to the ground), an orientation that is more useful for computing surfaces appearing in aerial imagery. While the prior of voxel grid 602 can be considered to be useful for the purpose of computing horizontally oriented surfaces (e.g., surface 612 ), conventional voxel grid 602 suffers from another issue that affects accurate surface computation.
- FIG. 6A Referring to the cross-section of a conventional world-aligned voxel grid illustrated in FIG. 6A , note that because of the orientation of cameras 604 and 606 , there are voxel columns (i.e., to the left of the building) in which cameras 604 and 606 do not ‘see’ the surface. In other words, surfaces to the left of the building are occluded to cameras 604 and 606 . Because certain voxel columns are occluded from cameras 604 and 606 , there may not be height in these voxel columns where the visible surface causes photo-consistency error to be low. The lowest photo-consistency 620 may be in an arbitrary height as shown in FIG. 6B . It is to be appreciated that such occlusion does not occur for slanted grid of FIG. 2C .
- FIG. 6C Surface 622 computed using the conventional world-aligned grid of FIG. 6A is illustrated in FIG. 6C .
- the photo-consistency assumption is incorrect, and the features of the image lead to incorrectly computed surface 620 .
- FIGS. 7A and 7B are example oblique aerial images, 702 and 704 , each captured from slightly different viewpoints that not only point downwards but also inclined to a side.
- FIGS. 8A-8C illustrate example projections of images 702 and 704 to horizontal slices of a slanted voxel grid. Images illustrated on the left, i.e., 802 , 804 and 806 , illustrate an average of images 702 and 704 . Images illustrated on the right, i.e., 810 , 812 and 814 , illustrate a photo-consistency error between images 702 and 704 .
- FIGS. 8A-8C illustrate horizontal slices through three heights: at ground level, at a lower roof, and at a higher roof. Pixels representing voxels of a horizontal slice that are at a correct height will be in-focus (i.e., not blurred) in images 802 , 804 and 806 , and will have a lower photo-consistency error (i.e., appear darker) in images 810 , 812 and 814 .
- FIG. 8A at ground level, features on the ground are in focus. For example, consider the shadow pointed to by the arrow of images 802 and 810 in FIG. 8A .
- FIGS. 9A-9D illustrate screenshots of the surfaces computed from the images of FIGS. 8A-8C , according to an embodiment.
- FIGS. 9A-9D are example screenshots of a rendering of a wireframe mesh of a computed surface.
- FIG. 9A illustrates computed surface 904 , with imagery illustrated under surface 904 for contextual purposes.
- the underlying image of FIG. 9A and computed surface 904 may be displayed in a 3D terrain viewing application.
- computed surface 904 is illustrated as a wireframe, it is to be appreciated that when displayed, surface 904 may be appropriately textured in accordance with surrounding and underlying imagery.
- FIGS. 9B-9E illustrate surface 904 of FIG. 9A at successively, increasing zoom levels.
- FIG. 10 is a flowchart illustrating an exemplary overall operation for computing a 3D surface, according to an embodiment.
- Method 1000 begins with constructing a slanted voxel grid oriented in a direction between at least two camera locations (stage 1002 ). Method 1000 proceeds by projecting images from respective camera locations onto the constructed voxel grid (stage 1004 ). For one or more voxels in the voxel grid, a magnitude of difference between pixels corresponding to respective projected images are calculated to provide a difference value for each of the one or more voxels (stage 1006 ). Embodiments compute a three dimensional surface passing through voxel locations corresponding to one or more calculated difference values of the one or more voxels (step 1008 ).
- embodiments accurately reconstruct smooth 3D surfaces representing structures (e.g., buildings) from oblique (or slanted) aerial imagery, i.e., imagery that is captured from a viewpoint that not only points downwards but is also inclined to a side.
- system and components of embodiments described herein are implemented using well known computers, such as example computer 1102 shown in FIG. 11 .
- voxel grid constructor 120 , image projector 130 and surface computer 140 can be implemented using computer(s) 1102 .
- Computer 1102 can be any commercially available and well known computer capable of performing the functions described herein, such as computers available from International Business Machines, Apple, Sun, HP, Dell, Compaq, Cray, etc.
- Computer 1102 includes one or more processors (also called central processing units, or CPUs), such as a processor 1106 .
- processors also called central processing units, or CPUs
- Processor 1106 is connected to a communication infrastructure 1104 .
- Computer 1102 also includes a main or primary memory 1108 , such as random access memory (RAM).
- Primary memory 1108 has stored therein control logic 1168 A (computer software), and data.
- Computer 1102 also includes one or more secondary storage devices 1110 .
- Secondary storage devices 1110 include, for example, a hard disk drive 1112 and/or a removable storage device or drive 1114 , as well as other types of storage devices, such as memory cards and memory sticks.
- Removable storage drive 1114 represents a floppy disk drive, a magnetic tape drive, a compact disk drive, an optical storage device, tape backup, etc.
- Removable storage drive 1114 interacts with a removable storage unit 1116 .
- Removable storage unit 1116 includes a computer useable or readable storage medium 1164 A having stored therein computer software 1168 B (control logic) and/or data.
- Removable storage unit 1116 represents a floppy disk, magnetic tape, compact disk, DVD, optical storage disk, or any other computer data storage device.
- Removable storage drive 1114 reads from and/or writes to removable storage unit 1116 in a well known manner.
- Computer 1102 also includes input/output/display devices 1166 , such as monitors, keyboards, pointing devices, Bluetooth devices, etc.
- input/output/display devices 1166 such as monitors, keyboards, pointing devices, Bluetooth devices, etc.
- Computer 1102 further includes a communication or network interface 1118 .
- Network interface 1118 enables computer 1102 to communicate with remote devices.
- network interface 1118 allows computer 1102 to communicate over communication networks or mediums 1164 B (representing a form of a computer useable or readable medium), such as LANs, WANs, the Internet, etc.
- Network interface 1118 may interface with remote sites or networks via wired or wireless connections.
- Control logic 1168 C may be transmitted to and from computer 1102 via communication medium 1164 B.
- Any tangible apparatus or article of manufacture comprising a computer useable or readable medium having control logic (software) stored therein is referred to herein as a computer program product or program storage device.
- Embodiments can work with software, hardware, and/or operating system implementations other than those described herein. Any software, hardware, and operating system implementations suitable for performing the functions described herein can be used. Embodiments are applicable to both a client and to a server or a combination of both.
Abstract
Description
E pv(i,j,k)=|G 1(P 1(W(i,j,k)))−G 2(P 2(W(i,j,k)))| (1)
E(S)=E p(S)+E s(S) (4)
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/311,243 US8847954B1 (en) | 2011-12-05 | 2011-12-05 | Methods and systems to compute 3D surfaces |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/311,243 US8847954B1 (en) | 2011-12-05 | 2011-12-05 | Methods and systems to compute 3D surfaces |
Publications (1)
Publication Number | Publication Date |
---|---|
US8847954B1 true US8847954B1 (en) | 2014-09-30 |
Family
ID=51588186
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/311,243 Expired - Fee Related US8847954B1 (en) | 2011-12-05 | 2011-12-05 | Methods and systems to compute 3D surfaces |
Country Status (1)
Country | Link |
---|---|
US (1) | US8847954B1 (en) |
Cited By (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9938092B2 (en) * | 2014-10-03 | 2018-04-10 | Wynright Corporation | Perception-based robotic manipulation system and method for automated truck unloader that unloads/unpacks product from trailers and containers |
US10078333B1 (en) * | 2016-04-17 | 2018-09-18 | X Development Llc | Efficient mapping of robot environment |
CN112927363A (en) * | 2021-04-07 | 2021-06-08 | Oppo广东移动通信有限公司 | Voxel map construction method and device, computer readable medium and electronic equipment |
US11127201B2 (en) * | 2017-01-04 | 2021-09-21 | Gaia3D Inc. | Method for providing 3D GIS web services |
Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20090080798A1 (en) * | 2007-09-26 | 2009-03-26 | Ron Maurer | Processing an input image to reduce compression-related artifacts |
US20090110267A1 (en) * | 2007-09-21 | 2009-04-30 | The Regents Of The University Of California | Automated texture mapping system for 3D models |
-
2011
- 2011-12-05 US US13/311,243 patent/US8847954B1/en not_active Expired - Fee Related
Patent Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20090110267A1 (en) * | 2007-09-21 | 2009-04-30 | The Regents Of The University Of California | Automated texture mapping system for 3D models |
US20090080798A1 (en) * | 2007-09-26 | 2009-03-26 | Ron Maurer | Processing an input image to reduce compression-related artifacts |
Non-Patent Citations (7)
Title |
---|
Gallup, David, Jan-Michael Frahm, and Marc Pollefeys. "A heightmap model for efficient 3d reconstruction from street-level video.", 2010, Int. Conf. on 3D Data Processing, Visualization and Transmission. vol. 6; http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.187.6455&rep=rep1&type=pdf. * |
Goldluecke, Bastian, and Marcus Magnor, "Space-time isosurface evolution for temporally coherent 3D reconstruction.", Computer Vision and Pattern Recognition, 2004. CVPR 2004. Proceedings of the 2004 IEEE Computer Society Conference on. vol. 1. IEEE, 2004. * |
Hornung, Alexander, and Leif Kobbelt. "Robust and efficient photo-consistency estimation for volumetric 3d reconstruction.", 2006 Computer Vision-ECCV 2006. Springer Berlin Heidelberg. 179-190, http://link.springer.com/chapter/10.1007/11744047-14#. * |
Hornung, Alexander, and Leif Kobbelt. "Robust and efficient photo-consistency estimation for volumetric 3d reconstruction.", 2006 Computer Vision-ECCV 2006. Springer Berlin Heidelberg. 179-190, http://link.springer.com/chapter/10.1007/11744047—14#. * |
Paris, Sylvain, Francois X. Sillion, and Long Quan. "A surface reconstruction method using global graph cut optimization.", 2006, International Journal of Computer Vision 66.2 ,141-161 ,http://link.springer.com/article/10.1007/s11263-005-3953-x#page-1. * |
Yang, Ruigang, Marc Pollefeys, and Greg Welch. "Dealing with textureless regions and specular highlights-a progressive space carving scheme using a novel photo-consistency measure." Computer Vision, IEEE International Conference on. vol. 1. IEEE Computer Society, 2003. * |
Yang, Ruigang, Marc Pollefeys, and Greg Welch. "Dealing with textureless regions and specular highlights—a progressive space carving scheme using a novel photo-consistency measure." Computer Vision, IEEE International Conference on. vol. 1. IEEE Computer Society, 2003. * |
Cited By (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9938092B2 (en) * | 2014-10-03 | 2018-04-10 | Wynright Corporation | Perception-based robotic manipulation system and method for automated truck unloader that unloads/unpacks product from trailers and containers |
US10343858B2 (en) * | 2014-10-03 | 2019-07-09 | Wynright Corporation | Perception-based robotic manipulation system and method for automated truck unloader that unloads/unpacks product from trailers and containers |
US10633202B2 (en) * | 2014-10-03 | 2020-04-28 | Wynright Corporation | Perception-based robotic manipulation system and method for automated truck unloader that unloads/unpacks product from trailers and containers |
US11465864B2 (en) * | 2014-10-03 | 2022-10-11 | Wynright Corporation | Perception-based robotic manipulation system and method for automated truck unloader that unloads/unpacks product from trailers and containers |
US10078333B1 (en) * | 2016-04-17 | 2018-09-18 | X Development Llc | Efficient mapping of robot environment |
US11127201B2 (en) * | 2017-01-04 | 2021-09-21 | Gaia3D Inc. | Method for providing 3D GIS web services |
CN112927363A (en) * | 2021-04-07 | 2021-06-08 | Oppo广东移动通信有限公司 | Voxel map construction method and device, computer readable medium and electronic equipment |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9805505B2 (en) | Estimation of object properties in 3D world | |
US8447099B2 (en) | Forming 3D models using two images | |
US8452081B2 (en) | Forming 3D models using multiple images | |
US9811880B2 (en) | Backfilling points in a point cloud | |
JP5963353B2 (en) | Optical data processing apparatus, optical data processing system, optical data processing method, and optical data processing program | |
EP3182371B1 (en) | Threshold determination in for example a type ransac algorithm | |
US10249052B2 (en) | Stereo correspondence model fitting | |
EP3367334B1 (en) | Depth estimation method and depth estimation apparatus of multi-view images | |
US20110235897A1 (en) | Device and process for three-dimensional localization and pose estimation using stereo image, and computer-readable storage medium storing the program thereof | |
JP2018536915A (en) | Method and system for detecting and combining structural features in 3D reconstruction | |
US11170202B2 (en) | Apparatus and method for performing 3D estimation based on locally determined 3D information hypotheses | |
US9350969B2 (en) | Target region filling involving source regions, depth information, or occlusions | |
US8463024B1 (en) | Combining narrow-baseline and wide-baseline stereo for three-dimensional modeling | |
US9380286B2 (en) | Stereoscopic target region filling | |
US10783607B2 (en) | Method of acquiring optimized spherical image using multiple cameras | |
WO2015179216A1 (en) | Orthogonal and collaborative disparity decomposition | |
US8847954B1 (en) | Methods and systems to compute 3D surfaces | |
US20210209776A1 (en) | Method and device for depth image fusion and computer-readable storage medium | |
Oliveira et al. | Selective hole-filling for depth-image based rendering | |
Gadasin et al. | Reconstruction of a Three-Dimensional Scene from its Projections in Computer Vision Systems | |
Hou et al. | Planarity constrained multi-view depth map reconstruction for urban scenes | |
CN115082540A (en) | Multi-view depth estimation method and device suitable for unmanned aerial vehicle platform | |
Ito et al. | PM-MVS: PatchMatch multi-view stereo | |
Heimann et al. | Frequency-Selective Geometry Upsampling of Point Clouds | |
CN112489204A (en) | 3D room layout reconstruction system based on RGB image |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:LIN, MICHAEL;GOLOVINSKIY, ALEKSEY;REEL/FRAME:027994/0522Effective date: 20120326 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
CC | Certificate of correction | ||
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044277/0001Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551)Year of fee payment: 4 |
|
FEPP | Fee payment procedure |
Free format text: MAINTENANCE FEE REMINDER MAILED (ORIGINAL EVENT CODE: REM.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
LAPS | Lapse for failure to pay maintenance fees |
Free format text: PATENT EXPIRED FOR FAILURE TO PAY MAINTENANCE FEES (ORIGINAL EVENT CODE: EXP.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20220930 |