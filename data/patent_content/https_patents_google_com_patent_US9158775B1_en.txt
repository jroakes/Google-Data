CROSS REFERENCE TO RELATED APPLICATIONS
This application claims priority under 35 USC §119(e) to U.S. Application No. 61/424,636, entitled “Scoring Stream Items with Models Based on User Interests” filed Dec. 18, 2010, the entirety of which is herein incorporated by reference.
BACKGROUND
The specification relates to a system and method for generating a stream of content. In particular, the specification relates to generating a stream of content from heterogeneous data sources in real time.
Many consumers of digital media have two somewhat contradictory goals: keep apprised of information in the areas they already find interesting and discover new content that is also enjoyable. In particular, users are interested in newer information and items that are trending topics. Keeping apprised of information can become burdensome in the digital age because there is so much information. In addition, news articles are often repetitive. As a result, the consumer needs a way to avoid becoming overwhelmed by the information and instead only needs to view the best and most relevant items for each topic and source. Similarly, discovering new and fresh content is difficult when the consumer is overburdened with existing content.
Attempts to solve these problems often rely on models that the user cannot see or understand, which leads to the user being confused about how and why each item of content was selected for viewing. If the user dislikes the content, there is no way to correct the model to provide more accurate content.
Feed readers for Really Simple Syndication (RSS) feeds display lists of blogs after the user manually subscribes to them. If a user clicks “home” on the user interface, the feed reader displays a shortened version of the list in a particular order based on the perceived user interest in the blog. This information is derived from how fast the user clicks on blogs from the different sources. For example, a blog that the user reads immediately after a new post is displayed in the list before a new post that takes the user days to read. If a user is looking for a new blog, some feed readers generate recommendations by comparing the user's current feeds to other people with similar interests and identifying the popular blogs among those similar readers.
Feed readers also display statistics about the usage of the blogs, including the percentage of posts from a single source that the user has read. From this information, the user can infer that a certain blog has become obsolete. As a result, the user removes the blog from the blog feed. Thus, feed readers only provide information about a single media source (blogs) and the statistics provide the user with information, but do not affect the information displayed except to rearrange what the user already selected.
SUMMARY OF THE INVENTION
In some examples, a model generation engine generates a model based on user data from heterogeneous data sources subject to the user approving usage of the data, such as prior user action across a range of media including search history, a blog post, a news article, a news feed, a video, a map, a message, an email message, an instant message, microblogs, a text-based post, a phone call and an activity on site. In one embodiment, the model generation engine uses a log of activities. When a user interacts with a website, for example, by providing a user preference, a user interest, a comment, a tag or a search, the model generation engine updates the model to include the interaction.
In some embodiments, a real-time index stores fresh content items according to keywords. The fresh content is recent and is stored for a predetermined about of time, such as 15 minutes. Content older than the pre-determined amount of time is removed.
In one embodiment, a contextual module receives a request for a stream of content. The contextual module determines, based on the request, context information including geographic location of the user, time of day and contextual cues surrounding the request. A fetching unit retrieves fresh content from the heterogeneous data sources and transmits it to the real-time index.
In some examples, a mixer receives candidate content items from heterogeneous data sources, the real-time index and a social server. In one embodiment, the mixer includes a query generator for retrieving a plurality of candidate content items based on the model. A mixer scores content items globally, scores candidate content items by comparing them to the model and generates a stream of content based on the scores. In one embodiment, the mixer also uses the context information in generating the stream of content.
In one embodiment, user interface engine displays the stream of content. When a user indicates that one of the content items in the stream of content is interesting, the model is updated and the mixer generates additional content items for the stream of content that are related to the interesting content items. In one embodiment, the stream of content is distributed in a social network.
In another embodiment, a method for generating a stream of content for a user in real time includes generating a model based on at least one interest of the user and at least one from a group of heterogeneous data sources, retrieving fresh content items from the heterogeneous data sources based upon recency, storing and indexing the fresh content items in an indexed data store, generating a set of candidate content items using the model and the indexed data store, computing a score for each candidate content item in the set using the model and based upon interestingness of the content item to the user, and generating the stream of content from candidate content items using the score of each candidate content item.
BRIEF DESCRIPTION OF THE DRAWINGS
The specification is illustrated by way of example, and not by way of limitation in the figures of the accompanying drawings in which like reference numerals are used to refer to similar elements.
FIG. 1 a is a high-level block diagram illustrating one embodiment of a system for generating a stream of content.
FIG. 1 b is a block diagram illustrating one embodiment of a content stream module.
FIG. 2 is a high-level block diagram illustrating another embodiment of a system for generating a stream of content.
FIG. 3 is a block diagram of one embodiment of the scoring engine in more detail.
FIG. 4 a is a graphic representation of a user interface that is generated by the user interface engine for the user to provide explicit interests.
FIG. 4 b is a graphic representation of a user interface that is generated by the user interface engine for defining heterogeneous data sources and modifying interests in a stream of content.
FIG. 4 c is another embodiment of a graphic representation of a user interface that is generated by the user interface engine for modifying interests in a stream of content.
FIG. 4 d is a graphic representation of a hypothesized interest.
FIG. 4 e is a graphic representation of an item that is recommended based on a hypothesized interest.
FIG. 5 a is a graphic representation of a user interface that displays the stream of content.
FIG. 5 b is a graphic representation of a user interface that displays a tree of subject matter.
FIG. 6 is a flow diagram of one embodiment of a method for generating a model based on user interests.
FIG. 7 is a flow diagram of one embodiment of a method for generating a stream of content.
FIG. 8 is a flow diagram of one embodiment of a method for updating a stream of content.
DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS
A system and method for generating a real-time stream of content is described below. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the specification. It will be apparent, however, to one skilled in the art that the embodiments can be practiced without these specific details. In other instances, structures and devices are shown in block diagram form in order to avoid obscuring the specification. For example, the specification is described in one embodiment below with reference to user interfaces and particular hardware. However, the description applies to any type of computing device that can receive data and commands, and any peripheral devices providing services.
Reference in the specification to “one embodiment” or “an embodiment” means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase “in one embodiment” in various places in the specification are not necessarily all referring to the same embodiment.
Some portions of the detailed descriptions that follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers or the like.
It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion, it is appreciated that throughout the description, discussions utilizing terms such as “processing” or “computing” or “calculating” or “determining” or “displaying” or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.
The specification also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general-purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium, such as, but is not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, flash memories including USB keys with non-volatile memory or any type of media suitable for storing electronic instructions, each coupled to a computer system bus.
Some embodiments can take the form of an entirely hardware embodiment, an entirely software embodiment or an embodiment containing both hardware and software elements. A preferred embodiment is implemented in software, which includes but is not limited to firmware, resident software, microcode, etc.
Furthermore, some embodiments can take the form of a computer program product accessible from a computer-usable or computer-readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description, a computer-usable or computer readable medium can be any apparatus that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device.
A data processing system suitable for storing and/or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code, bulk storage, and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.
Input/output or I/O devices (including but not limited to keyboards, displays, pointing devices, etc.) can be coupled to the system either directly or through intervening I/O controllers.
Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems, cable modem and Ethernet cards are just a few of the currently available types of network adapters.
Finally, the algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general-purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition, the specification is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the various embodiments as described herein.
System Overview
FIG. 1 a illustrates a block diagram of a system 100 for generating a stream of content according to one embodiment. The illustrated system 100 generates a stream of content includes user devices 115 a, 115 b that are accessed by users 125 a, 125 b, a social network server 101 and a third party server 107. In the illustrated embodiment, these entities are communicatively coupled via a network 105. Although only two devices are illustrated, persons of ordinary skill in the art will recognize that any number of user devices 115 n are available to any number of users 125 n.
The user devices 115 a, 115 b in FIG. 1 a are used by way of example. While FIG. 1 a illustrates two devices, the embodiment applies to any system architecture having one or more user devices. Furthermore, while only one network 105 is coupled to the user devices, 115 a, 115 b, the social network server 101 and the third party server 107, in practice any number of networks 105 can be connected to the entities. Furthermore, while only one third party server 107 is shown, the system 100 could include one or more third party servers 107.
In one embodiment, the content stream module 103 a is operable on the social network server 101, which is coupled to the network via signal line 104. The social network server 101 also contains a social network software/application 109. Although only one social network server 101 is shown, persons of ordinary skill in the art will recognize that multiple servers may be present. A social network is any type of social structure where the users are connected by a common feature. Examples include, but are not limited to, Orkut. The common feature includes friendship, family, work, an interest, etc. The common features are provided by one or more social networking systems, such as those included in the system 100, including explicitly-defined relationships and relationships implied by social connections with other online users, where the relationships form a social graph. In some examples, the social graph can reflect a mapping of these users and how they are related.
In another embodiment, the content stream module 103 b is stored on a third party server 107, which is connected to the network via signal line 106. The third party server 107 hosts, for example, a website with social network applications displayed within the website. For example, Google® provides website owners with gadgets, such as Friend Connect, that contain embeddable code where users can create profiles, chat with other users, etc. The content stream module 103 c is another example of a social network application that is displayed on a website that is hosted by the third party server 107.
In yet another embodiment, the content stream module 103 c is stored on a user device 115 a, which is connected to the network via signal line 108. The user device 115 a includes, for example, a personal computer or a mobile device, such as a smart phone. Thus, the content stream module 103 c can be an application that is stored on the user device 115 a or it can be displayed on the user device in a browser. The user 125 a interacts with the user device 115 a via signal line 110. Similarly, the user device 115 b is coupled to the network 105 via signal line 112 and the user 125 b interacts with the user device 115 b via signal line 114. Persons of ordinary skill in the art will recognize that the content stream module 103 can be stored in any combination on the devices and servers.
The network 105 is a conventional type, wired or wireless, and may have any number of configurations such as a star configuration, token ring configuration or other configurations known to those skilled in the art. Furthermore, the network 105 may comprise a local area network (LAN), a wide area network (WAN) (e.g., the Internet), and/or any other interconnected data path across which multiple devices may communicate. In yet another embodiment, the network 105 may be a peer-to-peer network. The network 105 may also be coupled to or includes portions of a telecommunications network for sending data in a variety of different communication protocols. In yet another embodiment, the network 105 includes Bluetooth communication networks or a cellular communications network for sending and receiving data such as via short messaging service (SMS), multimedia messaging service (MMS), hypertext transfer protocol (HTTP), direct data connection, WAP, email, etc.
The content stream module 103 receives data for generating a content stream from heterogeneous data sources. In one embodiment, the content stream module receives data from a third party server 107, a social network server 101, user devices 115 a, 115 b . . . 115 n, a search server 135 that is coupled to the network 105 via signal line 136, an entertainment server 137 that is coupled to the network 105 via signal line 138, a ratings server 139 (e.g. for Google Hotpot or other ratings websites) that is coupled to the network 105 via signal line 140, an email server 141 that is coupled to the network 105 via signal line 142 and a social graph 179 that is coupled to the network 105 via signal line 180. In one embodiment, the search server 135 includes a search engine 143 for retrieving results that match search terms from the Internet. In one embodiment, the search engine 143 is powered by Google®.
The content stream module 103 generates a model based on the data from the heterogeneous data sources. The content stream module 103 receives candidate content items from heterogeneous data sources and fresh information that is stored and indexed in a real-time index, compares the candidate content items to the model and generates a stream of content that the user finds interesting and fresh.
Content Stream Module 103
Referring now to FIG. 1 b, the content stream module 103 is shown in more detail. FIG. 1 b is a block diagram of a computing device 200 that includes the content stream module 103, a memory 237 and a processor 235. In one embodiment, the computing 200 device is a social network server 101. In another embodiment, the computing device 200 is a third party server 107. In yet another embodiment, the computing device 200 is a user device 115 a.
The processor 235 comprises an arithmetic logic unit, a microprocessor, a general purpose controller or some other processor array to perform computations and provide electronic display signals to a display device. The processor 235 is coupled to the bus 220 for communication with the other components via signal line 236. Processor 235 processes data signals and may comprise various computing architectures including a complex instruction set computer (CISC) architecture, a reduced instruction set computer (RISC) architecture, or an architecture implementing a combination of instruction sets. Although only a single processor is shown in FIG. 2, multiple processors may be included. The processing capability may be limited to supporting the display of images and the capture and transmission of images. The processing capability might be enough to perform more complex tasks, including various types of feature extraction and sampling. It will be obvious to one skilled in the art that other processors, operating systems, sensors, displays and physical configurations are possible.
The memory 237 stores instructions and/or data that may be executed by processor 235. The memory 237 is coupled to the bus 220 for communication with the other components via signal line 238. The instructions and/or data may comprise code for performing any and/or all of the techniques described herein. The memory 237 may be a dynamic random access memory (DRAM) device, a static random access memory (SRAM) device, flash memory or some other memory device known in the art. In one embodiment, the memory 237 also includes a non-volatile memory or similar permanent storage device and media such as a hard disk drive, a floppy disk drive, a CD-ROM device, a DVD-ROM device, a DVD-RAM device, a DVD-RW device, a flash memory device, or some other mass storage device known in the art for storing information on a more permanent basis.
The memory 237 stores models, candidate content items and streams of content. In one embodiment, the memory 237 also includes a real-time index 208, which contains fresh content items that are indexed according to keywords. Fresh items are recent items. For example, in one embodiment the real-time index 208 receives new items every five minutes. The real-time index 208 also discards items after they reach a certain age, such as 15 minutes or two hours old. In another embodiment, the real-time index 208 index also stores items that are trending topics, i.e. new pieces of content that are considered hot, such as breaking news of a global event or the emergence of a new artist.
In one embodiment, the content stream module 103 comprises a logging unit 202, a model generation engine 207, a contextual module 213, a mixer 204, optionally, a collaborative filtering engine 217, a user interface engine 260 and a fetching unit 280.
The logging unit 202 is software including routines for receiving information about a user's interests and social connections (subject to the user opting into data collection) and for generating a log. In one embodiment, the logging unit 202 is a set of instructions executable by the processor 235 to provide the functionality described below for generating the log. In another embodiment, the logging unit 202 is stored in the memory 237 of the computing device 200 and is accessible and executable by the processor 235. In either embodiment, the logging unit 202 is adapted for cooperation and communication with the processor 235 and other components of the computing device 200 via signal line 222.
The logging unit 202 obtains information about users that opt-in to having data collected from user input and/or prior actions of a user across a range of heterogeneous data sources including search (such as web, video, news, maps, alerts), entertainment (such as news, video, a personalized homepage, blogs, a reader, gadget subscriptions), social activity (such as interactions through email, profile information, text messaging such as short message service (SMS), microblogs, geographical locations, comments on photos, a social graph and other social networking information) and activity on third-party sites (such as websites that provide ratings, reviews and social networks where users indicate that they approve of content). This information is derived, for example, from a user's search history, browsing history, microblogs and other interactions with the Internet. The logging unit 202 generates a log from the information. The log contains the received information and a designation of the source of the information.
The activities of the logging unit 202 described herein are performed subject to user consent. In some implementations, a user is prompted to explicitly allow data collection. Further, the user may opt in/out of participating in such data collection activities. Furthermore, the collected data can be anonymized prior to performing the analysis to obtain the various statistical patterns described above. If a user opts out of data collection, the stream of content is generated based on an anonymized global model.
In one embodiment, there are multiple logging units 202 that each receive data from a different heterogeneous data source. In another embodiment, the data is received by the same logging unit 202. The logging unit 202 transmits the log to memory 237 for storage. In one embodiment, the memory 237 partitions the logs from each heterogeneous data source in a separate data storage location. In another embodiment, the data from heterogeneous data sources is stored in the same location in the memory 237. In yet another embodiment, the memory 237 partitions the model and the stream of content into separate storage locations as well.
The fetching unit 280 is software including routines for fetching fresh content and transmitting it to the real-time index 208. In one embodiment, the fetching unit 280 is a set of instructions executable by the processor 235 to provide the functionality described below for fetching the fresh content items. In another embodiment, the fetching unit 280 is stored in the memory 237 of the computing device 200 and is accessible and executable by the processor 235. In either embodiment, the fetching unit 280 is adapted for cooperation and communication with the processor 235 and other components of the computing device 200 via signal line 281.
The model generation engine 207 is software including routines for retrieving the log from the memory 237 and generating a model based on the log. In one embodiment, the model generation engine 207 is a set of instructions executable by the processor 235 to provide the functionality described below for generating the model. In another embodiment, the model generation engine 207 is stored in the memory 237 of the computing device 200 and is accessible and executable by the processor 235. In either embodiment, the model generation engine 207 is adapted for cooperation and communication with the processor 235 and other components of the computing device 200 via signal line 224.
The model generation engine 207 receives user information from a variety of sources including, for example, queries, clicks, news clicks, gadgets, email interactions, etc., extracts features from the information and generates a model based on the extracted features. The model consists of various types of relevance of items to users, along with floating point values to indicate the extent to which the relevance holds. In one embodiment, the model generation engine 207 receives a user's preference for fresh content, for example, content that is less than two hours old is more relevant than older content by virtue of its freshness. Examples of user information include liking a source, a primary location, and a list of interests. The interests are generated from explicit information and inferred information. Explicit information is derived, for example, from a user's list of interests on a social network or indicating that they liked a particular content item. Inferred information takes into account a user's activities and draws conclusions about the user's implicit approval or disapproval.
The model generation engine 207 will infer that a user is interested in a particular subject, for example, if the subject matter appears in search terms. For example, the model generation engine 207 infers that a user who searches for information about different types of butterflies is interested in butterflies. If the user also searches for hiking equipment, the model generation engine 207 further infers that the user is interested in outdoor activities, such as nature walks and visiting parks. If the user subscribes to a blog about cooking, the model generation engine 207 infers that the user is interested in cooking. If the user clicks on Artist X articles in Google News, the model generation engine 207 infers that the user is interested in pop music. If the user repeatedly uses a mapping application to obtain directions to a fast food restaurant, the model generation engine 207 infers that the user is interested in the fast food restaurant. If the user plays chess using a chess gadget, the user is interested in chess. If the user subscribes to a “Best of Boxing” YouTube channel, the model generation engine 207 infers that the user is interested in boxing. The model generation engine 207 can even infer information based on the user's friend's activities. For example, content items that interest the user's friends might also interest the user. As a result, in one embodiment, the model includes the user's friends' interests.
The model also includes several pieces of global meta-information about users' consumption patterns including how frequently the user consumers their streams, what their preferences are for the freshness of various types of content and global statistics on how likely the user is to reshare various types of items. Lastly, the model includes a sequence of weights and multipliers that are used to make predictions about the user's likelihood of clicking on, sharing or otherwise engaging with stream items.
The model generation engine 207 generates the model from the logs across the heterogeneous data sources. In one embodiment, the model generation engine 207 builds extensions to the model that employ the patterns of behavior of other users. For example, the model predicts the user's behavior based on the reaction of similar users. All the data that is derived from other users is anonymized before it is incorporated into the model.
In one embodiment, the model generation engine 207 generates a model in response to a user opting in with a specific piece of information, for example, allowing the model generation engine 207 to include the user's search history or third party accounts into the model. Alternatively, the model generation engine 207 receives periodic updates (one hour, one day, one week, etc.) from the heterogeneous data sources and in turn updates the model.
In yet another embodiment, the model generation engine 207 generates a model each time the user requests a stream of content. The advantage of this method is that the newest updates are included and the model is current. The disadvantage is that generating the model and then comparing the candidate content items to the model to generate the stream of content takes more time than comparing the candidate content items to a pre-existing model. The model generation engine 207 transmits the model to memory 237 for storage.
The contextual module 213 is software including routines for identifying contextual clues from a request for a content stream. In one embodiment, the contextual module 213 is a set of instructions executable by the processor 235 to provide the functionality described below for identifying contextual clues. In another embodiment, the contextual module 213 is stored in the memory 237 of the computing device 200 and is accessible and executable by the processor 235. In either embodiment, the contextual module 213 is adapted for cooperation and communication with the processor 235 and other components of the computing device 200 via signal line 214.
The contextual module 213 receives a request for a stream of content from a website or an application each time the user visits the website or activates an application that includes the content stream module 103. In another embodiment, the user requests the stream of content. In either case, the contextual module 213 receives the request and determines contextual clues from the request. For example, the contextual module 213 determines the location of the user (based, for example, on the user's IP address), the time of day and any other contextual clues. The contextual module 213 transmits the contextual clues to the mixer 204 via signal line 214.
The mixer 204 is software including routines for generating a stream of content from candidate content items. In one embodiment, the mixer 204 is a set of instructions executable by the processor 235 to provide the functionality described below for generating a stream of content. In another embodiment, the mixer 204 is stored in the memory 237 of the computing device 200 and is accessible and executable by the processor 235. In either embodiment, the mixer 204 is adapted for cooperation and communication with the processor 235 and other components of the computing device 200 via signal line 225.
In one embodiment, the mixer 204 queries heterogeneous data sources for candidate content items related to search terms, receives the candidate content items and compares the candidate content items to the model to determine whether the user would find the candidate content items interesting. The heterogeneous data sources include a search engine 143, an entertainment server 137, an email server 141, a ratings server 139, a social network server 101 and a third party server 107.
The query is derived from the user's interests, social connections and, in one embodiment, recent search terms input by the user. In one embodiment, the mixer 204 also uses contextual clues transmitted from the contextual module 213 to further narrow the number of candidate content items. For example, the mixer 204 queries the search engine 143 for items related to skiing because it is an explicit interest, sports car because it is a recent search term and sports car and skiing in Montana because the user's IP address is in Montana.
In one embodiment, the mixer 204 first performs the query and then compares the results to the model to determine whether the user would find them interesting. In another embodiment, these steps are performed simultaneously. In yet another embodiment, the mixer 204 compares candidate content items to the model and then filters the results according to the subject matter of the queries.
The mixer 204 receives candidate content items from the query results and from the real-time index 208. The mixer 204 compares the candidate content items to the model to generate a score for each item and generates a stream of content based on the score. The score is a reflection of the interestingness and the freshness of the content.
The mixer 204 determines interestingness based on social relevance and an interest match of the item to the user. Social relevance refers to whether a content item is new and determined to be valuable by people of a similar demographic to the user. For example, if the user is 13 and enjoys pop music, the user might be interested in content items about a new artist named Artist X. The interest match of the item to the user is determined based on similarity of the content item to the model.
The interestingness is measured by calculating a user score for each candidate content item. In one embodiment, the mixer 204 incorporates historical interaction feeds into the scoring. In one embodiment, the candidate items are not displayed unless their candidate scores exceed a certain threshold. Once the scores are calculated and thresholds are exceeded, the mixer 204 generates a stream of content that is ordered according to the candidate content item scores. In one embodiment, the mixer 204 generates a user interface that includes the stream of content. The user interface is displayed as part of another application, such as a social network, or as its own standalone application.
In one embodiment, the mixer 204 also generates an explanation for each item in the stream of content. The explanation is presented in a variety of ways including a tag that contains the subject matter of the content item (skiing) or a more detailed explanation (your friends enjoyed this article). Other explanations include that the content item matches a specific user interest or is similar to other content items that the user has liked in the past. The user's reaction to the explanation is used to further refine the model. This process is discussed in more detail below in connection with FIG. 3, which illustrates a more detailed block diagram of the mixer 204.
In one embodiment, the model contains two levels: (1) explicit user interests that are displayed to the user as explanations for generating a particular content item; and (2) a mathematical model that is not displayed to the user. The second level is used for scoring and more complicated analysis of subject matter. For example, a content item is described in the first level as relating to bicycling. In the second layer, the model generation engine 207 identifies the user as being most interested in competitive mountain biking.
Turning back to FIG. 1 b, the collaborative filtering engine 217 is software including routines for generating additional candidate content items based on social relevant through collaborative filtering and transmitting the additional candidate content items to the mixer 204 that were derived from collaborative filtering. In one embodiment, the collaborative filtering engine 217 is a set of instructions executable by the processor 235 to provide the functionality described below for generating additional candidate content items. In another embodiment, the collaborative filtering engine 217 is stored in the memory 237 of the computing device 200 and is accessible and executable by the processor 235. In either embodiment, the collaborative filtering engine 217 is adapted for cooperation and communication with the processor 235 and other components of the computing device via signal line 226.
The collaborative filtering engine 217 obtains candidate content items that are socially relevant from a stream of content derived from people with whom the user has a relationship and transmits the candidate content items to the mixer 204. For example, the stream of content is derived from friends in a social network or people that the user frequently emails. The more important that the person appears to be to the user, the more likely that the user will be interested in the content item. Thus, in one embodiment, the collaborative filtering engine 217 applies a weight to candidate content items based on the social relationship of the user to the friend. For example, users that are friends receive higher weights than candidate content items from second generation friends of the user (i.e. a friend of a friend).
Even if the user is not interested in the item, the user may read the item because he knows it is important to the other person. For example, if the user's parent is researching assisted living homes, the user will want to become informed about the homes, even though the information is not interesting, per se. The information is still relevant.
In another embodiment, the collaborative filtering engine 217 selects candidate items based on shared similarities between users. For example, if the user has children, the collaborative filtering engine 217 selects candidate content items from other users that also have children.
The collaborative filtering engine 217 increases the weights applied to candidate content items from friends when the user positively responds to the items. For example, if the user comments on the item or indicates that the user found the item interesting, the collaborative filtering engine 217 increase the weight so that more candidate content items from the friend become part of the stream of content.
The user interface engine 260 is software including routines for generating a user interface that displays the stream of content, receives user feedback and allows the user to add or remove explicit interests. In one embodiment, the user interface engine 260 is a set of instructions executable by the processor 235 to provide the functionality described below for generating a stream of content. In another embodiment, the user interface engine 260 is stored in the memory 237 of the computing device 200 and is accessible and executable by the processor 235. In either embodiment, the user interface engine 260 is adapted for cooperation and communication with the processor 235 and other components of the computing device 200 via signal line 261.
Alternate Embodiment of the System
FIG. 2 is a high-level block diagram illustrating another embodiment of a system for generating a stream of content. In this embodiment, the components of the content stream module 103 are divided among various servers so that the information is efficiently processed. The system includes a search server 135, an entertainment server 137, a ratings server 139, an email server 141, a content acquisition pipeline 250, a data storage server 265, a model server 255, a mixing server 260, a social graph 179, a social server 270, a real-time index 208 and a content stream module 103.
The heterogeneous data sources (search server 135, entertainment server 137, ratings server 139 and email server 141) are crawled by a content acquisition pipeline 250 or are directly transmitted to the content acquisition pipeline 250.
The content acquisition pipeline 250 includes a logging unit 202 and a fetching unit 280. The logging unit 202 annotates the content items with specific tags, such as features and a global score and generating logs of user activities. The activities described herein are subject to the user consenting to data collection. Once the content items are annotated, the logging unit 202 transmits the data to the data storage server 265. The data storage server 265 indexes the features of each content item and stores them in at least one database. In one embodiment, the content items are organized according to an identification format (SourceType#UniqueItemID, for example, “YOUTUBE#video_id” and “NEWS#doc_id”), an item static feature column that holds an item's static features (title, content, content classification, etc.), an item dynamic feature column that holds an item's dynamic features (global_score, number of clicks, number of following, etc.), a source (src) static feature column where the source is a publisher of an item (newspaper X in news, video uploading in YouTube, etc.), a src dynamic feature column holds the source's dynamic features, a content column holds activities that were used to create activities and a scoring feature holds a proto message that is used for user scoring.
In one embodiment, the data storage server 265 dynamically phases out the content items. For example, news items expire after 24 hours, videos expire after 48 hours and feeds are kept for 24 hours or only the 10 most recent items, whichever is larger.
The content acquisition pipeline 250 also transmits the content items to the mixing server 260 for a global user ranking. The global scores are transmitted from the mixing server 260 to the data storage server 265, which stores the global scores in association with the content items. The global scores are helpful for organizing the content items in the data storage server 265 according to the more popular items.
The fetching unit 280 fetches fresh content items from the heterogeneous sources and transmits the fresh content items to the real-time index 208 for storage. In one embodiment, the fetching unit 280 retrieves data every five, ten or fifteen minutes.
Turning now to the model server 255, the model server 255 receives the user activity from the logging unit 202 or the data storage server 265. The model generation engine 207 generates the model based on user input and/or prior actions. The model server 255 transmits a model to the mixing server 260 periodically or upon request.
In one embodiment, the mixing server 260 requests the model responsive to receiving a request for a stream of content from the content stream module 103. The mixing server 260 receives data from a variety of sources. First, the mixing server 260 receives the model from the model server 255. Next, the mixing server 260 receives user candidates from the social graph 179, candidate content items from the data storage server 265, candidate content items from the social server 270 and candidate content items from the real-time index 208. In one embodiment, the social server 270 saves unread social updates to a cache because the quantity of social updates can be large enough that performing the scoring during write time enables faster reads. In one embodiment, the mixing server 260 receives candidate content items, for example microblogs, directly from the source. The mixer 204 compares the candidate content items to the model, scores the candidate content items and users, generates a stream of content and transmits the stream of content to the content stream module 103.
The content stream module 103 includes a user interface engine 260 that receives the stream of content from the mixing server 260 and displays it in a user interface. In one embodiment, the user interface displays an icon for requesting a real-time stream of content. In addition to displaying the stream of content, the user interface provides the user with icons for changing the settings and user interests. The icons will be explained in greater detail below with regard to FIGS. 4-5.
Mixer 204
Referring now to FIG. 3, one embodiment of a mixer 204 is shown in more detail. This embodiment is discussed in conjunction with FIG. 2 but can apply to FIG. 1 a as well. The mixer 204 includes a query generator 301, a global scorer 302, a user scorer 304, an entity annotator 306 and a final scorer 310 that are each coupled to signal line 225.
The global scorer 302 is used to rank all content items that are stored in the data storage server 265 or memory 237 (depending upon the embodiment). The global scorer 302 uses signals from the different verticals and log data to compute a global user-independent score for each content item to approximate its popularity or importance within the stream that produced it. The global scorer 302 normalizes the score across streams so that items from various streams are comparable to aid in generating a quick yet reasonable ranking of items. The global score is a combination of its quality specific to the source stream (depending on the rank of the source, number of known followers of a source, etc.) and its global popularity (trigger rate on universal search, relevance to trending queries, number of clicks, long clicks received, etc.).
The global scorer 302 transmits the global score to storage where it is associated with the content item. The global score helps rank the content items for faster retrieval. For example, if the query generated by the query generator 301 includes a request for the top ten items about skiing, those items are already organized in the data storage server 265 or memory 237 according to the global score.
The query generator 301 generates a query for users that would find a content item interesting. There are two types of queries: the first suggests users based on their interest in the item and the second suggests users based on their social connection to the item.
For an interest based query, a candidate content item must be interesting to the user and must exceed a quality threshold based on the user's interest. The quality threshold contains components covering the global quality of the item, and the quality with respect to the user's location, as well as optionally a set of additional quality scores such as the burstiness and geo-burstiness of the item. Burstiness refers to the extent to which the item's popularity has sharply increased. Geo-burstiness refers to the extent to which the item's popularity has sharply increased in a specific geographic area.
The following is one form of the query associated with a user: ((llama_farming AND (global_score>80 OR local_score>10 OR burstiness>15)) OR (from_techwebsite AND (global_score>150 OR local_score>15 OR burstiness>8)) OR ( . . . ). The user may be moderately interested in llama farming and good material on this subject may be hard to come by, yielding a relatively low threshold on global score and the other scores. The user is less interested in content from the technology website and this content is higher in both volume and quality, so the resulting threshold is higher to gate the technology website content to an appropriate flow rate. These thresholds are recomputed nightly based on the activity during the day.
For the social based query, consider the following two example use cases. First, a user comments on a news item and the content item becomes interesting to the user's friend. Second, a video arrives in the system and social server 270 determines that the sister of the video's uploader will be interested in the content contained in the video. In the first use case, an existing news item propagates through the streams of content of all friends that are linked together. The users are passed to the mixer 204 as pre-computed candidate users and need not be analyzed by the user scorer 304. This allows the mixer 204 to respond in real-time to updates to the social graph 179. The second use case involves social connections that are not explicit to the social network memberships. These social connections are the responsibility of the mixer 204. When an item arrives with metadata about the author and any other users that are associated with the item, the query generator 301 queries the social graph 179 to determine whether any candidates from the social graph 179 are interested in the item. If so, the candidate user will be added and decorated with information about the nature of the relationships that makes this user a candidate for the item.
The query is transmitted to the social graph database 179 and users matching the query are returned to the mixer 204. The user scorer 304 receives the candidate content items from heterogeneous data sources or the data storage server 265 and receives the list of users associated with the candidate content items from the query generator 301. The user scorer 304 then computes a score for a single user and item pair based on the model, including user preferences for various types of content items, including suitable multipliers for the scoring model and the complete description of the item, including the entities it refers to, its various popularity signals (global and geo-specific popularity, both in absolute terms as well as in the rise in popularity).
In one embodiment, the user scorer 304 generates an activity identification, a user identification, an action type (e.g. recommend candidate content item for stream of content), a score, a score version, a score timestamp, a stream type (e.g. YouTube, feed, news, SMS, etc.), a stream source (e.g. newspaper X, school Y, etc.) and a bloom filter.
In one embodiment, the user scorer
304 employs a probabilistic method that evaluates the probability that an item will be present in a user's stream. The random variables used to compute this probability are the lattice of various subsets of properties (entities, global and local scores, source type, source, etc.) shared between the item and the user. For a suitably rich set A of attributes, the random variable “item” is independent of the random variable “user,” given the values of the attributes A. Thus for any setting {A=a} of the attributes, Pr(item|A=a, user)=Pr(item|A=a). Therefore, summing over all possible values a of A, obtains Pr(item|user)=
Pr(item|p) Pr(p|user), where p is a property, that is, a setting A=a of the attributes. The latter quantity, Pr(p|user), is something we can approximate from the user's history of interactions with content items as well as user search history and other opt-in data. Similarly, the former quantity, Pr(item|p) is something we can approximate by the (suitably weighted) reciprocal of the number of items with property p (e.g. if it is expected that p=(llama_farming AND (global_score>80 OR local_score>10 OR burstiness>15)) to generate 300 items, take Pr(item|p) to be 1/300).
The difficulty of computing Pr(item|user) by the sum above is that the properties expressed in the query corresponding to the user are not independent, and may have correlations to take advantage of To support this, the user scorer
304 begins with very simple approximations of the following form as a first step: Pr(item|user)=G
−1 (
G(Pr(item|p) Pr(p|user))), where the properties p are summed over single-attribute properties (as opposed to all possible settings of an entire collection of attributes), and G is an exponential function of the form G(x)=2
(100 x), so that when applied in this form, if there are several values of p for which Pr(item|p) Pr(p|user) is large, the sum of their G-values slowly increases.
The final scorer 310 receives candidate content items that originated from the data storage server 265 or the real-time index 208 from the user scorer 304 and candidate content items that were pre-scored from the social server 270. In one embodiment, the final scorer 310 receives pre-scored items directly from other sources, such as from a microblog. The final scorer 310 rescores the items based on the n number of items that are included in the stream of content.
Referring back to FIG. 3, the entity annotator 306 generates descriptions for each content item. In one embodiment, the entity annotator 306 generates a description for all content items that are stored in the data storage server 265 in association with the content item. In another embodiment, the entity annotator 306 generates an explanation (i.e. a property) for why items were included in the stream of content based on the user's interests. The most important explanations are social (your friend liked/shared/commented on this), entities (because you like monster trucks), queries (because you search for/are interested in [P-38 lightning model airplanes]) and geographic. In one embodiment, the entity annotator 306 incorporates collaborative explanations (because people from school Y/Google/etc. liked this) and some named collaborative explanations (because your brother likes a comic).
The entity annotator 306 also generates a feedback mechanism that is displayed with the explanation, such as like or dislike; approve or disapprove, etc. In another embodiment, the explanation is displayed as a decision tree from a broad subject area to narrower subject areas.
The stream of content is displayed in a user interface that allows the user to share the item with friends, comment on the item, save the item, etc. By sharing the content items with friends, the stream of content is circulated throughout the social network. In one embodiment, the mixer 204 automatically distributes content items to friends based on a determined commonality, such as sharing pictures of the user's friends with all family members. As a result, a user's stream becomes a combination of information retrieved from websites and content obtained through friends. This keeps the content interesting and the results fresh.
When a user responds to the explanation by providing feedback, the feedback is transmitted to the model generation engine 207 for incorporation into the model. The feedback loop establishes a dynamic model, which is important for two reasons. First, feedback helps train the model when generating the model for the first time. The model is created in part from inferences and these inferences can be wrong. Feedback helps create the most accurate model possible. Second, peoples' interests change and incorporating the feedback makes the model evolve to reflect those changes. For example, a user's taste in music changes such that the user is interested in a particular artist now because she's new but eventually the user will become bored of the artist's music or find better artists. As a result, there will be a point where the user is no longer interested in seeing content items about that particular artist. Incorporating user feedback into the model therefore makes the model stay relevant to the user.
User Interface Engine 260
Turning now to the user interface engine 260, FIG. 4 a is a graphic representation 400 of a user interface that is generated by the user interface engine 260 for the user to provide explicit interests. In this example the user can add new interests by inputting words into the search box 404, selecting the search icon and selecting the resulting word. To remove the interests, the user selects the “x” in the icon 406.
FIG. 4 b is a graphic representation 435 of a user interface that is generated by the user interface engine 260 for defining heterogeneous data sources and modifying interests in a stream of content. The user interface engine 260 displays a list of heterogeneous data sources (Google.oo groups and activities, Google web history, mail, YouTube viewing history, and Google Reader subscriptions) that include boxes 437 for selecting whether the system can use those sources in generating the stream of content. The user interface engine 260 also displays different feedback mechanisms for improving the model. In this example, the feedback mechanism includes asking 442 the user if he is interested in music videos and displaying like and share icons 444, 446.
FIG. 4 c is another embodiment of a graphic representation 448 of a user interface that is generated by the user interface engine 260 for modifying interests in a stream of content. In this example, the user interface displays a Artist X video and the user clicks the x icon 450. This causes the user interface engine 260 to display a graphic representation 451 of interests and generate a negative interest for Artist X, which means that the user will not receive any content associated with Artist X. The negative interest is displayed as an icon 452 with a strikethrough of Artist X as an interest.
FIG. 4 d is a graphic representation 455 of a hypothesized interest. The user interface engine 260 displays a content item for Louisiana cornbread muffins that is suggested because the user starred an article in newspaper X. If the user selects the interested icon 457, Louisiana cornbread muffins become an explicit interest in the model.
FIG. 4 e is a graphic representation 460 of an item that is recommended based on a hypothesized interest. In this example, a BandZ video is displayed because the user likes music videos. To further remind the user about the personalization sources, the user interface engine 260 displays a popup box 462 to notify the user that music videos were added to the user's list of interests.
Turning now to an example of how the stream of content appears to the user, FIG. 5 a is a screenshot of a user interface 500 that displays the stream of content. In this example, the stream of content is displayed as a Google product called Google.oo. This is part of the Google line of products and therefore contains a search bar 501 at the top. Persons of ordinary skill in the art will recognize that other versions of the content stream module 103 are possible that omit the search bar and are privately labeled.
The user is Melissa Garcia and the user interface allows Melissa to generate her own content items that can be distributed among her friends by entering information into the newsfeed bar 507. The default option is to display information from everyone that contributed to Melissa's stream of content. If Melissa wants to see only the content items that she generated, she clicks the only me button 512.
Additionally, the user interface provides the user with options for configuring the stream of content. For example, the “Actor P” item 502 is displayed with a button 503 for adding the item to the user's interests. Furthermore, the “Actor P” item 502 includes an explanation that Melissa received the article about how the “Actor P” is a successful social media campaign because Melissa watched a different Actor P video on YouTube. This item also includes a list 504 of subject matter (Basketball player, Wine, Bento, Band B, Artist X) that Melissa also might find interesting. When Melissa clicks on any of the subject matter, it gets added to her model as an explicit interest.
The stream of content is displayed below the suggested “Actor P” item 502. Melissa received a notification that her friend Rebecca Williams indicated that she liked the post 505 by Irene Alien. Because users are increasingly concerned with privacy, this content item contains a button 508 indicating that the item is visible to the public. The user interface also displays the original news article that Rebecca Williams commented on. Melissa can distribute the article to her friends by clicking on the share this news article link 410. Below the article is a list of comments from other people.
FIG. 5 b is a screenshot of a user interface 550 that displays a tree of subject matter. In this example, Melissa is presented with an article on cockatiel training. The user interface displays a general explanation 552 that she is receiving the article because she listed birds as an interest. If that explanation is still unsatisfactory or if she wants to modify her interests list, selecting the expand explanation button 553 causes an expanded explanation 554 to appear below the article. The expanded explanation 554 contains a breakdown of the different subject matter that has been added to Melissa's interests. The checked boxes 555 indicate subject matter that is part of Melissa's interests (animals, birds, parrots, cockatiels). Interests with an unchecked box 557 (African greys, amazons, parakeets) are not part of Melissa's interests. The user then checks or unchecks the boxes to further clarify her interests.
Methods
Referring now to FIGS. 6-8, various embodiments of the method of the specification will be described. FIG. 6 is a flow diagram 600 of one embodiment of a method for generating a model. The logging unit 202 receives information about user activities from heterogeneous data sources and generates 602 at least one log of the received information. The heterogeneous data sources include search (such as web, video, news, maps, alerts), entertainment (such as news, video, a personalized homepage, blogs, a reader, gadget subscriptions), social activity (such as interactions through email, profile information, text messaging such as short message service (SMS), microblogs, comments on photos, a social graph and other social networking information) and activity on third-party sites (such as websites that provide ratings, reviews and social networks where users indicate that they approve of content). The logging unit 202 transmits the log to memory 237 or a data storage server 265. In one embodiment, the logging unit 202 also receives 604 user interests.
The fetching unit 280 retrieves 606 fresh content items from a real-time index 208 based upon recency. For example, the fetching unit 280 retrieves data every five, ten or fifteen minutes. The real-time index 208 stores and indexes 608 the fresh content items in an indexed datastore. In one embodiment, the fresh content items are indexed according to keywords.
The model generation engine 207 retrieves the at least one log and user interests from memory 237 and generates 610 the model based on the at least one log and user interests. In one embodiment, the model is generated each time the mixer 204 receives a request for a stream of content. In another embodiment, the model is generated periodically.
The mixer generates a stream of content using the model. In one embodiment, the stream of content includes an explanation for why at least one content item is being displayed to the user, such as an explanation that it matches one of the user's defined interests. The user reacts to the stream of content, for example, by sharing a link, indicating that the link is interesting or indicating that the suggestion was wrong. The model generation engine 207 receives 612 the user reactions to the stream of content and defined interests. Responsive to receiving the user reactions, the model generation engine 207 updates 614 the model.
FIG. 7 is a flow diagram 700 of one embodiment of a method for generating a content stream. The contextual module 213 receives 702 a request for a stream of content. The request comes directly from a user, from a website or from an application. The contextual module 213 determines 704 a location of the user, a time of day and other contextual clues. The mixer 204 queries 706 heterogeneous data sources using search terms based on the user's interests and contextual clues and receives 708 candidate content items that match the query. In one embodiment, the query is based on search terms that were previously submitted by the user. The candidate content items are retrieved from heterogeneous data sources that include, for example, news articles, tweets, blogs, videos, photos, posts on social networks, etc.
In one embodiment, the mixer 204 receives 710 additional candidate content items from the collaborative filtering engine 217 and the real-time index 208. The collaborative filtering engine 217 transmits items from the content stream of anyone with whom the user has a relationship. The mixer 204 compares 712 the candidate content items to a model.
The mixer 204 calculates 714 a score for each candidate content item by comparing the item to the model to determine interestingness to the user and freshness. The mixer 204 generates 716 a stream of content from the candidate content items. The stream is based on the number of items that can be displayed in the space. In one embodiment, the score of all content items that appear in the stream of content also have to exceed a certain threshold. This ensures that less interesting content is not displayed in situations where there is not enough content to generate a complete stream.
In one embodiment, the mixer 204 distributes 718 the stream of content in a social network. The social network helps the stream of content remain fresh and interesting because it helps distribute the information. For example, a user comments on one of the items in the stream of content. The comment appears in the user's friend's stream of content. The user's friend then shares the original item with other friends. Thus, items in the stream of content are circulated throughout the social network.
FIG. 8 is a flow diagram 800 of one embodiment of a method for updating a content stream. The mixer 204 receives 802 a request for a stream of content. The mixer 204 generates 804 a stream of content from candidate content items based on interestingness to the user and freshness of the content. The mixer 204 generates 806 a reason for the presence of each item in the stream of content and displays the reason alongside the content in the user interface. The mixer 204 also generates a user interface that allows the user to provide feedback about whether the reasons are correct and whether the content items are interesting. The model generation engine 207 receives 808 feedback from the user, which is incorporated into an updated model. The mixer 204 receives candidate content items and compares them to the updated model to generate 810 an updated stream of content.
The foregoing description of the embodiments has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the specification to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the embodiments be limited not by this detailed description, but rather by the claims of this application. As will be understood by those familiar with the art, the examples may be embodied in other specific forms without departing from the spirit or essential characteristics thereof. Likewise, the particular naming and division of the modules, routines, features, attributes, methodologies and other aspects are not mandatory or significant, and the mechanisms that implement the description or its features may have different names, divisions and/or formats. Furthermore, as will be apparent to one of ordinary skill in the relevant art, the modules, routines, features, attributes, methodologies and other aspects of the specification can be implemented as software, hardware, firmware or any combination of the three. Also, wherever a component, an example of which is a module, of the specification is implemented as software, the component can be implemented as a standalone program, as part of a larger program, as a plurality of separate programs, as a statically or dynamically linked library, as a kernel loadable module, as a device driver, and/or in every and any other way known now or in the future to those of ordinary skill in the art of computer programming. Additionally, the specification is in no way limited to implementation in any specific programming language, or for any specific operating system or environment. Accordingly, the disclosure is intended to be illustrative, but not limiting, of the scope of the specification, which is set forth in the following claims.