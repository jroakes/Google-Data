US6829313B1 - Sliding window turbo decoder - Google Patents
Sliding window turbo decoder Download PDFInfo
- Publication number
- US6829313B1 US6829313B1 US09/617,194 US61719400A US6829313B1 US 6829313 B1 US6829313 B1 US 6829313B1 US 61719400 A US61719400 A US 61719400A US 6829313 B1 US6829313 B1 US 6829313B1
- Authority
- US
- United States
- Prior art keywords
- window
- signal
- trellis
- recursion
- quality
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime, expires
Links
Images
Classifications
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M13/00—Coding, decoding or code conversion, for error detection or error correction; Coding theory basic assumptions; Coding bounds; Error probability evaluation methods; Channel models; Simulation or testing of codes
- H03M13/37—Decoding methods or techniques, not specific to the particular type of coding provided for in groups H03M13/03 - H03M13/35
- H03M13/39—Sequence estimation, i.e. using statistical methods for the reconstruction of the original codes
- H03M13/3905—Maximum a posteriori probability [MAP] decoding or approximations thereof based on trellis or lattice decoding, e.g. forward-backward algorithm, log-MAP decoding, max-log-MAP decoding
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M13/00—Coding, decoding or code conversion, for error detection or error correction; Coding theory basic assumptions; Coding bounds; Error probability evaluation methods; Channel models; Simulation or testing of codes
- H03M13/29—Coding, decoding or code conversion, for error detection or error correction; Coding theory basic assumptions; Coding bounds; Error probability evaluation methods; Channel models; Simulation or testing of codes combining two or more codes or code structures, e.g. product codes, generalised product codes, concatenated codes, inner and outer codes
- H03M13/2957—Turbo codes and decoding
- H03M13/2975—Judging correct decoding, e.g. iteration stopping criteria
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M13/00—Coding, decoding or code conversion, for error detection or error correction; Coding theory basic assumptions; Coding bounds; Error probability evaluation methods; Channel models; Simulation or testing of codes
- H03M13/37—Decoding methods or techniques, not specific to the particular type of coding provided for in groups H03M13/03 - H03M13/35
- H03M13/39—Sequence estimation, i.e. using statistical methods for the reconstruction of the original codes
- H03M13/3961—Arrangements of methods for branch or transition metric calculation
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M13/00—Coding, decoding or code conversion, for error detection or error correction; Coding theory basic assumptions; Coding bounds; Error probability evaluation methods; Channel models; Simulation or testing of codes
- H03M13/37—Decoding methods or techniques, not specific to the particular type of coding provided for in groups H03M13/03 - H03M13/35
- H03M13/39—Sequence estimation, i.e. using statistical methods for the reconstruction of the original codes
- H03M13/3972—Sequence estimation, i.e. using statistical methods for the reconstruction of the original codes using sliding window techniques or parallel windows
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M13/00—Coding, decoding or code conversion, for error detection or error correction; Coding theory basic assumptions; Coding bounds; Error probability evaluation methods; Channel models; Simulation or testing of codes
- H03M13/37—Decoding methods or techniques, not specific to the particular type of coding provided for in groups H03M13/03 - H03M13/35
- H03M13/39—Sequence estimation, i.e. using statistical methods for the reconstruction of the original codes
- H03M13/41—Sequence estimation, i.e. using statistical methods for the reconstruction of the original codes using the Viterbi algorithm or Viterbi processors
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M13/00—Coding, decoding or code conversion, for error detection or error correction; Coding theory basic assumptions; Coding bounds; Error probability evaluation methods; Channel models; Simulation or testing of codes
- H03M13/37—Decoding methods or techniques, not specific to the particular type of coding provided for in groups H03M13/03 - H03M13/35
- H03M13/39—Sequence estimation, i.e. using statistical methods for the reconstruction of the original codes
- H03M13/41—Sequence estimation, i.e. using statistical methods for the reconstruction of the original codes using the Viterbi algorithm or Viterbi processors
- H03M13/4138—Sequence estimation, i.e. using statistical methods for the reconstruction of the original codes using the Viterbi algorithm or Viterbi processors soft-output Viterbi algorithm based decoding, i.e. Viterbi decoding with weighted decisions
- H03M13/4146—Sequence estimation, i.e. using statistical methods for the reconstruction of the original codes using the Viterbi algorithm or Viterbi processors soft-output Viterbi algorithm based decoding, i.e. Viterbi decoding with weighted decisions soft-output Viterbi decoding according to Battail and Hagenauer in which the soft-output is determined using path metric differences along the maximum-likelihood path, i.e. "SOVA" decoding
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M13/00—Coding, decoding or code conversion, for error detection or error correction; Coding theory basic assumptions; Coding bounds; Error probability evaluation methods; Channel models; Simulation or testing of codes
- H03M13/37—Decoding methods or techniques, not specific to the particular type of coding provided for in groups H03M13/03 - H03M13/35
- H03M13/39—Sequence estimation, i.e. using statistical methods for the reconstruction of the original codes
- H03M13/41—Sequence estimation, i.e. using statistical methods for the reconstruction of the original codes using the Viterbi algorithm or Viterbi processors
- H03M13/4161—Sequence estimation, i.e. using statistical methods for the reconstruction of the original codes using the Viterbi algorithm or Viterbi processors implementing path management
- H03M13/4169—Sequence estimation, i.e. using statistical methods for the reconstruction of the original codes using the Viterbi algorithm or Viterbi processors implementing path management using traceback
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M13/00—Coding, decoding or code conversion, for error detection or error correction; Coding theory basic assumptions; Coding bounds; Error probability evaluation methods; Channel models; Simulation or testing of codes
- H03M13/37—Decoding methods or techniques, not specific to the particular type of coding provided for in groups H03M13/03 - H03M13/35
- H03M13/45—Soft decoding, i.e. using symbol reliability information
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M13/00—Coding, decoding or code conversion, for error detection or error correction; Coding theory basic assumptions; Coding bounds; Error probability evaluation methods; Channel models; Simulation or testing of codes
- H03M13/65—Purpose and implementation aspects
- H03M13/6502—Reduction of hardware complexity or efficient processing
Definitions
- This invention relates generally to communication systems, and more particularly to a soft output decoder for use in a receiver of a convolutional code communication system.
- Convolutional codes are often used in digital communication systems to protect transmitted information from error.
- an outgoing code vector may be described using a trellis diagram whose complexity is determined by the constraint length of the encoder. Although computational complexity increases with increasing constraint length, the robustness of the coding also increases with constraint length.
- a practical soft-decision decoder such as a Viterbi decoder as is known in the art, uses the trellis structure to perform an optimum search for the maximum likelihood transmitted code vector.
- the Viterbi algorithm is computationally complex, and its complexity increases exponentially with increasing constraint length. This essentially means that a Viterbi decoder requires a significant amount of memory and processing power for convolutional codes with large constraint lengths.
- turbo codes have been developed for various communications systems, such as Direct Sequence Code Division Multiple Access (DS-CDMA) standard IS-95 and Global System for Mobile Communications (GSM), that outperform conventional coding techniques.
- DS-CDMA Direct Sequence Code Division Multiple Access
- GSM Global System for Mobile Communications
- Turbo coding is efficiently utilized to correct errors in the case of communicating over an added white Gaussian noise (AWGN) channel.
- Turbo codes are generally composed of two or more convolutional codes and turbo interleavers.
- Turbo decoding is iterative and uses a soft output decoder to decode the individual convolutional codes.
- the soft output decoder provides information on each bit position which helps the soft output decoder decode the convolutional codes.
- the soft output decoder is usually a MAP (maximum a posteriori) or soft output Viterbi algorithm (SOVA) decoder which requires backward and forward recursion decoding to determine the soft output over the block as is known in the art.
- MAP maximum a posterior
- a direct implementation of MAP-based Turbo decoder requires a large memory for the storage of the recursive sequences.
- future standards such as the 3GPP (third generation partnership project for wireless systems)
- Sliding window techniques have been proposed to reduce the amount of memory with the introduction of extra computation. This is the typical trade off between memory and computation.
- the sliding block technique divides a block of code into windows and operates on only one window at a time and outputting the code for that window. In this way a smaller sized memory is needed.
- an additional learning computation is needed for each window in order to determine the correct states at either end of the window for proper decoding. Therefore, the sliding window technique uses less memory, but with additional computations.
- FIG. 1 shows a trellis diagram for a first prior art soft output decoder technique
- FIG. 2 shows a trellis diagram for a second prior art soft output decoder technique
- FIG. 3 shows a trellis diagram for a third prior art soft output decoder technique
- FIG. 4 shows an expanded graphical representation of the diagram of FIG. 3
- FIG. 5 shows an alternate expanded graphical representation of the diagram of FIG. 3
- FIG. 6 shows a trellis diagram for a soft output decoder technique
- FIG. 7 shows a block diagram of a soft output decoder
- FIG. 8 shows an expanded graphical representation of the diagram of FIG. 6
- FIG. 9 shows inputs and outputs to a Viterbi decoder
- FIG. 10 shows a simulation results using turbo decoding
- FIG. 11 shows a simulation results using turbo decoding
- FIG. 12 shows a bit error rate performance curve simulation
- FIG. 13 shows a fixed point simulation
- FIG. 14 shows a fixed point simulation
- FIG. 15 shows a bit error rate performance curve simulation
- FIG. 16 shows overall timing operation of the turbo decoder
- FIG. 17 is a flow chart representing a method of reducing calculations in the decoder.
- the present invention improves the sliding window technique of turbo decoding by shrinking successive learning periods needed for reliable computation as iteration proceeds through windows in a block of code. In this way, the memory requirement is maintained, while the number of iterations is reduced, thereby reducing computations and overall power consumption.
- the quality of the signal is utilized to adjust the size of the learning period wherein, with an improved signal quality, the learning period can be reduced. Moreover, since improved signal quality is present there in no sacrificing performance.
- LLR log-likelihood ratio
- the LLR magnitude increase is directly related to the number of iterations in the turbo decoding process.
- the appropriate number of iterations for a reliably turbo decoded block varies as the quality of the incoming signal and the resulting number of errors incurred therein. In other words, the number of iterations needed is related to channel conditions, where a noisier environment will need more iterations to correctly resolve the information bits and reduce error. Therefore, for a higher quality signal, less learning is required in the sliding window technique.
- block codes, convolutional codes, turbo codes, and others are graphically represented as a trellis as shown in FIG. 1 wherein an eight state, sixteen section trellis is shown.
- M states per trellis section typically M equals eight states
- N trellis sections per block or frame typically N-5000.
- Maximum a posteriori type decoders (log-MAP, MAP, max-log-MAP, constant-log-MAP, etc.) utilize forward and backward generalized Viterbi recursions on the trellis in order to provide soft outputs, as is known in the art.
- the MAP decoder minimizes the decoded bit error probability for each information bit based on all received bits.
- Typical prior art MAP decoders require a memory for use in decoding.
- the MAP bit probability can be broken into the past (beginning of trellis to the present state), the present state (branch metric for the current value), and the future (end of trellis to current value). More specifically, the MAP decoder performs forward and backward recursions up to a present state wherein the past and future probabilities are used along with the present branch metric to generate an output decision.
- the principles of providing hard and soft output decisions are known in the art, and several variations of the above described decoding methods exist. For example, most of the soft input-soft output SISO decoders considered for turbo codes are based on the prior art MAP algorithm in a paper by L. R.
- FIG. 2 shows a typical turbo coder constructed with interleavers and constituent codes which are usually systematic convolutional codes, but can be block codes also.
- a turbo coder is a parallel concatenation of two recursive systemic convolutional encoders (RSC 1 , RSC 2 ) with an interleaver (INT) between them.
- the output of the turbo encoding is generated by multiplexing (concatenating) the information bits m i and the parity bits p i from the two encoders, RSC 1 and RSC 2 .
- the parity bits can be punctured as is known in the art to increase code rate (i.e., a throughput of 1 ⁇ 2).
- the turbo encoded signal is then transmitted over a channel.
- Noise, n i due to the AWGN nature of the channel becomes added to the signal, x l , during transmission.
- FIG. 3 shows a typical prior art turbo decoder that is constructed with interleavers (INT), de-interleavers (DEINT), and decoders (SISO).
- INT interleavers
- DEINT de-interleavers
- SISO decoders
- the soft output is denoted as L e1 , for extrinsic data from the first decoder.
- the second decoder (SISO 2 ) is input with interleaved versions of L e1 (the a priori information from L a ), the input signal bits y i .
- the second decoder generates extrinsic data, L e2 , which is deinterleaved to produce L a which is fed back to the first decoder, and a soft output (typically a MAP LLR) provide a soft output of the original information bits m i .
- a soft output typically a MAP LLR
- MAP algorithms minimize the probability of error for an information bit given the received sequence, and they also provide the probability that the information bit is either a 1 or 0 given the received sequence.
- the prior art BCJR algorithm provides a soft output decision for each bit position (trellis section of FIG. 1) wherein the influence of the soft inputs within the block is broken into contributions from the past (earlier soft inputs), the present soft input, and the future (later soft inputs).
- the BCJR decoder algorithm uses a forward and a backward generalized Viterbi recursion on the trellis to arrive at an optimal soft output for each trellis section (stage).
- LLR log-likelihood ratio
- the probability that the decoded bit is equal to 1 (or 0) in the trellis given the received sequence is composed of a product of terms due to the Markov property of the code.
- the Markov property states that the past and the future are independent given the present.
- the present, ⁇ k (n,m) is the probability of being in state m at time k and generating the symbol ⁇ k when the previous state at time k ⁇ 1 was n.
- the present plays the function of a branch metric.
- the past, ⁇ t (m) is the probability of being in state m at time k with the received sequence ⁇ y 1 , . . .
- ⁇ k (m) is the probability of generating the received sequence ⁇ y k+1 , . . . , y N ⁇ from state m at time k.
- Equation (2) The overall a posteriori probabilities in equation (2) are computed by summing over the branches in the trellis B 1 (B 0 ) that correspond to the information bit being 1 (or 0).
- the LLR in equation (1) requires both the forward and reverse recursions to be available at time k.
- the BCJR method requires NM state updates for the reverse recursion (M state updates per trellis section, N trellis sections in the code) and provides optimal performance.
- a backward recursion is performed by a processor across the entire block (as represented in FIG. 1) and stored in memory.
- a forward recursion is performed by the processor and the result is used with the present state and stored future state to arrive at a soft output decision for each stage.
- the processor operates on each state twice, once to store the backward recursion states, and once during forward recursion processing (throughput of 1 ⁇ 2).
- the sliding window technique requires less memory, but is computationally complex. Specifically, instead of an entire backward recursion being performed and stored, only a partial backward recursion is performed to determined each state. For each present state, the algorithm initializes the future recursion at a learning period of P away from the present state with the initial state unknown. The future probabilities are calculated backward from the unknown future point, not from the known end of the trellis. The length P (learning period) is set such that by the time the partial backward recursion reaches the present state, the future probabilities are most likely correct. P depends on the rate and constraint length of the code and the expected channel conditions.
- P is typically between 16 to 32, wherein P is some multiple of constraint lengths.
- the disadvantage of this decoder is that the partial backward recursion is started with equally likely (unknown states) and is allowed to iterate until it reaches the present window. This is a sub-optimal algorithm as the sliding window causes degradation from true MAP performance, as in the effects of finite traceback in a conventional Viterbi algorithm, increasing the probability of decoded bit error.
- the processor requires P times the complexity which can only be reduced by adding more processing.
- the sliding window method reduces the memory requirement from NM as needed in the BCJR method down to a less significant amount of memory needed for a recursion. Assuming double buffering, the amount of memory is only 2M. However, to achieve this memory saving, the computational complexity for the backward recursion increases by a factor of P.
- the sliding window method is also sub-optimal due to the ‘finite’ window size.
- the Viterbi sliding window method reduces the large increase in computational complexity of the prior art sliding window method by performing processing in blocks.
- the reverse recursion is started at time t+2L, and the reverse recursion values are stored from time t+L to time t.
- the forward recursion and output likelihood computation are then performed over the block of time t to time t+L.
- Memory is reduced from NM down to L M, while only doubling the computational complexity.
- the key observation of starting the recursion in an unknown state is the same as for the previous sliding window technique.
- the decoder differs from the previously described sliding window technique by providing a window that slides forward in blocks rather than a symbol at a time.
- a sliding window is defined having a length L which is equal to the previously described learning period P.
- L is some multiple of the total trellis length, N, and the window slides from the beginning to the end of the trellis in steps of length L.
- This decoder also uses a learning period starting from an unknown future state. Specifically, a forward recursion is performed by the processor starting from a known state at the beginning of a first window L and over the length (L) of the first window. These forward recursion states are stored. The processor then performs a backward recursion from an unknown state starting at a point that is 2L away from where the forward recursion started so as to define a known state at the end of the first window. Then the processor performs a second backward recursion starting from the known state at the end of the first window to the present state wherein information from the backward recursion and the stored forward recursion are used to generate the soft output. Once all the outputs of the first window are determined the window slides forward an amount L and the process is repeated starting from the state that was determined at the end of the first window.
- this decoder operates on each state three times, although a forward and backward processor can be run concurrently such that the throughput of 1 ⁇ 2 is obtained.
- the backward recursion requires twice the complexity which can only be reduced (or the throughput increased) by adding more processing.
- this decoder produces soft outputs in reverse order which would need to be buffered in a supplementary memory before being output.
- the first backward recursion over the learning period, L is started with equally likely (unknown states) and is allowed to iterate over the length L for each window.
- the length L does not vary between windows and always requires a predetermined amount of processing, independent of signal conditions.
- the present invention takes advantage of the fact that turbo codes will converge faster under good channel conditions requiring a fewer number of iterations to obtain good performance.
- the number of iterations performed is directly proportional to the number of calculations needed and it will therefore affect power consumption. Since power consumption is of great concern in the mobile and portable radio communication devices, there is an even higher emphasis on finding a way to reduce calculations.
- the present invention provides an adaptive scheme for reducing the learning period in a sliding window turbo decoder.
- the present invention provides a technique to vary the length of the learning period dependent on extrinsic information from the decoder, and to accomplish this in a novel way.
- FIG. 6 shows a trellis diagram utilizing convolutional decoding in accordance with the present invention.
- the trellis code is obtained from a convolutionally coded sequence of signals represented by a trellis of length N in a communication system, as simplified in FIG. 7 .
- a signal travels through an antenna 102 to a receiver 104 and demodulator 106 , as is known in the art.
- the signal is loaded into a frame buffer 108 .
- a forward recursion processor 110 and backward recursion processor 112 operate on the block.
- the present invention differs from the previously described sliding window technique of FIG. 5 by providing a variable learning (synchronization) period that can be adjusted for successive windows.
- the window sizes, L are not required to be equal throughout the trellis, it is assumed that they are equal for purposes of explanation.
- a sliding window is defined having a length L such that some multiple of L equals the total trellis length, N, and the window slides from the beginning to the end of the trellis in steps of length L.
- This present invention uses a variable learning period, P k (Q), which is a function of Q, a signal quality index as defined below.
- a length of the learning period is dependent on the quality of the signal such that a shorter learning period is chosen for a higher quality signal and a longer learning period is chosen for a lower quality signal.
- the learning period is only shortened with increasing signal quality to result in reduced computation.
- a backward learning recursion is performed by the backward processor 112 starting from an unknown state that is an initial length P 1 (Q) beyond the end of a first window backward to the end of the first window to approximate and define a known state at the end of that window.
- a second backward recursion is performed by the backward processor 112 , starting at the known state at the end of the first window back to the beginning of the window.
- the second backward recursion can be stored in a memory 114 .
- the forward recursion processor 110 performs a forward recursion from the known state at the beginning of the first window throughout the length of the window.
- the forward recursion can also be stored in a memory 114 although this is not necessary.
- the decoder 116 uses the information from the backward and forward recursion, as well as the present branch metrics at each symbol, to output soft output decisions.
- the quality of the signal is determined from the soft outputs of the decoder.
- the learning period for the next window is adjusted to be shorter as the quality of the signal improves and longer if the quality of the signal worsens.
- an additional backward processor 118 is used in parallel with the backward processor 112 such that when the backward recursion processor 112 operates within the window the additional backward recursion processor 118 operates to decode a portion of the trellis using a learning backward recursion from a next point P k+1 (Q) that is after the end of the next window back to the end of the next window.
- the additional backward recursion processor 118 decodes the portion of the trellis within the next window using backward recursion from the known state at the end of the next window back to the beginning of the next window to define a set of known backward recursion state metrics within the next window which can stored in the memory 114 as the memory is cleared, leaving the forward recursion processor 110 available to begin decoding the next window immediately after the present window is processed.
- all the processors operate concurrently until all of the windows within the block are decoded.
- the two backward recursion processors can be used to first operate within the learning periods for two windows and then within the windows themselves. This can be accomplished concurrently or not.
- the present invention dynamically utilizes an intrinsic (virtual) signal-to-noise ratio (SNR), as a measure quality (Q) of the signal, of the in-loop data stream at the input of each constituent decoder stage as the loop decoding iterations proceed.
- SNR intrinsic (virtual) signal-to-noise ratio
- Q measure quality
- the present invention uses a detection quality indicator that observes the increase in signal energy relative to the noise as iterations proceed. This quality index is used to determine the number of iterations needed in subsequently learning periods for each window.
- the present invention conserves power in the communication device and saves calculation complexity.
- FIG. 8 shows a turbo decoder with at least one additional Viterbi decoder to monitor the decoding process, in accordance with the present invention.
- one Viterbi decoder can be used, two decoders give the flexibility to stop iterations at any SISO decoder.
- the Viterbi decoders are used because it is easy to analyze the Viterbi decoder to get the quality index.
- the Viterbi decoder is just used to do the mathematics in the present invention, i.e. to derive the quality indexes and intrinsic SNR values. No real Viterbi decoding is needed. It is well known that MAP or SOVA decoder will not outperform the conventional Viterbi decoder significantly if no iteration is applied.
- the quality index also applies towards the performance of MAP and SOVA decoders.
- the error due to the Viterbi approximation to SISO (MAP or SOVA) will not accumulate since there is no change in the turbo decoding process itself. Note that the turbo decoding process remains as it is.
- the at least one additional Viterbi decoder is attached for analysis to generate the quality index and no decoding is actually needed.
- two Viterbi decoders are used.
- both decoders generate an iteration stopping signal, and they act independently such that either decoder can signal a stop to iterations.
- the Viterbi decoders are not utilized in the traditional sense in that they are only used to do the mathematics and derive the quality indexes and intrinsic SNR values.
- iterations can be stopped mid-cycle at any SISO decoder, a soft output is generated for the transmitted bits from the LLR of the decoder where the iteration is stopped.
- the present invention utilizes the extrinsic information available in the iterative loop in the Viterbi decoder.
- path metrics with the extrinsic information input: p ⁇ [ Y
- the path metric is thus calculated as p ⁇ [ X
- this correcting factor improves the path metric and thus improves the decoding performance.
- This factor is the improvement brought forth by the extrinsic information.
- the present invention introduces this factor as the quality index and the iteration stopping criteria for turbo codes.
- w i is a weighting function to alter performance.
- w i is a constant of 1.
- indexes are extremely easy to generate and require very little hardware.
- these indexes have virtually the same asymptotic behavior and can be used as a good quality index for the turbo decoding performance evaluation and iteration stopping criterion.
- the iterative loop of the turbo decoder increases the magnitude of the LLR such that the decision error probability will be reduced.
- Another way to look at it is that the extrinsic information input to each decoder is virtually improving the SNR of the input sample streams. The following analysis is presented to show that what the extrinsic information does is to improve the virtual SNR to each constituent decoder. This helps to explain how the turbo coding gain is reached. Analysis of the incoming samples is also provided with the assistance of the Viterbi decoder as described before.
- the path metric equation of the attached additional Viterbi decoders is p ⁇ [ Y
- the input data stream to the Viterbi decoder is ⁇ ( y i + ⁇ 2 2 ⁇ z i ) , t i ) ⁇ ,
- SNR ⁇ ( x i , y i , iter ) ( E ⁇ [ y i + ⁇ 2 2 ⁇ z i
- x i ] ) 2 ⁇ 2 ( E ⁇ [ x i + n i + ⁇ 2 2 ⁇ z i
- SNR ⁇ ( p i , t i , iter ) ( E ⁇ [ t i
- p i ] ) 2 ⁇ 2 ( E ⁇ [ p i + n i ′
- p i ] ) 2 ⁇ 2 p i 2 ⁇ 2
- the average SNR of the whole block will increase as the number of iteration increases.
- the second term is the original quality index, as described previously, divided by the block size.
- the third term is directly proportional to the average of magnitude squared of the extrinsic information and is always positive. This intrinsic SNR expression will have the similar asymptotic behavior as the previously described quality indexes and can also be used as decoding quality indicator.
- StartSNR denotes the initial SNR value that starts the decoding iterations.
- a weighting function can be used here as well. Only the last two terms are needed to monitor the decoding quality. Note also that the normalization constant in the previous intrinsic SNR expressions has been ignored.
- the present invention provides a decoder that dynamically reduces learning period iteration calculations in the decoding of a received convolutionally coded signal using quality index criteria.
- the decoder includes a standard turbo decoder with two recursion processors connected in an iterative loop.
- the at least one additional recursion processor is a Viterbi decoder, and the two recursion processors are soft-input, soft-output decoders. More preferably, there are two additional processors coupled in parallel at the inputs of the two recursion processors, respectively. All of the recursion processors, including the additional processors, perform concurrent iterative calculations on the signal.
- the at least one additional recursion processor calculates a quality index of the signal for each iteration and adjust the learning period of the next window to be decoded as the quality index changes.
- the quality index is a summation of generated extrinsic information multiplied by a quantity extracted from the LLR information at each iteration.
- the quantity can be a hard decision of the LLR value or the LLR value itself.
- the quality index is an intrinsic signal-to-noise ratio of the signal calculated at each iteration.
- the intrinsic signal-to-noise ratio is a function of the quality index added to a summation of the square of the generated extrinsic information at each iteration.
- the intrinsic signal-to-noise ratio can be calculated using the quality index with the quantity being a hard decision of the LLR value, or the intrinsic signal-to-noise ratio is calculated using the quality index with the quantity being the LLR value.
- the measure of the quality index is a slope of the quality index taken over consecutive iterations.
- the present invention can be used to stop iteration at any SISO decoder, or the iteration can be stopped at half cycles.
- SNR is derived according to Viterbi decoding which does not use a square root operation which would require much increased circuit complexity or the use of an approximation.
- the present invention has a very simple hardware implementation.
- FIG. 9 illustrates an exemplary Viterbi decoder wherein the QUALITY index is derived from yi, ti on one input and yi+ ⁇ 2 /2.
- FIG. 10 shows simulation results using the turbo decoding in accordance with the present invention.
- the performance of Q H (iter, ⁇ m i ⁇ ,L) and Q S (iter, ⁇ m i ⁇ ,L) were verified through numerical simulations. The simulation results are presented to demonstrate the asymptotic behavior of these indexes. Then the performance of the turbo decoder is shown given that the hard and soft indexes are being used as an iteration stopping criteria.
- the simulation was run with 2000 frames of size 640 bits and the SNR points are 0.8 dB, 0.9 dB and 1.0 dB.
- Viterbi's memory cutting technique known in the art for more realistic results, is implemented with synchronization learning length 30.
- the asymptotic behavior of the hard quality index Q H (iter, ⁇ m i ⁇ ,L) and the soft quality index Q S (iter, ⁇ m i ⁇ ,L) is depicted in FIGS. 10 and 11, respectively.
- FIGS. 10 and 11 shows that the slope of the asymptotic curves increases as the SNR gets higher. This is as expected since high SNR gives better extrinsic information in decoding. As can be seen, the quality indexes reach their asymptotes faster as SNR increases which means less iterations are needed for convergence. This property is valuable in reducing the number of computations in the present invention.
- FIG. 12 shows bit-error-rate BER performance curve simulation results using the turbo decoding in accordance with the present invention.
- the performance of the turbo decoder is shown given the intrinsic signal to noise ratio of the signal is being used as the signal quality criteria. All the results are under AWGN assumptions in floating and fixed point C format with Viterbi technique.
- the longest synchronization period was set to be 30 symbols.
- the largest iteration number used was 16, which is 8 full cycles.
- the synchronization period shrinking scheme of the present invention is applied after 4 mandatory iterations (i.e. 2 full cycles). Within each iteration, the synchronization period is reduced by certain number of symbols with a lower limit of 4 symbols of data as the minimum synchronization period (for the last stages of iteration). It is hypothesized that performance results will be improved if dynamic scaling or digital AGC is applied in the simulation. The results below were derived using 4-bit fixed point simulation results. Similar results were also obtained for floating point simulations which are not presented here.
- FIG. 13 shows the 4-bit fixed point simulation results with successive shrinking of synchronization period by 2 symbols.
- four initial iterations i.e. 2 full cycles
- the synchronization period is reduced by 2 symbols for each successive iteration until a minimum synchronization length of 4 symbols is reached and maintained.
- FIG. 14 shows the same simulation repeated but with successive shrinking of synchronization period by 5 symbols. We can see in FIGS. 13 and 14 that the performance degradation is small (negligible for 2-symbol case and less than 0.1 dB for 5-symbol case).
- the performance degradation with higher starting SNR will be smaller. This is illustrated in FIG. 15 showing expanded BER performance curves with 4-bit fixed point simulation. The plots are run with successive shrinking period of 5 symbols, which is considered as the “worst” case. Yet, the degradation is still less than 0.2 dB.
- FIG. 16 demonstrates the following overall timing operation of the turbo decoding process and three different regions of operation, in accordance with the present invention.
- the first portion is the full synchronization portion due to low intrinsic SNR. Viterbi's technique with random start was chosen in this first portion.
- the second portion shorter and shorter synchronization periods are applied with random start or with a sequence values with the quick increase of intrinsic SNR values.
- the third portion is the part with good intrinsic SNR and iteration can be stopped here.
- a virtual “sleep mode” is introduced into the turbo decoder with combinations of all these different schemes. The amount of the computation is reduced, and the saving of power consumption is directly proportional to the sleeping period.
- the computation reduction techniques of the present invention are improvements of Viterbi's technique, and can be accomplished via very simple modification to existing turbo decoder configurations.
- one ⁇ engine and at least one ⁇ computation engine is used. All engines are run full time in parallel for a few iterations with random start (there is no ⁇ sequence or path metric information available due to the timing mechanism anyway). After a few iterations, the ⁇ engine(s) are kept idle for a while and the ⁇ computations are started with the assistance of available ⁇ sequence or random start values (depending on the timing and availability of the ⁇ sequence). This “sleep mode” is very easy to control based on the regular dual backward computation engine design.
- the hardware needed to implement quality indexes is extremely simple. Since there are LLR and extrinsic information output in each constituent decoding stage, only a MAC (multiply and accumulate unit) is needed to calculate the soft index. A comparison unit based on one subtraction and one division is needed. For the hard index, a slicer is needed for hard decision before the MAC.
- these indexes can be implemented with some simple attachment to the current design.
- FIG. 17 shows a flow chart representing a method 200 of reducing calculations in the decoding of a received convolutionally coded signal represented by a trellis of a predetermined block length, in accordance with the present invention (also see FIG. 6 ).
- Trellis diagrams are well known in the art.
- a first step 202 is dividing the trellis into windows.
- a next step 204 is selecting a first window of the trellis having a known first state metric.
- a next step 206 decoding a portion of the trellis using backward recursion starting from a point that is after the end of the window selected in the previous step backwards to the end of the window, defining a learning period, to determine a known state metric at the end of the window, wherein a length of the learning period is dependent on the quality of the signal such that a shorter learning period is chosen for a higher quality signal and a longer learning period is chosen for a lower quality signal. In general, it is only desired to shorten the learning period.
- a next step 208 is decoding a portion of the trellis within the window using forward and backward recursion starting from the respective known state metrics at a beginning and end of the window defined in the previous step so as to determine the forward and backward recursion state metrics at each stage in the window.
- a next step 210 is calculating a soft output at each stage of the window using the forward recursion state metrics, the branch metrics, and the stored backward recursion state metric.
- the recursion updates and soft outputs are calculated using a SOVA or MAP algorithm or one of the MAP derivatives (i.e., log-MAP, max-log-MAP, constant-log-MAP, etc.).
- a next step 212 is determining the quality of the signal from the previous step.
- the quality of the signal in the determining step is determined from an intrinsic signal-to-noise ratio of the signal defined as a summation of generated extrinsic information multiplied by a quantity extracted from log-likelihood-ratio (LLR) value at each iteration generated in the second decoding step. This can be a hard decision of the LLR value or the LLR value itself.
- LLR log-likelihood-ratio
- a next step 214 is adjusting the learning period to be shorter as the quality of the signal improves and longer if the quality of the signal worsens.
- the adjusting step includes an upper and a lower boundary for the length of the learning period, and the adjustment in the learning period is proportional to the change in the quality of the signal found in the determining step.
- a next step 216 is selecting a next window of the trellis and proceeding with the first decoding step until the entire trellis is decoded.
- the window can be “slided” forward a distance L where the beginning of the new window starts at the end of the last window so as to start at a previously determined known state.
- the above steps can then be repeated for the new window. This process continues until all of the windows in the block are processed.
- the first and last windows are a special case in that the beginning and ends of the block are usually at known states for the convolutional code. Therefore, when processing the first window, the forward recursion starts at the known first state of the block, and when processing the last window it is not necessary to perform a backward learning recursion as the end state of the window is the known end state of the block.
Abstract
Description
Claims (20)
Priority Applications (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/617,194 US6829313B1 (en) | 2000-07-17 | 2000-07-17 | Sliding window turbo decoder |
AU2001273520A AU2001273520A1 (en) | 2000-07-17 | 2001-07-17 | Improved sliding window turbo decoder for convolutional codes |
PCT/US2001/022422 WO2002007453A2 (en) | 2000-07-17 | 2001-07-17 | Improved sliding window turbo decoder for convolutional codes |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/617,194 US6829313B1 (en) | 2000-07-17 | 2000-07-17 | Sliding window turbo decoder |
Publications (1)
Publication Number | Publication Date |
---|---|
US6829313B1 true US6829313B1 (en) | 2004-12-07 |
Family
ID=24472644
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/617,194 Expired - Lifetime US6829313B1 (en) | 2000-07-17 | 2000-07-17 | Sliding window turbo decoder |
Country Status (3)
Country | Link |
---|---|
US (1) | US6829313B1 (en) |
AU (1) | AU2001273520A1 (en) |
WO (1) | WO2002007453A2 (en) |
Cited By (62)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20020041646A1 (en) * | 2000-08-22 | 2002-04-11 | Huang Everest W. | Using SISO decoder feedback to produce symbol probabilities for use in wireless communications that utilize turbo coding and transmit diversity |
US20020097816A1 (en) * | 2000-10-16 | 2002-07-25 | Sim Myung Sub | Device and method for decoding turbo codes |
US20020118777A1 (en) * | 2000-12-29 | 2002-08-29 | Blankenship Thomas Keith | Method and system for initializing a training period in a turbo decoding device |
US20020118776A1 (en) * | 2000-12-29 | 2002-08-29 | Blankenship Thomas Keith | Method and system for adapting a training period in a turbo decoding device |
US20020131515A1 (en) * | 2001-01-18 | 2002-09-19 | Motorola, Inc. | Soft-decision metric generation for higher order modulation |
US20020159429A1 (en) * | 2001-03-19 | 2002-10-31 | Mitsubishi Denki Kabushiki Kaisha | Method and device for optimising, under performance constraint, the size of blocks of coded data |
US20030007580A1 (en) * | 2001-06-08 | 2003-01-09 | Toshio Nagata | Blind transport format detection system and method |
US20030058969A1 (en) * | 2001-09-25 | 2003-03-27 | Sindhushayana Nagabhushana T. | Turbo decoding method and apparatus for wireless communications |
US20030066019A1 (en) * | 2001-09-06 | 2003-04-03 | Interdigital Technology Corporation | Pipeline architecture for maximum a posteriori (MAP) decoders |
US20030066018A1 (en) * | 2000-12-23 | 2003-04-03 | Samsung Electronics Co., Ltd. | Apparatus and method for stopping iterative decoding in a CDMA mobile communication system |
US20030093753A1 (en) * | 2001-11-15 | 2003-05-15 | Nec Corporation | Error correction code decoding device |
US20030097630A1 (en) * | 2001-11-14 | 2003-05-22 | Wolf Tod D. | Turbo decoder prolog reduction |
US20030226086A1 (en) * | 2002-05-31 | 2003-12-04 | Walid Ahmed | Systems and methods for correcting errors in a received frame |
US20040025103A1 (en) * | 2002-06-05 | 2004-02-05 | Kazuhisa Obuchii | Turbo decoding method and turbo decoding apparatus |
US20040111659A1 (en) * | 2002-12-06 | 2004-06-10 | Sandbridge Technologies Inc. | Turbo decoder using parallel processing |
US20040153940A1 (en) * | 2002-12-10 | 2004-08-05 | Nam-Yul Yu | Apparatus and method for error correction in a CDMA mobile communication system |
US20040199848A1 (en) * | 2002-03-29 | 2004-10-07 | Kazuhiko Tamesue | Error correction decoding apparatus and error correction decoding method |
US20040202231A1 (en) * | 2003-04-11 | 2004-10-14 | Wang Yi-Pin Eric | Joint multi-code detectors in CDMA communications system |
US20050091566A1 (en) * | 2003-04-23 | 2005-04-28 | Stmicroelectronics N.V. | Method of blindly detecting a transport format of an incident convolutional encoded signal, and corresponding convolutional code decoder |
US20050166128A1 (en) * | 2002-03-27 | 2005-07-28 | Siemens Aktiengesellschaft | Method for decoding data sequence that has been encoded with the help of a binary convolution code |
US20050172203A1 (en) * | 2004-01-20 | 2005-08-04 | Samsung Electronics Co., Ltd. | Decoder and method for performing decoding operation using map algorithm in mobile communication system |
US20050172200A1 (en) * | 2003-01-23 | 2005-08-04 | Taku Nagase | Data receiving method and apparatus |
US20050273687A1 (en) * | 2004-05-24 | 2005-12-08 | Sung-Jin Park | Apparatus and method for turbo decoding using a variable window size |
US20050278603A1 (en) * | 2002-09-05 | 2005-12-15 | Stmicroelectronics N.V. | Combined turbo-code/convolutional code decoder, in particular for mobile radio systems |
US20050289432A1 (en) * | 2004-06-25 | 2005-12-29 | Via Telecom Co., Ltd. | Read enable generator for a turbo decoder deinterleaved symbol memory |
US20060039509A1 (en) * | 2002-09-18 | 2006-02-23 | Koninklijke Philips Electronics, N.V. | Method for decoding data using windows of data |
US20060068714A1 (en) * | 2004-09-27 | 2006-03-30 | Naresh Sharma | Method and apparatus for generating a channel estimate using a non-pilot portion of a signal |
US20060146963A1 (en) * | 2002-11-07 | 2006-07-06 | Cyril Valadon | Format detection |
US20060206697A1 (en) * | 2005-02-17 | 2006-09-14 | Samsung Electronics Co., Ltd. | System and method for trellis-based decoding |
US20060227854A1 (en) * | 2005-04-07 | 2006-10-12 | Mccloud Michael L | Soft weighted interference cancellation for CDMA systems |
US20060280158A1 (en) * | 2005-05-31 | 2006-12-14 | Chiaming Lo | System and method for forward and backward recursive computation |
US20070242781A1 (en) * | 2004-05-18 | 2007-10-18 | Patrick Galili | Turbo Decoder Input Reordering |
US7310369B1 (en) * | 2000-12-15 | 2007-12-18 | Conexant Systems, Inc. | SNR-related parameter estimation method and system |
US20080152045A1 (en) * | 2006-12-22 | 2008-06-26 | Andrey Efimov | High-throughput memory-efficient BI-SOVA decoder architecture |
US20090019332A1 (en) * | 2003-12-22 | 2009-01-15 | Koninklijke Philips Electronic, N.V. | Siso decoder with sub-block processing and sub-block based stopping criterion |
US20090067554A1 (en) * | 2007-09-10 | 2009-03-12 | Mbit Wireless, Inc. | High throughput and low latency map decoder |
US20090196380A1 (en) * | 2008-02-06 | 2009-08-06 | Fumio Anekoji | Method for generating soft decision signal from hard decision signal in a receiver system |
US20090327834A1 (en) * | 2008-06-27 | 2009-12-31 | Guy Drory | Device having turbo decoding capabilities and a method for turbo decoding |
US20100111234A1 (en) * | 2002-02-05 | 2010-05-06 | Qualcomm Incorporated | System for soft symbol decoding mimo log-map detection |
US7965710B1 (en) * | 2006-11-27 | 2011-06-21 | Marvell International Ltd. | Decoding operations in normal transmission mode |
US20120159288A1 (en) * | 2009-08-18 | 2012-06-21 | Matthias Kamuf | Soft Output Viterbi Algorithm Method and Decoder |
US20120192028A1 (en) * | 2009-08-28 | 2012-07-26 | Icera Inc. | Iterative decoding of signals received over a noisy channel using forward and backward recursions with warm-up initialization |
US20120210197A1 (en) * | 2011-02-15 | 2012-08-16 | Samsung Electronics Co. Ltd. | Apparatus and method for decoding in communication system |
US8345533B1 (en) | 2008-08-18 | 2013-01-01 | Marvell International Ltd. | Frame synchronization techniques |
US8411709B1 (en) | 2006-11-27 | 2013-04-02 | Marvell International Ltd. | Use of previously buffered state information to decode in an hybrid automatic repeat request (H-ARQ) transmission mode |
US20130170842A1 (en) * | 2012-01-04 | 2013-07-04 | Toshiaki Koike-Akino | Method and System for Equalization and Decoding Received Signals Based on High-Order Statistics in Optical Communication Networks |
US8514910B2 (en) | 2002-09-23 | 2013-08-20 | Rambus Inc. | Systems and methods for control of receivers |
US8654689B2 (en) | 2002-09-20 | 2014-02-18 | Rambus Inc. | Advanced signal processors for interference cancellation in baseband receivers |
US20140119421A1 (en) * | 2012-10-29 | 2014-05-01 | Apple Inc. | Testing Radio-Frequency Performance of Wireless Communications Circuitry Using Fast Fourier Transforms |
US8761321B2 (en) | 2005-04-07 | 2014-06-24 | Iii Holdings 1, Llc | Optimal feedback weighting for soft-decision cancellers |
US8817771B1 (en) | 2010-07-16 | 2014-08-26 | Marvell International Ltd. | Method and apparatus for detecting a boundary of a data frame in a communication network |
US8902745B1 (en) | 2007-07-17 | 2014-12-02 | Marvell International Ltd. | Mesh network operations |
US8902994B1 (en) | 2008-07-29 | 2014-12-02 | Marvell International Ltd. | Deblocking filtering |
US8908754B1 (en) | 2007-11-14 | 2014-12-09 | Marvell International Ltd. | Decision feedback equalization for signals having unequally distributed patterns |
US8942312B1 (en) | 2009-04-29 | 2015-01-27 | Marvell International Ltd. | WCDMA modulation |
US20150033094A1 (en) * | 2013-07-23 | 2015-01-29 | Yuan Ze University | Window-stopped method for applying to turbo decoding |
US8953661B1 (en) | 2008-03-18 | 2015-02-10 | Marvell International Ltd. | Wireless device communication in the 60 GHz band |
US9172456B2 (en) | 2005-04-07 | 2015-10-27 | Iii Holdings 1, Llc | Iterative interference suppressor for wireless multiple-access systems with multiple receive antennas |
US9294997B1 (en) | 2010-05-11 | 2016-03-22 | Marvell International Ltd. | Wakeup beacons for mesh networks |
US9332488B2 (en) | 2010-10-20 | 2016-05-03 | Marvell World Trade Ltd. | Pre-association discovery |
US20160204803A1 (en) * | 2015-01-12 | 2016-07-14 | Mstar Semiconductor, Inc. | Decoding method for convolutionally coded signal |
US9655041B1 (en) | 2008-12-31 | 2017-05-16 | Marvell International Ltd. | Discovery-phase power conservation |
Families Citing this family (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
FI20020108A0 (en) | 2002-01-21 | 2002-01-21 | Nokia Corp | Procedure and apparatus for forming wall metrics in trellis |
JP2006041960A (en) * | 2004-07-28 | 2006-02-09 | Nec Corp | Turbo decoding device and turbo decoding method and program |
US7810018B2 (en) | 2006-10-27 | 2010-10-05 | Telefonaktiebolaget Lm Ericsson (Publ) | Sliding window method and apparatus for soft input/soft output processing |
KR101622217B1 (en) * | 2008-08-04 | 2016-05-18 | 엘지전자 주식회사 | Transmitting/receiving system and method of processing broadcast signal in transmitting/receiving system |
US8259869B2 (en) | 2008-08-04 | 2012-09-04 | Lg Electronics Inc. | Transmitting/receiving system and method of processing broadcast signal in transmitting/receiving system |
CN101388674B (en) * | 2008-10-23 | 2011-06-15 | 华为技术有限公司 | Decoding method, decoder and Turbo code decoder |
Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5933462A (en) * | 1996-11-06 | 1999-08-03 | Qualcomm Incorporated | Soft decision output decoder for decoding convolutionally encoded codewords |
US6381728B1 (en) * | 1998-08-14 | 2002-04-30 | Qualcomm Incorporated | Partitioned interleaver memory for map decoder |
US6484283B2 (en) * | 1998-12-30 | 2002-11-19 | International Business Machines Corporation | Method and apparatus for encoding and decoding a turbo code in an integrated modem system |
Family Cites Families (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
FR2675968B1 (en) * | 1991-04-23 | 1994-02-04 | France Telecom | METHOD FOR DECODING A CONVOLUTIVE CODE WITH MAXIMUM LIKELIHOOD AND WEIGHTING OF DECISIONS, AND CORRESPONDING DECODER. |
US5548684A (en) * | 1994-04-22 | 1996-08-20 | Georgia Tech Research Corporation | Artificial neural network viterbi decoding system and method |
-
2000
- 2000-07-17 US US09/617,194 patent/US6829313B1/en not_active Expired - Lifetime
-
2001
- 2001-07-17 WO PCT/US2001/022422 patent/WO2002007453A2/en active Application Filing
- 2001-07-17 AU AU2001273520A patent/AU2001273520A1/en not_active Abandoned
Patent Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5933462A (en) * | 1996-11-06 | 1999-08-03 | Qualcomm Incorporated | Soft decision output decoder for decoding convolutionally encoded codewords |
US6381728B1 (en) * | 1998-08-14 | 2002-04-30 | Qualcomm Incorporated | Partitioned interleaver memory for map decoder |
US6484283B2 (en) * | 1998-12-30 | 2002-11-19 | International Business Machines Corporation | Method and apparatus for encoding and decoding a turbo code in an integrated modem system |
Cited By (119)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6999530B2 (en) * | 2000-08-22 | 2006-02-14 | Texas Instruments Incorporated | Using SISO decoder feedback to produce symbol probabilities for use in wireless communications that utilize turbo coding and transmit diversity |
US20020041646A1 (en) * | 2000-08-22 | 2002-04-11 | Huang Everest W. | Using SISO decoder feedback to produce symbol probabilities for use in wireless communications that utilize turbo coding and transmit diversity |
US20020097816A1 (en) * | 2000-10-16 | 2002-07-25 | Sim Myung Sub | Device and method for decoding turbo codes |
US7003041B2 (en) * | 2000-10-16 | 2006-02-21 | Lg Electronics Inc. | Device and method for decoding turbo codes |
US7310369B1 (en) * | 2000-12-15 | 2007-12-18 | Conexant Systems, Inc. | SNR-related parameter estimation method and system |
US20030066018A1 (en) * | 2000-12-23 | 2003-04-03 | Samsung Electronics Co., Ltd. | Apparatus and method for stopping iterative decoding in a CDMA mobile communication system |
US6888901B2 (en) * | 2000-12-23 | 2005-05-03 | Samsung Electronics Co., Ltd. | Apparatus and method for stopping iterative decoding in a CDMA mobile communication system |
US20020118776A1 (en) * | 2000-12-29 | 2002-08-29 | Blankenship Thomas Keith | Method and system for adapting a training period in a turbo decoding device |
US6952457B2 (en) * | 2000-12-29 | 2005-10-04 | Motorola, Inc. | Method and system for adapting a training period in a turbo decoding device |
US7027531B2 (en) * | 2000-12-29 | 2006-04-11 | Motorola, Inc. | Method and system for initializing a training period in a turbo decoding device |
US20020118777A1 (en) * | 2000-12-29 | 2002-08-29 | Blankenship Thomas Keith | Method and system for initializing a training period in a turbo decoding device |
US20020131515A1 (en) * | 2001-01-18 | 2002-09-19 | Motorola, Inc. | Soft-decision metric generation for higher order modulation |
US7076000B2 (en) * | 2001-01-18 | 2006-07-11 | Motorola, Inc. | Soft-decision metric generation for higher order modulation |
US20020159429A1 (en) * | 2001-03-19 | 2002-10-31 | Mitsubishi Denki Kabushiki Kaisha | Method and device for optimising, under performance constraint, the size of blocks of coded data |
US7200797B2 (en) * | 2001-03-19 | 2007-04-03 | Mitsubishi Denki Kabushiki Kaisha | Method and device for optimising, under performance constraint, the size of blocks of coded data |
US20030007580A1 (en) * | 2001-06-08 | 2003-01-09 | Toshio Nagata | Blind transport format detection system and method |
US20070118791A1 (en) * | 2001-09-06 | 2007-05-24 | Interdigital Technology Corporation | Pipeline architecture for maximum a posteriori (MAP) decoders |
US7181670B2 (en) | 2001-09-06 | 2007-02-20 | Interdigital Technology Corporation | Pipeline architecture for maximum a posteriori (MAP) decoders |
US20030066019A1 (en) * | 2001-09-06 | 2003-04-03 | Interdigital Technology Corporation | Pipeline architecture for maximum a posteriori (MAP) decoders |
US20060005111A1 (en) * | 2001-09-06 | 2006-01-05 | Interdigital Technology Corporation | Pipeline architecture for maximum a posteriori (MAP) decoders |
US8316285B2 (en) | 2001-09-06 | 2012-11-20 | Interdigital Technology Corporation | Pipeline architecture for maximum a posteriori (MAP) decoders |
US7908545B2 (en) | 2001-09-06 | 2011-03-15 | Interdigital Technology Corporation | Pipeline architecture for maximum a posteriori (MAP) decoders |
US6961921B2 (en) * | 2001-09-06 | 2005-11-01 | Interdigital Technology Corporation | Pipeline architecture for maximum a posteriori (MAP) decoders |
US7489744B2 (en) * | 2001-09-25 | 2009-02-10 | Qualcomm Incorporated | Turbo decoding method and apparatus for wireless communications |
US20030058969A1 (en) * | 2001-09-25 | 2003-03-27 | Sindhushayana Nagabhushana T. | Turbo decoding method and apparatus for wireless communications |
US20030097630A1 (en) * | 2001-11-14 | 2003-05-22 | Wolf Tod D. | Turbo decoder prolog reduction |
US6996765B2 (en) * | 2001-11-14 | 2006-02-07 | Texas Instruments Incorporated | Turbo decoder prolog reduction |
US20030093753A1 (en) * | 2001-11-15 | 2003-05-15 | Nec Corporation | Error correction code decoding device |
US7178090B2 (en) * | 2001-11-15 | 2007-02-13 | Nec Corporation | Error correction code decoding device |
US20100111234A1 (en) * | 2002-02-05 | 2010-05-06 | Qualcomm Incorporated | System for soft symbol decoding mimo log-map detection |
US8483328B2 (en) * | 2002-02-05 | 2013-07-09 | Qualcomm Incorporated | System for soft symbol decoding MIMO log-map detection |
US7143334B2 (en) * | 2002-03-27 | 2006-11-28 | Siemens Aktiengesellschaft | Method for decoding data sequence encoded with aid of binary convolution code |
US20050166128A1 (en) * | 2002-03-27 | 2005-07-28 | Siemens Aktiengesellschaft | Method for decoding data sequence that has been encoded with the help of a binary convolution code |
US20040199848A1 (en) * | 2002-03-29 | 2004-10-07 | Kazuhiko Tamesue | Error correction decoding apparatus and error correction decoding method |
US7386779B2 (en) * | 2002-05-31 | 2008-06-10 | Lucent Technologies | Systems and methods for correcting errors in a received frame |
US20030226086A1 (en) * | 2002-05-31 | 2003-12-04 | Walid Ahmed | Systems and methods for correcting errors in a received frame |
US7530011B2 (en) * | 2002-06-05 | 2009-05-05 | Fujitsu Limited | Turbo decoding method and turbo decoding apparatus |
US20040025103A1 (en) * | 2002-06-05 | 2004-02-05 | Kazuhisa Obuchii | Turbo decoding method and turbo decoding apparatus |
US20050278603A1 (en) * | 2002-09-05 | 2005-12-15 | Stmicroelectronics N.V. | Combined turbo-code/convolutional code decoder, in particular for mobile radio systems |
US7191377B2 (en) * | 2002-09-05 | 2007-03-13 | Stmicroelectronics N.V. | Combined turbo-code/convolutional code decoder, in particular for mobile radio systems |
US7587004B2 (en) * | 2002-09-18 | 2009-09-08 | St-Ericsson Sa | Method for decoding data using windows of data |
US20060039509A1 (en) * | 2002-09-18 | 2006-02-23 | Koninklijke Philips Electronics, N.V. | Method for decoding data using windows of data |
US9172411B2 (en) | 2002-09-20 | 2015-10-27 | Iii Holdings 1, Llc | Advanced signal processors for interference cancellation in baseband receivers |
US9735816B2 (en) | 2002-09-20 | 2017-08-15 | Iii Holdings 1, Llc | Interference suppression for CDMA systems |
US8654689B2 (en) | 2002-09-20 | 2014-02-18 | Rambus Inc. | Advanced signal processors for interference cancellation in baseband receivers |
US8514910B2 (en) | 2002-09-23 | 2013-08-20 | Rambus Inc. | Systems and methods for control of receivers |
US20060146963A1 (en) * | 2002-11-07 | 2006-07-06 | Cyril Valadon | Format detection |
US7644346B2 (en) * | 2002-11-07 | 2010-01-05 | Mstar Semiconductor, Inc. | Format detection |
US7055102B2 (en) * | 2002-12-06 | 2006-05-30 | Sandbridge Technologies, Inc. | Turbo decoder using parallel processing |
US20040111659A1 (en) * | 2002-12-06 | 2004-06-10 | Sandbridge Technologies Inc. | Turbo decoder using parallel processing |
US7249304B2 (en) * | 2002-12-10 | 2007-07-24 | Samsung Electronics Co., Ltd. | Apparatus and method for error correction in a CDMA mobile communication system |
US20040153940A1 (en) * | 2002-12-10 | 2004-08-05 | Nam-Yul Yu | Apparatus and method for error correction in a CDMA mobile communication system |
US20050172200A1 (en) * | 2003-01-23 | 2005-08-04 | Taku Nagase | Data receiving method and apparatus |
US7096410B2 (en) * | 2003-01-23 | 2006-08-22 | Sony Ericsson Mobile Communications Japan, Inc. | Turbo-code decoding using variably set learning interval and sliding window |
US7787522B2 (en) * | 2003-04-11 | 2010-08-31 | Telefonaktiebolaget Lm Ericsson (Publ) | Joint multi-code detectors in CDMA communications system |
US20040202231A1 (en) * | 2003-04-11 | 2004-10-14 | Wang Yi-Pin Eric | Joint multi-code detectors in CDMA communications system |
US20050091566A1 (en) * | 2003-04-23 | 2005-04-28 | Stmicroelectronics N.V. | Method of blindly detecting a transport format of an incident convolutional encoded signal, and corresponding convolutional code decoder |
US20090019332A1 (en) * | 2003-12-22 | 2009-01-15 | Koninklijke Philips Electronic, N.V. | Siso decoder with sub-block processing and sub-block based stopping criterion |
US7849377B2 (en) * | 2003-12-22 | 2010-12-07 | Koninklijke Philips Electronics N.V. | SISO decoder with sub-block processing and sub-block based stopping criterion |
US7584407B2 (en) * | 2004-01-20 | 2009-09-01 | Samsung Electronics Co., Ltd. | Decoder and method for performing decoding operation using map algorithm in mobile communication system |
US20050172203A1 (en) * | 2004-01-20 | 2005-08-04 | Samsung Electronics Co., Ltd. | Decoder and method for performing decoding operation using map algorithm in mobile communication system |
US9071279B2 (en) * | 2004-05-18 | 2015-06-30 | Nxp, B.V. | Turbo decoder input reordering |
US20070242781A1 (en) * | 2004-05-18 | 2007-10-18 | Patrick Galili | Turbo Decoder Input Reordering |
US7373582B2 (en) * | 2004-05-24 | 2008-05-13 | Samsung Electronics Co., Ltd. | Apparatus and method for turbo decoding using a variable window size |
US20050273687A1 (en) * | 2004-05-24 | 2005-12-08 | Sung-Jin Park | Apparatus and method for turbo decoding using a variable window size |
US20050289432A1 (en) * | 2004-06-25 | 2005-12-29 | Via Telecom Co., Ltd. | Read enable generator for a turbo decoder deinterleaved symbol memory |
US7266756B2 (en) * | 2004-06-25 | 2007-09-04 | Via Telecom Co., Ltd. | Read enable generator for a turbo decoder deinterleaved symbol memory |
US20060068714A1 (en) * | 2004-09-27 | 2006-03-30 | Naresh Sharma | Method and apparatus for generating a channel estimate using a non-pilot portion of a signal |
US7660568B2 (en) * | 2004-09-27 | 2010-02-09 | Alcatel-Lucent Usa Inc. | Method and apparatus for generating a channel estimate using a non-pilot portion of a signal |
US20060206697A1 (en) * | 2005-02-17 | 2006-09-14 | Samsung Electronics Co., Ltd. | System and method for trellis-based decoding |
US9172456B2 (en) | 2005-04-07 | 2015-10-27 | Iii Holdings 1, Llc | Iterative interference suppressor for wireless multiple-access systems with multiple receive antennas |
US7876810B2 (en) * | 2005-04-07 | 2011-01-25 | Rambus Inc. | Soft weighted interference cancellation for CDMA systems |
US8761321B2 (en) | 2005-04-07 | 2014-06-24 | Iii Holdings 1, Llc | Optimal feedback weighting for soft-decision cancellers |
US9425855B2 (en) | 2005-04-07 | 2016-08-23 | Iii Holdings 1, Llc | Iterative interference suppressor for wireless multiple-access systems with multiple receive antennas |
US10153805B2 (en) | 2005-04-07 | 2018-12-11 | Iii Holdings 1, Llc | Iterative interference suppressor for wireless multiple-access systems with multiple receive antennas |
US20060227854A1 (en) * | 2005-04-07 | 2006-10-12 | Mccloud Michael L | Soft weighted interference cancellation for CDMA systems |
US8259870B2 (en) | 2005-05-31 | 2012-09-04 | Skyworks Solutions, Inc. | System and method for decoding a received data sequence |
WO2006130602A3 (en) * | 2005-05-31 | 2009-04-30 | Skyworks Solutions Inc | System and method for forward and backward recursive computation |
KR101178976B1 (en) | 2005-05-31 | 2012-08-31 | 스카이워크스 솔루션즈 인코포레이티드 | System and method for forward and backward recursive computation |
US20060280158A1 (en) * | 2005-05-31 | 2006-12-14 | Chiaming Lo | System and method for forward and backward recursive computation |
US20100054375A1 (en) * | 2005-05-31 | 2010-03-04 | Skyworks Solutions, Inc. | System and method for forward and backward recursive computation |
US7616713B2 (en) | 2005-05-31 | 2009-11-10 | Skyworks Solutions, Inc. | System and method for forward and backward recursive computation |
US11296808B2 (en) | 2005-09-23 | 2022-04-05 | Iii Holdings 1, Llc | Advanced signal processors for interference cancellation in baseband receivers |
US10666373B2 (en) | 2005-09-23 | 2020-05-26 | Iii Holdings 1, L.L.C. | Advanced signal processors for interference cancellation in baseband receivers |
US10050733B2 (en) | 2005-09-23 | 2018-08-14 | Iii Holdings 1, Llc | Advanced signal processors for interference cancellation in baseband receivers |
US8411709B1 (en) | 2006-11-27 | 2013-04-02 | Marvell International Ltd. | Use of previously buffered state information to decode in an hybrid automatic repeat request (H-ARQ) transmission mode |
US7965710B1 (en) * | 2006-11-27 | 2011-06-21 | Marvell International Ltd. | Decoding operations in normal transmission mode |
US8948216B1 (en) | 2006-11-27 | 2015-02-03 | Marvell International Ltd. | Use of previously buffered state information to decode in an hybrid automatic repeat request (H-ARQ) transmission mode |
US7925964B2 (en) * | 2006-12-22 | 2011-04-12 | Intel Corporation | High-throughput memory-efficient BI-SOVA decoder architecture |
US20080152045A1 (en) * | 2006-12-22 | 2008-06-26 | Andrey Efimov | High-throughput memory-efficient BI-SOVA decoder architecture |
US8902745B1 (en) | 2007-07-17 | 2014-12-02 | Marvell International Ltd. | Mesh network operations |
US9072047B1 (en) | 2007-07-17 | 2015-06-30 | Marvell International Ltd. | Mesh network operations |
US20090067554A1 (en) * | 2007-09-10 | 2009-03-12 | Mbit Wireless, Inc. | High throughput and low latency map decoder |
US8358713B2 (en) * | 2007-09-10 | 2013-01-22 | Sarath Babu Govindarajulu | High throughput and low latency map decoder |
US8908754B1 (en) | 2007-11-14 | 2014-12-09 | Marvell International Ltd. | Decision feedback equalization for signals having unequally distributed patterns |
US7978793B2 (en) | 2008-02-06 | 2011-07-12 | Freescale Semiconductor, Inc. | Method for generating soft decision signal from hard decision signal in a receiver system |
US20090196380A1 (en) * | 2008-02-06 | 2009-08-06 | Fumio Anekoji | Method for generating soft decision signal from hard decision signal in a receiver system |
US8953661B1 (en) | 2008-03-18 | 2015-02-10 | Marvell International Ltd. | Wireless device communication in the 60 GHz band |
US8171384B2 (en) * | 2008-06-27 | 2012-05-01 | Freescale Semiconductor, Inc. | Device having turbo decoding capabilities and a method for turbo decoding |
US20090327834A1 (en) * | 2008-06-27 | 2009-12-31 | Guy Drory | Device having turbo decoding capabilities and a method for turbo decoding |
US8902994B1 (en) | 2008-07-29 | 2014-12-02 | Marvell International Ltd. | Deblocking filtering |
US8345533B1 (en) | 2008-08-18 | 2013-01-01 | Marvell International Ltd. | Frame synchronization techniques |
US8902726B1 (en) | 2008-08-18 | 2014-12-02 | Marvell International Ltd. | Frame synchronization techniques |
US9655041B1 (en) | 2008-12-31 | 2017-05-16 | Marvell International Ltd. | Discovery-phase power conservation |
US8942312B1 (en) | 2009-04-29 | 2015-01-27 | Marvell International Ltd. | WCDMA modulation |
US20120159288A1 (en) * | 2009-08-18 | 2012-06-21 | Matthias Kamuf | Soft Output Viterbi Algorithm Method and Decoder |
US8806312B2 (en) * | 2009-08-18 | 2014-08-12 | Telefonaktiebolaget L M Ericsson (Publ) | Soft output Viterbi algorithm method and decoder |
US8793561B2 (en) * | 2009-08-28 | 2014-07-29 | Icera Inc. | Iterative decoding of signals received over a noisy channel using forward and backward recursions with warm-up initialization |
US20120192028A1 (en) * | 2009-08-28 | 2012-07-26 | Icera Inc. | Iterative decoding of signals received over a noisy channel using forward and backward recursions with warm-up initialization |
US9294997B1 (en) | 2010-05-11 | 2016-03-22 | Marvell International Ltd. | Wakeup beacons for mesh networks |
US8817771B1 (en) | 2010-07-16 | 2014-08-26 | Marvell International Ltd. | Method and apparatus for detecting a boundary of a data frame in a communication network |
US9332488B2 (en) | 2010-10-20 | 2016-05-03 | Marvell World Trade Ltd. | Pre-association discovery |
US20120210197A1 (en) * | 2011-02-15 | 2012-08-16 | Samsung Electronics Co. Ltd. | Apparatus and method for decoding in communication system |
US8843811B2 (en) * | 2011-02-15 | 2014-09-23 | Samsung Electronics Co., Ltd. | Apparatus and method for decoding in communication system |
US20130170842A1 (en) * | 2012-01-04 | 2013-07-04 | Toshiaki Koike-Akino | Method and System for Equalization and Decoding Received Signals Based on High-Order Statistics in Optical Communication Networks |
US20140119421A1 (en) * | 2012-10-29 | 2014-05-01 | Apple Inc. | Testing Radio-Frequency Performance of Wireless Communications Circuitry Using Fast Fourier Transforms |
US20150033094A1 (en) * | 2013-07-23 | 2015-01-29 | Yuan Ze University | Window-stopped method for applying to turbo decoding |
US10116337B2 (en) * | 2015-01-12 | 2018-10-30 | Mstar Semiconductor, Inc. | Decoding method for convolutionally coded signal |
US20160204803A1 (en) * | 2015-01-12 | 2016-07-14 | Mstar Semiconductor, Inc. | Decoding method for convolutionally coded signal |
Also Published As
Publication number | Publication date |
---|---|
WO2002007453A2 (en) | 2002-01-24 |
WO2002007453A3 (en) | 2002-04-04 |
AU2001273520A1 (en) | 2002-01-30 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US6829313B1 (en) | Sliding window turbo decoder | |
EP1314254B1 (en) | Iteration terminating for turbo decoder | |
US6901117B1 (en) | Soft output decoder for convolutional codes | |
US6307901B1 (en) | Turbo decoder with decision feedback equalization | |
US6510536B1 (en) | Reduced-complexity max-log-APP decoders and related turbo decoders | |
US6885711B2 (en) | Turbo decoder with multiple scale selections | |
US6452979B1 (en) | Soft output decoder for convolutional codes | |
US6393076B1 (en) | Decoding of turbo codes using data scaling | |
US6192501B1 (en) | High data rate maximum a posteriori decoder for segmented trellis code words | |
US7209527B2 (en) | Turbo decoder employing max and max* map decoding | |
US6606725B1 (en) | MAP decoding for turbo codes by parallel matrix processing | |
US6999531B2 (en) | Soft-decision decoding of convolutionally encoded codeword | |
US6856657B1 (en) | Soft output decoder for convolutional codes | |
JP2004343716A (en) | Method and decoder for blind detection of transmission format of convolution-encoded signal | |
US6868132B1 (en) | Soft output decoder for convolutional codes | |
US7925964B2 (en) | High-throughput memory-efficient BI-SOVA decoder architecture | |
US20030101402A1 (en) | Hard-output iterative decoder | |
US7031406B1 (en) | Information processing using a soft output Viterbi algorithm | |
Berns et al. | Channel decoder architecture for 3G mobile wireless terminals | |
US20070157063A1 (en) | Method for iterative decoding in a digital system and apparatus implementing the method | |
US20030110438A1 (en) | Turbo decoder, and a MAP decoder component of the turbo decoder | |
KR100369422B1 (en) | Soft output decoder for convolutional codes | |
US20030101403A1 (en) | Turbo decoder and its calculation methods having a state metric | |
Zhang et al. | Research and improvement on stopping criterion of Turbo iterative decoding | |
Zhen-Chuan et al. | Performance research and simulations on improvement adaptive iterative decoder algorithms of Turbo codes |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: MOTOROLA, INC., ILLINOISFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:XU, SHUZHAN J.;REEL/FRAME:011022/0041Effective date: 20000713 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: MOTOROLA MOBILITY, INC, ILLINOISFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MOTOROLA, INC;REEL/FRAME:025673/0558Effective date: 20100731 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: MOTOROLA MOBILITY LLC, ILLINOISFree format text: CHANGE OF NAME;ASSIGNOR:MOTOROLA MOBILITY, INC.;REEL/FRAME:029216/0282Effective date: 20120622 |
|
AS | Assignment |
Owner name: GOOGLE TECHNOLOGY HOLDINGS LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MOTOROLA MOBILITY LLC;REEL/FRAME:034432/0001Effective date: 20141028 |
|
FPAY | Fee payment |
Year of fee payment: 12 |