CN111526927B - Temporary game control via user simulation after loss of active control - Google Patents
Temporary game control via user simulation after loss of active control Download PDFInfo
- Publication number
- CN111526927B CN111526927B CN201980007131.3A CN201980007131A CN111526927B CN 111526927 B CN111526927 B CN 111526927B CN 201980007131 A CN201980007131 A CN 201980007131A CN 111526927 B CN111526927 B CN 111526927B
- Authority
- CN
- China
- Prior art keywords
- game
- game state
- client device
- user
- input
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
Images
Classifications
-
- A—HUMAN NECESSITIES
- A63—SPORTS; GAMES; AMUSEMENTS
- A63F—CARD, BOARD, OR ROULETTE GAMES; INDOOR GAMES USING SMALL MOVING PLAYING BODIES; VIDEO GAMES; GAMES NOT OTHERWISE PROVIDED FOR
- A63F13/00—Video games, i.e. games using an electronically generated display having two or more dimensions
- A63F13/50—Controlling the output signals based on the game progress
-
- A—HUMAN NECESSITIES
- A63—SPORTS; GAMES; AMUSEMENTS
- A63F—CARD, BOARD, OR ROULETTE GAMES; INDOOR GAMES USING SMALL MOVING PLAYING BODIES; VIDEO GAMES; GAMES NOT OTHERWISE PROVIDED FOR
- A63F13/00—Video games, i.e. games using an electronically generated display having two or more dimensions
- A63F13/55—Controlling game characters or game objects based on the game progress
- A63F13/56—Computing the motion of game characters with respect to other game characters, game objects or elements of the game scene, e.g. for simulating the behaviour of a group of virtual soldiers or for path finding
-
- A—HUMAN NECESSITIES
- A63—SPORTS; GAMES; AMUSEMENTS
- A63F—CARD, BOARD, OR ROULETTE GAMES; INDOOR GAMES USING SMALL MOVING PLAYING BODIES; VIDEO GAMES; GAMES NOT OTHERWISE PROVIDED FOR
- A63F13/00—Video games, i.e. games using an electronically generated display having two or more dimensions
- A63F13/30—Interconnection arrangements between game servers and game devices; Interconnection arrangements between game devices; Interconnection arrangements between game servers
- A63F13/33—Interconnection arrangements between game servers and game devices; Interconnection arrangements between game devices; Interconnection arrangements between game servers using wide area network [WAN] connections
- A63F13/335—Interconnection arrangements between game servers and game devices; Interconnection arrangements between game devices; Interconnection arrangements between game servers using wide area network [WAN] connections using Internet
-
- A—HUMAN NECESSITIES
- A63—SPORTS; GAMES; AMUSEMENTS
- A63F—CARD, BOARD, OR ROULETTE GAMES; INDOOR GAMES USING SMALL MOVING PLAYING BODIES; VIDEO GAMES; GAMES NOT OTHERWISE PROVIDED FOR
- A63F13/00—Video games, i.e. games using an electronically generated display having two or more dimensions
- A63F13/30—Interconnection arrangements between game servers and game devices; Interconnection arrangements between game devices; Interconnection arrangements between game servers
- A63F13/35—Details of game servers
- A63F13/358—Adapting the game course according to the network or server load, e.g. for reducing latency due to different connection speeds between clients
-
- A—HUMAN NECESSITIES
- A63—SPORTS; GAMES; AMUSEMENTS
- A63F—CARD, BOARD, OR ROULETTE GAMES; INDOOR GAMES USING SMALL MOVING PLAYING BODIES; VIDEO GAMES; GAMES NOT OTHERWISE PROVIDED FOR
- A63F13/00—Video games, i.e. games using an electronically generated display having two or more dimensions
- A63F13/45—Controlling the progress of the video game
- A63F13/49—Saving the game status; Pausing or ending the game
- A63F13/493—Resuming a game, e.g. after pausing, malfunction or power failure
-
- A—HUMAN NECESSITIES
- A63—SPORTS; GAMES; AMUSEMENTS
- A63F—CARD, BOARD, OR ROULETTE GAMES; INDOOR GAMES USING SMALL MOVING PLAYING BODIES; VIDEO GAMES; GAMES NOT OTHERWISE PROVIDED FOR
- A63F13/00—Video games, i.e. games using an electronically generated display having two or more dimensions
- A63F13/45—Controlling the progress of the video game
- A63F13/49—Saving the game status; Pausing or ending the game
- A63F13/497—Partially or entirely replaying previous game actions
-
- A—HUMAN NECESSITIES
- A63—SPORTS; GAMES; AMUSEMENTS
- A63F—CARD, BOARD, OR ROULETTE GAMES; INDOOR GAMES USING SMALL MOVING PLAYING BODIES; VIDEO GAMES; GAMES NOT OTHERWISE PROVIDED FOR
- A63F13/00—Video games, i.e. games using an electronically generated display having two or more dimensions
- A63F13/60—Generating or modifying game content before or while executing the game program, e.g. authoring tools specially adapted for game development or game-integrated level editor
- A63F13/67—Generating or modifying game content before or while executing the game program, e.g. authoring tools specially adapted for game development or game-integrated level editor adaptively or by learning from player actions, e.g. skill level adjustment or by storing successful combat sequences for re-use
-
- A—HUMAN NECESSITIES
- A63—SPORTS; GAMES; AMUSEMENTS
- A63F—CARD, BOARD, OR ROULETTE GAMES; INDOOR GAMES USING SMALL MOVING PLAYING BODIES; VIDEO GAMES; GAMES NOT OTHERWISE PROVIDED FOR
- A63F2300/00—Features of games using an electronically generated display having two or more dimensions, e.g. on a television screen, showing representations related to the game
- A63F2300/60—Methods for processing data by generating or executing the game program
- A63F2300/6045—Methods for processing data by generating or executing the game program for mapping control signals received from the input arrangement into game commands
- A63F2300/6054—Methods for processing data by generating or executing the game program for mapping control signals received from the input arrangement into game commands by generating automatically game commands to assist the player, e.g. automatic braking in a driving game
Abstract
The electronic game server determining a simulated game play input for the first client device during an interruption of the network connection between the server and the client device; updating the first game state based on the simulated game play input, thereby generating a placeholder game state; after resuming the network connection, receiving a resumed gameplay input initially transmitted by the first client device during the interruption; updating the first game state based on the restored game play input, thereby producing a desired game state; comparing the placeholder game state to the expected game state; updating the placeholder game state based on the comparison of the placeholder game state with the desired game state, thereby generating a subsequent game state; and transmitting the frame depicting the subsequent game state to an output device associated with the first client device.
Description
Technical Field
The present application relates generally to computer technology, including but not limited to methods and systems for managing a server system to support online interactive sessions corresponding to one or more real-time user interactive applications
Background
Internet-connected electronic devices may support a variety of cloud-based media and entertainment applications. These applications include media streaming applications where a server streams content to a user device, gaming applications where users interact from a user device with games executed on a server, and various social media and communication applications that allow a large number of users to interact with each other and cloud-hosted content and applications simultaneously via their internet-connected devices. Among cloud-based applications, cloud games present some unique challenges for the following reasons: widely varying hardware requirements for game titles; multiple topologies in which cloud-based games can be played (e.g., by one player, by multiple players in a single location, or by multiple players in multiple locations); there is a need to reliably and without delay transmit player input to a game server executing a game session and transmit game session output from the game server to a player's device/display; widely varying player expectations regarding speed and responsiveness of gameplay (gameplay); and in some cases, the desire to provide near real-time game content to the audience. Other challenges of cloud-based gaming relate to providing players with a consistent gameplay experience, wherever they are located (e.g., near a server or far away from a server), how they connect to a gaming service (e.g., via a fast or slow internet connection), and what type of device they use to play the game (e.g., a general purpose personal device or a dedicated game controller) and view gameplay output (e.g., a personal device or a media device connected to a media streaming device).
In particular, there is a need for a cloud gaming system that supports multiple gaming sessions for multiple game names, where games can be executed simultaneously with acceptable latency and responsiveness, including for multiple users from the same or different locations that are playing the same game name, and through a variety of input and output devices and network connections. Further, there is a need for a cloud gaming system that processes user input immediately after receiving player input (e.g., gaming input typed on an end-user gaming device/controller) in a gaming session and outputs a high-definition image reflecting the results of the player input action for all game players simultaneously and with acceptable delay. There is also a need for a gaming system that, in some instances, provides a high definition video stream of game play activity to allow spectators to track game play in real time on respective display devices. As such, it would be beneficial to provide an efficient game processing and output mechanism to a cloud gaming system to extend the gaming experience in a wide range of gaming settings, from spontaneous game play by users aggregated at the same location to online interactive game play by multiple users from multiple locations.
Disclosure of Invention
Embodiments described herein are directed to providing a gaming Application Programming Interface (API) and cloud platform to enable efficient, portable, and low-latency hosting of third party gaming content. Some embodiments dynamically allocate cloud gaming hardware resources and monitor and utilize network bandwidth available to individual end users to provide an optimal cloud gaming experience. Some embodiments provide multiple performance layers, including layers that support high performance, real-time gaming sessions with high definition media output and end-user streaming. Some embodiments support different subscription models and/or are configured to provide one or more concurrent real-time gameplay and/or commentary media streams that correspond with little or no delay to one or more actual game streams (e.g., video streams output to clients of users participating in an online/cloud gaming session via a mobile application or browser-based program). In some implementations, concurrent game play and/or commentary videos are provided to one or more users via a media streaming site, such as YouTube, with little or no delay.
In one aspect of the present application, a method of processing game play input during and after a network interruption is implemented at a server system having one or more processors and memory storing one or more programs for execution by the one or more processors. The method comprises the following steps: determining a simulated gameplay input for a first client device during an interruption of a network connection between a server system and the first client device; updating the first game state based on the simulated game play input, thereby generating a placeholder game state; after resuming the network connection, receiving a resumed gameplay input made by a user of the first client device during the interruption; updating the first game state based on the restored game play input, thereby producing a desired game state; comparing the placeholder game state to the expected game state; updating the placeholder game state based on the comparison of the placeholder game state with the desired game state, thereby generating a subsequent game state; and transmitting a frame depicting a subsequent game state to an output device associated with the first client device.
According to some aspects of the present application, a server system includes a memory storing instructions for causing the server system to perform any of the methods described above.
Further, according to some aspects of the present application, the instructions stored in the memory of the server system include instructions for causing the server system to perform any of the methods described above.
Other embodiments and advantages may be apparent to those skilled in the art from the description and drawings herein.
Drawings
For a better understanding of the various described embodiments, reference should be made to the following description of the embodiments taken in conjunction with the following drawings in which like reference numerals refer to corresponding parts throughout the figures.
FIG. 1 is an example online interactive gaming environment, according to some embodiments.
FIG. 2 is a block diagram illustrating an example client device of a gaming environment, in accordance with some embodiments.
FIG. 3 is a block diagram illustrating an example media device of a gaming environment, in accordance with some embodiments.
FIG. 4 is a block diagram illustrating an example server of a gaming environment, in accordance with some embodiments.
FIG. 5A is an example gaming environment, according to some embodiments.
Fig. 5B-5C illustrate example gameplay scenarios, according to some embodiments.
FIG. 6 is a flow diagram of a game play process according to some embodiments.
Fig. 7 is a flow diagram illustrating an example method for compensating for network outages, according to some embodiments.
Figures 8A-8B illustrate example scenarios of gameplay processes according to some embodiments.
Figure 9 is a flow diagram illustrating an example method for processing gameplay before, during, and after an interruption, according to some embodiments.
Like reference numerals refer to corresponding parts throughout the drawings.
Detailed Description
Embodiments described herein are directed to providing a cloud platform and API to enable efficient, portable, low-latency hosting of cloud gaming content, including third party gaming content. Some embodiments dynamically allocate cloud gaming hardware resources (e.g., CPU, GPU, memory, input/output and video stream encoders) and monitor and utilize network bandwidth available to a single end user to simultaneously provide an optimal online gaming experience to a community of game players. Some embodiments provide multiple performance layers, including layers that support high performance, real-time gaming sessions with high definition media streams for end users. Some embodiments support different subscription models and/or are configured to provide one or more concurrent real-time gameplay and/or commentary media streams that correspond with little or no delay to one or more actual game streams (e.g., video streams output to client devices of users participating in an online/cloud gaming session via a mobile application or browser-based program). In some implementations, a real-time gameplay and/or commentary media stream is provided to one or more users with little or no delay through a media streaming website, such as YouTube.
In some implementations of the cloud gaming environment, the server system provides hardware resources for real-time, interactive gaming sessions for processing player input and generating output streams for display to one or more players, and optionally, to game spectators. In response to a request to establish a real-time interactive gaming session, the server system determines device capabilities (e.g., hardware and/or software capabilities), connection capabilities (e.g., bandwidth, latency, and/or error rate) of the requesting client device (i.e., the player's controller device), and one or more target quality parameters (e.g., resolution of the output video stream, game response latency, etc.) of the gaming session, and thus, associates one of its virtual machines with the real-time interactive session to establish the session.
In some implementations, the processing and encoding capabilities of game data (e.g., generating output video streams for players and/or spectators) are managed for one or more processing cores (e.g., GPU cores and encoder cores) in a server system hosting a real-time, online, and interactive game environment. For example, in some implementations, one or more processing cores operate with multiple processing slices (e.g., each executing within 16.67ms on the core), and the server system assigns each of the multiple processing slices to a subset of the multiple online game sessions to be executed thereon. For one of the processing slices, the server system determines a time-shared processing schedule such that the respective subsets of the gaming sessions share the duty cycle of the processing slice and are executed in parallel according to their respective real-time data processing needs. Additionally, to speed up image encoding over a time interval, the encoder of the server system does not need to wait until the GPU has made all of the data for the image frame available. Rather, in some embodiments, a portion of an image frame is encoded once the information needed to encode that portion is provided by the GPU, regardless of whether other portions of the image frame that are not related to the encoded portion are made available to the GPU.
Additionally, the server system may dynamically generate the plurality of frames in response to user commands received from users participating in the online gaming session. Depending on the type of user command, the server system determines the expected response delay, the actual communication and processing delays, and the actual transmission delay. User commands are then executed in the online gaming session by generating a set of frames that reflect the effects of the commands. A set of frames, when transmitted at a predetermined frame rate, occupy a transmission time corresponding to an actual transmission delay and may be received at a client device of a user within a time corresponding to an expected response delay.
FIG. 1 illustrates an example online interactive gaming environment 100, in accordance with some embodiments. Online interactive gaming environment 100 includes one or more client devices (e.g., client devices 102 and 104). Each client device 102 executes one or more gaming applications. The game session may run on a particular game application to allow a user of the client device 102 to play an online interactive game hosted by the server system 114. In some implementations, a client device 102 (e.g., a host client) is configured to invite one or more other client devices 102 to join a game scenario of a particular game application. The gaming sessions of these client devices 102 are synchronized to display the same game scenes, optionally with different perspectives corresponding to their respective users.
Rather, server system 114 hosts an online interactive gaming platform to support client device 102 in participating in one or more gaming applications, including a particular gaming application. In particular, server system 114 includes a plurality of user accounts associated with client device 102 and authenticates a user of the client device in association with each of the one or more gaming applications. Server system 114 renders and refreshes a scene of the online interactive game on client device 102, which client device 102 joined a corresponding game session associated with the scene. In some implementations, the server system 114 evaluates the capabilities of the client devices 102 and/or the quality of the communication connection between the server system 114 and each client device 102 and adaptively generates a synchronization data stream for the gaming session associated with the client device 102. By these means, the server system 114 is configured to facilitate a synchronized gaming session of an online interactive game on two or more client devices 102 simultaneously and with substantially low latency.
In some implementations, the server system 114 includes a game server 122 and a media streaming server 124. The game server 122 is configured to simultaneously provide two or more media streams for an online interactive game session running on the first client device 102A. The two or more media streams include a low-latency stream and a normal-latency stream that are provided to the first client device 102A and the reviewer client device 104 via one or more communication networks 112, respectively. Optionally, a normal delay stream is provided for instructional purposes. When the user of the first client device 102 participates in a gaming session on the first client device 102A, the gaming session is recorded and broadcast to one or more spectators via a normal latency stream, i.e., spectators may comment on the gaming session on the reviewer client. The low-latency stream corresponds to gameplay of the online interactive game session and has a faster response rate and lower transmission latency than a normal latency stream corresponding to an associated commentary session. For example, the low-delay stream has a predefined frame rate of 60 frames per second (fps) and provides at least one frame to the first client device 102A during each 16.67ms interval, and the normal-delay stream has a predefined frame rate of 30fps and provides at least one frame to the reviewer client device 104 during each 33.33ms interval. In some embodiments, the normal delay stream has a lower resolution than the low delay stream.
In some implementations, the client device 102 or 104 has a display screen integrated therein for displaying media content. In some implementations, the client device 102 or 104 is coupled to a media device 106 and an output device 108. In particular, the client device 102 or 104 may be communicatively coupled to the media device 106 directly (e.g., via a bluetooth or other wireless communication link), via a local network 110 (e.g., a Wi-Fi network), or via one or more communication networks 112. In some implementations, the client device (102 or 104) and the media device 106 are both local to each other (e.g., in the same room, in the same house, etc.). Media device 106 is further coupled to one or more output devices 108 (e.g., televisions, display monitors, sound systems, speakers, etc.) that may output visual and/or audio content. The media device 106 is configured to output content to the output device 108. In some implementations, the media device 106 is a drop device (e.g., a chord media st of Google, inc.) or a device that otherwise includes a drop function.
In some implementations, one or more client devices 102 or 104 can be capable of data communication and information sharing with each other, a central server or cloud computing system (e.g., server system 114), and/or other devices connected by a network (e.g., another client device 102 or 104, media device 106, and output device 108)). Data communication may be performed using any of a variety of custom or standard wireless protocols (e.g., IEEE 802.15.4, Wi-Fi, ZigBee, 6LoWPAN, Thread, Z-Wave, Bluetooth Smart, isa100.11a, WirelessHART, MiWi, etc.) and/or any of a variety of custom or standard wired protocols (e.g., ethernet, HomePlug, etc.), or any other suitable communication protocol including communication protocols not developed until the date of filing this document. In some embodiments, online interactive gaming environment 100 includes a conventional network device (e.g., a router) via which sets of client devices 102 and 104 and their corresponding media and output devices (if any) are communicatively coupled to each other over a local network 110 (e.g., a local area network), and local network 110 is communicatively coupled to a communication network 112 (e.g., a wide area network and the internet). In some embodiments, each of the client devices 102 and 104 optionally communicates with one or more other client devices, respective media devices 106, or respective output devices 108 using one or more radio communication networks (e.g., ZigBee, Z-Wave, Insteon, bluetooth, Wi-Fi, and/or other radio communication networks).
In some implementations, the client devices 102 are remote from each other, i.e., they are not located in the same room or even building. The game may be started by launching a game application (e.g., game application 228 in fig. 2) to execute on each client device 102. In some implementations, for each client device 102, the gaming application establishes an online gaming session 116 independently with the server system 114. The online gaming sessions 116 of two or more client devices 102 (e.g., 102A and 102B) are related to each other (e.g., because they all play games in the same gaming domain of the gaming application) and, thus, share a game scene in the gaming application. The related online gaming sessions 116 are synchronized with each other, and each online gaming session 116 optionally shows the same game scenario with a unique player perspective corresponding to the respective client device 102. Thus, the user of each client device 102 may play a game on the respective client device and affect the output of the online gaming session 116 on the other client devices 102.
Alternatively, in some other implementations, after the gaming application of the first client device 102A establishes the online gaming session 116, one or more second client devices 102B are invited to join the online gaming session 116 by an invitation message, and a message, for example, with a link (e.g., a URL address) to join the online gaming session 116 is sent to each of the second client devices 102B. An appropriate controller configuration is provided to each second client device 102B invited to join the online gaming session 116. In this application, when a second client 102B joins the online gaming session 116, the server system 114 creates a separate gaming session for each separate second client device 102B. Each individual game session 116 of a respective second client device 102B is synchronized with the game session 116 of the first client device 102A and shares the same scene with that game session 116, but may have a unique player perspective corresponding to the respective second client device 102B. After each second client device 102B has received the appropriate controller configuration and joined the online gaming session 116 (more precisely, started its associated online gaming session 116), the user may play a game on the respective second client device 102B and affect the output of the online gaming sessions 116 running on the other client devices 102.
The client device 102 is a device that includes and can run one or more different user applications, including a gaming application. In some implementations, the client device 102 is a smartphone, tablet, laptop, desktop computer, or multimedia device. In some implementations, the client device 102 is a dedicated game controller that includes game controls (e.g., one or more buttons, a joystick, a touch screen affordance (affordance), a motion control, a pressure control, a visual control, an audio control, and/or other tactile interfaces) configured to control certain aspects of game play when activated or otherwise manipulated. In some implementations, the client device 102 includes one or more user applications configured to operate in conjunction with the media device 106. In some implementations, the application includes a media device application for pairing the client device 102 with the media device 106 and configuring the media device 106. The applications also include one or more applications that can drop the associated content to the media device 106. In some implementations, the application renders the data and/or content to the media device 106 by sending the data/content directly to the media device 106 (e.g., via a local network) and/or by directing the media device 106 to a remote location (e.g., a URL or other link to a location at a server system) from which the media device 106 can stream or otherwise receive the data/content. The media device 106 receives data/content from an application and/or a remote location and outputs visual and/or audio content corresponding to the received data/content to the output device 108. Accordingly, an online game session 116 is established between the game application running on the client device 102, the remote server system 114, and the media device 106.
In some implementations, as part of the process of linking related online gaming sessions 116, server system 114 evaluates the capabilities of each corresponding client device 102 and/or the quality of the communication connection between server system 114 and client device 102. In some implementations, server system 114 measures network delay between client device 102 and server system 114. If the measured delay is above the threshold and a lower delay connection is available, server system 114 may suggest to client device 102 to change to the lower delay connection, or invite the user of client device 102 to change client device 102 to the lower delay connection. For example, if the client device 102 is on the cellular wireless connection 118 and a local network is available, the server system 114 may suggest that the client device 102 should connect through the available local network. In some embodiments, the delay threshold requirements vary from game to game. For example, some games (e.g., action games) experience the best on a lower latency connection, while others (e.g., online board games or card games) do not require much latency. In view of these different requirements associated with different types of games, server system 114 may make connection recommendations.
In some implementations, as part of the client device 102 initiating or joining the game session 116, the server system 114 communicates with the client device 102 to set up controllers (e.g., game controller configurations and/or interfaces) on the client device 102. In some implementations, this includes server system 114 evaluating whether client device 102 has the resources and communication capabilities required by the controller. The controller may be implemented differently at the client device 102 depending on the available resources, connection quality, and gaming requirements at the client device 102. In some implementations, a web-based controller interface may be used to play the game. For example, a controller interface for a game may be embedded in a web page, and the web page rendered in a web browser on the client device 102. Alternatively, in some implementations, the standardized controller is implemented in a predefined application that is not game-specific or directly associated with the game (e.g., a launch device application, such as the chromacast or Google CAST of Google, inc., or other media device application), or in the operating system of the client device 102. For example, a device operating system or a predefined application on the client device 102 may have a controller sub-module. The controller sub-module includes one or more standardized controller configurations, templates, and the like. Each standardized controller configuration configures the controller sub-module to implement a virtual controller using input devices and/or sensors on the client device 102 in some manner. The standardized controller configuration used may vary with the type of game and/or client device.
Further, in some embodiments, the game has a particular controller configuration that may be implemented on the controller sub-module. Such a configuration may be stored at the server system 114 and transmitted to the client device 102 as part of the process by which the client device 102 joins or begins the online gaming session 116. In some embodiments, the particular controller configuration may be a fully custom controller or a mix of standard and custom controllers. Additionally, in some implementations, the game requires a particular application associated with the game. For example, a game may require a controller application specifically associated with the game. In some implementations, the client device 102 may be directed to download a particular application or a predefined application as part of starting or joining the session 116. For example, if the client device 102 does not already have a predefined application (and controller submodule) or a particular application associated with a game, and such an application is required for playing the game, the server system 114 instructs the client device 102 to prompt its user for a download and requests permission from the user to proceed.
In some implementations, the server system 114 stores user information associated with a user account for each of one or more gaming applications (e.g., the gaming application 228 of fig. 2) hosted on the server system 114. Examples of user information include, but are not limited to, user account information (e.g., identification and password), membership type, preferences, and activity history. In some implementations, the server system 114 stores session data associated with an online gaming session that is engaged on the client device 102. Examples of session data for each online game session include, but are not limited to, frame rate, rendering specifications, normal latency requirements, GPU allocation information, encoder allocation information, identification of the relevant session, and latest state information.
In some implementations, the server system 114 provides game APIs and cloud platforms to enable efficient, portable, low-latency hosting of third-party game content used in the online game session 116. In some embodiments, the game API and cloud platform are enabled by a server system 114, the server system 114 further comprising one or more of: a front-end server 134, a media streaming server 124, a game server 122, and one or more third-party content servers 136. In some implementations, the game API platform is created and/or hosted by the game server 122 and enables the game session 116 in conjunction with the front end server 134 and the content server 136. The front end server 134 is configured to provide services to users of the gaming sessions 116 and manage the users' accounts. Optionally, the user subscribes to the gaming service via the front end server 134. The content server 136 provides game content related to the game session 116.
In some implementations, the front-end server 134 manages user accounts associated with the client devices 102 and 104, e.g., through subscriptions of the user accounts for membership to one or more online interactive games. After a client device 102 logs into its respective user account and joins its online gaming session 116, the game server 122 sets up the gaming session 116 and manages each particular gaming session 116 for the respective client device 102 by obtaining gaming content from the content server 136, transmitting the gaming content to a gaming application executing on the client device 102, identifying a user request or action, rendering game play output for the client device 102 in response to the user request or action, and storing game state data during the respective gaming session 116. Game server 122 includes one or more processing units (e.g., CPU 138, GPU140, and encoder 142), memory 146, and data buffer 144, which temporarily stores multimedia content generated by GPU140 and provides the multimedia content to encoder 142 for further encoding (e.g., normalization or compression). The data buffer 144 is optionally integrated in the memory 146 or separate from the memory 146.
In some implementations, the game server 122 dynamically allocates cloud game hardware resources (e.g., GPU140 and encoder 142) and monitors and utilizes network bandwidth available to individual end users to provide an optimal cloud game experience. In some embodiments, game server 122 provides multiple performance layers, including layers that support high-performance, real-time game sessions with high-definition video/media streams. In some implementations, game server 122 supports different subscription models and/or is configured to provide one or more concurrent real-time gameplay and/or commentary media streams that correspond with little or no delay to one or more actual game streams (e.g., video streams output to client devices of users participating in an online/cloud gaming session via a mobile application or browser-based program). In particular, game server 122 is configured to generate concurrent media streams and commentary videos for game play and provide commentary videos for concurrent game play to media streaming server 104. Such commentary videos are provided to one or more users via a media streaming website, such as YouTube, with little or no delay. The media streaming sites are optionally managed by a media streaming server 124.
Some embodiments enable hosting of common events in conjunction with gaming competitions. For example, in connection with a hosted game-based multiplayer gaming event or contest, a cloud gaming site hosted by game server 122 may optionally broadcast or stream to a particular reviewer client device 104 via media streaming server 123: (a) one or more concurrent auxiliary or supplemental media streams including associated commentary tracks/streams, (b) game streams from different competitor perspectives, the emphasis streams showing particularly compelling game actions based on cloud server analysis and/or scoring of multiple game sessions associated with the game event, (c) one or more game viewpoint streams reflecting game play sessions 116 of one or more active players, and/or (d) instructional tracks from one or more active players and/or reviewers, possibly including real-time picture-in-picture (PIP) videos and their corresponding game play responses sent by active players to the cloud game server system 114.
According to some embodiments, examples of third party content that may be effectively hosted by the content server 136 include, but are not limited to, sports games, racing games, Role Playing Games (RPGs), and First Person Shooter (FPS) games. Different instances of these games may have widely varying cloud hardware requirements and networks (e.g., to ensure an optimal user gaming experience-consistent with different subscription performance layers in some cases) based on different associated delay requirements and expectations, output video resolution and game server computing workload and video encoding/streaming resources, and network bandwidth.
In some embodiments, the front end server 134 provides an account management API and/or software module that monitors game play activity and subscriber related requests (e.g., requests by end users to invite other players to participate in a gaming session, upgrade their gaming tools, and/or game performance), and transmits or makes available associated information to the third party content server 136 through the API to enable content providers to track their subscriber and/or attendee settings (including but not limited to billing information, in-game credits, subscription levels, etc.). In some implementations, a content provider of hosted content may provide one or more different subscription models for hosted content via the same hosting platform. In some implementations, users (e.g., subscribers to a gaming service) are granted unlimited access and game play to all games offered by content providers on a hosted platform. In some implementations, users are granted unlimited access and game play to one or more particular game franchises (e.g., particular soccer or first-person shooting franchises) provided by content providers on a hosting platform. In some embodiments, the subscription is for limited participation by the user-participation may be limited according to game play time, level of hardware resources committed by the end user, or end user device type/location. In some implementations, the account API and module configure and monitor gameplay sessions and enable content providers to track individual subscribers' gaming activities according to their latest subscription information, even during active gameplay.
The server system 114 enables cloud functionality that allows a user to move around, for example, hang a first game flow of a first game session executing on a first client device 102, and restart the first game flow on a second game session of a second client device 102 to continue the first game session. Server system 114 also supports multiple players on a large scale and provides a richer, more durable cloud-based world. The server system 114 uses a cloud-based system to store session data related to different game sessions 116 of the same user or different game sessions 116 of different users.
The server system 114 renders game content on a plurality of client devices 102 and 104, including but not limited to mobile phones, tablet computers, desktop computers, and televisions. Optionally, the game content is dynamically adjusted to conform to the specifications of these client devices 102 and 104. In some implementations, the client devices 102 and 104 have limited or no storage capability because the game API platform provides instant access and requires no or little user device storage (e.g., a user may start playing in 5 seconds and save 250GB of console hard disk space).
In addition to the game content, the server system 114 streams additional content to the client devices 102 and 104, such as new tournaments, statistics, and preview access to earlier titles, which are optionally updated periodically (e.g., updated over time, updated daily, or hourly). In some implementations, the additional content includes search results of an internet search or a database search.
In some implementations, the server system 114 supports a real-time online community associated with the gaming application. Users (e.g., subscribers to the service) participate in live events, tournaments, or activities on the corresponding gaming API platform throughout the day. Examples of live events, tournaments, or activities include viewing live gaming sessions played by other users, posting achievements to a public domain (e.g., YouTube), and getting live reminders and instructional videos. For example, in response to a user action, the game server 122 provides two or more real- time streams 130 and 132. While maintaining the first game stream 130 on the first game session 116 of the first client device 102A of the game player, the server system 114 also broadcasts a second live comment stream 132 (e.g., a YouTube stream) to one or more other client devices 104 (e.g., of the subscriber). The second live stream of commentary 132 allows the user to share his or her gaming experience with the audience. Optionally, the second live stream is a rendition of a screen of the player's first client device 102A. The server system 114 may obtain an audio stream in which the player interprets the first game session 116 or a video stream that plays and interprets the player of the first game session 116. The audio stream is optionally played for the listener at the same time that the second live comment stream 132 is played for the listener. The video stream is optionally played in an embedded window in the second live comment stream 132.
Some embodiments provide mobile gaming, allowing a user to take his or her intended game to any location or client device. For example, the user may start an online gaming session 116 on the mobile device 102A on his or her commute and then seamlessly resume the gaming session 116 at his or her destination on the laptop computer 102B. Also, in some implementations, based on the different client device resources available to the user when the game session 116 is switched between different devices 102, the server system 114 (and in particular, the game server 122) can dynamically deploy different sets of hardware resources (e.g., GPU140 and encoder 142) to optimize the user's gaming experience based on the different end user current device resources (e.g., client hardware capabilities and network bandwidth).
In server system 114, front-end server 134 and game server 122 may have respective user account systems. In an example, the user account system for the front end server 134 is used to manage subscriptions to particular game content and services, and the user account system for the game server 122 (e.g., YouTube or Google account) is used to manage game experiences (e.g., render game content to meet particular game standards) and many other purposes. In some implementations, the two user account systems share customer and usage data (e.g., social, friends, presence, authentication, account information, billing information). Also, the content front end server 134 provides a service layer that sits on top of the technology layer enabled by the game server 122. In some implementations, the game content server manages additional user account systems for accessing their content. Optionally, an additional user account system for gaming content is integrated with the user account system of the front end server 134 for managing user subscriptions.
FIG. 2 is a block diagram illustrating an example client device 102 of a gaming environment 100, in accordance with some embodiments. Throughout this application, references to client device 102 correspond to one or more of client devices 102A, 102B, and 104 described with reference to fig. 1, unless otherwise noted. Examples of client devices 102 include, but are not limited to, mobile phones, tablet computers, laptop computers, desktop computers, and wearable personal devices. In some implementations, the client device 102 is a dedicated game controller that includes game control inputs 210 (e.g., one or more buttons, joysticks, touch screen elements, motion controls, pressure controls, visual controls, audio controls, and/or other tactile interface elements configured to control certain aspects of game play when activated). Client device 102 includes one or more processing units (CPUs) 202, one or more network interfaces 204, memory 206, and one or more communication buses 208 for interconnecting these components (sometimes referred to as a chipset). The client device 102 includes one or more input devices 210 that facilitate user input, such as a keyboard, mouse, voice command input unit or microphone, touch screen display, touch sensitive input panel, gesture capture camera, or other input buttons or controls. Further, some client devices 200 may use a microphone and voice recognition or a camera and gesture recognition to supplement or replace interfaces (e.g., keyboards and buttons) that require contact. In some implementations, the client device 102 includes one or more cameras, scanners, or photo sensor units for capturing images of, for example, a graphical series of codes printed on an electronic device. In some implementations, the client device 102 includes one or more output devices 212, including one or more speakers and/or one or more visual displays, capable of presenting a user interface and displaying content. Optionally, client device 102 includes a location detection device 214, such as a GPS (global positioning satellite) or other geographic location receiver, for determining the location of client device 102. Client device 102 may also include a proximity detection device 215, e.g., an IR sensor, for determining the proximity of media device 106 and/or other client devices 102. Client device 102 may also include one or more sensors 213 (e.g., accelerometers, gyroscopes, etc.) for sensing motion, orientation, and other parameters of client device 102, which may be used as inputs (e.g., for inputs 210 described above).
The memory 206 includes high-speed random access memory, such as DRAM, SRAM, DDR RAM or other random access solid state memory devices; and optionally includes non-volatile memory, such as one or more magnetic disk storage devices, one or more optical disk storage devices, one or more flash memory devices, or one or more other non-volatile solid-state storage devices. Memory 206 optionally includes one or more storage devices remotely located from the one or more processing units 202. Memory 206, or alternatively, non-volatile memory within memory 206, including non-transitory computer-readable storage media. In some embodiments, memory 206 or a non-transitory computer readable storage medium of memory 206 stores the following programs, modules and data structures, or a subset or superset thereof:
an operating system 216, including processes for handling various basic system services and for performing hardware related tasks;
a network communication module 218 for connecting the client device 102 to other devices (e.g., server system 114, media devices 106, and other client devices 102) via one or more network interfaces 204 (wired or wireless) and one or more networks 110 and/or 112 such as the internet, other wide area networks, local area networks, metropolitan area networks, etc.;
a user interface module 220 for enabling presentation of information (e.g., a graphical user interface for presenting applications, widgets, websites and web pages thereof, and/or games, audio and/or video content, text, etc.) at the client device 102 via one or more output devices 212 (e.g., displays, speakers, etc.);
an input processing module 222 for detecting one or more user inputs or interactions from one of the one or more input devices 210 and interpreting the detected inputs or interactions;
an input event reporting module 223 for reporting input identification and/or timestamp information to the server system 114 for delayed calculations;
a Web browser module 225 for navigating, requesting (e.g., via HTTP), and displaying websites and their Web pages, including a Web interface for joining session 116;
a media device application 226 for interacting with the media device 106, including logging into a user account associated with the media device 106, controlling the media device 106 if associated with the user account, and editing and commenting on settings and data associated with the media device 106;
a game application 228 for providing games on the client device 102, including invitations to facilitate corresponding game play and to facilitate other players;
a game controller module 230 for providing a game play input interface to the game application 228;
a data download module 231 for downloading data from the server system 114 and other content hosts and providers (e.g., game controller configuration 456 (FIG. 4), game applications 228 and other applications, updates to modules and applications, and data in memory 206); and
a game app setting 238 for storing information associated with the user account of the game app 228, including one or more of account access information, user preferences in the game, game play history data, and information about other players;
a game controller configuration 240 for storing information associated with a configuration of the game controller module 230 for the game application 228 (e.g., the configuration received from the game controller configuration 456 of figure 4); and
position/proximity data 242, including information associated with the presence, proximity, or location of any of client device 102 and media device 106.
In some implementations, the game controller module 230 is part of (e.g., a sub-module of) the media device application 226 or another application in the memory 206. In some implementations, the game controller module 230 is part of the operating system 216. In some implementations, the game controller module 230 is a different module or application.
In some implementations of the client device 102, the media device application 226 (and corresponding media device settings 236) and the game application 228 (and corresponding game application settings 238) are optional. Depending on the particular game the client device 102 is invited to join, the media device application 226 and the game application 228 need not be played. If any of these applications are needed for game play (e.g., the game uses the game controller module 230 in the media device application 226) and the application is not in the memory 206, the client device 102 may be prompted to download the application.
Each of the above identified elements may be stored in one or more of the aforementioned storage devices and correspond to a set of instructions for performing the functions described above. The above identified modules or programs (i.e., sets of instructions) need not be implemented as separate software programs, procedures, modules, or data structures, and thus various subsets of these modules may be combined or otherwise re-arranged in various embodiments. In some embodiments, memory 206 optionally stores a subset of the modules and data structures identified above. In addition, memory 206 may optionally store additional modules and data structures not described above.
FIG. 3 is a block diagram illustrating an example media device 106 of gaming environment 100, in accordance with some embodiments. Media device 106 typically includes one or more processing units (CPUs) 302, one or more network interfaces 304, memory 306, and one or more communication buses 308 for interconnecting these components, sometimes referred to as a chipset. Optionally, the media device 106 includes a proximity/location detection unit 310, such as an IR sensor, for determining the proximity of the client device 102.
Memory 306 includes high-speed random access memory, such as DRAM, SRAM, DDR RAM or other random access solid state memory devices; and optionally non-volatile memory, such as one or more magnetic disk storage devices, one or more optical disk storage devices, one or more flash memory devices, or one or more other non-volatile solid-state storage devices. Memory 306 optionally includes one or more storage devices remotely located from the one or more processing units 302. Non-volatile memory within memory 306, or alternatively memory 306, includes non-transitory computer-readable storage media. In some implementations, memory 306 or a non-transitory computer-readable storage medium of memory 306 stores the following programs, modules, and data structures, or a subset or superset thereof:
an operating system 316, including procedures for handling various basic system services and for performing hardware-related tasks;
a network communication module 318 for connecting the media device 106 to other computers or systems (e.g., server system 114 and client device 102) via one or more network interfaces 304 (wired or wireless) and one or more networks 110 and/or 112 (such as the internet, other wide area networks, local area networks, metropolitan area networks, cable television systems, satellite television systems, IPTV systems, etc.);
a content decoding module 320 for decoding content signals received from one or more content sources (e.g., server system 114 output from game session 116) and outputting content in the decoded signals to output device 108 coupled to media device 106;
a proximity/location determination module 322 for determining the proximity of the client device 102 based on proximity-related information detected by the proximity detection unit 310 or provided by the server system 114;
a media display module 324 for controlling the display of media; and
a display event reporting module 325 for reporting display event identification and/or timestamp information to the server system 114 for delay calculations;
a media device setting 330 for storing information associated with a user account of a media device application, including one or more of account access information and device setting information (e.g., service layer, device model, storage capabilities, processing capabilities, communication capabilities, etc.); and
position/proximity data 332, including information associated with the presence, proximity, or location of any of client device 102 and media device 106.
Each of the elements identified above may be stored in one or more of the aforementioned memory devices and correspond to a set of instructions for performing a function described above. The above identified modules or programs (i.e., sets of instructions) need not be implemented as separate software programs, procedures, modules, or data structures, and thus various subsets of these modules may be combined or otherwise re-arranged in various embodiments. In some embodiments, memory 306 optionally stores a subset of the modules and data structures identified above. Further, memory 306 may optionally store additional modules and data structures not described above.
FIG. 4 is a block diagram illustrating an example server in server system 114 of gaming environment 100, in accordance with some embodiments. Server system 114 typically includes one or more processing units (e.g., CPU 138, GPU140, and encoder 142), one or more network interfaces 404, memory 146, and one or more communication buses 408 for interconnecting these components, sometimes referred to as a chipset. The server system 114 may optionally include one or more input devices 410 that facilitate user input, such as a keyboard, mouse, voice command input unit or microphone, touch screen display, touch sensitive input pad, gesture capture camera, or other input buttons or controls. Further, server system 114 may use a microphone and speech recognition or a camera and gesture recognition to supplement or replace the keyboard. In some embodiments, server system 114 optionally includes one or more cameras, scanners, or photo sensor units for capturing images of, for example, a graphic series of codes printed on an electronic device. Server system 114 may also include one or more output devices 412, including one or more speakers and/or one or more visual displays, capable of presenting a user interface and displaying content.
The memory 146 comprises high-speed random access memory, such as DRAM, SRAM, ddr ram or other random access solid state memory devices; and optionally non-volatile memory, such as one or more magnetic disk storage devices, one or more optical disk storage devices, one or more flash memory devices, or one or more other non-volatile solid-state storage devices. Memory 146 optionally includes one or more storage devices remotely located from the one or more processing units. Memory 146, or alternatively, non-volatile memory within memory 146, including non-transitory computer-readable storage media. In some embodiments, memory 146 or a non-transitory computer readable storage medium of memory 146 stores the following programs, modules and data structures, or a subset or superset thereof:
an operating system 416, including procedures for handling various basic system services and for performing hardware-related tasks;
a network communication module 418 for connecting the server system 114 to other devices (e.g., various servers in the server system 114, client devices 102, and media devices 106) via one or more network interfaces 404 (wired or wired) and one or more networks 110 and/or 112 (such as the internet, other wide area networks, local area networks, metropolitan area networks, etc.);
a user interface module 420 for enabling presentation of information at the client device 102 (e.g., a graphical user interface for presenting applications, widgets, websites and their webpages and/or games, audio and/or video content, text, etc.);
media device module 422 (optional), executed to provide server-side functionality for device provisioning, device control, and user account management associated with media device 106;
a proximity/location determination module 424 for determining the proximity of the client device 102 to the media device 106 based on location information of any one of the client device 102 and the media device 106;
a game server module 426 for providing server-side functionality associated with a game (e.g., game application 228), including but not limited to setting up a game session, storing session state data and other game-related data, processing game play input from the client device 102, and rendering game play output in response to game play input; the game server module includes:
a game engine 428 for determining gameplay output based on (i) gameplay input and (ii) game state corresponding to gameplay input
A simulation module 430 for simulating game play input during a network disruption between the player's game controller 102 and the server system 114 (e.g., according to behavior in a particular player's game);
an interruption detection module 432 to detect an interruption in, or of, a network connection between server system 114 and game controller 102 and/or media device 106 that supports a game session between, or involving, one or more of the aforementioned components; and
a state coordination module 434 for processing the recovered input and coordinating the game state affected by the simulation with the game state desired by the user when restoring the network connection between the server system 114 and the game controller 102;
a media streaming server module 438 to host a media streaming site, receive a concurrent auxiliary or supplemental media stream associated with the online game session, and provide the concurrent media stream to the client device 104 for concurrent display with the online game session being executed on the game application 228 of the same client device 104 or a different client device 102;
a front-end server module 440 for managing user accounts associated with the client device 102, e.g., enabling a subscription to membership of one or more online interactive games through the user accounts, enabling services to subscribers for subscriber requests to be forwarded to the game server module 426, and monitoring game play activities and subscriber related requests;
a media content server module 442 for providing access to gaming content hosted by one or more third-party content providers;
a device/network evaluation module 444 for evaluating the device and network capabilities of the client device 102, including but not limited to evaluating the network bandwidth of the connection with the client device 102 and evaluating whether the client device 102 has the modules or applications required for game play;
a data transfer module 446 for providing data (e.g., game controller configuration 456, software updates, etc.) to the client device 102; and
media device settings 452 (optional) for storing information associated with a user account of media device application 422, including one or more of account access information and device setting information (e.g., service layer, device model, storage capacity, processing capabilities, communication capabilities, etc.);
position/ proximity data 454, 454, including information associated with the presence, proximity, or location of any of the client device 102 and the media device 106;
a game controller configuration 456 for storing controller configurations for various games; and
a game session event log 460 for storing event data related to game sessions (e.g., game state data, game play inputs, and other game related data), including, for example, data 460-1 of a first game session and data 460-2 of a second game session, wherein session data 460 for each game session includes, but is not limited to, game state data, game play inputs, and other session data, such as frame rate, rendering specifications, normal latency requirements, GPU allocations, encoder allocations, and state information related to the respective game session (e.g., network connection state information detailing whether there is a network connection disruption between server system 114 and controller 102 and/or media device 106); and
a data buffer 144 for temporarily storing game play multimedia content generated by GPU140 in association with one or more output media streams.
In some embodiments, the game server module 426 includes the following programs, modules, or a subset or superset thereof:
an intent determination module 428 for comparing user input transmission times (e.g., between the client device 102 and the server system 114) with display transmission times (e.g., between the media device 106 and the server system 114) and determining specific input behind the user's intent by matching input events to corresponding trigger frames;
delay adjustment module 430 to determine the number of intermediate frames that GPU140 inserts between (i) the current frame being processed when the user input is received and (ii) the response frame showing the result of the received input:
a resource allocation module 432 (optionally referred to herein as a "session coordinator") for receiving session requests from endpoints (e.g., controller 102) and determining which resources are assigned to the session; and
In some embodiments, memory 146 also includes a data buffer 144 configured to couple encoder 142 to GPU 140. In particular, data buffer 144 temporarily stores game play multimedia content generated by GPU140 in association with one or more output media streams, such that encoder 142 may retrieve the game play multimedia content from data buffer 144 and encode the retrieved content into one or more media streams, e.g., for normalization, speed, or compression.
Each of the above identified elements may be stored in one or more of the aforementioned memory devices and correspond to a set of instructions for performing the functions described above. The above identified modules or programs (i.e., sets of instructions) need not be implemented as separate software programs, procedures, modules, or data structures, and thus various subsets of these modules may be combined or otherwise re-arranged in various embodiments. In some embodiments, memory 146 optionally stores a subset of the modules and data structures identified above. Further, memory 146 may optionally store additional modules and data structures not described above.
Example Game Process
The various embodiments of the cloud-based gaming platform described above provide many benefits (e.g., portability, extensibility, efficiency, ease of access and control, etc.). However, the cloud-based nature of these gaming platforms faces various challenges, such as variability in network and processing resources, which if not properly considered, may negatively impact the game play experience. Such challenges may potentially create an unbalanced game play experience due to variable delays and instantaneous connection interruptions in the network 110/112 between the client device 102 and the server system 114. The following disclosure describes various embodiments that compensate for transient network outages that may exist in a real-time interactive cloud-based gaming environment. By compensating for these interruptions, the embodiments described herein provide a smooth and uniform gaming experience for each player.
Fig. 5A depicts an example gaming environment 500. Gaming environment 500 is an example implementation similar to gaming environment 100 (FIG. 1), with corresponding components similarly labeled. The gaming environment 500 includes a client device 102 (also referred to herein as a "game controller" or "controller") that a player (or "user") uses to control various aspects of a game (or "gameplay"), for example, by activating or manipulating an input 210 (fig. 2). Gaming environment 500 also includes media device 106 (e.g., a set-top box) and output device 108 (e.g., a television or other output display). Controller 102 and media device 106 are communicatively coupled to local network 110 (depicted as a wireless router in this example) via local communication links 502 and 504, respectively (e.g., over WiFi). Local network 110 is communicatively coupled to server system 114 via a communication network 112 (e.g., the internet) through a communication link 506. Server system 114 includes game server 122 (fig. 1).
Although the gaming environment 500 depicted in the figures includes only a single local network 110 with a single controller 102, some embodiments of the gaming environment 500 may include multiple local networks 110, with some local networks 110 including more than one controller 102 (e.g., for multiplayer games sharing the same gaming session, as described above with reference to fig. 1-4).
The presence of several elements in the gaming environment 500 may introduce network disruptions that are perceptible (e.g., affect at least one frame) and change over time. For example, the local network 110 (e.g., WiFi) may introduce various amounts of delay in the communication links 502 and 504. The average delay can be very low (e.g., < 1ms) if there is no contention on the channel. However, in a busy environment such as an apartment building with overlapping WiFi networks or a game play environment with multiple wireless client devices, the average amount of delay is more common in the range of 10-50ms, with outliers exceeding 200+ ms.
Further, the communication network 112 (e.g., the internet) may introduce a delay in the communication link 506 that causes the momentary interruption. The variability of this delay may not be as high for most users as WiFi; however, at peak game times (evening), media sharing (e.g., on a cable modem) and network saturation can result in data packet delays or losses. The average delay will depend on the distance from the local network 110 to the edge server of the server system 114, with an example amount of delay in the range of 20-30 ms. Furthermore, the likelihood of instantaneous connection interruption increases with the distance between the local network 110 and the edge server of the server system 114.
Because some embodiments of the gaming environment 100/500 have a separate network connection between the controller 102 and the server system 114 (e.g., 502/506) relative to the output device 108 and the server system 114 (e.g., 504/506), a disruption in the network path between the controller and the server may not necessarily affect the network path between the server and the output device. In these cases, the user may experience a momentary interruption with the game controller 102 as the game play event is continuously rendered on the output device 108. Therefore, it is important to accurately compensate for network disruptions between the controller 102 and the server system 114 in order to ensure that user intent (e.g., desired game play input) is properly accounted for in the game play experience.
The network problems described above (e.g., delay and lost data packets) can have a significant impact on the game play experience. Fig. 5B and 5C illustrate two example gameplay scenarios, resulting in disparate outcomes due to a network connection disruption. However, before describing these examples in detail, it is first necessary to describe example gameplay processes.
Fig. 6 is a flow diagram of a game play process 600 according to some embodiments. The process may be performed at an electronic server (e.g., server system 114, or more specifically, game server 122) having one or more processors (e.g., CPU 138 and/or GPU140) and memory (e.g., memory 146) storing one or more programs for execution by the one or more processors; a media device (e.g., media device 106) having one or more processors (e.g., CPU 302) and memory (e.g., memory 306) storing one or more programs for execution by the one or more processors; and/or at a user device (e.g., controller 102) having one or more processors (e.g., CPU 202) and memory (e.g., memory 206) storing one or more programs for execution by the one or more processors. In some implementations, the server, media device, and user device include one or more programs and memory storing the one or more respective programs for execution by the one or more respective processors, and the one or more programs include instructions for performing the process 600. In some implementations, respective non-transitory computer-readable storage media store one or more respective programs, the one or more respective programs including instructions, which when executed by an electronic server, a media device, and a user device, cause the electronic server, the media device, and the user device with one or more respective processors to perform the process 600. Some operations in process 600 may be combined and/or the order of some operations may be changed.
A user of controller 102 (also referred to herein as a "player") uses controller 102 to affect in-game events depicted by video frames (e.g., 510) displayed on output device 108 (see fig. 5A). When a player decides to affect game play (e.g., by moving a virtual player, shooting hockey, etc.), the player activates 602 or otherwise manipulates input 210 (e.g., presses a button) on controller 102. Activation or manipulation of the input 210 on the controller 102 is referred to herein as "user input," user gameplay input, "" desired input, "" input event, "and" command. The input events are communicated 604 to the server system 114 (e.g., to an event log 460 associated with the game session) via communication links 502 and 506 (over the networks 110 and 112).
Upon receiving (606) the input event, server system 114 optionally determines (608) which frame to display on output device 108 when the user activates the input associated with the received input event. The frame displayed to the user at the time of the user activation input is referred to herein as a "trigger frame" because it triggers the user to respond by activating the input.
The game server optionally 122 determines 610 a state of the game associated with the input event (referred to herein as a "trigger state"). Optionally, the trigger state is determined based on the trigger frame determined in step 608. In some embodiments, game server 122 determines the trigger state by consulting a log of game states maintained in event log 460 (FIG. 4). In some implementations, the event log 460 includes a log of game states indexed by frame fingerprints, frame IDs, and/or game time data (e.g., timestamp or clock data). In some embodiments, game server 122 determines the trigger state by determining a game time index associated with the trigger frame or associated with the input event, and consulting event log 460 to determine the game state that existed at the game time index associated with the trigger frame. Depending on how much time elapses between the display of the trigger frame on output device 108 and the receipt of the input event on game server 122, the trigger state may be past relative to the current state being processed on game server 122.
Having determined the trigger state, game server 122 (e.g., GPU140) processes (612) the subsequent game state (sometimes referred to herein as "game play output") according to (i) the input event (e.g., "shoot puck") and (ii) the trigger state (e.g., the game state that exists or is displayed when the user enters the "shoot puck" input). In some embodiments, processing the game play output includes inputting the input event into an algorithm or game engine that determines the game play output based on the input event and the corresponding game state. For example, the game engine may determine the next game state based on the state/position of each player and puck relative to the goal during the current game state and any input commands (e.g., "move", "shoot", or "block") received relative to the virtual player during the current game state. In some implementations, processing subsequent game states (game play outputs) as a function of the input event and the trigger state includes processing the input event as if the server were available to the server when processing a game state that is close to the trigger state (e.g., the next state after the trigger state, or a state immediately after the trigger state).
In processing the game play output, game server 122 renders (614) or otherwise processes a frame or series of frames depicting the processed game play output. The frame (or first of a series of frames) depicting the gameplay output is referred to herein as a "response frame". For example, if the input event and trigger state result in game play output that includes movement of a particular virtual player, the response frame is a frame depicting the particular virtual player in a modified spatial position relative to other objects in the frame remaining consistent with the direction specified by the user input. Alternatively, if the input event and trigger state result in a game play output in which a particular virtual player shoots hockey, the response frame is the first frame in a series of frames depicting the particular virtual player shooting hockey. In some embodiments, presenting the response frame includes introducing a new virtual object in the response frame according to the processed game play output, modifying an existing virtual object or modifying any other aspect of game play and including the new virtual object, the modified existing virtual object or any other aspect of modified game play.
Returning to fig. 5B and 5C, two sequences of video frames (510 and 520) are depicted, which show the same initial game state (depicted in frames 510-1 and 520-1). These sequences are examples of game play processes 600 applied to gaming environment 500.
Fig. 5B depicts a first scene 550 that includes a series of video frames 510 showing three virtual players (a, B, and C) playing a hockey game. Player A is controlled by the user of controller 102, and players B and C are controlled by other users of other controllers, through computer control algorithms, or a combination thereof. In the initial game state (depicted by frame 510-1), player A has an unobstructed (clear) shot at the goal. When the user controlling player a views frame 510-1 on display 108, the user sees player a has an unobstructed shot at the goal, and therefore decides to command player a to throw ice hockey. In other words, frame 510-1 triggers the user to enter a "shoot" command. The "shoot" command is sent as an input event to game server 122. When game server 122 receives the "shoot" input, the game engine updates the game state depicted in frame 510-1 based on the "shoot" input and the game state itself (e.g., the position of the player, the position of the puck, whether there is an unobstructed path between player A and the goal, etc.). Frames 510-2 and 510-3 depict the updated game state (game play output) showing the puck moving toward the goal before player C has the opportunity to block it from entering the goal. In other words, according to the game engine, if the player shoots while there is an unobstructed shot, the subsequent state includes a successful shooting sequence. In this manner, the game server generates response frames 510-2 and 510-3 depicting the subsequent status and transmits the response frames to the user (e.g., to the media device 106 for display on the output device 108). From the user's perspective, the response frame describes the operation that the user desires to perform at the input event. In this way, by correctly determining the trigger state corresponding to the user input, the game server will process the game play event based on the user's intent to enter the game play input.
Fig. 5C depicts a second scene 552, including a series of video frames 520, showing the same game and player as in scene 550. As with the previous scenario, in the initial state depicted in frame 520-1, player A has an unobstructed shot at the goal; thus, the game server transmits a frame 520-1 representing this status to the user's display 108. When the user views frame 520-1 on screen 108, the user sees player A has an unobstructed shot of the goal, and therefore decides to command player A to shoot the hockey puck. The "shoot" command is transmitted as an input event to the game server 122. However, unlike the previous scenario, there is a network connection interruption between the controller 102 and the server system 114, which delays the receipt of the input event at the server. If the incoming event does eventually reach the server, the server may not be able to correctly determine the trigger state (depicted in frame 520-1) because, due to the delay, the server is processing subsequent game states at the time the incoming event reaches the server. As such, the game server then processes the gameplay output based on the game state (depicted in frame 520-2) at the time the input event was received. In this example, the current state does not include an unobstructed shot. According to the game engine, if the player shoots without an unobstructed shot, the subsequent state includes a blocked shot. In this way, the game server renders a response frame 520-3 depicting player A attempting to shoot the hockey puck but being blocked by player C, and transmits the response frame to the user (e.g., to the media device 106 for display on the output device 108). From the user's perspective, the response frame describes an action that the user does not expect to perform when entering an event. Specifically, the user desires to have player A shoot, while player C is out of the way; in contrast, player a does not shoot as fast as the user would expect, and so the shot is blocked. As such, by failing to account for delayed receipt of game play input, the game server may process game play events that are contrary to the user's intent, which may potentially cause the user (and many other users) to lose interest in playing the game and/or using the gaming environment 500.
In an alternative scenario, if server system 114 detects a network disruption between game controller 102 and server system 114 as depicted in scenario 552 above, the server may ignore user's gameplay input sent during the disruption, or pause gameplay until the disruption is resolved. If the game is a multiplayer game, pausing the game for one player may also cause other players to pause the game. It is conceivable that the more players that play a game, the higher the likelihood that one player may experience a temporary network disruption, meaning that the game will be paused more frequently. Pausing the game interrupts the game flow altogether, thereby preventing a seamless, continuous game experience for each user. Furthermore, ignoring game play input may result in a game state that is opposite to the user's intent. These results may also potentially cause the user to lose interest in playing the game and/or using the gaming environment 500.
In each of the above scenarios, the input events occur simultaneously; however, depending on the time it takes for the input event to reach the game server, the response frame may depict a variety of different outcomes. This is because, if the server receives the input of the user while processing a game state later in time than the game state that triggered the user to make the input, the server may erroneously process the game output based on erroneous information on the timing of the user input. Because avoiding such inconsistencies is critical to the gaming platform, it is important for the gaming platform to compensate for the various network disruptions introduced in the gaming environment. By compensating for network disruptions between the game controller 102 and the server system 114, the game play platform can (i) more accurately correlate input events with actual trigger states, and (ii) ensure a seamless continuous game experience consistent with the user's intent, even when the connection conditions are good and bad. Thus, the various embodiments described herein are improvements to the following: a gaming platform that does not attempt to compensate for network interruptions during the interruption in a manner consistent with the user's intent; and a game platform that erroneously compensates for the network disruption during the disruption in a manner consistent with the user's intent.
In some scenarios, a particular game play output may contradict what has been displayed to one or more users, depending on how much time elapses between the trigger state and the current state being processed by the game server. For example, in FIG. 5C, frame 520-3 depicts a blocked shot. However, if the game server determines that the trigger state is the state depicted in frame 520-1, then in some embodiments, the game server will attempt to retroactively coordinate the user's intent with the current state of the game. In other words, the user's intent is to shoot the hockey puck while player a is shooting unimpeded, while the current state of the game shows player C between player a and the goal. To keep the user's intent (puck moved toward goal) consistent with the current state (player C blocked the puck), the game server may render a series of response frames with the puck moved toward the goal, despite player C blocking (e.g., frame 510-3 of fig. 5B). The response frame may appear to be inconsistent with the current game state; however, they are consistent with the user's intent during the past (trigger) game state. The game developer may plan these contingencies in advance, for example, by designing animations that coordinate inconsistent game states. Example coordination animations include immediately displacing a virtual character or object to a desired location (even though this may appear to violate physics in the game), or advancing the game state in a desired manner while not showing the correct animation (e.g., updating a score without showing a hockey ball reaching the goal, or classifying a monster as being injured even though the monster appears to have yielded before being fired). In some implementations, coordinating the current game state with the user desired game state (desired game state) upon user interaction includes modifying the frame depicting the current game state to create a subsequent frame depicting or more closely matching the desired game state.
Interrupt compensation
The following discussion describes various methods of compensating for network disruptions between the game controller 102 and the server system 114, in accordance with some embodiments, to ensure that the user's actual inputs (and, by extension, the user's intent) are properly accounted for in the game play experience.
FIG. 7 is a flow diagram illustrating an example method 700 for compensating for network disruptions between the game controller 102 and the server system 114, in accordance with some embodiments. The method 700 is optionally governed by instructions that are stored in a computer memory or non-transitory computer-readable storage medium (e.g., the game controller module 230 in fig. 2, the media display module 324 in fig. 3, and/or the game server module 426 in fig. 4) and executed by one or more processors in the game controller 102 (e.g., the CPU 202), the media device (e.g., the CPU 302), and/or the server system 114 (e.g., the CPU 138 and/or the GPU 140). The computer-readable storage medium may include a magnetic or optical disk storage device, a solid state storage device such as flash memory, or other non-volatile storage device or devices. The instructions stored on the computer-readable storage medium may include one or more of the following: source code, assembly language code, object code, or other instruction format that is interpreted by one or more processors. Some operations in method 700 may be combined and/or the order of some operations may be changed.
The game controller 102 associated with the user transmits (702) one or more user inputs associated with the user's commands (e.g., "move" or "shoot hockey") regarding the game being played in the real-time interactive game session (e.g., game environment 100/500). The network communication module 418 of the server system 114 receives the user input and the game engine 428 updates (704) the current game state GS0 based on the received user input. The updated game state is referred to as GS1 and is based on game state GS0 and the received user input. Server system 114 generates one or more response frames depicting game state GS1 (e.g., using encoder 142) and transmits the response frames to media device 106 for display to the user on output device 108 (706).
The actions described in 702-706 are repeated for subsequently received user input until the interruption detection module 432 of the server system 114 detects 708 an interruption 750 in the network connection between the server system 114 and the game controller 102. In some embodiments, server system 114 may not affirmatively detect network disruption 750; in these implementations, the server system 114 uses another indicator to determine that communication with the game controller 102 may be interrupted, such as a difference in expected game play behavior (e.g., based on the user's game behavior profile stored in the user information 458) as compared to actual game play behavior (e.g., user input received from the game controller 102 in the context of the associated game state).
Upon detecting the interrupt 750, the simulation module 430 takes over gameplay input on behalf of the user of the controller 102 while the controller 102 and the server system 114 attempt to reconnect. In some implementations, the simulation module 430 temporarily (e.g., within a predetermined amount of time since the interruption was initially detected) takes over gameplay input and then ceases to control gameplay actions. In some implementations, the simulation module 430 takes over gameplay actions until communication with the controller 102 is reestablished (e.g., due to restoration of a network connection). The simulation module 430 simulates direct user input (e.g., from a game controller) or in-game behavior.
In some implementations, the simulation module 430 runs in parallel with normal game play (e.g., prior to any interruption). In other words, when a user actively controls game play events by transmitting user inputs in response to particular game states, the simulation module 430 predicts the user inputs based on those particular game states. When the user sends input to the server system 114, the simulation module compares the user's actual input to the simulated predicted input (or lack thereof) in order to determine the accuracy of the simulated predicted input (or lack thereof) in response to the particular game state. By running in parallel with active game play, simulated predicted input may be more efficiently accessed in the event of an interrupt 750. Furthermore, by running in parallel with active game play, the simulation may continually improve the accuracy of the user's simulation of in-game behavior for particular games, game states, scenes, and the like.
In some implementations, the simulation module 430 trains itself using machine learning to accurately model in-game behavior for a particular user. Simulations using machine learning are sometimes referred to herein as "AI" (artificial intelligence) simulations. In some embodiments, the simulation module creates a game behavior profile for the user as the AI continues to train. In some implementations, the game behavior profile is stored in the user information section 458 of the memory 146 of the server system 114. As the AI continues to play with the user, the AI further updates the user's game behavior profile and uses that profile as a basis for informing future predictions. By having the AI continuously play with the user, the AI can automatically check to see its accuracy after each user input, or after a subset of the user inputs, and learn from errors (differences between predicted inputs and actual inputs). For example, in a game involving a character traversing a map, if there is a similar path taken by the character each time the character is at a particular location during a particular game state, then the character is moved in that path if an interruption in AI learning occurs. In some implementations, there are different sets of heuristics for different types of games and different game states.
In some implementations, instead of real-time training of AI, the user's inputs and corresponding game states are saved in the event log 460, and the simulation module 430 uses those inputs and corresponding game states to play and learn the user's in-game behavior offline (e.g., after a game session is completed). By training the AI at different times, server system 114 may more efficiently use processing power during peak game play times.
In some implementations, the simulation module 430 simulates input regarding what the user will do in certain scenarios, deviating from the best guess of AI. For example, in some embodiments, the simulation module 430 plays the game on a more conservative basis (simulating game play input) during the interruption. For example, by playing the game conservatively, the AI is less likely to cause major game change events, such as initiating an offensive action (e.g., fighting, throwing a grenade) on another character in a role-playing game. Further, in some embodiments, if a character controlled by the user is in a defensive state (e.g., crouching down) at the time of the interruption, the likelihood of initiating an offensive action is low; thus, the AI is less likely to initiate aggressive behavior in these scenarios. In some embodiments, when it is difficult for the simulation module 430 to make a decision between two inputs, one of which will resolve a player/player conflict in any way (shooting or being shot by an opponent) and the other will remain as is (temporarily hidden), there will be a tendency for conflicts between players to go unresolved (remain open) until the network connection to the controller is restored and the game engine can process game play output based on the user's desired input. In other words, there is a tendency for player/player conflicts to be unresolved until it is seen what the user would do if the interruption did not occur.
Referring again to FIG. 7, while the simulation module 430 represents that the user is controlling game play input during the interruption 750, the user may still be attempting to actively control the game. During this time, the game controller 102 continually attempts to transmit (710) user input to the server system 114. Also during this time, game engine 428 updates (712) game state GS1 using one or more simulated user inputs, resulting in updated game state GS 2. Game states GS2 are also sometimes referred to herein as "placeholder game states" because they serve as placeholders for user-desired game play outcomes during the interruption. In some embodiments, placeholder game state GS2 is a direct byproduct of the simulated game play input. In other words, when game play input is entered into game engine 428, the game engine generates game play output based on the game play input without waiting for additional game play input. Alternatively, game engine 428 processes one or more inputs at a time, determining game play output based on the one or more game play inputs. In some implementations, game engine 428 stores or causes storage of each game play output (e.g., each placeholder game state) based on the simulation input in a game state repository (e.g., in event log 460) for later-expected game state comparison, as discussed in detail below. In some implementations, for each placeholder game state GS2, server system 114 generates one or more response frames depicting game state GS2 (e.g., using encoder 142) and transmits the response frames to media device 106 for display to the user on output device 108 (714).
When the network connection between server system 114 and game controller 102 is restored, ending interrupt 750, server system 114 receives (716) user input 710 made by the user of the client device during the interrupt (referred to herein as "restored user input"). In some implementations, server system 114 determines whether the received user input is a resumed user input based on a comparison of a timestamp associated with the received user input to the current game time index. The user input is a resumed user input corresponding to a command issued by the user during the interruption if the user input is associated with a timestamp corresponding to a time during which the interruption was present. Depending on the communication protocol between the game controller 102 and the server system 114 and the timing of the interruption, the resumed user input may have been transmitted from the client device before, during, and/or after the interruption.
The state coordination module 434 of the server system 114 updates (718) the game state GS1 (used with the simulation input in step 712 as the basis for the game state GS2) based on the recovered user input, generating an alternatively derived game state GS2, referred to herein as game state GS2 a. Game state GS2a is sometimes referred to herein as the "desired game state" because it describes the result that would occur if there were no interruption-the result the user desired when typing input for transmission to the server (step 710). It is important to note that the resumed user input is used to update the game state (game state GS1) that existed just prior to or near the beginning of interrupt 750. In some implementations, the state coordination module 434 obtains the placeholder game state GS2 from the game state store in the event log 460. By updating the game state that existed prior to the simulated input replacing the user input, server system 114 has a basis for comparing its prediction (simulated input) with the user intent (restored user input) by generating two versions of the game state-one version being the result of the simulated game play input (placeholder game state GS2) and the other version being the result of the restored user input (desired game state GS2a) -and comparing the game states to determine the accuracy of the placeholder game state GS 2.
The state coordination module 434 of the server system 114 coordinates 720 the placeholder game state GS2 with the desired game state GS2a based on the comparisons discussed above (e.g., comparing placeholders and desired game states) to produce a game state GS3 that matches or more closely matches the user's intent. In other words, when the controller 102 reconnects with the server system 114, the state coordination module 434 attempts to coordinate the existing game state (GS2) generated from simulated game play with the game state (GS2a) that already involved a game with user-maintained control, thereby generating the subsequent game state GS 3. In some implementations, the subsequent game state GS3 is an updated version of the placeholder game state GS2, affected by the difference between the placeholder game state GS2 and the desired game state GS2 a. Server system 114 generates one or more response frames depicting game state GS3 (e.g., using encoder 142) and transmits the response frames to media device 106 for display to the user on output device 108 (722).
In some implementations, the subsequent game state GS3 is additionally or alternatively based on a comparison of the recovered input to the simulated input. Specifically, when controller 102 reconnects with server system 114, state coordination module 434 compares the predicted input (determined by simulation module 430) with the user-expected input (resumed after the interruption). Based on the results of the comparison (e.g., whether there is a difference or a measure of the amount of difference compared to a threshold), the state coordination module 434 coordinates the existing game state (GS2) generated from the simulated game play with the game state (GS2a) that has been involved with having user-maintained control, thereby generating the subsequent game state GS 3.
The state coordination module 434 uses one or more methods to correct and/or modify the placeholder game state GS2 to more closely match the desired game state GS2a, depending on the particular game and/or particular scenario. For example, if the user desires to move the character to a first area of the game scene, but during the break, the simulation moved the character to a second area different from the first area, GS2 would depict the character in the second area (the predicted area) while GS2a would depict the character in the first area (the expected area). In some implementations, the state coordination module 434 will cause the game engine 428 to gradually or immediately displace the character to the first area. In this way, the game engine 428 will output a subsequent game state GS3 depicting the character in the first area. For embodiments in which the difference between the game states GS2 and GS2a is gradually corrected, the game engine 428 outputs a continuous game state GS3 that describes the character moving toward the desired area (e.g., being presented over a predetermined number of response frames or a predetermined amount of time); in contrast, for embodiments that immediately correct for the discrepancy, the game engine 428 outputs the game state GS3 that immediately depicts the character at the desired area (e.g., rendered in the next response frame).
As discussed above with respect to fig. 5C, from the user's perspective, the response frame depicting game state GS3 may appear to be inconsistent with the currently displayed game state GS 2; however, they are consistent with the user's intent to initially transmit the user input. The game developer may plan for these contingencies in advance, for example, by designing animations that reconcile inconsistent game states. Example coordinated animations include immediately moving a virtual character or object to a desired position as previously discussed (even though this may appear to violate physical principles in the game), or advancing the game state in a desired manner without showing the correct animation (e.g., updating a score without showing a hockey goal, or classifying a monster as having an already injured wound even though the monster appears to have yielded before being fired). In some implementations, coordinating the current game state GS2 with the expected game state GS2a includes modifying the frame depicting the current game state GS2 to create a subsequent frame depicting or more closely matching the desired game state GS2 a.
Fig. 8A-8B illustrate two scenarios of an exemplary gameplay process consistent with the interruption compensation method 700 discussed above. The interrupt is depicted as starting at line 802 and ending at line 804. User inputs and game states corresponding to those in method 700 are similarly labeled. In both figures, the desired game state GS2a is bordered by a dashed line to indicate that it is not shown to the user; instead, the desired game state GS2a is generated merely as a basis for the comparison by the state coordination module 434 (step 720).
In scenario 810 (FIG. 8A), the simulation correctly predicts that the user (player A) will shoot a hockey puck in response to game state GS 1. In response to this prediction, the simulation module 430 sends a "shoot" input (708) to the game engine 428, which game engine 428 outputs a placeholder game state GS2, depicting the puck being shot. Because the placeholder game state GS2 is the same as the desired game state GS2a, the state coordination module 434 instructs the game engine 428 to continue generating an updated game state based on the placeholder game state GS 2. Alternatively, the state coordination module 434 instructs the game engine 428 to continue generating updated game states based on the desired game state GS2 a. Thus, GS3 describes the progression of the puck towards the goal.
In scenario 820 (FIG. 8B), the simulation mispredicts that the user would shoot an ice hockey puck in response to game state GS 1. Instead, the user desires to move the player closer to the goal (see the input "move left" restored). Because the placeholder game state GS2 and the desired game state GS2a are different, the state coordination module 434 instructs the game engine 428 to modify the placeholder state GS2 to more closely match the desired state GS2 a. As a result, the game engine outputs a subsequent game state GS3 that shows the user (Player A) moving as desired.
From the perspective of the user, and even from the perspective of other users (e.g., users playing the same game as the other game controllers 102A of fig. 1), the transition from GS2 to GS3 may appear disjointed, counterintuitive, or abnormal if not handled correctly, or if sufficient time has elapsed in a smoother manner that there is no difference in handling. In some implementations, to prevent such scenarios, the state coordination module 434 foregoes modifying the placeholder game state GS2 after a predetermined amount of time has elapsed or after a predetermined number of placeholder game states GS2 have been generated and presented to other users (because the game has transcended a step that cannot be returned regardless of the user's initial intent). For example, for a game that cannot be paused, or for a game having a fast-forwarding game state, the coordination module 434 may forego coordinating the placeholder state with the desired state for (i) a predetermined period of time (e.g., 2 seconds, 5 seconds, etc.), (ii) a predetermined number of game states, or (iii) a predetermined amount of difference between the placeholder state and the desired state, and/or (iv) based on a number of other players that will be affected by the coordination, and/or a predetermined measure of inconsistency in the degree to which the coordination will affect game play.
Further, in some embodiments, to address or mitigate the difference, as shown in fig. 8B (between GS2 and GS 3), the state coordination module 434 instructs the game engine 428 to include a notification with a subsequent game state GS3 that notifies one or more affected users of the reason for the difference. In some embodiments, state coordination module 434 causes a notification to be displayed to one or more users each time interrupt compensation step 720 is performed. In other words, state coordination module 434 causes a notification to be displayed to notify the user to simulate temporarily taking over the game play of the particular user.
Further, in some embodiments, to address or mitigate the difference, as shown in fig. 8B (between GS2 and GS 3), the state coordination module 434 instructs the game engine 428 to provide a rewind or redo option for selection by one or more players. Upon selecting this option, game engine 428 will assume the previous state (e.g., state GS1), allowing the user a second chance to play the game as desired. In some embodiments, the game server automatically provides for game play rewind or redo (without requiring the user to select a rewind or redo option).
Fig. 9 is a flow diagram illustrating an example method 900 for processing gameplay before, during, and after an interruption, according to some embodiments. Method 900 corresponds to method 700 (fig. 7 and 8), with corresponding steps similarly labeled.
The method 900 is optionally governed by instructions that are stored in a computer memory or a non-transitory computer-readable storage medium (e.g., the game server module 426 in fig. 4) and executed by one or more processors (e.g., the CPU 138 and/or the GPU140) of the server system 114. The computer-readable storage medium may include magnetic or optical disk storage, solid state storage such as flash memory, or other non-volatile storage devices or devices. The instructions stored on the computer-readable storage medium may include one or more of the following: source code, assembly language code, object code, or other instruction format that is interpreted by one or more processors. Some operations in method 900 may be combined and/or the order of some operations may be changed.
Method 900 is performed by server system 114, which server system 114 includes one or more processing cores (e.g., CPU 138 and/or GPU140) and memory storing programs executed by the processing cores. Server system 114 (e.g., game engine 428) processes (902) the user input as in step 704 discussed above. While game engine 428 processes the user input, interrupt detection module 432 checks 904 for an interrupt of the network connection with controller 102. As long as there is no interruption (904: NO), game engine 428 continues to process user input. However, when there is an interrupt (904: YES), simulation module 430 simulates (906) the user input as in step 712 discussed above.
The outage detection module 434 continues to check 908 the status of the network connection with the controller 102. If the interruption persists (908: No), the simulation module 430 continues to simulate the user input. In some implementations, the simulation module stops simulating the user input after a predetermined amount of time (e.g., 2 seconds, 5 seconds, etc.). If the network connection is restored (908: Yes), the state coordination module 434 processes (910) the restored user input as in step 718 discussed above.
The state coordination module 434 compares (912): (i) a placeholder game state resulting from a simulated prediction of how the user played the game during the interruption, and (ii) a desired game state resulting from processing of the resumed input, as in step 720 discussed above. If the simulated prediction matches the user's intent (e.g., the placeholder state GS2 and the desired state GS2a match, or the simulated input matches the recovered input), the process returns to step 902 to continue processing the user input. However, if the simulated prediction does not match the user's intent (e.g., the placeholder state GS2 and the expected state GS2a do not match, or the simulated input and the recovered input do not match), the coordination module 434 revises game play (e.g., by modifying the placeholder state GS2a) as in step 720 discussed above, and then the process returns to step 902 to continue processing user input.
By compensating for network connection issues experienced by particular users of real-time interactive online gaming environments, such as gaming environments 100 and 500, embodiments disclosed herein alleviate inherent network connection issues while leaving the users feeling that the connection is not dropped. The disclosed implementations make online gaming sessions more resilient to temporary connection drops by learning in-game behaviors of users and also taking into account errors in certain assumptions made based on the learned behaviors. It is important to note that in some embodiments of the online gaming environment disclosed herein, each user's output device (e.g., television, console, display) is rendering its own game view, while the processing of game play events occurs on a server system that is remote from the user. Thus, even if there is a connection problem on the user side (e.g., media device 106 or controller 102), game processing continues at server system 114 for the remaining players of the game. Thus, various embodiments disclosed herein allow users affected by connectivity issues to continue playing a game, thus having a seamless and positive gameplay experience.
Additional analogue functions
Referring back to the discussion above regarding simulation module 430 and game play behavior profile 458, the following discussion discloses additional features related to AI-enabled simulation features in the context of online games, according to some embodiments.
In some embodiments, the game play behavior profile 458 for a particular user is used as the basis for the simulation module 430 to play the game on an indefinite basis on behalf of the user, or until the user decides to turn off the simulation. In some embodiments, a simulated version of a user character (e.g., a virtual character and all game play inputs that control the character) fills the game world of other users. In other words, other users may interact with the simulated version of the character of the particular user on their respective game components (e.g., controller 102, media device 106, and/or output device 108).
In some embodiments, the simulated version of the particular user's character populates the particular user's game world, allowing the particular user to interact with the simulated character (using another character). These embodiments allow the user to be exposed to the user's own simulation. For example, these embodiments allow a user to play a game (i) with a simulation that has been trained to play entirely like the user, or (ii) with a simulation that has been trained to play entirely like the user. For embodiments where the user may compete with the simulation, this allows the user to further train the simulation as it is continually learned from the user's active gameplay controls, as discussed above. For embodiments where a user may play a game with a simulation, this allows the user to group with one or more simulated players with user skills that have been trained to play the game, which is useful in team games such as sports and character play where a team of characters may complete tasks together.
Notes on the disclosure
Reference has been made in detail to the various embodiments, examples of which are illustrated in the accompanying drawings. In the above detailed description, numerous specific details are set forth in order to provide a thorough understanding of the invention and the described embodiments. However, the invention may be practiced without these specific details. In other instances, well-known methods, procedures, components, and circuits have not been described in detail as not to unnecessarily obscure aspects of the embodiments.
It will be understood that, although the terms first, second, etc. may be used herein to describe various elements, these elements should not be limited by these terms. These terms are only used to distinguish one element from another. For example, a first device may be referred to as a second device, and similarly, a second device may be referred to as a first device, without changing the meaning of the description, so long as all occurrences of the first device are renamed consistently and all occurrences of the second device are renamed consistently. The first device and the second device are both devices, but they are not the same device.
The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the claims. As used in the description of the embodiments and the appended claims, the singular forms "a," "an," and "the" are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will also be understood that the term "and/or" as used herein refers to and encompasses any and all possible combinations of one or more of the associated listed items. It will be further understood that the terms "comprises" and/or "comprising," when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and/or groups thereof.
As used herein, the term "if" can be interpreted to mean "when", "at … …" or "in response to a determination" or "according to a determination" or "in response to a detection", the recited condition precedent is true, depending on context. Similarly, the phrase "if it is determined that [ the recited precedent for the condition is true ]" or "if [ the recited precedent for the condition is true ]" or "when [ the recited precedent for the condition is true ]" may be interpreted to mean, "after determining that the recited precedent for the condition is true" or "in response to determining that the recited precedent for the condition is true" or "after detecting that the recited precedent for the condition is true" or "in response to detecting that the recited precedent for the condition is true", depending on the context.
The foregoing description, for purpose of explanation, has been described with reference to specific embodiments. However, the illustrative discussions above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in light of the above teaching. The embodiments were chosen and described in order to best explain the principles of the invention and its practical applications, to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated.
Claims (14)
1. A method of processing game play input during and after a network disruption, the method comprising:
at a server system having one or more processors and memory storing one or more programs for execution by the one or more processors:
determining a simulated gameplay input for a first client device during an interruption of a network connection between the server system and the first client device;
updating a first game state based on the simulated game play input, thereby generating a placeholder game state;
after resuming the network connection, receiving a resumed gameplay input made by a user of the first client device during the interruption;
updating the first game state based on the resumed gameplay input, thereby producing a desired game state that describes an outcome that would occur if there were no interruption;
comparing the placeholder game state to the desired game state;
updating the placeholder game state based on the comparison of the placeholder game state to the desired game state, thereby generating a subsequent game state; and
transmitting a frame depicting the subsequent game state to an output device associated with the first client device.
2. The method of claim 1, wherein comparing the placeholder game state with the desired game state comprises: determining whether there is a discrepancy between the placeholder game state and the desired game state; and is
Wherein updating the placeholder game state comprises:
in accordance with a determination that a difference exists between the placeholder game state and the desired game state, modifying the placeholder game state to match the desired game state.
3. The method of claim 2, wherein updating the placeholder game state further comprises:
in accordance with a determination that there is no difference between the placeholder game state and the desired game state, forgoing consideration of the desired game state.
4. The method of claim 1, further comprising:
prior to the interruption, simulating in-game behavior of a user of the first client device in accordance with a plurality of gameplay inputs received by the first client device; and
determining, during the interruption, the simulated gameplay input of the first client device based on simulated in-game behavior of the user of the first client device.
5. The method of claim 4, wherein simulating in-game behavior of the user of the first client device comprises:
receiving a plurality of game play inputs from the first client device;
tracking each of the plurality of gameplay inputs and corresponding trigger states, wherein a respective trigger state is a game state that triggers a respective gameplay input;
establishing a game play profile for the user of the first client device based on the plurality of game play inputs and corresponding trigger states;
determining a predicted gameplay input based on the gameplay profile of the user of the first client device;
receiving a subsequent game play input from the first client device;
comparing the subsequent gameplay input to the predicted gameplay input; and
adjusting the game play profile based on a comparison of the subsequent game play input and the predicted game play input.
6. The method of claim 5, further comprising:
determining, for a plurality of consecutive game states, a predicted game play input for the user of the first client device based on the game play profile;
receiving gameplay input from the user of the first client device for the plurality of consecutive game states;
comparing the predicted gameplay input to a corresponding gameplay input received from the user of the first client device; and
adjusting the game play profile based on the comparison.
7. The method of claim 1, wherein determining a simulated game play input comprises:
prior to and during the interruption, performing, at the server, a game play simulation associated with a user of the first client device, wherein the game play simulation is running in parallel with a game session supported by the network connection;
switching from an active gameplay mode to a simulated gameplay mode upon detecting an interruption of the network connection, wherein:
during the active gameplay mode, a game engine associated with the game session receives gameplay input from the first client device, and
during the simulated gameplay mode, the game engine receives gameplay input from the gameplay simulation.
8. The method of claim 1, wherein the placeholder game state is a first updated version of the first game state, and the desired game state is a second updated version of the first game state derived independently of the first updated version of the first game state.
9. The method of claim 1, further comprising:
after updating the first game state based on the simulated game play input, thereby generating a placeholder game state: transmitting a frame depicting the placeholder game state to an output device associated with a second client device; and
after updating the placeholder game state based on the comparison of the placeholder game state to the desired game state to generate a subsequent game state: transmitting a frame depicting the subsequent game state to the output device associated with the second client device.
10. The method of claim 1, further comprising:
transmitting a notification to the first client device after resuming the network connection, the notification notifying a user of the first client device that simulated gameplay input of the first client device affected gameplay during the interruption of the network connection.
11. The method of claim 1, further comprising:
transmitting a notification to the first client device after a predetermined time threshold is reached after the initial detection of the interruption, the notification notifying a user of the first client device that simulated game play input of the first client device is affecting game play.
12. A method of processing game play input during and after a network disruption, the method comprising:
at a server system having one or more processors and memory storing one or more programs for execution by the one or more processors:
determining one or more simulated game play inputs for a first client device during an interruption of a network connection between the server system and the first client device;
controlling a gameplay process according to the one or more simulated gameplay inputs of the first client device;
after resuming the network connection, receiving one or more resumed gameplay inputs made by a user of the first client device during the interruption;
determining a length of the interruption proximate in time to receiving the one or more resumed gameplay inputs;
in accordance with a determination that the length of the interruption is less than a predetermined threshold:
determining an expected game state based on (i) the one or more resumed gameplay inputs and (ii) a game state that existed near a time at which the interruption was detected, wherein the expected game state describes an outcome that would occur if there were no interruption;
comparing a current game state with the desired game state;
updating the current game state based on a comparison of the current game state and the desired game state; and
transmitting a frame depicting an updated current game state to an output device associated with the first client device.
13. The method of claim 12, further comprising:
in accordance with a determination that the length of the interruption is greater than or equal to the predetermined threshold;
ignoring the one or more restored game play inputs; and
notifying a user of the first client device that the one or more resumed gameplay inputs are ignored.
14. An electronic server system comprising:
one or more processors; and
memory storing one or more programs for execution by the one or more processors, the one or more programs including instructions for:
determining a simulated gameplay input for a first client device during an interruption of a network connection between the server system and the first client device;
updating a first game state based on the simulated game play input, thereby generating a placeholder game state;
after resuming the network connection, receiving a resumed gameplay input made by a user of the first client device during the interruption;
updating the first game state based on the resumed gameplay input, thereby producing a desired game state that describes an outcome that would occur if there were no interruption;
comparing the placeholder game state to the desired game state;
updating the placeholder game state based on the comparison of the placeholder game state to the desired game state, thereby generating a subsequent game state; and
transmitting a frame depicting the subsequent game state to an output device associated with the first client device.
Applications Claiming Priority (5)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201862651665P | 2018-04-02 | 2018-04-02 | |
US62/651,665 | 2018-04-02 | ||
US16/368,806 | 2019-03-28 | ||
US16/368,806 US10773168B2 (en) | 2018-04-02 | 2019-03-28 | Temporary game control by user simulation following loss of active control |
PCT/US2019/025185 WO2019195169A1 (en) | 2018-04-02 | 2019-04-01 | Temporary game control by user simulation following loss of active control |
Publications (2)
Publication Number | Publication Date |
---|---|
CN111526927A CN111526927A (en) | 2020-08-11 |
CN111526927B true CN111526927B (en) | 2022-04-29 |
Family
ID=66175515
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201980007131.3A Active CN111526927B (en) | 2018-04-02 | 2019-04-01 | Temporary game control via user simulation after loss of active control |
Country Status (4)
Country | Link |
---|---|
US (1) | US10773168B2 (en) |
EP (1) | EP3713653B1 (en) |
CN (1) | CN111526927B (en) |
WO (1) | WO2019195169A1 (en) |
Families Citing this family (36)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10456672B2 (en) | 2016-05-19 | 2019-10-29 | Google Llc | Methods and systems for facilitating participation in a game session |
EP4336800A2 (en) | 2017-10-10 | 2024-03-13 | Google LLC | Distributed sample-based game profiling with game metadata and metrics and gaming api platform supporting third-party content |
US11140207B2 (en) | 2017-12-21 | 2021-10-05 | Google Llc | Network impairment simulation framework for verification of real time interactive media streaming systems |
EP4276814A3 (en) | 2018-03-22 | 2023-12-20 | Google LLC | Methods and systems for rendering and encoding content for online interactive gaming sessions |
US11872476B2 (en) | 2018-04-02 | 2024-01-16 | Google Llc | Input device for an electronic system |
WO2019194953A1 (en) | 2018-04-02 | 2019-10-10 | Google Llc | Methods, devices, and systems for interactive cloud gaming |
US11077364B2 (en) | 2018-04-02 | 2021-08-03 | Google Llc | Resolution-based scaling of real-time interactive graphics |
CN111417978A (en) | 2018-04-10 | 2020-07-14 | 谷歌有限责任公司 | Memory management in game rendering |
US10967259B1 (en) | 2018-05-16 | 2021-04-06 | Amazon Technologies, Inc. | Asynchronous event management for hosted sessions |
US20200005165A1 (en) * | 2018-06-28 | 2020-01-02 | International Business Machines Corporation | Dynamically determining a region of effectiveness of athletes during game play based on predictive factors |
US10887574B2 (en) | 2018-07-31 | 2021-01-05 | Intel Corporation | Selective packing of patches for immersive video |
US11212506B2 (en) | 2018-07-31 | 2021-12-28 | Intel Corporation | Reduced rendering of six-degree of freedom video |
US11057631B2 (en) | 2018-10-10 | 2021-07-06 | Intel Corporation | Point cloud coding standard conformance definition in computing environments |
WO2020102493A1 (en) | 2018-11-16 | 2020-05-22 | Google Llc | Shadow tracking of real-time interactive simulations for complex system analysis |
US11033813B2 (en) * | 2019-06-07 | 2021-06-15 | Microsoft Technology Licensing, Llc | Latency erasure |
US11068284B2 (en) * | 2019-07-25 | 2021-07-20 | Huuuge Global Ltd. | System for managing user experience and method therefor |
US20210042424A1 (en) * | 2019-08-09 | 2021-02-11 | Bank Of America Corporation | System and method for misappropriation detection and mitigation using game theoretical event sequence analysis |
US11089112B2 (en) * | 2019-08-21 | 2021-08-10 | Facebook, Inc. | Low latency interactive media distribution using shared user hardware |
US11213746B2 (en) * | 2019-10-22 | 2022-01-04 | Microsoft Technology Licensing, Llc | Providing automated user input to an application during a disruption |
CN111185003B (en) * | 2019-12-31 | 2023-09-19 | 咪咕互动娱乐有限公司 | Real-time cloud application hosting method, device, server and storage medium |
CN111265881B (en) * | 2020-01-21 | 2021-06-22 | 腾讯科技（深圳）有限公司 | Model training method, content generation method and related device |
US11957974B2 (en) | 2020-02-10 | 2024-04-16 | Intel Corporation | System architecture for cloud gaming |
US11477610B2 (en) * | 2020-05-28 | 2022-10-18 | Sony Interactive Entertainment Inc. | Gaming location pre-emptive loss correction |
CN111760276B (en) * | 2020-07-16 | 2022-06-14 | 腾讯科技（深圳）有限公司 | Game behavior control method, device, terminal, server and storage medium |
JP7043558B1 (en) | 2020-09-23 | 2022-03-29 | グリー株式会社 | Computer programs, methods, and server equipment |
US11503090B2 (en) | 2020-11-30 | 2022-11-15 | At&T Intellectual Property I, L.P. | Remote audience feedback mechanism |
JP2024505320A (en) * | 2021-05-26 | 2024-02-06 | グーグル エルエルシー | Efficient gameplay training for artificial intelligence |
AU2022231739A1 (en) * | 2021-06-17 | 2023-01-19 | Immersive Group Gaming Ltd | Game Delivery System |
WO2022269319A1 (en) * | 2021-06-23 | 2022-12-29 | Sensetime International Pte. Ltd. | Methods, apparatuses, systems, devices and storage media for processing abnormal event |
CN113398580B (en) * | 2021-06-30 | 2024-01-09 | 上海完美时空软件有限公司 | Game scene generation method and device, storage medium and electronic device |
CN113521730B (en) * | 2021-07-23 | 2023-10-20 | 咪咕互动娱乐有限公司 | Game control method, game control system, game control device and medium |
CN113694512A (en) * | 2021-08-11 | 2021-11-26 | 网易（杭州）网络有限公司 | Control method and device of virtual role and electronic equipment |
US11826644B2 (en) * | 2021-10-05 | 2023-11-28 | Sony Interactive Entertainment Inc. | Bifurcation of gameplay between mobile and non-mobile play with intelligent game state saving, and startups |
US20230310995A1 (en) * | 2022-03-31 | 2023-10-05 | Advanced Micro Devices, Inc. | Detecting personal-space violations in artificial intelligence based non-player characters |
US20230315605A1 (en) * | 2022-03-31 | 2023-10-05 | Dell Products L.P. | User session identification based on telemetry data |
US20240115940A1 (en) * | 2022-10-07 | 2024-04-11 | Sony Interactive Entertainment Inc. | Text message or app fallback during network failure in a video game |
Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN1479243A (en) * | 2002-07-24 | 2004-03-03 | �����ɷ� | Game server equipment game process management equipment and game process management method |
CN101887485A (en) * | 2009-05-14 | 2010-11-17 | 灰熊(北京)科技有限公司 | Method for realizing reliable drop line reconnection in table games |
CN102195935A (en) * | 2010-03-03 | 2011-09-21 | 深圳市腾讯计算机系统有限公司 | Game hosting system and method |
CN105749551A (en) * | 2016-02-26 | 2016-07-13 | 网易（杭州）网络有限公司 | Game hosting method and system and terminal |
CN107670275A (en) * | 2017-10-26 | 2018-02-09 | 广州市雷军游乐设备有限公司 | The method and system of game process disconnection reconnecting |
Family Cites Families (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20060154710A1 (en) * | 2002-12-10 | 2006-07-13 | Nokia Corporation | Method and device for continuing an electronic multi-player game, in case of an absence of a player of said game |
TW201043308A (en) * | 2009-06-09 | 2010-12-16 | Inventec Appliances Corp | Method and system for re-connecting an unexpectedly off-line web-game |
US8814697B2 (en) * | 2011-04-19 | 2014-08-26 | Sony Computer Entertainment America Llc | Method and apparatus for use in preserving a game state |
US9675874B1 (en) | 2013-07-18 | 2017-06-13 | nWay, Inc. | Multi-player gaming system |
US10512846B2 (en) * | 2017-03-07 | 2019-12-24 | Sony Interactive Entertainment LLC | Emulating player behavior after player departure |
-
2019
- 2019-03-28 US US16/368,806 patent/US10773168B2/en active Active
- 2019-04-01 CN CN201980007131.3A patent/CN111526927B/en active Active
- 2019-04-01 EP EP19717675.3A patent/EP3713653B1/en active Active
- 2019-04-01 WO PCT/US2019/025185 patent/WO2019195169A1/en unknown
Patent Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN1479243A (en) * | 2002-07-24 | 2004-03-03 | �����ɷ� | Game server equipment game process management equipment and game process management method |
CN101887485A (en) * | 2009-05-14 | 2010-11-17 | 灰熊(北京)科技有限公司 | Method for realizing reliable drop line reconnection in table games |
CN102195935A (en) * | 2010-03-03 | 2011-09-21 | 深圳市腾讯计算机系统有限公司 | Game hosting system and method |
CN105749551A (en) * | 2016-02-26 | 2016-07-13 | 网易（杭州）网络有限公司 | Game hosting method and system and terminal |
CN107670275A (en) * | 2017-10-26 | 2018-02-09 | 广州市雷军游乐设备有限公司 | The method and system of game process disconnection reconnecting |
Also Published As
Publication number | Publication date |
---|---|
US20190321727A1 (en) | 2019-10-24 |
WO2019195169A1 (en) | 2019-10-10 |
US10773168B2 (en) | 2020-09-15 |
EP3713653B1 (en) | 2023-02-08 |
CN111526927A (en) | 2020-08-11 |
EP3713653A1 (en) | 2020-09-30 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN111526927B (en) | Temporary game control via user simulation after loss of active control | |
KR102628963B1 (en) | Detecting and compensating for display lag in gaming systems | |
JP7271617B2 (en) | Personalized user interface based on in-app behavior | |
CN110678239B (en) | Distributed sample-based game profiling with game metadata and metrics and game API platform supporting third party content | |
US11369873B2 (en) | Methods and systems for rendering and encoding content for online interactive gaming sessions | |
EP3807766B1 (en) | Shadow tracking of real-time interactive simulations for complex system analysis |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
GR01 | Patent grant | ||
GR01 | Patent grant |