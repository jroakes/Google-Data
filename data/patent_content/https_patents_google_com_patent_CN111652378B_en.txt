CN111652378B - Learning to select vocabulary for category features - Google Patents
Learning to select vocabulary for category features Download PDFInfo
- Publication number
- CN111652378B CN111652378B CN202010450032.7A CN202010450032A CN111652378B CN 111652378 B CN111652378 B CN 111652378B CN 202010450032 A CN202010450032 A CN 202010450032A CN 111652378 B CN111652378 B CN 111652378B
- Authority
- CN
- China
- Prior art keywords
- machine learning
- embedding
- learning model
- output sequence
- category
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
- 238000010801 machine learning Methods 0.000 claims abstract description 175
- 238000000034 method Methods 0.000 claims abstract description 88
- 238000012545 processing Methods 0.000 claims abstract description 46
- 238000003860 storage Methods 0.000 claims abstract description 12
- 238000012549 training Methods 0.000 claims description 73
- 238000013528 artificial neural network Methods 0.000 claims description 56
- 230000008569 process Effects 0.000 claims description 42
- 238000013507 mapping Methods 0.000 claims description 14
- 238000009826 distribution Methods 0.000 claims description 9
- 230000002787 reinforcement Effects 0.000 claims description 9
- 230000000306 recurrent effect Effects 0.000 claims description 7
- 238000012935 Averaging Methods 0.000 claims description 3
- 238000004590 computer program Methods 0.000 abstract description 14
- 238000005457 optimization Methods 0.000 description 12
- 230000006870 function Effects 0.000 description 8
- 230000009471 action Effects 0.000 description 5
- 238000004891 communication Methods 0.000 description 5
- 239000011159 matrix material Substances 0.000 description 4
- 230000015654 memory Effects 0.000 description 4
- 230000003993 interaction Effects 0.000 description 3
- 238000010200 validation analysis Methods 0.000 description 3
- 230000003287 optical effect Effects 0.000 description 2
- 230000004044 response Effects 0.000 description 2
- 238000013515 script Methods 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 241000009334 Singa Species 0.000 description 1
- 238000003491 array Methods 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 230000001149 cognitive effect Effects 0.000 description 1
- 238000013527 convolutional neural network Methods 0.000 description 1
- 230000001186 cumulative effect Effects 0.000 description 1
- 238000010586 diagram Methods 0.000 description 1
- 238000009434 installation Methods 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000004519 manufacturing process Methods 0.000 description 1
- 230000006855 networking Effects 0.000 description 1
- 230000000644 propagated effect Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 230000006403 short-term memory Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000009466 transformation Effects 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N20/00—Machine learning
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/903—Querying
- G06F16/9035—Filtering based on additional data, e.g. user or group profiles
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/20—Natural language analysis
- G06F40/237—Lexical tools
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/30—Monitoring
- G06F11/34—Recording or statistical evaluation of computer activity, e.g. of down time, of input/output operation ; Recording or statistical evaluation of user activity, e.g. usability assessment
- G06F11/3466—Performance evaluation by tracing or monitoring
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/20—Natural language analysis
- G06F40/237—Lexical tools
- G06F40/242—Dictionaries
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/20—Natural language analysis
- G06F40/279—Recognition of textual entities
- G06F40/284—Lexical analysis, e.g. tokenisation or collocates
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/044—Recurrent networks, e.g. Hopfield networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/084—Backpropagation, e.g. using gradient descent
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/30—Monitoring
- G06F11/3003—Monitoring arrangements specially adapted to the computing system or computing system component being monitored
- G06F11/302—Monitoring arrangements specially adapted to the computing system or computing system component being monitored where the computing system component is a software system
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/30—Monitoring
- G06F11/34—Recording or statistical evaluation of computer activity, e.g. of down time, of input/output operation ; Recording or statistical evaluation of user activity, e.g. usability assessment
- G06F11/3409—Recording or statistical evaluation of computer activity, e.g. of down time, of input/output operation ; Recording or statistical evaluation of user activity, e.g. usability assessment for performance assessment
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2201/00—Indexing scheme relating to error detection, to error correction, and to monitoring
- G06F2201/865—Monitoring of software
Abstract
The present disclosure relates to learning to select a vocabulary of category features. Methods, systems, and apparatus, including computer programs encoded on a computer storage medium, for determining, for each of one or more category features, a respective vocabulary of category feature values for the category feature that should be valid during processing of an input by a machine learning model. In one aspect, a method includes: generating a batch of output sequences, each output sequence in the batch specifying for each of the class features a respective vocabulary of class feature values for the class feature that should be valid; for each output sequence in the batch, determining a performance metric of the machine learning model on the machine learning task after the machine learning model has been trained to perform the machine learning task with only the respective vocabulary of class feature values for each class feature specified by the output sequence being valid.
Description
Technical Field
The present description relates to processing data using a machine learning model.
Background
The machine learning model receives input and generates output, e.g., predicted output, based on the received input. Some machine learning models are parametric models and generate an output based on received inputs and values of parameters of the model.
Some machine learning models are depth models that employ multiple layers of the model for received inputs to generate output. For example, a deep neural network is a deep machine learning model that includes an output layer and one or more hidden layers that each apply a nonlinear transformation to a received input to generate an output.
Disclosure of Invention
The present specification describes a system implemented as a computer program on one or more computers in one or more locations, the system training a machine learning model configured to process inputs comprising category characteristic values. As used throughout this specification, a category feature refers to a feature that is only able to assume values in a discrete (e.g., finite) set of possible feature values.
According to a first aspect, there is provided a method performed by one or more data processing apparatus for determining, for each of one or more class features, a respective vocabulary of class feature values for the class feature that should be valid during processing of an input by a machine learning model having a plurality of machine learning model parameters, the method comprising: generating a batch output sequence using a controller neural network having a plurality of controller parameters and in accordance with the current values of the controller parameters, each output sequence in the batch specifying for each of the class features a respective vocabulary of class feature values for that class feature, the respective vocabulary: (i) Should be valid during processing of input by the machine learning model, and (ii) is a subset of a discrete set of possible class feature values for the class feature; for each output sequence in the batch, determining a performance metric of the machine learning model on a machine learning task after the machine learning model has been trained to perform the machine learning task with only respective vocabularies of class feature values of each class feature specified by the output sequence being valid, wherein during the training: the machine learning model is configured to process inputs comprising one or more possible class feature values of respective class features by performing operations comprising: mapping the possible class feature values to corresponding embeddings iteratively adjusted during the training for only those possible class feature values included in the input that are specified as valid by the output sequence; and processing the embedding for the input to generate a machine learning model output; and adjusting a current value of a controller parameter of the controller neural network using the performance metrics of the output sequences in the batch.
In some implementations, each output sequence in the batch additionally specifies a respective embedding dimension corresponding to each class feature value specified as valid by the output sequence during processing of input by the machine learning model; and for each output sequence in the batch, during the training, the machine learning model is configured to map each possible class feature value included in the input that is specified as valid by the output sequence to a corresponding embedding having the embedding dimension specified by the output sequence.
In some implementations, each output sequence specifies a different embedding dimension for a different class feature value for a given class feature.
In some implementations, the machine learning model includes a respective plurality of embedded models corresponding to each category feature; an embedding model corresponding to a class feature defines a mapping of each of one or more class feature values of the class feature to a corresponding sub-embedding of the class feature values having a respective dimension; each output sequence in the batch specifying, for each of the class features, one or more embedded models corresponding to the class feature; and mapping a given category characteristic value for a given category characteristic included in the input to a corresponding embedding includes: for each embedding model specified by the output sequence for the given class feature that defines a mapping of the given class feature value to a corresponding sub-embedding, mapping the given class feature value to the corresponding sub-embedding using the embedding model; and determining an embedding of the given class feature value based on the sub-embedding.
In some implementations, determining the embedding of the given category characteristic value based on the sub-embedding includes: for any sub-embeddings having dimensions different from the specified dimensions, the sub-embeddings are projected to the specified dimensions.
In some implementations, determining the embedding of the given class feature value based on the sub-embeddings further includes summing or averaging the sub-embeddings.
In some implementations, processing the embedding for the input to generate a machine learning model output includes: for each category feature, generating a combined embedding corresponding to the category feature based on a respective embedding of each category feature value of the category feature included in the input and specified as valid by the output sequence; and processing the combined embedding using one or more neural network layers for the input to generate a machine learning model output.
In some implementations, the method further comprises: generating a new output sequence using the controller neural network and in accordance with the adjusted values of the controller parameters; and training the machine learning model on training data with only the respective vocabulary of class feature values for each class feature specified by the new output sequence being valid to determine an adjusted value for the machine learning model parameter.
In some implementations, adjusting the current value of a controller parameter of the controller neural network using the performance metrics of the output sequences in the batch includes: the controller neural network is trained using reinforcement learning techniques to generate an output sequence with improved performance metrics.
In some implementations, the reinforcement learning technique is an actor judge reinforcement learning technique.
In some implementations, the performance metrics for a given output sequence in the batch are based on the predictive accuracy of the machine learning model on the machine learning task if the respective vocabulary of class feature values for each class feature specified by the output sequence alone is valid.
In some implementations, the performance metrics for a given output sequence in the batch are based on respective embedding dimensions corresponding to each class feature value specified as valid by the output sequence.
In some implementations, the controller neural network is a recurrent neural network configured to, for a given output sequence and at each of a plurality of time steps: a representation of the output generated at a previous time step in the given output sequence is received as input and the input is processed to update the current hidden state of the recurrent neural network and to generate a distribution of scores throughout the possible outputs over the time step.
In some implementations, the method further comprises: a final output sequence is generated in accordance with the adjusted values of the controller parameters, the final output sequence indicating, for each of the class features, a respective final vocabulary of class feature values.
In some implementations, the method further includes performing the machine learning task for a received input by processing the received input if only a final vocabulary of category feature values for each category feature specified by the final output sequence is valid.
In some implementations, the machine learning model is configured to process input characterizing a user's previous search query to generate output characterizing the user's predicted next search query.
In some implementations, the machine learning model is configured to process input characterizing a previous video viewed by a user to generate output characterizing a predicted next video viewed by the user.
In some implementations, the machine learning model is configured to process input characterizing a previous web page accessed by a user to generate output characterizing a predicted next web page accessed by the user.
In some implementations, each output sequence in the batch additionally specifies an architecture of the machine learning model; and for each output sequence in the batch, the machine learning model is configured to process the input using an architecture of the machine learning model specified by the output sequence.
According to another aspect, there is provided a method performed by one or more data processing apparatus for determining, for each of one or more class feature values, a respective embedding dimension of an embedding that should be generated for the class feature value during processing of an input by a machine learning model having a plurality of machine learning model parameters, the method comprising: generating, using a controller neural network having a plurality of controller parameters and in accordance with current values of the controller parameters, output sequences of a batch, each output sequence of the batch specifying, for each class feature value, a respective embedding dimension of an embedding that should be generated for the class feature value during processing of input by the machine learning model; for each output sequence in the batch, determining a performance metric of the machine learning model on the machine learning task after the machine learning model has been trained to perform the machine learning task when the machine learning model generates an embedding of the class feature values having the embedding dimension specified by the output sequence, wherein during the training: the machine learning model is configured to process inputs comprising one or more category feature values by performing operations comprising: mapping each category feature value included in the input to an embedding having a corresponding embedding dimension specified by the output sequence; and processing the embedding for the input to generate a machine learning model output; and adjusting a current value of a controller parameter of the controller neural network using the performance metrics of the output sequences in the batch.
According to another aspect, there is provided a system comprising one or more computers and one or more storage devices storing instructions that when executed by the one or more computers cause the one or more computers to perform the operations of any one of the methods previously described.
According to another aspect, there is provided one or more computer storage media storing instructions that, when executed by one or more computers, cause the one or more computers to perform the operations of any one of the previously described methods.
Particular embodiments of the subject matter described in this specification can be implemented to realize one or more of the following advantages.
The training system described in this specification is capable of training a machine learning model configured to process inputs comprising feature values of one or more category features. The machine learning model is configured to maintain, for each category feature, a respective embedding corresponding to each feature value in a subset of possible feature values of the category feature, referred to as "valid" feature values of the category feature. The set of valid feature values for a category feature may also be referred to as the "vocabulary" of category features. After receiving the input, the machine learning model maps each active category feature value included in the input to its corresponding embedding (which is iteratively adjusted during training of the machine learning model). The machine learning model may map any "invalid" class feature values included in the input to a default embedding, e.g., an embedding that includes only zeros.
The vocabulary of the class features and the embedding dimensions of the class feature values of the class features may severely impact the accuracy of the machine learning model and the computing resource consumption (e.g., of memory and computing power). As part of training the machine learning model, the training system described in this specification performs an automatic search over a space of possible category feature vocabularies and embedding dimensions to optimize performance of the machine learning model. The performance of the machine learning model may characterize the prediction accuracy of the machine learning model and the computational resource consumption of the machine learning model (e.g., the number of parameters needed to store the embedding of valid class feature values).
Some conventional systems may learn and maintain a fixed-size embedding for each of a large number of class feature values. For example, for a machine learning model that performs large-scale recommendation tasks (e.g., recommending video or web pages to users) by processing category features that have a large number (millions or billions) of possible category feature values, this may result in unacceptable computing resource consumption and poor performance of the machine learning model. In contrast, the training system described in this specification learns select class feature vocabulary and embedding dimensions that jointly optimize the prediction accuracy and computational resource consumption of the machine learning model. Thus, the systems described in this specification can, in some cases, improve the prediction accuracy of a machine learning model while reducing the computational resource consumption of the machine learning model.
The details of one or more embodiments of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and from the claims.
Drawings
FIG. 1 illustrates an example training system.
Fig. 2 shows an array of shared parameter values divided into class features of a grid of an embedded model.
Fig. 3 shows a set of embedding models for a class feature that define an embedding with the same dimension for each valid feature value of the class feature.
Fig. 4 shows a set of embedding models for class features that define embeddings with different dimensions for the valid feature values of the class features.
FIG. 5 is a flow chart of an example process for determining, for each of one or more category characteristics, a respective vocabulary of category characteristic values for the category characteristic that should be valid during processing of the input by the machine learning model.
FIG. 6 is a flow chart of an example process for determining, for each of one or more category characteristic values, an embedded respective embedding dimension that should be generated for the category characteristic value during processing of an input by a machine learning model.
Like reference numbers and designations in the various drawings indicate like elements.
Detailed Description
FIG. 1 illustrates an example training system 100. Training system 100 is an example of a system implemented as a computer program on one or more computers in one or more locations, in which the following systems, components, and techniques are implemented.
The training system 100 is configured to train a machine learning model 102. The machine learning model 102 is configured to process an input 104 including feature values of one or more category features to generate a corresponding output 106. The input 104 may include zero, one, or multiple possible feature values for each category feature.
In general, the machine learning model 102 is capable of performing any of a variety of machine learning tasks. Several examples of possible machine learning tasks that may be performed by the machine learning model 102 are described in more detail below.
In one example, the machine learning model 102 may be configured to process input of a prior text search query that characterizes a user to generate an output of a predicted next search query for a specified user. Category features in the input of the machine learning model may include, for example: the prior search query, the unigram of the prior search query, the bigram of the prior search query, and the trigram of the prior search query. An n-gram (e.g., a unigram, a bigram, or a trigram) of a search query refers to a sequence of n consecutive characters in the search query. The possible feature values for the "previous search query" category feature may include a predefined set of possible search queries, for example, 100 ten thousand possible search queries or any other suitable number of possible search queries. The possible feature values for each "n-gram of previous search query" category feature may include a predefined set of possible n-grams. The output of the machine learning model 102 may include a respective score for each search query in a set of multiple possible search queries, where the score for each search query characterizes the likelihood that it will be the next search query for the user.
In another example, the machine learning model 102 may be configured to process inputs characterizing a software application to generate outputs defining a likelihood that the software application will be selected by a user for installation on a user device (e.g., a smartphone). Category features in the input of the machine learning model may include, for example, application identifier category features, application developer category features, and application title category features. The possible feature values of the application identifier class feature may include a predefined set of possible application identifiers (e.g., expressed as integer values), where each application identifier corresponds to a respective application. The possible feature values of the application developer class feature may comprise a predefined set of possible application developers. The possible feature values for the application title category feature may comprise a predefined set of possible n-grams.
In another example, the machine learning model 102 may be configured to process input characterizing a previous video being viewed by a user to generate output characterizing a predicted next video to be viewed by the user (e.g., on a video sharing platform). The category features in the input of the machine learning model may include category features specifying an Identifier (ID) of a previous video viewed by the user, wherein possible feature values for the category features include a respective ID corresponding to each of the plurality of videos. The output of the machine learning model 102 may include a respective score for each video in a set of multiple videos, where the score for each video characterizes the likelihood that it is the next video to be viewed by the user.
In another example, the machine learning model 102 may be configured to process input characterizing a previous web page accessed by a user to generate output characterizing a predicted next web page to be accessed by the user. The category characteristics in the input of the machine learning model may include category characteristics specifying an ID of a previous web site accessed by the user, wherein possible characteristic values of the category characteristics include a respective ID corresponding to each web page of the plurality of web pages. The output of the machine learning model 102 may include a respective score for each web page in a set of multiple web pages, where the score for each web page characterizes the likelihood that it is the next web page to be accessed by the user.
In another example, the machine learning model 102 may be configured to process inputs characterizing products associated with a user (e.g., products previously purchased by the user or previously browsed by the user on an online platform) to generate outputs characterizing other products that may be of interest to the user. The category characteristics in the input of the machine learning model may include category characteristics specifying an ID of a product associated with the user, wherein possible characteristic values of the category characteristics include a respective ID corresponding to each of the plurality of products. The output of the machine learning model may include a respective score for each product in a set of multiple products, where the score for each product characterizes a likelihood that the product is of interest to the user (e.g., the product should be recommended to the user).
In another example, the machine learning model may be configured to process inputs characterizing digital components associated with the user (e.g., digital components previously sent to the user) to generate outputs characterizing other digital components that may be of interest to the user. The category characteristics in the input of the machine learning model may include category characteristics specifying an ID of a digital component previously transmitted to the user, wherein possible characteristic values of the category characteristics include a respective ID corresponding to each of the plurality of digital components. The output of the machine learning model may include a respective score for each of a set of multiple digital components, where the score for each digital component characterizes a likelihood that the digital component is of interest to the user (e.g., such that the digital component should be sent to the user).
As used throughout this specification, the phrase digital component refers to a discrete unit of digital content or digital information that can include, for example, one or more of the following: video clips, audio clips, multimedia clips, images, text segments, or Uniform Resource Locators (URLs). The digital components can be stored electronically in the physical memory device as a single file or in a collection of files, and the digital components can take the form of video files, audio files, multimedia files, image files, or text files and include streaming video, streaming audio, social networking posts, blog posts, and/or advertising information such that the advertisement is a type of digital component. Typically, the digital components are defined (or provided) by a single provider or source (e.g., advertiser, publisher, or other content provider), but the digital components provided from one source can be enhanced with data from another source (e.g., weather information, real-time event information, or other information obtained from another source).
The machine learning model 102 includes an embedded system and a predictive system, each of which will be described in greater detail below.
The embedding system is configured to maintain, for each category feature, a respective embedding corresponding to each feature value in a subset of possible feature values of the category feature, referred to as "active" feature values for the category feature. The set of valid feature values for a category feature may also be referred to as the "vocabulary" of category features. The vocabulary of a given class of features may be empty (i.e., such that none of the possible feature values are valid), may be an appropriate subset of the set of possible feature values, or equal to the set of possible feature values (i.e., such that each of the possible feature values is valid). As used throughout this specification, "embedding" refers to an ordered collection of values, e.g., a vector or matrix of values. The embedding system maps each valid class feature value included in the input 104 to its corresponding embedment and provides these embedments to the prediction system.
The embedding system may map any class feature values included in the input that are "invalid" (i.e., not valid feature values of the class feature, i.e., outside the vocabulary of the class feature) to default (i.e., predefined) embeddings, e.g., embeddings that include only zeros.
The prediction system is configured to process the embedding of the class feature values included in the input 104 in accordance with the values of the set of prediction system parameters to generate the output 106. For example, to generate the output 106, the prediction system may determine a combined embedding corresponding to each category feature by combining (e.g., summing or averaging) the respective embeddings for each valid feature value of the category features included in the input 104. The prediction system may then process the combined embedding corresponding to the category features to generate the output 106, e.g., by concatenating the combined embedding corresponding to the category features and using one or more neural network layers to process the concatenated results. The neural network layer may be, for example, a fully connected neural network layer, a convolutional neural network layer, or any other suitable type of neural network layer.
The selection of the vocabulary for each category feature and the embedded dimensions used by the machine learning model for each feature value in the vocabulary for each category feature can significantly impact the performance of the machine learning model 102. More specifically, the selection and embedding dimensions of the class feature vocabulary can significantly impact the prediction accuracy and computational resource consumption of the machine learning model.
For example, some category features may have a large number of possible feature values, e.g., a category feature specifying an ID of a previous video viewed by a user may have millions of possible feature values (e.g., corresponding to millions of videos uploaded to a video sharing platform). Learning and maintaining the embedding of feature values for each possible category can be computationally intensive and result in overfitting. Furthermore, using an embedding with the same dimensions for each feature value of a class feature may result in inefficient computing resource usage. For example, more common or predictive feature values may require greater embedding to represent their complex relationships with other feature values, whereas the use of greater embedding for less common feature values may result in overfitting due to the rarity of those feature values in the training data.
As part of training the machine learning model 102, the training system 100 performs an automated search over a space of possible category feature words and embedded dimensions to optimize the performance of the machine learning model 102, as will be described in more detail below.
The training system 100 includes a training engine 108 and a controller neural network 110, each of which is described in more detail below.
At each of one or more iterations, referred to herein as "optimization iterations," the training engine 108 obtains a class feature specification 112 generated by the controller neural network 110 at the time of the optimization iteration. The category characteristics specification 112 defines, for each category characteristic: (i) A vocabulary of category features, and (ii) an embedded respective dimension to be used by the machine learning model for each feature value in the vocabulary of category features. The class feature specification may be expressed, for example, as a sequence of numerical values. For each category feature, the category feature specification may specify different embedding dimensions for different feature values in the vocabulary of category features, such that certain feature values have higher embedding dimensions than others.
The training system 100 then obtains an embedded set of class feature values that meet the class feature specification 112. That is, the training system 100 obtains a respective embedding of each feature value in the vocabulary for each category feature, where the vocabulary of the category feature and the dimensions of the embedding are specified by the category feature specification 112. The training system 100 may obtain class feature value embeddings that have been trained (e.g., rather than being randomly initialized) at a previous optimization iteration, as will be described in more detail below.
The training system 100 provides the machine learning model 102 with the class feature value embedded (i.e., that meets the class feature specification 112) and uses the training engine 108 to train the machine learning model 102 on a set of training data 114. The training data includes a set of training examples, where each training example specifies: (i) Training inputs for the machine learning model, and (ii) target outputs that should be generated by the machine learning model by processing the training inputs.
The training engine 108 may use multiple iterations of random gradient descent to train the machine learning model 102 on the training data 114 to optimize an objective function, such as a cross entropy objective function, that measures the predictive accuracy of the machine learning model 102, for example. At each iteration of the stochastic gradient descent, the training engine 108 may back-propagate the gradient of the objective function through the machine learning model to adjust the embedding of the effective feature values for each class feature.
After determining that the training termination criteria are met (e.g., because a predetermined number of training iterations have been performed), the training system 100 determines performance metrics 116 corresponding to the current class feature specifications 112. The performance metric 116 may depend on both: (i) The predictive accuracy of the trained machine learning model, and (ii) the number of parameters required to represent the class feature value embedding (i.e., when using the current class feature specification 112).
The training system 100 may determine the predictive accuracy of the trained machine learning model, for example, by evaluating the predictive accuracy of the trained machine learning model over a set of validation data. The validation data may include training examples that were not used during training of the machine learning model 102, i.e., training examples that were not included in the training data 114. The training system 100 may use any suitable objective function (e.g., cross entropy objective function) to evaluate the predictive accuracy of the trained machine learning model on the validation data.
The training system 100 may determine the number of parameters C needed to represent the embedding of the class feature values as:
where F indexes the category characteristics,is a set of category characteristics, v indexes the characteristic values in the vocabulary of category characteristics F, and d v，F The embedded dimension of the feature value v in the vocabulary of the category feature F is indicated (i.e., according to the current category feature specification 112).
The training system 100 may determine the performance metric P as, for example:
wherein the method comprises the steps ofIndicating prediction accuracy, β indicates a constant value, C indicates the number of parameters required to represent class feature value embedding, and C tot "budget" indicating a number of parameters for representing class feature representations ". It can be appreciated that C is only if it exceeds its "budget" C tot To influence the performance measure P so as to cause the number C of parameters required to represent the embedding of the class feature values to remain at the budget C tot And (3) inner part.
The controller neural network 110 is configured to generate a class feature specification 112 at each optimization iteration. The controller neural network 110 may have any suitable neural network architecture that enables it to generate class feature specifications.
For example, the controller neural network may be a recurrent neural network, i.e., a neural network having one or more recurrent neural network layers, such as a Long Short Term Memory (LSTM) recurrent neural network layer. In this example, the controller neural network may generate a sequence of output values by generating a respective output value at each of a plurality of time steps, wherein the sequence of output values collectively define a class feature specification. In particular, at each time step, the controller neural network may process the representations of the outputs generated at the previous time step to generate a distribution of scores throughout the possible outputs for the time step and update the current hidden state (e.g., cell state) of the controller neural network. The distribution of scores throughout the possible outputs of the time step may include a respective score (value) for each output in the set of possible outputs of the time step. The controller neural network may determine the output of the time step by: the score distribution across the possible outputs is processed to generate a probability distribution across the possible outputs, and the possible outputs are then sampled in accordance with the probability distribution. The controller neural network may generate a probability distribution over the possible outputs, for example, by processing the score distribution over the possible outputs using a soft-max function.
The training system 100 adjusts the parameter values of the controller neural network 110 at each optimization iteration to cause the controller neural network 110 to generate a class feature specification 112 with good (e.g., higher) performance metrics. For example, the training system 100 may use reinforcement learning techniques to train the controller neural network 110 to maximize a cumulative measure of rewards (e.g., a sum of folds of rewards), where rewards received at each optimization iteration are specified by the performance metric 116 for the optimization iteration. The training system 100 may train the controller neural network 110 using any suitable reinforcement learning technique (e.g., actor judge reinforcement learning technique).
In some implementations, the controller neural network 110 may generate multiple output sequences of one batch at each optimization iteration, i.e., it defines multiple class feature specifications. In this implementation, the training system 100 may determine a respective performance metric 116 for each category feature specification, and may determine rewards at the time of optimizing the iteration, for example, based on an average of the performance metrics 116 for optimizing the iteration.
In some implementations, the controller neural network 110 may be configured to generate an output defining both: (i) Category feature specifications, and (ii) architecture of a machine learning model. The data defining the architecture of the machine learning model may specify, for example, a number of neural network layers used by a prediction system of the machine learning model to process the embedding of the effective class feature values to generate the output. In these implementations, the training system 100 may use a machine learning model having an architecture specified by the controller neural network to determine performance metrics of the class feature specifications specified by the controller neural network.
After the final optimization iteration, the training system 100 may identify the "best" class feature specification 112, for example, having the highest performance metric 116, from among the class feature specifications generated at each optimization iteration. Thereafter, the machine learning model 102 may perform machine learning tasks using the class feature vocabulary and feature value embedding dimensions specified by the best class feature specification 112. In some implementations, the training system 100 may also identify the "best" architecture of the machine learning model, e.g., that is generated by the controller neural network along with the best class feature specifications, which is thereafter used to implement the machine learning model.
To facilitate faster training of the machine learning model at each optimization iteration, the training system 100 may avoid retraining class feature value embeddings from scratch (e.g., from a default value or from a randomly initialized value) each time the machine learning model is trained. Instead, for each class feature, the training system 100 may maintain a shared set of parameters maintained across optimization iterations. Each time the machine learning model is trained, the embedding of the class feature values provided to the machine learning model is a subset of the shared parameters corresponding to the class features, and training the machine learning model updates this subset of the shared parameters.
For example, for each category feature, the shared parameter set corresponding to that category feature may be represented as a two-dimensional (2-D) array of values. The number of rows in the array may be equal to the number of possible feature values for the class feature, and the number of columns may be equal to the maximum allowable embedding dimension for the possible values for the class feature.
An array sharing parameters may be understood as a grid divided into sub-arrays, as illustrated by fig. 2, where each sub-array is referred to as an "embedded model". Each embedded model is illustrated by a box (e.g., 200-A-C). In this example, the entire array has 500 ten thousand rows and 256 columns, and each embedded model has 100 ten thousand rows and 64 columns. Each embedding model defines a mapping from each of the eigenvalues associated with the rows of the array corresponding to the embedding model to a corresponding "sub-embedding" having dimensions equal to the number of columns of the embedding model. ("sub-embedding" refers to an ordered collection of values, e.g., a vector or matrix of values). For example, the embedding model 200-A defines a mapping from eigenvalues associated with the first 100 ten thousand rows of the array to corresponding 64-dimensional sub-embeddings.
The class feature specification may specify the vocabulary of class features and the respective embedding dimensions for each feature value in the vocabulary by specifying a subset of the embedding model for the class features (i.e., a subset of the subarrays of the entire array). For each feature value of a class feature, the embedding of the feature value may be defined collectively by a set of sub-embeddings of the feature value defined by an embedding model specified by the class feature specification. If none of the embedding models specified by the class feature specification define a sub-embedding of a particular feature value, then that feature value is considered to be outside the vocabulary of the class feature.
In some implementations, for each category feature, the category feature specification specifies a "box" of the embedded model for that category feature, e.g., as illustrated in block 300 of fig. 3. The embedded model may be indexed by a coordinate pair (i, j), and the category feature specification may specify block 300 by specifying index (4, 3) of the embedded model 302 at the lower right corner of block 300. In the example illustrated by fig. 3, by specifying box 300, the category feature specification specifies embedding of dimensions 196 (=64+64+64) of feature values corresponding to the first 400 ten thousand rows of the array. The category characteristics specification also specifies that the characteristic values corresponding to the last 100 ten thousand rows of the array are not in the vocabulary of category characteristics. It can be appreciated that in the example illustrated with reference to fig. 3, each feature value in the vocabulary of category features has the same dimension.
In some implementations, for each category feature, the category feature specification specifies a set of embedding models (where no embedding model is specified in the third column) by specifying a respective box of the embedding model in each "column" of the embedding model (e.g., boxes 400-a-C as illustrated in fig. 4). The class feature specification may specify the set of embedded models by a series of non-negative integer values, where each value specifies a number of embedded models in a box in a corresponding column of embedded models. For example, the category feature specification may specify the set of embedded models defined by blocks 400-A-C in the following order: (2,5,0,2), i.e. two embedded models in the first column, 5 embedded models in the second column, 0 embedded model in the third column and 2 embedded models in the fourth column. In the example illustrated by fig. 4, the category feature specification specifies embedding of dimension 196 (=64+64+64) of the feature value corresponding to the first 200 ten thousand rows in the array, and specifies embedding of dimension 64 of the feature value corresponding to the last 300 ten thousand rows in the array. It can be appreciated that in the example illustrated by fig. 4, different feature values of a category feature may have different dimensionality of the embedding.
In some cases, the embedding of feature values may be commonly defined by a set of sub-embeddings having different dimensions. In this case, the embedding system may use a projection matrix to project each sub-embedding to the same dimension, and then combine (e.g., sum or average) the projected sub-embeddings to generate an overall embedding of the feature values. The parameters of the projection matrix may be trainable parameters of the embedded system.
FIG. 5 is a flow chart of an example process 500 for determining, for each of one or more category features, a respective vocabulary of category feature values for the category feature that should be valid during processing of the input by the machine learning model. For convenience, process 500 is described as being performed by a system of one or more computers located in one or more locations. For example, a training system (e.g., training system 100 of fig. 1) appropriately programmed in accordance with the present description can perform process 500.
The system uses the controller neural network and generates an output sequence of one lot in accordance with the current values of the controller parameters (502). Each output sequence in the batch specifies for each of the class features a respective vocabulary of class feature values for that class feature, which: (i) Should be valid during processing of the input by the machine learning model, and (ii) is a subset of a discrete set of possible class feature values for the class feature.
For each output sequence in the batch, the system determines a performance metric of the machine learning model on the machine learning task after the machine learning model has been trained with the respective vocabulary of class feature values for each class feature specified by the output sequence only valid (504). During training, the machine learning model is configured to process inputs comprising one or more possible class feature values of the respective class feature by: for only those possible class feature values included in the input that are specified as valid by the output sequence, the possible class feature values are mapped to corresponding embeddings that are iteratively adjusted during training. The machine learning model then processes these embeddings for input to generate machine learning model outputs.
The system uses the performance metrics of the output sequences in the batch to adjust the current values of the controller parameters of the controller neural network (506).
FIG. 6 is a flow diagram of an example process 600 for determining, for each of one or more category characteristic values, an embedded respective embedding dimension that should be generated for the category characteristic value during processing of an input by a machine learning model. For convenience, process 600 is described as being performed by a system of one or more computers located in one or more locations. For example, a training system (e.g., training system 100 of fig. 1) appropriately programmed in accordance with the present description can perform process 600.
The system uses the controller neural network and generates an output sequence of one lot in accordance with the current values of the controller parameters (604). Each output sequence in the batch specifies, for each class feature value, a respective embedding dimension of the embedding that should be generated for that class feature value during processing of the input by the machine learning model.
For each output sequence in the batch, the system determines a performance metric of the machine learning model on the machine learning task after the training machine learning model has been trained to perform the machine learning task when the machine learning model generates an embedding of class feature values having an embedding dimension specified by the output sequence (604). During training, the machine learning model is configured to process inputs comprising one or more category feature values by: each class feature value included in the input is mapped to an embedding having a corresponding embedding dimension specified by the output sequence. The machine learning model then processes these embeddings for input to generate machine learning model outputs.
The system uses the performance metrics of the output sequences in the batch to adjust the current values of the controller parameters of the controller neural network (606).
The term "configured" is used in this specification in connection with systems and computer program components. A system for one or more computers to be configured to perform a particular operation or action means that the system has installed thereon software, firmware, hardware, or a combination thereof that in operation causes the system to perform the operation or action. By one or more computer programs to be configured to perform a particular operation or action is meant that the one or more programs include instructions that, when executed by a data processing apparatus, cause the apparatus to perform the operation or action.
Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, in tangibly embodied computer software or firmware, in computer hardware (including the structures disclosed in this specification and their structural equivalents), or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a tangible, non-transitory storage medium for execution by, or to control the operation of, data processing apparatus. The computer storage medium may be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, or a combination of one or more of the foregoing. Alternatively or additionally, the program instructions can be encoded on a manually-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
The term "data processing apparatus" refers to data processing hardware and encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers. The device may also be or further comprise a dedicated logic circuit, for example an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit). The apparatus can optionally include, in addition to hardware, code that creates an execution environment for the computer program, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
A computer program (which may also be referred to or described as a program, software application, app, module, software module, script, or code) can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages; and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a data communication network.
In this specification, the term "engine" is used broadly to refer to a software-based system, subsystem, or process that is programmed to perform one or more particular functions. Typically, the engine will be implemented as one or more software modules or components installed on one or more computers in one or more locations. In some cases, one or more computers will be dedicated to a particular engine; in other cases, multiple engines can be installed and run on the same computer or computers.
The processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, or in combination with, special purpose logic circuitry (e.g., an FPGA or ASIC).
A computer suitable for executing a computer program can be based on a general purpose microprocessor or a special purpose microprocessor or both, or any other kind of central processing unit. Typically, a central processing unit will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a central processing unit for executing or carrying out the instructions and one or more memory devices for storing instructions and data. The central processing unit and the memory can be supplemented by, or incorporated in, special purpose logic circuitry. Typically, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Furthermore, it is possible to embed the computer in another device, such as a mobile phone, a Personal Digital Assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device, such as a Universal Serial Bus (USB) flash drive, to name a few.
Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and storage devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disk; CD-ROM and DVD-ROM discs.
To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer. Other kinds of devices can also be used to provide for interaction with a user; for example, feedback provided to the user may be any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback; and can receive input from a user in any form, including acoustic, speech, or tactile input. Further, the computer is capable of interacting with the user by sending and receiving documents to and from the device used by the user; for example, by sending a web page to a web browser on a user's device in response to a request received from the web browser. In addition, the computer can interact with the user by sending text messages or other forms of messages to the personal device (e.g., a smart phone running a messaging application) and receiving response messages from the user in return.
The data processing apparatus for implementing the machine learning model can also include, for example, dedicated hardware accelerator units for processing the public and computationally intensive portions of the machine learning training or production (i.e., reasoning) workload.
The machine learning model can be implemented and deployed using a machine learning framework (e.g., a TensorFlow framework, microsoft Cognitive Toolkit framework, apache Singa framework, or Apache MXNet framework).
Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front-end component (e.g., a client computer having a graphical user interface, a web browser, or an app through which a user can interact with an implementation of the subject matter described in this specification), or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include Local Area Networks (LANs) and Wide Area Networks (WANs), such as the internet.
The computing system can include clients and servers. The client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, the server sends data (e.g., HTML pages) to the user device, e.g., for the purpose of displaying data to and receiving user input from a user interacting with the device as a client. Data generated at the user device, e.g., results of the user interaction, can be received at the server from the device.
While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any invention or of what may be claimed, but rather as descriptions of features that may be specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Furthermore, although features may have been described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, although operations are depicted in the drawings and described in the claims in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous. Furthermore, the separation of various system modules and components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
Specific embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous.
Claims (22)
1. A method for determining a vocabulary for a category feature, wherein for each of one or more category features, a respective vocabulary for a category feature value for the category feature that should be valid during processing of an input by a machine learning model having a plurality of machine learning model parameters is determined, the method comprising:
generating an output sequence of a batch using a controller neural network having a plurality of controller parameters and in accordance with current values of the plurality of controller parameters, each output sequence of the batch specifying for each of the class features a respective vocabulary of class feature values for that class feature, the respective vocabulary: (i) Should be valid during processing of input by the machine learning model, and (ii) is a subset of a discrete set of possible class feature values for the class feature;
For each output sequence in the batch, determining a performance metric of the machine learning model on a machine learning task after the machine learning model has been trained to perform the machine learning task with only respective vocabularies of class feature values of each class feature specified by the output sequence being valid, wherein during the training:
the machine learning model is configured to process inputs comprising one or more possible class feature values of respective class features by performing operations comprising:
mapping the possible class feature values to corresponding embeddings iteratively adjusted during the training for only those possible class feature values included in the input that are specified as valid by the output sequence; and is also provided with
Processing the embedding for the input to generate a machine learning model output; and adjusting current values of the plurality of controller parameters of the controller neural network using the performance metrics of the output sequences in the batch.
2. The method according to claim 1, wherein:
each output sequence in the batch additionally specifies a respective embedding dimension corresponding to each class feature value specified as valid by the output sequence during processing of input by the machine learning model; and is also provided with
For each output sequence in the batch, during the training, the machine learning model is configured to map each possible class feature value included in the input that is specified as valid by the output sequence to a corresponding embedding having the embedding dimension specified by the output sequence.
3. The method of claim 2, wherein each output sequence specifies a different embedding dimension for a different class feature value for a given class feature.
4. The method according to claim 1, wherein:
the machine learning model includes a respective plurality of embedded models corresponding to each category feature;
an embedding model corresponding to a class feature defines a mapping of each of one or more class feature values of the class feature to a corresponding sub-embedding of the class feature values having a respective dimension;
each output sequence in the batch specifying, for each of the class features, one or more embedded models corresponding to the class feature; and is also provided with
Mapping a given category characteristic value for a given category characteristic included in the input to a corresponding embedding includes:
for each embedding model specified by the output sequence for the given class feature that defines a mapping of the given class feature value to a corresponding sub-embedding, mapping the given class feature value to the corresponding sub-embedding using the embedding model; and is also provided with
An embedding of the given class feature value is determined based on the sub-embedding.
5. The method of claim 4, wherein determining the embedding of the given category characteristic value based on the sub-embedding comprises:
for any sub-embeddings having dimensions different from the specified dimensions, the sub-embeddings are projected to the specified dimensions.
6. The method of claim 5, wherein determining the embedding of the given category characteristic value based on the sub-embeddings further comprises summing or averaging the sub-embeddings.
7. The method of claim 1, wherein processing the embedding for the input to generate a machine learning model output comprises:
for each category feature, generating a combined embedding corresponding to the category feature based on a respective embedding of each category feature value of the category feature included in the input and specified as valid by the output sequence; and
the combined embedding is processed using one or more neural network layers for the input to generate a machine learning model output.
8. The method of claim 1, further comprising:
generating a new output sequence using the controller neural network and in accordance with the adjusted values of the plurality of controller parameters; and
The machine learning model is trained on training data with only the respective vocabulary of class feature values for each class feature specified by the new output sequence being valid to determine an adjusted value for the machine learning model parameter.
9. The method of claim 1, wherein adjusting current values of the plurality of controller parameters of the controller neural network using the performance metrics of the output sequences in the batch comprises:
the controller neural network is trained using reinforcement learning techniques to generate an output sequence with improved performance metrics.
10. The method of claim 9, wherein the reinforcement learning technique is an actor judge reinforcement learning technique.
11. The method of claim 1, wherein the performance metric for a given output sequence in the batch is based on a predictive accuracy of the machine learning model on the machine learning task if the respective vocabulary of class feature values for each class feature specified only by the output sequence is valid.
12. The method of claim 2, wherein the performance metrics for a given output sequence in the batch are based on respective embedding dimensions corresponding to each class feature value specified as valid by the output sequence.
13. The method of claim 1, wherein the controller neural network is a recurrent neural network configured to, for a given output sequence and at each of a plurality of time steps:
a representation of the output generated at a previous time step in the given output sequence is received as input and the input is processed to update the current hidden state of the recurrent neural network and to generate a distribution of scores throughout the possible outputs over the time step.
14. The method of claim 1, further comprising:
a final output sequence is generated in accordance with the adjusted values of the plurality of controller parameters, the final output sequence indicating, for each of the class features, a respective final vocabulary of class feature values.
15. The method of claim 14, further comprising:
the machine learning task is performed for a received input by processing the received input with only the final vocabulary of class feature values for each class feature specified by the final output sequence being valid.
16. The method of any of claims 1-15, wherein the machine learning model is configured to process input characterizing a user's previous search query to generate output characterizing the user's predicted next search query.
17. The method of any of claims 1-15, wherein the machine learning model is configured to process input characterizing a previous video viewed by a user to generate output characterizing a predicted next video to be viewed by the user.
18. The method of any of claims 1 to 15, wherein the machine learning model is configured to process input characterizing a previous web page accessed by a user to generate output characterizing a predicted next web page to be accessed by the user.
19. The method of any one of claims 1-15, wherein:
each output sequence in the batch additionally specifies an architecture of the machine learning model; and is also provided with
For each output sequence in the batch, the machine learning model is configured to process the input using the architecture specified by the output sequence.
20. A method for determining a vocabulary for a category feature, wherein for each category feature value of one or more category feature values, a respective embedding dimension of an embedding that should be generated for the category feature value during processing of an input by a machine learning model having a plurality of machine learning model parameters is determined, the method comprising:
Generating, using a controller neural network having a plurality of controller parameters and in accordance with current values of the plurality of controller parameters, an output sequence of a batch, each output sequence of the batch specifying, for each class feature value, a respective embedding dimension of an embedding that should be generated for the class feature value during processing of an input by the machine learning model;
for each output sequence in the batch, determining a performance metric of the machine learning model on the machine learning task after the machine learning model has been trained to perform the machine learning task when the machine learning model generates an embedding of the class feature values having the embedding dimension specified by the output sequence, wherein during the training:
the machine learning model is configured to process inputs comprising one or more category feature values by performing operations comprising:
mapping each category feature value included in the input to an embedding having a corresponding embedding dimension specified by the output sequence; and is also provided with
Processing the embedding for the input to generate a machine learning model output; and adjusting current values of the plurality of controller parameters of the controller neural network using the performance metrics of the output sequences in the batch.
21. A system for determining vocabulary for category features, the system comprising one or more computers and one or more storage devices storing instructions which, when executed by the one or more computers, cause the one or more computers to perform the operations of the respective method of any one of claims 1-20.
22. One or more non-transitory computer-readable storage media storing instructions which, when executed by one or more computers, cause the one or more computers to perform the operations of the respective method of any one of claims 1-20.
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201962852200P | 2019-05-23 | 2019-05-23 | |
US62/852,200 | 2019-05-23 |
Publications (2)
Publication Number | Publication Date |
---|---|
CN111652378A CN111652378A (en) | 2020-09-11 |
CN111652378B true CN111652378B (en) | 2023-11-03 |
Family
ID=72348307
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202010450032.7A Active CN111652378B (en) | 2019-05-23 | 2020-05-25 | Learning to select vocabulary for category features |
Country Status (2)
Country | Link |
---|---|
US (2) | US11537664B2 (en) |
CN (1) | CN111652378B (en) |
Families Citing this family (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11645277B2 (en) * | 2017-12-11 | 2023-05-09 | Google Llc | Generating and/or utilizing a machine learning model in response to a search request |
US11397742B2 (en) | 2019-06-21 | 2022-07-26 | Microsoft Technology Licensing, Llc | Rescaling layer in neural network |
US11204968B2 (en) * | 2019-06-21 | 2021-12-21 | Microsoft Technology Licensing, Llc | Embedding layer in neural network for ranking candidates |
US11831347B2 (en) * | 2019-09-18 | 2023-11-28 | Nec Corporation | Parameter determination apparatus, signal transmission apparatus, parameter determination method, signal transmission method and recording medium |
US11651281B2 (en) * | 2020-05-18 | 2023-05-16 | International Business Machines Corporation | Feature catalog enhancement through automated feature correlation |
US11386114B2 (en) * | 2020-10-21 | 2022-07-12 | Adobe Inc. | Structure-based transformers with localization and encoding for chart question answering |
CN112488188B (en) * | 2020-11-30 | 2023-12-19 | 浙江理工大学 | Feature selection method based on deep reinforcement learning |
Citations (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN105160397A (en) * | 2014-06-06 | 2015-12-16 | 谷歌公司 | Training distilled machine learning models |
CN106294313A (en) * | 2015-06-26 | 2017-01-04 | 微软技术许可有限责任公司 | Study embeds for entity and the word of entity disambiguation |
CN108304365A (en) * | 2017-02-23 | 2018-07-20 | 腾讯科技（深圳）有限公司 | keyword extracting method and device |
CN108701118A (en) * | 2016-02-11 | 2018-10-23 | 电子湾有限公司 | Semantic classes is classified |
CN109284374A (en) * | 2018-09-07 | 2019-01-29 | 百度在线网络技术（北京）有限公司 | For determining the method, apparatus, equipment and computer readable storage medium of entity class |
CN109564575A (en) * | 2016-07-14 | 2019-04-02 | 谷歌有限责任公司 | Classified using machine learning model to image |
CN109698030A (en) * | 2017-10-23 | 2019-04-30 | 谷歌有限责任公司 | For automatically generating for the interface of patient-supplier dialogue and notes or summary |
Family Cites Families (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9196243B2 (en) * | 2014-03-31 | 2015-11-24 | International Business Machines Corporation | Method and system for efficient spoken term detection using confusion networks |
US20160180214A1 (en) * | 2014-12-19 | 2016-06-23 | Google Inc. | Sharp discrepancy learning |
US10606946B2 (en) * | 2015-07-06 | 2020-03-31 | Microsoft Technology Licensing, Llc | Learning word embedding using morphological knowledge |
US20170083623A1 (en) * | 2015-09-21 | 2017-03-23 | Qualcomm Incorporated | Semantic multisensory embeddings for video search by text |
EP3583553A1 (en) * | 2017-07-21 | 2019-12-25 | Google LLC | Neural architecture search for convolutional neural networks |
US20200050941A1 (en) * | 2018-08-07 | 2020-02-13 | Amadeus S.A.S. | Machine learning systems and methods for attributed sequences |
US20220027756A1 (en) * | 2020-07-24 | 2022-01-27 | Optum Services (Ireland) Limited | Categorical input machine learning models |
-
2020
- 2020-05-20 US US16/878,912 patent/US11537664B2/en active Active
- 2020-05-25 CN CN202010450032.7A patent/CN111652378B/en active Active
-
2022
- 2022-12-07 US US18/076,662 patent/US11714857B2/en active Active
Patent Citations (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN105160397A (en) * | 2014-06-06 | 2015-12-16 | 谷歌公司 | Training distilled machine learning models |
CN106294313A (en) * | 2015-06-26 | 2017-01-04 | 微软技术许可有限责任公司 | Study embeds for entity and the word of entity disambiguation |
CN108701118A (en) * | 2016-02-11 | 2018-10-23 | 电子湾有限公司 | Semantic classes is classified |
CN109564575A (en) * | 2016-07-14 | 2019-04-02 | 谷歌有限责任公司 | Classified using machine learning model to image |
CN108304365A (en) * | 2017-02-23 | 2018-07-20 | 腾讯科技（深圳）有限公司 | keyword extracting method and device |
CN109698030A (en) * | 2017-10-23 | 2019-04-30 | 谷歌有限责任公司 | For automatically generating for the interface of patient-supplier dialogue and notes or summary |
CN109284374A (en) * | 2018-09-07 | 2019-01-29 | 百度在线网络技术（北京）有限公司 | For determining the method, apparatus, equipment and computer readable storage medium of entity class |
Also Published As
Publication number | Publication date |
---|---|
US11537664B2 (en) | 2022-12-27 |
CN111652378A (en) | 2020-09-11 |
US20230146053A1 (en) | 2023-05-11 |
US20200372076A1 (en) | 2020-11-26 |
US11714857B2 (en) | 2023-08-01 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN111652378B (en) | Learning to select vocabulary for category features | |
US11669744B2 (en) | Regularized neural network architecture search | |
US10853726B2 (en) | Neural architecture search for dense image prediction tasks | |
US20210334624A1 (en) | Neural architecture search using a performance prediction neural network | |
CN109564575B (en) | Classifying images using machine learning models | |
AU2014201827B2 (en) | Scoring concept terms using a deep network | |
US20210271970A1 (en) | Neural network optimizer search | |
US11922281B2 (en) | Training machine learning models using teacher annealing | |
US11048875B2 (en) | Skimming data sequences using recurrent neural networks | |
US20240127058A1 (en) | Training neural networks using priority queues | |
CN110462638B (en) | Training neural networks using posterior sharpening | |
EP3542319A1 (en) | Training neural networks using a clustering loss | |
US20190295688A1 (en) | Processing biological sequences using neural networks | |
WO2020154536A1 (en) | Compound model scaling for neural networks | |
US20220383119A1 (en) | Granular neural network architecture search over low-level primitives | |
US20220019869A1 (en) | Hardware-optimized neural architecture search | |
EP4268137A1 (en) | Machine learning rank and prediction calibration | |
CN114282101A (en) | Training method and device of product recommendation model, electronic equipment and storage medium |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
GR01 | Patent grant | ||
GR01 | Patent grant |