US20150339111A1 - Automatic discovery and installation of applications via the internet in response to coupling of hardware device to computing device - Google Patents
Automatic discovery and installation of applications via the internet in response to coupling of hardware device to computing device Download PDFInfo
- Publication number
- US20150339111A1 US20150339111A1 US14/283,640 US201414283640A US2015339111A1 US 20150339111 A1 US20150339111 A1 US 20150339111A1 US 201414283640 A US201414283640 A US 201414283640A US 2015339111 A1 US2015339111 A1 US 2015339111A1
- Authority
- US
- United States
- Prior art keywords
- computing device
- web browser
- applications
- hardware device
- computer
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Abandoned
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/60—Software deployment
- G06F8/61—Installation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/4401—Bootstrapping
- G06F9/4411—Configuring for operating with peripheral devices; Loading of device drivers
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/60—Software deployment
- G06F8/65—Updates
Definitions
- This document relates generally to applications used with computing devices and, in particular, to the automatic discovery of applications via the Internet in response to the coupling of a hardware device to a computing device.
- hardware devices have been sold or shipped with accompanying software (e.g., a device driver) that would be installed on the users computing device to provide a device-specific application that provides dedicated communication services between the hardware device and an operating system of the computing device.
- the software could be stored on a computer-readable medium, e.g., a floppy disk or a CD, and installed on the computing device after the medium is inserted into a computer-readable medium reader (e.g., a floppy disk drive or a CD drive) and read by the computing device.
- a computer-readable medium reader e.g., a floppy disk drive or a CD drive
- a computer-implemented method includes receiving a first indication that a hardware device has been coupled to a computing device and receiving a second indication that the computing device does not have installed a device-specific application that provides dedicated communication services between the hardware device and an operating system of the computing device.
- a database of applications for device-specific applications that provide dedicated communication services between the hardware device and an operating system of the computing device is automatically queried.
- One or more applications from the database that satisfy the query are displayed to a user.
- Implementations can include one or more of the following features. For example, a selection of one of the one or more displayed applications can be received, and the selected one of the displayed applications can be installed. Installing the selected one of the displayed applications can include launching the application on the computing device and initiating communication between the device and the operating system through the launched application. Receiving the first indication that a hardware device has been coupled to a computing device can include receiving information about a vendor of the device, and the query can be based, at least in part, on the information about the vendor. Receiving the first indication that a hardware device has been coupled to a computing device can include receiving a product ID of the device and the query can be based, at least in part, on the product ID.
- the device can be coupled to the computing device via a USB link, and receiving the first indication that a hardware device has been coupled to a computing device can include receiving a device descriptor that identifies the device, and the query is based, at least in part, on the information about the device descriptor.
- the device can be coupled to the computing device via a Bluetooth link, and receiving the first indication that a hardware device has been coupled to a computing device can include receiving a UUID that identifies the device, and the query can be based, at least in part, on the information about the UUID.
- the database can maintain an index of metadata information about the applications in the database, and querying the database can include querying the index with one or more search terms descriptive of the device, which are matched against the index. Terms of the index can be based on terms found in manifests of applications in the database.
- a computer-implemented method includes receiving device-specific applications for inclusion in a database of applications, where the device-specific applications provide dedicated communication services between a hardware device connected to a computing device and an operating system of the computing device.
- the applications are indexed in an index of applications that are available in the database.
- a query is received from a computing device connected to the database via the Internet for one or more device-specific applications that provide dedicated communication services between a hardware device connected to the computing device and an operating system of the computing device, where the query is automatically sent from the computing device to the database in response to the hardware device being connected to the computing device.
- the query is executed against the index, and, responsive to the query, indications of one or more applications that satisfy the query are provided to a user of the computing device.
- Implementations can include one or more of the following features. For example, providing indications of the one or more applications that satisfy the query can include proving indications only of applications that satisfy the query and that have been validated as being associated with an approved developer for the hardware device. Indexing the applications can include indexing the applications based on information contained in manifests of the applications. Information in a manifest for an application that provides dedicated communication services between a hardware device connected to a computing device via a Bluetooth link and an operating system of the computing device can include a UUID for the hardware device. Information in a manifest for an application that provides dedicated communication services between a hardware device connected to a computing device via a USB link and an operating system of the computing device can include a device descriptor ID for the hardware device.
- a selection of one of the applications that satisfies the query can be received, and in response to receiving the selection, the selected application can be provided to the computing device.
- the device can be coupled to the computing device via a USB link, and the query can be based, at least in part, on the information about a device descriptor that identifies the device.
- the device can be coupled to the computing device via a Bluetooth link, and the query can be based, at least in part, on the information about a UUID that identifies the device.
- computer-implemented method includes receiving an indication that a hardware device has been coupled to a computing device.
- a database of applications is automatically queried for user-level applications that are intended for use with the hardware device when the hardware device is coupled to a computing device, and one or more applications from the database that satisfy the query are displayed to a user.
- Implementations can include one or more of the following features. For example, a selection of one of the one or more displayed applications can be received, and the selected one of the displayed applications can be displayed.
- the device can be coupled to the computing device via a USB link, and receiving the indication that a hardware device has been coupled to a computing device can include receiving a device descriptor that identifies the device, and the query can be based, at least in part, on the information about the device descriptor.
- FIG. 1 is a block diagram of a system in which a hardware device is coupled to a computing device.
- FIG. 2 is a screenshot of a user interface to a marketplace of digital goods.
- FIG. 3 is a schematic block diagram of an example embodiment of a system used to search for and identify digital goods in a marketplace.
- FIG. 4 is a screenshot of the user interface to a marketplace of digital goods.
- FIG. 5 is a flowchart of a process for automatically identifying device-specific applications that provide dedicated communication services between a hardware device and a computing device.
- FIG. 6 is a flowchart of a process for automatically identifying device-specific applications that provide dedicated communication services between a hardware device and a computing device.
- FIG. 7 is a flowchart of a process for automatically identifying user-level applications that are intended to be used with a particular hardware device when the hardware device is coupled to a computing device.
- FIG. 8 shows an example of a computer device and a mobile computer device, which may be used with the techniques described here.
- the automatic search can be initiated in response to a hardware device being linked to a computing device, for example, when a hardware device is coupled to a computing device via a Bluetooth or a USB link.
- the automatic search can be executed over a curated data store 132 that hosts applications, including device-specific applications, which have been approved for installation and use on a computing device.
- a search for an appropriate device driver can be automatically initiated in response to the coupling of the hardware device to the computing device.
- the results of the search can be presented to a user of the computing device, and the user can elect to install a device driver for the hardware device on the computing device.
- FIG. 1 is a block diagram of a system 100 in which a hardware device 102 is coupled to a computing device 104 .
- the hardware device 102 can be used to perform a specialized function for a user, alone or in combination with the computing device to which it is coupled.
- the hardware device include: a standalone GPS device that determines a position through communication with orbiting satellites and which communicates positional data to the computing device 104 and where the GPS device receives updated map information from a connected computing device; a smart-watch that performs certain functions while coupled to a computing device, such as, for example, a smart phone, a tablet, or a phablet; a wearable computing device, such as, for example, eyeglasses equipped with a camera, a head-up display, memory, and a processor, which is coupled to the computing device 104 ; a monitor that detects physiological data (e.g., heart rate, movement, temperature, sleep state, etc.) of a user and that communicates the detected data to a coupled computing device.
- physiological data e.g., heart rate, movement, temperature, sleep state, etc.
- the computing device 104 can include a processor (e.g., a central processing unit) 106 and memory resources (e.g., volatile memory 108 and non-volatile memory 116 ).
- the computing device 104 can include an operating system 110 and a kernel-level application 112 specific to the hardware device that provides dedicated communication services between the hardware device 102 and the operating system 110 of the computing device 104 .
- the computing device 104 can include a user-level application 114 that provides a user interface to functions of the hardware device 102 and access to, manipulation of, and analysis of, data obtained from the hardware device 102 . Commands can be issued to the hardware device from the application 114 and from the operating system 110 through the kernel-level device driver 112 , and data from the hardware device can be communicated to the operating system 110 and the application 114 through the device driver 112 .
- the computing device 104 is connected to a server system 130 that is remotely located from the computing device 104 and that provides a data store 132 of many different applications that provide dedicated communication services between hardware devices and operating systems.
- the computing device 104 is connected to the server system 130 through a network (e.g., the Internet) 120 .
- a network e.g., the Internet
- a signal can be sent from the device to the computing device to indicate that a connection between the two devices has been made.
- a hardware interrupt can be sent from the hardware device 102 to the operating system 110 of the computing device 104 to indicate that the hardware device 102 has been coupled to the computing device 104 .
- the hardware device 102 can be coupled to the computing device 104 over a wired or a wireless connection that uses a wired or wireless communication protocol, respectively.
- the hardware device 102 can be coupled to the computing device 104 through a Bluetooth link over which signals are exchanged between the two devices.
- the hardware device 102 can be coupled to the computing device 104 through a USB link over which signals are exchanged between the two devices.
- information sent from the hardware device to the computing device can include information that identifies the hardware device to the computing device. In some implementations, this information can be sent in response to a query from the operating system 110 .
- the hardware device can communicate a universally unique identifier (“UUID”) that identifies the hardware device product to the computing device.
- UUID universally unique identifier
- the hardware device can communicate device descriptor data (e.g., an IDvendor datum and an IDproduct datum) that identify the hardware device product to the computing device.
- local memory resources 108 , 116 of the computing device can be searched for an application (e.g., a device driver) that provides dedicated communication services between the hardware device 102 and the operating system 104 of the computing device 104 . If such an application exists within the local memory resources, or as part of the operating system 110 , the application can be used loaded into memory 108 and executed by the processor 106 can provide dedicated communication services between the hardware device and the operating system.
- an application e.g., a device driver
- a search for an appropriate application within the remote data store 132 can be initiated automatically (i.e., without human input to start the search, but rather in direct response to the indication that the hardware device 102 has been coupled to the computing device 104 ).
- the search can be conducted by passing information that identifies the hardware device 102 to an application 114 (e.g., a browser application) that connects to the remote server system 130 and issues a query for one or more applications that can be used to provide dedicated communication services between the hardware device 102 and the operating system 110 of the computing device 104 .
- the query is based on the identifying information of the hardware device to the remote server system 130 .
- the query can be executed on the remote server to identify one or more applications that satisfy the query and that are located in the data store 132 of the server system 130 .
- the server system 130 can provide a marketplace of various digital goods (e.g., web applications, browser extensions, device drivers, etc.) that can be used to extend the functions and capabilities of the computing device 104 .
- FIG. 2 is a screenshot of a user interface 200 to a marketplace of digital goods.
- the user interface 200 can be displayed by a browser application that is executed by the computing device 104 that is connected to the network (e.g., the Internet) 120 .
- the browser application can open one or more tabs 202 , one of which may display the user interface to the marketplace when a user navigates to a webpage identified by a uniform resource locator (URL) 204 that provides content to the browser so that the browser can display the user interface to the marketplace in the tab.
- a user interface to a marketplace of digital goods can be displayed in or by an application that does not depend on a browser for its display.
- the user interface can be displayed in a widget that is executed by an operating system or a native application.
- the content provided by the webpage to the user can include a plurality of icons 206 A, 206 B, 206 C, 206 D, 206 E, 206 F, 208 A, 208 B, 208 C, 208 D, 208 E, 210 A, 210 B, 210 C that represent digital goods that can be downloaded from the webpage by the user for execution by the computing device 104 controlled by the user.
- the digital goods can include any software or executable code (e.g., a desktop software program, a native application, a digital media file, such as a song or a movie, device drivers, etc.)
- the digital goods can include web applications that can be downloaded from the marketplace to a client computing device where they can be installed on the computing device for execution by a web browser running on the computing device.
- a “web application” may be configured to be executed or interpreted by the web browser. This is compared with native applications that include machine executable code and that are configured to be executed directly by a processor or via the operating system of the client device, whereas a web application may be incapable of execution or display without the aid of the web browser.
- Web applications may have their code bundled, so that the user can download all of the content of the web application for execution by the browser, such that the web application may not need to have network access to perform its functionality for the user, and rather may be executed successfully by the browser locally on the computing device without access to a network.
- installable web applications When installable web applications are “installed” by the user, the web applications may be added to and integrated with the user's web browser. An installation also allows web applications to obtain increased privileges without having to prompt the user for each one individually. “Installing” a web application may include integration with: a client's operating system's task and window managers for easy window switching, a taskbar or quick-launch system, interoperating system notification(s), or persistently running background processes. Uninstallation allows for easy removal or deactivation of an installed application from the user's browser or system, and may include revoking all associated privileges.
- the device driver application can be implemented as a web application, or a browser extension, in that the device driver application can extend the functionality of the browser to provide a device-specific application that provides dedicated communication services between the hardware device and the operating system of the computing device.
- the device driver can be viewed as being independent of the browser application and as providing a device-specific application that provides dedicated communication services directly between the hardware device and an operating system of the computing device without the aid of a browser application.
- a device driver application may be delivered to a computing device 104 for installation as an installation package that includes a zipped bundle of files (e.g., compressed, archive files) and a header that includes some metadata about the device driver application.
- a zipped bundle of files e.g., compressed, archive files
- the extension adds device driver functionality to the browser application.
- extensions may operate may have access to all of the application programming interfaces (APIs) that the browser application provides to webpages and/or web content.
- APIs application programming interfaces
- the types of data files of a device driver application that can make up a zipped file bundle of an installation package may include hypertext mark-up language (HTML), cascading style sheets (CSS), JavaScript, images, and other types of files including web-related computer language content and/or code, such as JavaScript Object Notation (JSON) objects.
- JSON objects that may be part of an installation package include a manifest data file and a catalog data file.
- a manifest file may be a JSON-formatted file that includes a plurality of information fields that are used to define the corresponding application. These fields may include a name field, a version field, as well as one or more fields that indicate any APIs the application wishes to have access to.
- the manifest of a device driver also may include information that identifies one or more hardware devices (e.g., by a Vendor ID and a Product ID or by a UUID) that the device driver application can be used with to provide dedicated communication services between the hardware device and an operating system of the computing device to which the hardware device is connected. This information then can be used to index the device driver applications in a marketplace of digital goods so that the device driver applications in the marketplace can be matched with their target hardware devices.
- hardware devices e.g., by a Vendor ID and a Product ID or by a UUID
- a device driver for a particular hardware device may allow an application developer to extend the functionality of a USB API to communicate with a particular USB hardware device or may extend the functionality of a Bluetooth API to communicate with a particular Bluetooth-enabled hardware device.
- the manifest file for a given device driver application may indicate (declare) that it requires access to the USB/Bluetooth API in order to provide the device driver communication services between the hardware device 102 and the operating system 110 of the computing device 104 .
- the digital goods can be displayed in a manner that is organized to help a user decide which applications may be useful or relevant to the user.
- the user interface 200 can include a category 212 of applications 206 A, 206 B, 206 C, 206 D, 206 E, 206 F that have been recently released in the marketplace and which a curator of the marketplace may deem to be especially noteworthy to users.
- the applications 206 A, 206 B, 206 C, 206 D, 206 E, 206 F shown in the category 212 can be limited to applications that have been released in the marketplace within a recent period of time (e.g. one week, one month, three months, six months).
- a subset of the applications that have been released into the marketplace within the recent period of time can be selected based on a variety of signals that indicate the noteworthiness of the selected applications to the user, and the selected subset of applications 206 A, 206 B, 206 C, 206 D, 206 E, 206 F can be displayed within the category 212 . That is, the applications 206 A, 206 B, 206 C, 206 D, 206 E, 206 F shown in the New and Noteworthy category 212 of the user interface 200 can be a subset of a larger number of applications that also could qualify as being new and noteworthy but which have not been selected for display in the user interface 200 .
- the user interface 200 can include a category 214 of applications 208 A, 208 B, 208 C, 208 D, 208 E that have been selected to be featured for display in the user interface 200 .
- the applications 208 A, 208 B, 208 C, 208 D, 208 E that are selected to be featured in the category 214 can be selected based on criteria evaluated by a curator of the market place. For example, the curator may select the applications 208 A, 208 B, 208 C, 208 D, 208 E for display in the category 214 from a much larger set of applications based on the curator's opinion of the quality, popularity, or utility of the selected applications. In another implementation, the curator may select the applications 208 A, 208 B, 208 C, 208 D, 208 E based upon payments made by developers of the applications in return for prominent display of the applications in the user interface 200 .
- the user interface 200 of the marketplace also can include categories of applications in other subportions of the user interface 200 in which smaller icons are used to represent the applications that are used in categories 212 , 214 , 216 .
- category 218 can display “Favorite Paid Apps,” which can be applications for which a user must pay money before being able to download and install the application on the user's computing device. Applications listed in the Favorite Paid Apps category 218 can be the most frequently downloaded and/or most frequently installed applications for which the user must pay money.
- category 220 can display “Staff Picks,” which can be applications that are selected by a curator at the marketplace based on the selected applications being deemed especially interesting to users who visit the marketplace in search of applications.
- an “Apps” section 222 can provide a list of hyperlinks, which each can be selected to display applications that belong to a category identified by the hyperlink.
- selection of the “Education” hyperlink 223 can cause a group of icons that represent applications related to educational topics to be displayed.
- an “Extensions” section 224 can provide a list of hyperlinks, which each can be selected to display extensions that belong to a category identified by the hyperlink, where an extension is executable code that extends the functionality of a browser.
- selection of the “Sports” hyperlink 225 can cause a group of icons that represent extensions related to sports topics to be displayed.
- digital goods In addition to locating digital goods that are already displayed within a category 212 , 214 , 216 , 218 , 220 of the user interface 200 , which could be displayed as a result of selecting a hyperlink 223 , 225 , digital goods also can be located as a result of a query for goods that may be of interest to the user. For example, a user may enter query terms into an query box 226 that may receive the query terms and pass the terms onto a search engine that then locates digital goods that match the query terms and that are available in the marketplace. For example, digital goods such as web applications can have a variety of metadata associated with them that are used to index the digital goods, and the query terms can be compared to the metadata associated with the digital goods. Based on the comparison, applications that best match the query terms can be selected from the digital goods available in the marketplace, and the selected goods can be presented to the user in the user interface 200 .
- a query box 226 may receive the query terms and pass the terms onto a search engine that then locates digital goods that match
- FIG. 3 is a schematic block diagram of an example embodiment of a system 300 used to search for and identify digital goods in a marketplace.
- the system 300 may include client computing devices (e.g., desktop computers, notebook computers, netbook computers, tablet computers, smart-phone, etc.) 302 A, 302 B, 302 C.
- a client computing device 302 A can include one or more processors 304 and one or more memories 306 .
- the client computing device 302 A can execute an operating system 308 and an application 310 that may display a user interface window 312 .
- the client computing device 302 A can include a hardware device 305 that communicates with the operating system 308 via a device driver 316
- the client computing device 302 A may be running or causing the operating system 308 to execute an application 310 or window 312 .
- the window 312 can be a window of a web browser.
- the window 312 can be a window (e.g., a widget) that is executed independently of a browser.
- this window 312 may include a plurality of panes or tabs 314 A, 314 B, 314 C.
- the window 312 can be a visual area, usually rectangular, containing some kind of user interface.
- GUI graphical user interface
- the window 312 can be a two-dimensional object arranged on a plane of the GUI known as the desktop.
- the window 312 can include other graphical objects, e.g., a menu-bar, toolbars, controls, icons and usually a working area in which the document, image, folder contents or other main object can be displayed.
- the client computing devices 302 A, 302 B, 302 C may receive online content from one or more server computing devices 350 that may be connected to the client device 302 through a network 390 .
- Each of the client computing devices 302 A, 302 B, 302 C can be connected to the network 390 through a local Internet Service Provider 392 .
- the received online content can be processed and displayed in the window 312 (e.g., in a tab 314 of the window 312 ).
- the window 312 can display a user interface to a marketplace for digital goods, similar to the user interface of the marketplace described herein, to a user.
- the client computing device 302 A can communicate with a digital goods marketplace server 350 that provides a marketplace for digital goods to client computing devices 302 A, 302 B, 302 C.
- the marketplace server 350 can include one or more processors 352 and one or more memories 354 .
- the marketplace server 350 can execute an operating system 356 and various applications and services to provide functionality to the client computing devices.
- the marketplace server 350 can include a repository or database of digital goods 358 , and the digital goods can be served from, or downloaded from, the repository to the client computing devices.
- the digital goods can be stored in, and served to client computing devices from, a repository that is remotely located from the marketplace server.
- digital goods could be stored and served to client computing devices from individual repositories that are operated and controlled by developers of the digital goods, and digital goods repository 358 of the marketplace server 350 can provide just a reference to the individual repositories that are operated by the developers.
- the marketplace server 350 can include a metadata database 360 that stores metadata associated with the digital goods that are available from or referenced by the digital goods repository 358 .
- the metadata associated with a digital good can include a variety of information about the digital goods including, for example, information about the digital goods that are available from the repository 358 . Such information can include, for example, representative keywords associated with the digital goods and the price associated with the digital goods.
- the metadata can include information that identifies the vendor and the product of the device 305 . For example, the information could match the UUID or the vendorID and productID information that is provided by the device 305 to the operating system 308 when the hardware device 302 is coupled to the computing device.
- the marketplace server 350 can include a query handler 362 that can be configured to receive and process queries for digital goods available in the marketplace.
- the query handler can receive queries for digital goods that are entered into query box 226 of the user interface 200 shown in FIG. 2 .
- Terms or phrases of the queries then can be compared to terms and phrases (e.g., terms and phrases stored in the metadata database 360 ) that are used to index the digital goods available in the marketplace. Based on the comparison, a subset of digital goods can be selected from the database 358 with which to respond to the query.
- the query handler can receive queries for digital goods that are initiated automatically in response to a hardware device 305 being coupled to the computing device 302 A, where the automatically initiated query may include terms or phrases that identify the hardware device 305 .
- the query then can be compared to terms and phrases (e.g., terms and phrases stored in the metadata database 360 ) that are used to index the device drivers available in the marketplace. Based on the comparison, a subset of device drivers that to respond to the query can be selected from the database 358 .
- terms and phrases e.g., terms and phrases stored in the metadata database 360
- the marketplace 350 can include a presentation engine 366 that prepares information for transmission to the client computing devices 302 A, 302 B, 302 C, where the information is used by the client computing devices to display a user interface 200 that shows representations of selected digital goods available in the marketplace.
- the presentation engine 366 can prepare HTML code, XML code, etc. that determines the information that is displayed to a user in the user interface 200 and where the code determines which digital goods will be displayed in the user interface 200 to the user.
- FIG. 4 is a screenshot of a user interface 400 to a marketplace of digital goods.
- the screenshot is representative of an implementation of a user interface that can be displayed when a FitBitTM hardware device 305 is coupled to a computing device 302 A and a query for a device driver application for the FitBitTM device is automatically initiated and sent from the computing device 302 A to the marketplace server 350 .
- the term “FitBit” can be displayed in the query box 426 to indicate that a search has been performed for device driver applications for use with the FitbitTM hardware device 305 .
- the query term(s) displayed in the query box 426 and/or query terms that identify the hardware device 305 can be compared to metadata associated with digital goods available within the marketplace, for example, metadata stored in metadata database 360 .
- the metadata with which the query terms are compared can be derived from information in the manifest of the device driver (e.g., information that identifies the hardware device(s) that the device driver application is intended to be used with).
- the query handler 362 can identify one or more device driver applications that are responsive to the query terms.
- a pop-up HTML window 406 can be displayed when a user moves a mouse icon over an icon for a device driver 408 that is displayed in the user interface 400 .
- additional information about the device driver application 408 can be displayed.
- a field 410 can indicate what type of version of the device driver the icon represents (e.g., a business/corporate version of a personal version).
- Another field 412 can indicate how many users have downloaded and/or installed and/or used the device driver.
- Another field 414 can display descriptive information about the device driver that supplements information in the title field 416 .
- Another field 420 can display the name of the author or developer of the application.
- more than one device driver application or extension can be displayed in the user interface 400 as a result of a positive match between the automatically-initiated query in response to the coupling of the hardware device to the computing device.
- an icon for the device driver application 408 that is provided by an authorized vendor (e.g., the manufacturer of the hardware device) and that is used for personal applications of the hardware device
- an icon for a second device driver 428 can be displayed in the user interface.
- an icon for a third device driver 438 can be displayed in the user interface.
- the second device driver can represent, for example, a device driver that is provided by the authorized vendor and that is used for business or corporate applications of the hardware device
- the third device driver 438 can represent a device driver developed by a third party that is not affiliated with the authorized vendor.
- the marketplace may be configured to display, in response to the automatically-generated query that results from coupling of the hardware device to the computing device, only icons for device drivers that are developed, or explicitly approved, by an authorized vendor of the hardware device with which the device driver is to be used. In this manner, a user that couples the hardware device to a computing device may be presented with only device drivers developed were approved by original equipment manufacturers, while permitting third-party device drivers to be made available in the marketplace for users who search for them with a manually-generated query.
- the device driver applications may be displayed in a folder, tab, window, etc. that is identified by the “Device Drivers” heading 440 , while other applications are displayed in other folders, tabs, windows, etc.
- the device driver can be downloaded from the marketplace, installed on the user's computing device, and launched for use to provide dedicated communication services between the hardware device and the computing device.
- the techniques described herein can be used to automatically identify user-level applications that are intended for use with particular hardware devices that are coupled to a computing device when the user-level applications are executed by the computing device.
- user-level applications may provide specialized applications that receive, process, manipulate, display, etc. information received from, or transmitted to, the hardware device.
- user-level applications that are intended to be used with a GPS hardware device coupled to a computing device can include: a marine navigation application that receives positional information from the GPS device and displays the positional information in within an marine navigation chart, so that the user receives the benefit of viewing the accurate positional information from the GPS device in the context of a marine navigation chart; a route planning application that determines routes between a plurality of locations, which routes minimize time or distance traveled between the locations (the “traveling salesman problem”) and transmits the determined routes to the GPS system so that they can be communicated to a user; and a fitness tracking application that receives positional data from the GPS system about distances and times of a user's workouts (e.g., runs, bike rides, etc.) and analyzes the data to determine information, such as, for example, calories expended, improvements in fitness over time, etc.
- a marine navigation application that receives positional information from the GPS device and displays the positional information in within an marine navigation chart, so that the user receives the benefit of viewing the accurate positional
- Developers of user-level applications that are intended to be used in association with one or more particular hardware devices can identify the particular hardware device(s) in metadata associated with the applications.
- the particular hardware devices can be identified by their UUID (for Bluetooth-connected devices) or by their vendor ID and product ID (for USB-connected devices).
- a search can be initiated automatically for user-level applications that identify the hardware device as one with which the applications are intended to be used.
- the automatic search can be executed over the curated data store 132 that hosts applications, including device-specific applications, which have been approved for installation and use on a computing device.
- the results of the search can be presented to a user of the computing device, and the user can elect to install one or more user-level applications for use with the hardware device on the computing device.
- User-level applications identified in response to an automatically initiated search that is launched in response to the coupling of a hardware device to a computing device can be displayed along with, or instead of, device driver applications that provided dedicated communication services between the hardware device and the computing device.
- user-level apps may be displayed with the “user apps” link 442 is selected, while device driver apps may be displayed when the “device driver apps” link is selected.
- a user may select a user-level application from the list of automatically displayed applications, and, in response, the application may be installed on the user's computing device.
- user-level applications that are identified in response to the coupling of the hardware device to the computing device may not be displayed every time the hardware device is coupled to the computing device.
- the suggested applications may be displayed only the first time the hardware device is coupled to the computing device, only when an indication is received that the computing device does not have installed a device driver application to provide dedicated communication services between the hardware device and the operating system of the computing device, etc.
- FIG. 5 is a flowchart of a process for automatically identifying device-specific applications that provide dedicated communication services between a hardware device and a computing device.
- the steps associated with FIG. 5 may be performed automatically by a user device. In other words, the steps of FIG. 5 may be performed as a background process without interaction with a user of the user device.
- a first indication that a hardware device has been coupled to a computing device is received ( 505 ). For example, in one implementation, a hardware interrupt can be received from the hardware device by the computing device.
- a second indication that the computing device does not have installed a device-specific application that provides dedicated communication services between the hardware device and an operating system of the computing device is received ( 510 ).
- an operating system of the computing device may attempt to locate such a device-specific application locally, on the device itself, and upon failure to locate one, an indication of such failure may be received by the operating system.
- a database of applications is automatically queried for device-specific applications that provide dedicated communication services between the hardware device and an operating system of the computing device ( 515 ).
- the computing device may automatically generate such a query and communicate the query to the database. Then, one or more applications from the database that satisfy the query are displayed to a user ( 520 ).
- FIG. 6 is a flowchart of a process for automatically identifying device-specific applications that provide dedicated communication services between a hardware device and a computing device.
- device-specific applications for inclusion in a database of applications are receive, where the device-specific applications provide dedicated communication services between a hardware device connected to a computing ( 605 ).
- the applications are indexed in an index of applications that are available in the database ( 610 ).
- a query is received from a computing device connected to the database via the Internet for one or more device-specific applications that provide dedicated communication services between a hardware device connected to the computing device and an operating system of the computing device, where the query is automatically sent from the computing device to the database in response to the hardware device being connected to the computing device ( 615 ).
- the query is executed against the index ( 620 ).
- indications of one or more applications that satisfy the query are provided to a user of the computing device ( 625 ).
- FIG. 7 is a flowchart of a process for automatically identifying user-level applications that are intended to be used with a particular hardware device when the hardware device is coupled to a computing device.
- an indication that a hardware device has been coupled to a computing device is received ( 705 ).
- a database of applications is automatically queried for user-level applications that are intended for use with the hardware device when the hardware device is coupled to a computing device ( 710 ).
- One or more applications from the database that satisfy the query are displayed to a user ( 715 ).
- FIG. 8 shows an example of a generic computer device 800 and a generic mobile computer device 850 , which may be used with the techniques described here.
- Computing device 800 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers.
- Computing device 850 is intended to represent various forms of mobile devices, such as personal digital assistants, cellular telephones, smart phones, tablets, and other similar computing devices.
- the components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
- Each of computing device 800 and 850 can operate as computing device 104 that is coupled to a hardware device 102 .
- Computing device 800 includes a processor 802 , memory 804 , a storage device 806 , a high-speed interface 808 connecting to memory 804 and high-speed expansion ports 810 , and a low speed interface 812 connecting to low speed bus 814 and storage device 806 .
- Each of the components 802 , 804 , 806 , 808 , 810 , and 812 are interconnected using various busses, and may be mounted on a common motherboard or in other manners as appropriate.
- the processor 802 can process instructions for execution within the computing device 800 , including instructions stored in the memory 804 or on the storage device 806 to display graphical information for a GUI on an external input/output device, such as display 816 coupled to high speed interface 808 .
- multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory.
- multiple computing devices 800 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).
- the memory 804 stores information within the computing device 800 .
- the memory 804 is a volatile memory unit or units.
- the memory 804 is a non-volatile memory unit or units.
- the memory 804 may also be another form of computer-readable medium, such as a magnetic or optical disk.
- the storage device 806 is capable of providing mass storage for the computing device 800 .
- the storage device 806 may be or contain a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations.
- a computer program product can be tangibly embodied in an information carrier.
- the computer program product may also contain instructions that, when executed, perform one or more methods, such as those described above.
- the information carrier is a computer- or machine-readable medium, such as the memory 804 , the storage device 806 , or memory on processor 802 .
- the high speed controller 808 manages bandwidth-intensive operations for the computing device 800 , while the low speed controller 812 manages lower bandwidth-intensive operations.
- the high-speed controller 808 is coupled to memory 804 , display 816 (e.g., through a graphics processor or accelerator), and to high-speed expansion ports 810 , which may accept various expansion cards (not shown).
- low-speed controller 812 is coupled to storage device 806 and low-speed expansion port 814 .
- the low-speed expansion port 814 which may include various communication ports (e.g., USB) may be coupled to one or more devices, such as a keyboard 823 , a pointing device 821 , a scanner 817 , or a printer.
- the expansion port 814 can be coupled to external devices 817 819 , 821 via a wired connection (e.g., a USB connection), and the expansion port can be coupled, via an antenna 815 to an external device 823 via a wireless connection (e.g., a Bluetooth connection).
- a wired connection e.g., a USB connection
- a wireless connection e.g., a Bluetooth connection
- the computing device 800 can be coupled to other devices, by either or both wired or wireless connections, such as hardware devices that require a device-specific application to be installed on the computing device to provide dedicated communication services between the hardware device and an operating system of the computing device.
- the computing device 800 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server 820 , or multiple times in a group of such servers. It may also be implemented as part of a rack server system 824 . In addition, it may be implemented in a personal computer such as a laptop computer 822 . Alternatively, components from computing device 800 may be combined with other components in a mobile device (not shown), such as device 850 . Each of such devices may contain one or more of computing device 800 , 850 , and an entire system may be made up of multiple computing devices 800 , 850 communicating with each other.
- Computing device 850 includes a processor 852 , memory 864 , an input/output device such as a display 854 , a communication interface 866 , and a transceiver 868 , among other components.
- the device 850 may also be provided with a storage device, such as a microdrive or other device, to provide additional storage.
- a storage device such as a microdrive or other device, to provide additional storage.
- Each of the components 850 , 852 , 864 , 854 , 866 , and 868 are interconnected using various buses, and several of the components may be mounted on a common motherboard or in other manners as appropriate.
- the processor 852 can execute instructions within the computing device 850 , including instructions stored in the memory 864 .
- the processor may be implemented as a chipset of chips that include separate and multiple analog and digital processors.
- the processor may provide, for example, for coordination of the other components of the device 850 , such as control of user interfaces, applications run by device 850 , and wireless communication by device 850 .
- Processor 852 may communicate with a user through control interface 858 and display interface 856 coupled to a display 854 .
- the display 854 may be, for example, a TFT LCD (Thin-Film-Transistor Liquid Crystal Display) or an OLED (Organic Light Emitting Diode) display, or other appropriate display technology.
- the display interface 856 may comprise appropriate circuitry for driving the display 854 to present graphical and other information to a user.
- the control interface 858 may receive commands from a user and convert them for submission to the processor 852 .
- an external interface 862 may be provided in communication with processor 852 , so as to enable near area communication of device 850 with other devices. External interface 862 may provide, for example, for wired communication in some implementations, or for wireless communication in other implementations, and multiple interfaces may also be used.
- the memory 864 stores information within the computing device 850 .
- the memory 864 can be implemented as one or more of a computer-readable medium or media, a volatile memory unit or units, or a non-volatile memory unit or units.
- Expansion memory 874 may also be provided and connected to device 850 through expansion interface 872 , which may include, for example, a SIMM (Single In Line Memory Module) card interface.
- SIMM Single In Line Memory Module
- expansion memory 874 may provide extra storage space for device 850 , or may also store applications or other information for device 850 .
- expansion memory 874 may include instructions to carry out or supplement the processes described above, and may include secure information also.
- expansion memory 874 may be provided as a security module for device 850 , and may be programmed with instructions that permit secure use of device 850 .
- secure applications may be provided via the SIMM cards, along with additional information, such as placing identifying information on the SIMM card in a non-hackable manner.
- the memory may include, for example, flash memory and/or NVRAM memory, as discussed below.
- a computer program product is tangibly embodied in an information carrier.
- the computer program product contains instructions that, when executed, perform one or more methods, such as those described above.
- the information carrier is a computer- or machine-readable medium, such as the memory 864 , expansion memory 874 , or memory on processor 852 , that may be received, for example, over transceiver 868 or external interface 862 .
- Device 850 may communicate wirelessly through communication interface 866 , which may include digital signal processing circuitry where necessary. Communication interface 866 may provide for communications under various modes or protocols, such as GSM voice calls, SMS, EMS, or MMS messaging, CDMA, TDMA, PDC, WCDMA, CDMA2000, or GPRS, among others. Such communication may occur, for example, through radio-frequency transceiver 868 . In addition, short-range communication may occur, such as using a BLUETOOTH, WiFi, or other such transceiver (not shown). In addition, GPS (Global Positioning System) receiver module 860 may provide additional navigation- and location-related wireless data to device 850 , which may be used as appropriate by applications running on device 850 .
- GPS Global Positioning System
- Device 850 may also communicate audibly using audio codec 860 , which may receive spoken information from a user and convert it to usable digital information. Audio codec 860 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of device 850 . Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating on device 850 .
- Audio codec 860 may receive spoken information from a user and convert it to usable digital information. Audio codec 860 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of device 850 . Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating on device 850 .
- the computing device 850 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a cellular telephone 880 . It may also be implemented as part of a smart phone 882 , personal digital assistant, or other similar mobile device.
- implementations of the systems and techniques described here can be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof.
- ASICs application specific integrated circuits
- These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- the systems and techniques described here can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- a keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user can be received in any form, including acoustic, speech, or tactile input.
- the systems and techniques described here can be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back end, middleware, or front end components.
- the components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (“LAN”), a wide area network (“WAN”), and the Internet.
- LAN local area network
- WAN wide area network
- the Internet the global information network
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network.
- the relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
Abstract
A computer-implemented method includes receiving a first indication that a hardware device has been coupled to a computing device and receiving a second indication that the computing device does not have installed a device-specific application that provides dedicated communication services between the hardware device and an operating system of the computing device. In response to receiving the first and second indications, a database of applications for device-specific applications that provide dedicated communication services between the hardware device and an operating system of the computing device is automatically queried. One or more applications from the database that satisfy the query are displayed to a user.
Description
- This document relates generally to applications used with computing devices and, in particular, to the automatic discovery of applications via the Internet in response to the coupling of a hardware device to a computing device.
- As more and more hardware devices are being connected with computing devices, a challenge exists to provide resources to facilitate communication between the hardware devices and the computing devices. Traditionally, hardware devices have been sold or shipped with accompanying software (e.g., a device driver) that would be installed on the users computing device to provide a device-specific application that provides dedicated communication services between the hardware device and an operating system of the computing device. The software could be stored on a computer-readable medium, e.g., a floppy disk or a CD, and installed on the computing device after the medium is inserted into a computer-readable medium reader (e.g., a floppy disk drive or a CD drive) and read by the computing device. However, as computing devices become smaller, they may no longer have drives to read floppy disks or CDs and/or developers and vendors may not wish to ship their devices with a computer-readable medium that stores such software.
- Thus, a need exists to address the aforementioned problems with the existing art.
- In a first general aspect, a computer-implemented method includes receiving a first indication that a hardware device has been coupled to a computing device and receiving a second indication that the computing device does not have installed a device-specific application that provides dedicated communication services between the hardware device and an operating system of the computing device. In response to receiving the first and second indications, a database of applications for device-specific applications that provide dedicated communication services between the hardware device and an operating system of the computing device is automatically queried. One or more applications from the database that satisfy the query are displayed to a user.
- Implementations can include one or more of the following features. For example, a selection of one of the one or more displayed applications can be received, and the selected one of the displayed applications can be installed. Installing the selected one of the displayed applications can include launching the application on the computing device and initiating communication between the device and the operating system through the launched application. Receiving the first indication that a hardware device has been coupled to a computing device can include receiving information about a vendor of the device, and the query can be based, at least in part, on the information about the vendor. Receiving the first indication that a hardware device has been coupled to a computing device can include receiving a product ID of the device and the query can be based, at least in part, on the product ID.
- The device can be coupled to the computing device via a USB link, and receiving the first indication that a hardware device has been coupled to a computing device can include receiving a device descriptor that identifies the device, and the query is based, at least in part, on the information about the device descriptor. The device can be coupled to the computing device via a Bluetooth link, and receiving the first indication that a hardware device has been coupled to a computing device can include receiving a UUID that identifies the device, and the query can be based, at least in part, on the information about the UUID. The database can maintain an index of metadata information about the applications in the database, and querying the database can include querying the index with one or more search terms descriptive of the device, which are matched against the index. Terms of the index can be based on terms found in manifests of applications in the database.
- In another general aspect, a computer-implemented method includes receiving device-specific applications for inclusion in a database of applications, where the device-specific applications provide dedicated communication services between a hardware device connected to a computing device and an operating system of the computing device. The applications are indexed in an index of applications that are available in the database. A query is received from a computing device connected to the database via the Internet for one or more device-specific applications that provide dedicated communication services between a hardware device connected to the computing device and an operating system of the computing device, where the query is automatically sent from the computing device to the database in response to the hardware device being connected to the computing device. The query is executed against the index, and, responsive to the query, indications of one or more applications that satisfy the query are provided to a user of the computing device.
- Implementations can include one or more of the following features. For example, providing indications of the one or more applications that satisfy the query can include proving indications only of applications that satisfy the query and that have been validated as being associated with an approved developer for the hardware device. Indexing the applications can include indexing the applications based on information contained in manifests of the applications. Information in a manifest for an application that provides dedicated communication services between a hardware device connected to a computing device via a Bluetooth link and an operating system of the computing device can include a UUID for the hardware device. Information in a manifest for an application that provides dedicated communication services between a hardware device connected to a computing device via a USB link and an operating system of the computing device can include a device descriptor ID for the hardware device.
- A selection of one of the applications that satisfies the query can be received, and in response to receiving the selection, the selected application can be provided to the computing device. The device can be coupled to the computing device via a USB link, and the query can be based, at least in part, on the information about a device descriptor that identifies the device. The device can be coupled to the computing device via a Bluetooth link, and the query can be based, at least in part, on the information about a UUID that identifies the device.
- In another general aspect, computer-implemented method includes receiving an indication that a hardware device has been coupled to a computing device. In response to receiving the indication, a database of applications is automatically queried for user-level applications that are intended for use with the hardware device when the hardware device is coupled to a computing device, and one or more applications from the database that satisfy the query are displayed to a user.
- Implementations can include one or more of the following features. For example, a selection of one of the one or more displayed applications can be received, and the selected one of the displayed applications can be displayed. The device can be coupled to the computing device via a USB link, and receiving the indication that a hardware device has been coupled to a computing device can include receiving a device descriptor that identifies the device, and the query can be based, at least in part, on the information about the device descriptor.
-
FIG. 1 is a block diagram of a system in which a hardware device is coupled to a computing device. -
FIG. 2 is a screenshot of a user interface to a marketplace of digital goods. -
FIG. 3 is a schematic block diagram of an example embodiment of a system used to search for and identify digital goods in a marketplace. -
FIG. 4 is a screenshot of the user interface to a marketplace of digital goods. -
FIG. 5 is a flowchart of a process for automatically identifying device-specific applications that provide dedicated communication services between a hardware device and a computing device. -
FIG. 6 is a flowchart of a process for automatically identifying device-specific applications that provide dedicated communication services between a hardware device and a computing device. -
FIG. 7 is a flowchart of a process for automatically identifying user-level applications that are intended to be used with a particular hardware device when the hardware device is coupled to a computing device. -
FIG. 8 shows an example of a computer device and a mobile computer device, which may be used with the techniques described here. - Like reference symbols in the various drawings indicate like elements.
- This document describes systems and techniques for automatically searching for and identifying device-specific applications (e.g., device drivers) that provide dedicated communication services between hardware devices and operating systems of computing devices. The automatic search can be initiated in response to a hardware device being linked to a computing device, for example, when a hardware device is coupled to a computing device via a Bluetooth or a USB link. The automatic search can be executed over a
curated data store 132 that hosts applications, including device-specific applications, which have been approved for installation and use on a computing device. Thus, when a hardware device is coupled to a computing device, even if a device driver for the specific hardware device is not installed on the computing device, a search for an appropriate device driver can be automatically initiated in response to the coupling of the hardware device to the computing device. The results of the search can be presented to a user of the computing device, and the user can elect to install a device driver for the hardware device on the computing device. -
FIG. 1 is a block diagram of asystem 100 in which ahardware device 102 is coupled to acomputing device 104. Thehardware device 102 can be used to perform a specialized function for a user, alone or in combination with the computing device to which it is coupled. Some non-limiting examples of the hardware device include: a standalone GPS device that determines a position through communication with orbiting satellites and which communicates positional data to thecomputing device 104 and where the GPS device receives updated map information from a connected computing device; a smart-watch that performs certain functions while coupled to a computing device, such as, for example, a smart phone, a tablet, or a phablet; a wearable computing device, such as, for example, eyeglasses equipped with a camera, a head-up display, memory, and a processor, which is coupled to thecomputing device 104; a monitor that detects physiological data (e.g., heart rate, movement, temperature, sleep state, etc.) of a user and that communicates the detected data to a coupled computing device. Thecomputing device 104 can include a processor (e.g., a central processing unit) 106 and memory resources (e.g.,volatile memory 108 and non-volatile memory 116). Thecomputing device 104 can include anoperating system 110 and a kernel-level application 112 specific to the hardware device that provides dedicated communication services between thehardware device 102 and theoperating system 110 of thecomputing device 104. Thecomputing device 104 can include a user-level application 114 that provides a user interface to functions of thehardware device 102 and access to, manipulation of, and analysis of, data obtained from thehardware device 102. Commands can be issued to the hardware device from theapplication 114 and from theoperating system 110 through the kernel-level device driver 112, and data from the hardware device can be communicated to theoperating system 110 and theapplication 114 through thedevice driver 112. - The
computing device 104 is connected to aserver system 130 that is remotely located from thecomputing device 104 and that provides adata store 132 of many different applications that provide dedicated communication services between hardware devices and operating systems. Thecomputing device 104 is connected to theserver system 130 through a network (e.g., the Internet) 120. - When the
hardware device 102 is connected to thecomputing device 104, a signal can be sent from the device to the computing device to indicate that a connection between the two devices has been made. For example, in some implementations, when thehardware device 102 is connected to thecomputing device 104, a hardware interrupt can be sent from thehardware device 102 to theoperating system 110 of thecomputing device 104 to indicate that thehardware device 102 has been coupled to thecomputing device 104. - The
hardware device 102 can be coupled to thecomputing device 104 over a wired or a wireless connection that uses a wired or wireless communication protocol, respectively. In some implementations, thehardware device 102 can be coupled to thecomputing device 104 through a Bluetooth link over which signals are exchanged between the two devices. In another implementation, thehardware device 102 can be coupled to thecomputing device 104 through a USB link over which signals are exchanged between the two devices. - Upon coupling of the
hardware device 102 to thecomputing device 104, information sent from the hardware device to the computing device can include information that identifies the hardware device to the computing device. In some implementations, this information can be sent in response to a query from theoperating system 110. For example, when ahardware device 102 is coupled via a Bluetooth link to thecomputing device 104, the hardware device can communicate a universally unique identifier (“UUID”) that identifies the hardware device product to the computing device. In another implementation, when thehardware device 102 is coupled via a USB link to thecomputing device 104, the hardware device can communicate device descriptor data (e.g., an IDvendor datum and an IDproduct datum) that identify the hardware device product to the computing device. - When the
computing device 104 receives information that identifies the hardware device,local memory resources hardware device 102 and theoperating system 104 of thecomputing device 104. If such an application exists within the local memory resources, or as part of theoperating system 110, the application can be used loaded intomemory 108 and executed by theprocessor 106 can provide dedicated communication services between the hardware device and the operating system. - If an application is not located within the local resources of the
computing device 104, then, in response to the indication that thehardware device 102 is coupled to thecomputing device 104, a search for an appropriate application within theremote data store 132 can be initiated automatically (i.e., without human input to start the search, but rather in direct response to the indication that thehardware device 102 has been coupled to the computing device 104). In some implementations, the search can be conducted by passing information that identifies thehardware device 102 to an application 114 (e.g., a browser application) that connects to theremote server system 130 and issues a query for one or more applications that can be used to provide dedicated communication services between thehardware device 102 and theoperating system 110 of thecomputing device 104. The query is based on the identifying information of the hardware device to theremote server system 130. The query can be executed on the remote server to identify one or more applications that satisfy the query and that are located in thedata store 132 of theserver system 130. Theserver system 130 can provide a marketplace of various digital goods (e.g., web applications, browser extensions, device drivers, etc.) that can be used to extend the functions and capabilities of thecomputing device 104. -
FIG. 2 is a screenshot of auser interface 200 to a marketplace of digital goods. Theuser interface 200 can be displayed by a browser application that is executed by thecomputing device 104 that is connected to the network (e.g., the Internet) 120. The browser application can open one ormore tabs 202, one of which may display the user interface to the marketplace when a user navigates to a webpage identified by a uniform resource locator (URL) 204 that provides content to the browser so that the browser can display the user interface to the marketplace in the tab. In other implementations, a user interface to a marketplace of digital goods can be displayed in or by an application that does not depend on a browser for its display. For example, the user interface can be displayed in a widget that is executed by an operating system or a native application. - The content provided by the webpage to the user can include a plurality of
icons computing device 104 controlled by the user. In some implementations, the digital goods can include any software or executable code (e.g., a desktop software program, a native application, a digital media file, such as a song or a movie, device drivers, etc.) In some implementations, the digital goods can include web applications that can be downloaded from the marketplace to a client computing device where they can be installed on the computing device for execution by a web browser running on the computing device. In this context, a “web application” may be configured to be executed or interpreted by the web browser. This is compared with native applications that include machine executable code and that are configured to be executed directly by a processor or via the operating system of the client device, whereas a web application may be incapable of execution or display without the aid of the web browser. Web applications may have their code bundled, so that the user can download all of the content of the web application for execution by the browser, such that the web application may not need to have network access to perform its functionality for the user, and rather may be executed successfully by the browser locally on the computing device without access to a network. - When installable web applications are “installed” by the user, the web applications may be added to and integrated with the user's web browser. An installation also allows web applications to obtain increased privileges without having to prompt the user for each one individually. “Installing” a web application may include integration with: a client's operating system's task and window managers for easy window switching, a taskbar or quick-launch system, interoperating system notification(s), or persistently running background processes. Uninstallation allows for easy removal or deactivation of an installed application from the user's browser or system, and may include revoking all associated privileges.
- In some implementations, the device driver application can be implemented as a web application, or a browser extension, in that the device driver application can extend the functionality of the browser to provide a device-specific application that provides dedicated communication services between the hardware device and the operating system of the computing device. In other implementations, the device driver can be viewed as being independent of the browser application and as providing a device-specific application that provides dedicated communication services directly between the hardware device and an operating system of the computing device without the aid of a browser application.
- In one example, a device driver application may be delivered to a
computing device 104 for installation as an installation package that includes a zipped bundle of files (e.g., compressed, archive files) and a header that includes some metadata about the device driver application. When the device driver application is provided in the form of an extension, when unpacked and installed in the browser, the extension adds device driver functionality to the browser application. In some implementations, extensions may operate may have access to all of the application programming interfaces (APIs) that the browser application provides to webpages and/or web content. - The types of data files of a device driver application that can make up a zipped file bundle of an installation package may include hypertext mark-up language (HTML), cascading style sheets (CSS), JavaScript, images, and other types of files including web-related computer language content and/or code, such as JavaScript Object Notation (JSON) objects. JSON objects that may be part of an installation package include a manifest data file and a catalog data file. In an example implementation, a manifest file may be a JSON-formatted file that includes a plurality of information fields that are used to define the corresponding application. These fields may include a name field, a version field, as well as one or more fields that indicate any APIs the application wishes to have access to. The manifest of a device driver also may include information that identifies one or more hardware devices (e.g., by a Vendor ID and a Product ID or by a UUID) that the device driver application can be used with to provide dedicated communication services between the hardware device and an operating system of the computing device to which the hardware device is connected. This information then can be used to index the device driver applications in a marketplace of digital goods so that the device driver applications in the marketplace can be matched with their target hardware devices.
- In an example implementation, a device driver for a particular hardware device may allow an application developer to extend the functionality of a USB API to communicate with a particular USB hardware device or may extend the functionality of a Bluetooth API to communicate with a particular Bluetooth-enabled hardware device. In such approaches, the manifest file for a given device driver application may indicate (declare) that it requires access to the USB/Bluetooth API in order to provide the device driver communication services between the
hardware device 102 and theoperating system 110 of thecomputing device 104. - Within the
user interface 200, the digital goods can be displayed in a manner that is organized to help a user decide which applications may be useful or relevant to the user. For example, theuser interface 200 can include acategory 212 ofapplications applications category 212 can be limited to applications that have been released in the marketplace within a recent period of time (e.g. one week, one month, three months, six months). Then, a subset of the applications that have been released into the marketplace within the recent period of time can be selected based on a variety of signals that indicate the noteworthiness of the selected applications to the user, and the selected subset ofapplications category 212. That is, theapplications Noteworthy category 212 of theuser interface 200 can be a subset of a larger number of applications that also could qualify as being new and noteworthy but which have not been selected for display in theuser interface 200. - In another example, the
user interface 200 can include acategory 214 ofapplications user interface 200. Theapplications category 214 can be selected based on criteria evaluated by a curator of the market place. For example, the curator may select theapplications category 214 from a much larger set of applications based on the curator's opinion of the quality, popularity, or utility of the selected applications. In another implementation, the curator may select theapplications user interface 200. - The
user interface 200 of the marketplace also can include categories of applications in other subportions of theuser interface 200 in which smaller icons are used to represent the applications that are used incategories category 218 can display “Favorite Paid Apps,” which can be applications for which a user must pay money before being able to download and install the application on the user's computing device. Applications listed in the Favorite PaidApps category 218 can be the most frequently downloaded and/or most frequently installed applications for which the user must pay money. In another example,category 220 can display “Staff Picks,” which can be applications that are selected by a curator at the marketplace based on the selected applications being deemed especially interesting to users who visit the marketplace in search of applications. - Other parts of the
user interface 200 also can be used to organize the digital goods that are available in the marketplace. For example, an “Apps”section 222 can provide a list of hyperlinks, which each can be selected to display applications that belong to a category identified by the hyperlink. For example, selection of the “Education”hyperlink 223 can cause a group of icons that represent applications related to educational topics to be displayed. In another example, an “Extensions”section 224 can provide a list of hyperlinks, which each can be selected to display extensions that belong to a category identified by the hyperlink, where an extension is executable code that extends the functionality of a browser. For example, selection of the “Sports”hyperlink 225 can cause a group of icons that represent extensions related to sports topics to be displayed. - In addition to locating digital goods that are already displayed within a
category user interface 200, which could be displayed as a result of selecting ahyperlink query box 226 that may receive the query terms and pass the terms onto a search engine that then locates digital goods that match the query terms and that are available in the marketplace. For example, digital goods such as web applications can have a variety of metadata associated with them that are used to index the digital goods, and the query terms can be compared to the metadata associated with the digital goods. Based on the comparison, applications that best match the query terms can be selected from the digital goods available in the marketplace, and the selected goods can be presented to the user in theuser interface 200. -
FIG. 3 is a schematic block diagram of an example embodiment of asystem 300 used to search for and identify digital goods in a marketplace. In various embodiments, thesystem 300 may include client computing devices (e.g., desktop computers, notebook computers, netbook computers, tablet computers, smart-phone, etc.) 302A, 302B, 302C. Aclient computing device 302A can include one ormore processors 304 and one ormore memories 306. Theclient computing device 302A can execute anoperating system 308 and anapplication 310 that may display auser interface window 312. Theclient computing device 302A can include ahardware device 305 that communicates with theoperating system 308 via adevice driver 316 - In one embodiment, the
client computing device 302A may be running or causing theoperating system 308 to execute anapplication 310 orwindow 312. In some implementations, thewindow 312 can be a window of a web browser. In some implementations, thewindow 312 can be a window (e.g., a widget) that is executed independently of a browser. In various embodiments, thiswindow 312 may include a plurality of panes ortabs window 312 can be a visual area, usually rectangular, containing some kind of user interface. In a graphical user interface (GUI) used in theclient device 302A, thewindow 312 can be a two-dimensional object arranged on a plane of the GUI known as the desktop. Thewindow 312 can include other graphical objects, e.g., a menu-bar, toolbars, controls, icons and usually a working area in which the document, image, folder contents or other main object can be displayed. - The
client computing devices server computing devices 350 that may be connected to the client device 302 through anetwork 390. Each of theclient computing devices network 390 through a localInternet Service Provider 392. The received online content can be processed and displayed in the window 312 (e.g., in a tab 314 of the window 312). For example, thewindow 312 can display a user interface to a marketplace for digital goods, similar to the user interface of the marketplace described herein, to a user. - The
client computing device 302A can communicate with a digitalgoods marketplace server 350 that provides a marketplace for digital goods toclient computing devices marketplace server 350 can include one ormore processors 352 and one ormore memories 354. Themarketplace server 350 can execute anoperating system 356 and various applications and services to provide functionality to the client computing devices. For example, in one implementation, themarketplace server 350 can include a repository or database ofdigital goods 358, and the digital goods can be served from, or downloaded from, the repository to the client computing devices. In another implementation, the digital goods can be stored in, and served to client computing devices from, a repository that is remotely located from the marketplace server. For example, digital goods could be stored and served to client computing devices from individual repositories that are operated and controlled by developers of the digital goods, anddigital goods repository 358 of themarketplace server 350 can provide just a reference to the individual repositories that are operated by the developers. - The
marketplace server 350 can include ametadata database 360 that stores metadata associated with the digital goods that are available from or referenced by thedigital goods repository 358. The metadata associated with a digital good can include a variety of information about the digital goods including, for example, information about the digital goods that are available from therepository 358. Such information can include, for example, representative keywords associated with the digital goods and the price associated with the digital goods. In the case of a device driver application for use with aspecific hardware device 305, the metadata can include information that identifies the vendor and the product of thedevice 305. For example, the information could match the UUID or the vendorID and productID information that is provided by thedevice 305 to theoperating system 308 when the hardware device 302 is coupled to the computing device. - The
marketplace server 350 can include aquery handler 362 that can be configured to receive and process queries for digital goods available in the marketplace. For example, the query handler can receive queries for digital goods that are entered intoquery box 226 of theuser interface 200 shown inFIG. 2 . Terms or phrases of the queries then can be compared to terms and phrases (e.g., terms and phrases stored in the metadata database 360) that are used to index the digital goods available in the marketplace. Based on the comparison, a subset of digital goods can be selected from thedatabase 358 with which to respond to the query. In addition, the query handler can receive queries for digital goods that are initiated automatically in response to ahardware device 305 being coupled to thecomputing device 302A, where the automatically initiated query may include terms or phrases that identify thehardware device 305. The query then can be compared to terms and phrases (e.g., terms and phrases stored in the metadata database 360) that are used to index the device drivers available in the marketplace. Based on the comparison, a subset of device drivers that to respond to the query can be selected from thedatabase 358. - The
marketplace 350 can include apresentation engine 366 that prepares information for transmission to theclient computing devices user interface 200 that shows representations of selected digital goods available in the marketplace. For example, thepresentation engine 366 can prepare HTML code, XML code, etc. that determines the information that is displayed to a user in theuser interface 200 and where the code determines which digital goods will be displayed in theuser interface 200 to the user. -
FIG. 4 is a screenshot of auser interface 400 to a marketplace of digital goods. The screenshot is representative of an implementation of a user interface that can be displayed when a FitBit™ hardware device 305 is coupled to acomputing device 302A and a query for a device driver application for the FitBit™ device is automatically initiated and sent from thecomputing device 302A to themarketplace server 350. In some implementations, the term “FitBit” can be displayed in thequery box 426 to indicate that a search has been performed for device driver applications for use with the Fitbit™ hardware device 305. The query term(s) displayed in thequery box 426 and/or query terms that identify the hardware device 305 (e.g., the UUID or the vendor ID and the product ID associated with the device) can be compared to metadata associated with digital goods available within the marketplace, for example, metadata stored inmetadata database 360. The metadata with which the query terms are compared can be derived from information in the manifest of the device driver (e.g., information that identifies the hardware device(s) that the device driver application is intended to be used with). - Based on the comparison, the
query handler 362 can identify one or more device driver applications that are responsive to the query terms. A pop-upHTML window 406 can be displayed when a user moves a mouse icon over an icon for adevice driver 408 that is displayed in theuser interface 400. Within the pop-upHTML window 406, additional information about thedevice driver application 408 can be displayed. For example, afield 410 can indicate what type of version of the device driver the icon represents (e.g., a business/corporate version of a personal version). Anotherfield 412 can indicate how many users have downloaded and/or installed and/or used the device driver. Anotherfield 414 can display descriptive information about the device driver that supplements information in thetitle field 416. Anotherfield 420 can display the name of the author or developer of the application. - As shown in
FIG. 4 , more than one device driver application or extension can be displayed in theuser interface 400 as a result of a positive match between the automatically-initiated query in response to the coupling of the hardware device to the computing device. For example, in addition to an icon for thedevice driver application 408 that is provided by an authorized vendor (e.g., the manufacturer of the hardware device) and that is used for personal applications of the hardware device, an icon for asecond device driver 428, and an icon for athird device driver 438 can be displayed in the user interface. The second device driver can represent, for example, a device driver that is provided by the authorized vendor and that is used for business or corporate applications of the hardware device, and thethird device driver 438 can represent a device driver developed by a third party that is not affiliated with the authorized vendor. In some implementations, the marketplace may be configured to display, in response to the automatically-generated query that results from coupling of the hardware device to the computing device, only icons for device drivers that are developed, or explicitly approved, by an authorized vendor of the hardware device with which the device driver is to be used. In this manner, a user that couples the hardware device to a computing device may be presented with only device drivers developed were approved by original equipment manufacturers, while permitting third-party device drivers to be made available in the marketplace for users who search for them with a manually-generated query. The device driver applications may be displayed in a folder, tab, window, etc. that is identified by the “Device Drivers” heading 440, while other applications are displayed in other folders, tabs, windows, etc. - When a user selects one of the
icons user interface 400, the device driver can be downloaded from the marketplace, installed on the user's computing device, and launched for use to provide dedicated communication services between the hardware device and the computing device. - In addition to automatically identifying kernel-level applications that provide dedicated communication services between hardware devices and operating systems of computing devices, the techniques described herein can be used to automatically identify user-level applications that are intended for use with particular hardware devices that are coupled to a computing device when the user-level applications are executed by the computing device. Such user-level applications may provide specialized applications that receive, process, manipulate, display, etc. information received from, or transmitted to, the hardware device. For example, user-level applications that are intended to be used with a GPS hardware device coupled to a computing device can include: a marine navigation application that receives positional information from the GPS device and displays the positional information in within an marine navigation chart, so that the user receives the benefit of viewing the accurate positional information from the GPS device in the context of a marine navigation chart; a route planning application that determines routes between a plurality of locations, which routes minimize time or distance traveled between the locations (the “traveling salesman problem”) and transmits the determined routes to the GPS system so that they can be communicated to a user; and a fitness tracking application that receives positional data from the GPS system about distances and times of a user's workouts (e.g., runs, bike rides, etc.) and analyzes the data to determine information, such as, for example, calories expended, improvements in fitness over time, etc.
- Developers of user-level applications that are intended to be used in association with one or more particular hardware devices can identify the particular hardware device(s) in metadata associated with the applications. For example, the particular hardware devices can be identified by their UUID (for Bluetooth-connected devices) or by their vendor ID and product ID (for USB-connected devices). Then, in response to the coupling of a hardware device to a computing device, a search can be initiated automatically for user-level applications that identify the hardware device as one with which the applications are intended to be used. The automatic search can be executed over the curated
data store 132 that hosts applications, including device-specific applications, which have been approved for installation and use on a computing device. The results of the search can be presented to a user of the computing device, and the user can elect to install one or more user-level applications for use with the hardware device on the computing device. - User-level applications identified in response to an automatically initiated search that is launched in response to the coupling of a hardware device to a computing device can be displayed along with, or instead of, device driver applications that provided dedicated communication services between the hardware device and the computing device. In one implementation, for example, within the
user interface 400, user-level apps may be displayed with the “user apps”link 442 is selected, while device driver apps may be displayed when the “device driver apps” link is selected. A user may select a user-level application from the list of automatically displayed applications, and, in response, the application may be installed on the user's computing device. - To avoid overloading the user with too many suggested applications, user-level applications that are identified in response to the coupling of the hardware device to the computing device may not be displayed every time the hardware device is coupled to the computing device. For example, the suggested applications may be displayed only the first time the hardware device is coupled to the computing device, only when an indication is received that the computing device does not have installed a device driver application to provide dedicated communication services between the hardware device and the operating system of the computing device, etc.
-
FIG. 5 is a flowchart of a process for automatically identifying device-specific applications that provide dedicated communication services between a hardware device and a computing device. The steps associated withFIG. 5 may be performed automatically by a user device. In other words, the steps ofFIG. 5 may be performed as a background process without interaction with a user of the user device. As shown inFIG. 5 , a first indication that a hardware device has been coupled to a computing device is received (505). For example, in one implementation, a hardware interrupt can be received from the hardware device by the computing device. A second indication that the computing device does not have installed a device-specific application that provides dedicated communication services between the hardware device and an operating system of the computing device is received (510). For example, an operating system of the computing device may attempt to locate such a device-specific application locally, on the device itself, and upon failure to locate one, an indication of such failure may be received by the operating system. In response to receiving the first and second indications, a database of applications is automatically queried for device-specific applications that provide dedicated communication services between the hardware device and an operating system of the computing device (515). For example, the computing device may automatically generate such a query and communicate the query to the database. Then, one or more applications from the database that satisfy the query are displayed to a user (520). -
FIG. 6 is a flowchart of a process for automatically identifying device-specific applications that provide dedicated communication services between a hardware device and a computing device. As shown inFIG. 6 , device-specific applications for inclusion in a database of applications are receive, where the device-specific applications provide dedicated communication services between a hardware device connected to a computing (605). The applications are indexed in an index of applications that are available in the database (610). After the index is in place, a query is received from a computing device connected to the database via the Internet for one or more device-specific applications that provide dedicated communication services between a hardware device connected to the computing device and an operating system of the computing device, where the query is automatically sent from the computing device to the database in response to the hardware device being connected to the computing device (615). The query is executed against the index (620). In response to the query, indications of one or more applications that satisfy the query are provided to a user of the computing device (625). -
FIG. 7 is a flowchart of a process for automatically identifying user-level applications that are intended to be used with a particular hardware device when the hardware device is coupled to a computing device. As shown inFIG. 7 , an indication that a hardware device has been coupled to a computing device is received (705). In response to receiving the indication, a database of applications is automatically queried for user-level applications that are intended for use with the hardware device when the hardware device is coupled to a computing device (710). One or more applications from the database that satisfy the query are displayed to a user (715). -
FIG. 8 shows an example of ageneric computer device 800 and a genericmobile computer device 850, which may be used with the techniques described here.Computing device 800 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers.Computing device 850 is intended to represent various forms of mobile devices, such as personal digital assistants, cellular telephones, smart phones, tablets, and other similar computing devices. The components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document. Each ofcomputing device computing device 104 that is coupled to ahardware device 102. -
Computing device 800 includes aprocessor 802,memory 804, astorage device 806, a high-speed interface 808 connecting tomemory 804 and high-speed expansion ports 810, and alow speed interface 812 connecting tolow speed bus 814 andstorage device 806. Each of thecomponents processor 802 can process instructions for execution within thecomputing device 800, including instructions stored in thememory 804 or on thestorage device 806 to display graphical information for a GUI on an external input/output device, such asdisplay 816 coupled tohigh speed interface 808. In other implementations, multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory. Also,multiple computing devices 800 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system). - The
memory 804 stores information within thecomputing device 800. In one implementation, thememory 804 is a volatile memory unit or units. In another implementation, thememory 804 is a non-volatile memory unit or units. Thememory 804 may also be another form of computer-readable medium, such as a magnetic or optical disk. - The
storage device 806 is capable of providing mass storage for thecomputing device 800. In one implementation, thestorage device 806 may be or contain a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations. A computer program product can be tangibly embodied in an information carrier. The computer program product may also contain instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer- or machine-readable medium, such as thememory 804, thestorage device 806, or memory onprocessor 802. - The
high speed controller 808 manages bandwidth-intensive operations for thecomputing device 800, while thelow speed controller 812 manages lower bandwidth-intensive operations. Such allocation of functions is exemplary only. In one implementation, the high-speed controller 808 is coupled tomemory 804, display 816 (e.g., through a graphics processor or accelerator), and to high-speed expansion ports 810, which may accept various expansion cards (not shown). In the implementation, low-speed controller 812 is coupled tostorage device 806 and low-speed expansion port 814. The low-speed expansion port 814, which may include various communication ports (e.g., USB) may be coupled to one or more devices, such as akeyboard 823, apointing device 821, ascanner 817, or a printer. For example, theexpansion port 814 can be coupled toexternal devices 817 819, 821 via a wired connection (e.g., a USB connection), and the expansion port can be coupled, via anantenna 815 to anexternal device 823 via a wireless connection (e.g., a Bluetooth connection). In addition to thedevices FIG. 8 , thecomputing device 800 can be coupled to other devices, by either or both wired or wireless connections, such as hardware devices that require a device-specific application to be installed on the computing device to provide dedicated communication services between the hardware device and an operating system of the computing device. - The
computing device 800 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as astandard server 820, or multiple times in a group of such servers. It may also be implemented as part of arack server system 824. In addition, it may be implemented in a personal computer such as alaptop computer 822. Alternatively, components fromcomputing device 800 may be combined with other components in a mobile device (not shown), such asdevice 850. Each of such devices may contain one or more ofcomputing device multiple computing devices -
Computing device 850 includes aprocessor 852,memory 864, an input/output device such as adisplay 854, acommunication interface 866, and atransceiver 868, among other components. Thedevice 850 may also be provided with a storage device, such as a microdrive or other device, to provide additional storage. Each of thecomponents - The
processor 852 can execute instructions within thecomputing device 850, including instructions stored in thememory 864. The processor may be implemented as a chipset of chips that include separate and multiple analog and digital processors. The processor may provide, for example, for coordination of the other components of thedevice 850, such as control of user interfaces, applications run bydevice 850, and wireless communication bydevice 850. -
Processor 852 may communicate with a user throughcontrol interface 858 anddisplay interface 856 coupled to adisplay 854. Thedisplay 854 may be, for example, a TFT LCD (Thin-Film-Transistor Liquid Crystal Display) or an OLED (Organic Light Emitting Diode) display, or other appropriate display technology. Thedisplay interface 856 may comprise appropriate circuitry for driving thedisplay 854 to present graphical and other information to a user. Thecontrol interface 858 may receive commands from a user and convert them for submission to theprocessor 852. In addition, anexternal interface 862 may be provided in communication withprocessor 852, so as to enable near area communication ofdevice 850 with other devices.External interface 862 may provide, for example, for wired communication in some implementations, or for wireless communication in other implementations, and multiple interfaces may also be used. - The
memory 864 stores information within thecomputing device 850. Thememory 864 can be implemented as one or more of a computer-readable medium or media, a volatile memory unit or units, or a non-volatile memory unit or units.Expansion memory 874 may also be provided and connected todevice 850 throughexpansion interface 872, which may include, for example, a SIMM (Single In Line Memory Module) card interface.Such expansion memory 874 may provide extra storage space fordevice 850, or may also store applications or other information fordevice 850. Specifically,expansion memory 874 may include instructions to carry out or supplement the processes described above, and may include secure information also. Thus, for example,expansion memory 874 may be provided as a security module fordevice 850, and may be programmed with instructions that permit secure use ofdevice 850. In addition, secure applications may be provided via the SIMM cards, along with additional information, such as placing identifying information on the SIMM card in a non-hackable manner. - The memory may include, for example, flash memory and/or NVRAM memory, as discussed below. In one implementation, a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer- or machine-readable medium, such as the
memory 864,expansion memory 874, or memory onprocessor 852, that may be received, for example, overtransceiver 868 orexternal interface 862. -
Device 850 may communicate wirelessly throughcommunication interface 866, which may include digital signal processing circuitry where necessary.Communication interface 866 may provide for communications under various modes or protocols, such as GSM voice calls, SMS, EMS, or MMS messaging, CDMA, TDMA, PDC, WCDMA, CDMA2000, or GPRS, among others. Such communication may occur, for example, through radio-frequency transceiver 868. In addition, short-range communication may occur, such as using a BLUETOOTH, WiFi, or other such transceiver (not shown). In addition, GPS (Global Positioning System)receiver module 860 may provide additional navigation- and location-related wireless data todevice 850, which may be used as appropriate by applications running ondevice 850. -
Device 850 may also communicate audibly usingaudio codec 860, which may receive spoken information from a user and convert it to usable digital information.Audio codec 860 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset ofdevice 850. Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating ondevice 850. - The
computing device 850 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as acellular telephone 880. It may also be implemented as part of asmart phone 882, personal digital assistant, or other similar mobile device. - Various implementations of the systems and techniques described here can be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- These computer programs (also known as programs, software, software applications or code) include machine instructions for a programmable processor, and can be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. As used herein, the terms “machine-readable medium” and “computer-readable medium” refer to any computer program product, apparatus and/or device (e.g., magnetic discs, optical disks, memory, Programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term “machine-readable signal” refers to any signal used to provide machine instructions and/or data to a programmable processor.
- To provide for interaction with a user, the systems and techniques described here can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user can be received in any form, including acoustic, speech, or tactile input.
- The systems and techniques described here can be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back end, middleware, or front end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (“LAN”), a wide area network (“WAN”), and the Internet.
- The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- A number of implementations have been described. Nevertheless, it will be understood that various modifications may be made to the implementations described herein.
- In addition, the logic flows depicted in the figures do not require the particular order shown, or sequential order. In addition, other steps may be provided, or steps may be eliminated, from the described flows, and other components may be added to, or removed from, the described systems. Accordingly, other implementations are within the scope of the following claims.
Claims (22)
1. A computer-implemented method comprising:
receiving a first indication that a hardware device has been coupled to a computing device;
receiving a second indication that the computing device does not have installed a device-specific web browser application that provides dedicated communication services between the hardware device and an operating system of the computing device;
in response to receiving the first and second indications, automatically querying a database of web browser applications for device-specific web browser applications that can provide dedicated communication services between the hardware device and an operating system of the computing device; and
displaying to a user one or more web browser applications from the database that satisfy the query,
wherein a web browser application integrates with a web browser such that the web browser application is not executed natively on the client computing device and provides the dedicated communication services between the hardware device and the operating system of the computing device.
2. The computer-implemented method of claim 1 , further comprising:
receiving a selection of one of the one or more displayed web browser applications; and
installing the selected one of the displayed applications.
3. The computer-implemented method of claim 2 , wherein installing the selected one of the displayed web browser applications includes of adding the selected web browser application to the web browser or integrating the selected web browser application with the web browser.
4. The computer-implemented method of claim 1 , wherein receiving the first indication that a hardware device has been coupled to a computing device includes receiving information about a vendor of the device, and wherein the query is based, at least in part, on the information about the vendor.
5. The computer-implemented method of claim 1 , wherein receiving the first indication that a hardware device has been coupled to a computing device includes receiving a product ID of the device and wherein the query is based, at least in part, on the product ID.
6. The computer-implemented method of claim 1 , wherein the device is coupled to the computing device via a USB link, wherein receiving the first indication that a hardware device has been coupled to a computing device includes receiving a device descriptor that identifies the device, and wherein the query is based, at least in part, on information about the device descriptor.
7. The computer-implemented method of claim 1 , wherein the device is coupled to the computing device via a Bluetooth link, wherein receiving the first indication that a hardware device has been coupled to a computing device includes receiving a UUID that identifies the device, and wherein the query is based, at least in part, on the information about the UUID.
8. The computer-implemented method of claim 1 , wherein the database maintains an index of metadata information about the web browser applications in the database, and wherein querying the database includes querying the index with one or more search terms descriptive of the device, which are matched against the index.
9. The computer-implemented method of claim 8 , wherein terms of the index are based on terms found in manifests of web browser applications in the database.
10. A computer-implemented method comprising:
receiving device-specific web browser applications for inclusion in a database of web browser applications, wherein the device-specific web browser applications provide dedicated communication services between a hardware device connected to a computing device and an operating system of the computing device;
indexing the web browser applications in an index of web browser applications that are available in the database;
receiving a query from a computing device connected to the database via the Internet for one or more device-specific web browser applications that provide dedicated communication services between a hardware device connected to the computing device and an operating system of the computing device, wherein the query is automatically sent from the computing device to the database in response to the hardware device being connected to the computing device;
executing the query against the index; and
responsive to the query, providing indications of one or more web browser applications that satisfy the query to a user of the computing device,
wherein a web browser application integrates with a web browser such that the web browser application is not executed natively on the computing device and provides the dedicated communication services between the hardware device and the operating system of the computing device.
11. The computer-implemented method of claim 10 , wherein
providing indications of the one or more web browser applications that satisfy the query includes proving indications only of web browser applications that satisfy the query and that have been validated as being associated with an approved developer for the hardware device.
12. The computer-implemented method of claim 10 , wherein indexing the web browser applications includes indexing the web browser applications based on information contained in manifests of the web browser applications.
13. The computer-implemented method of claim 12 , wherein the information in a manifest for a web browser application that provides dedicated communication services between a hardware device connected to a computing device via a Bluetooth link and an operating system of the computing device includes a UUID for the hardware device.
14. The computer-implemented method of claim 12 , wherein the information in a manifest for a web browser application that provides dedicated communication services between a hardware device connected to a computing device via a USB link and an operating system of the computing device includes a device descriptor ID for the hardware device.
15. The computer-implemented method of claim 10 , further comprising:
receiving a selection of one of the web browser applications that satisfies the query; and
in response to receiving the selection, installing the selected web browser application to the computing device.
16. The computer-implemented method of claim 10 , wherein
the hardware device is coupled to the computing device via a USB link, and wherein the query is based, at least in part, on information about a device descriptor that identifies the hardware device.
17. The computer-implemented method of claim 10 , wherein the hardware device is coupled to the computing device via a Bluetooth link, and wherein the query is based, at least in part, on information about a UUID that identifies the hardware device.
18. A computer-implemented method comprising:
receiving an indication that a hardware device has been coupled to a computing device;
in response to receiving the indication, automatically querying a database of web browser applications for user-level web browser applications that are intended for use with the hardware device when the hardware device is coupled to a computing device; and
displaying to a user one or more web browser applications from the database that satisfy the query,
wherein a web browser application integrates with a web browser such that the web browser application is not executed natively on the computing device and provides the dedicated communication services between the hardware device and the operating system of the computing device.
19. The computer-implemented method of claim 18 , further comprising:
receiving a selection of one of the one or more displayed web browser applications; and
installing the selected one of the displayed web browser applications.
20. The computer-implemented method of claim 18 , wherein the hardware device is coupled to the computing device via a USB link, wherein receiving the indication that a hardware device has been coupled to a computing device includes receiving a device descriptor that identifies the hardware device, and wherein the query is based, at least in part, on information about the device descriptor.
21. The computer-implemented method of claim 1 , wherein a web browser application comprises at least one of a web browser extension, hypertext mark-up language content, cascading style sheets content, JavaScript content, and/or JavaScript Object Notation content.
22. The computer-implemented method of claim 1 , wherein a web browser application accesses one or more application programming interfaces provided by a web browser.
Priority Applications (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/283,640 US20150339111A1 (en) | 2014-05-21 | 2014-05-21 | Automatic discovery and installation of applications via the internet in response to coupling of hardware device to computing device |
DE202015009270.5U DE202015009270U1 (en) | 2014-05-21 | 2015-05-21 | Automatically discover and install applications over the Internet when pairing hardware devices with computing devices |
PCT/US2015/031984 WO2015179647A1 (en) | 2014-05-21 | 2015-05-21 | Automatic discovery and installation of applications via the internet in response to coupling of hardware device to computing device |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/283,640 US20150339111A1 (en) | 2014-05-21 | 2014-05-21 | Automatic discovery and installation of applications via the internet in response to coupling of hardware device to computing device |
Publications (1)
Publication Number | Publication Date |
---|---|
US20150339111A1 true US20150339111A1 (en) | 2015-11-26 |
Family
ID=53366284
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/283,640 Abandoned US20150339111A1 (en) | 2014-05-21 | 2014-05-21 | Automatic discovery and installation of applications via the internet in response to coupling of hardware device to computing device |
Country Status (3)
Country | Link |
---|---|
US (1) | US20150339111A1 (en) |
DE (1) | DE202015009270U1 (en) |
WO (1) | WO2015179647A1 (en) |
Cited By (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20160026448A1 (en) * | 2014-07-24 | 2016-01-28 | International Business Machines Corporation | Identifying Unmatched Registry Entries |
US20160094937A1 (en) * | 2014-09-26 | 2016-03-31 | At&T Intellectual Property I, L.P. | Local Peer-to-Peer Network for Providing Recommendations and Enforcing Security Policies |
US20160274883A1 (en) * | 2015-03-19 | 2016-09-22 | Hirokazu Iida | Information processing apparatus and computer-readable recording medium |
CN108647032A (en) * | 2018-03-29 | 2018-10-12 | 珠海市魅族科技有限公司 | Using loading method and device, computer installation and computer readable storage medium |
US10255042B2 (en) | 2017-03-29 | 2019-04-09 | International Business Machines Corporation | Hardware device based software generation |
CN110633103A (en) * | 2018-06-22 | 2019-12-31 | 卡西欧计算机株式会社 | Data processing system, server device, terminal device, and data processing method |
US10564934B2 (en) * | 2017-03-29 | 2020-02-18 | International Business Machines Corporation | Hardware device based software verification |
US10685294B2 (en) | 2017-03-29 | 2020-06-16 | International Business Machines Corporation | Hardware device based software selection |
US11392362B2 (en) * | 2020-07-31 | 2022-07-19 | Jpmorgan Chase Bank, N.A. | Cross platform configuration domain translation |
Families Citing this family (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10417232B2 (en) * | 2017-12-22 | 2019-09-17 | Microsoft Technology Licensing, Llc | Associating hardware to store applications |
Citations (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20040073912A1 (en) * | 2000-10-27 | 2004-04-15 | Meza Joseph R. | Automatic embedded host configuration system and method |
US20050246453A1 (en) * | 2004-04-30 | 2005-11-03 | Microsoft Corporation | Providing direct access to hardware from a virtual environment |
US20070101342A1 (en) * | 2005-10-31 | 2007-05-03 | Microsoft Corporation | Automated device driver management |
US20090064301A1 (en) * | 2007-08-31 | 2009-03-05 | Gemalto, Inc. | System and Method for Browser Based Access to Smart Cards |
US20110320818A1 (en) * | 2009-03-06 | 2011-12-29 | Gemalto Sa | System and method for providing security in browser-based access to smart cards |
US20120278796A1 (en) * | 2011-04-26 | 2012-11-01 | Microsoft Corporation | Automatically installing device drivers |
Family Cites Families (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5870610A (en) * | 1996-06-28 | 1999-02-09 | Siemens Business Communication Systems, Inc. | Autoconfigurable method and system having automated downloading |
US7164907B2 (en) * | 2004-01-13 | 2007-01-16 | Qualcomm Inc. | Automated over the air plug-in device recognition and software driver download |
WO2012154856A1 (en) * | 2011-05-09 | 2012-11-15 | Google Inc. | Identifying applications of interest based on application metadata |
-
2014
- 2014-05-21 US US14/283,640 patent/US20150339111A1/en not_active Abandoned
-
2015
- 2015-05-21 WO PCT/US2015/031984 patent/WO2015179647A1/en active Application Filing
- 2015-05-21 DE DE202015009270.5U patent/DE202015009270U1/en active Active
Patent Citations (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20040073912A1 (en) * | 2000-10-27 | 2004-04-15 | Meza Joseph R. | Automatic embedded host configuration system and method |
US7287257B2 (en) * | 2000-10-27 | 2007-10-23 | Oxford Semiconductor, Inc. | Automatic embedded host configuration system and method |
US20050246453A1 (en) * | 2004-04-30 | 2005-11-03 | Microsoft Corporation | Providing direct access to hardware from a virtual environment |
US20070101342A1 (en) * | 2005-10-31 | 2007-05-03 | Microsoft Corporation | Automated device driver management |
US20090064301A1 (en) * | 2007-08-31 | 2009-03-05 | Gemalto, Inc. | System and Method for Browser Based Access to Smart Cards |
US7748609B2 (en) * | 2007-08-31 | 2010-07-06 | Gemalto Inc. | System and method for browser based access to smart cards |
US20110320818A1 (en) * | 2009-03-06 | 2011-12-29 | Gemalto Sa | System and method for providing security in browser-based access to smart cards |
US8713644B2 (en) * | 2009-03-06 | 2014-04-29 | Gemalto Sa | System and method for providing security in browser-based access to smart cards |
US20120278796A1 (en) * | 2011-04-26 | 2012-11-01 | Microsoft Corporation | Automatically installing device drivers |
Non-Patent Citations (1)
Title |
---|
Microsoft. "Smart Card Resource Manager Service" Published February 18, 2010. Applies to versions Windows 7, Windows Server 2008 R2. Pages 1 and 2. Retrieved by the Examiner from https://technet.microsoft.com/en-us/Iibrary/ff404284( v=ws.10).aspx on April 19, 2016 * |
Cited By (16)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10387133B2 (en) | 2014-07-24 | 2019-08-20 | International Business Machines Corporation | Identifying unmatched registry entries |
US9928049B2 (en) * | 2014-07-24 | 2018-03-27 | International Business Machines Corporation | Identifying unmatched registry entries |
US20160026448A1 (en) * | 2014-07-24 | 2016-01-28 | International Business Machines Corporation | Identifying Unmatched Registry Entries |
US9485615B2 (en) * | 2014-09-26 | 2016-11-01 | At&T Intellectual Property I, L.P. | Local peer-to-peer network for providing recommendations and enforcing security policies |
US10097629B2 (en) | 2014-09-26 | 2018-10-09 | At&T Intellectual Property I, L.P. | Methods, systems, devices, and products for peer recommendations |
US20160094937A1 (en) * | 2014-09-26 | 2016-03-31 | At&T Intellectual Property I, L.P. | Local Peer-to-Peer Network for Providing Recommendations and Enforcing Security Policies |
US20160274883A1 (en) * | 2015-03-19 | 2016-09-22 | Hirokazu Iida | Information processing apparatus and computer-readable recording medium |
US10564934B2 (en) * | 2017-03-29 | 2020-02-18 | International Business Machines Corporation | Hardware device based software verification |
US10255042B2 (en) | 2017-03-29 | 2019-04-09 | International Business Machines Corporation | Hardware device based software generation |
US10613835B2 (en) | 2017-03-29 | 2020-04-07 | International Business Machines Corporation | Hardware device based software generation |
US10613836B2 (en) * | 2017-03-29 | 2020-04-07 | International Business Machines Corporation | Hardware device based software verification |
US10685294B2 (en) | 2017-03-29 | 2020-06-16 | International Business Machines Corporation | Hardware device based software selection |
CN108647032A (en) * | 2018-03-29 | 2018-10-12 | 珠海市魅族科技有限公司 | Using loading method and device, computer installation and computer readable storage medium |
CN110633103A (en) * | 2018-06-22 | 2019-12-31 | 卡西欧计算机株式会社 | Data processing system, server device, terminal device, and data processing method |
US11392362B2 (en) * | 2020-07-31 | 2022-07-19 | Jpmorgan Chase Bank, N.A. | Cross platform configuration domain translation |
US20220334817A1 (en) * | 2020-07-31 | 2022-10-20 | Jpmorgan Chase Bank, N.A. | Cross platform configuration domain translation |
Also Published As
Publication number | Publication date |
---|---|
WO2015179647A1 (en) | 2015-11-26 |
DE202015009270U1 (en) | 2017-01-20 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US20150339111A1 (en) | Automatic discovery and installation of applications via the internet in response to coupling of hardware device to computing device | |
US10740813B2 (en) | Multiple application versions | |
US10248401B1 (en) | Multiplatform and multichannel distribution of web applications across devices | |
US11750683B2 (en) | Computer application promotion | |
US9607332B1 (en) | Embedded web application gallery | |
JP2019508822A (en) | User interface method and apparatus | |
US20150205489A1 (en) | Browser interface for installed applications | |
US20120265607A1 (en) | Click-to-reveal content | |
US20150186533A1 (en) | Application Search Using Device Capabilities | |
US20130346965A1 (en) | Identification of host-compatible downloadable applications | |
KR101960873B1 (en) | Detecting digital content visibility | |
US11586772B2 (en) | Method and device for displaying information | |
US20150161206A1 (en) | Filtering search results using smart tags | |
CN111936970B (en) | Cross-application feature linking and educational messaging | |
WO2019095928A1 (en) | Providing enriched e-reading experience in multi-display environments | |
US20150242512A1 (en) | Systems and Methods for Ranking Search Results Based on User Identification of Items of Interest | |
US20150058869A1 (en) | Reverse launch protocol | |
US9633083B2 (en) | Organizing search results using smart tag inferences | |
KR20220165215A (en) | Operating method for electronic apparatus for providing store information and electronic apparatus supporting thereof |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:KEDIA, PRANAV KUMAR;REEL/FRAME:036504/0246Effective date: 20140527 |
|
STCB | Information on status: application discontinuation |
Free format text: ABANDONED -- FAILURE TO RESPOND TO AN OFFICE ACTION |