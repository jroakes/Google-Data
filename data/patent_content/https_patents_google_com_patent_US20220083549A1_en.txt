US20220083549A1 - Generating query answers from a user's history - Google Patents
Generating query answers from a user's history Download PDFInfo
- Publication number
- US20220083549A1 US20220083549A1 US17/537,136 US202117537136A US2022083549A1 US 20220083549 A1 US20220083549 A1 US 20220083549A1 US 202117537136 A US202117537136 A US 202117537136A US 2022083549 A1 US2022083549 A1 US 2022083549A1
- Authority
- US
- United States
- Prior art keywords
- user
- query
- criterion
- resources
- history
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000000034 method Methods 0.000 claims description 19
- 230000000699 topical effect Effects 0.000 claims 9
- 230000004044 response Effects 0.000 abstract description 19
- 238000012545 processing Methods 0.000 description 34
- 238000004590 computer program Methods 0.000 description 13
- 230000015654 memory Effects 0.000 description 12
- 230000008569 process Effects 0.000 description 6
- 238000004891 communication Methods 0.000 description 5
- 239000000284 extract Substances 0.000 description 5
- 238000013518 transcription Methods 0.000 description 5
- 230000035897 transcription Effects 0.000 description 5
- 238000003058 natural language processing Methods 0.000 description 4
- 238000010586 diagram Methods 0.000 description 3
- 230000003993 interaction Effects 0.000 description 3
- 230000000644 propagated effect Effects 0.000 description 3
- 230000003287 optical effect Effects 0.000 description 2
- 238000009877 rendering Methods 0.000 description 2
- 238000013515 script Methods 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 230000005236 sound signal Effects 0.000 description 2
- 235000002568 Capsicum frutescens Nutrition 0.000 description 1
- 241001672694 Citrus reticulata Species 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 238000001514 detection method Methods 0.000 description 1
- 230000006870 function Effects 0.000 description 1
- 230000002452 interceptive effect Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2453—Query optimisation
- G06F16/24534—Query rewriting; Transformation
- G06F16/24539—Query rewriting; Transformation using cached or materialised query results
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/955—Retrieval from the web using information identifiers, e.g. uniform resource locators [URL]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/242—Query formulation
- G06F16/243—Natural language query formulation
Definitions
- This specification generally relates to generating answers to queries by accessing a user's history.
- Search systems may generate responses to queries by providing search results from a database. Some search systems may also store a search history for a given user. However, conventional search systems may lack the ability to allow users to locate information that they have previously accessed using a natural language query.
- a search system obtains search results from information previously accessed by a user.
- One aspect of the subject matter described in this specification may be embodied in methods that include the actions of receiving, at one or more servers, a natural language query from a client device associated with a user.
- the actions also include classifying, at the one or more servers, the natural language query as a query that seeks information previously accessed by the user.
- the actions include obtaining, at the one or more servers, a response to the natural language query from one or more collections of documents, wherein each document in the one or more collections of documents was previously accessed by the user.
- Further actions include generating, at the one or more servers, search results based on the response, and communicating, from the one or more servers, the search results to the client device.
- the natural language query may be audio speech data encoding a natural language query from a client device associated with a user.
- classifying the natural language query as a query that seeks information previously accessed by the user may include the actions of comparing one or more portions of the natural language query to one or more phrases, the one or more phrases being identified as seeking previously accessed information; and based on the comparison, determining that the natural language query seeks information previously accessed by the user.
- Some implementations involve obtaining a response to the natural language query from a browser history of the user and/or an email account of the user.
- the actions include determining, at the server, one or more filters based on the natural language query.
- the documents obtained in response to the natural language query may satisfy the one or more filters.
- the one or more filters may include a filter identifying a user device that was previously used to access information based on the natural language query. In this case, each document in the set of documents obtained in response to the natural language query may have been previously accessed from the identified user device.
- Other filters may include: (i) a topic; (ii) a date and/or time; (iii) a source; (iv) a device of the user; (v) a sender of the information; and/or (vi) a location where the information was accessed.
- one or more documents in the set of documents satisfying the one or more filters may be a version of the respective document that was previously accessed by the user.
- the search results may identify the one or more versions of the documents that were previously accessed by the user.
- Implementations described in this specification may realize one or more of the following advantages.
- the system allows users to retrieve previously accessed information in a natural and easy manner.
- FIG. 1 is a diagram of an example system that generates search results based on information previously accessed by a user.
- FIG. 2 is another diagram of an example system that generates search results based on information previously accessed by a user.
- FIG. 3 is a diagram of an example query processing engine.
- FIG. 4 is an example illustration of a set of search results page that includes search results based on information previously accessed by a user.
- FIG. 5 is a flow chart of an example process for generating search results based on information previously accessed by a user.
- a search system may provide an answer by accessing a database.
- a search system may allow a user to formulate a query as a natural language query, e.g., “I'm looking for the chess story that I read last week”.
- the search system may determine that the likely intent of the query is to seek information, e.g., a web page, email, document, image, or video, which was previously accessed by the user.
- the search system may also identify various filters from the query.
- the filters may include: (i) a topic (e.g., “turkey recipes”); (ii) a date and/or time (e.g., “last week”); (iii) a source (e.g., “WhiteHouse.gov”); (iv) a device of the user (e.g., mobile device, desktop, or tablet); (v) a sender of the information (e.g., “from grandma”); and/or (vi) a location where the information was accessed (e.g., “at home,” “at work”).
- a topic e.g., “turkey recipes”
- a date and/or time e.g., “last week”
- a source e.g., “WhiteHouse.gov”
- a sender of the information e.g., “from grandma”
- a location where the information was accessed e.g., “at home,” “at work”.
- the search system After classifying the query as a history-seeking query and, optionally, identifying any filters from the query, the search system searches collections of documents that were previously accessed by the user to generate a response to the query. For example, the search system may search the user's browser history or email account. In some implementations, users may be provided with an option to use features that collect information on documents that were previously accessed by the user. In addition, certain data may be anonymized in one or more ways before it is stored or used, so that personally identifiable information is removed. For example, a user's identity may be anonymized. Once responsive documents have been retrieved from the appropriate collections, the search system can rank the documents and communicate the ranked search results back to the user.
- FIG. 1 shows an example system 100 that generates search results based on information previously accessed by a user.
- the system 100 includes a client device 110 , a query processing engine 120 , a search engine 140 , and a scoring engine 150 .
- Query processing engine 120 , search engine 140 , and scoring engine 150 may be computing devices that take the form of a number of different devices, for example a standard server, a group of such servers, or a rack server system.
- query processing engine 120 , search engine 140 , and scoring engine 150 may be implemented in a personal computer, for example a laptop computer.
- a user 102 initiates a query 105 using the client device 110 .
- the user 102 may format the query 105 as a natural language question.
- the client device 110 may include one or more processing devices, and may be, or include, a mobile telephone (e.g., a smartphone), a laptop computer, a handheld computer, a tablet computer, a network appliance, a camera, a media player, a wearable computer, a navigation device, an email device, a game console, an interactive television, or a combination of any two or more of these data processing devices or other data processing devices.
- the user 102 may interact with the client device 110 using a voice-based dialog system. For example, the user 102 may say “I'm looking for a turkey recipe that I read about on my phone” into a microphone of the client device 110 . The client device 110 may then perform speech recognition to convert the utterance into a transcription, and then transmit the transcription to the query processing engine 120 . Alternatively, the client device 110 may transmit audio speech data encoding the utterance.
- a voice-based dialog system For example, the user 102 may say “I'm looking for a turkey recipe that I read about on my phone” into a microphone of the client device 110 .
- the client device 110 may then perform speech recognition to convert the utterance into a transcription, and then transmit the transcription to the query processing engine 120 .
- the client device 110 may transmit audio speech data encoding the utterance.
- the query processing engine 120 receives the query 105 from the client device 110 . If the query 105 is encoded as audio speech data, the query processing engine 120 may convert the audio speech data into a transcription. As described in more detail with reference to FIG. 3 below, the query processing engine 120 then translates the original query into a format suitable for querying a database. For example, the query processing engine 120 may convert the question “I'm looking for a turkey recipe that I read about on my phone” into a formatted query 125 , which is identified as a history seeking question, (e.g., designated by “user_history”) that includes a topic filter (e.g., “turkey recipe”) and a device filter (e.g., “Device 1 ”).
- a history seeking question e.g., designated by “user_history”
- a topic filter e.g., “turkey recipe”
- device filter e.g., “Device 1 ”.
- the resulting formatted query 125 may be, for example, “ ⁇ user_history: ⁇ turkey recipe, Device 1 ⁇ ”.
- the query processing engine 120 may include a natural language processing (NLP) engine as described below.
- NLP natural language processing
- An NLP engine receives a question in a natural language of a user and then parses and translates the question into a query expression language (e.g., structured query language (SQL) or Google query language (GQL)).
- the natural language may be, for example, English, Spanish, French, Japanese, Mandarin, or any other human language.
- the query processing engine 120 then sends the formatted query 125 to the search engine 140 .
- the search engine 140 receives the formatted query 125 and obtains documents responsive to the query based on any included filters. Due to the imperfect nature of human memory, it may be advantageous to apply imprecise, fuzzy searches that seek information previously accessed by a user. In some implementations, the search engine 240 may therefore apply aggressive synonyms, entities, or fuzzy time ranges to expand the filters. In particular, the search engine 140 may apply synonyms more aggressively than in a typical search because the corpus of documents is limited to documents that were previously accessed by the user 102 .
- the search engine 140 may include one or more processors, an operating system and one or more computer memories.
- the search engine 140 may include modules, stored in memory or an external storage device and loaded into memory that enable the search engine 140 to receive and respond to queries.
- the search engine 140 may be responsible for routing the query to search the index 142 and, in some implementations, other data sources, such as a corpus of documents from the Internet or an Intranet, in response to a query.
- the search engine 140 may receive a query from a client, such as query processing engine 120 , and send the query to an index cluster that accesses index 142 and to other indexing clusters that store indexes for searching other sources.
- search engine 140 may have a module that compiles the results from all sources.
- search engine 140 may only send queries to an index cluster.
- the index 142 may reference one or more collections of documents.
- the index 142 may access a browser history collection 144 and an email collection 146 .
- Each of these collections may include documents that were previously accessed by a given user (e.g., user 102 ).
- the browser history collection 144 may include a list of web pages that were accessed by the user 102
- the email collection 146 may include emails that were accessed by the user 102 .
- the search engine 140 may obtain documents from the index 142 based on the filters from the formatted query 125 .
- the search engine 140 may retrieve only documents from the collections 144 , 146 that satisfy these filters, i.e., documents that the user 102 accessed on his client device 110 that relate to a “turkey recipe.” Once the search engine 140 obtains documents in response to a query, it provides the documents to the scoring engine 150 .
- a device filter e.g., “Device 1 ”
- a topic filter e.g., “turkey recipe”
- the scoring engine 150 ranks the documents 148 from the search engine 140 and returns search results 155 to the client device 110 .
- the scoring engine 150 may include one or more processors, an operating system and one or more computer memories.
- the scoring engine 150 may include modules, stored in memory or an external storage device and loaded into memory that enable the search engine 150 to receive and rank documents.
- the results 155 may be included in a search results page 160 that includes the search results 165 .
- the search results include a “Turkey chili Recipe” web page that the user 102 accessed 2 days ago, a “Fried Turkey Recipe” web page that the user 102 accessed 7 days ago, and a “Grandma's Turkey meatballs” email that the user 102 accessed 3 months ago.
- the search results page 160 includes a set of icons 170 that may allow the user to filter the search results, for example, to emails, web pages, video, etc., and a search box 175 showing the original search query, i.e., “I'm looking for a turkey recipe that I read on my phone.”
- the search results page 160 may be rendered by the client device 110 . While shown in FIG. 1 as being provided in search results 160 , the search results could alternatively be transmitted as a transcription that allows the client device 110 to generate speech, or as an audio signal encoding the results for rendering at the client device.
- FIG. 2 shows another example system 200 that generates search results based on information previously accessed by a user.
- the system 200 includes a client device 210 , a query processing engine 220 , a search engine 240 , and a scoring engine 250 .
- a client device 210 initiates a query 205 that may be formatted as a natural language question. For example, a user may enter the query “I'm looking for a chess story that I read last week” into a web browser at the client device 210 . In some implementations, the user may interact with the client device 210 using a voice-based dialog system.
- the query processing engine 220 receives the query 205 from the client device 210 . If the query 205 is encoded as audio speech data, the query processing engine 220 may transcribe the audio speech data. As described in more detail with reference to FIG. 3 below, the query processing engine 220 then translates the original query into a format suitable for querying a database. For example, the query processing engine 220 may convert the question, “I'm looking for a chess story that I read last week,” into a formatted query 225 , which is identified as a history seeking question that includes a topic filter (e.g., “chess story”) and a date filter (e.g., “last week”). The resulting formatted query 225 may be, for example, “ ⁇ user_history: ⁇ chess story, last week ⁇ ”. The query processing engine 220 then sends the formatted query 225 to the search engine 240 .
- a topic filter e.g., “chess story”
- a date filter e.g., “last week
- the search engine 240 receives the formatted query 225 and obtains documents responsive to the query using the index 242 as described above.
- the index 242 may reference one or more collections of documents.
- the index 242 may access a browser history collection 244 .
- This collection may include documents that were previously accessed by a given user, e.g., the user of client device 210 .
- the browser history collection 244 may include a list of web pages that were accessed by the user.
- the search engine 240 may obtain documents from the index 242 based on the filters from the formatted query 225 .
- the search engine 240 may retrieve only documents from the collection 244 that satisfy these filters, i.e., documents that the user accessed in the previous week that relate to a “chess story.”
- the search engine 240 may apply fuzzy time ranges to the “last week” filter to account for inaccuracies in human memory.
- “last week” literally refers to the seven calendar days of the previous week, the search engine 240 may search for documents over a wider range, e.g., anytime in the past two weeks.
- the search engine 240 obtains documents in response to a query, it provides the documents to the scoring engine 250 .
- the scoring engine 250 ranks the documents 248 from the search engine 240 and returns search results 255 to the client device 210 .
- the results 255 may be included in a search results page 260 that includes the search results 265 .
- the search results include a “Bobby Fischer Story” web page that the user accessed 4 days ago, a “Kasparov Loses to Computer” web page that the user accessed 7 days ago, and a “World Chess Championship” web page that the user accessed 10 days ago.
- the search results may provide access to a web page as it appeared when it was viewed by the user.
- the search result “World Chess Championship” includes a “View Cached Result” link. This link may direct the client device 210 to a version of the “World Chess Championship” web page that was cached on or about 10 days ago.
- the cached version of the web page may be stored in association with a user's browser history. For example, when a user views a web page, the viewed page may be stored and linked to the user's browser history. This link could then be provided in the search results.
- a search system may periodically store versions of web pages, and a link to the stored version of the web page nearest in time to the last access date of the user could be provided.
- the search results page 260 includes a set of icons 270 that may allow the user to filter the search results, for example, to emails, web pages, video, etc., and a search box 275 showing the original search query, i.e., “I'm looking for a chess story that I read last week.”
- the search results page 260 may be rendered by the client device 210 . While shown in FIG. 2 as being provided in search results 260 , the search results could alternatively be transmitted as a transcription that allows the client device 210 to generate speech, or as an audio signal encoding the results for rendering at the client device.
- FIG. 3 shows an example query processing engine 300 .
- Query processing engine 300 may correspond to, for instance, some or all of the functional components of query processing engine 120 , 220 shown in FIGS. 1 and 2 .
- Query processing engine 300 may include an NLP engine 304 , which comprises a history query classification module 308 , a tokenizer module 310 , a filter identification module 312 , and a query generation module 316 . Any, or all, of modules 308 , 310 , 312 , and 316 may be implemented by one or more memory devices and/or one or more processors. Furthermore, multiple modules may be associated with the same memory device and/or processor.
- History query classification module 308 may receive a question from, for example, a user device—e.g., client device 110 , 210 —and may classify the question as a history seeking question. In other words, history query classification module 308 may determine that the likely intent of the question is to obtain information previously viewed by the user. To classify a request as a history seeking question, history query classification module 308 may determine whether the question includes one or more phrases from a list of phrases that are associated with history seeking questions. The list of terms may include, for example, “I'm looking for,” “I read,” “I saw,” “I viewed,” “I heard,” or “I remember.”
- history query classification module 308 may determine whether one or more phrases in the question are an exact match of one or more terms in the list of phrases associated with history seeking questions. For example, assume that the list of phrases includes the term “I saw,” and that the question also includes the term “I saw.” In this example, history query classification module 308 may classify the question as a history seeking question based on identifying that the question includes a phrase that is an exact match of a phrase from the list of phrases that are associated with history seeking questions.
- history query classification module 308 may determine whether one or more phrases in the question are similar, beyond a similarity threshold, to one or more phrases in the list of phrases associated with history seeking questions. When determining a similarity of the one or more phrases of the question to the one or more phrases in the list of phrases associated with history seeking questions, history query classification module 308 may use one or more of a variety of similarity detection techniques. For example, history query classification module 308 may determine an edit distance, a hamming distance, a semantic similarity, and/or may use any other technique for determining a similarity of the one or more phrases of the question to the one or more phrases in the list of phrases associated with history seeking questions.
- history query classification module 308 may classify the question as a history seeking question based on identifying that the question includes a term that is similar to a term from the list of phrases that are associated with history seeking questions, even though the term is not an exact match of a term from the list of phrases that are associated with history seeking questions.
- history query classification module 308 may use any technique to determine whether a question is classified as a history seeking question. For example, history query classification module 308 may receive information that identifies a question is classified as a history seeking questions from, e.g., one or more devices that analyze logs of questions and/or answers provided in response to questions to identify history seeking questions. As another example, history query classification module 308 may use a semantic analysis technique to determine whether a question is classified as a history seeking question.
- History query classification module 308 may output an indication of whether a particular question is classified as a history seeking question to tokenizer module 310 . Additionally, or alternatively, history query classification module 308 may output information regarding whether questions are classified as history seeking questions to one or more devices that store logs.
- Tokenizer module 310 may receive questions, such as questions that were classified as history seeking questions, and extract n-grams from the received questions. For example, assume that tokenizer module 310 receives the history seeking question “I'm looking for a turkey recipe that I read about on my phone?” Further assume that tokenizer module 310 extracts tri-grams from received questions. In this example, tokenizer module 310 may extract the following n-grams: “I'm looking for,” “a turkey recipe,” “that I read,” and “on my phone.”
- tokenizer module 310 may exclude insignificant terms, such as stop words—e.g., “and,” “or,” “the,” “of,” “is,” “was,” and “were”—when extracting n-grams from questions.
- tokenizer module 310 may extract n-grams with varying values of N from a particular question.
- tokenizer module 310 may identify stems of words, and replace words that are based on the stems of the words with the stems of the words.
- tokenizer module 310 may exclude phrases associated with history seeking questions when extracting n-grams from a particular question. For example, assume that the phrases “I'm looking for” and “that I read” are associated with history seeking questions. In some such implementations, and referring to the above example question, tokenizer module 310 may extract the n-grams “a turkey recipe,” and “on my phone.”
- Filter identification module 312 may receive n-grams extracted from a question, e.g., from tokenizer module 310 , and may identify, based on the n-grams, one or more filters associated with the question.
- a filter as described herein refers to a search criterion that may be applied to a query.
- Filters may include, for example: (i) a topic (e.g., “turkey recipes”); (ii) a date and/or time (e.g., “last week”); (iii) a source (e.g., “WhiteHouse.gov”); (iv) a device of the user (e.g., mobile device, desktop, or tablet); (v) a sender of the information (e.g., “from grandma”); and/or (vi) a location where the information was accessed (e.g., “at home,” “at work”).
- filter identification module 312 may compare n-grams, extracted from the question, to information that associates n-grams with filters.
- filter identification module 312 receives “a turkey recipe,” and “on my phone.” Further assume that filter repository 314 includes information indicating that the n-gram “a turkey recipe” is associated with a topic filter “turkey recipe,” and that the n-gram “on my phone” is associated with a device filter identifying the user's device (e.g., “Device 1 ”). Filter identification module 312 may then determine that the question is associated with a topic filter “turkey recipe,” and a device filter “Device 1 .”
- filter identification module 312 may determine whether one or more n-grams extracted from a question are an exact match of one or more n-grams included in information associating n-grams with filters. In some implementations, filter identification module 312 may determine whether one or more n-grams extracted from a question are similar, beyond a similarity threshold, to one or more n-grams included in information associating n-grams with filters. Some examples of techniques that filter identification module 312 may use in identifying similar n-grams are described above with respect to history query classification module 308 .
- Filter identification module 312 may output information associating the question with the particular filter to one or more locations. For example, filter identification module 312 may output the information to query generation module 316 and/or to one or more components that store logs regarding filters associated with questions, and/or to any other component.
- filter identification module 312 may identify that a particular question is not associated with a particular filter. For example, filter identification module 312 may fail to identify any n-grams, extracted from the particular question, that are identical or similar to n-grams that are associated with filters. In some implementations, when this occurs, the filter identification module 312 may output information indicating that the search should retrieve all information previously accessed by the user (e.g., the user's complete browser history). Alternatively or in addition, filter identification module 312 may output information indicating that the question is not associated with a filter.
- a particular question may be associated with multiple filters.
- filter identification module 312 may output information that indicates that the question is associated with the multiple filters.
- filter identification module 312 may select fewer than all of the multiple filters—e.g., one filter 1 'to associate with the question, based on any criteria. For example, filter identification module 312 may compare a relevance of the filter to one or more terms of the question, and may select a most relevant filter. In some implementations, filter identification module 312 may forego selecting a filter to associate with the question. That is, in some such implementations, when a question is associated with multiple filters, filter identification module 312 may output information indicating that the question is not associated with a particular filter.
- the information, outputted by filter identification module 312 may be used in a variety of ways.
- the information outputted by filter identification module 312 may include a request to query generation module 316 to formulate a search query based on the filter or filters associated with a particular question.
- filter identification module 312 associates the filters “a turkey recipe” and “on my phone” with the question “I'm looking for a turkey recipe I read on my phone.”
- Filter identification module 312 may output a request to query generation module 316 to generate a search based on the filters “turkey recipe” and “Device 1 .”
- the query generation module 316 generates a formatted query 318 based on the output from the filter identification module 312 .
- the formatted query 318 may be, for example, an SQL or GQL query.
- the query generation module 316 transmits the query to a search cluster, e.g., search engine 140 , 240 from FIGS. 1 and 2 , which then performs a search as described above.
- FIG. 4 shows a set of search results page 400 that includes search results based on information previously accessed by a user.
- the search results previously accessed by the user may be obtained as described above.
- the search results page 400 may be provided in response to a natural language query 402 (e.g., “I'm looking for the page about Science Friday I saw at work”), which represents a history seeking question with a topic filter (e.g., “Science Friday”) and a location filter (e.g., “at work”).
- the search results page 400 includes a set of command buttons 404 that may allow the user to filter the search results, for example, to web pages, images, email, video, etc.
- the search results previously accessed by the user are identified by a caption 406 , e.g., “Your history related to Science Friday—only you can see these results.
- the results include a “Science Friday” web page 408 that was accessed 18 hours ago, and an “NPR Science Friday Podcast” web page 410 that was accessed 6 days ago. As specified by the filters, these results identify web pages relating to “Science Friday” that were accessed by the user at a location identified as “at work,” which may be, for example, the user's place of business.
- the search results also include a link 412 that provides access to other results from the user's browser history.
- the search results page may also include documents that are relevant to the user's query, but were not previously accessed by the user.
- the search results page 400 includes a link to a “Science Friday” web page 414 that was not previously accessed by the user, but is still relevant to the user's query.
- FIG. 5 shows an example process 500 for generating search results based on information previously accessed by a user.
- the process 500 will be described as being performed by a server.
- This server may include one or more servers that perform the functions of the query processing engine 120 , 220 , the search engine 140 , 240 , and/or the scoring engine 150 , 250 as described with reference to FIGS. 1-3 above.
- a server receives a natural language query from a client device associated with a user.
- the server may receive audio speech data encoding a natural language query from a user, or the server may receive text representing the natural language query.
- the server classifies the natural language query as a query that seeks information previously accessed by the user. For example, as described above with reference to FIG. 3 , the server may compare portions of the natural language query, e.g., n-grams extracted from the natural language query, to one or more phrases, where the one or more phrases have been identified as seeking previously accessed information. The comparison may be based on an exact match between the portions of the natural language query and the phrases and/or a similarity between the portions of the natural language query and the phrases that exceeds a predetermined threshold. Based this comparison, the server may determine that the natural language query seeks information previously accessed by the user.
- portions of the natural language query e.g., n-grams extracted from the natural language query
- the server determines one or more filters based on the natural language query.
- the one or more filters may include, for example: (i) a topic (e.g., “turkey recipes”); (ii) a date and/or time (e.g., “last week”); (iii) a source (e.g., “WhiteHouse.gov”); (iv) a device of the user (e.g., mobile device, desktop, or tablet); (v) a sender of the information (e.g., “from grandma”); and/or (vi) a location where the information was accessed (e.g., “at home,” “at work”).
- a topic e.g., “turkey recipes”
- a date and/or time e.g., “last week”
- a source e.g., “WhiteHouse.gov”
- a sender of the information e.g., “from grandma”
- a location where the information was accessed e
- the server obtains a response to the natural language query from one or more collections of documents in step 506 .
- each document in the one or more collections of documents was previously accessed by the user.
- the server may retrieve documents from a user's browser history and/or email account.
- the retrieved documents may also satisfy one or more of the filters. For example, if a filter identifies a topic (e.g., a “turkey recipe”), then the retrieved documents may include documents relating to that topic. If a filter identifies a date and/or time (e.g., last week), the retrieved documents may include documents that were previously accessed on or around the identified date and/or time. If a filter identifies a source (e.g., “WhiteHouse.gov”) from which the documents were accessed, the retrieved documents may include documents that were previously accessed from that source.
- a source e.g., “WhiteHouse.gov
- the retrieved documents may include documents that were previously accessed from that user device. If a filter identifies a sender of the information (e.g., “from grandma”), the retrieved documents may include documents that were sent from the identified sender. If a filter identifies a location (e.g., at work) from which the information was accessed, the retrieved documents may include documents that were previously accessed at that location.
- a sender of the information e.g., “from grandma”
- the retrieved documents may include documents that were sent from the identified sender.
- a location e.g., at work
- some documents in the retrieved documents may be versions that were previously accessed by the user.
- the retrieved documents may include versions of the documents that were cached on or around the time they were previously accessed by the user.
- step 508 the server generates search results based on the response (e.g., a set of responsive documents).
- the search results may identify, and optionally provide a link to, the previous versions of the documents.
- step 510 the server communicates the search results to the client device.
- the users may be provided with an opportunity to opt in/out of programs or features that may collect personal information, e.g., information about a user's preferences or a user's current location.
- personal information e.g., information about a user's preferences or a user's current location.
- certain data may be anonymized in one or more ways before it is stored or used, so that personally identifiable information is removed. For example, a user's identity may be anonymized.
- Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer storage medium for execution by, or to control the operation of, data processing apparatus.
- the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- a computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them.
- a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal.
- the computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
- the operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
- the term “data processing apparatus” encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing
- the apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- the apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them.
- the apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
- a computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment.
- a computer program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code).
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- the processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output.
- the processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer.
- a processor will receive instructions and data from a read-only memory or a random access memory or both.
- the essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), to name just a few.
- Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network.
- Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
- LAN local area network
- WAN wide area network
- inter-network e.g., the Internet
- peer-to-peer networks e.g., ad hoc peer-to-peer networks.
- a system of one or more computers can be configured to perform particular operations or actions by virtue of having software, firmware, hardware, or a combination of them installed on the system that in operation causes or cause the system to perform the actions.
- One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that, when executed by data processing apparatus, cause the apparatus to perform the actions.
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- a server transmits data (e.g., an HTML page) to a client device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device).
- client device e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device.
- Data generated at the client device e.g., a result of the user interaction
Abstract
Description
- This specification generally relates to generating answers to queries by accessing a user's history.
- Search systems may generate responses to queries by providing search results from a database. Some search systems may also store a search history for a given user. However, conventional search systems may lack the ability to allow users to locate information that they have previously accessed using a natural language query.
- When a user seeks information that the user has previously accessed, for example via voice to a dialog system, it may be desirable to permit the user to formulate the query using natural language. Such natural language queries may provide a natural, easy way for users to retrieve information they have previously seen. Thus, according to one general aspect of the subject matter described in this specification, in response to a natural language query, a search system obtains search results from information previously accessed by a user.
- One aspect of the subject matter described in this specification may be embodied in methods that include the actions of receiving, at one or more servers, a natural language query from a client device associated with a user. The actions also include classifying, at the one or more servers, the natural language query as a query that seeks information previously accessed by the user. Then, the actions include obtaining, at the one or more servers, a response to the natural language query from one or more collections of documents, wherein each document in the one or more collections of documents was previously accessed by the user. Further actions include generating, at the one or more servers, search results based on the response, and communicating, from the one or more servers, the search results to the client device.
- In some implementations, the natural language query may be audio speech data encoding a natural language query from a client device associated with a user.
- In some implementations, classifying the natural language query as a query that seeks information previously accessed by the user may include the actions of comparing one or more portions of the natural language query to one or more phrases, the one or more phrases being identified as seeking previously accessed information; and based on the comparison, determining that the natural language query seeks information previously accessed by the user.
- Some implementations involve obtaining a response to the natural language query from a browser history of the user and/or an email account of the user.
- In some implementations, the actions include determining, at the server, one or more filters based on the natural language query. In such implementations, the documents obtained in response to the natural language query may satisfy the one or more filters. For example, the one or more filters may include a filter identifying a user device that was previously used to access information based on the natural language query. In this case, each document in the set of documents obtained in response to the natural language query may have been previously accessed from the identified user device. Other filters may include: (i) a topic; (ii) a date and/or time; (iii) a source; (iv) a device of the user; (v) a sender of the information; and/or (vi) a location where the information was accessed.
- In some implementations, one or more documents in the set of documents satisfying the one or more filters may be a version of the respective document that was previously accessed by the user. In such implementations, the search results may identify the one or more versions of the documents that were previously accessed by the user.
- Other embodiments of these aspects include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on non-transitory computer-readable storage media.
- Implementations described in this specification may realize one or more of the following advantages. In some implementations, the system allows users to retrieve previously accessed information in a natural and easy manner.
- The details of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
-
FIG. 1 is a diagram of an example system that generates search results based on information previously accessed by a user. -
FIG. 2 is another diagram of an example system that generates search results based on information previously accessed by a user. -
FIG. 3 is a diagram of an example query processing engine. -
FIG. 4 is an example illustration of a set of search results page that includes search results based on information previously accessed by a user. -
FIG. 5 is a flow chart of an example process for generating search results based on information previously accessed by a user. - When a user asks a question, a search system may provide an answer by accessing a database. In some instances, a search system may allow a user to formulate a query as a natural language query, e.g., “I'm looking for the chess story that I read last week”. Upon receiving a natural language query, the search system may determine that the likely intent of the query is to seek information, e.g., a web page, email, document, image, or video, which was previously accessed by the user. The search system may also identify various filters from the query. For example, the filters may include: (i) a topic (e.g., “turkey recipes”); (ii) a date and/or time (e.g., “last week”); (iii) a source (e.g., “WhiteHouse.gov”); (iv) a device of the user (e.g., mobile device, desktop, or tablet); (v) a sender of the information (e.g., “from grandma”); and/or (vi) a location where the information was accessed (e.g., “at home,” “at work”).
- After classifying the query as a history-seeking query and, optionally, identifying any filters from the query, the search system searches collections of documents that were previously accessed by the user to generate a response to the query. For example, the search system may search the user's browser history or email account. In some implementations, users may be provided with an option to use features that collect information on documents that were previously accessed by the user. In addition, certain data may be anonymized in one or more ways before it is stored or used, so that personally identifiable information is removed. For example, a user's identity may be anonymized. Once responsive documents have been retrieved from the appropriate collections, the search system can rank the documents and communicate the ranked search results back to the user.
-
FIG. 1 shows anexample system 100 that generates search results based on information previously accessed by a user. Thesystem 100 includes aclient device 110, aquery processing engine 120, asearch engine 140, and ascoring engine 150.Query processing engine 120,search engine 140, andscoring engine 150 may be computing devices that take the form of a number of different devices, for example a standard server, a group of such servers, or a rack server system. In addition,query processing engine 120,search engine 140, andscoring engine 150 may be implemented in a personal computer, for example a laptop computer. - As shown in
FIG. 1 , auser 102 initiates aquery 105 using theclient device 110. Theuser 102 may format thequery 105 as a natural language question. Theclient device 110 may include one or more processing devices, and may be, or include, a mobile telephone (e.g., a smartphone), a laptop computer, a handheld computer, a tablet computer, a network appliance, a camera, a media player, a wearable computer, a navigation device, an email device, a game console, an interactive television, or a combination of any two or more of these data processing devices or other data processing devices. - In some implementations, the
user 102 may interact with theclient device 110 using a voice-based dialog system. For example, theuser 102 may say “I'm looking for a turkey recipe that I read about on my phone” into a microphone of theclient device 110. Theclient device 110 may then perform speech recognition to convert the utterance into a transcription, and then transmit the transcription to thequery processing engine 120. Alternatively, theclient device 110 may transmit audio speech data encoding the utterance. - The
query processing engine 120 receives thequery 105 from theclient device 110. If thequery 105 is encoded as audio speech data, thequery processing engine 120 may convert the audio speech data into a transcription. As described in more detail with reference toFIG. 3 below, thequery processing engine 120 then translates the original query into a format suitable for querying a database. For example, thequery processing engine 120 may convert the question “I'm looking for a turkey recipe that I read about on my phone” into a formattedquery 125, which is identified as a history seeking question, (e.g., designated by “user_history”) that includes a topic filter (e.g., “turkey recipe”) and a device filter (e.g., “Device 1”). The resulting formattedquery 125 may be, for example, “{user_history: {turkey recipe, Device 1}}”. Thequery processing engine 120 may include a natural language processing (NLP) engine as described below. An NLP engine receives a question in a natural language of a user and then parses and translates the question into a query expression language (e.g., structured query language (SQL) or Google query language (GQL)). The natural language may be, for example, English, Spanish, French, Japanese, Mandarin, or any other human language. Thequery processing engine 120 then sends the formattedquery 125 to thesearch engine 140. - The
search engine 140 receives the formattedquery 125 and obtains documents responsive to the query based on any included filters. Due to the imperfect nature of human memory, it may be advantageous to apply imprecise, fuzzy searches that seek information previously accessed by a user. In some implementations, thesearch engine 240 may therefore apply aggressive synonyms, entities, or fuzzy time ranges to expand the filters. In particular, thesearch engine 140 may apply synonyms more aggressively than in a typical search because the corpus of documents is limited to documents that were previously accessed by theuser 102. - The
search engine 140 may include one or more processors, an operating system and one or more computer memories. Thesearch engine 140 may include modules, stored in memory or an external storage device and loaded into memory that enable thesearch engine 140 to receive and respond to queries. Thesearch engine 140 may be responsible for routing the query to search theindex 142 and, in some implementations, other data sources, such as a corpus of documents from the Internet or an Intranet, in response to a query. For example, thesearch engine 140 may receive a query from a client, such asquery processing engine 120, and send the query to an index cluster that accessesindex 142 and to other indexing clusters that store indexes for searching other sources. In such an implementation,search engine 140 may have a module that compiles the results from all sources. In some implementations,search engine 140 may only send queries to an index cluster. - The
index 142 may reference one or more collections of documents. For example, theindex 142 may access abrowser history collection 144 and anemail collection 146. Each of these collections may include documents that were previously accessed by a given user (e.g., user 102). For example, thebrowser history collection 144 may include a list of web pages that were accessed by theuser 102, and theemail collection 146 may include emails that were accessed by theuser 102. Thesearch engine 140 may obtain documents from theindex 142 based on the filters from the formattedquery 125. For example, if the formattedquery 125 includes a device filter (e.g., “Device 1”) and a topic filter (e.g., “turkey recipe”), thesearch engine 140 may retrieve only documents from thecollections user 102 accessed on hisclient device 110 that relate to a “turkey recipe.” Once thesearch engine 140 obtains documents in response to a query, it provides the documents to thescoring engine 150. - The
scoring engine 150 ranks thedocuments 148 from thesearch engine 140 and returns searchresults 155 to theclient device 110. Thescoring engine 150 may include one or more processors, an operating system and one or more computer memories. Thescoring engine 150 may include modules, stored in memory or an external storage device and loaded into memory that enable thesearch engine 150 to receive and rank documents. - As shown in
FIG. 1 , theresults 155 may be included in a search resultspage 160 that includes the search results 165. In the example, the search results include a “Turkey Chili Recipe” web page that theuser 102 accessed 2 days ago, a “Fried Turkey Recipe” web page that theuser 102 accessed 7 days ago, and a “Grandma's Turkey meatballs” email that theuser 102 accessed 3 months ago. The search resultspage 160 includes a set oficons 170 that may allow the user to filter the search results, for example, to emails, web pages, video, etc., and asearch box 175 showing the original search query, i.e., “I'm looking for a turkey recipe that I read on my phone.” - The search results
page 160 may be rendered by theclient device 110. While shown inFIG. 1 as being provided insearch results 160, the search results could alternatively be transmitted as a transcription that allows theclient device 110 to generate speech, or as an audio signal encoding the results for rendering at the client device. -
FIG. 2 shows another example system 200 that generates search results based on information previously accessed by a user. The system 200 includes aclient device 210, aquery processing engine 220, asearch engine 240, and ascoring engine 250. - As shown in
FIG. 2 , aclient device 210 initiates aquery 205 that may be formatted as a natural language question. For example, a user may enter the query “I'm looking for a chess story that I read last week” into a web browser at theclient device 210. In some implementations, the user may interact with theclient device 210 using a voice-based dialog system. - The
query processing engine 220 receives thequery 205 from theclient device 210. If thequery 205 is encoded as audio speech data, thequery processing engine 220 may transcribe the audio speech data. As described in more detail with reference toFIG. 3 below, thequery processing engine 220 then translates the original query into a format suitable for querying a database. For example, thequery processing engine 220 may convert the question, “I'm looking for a chess story that I read last week,” into a formattedquery 225, which is identified as a history seeking question that includes a topic filter (e.g., “chess story”) and a date filter (e.g., “last week”). The resulting formattedquery 225 may be, for example, “{user_history: {chess story, last week}}”. Thequery processing engine 220 then sends the formattedquery 225 to thesearch engine 240. - The
search engine 240 receives the formattedquery 225 and obtains documents responsive to the query using theindex 242 as described above. Theindex 242 may reference one or more collections of documents. For example, theindex 242 may access abrowser history collection 244. This collection may include documents that were previously accessed by a given user, e.g., the user ofclient device 210. For example, thebrowser history collection 244 may include a list of web pages that were accessed by the user. Thesearch engine 240 may obtain documents from theindex 242 based on the filters from the formattedquery 225. For example, if the formattedquery 225 includes a date filter (e.g., “last week”) and a topic filter (e.g., “chess story”), thesearch engine 240 may retrieve only documents from thecollection 244 that satisfy these filters, i.e., documents that the user accessed in the previous week that relate to a “chess story.” In this example, thesearch engine 240 may apply fuzzy time ranges to the “last week” filter to account for inaccuracies in human memory. In particular, while “last week” literally refers to the seven calendar days of the previous week, thesearch engine 240 may search for documents over a wider range, e.g., anytime in the past two weeks. - Once the
search engine 240 obtains documents in response to a query, it provides the documents to thescoring engine 250. Thescoring engine 250 ranks thedocuments 248 from thesearch engine 240 and returns searchresults 255 to theclient device 210. As shown inFIG. 2 , theresults 255 may be included in a search resultspage 260 that includes the search results 265. In the example, the search results include a “Bobby Fischer Story” web page that the user accessed 4 days ago, a “Kasparov Loses to Computer” web page that the user accessed 7 days ago, and a “World Chess Championship” web page that the user accessed 10 days ago. - As illustrated in
FIG. 2 , in addition to providing a link to the current version of a web page, the search results may provide access to a web page as it appeared when it was viewed by the user. For example, the search result “World Chess Championship” includes a “View Cached Result” link. This link may direct theclient device 210 to a version of the “World Chess Championship” web page that was cached on or about 10 days ago. In some implementations, the cached version of the web page may be stored in association with a user's browser history. For example, when a user views a web page, the viewed page may be stored and linked to the user's browser history. This link could then be provided in the search results. Alternatively or in addition, a search system may periodically store versions of web pages, and a link to the stored version of the web page nearest in time to the last access date of the user could be provided. - The search results
page 260 includes a set oficons 270 that may allow the user to filter the search results, for example, to emails, web pages, video, etc., and asearch box 275 showing the original search query, i.e., “I'm looking for a chess story that I read last week.” The search resultspage 260 may be rendered by theclient device 210. While shown inFIG. 2 as being provided insearch results 260, the search results could alternatively be transmitted as a transcription that allows theclient device 210 to generate speech, or as an audio signal encoding the results for rendering at the client device. -
FIG. 3 shows an examplequery processing engine 300.Query processing engine 300 may correspond to, for instance, some or all of the functional components ofquery processing engine FIGS. 1 and 2 .Query processing engine 300 may include anNLP engine 304, which comprises a historyquery classification module 308, atokenizer module 310, afilter identification module 312, and aquery generation module 316. Any, or all, ofmodules - History
query classification module 308 may receive a question from, for example, a user device—e.g.,client device query classification module 308 may determine that the likely intent of the question is to obtain information previously viewed by the user. To classify a request as a history seeking question, historyquery classification module 308 may determine whether the question includes one or more phrases from a list of phrases that are associated with history seeking questions. The list of terms may include, for example, “I'm looking for,” “I read,” “I saw,” “I viewed,” “I heard,” or “I remember.” - In some implementations, history
query classification module 308 may determine whether one or more phrases in the question are an exact match of one or more terms in the list of phrases associated with history seeking questions. For example, assume that the list of phrases includes the term “I saw,” and that the question also includes the term “I saw.” In this example, historyquery classification module 308 may classify the question as a history seeking question based on identifying that the question includes a phrase that is an exact match of a phrase from the list of phrases that are associated with history seeking questions. - In some implementations, history
query classification module 308 may determine whether one or more phrases in the question are similar, beyond a similarity threshold, to one or more phrases in the list of phrases associated with history seeking questions. When determining a similarity of the one or more phrases of the question to the one or more phrases in the list of phrases associated with history seeking questions, historyquery classification module 308 may use one or more of a variety of similarity detection techniques. For example, historyquery classification module 308 may determine an edit distance, a hamming distance, a semantic similarity, and/or may use any other technique for determining a similarity of the one or more phrases of the question to the one or more phrases in the list of phrases associated with history seeking questions. - For example, assume that the list of phrases includes the phrase “I read,” and that the question includes the term “that I read about.” In some such implementations, history
query classification module 308 may classify the question as a history seeking question based on identifying that the question includes a term that is similar to a term from the list of phrases that are associated with history seeking questions, even though the term is not an exact match of a term from the list of phrases that are associated with history seeking questions. - While some examples of how history
query classification module 308 may determine whether a question is classified as a history seeking question are described above, historyquery classification module 308 may use any technique to determine whether a question is classified as a history seeking question. For example, historyquery classification module 308 may receive information that identifies a question is classified as a history seeking questions from, e.g., one or more devices that analyze logs of questions and/or answers provided in response to questions to identify history seeking questions. As another example, historyquery classification module 308 may use a semantic analysis technique to determine whether a question is classified as a history seeking question. - History
query classification module 308 may output an indication of whether a particular question is classified as a history seeking question totokenizer module 310. Additionally, or alternatively, historyquery classification module 308 may output information regarding whether questions are classified as history seeking questions to one or more devices that store logs. -
Tokenizer module 310 may receive questions, such as questions that were classified as history seeking questions, and extract n-grams from the received questions. For example, assume thattokenizer module 310 receives the history seeking question “I'm looking for a turkey recipe that I read about on my phone?” Further assume thattokenizer module 310 extracts tri-grams from received questions. In this example,tokenizer module 310 may extract the following n-grams: “I'm looking for,” “a turkey recipe,” “that I read,” and “on my phone.” - In some implementations,
tokenizer module 310 may exclude insignificant terms, such as stop words—e.g., “and,” “or,” “the,” “of,” “is,” “was,” and “were”—when extracting n-grams from questions. In some implementations,tokenizer module 310 may extract n-grams with varying values of N from a particular question. In some implementations, when extracting n-grams,tokenizer module 310 may identify stems of words, and replace words that are based on the stems of the words with the stems of the words. - In some implementations,
tokenizer module 310 may exclude phrases associated with history seeking questions when extracting n-grams from a particular question. For example, assume that the phrases “I'm looking for” and “that I read” are associated with history seeking questions. In some such implementations, and referring to the above example question,tokenizer module 310 may extract the n-grams “a turkey recipe,” and “on my phone.” -
Filter identification module 312 may receive n-grams extracted from a question, e.g., fromtokenizer module 310, and may identify, based on the n-grams, one or more filters associated with the question. A filter as described herein refers to a search criterion that may be applied to a query. Filters may include, for example: (i) a topic (e.g., “turkey recipes”); (ii) a date and/or time (e.g., “last week”); (iii) a source (e.g., “WhiteHouse.gov”); (iv) a device of the user (e.g., mobile device, desktop, or tablet); (v) a sender of the information (e.g., “from grandma”); and/or (vi) a location where the information was accessed (e.g., “at home,” “at work”). In order to identify a filter associated with a question, filteridentification module 312 may compare n-grams, extracted from the question, to information that associates n-grams with filters. Such information may be received from, for example,filter repository 314. Continuing with the above example question, assume thatfilter identification module 312 receives “a turkey recipe,” and “on my phone.” Further assume thatfilter repository 314 includes information indicating that the n-gram “a turkey recipe” is associated with a topic filter “turkey recipe,” and that the n-gram “on my phone” is associated with a device filter identifying the user's device (e.g., “Device 1”).Filter identification module 312 may then determine that the question is associated with a topic filter “turkey recipe,” and a device filter “Device 1.” - In some implementations, filter
identification module 312 may determine whether one or more n-grams extracted from a question are an exact match of one or more n-grams included in information associating n-grams with filters. In some implementations, filteridentification module 312 may determine whether one or more n-grams extracted from a question are similar, beyond a similarity threshold, to one or more n-grams included in information associating n-grams with filters. Some examples of techniques that filteridentification module 312 may use in identifying similar n-grams are described above with respect to historyquery classification module 308. -
Filter identification module 312 may output information associating the question with the particular filter to one or more locations. For example, filteridentification module 312 may output the information to querygeneration module 316 and/or to one or more components that store logs regarding filters associated with questions, and/or to any other component. - In some instances, filter
identification module 312 may identify that a particular question is not associated with a particular filter. For example, filteridentification module 312 may fail to identify any n-grams, extracted from the particular question, that are identical or similar to n-grams that are associated with filters. In some implementations, when this occurs, thefilter identification module 312 may output information indicating that the search should retrieve all information previously accessed by the user (e.g., the user's complete browser history). Alternatively or in addition,filter identification module 312 may output information indicating that the question is not associated with a filter. - In some situations, a particular question may be associated with multiple filters. In some implementations, filter
identification module 312 may output information that indicates that the question is associated with the multiple filters. In some implementations, filteridentification module 312 may select fewer than all of the multiple filters—e.g., one filter1'to associate with the question, based on any criteria. For example, filteridentification module 312 may compare a relevance of the filter to one or more terms of the question, and may select a most relevant filter. In some implementations, filteridentification module 312 may forego selecting a filter to associate with the question. That is, in some such implementations, when a question is associated with multiple filters, filteridentification module 312 may output information indicating that the question is not associated with a particular filter. - The information, outputted by
filter identification module 312, may be used in a variety of ways. For example, the information outputted byfilter identification module 312 may include a request to querygeneration module 316 to formulate a search query based on the filter or filters associated with a particular question. Continuing with the above example, assume thatfilter identification module 312 associates the filters “a turkey recipe” and “on my phone” with the question “I'm looking for a turkey recipe I read on my phone.”Filter identification module 312 may output a request to querygeneration module 316 to generate a search based on the filters “turkey recipe” and “Device 1.” - The
query generation module 316 generates a formattedquery 318 based on the output from thefilter identification module 312. The formattedquery 318 may be, for example, an SQL or GQL query. After generating the formattedquery 318, thequery generation module 316 transmits the query to a search cluster, e.g.,search engine FIGS. 1 and 2 , which then performs a search as described above. -
FIG. 4 shows a set ofsearch results page 400 that includes search results based on information previously accessed by a user. The search results previously accessed by the user may be obtained as described above. In particular, the search resultspage 400 may be provided in response to a natural language query 402 (e.g., “I'm looking for the page about Science Friday I saw at work”), which represents a history seeking question with a topic filter (e.g., “Science Friday”) and a location filter (e.g., “at work”). The search resultspage 400 includes a set ofcommand buttons 404 that may allow the user to filter the search results, for example, to web pages, images, email, video, etc. - The search results previously accessed by the user are identified by a
caption 406, e.g., “Your history related to Science Friday—only you can see these results. The results include a “Science Friday”web page 408 that was accessed 18 hours ago, and an “NPR Science Friday Podcast”web page 410 that was accessed 6 days ago. As specified by the filters, these results identify web pages relating to “Science Friday” that were accessed by the user at a location identified as “at work,” which may be, for example, the user's place of business. The search results also include alink 412 that provides access to other results from the user's browser history. - In some implementations, the search results page may also include documents that are relevant to the user's query, but were not previously accessed by the user. For example, the search results
page 400 includes a link to a “Science Friday”web page 414 that was not previously accessed by the user, but is still relevant to the user's query. -
FIG. 5 shows anexample process 500 for generating search results based on information previously accessed by a user. For example purposes, theprocess 500 will be described as being performed by a server. This server may include one or more servers that perform the functions of thequery processing engine search engine scoring engine FIGS. 1-3 above. - In
step 502, a server receives a natural language query from a client device associated with a user. For example, the server may receive audio speech data encoding a natural language query from a user, or the server may receive text representing the natural language query. - Next, in step 504, the server classifies the natural language query as a query that seeks information previously accessed by the user. For example, as described above with reference to
FIG. 3 , the server may compare portions of the natural language query, e.g., n-grams extracted from the natural language query, to one or more phrases, where the one or more phrases have been identified as seeking previously accessed information. The comparison may be based on an exact match between the portions of the natural language query and the phrases and/or a similarity between the portions of the natural language query and the phrases that exceeds a predetermined threshold. Based this comparison, the server may determine that the natural language query seeks information previously accessed by the user. - In some implementations, the server determines one or more filters based on the natural language query. The one or more filters may include, for example: (i) a topic (e.g., “turkey recipes”); (ii) a date and/or time (e.g., “last week”); (iii) a source (e.g., “WhiteHouse.gov”); (iv) a device of the user (e.g., mobile device, desktop, or tablet); (v) a sender of the information (e.g., “from grandma”); and/or (vi) a location where the information was accessed (e.g., “at home,” “at work”).
- Then, the server obtains a response to the natural language query from one or more collections of documents in step 506. In some implementations, each document in the one or more collections of documents was previously accessed by the user. For example, the server may retrieve documents from a user's browser history and/or email account.
- When the natural language query includes filters, the retrieved documents may also satisfy one or more of the filters. For example, if a filter identifies a topic (e.g., a “turkey recipe”), then the retrieved documents may include documents relating to that topic. If a filter identifies a date and/or time (e.g., last week), the retrieved documents may include documents that were previously accessed on or around the identified date and/or time. If a filter identifies a source (e.g., “WhiteHouse.gov”) from which the documents were accessed, the retrieved documents may include documents that were previously accessed from that source. If a filter identifies a user device (e.g., a mobile phone) that was previously used to access information based on the natural language query, the retrieved documents may include documents that were previously accessed from that user device. If a filter identifies a sender of the information (e.g., “from grandma”), the retrieved documents may include documents that were sent from the identified sender. If a filter identifies a location (e.g., at work) from which the information was accessed, the retrieved documents may include documents that were previously accessed at that location.
- In some implementations, some documents in the retrieved documents may be versions that were previously accessed by the user. For example, the retrieved documents may include versions of the documents that were cached on or around the time they were previously accessed by the user.
- In
step 508, the server generates search results based on the response (e.g., a set of responsive documents). When the response includes versions of documents as they were when they were accessed by the user, the search results may identify, and optionally provide a link to, the previous versions of the documents. Finally, instep 510, the server communicates the search results to the client device. - For situations in which the systems discussed herein collect personal information about users, the users may be provided with an opportunity to opt in/out of programs or features that may collect personal information, e.g., information about a user's preferences or a user's current location. In addition, certain data may be anonymized in one or more ways before it is stored or used, so that personally identifiable information is removed. For example, a user's identity may be anonymized.
- Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer storage medium for execution by, or to control the operation of, data processing apparatus. Alternatively or in addition, the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. A computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Moreover, while a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal. The computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
- The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
- The term “data processing apparatus” encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing The apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
- A computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), to name just a few. Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's client device in response to requests received from the web browser.
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
- A system of one or more computers can be configured to perform particular operations or actions by virtue of having software, firmware, hardware, or a combination of them installed on the system that in operation causes or cause the system to perform the actions. One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that, when executed by data processing apparatus, cause the apparatus to perform the actions.
- The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, a server transmits data (e.g., an HTML page) to a client device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device). Data generated at the client device (e.g., a result of the user interaction) can be received from the client device at the server.
- While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any inventions or of what may be claimed, but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
- Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products. Thus, particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In certain implementations, multitasking and parallel processing may be advantageous.
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US17/537,136 US20220083549A1 (en) | 2013-04-12 | 2021-11-29 | Generating query answers from a user's history |
Applications Claiming Priority (5)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201361811252P | 2013-04-12 | 2013-04-12 | |
US201313898879A | 2013-05-21 | 2013-05-21 | |
US15/421,005 US10515076B1 (en) | 2013-04-12 | 2017-01-31 | Generating query answers from a user's history |
US16/681,670 US11188533B1 (en) | 2013-04-12 | 2019-11-12 | Generating query answers from a user's history |
US17/537,136 US20220083549A1 (en) | 2013-04-12 | 2021-11-29 | Generating query answers from a user's history |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US16/681,670 Continuation US11188533B1 (en) | 2013-04-12 | 2019-11-12 | Generating query answers from a user's history |
Publications (1)
Publication Number | Publication Date |
---|---|
US20220083549A1 true US20220083549A1 (en) | 2022-03-17 |
Family
ID=68979639
Family Applications (3)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/421,005 Active 2034-03-01 US10515076B1 (en) | 2013-04-12 | 2017-01-31 | Generating query answers from a user's history |
US16/681,670 Active 2033-08-29 US11188533B1 (en) | 2013-04-12 | 2019-11-12 | Generating query answers from a user's history |
US17/537,136 Pending US20220083549A1 (en) | 2013-04-12 | 2021-11-29 | Generating query answers from a user's history |
Family Applications Before (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/421,005 Active 2034-03-01 US10515076B1 (en) | 2013-04-12 | 2017-01-31 | Generating query answers from a user's history |
US16/681,670 Active 2033-08-29 US11188533B1 (en) | 2013-04-12 | 2019-11-12 | Generating query answers from a user's history |
Country Status (1)
Country | Link |
---|---|
US (3) | US10515076B1 (en) |
Families Citing this family (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10515076B1 (en) * | 2013-04-12 | 2019-12-24 | Google Llc | Generating query answers from a user's history |
US11087254B2 (en) * | 2017-08-30 | 2021-08-10 | 4D Technologies, LLC | Automatic updating interactive query answering and feature training method and system |
CA3050378C (en) * | 2018-07-25 | 2022-09-13 | Accenture Global Solutions Limited | Natural language control of web browsers |
Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20120059708A1 (en) * | 2010-08-27 | 2012-03-08 | Adchemy, Inc. | Mapping Advertiser Intents to Keywords |
US20130006914A1 (en) * | 2011-06-28 | 2013-01-03 | Microsoft Corporation | Exposing search history by category |
US20130086025A1 (en) * | 2011-09-30 | 2013-04-04 | Nuance Communications, Inc. | Techniques for receiving and processing one or more user-specified queries |
US20130226865A1 (en) * | 2011-07-13 | 2013-08-29 | Jean Alexandera Munemann | Systems and Methods for an Expert-Informed Information Acquisition Engine Utilizing an Adaptive Torrent-Based Heterogeneous Network Solution |
US20140280289A1 (en) * | 2013-03-12 | 2014-09-18 | Microsoft Corporation | Autosuggestions based on user history |
Family Cites Families (39)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5265065A (en) | 1991-10-08 | 1993-11-23 | West Publishing Company | Method and apparatus for information retrieval from a database by replacing domain specific stemmed phases in a natural language to create a search query |
US6233547B1 (en) | 1998-12-08 | 2001-05-15 | Eastman Kodak Company | Computer program product for retrieving multi-media objects using a natural language having a pronoun |
US6430531B1 (en) | 1999-02-04 | 2002-08-06 | Soliloquy, Inc. | Bilateral speech system |
US7725307B2 (en) | 1999-11-12 | 2010-05-25 | Phoenix Solutions, Inc. | Query engine for processing voice based queries including semantic decoding |
US7437295B2 (en) * | 2001-04-27 | 2008-10-14 | Accenture Llp | Natural language processing for a location-based services system |
AU2002953500A0 (en) | 2002-12-20 | 2003-01-09 | Redbank Manor Pty Ltd | A system and method of requesting, viewing and acting on search results in a time-saving manner |
US7730054B1 (en) | 2003-09-30 | 2010-06-01 | Google Inc. | Systems and methods for providing searchable prior history |
US7424469B2 (en) | 2004-01-07 | 2008-09-09 | Microsoft Corporation | System and method for blending the results of a classifier and a search engine |
US7555475B2 (en) | 2005-03-31 | 2009-06-30 | Jiles, Inc. | Natural language based search engine for handling pronouns and methods of use therefor |
US20060235886A1 (en) | 2005-04-15 | 2006-10-19 | Kjn Partners, L.P. | Method, system and software for centralized generation and storage of individualized requests and results |
US7672931B2 (en) * | 2005-06-30 | 2010-03-02 | Microsoft Corporation | Searching for content using voice search queries |
US7860871B2 (en) * | 2005-09-14 | 2010-12-28 | Jumptap, Inc. | User history influenced search results |
US8095876B1 (en) | 2005-11-18 | 2012-01-10 | Google Inc. | Identifying a primary version of a document |
US7617191B2 (en) | 2006-01-06 | 2009-11-10 | International Business Machines Corporation | Search service that accesses and highlights previously accessed local and online available information sources |
US8117196B2 (en) | 2006-01-23 | 2012-02-14 | Chacha Search, Inc. | Search tool providing optional use of human search guides |
US8977953B1 (en) | 2006-01-27 | 2015-03-10 | Linguastat, Inc. | Customizing information by combining pair of annotations from at least two different documents |
US20070219946A1 (en) | 2006-03-15 | 2007-09-20 | Emmanuel Roche | Information repository and answering system |
US8874586B1 (en) | 2006-07-21 | 2014-10-28 | Aol Inc. | Authority management for electronic searches |
US9318108B2 (en) * | 2010-01-18 | 2016-04-19 | Apple Inc. | Intelligent automated assistant |
CN101193113A (en) | 2006-11-29 | 2008-06-04 | 国际商业机器公司 | Content response and content request method and content responder and content requester |
US8091067B2 (en) | 2007-01-12 | 2012-01-03 | Sas Institute Inc. | Method and system for hosting a programming environment |
US20080183680A1 (en) | 2007-01-31 | 2008-07-31 | Laurent Meynier | Documents searching on peer-to-peer computer systems |
US20080195582A1 (en) * | 2007-02-08 | 2008-08-14 | Bellsouth Intellectual Property Corporation | Context Based Keyword Search |
US8849838B2 (en) | 2008-01-15 | 2014-09-30 | Google Inc. | Bloom filter for storing file access history |
US8255224B2 (en) | 2008-03-07 | 2012-08-28 | Google Inc. | Voice recognition grammar selection based on context |
CA2638558C (en) | 2008-08-08 | 2013-03-05 | Bloorview Kids Rehab | Topic word generation method and system |
US10276170B2 (en) * | 2010-01-18 | 2019-04-30 | Apple Inc. | Intelligent automated assistant |
US8682667B2 (en) * | 2010-02-25 | 2014-03-25 | Apple Inc. | User profiling for selecting user specific voice input processing information |
US8392411B2 (en) | 2010-05-20 | 2013-03-05 | Google Inc. | Automatic routing of search results |
US20120076414A1 (en) | 2010-09-27 | 2012-03-29 | Microsoft Corporation | External Image Based Summarization Techniques |
WO2012088623A1 (en) | 2010-12-27 | 2012-07-05 | Yahoo! Inc. | Selecting advertisements for placement on related web pages |
US9489457B2 (en) * | 2011-07-14 | 2016-11-08 | Nuance Communications, Inc. | Methods and apparatus for initiating an action |
US9223537B2 (en) * | 2012-04-18 | 2015-12-29 | Next It Corporation | Conversation user interface |
US20130346068A1 (en) * | 2012-06-25 | 2013-12-26 | Apple Inc. | Voice-Based Image Tagging and Searching |
US9734151B2 (en) * | 2012-10-31 | 2017-08-15 | Tivo Solutions Inc. | Method and system for voice based media search |
US9704486B2 (en) * | 2012-12-11 | 2017-07-11 | Amazon Technologies, Inc. | Speech recognition power management |
US20140236986A1 (en) * | 2013-02-21 | 2014-08-21 | Apple Inc. | Natural language document search |
US10515076B1 (en) * | 2013-04-12 | 2019-12-24 | Google Llc | Generating query answers from a user's history |
US10783178B2 (en) * | 2016-05-17 | 2020-09-22 | Google Llc | Generating a personal database entry for a user based on natural language user interface input of the user and generating output based on the entry in response to further natural language user interface input of the user |
-
2017
- 2017-01-31 US US15/421,005 patent/US10515076B1/en active Active
-
2019
- 2019-11-12 US US16/681,670 patent/US11188533B1/en active Active
-
2021
- 2021-11-29 US US17/537,136 patent/US20220083549A1/en active Pending
Patent Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20120059708A1 (en) * | 2010-08-27 | 2012-03-08 | Adchemy, Inc. | Mapping Advertiser Intents to Keywords |
US20130006914A1 (en) * | 2011-06-28 | 2013-01-03 | Microsoft Corporation | Exposing search history by category |
US20130226865A1 (en) * | 2011-07-13 | 2013-08-29 | Jean Alexandera Munemann | Systems and Methods for an Expert-Informed Information Acquisition Engine Utilizing an Adaptive Torrent-Based Heterogeneous Network Solution |
US20130086025A1 (en) * | 2011-09-30 | 2013-04-04 | Nuance Communications, Inc. | Techniques for receiving and processing one or more user-specified queries |
US20140280289A1 (en) * | 2013-03-12 | 2014-09-18 | Microsoft Corporation | Autosuggestions based on user history |
Also Published As
Publication number | Publication date |
---|---|
US10515076B1 (en) | 2019-12-24 |
US11188533B1 (en) | 2021-11-30 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US20220108078A1 (en) | Keyphase extraction beyond language modeling | |
US9558264B2 (en) | Identifying and displaying relationships between candidate answers | |
US20220083549A1 (en) | Generating query answers from a user's history | |
US20170323011A1 (en) | Answering Questions Via a Persona-Based Natural Language Processing (NLP) System | |
US11580181B1 (en) | Query modification based on non-textual resource context | |
US10430445B2 (en) | Text indexing and passage retrieval | |
JP6014725B2 (en) | Retrieval and information providing method and system for single / multi-sentence natural language queries | |
EP3089159B1 (en) | Correcting voice recognition using selective re-speak | |
US9965726B1 (en) | Adding to a knowledge base using an ontological analysis of unstructured text | |
US20100185691A1 (en) | Scalable semi-structured named entity detection | |
US20120331003A1 (en) | Efficient passage retrieval using document metadata | |
US10303689B2 (en) | Answering natural language table queries through semantic table representation | |
US20120226696A1 (en) | Keyword Generation for Media Content | |
WO2014031458A1 (en) | Translating natural language utterances to keyword search queries | |
KR20100075454A (en) | Identification of semantic relationships within reported speech | |
US20230205824A1 (en) | Contextual Clarification and Disambiguation for Question Answering Processes | |
US9811592B1 (en) | Query modification based on textual resource context | |
CN112262382A (en) | Annotation and retrieval of contextual deep bookmarks | |
US9396235B1 (en) | Search ranking based on natural language query patterns | |
US20170308519A1 (en) | Learning semantic parsing | |
US9984684B1 (en) | Inducing command inputs from high precision and high recall data | |
US11604794B1 (en) | Interactive assistance for executing natural language queries to data sets | |
US11694033B2 (en) | Transparent iterative multi-concept semantic search | |
US10528564B2 (en) | Identifying teachable moments for contextual search | |
US9405849B1 (en) | Inducing command inputs from property sequences |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:059451/0043Effective date: 20170929Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:WIEGAND, NATHAN;HORLING, BRYAN C.;SMART, JASON L.;SIGNING DATES FROM 20130515 TO 20130520;REEL/FRAME:059312/0400 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: FINAL REJECTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |