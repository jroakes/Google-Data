US11956447B2 - Using rate distortion cost as a loss function for deep learning - Google Patents
Using rate distortion cost as a loss function for deep learning Download PDFInfo
- Publication number
- US11956447B2 US11956447B2 US17/601,639 US201917601639A US11956447B2 US 11956447 B2 US11956447 B2 US 11956447B2 US 201917601639 A US201917601639 A US 201917601639A US 11956447 B2 US11956447 B2 US 11956447B2
- Authority
- US
- United States
- Prior art keywords
- partition
- rate
- block
- training
- distortion
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
- 230000006870 function Effects 0.000 title description 113
- 238000013135 deep learning Methods 0.000 title description 3
- 238000005192 partition Methods 0.000 claims abstract description 386
- 238000012549 training Methods 0.000 claims abstract description 166
- 238000010801 machine learning Methods 0.000 claims abstract description 80
- 238000000034 method Methods 0.000 claims description 69
- 238000000638 solvent extraction Methods 0.000 claims description 36
- 238000013527 convolutional neural network Methods 0.000 claims description 20
- 238000013528 artificial neural network Methods 0.000 claims description 8
- 230000008569 process Effects 0.000 description 39
- 238000001914 filtration Methods 0.000 description 14
- 238000010586 diagram Methods 0.000 description 13
- 238000004891 communication Methods 0.000 description 10
- 238000013136 deep learning model Methods 0.000 description 9
- 238000012545 processing Methods 0.000 description 9
- 238000013139 quantization Methods 0.000 description 8
- 239000013598 vector Substances 0.000 description 8
- 238000000605 extraction Methods 0.000 description 7
- 208000037170 Delayed Emergence from Anesthesia Diseases 0.000 description 6
- 230000004913 activation Effects 0.000 description 6
- 239000011159 matrix material Substances 0.000 description 6
- 238000013459 approach Methods 0.000 description 4
- 230000002123 temporal effect Effects 0.000 description 4
- 238000012360 testing method Methods 0.000 description 4
- 230000008901 benefit Effects 0.000 description 3
- 230000005540 biological transmission Effects 0.000 description 3
- 230000000903 blocking effect Effects 0.000 description 3
- 238000004364 calculation method Methods 0.000 description 3
- FGXWKSZFVQUSTL-UHFFFAOYSA-N domperidone Chemical compound C12=CC=CC=C2NC(=O)N1CCCN(CC1)CCC1N1C2=CC=C(Cl)C=C2NC1=O FGXWKSZFVQUSTL-UHFFFAOYSA-N 0.000 description 3
- 238000013507 mapping Methods 0.000 description 3
- 238000012986 modification Methods 0.000 description 3
- 230000004048 modification Effects 0.000 description 3
- 238000010606 normalization Methods 0.000 description 3
- 230000003287 optical effect Effects 0.000 description 3
- 238000011176 pooling Methods 0.000 description 3
- 230000001131 transforming effect Effects 0.000 description 3
- 230000006835 compression Effects 0.000 description 2
- 238000007906 compression Methods 0.000 description 2
- 238000004590 computer program Methods 0.000 description 2
- 238000013461 design Methods 0.000 description 2
- 238000011161 development Methods 0.000 description 2
- 238000012886 linear function Methods 0.000 description 2
- 238000003062 neural network model Methods 0.000 description 2
- 239000007787 solid Substances 0.000 description 2
- 230000003595 spectral effect Effects 0.000 description 2
- 238000004458 analytical method Methods 0.000 description 1
- 238000003491 array Methods 0.000 description 1
- 230000001413 cellular effect Effects 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 239000003086 colorant Substances 0.000 description 1
- 230000008867 communication pathway Effects 0.000 description 1
- 230000006837 decompression Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 210000002569 neuron Anatomy 0.000 description 1
- 238000005457 optimization Methods 0.000 description 1
- 230000004044 response Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 238000010408 sweeping Methods 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000009466 transformation Effects 0.000 description 1
- 238000013519 translation Methods 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/134—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or criterion affecting or controlling the adaptive coding
- H04N19/146—Data rate or code amount at the encoder output
- H04N19/147—Data rate or code amount at the encoder output according to rate distortion criteria
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/09—Supervised learning
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T9/00—Image coding
- G06T9/002—Image coding using neural networks
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/102—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or selection affected or controlled by the adaptive coding
- H04N19/119—Adaptive subdivision aspects, e.g. subdivision of a picture into rectangular or non-rectangular coding blocks
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/169—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding
- H04N19/17—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding the unit being an image region, e.g. an object
- H04N19/176—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding the unit being an image region, e.g. an object the region being a block, e.g. a macroblock
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/189—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the adaptation method, adaptation tool or adaptation type used for the adaptive coding
- H04N19/19—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the adaptation method, adaptation tool or adaptation type used for the adaptive coding using optimisation based on Lagrange multipliers
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/90—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using coding techniques not provided for in groups H04N19/10-H04N19/85, e.g. fractals
- H04N19/96—Tree coding, e.g. quad-tree coding
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/0464—Convolutional networks [CNN, ConvNet]
Definitions
- Digital video streams may represent video using a sequence of frames or still images.
- Digital video can be used for various applications, including, for example, video conferencing, high-definition video entertainment, video advertisements, or sharing of user-generated videos.
- a digital video stream can contain a large amount of data and consume a significant amount of computing or communication resources of a computing device for processing, transmission, or storage of the video data.
- Various approaches have been proposed to reduce the amount of data in video streams, including compression and other encoding techniques.
- One aspect of the disclosed implementations is a method for encoding an image block using a first encoder.
- the method includes presenting, to a machine-learning model of the first encoder, the image block, wherein the machine-learning model is trained to output a partition decision for encoding the image block by using training data for the plurality of training blocks as inputs to the training of a machine-learning module that includes the machine-learning model, the training data including, for a training block of a plurality of training blocks, a plurality of partition decisions used by a second encoder for encoding the training block, and, for each partition decision of the plurality of partition decisions, a rate-distortion value resulting from encoding the training block using the partition decision.
- the machine-learning model is trained using a loss function combining a partition loss function that is based upon a relationship between the partition decisions and respective predicted partitions, and a rate-distortion cost loss function that is based upon a relationship between the rate-distortion values and respective predicted rate-distortion values.
- the method also includes obtaining the partition decision for encoding the image block from the machine-learning model, and encoding, in a compressed bitstream, the image block using the partition decision.
- Another method described herein includes presenting, to a machine-learning model of a first encoder, an image block, wherein the machine-learning model was trained to output a partition decision for encoding the image block with training data for a plurality of training blocks, the training data including, for a training block of the plurality of training blocks, a plurality of partition decisions used by a second encoder for encoding the training block, and, for each partition decision of the plurality of partition decisions, a rate-distortion value resulting from encoding the training block using the partition decision, and with a loss function comprising a combination of a partition loss function that is based upon a relationship between the partition decisions and respective predicted partitions, and a rate-distortion cost loss function that is based upon a relationship between the rate-distortion values and respective predicted rate-distortion values.
- the method also includes obtaining the partition decision for encoding the image block from the machine-learning model, and encoding, in a compressed bitstream, the image block using
- An apparatus includes a processor that is configured to receive training data comprising a plurality of training blocks and, for a training block of the plurality of training blocks, a plurality of partition decisions used by an encoder for encoding the training block, and, for each partition decision of the plurality of partition decisions, a rate-distortion value resulting from encoding the training block using the partition decision.
- the processor is configured to train a machine learning model to output a partition decision for encoding an image block by inputting the training data into a neural network using a loss function comprising a combination of a partition loss function that is based upon a relationship between the partition decisions and respective predicted partitions, and a rate-distortion cost loss function that is based upon a relationship between the rate-distortion values and respective predicted rate-distortion values.
- the apparatus includes a processor that presents, to a machine-learning model, the image block, obtains the partition decision for encoding the image block from the machine-learning model, and encodes, in a compressed bitstream, the image block using the partition decision.
- the machine-learning model is trained to output a partition decision for encoding the image block by using training data for a plurality of training blocks as inputs to the training of the machine-learning model, the training data including, for a training block of the plurality of training blocks, a plurality of partition decisions used by an encoder for encoding the training block, and for each partition decision of the plurality of partition decisions, a rate-distortion value resulting from encoding the training block using the partition decision, wherein the machine-learning model is trained using a loss function combining a partition loss function that is based upon a relationship between the partition decisions and respective predicted partitions, and a rate-distortion cost loss function that is based upon a relationship between the rate-distortion values and respective predicted rate-distortion values.
- Another apparatus described herein includes a processor that presents, to a machine-learning model, the image block.
- the machine-learning model was trained to output a partition decision for encoding the image block with training data for a plurality of training blocks, the training data including, for a training block of the plurality of training blocks, a plurality of partition decisions used by an encoder for encoding the training block, and, for each partition decision of the plurality of partition decisions, a rate-distortion value resulting from encoding the training block using the partition decision.
- the machine-learning model was also trained with a combination of a partition loss function that is based upon a relationship between the partition decisions and respective predicted partitions, and a rate-distortion cost loss function that is based upon a relationship between the rate-distortion values and respective predicted rate-distortion values.
- the processor also obtains the partition decision for encoding the image block from the machine-learning model and encodes, in a compressed bitstream, the image block using the partition decision.
- Another aspect is an apparatus for encoding an image block that includes a machine-learning model, an encoder, and a processor.
- the encoder generates training data by encoding each training block of a plurality of training blocks multiple times, each time encoding a respective training block using a respective partition decision of a plurality of partition decisions.
- the processor trains the machine-learning model to output a partition decision for encoding the image block by using the training data as inputs to the training of the machine-learning model, the training data including, for a training block of the plurality of training blocks, the partition decisions used by the encoder for encoding the training block, and, for each partition decision of the partition decisions, a rate-distortion value resulting from encoding the training block using the partition decision.
- the machine-learning model is trained using a loss function combining a partition loss function that is based upon a relationship between the partition decisions and respective predicted partitions, and a rate-distortion cost loss function that is based upon a relationship between the rate-distortion values and respective predicted rate-distortion values.
- the loss function may include uneven weighting of the partition loss function and the rate-distortion cost loss function.
- the partition loss function may comprise a binary cross entropy loss function.
- the binary cross entropy loss function may apply respective weights to the partition decisions, a weight applied to a partition decision of the plurality of partition decisions equal to the rate-distortion value of the partition decision normalized by a lowest rate-distortion value resulting from the plurality of partition decisions.
- the rate-distortion cost loss function may exponentially penalize a predicted partition that does not match a selected partition decision for the training block that results from an exhaustive partition search of the second encoder.
- the machine-learning module may comprise a rate-distortion cost estimator that receives a predicted partition from the machine-learning model and estimates a predicted rate-distortion value for the loss function, and the machine-learning model is a convolutional neural network model.
- the rate-distortion value resulting from encoding the training block using the partition decision may comprise a rate-distortion cost for encoding the training block without further partitioning the training block and a cost incurred when splitting the training block.
- the plurality of partition decisions may comprise quad-tree partition decisions.
- the plurality of partition decisions may comprise partition decisions resulting in at least one non-square partition of the training block.
- the second encoder may comprise a block-based encoder.
- the rate-distortion cost loss function may be, for each partition decision of the plurality of partition decisions, an exponential function comprising a difference between the rate-distortion value resulting from encoding the training block using the partition decision and a predicted rate-distortion value.
- a respective predicted rate-distortion value may be normalized using a lowest rate-distortion value of the plurality of partition decisions within the rate-distortion cost loss function.
- the rate-distortion cost loss function may comprise: a determination of the predicted rate-distortion value using the partition decision of the plurality of partition decisions and the rate-distortion value resulting from encoding the training block using the partition decision of the plurality of partition decisions, wherein the partition decision comprises a combination of splitting and non-splitting decisions of the training block, and the rate-distortion value comprises a combination of rate-distortion values resulting from encoding the training block using the combination of splitting and non-splitting decisions.
- a predicted rate-distortion value may comprise a first term representing a rate-distortion cost of a non-splitting decision for the training block and a second term representing a rate-distortion cost of a splitting decision for the training block that splits the training block into a plurality of sub-blocks.
- the rate-distortion cost of the splitting decision for the training block that splits the training block into the plurality of sub-blocks may comprise a respective rate-distortion cost for partition decisions of each of the plurality of sub-blocks; the rate-distortion cost of the first term may be weighted by a lowest rate-distortion value of the plurality of partition decisions used for encoding the training block; and the rate-distortion cost of the second term may comprise weighting each of the respective rate-distortion costs for partitioning each of the plurality of sub-blocks by the lowest rate-distortion value of the plurality of partition decisions used for encoding the training block.
- the machine-learning model may be trained using a machine-learning module comprising the machine-learning model and a rate-distortion cost estimator, the rate-distortion cost estimator receiving a predicted partition from the machine-learning model and estimating a predicted rate-distortion value for the loss function.
- the machine-learning model may be trained using the loss function by applying a greater weight to the partition loss function than to the rate-distortion cost loss function.
- the machine-learning module may comprise a rate-distortion cost estimator that receives a predicted partition from the machine-learning model and estimates a predicted rate-distortion value for the loss function.
- FIG. 1 is a schematic of a video encoding and decoding system.
- FIG. 2 is a block diagram of an example of a computing device that can implement a transmitting station or a receiving station.
- FIG. 3 is a diagram of a video stream to be encoded and subsequently decoded.
- FIG. 4 is a block diagram of an encoder according to implementations of this disclosure.
- FIG. 5 is a block diagram of a decoder according to implementations of this disclosure.
- FIG. 6 is a block diagram of a representation of a portion of a frame according to implementations of this disclosure.
- FIG. 7 is a block diagram of an example of a quad-tree representation of a block according to implementations of this disclosure.
- FIG. 8 is a flowchart of a process for searching for a best mode to code a block.
- FIG. 9 is a simplified representation of a convolution neural network that can used to implement the teachings herein.
- FIG. 10 A is an example of a partition decision for a b ⁇ b block with relatively uniform content.
- FIG. 10 B is an example of a partition decision for a b ⁇ b block with more detail than the block of FIG. 10 A .
- FIG. 11 is a diagram that illustrates partition modes of a block, and recursive partitioning.
- FIG. 12 is a diagram that illustrates training of a machine-learning/deep-learning model
- FIG. 13 is a flowchart of a process for encoding using inferences obtained from the machine-learning/deep-learning model trained according to FIG. 12 .
- Encoding techniques may be designed to maximize coding efficiency.
- Coding efficiency can mean encoding a video at the lowest possible bit rate while minimizing distortion (e.g., while maintaining a certain level of video quality). Coding efficiency is typically measured in terms of both rate and distortion.
- Rate refers to the number of bits required for encoding (such as encoding a block, a frame, etc.).
- Distortion measures the quality loss between, for example, a source video block and a reconstructed version of the source video block. For example, the distortion may be calculated as a mean-square error between pixel values of the source block and those of the reconstructed block.
- a video codec optimizes the amount of distortion against the rate required to encode the video.
- Modern video codecs (e.g., H.264, which is also known as MPEG-4 AVC; VP9; H.265, which is also known as HEVC; AVS2; and AV1) define and use a large number of tools and configurations (e.g., parameters) to improve coding efficiency.
- a video encoder can use a mode decision to examine (e.g., test, evaluate, etc.) at least some of the valid combinations of parameters to select a combination that results in a relatively low rate-distortion value.
- An example of a mode decision is an intra-prediction mode decision, which determines the best intra-prediction mode for coding a block.
- a mode decision is a partition decision, which determines an optimal partitioning of a coding unit (also known as a coding unit or CU).
- a mode decision includes a decision as to a transform type to use in transforming a block (such as a residual or an image block) from the pixel domain to the frequency domain to form a transform block that includes transform coefficients.
- a metric can be computed for each of the examined combinations and the respective metrics compared.
- the metric can combine the rate and distortion described above to produce a rate-distortion (RD) value or cost.
- the RD value or cost may be a single scalar value.
- the RD cost associated with a specific mode may be determined by performing at least a subset of the encoding steps of the encoder.
- the subset of the encoding steps can include, depending on the mode for which a RD cost is to be determined, at least one of determining a prediction block, determining a residual block, determining a transform type, determining an interpolation filter, quantizing a transform block, entropy encoding, and so on.
- an encoder may terminate a mode search as soon as it finds a mode with a RD cost that is less than a set threshold. This means, however, that a better mode may have been found later on if the encoder had continued in mode search.
- an exhaustive search may or may not be performed, but the entire RD cost calculation is replaced by a coarse estimation. This can further degrade decision making by an encoder.
- a machine-learning model can be used to estimate the best mode.
- the machine-learning model may be trained using the vast amount of training data that is available from an encoder performing standard encoding techniques, such as those described with respect to FIGS. 4 and 6 - 8 . More specifically, the training data can be used during the learning phase of machine learning to derive (e.g., learn, infer, etc.) the machine-learning model that is (e.g., defines, constitutes, etc.) a mapping from the input data (e.g., block data) to an output.
- the training data can be used during the learning phase of machine learning to derive (e.g., learn, infer, etc.) the machine-learning model that is (e.g., defines, constitutes, etc.) a mapping from the input data (e.g., block data) to an output.
- the model computes the output as a deterministic function of its input.
- the machine-learning model can be a neural network model, which can be a convolutional neural-network (CNN). Further details of a neural network model, including a CNN, will be discussed below.
- a loss function may be characterized as measuring how well a predicted value of the model, also called a prediction, matches the expected outcome.
- Common loss functions include mean square error (MSE), binary cross entropy, or cross entropy.
- MSE mean square error
- a loss function that uses rate and distortion as described herein can result in a better trained model than such loss functions alone, hence improving coding efficiency. Details of such a machine-learning model is described herein first with reference to a block-based codec with the teachings may be incorporated. Although a block-based codec is described as an example, other codecs may be used with the present teachings, including a feature-based codec.
- FIG. 1 is a schematic of a video encoding and decoding system 100 .
- a transmitting station 102 can be, for example, a computer having an internal configuration of hardware, such as that described with respect to FIG. 2 .
- the processing of the transmitting station 102 can be distributed among multiple devices.
- a network 104 can connect the transmitting station 102 and a receiving station 106 for encoding and decoding of the video stream.
- the video stream can be encoded in the transmitting station 102
- the encoded video stream can be decoded in the receiving station 106 .
- the network 104 can be, for example, the Internet.
- the network 104 can also be a local area network (LAN), wide area network (WAN), virtual private network (VPN), cellular telephone network, or any other means of transferring the video stream from the transmitting station 102 to, in this example, the receiving station 106 .
- LAN local area network
- WAN wide area network
- VPN virtual private network
- the receiving station 106 can be a computer having an internal configuration of hardware, such as that described with respect to FIG. 2 .
- the processing of the receiving station 106 can be distributed among multiple devices.
- an implementation can omit the network 104 .
- a video stream can be encoded and then stored for transmission at a later time to the receiving station 106 or any other device having memory.
- the receiving station 106 receives (e.g., via the network 104 , a computer bus, and/or some communication pathway) the encoded video stream and stores the video stream for later decoding.
- a real-time transport protocol RTP
- a transport protocol other than RTP e.g., a Hypertext transfer protocol (HTTP)-based video streaming protocol, may be used.
- HTTP Hypertext transfer protocol
- the transmitting station 102 and/or the receiving station 106 may include the ability to both encode and decode a video stream as described below.
- the receiving station 106 could be a video conference participant who receives an encoded video bitstream from a video conference server (e.g., the transmitting station 102 ) to decode and view and further encodes and transmits its own video bitstream to the video conference server for decoding and viewing by other participants.
- FIG. 2 is a block diagram of an example of a computing device 200 that can implement a transmitting station or a receiving station.
- the computing device 200 can implement one or both of the transmitting station 102 and the receiving station 106 of FIG. 1 .
- the computing device 200 can be in the form of a computing system including multiple computing devices, or in the form of a single computing device, for example, a mobile phone, a tablet computer, a laptop computer, a notebook computer, a desktop computer, and the like.
- a CPU 202 in the computing device 200 can be a central processing unit.
- the CPU 202 can be any other type of device, or multiple devices, now-existing or hereafter developed, capable of manipulating or processing information.
- the disclosed implementations can be practiced with a single processor as shown (e.g., the CPU 202 ), advantages in speed and efficiency can be achieved by using more than one processor.
- a memory 204 in the computing device 200 can be a read-only memory (ROM) device or a random-access memory (RAM) device. Any other suitable type of storage device can be used as the memory 204 .
- the memory 204 can include code and data 206 that is accessed by the CPU 202 using a bus 212 .
- the memory 204 can further include an operating system 208 and application programs 210 , the application programs 210 including at least one program that permits the CPU 202 to perform the methods described herein.
- the application programs 210 can include applications 1 through N, which further include a video coding application that performs the methods described herein.
- the computing device 200 can also include a secondary storage 214 , which can, for example, be a memory card used with a computing device 200 that is mobile. Because the video communication sessions may contain a significant amount of information, they can be stored in whole or in part in the secondary storage 214 and loaded into the memory 204 as needed for processing.
- a secondary storage 214 can, for example, be a memory card used with a computing device 200 that is mobile. Because the video communication sessions may contain a significant amount of information, they can be stored in whole or in part in the secondary storage 214 and loaded into the memory 204 as needed for processing.
- the computing device 200 can also include one or more output devices, such as a display 218 .
- the display 218 may be, in one example, a touch-sensitive display that combines a display with a touch-sensitive element that is operable to sense touch inputs.
- the display 218 can be coupled to the CPU 202 via the bus 212 .
- Other output devices that permit a user to program or otherwise use the computing device 200 can be provided in addition to or as an alternative to the display 218 .
- the output device is or includes a display
- the display can be implemented in various ways, including as a liquid crystal display (LCD); a cathode-ray tube (CRT) display; or a light-emitting diode (LED) display, such as an organic LED (OLED) display.
- LCD liquid crystal display
- CRT cathode-ray tube
- LED light-emitting diode
- OLED organic LED
- the computing device 200 can also include or be in communication with an image-sensing device 220 , for example, a camera, or any other image-sensing device, now existing or hereafter developed, that can sense an image, such as the image of a user operating the computing device 200 .
- the image-sensing device 220 can be positioned such that it is directed toward the user operating the computing device 200 .
- the position and optical axis of the image-sensing device 220 can be configured such that the field of vision includes an area that is directly adjacent to the display 218 and from which the display 218 is visible.
- the computing device 200 can also include or be in communication with a sound-sensing device 222 , for example, a microphone, or any other sound-sensing device, now existing or hereafter developed, that can sense sounds near the computing device 200 .
- the sound-sensing device 222 can be positioned such that it is directed toward the user operating the computing device 200 and can be configured to receive sounds, for example, speech or other utterances, made by the user while the user operates the computing device 200 .
- FIG. 2 depicts the CPU 202 and the memory 204 of the computing device 200 as being integrated into a single unit, other configurations can be utilized.
- the operations of the CPU 202 can be distributed across multiple machines (each machine having one or more processors) that can be coupled directly or across a local area or other network.
- the memory 204 can be distributed across multiple machines, such as a network-based memory or memory in multiple machines performing the operations of the computing device 200 .
- the bus 212 of the computing device 200 can be composed of multiple buses.
- the secondary storage 214 can be directly coupled to the other components of the computing device 200 or can be accessed via a network and can comprise a single integrated unit, such as a memory card, or multiple units, such as multiple memory cards.
- the computing device 200 can thus be implemented in a wide variety of configurations.
- FIG. 3 is a diagram of an example of a video stream 300 to be encoded and subsequently decoded.
- the video stream 300 includes a video sequence 302 .
- the video sequence 302 includes a number of adjacent frames 304 . While three frames are depicted as the adjacent frames 304 , the video sequence 302 can include any number of adjacent frames 304 .
- the adjacent frames 304 can then be further subdivided into individual frames, for example, a frame 306 .
- the frame 306 can be divided into a series of segments 308 or planes.
- the segments 308 can be subsets of frames that permit parallel processing, for example.
- the segments 308 can also be subsets of frames that can separate the video data into separate colors.
- the frame 306 of color video data can include a luminance plane and two chrominance planes.
- the segments 308 may be sampled at different resolutions.
- the frame 306 may be further subdivided into blocks 310 , which can contain data corresponding to, for example, 16 ⁇ 16 pixels in the frame 306 .
- the blocks 310 can also be arranged to include data from one or more segments 308 of pixel data.
- the blocks 310 can also be of any other suitable size, such as 4 ⁇ 4 pixels, 8 ⁇ 8 pixels, 16 ⁇ 8 pixels, 8 ⁇ 16 pixels, 16 ⁇ 16 pixels, or larger.
- FIG. 4 is a block diagram of an encoder 400 in accordance with implementations of this disclosure.
- the encoder 400 can be implemented, as described above, in the transmitting station 102 , such as by providing a computer software program stored in memory, for example, the memory 204 .
- the computer software program can include machine instructions that, when executed by a processor, such as the CPU 202 , cause the transmitting station 102 to encode video data in manners described herein.
- the encoder 400 can also be implemented as specialized hardware included in, for example, the transmitting station 102 .
- the encoder 400 has the following stages to perform the various functions in a forward path (shown by the solid connection lines) to produce an encoded or compressed bitstream 420 using the video stream 300 as input: an intra/inter-prediction stage 402 , a transform stage 404 , a quantization stage 406 , and an entropy encoding stage 408 .
- the encoder 400 may also include a reconstruction path (shown by the dotted connection lines) to reconstruct a frame for encoding of future blocks.
- the encoder 400 has the following stages to perform the various functions in the reconstruction path: a dequantization stage 410 , an inverse transform stage 412 , a reconstruction stage 414 , and a loop filtering stage 416 .
- Other structural variations of the encoder 400 can be used to encode the video stream 300 .
- a block can be encoded using intra-frame prediction (also called intra-prediction) or inter-frame prediction (also called inter-prediction), or a combination of both.
- intra-frame prediction also called intra-prediction
- inter-frame prediction also called inter-prediction
- a prediction block can be formed.
- intra-prediction all or part of a prediction block may be formed from samples in the current frame that have been previously encoded and reconstructed.
- inter-prediction all or part of a prediction block may be formed from samples in one or more previously constructed reference frames determined using motion vectors.
- the prediction block can be subtracted from the current block at the intra/inter-prediction stage 402 to produce a residual block (also called a residual).
- the transform stage 404 transforms the residual into transform coefficients in, for example, the frequency domain using block-based transforms.
- block-based transforms i.e., transform types
- DCT Discrete Cosine Transform
- ADST Asymmetric Discrete Sine Transform
- Other block-based transforms are possible.
- combinations of different transforms may be applied to a single residual.
- the DCT transforms the residual block into the frequency domain where the transform coefficient values are based on spatial frequency.
- the lowest frequency (DC) coefficient is at the top-left of the matrix, and the highest frequency coefficient is at the bottom-right of the matrix. It is worth noting that the size of a prediction block, and hence the resulting residual block, may be different from the size of the transform block. For example, the prediction block may be split into smaller blocks to which separate transforms are applied.
- the quantization stage 406 converts the transform coefficients into discrete quantum values, which are referred to as quantized transform coefficients, using a quantizer value or a quantization level. For example, the transform coefficients may be divided by the quantizer value and truncated.
- the quantized transform coefficients are then entropy encoded by the entropy encoding stage 408 . Entropy coding may be performed using any number of techniques, including token and binary trees.
- the entropy-encoded coefficients, together with other information used to decode the block (which may include, for example, the type of prediction used, transform type, motion vectors, and quantizer value), are then output to the compressed bitstream 420 .
- the information to decode the block may be entropy coded into block, frame, slice, and/or section headers within the compressed bitstream 420 .
- the compressed bitstream 420 can also be referred to as an encoded video stream or encoded video bitstream; these terms will be used interchangeably herein.
- the reconstruction path in FIG. 4 can be used to ensure that both the encoder 400 and a decoder 500 (described below) use the same reference frames and blocks to decode the compressed bitstream 420 .
- the reconstruction path performs functions that are similar to functions that take place during the decoding process and that are discussed in more detail below, including dequantizing the quantized transform coefficients at the dequantization stage 410 and inverse transforming the dequantized transform coefficients at the inverse transform stage 412 to produce a derivative residual block (also called a derivative residual).
- the prediction block that was predicted at the intra/inter-prediction stage 402 can be added to the derivative residual to create a reconstructed block.
- the loop filtering stage 416 can be applied to the reconstructed block to reduce distortion, such as blocking artifacts.
- encoder 400 can be used to encode the compressed bitstream 420 .
- a non-transform based encoder 400 can quantize the residual signal directly without the transform stage 404 for certain blocks or frames.
- an encoder 400 can have the quantization stage 406 and the dequantization stage 410 combined into a single stage.
- FIG. 5 is a block diagram of a decoder 500 in accordance with implementations of this disclosure.
- the decoder 500 can be implemented in the receiving station 106 , for example, by providing a computer software program stored in the memory 204 .
- the computer software program can include machine instructions that, when executed by a processor, such as the CPU 202 , cause the receiving station 106 to decode video data in the manners described below.
- the decoder 500 can also be implemented in hardware included in, for example, the transmitting station 102 or the receiving station 106 .
- the decoder 500 similar to the reconstruction path of the encoder 400 discussed above, includes in one example the following stages to perform various functions to produce an output video stream 516 from the compressed bitstream 420 : an entropy decoding stage 502 , a dequantization stage 504 , an inverse transform stage 506 , an intra/inter-prediction stage 508 , a reconstruction stage 510 , a loop filtering stage 512 , and a post filtering stage 514 .
- Other structural variations of the decoder 500 can be used to decode the compressed bitstream 420 .
- the data elements within the compressed bitstream 420 can be decoded by the entropy decoding stage 502 to produce a set of quantized transform coefficients.
- the dequantization stage 504 dequantizes the quantized transform coefficients (e.g., by multiplying the quantized transform coefficients by the quantizer value), and the inverse transform stage 506 inverse transforms the dequantized transform coefficients using the selected transform type to produce a derivative residual that can be identical to that created by the inverse transform stage 412 in the encoder 400 .
- the decoder 500 can use the intra/inter-prediction stage 508 to create the same prediction block as was created in the encoder 400 , for example, at the intra/inter-prediction stage 402 .
- the prediction block can be added to the derivative residual to create a reconstructed block.
- the loop filtering stage 512 can be applied to the reconstructed block to reduce blocking artifacts. Other filtering can be applied to the reconstructed block.
- the post filtering stage 514 is applied to the reconstructed block to reduce blocking distortion, and the result is output as an output video stream 516 .
- the output video stream 516 can also be referred to as a decoded video stream; these terms will be used interchangeably herein.
- the decoder 500 can be used to decode the compressed bitstream 420 .
- the decoder 500 can produce the output video stream 516 without the post filtering stage 514 .
- the post filtering stage 514 is applied after the loop filtering stage 512 .
- the loop filtering stage 512 can include an optional deblocking filtering stage.
- the encoder 400 includes an optional deblocking filtering stage in the loop filtering stage 416 .
- FIG. 6 is a block diagram of a representation of a portion 600 of a frame, such as the frame 306 of FIG. 3 , according to implementations of this disclosure.
- the portion 600 of the frame includes four 64 ⁇ 64 blocks 610 , which may be referred to as superblocks, in two rows and two columns in a matrix or Cartesian plane.
- a superblock can have a larger or a smaller size. While FIG. 6 is explained with respect to a superblock of size 64 ⁇ 64, the description is easily extendable to larger (e.g., 128 ⁇ 128) or smaller superblock sizes.
- a superblock can be a basic or maximum coding unit (CU).
- Each superblock can include four 32 ⁇ 32 blocks 620 .
- Each 32 ⁇ 32 block 620 can include four 16 ⁇ 16 blocks 630 .
- Each 16 ⁇ 16 block 630 can include four 8 ⁇ 8 blocks 640 .
- Each 8 ⁇ 8 block 640 can include four 4 ⁇ 4 blocks 650 .
- Each 4 ⁇ 4 block 650 can include 16 pixels, which can be represented in four rows and four columns in each respective block in the Cartesian plane or matrix. The pixels can include information representing an image captured in the frame, such as luminance information, color information, and location information.
- a block such as a 16 ⁇ 16-pixel block as shown, can include a luminance block 660 , which can include luminance pixels 662 ; and two chrominance blocks 670 / 680 , such as a U or Cb chrominance block 670 , and a V or Cr chrominance block 680 .
- the chrominance blocks 670 / 680 can include chrominance pixels 690 .
- the luminance block 660 can include 16 ⁇ 16 luminance pixels 662
- each chrominance block 670 / 680 can include 8 ⁇ 8 chrominance pixels 690 , as shown. Although one arrangement of blocks is shown, any arrangement can be used.
- N ⁇ N blocks in some implementations, N ⁇ M, where N ⁇ M, blocks can be used.
- N ⁇ M 32 ⁇ 64 blocks, 64 ⁇ 32 blocks, 16 ⁇ 32 blocks, 32 ⁇ 16 blocks, or any other size blocks can be used.
- N ⁇ 2N blocks, 2N ⁇ N blocks, or a combination thereof can be used.
- video coding can include ordered block-level coding.
- Ordered block-level coding can include coding blocks of a frame in an order, such as raster-scan order, wherein blocks can be identified and processed starting with a block in the upper left corner of the frame, or a portion of the frame, and proceeding along rows from left to right and from the top row to the bottom row, identifying each block in turn for processing.
- the superblock in the top row and left column of a frame can be the first block coded
- the superblock immediately to the right of the first block can be the second block coded.
- the second row from the top can be the second row coded, such that the superblock in the left column of the second row can be coded after the superblock in the rightmost column of the first row.
- coding a block can include using quad-tree coding, which can include coding smaller block units with a block in raster-scan order.
- quad-tree coding can include coding smaller block units with a block in raster-scan order.
- the 64 ⁇ 64 superblock shown in the bottom-left corner of the portion of the frame shown in FIG. 6 can be coded using quad-tree coding in which the top-left 32 ⁇ 32 block can be coded, then the top-right 32 ⁇ 32 block can be coded, then the bottom-left 32 ⁇ 32 block can be coded, and then the bottom-right 32 ⁇ 32 block can be coded.
- Each 32 ⁇ 32 block can be coded using quad-tree coding in which the top-left 16 ⁇ 16 block can be coded, then the top-right 16 ⁇ 16 block can be coded, then the bottom-left 16 ⁇ 16 block can be coded, and then the bottom-right 16 ⁇ 16 block can be coded.
- Each 16 ⁇ 16 block can be coded using quad-tree coding in which the top-left 8 ⁇ 8 block can be coded, then the top-right 8 ⁇ 8 block can be coded, then the bottom-left 8 ⁇ 8 block can be coded, and then the bottom-right 8 ⁇ 8 block can be coded.
- Each 8 ⁇ 8 block can be coded using quad-tree coding in which the top-left 4 ⁇ 4 block can be coded, then the top-right 4 ⁇ 4 block can be coded, then the bottom-left 4 ⁇ 4 block can be coded, and then the bottom-right 4 ⁇ 4 block can be coded.
- 8 ⁇ 8 blocks can be omitted for a 16 ⁇ 16 block, and the 16 ⁇ 16 block can be coded using quad-tree coding in which the top-left 4 ⁇ 4 block can be coded, and then the other 4 ⁇ 4 blocks in the 16 ⁇ 16 block can be coded in raster-scan order.
- video coding can include compressing the information included in an original, or input, frame by omitting some of the information in the original frame from a corresponding encoded frame.
- coding can include reducing spectral redundancy, reducing spatial redundancy, reducing temporal redundancy, or a combination thereof.
- reducing spectral redundancy can include using a color model based on a luminance component (Y) and two chrominance components (U and V or Cb and Cr), which can be referred to as the YUV or YCbCr color model or color space.
- YUV color model can include using a relatively large amount of information to represent the luminance component of a portion of a frame and using a relatively small amount of information to represent each corresponding chrominance component for the portion of the frame.
- a portion of a frame can be represented by a high-resolution luminance component, which can include a 16 ⁇ 16 block of pixels, and by two lower resolution chrominance components, each of which representing the portion of the frame as an 8 ⁇ 8 block of pixels.
- a pixel can indicate a value (e.g., a value in the range from 0 to 255) and can be stored or transmitted using, for example, eight bits.
- Reducing spatial redundancy can include transforming a block into the frequency domain as described above.
- a unit of an encoder such as the entropy encoding stage 408 of FIG. 4 , can perform a DCT using transform coefficient values based on spatial frequency.
- Reducing temporal redundancy can include using similarities between frames to encode a frame using a relatively small amount of data based on one or more reference frames, which can be previously encoded, decoded, and reconstructed frames of the video stream.
- a block or a pixel of a current frame can be similar to a spatially corresponding block or pixel of a reference frame.
- a block or a pixel of a current frame can be similar to a block or a pixel of a reference frame at a different spatial location.
- reducing temporal redundancy can include generating motion information indicating the spatial difference (e.g., a translation between the location of the block or the pixel in the current frame and the corresponding location of the block or the pixel in the reference frame).
- Reducing temporal redundancy can include identifying a block or a pixel in a reference frame, or a portion of the reference frame, that corresponds with a current block or pixel of a current frame.
- a reference frame, or a portion of a reference frame, which can be stored in memory can be searched for the best block or pixel to use for encoding a current block or pixel of the current frame.
- the search may identify the block of the reference frame for which the difference in pixel values between the reference block and the current block is minimized, and can be referred to as motion searching.
- the portion of the reference frame searched can be limited.
- the portion of the reference frame searched which can be referred to as the search area, can include a limited number of rows of the reference frame.
- identifying the reference block can include calculating a cost function, such as a sum of absolute differences (SAD), between the pixels of the blocks in the search area and the pixels of the current block.
- SAD sum of absolute differences
- the spatial difference between the location of the reference block in the reference frame and the current block in the current frame can be represented as a motion vector.
- the difference in pixel values between the reference block and the current block can be referred to as differential data, residual data, or as a residual block.
- generating motion vectors can be referred to as motion estimation, and a pixel of a current block can be indicated based on location using Cartesian coordinates such as f x,y .
- a pixel of the search area of the reference frame can be indicated based on a location using Cartesian coordinates such as r x,y .
- a motion vector (MV) for the current block can be determined based on, for example, a SAD between the pixels of the current frame and the corresponding pixels of the reference frame.
- a CU or block may be coded using quad-tree partitioning or coding as shown in the example of FIG. 7 .
- the example shows quad-tree partitioning of a block 700 .
- the block 700 can be partitioned differently, such as by an encoder (e.g., the encoder 400 of FIG. 4 ) or a machine-learning model as described below.
- the block 700 is partitioned into four blocks, namely, the blocks 700 - 1 , 700 - 2 , 700 - 3 , and 700 - 4 .
- the block 700 - 2 is further partitioned into the blocks 702 - 1 , 702 - 2 , 702 - 3 , and 702 - 4 .
- the blocks 700 - 1 , 700 - 2 , 700 - 3 , and 700 - 4 are each of size N/2 ⁇ N/2 (e.g., 64 ⁇ 64), and the blocks 702 - 1 , 702 - 2 , 702 - 3 , and 702 - 4 are each of size N/4 ⁇ N/4 (e.g., 32 ⁇ 32). If a block is partitioned, it is partitioned into four equally sized, non-overlapping square sub-blocks.
- a quad-tree data representation is used to describe how the block 700 is partitioned into sub-blocks, such as blocks 700 - 1 , 700 - 2 , 700 - 3 , 700 - 4 , 702 - 1 , 702 - 2 , 702 - 3 , and 702 - 4 .
- a quadtree 704 of the partition of the block 700 is shown. Each node of the quadtree 704 is assigned a flag of “1” if the node is further split into four sub-nodes and assigned a flag of “0” if the node is not split.
- the flag can be referred to as a split bit (e.g., 1) or a stop bit (e.g., 0) and is coded in a compressed bitstream.
- a split bit e.g., 1
- a stop bit e.g., 0
- a node either has four child nodes or has no child nodes.
- a node that has no child nodes corresponds to a block that is not split further.
- Each of the child nodes of a split block corresponds to a sub-block.
- each node corresponds to a sub-block of the block 700 .
- the corresponding sub-block is shown between parentheses.
- a node 704 - 1 which has a value of 0, corresponds to the block 700 - 1 .
- a root node 704 - 0 corresponds to the block 700 .
- the value of the root node 704 - 0 is the split bit (e.g., 1).
- the flags indicate whether a sub-block of the block 700 is further split into four sub-sub-blocks.
- a node 704 - 2 includes a flag of “1” because the block 700 - 2 is split into the blocks 702 - 1 , 702 - 2 , 702 - 3 , and 702 - 4 .
- Each of nodes 704 - 1 , 704 - 3 , and 704 - 4 includes a flag of “0” because the corresponding blocks are not split.
- no flag of “0” or “1” is necessary for these nodes. That the blocks 702 - 5 , 702 - 6 , 702 - 7 , and 702 - 8 are not split further can be inferred from the absence of additional flags corresponding to these blocks.
- the smallest sub-block is 32 ⁇ 32 pixels, but further partitioning is possible.
- the quad-tree data for the quadtree 704 can be represented by the binary data of “10100,” where each bit represents a node of the quadtree 704 .
- the binary data indicates the partitioning of the block 700 to the encoder and decoder.
- the encoder can encode the binary data in a compressed bitstream, such as the compressed bitstream 420 of FIG. 4 , in a case where the encoder needs to communicate the binary data to a decoder, such as the decoder 500 of FIG. 5 .
- the blocks corresponding to the leaf nodes of the quadtree 704 can be used as the bases for prediction. That is, prediction can be performed for each of the blocks 700 - 1 , 702 - 1 , 702 - 2 , 702 - 3 , 702 - 4 , 700 - 3 , and 700 - 4 , referred to herein as coding blocks.
- the coding block can be a luminance block or a chrominance block. It is noted that, in an example, the block partitioning can be determined with respect to luminance blocks. The same partition, or a different partition, can be used with the chrominance blocks.
- a prediction type (e.g., intra- or inter-prediction) is determined at the coding block. That is, a coding block is the decision point for prediction.
- a mode decision process determines the partitioning of a coding block, such as the block 700 .
- the partition decision process calculates the RD costs of different combinations of coding parameters. That is, for example, different combinations of prediction blocks and predictions (e.g., intra-prediction, inter-prediction, etc.) are examined to determine an optimal partitioning.
- FIG. 8 is a flowchart of a process 800 for searching for a best mode to code a block.
- the process 800 is an illustrative, high level process of a mode decision process that determines a best mode. For ease of description, the process 800 is described with respect to selecting an intra-prediction mode for encoding a prediction block. Other examples of best modes that can be determined by processes similar to the process 800 include determining a transform type and determining a transform size.
- the process 800 can be implemented by an encoder, such as the encoder 400 of FIG. 4 , using a brute-force approach to mode decision.
- the process 800 receives an image block.
- the image block can be a prediction unit.
- each of the leaf node coding blocks e.g., a block 700 - 1 , 702 - 1 , 702 - 2 , 702 - 3 , 702 - 4 , 700 - 3 , or 700 - 4
- the image block can be one such prediction unit.
- the process 800 determines (e.g., selects, calculates, choses, etc.) a list of modes.
- the list of modes can include K modes, where K is an integer number.
- the list of modes can be denoted ⁇ m 1 , m 2 , . . . , m k ⁇ .
- the encoder can have available a list of intra-prediction modes.
- the list of available intra-prediction modes can be ⁇ DC_PRED, V_PRED, H_PRED, D45_PRED, D135_PRED, D117_PRED, D153_PRED, D207_PRED, D63_PRED, SMOOTH_PRED, SMOOTH_V_PRED, and SMOOTH_H_PRED, PAETH_PRED ⁇ .
- a description of these intra-prediction modes is omitted as the description is not pertinent to the understanding of this disclosure.
- the list of modes determined at 804 can be any subset of the list of available intra-prediction modes.
- the process 800 initializes a BEST_COST variable to a high value (e.g., INT_MAX, which may be equal to 2,147,483,647) and initializes a loop variable i to 1, which corresponds to the first mode to be examined.
- a high value e.g., INT_MAX, which may be equal to 2,147,483,647
- the process 800 computes (e.g., calculates) an RD_COST i for the mode i .
- the process 800 proceeds back to 808 ; otherwise the process 800 proceeds to 816 .
- the process 800 outputs the index of the best mode, BEST_MODE. Outputting the best mode can mean returning the best mode to a caller of the process 800 . Outputting the best mode can mean encoding the image using the best mode. Outputting the best mode can have other semantics.
- the process 800 terminates at 820 .
- FIG. 8 illustrates that a brute-force approach to mode decision is largely a serial process that essentially codes an image block X by using candidate modes to determine the mode with the best cost.
- Machine learning can be used to reduce the computational complexity in mode decisions. That is, mode decisions of an encoder may be implemented using deep learning. Deep learning refers to machine-learning models where the network learns from unstructured or unlabeled data, and a deep-learning model may be referred to as a deep neural network.
- a machine-learning model such as a classification deep-learning model, includes two main portions: a feature-extraction portion and a classification portion.
- the feature-extraction portion detects features of the model.
- the classification portion attempts to classify the detected features into a desired response.
- Each of the portions can include one or more layers and/or one or more operations.
- a CNN is an example of a machine-learning model.
- a simplified CNN 900 is shown in FIG. 9 .
- the feature-extraction portion 902 includes a set of convolutional operations, which may be a series of filters arranged in convolution layers 904 , 906 , 908 that are used to filter an input image based on a filter (typically a square of size k, without loss of generality).
- these filters can be used to find features in an input image.
- the features can include, for example, edges, corners, endpoints, and so on. As the number of stacked convolutional operations increases, later convolutional operations can find higher-level features.
- a number of fully connected (FC) layers 912 , 914 may look at all the input features of an image in order to generate a high-level classifier.
- stages e.g., a series
- these classifiers form a classification portion 910 .
- a CNN network is often composed of a number of convolutional operations (e.g., the convolution layers 904 , 906 , 908 of the feature-extraction portion 902 ) followed by a number of FC layers 912 , 914 forming a classification portion.
- the number of operations of each type and their respective sizes are typically determined during the training phase of the machine learning.
- additional layers and/or operations can be included in each portion.
- FC layers 912 , 914 may be referred to as Dense operations.
- a convolution operation of any of the convolution layers 904 , 906 , 908 can use a SeparableConvolution2D or Convolution2D operation.
- a convolution layer can be a group of operations starting with a Convolution2D or SeparableConvolution2D operation followed by zero or more operations (e.g., Pooling, Dropout, Activation, Normalization, BatchNormalization, other operations, or a combination thereof), until another convolutional layer, a Dense operation, or the output of the CNN 900 is reached.
- operations e.g., Pooling, Dropout, Activation, Normalization, BatchNormalization, other operations, or a combination thereof
- a Dense layer can be a group of operations or layers starting with a Dense operation (i.e., a FC layer 912 , 914 ) followed by zero or more operations (e.g., Pooling, Dropout, Activation, Normalization, BatchNormalization, other operations, or a combination thereof) until another convolution layer, another Dense layer, or the output of the CNN 900 is reached.
- a Dense operation i.e., a FC layer 912 , 914
- zero or more operations e.g., Pooling, Dropout, Activation, Normalization, BatchNormalization, other operations, or a combination thereof
- the boundary between feature-extraction portion 902 based on convolutional networks and a feature classification portion 910 using Dense operations can be marked by a Flatten operation, which flattens the multidimensional matrix from the feature extraction into a vector.
- each of the convolution layers 904 , 906 , 908 may consist of a set of filters. While a filter is applied to a subset of the input data at a time, the filter is applied across the full input, such as by sweeping over the input.
- the operations performed by a convolution layer are typically linear/matrix multiplications.
- the output of the convolution filter may be further filtered using an activation function.
- the activation function may be a linear function or non-linear function (e.g., a sigmoid function, an arcTan function, a tan H function, a ReLu function, or the like).
- Each of the FC layers 912 , 914 is a linear operation in which every input is connected to every output by a weight. Linear operations of the FC layers are generally followed by a non-linear activation function to generate an output of a layer.
- a Flatten operation e.g., a flattening layer
- the last convolution layer e.g., the convolution layer 908
- the first FC layer e.g., the FC layer 912
- a block residual is a (linear) difference between an image block and a prediction block (e.g., at the intra/inter-prediction stage 402 ), but that residual is then subjected to non-linear operations including computing the transform of the residual (e.g., at the transform stage 404 ), and applying quantization to the transformed residual (e.g., at the quantization stage 406 ).
- computing the number of bits (rate R) required to encode the image block rate and the distortion D between the image block and a reconstructed version of the image block (e.g., as performed by the reconstruction path in FIG. 4 ) to obtain the RD cost as a scalar value D+ ⁇ R also involves non-linear operations.
- the distortion can be a mean square error, a sum of absolute differences error, or some other error metric between pixel values of the image block and the reconstructed block.
- the Lagrangian parameter or Lagrange multiplier ⁇ itself may have a non-linear relationship to the quantization parameter QP used in quantization of the transformed residual.
- codecs that implement the H.264 or HEVC standard may derive the multiplier according to 0.85 ⁇ 2 (QP ⁇ 12)/3
- codecs that implement the H.263 standard may derive the multiplier according to 0.85 ⁇ QP 2
- codecs that implement the VP9 standard may derive the multiplier according to 88 ⁇ QP 2 /24
- codecs that implement the AV1 standard may derive the multiplier according to 0.12 ⁇ QP 2 /256.
- labeled partitions may be compared with predicted partitions using a loss function.
- a loss function measures how well a predicted value p of the model matches the expected outcome y, in this example how a predicted partition of a block matches the labeled partition of the block from the training data.
- a loss function may be a MSE loss function, a binary cross entropy loss function, or a cross entropy loss function.
- BinaryCrossEntropy ⁇ ( y , p ) 1 N ⁇ ⁇ n ( y [ n ] ⁇ log ⁇ ( p [ n ] ) + ( 1 - y [ n ] ) ⁇ log ⁇ ( 1 - p [ n ] ) ) .
- the cross entropy function is the general case of the binary cross entropy function where there are only two choices.
- the decision process may be represented by one prediction variable taking value in a finite alphabet A.
- the decision process may be as shown in the formula for a cross entropy function as follows:
- i represents the index of the choice of the prediction variable in A.
- i is either 0 or 1.
- the prediction variable may take values in the alphabet ⁇ 0, 1, . . . A ⁇ 1 ⁇ (e.g., A>2)
- i can be 0, . . . , A ⁇ 1 . . . .
- the function iterates over the number of available prediction classes using the index i.
- the cross entropy function can be reduced to the binary cross entropy function above.
- the partition decision may be a quad-tree decision process.
- a non-split decision for a block of dimensions b ⁇ b (also referred to herein as the block b ⁇ b) implies that remaining loss functions for the corresponding remaining split decisions of the sub-blocks of dimensions b/2 ⁇ b/2 (also referred to herein as the block b/2 ⁇ b/2) do not need to be evaluated.
- y 64 and p 64 correspond to the labeled partition and the predicted partition (or prediction) for a 64 ⁇ 64 block, respectively.
- y 32 i and p 32 i correspond to the labeled partition and prediction for the 32 ⁇ 32 blocks, respectively
- y 16 i,j and p 16 i,j correspond to the labeled partition and prediction for the 16 ⁇ 16 blocks, respectively.
- 8 ⁇ 8 partitioning is assumed. This is one example of the modified loss function. Additional or fewer terms may be included. For example, an additional term would be added where the largest block dimensions are 128 ⁇ 128 pixels.
- the weighted function may proportionally weight the partition decisions, such as by applying a proportional factor to the rate and distortion costs.
- the proportional factor of the weighted function may be developed by considering the rate and distortion costs resulting from the partition decisions.
- Formula (3) determines rate and distortion for a block of dimensions b ⁇ b (also referred to as block b ⁇ b) and computes recursively the best decision for each sub-block i, where RDC b ⁇ b nonsplit is the RD cost for not splitting the block b ⁇ b, RDC b ⁇ b is the best RD cost between the splitting and non-splitting decisions for the block b ⁇ b, RDC b/2 ⁇ b/2 i is the best RD cost between the splitting and non-splitting decisions for the sub-blocks of dimensions b/2 ⁇ b/2, and ⁇ b ⁇ b is the additional cost incurred when splitting the block b ⁇ b.
- formula (3) compares the costs of not splitting a block b ⁇ b with the costs of splitting the block b ⁇ b into four b/2 ⁇ b/2 sub-blocks, and selects the lower cost to make the partition decision.
- Formula (3) may be converted into a loss function for training a deep-learning model by recognizing that the decision of whether or not to split is a binary decision. Assuming that the variable p b represents the decision of a block, then the variable p b may belong to the set of 0 and 1 (p b ⁇ [0,1]). For labeled training data, the variable p b can have a value of 0 or 1 in this example.
- formula (4) may be expanded to consider all partitions of the recursive partitioning decision, resulting in the following loss function:
- the weight applied to a partition decision of the partition decisions may be equal to the rate-distortion value of the partition decision normalized by a lowest rate-distortion value resulting from the plurality of partition decisions. That is, the proportional factor may be 1/RDC MIN.
- a predicted rate-distortion value comprises a first term representing a rate-distortion cost of a non-splitting decision for a block and a second term representing a rate-distortion cost of a splitting decision for the block that splits the block into a plurality of sub-blocks.
- the rate-distortion cost of the splitting decision for the block that splits the block into the plurality of sub-blocks may comprise a respective rate-distortion cost for partition decisions of each of the plurality of sub-blocks.
- the rate-distortion cost of the first term is weighted by a lowest rate-distortion value for encoding the training block.
- the rate-distortion cost of the second term comprises weighting each of the respective rate-distortion costs for partitioning each of the plurality of sub-blocks by the lowest rate-distortion value for encoding the training block.
- formula (6) may develop a rate-distortion cost loss function Loss (RDC) that is based upon a relationship between rate-distortion values and respective predicted rate-distortion values.
- RDC rate-distortion cost loss function Loss
- the rate-distortion cost loss function may be a MSE function or an exponential function.
- the rate-distortion cost loss function of formula (7) exponentially penalizes a bad decision.
- a bad decision is a decision that is less than optimal, e.g., the predicted RD cost for a partition is higher than the RD cost of the labeled data used for training.
- the rate-distortion cost loss function exponentially penalizes a predicted partition that does not match a selected partition decision for the training block that results from an exhaustive partition search (e.g., of a block-based encoder).
- this determination is relatively low in complexity. This low complexity is due to the ability to normalize the RD costs by dividing them by the RD cost of the labeled data because the RD cost of the best partition (e.g., RDC MIN ) is known.
- the partition loss function Loss(partition) may be based on a relationship between partition decisions of training blocks and respective predicted partitions.
- the partition loss function may be a MSE loss function, a binary cross-entropy loss function, or a cross-entropy loss function.
- the hierarchical binary cross-entropy loss function of formula (1) or the weighted loss function of formula (2) may be used.
- the loss function of formula (8) may weight the partition loss function and the rate-distortion cost loss function differently to determine the combined loss function.
- the weighting may be achieved using the variables ⁇ and ⁇ .
- the variables ⁇ and ⁇ are multipliers to balance the weight of these functions, and may be pre-defined or tuned during training.
- the function Loss(RDC) may be used to first train the model, and then the function Loss(partition) may be used to fine tune the model.
- ⁇ + ⁇ 1, where 1> ⁇ , ⁇ >0.
- the variable ⁇ may be 10%, and the variable ⁇ may be 90%.
- Other values for the variables ⁇ and ⁇ are possible to weight the partition loss function and the rate-distortion cost loss function.
- the machine-learning model may be trained/tuned using the loss function by applying a greater weight to the partition loss function than to the rate-distortion cost loss function.
- formula (6) improves the use of a weighted function by allowing the weight w b to be adjusted for each block of the different partition decisions.
- Formula (2) uses a fixed value for the weight w b .
- FIG. 10 A illustrates a partition decision for a b ⁇ b block 1000 with relatively uniform content
- FIG. 10 B illustrates a partition decision for a b ⁇ b block 1002 with more detailed content (e.g., more differences in the pixel values than the relatively uniform content of FIG. 10 A ).
- a partition decision process performed by a (e.g., software) encoder can be used to extract the partition y b , and the partition prediction obtained from a machine learning/deep learning model is identified as p b .
- the encoder is most likely to set y b to a value such that the b ⁇ b block 1000 should not be split (i.e., not partitioned into b/2 ⁇ b/2 blocks shown by the dashed lines) because the block 1000 may be represented by a single (intensity and color) component.
- y b 1.
- the partition loss cost will be w b when Loss(partition) is a weighted loss function.
- the RD costs for the non-split and split decisions may be very similar. As a result, the RD costs can be almost the same, yielding a small penalty. That is, Loss(RDC) is small.
- the rate in the RD cost is used to take into account how an encoder works with the given content.
- rate provides an estimate about the complexity of a block given the encoder. Such complexity aspects are not captured in distortion.
- i is the index of the non-quadtree partitions to be considered for the current block size b ⁇ b.
- k is the index of sub-partitions within a current partition i such that RDC sub-partition(k) i is the RD cost for the current sub-partition k of the current non-quadtree partition i.
- every block size level down to the minimum block size involves a decision of whether to perform a vertical partition, a horizontal partition, a split partition, or no partition. The decision, at a particular block size level, as to whether or not to partition and which partition is best may be based on error values such as the RD cost. If there is no partition at a block size level, further partitioning does not occur. Also, in this example, if the vertical or horizontal partition is selected, further partitioning to child nodes does not occur. If the split partition is selected, further partitioning is possible.
- a partition or non-partition decision is made. No partition results in a final block size of b ⁇ b pixels. Otherwise, a vertical partition of a b ⁇ b block comprises two partitions k of b/2 ⁇ b pixels, a horizontal partition of a b ⁇ b block comprises two partitions k of b ⁇ b/2 pixels), or a split partition of a b ⁇ b block comprises four partitions of b/2 ⁇ b/2 each.
- recursive partitioning of each of the b/2 ⁇ b/2 blocks is considered (noted by “R” in FIG. 11 ).
- No partition of a b/4 ⁇ b/4 block results in a final block size of b/4 ⁇ b/4 pixels.
- the vertical partition of a b/4 ⁇ b/4 block comprises two partitions k of b/8 ⁇ b/4 pixels
- the horizontal partition of a b/4 ⁇ b/4 block comprises two partitions k of b/4 ⁇ b/8 pixels
- the split partition of a b/4 ⁇ b/4 block comprises four partitions of b/8 ⁇ b/8 pixels each.
- a partition can be represented by a tree.
- a tree can be represented by a vector.
- P denotes the set of all valid partitions (or, equivalently, the respective representations of the partitions)
- a non-square partition can correspond to an internal node of the quadtree having a number of children that is greater than or equal to two children.
- a partition type may split a b ⁇ b block into two horizontally adjacent square blocks, each of size b/2 ⁇ b/2, and a rectangular prediction unit of size b ⁇ b/2.
- a partition type may split a b ⁇ b block into a rectangular prediction unit of size b ⁇ b/2 and two horizontally adjacent square blocks, each of size b/2 ⁇ b/2.
- a partition type may split a b ⁇ b block into two vertically adjacent square blocks, each of size b/2 ⁇ b/2, and a rectangular prediction unit of size b/2 ⁇ b.
- a partition type may split a b ⁇ b block into a rectangular prediction unit of size b/2 ⁇ b and two vertically adjacent square blocks, each of size b/2 ⁇ b/2.
- a partition type may splits a b ⁇ b block into four vertically adjacent rectangular blocks, each of size b ⁇ b/4.
- a partition type may split a b ⁇ b block into four horizontally adjacent rectangular blocks, each of size b/4 ⁇ b. This adds up to another six partition types, which may be referred to as extended partition types.
- FIG. 11 also aids in the understanding of the development of formula (5), and hence of Loss(RDC). More particularly, and as shown by the shaded blocks of FIG. 11 , the partition decision can involve recursive partitioning, where a split partition mode requires consideration of the available partitions for each resulting block. More broadly, in order to determine whether the partition or non-partition of a block b ⁇ b is better, the rate and distortion resulting from not partitioning the block may be compared to the rate and distortion totals resulting from subsequent partition decisions. In FIG. 11 and formula (5), only the split partition mode can result in further partition decisions. In other implementations, however, further partition decisions for other partition modes are possible.
- the structure of FIG. 12 may be used.
- the model 1200 may be a CNN having a structure as described in regards to the example of FIG. 9 .
- the model 1200 is trained, using training data 1204 , to infer a mode decision for an image block.
- the image block can be a block of an image (e.g., a video frame) that is to be encoded using inter- or intra-prediction.
- the mode decision is a partition decision for the image block.
- the partition decision may be a quad-tree partition decision of the image block.
- the partition decision can be a partition that includes partitions described with respect to FIG. 11 .
- a RD cost estimator 1202 is attached to the model 1200 , but without any learnable parameters.
- This combination of the model 1200 and the RD cost estimator 1202 may be referred to herein as a machine-learning module for ease of explanation.
- the model 1200 can be trained using the training data 1204 for a plurality of video blocks (also called training blocks) as inputs to the training of the machine-learning module.
- the plurality of training blocks were encoded by traditional encoding methods such as described with respect to FIGS. 4 and 6 - 8 , using an encoder.
- the training data 1204 can include, for a training block of the plurality of training blocks, the partition decisions determined by an encoder implementing the traditional encoding methods, for example, all partitions of all partition modes used in the exhaustive search of the encoder.
- the training data can include, for a training block of the plurality of training blocks, a rate-distortion value resulting from encoding the training block using the partition decision.
- the rate-distortion value resulting from encoding the training block using the partition decision may comprise a rate-distortion cost for encoding the training block without further partitioning the training block and a cost incurred when splitting the training block.
- the rate-distortion value can be values for ⁇ and o corresponding to RDC b and ⁇ b (and accordingly RDC MIN ) for respective partition decisions.
- RDC MIN rate-distortion value
- Many indications (e.g., representations) of the partition decision are possible.
- a vector (e.g., sequence) of binary flags, as described with respect to the quadtree 704 can be used, with respective values for ⁇ and o for each partition decision.
- a subset 1206 of the training data 1204 is input into the RD cost estimator 1202 in order to estimate the RD cost of the partition output from the model 1200 .
- the rate-distortion cost estimator can receive a predicted partition from the machine-learning model, optionally along with the rate-distortion values (e.g., values for ⁇ and o corresponding to RDC b and ⁇ b ) for respective partition decisions, and estimate a predicted rate-distortion value for the loss function.
- parameters of the model 1200 are generated such that the model 1200 infers, for a training block, at least some of the partition/non-partition decisions (predicted partitions p b ), such as the quad-tree partitioning decisions described in regards to FIG. 7 , and the predicted partitions are used to calculate Loss(RDC) according to formula (7).
- the predicted partitions p b are represented in FIG. 12 by arrows labeled 64, 32, and 8/16, which in this example represents the quad-tree decisions for blocks with dimensions 64 ⁇ 64, 32 ⁇ 32, and 16 ⁇ 16, respectively.
- the predicted partitions p b together with the labeled partitions y b of the partition decision of the training data 1204 may be used to determine Loss(partition) according to, for example, formula (1) or formula (2).
- the values Loss(partition) and Loss(RDC) may be used in combination to minimize the value Loss in the training of the model 1200 .
- this technique for training the model 1200 estimates the partition decision using pre-computed values for ⁇ and o extracted from an exhaustive analysis of the encoder and then uses that to estimate the cost of the partitions.
- An alternative technique is to estimate values for ⁇ and o directly as part of the training of the model 1200 . Then, the RD cost could be incorporated directly into the model 1200 to produce the partitions instead of using the separate RD cost estimator 1202 . However, this latter technique is less desirable because estimating ⁇ and o is significantly more difficult.
- the model 1200 learns (e.g., trains, builds, derives, etc.) a mapping (i.e., a function) that accepts, as input, a block and outputs a partitioning of the block.
- a mapping i.e., a function
- the model 1200 be trained using a large number of input training blocks that respectively result in different partition decisions such that each partition decision is associated with multiple input training blocks.
- FIG. 13 is a flowchart of a process 1300 for encoding using inferences obtained from the machine-learning/deep-learning model 1200 trained according to FIG. 12 .
- the model 1200 can be used in an inference phase while encoding a current block. That is, the RD cost estimator 1202 is removed from its attachment to the model 1200 during inference, as a main goal of this network is to obtain a partitioning for image blocks.
- an input is presented to the model 1200 .
- the input is an image block to be encoded.
- the image block can be a one color-plane block.
- the block can be a luminance block.
- the block can be the largest CU for the encoder. While a block of size 64 ⁇ 64 is described in the development of the formulas above, the block can be of any size.
- the block can be 128 ⁇ 128 pixels, 32 ⁇ 32 pixels, or any size block for which a partition is typically determined by an encoder.
- the encoder can be any block-based encoder.
- model 1200 infers or obtains a partition decision for the block.
- model 1200 may provide an output (referred to as a partition decision) that is indicative of a (e.g., quad-tree) partitioning of the block.
- the partition decision may comprise one or more decisions of whether or not to split the block into different partitions until a smallest partition size is reached such as described with regard to FIG. 7 or FIG. 11 .
- the partition decision may comprise a single decision—namely that the block should not be split.
- the partition decision may comprise a combination of splitting and non-splitting decisions for the block.
- the model 1200 can be used by an encoder where the smallest possible block partition is an 8 ⁇ 8 partition.
- decisions or determinations of whether to split a block are made by the model 1200 for blocks (i.e., sub-blocks of the largest CU) that are 16 ⁇ 16 or larger in this example.
- the model 1200 can be used by an encoder where the smallest possible block partition is a 4 ⁇ 4 partition. As such, decisions or determinations of whether to split a block are made by the model 1200 for blocks (i.e., sub-blocks of the largest CU) that are 8 ⁇ 8 or larger in this example.
- the image block is encoded using the partition decision.
- the model 1200 provides input to an encoder, such as the encoder 400 , or can be incorporated into the encoder.
- the partition decision defines a respective block size for one or more blocks (e.g., sub-blocks) that are predicted at the intra/inter-prediction stage 402 of FIG. 4 .
- the block size(s) may be provided to the intra/inter-prediction stage 402 , or the model 1200 may be incorporated into the intra/inter-prediction stage 402 .
- the remainder of the encoding steps for each block may proceed in accordance with the description of FIG.
- the partition decision may also be encoded into the compressed bitstream.
- a decoder such as the decoder 500 of FIG. 5
- example or “implementation” are used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as “example” or “implementation” is not necessarily to be construed as being preferred or advantageous over other aspects or designs. Rather, use of the words “example” or “implementation” is intended to present concepts in a concrete fashion.
- the term “or” is intended to mean an inclusive “or” rather than an exclusive “or.” That is, unless specified otherwise or clearly indicated otherwise by the context, “X includes A or B” is intended to mean any of the natural inclusive permutations thereof.
- Implementations of the transmitting station 102 and/or the receiving station 106 can be realized in hardware, software, or any combination thereof.
- the hardware can include, for example, computers, intellectual property (IP) cores, application-specific integrated circuits (ASICs), programmable logic arrays, optical processors, programmable logic controllers, microcode, microcontrollers, servers, microprocessors, digital signal processors, or any other suitable circuit.
- IP intellectual property
- ASICs application-specific integrated circuits
- programmable logic arrays optical processors
- programmable logic controllers programmable logic controllers
- microcode microcontrollers
- servers microprocessors, digital signal processors, or any other suitable circuit.
- signal processors should be understood as encompassing any of the foregoing hardware, either singly or in combination.
- signals and “data” are used interchangeably. Further, portions of the transmitting station 102 and the receiving station 106 do not necessarily have to be implemented in the same manner.
- the transmitting station 102 or the receiving station 106 can be implemented using a general-purpose computer or general-purpose processor with a computer program that, when executed, carries out any of the respective methods, algorithms, and/or instructions described herein.
- a special-purpose computer/processor which can contain other hardware for carrying out any of the methods, algorithms, or instructions described herein, can be utilized.
- the transmitting station 102 and the receiving station 106 can, for example, be implemented on computers in a video conferencing system.
- the transmitting station 102 can be implemented on a server, and the receiving station 106 can be implemented on a device separate from the server, such as a handheld communications device.
- the transmitting station 102 using an encoder 400 , can encode content into an encoded video signal and transmit the encoded video signal to the communications device.
- the communications device can then decode the encoded video signal using a decoder 500 .
- the communications device can decode content stored locally on the communications device, for example, content that was not transmitted by the transmitting station 102 .
- Other transmitting station 102 and receiving station 106 implementation schemes are available.
- the receiving station 106 can be a generally stationary personal computer rather than a portable communications device, and/or a device including an encoder 400 may also include a decoder 500 .
- implementations of the present disclosure can take the form of a computer program product accessible from, for example, a tangible computer-usable or computer-readable medium.
- a computer-usable or computer-readable medium can be any device that can, for example, tangibly contain, store, communicate, or transport the program for use by or in connection with any processor.
- the medium can be, for example, an electronic, magnetic, optical, electromagnetic, or semiconductor device. Other suitable mediums are also available.
Abstract
Description
y 64 log(p 64)+(1−y 64)(log(1−p 64)+Σi=0 3 y 32 i log(p 32 i)+(1−y 32 i)(log(1−p 32 i)+Σj=0 3(y 16 i,j log(p 16 i,j)+(1−y 16 i,j)log(1−p 16 i,j))) (1)
w 64 y 64 log(p 64)+(1−y 64)(log(1−p 64)+w 32Σi=0 3 y 32 i log(p 32 i)+(1−y 32 i)(log(1−p 32 i)+w 16Σj=0 3(y 16 i,j log(p 16 i,j)+(1−y 16 i,j)log(1−p 16 i,j))) (2)
RDC b×b =RDC b×b nonsplit< >Δb×bΣi=0 3 RDC b/2×b/2 i (3)
RDC b/2×b/2 =p b RDC b×b nonsplit+(1−p b)(Δb×bΣi=0 3 RDC b/2×b/2 i (4)
Δ32 iΣj=0 3 p 16 i,j RDC 16 i,j,nonsplit+(1−p 16 i,j)RDC 16 i,j,split
RDC(p)=p 64 RDC 64 nonsplit+(1−p 64)(Δ64+Σi=0 3(p 32 i RDC 32 i,nonsplit+(1−p 32 i)(Δ32 i+Σj=0 3(p 16 i,j RDC 16 i,j,nonsplit+(1−p 16 i,j)RDC 16 i,j,split)))) (5)
RDC′(p)=p 64 w 64+(1−p 64)(o 64+Σi=0 3(p 32 i w 32 i+(1−p 32 i)(o 32 i+Σj=0 3(p 16 i,j w 16 i,j+(1+p 16 i,j) . . . )))) (6)
Loss(RDC)=e RDC′(p) −e RDC(y) =e RDC′(p) −e RDC(1) (7)
Loss=αLoss(partition)+βLoss(RDC) (8)
RDC b×b=Σi p b,i RDC b×b i and (9)
RDC b×b i=Δb×b i+Σk RDC sub-partition(k) i (10)
Claims (20)
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2019/023339 WO2020190297A1 (en) | 2019-03-21 | 2019-03-21 | Using rate distortion cost as a loss function for deep learning |
Publications (2)
Publication Number | Publication Date |
---|---|
US20220201316A1 US20220201316A1 (en) | 2022-06-23 |
US11956447B2 true US11956447B2 (en) | 2024-04-09 |
Family
ID=66041700
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US17/601,639 Active 2039-12-21 US11956447B2 (en) | 2019-03-21 | 2019-03-21 | Using rate distortion cost as a loss function for deep learning |
Country Status (4)
Country | Link |
---|---|
US (1) | US11956447B2 (en) |
EP (1) | EP3942475A1 (en) |
CN (1) | CN113767400A (en) |
WO (1) | WO2020190297A1 (en) |
Families Citing this family (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11948090B2 (en) * | 2020-03-06 | 2024-04-02 | Tencent America LLC | Method and apparatus for video coding |
US11694038B2 (en) * | 2020-09-23 | 2023-07-04 | Capital One Services, Llc | Systems and methods for generating dynamic conversational responses through aggregated outputs of machine learning models |
US20240013046A1 (en) * | 2020-10-20 | 2024-01-11 | Nokia Technologies Oy | Apparatus, method and computer program product for learned video coding for machine |
CN112633511B (en) * | 2020-12-24 | 2021-11-30 | 北京百度网讯科技有限公司 | Method for calculating a quantum partitioning function, related apparatus and program product |
US20220321879A1 (en) * | 2021-03-30 | 2022-10-06 | Isize Limited | Processing image data |
CN114513660B (en) * | 2022-04-19 | 2022-09-06 | 宁波康达凯能医疗科技有限公司 | Interframe image mode decision method based on convolutional neural network |
CN115334308B (en) * | 2022-10-14 | 2022-12-27 | 北京大学深圳研究生院 | Learning model-oriented coding decision processing method, device and equipment |
CN116170594B (en) * | 2023-04-19 | 2023-07-14 | 中国科学技术大学 | Coding method and device based on rate distortion cost prediction |
Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20180176577A1 (en) * | 2013-01-30 | 2018-06-21 | Atul Puri | Content adaptive gain compensated prediction for next generation video coding |
US20190045195A1 (en) * | 2018-03-30 | 2019-02-07 | Intel Corporation | Reduced Partitioning and Mode Decisions Based on Content Analysis and Learning |
US20190147105A1 (en) * | 2017-11-15 | 2019-05-16 | Google Llc | Partitioning videos |
US20200162729A1 (en) * | 2017-07-28 | 2020-05-21 | Electronics And Telecommunications Research Institute | Image processing method, and image encoding/decoding method and device which use same |
US20200344474A1 (en) * | 2017-12-14 | 2020-10-29 | Interdigital Vc Holdings, Inc. | Deep learning based image partitioning for video compression |
Family Cites Families (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
GB2492163B (en) * | 2011-06-24 | 2018-05-02 | Skype | Video coding |
CN102917225B (en) * | 2012-10-25 | 2015-10-28 | 电子科技大学 | HEVC intraframe coding unit fast selecting method |
CN103780910A (en) * | 2014-01-21 | 2014-05-07 | 华为技术有限公司 | Method and device for determining block segmentation mode and optical prediction mode in video coding |
CN106454360B (en) * | 2016-10-26 | 2019-05-07 | 北京大学深圳研究生院 | The code rate estimation method of intraframe coding in Video coding |
CN106713935B (en) * | 2017-01-09 | 2019-06-11 | 杭州电子科技大学 | A kind of HEVC block division fast method based on Bayesian decision |
US10382770B2 (en) * | 2017-02-06 | 2019-08-13 | Google Llc | Multi-level machine learning-based early termination in partition search for video encoding |
CN107690070B (en) * | 2017-08-23 | 2019-11-26 | 南通河海大学海洋与近海工程研究院 | Based on distributed video compression perceptual system and method without feedback code rate control |
CN108184129B (en) * | 2017-12-11 | 2020-01-10 | 北京大学 | Video coding and decoding method and device and neural network for image filtering |
CN108596902B (en) * | 2018-05-04 | 2020-09-08 | 北京大学 | Multi-task full-reference image quality evaluation method based on gating convolutional neural network |
-
2019
- 2019-03-21 CN CN201980095978.1A patent/CN113767400A/en active Pending
- 2019-03-21 EP EP19715674.8A patent/EP3942475A1/en active Pending
- 2019-03-21 WO PCT/US2019/023339 patent/WO2020190297A1/en active Application Filing
- 2019-03-21 US US17/601,639 patent/US11956447B2/en active Active
Patent Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20180176577A1 (en) * | 2013-01-30 | 2018-06-21 | Atul Puri | Content adaptive gain compensated prediction for next generation video coding |
US20200162729A1 (en) * | 2017-07-28 | 2020-05-21 | Electronics And Telecommunications Research Institute | Image processing method, and image encoding/decoding method and device which use same |
US20190147105A1 (en) * | 2017-11-15 | 2019-05-16 | Google Llc | Partitioning videos |
US20200344474A1 (en) * | 2017-12-14 | 2020-10-29 | Interdigital Vc Holdings, Inc. | Deep learning based image partitioning for video compression |
US20190045195A1 (en) * | 2018-03-30 | 2019-02-07 | Intel Corporation | Reduced Partitioning and Mode Decisions Based on Content Analysis and Learning |
Non-Patent Citations (3)
Title |
---|
Chen Ke et al.; "CNN Oriented Fast CU Partition Decision and P_U Mode Decision for HEVC Intra Encoding"; 2018 14th IEEE International Conference on Solid-State and Integrated Circuit Technology, IEEE, Oct. 31, 2018, pp. 1-3. |
International Search Report and Written Opinion of International Application No. PCT/US2019/023339 dated Dec. 13, 2019, 23 pgs. |
MAli Xu et al; "Reducing Complexity of HEVC: A Deep Learning Approach"; Cornell University Library, Sep. 19, 2017, 17 pgs. |
Also Published As
Publication number | Publication date |
---|---|
WO2020190297A1 (en) | 2020-09-24 |
US20220201316A1 (en) | 2022-06-23 |
CN113767400A (en) | 2021-12-07 |
EP3942475A1 (en) | 2022-01-26 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11310501B2 (en) | Efficient use of quantization parameters in machine-learning models for video coding | |
US11310498B2 (en) | Receptive-field-conforming convolutional models for video coding | |
US11689726B2 (en) | Hybrid motion-compensated neural network with side-information based video coding | |
US10848765B2 (en) | Rate/distortion/RDcost modeling with machine learning | |
US11956447B2 (en) | Using rate distortion cost as a loss function for deep learning | |
US11025907B2 (en) | Receptive-field-conforming convolution models for video coding | |
US10812813B2 (en) | Multi-level machine learning-based early termination in partition search for video coding | |
US11601644B2 (en) | Image and video coding using machine learning prediction coding models | |
WO2020061008A1 (en) | Receptive-field-conforming convolution models for video coding | |
US10419777B2 (en) | Non-causal overlapped block prediction in variable block size video coding | |
US10531124B1 (en) | Multi-stage coding block partition search | |
US20230007284A1 (en) | Ultra Light Models and Decision Fusion for Fast Video Coding | |
EP4338416A1 (en) | End-to-end learning-based, eg neural network, pre-processing and post-processing optimization for image and video coding | |
US20240098280A1 (en) | Video Coding With Guided Machine Learning Restoration |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
FEPP | Fee payment procedure |
Free format text: ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: BIG.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:COELHO, CLAUDIONOR;KUUSELA, AKI;YOUNG, JOSEPH;AND OTHERS;SIGNING DATES FROM 20190319 TO 20190320;REEL/FRAME:057874/0662 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NOTICE OF ALLOWANCE MAILED -- APPLICATION RECEIVED IN OFFICE OF PUBLICATIONS |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: AWAITING TC RESP., ISSUE FEE NOT PAID |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NOTICE OF ALLOWANCE MAILED -- APPLICATION RECEIVED IN OFFICE OF PUBLICATIONS |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |