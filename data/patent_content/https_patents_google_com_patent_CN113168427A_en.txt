CN113168427A - Communicating data via deep links for application components - Google Patents
Communicating data via deep links for application components Download PDFInfo
- Publication number
- CN113168427A CN113168427A CN202080006293.8A CN202080006293A CN113168427A CN 113168427 A CN113168427 A CN 113168427A CN 202080006293 A CN202080006293 A CN 202080006293A CN 113168427 A CN113168427 A CN 113168427A
- Authority
- CN
- China
- Prior art keywords
- application
- identifier
- request
- client device
- resource
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000012545 processing Methods 0.000 claims abstract description 196
- 230000004044 response Effects 0.000 claims abstract description 108
- 230000003993 interaction Effects 0.000 claims abstract description 47
- 238000000034 method Methods 0.000 claims abstract description 41
- 230000000670 limiting effect Effects 0.000 claims description 6
- 238000009434 installation Methods 0.000 description 28
- 238000004891 communication Methods 0.000 description 20
- 238000013515 script Methods 0.000 description 16
- 230000006870 function Effects 0.000 description 14
- 230000008569 process Effects 0.000 description 13
- 238000004590 computer program Methods 0.000 description 12
- 238000010586 diagram Methods 0.000 description 12
- 230000009471 action Effects 0.000 description 10
- 230000005540 biological transmission Effects 0.000 description 6
- 238000003780 insertion Methods 0.000 description 5
- 230000037431 insertion Effects 0.000 description 5
- 230000003287 optical effect Effects 0.000 description 4
- 230000003111 delayed effect Effects 0.000 description 3
- 230000000644 propagated effect Effects 0.000 description 3
- 238000013459 approach Methods 0.000 description 2
- 230000001413 cellular effect Effects 0.000 description 2
- 238000013507 mapping Methods 0.000 description 2
- 230000006855 networking Effects 0.000 description 2
- 230000009467 reduction Effects 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 238000012546 transfer Methods 0.000 description 2
- 230000007704 transition Effects 0.000 description 2
- 238000010200 validation analysis Methods 0.000 description 2
- 238000012795 verification Methods 0.000 description 2
- 230000000007 visual effect Effects 0.000 description 2
- 239000000654 additive Substances 0.000 description 1
- 230000000996 additive effect Effects 0.000 description 1
- 230000006399 behavior Effects 0.000 description 1
- 230000015556 catabolic process Effects 0.000 description 1
- 239000000470 constituent Substances 0.000 description 1
- 230000006837 decompression Effects 0.000 description 1
- 230000007423 decrease Effects 0.000 description 1
- 238000006731 degradation reaction Methods 0.000 description 1
- 230000000593 degrading effect Effects 0.000 description 1
- 238000001514 detection method Methods 0.000 description 1
- 230000000694 effects Effects 0.000 description 1
- 230000008030 elimination Effects 0.000 description 1
- 238000003379 elimination reaction Methods 0.000 description 1
- 239000000835 fiber Substances 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000007726 management method Methods 0.000 description 1
- 238000012544 monitoring process Methods 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 230000011273 social behavior Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/02—Protocols based on web technology, e.g. hypertext transfer protocol [HTTP]
- H04L67/025—Protocols based on web technology, e.g. hypertext transfer protocol [HTTP] for remote control or remote monitoring of applications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/955—Retrieval from the web using information identifiers, e.g. uniform resource locators [URL]
- G06F16/9566—URL specific, e.g. using aliases, detecting broken or misspelled links
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/953—Querying, e.g. by the use of web search engines
- G06F16/9538—Presentation of query results
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/955—Retrieval from the web using information identifiers, e.g. uniform resource locators [URL]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/54—Interprogram communication
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L47/00—Traffic control in data switching networks
- H04L47/70—Admission control; Resource allocation
- H04L47/82—Miscellaneous aspects
- H04L47/822—Collecting or measuring resource availability data
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L47/00—Traffic control in data switching networks
- H04L47/70—Admission control; Resource allocation
- H04L47/82—Miscellaneous aspects
- H04L47/828—Allocation of resources per group of connections, e.g. per group of users
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
Abstract
Systems and methods of communicating data via a resource identifier of a resource are provided herein. The data processing system may receive a first request from a client device in response to an interaction with a content item presented on a first resource. The content item may include a resource identifier that references a second resource accessible via the application to be installed. The first request may include a resource identifier and a device identifier. The data processing system may receive a second request from the client device in response to executing the installed application. The second request may include a device identifier and an application identifier. The data processing system may determine that the application is to receive the request identifier. The data processing system may provide a resource identifier to direct the application to access a second resource for presentation via the application.
Description
Cross Reference to Related Applications
This application claims priority to U.S. patent application serial No.16/546,196, filed on 20/8/2019, the entire contents of which are incorporated herein by reference.
Background
In a computer networking environment, such as the internet, a content provider may provide content items to be inserted into information resources (e.g., web pages) that are processed and rendered by an application (e.g., web browser) executing on a client device.
Disclosure of Invention
Technical problem
At least one aspect is directed to a method of communicating data via a resource identifier. A data processing system having one or more processors may receive a first request for content from a client device in response to an interaction with a content item presented on a first resource on the client device. The content item may include a resource identifier that references a second resource that is accessible via an application to be installed on the client device. The first request may include the resource identifier and a device identifier corresponding to the client device. The data processing system may receive a second request for content from the client device in response to executing an application installed on the client device. The second request may include a device identifier corresponding to the client device and an application identifier corresponding to the application. The data processing system may determine, in response to receiving the second request, that an application installed on the client device will receive a request identifier included in the first request based on the device identifier and the resource identifier included in the first request and the device identifier and the application identifier included in the second request. The data processing system may provide the resource identifier to direct the application to access a second resource accessible via the resource identifier for presentation via the application in response to determining that the application is to receive the request identifier.
In some implementations, the data processing system can receive a third request for content from the client device for presentation on the first resource prior to receiving the first request and the second request. The third request may include a device identifier corresponding to the client device. In some implementations, the data processing system can determine that the application is not installed on the client device by accessing a database using the device identifier. The database may maintain the device identifiers through applications installed on respective client devices. In some implementations, the data processing system selects the content item from a plurality of content items to provide to the client device for display on the first resource in a second application different from the application in response to determining that the application is not installed on the client device.
In some implementations, the data processing system may identify, in response to receiving the first request, an application identifier corresponding to an application to be installed on the client device based on the resource identifier included in the first request. In some implementations, the data processing system can store the device identifier and the application identifier on a database in association with the resource identifier. In some implementations, the data processing system can identify the device identifier and the application identifier from the database in response to receiving the second request from the client device. In some embodiments, determining that the application is to receive the resource identifier may include: determining that the device identifier included in the first request matches the device identifier included in the second request, and the application identifier identified in response to receiving the first request matches the application identifier included in the second request.
In some implementations, the data processing system may generate, in response to receiving the first request, a first event identifier based on the device identifier included in the first request and the application identifier corresponding to the resource identifier included in the first request. In some implementations, the data processing system may generate, in response to receiving the second request, a second event identifier based on the device identifier and the application identifier included in the second request. In some embodiments, determining that the application is to receive the resource identifier may include: determining that the application is to receive the resource identifier by determining that the second event identifier generated from the second request matches the first event identifier generated from the first request.
In some implementations, the data processing system can receive, from the client device, a third request for content generated in response to executing an application installed on the client device. The second request may include at least one of a second device identifier different from the device identifier and a second application identifier different from the application identifier corresponding to the resource identifier included in the first request. In some implementations, the data processing system may determine, in response to receiving the third request, that the application will not receive the resource identifier based on at least one of determining that the second device identifier does not match the device identifier and determining that the second application identifier does not match the application identifier. In some implementations, the data processing system can restrict providing the resource identifier to the client device to cause the application to present an initial interface in response to determining that the application will not receive the resource identifier.
In some implementations, the data processing system may determine that the resource identifier referencing the second resource for access via the application is invalid in response to determining that the application is to receive the resource identifier. In some implementations, the data processing system can restrict providing the resource identifier to the client device to cause the application to present an initial interface in response to determining that the resource identifier is invalid.
In some implementations, the data processing system can identify, in response to receiving the first request, an application identifier corresponding to an application to be installed on the client device based on a content item provided to the client device. In some implementations, the data processing system can associate a device identifier and an application identifier from a first request for content with a resource identifier included in a content item provided to the client device.
In some implementations, the data processing system can determine that a time period between receiving the first request and receiving the second request satisfies a time limit. In some embodiments, determining that the application is to receive the resource identifier further comprises: determining that the application will receive the resource identifier in response to determining that the time delay satisfies the time limit.
In some implementations, receiving the first request for content may include receiving the first request in response to an interaction with a content item presented on the first resource source, the first resource source being presented on a second application different from the application on the client device. Interaction with the content item may cause the client device to launch an application retrieval interface to install the application in response to determining that the application is not installed on the client device. In some implementations, receiving the second request for content may include receiving the second request generated by the application in response to a preconfigured function call initiated by the application to retrieve the resource identifier.
At least one aspect is directed to a system for communicating data via a resource identifier. The system may include a data processing system. The data processing system may include one or more processors. The data processing system may receive a first request for content from a client device in response to an interaction with a content item presented on a first resource on the client device. The content item may include a resource identifier that references a second resource that is accessible via an application to be installed on the client device. The first request may include a resource identifier and a device identifier corresponding to the client device. The data processing system may receive a second request for content from the client device in response to executing the application installed on the client device. The second request may include a device identifier corresponding to the client device and an application identifier corresponding to the application. The data processing system may determine, in response to receiving the second request, that an application installed on the client device will receive a request identifier included in the first request based on the device identifier and the resource identifier included in the first request and the device identifier and the application identifier included in the second request. The data processing system may provide the resource identifier to direct the application to access the second resource accessible via the resource identifier for presentation via the application in response to determining that the application is to receive the request identifier.
In some implementations, the data processing system receives a third request for content from the client device for presentation on the first resource prior to receiving the first request and the second request. The third request may include a device identifier corresponding to the client device. In some implementations, the data processing system can determine that the application is not installed on the client device by accessing a database using the device identifier. The database may maintain the device identifiers through applications installed on respective client devices. In some implementations, the data processing system selects the content item from a plurality of content items to provide to the client device for display on the first resource in a second application different from the application in response to determining that the application is not installed on the client device.
In some implementations, the data processing system may identify, in response to receiving the first request, an application identifier corresponding to an application to be installed on the client device based on the resource identifier included in the first request. In some implementations, the data processing system can store the device identifier and the application identifier on a database in association with the resource identifier. In some implementations, the data processing system can identify the device identifier and the application identifier from the database in response to receiving the second request from the client device. In some implementations, the data processing system may determine that the device identifier included in the first request matches the device identifier included in the second request, and the application identifier identified in response to receiving the first request matches the application identifier included in the second request.
In some implementations, the data processing system may generate, in response to receiving the first request, a first event identifier based on the device identifier included in the first request and the application identifier corresponding to the resource identifier included in the first request. In some implementations, the data processing system may generate, in response to receiving the second request, a second event identifier based on the device identifier and the application identifier included in the second request. In some implementations, the data processing system may determine that the application is to receive the resource identifier by determining that the second event identifier generated from the second request matches the first event identifier generated from the first request.
In some implementations, the data processing system can receive, from the client device, a third request for content generated in response to executing an application installed on the client device. The second request may include at least one of a second device identifier different from the device identifier and a second application identifier different from the application identifier corresponding to the resource identifier included in the first request. In some implementations, the data processing system may determine, in response to receiving the third request, that the application will not receive the resource identifier based on at least one of determining that the second device identifier does not match the device identifier and determining that the second application identifier does not match the application identifier. In some implementations, the data processing system can restrict providing the resource identifier to the client device to cause the application to present an initial interface in response to determining that the application will not receive the resource identifier.
In some implementations, the data processing system may determine that the resource identifier referencing the second resource for access via the application is invalid in response to determining that the application is to receive the resource identifier. In some implementations, the data processing system can restrict providing the resource identifier to the client device to cause the application to present an initial interface in response to determining that the resource identifier is invalid.
In some implementations, the data processing system can identify, in response to receiving the first request, an application identifier corresponding to an application to be installed on the client device based on a content item provided to the client device. In some implementations, the data processing system can associate a device identifier and an application identifier from a first request for content with a resource identifier included in a content item provided to the client device.
In some implementations, the data processing system can determine that a time period between receiving the first request and receiving the second request satisfies a time limit. In some implementations, the data processing system may determine that the application is to receive the resource identifier in response to determining that the time delay satisfies the time limit.
In some implementations, the data processing system can receive the first request in response to interaction with a content item presented on the first resource source, the first resource source being presented on a second application different from the application on the client device. Interaction with the content item may cause the client device to launch an application retrieval interface to install the application in response to determining that the application is not installed on the client device. In some implementations, the data processing system can receive the second request generated by the application in response to a preconfigured function call initiated by the application to retrieve a resource identifier.
These and other aspects and embodiments are discussed in detail below. The foregoing information and the following detailed description include illustrative examples and embodiments of various aspects, and provide an overview or framework for understanding the nature and character of the claimed aspects and embodiments. The accompanying drawings are included to provide an illustration and a further understanding of the various aspects and embodiments, and are incorporated in and constitute a part of this specification.
Drawings
The drawings are not intended to be drawn to scale. Like reference numbers and designations in the various drawings indicate like elements. For purposes of clarity, not every component may be labeled in every drawing.
In the figure:
FIG. 1 is a block diagram depicting a system for communicating data via resource identifiers for application components in accordance with an illustrative embodiment;
FIG. 2 is a block diagram depicting a data processing system, a content publisher, a content provider, and a client device in a system for communicating data via resource identifiers for application components in accordance with an illustrative embodiment;
FIG. 3 is a block diagram depicting a data processing system, an application distribution service, and a client device invoking an application distribution interface in a system for communicating data via resource identifiers for application components in accordance with an illustrative embodiment;
FIG. 4 is a block diagram depicting a data processing system and a client device invoking a link requestor of an application in a system for communicating data via a resource identifier for an application component in accordance with an illustrative embodiment;
FIG. 5 is a flowchart depicting a data processing system and a client device invoking a component of an application in a system for passing data via a resource identifier for the application component in accordance with an illustrative embodiment;
FIGS. 6A and 6B are a flow diagram depicting a method of communicating data via a resource identifier for an application component in accordance with an illustrative embodiment; and
FIG. 7 is a block diagram of the general architecture of a computer system that may be used to implement the system elements and methods described and illustrated herein, in accordance with an illustrative embodiment.
Detailed Description
Following are more detailed descriptions of various concepts related to methods, apparatus, and systems for communicating data via resource identifiers of application components and embodiments thereof. The various concepts introduced above and discussed in greater detail below may be implemented in any of numerous ways, as the described concepts are not limited to any particular implementation.
A resource identifier (e.g., a Uniform Resource Identifier (URI)) may reference a particular location for a resource via one or more applications running on a client device. The resource identifier may reference a resource at a network location from the client device, such as a web address (e.g., a Uniform Resource Locator (URL)) for a web page hosted by a web server on the internet that is accessible via a web browser. The resource identifier for a resource hosted at a network location may include a schema name of the protocol, a domain name of the server, and a path name of a particular web page (e.g., "https:// www.example.com/dir1/index. html"). A web browser on a client device may use such resource identifiers to request and retrieve web pages from a web server. The resource identifier may also reference resources of the application local to the client device, such as deep links for in-application components of the application. An operating system on a client device may use such resource identifiers to launch and execute applications to access components within the applications.
Using these resource identifiers, information resources of different applications can be accessed across applications on the same client device. An application (e.g., a web browser) on a client device may present an information resource (e.g., a web page) containing a content item having a resource identifier. A resource identifier (e.g., a hyperlink) for a content item may reference an in-application component of another application. The resource identifiers for resources local to the client device may include an application identifier for the application (e.g., "example _ app") and a path name (e.g., "example _ app:// foo") for components within the particular application (e.g., "example _ app:// foo"). Upon detecting interaction with the resource identifier by a user operating the client device, an operating system on the client device may launch an application that has been installed on the client device. Once launched, the operating system may cause the application to open the in-application components referenced by the resource identifier.
However, the application referenced by the resource identifier may not have been downloaded or installed on the client device. In this case, the resource identifier may cause no action to be taken in response to an interaction with the resource identifier, or cause an error in the operating system running on the client device, if not properly configured. The lack of any particular action may result in a deviation from the behavior of the application running on the client device that the user desires, thereby degrading human-machine interaction (HCI) between the user and the application. Further, the deviation may also result in repeated interactions with the resource identifier by the user or manual searching of the application on the client device. As a result, this may result in unnecessary and excessive consumption of computing processing resources and memory.
One approach to addressing this situation may include delayed deep links. Under such techniques, when it is determined that an application has not been installed, the operating system may launch a content delivery platform to prompt the user to install the application. Once installed, the content delivery platform may present a prompt to the user to launch and execute the application. While the delayed deep links may facilitate installation of the application on the client device, the technique may not enable the application to open in-application components within the application referenced by the resource identifier. In this way, the user may be forced to manually search for components within the application that were originally referenced by the resource identifier. Furthermore, the delayed deep-link approach may still result in HCI degradation between the user and the application and additional consumption of computing resources due to manual searching.
To address the challenges of accessing components within an application using resource identifiers, data may be communicated asynchronously via deep links on a network environment. The data processing system may provide a content item configured to send an asynchronous request having a resource identifier concurrently with opening the content delivery platform. The request may include a resource identifier of an intra-application component of an application to be installed on a client device and a device identifier corresponding to the client device. Upon receiving the request, the data processing system may parse the request and may record the resource identifier in association with the device identifier for storage in a database. While sending the request, the operating system on the client device may cause the content delivery platform to prompt the user to install the application. Once installed, the content delivery platform may present a prompt to the user to launch and execute the application.
By prompted execution via the content delivery platform, the now installed application may generate and send a request for a resource identifier to the data processing system to ensure that the in-application components of the application are presented on the client device. The request sent by the application may include an application identifier corresponding to the application itself and a device identifier corresponding to the client device. Upon receipt, the data processing system may determine whether the device identifiers of the received request and the previously received request match for the application corresponding to the resource identifier. If the device identifiers are determined to match, the data processing system may return the resource identifier to the application. The application, in turn, can open and present the in-application components referenced by the resource identifier.
By configuring the content items and applications in this manner, a more seamless transition can be made from the information resources presented on the initial application to the in-application components of the application to be installed. By eliminating the need to manually install an application and search to access components within the application, the number of interactions by a user of a client device may be reduced. The reduction in the number of interactions may result in improved HCI between the user and the client device and reduced consumption of computing resources.
Referring now to FIG. 1, depicted is a block diagram depicting one embodiment of a computer networking environment or system 100 for communicating data via resource identifiers for application components. In general, the system 100 may include at least one network 105 for communicating between components of the system 100. The system 100 may include at least one data processing system 110 to process requests transmitted via the network 105. The system 100 may comprise at least one content provider 115 providing content items. The system 100 can include at least one content publisher 120 that provides information resources (e.g., web pages). The system 100 can include at least one application distribution service 125 that provides an installation package for installing applications. The system 100 may include at least one client device 130 in communication via the network 105. Each of the components of system 100 (e.g., network 105, data processing system 100 and its components, content provider 115 and its components, content publisher 120 and its components, application distribution service 125 and its components, and client device 130 and its components) may be implemented using the components of computing system 700 detailed herein in connection with fig. 7.
In more detail, the network 105 of the system 100 may communicatively couple the data processing system 110, the content provider 115, the content publisher 120, the application distribution service 125, and the client device 130 to one another. The data processing system 110, the content provider 115, the content publisher 120, and the application distribution service 125 of the system 100 each can include a plurality of servers located in at least one data center or server farm that can be communicatively coupled to each other via the network 105. The data processing system 110 may communicate with content providers 115, content publishers 120, application distribution services 125, and client devices 130 via the network 105. The content provider 115 may communicate with the data processing system 110, the content publisher 120, the application distribution service 125, and the client device 130 via the network 105. The content publisher 120 may communicate with the data processing system 110, the content publisher 120, the application distribution service 125, and the client device 130 via the network 105. The application distribution service 125 may communicate with the data processing system 110, the content provider 115, the content publisher 120, and the client device 130 via the network 105. The client devices 130 may communicate with the data processing system 110, the content providers 115, the content publishers 120, and the application distribution service 125 via the network 105.
The content provider 115 may include a server or other computing device operated by a content provider entity to provide content items to display information resources at the client device 130. The content provided by content provider 115 may take any convenient form. For example, the third-party content may include content related to other displayed content, and may be, for example, pages of a website related to the displayed content. The content may include third-party content items or creatives (e.g., advertisements) for display on information resources, such as information resources that include primary content provided by the content publishers 120. Content items may also be displayed on the search results web page. For example, the content provider 115 may provide or be a source of content items that are displayed in a content slot (e.g., inline frame element) of an information resource, such as a web page of a company, where the main content of the web page is provided by the company or displayed on a search results landing page provided by a search engine. Content items associated with the content provider 115 may be displayed on information resources outside of the web page, such as content displayed as part of executing an application on a smartphone or other client device 130.
The content publisher 120 may include a server or other computing device operated by a content publishing entity to provide information resources including primary content for display via the network 105. For example, the content publisher 120 may include a web page operator that provides primary content for display on an information resource. The information resources may include content in addition to content provided by the content publisher 120, and the information resources may include content slots configured to display content items from the content provider 115. For example, the content publisher 120 may operate a website of a company and may provide content about the company for display on a webpage of the website. The web page may include content slots configured to display content items provided by the content provider 115 or by the content publisher 120 itself.
In some implementations, the content publisher 120 includes a search engine computing device (e.g., a server) of a search engine operator that operates a search engine website. The primary content of the search engine web page (e.g., results or login web pages) may include search results as well as third party content items displayed in content slots of the information resource, such as content items from content providers 115.
In some implementations, the content publisher 120 can include one or more servers for providing video content.
The data processing system 110 may include a server or other computing device operated by a content delivery entity to select or identify content items to be inserted into content slots of an information resource via the network 105. In some implementations, the data processing system 110 can include a content delivery system (e.g., an online advertising server). The data processing system 110 can maintain an inventory of content items to select from for provision over the network 105 for insertion into content slots of the information resource. The manifest may be maintained on a database accessible to the data processing system 110. The content item or an identifier (e.g., address) of the content item may be provided by the content provider 115.
The application distribution service 125 (sometimes referred to herein as a digital distribution service, a content delivery service, or an electronic software distribution service) may include a server or other computing device operated by an application distribution entity to provide an installation package for applications to be installed on the client device 130. The application distribution service 125 may manage updates to applications installed on the client device 130. The update may affect at least one of the sub-components of the application. The application distribution service 125 may also manage services for facilitating installation of applications on the client devices 130. Applications and related services provided by the application distribution service 125 may be communicated via the network 105. In some implementations, the application distribution service 125 can be separate from the data processing system 110 (e.g., as shown). In some implementations, the application distribution service 125 can be at least partially or completely part of the data processing system 110.
Each client device 130 may be a computing device that communicates via the network 105 to display data. The displayed data may include content provided by the content publisher 120 (e.g., information resources) and content provided by the content provider 115 (e.g., content items for display in content slots of the information resources) as identified by the data processing system 110. Client devices 130 may include desktop computers, laptop computers, tablet computers, smart phones, personal digital assistants, mobile devices, consumer computing devices, servers, clients, digital video recorders, set-top boxes for televisions, video game consoles, or any other computing devices configured to communicate via network 105. The client device 130 may also communicate via the network 105 to receive an installation package to install the application thereon.
Referring now to FIG. 2, depicted is a block diagram depicting a data processing system 110, content provider 115, content publisher 120, and client device 130 in communication via network 105 in system 100. In general, the data processing system 110 may include at least one content selector 200 to provide content to the client devices 130. The data processing system 110 may include at least one database 205 for storing and maintaining one or more content items 230A-N (hereinafter, collectively referred to as content items 230). The client device 130 may include at least one application 210A installed and executing thereon to communicate via the network 105 to request and receive content.
In more detail, an application 210A (sometimes referred to herein generally as a first application 210A) executing on a client device 130 may communicate via the network 105 to receive content for presentation (e.g., display or playback) on the client device. The application 210A comprises, for example, an internet browser, a mobile application, or any other computer program capable of interpreting, executing, or otherwise invoking computer-executable instructions provided to the client device 130 via the network 105 for presentation on the client device 130. The application 210A may have been previously installed on the client device 130. For example, the application 210A may have been downloaded and installed via the network 105, or may have been previously installed on the client device 130. Installation and execution of the application 210A may be facilitated by an operating system running on the client device 130.
The application 210A may receive at least one information resource 215 (e.g., a web page) from the content publisher 120 via the network 105. The information resource 215 may be a type of resource to which access may be facilitated through communications over the network 105. The receipt of the information resource 215 may be in response to a request for the information resource 215 sent by the application 210A to the content publisher 120. The information resources 215 may correspond to scripts, logic, tags, or instructions (e.g., hypertext markup language (HTML), extensible hypertext markup language (XHTML), extensible markup language (XML), Cascading Style Sheets (CSS), and JavaScript, or any combination thereof). The information resources 215 may include at least one primary content (e.g., a body, text, and image of a web page) and at least one content slot 220 (e.g., an embedded frame of a web page). The primary content may correspond to a portion of the information resources 215 provided by the content publisher 120. The content bits 220 of the information resource 215 may be used to receive content from the content provider 115 or the data processing system 110. The content to be inserted into the content bits 220 of the information resource 215 may have a host name that is different from the host name of the information resource 215.
By receiving or accessing the information resource 215, the application 210A can parse the information resource 215 to identify the content bits 220. The content slots 220 may include scripts, logic, tags, or instructions (e.g., advertising tags) to generate requests for content to be transmitted via the network 105. Upon parsing the content bits 220 of the information resource 215, the application 210A may generate a request 225 for content for insertion into the content bits 220 for transmission to the data processing system 110 (or content provider 115). The request for content 225 may include a destination address (e.g., a Uniform Resource Locator (URL) or an Internet Protocol (IP) address) that references the data processing system 110, which data processing system 110 is to provide the content to be inserted into the content bits 220. In some implementations, the request for content 225 can include a source address (e.g., a network address such as an IP address) or a device identifier that references the client device 130 as a sender. The device identifier may be a set of alphanumeric characters or numerical values to uniquely identify the client device 130. The device identifier may be maintained on the client device 130 (e.g., by an operating system running thereon). In some implementations, the source address referencing the client device 130 can be used as a device identifier for the client device 130. Upon generation, the application 210A may transmit a request 225 for content to the data processing system 110 via the network 105.
A content selector 200 executing on the data processing system 110 may receive a request 225 for content from a client device 130 via the network 105. Based on the received request for content 225, the content selector 200 may identify or otherwise select at least one content item 230 from a collection of content items 230 maintained on the database 205. The selection of the content item 230 may be in accordance with a content delivery process (e.g., a real-time bidding (RTB) performed by the content exchange). Each content item 230 may include an object or element (e.g., a document model tree object) to be embedded, inserted, or otherwise added to the content bit 220 of the information resource 215.
At least one of the content items 230 to be selected by the content selector 200 may include at least one resource identifier 235. The resource identifier 235 may reference a resource that is accessible via at least one application 210B that is different from the application 210A that transmitted the request for content 225. The application 210B may not have been received, downloaded, or installed on the client device 130 (as shown by the depicted dashed line). The resource corresponding to the resource identifier 235 may comprise one of a set of components 240A-N (hereinafter generally referred to as component 240). The resource identifier 235 may include a set of alphanumeric characters that uniquely identify the application 210B and the component 240 of the application 210B. In some implementations, the resource identifier 235 can also identify one or more parameters to be passed to the component 240.
The alphanumeric character set used for the resource identifier 235 may be in accordance with a defined syntax, such as a URL or Uniform Resource Identifier (URI). The resource identifier 235 may include a substring that references the application 210B, a substring that references a particular component 240 that is accessible via the application 210B, and a substring for parameters to be passed to the component 240. In this syntax, the substring for application 210B may correspond to the schema or host of resource identifier 235. The substring for component 240 may correspond to the pathname of resource identifier 235. The substring for the parameter to be passed to the component 240 may correspond to a query of the resource identifier 235. For example, the resource identifier 235 may be a deep link and include a substring "example _ app" for the application 210B and a substring "// component _ Xparam ═ xyz" for the particular component 240 with the parameter, combined into a string "example _ app:// component _ Xparam ═ xyz".
Each component 240 (also sometimes referred to herein as an application component, in-application content, or in-application functionality) may be a type of resource that may be conveniently accessed through communications over the network 105. In some implementations, the application 210B can define a presentation of each component 240 that is accessible through the application 210B. For example, the application 210B may have or define a particular Graphical User Interface (GUI) for each component 240 accessible through the application 210B itself. The definition of the component 240 may differ from the information resource 215 in that the application 210A may not have a specific GUI for the information resource 215. In some implementations, the information resource 215 can correspond to one of the components of the installed application 210A. In some implementations, the content item 230 having the resource identifier 235 can have a script to facilitate access to the component 240 referenced by the resource identifier 235. The functionality of the content item 230 having such a resource identifier 235 will be described in detail below.
In contrast, at least one of the content items 230 to be selected by the content selector 200 may lack a resource identifier 235 to one of the components 240 of the application 210B that is not already installed on the client device 130. Alternatively, the content item 230 may have a destination identifier (e.g., a URL) that references another information resource (e.g., a web page or component) that is to be accessed via the same application 210A that transmitted the request 225 for content. The destination identifier may be a set of alphanumeric characters according to a defined syntax, such as a URI or URL. A content item 230 having such a destination identifier may include a script to cause the application 210A to send a request using the destination identifier in response to detecting an interaction on the content item 230. Such scripts of content items 230 may lack any convenience associated with the request to access the component 240 of the application 210B.
When running a content delivery process to select from a collection of content items 230, the content selector 200 may cause a selection of a content item 230 with or without a resource identifier 235. In some cases, a content item 230 selected by the content selector 200 as a result of the content delivery process may lack a resource identifier 235. The selected content item 230 may include a destination address that references another resource to be accessed via the first application 210A. In other cases, the content item 230 selected as a result of the content delivery process may include a resource identifier 235 that references a component 240 of the application 210B. In such a case, the content selector 200 may determine whether the script facilitates access to the component 240 referenced by the resource identifier 235. By selecting the content item 230, the content selector 200 may transmit the content item 230 to the client device 130 via the network 105. In the depicted example, the content item 230 transmitted to the client device 130 can include a resource identifier 235. In some implementations, the content selector 200 can record the content item 230 transmitted to the client device 130 onto the database 205.
To determine whether to include a script for the resource identifier 235 prior to transmission, the content selector 200 may identify or determine which applications (e.g., application 210A) are installed on the client device 130 based on the request for content 225. For each identifier 235 in the content item 230, the content selector 200 may determine whether the application 210B is installed on the client device 130. In some implementations, the content selector 200 can access a list of applications installed on the client device 130 indexed by the respective device identifier using the device identifier included in the request for content 225. In some implementations, the application list can be maintained on at least one database maintained by the application distribution service 125. In some embodiments, the application list may be maintained on a database 205 accessible by the data processing system 110.
When the application list indicates on the client device 130, the content selector 200 may determine that the application 210B is not already installed on the client device 130. Further, in some implementations, the content selector 200 can include or insert a script to facilitate access to the component 240 of the application 210B referenced by the resource identifier 235. In some embodiments, the inserted script may itself include the resource identifier 235. On the other hand, when the application list indicates that the application 210B is installed on the client device 130, the content selector 200 may determine that the application 210B is installed on the client device 130. Because the application 210B may already be installed on the client device 130, the content item 230 may lack a script to facilitate access to the component 240 referenced by the resource identifier 235.
The application 210A may receive the content item 230 from the data processing system 110 via the network 105. With the received content item 230, the application 210A may embed, insert, or otherwise include the content item 230 in the content bits 220 of the information resource 215. After inserting the content item 230, the application 210A may present or display the content item 230 into the content slots 220 of the information resource 215. In some implementations, the resource identifier 235 or destination identifier in the content item 230 is visible (e.g., as a link within the content item 230). In some implementations, the content item 230 can include the resource identifier 235 or the destination identifier as part of another constituent visual element (e.g., as a rendered image corresponding to the content item 230 on the information resource 215).
Referring now to FIG. 3, depicted is a block diagram depicting a data processing system 110, an application distribution service 125, and a client device 130 in communication via a network 105 in the system 100. In general, the data processing system 110 may have at least one initial request handler 300 (sometimes referred to herein as an asynchronous request handler) to handle requests from client devices 130. The application 210A may have inserted the content item 230 into the content slot 220 for presentation on the information resource 215. The client device 130 may also include at least one application retrieval interface 305 (also referred to herein as a digital distribution platform, content delivery platform, or application store program) to facilitate access to the components 240 of the application 210B.
In more detail, the application 210A may monitor at least one interaction with the content item 230 presented on the information resource 215. In some implementations, the application 210A can monitor interactions with sub-components of the content item 230 (e.g., the resource identifier 235 itself, if included). Monitoring of the interaction may be performed via an event handler or event listener for the content item 230. The interactions monitored by the application 210A may include, for example, click events, touch screen events, key events, voice command events, and the like. With detection of interaction with the content item 230, the application 210A may parse and execute instructions included in the content item 230.
Using the destination identifier included in the content item 230, the application 210A may generate and transmit at least one request for content in response to the interaction. The application 210A may have received a content item 230 with a destination identifier for another resource accessible via the same application 210A. The resource may be another information resource 215, such as a landing page for content item 230. The destination identifier may reference another content publisher 120 that hosts the resource to be accessed. The content publisher 120 corresponding to the destination identifier may be different from the content publisher 120 providing the initial information resource 215. Upon reading the content item 230, the application 210A may generate a request for content that includes the destination identifier. The application 210A may send a request for content to the content publisher 120 via the network 105. Subsequently, the application 210A can receive, via the network 105, the resource referenced by the destination identifier from the content publisher 120. The application 210A may be booted by the initial information resource 215 and may present the newly received resource on the client device 130.
Using the resource identifier 235 included in the content item 230, the application 210A may generate and transmit at least one request for content in response to the interaction. The application 210A may have received the content item 230 with a resource identifier 235, the resource identifier 235 referencing one of the components 240 of the application 210B that has been installed on the client device 130 (e.g., as opposed to the depiction). Such content items 230 may lack scripts that facilitate access to the components 240 referenced by the resource identifiers 235. In this case, the application 210A may read and parse the resource identifier 235 included in the content item 230. Since the resource identifier 235 references the application 210B that is already installed on the client device 130, the application 210A (or the operating system of the client device 130) can invoke the application 210B to access the component 240. In response, the client device 130 can present the component 240 of the application 210B referenced by the resource identifier 235.
The application 210A may generate and transmit at least one initial request 310 for content (e.g., as depicted) in response to an interaction on the content item 230. The application 210A may have received a content item 230 having a resource identifier 235 referencing one of the components 240 of the application 210B that has not yet been installed on the client device 130. In some implementations, such content items 230 can include scripts to facilitate access to the components 240 referenced by the resource identifiers 235. The script of the content item 230 may include instructions for the application 210A to generate and send the initial request 310 using the resource identifier 235 included in the content item 230.
The initial request 310 to be transmitted by the application 210A may include a resource identifier 235 that corresponds to the resource identifier 235 included in the content item 230. In some implementations, the application 210A can identify the resource identifier 235 corresponding to the interaction of the content item 230 for inclusion in the initial request 310. For example, the application 210A may detect a touch event to one of the hyperlinks on the content item 230 that includes the resource identifier 235 and identify the resource identifier 235 to include in the initial request 310. Upon identifying the resource identifier 235 from the content item 230, the application 210A may insert or include the resource identifier 235 in the initial request 310.
Further, the initial request 310 to be transmitted by the application 210A may include at least one device identifier 315 (e.g., as previously described) that references the client device 130. The device identifier 315 is a collection of numeric values or alphanumeric characters to uniquely identify the client device 130. The device identifier 315 may be maintained on the client device 130 (e.g., by an operating system running thereon). The application 210A may identify the device identifier 315 maintained on the client device 130 for insertion into the initial request 310. In some implementations, the device identifier 315 can be a network address (e.g., an IP address) in the network 105 that references the client device 130. The application 210A may identify the network address as the device identifier 315 to be inserted into the initial request 310. Similar to the initial request 225 for content, the initial request 310 may also include a destination address referencing the data processing system 110 and may include a source address referencing the client device 130. Upon generation, the application 210A may transmit the initial request 310 to the data processing system 110 via the network 105 (e.g., as depicted).
An initial request processor 300 executing on data processing system 110 may receive an initial request 310 from a client device 130 via network 105. Initial request processor 300 may parse initial request 310 to identify content. In resolution, the initial request processor 300 may identify a device identifier 315 referencing the client device 130 from the initial request 310. In some implementations, the initial request processor 300 can identify a source address (e.g., an IP address) corresponding to the client device 130 from the initial request 310. Through this identification, the initial request handler 300 may use a source address corresponding to the client device 130 as the device identifier 315.
In addition, initial request processor 300 may identify resource identifier 325 from initial request 310. Using the resource identifier 325, the initial request handler 300 may generate, determine, or identify at least one application identifier 320 corresponding to the application 210B referenced by the resource identifier 325. The application identifier 320 may be a numerical value or a set of alphanumeric characters to uniquely identify the application 210B to be installed on the client device 130. As previously discussed, resource identifier 325 may include substrings for application 210B, substrings for component 240, and substrings for parameters. In some implementations, the initial request handler 300 can identify a substring for the application 210B from the resource identifier 235 as the application identifier 320.
In some implementations, the initial request handler 300 can identify the application identifier 320 using a substring of the application 210B of the resource identifier 235. For Example, initial request handler 300 may use a mapping of a substring (e.g., "Example _ App") to a full application name (e.g., "App Example") in identifying application identifier 320. In some implementations, the initial request processor 300 can determine or identify the application identifier 320 based on the content item 230 previously provided to the client device 130. The content item 230 may be associated with an application identifier 320. As previously discussed, the content selector 200 may have recorded that the content item 230 was transmitted to the client device 130. Based on the record, the initial request handler 300 may identify the content item 230 provided to the content device 130. The initial request handler 300 may identify an application identifier 320 associated with the identified content item 230.
In some implementations, the initial request processor 300 may use the initial request 310 to determine or generate at least one event identifier (also sometimes referred to herein as a request identifier, interaction identifier, or click identifier). The event identifier may be a numerical value or a collection of alphanumeric characters to uniquely identify the initial request 310 or associated with the content of the initial request 310. In some implementations, the initial request handler 300 can generate an event identifier based on the application identifier 320 (or the resource identifier 235) and the device identifier 315. The generation may be based on any combination of the application identifier 320 and the device identifier 315, such as a concatenation, a hash function, a fingerprint function, and so forth. In some implementations, initial request processor 300 may identify a time of receipt of initial request 310 to associate with content therein.
With these identifications, the initial request handler 300 may correlate the resource identifier 235, the device identifier 315, and the application identifier 320. For example, the resource identifier 235 and the device identifier 315 from the initial request 310 may be associated with the application identifier 320. The initial request handler 300 may also store and maintain the resource identifier 235, the device identifier 315, and the application identifier 320 on the database 205 to indicate the association between the identifiers. In some embodiments, the initial request handler 300 may also store the event identifier with other identifiers. In some embodiments, the initial request handler 300 may use the resource identifier 235, the device identifier 315, and the application identifier 320 to generate or create at least one request entry 325 for storage on the database 205. The request entry 325 may include the resource identifier 235, the device identifier 315, and the application identifier 320 to indicate an association between the identifiers. In some implementations, the request entry 325 may also include an event identifier generated using the device identifier 315 and the application identifier 320. The resource identifier 235, the device identifier 315, the application identifier 320, or the event identifier may be used to index a request entry 325 stored and maintained on the database 205. In some embodiments, request entry 325 may further include a time of receipt of the corresponding initial request 310.
In conjunction with the generation and transmission of the initial request 310, the application 210A (or an operating system on the client device 130) may invoke an application retrieval interface 305 executing on the client device 130. The application retrieval interface 305 may be at least one routine, program, or another application on the client device 130 to facilitate installation of the application 210B onto the client device 130. The application 210A (or operating system) may determine that the application 210B referenced by the resource identifier 235 is not installed on the client device 130. For example, the application 210A may access a file manager maintained by the client device 130 that lists applications installed on the client device 130. In response to this determination, application 210A may invoke application retrieval interface 305 to install application 210B. When referencing an uninstalled application (e.g., application 210B), application 210A may have been configured to invoke application retrieval interface 305.
Upon invocation, the application retrieval interface 305 may present at least one prompt for installing the application 210B onto the client device 130. Using the prompt, the user of the client device 130 may request installation or may decline to install the application 210B. In some implementations, the prompt can include at least one Graphical User Interface (GUI) displayed on the client device 130. The prompt may include at least one user interface element requesting installation of the application 210B (e.g., a command button with the text "Install" (Install)) and at least one user interface element denying installation of the application 210B (e.g., a command button with the text "Cancel" (Cancel)). In some implementations, the prompt can include at least one audio message played on the client device 130. The audio message includes at least one option to request installation and at least one option to deny installation of the application 210B.
The application retrieval interface 305 may monitor at least one interaction with a prompt for installing the application 210B. The interaction may include, for example, a click event, a touch screen event, a key event, a voice command event, and so forth. The application retrieval interface 305 may detect an interaction corresponding to a refusal to install the application 210B. For example, a user of the client device 130 may click on a cancel button for prompt on the GUI, or click to minimize the application retrieval interface 305. In response, the application retrieval interface 305 may not perform further actions associated with installing the application 210B. On the other hand, the application retrieval interface 305 may detect an interaction corresponding to a request to install the application 210B. For example, the user of the client device 130 may have pressed a command button on the GUI for an install prompt or generated a voice command to install the application 210B. In response, the application retrieval interface 305 may generate at least one application request 330 for installing the application 210B. The application request 330 may include at least one identifier for the application 210B. The identifier may be a set of alphanumeric characters corresponding to the application 210B and may be the same as or different from the application identifier 320 used by the data processing system 110. After generation, the application retrieval interface 305 can transmit the application request 330 to the application distribution service 125.
In turn, the application distribution service 125 can receive the application request 330 from the client device 130 via the network 105. Upon receipt, the application distribution service 125 can parse the application request 330 to identify the identifier of the application 210B. Using the identifier, the application distribution service 125 can identify at least one installation package 335 for installing the application 210B. The installation package 335 may be maintained by the application distribution service 125 on one or more databases and may be provided by an application developer of the application 210B. The installation package 335 may include one or more files containing resources, assets, metadata, and program code for installing the application 210B on the client device 210B. With this identification, the application distribution service 125 can provide or transmit the installation package 335 to the client device 130 via the network 105.
Referring now to FIG. 4, depicted is a block diagram of a data processing system 110 in which a client device 130 requests data via a network 105 in the system 100. In general, the data processing system 110 may include at least one link request processor 405 (sometimes referred to herein as a synchronization request processor) to process requests from the client devices 130. The application 210B on the client device 130 may include at least one link requester 400 to process requests to the data processing system 110.
In more detail, the application retrieval interface 305 may receive the installation package 335 for installing the application 210B from the application distribution service 125 via the network 105. Upon receipt, the application retrieval interface 305 can use the installation package 335 to install the application 210B on the client device 130. For example, the application retrieval interface 305 may extract or decompress one or more files in the installation package 335 to install the application 210B on the client device. Upon completion of the installation, the application retrieval interface 305 may present at least one prompt to execute the application 210B. The application retrieval interface 305 may monitor the interaction with the prompt. In response to detecting the interaction, the application retrieval interface 305 can invoke the application 210B to execute on the client device 130. In some implementations, the application retrieval interface 305 can invoke the now-installed application 210B to execute without presenting the prompt. Once invoked, the client device 130 may initialize and begin executing the application 210B. The client device 130 may transfer the foreground process from the application 210A or the application retrieval interface 305 to the now-installed application 210B.
After installation on client device 130, application 210B may invoke (invoke), call (call), or otherwise execute link requestor 400. The link requestor 400 may correspond to one or more routines, processes, or other functions configured into the application 210B. In some embodiments, the functions and operations of the link requestor 400 may be defined via an Application Programming Interface (API) presented by an administrator of the application distribution service 125 or the data processing system 110. The API of link requestor 400 may be made available to application developers of application 210B and administrators of data processing system 110. In some embodiments, application 210B may call (call) or invoke (invoke) link requestor 400 during initialization or execution of application 210B itself. For example, the link requestor 400 may be one of the first processes invoked by the application 210B when running on the client device 130. In some implementations, the link requestor 400 can be invoked by the client device 130 during decompression or installation of the application 210B using the installation package 335.
The link requestor 400 of the application 210B executing on the client device 130 may generate and transmit at least one link request 410 (sometimes referred to herein as a synchronization request) to retrieve the resource identifier 235 previously provided to the client device 130. The link request 410 may be generated according to at least one function of an API defined for the link requestor 400. The link requestor 400 may be provided with information for generating the link request 410. This information may be in the form of data structures or metadata included in application 200B. This information may include an application identifier 320' corresponding to application 210B and used by data processing system 100 to reference application 210B on database 205. This information may lack the resource identifier 235 that was previously provided with the content item 230 to the client device 130.
The link request 410 to be sent to the data processing system 110 may include the application identifier 320' corresponding to the application 210B. In some implementations, the link requestor 400 can identify the application identifier 320' from information included in the application 200B. Upon identification, the link requestor 400 may include or insert the application identifier 320' into the link request 410 (e.g., as depicted). In some implementations, the link requestor 400 can identify an identifier of the application 210B for use by the application distribution service 125. The information included by application 210B may include an identifier for application 210B, but not application identifier 320' used by data processing system 110 to maintain database 205. With this identification, the link requestor 400 may include an identifier for the application 210B in the link request 410.
Additionally, the link request 410 may include a device identifier 315'. The identification of the device identifier 315' by the link requestor 400 may be similar to the identification of the same identifier by the application 210A as previously described. In some implementations, the link requestor 400 may identify the device identifier 315' maintained on the client device 130 for insertion into the link request 410. In some implementations, the link requestor 400 may identify the network address referencing the client device 130 as the device identifier 315' for insertion into the link request 410. Similar to the request for content 225, the link request 410 may also include a destination address referencing the data processing system 110 and may include a source address referencing the client device 130. Once generated, the link requestor 400 may transmit a link request 410 to the data processing system 110 via the network 105.
A link request processor 405 executing on the data processing system 110 may receive a link request 410 from a client device 130 via the network 105. The link request handler 405 may have many of the same functions with respect to the link request 410 as the request handler 300 has with respect to the initial request 310 as previously described. The link request processor 405 may parse the link request 410 to identify content. Parsing the link request 410 may be in accordance with an API used to generate the link request 410. In parsing, the link request processor 405 may identify a device identifier 315' referencing the client device 130 from the link request 410. In some implementations, the link request processor 405 can identify a source address (e.g., an IP address) corresponding to the client device 130 from the link request 410 to use as the device identifier 315'.
Additionally, the link request processor 405 may parse the link request 410 to identify the application identifier 320'. In some implementations, the link request processor 405 can identify an identifier for the application 210B that is included in the link request 410. Using the identifier parsed from the link request 410, the link request processor 405 can identify the application identifier 320' corresponding to the application 210B. For example, in identifying the application identifier 320', the link request processor 405 may use a mapping of identifiers used by the application distribution service 125.
In some implementations, the link request processor 405 can determine or generate at least one event identifier using the link request 410. Generating the event identifier using the link request 410 may be similar to the initial request processor 300 generating the event identifier using the initial request 310. The event identifier may be a numeric value or a collection of alphanumeric characters to uniquely identify or associate with the content of the link request 410. In some implementations, the link request processor 405 can generate the event identifier based on the application identifier 320 'and the device identifier 315'. The generation may be based on any combination of the application identifier 320 'and the device identifier 315', such as a concatenation, a hash function, a fingerprint function, and so forth. In some implementations, the link request processor 405 can identify the time of receipt of the link request 410.
Referring now to FIG. 5, depicted is a block diagram of a data processing system 110 responding to a client device 130 via a network 105 in a system 100. In general, the data processing system 110 may include at least one application verifier 500 to authenticate the application 210B that is now installed on the client device 130. The application verifier 500 executing on the data processing system 110 may determine whether the application 210B on the client device 130 is to receive the resource identifier 235. The determination may be based on receiving the initial request 310 and the link request 410 from the client device 130. In some implementations, the determination may be in response to a resolution of the link request 410 by the link request processor 405 to identify the device identifier 315 'and the application identifier 320'.
To determine, the application verifier 500 may compare the device identifier 315 'and the application identifier 320' parsed from the link request 410 to the device identifier 315 and the application identifier 320 maintained on the database 205. In some implementations, the application verifier 500 may use the device identifier 315' to search or find a request entry 325 in the database 205 with a matching device identifier 315. In some implementations, the application verifier 500 may perform a search using the event identifier generated with the link request 410. In performing the search, the application verifier 500 may traverse the request entries 325 maintained on the database 205. When no matching request entry 320 is found, the application verifier 500 may determine that the device identifier 315' of the link request 410 does not match any device identifier 315 maintained on the database 205. The application verifier 500 may also determine that the application 210B on the client device 130 is not allowed to receive any resource identifiers 235 for accessing the components 240 of the application 210B.
Conversely, when at least one matching request entry 325 is found, the application verifier 500 may perform an additive comparison. The matching request entry 325 may have a device identifier 315 that matches the device identifier 315' parsed from the link request 410. In some implementations, the event identifier of the matching request entry 325 generated using the initial request 310 may match the event identifier generated using the link request 410. The application verifier 500 may compare the application identifier 320' with the application identifier 320. When the application identifier 320 'is different from the application identifier 320, the application verifier 500 may search the database 205 for another request entry 325 using the device identifier 315'. The application verifier 500 may repeat the search until no request entry 325 with the device identifier 315' (or event identifier) is found. After traversing database 205, application verifier 500 may determine that application 210B is not allowed to receive any resource identifiers 235 for accessing components 240 of application 210B. Conversely, when the application identifier 320' matches the application identifier 320, the application verifier 500 can determine to allow the application 210B to receive the resource identifier 235 to access the component 240.
The application verifier 500 may use other factors to determine that the application 210B is not allowed to receive the resource identifier 235. The determination may be whether or not a request entry 325 having a device identifier 315 and an application identifier 320 is found that is determined to match the device identifier 315 'and the application identifier 320', respectively. In some implementations, the application verifier 500 may calculate or determine a time period between receiving the initial request 310 and receiving the link request 410. Determining the duration may be based on a time of receiving the initial request 310 and a time (e.g., a time difference) of receiving the link request 410. With this determination, the application verifier 500 may compare the duration to the time limit. The time limit may correspond to an amount of time a user of the client device 130 is expected to request installation and launch of the executing application 210B. The time limit may represent an expiration time that defines when the application 210B is allowed to receive the resource identifier 235. When it is determined that the duration satisfies the time limit (e.g., is less than or equal to), the application verifier 500 may maintain a determination that the application 210B is to receive the resource identifier 235. Otherwise, when the duration is determined not to satisfy the time limit (e.g., greater than), the application verifier 500 may override the determination.
Upon determining that the application 210B is not permitted to receive the resource identifier 235, the application verifier 500 may restrict provision of the resource identifier 235 to the application 210B on the client device 130. In some implementations, the application verifier 500 may respond to the link request 410 without providing a response to the client device 210B. In some implementations, the application verifier 500 may provide or transmit a response to the client device 130 via the network 105 without any resource identifier 235. The response may indicate that the application 210B determined to be running on the client device 130 is restricted from receiving any resource identifiers 235.
Conversely, when it is determined that the application 210B is allowed to receive the resource identifier 235, the application verifier 500 may identify the resource identifier 235 that includes the matching request entry 325. In some implementations, the application verifier 500 may determine whether the resource identifier 235 is valid. Determining the validity of the resource identifier 235 may be based on a defined grammar (e.g., grammar rules for URIs or deep links). For example, a resource identifier 235 determined to be invalid may have incorrect syntax, such as: the lack of a pathname to any particular component 240 of the application 210B, an incorrect pathname to the component 240, or an incorrect schema for referencing the application 210B.
If the resource identifier 235 is determined to be invalid, the application verifier 500 may override the determination that the application 210B is allowed to receive the resource identifier 235. Further, the application verifier 500 may restrict provision of the resource identifier 235 and may perform the functions described above in response to this determination. On the other hand, if the resource identifier 235 is determined to be valid, the application verifier 500 may maintain a determination that allows the application 210B to receive the resource identifier 235. The application verifier 500 may also identify the resource identifier 235 to respond to the link request 410.
With the identification of the resource identifier 235, the application verifier 500 may provide or transmit the resource identifier 235 to the application 210B via the network 105. In some implementations, the resource identifier 235 can be included as part of at least one response 505. The application verifier 500 may generate a response 505 that includes the resource identifier 235 identified from the request entry 325 maintained on the database 205. Upon generation, the application verifier 500 may transmit a response 505 with the resource identifier 235 to the client device 130 via the network 105.
After transmitting the link request 410, the link requester 400 may wait for a response 505 from the data processing system 110. In some implementations, the link requestor 400 may maintain a timer to count the time elapsed since the transmission of the link request 410 to the data processing system 110. The link requestor 400 may compare the elapsed time to a time limit for receiving the resource identifier 235 (or the response 505 that includes the resource identifier 235). When the elapsed time becomes greater than the time limit, the link requester 400 may determine that the application 210B has not received any request identifiers 325. In addition, the link requestor 400 causes or invokes the application 210B to present an initial interface of the application 210B. The initial interface may be a Graphical User Interface (GUI) (e.g., a launch screen or an initial screen) to be presented by the application 210 by default.
On the other hand, the link requestor 400 of the application 210B may receive the resource identifier 235 from the data processing system 110 via the network 105. The receive resource identifier 235 may be within a time limit for reception. Resource identifier 235 may be included as part of response 505. The link requestor 400 may parse the response 505 to identify the resource identifier 235. Upon identification, the link requestor 400 can direct, cause, or invoke the application 210B to access the component (a form of resource) 240 via the resource identifier 235 received from the data processing system 110. Once invoked, the application 210B can present the component 240 referenced by the resource identifier 235 on the client device 130 (e.g., for display or via audio output). In some implementations, the application 210B can invoke one or more functions of the component 240 (or generally the application 210B) based on parameters passed via the resource identifier 235. In some implementations, the application 210B can also communicate via the network 105 to request data and other resources in the presentation component 240. The resources accessed by the application 210B in the presentation component 240 may be hosted on one or more servers that manage the application 210B, such as another content publisher 120.
In this manner, the transition from the information resources 215 presented on the application 210A to the components 240 of the application 210B that were not initially installed or available may be performed by the client device 130 in a more seamless manner. By issuing the initial request 310 and the link request 410 as described, manual searching to install the application 210B and then finding a particular component 240 in the application 210B may be eliminated. This elimination may reduce the number of interactions performed on the client device 130, reduce the consumption of computing resources on the client device 130, and reduce network bandwidth on the network 105. Further, the reduction in the number of interactions may result in improved human-machine interaction (HCI) of the user with the client device 130. In particular, the HCI with the information resources 215 and content items 230 presented by the application 210A and the components 240 of the application 210 may be improved.
Referring now to fig. 6A and 6B, depicted is a flow diagram depicting an embodiment of a method 600 of communicating data via a resource identifier for an application component. The functions described herein with respect to the method 600 may be implemented or otherwise performed by the system 100 shown in fig. 1-5 or the computing system 700 shown in fig. 7. In general, a data processing system may provide a content item (602). The client device may receive a content item (604). The client device may monitor for interactions with the content item (606). If an interaction is detected, the client device may generate a first request (608). The client device may send a first request (610). The data processing system may receive a first request (612). The data processing system may identify a resource identifier (614). The data processing system may identify a device identifier (616). The data processing system may store the identifier (618). The client device may install an application (620). The client device may execute an application (622). The client device may generate a second request (624). The client device may send a second request (626). The data processing system may receive a second request 628.
The data processing system may identify a device identifier (630). The data processing system may identify an application identifier (632). The data processing system may determine whether the application is authenticated (634). If the verification is not successful, the data processing system may terminate (636). Otherwise, if the validation is successful, the data processing system may retrieve the resource identifier (638). The data processing system may transmit a resource identifier (640). The client device may receive a resource identifier (642). The client device may access the components (644).
In more detail, a data processing system (e.g., data processing system 110) may provide a content item (e.g., content item 230) (602). The content item 230 may include a resource identifier (e.g., resource identifier 235) to access a resource (e.g., component 240) that is available via another application (e.g., application 210B) that is not already installed on the client device. A client device (e.g., client device 130) may receive a content item (604). The client device can present the content item on a resource (e.g., information resource 215) via an application (e.g., application 210A).
The client device may monitor for interactions with the content item (606). The interaction may be with a resource identifier included in the content item. If an interaction is detected, the client device may generate a first request (e.g., initial request 310) (608). The first request may include a device identifier (e.g., device identifier 315) and a resource identifier originally included in the content item. The client device may send a first request (610).
The data processing system may receive a first request (612). The data processing system may parse the first request. The data processing system may identify a resource identifier (614). The resource identifier may already be included in a content item presented in the information resource via the client device. The data processing system may use the resource identifier to identify an application identifier (e.g., application identifier 320) corresponding to an application to be installed on the client device. The data processing system may identify a device identifier (616). The device identifier may correspond to a client device. The data processing system may store the identifier (618). The data processing system may associate the device identifier with both the application identifier and the resource identifier (e.g., as request entry 325) for storage on a database (e.g., database 205).
The client device may install an application (e.g., application 210B) (620). The client device may invoke an application retrieval interface (e.g., application retrieval interface 305) to request the application. The application retrieval interface may send a request for an application (e.g., application request 330) to an application distribution service (e.g., application distribution service 125). The application distribution service 125, in turn, can provide an installation package (e.g., installation package 335) for installing the application. Upon receipt, the client device may install the application using the installation package.
The client device may execute an application (622). The application may have scripts or instructions according to an Application Programming Interface (API), such as link requester 400. The client device may generate a second request (e.g., link request 410) (624). The second request may include a device identifier (e.g., device identifier 315') corresponding to the client device and an application identifier (e.g., application identifier 320') corresponding to the application that is now installed. The client device may send a second request (626).
The data processing system may receive a second request 628. The data processing system may parse the second request. The data processing system may identify a device identifier (630). The data processing system may identify an application identifier (632). The data processing system may determine whether the application is authenticated (634). Using the device identifier, the data processing system may search the database for a request for an entry having a matching device identifier. If the verification is not successful, the data processing system may terminate (636). An application on the client device may also present an initial interface.
Otherwise, if the validation is successful, the data processing system may retrieve the resource identifier (638). The data processing system may identify a resource identifier associated with the device identifier and the application identifier in the second request. The data processing system may transmit a resource identifier (640). The resource identifier may be sent as part of a response to the second request (e.g., response 505). The client device may receive a resource identifier (642). The client device may access a resource (e.g., component 240) (644). The client device may use the resource identifier to direct the application to access the resource.
FIG. 7 illustrates an overall architecture of an exemplary computer system 700 that may be used to implement any of the computer systems discussed herein, including the data processing system 110 and its components, the content provider 115, the content publisher 120, the application distribution service 125 and its components, and the client device 130, according to some embodiments. Computer system 700 may be used to provide information for display via network 730. The computer system 700 includes one or more processors 720 communicatively coupled to a memory 725, one or more communication interfaces 705 communicatively coupled to at least one network 730 (e.g., network 105), and one or more output devices 710 (e.g., one or more display units) and one or more input devices 715.
The processor 720 shown in fig. 7 may be used to execute instructions stored in the memory 725 and, in so doing, may also read from and write to memory various information that is processed and/or generated in accordance with the execution of the instructions. The processor 720 (collectively referred to herein as processing units) coupled with the memory 725 may be included in components of the system 100, such as the data processing system 110 (as well as the content providers 115, the content publishers 120, the application distribution service 125 and its components, and the client devices 130). For example, the data processing system 110 may include a memory 725 as the database 205. A processor 720 (collectively referred to herein as a processing unit) coupled with a memory 725 may be included in content provider 115. For example, the content provider 115 may include a memory 725 that stores the content items 225. A processor 720 (collectively referred to herein as a processing unit) coupled to the memory 725 may be included in the content publisher 120. For example, the content publisher 120 may include a memory 725 for storing the information resource 215. A processor 720 (collectively referred to herein as a processing unit) coupled with the memory 725 may be included in the application distribution service 125. For example, the application distribution service 125 can include a memory 725 that stores the installation package 330. A processor 720 (collectively referred to herein as a processing unit), coupled with a memory 725 may be included in the client device 130. For example, the client device 130 may include a memory 725 to store the applications 210A and 210B and the application retrieval interface 305.
The processor 720 of the computer system 700 may also be communicatively coupled to the communication interface 705 or cause the processor 720 to control the communication interface 705 to transmit or receive various information in accordance with the execution of instructions. For example, the communication interface 705 may be coupled to a wired or wireless network, bus, or other communication means, and thus may allow the computer system 700 to transmit information to other devices (e.g., other computer systems) or receive information from other devices (e.g., other computer systems). Although not explicitly shown in the systems of fig. 1-5 or 7, one or more communication interfaces facilitate the flow of information between components of system 700. In some implementations, the communication interface may be configured (e.g., via various hardware or software components) to provide a website as an access portal for at least some aspects of the computer system 700. Examples of the communication interface 705 include a user interface (e.g., the application 210A, the information resource 215, the content item 230, the application 210B, and the component 240) through which a user can communicate with other devices of the system 100.
An output device 710 of the computer system 700 shown in fig. 7 may be provided to allow various information to be viewed or otherwise perceived in connection with execution of the instructions. An input device 715 may be provided, for example, to allow a user to manually adjust, make selections, enter data, or interact with the processor in any of a variety of ways during execution of instructions. Additional information regarding general computer system architectures that may be used for the various systems discussed herein is further provided herein.
The network 730 may include a computer network such as the internet, a local area network, a wide area network, a metropolitan area network, or other area network, an intranet, a satellite network, other computer networks such as voice or data mobile telephone communication networks, and combinations thereof. Network 730 may be any form of computer network that relays information between components of system 100, such as data processing system 110 and components thereof, content provider 115, content publisher 120, application distribution service 125 and components thereof, and client device 130. For example, network 730 may include the internet and/or other types of data networks, such as a Local Area Network (LAN), a Wide Area Network (WAN), a cellular network, a satellite network, or other types of data networks. Network 730 may also include any number of computing devices (e.g., computers, servers, routers, network switches, etc.) configured to receive and/or transmit data within network 730. Network 730 may further include any number of hardwired and/or wireless connections. The client device 130 may wirelessly communicate (e.g., via WiFi, cellular, radio, etc.) with a transceiver that is hardwired (e.g., via fiber optic cable, CAT5 cable, etc.) to other computing devices in the network 730.
Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in tangible media, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. The subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a computer storage medium for execution by, or to control the operation of, data processing apparatus. The program instructions may be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by the data processing apparatus. The computer storage medium may be or be included in a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Further, although the computer storage medium is not a propagated signal, the computer storage medium can comprise a source or destination of computer program instructions encoded in an artificially-generated propagated signal. The computer storage medium may also be or be included in one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
The features disclosed herein may be implemented on a smart television module (or connected television module, hybrid television module, etc.) that may include a processing module configured to integrate an internet connection with a more traditional television program source (e.g., received via cable, satellite, wireless, or other signals). The smart television module may be physically incorporated into a television set or may comprise a separate device such as a set-top box, a blu-ray or other digital media player, a game console, a hotel television system, and other companion devices. The smart tv module may be configured to allow viewers to search and find videos, movies, photos and other content on the web, on local cable tv channels, satellite tv channels or stored on a local hard disk. A set-top box (STB) or set-top unit (STU) may include an information appliance device that may contain a tuner and connect to a television and an external signal source, tune the signal to content, and then display the content on a television screen or other display device. The smart television module may be configured to provide a home screen or an upper screen that includes icons for a number of different applications, such as a web browser and a number of streaming media services, connected cable or satellite media sources, other web "channels," and so forth. The smart television module may be further configured to provide an electronic program guide to the user. A companion application to the smart television module may operate on the mobile computing device to provide the user with additional information about available programs, to allow the user to control the smart television module, and so on. In some embodiments, these features may be implemented on a laptop or other personal computer, smartphone, other mobile phone, handheld computer, tablet, or other computing device. In some implementations, the features disclosed herein may be implemented on a wearable device or assembly (e.g., a smart watch), which may include a processing module configured to integrate internet connectivity (e.g., with another computing device or network 630).
The operations described in this specification may be implemented as operations performed by data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources. The terms "data processing apparatus," "data processing system," "user device," or "computing device" encompass all types of apparatus, devices, and machines for processing data, including for example, a programmable processor, a computer, a system on a chip, or multiple chips, or a combination of the foregoing. The apparatus can comprise special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment may implement a variety of different computing model infrastructures, such as web services, distributed computing, and grid computing infrastructures.
A computer program (also known as a program, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with the instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to read data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Further, the computer may be embedded in another device, e.g., a mobile telephone, a Personal Digital Assistant (PDA), a mobile audio or video player, a game player, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a Universal Serial Bus (USB) flash drive). Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disks; and CD ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube), plasma, or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse and a trackball, by which the user can provide input to the computer. Other types of devices may also be used to provide for interaction with the user. For example, feedback provided to the user can include any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback, and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, the computer may interact with the user by sending documents to and receiving documents from the devices used by the user, such as by sending web pages to a web browser on the user's client device in response to requests received from the web browser.
Implementations of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include local area networks ("LANs") and wide area networks ("WANs"), internetworks (e.g., the internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
A computing system, such as system 700 or system 100, may include clients and servers. For example, the data processing system 110 and its components, the content provider 115, the content publisher 120, and the application distribution service 125 and its components of the system 100 may each include one or more servers in one or more data centers or server farms. A client (e.g., client device 130) and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some implementations, the server transmits data (e.g., HTML pages) to the client device (e.g., for the purpose of displaying data to or receiving user input from a user interacting with the client device). Data generated at the client device (e.g., a result of the user interaction) may be received at the server from the client device.
While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any invention or of what may be claimed, but rather as descriptions of features specific to particular implementations of the systems and methods described herein. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results.
In some cases, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the implementations described above should not be understood as requiring such separation in all implementations, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products. For example, the content selector 200, the initial request processor 300, the link request processor 405, the application verifier 500, and the database 205 may be part of the data processing system 110, a single module, a logical device having one or more processing modules, one or more servers.
For the cases where the systems discussed herein collect or utilize personal information about a user, the user may be provided with an opportunity to control whether or how programs or features may collect personal information (e.g., information about the user's social network, social behavior or activity, the user's preferences, or the user's location), or to control whether or how content is received from a content server or other data processing system that may be relevant to the user. In addition, certain data may be anonymized in one or more ways before being stored or used, so that personally identifying information is removed when generating the parameters. For example, the identity of the user may be anonymized so that no personally identifying information for the user can be determined, or the geographic location of the user obtaining the location information may be generalized (such as to a city, zip code, or state level) so that a particular location of the user cannot be determined. Thus, the user may control how information is collected about him or her and how the content server uses the information.
Having now described some exemplary embodiments, it will be apparent that the foregoing is illustrative and not limiting, and has been presented by way of example. In particular, although many of the examples presented herein involve specific combinations of method acts or system elements, these acts and those elements may be combined in other ways to accomplish the same objectives. Acts, elements and features discussed only in connection with one embodiment are not intended to be excluded from a similar role in other embodiments.
The phraseology and terminology used herein is for the purpose of description and should not be regarded as limiting. The use of "including," "comprising," "having," "containing," "involving," "characterized by," and variations thereof herein, is meant to encompass the items listed thereafter and equivalents thereof as well as additional items and alternative embodiments that consist of the items listed thereafter. In one embodiment, the systems and methods described herein include one, each combination of more than one, or all of the described elements, acts, or components.
Any reference to an embodiment, element, or act of the systems and methods herein referred to in the singular may also encompass embodiments comprising a plurality of these elements, and any reference to any embodiment, element, or act herein referred to in the plural may also encompass embodiments comprising only one element. References in the singular or plural form are not intended to limit the presently disclosed systems or methods, their components, acts or elements to a single or multiple configurations. A reference to any action or element based on any information, action, or element may include an implementation in which the action or element is based, at least in part, on any information, action, or element.
Any embodiment disclosed herein may be combined with any other embodiment, and references to "an embodiment," "some embodiments," "an alternate embodiment," "various embodiments," "one embodiment," or the like are not necessarily mutually exclusive and are intended to indicate that a particular feature, structure, or characteristic described in connection with the embodiment may be included in at least one embodiment. The terms used herein do not necessarily all refer to the same embodiment. Any embodiment may be included in or exclusively combined with any other embodiment in any manner consistent with aspects and embodiments disclosed herein.
References to "or" may be construed as inclusive such that any term described using "or" may indicate a single, more than one, and any of the terms described.
Where technical features in the figures, detailed description or any claims are followed by reference signs, the reference signs have been included for the sole purpose of increasing the intelligibility of the figures, detailed description, and claims. Accordingly, neither the reference numerals nor their absence have any limiting effect on the scope of any claim element.
The systems and methods described herein may be embodied in other specific forms without departing from the characteristics thereof. Although the examples provided herein relate to communicating data via resource identifiers for application components, the systems and methods described herein may include application to other environments. The foregoing embodiments are illustrative and not limiting of the described systems and methods. The scope of the systems and methods described herein is, therefore, indicated by the appended claims rather than by the foregoing description, and all changes that come within the meaning and range of equivalency of the claims are therefore intended to be embraced therein.
Claims (20)
1. A method of communicating data via a resource identifier, comprising:
receiving, by a data processing system having one or more processors, a first request for content from a client device in response to an interaction with a content item presented on a first resource on the client device, the content item including a resource identifier referencing a second resource accessible via an application to be installed on the client device, the first request including the resource identifier and a device identifier corresponding to the client device;
receiving, by the data processing system and in response to executing the application installed on the client device, a second request for content from the client device, the second request comprising a device identifier corresponding to the client device and an application identifier corresponding to the application;
determining, by the data processing system and in response to receiving the second request, that an application installed on the client device will receive a request identifier included in the first request based on the device identifier and the resource identifier included in the first request and the device identifier and the application identifier included in the second request; and
providing, by the data processing system, the resource identifier to direct the application to access the second resource accessible via the resource identifier for presentation via the application in response to determining that the application is to receive the request identifier.
2. The method of claim 1, further comprising:
prior to receiving the first request and the second request, receiving, by the data processing system, a third request for content from the client device for presentation on the first resource, the third request including a device identifier corresponding to the client device;
determining, by the data processing system, that the application is not installed on the client device by accessing a database using the device identifier, the database maintaining the device identifier through applications installed on corresponding client devices; and
in response to determining that the application is not installed on the client device, selecting, by the data processing system, the content item from a plurality of content items to provide to the client device for display on the first resource in a second application different from the application.
3. The method of claim 1, further comprising:
identifying, by the data processing system and in response to receiving the first request, an application identifier corresponding to an application to be installed on the client device based on the resource identifier included in the first request;
storing, by the data processing system, the device identifier and the application identifier in association with the resource identifier on a database; and
identifying, by the data processing system and in response to receiving the second request from the client device, the device identifier and the application identifier from the database, and
wherein determining that the application is to receive the resource identifier further comprises: determining that the device identifier included in the first request matches the device identifier included in the second request, and the application identifier identified in response to receiving the first request matches the application identifier included in the second request.
4. The method of claim 1, further comprising:
generating, by the data processing system and in response to receiving the first request, a first event identifier based on the device identifier included in the first request and the application identifier corresponding to the resource identifier included in the first request; and
generating, by the data processing system and in response to receiving the second request, a second event identifier based on the device identifier and the application identifier included in the second request, and
wherein determining that the application is to receive the resource identifier further comprises: determining that the application is to receive the resource identifier by determining that the second event identifier generated from the second request matches the first event identifier generated from the first request.
5. The method of claim 1, further comprising:
receiving, by the data processing system from the client device, a third request for content generated in response to execution of an application installed on the client device, the second request including at least one of a second device identifier different from the device identifier and a second application identifier different from the application identifier corresponding to a resource identifier included in the first request;
determining, by the data processing system and in response to receiving the third request, that the application will not receive the resource identifier based on at least one of: determining that the second device identifier does not match the device identifier and that the second application identifier does not match the application identifier; and
limiting, by the data processing system, providing, in response to determining that the application will not receive the resource identifier, the resource identifier to the client device to cause the application to present an initial interface.
6. The method of claim 1, further comprising:
determining, by the data processing system and in response to determining that the application is to receive the resource identifier, that the resource identifier referencing the second resource for access via the application is invalid; and
limiting, by the data processing system, providing the resource identifier to the client device to cause the application to present an initial interface in response to determining that the resource identifier is invalid.
7. The method of claim 1, further comprising:
identifying, by the data processing system and in response to receiving the first request, an application identifier corresponding to an application to be installed on the client device based on a content item provided to the client device; and
associating, by the data processing system, a device identifier and an application identifier from a first request for content with a resource identifier included in a content item provided to the client device.
8. The method of claim 1, further comprising:
determining, by the data processing system, that a time period between receiving the first request and receiving the second request satisfies a time limit; and
wherein determining that the application is to receive the resource identifier further comprises: determining that the application will receive the resource identifier in response to determining that the time delay satisfies the time limit.
9. The method of claim 1, wherein receiving a first request for content further comprises receiving the first request in response to an interaction with a content item presented on the first resource source, the first resource source being presented on a second application different from an application on the client device, the interaction with the content item causing the client device to launch an application retrieval interface to install the application in response to determining that the application is not installed on the client device.
10. The method of claim 1, wherein receiving a second request for content further comprises receiving the second request generated by the application in response to a pre-configured function call initiated by the application to retrieve the resource identifier.
11. A system for communicating data via a resource identifier, comprising:
a data processing system having one or more processors, the data processing system configured to:
receiving, from a client device, a first request for content in response to an interaction with a content item presented on a first resource on the client device, the content item including a resource identifier referencing a second resource accessible via an application to be installed on the client device, the first request including the resource identifier and a device identifier corresponding to the client device;
in response to executing the application installed on the client device, receiving a second request for content from the client device, the second request including a device identifier corresponding to the client device and an application identifier corresponding to the application;
in response to receiving the second request, determining that an application installed on the client device will receive a request identifier included in the first request based on the device identifier and the resource identifier included in the first request and the device identifier and the application identifier included in the second request; and
in response to determining that the application is to receive the request identifier, providing the resource identifier to direct the application to access the second resource accessible via the resource identifier for presentation via the application.
12. The system of claim 11, wherein the data processing system is further configured to:
prior to receiving the first request and the second request, receiving a third request for content from the client device for presentation on the first resource, the third request including a device identifier corresponding to the client device;
determining that the application is not installed on the client device by accessing a database using the device identifier, the database maintaining the device identifier through applications installed on corresponding client devices; and
in response to determining that the application is not installed on the client device, selecting the content item from a plurality of content items to provide to the client device for display on the first resource in a second application different from the application.
13. The system of claim 11, wherein the data processing system is further configured to:
in response to receiving the first request, identifying an application identifier corresponding to an application to be installed on the client device based on the resource identifier included in the first request;
storing the device identifier and the application identifier on a database in association with the resource identifier;
identifying the device identifier and the application identifier from the database in response to receiving the second request from the client device; and
determining that the device identifier included in the first request matches the device identifier included in the second request, and the application identifier identified in response to receiving the first request matches the application identifier included in the second request.
14. The system of claim 11, wherein the data processing system is further configured to:
in response to receiving the first request, generating a first event identifier based on the device identifier included in the first request and the application identifier corresponding to the resource identifier included in the first request;
in response to receiving the second request, generating a second event identifier based on the device identifier and the application identifier included in the second request; and
determining that the application is to receive the resource identifier by determining that the second event identifier generated from the second request matches the first event identifier generated from the first request.
15. The system of claim 11, wherein the data processing system is further configured to:
receiving, from the client device, a third request for content generated in response to execution of an application installed on the client device, the second request including at least one of a second device identifier different from the device identifier and a second application identifier different from the application identifier corresponding to a resource identifier included in the first request;
in response to receiving the third request, determining that the application will not receive the resource identifier based on at least one of: determining that the second device identifier does not match the device identifier and that the second application identifier does not match the application identifier; and
in response to determining that the application will not receive the resource identifier, restricting provision of the resource identifier to the client device to cause the application to present an initial interface.
16. The system of claim 11, wherein the data processing system is further configured to:
in response to determining that the application is to receive the resource identifier, determining that the resource identifier referencing the second resource for access via the application is invalid; and
in response to determining that the resource identifier is invalid, restricting provision of the resource identifier to the client device to cause the application to present an initial interface.
17. The system of claim 11, wherein the data processing system is further configured to:
in response to receiving the first request, identifying an application identifier corresponding to an application to be installed on the client device based on a content item provided to the client device; and
a device identifier and an application identifier from a first request for content are associated with a resource identifier included in a content item provided to the client device.
18. The system of claim 11, wherein the data processing system is further configured to:
determining that a time duration between receiving the first request and receiving the second request satisfies a time limit; and
determining that the application will receive the resource identifier in response to determining that the time delay satisfies the time limit.
19. The system of claim 11, wherein the data processing system is further configured to receive the first request in response to an interaction with a content item presented on the first resource source, the first resource source being presented on a second application different from an application on the client device, the interaction with the content item causing the client device to launch an application retrieval interface to install the application in response to determining that the application is not installed on the client device.
20. The system of claim 11, wherein the data processing system is further configured to receive the second request generated by the application in response to a preconfigured function call initiated by the application to retrieve the resource identifier.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US16/546,196 US10826967B1 (en) | 2019-08-20 | 2019-08-20 | Passing of data via deep links for application components |
US16/546,196 | 2019-08-20 | ||
PCT/US2020/044270 WO2021034473A1 (en) | 2019-08-20 | 2020-07-30 | Passing of data via deep links for application components |
Publications (1)
Publication Number | Publication Date |
---|---|
CN113168427A true CN113168427A (en) | 2021-07-23 |
Family
ID=72087279
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202080006293.8A Pending CN113168427A (en) | 2019-08-20 | 2020-07-30 | Communicating data via deep links for application components |
Country Status (4)
Country | Link |
---|---|
US (2) | US10826967B1 (en) |
EP (1) | EP3864529A1 (en) |
CN (1) | CN113168427A (en) |
WO (1) | WO2021034473A1 (en) |
Families Citing this family (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7815748B2 (en) | 2007-06-15 | 2010-10-19 | Gamajet Cleaning Systems, Inc. | Apparatus for cleaning stacked vessels with low head clearance |
Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20150215383A1 (en) * | 2014-01-30 | 2015-07-30 | Lei Sun | Methods for Exchanging Data Amongst Mobile Applications Using Superlinks |
Family Cites Families (21)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20140020068A1 (en) * | 2005-10-06 | 2014-01-16 | C-Sam, Inc. | Limiting widget access of wallet, device, client applications, and network resources while providing access to issuer-specific and/or widget-specific issuer security domains in a multi-domain ecosystem for secure personalized transactions |
US9753746B2 (en) * | 2008-12-19 | 2017-09-05 | Paul Krzyzanowski | Application store and intelligence system for networked telephony and digital media services devices |
US10841839B2 (en) * | 2009-01-28 | 2020-11-17 | Headwater Research Llc | Security, fraud detection, and fraud mitigation in device-assisted services systems |
US9363337B2 (en) * | 2010-08-09 | 2016-06-07 | Yahoo! Inc. | Conversion tracking and context preserving systems and methods |
US8866701B2 (en) * | 2011-03-03 | 2014-10-21 | Citrix Systems, Inc. | Transparent user interface integration between local and remote computing environments |
US8769651B2 (en) * | 2012-09-19 | 2014-07-01 | Secureauth Corporation | Mobile multifactor single-sign-on authentication |
KR102209814B1 (en) * | 2013-12-13 | 2021-02-01 | 삼성전자주식회사 | Data Processing Method and Electronic Device supporting the same |
US9608870B1 (en) * | 2014-02-28 | 2017-03-28 | Google Inc. | Deep link verification for native applications |
US9420087B2 (en) * | 2014-09-02 | 2016-08-16 | Apple Inc. | Notifications with custom user interface |
US9985953B2 (en) * | 2014-11-10 | 2018-05-29 | Amazon Technologies, Inc. | Desktop application fulfillment platform with multiple authentication mechanisms |
US10089676B1 (en) * | 2014-11-11 | 2018-10-02 | Amazon Technologies, Inc. | Graph processing service component in a catalog service platform |
US10069832B2 (en) * | 2014-11-14 | 2018-09-04 | Google Llc | Ephemeral applications |
US10423954B2 (en) * | 2015-01-26 | 2019-09-24 | International Business Machines Corporation | Resource account application management |
US10498847B2 (en) * | 2015-02-11 | 2019-12-03 | Go Daddy Operating Company, LLC | System and method for mobile application deep linking |
US9910685B2 (en) * | 2015-08-13 | 2018-03-06 | Samsung Electronics Co., Ltd. | System and method for identifying, indexing, and navigating to deep states of mobile applications |
CN105162785B (en) * | 2015-09-07 | 2019-01-04 | 飞天诚信科技股份有限公司 | A kind of method and apparatus registered based on authenticating device |
US10365909B2 (en) * | 2016-04-21 | 2019-07-30 | Data Accelerator Ltd. | Method and system for deploying virtualized applications |
US10437577B2 (en) * | 2018-02-02 | 2019-10-08 | Verizon Patent And Licensing Inc. | Systems and methods for mobile application installation |
US10782951B2 (en) * | 2018-02-23 | 2020-09-22 | Digital Turbine, Inc. | Instant installation of apps |
US10592225B2 (en) * | 2018-05-11 | 2020-03-17 | Slack Technologies, Inc. | Method, apparatus, and computer program product for installing third party applications requiring variable host address identification in a group-based communication system |
US10937029B2 (en) * | 2018-06-29 | 2021-03-02 | Alegeus Technologies, Llc | Manage remote procedure calls in centralized processing |
-
2019
- 2019-08-20 US US16/546,196 patent/US10826967B1/en active Active
-
2020
- 2020-07-30 EP EP20757149.8A patent/EP3864529A1/en active Pending
- 2020-07-30 WO PCT/US2020/044270 patent/WO2021034473A1/en unknown
- 2020-07-30 CN CN202080006293.8A patent/CN113168427A/en active Pending
- 2020-11-02 US US17/087,270 patent/US11089085B2/en active Active
Patent Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20150215383A1 (en) * | 2014-01-30 | 2015-07-30 | Lei Sun | Methods for Exchanging Data Amongst Mobile Applications Using Superlinks |
Also Published As
Publication number | Publication date |
---|---|
US20210058446A1 (en) | 2021-02-25 |
EP3864529A1 (en) | 2021-08-18 |
US10826967B1 (en) | 2020-11-03 |
US11089085B2 (en) | 2021-08-10 |
WO2021034473A1 (en) | 2021-02-25 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11907360B2 (en) | Systems and methods for deploying countermeasures against unauthorized scripts interfering with the rendering of content elements on information resources | |
EP3278246B1 (en) | In-domain webpage editing | |
CN108140196B (en) | System and method for reducing latency of content item interactions using client-generated click identifiers | |
US9959192B1 (en) | Debugging interface for inserted elements in a resource | |
US10705897B1 (en) | Data driven API conversion | |
US10970139B2 (en) | Controlling the triggering of function calls from content items | |
US10257251B1 (en) | Systems and methods for using a uniform resource locator to call for different types of content | |
US20210352150A1 (en) | Maintaining session identifiers across multiple webpages for content selection | |
US11947377B2 (en) | Systems and methods for dynamically restricting the rendering of unauthorized content included in information resources | |
US20220141208A1 (en) | Passing authentication information via parameters | |
US20130002540A1 (en) | Operation information generation device | |
CN106796695B (en) | Translation and identification of application installation | |
US10049170B1 (en) | Methods and systems for selectively preventing third-party content from being displayed using undefined publisher identifier | |
US11089085B2 (en) | Passing of data via deep links for application components | |
CN108738362B (en) | Generating deep links for applications based on multi-level referrer data |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |