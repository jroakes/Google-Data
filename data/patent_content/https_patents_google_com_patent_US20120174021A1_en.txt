US20120174021A1 - Systems and methods for displaying android applications launchers in webtop application tray - Google Patents
Systems and methods for displaying android applications launchers in webtop application tray Download PDFInfo
- Publication number
- US20120174021A1 US20120174021A1 US12/984,227 US98422711A US2012174021A1 US 20120174021 A1 US20120174021 A1 US 20120174021A1 US 98422711 A US98422711 A US 98422711A US 2012174021 A1 US2012174021 A1 US 2012174021A1
- Authority
- US
- United States
- Prior art keywords
- environment
- application
- window
- applications
- display
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Abandoned
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/01—Input arrangements or combined input and output arrangements for interaction between user and computer
- G06F3/048—Interaction techniques based on graphical user interfaces [GUI]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/01—Input arrangements or combined input and output arrangements for interaction between user and computer
- G06F3/048—Interaction techniques based on graphical user interfaces [GUI]
- G06F3/0481—Interaction techniques based on graphical user interfaces [GUI] based on specific properties of the displayed interaction object or a metaphor-based environment, e.g. interaction with desktop elements like windows or icons, or assisted by a cursor's changing behaviour or appearance
- G06F3/04817—Interaction techniques based on graphical user interfaces [GUI] based on specific properties of the displayed interaction object or a metaphor-based environment, e.g. interaction with desktop elements like windows or icons, or assisted by a cursor's changing behaviour or appearance using icons
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/14—Digital output to display device ; Cooperation and interconnection of the display device with other functional units
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/451—Execution arrangements for user interfaces
Definitions
- the present invention relates generally to mobile device systems and, more particularly, to mobile systems including multiple environments as described below.
- Operating systems are designed and typically optimized based on specific applications and user desired performance. It is often desirable to have applications of one type of operating system available to another operating system.
- General-purpose computer operating systems such as LinuxTM and WindowsTM have an extensive set of features such as file systems, device drivers, applications, libraries, etc. Such operating systems allow concurrent execution of multiple programs, and attempt to optimize the response time (also referred to as latency time), and CPU usage, or load, associated with the servicing of the concurrently executing programs. Unfortunately, however, such operating systems are not generally suitable for embedded real-time applications, such as for mobile computing devices. Under certain circumstances it would be desirable for a mobile computing device to have the performance associated with a mobile-specific embedded operating system and features of a general-purpose operating system.
- Linux for example, is a well known general purpose desktop operating system with many desirable features for modern devices including modern operating systems features, numerous development tools, networking, etc.
- Linux was not designed to be an embedded or real time operating system.
- Many modern devices, such as, without limitation, set top boxes, mobile phones and car navigation systems require not only the features of a general purpose operating system such as Linux, but also the features of an embedded or real time operating system, including real time performance.
- Linux-based operating systems offer some benefits but that other types of operating systems offer other benefits, particularly in the context of certain types of devices such as mobile devices, it would be desirable if somehow multiple operating systems could be implemented on a single device so that the benefits of each different type of operating system could be achieved in relation to that device.
- Running multiple operating systems on a single device has been accomplished through virtualization techniques, such as (for example) found in VMwareTM, VirtualBoxTM, QEMUTM, etc.
- virtualization such as (for example) found in VMwareTM, VirtualBoxTM, QEMUTM, etc.
- Emulation is susceptible to high overhead costs, and consequently conventional virtualization techniques are often impractical, especially again in the context of certain types of devices such as mobile devices.
- FIG. 1 is an exemplary illustration of a mobile device in the disclosure
- FIG. 2 is a block diagram representing in schematic form exemplary components of the device of FIG. 1 , including an exemplary mobile device system that has multiple environments;
- FIG. 3 is a block diagram representing in schematic form certain additional exemplary component
- FIG. 4 is a block diagram representing processes pertaining to an exemplary run-time coexistence schema
- FIG. 5 is a flow chart showing steps of an exemplary booting sequence for the mobile device system of FIG. 2 ;
- FIG. 6A is an illustration of one embodiment of the GUI of the device of FIG. 1 ;
- FIG. 6B is a detailed illustration of the application tray of the GUI of FIG. 5 ;
- FIG. 7 is a flow chart showing steps of displaying the application tray.
- an mobile device system including both a first application-middleware environment and a second application-middleware environment that each communicate directly with a single kernel running directly upon a mobile computing device's hardware.
- one or both of the first and second application-middleware environments are Linux-based application-middleware environments.
- one or both of the first and second application-middleware environments are embedded.
- each of the first and second application-middleware environments is an embedded Linux-based application-middleware environment, and both of the application-middleware environments communicate directly with a single Linux kernel running directly upon a computing device's hardware (e. g., the hardware of a mobile device).
- a method for displaying an application tray on a device In the first step, the device displays, in a first portion of the application tray on a display of the device, icons corresponding to applications running and capable to be launched in a first environment operating on the device. In the second step, the device displays, in a second portion of the application tray on the display of the device, icons corresponding to applications running and capable to be launched in a second environment operating on the device. In the third step, the device detects a selection on one of the displayed first and second icons. In the fourth step, the device launches the first application in a window when the first icon is selected. Finally, the device displays the window on top of other open windows on the display. The first environment and the second environment interact with a kernel operating on the device. The second environment is a primary environment operating on the device.
- One embodiment discloses a device including a display and at least one processor configured to interact with the display and perform the following acts.
- the device displays, in a first portion of the application tray on a display of the device, a first plurality of icons corresponding to a first plurality of applications running in a first environment operating on the device.
- the device displays, in a second portion of the application tray on the display of the device, a second plurality of icons corresponding to a second plurality of applications running in a second environment operating on the device.
- the device launches one of the first plurality of applications in a first window when one of the first plurality of icons is selected.
- the device displays the first window on top of other open windows on the display.
- the first environment and the second environment interact with a kernel operating on the device.
- the second environment is a primary environment operating on the device.
- a mobile device including a display; at least one processor configured to interact with the display; and at least one storage device that stores a set of instructions to direct the at least one processor to perform the following acts.
- the device displays, in a first portion of the application tray on a display of the device, a first plurality of icons corresponding to a first plurality of applications running in a first environment operating on the device.
- the device displays, in a second portion of the application tray on the display of the device, a second plurality of icons corresponding to a second plurality of applications running in a second environment operating on the device.
- the device launches one of the first plurality of applications in a window when one of the first plurality of icons is selected.
- the device displays the first window on top of other open windows on the display.
- the first environment and the second environment interact with a kernel operating on the device.
- the second environment is a primary environment operating on the device.
- FIG. 1 an exemplary illustration of a mobile computing device 10 is provided.
- the mobile device 10 includes a graphical user interface (GUI) 12 and a plurality of data input buttons 14 .
- GUI graphical user interface
- the mobile device 10 is selected from the group including, but not limited to, a mobile personal computer (PC), a netbook, a mobile telephone, a laptop computer, a handheld computer and a smart phone. Accordingly, the mobile device 10 includes communication features (not shown) to enable wireless or wire line communication with a remote device such as a wireless network.
- the computing device is mobile, it is intended to have significant computing power, with a processor speed in excess of 500 MHZ, although slower processors are not excluded. Considering the computing power, a user can connect the mobile device to a variety of peripheral devices.
- the peripheral devices are selected from a group including, but not limited to, display monitor, a laptop computer, a desktop computer, a tablet PC, a screen projector, a docking station, a television monitor, etc.
- the connection between the mobile device 10 and the peripheral device can be wireless or wire line.
- the mobile computing device 10 may also include a variety of added applications.
- the additional applications may be based upon the particular software and hardware environments that are selected for the device.
- a compass function can be provided for orientation
- an accelerometer function can be provided, in addition to telephony, Bluetooth and Wi-Fi stack for connectivity keyboard and touch screen function for enhanced interaction.
- the present disclosure is directed to systems and methods for displaying an application tray 400 on the mobile computing device 10 .
- the application tray 400 includes application launcher icons corresponding to applications in different application-middleware environments.
- the application tray 400 can launch the application in the corresponding first or second application-middleware environment when the displayed launcher icon is selected.
- FIG. 2 a block diagram is provided showing in schematic form particular components of the mobile device system that includes a GNU/Linux distribution or operating system (OS) 15 in communication with device hardware 20 as indicated by an arrow 11 .
- the GNU/Linux OS 15 more particularly includes a Linux kernel 18 and a Linux user component 16 that are in communication with one another as indicated by an arrow 13 .
- the Linux user component 16 is further shown to include a first application-middleware environment 22 and a second application-middleware environment 24 (hereinafter, the respective first and second application-middleware environments will more simply be referred to as the first and second environments, respectively).
- each of the first and second environments 22 and 24 , respectively, of the Linux user component 16 is in communication with the single Linux kernel 18 .
- the first environment 22 is an embedded environment intended for use in mobile devices, namely, an Android environment (additional description regarding Android can be found at http://www.openhandsetalliance.com, the website of the Open Handset Alliance, which is hereby incorporated by reference herein), while the second environment 24 is a standard GNU/Linux environment.
- those environments 22 , 24 being capable of communications with the Linux kernel 18 , those environments also communicate with each other, as represented by an arrow 21 .
- the multiple environments 22 , 24 can operate and coexist independently of one another. This is not to say that the two environments 22 , 24 are absolutely operationally independent in all respects. Indeed, to the extent that both environments 22 , 24 interact with and compete for resources of the Linux kernel 18 , the two environments are interdependent in that respect. Likewise, to the extent that the two environments 22 , 24 are in communication with one another (e. g., as represented by the arrow 21 ), the two environments can operate in conjunction with one another in that manner as well.
- the two environments 22 , 24 are considered “independent” in the sense that each of the environments is capable of operating by itself even if the other of the environments was not present (and, indeed, each of the environments can be operationally independent before simultaneous implementation of both of the environments upon the same Linux kernel 18 ). Additionally, in at least some embodiments, the two environments 22 , 24 can also be considered “independent” insofar as each of the two environments is of a different type (e. g., in terms of being embedded, etc.) and correspondingly serves different purposes in terms of the operations it performs and the functions it can achieve vis-a-vis the Linux kernel 18 , the device hardware 20 , and the outside world (e. g., users and/or other devices).
- the present invention is intended to encompass alternate embodiments in which other types of operating systems, kernels, and other operating system components are employed, and the present invention is not intended to be limited only to Linux-based systems.
- the first environment 22 is the Android environment and the second environment 24 is the standard GNU/Linux environment
- other environments can be employed instead of the Android environment.
- such other environments can be but need not be embedded environments, and/or can be but need not be suitable for use in mobile devices.
- environments and/or operating systems that operate in real time or do not operate in real time can be employed.
- two environments 22 , 24 are shown in FIG. 1
- the present invention is intended to encompass additional embodiments in which more than two environments are present (and can operate and coexist independently of one another, where the manner of independence of the environments is as described above).
- the first environment 22 is the Android environment and the second environment 24 is in accordance with the standard GNU/Linux distribution
- those environments can more particularly encompass several software components as shown.
- the first (Android) environment 22 that environment includes applications 2 (e. g., user applications), which are in the Dalvik language, and middleware 3 , with the applications and middleware being bundled together.
- the middleware 3 as shown includes an Android application framework 4 and Android run-time programming 5 .
- the middleware 3 of the first environment 22 can also include other components, for example, a radio interface layer, and/or components allowing for global positioning system (GPS) functioning.
- GPS global positioning system
- the middleware 3 (or portions thereof) is released under an Apache license.
- these applications are managed by the Android application framework 4 and interpreted in the Android run-time programming 5 (more particularly, an interpreter established by the run-time programming translates the applications at run-time).
- the applications 2 which can be understood to include stacks and other application components, are separate from one another and include computer instructions that are recognizable by the middleware 3 atop which the applications 2 are juxtaposed.
- the Android run-time programming 5 in particular makes use of a Dalvik register-based virtual machine (VM) as well as Dalvik libraries and tools.
- the VM interacts with the Dalvik libraries and tools, as well as with other components such as the Linux kernel 18 .
- the Dalvik (Android implemented) libraries are proprietary libraries that are implemented on top of Linux kernel 18 .
- the functionality implemented by way of the Dalvik libraries is sufficient to run the Dalvik VM, but are based on a subset of the libraries supported by GNU/Linux.
- the Dalvik register-based virtual machine (including the Dalvik language) is employed in the present embodiment because it has been optimized for implementation in mobile devices.
- Dalvik was conceived as an instrument to enable a large population of Java programmers to easily develop applications on relatively computationally-weak (compared to personal computers) mobile devices.
- Java is not the same as Dalvik.
- register-based virtual machines such as that provided by Dalvik are easier to optimize than stack-based architectures such as the Java virtual machine on a particular set of hardware.
- Android/Dalvik replicates a complete middleware layer, rather than merely a byte-code interpreter (VM) as does Java.
- VM byte-code interpreter
- Dalvik is not Java, Dalvik and Java share a common syntax so that programmers can easily adapt their skills to develop Dalvik applications.
- the applications 2 operated by the middleware 3 (and particularly by the Android run-time programming 5 ) are Dalvik-interpreted applications rather than Java-interpreted applications, the applications 2 are similar to Java-interpreted applications in that they are byte-code-interpreted applications.
- the second (GNU/Linux) environment 24 that environment includes its own applications 6 (e. g., user applications) coupled to middleware 7 , with the middleware including both a GNU application framework 8 and GNU libraries/tools 9 .
- the libraries/tools 9 can include a variety of components including, for example, libraries such as Qt or GTK (GIMP Toolkit) libraries useful for the display of information on a GUI, as well as other libraries/tools discussed in further detail below.
- the middleware 7 can include numerous other types of particular software components including, for example, one or more desktop environments such as GNOME, Enlightenment, Xfce, Fluxbox, LXDE and KDE, and/or a Gstreamer multimedia framework, and/or an X11 Window manager.
- the applications 6 these more particularly can be native applications in the sense that the executable code of those applications correspond to the instruction set architecture of the Linux kernel 18 and/or the device hardware 20 .
- each of the applications 6 can also be understood to include its own respective stacks and other application software components that are separate from those of the other applications 6 , and include computer instructions that are recognizable by the middleware 7 atop which the applications 6 are juxtaposed.
- the middleware 7 includes one or more of the software components discussed above (e. g., the aforementioned desktop environments)
- one or more of the applications 6 can be coupled to those components of the middleware.
- the second environment 24 in combination with the Linux kernel 18 more particularly takes the form of an Ubuntu® Linux stack (additional description regarding Ubuntu can be found at www.ubuntu,com, sponsored by Canonical Ltd. of the United Kingdom, which is hereby incorporated by reference herein).
- the second environment 24 is hereinafter referred to as an Ubuntu environment (albeit Ubuntu technically also encompasses that Linux kernel as well as the environment 24 ).
- the second environment 24 (and particularly the middleware 7 of that environment) additionally is capable of supporting a multiplicity of logical memory (data) partitions, while the first environment 22 only has a single logical memory partition in addition to providing system components.
- the second environment 24 may only have one logical memory partition, and/or that one or more other environments may also or instead be configured to support multiple logical memory partitions.
- the first environment 22 is an Android environment and the second middleware system environment 24 is an Ubuntu environment
- a variety of other types of environments can also or alternatively be employed including, for example, standard Linux-based environments, Symbian (Symbian Foundation Ltd., www.symbian.com) environments, and Windows-based environments (e. g., Windows and Windows Mobile).
- the environments are not Linux-based environments and correspondingly the environments can be implemented in conjunction with different types of kernels other than a Linux-based kernel (this can be the case, for example, with respect to Symbian or Windows-based environments as mentioned above).
- the device hardware 20 can include a variety of hardware devices,
- the device hardware 20 can include a memory storage device (not shown) coupled to a processor (not shown), which stores computer executable instructions that are configured to perform various functions and operations, some of which are described herein.
- the device hardware 20 can in addition (or instead) include any of a variety of other components/resources, such as cellular Bluetooth and/or Wi-Fi transceivers or radios, keyboards, other input devices such as a mouse and/or touch screens, memory sub-systems, audio amplifiers, output devices such as speakers and/or video screens, hardware accelerators, IP sockets, etc.
- the Linux kernel 18 allocates resources of the mobile device by connecting and managing interaction between the physical world of the device hardware 20 and the respective middleware 3 , 7 of the environments 22 , 24 , respectively.
- the software components encompassed by the respective middleware 3 , 7 are often referred to as the middleware because they are logically interposed between the kernel and software applications 2 , 6 , respectively.
- the purpose of the respective middleware 3 , 7 is to orchestrate interaction between the device hardware 20 (physical world) and the applications 2 , 6 , respectively.
- the device hardware 20 is again shown to be in communication with the Linux kernel 18 that is in communication with the Linux user component 16
- the Linux user is again shown to include the first (Android-based) environment 22 and the second (Linux-based) environment 24 .
- the kernel 18 particularly includes several modules 43 , which include a set of kernel drivers 42 and an Android event (AEV) module 44 (which is described in more detail below). Included among the drivers 42 are device drivers (e. g., input device drivers) for components of the device hardware 20 .
- FIG. 3 more particularly shows the first environment 22 as including a portal service module 26 , a portal activity module 28 , an Android services module 30 , and an Android applications module 32 .
- the modules 28 and 32 can be considered to be among the applications 2 of the first environment 22 as shown in FIG. 2 , while the modules 26 and 30 can be considered portions of the middleware 3 of that environment.
- FIG. 3 more particularly shows the second environment 24 as including an arbiter or resource manager 34 , an Android in a window (AIW) module 36 , and a Linux services module 40 .
- the modules 34 , 36 and 40 can be considered portions of the middleware 7 of FIG. 2 .
- the applications 6 of FIG. 2 are additionally shown in FIG. 3 as Linux applications (potentially the AIW module 36 can also be considered one of the applications 6 ).
- the various modules 26 , 28 , 30 , 34 , 36 and 40 are configured to serve particular functions.
- the AIW module 36 in particular is configured to display a first environment application window on the GUI 12 while the second environment 24 is the primary environment.
- the AEV 44 which as mentioned above is a kernel module, operates in conjunction with the AIW module 36 and in particular takes absolute coordinate and keyboard events from AIW 36 and passes them to an event hub.
- that module contains a set of instructions configured to allow service for the first environment 22 and directs all communication with the resource manager 34 . While the mobile device 10 is operating, the portal service module 26 is preferably running at all times. Additionally, the portal service module 26 is connected to activity associated with the portal activity module 28 , as well as first environment 22 broadcast events.
- the portal activity module 28 is an application, or set of computer executable instructions.
- the portal activity module 28 more particularly represents a second environment 24 application located on the first environment 22 stack.
- the portal activity module 28 can represent a specific Ubuntu application, and when the portal activity module 28 has focus, Ubuntu is in view through the GUI 12 .
- the co-existing environments 22 , 24 within the operating system 15 communicate with each other as indicated by the arrow 21 and also communicate with the same Linux kernel 18 as indicated by the arrows 13 , 17 and 19 of FIG. 2 .
- Android/Dalvik replicates a complete middleware layer, rather than merely a byte-code interpreter (VM) as does Java, absent the taking of appropriate steps there is a possibility of conflict in the operation of the middleware 3 and the middleware 7 of the first and second environments 22 and 24 , respectively, in terms of the allocation of resources/physical assets controlled through the Linux kernel 18 .
- the resource manager 34 which is part of the second environment 24 , communicates directly with the portal service module 26 , which is part of the first environment 22 . Further, the portal service module 26 , which is part of the first environment 22 , communicates directly with the resource manager 34 .
- the resource manager 34 is a set of instructions configured to manage the resources shared by the first environment 22 and second environment 24 .
- the shared resources include display devices, input devices, power management services and system state information.
- the resource manager 34 is configured to control the accessing of the device hardware 20 by the environments 22 , 24 . Additionally, the resource manager 34 identifies and controls which user interface associated with the environments 22 , 24 is displayed through the GUI of the computing device.
- the portal service module 26 is the source of all communications from the first environment 22 to the resource manager 34 . Additionally, the portal service module 26 is a sink for all callbacks from the resource manager 34 to the first environment 22 .
- the resource manager 34 provides a status discoverable application programming interface (API) to the portal service module 26 . This API is configured to be called by the resource manager 34 at any time.
- the resource manager 34 is configured to obtain and process run-time status, which allows for the resource manager to maintain a state machine. For the first environment 22 , the portal service module 26 provides run-time status to processes that require them.
- the portal service module 26 requests and receives status updates from processes which provide status information (for these reasons, the portal service module 26 can more particularly be considered part of the Android run-time programming 5 of FIG. 2 ).
- a similar communication for the second environment 24 is controlled by the resource manager 34 , which provides run-time status to the processes that require them.
- the resource manager 34 requests and receives status updates from various processes that provide status information.
- the drivers 42 logically associated with the kernel 18 communicate directly with the resource manager 34 as well as the processes that provide run-time status information.
- the aforementioned API of the resource manager 34 arbitrates access to user interface devices, such as displays, touch screens or the GUI of the computing device. In yet another example, this API arbitrates access to power input devices, such as batteries and/or AC/DC wall plugs.
- the first environment 22 and the second environment 24 are independent from the other in the manner discussed above, and co-exist with respect to the other.
- Each of the environments 22 , 24 is a fully-functioning environment, and does not need the other environment to function, such that the two environments can be said to exist on the mobile device 10 with 100% independence with respect to the other.
- the first and second environments 22 , 24 do not co-exist in a virtualization or emulation scheme, but rather each of the environments operates on the shared, single kernel 18 .
- the first and second environments 22 , 24 in particular have run-time coexistence in which both of the environments 22 , 24 are run as stand-alone, native environments.
- Neither of the environments 22 , 24 is recompiled, as there is no need to leverage a common C run-time environment. Because of the presence of the two environments 22 , 24 , a user can access applications 2 , 6 that are coded purely for one or the other of the environments 22 , 24 , and a user can access an application that is coded I′ or one of the environments without an interruption to the user's computing experience with respect to the other of the environments.
- FIG. 4 an additional block diagram shows in schematic form aspects of the operating system 15 (with the Linux user 16 and Linux kernel 18 ) by which an exemplary co-existence scheme f or the first (Android) environment 22 and the second (Ubuntu) environment 24 is provided.
- each of the environments 22 , 24 operates on a separate run-time environment, which provides software services for programs and/or processes while the mobile device 10 is operating.
- Android processes 46 and Android libraries 48 access a Bionic C (or simply bionic) library 50 , which is optimized and modified specifically for the Android environment.
- the Android libraries 48 and bionic library 50 can be considered to form part of the Android run-time programming 5 of FIG. 2 .
- Ubuntu processes 52 and Ubuntu libraries 54 access a GNU C (glibc) library 56 , which is used in many standard desktop Linux-based systems.
- the Ubuntu libraries 54 and glibc library 56 can be considered to form part of the GNU libraries/tools 9 of FIG. 2 .
- Each respective one of the environments 22 , 24 runs on its respective C libraries without conflicting with the other one of the environments 22 , 24 .
- a server side launcher 60 may start to run when the device 10 is docked for the first time.
- the server side launcher 60 may be a standalone service or part of the portal service module in FIG. 3 .
- the server side launcher 60 will keep running after started.
- an Android launcher process 66 will be launched when user selects on one of the Android application launcher icons in Application Tray.
- a flow chart shows steps of an exemplary boot sequence for the operating system 15 of FIG. 2 .
- the boot sequence includes both common and environment-specific steps.
- the actual boot sequence is dependent upon rules associated with a predetermined device state of the mobile device 10 that dictates the booting sequence.
- a peripheral device such as a monitor
- the device state is considered to be in docked mode
- the second (Linux-based) environment 24 is the default primary environment.
- the mobile device 10 is not connected to a peripheral device, then it is in mobile mode, and the first (Android) environment 22 is the default primary environment.
- both environments are launched simultaneously (that is, the secondary/non-primary environment is launched simultaneously with the primary environment).
- the secondary environment nevertheless still operates in the background relative to the primary environment, in case the mobile device 10 state changes and the secondary environment is switched to become the primary environment.
- the mobile device 10 is in docked mode and the peripheral device is unplugged, there is an automatic switch to mobile mode, which results in the secondary environment becoming the primary environment, and vice versa.
- the boot sequence is initiated at step 300 , followed by the launching/initializing of the Linux kernel 18 (or core) at step 310 .
- a bootloader program initializes prior to the launching of the kernel 18 .
- the kernel itself then launches user space scripts at step 320 .
- the resource manager 34 is further launched at step 330 , followed by an identification of the mode state at step 340 .
- a reference library is accessed at step 350 to determine the criteria associated with and/or dictated by the mode state that is identified.
- services common to both the first environment 22 and the second environment 24 are launched.
- the mode state determined at step 340 is subsequently referenced and considered at step 370 and, depending upon the mode state, different paths are followed.
- the first environment 22 should be the primary environment while the second environment 24 should be the secondary environment. Consequently, in that circumstance, first environment 22 initialization scripts are launched at step 372 , followed by the launching of second environment 24 initialization scripts at step 374 .
- the second environment 24 should be the primary environment and the first environment 22 should be the secondary environment. Consequently, in that circumstance, second environment 24 initialization scripts are launched at step 376 , followed by the launching of first environment 22 initialization scripts at step 378 .
- the process in each case proceeds to step 380 at which the mobile device 10 becomes operational.
- both environments are launched and running before the mobile device 10 is operational at step 380 .
- the common services are launched first at step 360 .
- the primary and secondary environments are launched in parallel.
- the primary environment-specific services based upon the device state, are launched immediately before the secondary environment-specific services.
- Either the first environment 22 or the second environment 24 can be the primary environment.
- the primary environment may be switched to the secondary environment automatically or by user commands. Simultaneously, the secondary environment will be switched to the primary environment when the primary environment is switched to the secondary environment.
- Both the first environment 22 and the second environment 24 are running when the mobile device 10 is operational. However, the secondary environment operates in the background relative to the primary environment.
- FIG. 6A shows an embodiment of the GUI 12 in the mobile device 10 .
- the mobile devices 10 works in a Webtop mode.
- all the applications supported by the second environment 24 may be displayed in multiple windows on the GUI 12 .
- These applications are called Webtop applications.
- the Webtop applications may be a file browser, a web browser, or any other pre-installed or user-installed Webtop applications.
- a user may launch applications supported by the first environment 22 in a single window.
- a user may launch Android applications in a single window.
- FIG. 6A there are two launched Webtop application windows 450 and 460 on the GUI 12 .
- an Android in a window (AIW) window 430 where users can navigate to the Android environment.
- a user may choose to open more Webtop applications or maximize one of the Webtop application windows to take advantage of the full view of the display. As a result, the AIW window may lose focus and be hidden by other open Webtop windows. If the user wishes to make a call or launch other Android applications, the user has to find the AIW window and bring the AIW window on top of the other open windows first. In that case, it would be very difficult for the user to launch Android applications if the Android applications can only be launched within the AIW window.
- an application tray 400 is displayed.
- One embodiment of the application tray 400 is shown in FIG. 6B .
- the application tray 400 displays Android application launchers 412 and 416 alongside the Webtop applications launchers 422 and 426 .
- the Android application launchers 412 and 416 are displayed in the first portion 410 of the application tray 400 .
- the Webtop application launchers 422 and 426 are displayed in the second portion 420 of the application tray 400 .
- the application tray 400 may display a visual separator 430 between the first and second portions 410 and 420 .
- the style of the visual separator 430 may be defined and/or changed by the user.
- the application tray 400 may further display a visual indicator 440 to provide visual indication of the status of the running applications.
- the user may choose or define the kind of visual effects he/she prefers.
- the visual indicator 440 may be a small cue under the application launcher icon corresponding to the active application that has focus.
- Another example of the visual indicator 440 may be a user defined indicator above the active application launcher in the application tray 400 .
- the shape and location of the application tray 400 may be adjusted and/or defined by the user. For example, the user may choose to break the application tray 400 to two bars by the visual indicator 440 . The user may further move the application tray 400 to other locations on the GUI 12 .
- the corresponding Webtop application When one of the Webtop application launchers 422 and 426 is selected, the corresponding Webtop application will be launched in the second environment 24 .
- the corresponding Android application When one of the Android application launchers 412 and 416 is selected, the corresponding Android application will be launched in the AIW window 430 under the first environment 24 .
- the device In the second case, the device also changes focus to the AIW window if the AIW window is in a defocused state and raises the AIW window if it is minimized.
- FIG. 7 is a flow chart showing steps of displaying the application tray and launching applications when one of the displayed icons is selected according to one embodiment of the disclosure.
- the device 10 is docked and operational in a Webtop mode.
- the second environment 24 is the primary environment.
- the device 10 displays in a first portion of the application tray on a display of the device 10 , wherein a first icon corresponds to a first application running in a first environment operating on the device.
- the device 10 displays, in a second portion of the application tray on the display of the device, wherein a second icon corresponds to a second application running in a second environment operating on the device.
- the device 10 detects a selection on one of the displayed first and second icons.
- the device determines which icon is selected.
- the device 10 launches the first application in an AIW window if the first icon is selected.
- the device 10 displays the first window on top of the other open windows on the display.
- the device 10 changes focus to the first window if the first window does not have focus.
- the device displays a visual indicator on the application tray to indicate a status of the launched first application.
- the device 10 launches the second application in a window under the second environment if the second icon is selected. After the selected application is launched, the device 10 displays the second window on top of the other open windows on the display at step 774 . At step 776 , the device 10 changes focus to the second window if the second window does not have focus. Finally, at step 778 , the device displays a visual indicator on the application tray to indicate a status of the launched second application.
- the disclosed steps in FIG. 7 may be implemented by a Webtop Intent Framework component that provides APIs for communicating intents between the first and second environments 22 and 24 .
- the Webtop Intent Framework component may provide APIs for receiving intents from the first environment to the second environment and sending intents from the second environment to the first environment.
- the Webtop Intent Framework component includes a server side launcher component 60 that runs in the first environment 22 .
- the server side launcher 60 may be a standalone service or part of the portal service module 26 in FIG. 3 .
- the server side component is started when the device is docked for the first time and it keeps running after that.
- the Webtop Intent Framework component further includes a client side Android launcher 66 that runs in the second environment 24 .
- the Android launcher 66 passes the parameters required to launch the application to the Webtop Intent Framework when one of the launcher icons is selected.
- the Webtop Intent Framework then serializes the parameters and sends them to the android side component.
- the server side launcher component 60 starts when the phone is first docked to prevent the server side component to run when the second environment 24 is not started. This can reduce system load and power consumption.
- the server side launcher component 60 may be started at other time or started by other event.
- the server side component 60 of intent-framework may be started when the first environment starts.
- the Android launcher 66 takes intent specific parameters as arguments and creates intent and sends the created intent to the first environment via the Webtop Intent Framework.
- the corresponding application can then be launched with the intent.
- the executable used is the Android launcher 66 with intent specific data as its parameters. Because all the Android applications are launched within the AIW window, the user may not see the launched application if the AIW window is minimized or out of focus. Thus, the AIW window is raised to the top and granted focus whenever any launcher in the first environment is selected.
- the disclosed method may be stored in at least one storage device.
- the at least one storage device includes computer-readable storage medium that is accessible to at least one processor.
- the processor is configured to implement the stored instructions to rank and display the disclosed application tray and launch selected application accordingly.
- the present embodiments provide a single launcher that integrates a first and second application launchers from two completely native environments running on a device.
- the single launcher may have a user defined shape such as a bar at the bottom.
- One of the novel aspects of the disclosure is the narrow inter-communication to activate applications and report the required launch data to the proper environment. The cost of communication between the two completely different and separate environments running on a single device is very low compared to VM Ware.
Abstract
Description
- The present invention relates generally to mobile device systems and, more particularly, to mobile systems including multiple environments as described below.
- Operating systems are designed and typically optimized based on specific applications and user desired performance. It is often desirable to have applications of one type of operating system available to another operating system.
- General-purpose computer operating systems such as Linux™ and Windows™ have an extensive set of features such as file systems, device drivers, applications, libraries, etc. Such operating systems allow concurrent execution of multiple programs, and attempt to optimize the response time (also referred to as latency time), and CPU usage, or load, associated with the servicing of the concurrently executing programs. Unfortunately, however, such operating systems are not generally suitable for embedded real-time applications, such as for mobile computing devices. Under certain circumstances it would be desirable for a mobile computing device to have the performance associated with a mobile-specific embedded operating system and features of a general-purpose operating system.
- Linux, for example, is a well known general purpose desktop operating system with many desirable features for modern devices including modern operating systems features, numerous development tools, networking, etc. However, Linux was not designed to be an embedded or real time operating system. Many modern devices, such as, without limitation, set top boxes, mobile phones and car navigation systems require not only the features of a general purpose operating system such as Linux, but also the features of an embedded or real time operating system, including real time performance.
- Given that Linux-based operating systems offer some benefits but that other types of operating systems offer other benefits, particularly in the context of certain types of devices such as mobile devices, it would be desirable if somehow multiple operating systems could be implemented on a single device so that the benefits of each different type of operating system could be achieved in relation to that device. Running multiple operating systems on a single device has been accomplished through virtualization techniques, such as (for example) found in VMware™, VirtualBox™, QEMUTM, etc. However, when using virtualization a complete computer is emulated and one or more software stacks are operated in the emulated computing device. Emulation is susceptible to high overhead costs, and consequently conventional virtualization techniques are often impractical, especially again in the context of certain types of devices such as mobile devices.
- Therefore, a new type of mobile device system is introduced to enjoy benefits of multiple distinct operating environments with less overhead costs than would otherwise be the case using conventional virtualization techniques. It would be desirable to develop an application tray to display and launch applications from multiple distinct operating environments so that a user can launch any application by selecting the corresponding icons on the application tray.
-
FIG. 1 is an exemplary illustration of a mobile device in the disclosure; -
FIG. 2 is a block diagram representing in schematic form exemplary components of the device ofFIG. 1 , including an exemplary mobile device system that has multiple environments; -
FIG. 3 is a block diagram representing in schematic form certain additional exemplary component; -
FIG. 4 is a block diagram representing processes pertaining to an exemplary run-time coexistence schema; -
FIG. 5 is a flow chart showing steps of an exemplary booting sequence for the mobile device system ofFIG. 2 ; -
FIG. 6A is an illustration of one embodiment of the GUI of the device ofFIG. 1 ; -
FIG. 6B is a detailed illustration of the application tray of the GUI ofFIG. 5 ; and -
FIG. 7 is a flow chart showing steps of displaying the application tray. - It is envisioned that it would be advantageous to have an mobile device system including both a first application-middleware environment and a second application-middleware environment that each communicate directly with a single kernel running directly upon a mobile computing device's hardware. In at least some embodiments, one or both of the first and second application-middleware environments are Linux-based application-middleware environments. Also, in at least some embodiments, one or both of the first and second application-middleware environments are embedded. In one exemplary embodiment, each of the first and second application-middleware environments is an embedded Linux-based application-middleware environment, and both of the application-middleware environments communicate directly with a single Linux kernel running directly upon a computing device's hardware (e. g., the hardware of a mobile device).
- In the first embodiment, a method for displaying an application tray on a device is disclosed. In the first step, the device displays, in a first portion of the application tray on a display of the device, icons corresponding to applications running and capable to be launched in a first environment operating on the device. In the second step, the device displays, in a second portion of the application tray on the display of the device, icons corresponding to applications running and capable to be launched in a second environment operating on the device. In the third step, the device detects a selection on one of the displayed first and second icons. In the fourth step, the device launches the first application in a window when the first icon is selected. Finally, the device displays the window on top of other open windows on the display. The first environment and the second environment interact with a kernel operating on the device. The second environment is a primary environment operating on the device.
- One embodiment discloses a device including a display and at least one processor configured to interact with the display and perform the following acts. In the first step, the device displays, in a first portion of the application tray on a display of the device, a first plurality of icons corresponding to a first plurality of applications running in a first environment operating on the device. In the second step, the device displays, in a second portion of the application tray on the display of the device, a second plurality of icons corresponding to a second plurality of applications running in a second environment operating on the device. Then the device launches one of the first plurality of applications in a first window when one of the first plurality of icons is selected. Finally, the device displays the first window on top of other open windows on the display. The first environment and the second environment interact with a kernel operating on the device. The second environment is a primary environment operating on the device.
- Another embodiment discloses a mobile device including a display; at least one processor configured to interact with the display; and at least one storage device that stores a set of instructions to direct the at least one processor to perform the following acts. First, the device displays, in a first portion of the application tray on a display of the device, a first plurality of icons corresponding to a first plurality of applications running in a first environment operating on the device. Second, the device displays, in a second portion of the application tray on the display of the device, a second plurality of icons corresponding to a second plurality of applications running in a second environment operating on the device. Then the device launches one of the first plurality of applications in a window when one of the first plurality of icons is selected. Finally, the device displays the first window on top of other open windows on the display. The first environment and the second environment interact with a kernel operating on the device. The second environment is a primary environment operating on the device.
- In
FIG. 1 , an exemplary illustration of amobile computing device 10 is provided. Themobile device 10 includes a graphical user interface (GUI) 12 and a plurality ofdata input buttons 14. Themobile device 10 is selected from the group including, but not limited to, a mobile personal computer (PC), a netbook, a mobile telephone, a laptop computer, a handheld computer and a smart phone. Accordingly, themobile device 10 includes communication features (not shown) to enable wireless or wire line communication with a remote device such as a wireless network. Although the computing device is mobile, it is intended to have significant computing power, with a processor speed in excess of 500 MHZ, although slower processors are not excluded. Considering the computing power, a user can connect the mobile device to a variety of peripheral devices. The peripheral devices are selected from a group including, but not limited to, display monitor, a laptop computer, a desktop computer, a tablet PC, a screen projector, a docking station, a television monitor, etc. The connection between themobile device 10 and the peripheral device can be wireless or wire line. - Additionally, the
mobile computing device 10 may also include a variety of added applications. The additional applications may be based upon the particular software and hardware environments that are selected for the device. By example, a compass function can be provided for orientation, an accelerometer function can be provided, in addition to telephony, Bluetooth and Wi-Fi stack for connectivity keyboard and touch screen function for enhanced interaction. - The present disclosure is directed to systems and methods for displaying an
application tray 400 on themobile computing device 10. Theapplication tray 400 includes application launcher icons corresponding to applications in different application-middleware environments. Theapplication tray 400 can launch the application in the corresponding first or second application-middleware environment when the displayed launcher icon is selected. - In
FIG. 2 , a block diagram is provided showing in schematic form particular components of the mobile device system that includes a GNU/Linux distribution or operating system (OS) 15 in communication withdevice hardware 20 as indicated by an arrow 11. Further as shown, the GNU/Linux OS 15 more particularly includes aLinux kernel 18 and aLinux user component 16 that are in communication with one another as indicated by an arrow 13. TheLinux user component 16 is further shown to include a first application-middleware environment 22 and a second application-middleware environment 24 (hereinafter, the respective first and second application-middleware environments will more simply be referred to as the first and second environments, respectively). More particularly, as further indicated by arrows 17 and 19, respectively, each of the first andsecond environments Linux user component 16 is in communication with thesingle Linux kernel 18. In the present embodiment, thefirst environment 22 is an embedded environment intended for use in mobile devices, namely, an Android environment (additional description regarding Android can be found at http://www.openhandsetalliance.com, the website of the Open Handset Alliance, which is hereby incorporated by reference herein), while thesecond environment 24 is a standard GNU/Linux environment. In addition to theenvironments Linux kernel 18, those environments also communicate with each other, as represented by an arrow 21. - As will be described in further detail below, the
multiple environments environments environments Linux kernel 18, the two environments are interdependent in that respect. Likewise, to the extent that the twoenvironments environments environments Linux kernel 18, thedevice hardware 20, and the outside world (e. g., users and/or other devices). - Although shown to be a GNU/
Linux OS 15 with theLinux kernel 18 andLinux user component 16, the present invention is intended to encompass alternate embodiments in which other types of operating systems, kernels, and other operating system components are employed, and the present invention is not intended to be limited only to Linux-based systems. Likewise, notwithstanding that in the present embodiment thefirst environment 22 is the Android environment and thesecond environment 24 is the standard GNU/Linux environment, in other embodiments, other environments can be employed instead of the Android environment. Depending upon the embodiment, such other environments can be but need not be embedded environments, and/or can be but need not be suitable for use in mobile devices. Also, depending upon the embodiment, environments and/or operating systems that operate in real time or do not operate in real time can be employed. Further, while twoenvironments FIG. 1 , the present invention is intended to encompass additional embodiments in which more than two environments are present (and can operate and coexist independently of one another, where the manner of independence of the environments is as described above). - Still referring
FIG. 1 , in at least the present embodiment in which thefirst environment 22 is the Android environment and thesecond environment 24 is in accordance with the standard GNU/Linux distribution, those environments can more particularly encompass several software components as shown. With respect to the first (Android)environment 22, that environment includes applications 2 (e. g., user applications), which are in the Dalvik language, and middleware 3, with the applications and middleware being bundled together. The middleware 3 as shown includes an Android application framework 4 and Android run-time programming 5. Although not shown, in at least some embodiments, the middleware 3 of thefirst environment 22 can also include other components, for example, a radio interface layer, and/or components allowing for global positioning system (GPS) functioning. In some embodiments, the middleware 3 (or portions thereof) is released under an Apache license. As for theapplications 2, these applications are managed by the Android application framework 4 and interpreted in the Android run-time programming 5 (more particularly, an interpreter established by the run-time programming translates the applications at run-time). Theapplications 2, which can be understood to include stacks and other application components, are separate from one another and include computer instructions that are recognizable by the middleware 3 atop which theapplications 2 are juxtaposed. - The Android run-time programming 5 in particular makes use of a Dalvik register-based virtual machine (VM) as well as Dalvik libraries and tools. The VM interacts with the Dalvik libraries and tools, as well as with other components such as the
Linux kernel 18. The Dalvik (Android implemented) libraries are proprietary libraries that are implemented on top ofLinux kernel 18. The functionality implemented by way of the Dalvik libraries is sufficient to run the Dalvik VM, but are based on a subset of the libraries supported by GNU/Linux. The Dalvik register-based virtual machine (including the Dalvik language) is employed in the present embodiment because it has been optimized for implementation in mobile devices. Dalvik was conceived as an instrument to enable a large population of Java programmers to easily develop applications on relatively computationally-weak (compared to personal computers) mobile devices. Java is not the same as Dalvik. In particular, register-based virtual machines such as that provided by Dalvik are easier to optimize than stack-based architectures such as the Java virtual machine on a particular set of hardware. Also, Android/Dalvik replicates a complete middleware layer, rather than merely a byte-code interpreter (VM) as does Java. Nevertheless, while Dalvik is not Java, Dalvik and Java share a common syntax so that programmers can easily adapt their skills to develop Dalvik applications. Thus, although theapplications 2 operated by the middleware 3 (and particularly by the Android run-time programming 5) are Dalvik-interpreted applications rather than Java-interpreted applications, theapplications 2 are similar to Java-interpreted applications in that they are byte-code-interpreted applications. - As for the second (GNU/Linux)
environment 24, that environment includes its own applications 6 (e. g., user applications) coupled to middleware 7, with the middleware including both a GNU application framework 8 and GNU libraries/tools 9. The libraries/tools 9 can include a variety of components including, for example, libraries such as Qt or GTK (GIMP Toolkit) libraries useful for the display of information on a GUI, as well as other libraries/tools discussed in further detail below. Although not shown, the middleware 7 can include numerous other types of particular software components including, for example, one or more desktop environments such as GNOME, Enlightenment, Xfce, Fluxbox, LXDE and KDE, and/or a Gstreamer multimedia framework, and/or an X11 Window manager. As for the applications 6, these more particularly can be native applications in the sense that the executable code of those applications correspond to the instruction set architecture of theLinux kernel 18 and/or thedevice hardware 20. As with theapplications 2, each of the applications 6 can also be understood to include its own respective stacks and other application software components that are separate from those of the other applications 6, and include computer instructions that are recognizable by the middleware 7 atop which the applications 6 are juxtaposed. In embodiments where the middleware 7 includes one or more of the software components discussed above (e. g., the aforementioned desktop environments), one or more of the applications 6 can be coupled to those components of the middleware. - In
FIG. 2 , thesecond environment 24 in combination with theLinux kernel 18 more particularly takes the form of an Ubuntu® Linux stack (additional description regarding Ubuntu can be found at www.ubuntu,com, sponsored by Canonical Ltd. of the United Kingdom, which is hereby incorporated by reference herein). For simplicity of description below, thesecond environment 24 is hereinafter referred to as an Ubuntu environment (albeit Ubuntu technically also encompasses that Linux kernel as well as the environment 24). In the present embodiment, the second environment 24 (and particularly the middleware 7 of that environment) additionally is capable of supporting a multiplicity of logical memory (data) partitions, while thefirst environment 22 only has a single logical memory partition in addition to providing system components. Notwithstanding the above description, in alternate embodiments it is possible that thesecond environment 24 may only have one logical memory partition, and/or that one or more other environments may also or instead be configured to support multiple logical memory partitions. - Notwithstanding the above description in which the
first environment 22 is an Android environment and the secondmiddleware system environment 24 is an Ubuntu environment, a variety of other types of environments can also or alternatively be employed including, for example, standard Linux-based environments, Symbian (Symbian Foundation Ltd., www.symbian.com) environments, and Windows-based environments (e. g., Windows and Windows Mobile). In at least some such embodiments, the environments are not Linux-based environments and correspondingly the environments can be implemented in conjunction with different types of kernels other than a Linux-based kernel (this can be the case, for example, with respect to Symbian or Windows-based environments as mentioned above). As already noted above, while the present embodiment particularly envisions the presence of two environments interacting with thesame Linux kernel 18, in alternative embodiments it is envisioned that greater than two environments of any of a variety of types can independently coexist on the same Linux kernel 18 (or other core/kernel). - The
device hardware 20 can include a variety of hardware devices, For example, thedevice hardware 20 can include a memory storage device (not shown) coupled to a processor (not shown), which stores computer executable instructions that are configured to perform various functions and operations, some of which are described herein. Also for example, thedevice hardware 20 can in addition (or instead) include any of a variety of other components/resources, such as cellular Bluetooth and/or Wi-Fi transceivers or radios, keyboards, other input devices such as a mouse and/or touch screens, memory sub-systems, audio amplifiers, output devices such as speakers and/or video screens, hardware accelerators, IP sockets, etc. TheLinux kernel 18 allocates resources of the mobile device by connecting and managing interaction between the physical world of thedevice hardware 20 and the respective middleware 3, 7 of theenvironments software applications 2, 6, respectively. The purpose of the respective middleware 3, 7 is to orchestrate interaction between the device hardware 20 (physical world) and theapplications 2, 6, respectively. - In
FIG. 3 , thedevice hardware 20 is again shown to be in communication with theLinux kernel 18 that is in communication with theLinux user component 16, and the Linux user is again shown to include the first (Android-based)environment 22 and the second (Linux-based)environment 24. Further as shown, thekernel 18 particularly includesseveral modules 43, which include a set ofkernel drivers 42 and an Android event (AEV) module 44 (which is described in more detail below). Included among thedrivers 42 are device drivers (e. g., input device drivers) for components of thedevice hardware 20. Additionally, while not shown inFIG. 2 ,FIG. 3 more particularly shows thefirst environment 22 as including aportal service module 26, aportal activity module 28, anAndroid services module 30, and anAndroid applications module 32. Themodules applications 2 of thefirst environment 22 as shown inFIG. 2 , while themodules FIG. 3 more particularly shows thesecond environment 24 as including an arbiter orresource manager 34, an Android in a window (AIW)module 36, and aLinux services module 40. Themodules FIG. 2 . The applications 6 ofFIG. 2 are additionally shown inFIG. 3 as Linux applications (potentially theAIW module 36 can also be considered one of the applications 6). - The
various modules AIW module 36 in particular is configured to display a first environment application window on theGUI 12 while thesecond environment 24 is the primary environment. TheAEV 44, which as mentioned above is a kernel module, operates in conjunction with theAIW module 36 and in particular takes absolute coordinate and keyboard events fromAIW 36 and passes them to an event hub. With respect to theportal service module 26, that module contains a set of instructions configured to allow service for thefirst environment 22 and directs all communication with theresource manager 34. While themobile device 10 is operating, theportal service module 26 is preferably running at all times. Additionally, theportal service module 26 is connected to activity associated with theportal activity module 28, as well asfirst environment 22 broadcast events. As already mentioned, theportal activity module 28 is an application, or set of computer executable instructions. Theportal activity module 28 more particularly represents asecond environment 24 application located on thefirst environment 22 stack. By example, if the second (Linux-based)environment 24 is the Ubuntu environment, theportal activity module 28 can represent a specific Ubuntu application, and when theportal activity module 28 has focus, Ubuntu is in view through theGUI 12. - Generally speaking, numerous applications can run simultaneously, also referred to as a stack of running applications, within any given environment. Logically speaking, the topmost application is deemed to have “focus.” Where multiple applications are available for interaction with a user (e. g., where multiple windows corresponding respectively to multiple applications are shown on a display such as the GUI 12), that one of the applications which is currently interacting with the user in terms of being configured to receive input commands or signals from the user at a given time can be considered the application having “focus.” Notwithstanding the above description, in at least some embodiments of the present invention, while the
second environment 24 is capable of causing the simultaneous display (e.g., on the GUI 12) of multiple windows corresponding to multiple applications, thefirst environment 22 does not have this capability. Rather, in such embodiments, the first environment is only able to cause the display (e.g., on the GUI 12) of a single window corresponding to a single application at any given time. - As discussed above, the
co-existing environments operating system 15 communicate with each other as indicated by the arrow 21 and also communicate with thesame Linux kernel 18 as indicated by the arrows 13, 17 and 19 ofFIG. 2 . Because (also as noted above) Android/Dalvik replicates a complete middleware layer, rather than merely a byte-code interpreter (VM) as does Java, absent the taking of appropriate steps there is a possibility of conflict in the operation of the middleware 3 and the middleware 7 of the first andsecond environments Linux kernel 18. To avoid such conflicts, theresource manager 34, which is part of thesecond environment 24, communicates directly with theportal service module 26, which is part of thefirst environment 22. Further, theportal service module 26, which is part of thefirst environment 22, communicates directly with theresource manager 34. Theresource manager 34 is a set of instructions configured to manage the resources shared by thefirst environment 22 andsecond environment 24. The shared resources include display devices, input devices, power management services and system state information. Furthermore, theresource manager 34 is configured to control the accessing of thedevice hardware 20 by theenvironments resource manager 34 identifies and controls which user interface associated with theenvironments - According to the present embodiment, the
portal service module 26 is the source of all communications from thefirst environment 22 to theresource manager 34. Additionally, theportal service module 26 is a sink for all callbacks from theresource manager 34 to thefirst environment 22. Theresource manager 34 provides a status discoverable application programming interface (API) to theportal service module 26. This API is configured to be called by theresource manager 34 at any time. Theresource manager 34 is configured to obtain and process run-time status, which allows for the resource manager to maintain a state machine. For thefirst environment 22, theportal service module 26 provides run-time status to processes that require them. Similarly, theportal service module 26 requests and receives status updates from processes which provide status information (for these reasons, theportal service module 26 can more particularly be considered part of the Android run-time programming 5 ofFIG. 2 ). A similar communication for thesecond environment 24 is controlled by theresource manager 34, which provides run-time status to the processes that require them. Theresource manager 34 requests and receives status updates from various processes that provide status information. Thedrivers 42 logically associated with thekernel 18 communicate directly with theresource manager 34 as well as the processes that provide run-time status information. By example, the aforementioned API of theresource manager 34 arbitrates access to user interface devices, such as displays, touch screens or the GUI of the computing device. In yet another example, this API arbitrates access to power input devices, such as batteries and/or AC/DC wall plugs. - As mentioned above, the
first environment 22 and thesecond environment 24 are independent from the other in the manner discussed above, and co-exist with respect to the other. Each of theenvironments mobile device 10 with 100% independence with respect to the other. The first andsecond environments single kernel 18. The first andsecond environments environments environments environments applications 2, 6 that are coded purely for one or the other of theenvironments - In
FIG. 4 , an additional block diagram shows in schematic form aspects of the operating system 15 (with theLinux user 16 and Linux kernel 18) by which an exemplary co-existence scheme f or the first (Android)environment 22 and the second (Ubuntu)environment 24 is provided. In general, each of theenvironments mobile device 10 is operating. More particularly as shown, Android processes 46 andAndroid libraries 48 access a Bionic C (or simply bionic) library 50, which is optimized and modified specifically for the Android environment. TheAndroid libraries 48 and bionic library 50 can be considered to form part of the Android run-time programming 5 ofFIG. 2 . Additionally as shown, Ubuntu processes 52 andUbuntu libraries 54 access a GNU C (glibc)library 56, which is used in many standard desktop Linux-based systems. TheUbuntu libraries 54 andglibc library 56 can be considered to form part of the GNU libraries/tools 9 ofFIG. 2 . Each respective one of theenvironments environments - In the
first environment 22, aserver side launcher 60 may start to run when thedevice 10 is docked for the first time. Theserver side launcher 60 may be a standalone service or part of the portal service module inFIG. 3 . Theserver side launcher 60 will keep running after started. In thesecond environment 24, anAndroid launcher process 66 will be launched when user selects on one of the Android application launcher icons in Application Tray. - In
FIG. 5 , a flow chart shows steps of an exemplary boot sequence for theoperating system 15 ofFIG. 2 . The boot sequence includes both common and environment-specific steps. The actual boot sequence is dependent upon rules associated with a predetermined device state of themobile device 10 that dictates the booting sequence. By example, if themobile device 10 is connected to a peripheral device, such as a monitor, the device state is considered to be in docked mode, and the second (Linux-based)environment 24 is the default primary environment. Alternatively, if themobile device 10 is not connected to a peripheral device, then it is in mobile mode, and the first (Android)environment 22 is the default primary environment. Although in any given mode of themobile device 10 one or the other of the first andsecond environments environments mobile device 10 state changes and the secondary environment is switched to become the primary environment. By example, when themobile device 10 is in docked mode and the peripheral device is unplugged, there is an automatic switch to mobile mode, which results in the secondary environment becoming the primary environment, and vice versa. - As shown in
FIG. 5 , the boot sequence is initiated atstep 300, followed by the launching/initializing of the Linux kernel 18 (or core) atstep 310. In this regard, a bootloader program initializes prior to the launching of thekernel 18. After theLinux kernel 18 is launched/initialized, the kernel itself then launches user space scripts atstep 320. Theresource manager 34 is further launched atstep 330, followed by an identification of the mode state atstep 340. Once the mode state is identified, a reference library is accessed atstep 350 to determine the criteria associated with and/or dictated by the mode state that is identified. Atstep 360, services common to both thefirst environment 22 and thesecond environment 24 are launched. The mode state determined atstep 340 is subsequently referenced and considered atstep 370 and, depending upon the mode state, different paths are followed. - In this regard, if at
step 370 the mobile mode state is referenced, then thefirst environment 22 should be the primary environment while thesecond environment 24 should be the secondary environment. Consequently, in that circumstance,first environment 22 initialization scripts are launched atstep 372, followed by the launching ofsecond environment 24 initialization scripts atstep 374. Alternatively, if the docked mode state is referenced atstep 370, then thesecond environment 24 should be the primary environment and thefirst environment 22 should be the secondary environment. Consequently, in that circumstance,second environment 24 initialization scripts are launched atstep 376, followed by the launching offirst environment 22 initialization scripts atstep 378. Following each of the steps 86 and 90, the process in each case proceeds to step 380 at which themobile device 10 becomes operational. Thus, regardless of which of theenvironments mobile device 10 is operational atstep 380. Indeed, since the common services are launched first atstep 360, For all intents and purposes the primary and secondary environments are launched in parallel. However, the primary environment-specific services, based upon the device state, are launched immediately before the secondary environment-specific services. By separating the common services launch with the environment-specific launch, themobile device 10 can be quickly operational with multiple co-existing and independent environments. - Either the
first environment 22 or thesecond environment 24 can be the primary environment. The primary environment may be switched to the secondary environment automatically or by user commands. Simultaneously, the secondary environment will be switched to the primary environment when the primary environment is switched to the secondary environment. Both thefirst environment 22 and thesecond environment 24 are running when themobile device 10 is operational. However, the secondary environment operates in the background relative to the primary environment. -
FIG. 6A shows an embodiment of theGUI 12 in themobile device 10. When themobile device 10 is docked and thesecond environment 24 is launched as the primary environment, themobile devices 10 works in a Webtop mode. In the Webtop mode, all the applications supported by thesecond environment 24 may be displayed in multiple windows on theGUI 12. These applications are called Webtop applications. By example, the Webtop applications may be a file browser, a web browser, or any other pre-installed or user-installed Webtop applications. At the same time, a user may launch applications supported by thefirst environment 22 in a single window. By example, a user may launch Android applications in a single window. - In
FIG. 6A , there are two launchedWebtop application windows GUI 12. Also displayed is an Android in a window (AIW)window 430 where users can navigate to the Android environment. A user may choose to open more Webtop applications or maximize one of the Webtop application windows to take advantage of the full view of the display. As a result, the AIW window may lose focus and be hidden by other open Webtop windows. If the user wishes to make a call or launch other Android applications, the user has to find the AIW window and bring the AIW window on top of the other open windows first. In that case, it would be very difficult for the user to launch Android applications if the Android applications can only be launched within the AIW window. - To help the user to launch Android applications with less time and effort, an
application tray 400 is displayed. One embodiment of theapplication tray 400 is shown inFIG. 6B . Theapplication tray 400 displaysAndroid application launchers Webtop applications launchers Android application launchers first portion 410 of theapplication tray 400. TheWebtop application launchers second portion 420 of theapplication tray 400. In addition, theapplication tray 400 may display avisual separator 430 between the first andsecond portions visual separator 430 may be defined and/or changed by the user. Theapplication tray 400 may further display avisual indicator 440 to provide visual indication of the status of the running applications. The user may choose or define the kind of visual effects he/she prefers. For example, thevisual indicator 440 may be a small cue under the application launcher icon corresponding to the active application that has focus. Another example of thevisual indicator 440 may be a user defined indicator above the active application launcher in theapplication tray 400. - The shape and location of the
application tray 400 may be adjusted and/or defined by the user. For example, the user may choose to break theapplication tray 400 to two bars by thevisual indicator 440. The user may further move theapplication tray 400 to other locations on theGUI 12. - When one of the
Webtop application launchers second environment 24. When one of theAndroid application launchers AIW window 430 under thefirst environment 24. In the second case, the device also changes focus to the AIW window if the AIW window is in a defocused state and raises the AIW window if it is minimized. -
FIG. 7 is a flow chart showing steps of displaying the application tray and launching applications when one of the displayed icons is selected according to one embodiment of the disclosure. Atstep 710, thedevice 10 is docked and operational in a Webtop mode. Thesecond environment 24 is the primary environment. Atstep 720, Thedevice 10 displays in a first portion of the application tray on a display of thedevice 10, wherein a first icon corresponds to a first application running in a first environment operating on the device. Atstep 730, thedevice 10 displays, in a second portion of the application tray on the display of the device, wherein a second icon corresponds to a second application running in a second environment operating on the device. Atstep 740, thedevice 10 detects a selection on one of the displayed first and second icons. Atstep 750, the device determines which icon is selected. Atstep 762, thedevice 10 launches the first application in an AIW window if the first icon is selected. Atstep 764, thedevice 10 displays the first window on top of the other open windows on the display. Atstep 766, thedevice 10 changes focus to the first window if the first window does not have focus. Finally, atstep 768, the device displays a visual indicator on the application tray to indicate a status of the launched first application. - At
step 772, thedevice 10 launches the second application in a window under the second environment if the second icon is selected. After the selected application is launched, thedevice 10 displays the second window on top of the other open windows on the display atstep 774. Atstep 776, thedevice 10 changes focus to the second window if the second window does not have focus. Finally, atstep 778, the device displays a visual indicator on the application tray to indicate a status of the launched second application. - For example, the disclosed steps in
FIG. 7 may be implemented by a Webtop Intent Framework component that provides APIs for communicating intents between the first andsecond environments - As shown in
FIG. 4 , the Webtop Intent Framework component includes a serverside launcher component 60 that runs in thefirst environment 22. Theserver side launcher 60 may be a standalone service or part of theportal service module 26 inFIG. 3 . The server side component is started when the device is docked for the first time and it keeps running after that. The Webtop Intent Framework component further includes a clientside Android launcher 66 that runs in thesecond environment 24. TheAndroid launcher 66 passes the parameters required to launch the application to the Webtop Intent Framework when one of the launcher icons is selected. The Webtop Intent Framework then serializes the parameters and sends them to the android side component. - Preferably, the server
side launcher component 60 starts when the phone is first docked to prevent the server side component to run when thesecond environment 24 is not started. This can reduce system load and power consumption. However, the serverside launcher component 60 may be started at other time or started by other event. For example, theserver side component 60 of intent-framework may be started when the first environment starts. - When a first launch icon corresponding to a first application is selected, the
Android launcher 66 takes intent specific parameters as arguments and creates intent and sends the created intent to the first environment via the Webtop Intent Framework. The corresponding application can then be launched with the intent. For example, when the first environment is Android, the executable used is theAndroid launcher 66 with intent specific data as its parameters. Because all the Android applications are launched within the AIW window, the user may not see the launched application if the AIW window is minimized or out of focus. Thus, the AIW window is raised to the top and granted focus whenever any launcher in the first environment is selected. - The disclosed method may be stored in at least one storage device. The at least one storage device includes computer-readable storage medium that is accessible to at least one processor. The processor is configured to implement the stored instructions to rank and display the disclosed application tray and launch selected application accordingly.
- From the foregoing, it can be seen that the present embodiments provide a single launcher that integrates a first and second application launchers from two completely native environments running on a device. The single launcher may have a user defined shape such as a bar at the bottom. One of the novel aspects of the disclosure is the narrow inter-communication to activate applications and report the required launch data to the proper environment. The cost of communication between the two completely different and separate environments running on a single device is very low compared to VM Ware.
- It is therefore intended that the foregoing detailed description be regarded as illustrative rather than limiting, and that it be understood that it is the following claims, including all equivalents, that are intended to define the spirit and scope of this invention.
Claims (26)
Priority Applications (5)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/984,227 US20120174021A1 (en) | 2011-01-04 | 2011-01-04 | Systems and methods for displaying android applications launchers in webtop application tray |
EP11813635.7A EP2661684A1 (en) | 2011-01-04 | 2011-12-28 | Systems and methods for displaying android applications launchers in webtop application tray |
CN201180064197XA CN103282883A (en) | 2011-01-04 | 2011-12-28 | Systems and methods for displaying android applications launchers in webtop application tray |
PCT/US2011/067606 WO2012094213A1 (en) | 2011-01-04 | 2011-12-28 | Systems and methods for displaying android applications launchers in webtop application tray |
KR1020137017508A KR101566093B1 (en) | 2011-01-04 | 2011-12-28 | Systems and methods for displaying android applications launchers in webtop application tray |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/984,227 US20120174021A1 (en) | 2011-01-04 | 2011-01-04 | Systems and methods for displaying android applications launchers in webtop application tray |
Publications (1)
Publication Number | Publication Date |
---|---|
US20120174021A1 true US20120174021A1 (en) | 2012-07-05 |
Family
ID=45532030
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/984,227 Abandoned US20120174021A1 (en) | 2011-01-04 | 2011-01-04 | Systems and methods for displaying android applications launchers in webtop application tray |
Country Status (5)
Country | Link |
---|---|
US (1) | US20120174021A1 (en) |
EP (1) | EP2661684A1 (en) |
KR (1) | KR101566093B1 (en) |
CN (1) | CN103282883A (en) |
WO (1) | WO2012094213A1 (en) |
Cited By (34)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20130002725A1 (en) * | 2011-06-28 | 2013-01-03 | Dongwoo Kim | Mobile terminal and display controlling method therein |
US20130080936A1 (en) * | 2011-09-27 | 2013-03-28 | Paul E. Reeves | Displaying a unified desktop across connected devices |
US20130080909A1 (en) * | 2011-09-27 | 2013-03-28 | Paul E. Reeves | Unified desktop docking behaviour for an auxillary monitor |
US20130080941A1 (en) * | 2011-09-27 | 2013-03-28 | Paul E. Reeves | Unified desktop triad control user interface for an application launcher |
JP2014063269A (en) * | 2012-09-20 | 2014-04-10 | Oki Electric Ind Co Ltd | Terminal monitoring method |
US8707050B1 (en) * | 2011-12-23 | 2014-04-22 | Emc Corporation | Integrity self-check of secure code within a VM environment using native VM code |
US20140137038A1 (en) * | 2012-11-10 | 2014-05-15 | Seungman KIM | Electronic apparatus and method of displaying a user input menu |
CN104090746A (en) * | 2014-05-22 | 2014-10-08 | 中兴通讯股份有限公司 | Android system based application management method and device |
US8990712B2 (en) | 2011-08-24 | 2015-03-24 | Z124 | Unified desktop triad control user interface for file manager |
US8990713B2 (en) | 2011-09-27 | 2015-03-24 | Z124 | Unified desktop triad control user interface for an application manager |
CN104796768A (en) * | 2015-04-17 | 2015-07-22 | 苏州健雄职业技术学院 | OMAP (open multimedia application platform) hardware decoding acceleration based embedded high-definition media player and operation method thereof |
US9164544B2 (en) | 2011-12-09 | 2015-10-20 | Z124 | Unified desktop: laptop dock, hardware configuration |
US20150341416A1 (en) * | 2014-05-21 | 2015-11-26 | National Tsing Hua University | Cloud management systems and methods for executing applications of android systems |
US20160034145A1 (en) * | 2014-07-31 | 2016-02-04 | Samsung Electronics Co., Ltd. | Device and method of displaying windows by using work group |
JP2016024496A (en) * | 2014-07-16 | 2016-02-08 | 富士ゼロックス株式会社 | Security management device and program |
US9268518B2 (en) | 2011-09-27 | 2016-02-23 | Z124 | Unified desktop docking rules |
US20160124698A1 (en) * | 2011-08-24 | 2016-05-05 | Z124 | Unified desktop triad control user interface for an application launcher |
US9342325B2 (en) | 2012-05-17 | 2016-05-17 | Google Technology Holdings LLC | Synchronizing launch-configuration information between first and second application environments that are operable on a multi-modal device |
US9348633B2 (en) | 2009-07-20 | 2016-05-24 | Google Technology Holdings LLC | Multi-environment operating system |
US9354900B2 (en) | 2011-04-28 | 2016-05-31 | Google Technology Holdings LLC | Method and apparatus for presenting a window in a system having two operating system environments |
US9369537B1 (en) | 2015-03-31 | 2016-06-14 | Lock2Learn, LLC | Systems and methods for regulating device usage |
US9367331B2 (en) | 2009-07-20 | 2016-06-14 | Google Technology Holdings LLC | Multi-environment operating system |
US9372711B2 (en) | 2009-07-20 | 2016-06-21 | Google Technology Holdings LLC | System and method for initiating a multi-environment operating system |
US9389877B2 (en) | 2009-07-20 | 2016-07-12 | Google Technology Holdings LLC | Multi-environment operating system |
US9405459B2 (en) | 2011-08-24 | 2016-08-02 | Z124 | Unified desktop laptop dock software operation |
US9417753B2 (en) | 2012-05-02 | 2016-08-16 | Google Technology Holdings LLC | Method and apparatus for providing contextual information between operating system environments |
US9529494B2 (en) | 2011-09-27 | 2016-12-27 | Z124 | Unified desktop triad control user interface for a browser |
US9678624B2 (en) | 2011-09-27 | 2017-06-13 | Z124 | Unified desktop triad control user interface for a phone manager |
US9703468B2 (en) | 2011-09-27 | 2017-07-11 | Z124 | Unified desktop independent focus in an application manager |
US9715252B2 (en) | 2011-08-24 | 2017-07-25 | Z124 | Unified desktop docking behavior for window stickiness |
US9753608B2 (en) | 2006-12-05 | 2017-09-05 | At&T Mobility Ii Llc | Home screen user interface for electronic device display |
US10149164B1 (en) | 2014-02-17 | 2018-12-04 | Seungman KIM | Electronic apparatus and method of selectively applying security mode according to exceptional condition in mobile device |
CN111625246A (en) * | 2020-05-15 | 2020-09-04 | 武汉蓝星科技股份有限公司 | Desktop management method of Linux-Android terminal dual system |
WO2021057351A1 (en) * | 2019-09-24 | 2021-04-01 | 中兴通讯股份有限公司 | Apparatus and method for controlling android bluetooth in glibc environment, and terminal device |
Families Citing this family (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN103713813A (en) * | 2014-01-03 | 2014-04-09 | 三星电子（中国）研发中心 | Method for controlling functions of intelligent handheld equipment |
WO2015130021A1 (en) * | 2014-02-27 | 2015-09-03 | 엘지전자 주식회사 | Digital device and method for processing application thereon |
KR102277258B1 (en) | 2014-02-27 | 2021-07-14 | 엘지전자 주식회사 | Digital device and method of processing application thereof |
CN107678811B (en) * | 2017-09-07 | 2022-04-01 | 福建网龙计算机网络信息技术有限公司 | Message prompting method and terminal |
CN112309154A (en) * | 2020-09-28 | 2021-02-02 | 惠州市德赛西威智能交通技术研究院有限公司 | Method, equipment and automobile for automatically parking and leaving garage through quick Ble starting |
Citations (22)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5757371A (en) * | 1994-12-13 | 1998-05-26 | Microsoft Corporation | Taskbar with start menu |
US5828376A (en) * | 1996-09-23 | 1998-10-27 | J. D. Edwards World Source Company | Menu control in a graphical user interface |
US6133915A (en) * | 1998-06-17 | 2000-10-17 | Microsoft Corporation | System and method for customizing controls on a toolbar |
US6215490B1 (en) * | 1998-02-02 | 2001-04-10 | International Business Machines Corporation | Task window navigation method and system |
US20010035882A1 (en) * | 2000-04-06 | 2001-11-01 | Microsoft Corporation | Method and system for clustering and grouping taskbar buttons |
US6336146B1 (en) * | 1995-12-22 | 2002-01-01 | Sun Microsystems, Inc. | Method and apparatus for docking, launching and running applications in a foreign environment |
US6710788B1 (en) * | 1996-12-03 | 2004-03-23 | Texas Instruments Incorporated | Graphical user interface |
US20040061723A1 (en) * | 2002-09-26 | 2004-04-01 | Tatung Co., Ltd. | Method of implementing a plurality of system tray areas |
US20040066414A1 (en) * | 2002-10-08 | 2004-04-08 | Microsoft Corporation | System and method for managing software applications in a graphical user interface |
US20060224989A1 (en) * | 2005-04-01 | 2006-10-05 | Microsoft Corporation | Method and apparatus for application window grouping and management |
US20070050765A1 (en) * | 2005-08-30 | 2007-03-01 | Geisinger Nile J | Programming language abstractions for creating and controlling virtual computers, operating systems and networks |
US20070162298A1 (en) * | 2005-01-18 | 2007-07-12 | Apple Computer, Inc. | Systems and methods for presenting data items |
US20070180398A1 (en) * | 2006-01-30 | 2007-08-02 | Mcardle James M | Window cleanup via desktop icon |
US20070226647A1 (en) * | 2006-03-22 | 2007-09-27 | John Louch | Methods of manipulating a screen space of a display device |
US20080034318A1 (en) * | 2006-08-04 | 2008-02-07 | John Louch | Methods and apparatuses to control application programs |
US20080307350A1 (en) * | 2007-06-09 | 2008-12-11 | Alessandro Francesco Sabatelli | Method and Apparatus for Improved Desktop Arrangement |
US20080307360A1 (en) * | 2007-06-08 | 2008-12-11 | Apple Inc. | Multi-Dimensional Desktop |
US7590945B2 (en) * | 2004-06-14 | 2009-09-15 | At&T Intellectual Property I, L.P. | Viewing applications from inactive sessions |
US20100107115A1 (en) * | 2008-10-27 | 2010-04-29 | Microsoft Corporation | Child window surfacing and management |
US20100313156A1 (en) * | 2009-06-08 | 2010-12-09 | John Louch | User interface for multiple display regions |
US20100319008A1 (en) * | 2009-06-11 | 2010-12-16 | Insyde Software Corporation | Parallel processing method for dual operating system |
US20110138314A1 (en) * | 2009-12-09 | 2011-06-09 | Abraham Mir | Methods and systems for generating a combined display of taskbar button group entries generated on a local machine and on a remote machine |
Family Cites Families (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20050125739A1 (en) * | 2003-11-20 | 2005-06-09 | Thompson Jeffrey W. | Virtual desktop manager system and method |
US8606895B2 (en) * | 2006-01-17 | 2013-12-10 | Kidaro (Israel) Ltd. | Seamless integration of multiple computing environments |
US7987432B1 (en) * | 2006-04-25 | 2011-07-26 | Parallels Holdings, Ltd. | Seamless integration and installation of non-native application into native operating system |
-
2011
- 2011-01-04 US US12/984,227 patent/US20120174021A1/en not_active Abandoned
- 2011-12-28 WO PCT/US2011/067606 patent/WO2012094213A1/en active Application Filing
- 2011-12-28 EP EP11813635.7A patent/EP2661684A1/en not_active Withdrawn
- 2011-12-28 KR KR1020137017508A patent/KR101566093B1/en active IP Right Grant
- 2011-12-28 CN CN201180064197XA patent/CN103282883A/en active Pending
Patent Citations (23)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5757371A (en) * | 1994-12-13 | 1998-05-26 | Microsoft Corporation | Taskbar with start menu |
US6336146B1 (en) * | 1995-12-22 | 2002-01-01 | Sun Microsystems, Inc. | Method and apparatus for docking, launching and running applications in a foreign environment |
US5828376A (en) * | 1996-09-23 | 1998-10-27 | J. D. Edwards World Source Company | Menu control in a graphical user interface |
US6710788B1 (en) * | 1996-12-03 | 2004-03-23 | Texas Instruments Incorporated | Graphical user interface |
US6215490B1 (en) * | 1998-02-02 | 2001-04-10 | International Business Machines Corporation | Task window navigation method and system |
US6133915A (en) * | 1998-06-17 | 2000-10-17 | Microsoft Corporation | System and method for customizing controls on a toolbar |
US20010035882A1 (en) * | 2000-04-06 | 2001-11-01 | Microsoft Corporation | Method and system for clustering and grouping taskbar buttons |
US20040061723A1 (en) * | 2002-09-26 | 2004-04-01 | Tatung Co., Ltd. | Method of implementing a plurality of system tray areas |
US20040066414A1 (en) * | 2002-10-08 | 2004-04-08 | Microsoft Corporation | System and method for managing software applications in a graphical user interface |
US7590945B2 (en) * | 2004-06-14 | 2009-09-15 | At&T Intellectual Property I, L.P. | Viewing applications from inactive sessions |
US20070162298A1 (en) * | 2005-01-18 | 2007-07-12 | Apple Computer, Inc. | Systems and methods for presenting data items |
US20060224989A1 (en) * | 2005-04-01 | 2006-10-05 | Microsoft Corporation | Method and apparatus for application window grouping and management |
US20070050765A1 (en) * | 2005-08-30 | 2007-03-01 | Geisinger Nile J | Programming language abstractions for creating and controlling virtual computers, operating systems and networks |
US20070180398A1 (en) * | 2006-01-30 | 2007-08-02 | Mcardle James M | Window cleanup via desktop icon |
US20070226647A1 (en) * | 2006-03-22 | 2007-09-27 | John Louch | Methods of manipulating a screen space of a display device |
US20080034318A1 (en) * | 2006-08-04 | 2008-02-07 | John Louch | Methods and apparatuses to control application programs |
US20080307360A1 (en) * | 2007-06-08 | 2008-12-11 | Apple Inc. | Multi-Dimensional Desktop |
US20080307350A1 (en) * | 2007-06-09 | 2008-12-11 | Alessandro Francesco Sabatelli | Method and Apparatus for Improved Desktop Arrangement |
US20100107115A1 (en) * | 2008-10-27 | 2010-04-29 | Microsoft Corporation | Child window surfacing and management |
US20100313156A1 (en) * | 2009-06-08 | 2010-12-09 | John Louch | User interface for multiple display regions |
US20100319008A1 (en) * | 2009-06-11 | 2010-12-16 | Insyde Software Corporation | Parallel processing method for dual operating system |
US20110138314A1 (en) * | 2009-12-09 | 2011-06-09 | Abraham Mir | Methods and systems for generating a combined display of taskbar button group entries generated on a local machine and on a remote machine |
US20110138295A1 (en) * | 2009-12-09 | 2011-06-09 | Georgy Momchilov | Methods and systems for updating a dock with a user interface element representative of a remote application |
Non-Patent Citations (6)
Title |
---|
Codecoffee, "How to compile & execute C programs under Linux (Absolute basics)", http://web.archive.org/web/20091025120242/http://www.codecoffee.com/tipsforlinux/articles/18.html dated 10/25/2009, http://www.codecoffee.com/tipsforlinux/articles/18.html, printout page 1 * |
Wikipedia, "Comparison of X Window System desktop environments", http://web.archive.org/web/20090107133109/http://en.wikipedia.org/wiki/Comparison_of_X_Window_System_desktop_environments dated 01/07/2009, http://en.wikipedia.org/wiki/Comparison_of_X_Window_System_desktop_environments, printout pages 1-6 * |
Wikipedia, "GNU C Library", http://web.archive.org/web/20091111083742/http://en.wikipedia.org/wiki/GNU_C_Library dated 11/11/2009, http://en.wikipedia.org/wiki/GNU_C_Library, printout pages 1-4 * |
Wikipedia, "POSIX", http://web.archive.org/web/20090423042132/http://en.wikipedia.org/wiki/POSIX dated 04/23/2009, http://en.wikipedia.org/wiki/POSIX, printout pages 1-5 * |
Wikipedia, "Taskbar", https://web.archive.org/web/20100224082602/http://en.wikipedia.org/wiki/Taskbar, http://en.wikipedia.org/wiki/Taskbar dated 02/24/2010, printout pages 1-7 * |
Wikipedia, "X Window System", http://web.archive.org/web/20090107225926/http://en.wikipedia.org./wiki/X_window_system dated 01/07/2009, http://en.wikipedia.org./wiki/X_window_system, printout pages 1-11 * |
Cited By (63)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10775962B2 (en) | 2006-12-05 | 2020-09-15 | At&T Mobility Ii Llc | Home screen user interface for electronic device display |
US9880700B2 (en) | 2006-12-05 | 2018-01-30 | At&T Mobility Ii, Llc | Home screen user interface for electronic device display |
US9753608B2 (en) | 2006-12-05 | 2017-09-05 | At&T Mobility Ii Llc | Home screen user interface for electronic device display |
US9348633B2 (en) | 2009-07-20 | 2016-05-24 | Google Technology Holdings LLC | Multi-environment operating system |
US9389877B2 (en) | 2009-07-20 | 2016-07-12 | Google Technology Holdings LLC | Multi-environment operating system |
US9372711B2 (en) | 2009-07-20 | 2016-06-21 | Google Technology Holdings LLC | System and method for initiating a multi-environment operating system |
US9367331B2 (en) | 2009-07-20 | 2016-06-14 | Google Technology Holdings LLC | Multi-environment operating system |
US9354900B2 (en) | 2011-04-28 | 2016-05-31 | Google Technology Holdings LLC | Method and apparatus for presenting a window in a system having two operating system environments |
US20130002725A1 (en) * | 2011-06-28 | 2013-01-03 | Dongwoo Kim | Mobile terminal and display controlling method therein |
US9384014B2 (en) * | 2011-06-28 | 2016-07-05 | Lg Electronics Inc. | Mobile terminal and display controlling method therein |
US9715252B2 (en) | 2011-08-24 | 2017-07-25 | Z124 | Unified desktop docking behavior for window stickiness |
US8910061B2 (en) | 2011-08-24 | 2014-12-09 | Z124 | Application manager in a unified desktop |
US8990712B2 (en) | 2011-08-24 | 2015-03-24 | Z124 | Unified desktop triad control user interface for file manager |
US9405459B2 (en) | 2011-08-24 | 2016-08-02 | Z124 | Unified desktop laptop dock software operation |
US9003311B2 (en) | 2011-08-24 | 2015-04-07 | Z124 | Activating applications in unified desktop |
US9213516B2 (en) | 2011-08-24 | 2015-12-15 | Z124 | Displaying a unified desktop across devices |
US20160124698A1 (en) * | 2011-08-24 | 2016-05-05 | Z124 | Unified desktop triad control user interface for an application launcher |
US9122441B2 (en) | 2011-08-24 | 2015-09-01 | Z124 | Opening applications in unified desktop |
US9069518B2 (en) | 2011-09-27 | 2015-06-30 | Z124 | Unified desktop freeform window mode |
US20130080909A1 (en) * | 2011-09-27 | 2013-03-28 | Paul E. Reeves | Unified desktop docking behaviour for an auxillary monitor |
US11573597B2 (en) | 2011-09-27 | 2023-02-07 | Z124 | Displaying a unified desktop across connected devices |
US11221649B2 (en) * | 2011-09-27 | 2022-01-11 | Z124 | Desktop application manager: card dragging of dual screen cards |
US11093200B2 (en) * | 2011-09-27 | 2021-08-17 | Z124 | Unified desktop triad control user interface for an application launcher |
US20130080936A1 (en) * | 2011-09-27 | 2013-03-28 | Paul E. Reeves | Displaying a unified desktop across connected devices |
US9268518B2 (en) | 2011-09-27 | 2016-02-23 | Z124 | Unified desktop docking rules |
US20200042269A1 (en) * | 2011-09-27 | 2020-02-06 | Z124 | Unified desktop triad control user interface for an application launcher |
US20130080941A1 (en) * | 2011-09-27 | 2013-03-28 | Paul E. Reeves | Unified desktop triad control user interface for an application launcher |
US8990713B2 (en) | 2011-09-27 | 2015-03-24 | Z124 | Unified desktop triad control user interface for an application manager |
US8904165B2 (en) | 2011-09-27 | 2014-12-02 | Z124 | Unified desktop wake and unlock |
US9703468B2 (en) | 2011-09-27 | 2017-07-11 | Z124 | Unified desktop independent focus in an application manager |
US8872727B2 (en) | 2011-09-27 | 2014-10-28 | Z124 | Activating applications in portions of unified desktop |
US8874894B2 (en) | 2011-09-27 | 2014-10-28 | Z124 | Unified desktop wake and unlock |
US9678624B2 (en) | 2011-09-27 | 2017-06-13 | Z124 | Unified desktop triad control user interface for a phone manager |
US9529494B2 (en) | 2011-09-27 | 2016-12-27 | Z124 | Unified desktop triad control user interface for a browser |
US9164544B2 (en) | 2011-12-09 | 2015-10-20 | Z124 | Unified desktop: laptop dock, hardware configuration |
US8707050B1 (en) * | 2011-12-23 | 2014-04-22 | Emc Corporation | Integrity self-check of secure code within a VM environment using native VM code |
US9417753B2 (en) | 2012-05-02 | 2016-08-16 | Google Technology Holdings LLC | Method and apparatus for providing contextual information between operating system environments |
US9342325B2 (en) | 2012-05-17 | 2016-05-17 | Google Technology Holdings LLC | Synchronizing launch-configuration information between first and second application environments that are operable on a multi-modal device |
JP2014063269A (en) * | 2012-09-20 | 2014-04-10 | Oki Electric Ind Co Ltd | Terminal monitoring method |
US20140137038A1 (en) * | 2012-11-10 | 2014-05-15 | Seungman KIM | Electronic apparatus and method of displaying a user input menu |
US10149164B1 (en) | 2014-02-17 | 2018-12-04 | Seungman KIM | Electronic apparatus and method of selectively applying security mode according to exceptional condition in mobile device |
US11595507B2 (en) | 2014-02-17 | 2023-02-28 | Seungman KIM | Electronic apparatus and method of selectively applying security mode in mobile device |
US11184771B1 (en) | 2014-02-17 | 2021-11-23 | Seungman KIM | Electronic apparatus and method of selectively applying security mode in mobile device |
US10299133B2 (en) | 2014-02-17 | 2019-05-21 | Seungman KIM | Electronic apparatus and method of selectively applying security mode according to exceptional condition in mobile device |
US11811963B2 (en) | 2014-02-17 | 2023-11-07 | Seungman KIM | Electronic apparatus and method of selectively applying security mode in mobile device |
US10511975B2 (en) | 2014-02-17 | 2019-12-17 | Seungman KIM | Electronic apparatus and method of selectively applying security mode in mobile device |
US11553072B2 (en) | 2014-02-17 | 2023-01-10 | Seungman KIM | Electronic apparatus and method of selectively applying security mode in mobile device |
US11234127B1 (en) | 2014-02-17 | 2022-01-25 | Seungman KIM | Electronic apparatus and method of selectively applying security mode in mobile device |
US11212382B2 (en) | 2014-02-17 | 2021-12-28 | Seungman KIM | Electronic apparatus and method of selectively applying security mode in mobile device |
US11184473B2 (en) | 2014-02-17 | 2021-11-23 | Seungman KIM | Electronic apparatus and method of selectively applying security mode in mobile device |
US20150341416A1 (en) * | 2014-05-21 | 2015-11-26 | National Tsing Hua University | Cloud management systems and methods for executing applications of android systems |
CN104090746A (en) * | 2014-05-22 | 2014-10-08 | 中兴通讯股份有限公司 | Android system based application management method and device |
JP2016024496A (en) * | 2014-07-16 | 2016-02-08 | 富士ゼロックス株式会社 | Security management device and program |
US10928971B2 (en) | 2014-07-31 | 2021-02-23 | Samsung Electronics Co., Ltd. | Device and method of displaying windows by using work group |
CN105320414B (en) * | 2014-07-31 | 2021-01-12 | 三星电子株式会社 | Apparatus and method for displaying window using workgroup |
US10824291B2 (en) * | 2014-07-31 | 2020-11-03 | Samsung Electronics Co., Ltd. | Device and method of displaying windows by using work group |
CN105320414A (en) * | 2014-07-31 | 2016-02-10 | 三星电子株式会社 | Device and method of displaying windows by using work group |
US20160034145A1 (en) * | 2014-07-31 | 2016-02-04 | Samsung Electronics Co., Ltd. | Device and method of displaying windows by using work group |
US10489008B2 (en) | 2014-07-31 | 2019-11-26 | Samsung Electronics Co., Ltd. | Device and method of displaying windows by using work group |
US9369537B1 (en) | 2015-03-31 | 2016-06-14 | Lock2Learn, LLC | Systems and methods for regulating device usage |
CN104796768A (en) * | 2015-04-17 | 2015-07-22 | 苏州健雄职业技术学院 | OMAP (open multimedia application platform) hardware decoding acceleration based embedded high-definition media player and operation method thereof |
WO2021057351A1 (en) * | 2019-09-24 | 2021-04-01 | 中兴通讯股份有限公司 | Apparatus and method for controlling android bluetooth in glibc environment, and terminal device |
CN111625246A (en) * | 2020-05-15 | 2020-09-04 | 武汉蓝星科技股份有限公司 | Desktop management method of Linux-Android terminal dual system |
Also Published As
Publication number | Publication date |
---|---|
KR101566093B1 (en) | 2015-11-04 |
KR20130101122A (en) | 2013-09-12 |
WO2012094213A1 (en) | 2012-07-12 |
EP2661684A1 (en) | 2013-11-13 |
CN103282883A (en) | 2013-09-04 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US20120174021A1 (en) | Systems and methods for displaying android applications launchers in webtop application tray | |
US9389877B2 (en) | Multi-environment operating system | |
US9367331B2 (en) | Multi-environment operating system | |
KR101399161B1 (en) | System and method for initiating a multi-environment operating system | |
US9348633B2 (en) | Multi-environment operating system | |
US8868899B2 (en) | System and method for switching between environments in a multi-environment operating system | |
EP2668572B1 (en) | Method and apparatus for locking and unlocking multiple operating system environments with a single gesture input | |
RU2486579C2 (en) | Terminal design comprising level structure based on virtual machine (vm) for performance of heterogeneous applications | |
US20120173986A1 (en) | Background synchronization within a multi-environment operating system | |
WO2011011368A2 (en) | Multi-environment operating system | |
EP2810162B1 (en) | Optimization of resource usage in a multi-environment computing system | |
WO2011011365A2 (en) | Multi-environment operating system | |
RU2574205C2 (en) | Multi-environment operating system |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: MOTOROLA MOBILITY, INC., ILLINOISFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:DHARAWAT, PARIKSHIT H.;REEL/FRAME:025911/0810Effective date: 20110107 |
|
AS | Assignment |
Owner name: MOTOROLA MOBILITY INC., ILLINOISFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MOTOROLA INC.;REEL/FRAME:026561/0001Effective date: 20100731 |
|
AS | Assignment |
Owner name: MOTOROLA MOBILITY LLC, ILLINOISFree format text: CHANGE OF NAME;ASSIGNOR:MOTOROLA MOBILITY, INC.;REEL/FRAME:028441/0265Effective date: 20120622 |
|
AS | Assignment |
Owner name: GOOGLE TECHNOLOGY HOLDINGS LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MOTOROLA MOBILITY LLC;REEL/FRAME:034296/0001Effective date: 20141028 |
|
STCB | Information on status: application discontinuation |
Free format text: ABANDONED -- FAILURE TO RESPOND TO AN OFFICE ACTION |