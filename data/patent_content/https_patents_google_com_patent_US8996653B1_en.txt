US8996653B1 - Systems and methods for client authentication - Google Patents
Systems and methods for client authentication Download PDFInfo
- Publication number
- US8996653B1 US8996653B1 US13/662,366 US201213662366A US8996653B1 US 8996653 B1 US8996653 B1 US 8996653B1 US 201213662366 A US201213662366 A US 201213662366A US 8996653 B1 US8996653 B1 US 8996653B1
- Authority
- US
- United States
- Prior art keywords
- client
- document
- fingerprints
- client device
- server
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L61/00—Network arrangements, protocols or services for addressing or naming
- H04L61/58—Caching of addresses or names
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/08—Network architectures or network communication protocols for network security for authentication of entities
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L45/00—Routing or path finding of packets in data switching networks
- H04L45/74—Address processing for routing
- H04L45/745—Address table lookup; Address filtering
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L45/00—Routing or path finding of packets in data switching networks
- H04L45/74—Address processing for routing
- H04L45/745—Address table lookup; Address filtering
- H04L45/7453—Address table lookup; Address filtering using hashing
- H04L45/7459—Address table lookup; Address filtering using hashing using Bloom filters
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L2209/00—Additional information or applications relating to cryptographic mechanisms or cryptographic arrangements for secret or secure communication H04L9/00
- H04L2209/08—Randomization, e.g. dummy operations or using noise
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L2209/00—Additional information or applications relating to cryptographic mechanisms or cryptographic arrangements for secret or secure communication H04L9/00
- H04L2209/26—Testing cryptographic entity, e.g. testing integrity of encryption key or encryption algorithm
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L61/00—Network arrangements, protocols or services for addressing or naming
- H04L61/09—Mapping addresses
- H04L61/25—Mapping addresses of the same type
- H04L61/2503—Translation of Internet protocol [IP] addresses
- H04L61/256—NAT traversal
- H04L61/2567—NAT traversal for reachability, e.g. inquiring the address of a correspondent behind a NAT server
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L61/00—Network arrangements, protocols or services for addressing or naming
- H04L61/45—Network directories; Name-to-address mapping
- H04L61/4505—Network directories; Name-to-address mapping using standardised directories; using standardised directory access protocols
- H04L61/4511—Network directories; Name-to-address mapping using standardised directories; using standardised directory access protocols using domain name system [DNS]
Definitions
- the present invention relates generally to the field of client-server computer network systems, and in particular, to systems and methods for client cache awareness.
- a user In order to access a document (e.g., a webpage) on the Internet, a user must download the document from a web server to a client computer using a software application such as a web browser. Therefore, the document download speed is critical to the user's web browsing experience.
- a document e.g., a webpage
- a client cache residing in the client computer in connection with a web browser is a popular choice.
- Documents such as static image files, frequently-visited webpages and the like, can be locally stored in a client cache (e.g., by storing them when the client first requests and downloads them, or by preloading them) so that the client's web browser does not have to download them from the document server or the website when it receives requests for any of the locally cached documents.
- client caching of frequently-visited documents and frequently-needed embedded content can reduce the average time required for rendering a document in the web browser.
- the document server or the website may not know in advance whether the document already resides in the client cache or not. Without such knowledge, the document server or the website may waste resources such as network bandwidth by preloading to the client cache a document for which an identical copy is already stored in the client cache.
- a server computer When a server computer is concerned with the authenticity of a client device, it queries the client device using a list of fingerprints, including test fingerprints that do not correspond to any document stored at the client device. If the query result associated with at least one test fingerprint is incorrect, the server computer denies the client device access to the server computer. Otherwise, if query results associated with both fingerprints of documents stored at the client device and the test fingerprints are correct, the server computer enables the client device to access the server computer. In some embodiments, the server computer verifies fingerprints of documents stored at the client device using a Bloom filter.
- FIG. 1 is a block diagram illustrating the infrastructure of a client-server network environment according to some embodiments of the invention.
- FIGS. 2A and 2B depict data structures associated with various components of the client-server network environment according to some embodiments of the invention.
- FIG. 3 is a flowchart illustrating a process of a document server checking the existence of a document in a client cache before uploading the document using a client cache map according to some embodiments of the invention.
- FIG. 4 is a flowchart illustrating a process of determining whether a client cache map has expired or not according to some embodiments of the invention.
- FIG. 5 is a flowchart illustrating a process of determining whether a document in the client cache is still fresh according to some embodiments of the invention.
- FIG. 6 is a flowchart illustrating a process of updating a client cache map according to some embodiments of the invention.
- FIG. 7 is a flowchart illustrating a process of authenticating the identity of a client computer using its client cache map according to some embodiments of the invention.
- FIG. 8 is a block diagram of an exemplary client computer according to some embodiments of the invention.
- FIG. 9 is a block diagram of an exemplary server computer according to some embodiments of the invention.
- FIG. 1 is a block diagram illustrating the infrastructure of a client-server distributed system 100 according to some embodiments of the invention.
- the distributed system 100 includes a plurality of clients 102 and a document server 120 .
- the internal structure of a client 102 includes a client application 104 (e.g., a web browser), a client assistant 106 , a client cache 108 , and a client cache map 109 .
- the client cache map 109 has multiple entries, each entry corresponding to a document stored in the client cache. As described below, a copy of the client cache map is sent to the document server if there is a connection between the client and the document server. Based on the client cache map, the document server can easily determine whether a document to be uploaded is already present in the client cache or not.
- the document server does not upload a document if an entry corresponding to the document is found in the client cache map and the content of the cached document is still fresh. Otherwise, the document is uploaded into the client cache and a new entry corresponding to the uploaded document is generated in the client cache map accordingly.
- the client assistant 106 (or a respective client 102 ) has communication channels with the client application 104 , the client cache 108 , the client cache map 109 , and a remote cache server 121 residing at the document server 120 , respectively.
- the client assistant 106 and the remote cache server 121 are procedures or modules that facilitate the process of quickly serving a document download request by a user at the client 102 .
- the client 102 (sometimes herein called the “client device” or “client computer”) may be any computer or similar device that is capable of receiving documents from and sending requests including document links to the document server 120 . Examples include, without limitation, desktop computers, notebook computers, tablet computers, and mobile devices such as mobile phones and personal digital assistants, and set-top boxes.
- the client application 104 has no associated cache or does not use its associated cache. Rather, the client application 104 directs all user requests to the client assistant 106 . In some other embodiments, the client application 104 uses its own cache to store documents. Upon receiving a user request for a document, the client application 104 searches its own cache to satisfy the user request. If the cache does not have the user-requested document, i.e., there is a cache miss event, the client application 104 then forwards the user request to the client assistant 106 for further assistance.
- the client application 104 is a web browser
- the client application can, in fact, be any software application that uses a document identified by a network address such as a URL (universal resource locator).
- URL means a network address or location of this document.
- the term “document” means virtually any document or content of any format including, but not limited to, text, image, audio, video, etc., that may be used by a web browser or other application programs.
- An advantage of the arrangement shown in FIG. 1 is that the web browser and other application programs in the client 102 can share the same client cache 108 and cache map 109 and thereby avoid data duplication. But in another embodiment, the web browser 104 may use its own cache (not shown).
- the client assistant 106 may synchronize the web browser's cache with the client cache 108 from time to time.
- the document server 120 includes at least a remote cache server 121 , an index archive 122 , and an object archive 128 .
- the remote cache server 121 , the index archive 122 , and/or the object archive 128 are deployed over multiple computers to enable fast access to a large number of cached documents.
- the index archive 122 and the object archive 128 may be distributed over N servers, with a mapping function such as the “modulo N” function being used to determine which cached documents are stored in each of the N servers.
- N may be an integer greater than 1, e.g., an integer between 2 and 16,384.
- the document server 120 is treated as though it were a single computer in this application.
- the document server 120 through its index archive 122 and object archive 128 , manages a large number of documents that have been prefetched from various web hosts 132 over one or more communications networks 110 (e.g., the Internet, one or more other global networks, one or more local area networks, one or more metropolitan area networks, one or more wireless networks, or any combination thereof).
- the term “web host” refers to a source of documents (or more generally, a source of information) stored at network locations (e.g., URL's) associated with the web host.
- web server is sometimes used to mean the same thing as “web host.”
- the document server 120 when the document server 120 does not have a user-requested document, the document server 120 directly fetches the user-requested document from a respective web host in response to a corresponding user request from a client 102 and then serves the fetched document to the requesting client.
- the document server 120 includes a document fetcher 123 , a user interest hinter 124 , a server performance predictor 125 , a DNS cache 126 , a user ID server 127 , and client cache maps 129 . These components may co-exist on a single computer or may be distributed over multiple computers. As described below, each component is responsible for one or more predefined tasks associated with serving documents to a requesting client or preloading documents to a client before the client requests any of them.
- the remote cache server 121 coordinates with these components to satisfy document download requests from different clients 102 .
- the remote cache server 121 provides a set of network addresses (e.g., URLs) and IP addresses of the associated web hosts 132 to the document fetcher 123 .
- the set of network addresses identifies documents to be downloaded from the web hosts 132 .
- the DNS cache 126 is used for resolving the IP address of a web host 132 .
- the address records in the DNS cache 126 are updated by a third-party DNS server 134 to make sure that any address record in the DNS cache 126 is presumptively fresh and may be used by the document fetcher 123 for downloading documents. If no address record is found in the DNS cache 126 , the remote cache server 121 may query the DNS server 134 directly for the IP address associated with a web host 132 .
- the document fetcher 123 After receiving the set of network addresses and IP addresses, the document fetcher 123 issues requests to the respective web hosts 132 to fetch the documents requested by the remote cache server 121 . For each fetched document, the remote cache server 121 conducts a few further processing procedures including, e.g., generating relevant entries in the index archive 122 and the object archive 128 for the prefetched document, and parsing the document to determine what document links and objects (e.g., images) are embedded in the document. To ensure the freshness of the document contents in the document server 120 , the remote cache server 121 updates entries in the index archive 122 and the object archive 128 according to a predefined schedule. When the content of a cached document is found to have changed, the update operation uses the document fetcher 123 to fetch a current version of the document from its web host 132 .
- the remote cache server 121 Whenever the remote cache server 121 receives a user request for a document, it identifies the requested document in the index archive 122 and the object archive 128 . The requested document is then returned to the requesting client 102 . To better serve the user, the remote cache server 121 attempts to predict what subsequent documents the user would like to see after viewing the currently requested document. To get such information, the remote cache server 121 sends an inquiry to the user interest hinter 124 . The inquiry may include the URL fingerprint of the document-being-requested and the identity of the requesting user provided by the user ID server 127 . The user interest hinter 124 then returns a list of document names or URL fingerprints to the remote cache server 121 . The document names identify or refer to candidate documents the requesting user is most likely to request next, or in the near future. Different mechanisms may be employed by the user interest hinter 124 in generating the list of candidate document names.
- the remote cache server 121 For each member in the list of candidate document names, the remote cache server 121 identifies the corresponding candidate document, if any, in the object archive 128 . In some embodiments, the remote cache server 121 does not transmit the candidate documents to the requesting client until after transmitting the requested document. In some other embodiments, the candidate documents and the requested document may be transmitted to the client computer simultaneously. For example, in some embodiments there are multiple communication channels of different priorities between the remote cache server 121 and the client assistant 106 . One or more communication channels of higher priorities are used for transmitting the requested document and other communication channels of lower priorities are used for transmitting (preloading) the candidate documents.
- the server performance predictor 125 is used for predicting the performance of the document server 120 .
- the request can be met by either the document server 120 or a web host 132 that hosts the requested document.
- the document server 120 is more efficient than the web host 132 .
- serving the document from the web host 132 may be more efficient.
- the server performance predictor 125 may, periodically or episodically, compare the speeds of serving a document to a requesting client from a web host and the document server.
- the comparison result is provided to the client assistant 106 as a reference. If a particular web host outperforms the document server, the client assistant 106 will forward document requests to that web host whenever it receives a request for a document hosted by the web host.
- the comparison results are dynamically updated to reflect the dynamic nature of the network. If the client 102 is not sure which source (the document server or a web host) is more efficient in serving the document, it can consult the server performance predictor 125 for the identity of the source that is predicted to be the fastest or most efficient source of the document.
- the dedicated connection helps to reduce the communication latency between the client assistant 106 and the remote cache server 121 .
- the dedicated connection comprises at least one control stream and multiple data streams in each direction. These data streams serve as the communication channels between the remote cache server 121 and the client assistant 106 .
- the remote cache server 121 uploads documents, including the requested document and the candidate documents, to the client assistant 106 using these data streams.
- the control stream may be used to allow the client assistant 106 and the remote cache server 121 to exchange control information or alter the priorities of the data streams.
- the remote cache server 121 initially transmits a candidate document to the client assistant 106 using a low priority data stream. After receiving an actual request for the candidate document, the remote cache server 121 can elevate the priority of the data stream using the control stream in order to serve the user request more promptly.
- FIGS. 2A and 2B depict data structures associated with various components of the client-server distributed system 100 according to some embodiments of the invention.
- the client cache 108 (in client 102 ) includes a table 201 having a plurality of URL fingerprints.
- a URL fingerprint is a 64-bit binary number (or a value of some other predetermined bit length) generated from the corresponding URL by first normalizing the URL text, e.g., by applying a predefined set of normalization rules to the URL text (e.g., converting web host names to lower case), and then applying a hash function to the normalized URL text to produce the 64-bit URL fingerprint.
- These URL fingerprints correspond to the documents stored in the client cache 108 .
- Each entry in the URL fingerprint table 201 points to a unique entry in another table 203 that stores the content information of a plurality of documents.
- Each entry in the table 203 includes a unique content fingerprint (also known as content checksum), one or more content freshness parameters and a pointer to a copy of the corresponding document content 205 .
- some of the content freshness parameters are derived from the HTTP header of the document content 205 .
- the Date field in the HTTP header indicates when the document was downloaded to the client 102 .
- the document server 120 serves as a proxy of multiple web hosts. It prefetches a large number of documents from many web hosts 132 and saves them in its index archive 122 and object archive 128 .
- the index archive 122 maintains a mapping between a URL fingerprint in the URL fingerprint table 211 and a content fingerprint in the content fingerprint table 213 .
- Each content fingerprint has associated caching information including, e.g., parameters indicating the freshness of the corresponding document content.
- the set of freshness parameters includes an expiration date, a last modification date, and an entity tag, etc.
- the freshness parameters may also include one or more HTTP response header fields of a cached document.
- An entity tag is a unique string identifying one version of an entity, e.g., an HTML document, associated with a particular resource.
- the object archive 128 maps a content fingerprint in table 215 to a copy of the document content 217 .
- tables 211 , 213 and 215 are small enough to reside in the main memory of one or more document servers.
- the document contents 217 are stored in one or more secondary storage devices 220 , e.g., one or more hard disk drives.
- the client cache map 109 takes the form of a Bloom filter 219 .
- the Bloom filter 219 is a space-efficient probabilistic data structure used for detecting whether an object is a member of a set. It comprises multiple hash functions 230 (e.g., H 1 , H 2 , H 3 , and H 4 ) and an M-bit vector 240 . For each object “a” 220 in the set, the corresponding bits at positions P 1 , P 2 , P 3 , and P 4 of the vector 240 , which are determined by the respective hash functions H 1 , H 2 , H 3 , and H 4 , are set to 1.
- the object is either a content fingerprint or a URL fingerprint of a document.
- the hash functions 230 determine another four bit positions H 1 (b), H 2 (b), H 3 (b), and H 4 (b). If any of the bit positions stores 0, the object “b” is not in the set. Otherwise (i.e., if the values stored in all of the determined positions is equal to 1), it is assumed that the object “b” is in the set although there is a certain probability that the object “b” is not actually in the set, also known as “false positive”.
- the “false positive” probability can be reduced by increasing the size M of the bit vector 240 and the number of hash functions 230 . On the other hand, the “false positive” probability increases as more objects are added to the set.
- a client cache having a capacity of 1 GB can be represented by a 122 KB Bloom filter having four hash functions with a false positive probability of less than one percent. For instance, if the document server decides not to upload each of 100 documents to a client based on the document server's local copy of the client cache map, on average at least 99 of those decisions will be correct. When the document server makes an incorrect decision based on the client cache map, the primary consequence is that, in the event that the client 102 requires a document that was not uploaded by the document server, the client assistant 106 or client application 104 will need to retrieve the document from the document server 120 or from the document's associated web host 132 . This may increase the waiting period for a user to view the document in the web browser.
- the client cache maps 129 take the form of a table 250 .
- Each entry of the table 250 has at least three elements, including a client ID, an expiration timestamp (TS), and a client cache map (e.g., a Bloom filter).
- the client ID uniquely identifies a client connected to the document server 120 .
- the expiration timestamp indicates the life expectancy of the client cache map. As noted above, when more objects are inserted into a set, the “false positive” probability of a Bloom filter increases. The expiration timestamp can be used to curb the “false positive” probability.
- an expiration timestamp is attached to the entry.
- the document server 120 invalidates or deletes a respective client cache map when the current time is equal to or later than the expiration timestamp of the respective client cache map.
- the expiration timestamp is replaced by a counter that is used to count the number of objects inserted into the client cache map.
- the document server replaces it's copy of the client cache map in table 250 with a new copy of the client cache map obtained from the client associated with the client cache map (as identified by the client ID in table 250 ). Accordingly, the objects associated with the old client cache map, but not with the new client cache map, are eliminated from the document server 120 .
- a new “false positive” probability can be determined for the new client cache map and inserted into the corresponding entry in the table client cache maps 129 .
- FIG. 3 is a flowchart illustrating a process of a document server using a client cache map to determine if a document is already stored in a client cache before uploading the document to the client, according to some embodiments of the invention.
- the client cache map 109 resides in the client 102 .
- the content of the client cache map is kept in synch with the documents in the client cache 108 .
- An addition of a new document to the client cache 108 triggers an update to the client cache map 109 .
- the client cache map 109 is a Bloom filter
- a set of bits corresponding to the new document is set (e.g., to 1).
- the Bloom filter is not updated when a document is removed from the client cache 108 because any bit of the Bloom filter may be associated with multiple documents.
- the document server 120 does not keep track of documents in a client 102 's client cache 108 . Rather, the document server 120 receives a copy of the client cache map 109 from the client 102 through the connection between the client 102 and the document server 120 .
- the client 102 scans the client cache 108 and generates a new client cache map corresponding to the documents currently in the client cache 108 .
- the client cache map is transmitted to the document server 120 , e.g., through a low-priority data stream. In some embodiments, this transmission occurs at the beginning of a new session between the client 102 and the document server 120 .
- the document server 120 After receiving the client cache map ( 301 ), the document server 120 stores the map in its client cache maps 129 , e.g., by generating a new entry in the table 250 ( 305 ). This completes the process of document upload preparation and the document server 120 is ready to upload documents to the client 102 .
- the document server 120 identifies a document to be uploaded to the client 102 ( 307 ).
- a document server may decide to upload a document to a client.
- the document server may receive a document download request submitted by a user at the client.
- the document server attempts to identify the requested document in its index archive and object archive. If the requested document is not found in the index archive and the object archive, the document server fetches the requested document from a web host.
- the document server may upload a document to a client even without a user request for the document. For instance, the document server may identify and preload a set of candidate documents based on tips generated by the user interest hinter.
- the document server first searches the corresponding client cache map for the document to be uploaded ( 309 ). There are two possible search results. First, the document has no matching entry in the client cache map ( 311 , no). For example, at least one bit corresponding to the document in the Bloom filter is not set (e.g., equal to 0). In this case, the document is not in the client cache. Accordingly, the document server retrieves the identified document from the index and object archives ( 315 ).
- this retrieval further triggers the document fetcher 123 to download the document from a web host, e.g., if the document is not found in the archives or the copy in the archives are no longer servable.
- the document server uploads the identified document to the client ( 317 ).
- the document server updates the client cache map (i.e., the local copy of the client cache map in the document server) to reflect the existence of the newly uploaded document in the client cache ( 318 ). Note that this update operation ( 318 ) may happen before, after or in parallel to the document upload operation ( 317 ).
- the second possible search result is that an entry matching the document is found in the client cache map ( 311 , yes). For example, all bits corresponding to the document in the Bloom filter are set (e.g., equal to 1). This indicates that there may be a copy of the document in the client cache. In one embodiment, the document server assumes that there is no need to upload another copy to the client even if the search result turns out to be a false positive. The consequences and resolution of a false positive are described above.
- a new document download request is submitted by the client to the document server or a web host for the current version of the requested document.
- operation 307 when operation 307 occurs in response to the document server receiving a request for a document from a client, operations 309 and 311 are skipped, and the processing moves directly from 307 to 311 .
- the client cache map is searched by the document server only when performing document preloads.
- the document server checks whether the document in the client cache is still fresh according to certain predefined criteria and whether it is also cached by the document server ( 313 ).
- a cached document whose content is deemed stale, e.g., for not meeting the predefined criteria, is not served to a requesting user. Rather, the document server retrieves a valid copy from its archives ( 315 ), preloads this one to the client ( 317 ), and updates the client cache map accordingly ( 318 ).
- the document in the client cache may not exist in the document server's archives. For example, the document may have been directly downloaded by the client from a web host, circumventing the document server.
- the document server is configured to assume that a document only found in the client cache (and not in the document server) is no longer valid. As a result, the document server gets the current version of the document from a web host through its document fetcher and then uploads the current version to the client.
- FIGS. 4 and 5 further illustrate two exemplary processes of how to determine whether a document found in the client cache is fresh or not according to some embodiments of the present invention.
- the client 102 generates a client cache map for its client cache 108 and sends the cache map to the document server 120 at the beginning of a new session.
- the client 102 may include in the map only those cached documents that will remain fresh for a predetermined period of time (e.g., two hours).
- the client 102 associates an expiration timestamp with the client cache map. Both the client cache map and the expiration timestamp are sent to the document server 120 .
- the document server 120 checks whether the client cache map has expired, based on its associated expiration timestamp. If the client cache map has expired ( 401 , yes), all documents represented by the client cache map are deemed invalid.
- the document server requests and receives a new client cache map from the client 102 .
- the new client cache map has an associated new expiration timestamp.
- the document server looks up its own archives for the document to be uploaded ( 315 ). In some embodiments, the operations 403 and 315 are performed in parallel.
- the document server uploads any document associated with a particular client, be it a requested document or a candidate document. But if the client cache map has not expired ( 401 , no), all documents represented by the client cache map are also deemed valid. In this case, the document server does not upload these documents to the client 102 .
- FIG. 5 depicts an approach that checks the freshness level of cached documents on an individual basis. To do so, the document server first identifies past download requests (e.g., HTTP requests) for a document by one or more clients.
- HTTP requests e.g., HTTP requests
- a download request includes a set of request headers.
- Some of the request headers specify a requesting client's requirement as to the freshness of a response, typically a requested document.
- the “max-age” cache-control directive of the HTTP/1.1 standard indicates that the client is willing to accept a response whose age is no greater than the time in seconds specified by the “max-age” cache-control directive.
- the “min-fresh” cache-control directive indicates that the client is willing to accept a response whose freshness lifetime is no less than its current age plus the time in seconds specified by the “min-fresh” cache-control directive. In other words, the client wants a response that will still be fresh for at least the specified number of seconds.
- the document server From analyzing the request headers of the past requests, the document server infers a set of freshness requirements for a document to be uploaded ( 501 ).
- the set of freshness requirements indicates the level of freshness required by the client.
- the set of freshness requirements is comprised of the minimum values of the freshness-related headers in a download request.
- the set of freshness requirements takes the average values of the freshness-related headers in a download request.
- the document server compares the document identified in the client cache map against the set of freshness requirements ( 503 ). For example, the document server applies the set of freshness requirements to the cached document. If the cached document meets all the freshness requirements ( 505 , yes), it is presumed to be fresh and therefore there is no need to upload a new version of the document to the client 102 . Otherwise, e.g., if at least one of the requirements is not met, the document server provides a new version of the document to the client 102 .
- the set of freshness requirements includes a requirement as to the type of client application that renders the document.
- the freshness requirements specify that the value of the HTTP request header “user-agent” be “Firefox.”
- a cached document configured for display by the IE browser cannot be served in response to a request that specifies FireFox as the user-agent. This is because different web browsers may have different display requirements.
- a document that is configured for display (or rendering) by one type of web browser may not work for another one.
- One skilled in the art will appreciate that other requirements about the validity of a cached document can be implemented in a similar fashion.
- the client cache 108 has limited space (e.g., 1 GB).
- the client cache 108 implements a cache replacement policy, e.g., by randomly eliminating existing cache entries and/or retiring least-recently used cache entries at a predefined rate.
- the removal of a document from the client cache 108 triggers a removal of a corresponding entry from the client cache map 109 to keep the two entities always in synch.
- the Bloom filter does not support such a removal operation, because any bit in the Bloom filter may be mapped to multiple documents. Therefore, as time goes by, the Bloom filter-based cache map may include more and more outdated entries, whose associated documents have already been removed from the client cache.
- More outdated entries in the Bloom filter increases the false positive probability of the cache map.
- a target false positive probability is established for the Bloom filter-based client cache map. When its false positive probability exceeds the target, the client cache map is re-generated to be in synch with the current document contents in the client cache.
- the false positive probability of a Bloom filter can be defined as: P false — positive ⁇ (1 ⁇ e ⁇ kn/m ) k , where k is the number of hash functions, n is the number of objects inserted into the Bloom filter, and m is the number of bits in the bit vector.
- the client or document server may select or generate an appropriate Bloom filter, with values of the three parameters k, n, and m that have been selected to meet a target false positive probability. For a fixed number of hash functions, a large cache (measured by the number of documents in the cache) requires a large bit vector to meet the target false positive probability and a small cache only needs a relatively small bit vector.
- the client 102 selects or generates a Bloom filter, from among a predefined set of Bloom Filters or a predefined range of Bloom filters, that has the smallest cache map size (m) that is consistent with a given target false positive probability, so as to minimize network bandwidth used for transmission of the cache map and to minimize memory space (in both the client and document server) used to store the cache map.
- FIG. 6 is a flowchart illustrating a process of updating a client cache map according to some embodiments of the invention.
- the client 102 determines the current false positive probability of its client cache map ( 601 ). By keeping track of the number of cache entries added to the client cache map 109 , the client 102 can use the aforementioned formula to calculate the current false positive probability of the Bloom filter-based cache map.
- the number of cache entries inserted into the client cache map 109 and the number of cached objects in the client cache 108 are not always the same. The difference between these two numbers indicates the number of objects that have been evicted from the client cache 108 .
- This difference value can be used to further adjust (e.g., increase) the false positive probability based on the aforementioned formula.
- the current false positive probability is compared with a threshold, e.g., a target false positive probability. If the current false positive probability is lower than the target one ( 603 , no), there is no need to update the client cache map and the process terminates.
- the client 102 determines a new vector size for the client cache map based on the threshold ( 605 ). This new vector size depends on the current client cache size and possibly also takes into account its growth rate. The size is selected such that the resultant cache map is predicted to be valid for a predetermined period of time (e.g., the duration of a typical session). Based on the newly selected vector size, the client 102 generates a new client cache map for the current client cache ( 607 ). Next, the new client cache map is sent to the document server to replace the old one ( 609 ).
- the size of the client cache map may be selected to be as small as possible while still meeting the target false positive probability so as to minimize its associated computational cost (including transmission and storage).
- the document server may request a new cache map from a client (see, e.g., the retrieve operation 403 of FIG. 4 ).
- the client cache map update process can be triggered by a request from the document server.
- the client cache map received by the document server is stored in the document server's memory for efficiency.
- the document server periodically or not, eliminates those client cache maps associated with terminated network sessions from its memory so as to leave free space for hosting new client cache maps or for other purposes. If the document server temporarily runs out of memory space for a client cache map, it may inform the client to submit document download requests directly to various web hosts.
- the client 102 does not update its cache map 109 whenever a new document is inserted into the client cache 108 . Instead, the client 102 re-generates the entire cache map when predefined conditions are met (e.g., decision 603 of FIG. 6 ).
- the document server 120 updates its own copy of the client cache map whenever a document is uploaded to the client 102 . This is because the document server needs to query the cache map before uploading a document, whereas the client does not have this need.
- FIG. 7 is a flowchart illustrating a process of the document server 120 authenticating the identity of a client using its client cache map according to some embodiments of the invention.
- the document server 120 generates a mixed list of fingerprints (e.g., URL and/or content fingerprints) for a client under authentication ( 701 ).
- some members of the mixed list are fingerprints that corresponding to entries in the client cache map; these members of the mixed list are sometimes called valid fingerprints or first fingerprints.
- the other members of the mixed list are test fingerprints generated by the document server within the same fingerprint space (e.g., they have the same length or number of bits as the first fingerprints), but which do not correspond to any entries in the client cache map.
- the test fingerprints are generated using a random or pseudo-random process or function.
- the document server selects a fingerprint from the list.
- the selected fingerprint may be a valid fingerprint or a test fingerprint ( 703 ).
- the document server queries the client using the selected fingerprint ( 705 ) and receives an answer to the query ( 707 ).
- the document server removes the selected fingerprint from the list to improve the reliability of the authentication result ( 708 ).
- the client's answer indicating that it has no matching entry in the client cache is not necessarily an incorrect answer. This is because that the client may have retired the cache entry corresponding to the actual fingerprint according to its cache replacement policy.
- the document server may treat such an answer as a correct answer.
- the document server assumes that the client is not the actual client associated with the client cache map held by the document server. Accordingly, the document server may invalidate the client cookie that the client has used to identify itself to the document server ( 711 ), thereby preventing the client from accessing the document server using the client cookie.
- the client will need to get a new client cookie, which will have a different client or user identifier than the invalidated client cookie.
- the client's access to the document server is restricted if the client incorrectly answers any of the fingerprint queries. Alternately, the client's access to the document server is blocked or denied if the client is unable to obtain a new client cookie.
- the document server checks if a sufficient number of tests have been conducted against the client. If not ( 713 , no), the document server continues the authentication process by selecting another fingerprint in the list, and repeats the above described process until the client's authenticity is confirmed by enough tests. In this case, the document server validates the client's cookie ( 715 ) and the client is allowed to use the cookie to continue its communication with the document server.
- FIG. 8 depicts a client computer 800 in accordance with some embodiments of the present invention, which typically includes one or more processing units (CPU's) 802 , one or more network or other communications interfaces 810 , memory 812 , and one or more communication buses 814 for interconnecting these components.
- the communication buses 814 may include circuitry (sometimes called a chipset) that interconnects and controls communications between system components.
- the client computer 800 may also include a user interface 804 comprising a display device 806 and a keyboard 808 .
- Memory 812 may include high speed random access memory and may also include non-volatile memory, such as one or more magnetic disk storage devices.
- Memory 812 or one or more of the storage devices (e.g., one or more non-volatile storage devices) in memory 812 , includes a computer readable storage medium.
- Memory 812 or the computer readable storage medium of memory 812 preferably stores the following programs, modules and data structures, or a subset or superset thereof:
- FIG. 9 depicts a server computer 900 (e.g., a document server 120 ) in accordance with one embodiment of the present invention, which typically includes one or more processing units (CPU's) 902 , one or more network or other communications interfaces 910 , memory 912 , and one or more communication buses 914 for interconnecting these components.
- the communication buses 914 may include circuitry (sometimes called a chipset) that interconnects and controls communications between system components.
- the server computer 900 may optionally include a user interface 904 comprising a display device 906 and a keyboard 908 .
- Memory 912 may include high speed random access memory and may also include non-volatile memory, such as one or more magnetic disk storage devices. Memory 912 preferably stores the following programs, modules and data structures, or a subset or superset thereof:
- FIG. 9 shows a “server,” FIG. 9 is intended more as functional description of the various features which may be present in a set of servers than as a structural schematic of the embodiments described herein.
- items shown separately could be combined and some items could be separated.
- some items shown separately in FIG. 9 could be implemented on single servers and single items could be implemented by one or more servers.
- the actual number of servers used to implement a website server and how features are allocated among them will vary from one implementation to another, and may depend in part on the amount of data traffic that the system must handle during peak usage periods as well as during average usage periods.
- stages which are not order dependent may be reordered and other stages may be combined or broken out. While some reordering or other groupings are specifically mentioned, others will be obvious to those of ordinary skill in the art and so do not present an exhaustive list of alternatives. Moreover, it should be recognized that the stages could be implemented in hardware, firmware, software or any combination thereof.
Abstract
Description
P false
where k is the number of hash functions, n is the number of objects inserted into the Bloom filter, and m is the number of bits in the bit vector. The client or document server may select or generate an appropriate Bloom filter, with values of the three parameters k, n, and m that have been selected to meet a target false positive probability. For a fixed number of hash functions, a large cache (measured by the number of documents in the cache) requires a large bit vector to meet the target false positive probability and a small cache only needs a relatively small bit vector. The downside of a large bit vector is that it consumes more network bandwidth during transmission and also occupies more memory space in the document server. In some embodiments, the
A match in the | No match in the | |
client cache | client cache | |
Valid fingerprint | Correct answer | Maybe |
Test fingerprint | Incorrect answer | Correct answer |
-
- an
operating system 816 that includes procedures for handling various basic system services and for performing hardware dependent tasks; - a network communication module (or instructions) 818 that is used for connecting the
client computer 800 to other computers via the one or more communication network interfaces 810 and one or more communication networks, such as the Internet, other wide area networks, local area networks, metropolitan area networks, and the like; - an application (or instructions) 104, such as a web browser application, for receiving a user request for a document and rendering the requested document on a computer monitor or other user interface device;
- a client assistant module (or instructions) 106, as described elsewhere in this document;
- a
client cache 108 for storing user-requested documents and preloaded documents; and - a
client cache map 109 for representing the contents of theclient cache 108 and used by the document server in choosing documents to be uploaded to the client computer.
- an
-
- an
operating system 916 that includes procedures for handling various basic system services and for performing hardware dependent tasks; - a network communication module (or instructions) 918 that is used for connecting the
server computer 900 to other computers via the one or more communication network interfaces 910 and one or more communication networks, such as the Internet, other wide area networks, local area networks, metropolitan area networks, and the like; - a remote cache server module (or instructions) 121 for receiving a document retrieval request from a client assistant and transferring the requested document and candidate documents to the
client assistant 106; - a document fetcher module (or instructions) 123 for retrieving documents from different web servers;
- a user interest hinter module (or instructions) 124 for predicting a user's browsing interest based on various types of user activities including the mouse cursor movements and the usage statistics as well as the layouts of the documents retrieved from different web servers;
- a server performance predictor module (or instructions) 124 for comparing the speeds of serving a document to a requesting client computer from a web server and the server computer;
- a
DNS cache 126 for storing records that map the hostnames of the web servers to their respective IP addresses; - a user ID server module (or instructions) 127 for storing records of the users using the server computer;
- an
index archive 122 for storing a plurality of document identity records; in an exemplary embodiment each record includes a document's URL fingerprint, a document content fingerprint and document content freshness parameters; - an
object archive 128 for managing a plurality of documents; in an exemplary embodiment, each record includes a document's content fingerprint and a copy of the document content; and - client cache maps 129 for storing the client cache maps of clients that have an active network session with the server computer.
- an
Claims (15)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/662,366 US8996653B1 (en) | 2007-02-15 | 2012-10-26 | Systems and methods for client authentication |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/675,598 US8812651B1 (en) | 2007-02-15 | 2007-02-15 | Systems and methods for client cache awareness |
US13/662,366 US8996653B1 (en) | 2007-02-15 | 2012-10-26 | Systems and methods for client authentication |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/675,598 Division US8812651B1 (en) | 2007-02-15 | 2007-02-15 | Systems and methods for client cache awareness |
Publications (1)
Publication Number | Publication Date |
---|---|
US8996653B1 true US8996653B1 (en) | 2015-03-31 |
Family
ID=51301823
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/675,598 Active 2028-12-09 US8812651B1 (en) | 2007-02-15 | 2007-02-15 | Systems and methods for client cache awareness |
US13/662,366 Active US8996653B1 (en) | 2007-02-15 | 2012-10-26 | Systems and methods for client authentication |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/675,598 Active 2028-12-09 US8812651B1 (en) | 2007-02-15 | 2007-02-15 | Systems and methods for client cache awareness |
Country Status (1)
Country | Link |
---|---|
US (2) | US8812651B1 (en) |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20140280691A1 (en) * | 2013-03-12 | 2014-09-18 | Sap Ag | Updating dynamic content in cached resources |
Families Citing this family (32)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8055702B2 (en) * | 2005-04-25 | 2011-11-08 | Netapp, Inc. | System and method for caching network file systems |
US9654328B2 (en) | 2007-10-15 | 2017-05-16 | Viasat, Inc. | Methods and systems for implementing a cache model in a prefetching system |
US9460229B2 (en) * | 2007-10-15 | 2016-10-04 | Viasat, Inc. | Methods and systems for implementing a cache model in a prefetching system |
US9100246B1 (en) * | 2008-06-19 | 2015-08-04 | Symantec Corporation | Distributed application virtualization |
US9485640B2 (en) | 2011-03-28 | 2016-11-01 | Google Inc. | Smart cache warming |
JP5875304B2 (en) * | 2011-09-08 | 2016-03-02 | キヤノン株式会社 | Electronic file display system |
US9444779B2 (en) * | 2012-06-04 | 2016-09-13 | Microsoft Technology Lincensing, LLC | Dynamic and intelligent DNS routing with subzones |
JP5918642B2 (en) * | 2012-06-29 | 2016-05-18 | Kddi株式会社 | Web content distribution device |
US10348821B2 (en) * | 2012-12-21 | 2019-07-09 | Dropbox, Inc. | Prioritizing structural operations and distributing changes in a synced online content management system |
US20150039659A1 (en) * | 2013-07-30 | 2015-02-05 | William F. Sauber | Data location management agent using remote storage |
US9930132B2 (en) * | 2014-01-10 | 2018-03-27 | Facebook, Inc. | Content specific router caching |
GB2522459B (en) * | 2014-01-24 | 2021-02-17 | Metaswitch Networks Ltd | Timer services |
US9613158B1 (en) * | 2014-05-13 | 2017-04-04 | Viasat, Inc. | Cache hinting systems |
US10397357B2 (en) | 2014-07-23 | 2019-08-27 | Facebook, Inc. | Rural area network device |
US10291735B2 (en) | 2014-07-23 | 2019-05-14 | Facebook, Inc. | Residential cache appliance utilizing a social network |
WO2016025267A1 (en) | 2014-08-15 | 2016-02-18 | Interdigital Patent Holdings, Inc. | Methods and apparatus for content delivery via browser cache extension |
US10205797B2 (en) | 2014-12-29 | 2019-02-12 | Facebook, Inc. | Application service delivery through an application service avatar |
US9959069B2 (en) | 2015-02-12 | 2018-05-01 | Microsoft Technology Licensing, Llc | Externalized execution of input method editor |
US9836599B2 (en) * | 2015-03-13 | 2017-12-05 | Microsoft Technology Licensing, Llc | Implicit process detection and automation from unstructured activity |
JP2017058788A (en) * | 2015-09-14 | 2017-03-23 | 株式会社東芝 | Communication device, communication method, and communication program |
CN105554122A (en) * | 2015-12-18 | 2016-05-04 | 畅捷通信息技术股份有限公司 | Information updating method, information updating device, terminal and server |
US10853359B1 (en) * | 2015-12-21 | 2020-12-01 | Amazon Technologies, Inc. | Data log stream processing using probabilistic data structures |
US10650003B1 (en) * | 2016-03-31 | 2020-05-12 | Amazon Technologies, Inc. | Expiration of elements associated with a probabilistic data structure |
EP3449614B1 (en) * | 2016-04-28 | 2024-02-07 | Telefonaktiebolaget LM Ericsson (publ) | Handling cached content resources |
US20180032491A1 (en) * | 2016-07-26 | 2018-02-01 | Google Inc. | Web page display systems and methods |
EP3373614A1 (en) | 2017-03-10 | 2018-09-12 | IPCom GmbH & Co. KG | Network controlled caching by user equipment |
US10747559B2 (en) * | 2017-08-14 | 2020-08-18 | T-Mobile Usa, Inc. | Automated troubleshoot and diagnostics tool |
US10678699B2 (en) * | 2018-07-26 | 2020-06-09 | Cisco Technology, Inc. | Cascading pre-filter to improve caching efficiency |
US10331713B1 (en) | 2018-10-03 | 2019-06-25 | Gurbaksh Singh Chahal | User activity analysis using word clouds |
JPWO2022054283A1 (en) * | 2020-09-14 | 2022-03-17 | ||
US11429585B2 (en) | 2020-12-01 | 2022-08-30 | Walmart Apollo, Llc | Systems and methods for managing concurrent data requests |
CN112818019B (en) * | 2021-01-29 | 2024-02-02 | 北京思特奇信息技术股份有限公司 | Query request filtering method applied to Redis client and Redis client |
Citations (212)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4953106A (en) | 1989-05-23 | 1990-08-28 | At&T Bell Laboratories | Technique for drawing directed graphs |
US5450535A (en) | 1993-09-24 | 1995-09-12 | At&T Corp. | Graphs employing clusters |
US5559984A (en) | 1993-09-28 | 1996-09-24 | Hitachi, Ltd. | Distributed file system permitting each user to enhance cache hit ratio in file access mode |
US5727129A (en) | 1996-06-04 | 1998-03-10 | International Business Machines Corporation | Network system for profiling and actively facilitating user activities |
GB2317723A (en) | 1996-09-30 | 1998-04-01 | Viewinn Plc | Caching system for information retrieval |
US5748954A (en) | 1995-06-05 | 1998-05-05 | Carnegie Mellon University | Method for searching a queued and ranked constructed catalog of files stored on a network |
US5752241A (en) | 1995-11-14 | 1998-05-12 | Lucent Technologies Inc. | Method and apparatus for estimating transitive closure and reachability |
US5802292A (en) | 1995-04-28 | 1998-09-01 | Digital Equipment Corporation | Method for predictive prefetching of information over a communications network |
US5832494A (en) | 1993-06-14 | 1998-11-03 | Libertech, Inc. | Method and apparatus for indexing, searching and displaying data |
US5835905A (en) | 1997-04-09 | 1998-11-10 | Xerox Corporation | System for predicting documents relevant to focus documents by spreading activation through network representations of a linked collection of documents |
US5848407A (en) | 1996-05-22 | 1998-12-08 | Matsushita Electric Industrial Co., Ltd. | Hypertext document retrieving apparatus for retrieving hypertext documents relating to each other |
US5867661A (en) | 1996-02-15 | 1999-02-02 | International Business Machines Corporation | Method and apparatus of using virtual sockets for reducing data transmitted over a wireless communication link between a client web browser and a host web server using a standard TCP protocol |
US5878223A (en) | 1997-05-07 | 1999-03-02 | International Business Machines Corporation | System and method for predictive caching of information pages |
US5946697A (en) | 1997-04-22 | 1999-08-31 | Microsoft Corporation | Rapid transfer of HTML files |
US5978791A (en) | 1995-04-11 | 1999-11-02 | Kinetech, Inc. | Data processing system using substantially unique identifiers to identify data items, whereby identical data items have the same identifiers |
US5978847A (en) | 1996-12-26 | 1999-11-02 | Intel Corporation | Attribute pre-fetch of web pages |
US6003030A (en) | 1995-06-07 | 1999-12-14 | Intervu, Inc. | System and method for optimized storage and retrieval of data on a distributed computer network |
US6014678A (en) | 1995-12-01 | 2000-01-11 | Matsushita Electric Industrial Co., Ltd. | Apparatus for preparing a hyper-text document of pieces of information having reference relationships with each other |
US6016512A (en) | 1997-11-20 | 2000-01-18 | Telcordia Technologies, Inc. | Enhanced domain name service using a most frequently used domain names table and a validity code table |
US6023726A (en) | 1998-01-20 | 2000-02-08 | Netscape Communications Corporation | User configurable prefetch control system for enabling client to prefetch documents from a network server |
US6029175A (en) | 1995-10-26 | 2000-02-22 | Teknowledge Corporation | Automatic retrieval of changed files by a network software agent |
US6055569A (en) | 1998-01-27 | 2000-04-25 | Go Ahead Software Inc. | Accelerating web access by predicting user action |
US6067565A (en) | 1998-01-15 | 2000-05-23 | Microsoft Corporation | Technique for prefetching a web page of potential future interest in lieu of continuing a current information download |
US6085226A (en) | 1998-01-15 | 2000-07-04 | Microsoft Corporation | Method and apparatus for utility-directed prefetching of web pages into local cache using continual computation and user models |
US6085193A (en) | 1997-09-29 | 2000-07-04 | International Business Machines Corporation | Method and system for dynamically prefetching information via a server hierarchy |
US6088707A (en) | 1997-10-06 | 2000-07-11 | International Business Machines Corporation | Computer system and method of displaying update status of linked hypertext documents |
US6098064A (en) | 1998-05-22 | 2000-08-01 | Xerox Corporation | Prefetching and caching documents according to probability ranked need S list |
US6108703A (en) | 1998-07-14 | 2000-08-22 | Massachusetts Institute Of Technology | Global hosting system |
US6128644A (en) | 1998-03-04 | 2000-10-03 | Fujitsu Limited | Load distribution system for distributing load among plurality of servers on www system |
US6128701A (en) | 1997-10-28 | 2000-10-03 | Cache Flow, Inc. | Adaptive and predictive cache refresh policy |
US6134583A (en) | 1996-07-01 | 2000-10-17 | Sun Microsystems, Inc. | Method, system, apparatus and article of manufacture for providing identity-based caching services to a plurality of computer systems (#16) |
US6134551A (en) * | 1995-09-15 | 2000-10-17 | Intel Corporation | Method of caching digital certificate revocation lists |
US6167438A (en) | 1997-05-22 | 2000-12-26 | Trustees Of Boston University | Method and system for distributed caching, prefetching and replication |
US6170013B1 (en) | 1998-03-27 | 2001-01-02 | Nortel Networks Limited | Method and apparatus for controlling access to network information sources |
US6178461B1 (en) | 1998-12-08 | 2001-01-23 | Lucent Technologies Inc. | Cache-based compaction technique for internet browsing using similar objects in client cache as reference objects |
US6182133B1 (en) | 1998-02-06 | 2001-01-30 | Microsoft Corporation | Method and apparatus for display of information prefetching and cache status having variable visual indication based on a period of time since prefetching |
US6182122B1 (en) | 1997-03-26 | 2001-01-30 | International Business Machines Corporation | Precaching data at an intermediate server based on historical data requests by users of the intermediate server |
US6195622B1 (en) | 1998-01-15 | 2001-02-27 | Microsoft Corporation | Methods and apparatus for building attribute transition probability models for use in pre-fetching resources |
US6205481B1 (en) | 1998-03-17 | 2001-03-20 | Infolibria, Inc. | Protocol for distributing fresh content among networked cache servers |
US6230168B1 (en) | 1997-11-26 | 2001-05-08 | International Business Machines Corp. | Method for automatically constructing contexts in a hypertext collection |
WO2001055897A1 (en) | 2000-01-27 | 2001-08-02 | Link Plus, Inc. | Method and apparatus for processing web documents |
US6272534B1 (en) | 1998-03-04 | 2001-08-07 | Storage Technology Corporation | Method and system for efficiently storing web pages for quick downloading at a remote device |
US6282542B1 (en) | 1997-08-06 | 2001-08-28 | Tachyon, Inc. | Distributed system and method for prefetching objects |
US6285999B1 (en) | 1997-01-10 | 2001-09-04 | The Board Of Trustees Of The Leland Stanford Junior University | Method for node ranking in a linked database |
US20010020248A1 (en) | 1996-10-11 | 2001-09-06 | Gaurav Banga | Method for transferring and displaying data pages on a data network |
US6292880B1 (en) | 1998-04-15 | 2001-09-18 | Inktomi Corporation | Alias-free content-indexed object cache |
US20010033557A1 (en) | 2000-02-08 | 2001-10-25 | Tantivy Communications, Inc | Grade of service and fairness policy for bandwidth reservation system |
US6317777B1 (en) | 1999-04-26 | 2001-11-13 | Intel Corporation | Method for web based storage and retrieval of documents |
US20010050875A1 (en) | 2000-02-21 | 2001-12-13 | Kahn Richard Oliver | Portable information capture devices |
US20020002618A1 (en) | 2000-04-17 | 2002-01-03 | Mark Vange | System and method for providing last-mile data prioritization |
US6338066B1 (en) | 1998-09-25 | 2002-01-08 | International Business Machines Corporation | Surfaid predictor: web-based system for predicting surfer behavior |
US20020004813A1 (en) | 2000-03-08 | 2002-01-10 | Alok Agrawal | Methods and systems for partial page caching of dynamically generated content |
US20020007413A1 (en) | 2000-03-16 | 2002-01-17 | Garcia-Luna-Aceves Jj | System and method for using a mapping between client addresses and addresses of caches to support content delivery |
US6341311B1 (en) | 1998-05-29 | 2002-01-22 | Microsoft Corporation | Directing data object access requests in a distributed cache |
US20020016786A1 (en) | 1999-05-05 | 2002-02-07 | Pitkow James B. | System and method for searching and recommending objects from a categorically organized information repository |
EP1182589A2 (en) | 2000-08-17 | 2002-02-27 | International Business Machines Corporation | Provision of electronic documents from cached portions |
US20020031102A1 (en) | 2000-05-02 | 2002-03-14 | Globalstar L.P. | On-board DNS service for a satellite ISP system using non-geosynchronous orbit satellites |
US20020048269A1 (en) | 2000-08-04 | 2002-04-25 | Hong Jack L. | Intelligent demand driven recognition of URL objects in connection oriented transactions |
US6405252B1 (en) | 1999-11-22 | 2002-06-11 | Speedera Networks, Inc. | Integrated point of presence server network |
US20020078371A1 (en) | 2000-08-17 | 2002-06-20 | Sun Microsystems, Inc. | User Access system using proxies for accessing a network |
US20020078087A1 (en) | 2000-12-18 | 2002-06-20 | Stone Alan E. | Content indicator for accelerated detection of a changed web page |
US20020082811A1 (en) | 2000-03-17 | 2002-06-27 | Honjas William A. | Optimization apparatus, system, and method of use and doing business |
US6421726B1 (en) | 1997-03-14 | 2002-07-16 | Akamai Technologies, Inc. | System and method for selection and retrieval of diverse types of video data on a computer network |
US20020097261A1 (en) | 1999-11-15 | 2002-07-25 | Gottfurcht Elliot A. | Apparatus and method for simple wide-area network navigation |
US20020107935A1 (en) | 2001-01-12 | 2002-08-08 | Epicrealm Inc. | Method and system for community data caching |
US6442549B1 (en) | 1997-07-25 | 2002-08-27 | Eric Schneider | Method, product, and apparatus for processing reusable information |
US20020143892A1 (en) | 2001-04-03 | 2002-10-03 | Mogul Jeffrey C. | Reduction of network retrieval latency using cache and digest |
US20020143984A1 (en) | 2001-03-19 | 2002-10-03 | The Aerospace Corporation | Cooperative adaptive web caching routing and forwarding web content data broadcasting method |
US6463474B1 (en) * | 1999-07-02 | 2002-10-08 | Cisco Technology, Inc. | Local authentication of a client at a network device |
US20020152361A1 (en) | 2001-02-05 | 2002-10-17 | International Business Machines Corporation | Directed least recently used cache replacement method |
US20020156864A1 (en) | 2000-06-06 | 2002-10-24 | Kniest James Newton | System for wireless exchange of data with hand held devices |
US20020156980A1 (en) | 2001-04-19 | 2002-10-24 | International Business Machines Corporation | Designing a cache with adaptive reconfiguration |
US20020161860A1 (en) | 2001-02-28 | 2002-10-31 | Benjamin Godlin | Method and system for differential distributed data file storage, management and access |
US6484143B1 (en) | 1999-11-22 | 2002-11-19 | Speedera Networks, Inc. | User device and system for traffic management and content distribution over a world wide area network |
US20020178238A1 (en) | 2001-05-23 | 2002-11-28 | Thomas Fletcher | Caching address information in a communications system |
US20020184340A1 (en) | 2001-05-31 | 2002-12-05 | Alok Srivastava | XML aware logical caching system |
WO2002100117A2 (en) | 2001-06-04 | 2002-12-12 | Nct Group, Inc. | A system and method for reducing the time to deliver information from a communications network to a user |
US20020188665A1 (en) | 2001-05-02 | 2002-12-12 | Lash Thomas D. | System and method for patch enabled data transmissions |
US20020191610A1 (en) | 2001-06-18 | 2002-12-19 | Wonin Baek | Message transmission method and system capable of transmitting differential data |
US20020198883A1 (en) | 2001-06-26 | 2002-12-26 | Itaru Nishizawa | Web system having clustered application servers and clustered databases |
US20020198961A1 (en) | 1999-08-27 | 2002-12-26 | Balachander Krishnamurthy | Method for improving web performance by client characterization-driven server adaptation |
US20030005152A1 (en) | 2001-03-09 | 2003-01-02 | Arif Diwan | Content-request redirection method and system |
US20030023813A1 (en) | 1998-07-31 | 2003-01-30 | Cacheflow, Inc., A Delaware Corporation | Multiple cache communication |
US6516320B1 (en) | 1999-03-08 | 2003-02-04 | Pliant Technologies, Inc. | Tiered hashing for data access |
US6526479B2 (en) | 1997-08-21 | 2003-02-25 | Intel Corporation | Method of caching web resources |
US20030046343A1 (en) | 1999-08-27 | 2003-03-06 | Balachander Krishnamurthy | Method for improving web performance by adapting servers based on client cluster characterization |
US6532520B1 (en) | 1999-09-10 | 2003-03-11 | International Business Machines Corporation | Method and apparatus for allocating data and instructions within a shared cache |
US6542964B1 (en) | 1999-06-02 | 2003-04-01 | Blue Coat Systems | Cost-based optimization for content distribution using dynamic protocol selection and query resolution for cache server |
US20030065743A1 (en) | 2001-09-28 | 2003-04-03 | Jenny Patrick Duncan | Method and system for distributing requests for content |
US6553411B1 (en) | 1999-05-18 | 2003-04-22 | International Business Machines Corporation | System and method for cache acceleration |
US20030079027A1 (en) | 2001-10-18 | 2003-04-24 | Michael Slocombe | Content request routing and load balancing for content distribution networks |
US20030084159A1 (en) | 1998-12-22 | 2003-05-01 | At&T Corp. | Pseudo proxy server providing instant overflow capacity to computer networks |
US20030086098A1 (en) | 2001-11-05 | 2003-05-08 | Robert Sesek | Printer-based pre-ripping and caching of network documents |
US20030101234A1 (en) | 2001-11-28 | 2003-05-29 | International Business Machines Corporation | System and method for indicating whether a document is cached |
US6578113B2 (en) | 1997-06-02 | 2003-06-10 | At&T Corp. | Method for cache validation for proxy caches |
US6581090B1 (en) | 1996-10-14 | 2003-06-17 | Mirror Image Internet, Inc. | Internet communication system |
US6584498B2 (en) | 1996-09-13 | 2003-06-24 | Planet Web, Inc. | Dynamic preloading of web pages |
US20030158913A1 (en) | 2002-02-15 | 2003-08-21 | Agnoli Giovanni M. | System, method, and computer program product for media publishing request processing |
US6611908B2 (en) | 1991-07-08 | 2003-08-26 | Seiko Epson Corporation | Microprocessor architecture capable of supporting multiple heterogeneous processors |
US20030161611A1 (en) | 1998-02-13 | 2003-08-28 | Fujitsu Limited | Broadcast video image recording apparatus |
US20030167257A1 (en) | 2002-01-18 | 2003-09-04 | De Bonet Jeremy S. | Multi-tiered caching mechanism for the storage and retrieval of content multiple versions |
US20030172183A1 (en) | 2002-02-25 | 2003-09-11 | Broadcom Corporation | System, method and computer program product for caching domain name system information on a network gateway |
US20030172075A1 (en) | 2000-08-30 | 2003-09-11 | Richard Reisman | Task/domain segmentation in applying feedback to command control |
US6625643B1 (en) | 1998-11-13 | 2003-09-23 | Akamai Technologies, Inc. | System and method for resource management on a data network |
US6631451B2 (en) | 1999-12-22 | 2003-10-07 | Xerox Corporation | System and method for caching |
US6638314B1 (en) | 1998-06-26 | 2003-10-28 | Microsoft Corporation | Method of web crawling utilizing crawl numbers |
US6647421B1 (en) | 1996-06-03 | 2003-11-11 | Webtv Networks, Inc. | Method and apparatus for dispatching document requests in a proxy |
US20030212779A1 (en) | 2002-04-30 | 2003-11-13 | Boyter Brian A. | System and Method for Network Security Scanning |
US20030217173A1 (en) | 2002-05-15 | 2003-11-20 | Butt Alan B. | Automatic proxy detection |
US6665726B1 (en) | 2000-01-06 | 2003-12-16 | Akamai Technologies, Inc. | Method and system for fault tolerant media streaming over the internet |
US20040032434A1 (en) | 2002-08-13 | 2004-02-19 | Maria Pinsky | Screen controller and method therefor |
US20040039798A1 (en) | 1999-03-03 | 2004-02-26 | Ultradns, Inc. | Domain name resolution system and method |
US6701316B1 (en) | 2000-04-07 | 2004-03-02 | Nec Corporation | Method and apparatus for intelligent network bandwidth and system resource utilization for web content fetch and refresh |
US6701329B1 (en) | 2000-09-14 | 2004-03-02 | Microsoft Corporation | Aging and scavenging of DNS resource records |
US20040049598A1 (en) | 2000-02-24 | 2004-03-11 | Dennis Tucker | Content distribution system |
US20040064577A1 (en) | 2002-07-25 | 2004-04-01 | Dahlin Michael D. | Method and system for background replication of data objects |
US20040073707A1 (en) | 2001-05-23 | 2004-04-15 | Hughes Electronics Corporation | Generating a list of network addresses for pre-loading a network address cache via multicast |
US6725214B2 (en) | 2000-01-14 | 2004-04-20 | Dotnsf | Apparatus and method to support management of uniform resource locators and/or contents of database servers |
US20040078453A1 (en) | 2002-10-17 | 2004-04-22 | International Business Machines Corporation | Method, apparatus, and computer program product to determine the progress of Web page downloads |
US20040078487A1 (en) | 2002-10-17 | 2004-04-22 | International Business Machines Corporation | Network address cache apparatus and method |
US6742033B1 (en) | 2000-06-12 | 2004-05-25 | Gateway, Inc. | System, method and computer program product that pre-caches content to provide timely information to a user |
US6744452B1 (en) | 2000-05-04 | 2004-06-01 | International Business Machines Corporation | Indicator to show that a cached web page is being displayed |
US20040107296A1 (en) | 2002-12-02 | 2004-06-03 | International Business Machines Corporation | System and method for accessing content of a web page |
US6757733B2 (en) | 1998-08-26 | 2004-06-29 | Sun Microsystems, Inc. | Apparatus and method for improving performance of proxy server arrays that use persistent connections |
US20040139282A1 (en) | 2002-11-05 | 2004-07-15 | Shiro Yoshioka | Apparatus and method for memory management |
US6766352B1 (en) | 2000-05-04 | 2004-07-20 | International Business Machines Corporation | Indicator to show that a cached file is being displayed on a client system |
US6766313B1 (en) | 2000-07-12 | 2004-07-20 | Microsoft Corporation | System and method for caching and retrieving information |
US6766422B2 (en) | 2001-09-27 | 2004-07-20 | Siemens Information And Communication Networks, Inc. | Method and system for web caching based on predictive usage |
US6772225B1 (en) | 1999-09-30 | 2004-08-03 | International Business Machines Corporation | Policy enabled web caching |
US6782393B1 (en) | 2000-05-31 | 2004-08-24 | Ricoh Co., Ltd. | Method and system for electronic message composition with relevant documents |
US20040205165A1 (en) | 2003-01-21 | 2004-10-14 | Eplication Networks Ltd. | Method for improving quality of service from an Internet server employing heuristic optimization of downloading |
US20040205149A1 (en) | 2002-09-11 | 2004-10-14 | Hughes Electronics | System and method for pre-fetching content in a proxy architecture |
US20040215665A1 (en) | 2002-01-09 | 2004-10-28 | Edgar David A. | System, method, and computer program product for providing accelerated and secure wireless data transmission over the internet |
US6813690B1 (en) | 2001-06-12 | 2004-11-02 | Network Appliance, Inc. | Caching media data using content-sensitive identifiers |
US20040225644A1 (en) | 2003-05-09 | 2004-11-11 | International Business Machines Corporation | Method and apparatus for search engine World Wide Web crawling |
US20040230747A1 (en) | 2000-07-06 | 2004-11-18 | Ims Steven D. | Object caching and update queuing technique to improve performance and resource utilization |
US20040237044A1 (en) | 2003-02-21 | 2004-11-25 | Motionpoint Corporation | Synchronization of web site content between languages |
US20040239681A1 (en) | 2000-08-07 | 2004-12-02 | Zframe, Inc. | Visual content browsing using rasterized representations |
US20040250119A1 (en) | 2003-04-30 | 2004-12-09 | Art Shelest | Authenticated domain name resolution |
US20040249971A1 (en) | 2003-02-10 | 2004-12-09 | Eric Klinker | Methods and systems for providing dynamic domain name system for inbound route control |
US20040260466A1 (en) | 2003-04-09 | 2004-12-23 | Pioneer Corporation | Navigation apparatus, navigation method, route data creation program, and server in navigation system |
US20040262051A1 (en) | 2003-06-26 | 2004-12-30 | International Business Machines Corporation | Program product, system and method for creating and selecting active regions on physical documents |
US20050015601A1 (en) * | 2003-07-17 | 2005-01-20 | International Business Machines Corporation | Methods, systems, and media to authenticate a user |
WO2005006129A2 (en) | 2003-07-02 | 2005-01-20 | Amazon.Com, Inc. | Server architecture and methods for persistently storing and serving event data |
US6853391B2 (en) | 1997-08-15 | 2005-02-08 | International Business Machines Corporation | Multi-node user interface component and method thereof for use in performing a common operation on linked records |
US20050038787A1 (en) | 2003-08-16 | 2005-02-17 | International Business Machines Corporation | Document authentication |
US6883135B1 (en) | 2000-01-28 | 2005-04-19 | Microsoft Corporation | Proxy server using a statistical model |
US20050138176A1 (en) * | 2003-12-23 | 2005-06-23 | Slipstream Data Inc. | Meta-data based method for local cache utilization |
US20050138604A1 (en) | 2003-12-19 | 2005-06-23 | Peter Harrison | Browser configuration |
US20050165829A1 (en) | 2003-11-04 | 2005-07-28 | Jeffrey Varasano | Systems, Methods and Computer Program Products for Developing Enterprise Software Applications |
US20050198327A1 (en) | 2004-03-02 | 2005-09-08 | Takashige Iwamura | Computer system capable of fast failover upon failure |
US20050198224A1 (en) | 2004-03-02 | 2005-09-08 | Emiko Kobayashi | Storage network system and control method thereof |
US20050198386A1 (en) | 2004-02-19 | 2005-09-08 | International Business Machines Corporation | User defined preferred DNS reference |
US20050204064A1 (en) | 2005-06-23 | 2005-09-15 | The Go Daddy Group, Inc. | Resolving access to content associated with shared domain name using routing dns |
US20050246347A1 (en) | 2000-07-25 | 2005-11-03 | Nec Corporation | Technique for enhancing effectiveness of cache server |
US6973457B1 (en) | 2002-05-10 | 2005-12-06 | Oracle International Corporation | Method and system for scrollable cursors |
US20050278417A1 (en) | 2002-12-21 | 2005-12-15 | International Business Machines Corporation | Client access to web services |
US20050278222A1 (en) | 2004-05-24 | 2005-12-15 | Nortrup Edward H | Systems and methods for performing transactions |
US7003566B2 (en) | 2001-06-29 | 2006-02-21 | International Business Machines Corporation | Method and system for predictive directional data caching |
US20060047804A1 (en) | 2004-06-30 | 2006-03-02 | Fredricksen Eric R | Accelerating user interfaces by predicting user actions |
US20060085601A1 (en) | 2004-10-19 | 2006-04-20 | Woffinden Gary A | Queue or stack based cache entry reclaim method |
US7035921B1 (en) | 2000-11-14 | 2006-04-25 | Hewlett-Packard Development Company, L.P. | Method of and apparatus for providing web service using a network of servers |
US20060089978A1 (en) | 2002-05-31 | 2006-04-27 | Microsoft Corporation | Systems and methods for shared browsing among a plurality of online co-users |
US7051111B1 (en) | 2000-04-25 | 2006-05-23 | Digeo, Inc. | Multiple source proxy management system |
US20060143568A1 (en) | 2004-11-10 | 2006-06-29 | Scott Milener | Method and apparatus for enhanced browsing |
US20060156387A1 (en) | 2005-01-10 | 2006-07-13 | Google Inc. | Methods and systems for opportunistic cookie caching |
US20060168348A1 (en) | 2000-07-13 | 2006-07-27 | Oracle International Corporation | Delta caching |
US20060167862A1 (en) | 2000-05-23 | 2006-07-27 | Richard Reisman | Method and apparatus for utilizing user feedback to improve signifier mapping |
US20060179123A1 (en) | 1997-07-25 | 2006-08-10 | Merrill Lynch & Co. Inc | Techniques for providing faster access to frequently updated information |
US7100123B1 (en) | 2002-01-25 | 2006-08-29 | Microsoft Corporation | Electronic content search and delivery based on cursor location |
US20060218393A1 (en) * | 2005-03-23 | 2006-09-28 | Hernandez Hendrich M | Systems and methods for adaptive authentication |
US20060230265A1 (en) * | 2005-04-08 | 2006-10-12 | Ravi Krishna | Cookie-based acceleration of an authentication protocol |
US7130890B1 (en) | 2002-09-04 | 2006-10-31 | Hewlett-Packard Development Company, L.P. | Method and system for adaptively prefetching objects from a network |
US20060253612A1 (en) | 2005-04-04 | 2006-11-09 | Cheshire Stuart D | Method and apparatus for detecting incorrect responses to network queries |
US20060271599A1 (en) | 2003-08-21 | 2006-11-30 | Akihiro Yamamoto | Data transmission/reception system, data transmission/reception method, and recording/reproduction device |
US20060271642A1 (en) | 2005-05-26 | 2006-11-30 | Nicholas Stavrakos | Method for multipart encoding |
US20060294223A1 (en) | 2005-06-24 | 2006-12-28 | Microsoft Corporation | Pre-fetching and DNS resolution of hyperlinked content |
US20060294311A1 (en) | 2005-06-24 | 2006-12-28 | Yahoo! Inc. | Dynamic bloom filter for caching query results |
US20070022102A1 (en) | 2000-12-06 | 2007-01-25 | Epicrealm Inc. | Method and System for Adaptive Prefetching |
US7185001B1 (en) | 2000-10-04 | 2007-02-27 | Torch Concepts | Systems and methods for document searching and organizing |
US7194761B1 (en) * | 2002-01-22 | 2007-03-20 | Cisco Technology, Inc. | Methods and apparatus providing automatic client authentication |
US7233997B1 (en) * | 1997-06-26 | 2007-06-19 | British Telecommunications Plc | Data communications |
US7249053B2 (en) | 2003-06-16 | 2007-07-24 | Claria Corporation | Presentation of messages to end-users in a computer network |
US20070174774A1 (en) | 2005-04-20 | 2007-07-26 | Videoegg, Inc. | Browser editing with timeline representations |
US20070189708A1 (en) | 2005-04-20 | 2007-08-16 | Videoegg. Inc | Browser based multi-clip video editing |
US20070214052A1 (en) | 2006-03-03 | 2007-09-13 | Kao Chiuan-Liang | Consumer Driven Telecommunication Integrated System for Hospitality Application |
US20070250841A1 (en) | 2001-03-30 | 2007-10-25 | British Telecommunications Public Limited Company | Multi-modal interface |
US20070294480A1 (en) | 2006-06-15 | 2007-12-20 | Martin Moser | Cache With Time-Based Purging and Computation of Purged Items |
US20080010365A1 (en) | 1997-07-25 | 2008-01-10 | Eric Schneider | Methods, products, systems, and devices for processing reusable information |
US7343397B2 (en) | 2002-03-29 | 2008-03-11 | Lucent Technologies Inc. | Method and apparatus for performing predictive caching of DNS requests by correlating IP addresses |
US20080140626A1 (en) | 2004-04-15 | 2008-06-12 | Jeffery Wilson | Method for enabling dynamic websites to be indexed within search engines |
US7398271B1 (en) | 2001-04-16 | 2008-07-08 | Yahoo! Inc. | Using network traffic logs for search enhancement |
US20080195819A1 (en) | 2003-08-06 | 2008-08-14 | Charles E Dumont | System and program product for validating remotely cached dynamic content web pages |
US7415536B2 (en) | 2003-01-21 | 2008-08-19 | Canon Kabushiki Kaisha | Address query response method, program, and apparatus, and address notification method, program, and apparatus |
US20080222363A1 (en) | 2004-06-30 | 2008-09-11 | Prakash Khemani | Systems and methods of maintaining freshness of a cached object based on demand and expiration time |
US7426576B1 (en) | 2002-09-20 | 2008-09-16 | Network Appliance, Inc. | Highly available DNS resolver and method for use of the same |
US20080229017A1 (en) | 2007-03-12 | 2008-09-18 | Robert Plamondon | Systems and Methods of Providing Security and Reliability to Proxy Caches |
US7437725B1 (en) | 1999-01-04 | 2008-10-14 | General Electric Company | Processing techniques for servers handling client/server traffic and communications |
US7437409B2 (en) | 2003-06-13 | 2008-10-14 | Microsoft Corporation | Limiting interaction between parties in a networked session |
US7437364B1 (en) | 2004-06-30 | 2008-10-14 | Google Inc. | System and method of accessing a document efficiently through multi-tier web caching |
US20080263365A1 (en) * | 2002-11-14 | 2008-10-23 | International Business Machines Corporation | Integrating legacy application/data access with single sign-on in a distributed computing environment |
US20090049388A1 (en) | 2005-06-02 | 2009-02-19 | Ronnie Bernard Francis Taib | Multimodal computer navigation |
US7523181B2 (en) | 1999-11-22 | 2009-04-21 | Akamai Technologies, Inc. | Method for determining metrics of a content delivery and global traffic management network |
US7627628B2 (en) | 2000-11-01 | 2009-12-01 | Snapnames.Com, Inc. | Demand based domain name auctionability |
US7676576B1 (en) | 2002-08-01 | 2010-03-09 | Foundry Networks, Inc. | Method and system to clear counters used for statistical tracking for global server load balancing |
US7725602B2 (en) | 2000-07-19 | 2010-05-25 | Akamai Technologies, Inc. | Domain name resolution using a distributed DNS network |
US7761594B1 (en) | 2001-10-15 | 2010-07-20 | Netapp, Inc. | Method and apparatus for forwarding requests in a cache hierarchy based on user-defined forwarding rules |
US7836044B2 (en) | 2004-06-22 | 2010-11-16 | Google Inc. | Anticipated query generation and processing in a search engine |
US20110125871A1 (en) | 2006-02-22 | 2011-05-26 | Mahesh Subramanian | Method and system to pre-fetch data in a network |
US20110264731A1 (en) * | 2005-07-22 | 2011-10-27 | Research In Motion Limited | Method for Training a Server for Content Delivery Based On Communication Of State Information From A Mobile Device Browser |
US8122102B2 (en) * | 2000-04-14 | 2012-02-21 | Akamai Technologies, Inc. | Content delivery network (CDN) content server request handling mechanism |
US8566907B2 (en) * | 2004-11-10 | 2013-10-22 | Mlb Advanced Media, L.P. | Multiple user login detection and response system |
-
2007
- 2007-02-15 US US11/675,598 patent/US8812651B1/en active Active
-
2012
- 2012-10-26 US US13/662,366 patent/US8996653B1/en active Active
Patent Citations (235)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4953106A (en) | 1989-05-23 | 1990-08-28 | At&T Bell Laboratories | Technique for drawing directed graphs |
US6611908B2 (en) | 1991-07-08 | 2003-08-26 | Seiko Epson Corporation | Microprocessor architecture capable of supporting multiple heterogeneous processors |
US5832494A (en) | 1993-06-14 | 1998-11-03 | Libertech, Inc. | Method and apparatus for indexing, searching and displaying data |
US5450535A (en) | 1993-09-24 | 1995-09-12 | At&T Corp. | Graphs employing clusters |
US5559984A (en) | 1993-09-28 | 1996-09-24 | Hitachi, Ltd. | Distributed file system permitting each user to enhance cache hit ratio in file access mode |
US5978791A (en) | 1995-04-11 | 1999-11-02 | Kinetech, Inc. | Data processing system using substantially unique identifiers to identify data items, whereby identical data items have the same identifiers |
US5802292A (en) | 1995-04-28 | 1998-09-01 | Digital Equipment Corporation | Method for predictive prefetching of information over a communications network |
US5748954A (en) | 1995-06-05 | 1998-05-05 | Carnegie Mellon University | Method for searching a queued and ranked constructed catalog of files stored on a network |
US6502125B1 (en) | 1995-06-07 | 2002-12-31 | Akamai Technologies, Inc. | System and method for optimized storage and retrieval of data on a distributed computer network |
US6003030A (en) | 1995-06-07 | 1999-12-14 | Intervu, Inc. | System and method for optimized storage and retrieval of data on a distributed computer network |
US6134551A (en) * | 1995-09-15 | 2000-10-17 | Intel Corporation | Method of caching digital certificate revocation lists |
US6029175A (en) | 1995-10-26 | 2000-02-22 | Teknowledge Corporation | Automatic retrieval of changed files by a network software agent |
US5752241A (en) | 1995-11-14 | 1998-05-12 | Lucent Technologies Inc. | Method and apparatus for estimating transitive closure and reachability |
US6014678A (en) | 1995-12-01 | 2000-01-11 | Matsushita Electric Industrial Co., Ltd. | Apparatus for preparing a hyper-text document of pieces of information having reference relationships with each other |
US5867661A (en) | 1996-02-15 | 1999-02-02 | International Business Machines Corporation | Method and apparatus of using virtual sockets for reducing data transmitted over a wireless communication link between a client web browser and a host web server using a standard TCP protocol |
US5848407A (en) | 1996-05-22 | 1998-12-08 | Matsushita Electric Industrial Co., Ltd. | Hypertext document retrieving apparatus for retrieving hypertext documents relating to each other |
US6647421B1 (en) | 1996-06-03 | 2003-11-11 | Webtv Networks, Inc. | Method and apparatus for dispatching document requests in a proxy |
US5727129A (en) | 1996-06-04 | 1998-03-10 | International Business Machines Corporation | Network system for profiling and actively facilitating user activities |
US6134583A (en) | 1996-07-01 | 2000-10-17 | Sun Microsystems, Inc. | Method, system, apparatus and article of manufacture for providing identity-based caching services to a plurality of computer systems (#16) |
US6584498B2 (en) | 1996-09-13 | 2003-06-24 | Planet Web, Inc. | Dynamic preloading of web pages |
GB2317723A (en) | 1996-09-30 | 1998-04-01 | Viewinn Plc | Caching system for information retrieval |
US20010020248A1 (en) | 1996-10-11 | 2001-09-06 | Gaurav Banga | Method for transferring and displaying data pages on a data network |
US6581090B1 (en) | 1996-10-14 | 2003-06-17 | Mirror Image Internet, Inc. | Internet communication system |
US5978847A (en) | 1996-12-26 | 1999-11-02 | Intel Corporation | Attribute pre-fetch of web pages |
US6285999B1 (en) | 1997-01-10 | 2001-09-04 | The Board Of Trustees Of The Leland Stanford Junior University | Method for node ranking in a linked database |
US6421726B1 (en) | 1997-03-14 | 2002-07-16 | Akamai Technologies, Inc. | System and method for selection and retrieval of diverse types of video data on a computer network |
US6182122B1 (en) | 1997-03-26 | 2001-01-30 | International Business Machines Corporation | Precaching data at an intermediate server based on historical data requests by users of the intermediate server |
US5835905A (en) | 1997-04-09 | 1998-11-10 | Xerox Corporation | System for predicting documents relevant to focus documents by spreading activation through network representations of a linked collection of documents |
US5946697A (en) | 1997-04-22 | 1999-08-31 | Microsoft Corporation | Rapid transfer of HTML files |
US5878223A (en) | 1997-05-07 | 1999-03-02 | International Business Machines Corporation | System and method for predictive caching of information pages |
US6167438A (en) | 1997-05-22 | 2000-12-26 | Trustees Of Boston University | Method and system for distributed caching, prefetching and replication |
US6578113B2 (en) | 1997-06-02 | 2003-06-10 | At&T Corp. | Method for cache validation for proxy caches |
US7233997B1 (en) * | 1997-06-26 | 2007-06-19 | British Telecommunications Plc | Data communications |
US20060179123A1 (en) | 1997-07-25 | 2006-08-10 | Merrill Lynch & Co. Inc | Techniques for providing faster access to frequently updated information |
US20080010365A1 (en) | 1997-07-25 | 2008-01-10 | Eric Schneider | Methods, products, systems, and devices for processing reusable information |
US6442549B1 (en) | 1997-07-25 | 2002-08-27 | Eric Schneider | Method, product, and apparatus for processing reusable information |
US6282542B1 (en) | 1997-08-06 | 2001-08-28 | Tachyon, Inc. | Distributed system and method for prefetching objects |
US6853391B2 (en) | 1997-08-15 | 2005-02-08 | International Business Machines Corporation | Multi-node user interface component and method thereof for use in performing a common operation on linked records |
US6526479B2 (en) | 1997-08-21 | 2003-02-25 | Intel Corporation | Method of caching web resources |
US6085193A (en) | 1997-09-29 | 2000-07-04 | International Business Machines Corporation | Method and system for dynamically prefetching information via a server hierarchy |
US6088707A (en) | 1997-10-06 | 2000-07-11 | International Business Machines Corporation | Computer system and method of displaying update status of linked hypertext documents |
US6128701A (en) | 1997-10-28 | 2000-10-03 | Cache Flow, Inc. | Adaptive and predictive cache refresh policy |
US6016512A (en) | 1997-11-20 | 2000-01-18 | Telcordia Technologies, Inc. | Enhanced domain name service using a most frequently used domain names table and a validity code table |
US6230168B1 (en) | 1997-11-26 | 2001-05-08 | International Business Machines Corp. | Method for automatically constructing contexts in a hypertext collection |
US6195622B1 (en) | 1998-01-15 | 2001-02-27 | Microsoft Corporation | Methods and apparatus for building attribute transition probability models for use in pre-fetching resources |
US6085226A (en) | 1998-01-15 | 2000-07-04 | Microsoft Corporation | Method and apparatus for utility-directed prefetching of web pages into local cache using continual computation and user models |
US6067565A (en) | 1998-01-15 | 2000-05-23 | Microsoft Corporation | Technique for prefetching a web page of potential future interest in lieu of continuing a current information download |
US6023726A (en) | 1998-01-20 | 2000-02-08 | Netscape Communications Corporation | User configurable prefetch control system for enabling client to prefetch documents from a network server |
US6055569A (en) | 1998-01-27 | 2000-04-25 | Go Ahead Software Inc. | Accelerating web access by predicting user action |
US6182133B1 (en) | 1998-02-06 | 2001-01-30 | Microsoft Corporation | Method and apparatus for display of information prefetching and cache status having variable visual indication based on a period of time since prefetching |
US7095949B2 (en) | 1998-02-13 | 2006-08-22 | Fujitsu Limited | Broadcast video image recording apparatus |
US20030161611A1 (en) | 1998-02-13 | 2003-08-28 | Fujitsu Limited | Broadcast video image recording apparatus |
US6272534B1 (en) | 1998-03-04 | 2001-08-07 | Storage Technology Corporation | Method and system for efficiently storing web pages for quick downloading at a remote device |
US6128644A (en) | 1998-03-04 | 2000-10-03 | Fujitsu Limited | Load distribution system for distributing load among plurality of servers on www system |
US6205481B1 (en) | 1998-03-17 | 2001-03-20 | Infolibria, Inc. | Protocol for distributing fresh content among networked cache servers |
US6170013B1 (en) | 1998-03-27 | 2001-01-02 | Nortel Networks Limited | Method and apparatus for controlling access to network information sources |
US6292880B1 (en) | 1998-04-15 | 2001-09-18 | Inktomi Corporation | Alias-free content-indexed object cache |
US6098064A (en) | 1998-05-22 | 2000-08-01 | Xerox Corporation | Prefetching and caching documents according to probability ranked need S list |
US6341311B1 (en) | 1998-05-29 | 2002-01-22 | Microsoft Corporation | Directing data object access requests in a distributed cache |
US6638314B1 (en) | 1998-06-26 | 2003-10-28 | Microsoft Corporation | Method of web crawling utilizing crawl numbers |
US6108703A (en) | 1998-07-14 | 2000-08-22 | Massachusetts Institute Of Technology | Global hosting system |
US20030023813A1 (en) | 1998-07-31 | 2003-01-30 | Cacheflow, Inc., A Delaware Corporation | Multiple cache communication |
US6757733B2 (en) | 1998-08-26 | 2004-06-29 | Sun Microsystems, Inc. | Apparatus and method for improving performance of proxy server arrays that use persistent connections |
US6338066B1 (en) | 1998-09-25 | 2002-01-08 | International Business Machines Corporation | Surfaid predictor: web-based system for predicting surfer behavior |
US6625643B1 (en) | 1998-11-13 | 2003-09-23 | Akamai Technologies, Inc. | System and method for resource management on a data network |
US6178461B1 (en) | 1998-12-08 | 2001-01-23 | Lucent Technologies Inc. | Cache-based compaction technique for internet browsing using similar objects in client cache as reference objects |
US20030084159A1 (en) | 1998-12-22 | 2003-05-01 | At&T Corp. | Pseudo proxy server providing instant overflow capacity to computer networks |
US7437725B1 (en) | 1999-01-04 | 2008-10-14 | General Electric Company | Processing techniques for servers handling client/server traffic and communications |
US20040039798A1 (en) | 1999-03-03 | 2004-02-26 | Ultradns, Inc. | Domain name resolution system and method |
US6516320B1 (en) | 1999-03-08 | 2003-02-04 | Pliant Technologies, Inc. | Tiered hashing for data access |
US6317777B1 (en) | 1999-04-26 | 2001-11-13 | Intel Corporation | Method for web based storage and retrieval of documents |
US20020016786A1 (en) | 1999-05-05 | 2002-02-07 | Pitkow James B. | System and method for searching and recommending objects from a categorically organized information repository |
US6493702B1 (en) | 1999-05-05 | 2002-12-10 | Xerox Corporation | System and method for searching and recommending documents in a collection using share bookmarks |
US6553411B1 (en) | 1999-05-18 | 2003-04-22 | International Business Machines Corporation | System and method for cache acceleration |
US6542964B1 (en) | 1999-06-02 | 2003-04-01 | Blue Coat Systems | Cost-based optimization for content distribution using dynamic protocol selection and query resolution for cache server |
US6463474B1 (en) * | 1999-07-02 | 2002-10-08 | Cisco Technology, Inc. | Local authentication of a client at a network device |
US7506054B1 (en) * | 1999-07-02 | 2009-03-17 | Cisco Technology, Inc. | Local authentication of a client at a network device |
US20030046343A1 (en) | 1999-08-27 | 2003-03-06 | Balachander Krishnamurthy | Method for improving web performance by adapting servers based on client cluster characterization |
US20020198961A1 (en) | 1999-08-27 | 2002-12-26 | Balachander Krishnamurthy | Method for improving web performance by client characterization-driven server adaptation |
US6532520B1 (en) | 1999-09-10 | 2003-03-11 | International Business Machines Corporation | Method and apparatus for allocating data and instructions within a shared cache |
US6772225B1 (en) | 1999-09-30 | 2004-08-03 | International Business Machines Corporation | Policy enabled web caching |
US20020097261A1 (en) | 1999-11-15 | 2002-07-25 | Gottfurcht Elliot A. | Apparatus and method for simple wide-area network navigation |
US7523181B2 (en) | 1999-11-22 | 2009-04-21 | Akamai Technologies, Inc. | Method for determining metrics of a content delivery and global traffic management network |
US6484143B1 (en) | 1999-11-22 | 2002-11-19 | Speedera Networks, Inc. | User device and system for traffic management and content distribution over a world wide area network |
US6405252B1 (en) | 1999-11-22 | 2002-06-11 | Speedera Networks, Inc. | Integrated point of presence server network |
US6631451B2 (en) | 1999-12-22 | 2003-10-07 | Xerox Corporation | System and method for caching |
US6665726B1 (en) | 2000-01-06 | 2003-12-16 | Akamai Technologies, Inc. | Method and system for fault tolerant media streaming over the internet |
US6725214B2 (en) | 2000-01-14 | 2004-04-20 | Dotnsf | Apparatus and method to support management of uniform resource locators and/or contents of database servers |
WO2001055897A1 (en) | 2000-01-27 | 2001-08-02 | Link Plus, Inc. | Method and apparatus for processing web documents |
US6883135B1 (en) | 2000-01-28 | 2005-04-19 | Microsoft Corporation | Proxy server using a statistical model |
US20050165778A1 (en) | 2000-01-28 | 2005-07-28 | Microsoft Corporation | Adaptive Web crawling using a statistical model |
US7328401B2 (en) | 2000-01-28 | 2008-02-05 | Microsoft Corporation | Adaptive web crawling using a statistical model |
US20010033557A1 (en) | 2000-02-08 | 2001-10-25 | Tantivy Communications, Inc | Grade of service and fairness policy for bandwidth reservation system |
US20010050875A1 (en) | 2000-02-21 | 2001-12-13 | Kahn Richard Oliver | Portable information capture devices |
US20040049598A1 (en) | 2000-02-24 | 2004-03-11 | Dennis Tucker | Content distribution system |
US20020004813A1 (en) | 2000-03-08 | 2002-01-10 | Alok Agrawal | Methods and systems for partial page caching of dynamically generated content |
US20020007413A1 (en) | 2000-03-16 | 2002-01-17 | Garcia-Luna-Aceves Jj | System and method for using a mapping between client addresses and addresses of caches to support content delivery |
US20020082811A1 (en) | 2000-03-17 | 2002-06-27 | Honjas William A. | Optimization apparatus, system, and method of use and doing business |
US6701316B1 (en) | 2000-04-07 | 2004-03-02 | Nec Corporation | Method and apparatus for intelligent network bandwidth and system resource utilization for web content fetch and refresh |
US8122102B2 (en) * | 2000-04-14 | 2012-02-21 | Akamai Technologies, Inc. | Content delivery network (CDN) content server request handling mechanism |
US20020023159A1 (en) | 2000-04-17 | 2002-02-21 | Mark Vange | HTTP redirector |
US20020007404A1 (en) | 2000-04-17 | 2002-01-17 | Mark Vange | System and method for network caching |
US20020002618A1 (en) | 2000-04-17 | 2002-01-03 | Mark Vange | System and method for providing last-mile data prioritization |
US7051111B1 (en) | 2000-04-25 | 2006-05-23 | Digeo, Inc. | Multiple source proxy management system |
US20020031102A1 (en) | 2000-05-02 | 2002-03-14 | Globalstar L.P. | On-board DNS service for a satellite ISP system using non-geosynchronous orbit satellites |
US6744452B1 (en) | 2000-05-04 | 2004-06-01 | International Business Machines Corporation | Indicator to show that a cached web page is being displayed |
US6766352B1 (en) | 2000-05-04 | 2004-07-20 | International Business Machines Corporation | Indicator to show that a cached file is being displayed on a client system |
US20090119286A1 (en) | 2000-05-23 | 2009-05-07 | Richard Reisman | Method and Apparatus for Utilizing User Feedback to Improve Signifier Mapping |
US20060167862A1 (en) | 2000-05-23 | 2006-07-27 | Richard Reisman | Method and apparatus for utilizing user feedback to improve signifier mapping |
US7461155B2 (en) | 2000-05-23 | 2008-12-02 | Richard Reisman | Method and apparatus for utilizing the social usage learned from multi-user feedback to improve resource identity signifier mapping |
US6782393B1 (en) | 2000-05-31 | 2004-08-24 | Ricoh Co., Ltd. | Method and system for electronic message composition with relevant documents |
US20020156864A1 (en) | 2000-06-06 | 2002-10-24 | Kniest James Newton | System for wireless exchange of data with hand held devices |
US6742033B1 (en) | 2000-06-12 | 2004-05-25 | Gateway, Inc. | System, method and computer program product that pre-caches content to provide timely information to a user |
US20040230747A1 (en) | 2000-07-06 | 2004-11-18 | Ims Steven D. | Object caching and update queuing technique to improve performance and resource utilization |
US6766313B1 (en) | 2000-07-12 | 2004-07-20 | Microsoft Corporation | System and method for caching and retrieving information |
US20060168348A1 (en) | 2000-07-13 | 2006-07-27 | Oracle International Corporation | Delta caching |
US7725602B2 (en) | 2000-07-19 | 2010-05-25 | Akamai Technologies, Inc. | Domain name resolution using a distributed DNS network |
US20050246347A1 (en) | 2000-07-25 | 2005-11-03 | Nec Corporation | Technique for enhancing effectiveness of cache server |
US20020048269A1 (en) | 2000-08-04 | 2002-04-25 | Hong Jack L. | Intelligent demand driven recognition of URL objects in connection oriented transactions |
US7228350B2 (en) | 2000-08-04 | 2007-06-05 | Avaya Technology Corp. | Intelligent demand driven recognition of URL objects in connection oriented transactions |
US20040239681A1 (en) | 2000-08-07 | 2004-12-02 | Zframe, Inc. | Visual content browsing using rasterized representations |
US20020078371A1 (en) | 2000-08-17 | 2002-06-20 | Sun Microsystems, Inc. | User Access system using proxies for accessing a network |
EP1182589A2 (en) | 2000-08-17 | 2002-02-27 | International Business Machines Corporation | Provision of electronic documents from cached portions |
US20030172075A1 (en) | 2000-08-30 | 2003-09-11 | Richard Reisman | Task/domain segmentation in applying feedback to command control |
US6701329B1 (en) | 2000-09-14 | 2004-03-02 | Microsoft Corporation | Aging and scavenging of DNS resource records |
US7185001B1 (en) | 2000-10-04 | 2007-02-27 | Torch Concepts | Systems and methods for document searching and organizing |
US7627628B2 (en) | 2000-11-01 | 2009-12-01 | Snapnames.Com, Inc. | Demand based domain name auctionability |
US7035921B1 (en) | 2000-11-14 | 2006-04-25 | Hewlett-Packard Development Company, L.P. | Method of and apparatus for providing web service using a network of servers |
US20070022102A1 (en) | 2000-12-06 | 2007-01-25 | Epicrealm Inc. | Method and System for Adaptive Prefetching |
US20020078087A1 (en) | 2000-12-18 | 2002-06-20 | Stone Alan E. | Content indicator for accelerated detection of a changed web page |
US20020107935A1 (en) | 2001-01-12 | 2002-08-08 | Epicrealm Inc. | Method and system for community data caching |
US20020152361A1 (en) | 2001-02-05 | 2002-10-17 | International Business Machines Corporation | Directed least recently used cache replacement method |
US20020161860A1 (en) | 2001-02-28 | 2002-10-31 | Benjamin Godlin | Method and system for differential distributed data file storage, management and access |
US20030005152A1 (en) | 2001-03-09 | 2003-01-02 | Arif Diwan | Content-request redirection method and system |
US20020143984A1 (en) | 2001-03-19 | 2002-10-03 | The Aerospace Corporation | Cooperative adaptive web caching routing and forwarding web content data broadcasting method |
US20070250841A1 (en) | 2001-03-30 | 2007-10-25 | British Telecommunications Public Limited Company | Multi-modal interface |
US20020143892A1 (en) | 2001-04-03 | 2002-10-03 | Mogul Jeffrey C. | Reduction of network retrieval latency using cache and digest |
US7398271B1 (en) | 2001-04-16 | 2008-07-08 | Yahoo! Inc. | Using network traffic logs for search enhancement |
US20020156980A1 (en) | 2001-04-19 | 2002-10-24 | International Business Machines Corporation | Designing a cache with adaptive reconfiguration |
US6745295B2 (en) | 2001-04-19 | 2004-06-01 | International Business Machines Corporation | Designing a cache with adaptive reconfiguration |
US6912591B2 (en) | 2001-05-02 | 2005-06-28 | Science Application International Corporation | System and method for patch enabled data transmissions |
US20020188665A1 (en) | 2001-05-02 | 2002-12-12 | Lash Thomas D. | System and method for patch enabled data transmissions |
US20020178238A1 (en) | 2001-05-23 | 2002-11-28 | Thomas Fletcher | Caching address information in a communications system |
US20040073707A1 (en) | 2001-05-23 | 2004-04-15 | Hughes Electronics Corporation | Generating a list of network addresses for pre-loading a network address cache via multicast |
US20020184340A1 (en) | 2001-05-31 | 2002-12-05 | Alok Srivastava | XML aware logical caching system |
US20030079041A1 (en) | 2001-06-04 | 2003-04-24 | Nct Group, Inc. | System and method for increasing the effective bandwidth of a communications network |
WO2002100117A2 (en) | 2001-06-04 | 2002-12-12 | Nct Group, Inc. | A system and method for reducing the time to deliver information from a communications network to a user |
US6813690B1 (en) | 2001-06-12 | 2004-11-02 | Network Appliance, Inc. | Caching media data using content-sensitive identifiers |
US20020191610A1 (en) | 2001-06-18 | 2002-12-19 | Wonin Baek | Message transmission method and system capable of transmitting differential data |
US20020198883A1 (en) | 2001-06-26 | 2002-12-26 | Itaru Nishizawa | Web system having clustered application servers and clustered databases |
US7003566B2 (en) | 2001-06-29 | 2006-02-21 | International Business Machines Corporation | Method and system for predictive directional data caching |
US6766422B2 (en) | 2001-09-27 | 2004-07-20 | Siemens Information And Communication Networks, Inc. | Method and system for web caching based on predictive usage |
US20030065743A1 (en) | 2001-09-28 | 2003-04-03 | Jenny Patrick Duncan | Method and system for distributing requests for content |
US7761594B1 (en) | 2001-10-15 | 2010-07-20 | Netapp, Inc. | Method and apparatus for forwarding requests in a cache hierarchy based on user-defined forwarding rules |
US20030079027A1 (en) | 2001-10-18 | 2003-04-24 | Michael Slocombe | Content request routing and load balancing for content distribution networks |
US20030086098A1 (en) | 2001-11-05 | 2003-05-08 | Robert Sesek | Printer-based pre-ripping and caching of network documents |
US20030101234A1 (en) | 2001-11-28 | 2003-05-29 | International Business Machines Corporation | System and method for indicating whether a document is cached |
US20040215665A1 (en) | 2002-01-09 | 2004-10-28 | Edgar David A. | System, method, and computer program product for providing accelerated and secure wireless data transmission over the internet |
US7130872B2 (en) | 2002-01-18 | 2006-10-31 | Mobitv, Inc. | Multi-tiered caching mechanism for the storage and retrieval of content multiple versions |
US20030167257A1 (en) | 2002-01-18 | 2003-09-04 | De Bonet Jeremy S. | Multi-tiered caching mechanism for the storage and retrieval of content multiple versions |
US7194761B1 (en) * | 2002-01-22 | 2007-03-20 | Cisco Technology, Inc. | Methods and apparatus providing automatic client authentication |
US7100123B1 (en) | 2002-01-25 | 2006-08-29 | Microsoft Corporation | Electronic content search and delivery based on cursor location |
US20100257236A1 (en) | 2002-02-15 | 2010-10-07 | Agnoli Giovanni M | System, method, and computer program product for media publishing request processing |
US7155475B2 (en) | 2002-02-15 | 2006-12-26 | Sony Corporation | System, method, and computer program product for media publishing request processing |
US20030158913A1 (en) | 2002-02-15 | 2003-08-21 | Agnoli Giovanni M. | System, method, and computer program product for media publishing request processing |
US20030172183A1 (en) | 2002-02-25 | 2003-09-11 | Broadcom Corporation | System, method and computer program product for caching domain name system information on a network gateway |
US7343397B2 (en) | 2002-03-29 | 2008-03-11 | Lucent Technologies Inc. | Method and apparatus for performing predictive caching of DNS requests by correlating IP addresses |
US20030212779A1 (en) | 2002-04-30 | 2003-11-13 | Boyter Brian A. | System and Method for Network Security Scanning |
US6973457B1 (en) | 2002-05-10 | 2005-12-06 | Oracle International Corporation | Method and system for scrollable cursors |
US20030217173A1 (en) | 2002-05-15 | 2003-11-20 | Butt Alan B. | Automatic proxy detection |
US20060089978A1 (en) | 2002-05-31 | 2006-04-27 | Microsoft Corporation | Systems and methods for shared browsing among a plurality of online co-users |
US20040064577A1 (en) | 2002-07-25 | 2004-04-01 | Dahlin Michael D. | Method and system for background replication of data objects |
US7676576B1 (en) | 2002-08-01 | 2010-03-09 | Foundry Networks, Inc. | Method and system to clear counters used for statistical tracking for global server load balancing |
US20040032434A1 (en) | 2002-08-13 | 2004-02-19 | Maria Pinsky | Screen controller and method therefor |
US7130890B1 (en) | 2002-09-04 | 2006-10-31 | Hewlett-Packard Development Company, L.P. | Method and system for adaptively prefetching objects from a network |
US20040205149A1 (en) | 2002-09-11 | 2004-10-14 | Hughes Electronics | System and method for pre-fetching content in a proxy architecture |
US7426576B1 (en) | 2002-09-20 | 2008-09-16 | Network Appliance, Inc. | Highly available DNS resolver and method for use of the same |
US20040078487A1 (en) | 2002-10-17 | 2004-04-22 | International Business Machines Corporation | Network address cache apparatus and method |
US20040078453A1 (en) | 2002-10-17 | 2004-04-22 | International Business Machines Corporation | Method, apparatus, and computer program product to determine the progress of Web page downloads |
US20040139282A1 (en) | 2002-11-05 | 2004-07-15 | Shiro Yoshioka | Apparatus and method for memory management |
US20080263365A1 (en) * | 2002-11-14 | 2008-10-23 | International Business Machines Corporation | Integrating legacy application/data access with single sign-on in a distributed computing environment |
US20040107296A1 (en) | 2002-12-02 | 2004-06-03 | International Business Machines Corporation | System and method for accessing content of a web page |
US20050278417A1 (en) | 2002-12-21 | 2005-12-15 | International Business Machines Corporation | Client access to web services |
US7415536B2 (en) | 2003-01-21 | 2008-08-19 | Canon Kabushiki Kaisha | Address query response method, program, and apparatus, and address notification method, program, and apparatus |
US20040205165A1 (en) | 2003-01-21 | 2004-10-14 | Eplication Networks Ltd. | Method for improving quality of service from an Internet server employing heuristic optimization of downloading |
US20040249971A1 (en) | 2003-02-10 | 2004-12-09 | Eric Klinker | Methods and systems for providing dynamic domain name system for inbound route control |
US20040237044A1 (en) | 2003-02-21 | 2004-11-25 | Motionpoint Corporation | Synchronization of web site content between languages |
US20040260466A1 (en) | 2003-04-09 | 2004-12-23 | Pioneer Corporation | Navigation apparatus, navigation method, route data creation program, and server in navigation system |
US20040250119A1 (en) | 2003-04-30 | 2004-12-09 | Art Shelest | Authenticated domain name resolution |
US20040225644A1 (en) | 2003-05-09 | 2004-11-11 | International Business Machines Corporation | Method and apparatus for search engine World Wide Web crawling |
US7437409B2 (en) | 2003-06-13 | 2008-10-14 | Microsoft Corporation | Limiting interaction between parties in a networked session |
US7249053B2 (en) | 2003-06-16 | 2007-07-24 | Claria Corporation | Presentation of messages to end-users in a computer network |
US20040262051A1 (en) | 2003-06-26 | 2004-12-30 | International Business Machines Corporation | Program product, system and method for creating and selecting active regions on physical documents |
US20090276407A1 (en) | 2003-07-02 | 2009-11-05 | Van Vleet Taylor N | Server architecture and methods for storing and serving event data |
US7565425B2 (en) | 2003-07-02 | 2009-07-21 | Amazon Technologies, Inc. | Server architecture and methods for persistently storing and serving event data |
WO2005006129A2 (en) | 2003-07-02 | 2005-01-20 | Amazon.Com, Inc. | Server architecture and methods for persistently storing and serving event data |
US20050033803A1 (en) * | 2003-07-02 | 2005-02-10 | Vleet Taylor N. Van | Server architecture and methods for persistently storing and serving event data |
US20050015601A1 (en) * | 2003-07-17 | 2005-01-20 | International Business Machines Corporation | Methods, systems, and media to authenticate a user |
US20080195819A1 (en) | 2003-08-06 | 2008-08-14 | Charles E Dumont | System and program product for validating remotely cached dynamic content web pages |
US20050038787A1 (en) | 2003-08-16 | 2005-02-17 | International Business Machines Corporation | Document authentication |
US20060271599A1 (en) | 2003-08-21 | 2006-11-30 | Akihiro Yamamoto | Data transmission/reception system, data transmission/reception method, and recording/reproduction device |
US20050165829A1 (en) | 2003-11-04 | 2005-07-28 | Jeffrey Varasano | Systems, Methods and Computer Program Products for Developing Enterprise Software Applications |
US20050138604A1 (en) | 2003-12-19 | 2005-06-23 | Peter Harrison | Browser configuration |
US20050138176A1 (en) * | 2003-12-23 | 2005-06-23 | Slipstream Data Inc. | Meta-data based method for local cache utilization |
US8010670B2 (en) | 2003-12-23 | 2011-08-30 | Slipstream Data Inc. | Meta-data based method for local cache utilization |
US20050198386A1 (en) | 2004-02-19 | 2005-09-08 | International Business Machines Corporation | User defined preferred DNS reference |
US20050198327A1 (en) | 2004-03-02 | 2005-09-08 | Takashige Iwamura | Computer system capable of fast failover upon failure |
US20050198224A1 (en) | 2004-03-02 | 2005-09-08 | Emiko Kobayashi | Storage network system and control method thereof |
US20080140626A1 (en) | 2004-04-15 | 2008-06-12 | Jeffery Wilson | Method for enabling dynamic websites to be indexed within search engines |
US20050278222A1 (en) | 2004-05-24 | 2005-12-15 | Nortrup Edward H | Systems and methods for performing transactions |
US7836044B2 (en) | 2004-06-22 | 2010-11-16 | Google Inc. | Anticipated query generation and processing in a search engine |
US20060047804A1 (en) | 2004-06-30 | 2006-03-02 | Fredricksen Eric R | Accelerating user interfaces by predicting user actions |
US7437364B1 (en) | 2004-06-30 | 2008-10-14 | Google Inc. | System and method of accessing a document efficiently through multi-tier web caching |
US20080222363A1 (en) | 2004-06-30 | 2008-09-11 | Prakash Khemani | Systems and methods of maintaining freshness of a cached object based on demand and expiration time |
US20060085601A1 (en) | 2004-10-19 | 2006-04-20 | Woffinden Gary A | Queue or stack based cache entry reclaim method |
US8566907B2 (en) * | 2004-11-10 | 2013-10-22 | Mlb Advanced Media, L.P. | Multiple user login detection and response system |
US20060143568A1 (en) | 2004-11-10 | 2006-06-29 | Scott Milener | Method and apparatus for enhanced browsing |
US20060156387A1 (en) | 2005-01-10 | 2006-07-13 | Google Inc. | Methods and systems for opportunistic cookie caching |
US20060218393A1 (en) * | 2005-03-23 | 2006-09-28 | Hernandez Hendrich M | Systems and methods for adaptive authentication |
US20060253612A1 (en) | 2005-04-04 | 2006-11-09 | Cheshire Stuart D | Method and apparatus for detecting incorrect responses to network queries |
US20060230265A1 (en) * | 2005-04-08 | 2006-10-12 | Ravi Krishna | Cookie-based acceleration of an authentication protocol |
US20070174774A1 (en) | 2005-04-20 | 2007-07-26 | Videoegg, Inc. | Browser editing with timeline representations |
US20070189708A1 (en) | 2005-04-20 | 2007-08-16 | Videoegg. Inc | Browser based multi-clip video editing |
US20060271642A1 (en) | 2005-05-26 | 2006-11-30 | Nicholas Stavrakos | Method for multipart encoding |
US20090049388A1 (en) | 2005-06-02 | 2009-02-19 | Ronnie Bernard Francis Taib | Multimodal computer navigation |
US20050204064A1 (en) | 2005-06-23 | 2005-09-15 | The Go Daddy Group, Inc. | Resolving access to content associated with shared domain name using routing dns |
US20060294223A1 (en) | 2005-06-24 | 2006-12-28 | Microsoft Corporation | Pre-fetching and DNS resolution of hyperlinked content |
US7548908B2 (en) * | 2005-06-24 | 2009-06-16 | Yahoo! Inc. | Dynamic bloom filter for caching query results |
US20060294311A1 (en) | 2005-06-24 | 2006-12-28 | Yahoo! Inc. | Dynamic bloom filter for caching query results |
US20110264731A1 (en) * | 2005-07-22 | 2011-10-27 | Research In Motion Limited | Method for Training a Server for Content Delivery Based On Communication Of State Information From A Mobile Device Browser |
US20110125871A1 (en) | 2006-02-22 | 2011-05-26 | Mahesh Subramanian | Method and system to pre-fetch data in a network |
US20120185565A1 (en) | 2006-02-22 | 2012-07-19 | Ebay Inc. | Method and system to pre-fetch data in a network |
US20070214052A1 (en) | 2006-03-03 | 2007-09-13 | Kao Chiuan-Liang | Consumer Driven Telecommunication Integrated System for Hospitality Application |
US20070294480A1 (en) | 2006-06-15 | 2007-12-20 | Martin Moser | Cache With Time-Based Purging and Computation of Purged Items |
US20080229017A1 (en) | 2007-03-12 | 2008-09-18 | Robert Plamondon | Systems and Methods of Providing Security and Reliability to Proxy Caches |
Non-Patent Citations (52)
Title |
---|
Arocena, Applications of a Web Query Language, Aug. 12, 1997, 15 pgs. |
Bestavros, Server-initiated Document Dissemination for the WWW, Sep. 3-11, 1996, 8 pgs. |
Bongo, Optimistic Deltas for WWW Latency Reduction, 1997, 15 pgs. |
Botafogo, Structural Analysis of Hypertext: Identifying Hierarchies and Useful Metrics, Apr. 1992, 39 pgs. |
Boyle, To link or not to link: An empirical comparison of hypertext linking strategies, 1992, 11 pgs. |
Bruck, Weighted Bloom Filter, Information Theory, Jul. 9-14, 2006, 5 pgs. |
Cao, A Study of Integrated Prefetching and Caching Strategies, Jun. 1995, 10 pgs. |
Carriere, WebQuery: Searching and Visualizing the Web through Connectivity, 1997, 12 pgs. |
Chan, Cache-based Compaction: A New Technique for Optimizing Web Transfer, 1999, 9 pgs. |
Chandranmenon, Reducing Web Latency Using Reference Point Caching, Proc. INFOCOM 2001, IEEE, 2001, pp. 1607-1616. |
Cohen, Proactive Caching of DNS Records: Addressing a Performance Bottleneck, Saint, Jan. 2001, 10 pgs. |
Croswell, Effective Site Finding using Link Anchor Information, Sep. 9-12, 2001, 8 pgs. |
Curewitz, Practical Prefetching via Data Compression, 1993, 10 pgs. |
Doreian, A Measure of Standing for Citation Networks within a Wider Environment, 1994, 11 pgs. |
Doreian, Measuring the Relative Standing of Disciplinary Journals, 1998, 12 pgs. |
Douglis, Dynamic Suppression of Similarity in the Web: a Case for Deployable Detection Mechanisms, Jul. 11, 2002, 8 pgs. |
Fan, Web Prefetching Between Low-Bandwidth Clients and Proxies: Potential and Performance, May 1999, 13 pgs. |
Frisse, Searching for Information in a Hypertext Medical Handbook, Jul. 1998, 7 pgs. |
Garfield, Citation Analysis as a Tool in Journal Evaluation, 1962-1973, 18 pgs. |
Geller, On the Citation Influence Methodology of Pinski and Narin, 1978, 3 pgs. |
Gong, Bloom Filter-based XML Packets Filtering for Millions of Path Queries, 2005, 12 pgs. |
Google Inc., ISR, PCT/US2005/022067, Oct. 1, 2006, 7 pgs. |
Google Inc., ISR/WO, PCT/US2008/054167, Jul. 2, 2008, 8 pgs. |
Google Inc., ISRWO, PCT/US2008/088047, Feb. 23, 2009, 8 pgs. |
Griffioen, Reducing File System Latency Using a Predictive Approach, Jun. 1994, 12 pgs. |
Gwertzman, The Case for Geographical Push-Caching, 1995, 5 pgs. |
Henzinger, Measuring Index Quality Using Random Walks on the Web, May 1999, 35 pgs. |
Hubbell, An Input-Output Approach to Clique Identification Sociometry, 1965, 23 pgs. |
Jung, DNS Performance and the Effectiveness of Caching, Proc. UMW 2001, ACM, 2001, 14 pgs. |
Katz, A New Status Index Derived from Sociometric Analysis, Mar. 1953, 5 pgs. |
Kimbrel, Integrated Parallel Prefetching and Caching, 1996, 2 pgs. |
Kleinberg, Authoritative Sources in a Hyperlinked Environment, Sep. 1999, 29 pgs. |
Kroeger, Digital's Web Proxy Traces, Dec. 1996, 5 pgs. |
Luotonen, World-Wide Web Proxies, Apr. 1994, 8 pgs. |
Marchiori, The Quest for Correct Information on the Web: Hyper Search Engines, 1997, 18 pgs. |
Markatos, A Top-10 Approach to Prefetching on the Web, Aug. 1996, 15 pgs. |
McBryan, Genvl and WWWW: Tools for Taming the Web, May 1994, 10 pgs. |
Mizruchi, Techniques for Disaggregating Centrality Scores in Social Networks, 1996, 23 pgs. |
Mogul, Delta Encoding in HTTP, Jan. 2002, 49 pgs. |
Mogul, Potential Benefits of Delta Encoding and Data Compression for HTTP, 1997, 14 pgs. |
Padmanabhan, Using Predictive Prefetching to Improve World Wide Web Latency, Jul. 1996, 15 pgs. |
Palmer, Fido: A Cache That Learns to Fetch, Sep. 1991, 10 pgs. |
Patterson, Informed Prefetching and Caching, May 11, 1995, 24 pgs. |
Pinski, Citation Influence for Journal Aggregates of Scientific Publications: Theory with Application to the Literature of Physics, 1976, 16 pgs. |
Ramer, Similarity, Probability and Database Organization: Extended Abstract, 1996, 6 pgs. |
Rhea, Value-based Web Caching, May. 2003, 10 pgs. |
Sakaguchi, A Browsing Tool for Multi-lingual Documents for Users without Multi-lingual Fonts, 1996, 7 pgs. |
Schilit, TeleWeb: Loosely Connected Access to the World Wide Web, May 6-10, 1996, 16 pgs. |
Tait, Detection and Exploitation of File Working Sets, May 1991, 19 pgs. |
Vitter, Optimal Prefetching via Data Compression, Nov. 13, 1995, 20 pgs. |
Wang, Prefetching in World Wide Web, 1996, 5 pgs. |
Williams, Removal Policies in Network Caches for World-Wide Web Documents, Aug. 1996, 14 pgs. |
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20140280691A1 (en) * | 2013-03-12 | 2014-09-18 | Sap Ag | Updating dynamic content in cached resources |
US9426200B2 (en) * | 2013-03-12 | 2016-08-23 | Sap Se | Updating dynamic content in cached resources |
Also Published As
Publication number | Publication date |
---|---|
US8812651B1 (en) | 2014-08-19 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8996653B1 (en) | Systems and methods for client authentication | |
US11451472B2 (en) | Request routing based on class | |
US8065275B2 (en) | Systems and methods for cache optimization | |
US11194719B2 (en) | Cache optimization | |
US8639742B2 (en) | Refreshing cached documents and storing differential document content | |
US8275790B2 (en) | System and method of accessing a document efficiently through multi-tier web caching | |
US7587398B1 (en) | System and method of accessing a document efficiently through multi-tier web caching | |
US7565423B1 (en) | System and method of accessing a document efficiently through multi-tier web caching | |
US7747749B1 (en) | Systems and methods of efficiently preloading documents to client devices | |
US6370620B1 (en) | Web object caching and apparatus for performing the same | |
US20050240574A1 (en) | Pre-fetching resources based on a resource lookup query | |
US20140019577A1 (en) | Intelligent edge caching | |
JP2008293281A (en) | Cache device, server, cache system, cache method, and program | |
JP2005267435A (en) | Cache processing program and cache processor |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044695/0115Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |