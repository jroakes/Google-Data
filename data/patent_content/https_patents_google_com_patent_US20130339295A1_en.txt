US20130339295A1 - Organizing Data in a Distributed Storage System - Google Patents
Organizing Data in a Distributed Storage System Download PDFInfo
- Publication number
- US20130339295A1 US20130339295A1 US13/898,411 US201313898411A US2013339295A1 US 20130339295 A1 US20130339295 A1 US 20130339295A1 US 201313898411 A US201313898411 A US 201313898411A US 2013339295 A1 US2013339295 A1 US 2013339295A1
- Authority
- US
- United States
- Prior art keywords
- splits
- account
- data
- storage system
- group
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
- 230000010076 replication Effects 0.000 claims abstract description 50
- 230000004044 response Effects 0.000 claims abstract description 18
- 238000000034 method Methods 0.000 claims description 23
- 230000003362 replicative effect Effects 0.000 claims description 5
- 238000004891 communication Methods 0.000 description 23
- 238000010586 diagram Methods 0.000 description 15
- 238000012545 processing Methods 0.000 description 6
- 239000007787 solid Substances 0.000 description 6
- 230000001419 dependent effect Effects 0.000 description 4
- 238000012986 modification Methods 0.000 description 4
- 230000004048 modification Effects 0.000 description 4
- 230000008859 change Effects 0.000 description 3
- 230000003287 optical effect Effects 0.000 description 3
- 230000009467 reduction Effects 0.000 description 3
- 238000013508 migration Methods 0.000 description 2
- 230000005012 migration Effects 0.000 description 2
- 238000012790 confirmation Methods 0.000 description 1
- 230000008878 coupling Effects 0.000 description 1
- 238000010168 coupling process Methods 0.000 description 1
- 238000005859 coupling reaction Methods 0.000 description 1
- 238000005516 engineering process Methods 0.000 description 1
- 239000000835 fiber Substances 0.000 description 1
- 238000013507 mapping Methods 0.000 description 1
- 201000002266 mite infestation Diseases 0.000 description 1
- 238000012544 monitoring process Methods 0.000 description 1
- 238000005192 partition Methods 0.000 description 1
- 230000002085 persistent effect Effects 0.000 description 1
- 230000008569 process Effects 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000001960 triggered effect Effects 0.000 description 1
- 238000012795 verification Methods 0.000 description 1
Images
Classifications
-
- G06F17/30575—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/27—Replication, distribution or synchronisation of data between databases or within a distributed database system; Distributed database system architectures therefor
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/06—Digital input from, or digital output to, record carriers, e.g. RAID, emulated record carriers or networked record carriers
- G06F3/0601—Interfaces specially adapted for storage systems
- G06F3/0602—Interfaces specially adapted for storage systems specifically adapted to achieve a particular effect
- G06F3/061—Improving I/O performance
- G06F3/0611—Improving I/O performance in relation to response time
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/06—Digital input from, or digital output to, record carriers, e.g. RAID, emulated record carriers or networked record carriers
- G06F3/0601—Interfaces specially adapted for storage systems
- G06F3/0602—Interfaces specially adapted for storage systems specifically adapted to achieve a particular effect
- G06F3/0614—Improving the reliability of storage systems
- G06F3/0617—Improving the reliability of storage systems in relation to availability
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/06—Digital input from, or digital output to, record carriers, e.g. RAID, emulated record carriers or networked record carriers
- G06F3/0601—Interfaces specially adapted for storage systems
- G06F3/0628—Interfaces specially adapted for storage systems making use of a particular technique
- G06F3/0646—Horizontal data movement in storage systems, i.e. moving data in between storage devices or systems
- G06F3/065—Replication mechanisms
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/06—Digital input from, or digital output to, record carriers, e.g. RAID, emulated record carriers or networked record carriers
- G06F3/0601—Interfaces specially adapted for storage systems
- G06F3/0668—Interfaces specially adapted for storage systems adopting a particular infrastructure
- G06F3/067—Distributed or networked storage systems, e.g. storage area networks [SAN], network attached storage [NAS]
Definitions
- the disclosed implementations relate generally to the management of a distributed storage system, and in particular, to system and method for organizing a large volume of data in a distributed storage system.
- a method for adding data to a distributed storage system that includes a plurality of computer servers, each computer server including one or more processors and memory, is provided.
- the data within the distributed storage system is associated with a plurality of accounts and divided into a plurality of groups, each group including a plurality of splits and each split being associated with a respective account.
- the method includes: identifying a first split associated with an account, wherein the first split is a member of a first group of splits and the first split has a data range parameter indicating that more data can be added to the first split and a split size indicating an actual amount of data in the first split; in response to determining that the split size of the first split reaches a predefined limit: updating the data range parameter in the first split so that no data can be added to the first split; creating a second split for the account, wherein the second split includes a data range parameter indicating that more data can be added to the second split; adding the second split to a second group of splits; and replicating the second group of splits within the distributed storage system in accordance with a data replication policy associated with the account.
- a distributed storage system includes a plurality of zones, each zone including a plurality of computer servers and each computer server including one or more processors and memory, a plurality of network links that connects two respective zones, wherein data within the distributed storage system is associated with a plurality of accounts and divided into a plurality of groups, each group including a plurality of splits and each split being associated with a respective account, and a plurality of program, modules, wherein the plurality of program modules are stored in the memory of a respective computer server and to be executed by the one or more processors of the respective computer server.
- the plurality of program modules include instructions for: identifying a first split associated with an account, wherein the first, split is a member of a first group of splits and the first split has a data range parameter indicating that more data can be added to the first split and a split size indicating an actual amount of data in the first split; in response to determining that the split size of the first split reaches a predefined limit: updating the data range parameter in the first split so that no data can be added to the first split; creating a second split for the account, wherein the second split includes a data range parameter indicating that more data can be added to the second split; adding the second split to a second group of splits; and replicating the second group of splits within the distributed storage system in accordance with a data replication policy associated with the account.
- a non-transitory computer readable storage medium stores one or more program modules configured for execution by a computer server that includes one or more processors and memory and is part of a distributed storage system, wherein the distributed storage system is configured for dividing data associated with a plurality of accounts into a plurality of groups, each group including a plurality of splits and each split being associated with a respective account.
- the one or more programs include instructions for: identifying a first split associated with an account, wherein the first split is a member of a first group of splits and the first split has a data range parameter indicating that more data can be added to the first split and a split size indicating an actual amount of data in the first split; in response to determining that the split size of the first split reaches a predefined limit: updating the data range parameter in the first split so that no data can be added to the first split; creating a second split for the account, wherein the second split includes a data range parameter indicating that more data can be added to the second split; adding the second split to a second group of splits; and replicating the second group of splits within the distributed storage system in accordance with a data replication policy associated with the account.
- a method for replicating data within a distributed storage system that includes a plurality of computer servers, each computer server including one or more processors and memory, is provided.
- the data within the distributed storage system is associated with a plurality of accounts and divided into a plurality of groups, each group including a plurality of splits and each split being associated with a respective account.
- the method includes: dividing data associated with a first account and data associated with a second account into a first set of splits and a second set of splits, respectively, wherein the first account and the second account have different data replication policies; adding each of the first set of splits and the second set of splits to a respective group of splits, wherein there is no group including a member of the first set of splits and a member of the second set of splits; creating a predefined number of replicas for each group of splits that includes a member of the first set of splits and allocating the replicas within the distributed storage system in accordance with a data replication policy associated with the first account; and creating a predefined number of replicas for each group of splits that includes a member of the second set of splits and allocating the replicas within the distributed storage system in accordance with a data replication policy associated with the second account.
- a distributed storage system includes a plurality of zones, each zone including a plurality of computer servers and each computer server including one or more processors and memory, a plurality of network links that connects two respective zones, wherein data within the distributed storage system is associated with a plurality of accounts and divided into a plurality of groups, each group including a plurality of splits and each split being associated with a respective account, and a plurality of program modules, wherein the plurality of program modules are stored in the memory of a respective computer server and to be executed by the one or more processors of the respective computer server.
- the plurality of program modules include instructions for: dividing data associated with a first account and data associated with a second account into a first set of splits and a second set of splits, respectively, wherein the first account and the second account have different data replication policies; adding each of the first set of splits and the second set of splits to a respective group of splits, wherein there is no group including a member of the first set of splits and a member of the second set of splits; creating a predefined number of replicas for each group of splits that includes a member of the first set of splits and allocating the replicas within the distributed storage system in accordance with a data replication policy associated with the first account; and creating a predefined number of replicas for each group of splits that includes a member of the second set of splits and allocating the replicas within the distributed storage system in accordance with a data replication policy associated with the second account.
- a non-transitory computer readable storage medium stores one or more program modules configured for execution by a computer server that includes one or more processors and memory and is part of a distributed storage system, wherein the distributed storage system is configured for dividing data associated with a plurality of accounts into a plurality of groups, each group including a plurality of splits and each split being associated with a respective account.
- the one or more programs include instructions for: dividing data associated with a first account and data associated with a second account into a first set of splits and a second set of splits, respectively, wherein the first account and the second account have different data replication policies; adding each of the first set of splits and the second set of splits to a respective group of splits, wherein there is no group including a member of the first set of splits and a member of the second set of splits; creating a predefined number of replicas for each group of splits that includes a member of the first set of splits and allocating the replicas within the distributed storage system in accordance with a data replication policy associated with the first account; and creating a predefined number of replicas for each group of splits that includes a member of the second set of splits and allocating the replicas within the distributed storage system in accordance with a data replication policy associated with the second account.
- a method for locating data within a distributed storage system that includes a plurality of computer servers, each computer server including one or more processors and memory, is provided.
- the data within the distributed storage system is associated with a plurality of accounts and divided into a plurality of groups, each group including a plurality of splits, each split being associated with a respective account, and each group having multiple tablets and each tablet managed by a respective tablet server of the distributed storage system.
- the method includes: receiving a data access request from a client, wherein the data access request includes a logical identifier of data associated with an account; identifying one or more split identifiers associated with the logical identifier in accordance with the data access request, wherein each split identifier identifies a split associated with the account; for each of the identified one or more split identifiers: identifying a group identifier, wherein the group identifier corresponds to a group of splits; selecting one of the multiple tablets associated with the identified group based on information about the tablet servers managing the multiple tablets; communicating with the tablet server that manages the selected tablet for the split corresponding to the split identifier; and receiving the split from the tablet server; and forwarding the splits from the respective tablet servers to the requesting client.
- a distributed storage system includes a plurality of zones, each zone including a plurality of computer servers and each computer server including one or more processors and memory, a plurality of network links that connects two respective zones, wherein data within the distributed storage system is associated with a plurality of accounts and divided into a plurality of groups, each group including a plurality of splits, each split being associated with a respective account, and each group having multiple tablets and each tablet managed by a respective tablet server of the distributed storage system, and a plurality of program modules, wherein the plurality of program modules are stored in the memory of a respective computer server and to be executed by the one or more processors of the respective computer server.
- the plurality of program modules include instructions for: receiving a data access request from a client, wherein the data access request includes a logical identifier of data associated with an account; identifying one or more split identifiers associated with the logical identifier in accordance with the data access request, wherein each split identifier identifies a split associated with the account; for each of the identified one or more split identifiers: identifying a group identifier, wherein the group identifier corresponds to a group of splits; selecting one of the multiple tablets associated with the identified group based on information about the tablet servers managing the multiple tablets; communicating with the tablet server that manages the selected tablet for the split corresponding to the split identifier; and receiving the split from the tablet server; and forwarding the splits from the respective tablet servers to the requesting client.
- a non-transitory computer readable storage medium stores one or more program modules configured for execution by a computer server that includes one or more processors and memory and is part of a distributed storage system, wherein the distributed storage system is configured for dividing data associated with a plurality of accounts into a plurality of groups, each group including a plurality of splits, each split being associated with a respective account, and each group having multiple tablets and each tablet managed by a respective tablet server of the distributed storage system.
- the one or more programs include instructions for: receiving a data access request from a client, wherein the data access request includes a logical identifier of data associated with an account; identifying one or more split identifiers associated with the logical identifier in accordance with the data access request, wherein each split identifier identifies a split associated with the account; for each of the identified one or more split identifiers: identifying a group identifier, wherein the group identifier corresponds to a group of splits; selecting one of the multiple tablets associated with the identified group based on information about the tablet servers managing the multiple tablets; communicating with the tablet server that manages the selected tablet for the split corresponding to the split identifier; and receiving the split from the tablet server; and forwarding the splits from the respective tablet servers to the requesting client.
- FIGS. 1A through 1G are block diagrams, each illustrating certain aspects of a distributed storage system in accordance with some embodiments.
- FIGS. 2A and 2B are block diagram and flow chart illustrating how data associated with different accounts is replicated within the distributed storage system in accordance with some embodiments.
- FIGS. 3A and 3B are block diagram and flow chart illustrating how data associated with an account is added within the distributed storage system in accordance with some embodiments.
- FIGS. 4A and 4B are block diagram and flow chart illustrating how data is located within the distributed storage system in response to a data access request from a client in accordance with some embodiments.
- FIG. 5 is a block diagram illustrating the components of the client in accordance with some embodiments.
- FIG. 6 is a block diagram illustrating the components of a front-end server of the distributed storage system in accordance with some embodiments.
- FIG. 7 is a block diagram illustrating the components of a zone of the distributed storage system in accordance with some embodiments.
- FIGS. 1A through 1G are block diagrams, each illustrating certain aspects of a distributed storage system in accordance with some embodiments.
- FIG. 1A depicts a distributed storage system 100 according to some implementations of the present application.
- the distributed storage system 100 includes a plurality of zones 102 - 1 , 102 - 2 , . . . 102 -N at various locations across the world, connected by network communication links 104 - 1 , 104 - 2 , . . . 104 -M.
- a zone (such as the zone 1 102 - 1 ) corresponds to one or more data centers that are geographically close to each other.
- the North American region may correspond to one zone that includes two data centers, one located near the Pacific Coast and the other one located near the Atlantic Coast.
- FIG. 1A shows a limited number of network communication links 104 - 1 , etc., typical embodiments would have many more network communication links.
- the network communication links are composed of fiber optic cable.
- some of the network communication links use wireless technology, such as microwaves.
- each network communication link has a specified bandwidth and/or a specified cost for the use of that bandwidth.
- each zone maintains the statistic information about the transfer of data across one or more of the network communication links within the distributed storage system 100 , including throughput rate, times of availability, reliability of the links, etc.
- FIG. 1B depicts the components of the distributed storage system 100 according to some implementations of the present application.
- the distributed storage system 100 includes a universe master 106 , one or more front-end servers ( 101 - 1 , . . . , 101 -M), a placement driver 108 , and a plurality of zones ( 102 - 1 , 102 - 2 , . . . , 102 -N).
- the universe master 106 and the placement driver 108 are responsible for monitoring the performance of the system 100 and controlling the data replication/migration between two zones.
- a zone ( 102 - 1 , 102 - 2 , . . .
- , 102 -N typically includes a data store ( 141 - 1 , 141 - 2 , . . . , 141 -N) hosting a plurality of tablets ( 143 - 1 , 143 - 2 , . . . , 143 -N), and utilizes a cluster of computer servers, including a zone master ( 131 - 1 , 131 - 2 , . . . , 131 -N), one or more location proxies ( 135 - 1 , 135 - 2 , . . . , 135 -N), one or more tablet servers ( 133 - 1 , 133 - 2 , . . .
- the data store ( 141 - 1 , 141 - 2 , . . . , 141 -N) provides the underlying persistent storage space for data managed by a corresponding zone ( 102 - 1 , 102 - 2 , . . . , 102 -N).
- data within the data store ( 141 - 1 , 141 - 2 , . . . , 141 -N) are organized into many tablets, which is a basic data unit handled within a particular zone.
- the zone master ( 131 - 1 , 131 - 2 , . . .
- 131 -N is responsible for assigning each tablet in the data store ( 141 - 1 , 141 - 2 , . . . , 141 -N) to one of the tablet servers ( 133 - 1 , 133 - 2 , . . . , 133 -N) for handling read/write requests directed at the tablet based, at least in part, on the CPU and memory usage at the tablet servers. For example, when the zone master determines that one tablet server is overloaded, it may orchestrate the migration of some tablets from this overloaded tablet server to other tablet servers in the same zone or maybe even another zone.
- a location proxy provides a location-lookup service to another entity (e.g., a front-end server or a tablet server) such that, for a given tablet, the location proxy identifies a respective tablet server that has been chosen for handling the read and write requests directed at the tablet.
- entity e.g., a front-end server or a tablet server
- FIG. 1C illustrates in more detail how different components within a zone coordinate with each other to perform various tablet-related tasks according to some implementations of the present application.
- the zone 102 includes a zone master 131 , a plurality of tablet servers ( 133 - 1 , 133 - 3 ), a plurality of location proxy servers ( 135 - 1 , 135 - 3 ), and a data store 141 that includes multiple tablets ( 141 -A, 141 -B, . . . , 141 -Z).
- the zone master 131 has a zone ID 131 - 1 that uniquely identifies the zone 102 among a plurality of zones in a distributed storage system as shown in Figure IB. As will be described below in connection with FIG.
- the zone ID is used by a front-end server 101 for determining which zone includes the client-requested data.
- the location proxy servers ( 135 - 1 , 135 - 3 ) provide a location-lookup service to other entities.
- a location proxy server uses a lookup table to support the location-lookup service.
- FIG. 1C depicts an exemplary lookup table, each row of the table including a tablet ID 137 - 1 and a tablet server ID 137 - 3 .
- the location proxy server returns a tablet server ID to the requesting entity, which identifies a tablet server that is chosen by the zone master 131 for managing the corresponding tablet associated with the tablet ID.
- a tablet server 133 - 3 is identified by a tablet server ID 134 - 1 and further includes tablet metadata 134 - 3 associated with the tablets managed by the tablet server 133 - 3 .
- the tablet metadata 134 - 3 includes the tablet IDs of the tablets managed by the tablet server 133 - 3 .
- the tablet metadata 134 - 3 also includes information about the splits associated with the tablet. A more detailed description of the relationship between a split and a tablet is provided below in connection with FIG. 1D .
- the zone master 131 monitors the performance of the tablet servers ( 133 - 1 , 133 - 3 ) by periodically (e.g., after every 10 seconds) communicating with the tablet servers ( 133 - 1 , 133 - 3 ).
- a tablet server reports to the zone master 131 its current status information, including its CPU and memory usage, etc., as well as other information used for determining the association between a set of tablets and the tablet server. Based on such information, the zone master 131 determines whether or not to assign a tablet in the data store 141 to a corresponding tablet server.
- the zone master 131 may identify some tablets associated with one tablet server 133 - 3 , which is deemed to be overloaded, and assign the identified tablets to another tablet server 133 - 1 .
- the zone master 131 publishes the updated tablet-to-tablet server map through the location proxy servers ( 135 - 1 , 135 - 3 ),
- another entity e.g., a front-end server or a tablet server
- the entity can query one of the location proxy servers by providing a tablet ID and receiving a corresponding tablet server ID associated with the tablet ID.
- the entity can communicate with the identified tablet server for any read/write access requests directed at the tablet.
- FIG. 1D illustrates how different components within the distributed storage system 100 interact with each other to satisfy data access requests from different clients according to some implementations of the present application.
- the clients 10 - 1 , 10 - 2
- a network 20 e.g., Internet
- the term “client” may refer to a client computer (e.g., a desktop/laptop computer or a mobile device such as a tablet computer or a smartphone) from which an end user initiates a request for accessing a piece of data managed by the distributed storage system 100 .
- the term “client” may refer to a computer server that provides on-line services (e.g., email or advertising) to multiple users and uses the distributed storage system 100 for hosting data associated with the on-line services.
- the distributed storage system 100 is responsible for identifying and returning the client-requested data to the requesting clients upon receipt of such requests from the clients.
- the clients it is assumed that one of the clients is an on-line advertising service provider and the distributed storage system 100 hosts data associated with different customers of the on-line advertising service provider.
- front-end server 101 When the client wants to access data associated with a customer, it submits a data access request to a front-end server 101 .
- different front-end servers (shown in FIG. 1C ) are responsible for providing data-related services to different clients.
- some of the front-end servers are configured for handling data access requests from clients for access email service data and some other front-end servers are configured for handling data access requests from clients for access advertising service data.
- data associated with an online service application is further partitioned into multiple portions and each front-end server is configured for handling a subset of the data access requests for one or more portions of the data.
- the front-end servers of the distributed storage system are located at different geographical locations to provide services to nearby clients that submit data access requests associated with different online services.
- a client submits a data access request by invoking an application programming interface (API) accepted by the front-end server 101 .
- the data access request includes identification information of the one or more customers.
- the data associated with a customer corresponds to a row in a data table and the row of customer data is further divided into multiple columns.
- the data access request may include a row identifier and possibly one or more column identifiers if the client is interested in accessing data in the one or more columns associated with each customer.
- the front-end server 101 needs to determine where the client-requested data is located in the distributed storage system 100 such as information about the zone and tablet(s) that have the client-requested data.
- FIG. 1D different components in the distributed storage system 100 are organized into two domains based on their respective roles: (i) the logical domain including the front-end servers ( 101 - 1 , 101 - 3 ) and (ii) the physical domain including the zones ( 102 - 1 , 102 - 3 ).
- the front-end servers handle data access requests from the external clients and use data structures such as the directory map 103 - 1 and the group map 103 - 3 to free the clients from understanding how data is physically stored in the distributed storage system 100 .
- each customer of the on-line advertising service is associated with one directory in the directory map 103 - 1 .
- the front-end server 101 - 1 Based on the logical directory identifier provided by a client, the front-end server 101 - 1 identifies a particular entry in the director map 103 - 1 , which corresponds to the particular customer.
- each directory e.g., directory 105 - 1
- each directory includes one or more splits ( 107 - 1 and 107 - 3 ).
- the number of splits associated with a directory is determined by the size of data associated with a corresponding customer. The more data the customer has, the more splits the data may be divided into. When the size of data within a split reaches a predefined threshold, no more data is added to the split and a new split is generated for hosting new data associated with the account.
- the size of data for an account is set to a predetermined limit.
- the predetermined limit may be determined by the distributed storage system 100 (e.g., a global limit of the size of data that is applied to all accounts), the application for which the data for the account is associated (e.g., a web mail application may impose a limit of the size of data for its accounts that are different than an advertisement application), and/or may be increased if an end user purchases more storage space for an account.
- the client i.e., the on-line advertising service provider
- the client specifies the requested data in a request using a format defined by the client-associated online service provider and the front-end server 101 - 1 translates the client request into a set of split IDs that identify the splits including the client-requested data.
- a group in the group map 103 - 2 is defined to associate a split in the directory map 103 - 1 with a plurality of tablets in a particular zone.
- the split 107 - 1 is a data structure associating the split ID 108 - 1 with a group ID 108 - 7 , which corresponds to an entry 109 - 1 in the group map 103 - 3 .
- the split 107 - 1 also includes a split size 108 - 3 indicating the actual amount of data currently within this split range indicator 108 - 5 .
- the data range indicator is used for indicating whether the split has space for more data or not.
- a new split e.g., split 107 - 3
- the split 107 - 3 is associated with the group 109 - 3 , not the group 109 - 1 . Note that different splits associated with an account may belong to the same group of splits or different groups of splits.
- Each group includes a plurality (e.g., hundreds or even thousands) of splits associated with different accounts and has a predefined group limit.
- the exact association between a split and a group is dynamically determined based, in part, on the remaining capacity of a particular group.
- the front-end server tries to add different splits associated with the same account to the same group because these splits are likely to be accessed by a client at the same time and it is probably more convenient for them to be within the same group and therefore the same set of tablets, which are replicas of the group.
- the front-end server may identify another group (e.g., group 109 - 3 ) for the split 107 - 3 .
- the data replication policy is defined for each account, the group 109 - 3 is chosen for the split 107 - 3 because it has the same number of tablets as the group 109 - 1 . In other words, splits associated with different accounts that have different data replication policies should be added to different groups with different numbers of tablets.
- a predefined number of instances of the group are generated in the distributed storage system 100 , each instance of the group being referred to as a tablet.
- the group 109 - 1 has a group ID 111 - 1 (which is the same as the group ID 108 - 7 in the split 107 - 1 ), a group size 111 - 3 , and a list of tablet IDs (e.g., tablet IDs 113 - 1 , 113 - 3 ) of the group.
- splits associated with different directories both belong to the group 109 - 1 , suggesting that the two accounts corresponding to the two directories have the same data replication policy.
- the front-end server 101 - 1 first identifies one or more split IDs in the directory map 103 - 1 , which are associated with a customer identified by the client request, and then identifies a group and an associated list of tablet IDs for each split ID.
- FIG. 1D depict an embodiment in which different splits (as identified by the split IDs 107 - 1 and 107 - 3 ) associated with one customer are assigned to different groups (the group 109 - 1 and the group 109 - 3 ). This situation happens when the size of a group reaches a predefined group limit such that it is less efficient to keep all the data associated with one customer (e.g., multiple splits) in one group and therefore one tablet,
- the process of accessing the client-requested data is shifted from the logical domain to the physical domain, i.e., a zone that includes the tablets associated with the identified tablet IDs.
- a tablet ID ( 113 - 1 or 113 - 3 ) includes a respective zone ID embedded therein. Therefore, after identifying the tablet IDs, the front-end server 101 - 1 also knows which zone has the client-requested data.
- each zone includes one or more location proxy servers that provide the location-look up service for identifying a particular tablet server for each tablet.
- the front-end server 101 - 1 submits a query to a respective location proxy server at a particular zone identified by the zone ID, the query including one or more tablet IDs ( 113 - 1 , 113 - 3 ).
- the location proxy server then returns one or more tablet server IDs, each tablet server ID identifying a respective tablet server (e.g., the tablet server 125 - 1 or the tablet server 125 - 3 ) that has been chosen by the zone master for managing the data access requests to the particular tablet.
- the front-end sever 101 - 1 Upon receipt of the one or more tablet server IDs, the front-end sever 101 - 1 submits a request to a corresponding tablet server, the request including identification of one or more splits (e.g., splits 123 - 1 and 123 - 3 ) within the tablet (e.g., the tablet 121 - 1 ).
- each tablet server identifies a corresponding tablet in the data store and performs the operations to the identified tablet accordingly.
- FIG. 1E illustrates how the customer data of an on-line advertising service is divided into multiple splits according to some embodiments of the present application.
- the data table 108 illustrates how the customer data is stored in a table-like data structure. As shown in the figure, each row 108 - 1 in the data table 108 represents the data associated with a particular customer whose customer ID is a primary key of the data row.
- the data row 108 - 1 includes multiple columns. Some columns such as the “Customer” column and the “Age” column each have one attribute value whereas some other columns include an embedded data structure (e.g., the embedded table 108 - 2 ).
- the data row 108 - 1 is divided into multiple splits ( 123 -A, 123 -B, 123 -C) to accommodate the continuing addition of new data to the row, each split including a subset of the data row.
- the partition of data columns into different splits is based on the relationships between different columns. For example, columns that are often accessed together are put into one split for efficiency.
- An embedded table within a particular column may be divided into multiple sections with each section belonging to one split as shown in FIG. 1E .
- each split has a split ID for uniquely identifying the split.
- the split ID is content-addressable.
- the split ID may include information about the customer ID associated with the data row 108 - 1 , the metadata associated with the split (e.g., the name of the columns in the split), and the customer data stored within the split.
- the front-end server determines: (i) which split (and therefore a corresponding tablet) has the client-requested data based on the information in the client request and (ii) which split (and therefore a corresponding tablet) does not have the client-requested data and can be ignored for the particular client request.
- the front-end server only needs to communicate with a tablet server that is responsible for managing the tablet.
- the split ID includes a range of string-like keys that correspond to a range of data associated with a customer.
- a tablet 121 - 1 may include splits corresponding to multiple groups of splits ( 109 - 1 , 109 - 3 ).
- the total number of tablets can be reduced, which makes it easier to manage the transactions directed to different groups that are associated with the same tablet. For example, the reduction of tablets will consume less messages/resources for maintaining the relationship between different tablets. There are fewer entities in the distributed storage system 100 to deal with.
- the reduction of tablets makes it more likely that a child director) is placed in the same group as its parent directory.
- a front-end server can direct a call to the child directory to the location of the parent directory, which reduces the size of the required location cache at the front-end server and allows clients to start up faster since they will have to load fewer locations.
- the location of the parent directory does not correspond to the location of location of the child directory.
- the client may first send a verification message to the tablet server that manages the tablet including the parent directory and determine if the child directory is co-located in the same tablet. Only after receiving a positive confirmation, will the client send its payload to the tablet server. All these performance benefits can significantly reduce the cost of introducing a new directory to the distributed storage system and make it more likely that clients will map their structures to directories naturally instead of trying to form larger directories.
- a tablet server 125 - 1 further includes tablet metadata 127 - 1 associated with tablets ( 121 - 1 , 121 - 3 ) managed by the tablet server.
- the tablet metadata 127 - 1 includes a directory-to-group map 127 - 3 and group state information 127 - 5 .
- the directory-to-group map 127 - 3 locates a particular group within a tablet for a particular directory in the directory map.
- the group state information 127 - 5 includes the state information for a particular group replica, such as the log data, view information, the list of group replicas, etc. Given a directory associated with a tablet, the tablet server can scan the directory-to-group map for an entry that has the same directory name.
- the tablet server can access the corresponding group state information using a group ID within this entry.
- the tablet server supports the removal of a range of directories from a tablet by eliminating data associated with each directory within the range from the tablet when removing a directory replica from the tablet.
- one group in the distributed storage system may be split into two or more groups for several reasons. For example, a tablet containing the group is overloaded or too large. In this case, splitting the group may help reduce the load of the tablet if, e.g., this group contributes to a significant fraction of the load or size of the tablet.
- access patterns for some directories within a group are very different from access patterns for the rest of the group. For example, a group may be split into two if most directories in the group are accessed from US, but a particular set of directories in the group are mostly accessed from Europe.
- the directory set 151 is associated with the group 155 , which is a member of the tablet 157 . It is assumed that the directory set 153 , which is a subset of the directory set 151 before the movement, will be moved to another group. To do so, a new group is created within each of the same set of tablets that include the group 155 by making a replica of the group 155 . After the creation, the new group can be changed via the normal replica addition or removal. In this example, the group split is implemented as a single-site transaction on the group 155 and the transaction update is applied at every replica of the group 155 . As shown in FIG.
- a new group 155 - 3 is created within the tablet 157 and the old group 155 is updated to the group 155 - 1 to reflect the group split such that each directory in the new directory set 153 - 1 (which corresponds to the old directory set 153 ) is associated with the new group 155 - 3 .
- the metadata associated with the new group 155 - 3 is populated such that it inherits at least a portion of the metadata associated with the group 155 - 1 , indicating that the relationship between the two groups 155 - 1 and 155 - 3 .
- the metadata associated with the group 155 - 1 e.g., the list of tablet IDs
- splitting a group does not actually move any user data associated with the group. This makes the split fast because the transaction cost is independent of the sizes of the directories being moved.
- the tablet 157 includes two groups 155 - 1 and 155 - 3 , each group corresponding to a respective set of directories. In some embodiments, one group within a tablet is moved to another tablet within the same zone by having the two tablets sharing some data with each other.
- the target tablet reads directly from the source tablet (e.g., the tablet 157 ) without going through a tablet server that is responsible for managing the tablet 157 .
- the movement of groups between two tablets does not add additional load to the tablet server.
- the mapping between a directory (e.g., a member in the directory set 153 - 1 ) and a source tablet (e.g., the tablet 157 ) is updated to redirect to a target tablet (e.g., the tablet 157 - 1 ).
- FIGS. 2A and 2B are block diagram and flow chart illustrating how data associated with different accounts is replicated within the distributed storage system in accordance with some embodiments.
- a distributed storage system is provided ( 251 ) for managing the data 201 associated with a plurality of accounts, including dividing the data into a plurality of groups, each group including a plurality of splits and each split being associated with a respective account.
- the data associated with a first account e.g., the account 201 - 1 in FIG. 2A
- a first set of splits e.g., the splits 203 - 1 and 203 - 3 in FIG.
- the data associated with a second account (e.g., the account 201 - 3 in FIG. 2A ) is divided ( 253 ) into a second set of splits (e.g., the split 203 - 5 in FIG. 2A ).
- the distributed storage system adds ( 255 ) each of the first set of splits to a group of splits (e.g., the group 205 - 1 in FIG. 2A ) and adds each of the second set of splits to a group of splits (e.g., the group 205 - 3 in FIG. 2A ).
- the first account and second account have different data replication policies.
- the first account may require that the distributed storage system create three replicas for its data and allocate the three replicas in a zone corresponding to North America and the second account may require that the distributed storage system create two replicas for its data and allocate the two replicas in a zone corresponding to Europe. Since the two accounts have different policies, a member of the first set of splits cannot be added to the group 205 - 3 that includes a member of the second set of splits. Similarly, a member of the second set of splits cannot be added to the group 205 - 1 that includes a member of the first set of splits. In other words, there is no group in the distributed storage system that includes both a member of the first set of splits and a member of the second set of splits.
- the distribute storage system offers both flexibility and scalability to different types of online service applications that use the distributed storage system for storing their data. For example, an account that needs frequent access to its data from one or more geographical locations may specify such need in its data replication policy so that the distributed storage system may create more replicas for the data associated with the account at a zone close to the data accessing locations and reduce the latency required for a client to access such data.
- the distributed storage system creates ( 257 in FIG. 2B ) a predefined number (e.g., three) of replicas for each group of splits (e.g., the group 205 - 1 ) that includes a member of the first set of splits and allocates the three replicas in a zone (e.g., the zone 207 - 1 ) in accordance with the data replication policy associated with the first account.
- the zone 207 - 1 includes three tablets ( 209 - 1 , 209 - 3 , 209 - 5 ), each being one replica of the group 205 - 1 , and each tablet includes a copy of the first set of splits associated with the first account 201 - 1 .
- each tablet in a zone is assigned to a tablet server for managing data access requests directed to the tablet.
- the three tablets are managed by two tablet servers 211 - 1 and 211 - 3 .
- tablets associated with the same group of splits may be managed by the same tablet server or different tablet servers depending on the load balance of the respective tablet servers in a zone.
- the distributed storage system creates ( 259 in FIG.
- the zone 207 - 3 includes two tablets ( 209 - 7 , 209 - 9 ), each being a replica of the group 205 - 3 , and each tablet includes a copy of the second set of splits associated with the second account 201 - 3 and is managed by a respective tablet server ( 211 - 5 or 211 - 7 ).
- the data replication policy of a group of splits is driven by the data replication policies of the different splits in the group, which are driven by the data replication policies of the accounts associated with the different splits.
- the distributed storage system is responsible for putting those splits having the same or similar data replication policies into the same group to improve the system's efficiency.
- the enforcement of the account-level (or directory-level) data replication policy is determined by the distributed storage system based on the availability of resources at different zones. In other words, it is possible that the distributed storage system may not always store splits associated with a particular account strictly in accordance with the account's data replication policy.
- the splits may be initially stored in a zone different from a zone defined by the account's data replication policy and then moved to the zone.
- the distributed storage system allows an account to specify its desired placement of the splits associated with, the account in the directory map and will try to satisfy such requirement whenever it is possible.
- an account may change its data replication policy from time to time. For example, an email account user may temporarily move from North America to Europe. When the email application detects such movement, it. may notify the distributed storage system to move tablets associated with the email account from a data center in North America to a data center in Europe to provide a better service to the end user.
- FIGS. 3A and 3B are block diagram and flow chart illustrating how data associated with an account is added within the distributed storage system in accordance with some embodiments.
- the division of an account's data into one or more splits eliminates the data limit for a particular account managed by the distributed storage system because the distributed storage system can add new splits to an account when its existing split runs out of space.
- a distributed storage system is provided ( 351 ) for managing the data 301 associated with a plurality of accounts, including dividing the data into a plurality of groups, each group including a plurality of splits and each split being associated with a respective account.
- the data associated with an account e.g., the account 301 - 1 in FIG.
- the distributed storage system identities ( 353 ) a first split (e.g., the split 303 in FIG. 3A ) associated with the account.
- the first split is the split 303 that includes multiple parameters including the data range parameter 303 - 1 and the split size parameter 303 - 3 .
- the value ⁇ inf> of the data range parameter 303 - 1 indicates that the split 303 still has space for more data to be added to the split and the split size parameter 303 - 3 represents the actual amount of data in the split 303 .
- each account has only one split whose data range parameter has a value of ⁇ inf>.
- the distributed storage system determines ( 355 ) whether the split associated with the account reaches its limit according to a predefined schedule (e.g., periodically). If not ( 355 —no), the distributed storage system stops checking this account and proceeds to check another account. Otherwise ( 355 —yes), the distributed storage system will take further actions by creating a new split for the account.
- the distributed storage system updates ( 357 ) the data range parameter in the split 303 from ⁇ inf> to “ABC.”
- ABSC is an expression that corresponds to the actual upper limit of the data within the split 303 .
- the distributed storage system can tell what data is within each split.
- the distributed storage system can use the data range parameter to determine which split or splits have the client-requested data. By doing so, the distributed storage system also marks the first split as not accepting any new data.
- the distributed storage system then creates ( 359 ) a second split (e.g., the split 305 in FIG.
- the second split 305 includes a data range parameter 305 - 1 that has a value of ⁇ inf> indicating that more data can be added to the second split and a split size parameter 305 - 3 that grows as more and more data is added to the second split 305 .
- the distributed storage system selects a second group of splits (e.g., the group 307 in FIG. 3A ) for the second split 305 and adds ( 361 ) the second split to a second group of splits.
- the second group 307 may be the same group that includes the split 303 or a different one.
- the distributed storage system replicates ( 363 ) the second group of splits in a particular zone (e.g., the zone 309 in FIG. 3A ) in accordance with a data replication policy associated with the account.
- the second group 307 has two tablets ( 311 - 1 , 311 - 3 ) in the zone 309 , which are managed by two respective tablet servers 313 - 1 and 313 - 3 .
- the creation of a new split for an account may be triggered by the movement of data within the distributed storage system, e.g., in response to a change of the data replication policy. In either case, the creation of new splits for the account ensures that the client can add more data to this account without disrupting the service associated with the account.
- FIGS. 4A and 4B are block diagram and flow chart illustrating how data is located within the distributed storage system in response to a data access request from a client in accordance with some embodiments.
- a distributed storage system is provided ( 451 ) for managing data associated with a plurality of accounts, which is divided into a plurality of groups, each group including a plurality of splits, each split being associated with a respective account, and each group having multiple tablets and each tablet managed by a respective tablet server of the distributed storage system.
- a front-end server ( 403 in FIG. 4A ) of the distributed storage system receives ( 453 ) a data access request from a client ( 401 in FIG. 4A ).
- the data access request includes a logical identifier (e.g., a directory identifier) of data associated with an account associated with the client.
- the front-end server 403 in FIG. 4A identities ( 455 ) one or more split identifiers associated with the logical identifier in accordance with the data access request. As shown in FIG. 4A , the front-end server 403 identified two splits within the directory map 405 , they are the split 407 - 1 and the split 407 - 3 . Each split's metadata includes a split ID ( 409 - 1 , 409 - 5 ) that identifies a split associated with the account.
- the front-end server 403 identifies ( 457 - 1 ) a group identifier (e.g., the group IDs 409 - 3 and 409 - 7 in FIG. 4A ), each group identifier corresponds to a group of splits.
- the group ID 409 - 3 corresponds to the group 411 of splits that includes a split 411 - 1 corresponding to the split 407 - 1 in the director map 405
- the group ID 409 - 7 corresponds to the group 413 of splits that includes a split 413 - 1 corresponding to the split 407 - 3 in the directory map 405 .
- the distributed storage system selects ( 457 - 3 ) one of the multiple tablets associated with each identified group based on information about the tablet servers managing the multiple tablets.
- the zone 415 includes two tablets associated with each of the two identified groups 411 and 413 .
- the tablet 417 is identified for the group 411 and the tablet 417 includes a split 417 - 1 that corresponds to the split 407 - 1 in the directory map 405 .
- the tablet 421 is identified for the group 413 and the tablet 421 includes a split 421 - 1 that corresponds to the split 407 - 3 in the directory map 405 .
- For each selected tablet there is a corresponding tablet, server in the zone 415 that is responsible for managing data access requests to the tablet.
- the tablet server 419 is responsible for managing the tablet 417 and the tablet server 423 is responsible for managing the tablet 421 .
- the front-end server 403 communicates ( 457 - 5 ) with the tablet server that manages the selected tablet for the split corresponding to the split identifier for the split associated with the client request and receives ( 457 - 7 ) the split from the tablet server.
- the front-end server forwards ( 459 ) the splits from the respective tablet servers to the requesting client in satisfying the client's data access request.
- the client access request may be a read-only request or a read-and-write request. Since each group of splits includes multiple tablets, any data update to one split within the group should be replicated within each tablet associated with the group.
- FIG. 5 is a block diagram illustrating the components of the client in accordance with some embodiments.
- the client 10 is a computer server that includes one or more processing units (CPU's) 502 for executing modules, programs and/or instructions stored in the memory 514 and thereby performing processing operations; one or more network or other communications interfaces 504 ; memory 514 ; and one or more communication buses 512 for interconnecting these components.
- the client 10 includes a user interface 406 comprising a display device 508 and one or more input devices 510 (e.g., keyboard or mouse or remote control).
- the memory 514 includes high-speed random access memory, such as DRAM, SRAM, DDR RAM or other random access solid state memory devices.
- memory 514 includes non-volatile memory, such as one or more magnetic disk storage devices, optical disk storage devices, flash memory devices, or other non-volatile solid state storage devices. In some implementations, memory 514 includes one or more storage devices remotely located from the CPU(s) 502 . Memory 514 , or alternately the non-volatile memory device(s) within memory 514 , comprises a non-transitory computer readable storage medium. In some implementations, memory 514 or the non-transitory computer readable storage medium of memory 514 stores the following elements, or a subset of these elements, and may also include additional elements:
- FIG. 6 is a block diagram illustrating the components of a front-end server of the distributed storage system in accordance with some embodiments.
- the front-end server 101 includes one or more processing units (CPU's) 602 for executing modules, programs and/or instructions stored in the memory 614 and thereby performing processing operations; one or more network or other communications interfaces 604 ; memory 614 ; and one or more communication buses 612 for interconnecting these components.
- the front-end server 101 includes an optional user interface 606 comprising a display device 608 and one or more input devices 610 (e.g., keyboard or mouse or remote control).
- the memory 614 includes high-speed random access memory, such as DRAM, SRAM, DDR RAM or other random access solid state memory devices.
- memory 614 includes non-volatile memory, such as one or more magnetic disk storage devices, optical disk storage devices, flash memory devices, or other non-volatile solid state storage devices. In some implementations, memory 614 includes one or more storage devices remotely located from the CPU(s) 602 . Memory 614 , or alternately the non-volatile memory device(s) within memory 614 , comprises a non-transitory computer readable storage medium. In some implementations, memory 614 or the non-transitory computer readable storage medium of memory 614 stores the following elements, or a subset of these elements, and may also include additional elements:
- FIG. 7 is a block diagram illustrating the components of a zone of the distributed storage system in accordance with some embodiments.
- the zone servers 102 include one or more processing units (CPU's) 702 for executing modules, programs and/or instructions stored in the memory 714 and thereby performing processing operations; one or more network or other communications interfaces 704 ; memory 714 ; and one or more communication buses 712 for interconnecting these components.
- the zone servers 102 includes an optional user interface 706 comprising a display device 708 and one or more input devices 710 (e.g., keyboard or mouse or remote control).
- the memory 714 includes high-speed random access memory, such as DRAM, SRAM, DDR RAM or other random access solid state memory devices.
- memory 714 includes non-volatile memory, such as one or more magnetic disk storage devices, optical disk storage devices, flash memory devices, or other non-volatile solid state storage devices. In some implementations, memory 714 includes one or more storage devices remotely located from the CPU(s) 702 . Memory 714 , or alternately the non-volatile memory device(s) within memory 714 , comprises a non-transitory computer readable storage medium. In some implementations, memory 714 or the non-transitory computer readable storage medium of memory 714 stores the following elements, or a subset of these elements, and may also include additional elements:
- first, second, etc. may be used herein to describe various elements, these elements should not be limited by these terms. These terms are only used to distinguish one element from another.
- first ranking criteria could be termed second ranking criteria, and, similarly, second ranking criteria could be termed first ranking criteria, without departing from the scope of the present invention.
- First ranking criteria and second ranking criteria are both ranking criteria, but they are not the same ranking criteria.
- the term “if” may be construed to mean “when” or “upon” or “in response to determining” or “in accordance with a determination” or “in response to detecting,” that a stated condition precedent is true, depending on the context.
- the phrase “if it is determined [that a stated condition precedent is true]” or “if [a stated condition precedent is true]” or “when [a stated condition precedent is true]” may be construed to mean “upon determining” or “in response to determining” or “in accordance with a determination” or “upon detecting” or “in response to detecting” that the stated condition precedent is true, depending on the context.
- stages that are not order dependent may be reordered and other stages may be combined or broken out. While some reordering or other groupings are specifically mentioned, others will be obvious to those of ordinary skill in the art and so do not present an exhaustive list of alternatives.
- a front-end server to return a split associated with an account to a client in its native format used by the distributed storage system and the client then converts the raw split into a format defined by the client.
- the stages could be implemented in hardware, firmware, software or any combination thereof.
Abstract
Description
- This application claims priority to U.S. Provisional Application Ser. No. 61/649,806, filed May 21, 2012, entitled “Organizing Data in a Distributed Storage System,” which is incorporated by reference herein in its entirety.
- The disclosed implementations relate generally to the management of a distributed storage system, and in particular, to system and method for organizing a large volume of data in a distributed storage system.
- Internet has become a popular venue for people across the globe to store and exchange information. As the amount of data managed by the Internet rapidly increases, both individually and collectively, and the service associated with the data gets more complicated, it is becoming a constant challenge for an Internet-based service provider to mange such a large volume of data and render the associated service efficiently in response to different data access requests by users from anywhere in the world.
- In accordance with some embodiments described below, a method for adding data to a distributed storage system that includes a plurality of computer servers, each computer server including one or more processors and memory, is provided. The data within the distributed storage system is associated with a plurality of accounts and divided into a plurality of groups, each group including a plurality of splits and each split being associated with a respective account. The method includes: identifying a first split associated with an account, wherein the first split is a member of a first group of splits and the first split has a data range parameter indicating that more data can be added to the first split and a split size indicating an actual amount of data in the first split; in response to determining that the split size of the first split reaches a predefined limit: updating the data range parameter in the first split so that no data can be added to the first split; creating a second split for the account, wherein the second split includes a data range parameter indicating that more data can be added to the second split; adding the second split to a second group of splits; and replicating the second group of splits within the distributed storage system in accordance with a data replication policy associated with the account.
- In accordance with some embodiments described below, a distributed storage system includes a plurality of zones, each zone including a plurality of computer servers and each computer server including one or more processors and memory, a plurality of network links that connects two respective zones, wherein data within the distributed storage system is associated with a plurality of accounts and divided into a plurality of groups, each group including a plurality of splits and each split being associated with a respective account, and a plurality of program, modules, wherein the plurality of program modules are stored in the memory of a respective computer server and to be executed by the one or more processors of the respective computer server. The plurality of program modules include instructions for: identifying a first split associated with an account, wherein the first, split is a member of a first group of splits and the first split has a data range parameter indicating that more data can be added to the first split and a split size indicating an actual amount of data in the first split; in response to determining that the split size of the first split reaches a predefined limit: updating the data range parameter in the first split so that no data can be added to the first split; creating a second split for the account, wherein the second split includes a data range parameter indicating that more data can be added to the second split; adding the second split to a second group of splits; and replicating the second group of splits within the distributed storage system in accordance with a data replication policy associated with the account.
- In accordance with some embodiments described below, a non-transitory computer readable storage medium stores one or more program modules configured for execution by a computer server that includes one or more processors and memory and is part of a distributed storage system, wherein the distributed storage system is configured for dividing data associated with a plurality of accounts into a plurality of groups, each group including a plurality of splits and each split being associated with a respective account. The one or more programs include instructions for: identifying a first split associated with an account, wherein the first split is a member of a first group of splits and the first split has a data range parameter indicating that more data can be added to the first split and a split size indicating an actual amount of data in the first split; in response to determining that the split size of the first split reaches a predefined limit: updating the data range parameter in the first split so that no data can be added to the first split; creating a second split for the account, wherein the second split includes a data range parameter indicating that more data can be added to the second split; adding the second split to a second group of splits; and replicating the second group of splits within the distributed storage system in accordance with a data replication policy associated with the account.
- In accordance with some embodiments described below, a method for replicating data within a distributed storage system that includes a plurality of computer servers, each computer server including one or more processors and memory, is provided. The data within the distributed storage system is associated with a plurality of accounts and divided into a plurality of groups, each group including a plurality of splits and each split being associated with a respective account. The method includes: dividing data associated with a first account and data associated with a second account into a first set of splits and a second set of splits, respectively, wherein the first account and the second account have different data replication policies; adding each of the first set of splits and the second set of splits to a respective group of splits, wherein there is no group including a member of the first set of splits and a member of the second set of splits; creating a predefined number of replicas for each group of splits that includes a member of the first set of splits and allocating the replicas within the distributed storage system in accordance with a data replication policy associated with the first account; and creating a predefined number of replicas for each group of splits that includes a member of the second set of splits and allocating the replicas within the distributed storage system in accordance with a data replication policy associated with the second account.
- In accordance with some embodiments described below, a distributed storage system includes a plurality of zones, each zone including a plurality of computer servers and each computer server including one or more processors and memory, a plurality of network links that connects two respective zones, wherein data within the distributed storage system is associated with a plurality of accounts and divided into a plurality of groups, each group including a plurality of splits and each split being associated with a respective account, and a plurality of program modules, wherein the plurality of program modules are stored in the memory of a respective computer server and to be executed by the one or more processors of the respective computer server. The plurality of program modules include instructions for: dividing data associated with a first account and data associated with a second account into a first set of splits and a second set of splits, respectively, wherein the first account and the second account have different data replication policies; adding each of the first set of splits and the second set of splits to a respective group of splits, wherein there is no group including a member of the first set of splits and a member of the second set of splits; creating a predefined number of replicas for each group of splits that includes a member of the first set of splits and allocating the replicas within the distributed storage system in accordance with a data replication policy associated with the first account; and creating a predefined number of replicas for each group of splits that includes a member of the second set of splits and allocating the replicas within the distributed storage system in accordance with a data replication policy associated with the second account.
- In accordance with some embodiments described below, a non-transitory computer readable storage medium stores one or more program modules configured for execution by a computer server that includes one or more processors and memory and is part of a distributed storage system, wherein the distributed storage system is configured for dividing data associated with a plurality of accounts into a plurality of groups, each group including a plurality of splits and each split being associated with a respective account. The one or more programs include instructions for: dividing data associated with a first account and data associated with a second account into a first set of splits and a second set of splits, respectively, wherein the first account and the second account have different data replication policies; adding each of the first set of splits and the second set of splits to a respective group of splits, wherein there is no group including a member of the first set of splits and a member of the second set of splits; creating a predefined number of replicas for each group of splits that includes a member of the first set of splits and allocating the replicas within the distributed storage system in accordance with a data replication policy associated with the first account; and creating a predefined number of replicas for each group of splits that includes a member of the second set of splits and allocating the replicas within the distributed storage system in accordance with a data replication policy associated with the second account.
- In accordance with some embodiments described below, a method for locating data within a distributed storage system that includes a plurality of computer servers, each computer server including one or more processors and memory, is provided. The data within the distributed storage system is associated with a plurality of accounts and divided into a plurality of groups, each group including a plurality of splits, each split being associated with a respective account, and each group having multiple tablets and each tablet managed by a respective tablet server of the distributed storage system. The method includes: receiving a data access request from a client, wherein the data access request includes a logical identifier of data associated with an account; identifying one or more split identifiers associated with the logical identifier in accordance with the data access request, wherein each split identifier identifies a split associated with the account; for each of the identified one or more split identifiers: identifying a group identifier, wherein the group identifier corresponds to a group of splits; selecting one of the multiple tablets associated with the identified group based on information about the tablet servers managing the multiple tablets; communicating with the tablet server that manages the selected tablet for the split corresponding to the split identifier; and receiving the split from the tablet server; and forwarding the splits from the respective tablet servers to the requesting client.
- In accordance with some embodiments described below, a distributed storage system includes a plurality of zones, each zone including a plurality of computer servers and each computer server including one or more processors and memory, a plurality of network links that connects two respective zones, wherein data within the distributed storage system is associated with a plurality of accounts and divided into a plurality of groups, each group including a plurality of splits, each split being associated with a respective account, and each group having multiple tablets and each tablet managed by a respective tablet server of the distributed storage system, and a plurality of program modules, wherein the plurality of program modules are stored in the memory of a respective computer server and to be executed by the one or more processors of the respective computer server. The plurality of program modules include instructions for: receiving a data access request from a client, wherein the data access request includes a logical identifier of data associated with an account; identifying one or more split identifiers associated with the logical identifier in accordance with the data access request, wherein each split identifier identifies a split associated with the account; for each of the identified one or more split identifiers: identifying a group identifier, wherein the group identifier corresponds to a group of splits; selecting one of the multiple tablets associated with the identified group based on information about the tablet servers managing the multiple tablets; communicating with the tablet server that manages the selected tablet for the split corresponding to the split identifier; and receiving the split from the tablet server; and forwarding the splits from the respective tablet servers to the requesting client.
- In accordance with some embodiments described below, a non-transitory computer readable storage medium stores one or more program modules configured for execution by a computer server that includes one or more processors and memory and is part of a distributed storage system, wherein the distributed storage system is configured for dividing data associated with a plurality of accounts into a plurality of groups, each group including a plurality of splits, each split being associated with a respective account, and each group having multiple tablets and each tablet managed by a respective tablet server of the distributed storage system. The one or more programs include instructions for: receiving a data access request from a client, wherein the data access request includes a logical identifier of data associated with an account; identifying one or more split identifiers associated with the logical identifier in accordance with the data access request, wherein each split identifier identifies a split associated with the account; for each of the identified one or more split identifiers: identifying a group identifier, wherein the group identifier corresponds to a group of splits; selecting one of the multiple tablets associated with the identified group based on information about the tablet servers managing the multiple tablets; communicating with the tablet server that manages the selected tablet for the split corresponding to the split identifier; and receiving the split from the tablet server; and forwarding the splits from the respective tablet servers to the requesting client.
- The aforementioned implementation of the invention as well as additional implementations will be more clearly understood as a result of the following detailed description of the various aspects of the invention when taken in conjunction with the drawings. Like reference numerals refer to corresponding parts throughout the several views of the drawings.
-
FIGS. 1A through 1G are block diagrams, each illustrating certain aspects of a distributed storage system in accordance with some embodiments. -
FIGS. 2A and 2B are block diagram and flow chart illustrating how data associated with different accounts is replicated within the distributed storage system in accordance with some embodiments. -
FIGS. 3A and 3B are block diagram and flow chart illustrating how data associated with an account is added within the distributed storage system in accordance with some embodiments. -
FIGS. 4A and 4B are block diagram and flow chart illustrating how data is located within the distributed storage system in response to a data access request from a client in accordance with some embodiments. -
FIG. 5 is a block diagram illustrating the components of the client in accordance with some embodiments. -
FIG. 6 is a block diagram illustrating the components of a front-end server of the distributed storage system in accordance with some embodiments. -
FIG. 7 is a block diagram illustrating the components of a zone of the distributed storage system in accordance with some embodiments. -
FIGS. 1A through 1G are block diagrams, each illustrating certain aspects of a distributed storage system in accordance with some embodiments. In particular,FIG. 1A depicts adistributed storage system 100 according to some implementations of the present application. Thedistributed storage system 100 includes a plurality of zones 102-1, 102-2, . . . 102-N at various locations across the world, connected by network communication links 104-1,104-2, . . . 104-M. In some embodiments, a zone (such as thezone 1 102-1) corresponds to one or more data centers that are geographically close to each other. For example, the North American region may correspond to one zone that includes two data centers, one located near the Pacific Coast and the other one located near the Atlantic Coast. Although the conceptual diagram ofFIG. 1A shows a limited number of network communication links 104-1, etc., typical embodiments would have many more network communication links. In some embodiments, there are two or more network communication links between the same pair of zones, as illustrated by links 104-5 and 104-6 between the zone 2 (102-2) and the zone 6 (102-6). In some embodiments, the network communication links are composed of fiber optic cable. In some embodiments, some of the network communication links use wireless technology, such as microwaves. In some embodiments, each network communication link has a specified bandwidth and/or a specified cost for the use of that bandwidth. In some embodiments, each zone maintains the statistic information about the transfer of data across one or more of the network communication links within thedistributed storage system 100, including throughput rate, times of availability, reliability of the links, etc. -
FIG. 1B depicts the components of thedistributed storage system 100 according to some implementations of the present application. Thedistributed storage system 100 includes auniverse master 106, one or more front-end servers (101-1, . . . , 101-M), aplacement driver 108, and a plurality of zones (102-1, 102-2, . . . , 102-N). Theuniverse master 106 and theplacement driver 108 are responsible for monitoring the performance of thesystem 100 and controlling the data replication/migration between two zones. A zone (102-1, 102-2, . . . , 102-N) typically includes a data store (141-1, 141-2, . . . , 141-N) hosting a plurality of tablets (143-1, 143-2, . . . , 143-N), and utilizes a cluster of computer servers, including a zone master (131-1, 131-2, . . . , 131-N), one or more location proxies (135-1, 135-2, . . . , 135-N), one or more tablet servers (133-1, 133-2, . . . , 133-N) to perform all of the tablet-related tasks. The data store (141-1, 141-2, . . . , 141-N) provides the underlying persistent storage space for data managed by a corresponding zone (102-1, 102-2, . . . , 102-N). In some embodiments, data within the data store (141-1, 141-2, . . . , 141-N) are organized into many tablets, which is a basic data unit handled within a particular zone. The zone master (131-1, 131-2, . . . , 131-N) is responsible for assigning each tablet in the data store (141-1, 141-2, . . . , 141-N) to one of the tablet servers (133-1, 133-2, . . . , 133-N) for handling read/write requests directed at the tablet based, at least in part, on the CPU and memory usage at the tablet servers. For example, when the zone master determines that one tablet server is overloaded, it may orchestrate the migration of some tablets from this overloaded tablet server to other tablet servers in the same zone or maybe even another zone. A location proxy provides a location-lookup service to another entity (e.g., a front-end server or a tablet server) such that, for a given tablet, the location proxy identifies a respective tablet server that has been chosen for handling the read and write requests directed at the tablet. -
FIG. 1C illustrates in more detail how different components within a zone coordinate with each other to perform various tablet-related tasks according to some implementations of the present application. In this example, thezone 102 includes azone master 131, a plurality of tablet servers (133-1, 133-3), a plurality of location proxy servers (135-1, 135-3), and adata store 141 that includes multiple tablets (141-A, 141-B, . . . , 141-Z). Thezone master 131 has a zone ID 131-1 that uniquely identifies thezone 102 among a plurality of zones in a distributed storage system as shown in Figure IB. As will be described below in connection withFIG. 1D , the zone ID is used by a front-end server 101 for determining which zone includes the client-requested data. As described above, the location proxy servers (135-1, 135-3) provide a location-lookup service to other entities. In some embodiments, a location proxy server uses a lookup table to support the location-lookup service.FIG. 1C depicts an exemplary lookup table, each row of the table including a tablet ID 137-1 and a tablet server ID 137-3. In response to a tablet ID provided by another entity, the location proxy server returns a tablet server ID to the requesting entity, which identifies a tablet server that is chosen by thezone master 131 for managing the corresponding tablet associated with the tablet ID. Accordingly, the requesting entity can communicate with the identified tablet server with respect to tasks associated with the tablet. A tablet server 133-3 is identified by a tablet server ID 134-1 and further includes tablet metadata 134-3 associated with the tablets managed by the tablet server 133-3. For example, the tablet metadata 134-3 includes the tablet IDs of the tablets managed by the tablet server 133-3. In some embodiments, the tablet metadata 134-3 also includes information about the splits associated with the tablet. A more detailed description of the relationship between a split and a tablet is provided below in connection withFIG. 1D . - In some embodiments, the
zone master 131 monitors the performance of the tablet servers (133-1, 133-3) by periodically (e.g., after every 10 seconds) communicating with the tablet servers (133-1, 133-3). A tablet server reports to thezone master 131 its current status information, including its CPU and memory usage, etc., as well as other information used for determining the association between a set of tablets and the tablet server. Based on such information, thezone master 131 determines whether or not to assign a tablet in thedata store 141 to a corresponding tablet server. For example, thezone master 131 may identify some tablets associated with one tablet server 133-3, which is deemed to be overloaded, and assign the identified tablets to another tablet server 133-1, In addition, thezone master 131 publishes the updated tablet-to-tablet server map through the location proxy servers (135-1, 135-3), When another entity (e.g., a front-end server or a tablet server) wants to learn which tablet server is responsible for managing a particular tablet, the entity can query one of the location proxy servers by providing a tablet ID and receiving a corresponding tablet server ID associated with the tablet ID. After identifying a tablet server for a particular tablet through the location-lookup service, the entity can communicate with the identified tablet server for any read/write access requests directed at the tablet. -
FIG. 1D illustrates how different components within the distributedstorage system 100 interact with each other to satisfy data access requests from different clients according to some implementations of the present application. In this example, the clients (10-1, 10-2) are connected to the distributedstorage system 100 via a network 20 (e.g., Internet) and they send requests for accessing data hosted by the distributedstorage system 100. In this application, the term “client” may refer to a client computer (e.g., a desktop/laptop computer or a mobile device such as a tablet computer or a smartphone) from which an end user initiates a request for accessing a piece of data managed by the distributedstorage system 100. Alternatively, the term “client” may refer to a computer server that provides on-line services (e.g., email or advertising) to multiple users and uses the distributedstorage system 100 for hosting data associated with the on-line services. In either case, the distributedstorage system 100 is responsible for identifying and returning the client-requested data to the requesting clients upon receipt of such requests from the clients. For illustrative purposes, it is assumed that one of the clients is an on-line advertising service provider and the distributedstorage system 100 hosts data associated with different customers of the on-line advertising service provider. - When the client wants to access data associated with a customer, it submits a data access request to a front-
end server 101. In some embodiments, different front-end servers (shown inFIG. 1C ) are responsible for providing data-related services to different clients. For example, some of the front-end servers are configured for handling data access requests from clients for access email service data and some other front-end servers are configured for handling data access requests from clients for access advertising service data. In some embodiments, data associated with an online service application is further partitioned into multiple portions and each front-end server is configured for handling a subset of the data access requests for one or more portions of the data. In some embodiments, the front-end servers of the distributed storage system are located at different geographical locations to provide services to nearby clients that submit data access requests associated with different online services. As shown inFIG. 1D , a client submits a data access request by invoking an application programming interface (API) accepted by the front-end server 101. The data access request includes identification information of the one or more customers. In some embodiments, the data associated with a customer corresponds to a row in a data table and the row of customer data is further divided into multiple columns. The data access request may include a row identifier and possibly one or more column identifiers if the client is interested in accessing data in the one or more columns associated with each customer. Upon receipt of the data access request, the front-end server 101 needs to determine where the client-requested data is located in the distributedstorage system 100 such as information about the zone and tablet(s) that have the client-requested data. - As shown in
FIG. 1D , different components in the distributedstorage system 100 are organized into two domains based on their respective roles: (i) the logical domain including the front-end servers (101-1, 101-3) and (ii) the physical domain including the zones (102-1, 102-3). The front-end servers handle data access requests from the external clients and use data structures such as the directory map 103-1 and the group map 103-3 to free the clients from understanding how data is physically stored in the distributedstorage system 100. In some embodiments, each customer of the on-line advertising service is associated with one directory in the directory map 103-1. Based on the logical directory identifier provided by a client, the front-end server 101-1 identifies a particular entry in the director map 103-1, which corresponds to the particular customer. - To improve the scalability of the distributed
storage system 100, data associated with a customer is divided into multiple segments, which are referred to as “splits”, each split having a unique split ID in the directory map 103. As shown inFIG. 1D , each directory (e.g., directory 105-1) includes one or more splits (107-1 and 107-3). The number of splits associated with a directory is determined by the size of data associated with a corresponding customer. The more data the customer has, the more splits the data may be divided into. When the size of data within a split reaches a predefined threshold, no more data is added to the split and a new split is generated for hosting new data associated with the account. In some embodiments, there is no limit on the size of data for an account. In other embodiments, the size of data for an account is set to a predetermined limit. The predetermined limit may be determined by the distributed storage system 100 (e.g., a global limit of the size of data that is applied to all accounts), the application for which the data for the account is associated (e.g., a web mail application may impose a limit of the size of data for its accounts that are different than an advertisement application), and/or may be increased if an end user purchases more storage space for an account. Note that the client (i.e., the on-line advertising service provider) does not need to know which split(s) has the client-requested data. Instead, the client specifies the requested data in a request using a format defined by the client-associated online service provider and the front-end server 101-1 translates the client request into a set of split IDs that identify the splits including the client-requested data. - To improve the reliability and efficiency of the distributed
storage system 100, data associated with a customer is replicated into multiple copies and stored in different tablets of one or more zones. In other words, the basic data unit for a particular customer in a front-end server is a split and the basic data unit in a zone is a tablet. As shown inFIG. 1D , a group in the group map 103-2 is defined to associate a split in the directory map 103-1 with a plurality of tablets in a particular zone. In this example, the split 107-1 is a data structure associating the split ID 108-1 with a group ID 108-7, which corresponds to an entry 109-1 in the group map 103-3. The split 107-1 also includes a split size 108-3 indicating the actual amount of data currently within this split range indicator 108-5. As will be described below, the data range indicator is used for indicating whether the split has space for more data or not. When the split runs out of space, a new split (e.g., split 107-3) will be created for hosting new data associated with the account. In this example, the split 107-3 is associated with the group 109-3, not the group 109-1. Note that different splits associated with an account may belong to the same group of splits or different groups of splits. Each group includes a plurality (e.g., hundreds or even thousands) of splits associated with different accounts and has a predefined group limit. The exact association between a split and a group is dynamically determined based, in part, on the remaining capacity of a particular group. In some embodiments, the front-end server tries to add different splits associated with the same account to the same group because these splits are likely to be accessed by a client at the same time and it is probably more convenient for them to be within the same group and therefore the same set of tablets, which are replicas of the group. If the group (e.g., group 109-1) runs out of space, the front-end server may identify another group (e.g., group 109-3) for the split 107-3. In some embodiments, the data replication policy is defined for each account, the group 109-3 is chosen for the split 107-3 because it has the same number of tablets as the group 109-1. In other words, splits associated with different accounts that have different data replication policies should be added to different groups with different numbers of tablets. - In accordance with a data replication policy provided by the client, a predefined number of instances of the group are generated in the distributed
storage system 100, each instance of the group being referred to as a tablet. As shown inFIG. 1D , the group 109-1 has a group ID 111-1 (which is the same as the group ID 108-7 in the split 107-1), a group size 111-3, and a list of tablet IDs (e.g., tablet IDs 113-1, 113-3) of the group. Splits associated with different directories (e.g., directory 105-1 and directory 105-3) both belong to the group 109-1, suggesting that the two accounts corresponding to the two directories have the same data replication policy. In response to a client request, the front-end server 101-1 first identifies one or more split IDs in the directory map 103-1, which are associated with a customer identified by the client request, and then identifies a group and an associated list of tablet IDs for each split ID.FIG. 1D depict an embodiment in which different splits (as identified by the split IDs 107-1 and 107-3) associated with one customer are assigned to different groups (the group 109-1 and the group 109-3). This situation happens when the size of a group reaches a predefined group limit such that it is less efficient to keep all the data associated with one customer (e.g., multiple splits) in one group and therefore one tablet, - After the front-end server 101-1 identifies the tablet IDs in a group of splits that includes the client-requested data, the process of accessing the client-requested data is shifted from the logical domain to the physical domain, i.e., a zone that includes the tablets associated with the identified tablet IDs. In some embodiments, a tablet ID (113-1 or 113-3) includes a respective zone ID embedded therein. Therefore, after identifying the tablet IDs, the front-end server 101-1 also knows which zone has the client-requested data. As noted above, each zone includes one or more location proxy servers that provide the location-look up service for identifying a particular tablet server for each tablet. Based on the zone ID included in a tablet ID, the front-end server 101-1 submits a query to a respective location proxy server at a particular zone identified by the zone ID, the query including one or more tablet IDs (113-1, 113-3). The location proxy server then returns one or more tablet server IDs, each tablet server ID identifying a respective tablet server (e.g., the tablet server 125-1 or the tablet server 125-3) that has been chosen by the zone master for managing the data access requests to the particular tablet. Upon receipt of the one or more tablet server IDs, the front-end sever 101-1 submits a request to a corresponding tablet server, the request including identification of one or more splits (e.g., splits 123-1 and 123-3) within the tablet (e.g., the tablet 121-1). In response to the request, each tablet server identifies a corresponding tablet in the data store and performs the operations to the identified tablet accordingly.
-
FIG. 1E illustrates how the customer data of an on-line advertising service is divided into multiple splits according to some embodiments of the present application. The data table 108 illustrates how the customer data is stored in a table-like data structure. As shown in the figure, each row 108-1 in the data table 108 represents the data associated with a particular customer whose customer ID is a primary key of the data row. The data row 108-1 includes multiple columns. Some columns such as the “Customer” column and the “Age” column each have one attribute value whereas some other columns include an embedded data structure (e.g., the embedded table 108-2). As shown in the figure, the data row 108-1 is divided into multiple splits (123-A, 123-B, 123-C) to accommodate the continuing addition of new data to the row, each split including a subset of the data row. In some embodiments, the partition of data columns into different splits is based on the relationships between different columns. For example, columns that are often accessed together are put into one split for efficiency. An embedded table within a particular column may be divided into multiple sections with each section belonging to one split as shown inFIG. 1E . As noted above, each split has a split ID for uniquely identifying the split. In some embodiments, the split ID is content-addressable. For example, the split ID may include information about the customer ID associated with the data row 108-1, the metadata associated with the split (e.g., the name of the columns in the split), and the customer data stored within the split. With such content-addressable split ID definition, it is easy for the front-end server to determine: (i) which split (and therefore a corresponding tablet) has the client-requested data based on the information in the client request and (ii) which split (and therefore a corresponding tablet) does not have the client-requested data and can be ignored for the particular client request. As a result, the front-end server only needs to communicate with a tablet server that is responsible for managing the tablet. In some embodiments, the split ID includes a range of string-like keys that correspond to a range of data associated with a customer. - Referring back to
FIG. 1D , a tablet 121-1 may include splits corresponding to multiple groups of splits (109-1, 109-3). By including as many groups as possible within a tablet, the total number of tablets can be reduced, which makes it easier to manage the transactions directed to different groups that are associated with the same tablet. For example, the reduction of tablets will consume less messages/resources for maintaining the relationship between different tablets. There are fewer entities in the distributedstorage system 100 to deal with. With the reduction of tablets, transactions on a set of neighboring directories in the directory map will likely be localized to a single set of tablets at a particular zone and will therefore be executed as a transaction at a single site (e.g., a tablet server) instead of transactions at multiple sites that might involve multiple tablet servers. In some embodiments, the reduction of tablets makes it more likely that a child director) is placed in the same group as its parent directory. By doing so, a front-end server can direct a call to the child directory to the location of the parent directory, which reduces the size of the required location cache at the front-end server and allows clients to start up faster since they will have to load fewer locations. In some embodiments, the location of the parent directory does not correspond to the location of location of the child directory. In this case, if the client has a big payload, it may first send a verification message to the tablet server that manages the tablet including the parent directory and determine if the child directory is co-located in the same tablet. Only after receiving a positive confirmation, will the client send its payload to the tablet server. All these performance benefits can significantly reduce the cost of introducing a new directory to the distributed storage system and make it more likely that clients will map their structures to directories naturally instead of trying to form larger directories. - As shown in
FIG. 1D , a tablet server 125-1 further includes tablet metadata 127-1 associated with tablets (121-1, 121-3) managed by the tablet server. In this example, the tablet metadata 127-1 includes a directory-to-group map 127-3 and group state information 127-5. The directory-to-group map 127-3 locates a particular group within a tablet for a particular directory in the directory map. The group state information 127-5 includes the state information for a particular group replica, such as the log data, view information, the list of group replicas, etc. Given a directory associated with a tablet, the tablet server can scan the directory-to-group map for an entry that has the same directory name. Once an entry is identified, the tablet server can access the corresponding group state information using a group ID within this entry. In some embodiments, the tablet server supports the removal of a range of directories from a tablet by eliminating data associated with each directory within the range from the tablet when removing a directory replica from the tablet. - In some embodiments, one group in the distributed storage system may be split into two or more groups for several reasons. For example, a tablet containing the group is overloaded or too large. In this case, splitting the group may help reduce the load of the tablet if, e.g., this group contributes to a significant fraction of the load or size of the tablet. Sometimes, access patterns for some directories within a group are very different from access patterns for the rest of the group. For example, a group may be split into two if most directories in the group are accessed from US, but a particular set of directories in the group are mostly accessed from Europe.
- As shown in
FIG. 1F , the directory set 151 is associated with thegroup 155, which is a member of thetablet 157. It is assumed that the directory set 153, which is a subset of the directory set 151 before the movement, will be moved to another group. To do so, a new group is created within each of the same set of tablets that include thegroup 155 by making a replica of thegroup 155. After the creation, the new group can be changed via the normal replica addition or removal. In this example, the group split is implemented as a single-site transaction on thegroup 155 and the transaction update is applied at every replica of thegroup 155. As shown inFIG. 1F , at the completion of the transaction, a new group 155-3 is created within thetablet 157 and theold group 155 is updated to the group 155-1 to reflect the group split such that each directory in the new directory set 153-1 (which corresponds to the old directory set 153) is associated with the new group 155-3. The metadata associated with the new group 155-3 is populated such that it inherits at least a portion of the metadata associated with the group 155-1, indicating that the relationship between the two groups 155-1 and 155-3. By doing so, the metadata associated with the group 155-1 (e.g., the list of tablet IDs) does not change. It should be noted that splitting a group does not actually move any user data associated with the group. This makes the split fast because the transaction cost is independent of the sizes of the directories being moved. - Note that splitting the
group 155 within thetablet 157 does not affect any load at thetablet 157 because the new group 155-3 is within thesame tablet 157 as the original group. In order to move away some load from thetablet 157, thetablet 157 needs to move some group to another tablet. As shown inFIG. 1G , thetablet 157 includes two groups 155-1 and 155-3, each group corresponding to a respective set of directories. In some embodiments, one group within a tablet is moved to another tablet within the same zone by having the two tablets sharing some data with each other. In some other embodiments, the target tablet (e.g., the tablet 157-1) reads directly from the source tablet (e.g., the tablet 157) without going through a tablet server that is responsible for managing thetablet 157. As such, the movement of groups between two tablets does not add additional load to the tablet server. In conjunction with the movement of a group from one tablet to another tablet, the mapping between a directory (e.g., a member in the directory set 153-1) and a source tablet (e.g., the tablet 157) is updated to redirect to a target tablet (e.g., the tablet 157-1). -
FIGS. 2A and 2B are block diagram and flow chart illustrating how data associated with different accounts is replicated within the distributed storage system in accordance with some embodiments. As shown inFIG. 2B , a distributed storage system is provided (251) for managing thedata 201 associated with a plurality of accounts, including dividing the data into a plurality of groups, each group including a plurality of splits and each split being associated with a respective account. In particular, the data associated with a first account (e.g., the account 201-1 inFIG. 2A ) is divided (253) into a first set of splits (e.g., the splits 203-1 and 203-3 inFIG. 2A ) and the data associated with a second account (e.g., the account 201-3 inFIG. 2A ) is divided (253) into a second set of splits (e.g., the split 203-5 inFIG. 2A ). The distributed storage system adds (255) each of the first set of splits to a group of splits (e.g., the group 205-1 inFIG. 2A ) and adds each of the second set of splits to a group of splits (e.g., the group 205-3 inFIG. 2A ). In this example, it is assumed that the first account and second account have different data replication policies. For example, the first account may require that the distributed storage system create three replicas for its data and allocate the three replicas in a zone corresponding to North America and the second account may require that the distributed storage system create two replicas for its data and allocate the two replicas in a zone corresponding to Europe. Since the two accounts have different policies, a member of the first set of splits cannot be added to the group 205-3 that includes a member of the second set of splits. Similarly, a member of the second set of splits cannot be added to the group 205-1 that includes a member of the first set of splits. In other words, there is no group in the distributed storage system that includes both a member of the first set of splits and a member of the second set of splits. - By allowing each account to have its own data replication policy, the distribute storage system offers both flexibility and scalability to different types of online service applications that use the distributed storage system for storing their data. For example, an account that needs frequent access to its data from one or more geographical locations may specify such need in its data replication policy so that the distributed storage system may create more replicas for the data associated with the account at a zone close to the data accessing locations and reduce the latency required for a client to access such data.
- As shown in
FIG. 2A , the distributed storage system creates (257 inFIG. 2B ) a predefined number (e.g., three) of replicas for each group of splits (e.g., the group 205-1) that includes a member of the first set of splits and allocates the three replicas in a zone (e.g., the zone 207-1) in accordance with the data replication policy associated with the first account. In this example, the zone 207-1 includes three tablets (209-1, 209-3, 209-5), each being one replica of the group 205-1, and each tablet includes a copy of the first set of splits associated with the first account 201-1. As described above, each tablet in a zone is assigned to a tablet server for managing data access requests directed to the tablet. In this case, the three tablets are managed by two tablet servers 211-1 and 211-3. In other words, tablets associated with the same group of splits may be managed by the same tablet server or different tablet servers depending on the load balance of the respective tablet servers in a zone. Similarly, the distributed storage system creates (259 inFIG. 2B ) a predefined number (e.g., two) of replicas for each group of splits (e.g., the group 205-3) that includes a member of the second set of splits and allocates the replicas in a zone (e.g., the zone 207-3) in accordance with the data replication policy associated with the second account. In this example, the zone 207-3 includes two tablets (209-7, 209-9), each being a replica of the group 205-3, and each tablet includes a copy of the second set of splits associated with the second account 201-3 and is managed by a respective tablet server (211-5 or 211-7). It should be noted that the data replication policy of a group of splits is driven by the data replication policies of the different splits in the group, which are driven by the data replication policies of the accounts associated with the different splits. The distributed storage system is responsible for putting those splits having the same or similar data replication policies into the same group to improve the system's efficiency. In some embodiments, the enforcement of the account-level (or directory-level) data replication policy is determined by the distributed storage system based on the availability of resources at different zones. In other words, it is possible that the distributed storage system may not always store splits associated with a particular account strictly in accordance with the account's data replication policy. For example, the splits may be initially stored in a zone different from a zone defined by the account's data replication policy and then moved to the zone. In this case, the distributed storage system allows an account to specify its desired placement of the splits associated with, the account in the directory map and will try to satisfy such requirement whenever it is possible. In some embodiments, an account, may change its data replication policy from time to time. For example, an email account user may temporarily move from North America to Europe. When the email application detects such movement, it. may notify the distributed storage system to move tablets associated with the email account from a data center in North America to a data center in Europe to provide a better service to the end user. -
FIGS. 3A and 3B are block diagram and flow chart illustrating how data associated with an account is added within the distributed storage system in accordance with some embodiments. As noted above, the division of an account's data into one or more splits eliminates the data limit for a particular account managed by the distributed storage system because the distributed storage system can add new splits to an account when its existing split runs out of space. As shown inFIG. 3B , a distributed storage system is provided (351) for managing thedata 301 associated with a plurality of accounts, including dividing the data into a plurality of groups, each group including a plurality of splits and each split being associated with a respective account. In particular, the data associated with an account (e.g., the account 301-1 inFIG. 3A ) initially includes only one (e.g., thesplit 303 inFIG. 2A ). As described above in connection withFIGS. 2A and 2B , this split is added to a group of splits and replicated within a particular zone as part of a set of tablets associated with the group in accordance with the data replication policy. As shown inFIG. 3B , the distributed storage system identities (353) a first split (e.g., thesplit 303 inFIG. 3A ) associated with the account. In this example, the first split is thesplit 303 that includes multiple parameters including the data range parameter 303-1 and the split size parameter 303-3. Note that the value <inf> of the data range parameter 303-1 indicates that thesplit 303 still has space for more data to be added to the split and the split size parameter 303-3 represents the actual amount of data in thesplit 303. - In some embodiments, each account has only one split whose data range parameter has a value of <inf>. As shown in
FIG. 3B , the distributed storage system determines (355) whether the split associated with the account reaches its limit according to a predefined schedule (e.g., periodically). If not (355—no), the distributed storage system stops checking this account and proceeds to check another account. Otherwise (355—yes), the distributed storage system will take further actions by creating a new split for the account. - As shown in
FIG. 3A , when the existingsplit 303 runs out of space, the distributed storage system updates (357) the data range parameter in thesplit 303 from <inf> to “ABC.” Note that the expression “ABC” is an expression that corresponds to the actual upper limit of the data within thesplit 303. From this parameter, the distributed storage system can tell what data is within each split. In response to a client request for a particular piece of data, the distributed storage system can use the data range parameter to determine which split or splits have the client-requested data. By doing so, the distributed storage system also marks the first split as not accepting any new data. The distributed storage system then creates (359) a second split (e.g., thesplit 305 inFIG. 3B ) for the account. As shown inFIG. 3B , thesecond split 305 includes a data range parameter 305-1 that has a value of <inf> indicating that more data can be added to the second split and a split size parameter 305-3 that grows as more and more data is added to thesecond split 305. Moreover, the distributed storage system selects a second group of splits (e.g., thegroup 307 inFIG. 3A ) for thesecond split 305 and adds (361) the second split to a second group of splits. It should be noted that thesecond group 307 may be the same group that includes thesplit 303 or a different one. Finally, the distributed storage system replicates (363) the second group of splits in a particular zone (e.g., thezone 309 inFIG. 3A ) in accordance with a data replication policy associated with the account. In this example, thesecond group 307 has two tablets (311-1, 311-3) in thezone 309, which are managed by two respective tablet servers 313-1 and 313-3. In some embodiments, the creation of a new split for an account may be triggered by the movement of data within the distributed storage system, e.g., in response to a change of the data replication policy. In either case, the creation of new splits for the account ensures that the client can add more data to this account without disrupting the service associated with the account. -
FIGS. 4A and 4B are block diagram and flow chart illustrating how data is located within the distributed storage system in response to a data access request from a client in accordance with some embodiments. As shown inFIG. 4B , a distributed storage system is provided (451) for managing data associated with a plurality of accounts, which is divided into a plurality of groups, each group including a plurality of splits, each split being associated with a respective account, and each group having multiple tablets and each tablet managed by a respective tablet server of the distributed storage system. A front-end server (403 inFIG. 4A ) of the distributed storage system receives (453) a data access request from a client (401 inFIG. 4A ). In some embodiments, the data access request includes a logical identifier (e.g., a directory identifier) of data associated with an account associated with the client. - In response, the front-end server (403 in
FIG. 4A ) identities (455) one or more split identifiers associated with the logical identifier in accordance with the data access request. As shown inFIG. 4A , the front-end server 403 identified two splits within thedirectory map 405, they are the split 407-1 and the split 407-3. Each split's metadata includes a split ID (409-1, 409-5) that identifies a split associated with the account. For each of the identified one or more split identifiers (457), the front-end server 403 identifies (457-1) a group identifier (e.g., the group IDs 409-3 and 409-7 inFIG. 4A ), each group identifier corresponds to a group of splits. In the example shown inFIG. 4A , the group ID 409-3 corresponds to thegroup 411 of splits that includes a split 411-1 corresponding to the split 407-1 in thedirector map 405 and the group ID 409-7 corresponds to thegroup 413 of splits that includes a split 413-1 corresponding to the split 407-3 in thedirectory map 405. The distributed storage system selects (457-3) one of the multiple tablets associated with each identified group based on information about the tablet servers managing the multiple tablets. For example, thezone 415 includes two tablets associated with each of the two identifiedgroups tablet 417 is identified for thegroup 411 and thetablet 417 includes a split 417-1 that corresponds to the split 407-1 in thedirectory map 405. Thetablet 421 is identified for thegroup 413 and thetablet 421 includes a split 421-1 that corresponds to the split 407-3 in thedirectory map 405. For each selected tablet, there is a corresponding tablet, server in thezone 415 that is responsible for managing data access requests to the tablet. In this example, thetablet server 419 is responsible for managing thetablet 417 and thetablet server 423 is responsible for managing thetablet 421. After identifying each tablet server, the front-end server 403 communicates (457-5) with the tablet server that manages the selected tablet for the split corresponding to the split identifier for the split associated with the client request and receives (457-7) the split from the tablet server. After receiving the splits from different, tablet servers, the front-end server forwards (459) the splits from the respective tablet servers to the requesting client in satisfying the client's data access request. It should be noted that the client access request may be a read-only request or a read-and-write request. Since each group of splits includes multiple tablets, any data update to one split within the group should be replicated within each tablet associated with the group. -
FIG. 5 is a block diagram illustrating the components of the client in accordance with some embodiments. Theclient 10 is a computer server that includes one or more processing units (CPU's) 502 for executing modules, programs and/or instructions stored in thememory 514 and thereby performing processing operations; one or more network orother communications interfaces 504;memory 514; and one ormore communication buses 512 for interconnecting these components. In some implementations, theclient 10 includes a user interface 406 comprising adisplay device 508 and one or more input devices 510 (e.g., keyboard or mouse or remote control). In some implementations, thememory 514 includes high-speed random access memory, such as DRAM, SRAM, DDR RAM or other random access solid state memory devices. In some implementations,memory 514 includes non-volatile memory, such as one or more magnetic disk storage devices, optical disk storage devices, flash memory devices, or other non-volatile solid state storage devices. In some implementations,memory 514 includes one or more storage devices remotely located from the CPU(s) 502.Memory 514, or alternately the non-volatile memory device(s) withinmemory 514, comprises a non-transitory computer readable storage medium. In some implementations,memory 514 or the non-transitory computer readable storage medium ofmemory 514 stores the following elements, or a subset of these elements, and may also include additional elements: -
- an
operating system 516 that includes procedures for handling various basic system services and for performing hardware dependent tasks; - a
network communications module 518 that is used for coupling theclient 10 to the distributedstorage system 100 via the communication network interfaces 504 and one or more communication networks (wired or wireless), such as thenetwork 20, other wide area networks, local area networks, metropolitan area networks, and so on; and - one or more
online service applications 520, such as anonline email application 522 that includes a data access module 522-1 for communicating with the distributedstorage system 100 for exchanging data, anonline advertising application 524 that includes a data access module 524-1 for communicating with the distributedstorage system 100 for exchanging data, etc.
- an
-
FIG. 6 is a block diagram illustrating the components of a front-end server of the distributed storage system in accordance with some embodiments. The front-end server 101 includes one or more processing units (CPU's) 602 for executing modules, programs and/or instructions stored in thememory 614 and thereby performing processing operations; one or more network orother communications interfaces 604;memory 614; and one ormore communication buses 612 for interconnecting these components. In some implementations, the front-end server 101 includes anoptional user interface 606 comprising adisplay device 608 and one or more input devices 610 (e.g., keyboard or mouse or remote control). In some implementations, thememory 614 includes high-speed random access memory, such as DRAM, SRAM, DDR RAM or other random access solid state memory devices. In some implementations,memory 614 includes non-volatile memory, such as one or more magnetic disk storage devices, optical disk storage devices, flash memory devices, or other non-volatile solid state storage devices. In some implementations,memory 614 includes one or more storage devices remotely located from the CPU(s) 602.Memory 614, or alternately the non-volatile memory device(s) withinmemory 614, comprises a non-transitory computer readable storage medium. In some implementations,memory 614 or the non-transitory computer readable storage medium ofmemory 614 stores the following elements, or a subset of these elements, and may also include additional elements: -
- an
operating system 616 that includes procedures for handling various basic system services and for performing hardware dependent tasks; - a network communications module 618 that is used for connecting the front-
send server 101 to other devices (e.g., theclients 10 and the other components in the distributedstorage system 100 such as the zones) via the communication network interfaces 604 and one or more communication networks (wired or wireless), such as thenetwork 20, other wide area networks, local area networks, metropolitan area networks, and so on; - a plurality of
application interface modules 620, such as an onlineemail application module 622 for exchanging data with the data access module 522-1 in theclient 10, an onlineadvertising application module 624 for exchanging data with the data access module 524-1 in theclient 10, etc; - a plurality of directory maps 626, such as an online email
application directory map 628 including a plurality ofrecords 630 defining the relationship between different email accounts with their respective splits in the distributed storage system, an online advertisingapplication directory map 632 including a plurality ofrecords 634 defining the relationship between different advertising customer accounts with their respective splits in the distributed storage system, etc; and - a plurality of group maps 636, such as an online email
application directory map 638 including a plurality ofrecords 640 defining the relationship between different groups with their respective sets of tablets in the distributed storage system, an online advertisingapplication directory map 642 including a plurality ofrecords 644 defining the relationship between different groups with their respective sets of tablets in the distributed storage system, etc.
- an
-
FIG. 7 is a block diagram illustrating the components of a zone of the distributed storage system in accordance with some embodiments. Thezone servers 102 include one or more processing units (CPU's) 702 for executing modules, programs and/or instructions stored in thememory 714 and thereby performing processing operations; one or more network orother communications interfaces 704;memory 714; and one ormore communication buses 712 for interconnecting these components. In some implementations, thezone servers 102 includes anoptional user interface 706 comprising adisplay device 708 and one or more input devices 710 (e.g., keyboard or mouse or remote control). In some implementations, thememory 714 includes high-speed random access memory, such as DRAM, SRAM, DDR RAM or other random access solid state memory devices. In some implementations,memory 714 includes non-volatile memory, such as one or more magnetic disk storage devices, optical disk storage devices, flash memory devices, or other non-volatile solid state storage devices. In some implementations,memory 714 includes one or more storage devices remotely located from the CPU(s) 702.Memory 714, or alternately the non-volatile memory device(s) withinmemory 714, comprises a non-transitory computer readable storage medium. In some implementations,memory 714 or the non-transitory computer readable storage medium ofmemory 714 stores the following elements, or a subset of these elements, and may also include additional elements: -
- an
operating system 716 that includes procedures for handling various basic system services and for performing hardware dependent tasks; - a
network communications module 718 that is used for connecting thezone servers 102 to other devices (e.g., the front-end servers 101) via the communication network interfaces 704 and one or more communication networks (wired or wireless), such as the network links 104, other wide area networks, local area networks, metropolitan area networks, and so on; - a
zone master server 719 for managing thelocation proxy servers 720 and thetablet servers 728 within each zone; - a plurality of
location proxy servers 720, each server (722, 726) further including a location-lookup table 724 for identifying a map between a respective tablet and a respective tablet server; - a plurality of
tablet servers 728, each server (730, 734) further includingtablet metadata 732 for managing a plurality of tablets such as the data access requests directed to the tablets; and - a plurality of
tablets 736, each tablet (738, 744) further including atablet description 740 and a plurality ofsplits 742.
- an
- Reference has been made in detail to implementations, examples of which are illustrated in the accompanying drawings. While particular implementations are described, it will be understood it is not intended to limit the invention to these particular implementations. On the contrary, the invention includes alternatives, modifications and equivalents that are within the spirit and scope of the appended claims. Numerous specific details are set forth in order to provide a thorough understanding of the subject matter presented herein. But it will be apparent to one of ordinary skill in the art that the subject matter may be practiced without these specific details. In other instances, well-known methods, procedures, components, and circuits have not been described in detail so as not to unnecessarily obscure aspects of the implementations.
- Although the terms first, second, etc. may be used herein to describe various elements, these elements should not be limited by these terms. These terms are only used to distinguish one element from another. For example, first ranking criteria could be termed second ranking criteria, and, similarly, second ranking criteria could be termed first ranking criteria, without departing from the scope of the present invention. First ranking criteria and second ranking criteria are both ranking criteria, but they are not the same ranking criteria.
- The terminology used in the description of the invention herein is for the purpose of describing particular implementations only and is not intended to be limiting of the invention. As used in the description of the invention and the appended claims, the singular forms “a,” “an,” and “the” are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will also be understood that the term “and/or” as used herein refers to and encompasses any and all possible combinations of one or more of the associated listed items. It will be further understood that the terms “includes,” “including,” “comprises,” and/or “comprising,” when used in this specification, specify the presence of stated features, operations, elements, and/or components, but do not preclude the presence or addition of one or more other features, operations, elements, components, and/or groups thereof.
- As used herein, the term “if” may be construed to mean “when” or “upon” or “in response to determining” or “in accordance with a determination” or “in response to detecting,” that a stated condition precedent is true, depending on the context. Similarly, the phrase “if it is determined [that a stated condition precedent is true]” or “if [a stated condition precedent is true]” or “when [a stated condition precedent is true]” may be construed to mean “upon determining” or “in response to determining” or “in accordance with a determination” or “upon detecting” or “in response to detecting” that the stated condition precedent is true, depending on the context.
- Although some of the various drawings illustrate a number of logical stages in a particular order, stages that are not order dependent may be reordered and other stages may be combined or broken out. While some reordering or other groupings are specifically mentioned, others will be obvious to those of ordinary skill in the art and so do not present an exhaustive list of alternatives. For example, it is possible for a front-end server to return a split associated with an account to a client in its native format used by the distributed storage system and the client then converts the raw split into a format defined by the client. Moreover, it should be recognized that the stages could be implemented in hardware, firmware, software or any combination thereof.
- The foregoing description, for purpose of explanation, has been described with reference to specific implementations. However, the illustrative discussions above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The implementations were chosen and described in order to best explain principles of the invention and its practical applications, to thereby enable others skilled in the art to best utilize the invention and various implementations with various modifications as are suited to the particular use contemplated. Implementations include alternatives, modifications and equivalents that are within the spirit and scope of the appended claims. Numerous specific details are set forth in order to provide a thorough understanding of the subject matter presented herein. But it will be apparent to one of ordinary skill in the art that the subject matter may be practiced without these specific details. In other instances, well-known methods, procedures, components, and circuits have not been described in detail so as not to unnecessarily obscure aspects of the implementations.
Claims (20)
Priority Applications (5)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/898,411 US9069835B2 (en) | 2012-05-21 | 2013-05-20 | Organizing data in a distributed storage system |
EP13728036.8A EP2852885A2 (en) | 2012-05-21 | 2013-05-21 | Organizing data in a distributed storage system |
PCT/US2013/042063 WO2013177193A2 (en) | 2012-05-21 | 2013-05-21 | Organizing data in a distributed storage system |
CN201380037792.3A CN104641344B (en) | 2012-05-21 | 2013-05-21 | Data in Tissue distribution formula storage system |
DE202013012477.6U DE202013012477U1 (en) | 2012-05-21 | 2013-05-21 | ORGANIZING DATA IN A DISTRIBUTED STORAGE SYSTEM |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201261649806P | 2012-05-21 | 2012-05-21 | |
US13/898,411 US9069835B2 (en) | 2012-05-21 | 2013-05-20 | Organizing data in a distributed storage system |
Publications (2)
Publication Number | Publication Date |
---|---|
US20130339295A1 true US20130339295A1 (en) | 2013-12-19 |
US9069835B2 US9069835B2 (en) | 2015-06-30 |
Family
ID=48579483
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/898,411 Active 2033-11-08 US9069835B2 (en) | 2012-05-21 | 2013-05-20 | Organizing data in a distributed storage system |
Country Status (5)
Country | Link |
---|---|
US (1) | US9069835B2 (en) |
EP (1) | EP2852885A2 (en) |
CN (1) | CN104641344B (en) |
DE (1) | DE202013012477U1 (en) |
WO (1) | WO2013177193A2 (en) |
Cited By (15)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20140173035A1 (en) * | 2011-08-02 | 2014-06-19 | Nec Corporation | Distributed storage system and method |
CN104050102A (en) * | 2014-06-26 | 2014-09-17 | 北京思特奇信息技术股份有限公司 | Object storing method and device in telecommunication system |
US20160057245A1 (en) * | 2014-08-25 | 2016-02-25 | Super Micro Computer, Inc. | Globally distributed virtual cache for worldwide real-time data access |
WO2016094614A1 (en) * | 2014-12-12 | 2016-06-16 | Western Digital Technologies, Inc. | Nas off-loading of network traffic for shared files |
US9519699B1 (en) | 2014-03-12 | 2016-12-13 | Amazon Technologies, Inc. | Consistency of query results in a distributed system |
US9864791B2 (en) | 2014-12-19 | 2018-01-09 | Microsoft Technology Licensing, Llc | Flow for multi-master replication in distributed storage |
US10021186B2 (en) | 2014-12-19 | 2018-07-10 | Microsoft Technology Licensing, Llc | Guaranteed delivery of replication message |
US10055145B1 (en) * | 2017-04-28 | 2018-08-21 | EMC IP Holding Company LLC | System and method for load balancing with XOR star and XOR chain |
CN109583224A (en) * | 2018-10-16 | 2019-04-05 | 阿里巴巴集团控股有限公司 | A kind of privacy of user data processing method, device, equipment and system |
US10587714B1 (en) * | 2014-03-12 | 2020-03-10 | Amazon Technologies, Inc. | Method for aggregating distributed data |
US20200099692A1 (en) * | 2018-09-24 | 2020-03-26 | Nutanix, Inc. | System and method for protection of entities across availability zones |
US10686870B2 (en) * | 2008-05-13 | 2020-06-16 | Eric E. Tirk | System and method for an application distribution and metrics system enabling the integration of distributed applications into host applications and the monetizing of distributed applications |
US10824640B1 (en) * | 2015-12-29 | 2020-11-03 | Emc Corporation | Framework for scheduling concurrent replication cycles |
US11080253B1 (en) * | 2015-12-21 | 2021-08-03 | Amazon Technologies, Inc. | Dynamic splitting of contentious index data pages |
US11494500B1 (en) * | 2021-11-30 | 2022-11-08 | Snowflake Inc. | Account security configuration replication |
Families Citing this family (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10108632B2 (en) * | 2016-05-02 | 2018-10-23 | Google Llc | Splitting and moving ranges in a distributed system |
US9858151B1 (en) * | 2016-10-03 | 2018-01-02 | International Business Machines Corporation | Replaying processing of a restarted application |
CN108665335B (en) * | 2017-04-01 | 2021-09-14 | 北京京东尚科信息技术有限公司 | Method for processing shopping cart data of shopping website |
CN109407975B (en) * | 2018-09-19 | 2020-08-25 | 华为技术有限公司 | Data writing method, computing node and distributed storage system |
CN109561152B (en) * | 2018-12-13 | 2020-07-24 | 深圳先进技术研究院 | Data access request response method, device, terminal and storage medium |
CN113645304B (en) * | 2021-08-13 | 2023-06-16 | 恒生电子股份有限公司 | Data service processing method and related equipment |
CN115242817B (en) * | 2022-07-21 | 2023-10-24 | 阿里巴巴（中国）有限公司 | Data access processing method, device, equipment and storage medium |
Citations (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20050015404A1 (en) * | 2003-07-15 | 2005-01-20 | Ludmila Cherkasova | System and method having improved efficiency for distributing a file among a plurality of recipients |
US20050149627A1 (en) * | 2003-12-24 | 2005-07-07 | Ivan Schreter | Address generation in distributed systems using tree method |
US7430570B1 (en) * | 2003-04-28 | 2008-09-30 | Ibrix, Inc. | Shadow directory structure in a distributed segmented file system |
US20090327642A1 (en) * | 2007-03-20 | 2009-12-31 | Fujitsu Limited | Storage management program, storage management method, and storage management apparatus |
US20110196664A1 (en) * | 2010-02-09 | 2011-08-11 | Yonatan Zunger | Location Assignment Daemon (LAD) Simulation System and Method |
US20120159102A1 (en) * | 2009-09-01 | 2012-06-21 | Nec Corporation | Distributed storage system, distributed storage method, and program and storage node for distributed storage |
US20120303791A1 (en) * | 2008-10-24 | 2012-11-29 | Microsoft Corporation | Load balancing when replicating account data |
US20130346365A1 (en) * | 2011-03-08 | 2013-12-26 | Nec Corporation | Distributed storage system and distributed storage method |
US20150012497A1 (en) * | 2012-03-29 | 2015-01-08 | Hitachi Data Systems Corporation | Cluster-wide unique id for object access control lists |
Family Cites Families (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6477544B1 (en) | 1999-07-16 | 2002-11-05 | Microsoft Corporation | Single instance store for file systems |
US7398529B2 (en) * | 2001-03-09 | 2008-07-08 | Netiq Corporation | Method for managing objects created in a directory service |
US7548928B1 (en) * | 2005-08-05 | 2009-06-16 | Google Inc. | Data compression of large scale data stored in sparse tables |
CN100574194C (en) * | 2006-12-22 | 2009-12-23 | 华为技术有限公司 | A kind of method of safety management maintenance equipment and device |
US7840537B2 (en) | 2006-12-22 | 2010-11-23 | Commvault Systems, Inc. | System and method for storing redundant information |
JP4519179B2 (en) * | 2008-02-25 | 2010-08-04 | 富士通株式会社 | Logical volume management program, logical volume management apparatus, logical volume management method, and distributed storage system |
CN101316274B (en) * | 2008-05-12 | 2010-12-01 | 华中科技大学 | Data disaster tolerance system suitable for WAN |
WO2011100366A2 (en) | 2010-02-09 | 2011-08-18 | Google Inc. | System and method for managing replicas of objects in a distributed storage system |
CN101854392B (en) * | 2010-05-20 | 2012-11-14 | 清华大学 | Personal data management method based on cloud computing environment |
US20130179413A1 (en) | 2010-09-21 | 2013-07-11 | Georgia Tech Research Corporation | Compressed Distributed Storage Systems And Methods For Providing Same |
-
2013
- 2013-05-20 US US13/898,411 patent/US9069835B2/en active Active
- 2013-05-21 EP EP13728036.8A patent/EP2852885A2/en not_active Withdrawn
- 2013-05-21 CN CN201380037792.3A patent/CN104641344B/en active Active
- 2013-05-21 DE DE202013012477.6U patent/DE202013012477U1/en not_active Expired - Lifetime
- 2013-05-21 WO PCT/US2013/042063 patent/WO2013177193A2/en active Application Filing
Patent Citations (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7430570B1 (en) * | 2003-04-28 | 2008-09-30 | Ibrix, Inc. | Shadow directory structure in a distributed segmented file system |
US20050015404A1 (en) * | 2003-07-15 | 2005-01-20 | Ludmila Cherkasova | System and method having improved efficiency for distributing a file among a plurality of recipients |
US20050149627A1 (en) * | 2003-12-24 | 2005-07-07 | Ivan Schreter | Address generation in distributed systems using tree method |
US20090327642A1 (en) * | 2007-03-20 | 2009-12-31 | Fujitsu Limited | Storage management program, storage management method, and storage management apparatus |
US20120303791A1 (en) * | 2008-10-24 | 2012-11-29 | Microsoft Corporation | Load balancing when replicating account data |
US20120159102A1 (en) * | 2009-09-01 | 2012-06-21 | Nec Corporation | Distributed storage system, distributed storage method, and program and storage node for distributed storage |
US20110196664A1 (en) * | 2010-02-09 | 2011-08-11 | Yonatan Zunger | Location Assignment Daemon (LAD) Simulation System and Method |
US20130346365A1 (en) * | 2011-03-08 | 2013-12-26 | Nec Corporation | Distributed storage system and distributed storage method |
US20150012497A1 (en) * | 2012-03-29 | 2015-01-08 | Hitachi Data Systems Corporation | Cluster-wide unique id for object access control lists |
Cited By (19)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10686870B2 (en) * | 2008-05-13 | 2020-06-16 | Eric E. Tirk | System and method for an application distribution and metrics system enabling the integration of distributed applications into host applications and the monetizing of distributed applications |
US9609060B2 (en) * | 2011-08-02 | 2017-03-28 | Nec Corporation | Distributed storage system and method |
US20140173035A1 (en) * | 2011-08-02 | 2014-06-19 | Nec Corporation | Distributed storage system and method |
US9519699B1 (en) | 2014-03-12 | 2016-12-13 | Amazon Technologies, Inc. | Consistency of query results in a distributed system |
US10587714B1 (en) * | 2014-03-12 | 2020-03-10 | Amazon Technologies, Inc. | Method for aggregating distributed data |
CN104050102A (en) * | 2014-06-26 | 2014-09-17 | 北京思特奇信息技术股份有限公司 | Object storing method and device in telecommunication system |
US10462249B2 (en) * | 2014-08-25 | 2019-10-29 | Super Micro Computer, Inc. | Globally distributed virtual cache for worldwide real-time data access |
US20160057245A1 (en) * | 2014-08-25 | 2016-02-25 | Super Micro Computer, Inc. | Globally distributed virtual cache for worldwide real-time data access |
WO2016094614A1 (en) * | 2014-12-12 | 2016-06-16 | Western Digital Technologies, Inc. | Nas off-loading of network traffic for shared files |
US9864791B2 (en) | 2014-12-19 | 2018-01-09 | Microsoft Technology Licensing, Llc | Flow for multi-master replication in distributed storage |
US10021186B2 (en) | 2014-12-19 | 2018-07-10 | Microsoft Technology Licensing, Llc | Guaranteed delivery of replication message |
US11080253B1 (en) * | 2015-12-21 | 2021-08-03 | Amazon Technologies, Inc. | Dynamic splitting of contentious index data pages |
US10824640B1 (en) * | 2015-12-29 | 2020-11-03 | Emc Corporation | Framework for scheduling concurrent replication cycles |
US10055145B1 (en) * | 2017-04-28 | 2018-08-21 | EMC IP Holding Company LLC | System and method for load balancing with XOR star and XOR chain |
US10728255B2 (en) * | 2018-09-24 | 2020-07-28 | Nutanix, Inc. | System and method for protection of entities across availability zones |
US20200099692A1 (en) * | 2018-09-24 | 2020-03-26 | Nutanix, Inc. | System and method for protection of entities across availability zones |
CN109583224A (en) * | 2018-10-16 | 2019-04-05 | 阿里巴巴集团控股有限公司 | A kind of privacy of user data processing method, device, equipment and system |
US11494500B1 (en) * | 2021-11-30 | 2022-11-08 | Snowflake Inc. | Account security configuration replication |
US11620395B1 (en) * | 2021-11-30 | 2023-04-04 | Snowflake Inc. | Replication of account security configurations |
Also Published As
Publication number | Publication date |
---|---|
US9069835B2 (en) | 2015-06-30 |
EP2852885A2 (en) | 2015-04-01 |
WO2013177193A2 (en) | 2013-11-28 |
WO2013177193A8 (en) | 2015-04-02 |
DE202013012477U1 (en) | 2017-01-17 |
CN104641344B (en) | 2017-10-27 |
CN104641344A (en) | 2015-05-20 |
WO2013177193A3 (en) | 2014-03-13 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9069835B2 (en) | Organizing data in a distributed storage system | |
US9659038B2 (en) | Efficient snapshot read of a database in a distributed storage system | |
US11379428B2 (en) | Synchronization of client machines with a content management system repository | |
US11570255B2 (en) | SMB2 scaleout | |
US8255420B2 (en) | Distributed storage | |
US20150215405A1 (en) | Methods of managing and storing distributed files based on information-centric network | |
JP2019212336A (en) | Distributed caching cluster management | |
US10462250B2 (en) | Distributed caching cluster client configuration | |
US20120221603A1 (en) | Distributed mobile services | |
US9774676B2 (en) | Storing and moving data in a distributed storage system | |
US20070112812A1 (en) | System and method for writing data to a directory | |
US8572201B2 (en) | System and method for providing a directory service network | |
US10579597B1 (en) | Data-tiering service with multiple cold tier quality of service levels | |
US8478898B2 (en) | System and method for routing directory service operations in a directory service network | |
US11221993B2 (en) | Limited deduplication scope for distributed file systems | |
US20100332532A1 (en) | Distributed directory environment using clustered ldap servers | |
CN104750757A (en) | Data storage method and equipment based on HBase | |
US9712608B2 (en) | Elastically scalable document-oriented storage services | |
US8543700B1 (en) | Asynchronous content transfer | |
US9922031B2 (en) | System and method for efficient directory performance using non-persistent storage | |
WO2012046585A1 (en) | Distributed storage system, method of controlling same, and program | |
US10621148B1 (en) | Maintaining multiple object stores in a distributed file system | |
US10547677B1 (en) | System for data storage for distributed access | |
WO2007056766A2 (en) | System and method for efficient directory performance using non-persistent storage |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:DEAN, JEFFREY ADGATE;EPSTEIN, MICHAEL JAMES BOYER;FIKES, ANDREW;AND OTHERS;SIGNING DATES FROM 20141013 TO 20150401;REEL/FRAME:035314/0865 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044334/0466Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |