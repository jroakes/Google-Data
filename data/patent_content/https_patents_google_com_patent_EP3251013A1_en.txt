EP3251013A1 - Monitoring application loading - Google Patents
Monitoring application loadingInfo
- Publication number
- EP3251013A1 EP3251013A1 EP16745305.9A EP16745305A EP3251013A1 EP 3251013 A1 EP3251013 A1 EP 3251013A1 EP 16745305 A EP16745305 A EP 16745305A EP 3251013 A1 EP3251013 A1 EP 3251013A1
- Authority
- EP
- European Patent Office
- Prior art keywords
- native application
- application instance
- monitoring
- memory footprint
- load signal
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
- 238000012544 monitoring process Methods 0.000 title claims abstract description 57
- 230000000694 effects Effects 0.000 claims abstract description 83
- 238000000034 method Methods 0.000 claims abstract description 52
- 230000009193 crawling Effects 0.000 claims abstract description 43
- 230000004044 response Effects 0.000 claims abstract description 36
- 239000000470 constituent Substances 0.000 claims description 39
- 238000012545 processing Methods 0.000 claims description 15
- 238000004590 computer program Methods 0.000 claims description 13
- 230000008569 process Effects 0.000 description 35
- 238000010586 diagram Methods 0.000 description 10
- 238000004891 communication Methods 0.000 description 6
- 230000008901 benefit Effects 0.000 description 3
- 230000001419 dependent effect Effects 0.000 description 3
- 230000003993 interaction Effects 0.000 description 3
- 238000013515 script Methods 0.000 description 3
- 230000007704 transition Effects 0.000 description 3
- 230000007613 environmental effect Effects 0.000 description 2
- 230000006870 function Effects 0.000 description 2
- 230000001788 irregular Effects 0.000 description 2
- 230000000644 propagated effect Effects 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 230000008859 change Effects 0.000 description 1
- 238000010411 cooking Methods 0.000 description 1
- 230000007423 decrease Effects 0.000 description 1
- 238000005516 engineering process Methods 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000010801 machine learning Methods 0.000 description 1
- 238000012423 maintenance Methods 0.000 description 1
- 238000010295 mobile communication Methods 0.000 description 1
- 230000003287 optical effect Effects 0.000 description 1
- 238000002360 preparation method Methods 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 230000001360 synchronised effect Effects 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/30—Monitoring
- G06F11/34—Recording or statistical evaluation of computer activity, e.g. of down time, of input/output operation ; Recording or statistical evaluation of user activity, e.g. usability assessment
- G06F11/3409—Recording or statistical evaluation of computer activity, e.g. of down time, of input/output operation ; Recording or statistical evaluation of user activity, e.g. usability assessment for performance assessment
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/30—Monitoring
- G06F11/3003—Monitoring arrangements specially adapted to the computing system or computing system component being monitored
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/30—Monitoring
- G06F11/3003—Monitoring arrangements specially adapted to the computing system or computing system component being monitored
- G06F11/302—Monitoring arrangements specially adapted to the computing system or computing system component being monitored where the computing system component is a software system
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/30—Monitoring
- G06F11/3003—Monitoring arrangements specially adapted to the computing system or computing system component being monitored
- G06F11/3024—Monitoring arrangements specially adapted to the computing system or computing system component being monitored where the computing system component is a central processing unit [CPU]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/30—Monitoring
- G06F11/3003—Monitoring arrangements specially adapted to the computing system or computing system component being monitored
- G06F11/3037—Monitoring arrangements specially adapted to the computing system or computing system component being monitored where the computing system component is a memory, e.g. virtual memory, cache
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/30—Monitoring
- G06F11/3055—Monitoring arrangements for monitoring the status of the computing system or of the computing system component, e.g. monitoring if the computing system is on, off, available, not available
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/30—Monitoring
- G06F11/34—Recording or statistical evaluation of computer activity, e.g. of down time, of input/output operation ; Recording or statistical evaluation of user activity, e.g. usability assessment
- G06F11/3466—Performance evaluation by tracing or monitoring
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/30—Monitoring
- G06F11/34—Recording or statistical evaluation of computer activity, e.g. of down time, of input/output operation ; Recording or statistical evaluation of user activity, e.g. usability assessment
- G06F11/3466—Performance evaluation by tracing or monitoring
- G06F11/3495—Performance evaluation by tracing or monitoring for systems
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/33—Querying
- G06F16/3331—Query processing
- G06F16/3332—Query translation
- G06F16/3334—Selection or weighting of terms from queries, including natural language queries
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/54—Interprogram communication
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/54—Interprogram communication
- G06F9/542—Event management; Broadcasting; Multicasting; Notifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/30—Monitoring
- G06F11/3089—Monitoring arrangements determined by the means or processing involved in sensing the monitored data, e.g. interfaces, connectors, sensors, probes, agents
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/30—Monitoring
- G06F11/34—Recording or statistical evaluation of computer activity, e.g. of down time, of input/output operation ; Recording or statistical evaluation of user activity, e.g. usability assessment
- G06F11/3409—Recording or statistical evaluation of computer activity, e.g. of down time, of input/output operation ; Recording or statistical evaluation of user activity, e.g. usability assessment for performance assessment
- G06F11/3419—Recording or statistical evaluation of computer activity, e.g. of down time, of input/output operation ; Recording or statistical evaluation of user activity, e.g. usability assessment for performance assessment by assessing time
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2201/00—Indexing scheme relating to error detection, to error correction, and to monitoring
- G06F2201/86—Event-based monitoring
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2201/00—Indexing scheme relating to error detection, to error correction, and to monitoring
- G06F2201/865—Monitoring of software
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2201/00—Indexing scheme relating to error detection, to error correction, and to monitoring
- G06F2201/875—Monitoring of systems including the internet
Definitions
- the Internet provides access to a wide variety of information.
- digital image files, video and/or audio files, as well as web page resources for particular subjects or particular news articles are accessible over the Internet.
- web page resources many of these resources are designed to facilitate the performing of particular functions, such as banking, booking hotel reservations, shopping, etc., or to provide structured information, such as on-line encyclopedias, movie databases, etc.
- a deep link is an instruction specifying a particular environment instance of a native application and configured to cause the native application to instantiate the environment instance of the specified native application when selected at a user device.
- the native application generates the environment instance for display within the native application on a user device.
- the search system may crawl and index the content provided in the environmental instance.
- This specification describes technologies relating to monitoring application loading to determine when an application is sufficiently instantiated to be subject to a crawling operation.
- one innovative aspect of the subject matter described in this specification include the actions of instantiating a native application instance that generates environment instances for display on a user device within the native application instance; in response to the instantiation of the native application instance: monitoring for occurrences of activity lifecycle events of the native application instance, monitoring for changes in a memory footprint of the native application instance, and generating, in response to the monitoring of the lifecycle events and monitoring of the changes in the memory footprint indicating the native application instance is sufficiently instantiated to be subject to a crawling operation, a load signal indicating the native application instance is sufficiently instantiated to be subject to the crawling operation.
- Other embodiments of this aspect include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices.
- FIG. 1 is a block diagram of an example environment in which native applications are indexed in response to determining the native applications are sufficiently instantiated.
- Fig. 2 is a flow diagram of an example process for determining whether an application is sufficiently instantiated.
- Fig. 3 is a flow diagram of an example process for determining whether requests have been fulfilled.
- Fig. 4 is a flow diagram of an example process for determining whether an activity lifecycle of the native application indicates sufficient instantiation.
- Fig. 5 is a flow diagram of an example process for determining whether a memory footprint of the native application indicates sufficient instantiation.
- a system receives a set of deep links for a native application and, for each deep link, instantiates the native application in preparation for crawling and indexing content provided by the native application in response to the deep link.
- a native application generates environment instances for display on a user device within an environment of the native application, and operates independent of a browser application on the user device.
- a native application is an application specifically designed to run on a particular user device operating system and machine firmware. Native applications thus differ from browser-based applications and browser-rendered resources. The latter require all, or at least some, elements or instructions downloaded from a web server each time they are instantiated or rendered.
- browser-based applications and browser-rendered resources can be processed by all web-capable mobile devices within the browser and thus are not operating system specific.
- a deep link is an instruction specifying a particular environment instance of a native application and configured to cause the native application to instantiate the environment instance of the specified native application when selected at a user device.
- the native application generates the environment instance for display within the native application on a user device.
- a deep link may specify a selection menu for a game environment; or content from a website, such as a news site, forum, and the like; or a particular recipe for a cooking application; and the like.
- the system To properly crawl and index native application content, the system must determine when the native application is sufficiently instantiated, e.g., finished loading and displaying the content that should be crawled for the deep link. Applications, however, may go through many states: fetching some content, processing the content, showing intermediate results before displaying final results, etc.
- the system and methods in this specification perform an automatic and application-independent way of determining when an application is sufficiently instantiated for a crawling and indexing operation.
- the system in response to the instantiation of the native application instance, monitors for occurrences of activity lifecycle events of the native application instance and monitors for changes in a memory footprint of the native application instance.
- the system When the monitoring indicates that the native application is sufficiently instantiated to be subject to the crawling operation, the system generates a load signal.
- the load signal causes a crawling system to crawl and index the content of the native application instance.
- the load signal is generated based on monitoring a lack of a new activity lifecycle event and monitoring a steady memory footprint.
- each monitored load factor must have a constituent load signal generated before the load signal for the native application is generated.
- the constituent load signals may serve as votes, and the load signal for the native application is generated when a majority of constituent load signals is generated.
- any given constituent load signal may be dependent on another constituent load signal, e.g., a constituent load signal for the memory footprint may not be generated until a constituent load signal for the activity lifecycle events is generated, or vice-versa.
- FIG. 1 is a block diagram of an example environment 100 in which native applications are indexed in response to determining the native applications are sufficiently instantiated.
- a computer network 102 such as the Internet, connects resource publisher web sites 104, application publishers 106, user devices 108 and a search system 110.
- a resource publisher website 104 includes one or more web resources 105 associated with a domain and hosted by one or more servers in one or more locations.
- a resource publisher website is a collection of web pages formatted in hypertext markup language (HTML) that can contain text, images, multimedia content, and programming elements.
- HTML hypertext markup language
- Each website 104 is maintained by a content publisher, which is an entity that controls, manages and/or owns the website 104.
- a web page resource is any data that can be provided by a publisher website 104 over the network 102 and that has a resource address, e.g., a uniform resource locator (URL).
- Web resources may be HTML pages, images files, video files, audio files, and feed sources, to name just a few.
- the resources may include embedded information, e.g., meta information and hyperlinks, and/or embedded instructions, e.g., client-side scripts.
- An application publisher website 106 may also include one or more web resources 105, and also provides native applications 107.
- a native application 107 is an application specifically designed to run on a particular user device operating system and machine firmware.
- an "environment instance" is a display environment within a native application and in which is displayed content, such as text, images, and the like.
- An environment instance is specific to the particular native application, and the native application is specific to the particular operating system of the user device 108.
- An environment instance differs from a rendered web resource in that the environment instance is generated within and specific to the native application, while a web resource may be rendered in any browser for which the web page resource is compatible, and is independent of the operating system of the user device.
- a user device 108 is an electronic device that is under the control of a user.
- a user device 108 is typically capable of requesting and receiving web page resources 105 and native applications 107 over the network 102.
- Example user devices 108 include personal computers, mobile communication devices, and tablet computers.
- the search system 110 accesses a web index 112 and an application index 114.
- the web index 112 is an index of web resources 105 that has, for example, been built from crawling the publisher web sites 104.
- the application index 114 is an index of environment instances for native applications 107, and is constructed using an indexer 114 that receives data crawled from an application instance 122 of a native application. Although shown as separate indexes, the web index 112 and the application index 114 can be combined in a single index.
- the user devices 108 submit search queries to the search system 110.
- the search system 110 accesses the web index 112 and the application index 114 to respectively identify resources and applications that are relevant to the query.
- the search system 110 may, for example, identify the resources and applications in the form of web resource search results and native application search results, respectively. Once generated, the search results are provided to the user device 108 from which the query was received.
- a web resource search result is data generated by the search system 110 that identifies a web resource and provides information that satisfies a particular search query.
- a web resource search result for a resource can include a web page title, a snippet of text extracted from the resource, and a resource locator for the resource, e.g., the URL of a web page.
- a native application search result specifies a native application and is generated in response to a search of the application index 114 of environment instances.
- a native application search results includes a "deep link" specifying a particular environment instance of the native application and which is configured to cause the native application to instantiate the specified environmental instance. For example, selection of a native application search result may cause the native application to launch (if installed on the user device 108) and generate an environment instance referenced in the application search result in the form of a screen shot.
- publishers 106 that provide native applications 107 also provide deep links to the search system 110.
- third parties may also provide deep links for native applications.
- the search system 110 can discover deep links from other multiple sources, such as app maps, web page annotations, etc., and thus the set of deep links may be constantly changing.
- an application publisher may provide a list of deep links 109 in the form of uniform resource identifiers (URIs) (or other instruction types that are specific to the native application published by the publisher).
- URIs uniform resource identifiers
- the search system 110 uses an operating system emulator 120 that emulates an operating system on which native applications 107 are executed.
- the operating system emulator 120 instantiates an instance 122 of a native application for each deep link 109.
- a load detector 130 receives data from a request monitor 124, an activity monitor 125, and a memory monitor 126, and, using the received data, determines whether the native application instance 122 is sufficiently instantiated for a crawling and indexing operation.
- the load detector 130 determines the native application instance 122 is sufficiently instantiated for the crawling and indexing operation, the load detector 130 generates a load signal.
- a data extractor 128 receives the load signal, and in response crawls the content of the native application instance 122.
- the crawled content is provided to the indexer 140, which then indexes the content of the native application in the application index 114.
- FIG. 2 is a flow diagram of an example process 200 for determining whether an application is loaded.
- the process 200 can be implemented in a data processing apparatus, such as one or more computers in data communication.
- the process 200 instantiates an instance of a native application (202).
- the OS emulator 120 selects a deep link 109 to instantiate a native application.
- the OS emulator 120 is configured to instrument the instance 122 of the native application so that the request monitor 124, activity monitor 125, and memory monitor 126 can monitor the status of requests, activities, and memory related to the instantiation of the native application, respectively.
- Each of the request monitor 124, activity monitor 125, and memory monitor 126 may include a process that is loaded in the same application process space or loaded entirely separate from the application instance 122.
- the process 200 monitors constituent load signal sources, which in the current implementation may include requests for content sent from the native application instance to serving entities that are external to the native application instance, activity lifecycle of the native application instance, and the memory footprint of the native application instance (204).
- constituent load signals are not required to be monitored in a particular or defined order, and the constituent load signals may be monitored simultaneously.
- the monitoring of constituent load signals may be dependent on each other, e.g., activity lifecycle events are monitored until a constitute activity lifecycle load signal is generated, and then the memory footprint of the native application is monitored.
- the constituent load signal sources are not monitored until a launch timeout has occurred. For example, after instantiation of the instance of the native application, a launch timeout may occur prior to monitoring the crawling operation parameters.
- the request monitor 124 may monitor requests for content sent from the native application instance to serving entities that are external to the native application instance (204a).
- the request monitor 124 may be configured to act as a proxy that intercepts requests, logs the requests, and then sends the requests to the external services. The time the request was sent is monitored by the request monitor 124 and the content received in response to the request is also monitored.
- the request monitor 124 provides the content to the application instance 122.
- a determination may be made as to whether each monitored request is fulfilled. For each request, the request monitor 124 determines, for example, whether content has been received for the request.
- the request monitor 124 may determine whether the content is responsive to the request. Additionally, the request monitor 124 may also determine if a request has timed out, e.g., a response has not been received within a predefined timeout period.
- Fig. 3 describes in more detail an example process 300 of determining whether a request is fulfilled.
- the request monitor 124 determines, based on the monitoring requests for content, that the native application instance is sufficiently instantiated to be subject to the crawling operation, it generates a request load signal.
- the request load signal is a constituent indication that the native application is sufficiently loaded to be crawled.
- the activity monitor 125 may monitor activity lifecycle events of the native application instance (204b).
- An activity lifecycle event is an event that describes a transition between different states in an application lifecycle. For example, during a splash screen, an application may be in a first lifecycle event, and then the transition from the splash screen to a main menu may be indicated by a second lifecycle event. The two events that occur in sequence may be the same, or may be different.
- the OS emulator 120 implementing the application instance 122 may be instrumented to monitor the lifecycle events and determine an activity lifecycle event state of the native application. For example, states of an activity may be running, paused, background, or stopped, among others. Operations performed by the native application may result in change of an activity lifecycle state.
- Example activity lifecycle events include OnCreate( ), OnStart ( ), OnResume ( ), OnPause ( ), OnStop ( ), OnRestart ( ), and OnDestroy ( ), among others.
- the activity lifecycle in some implementations, may be the collection of methods called by the OS emulator 120 for each activity of the application instance 122, and an activity lifecycle event may occur when a method is called by the OS emulator 120 for an activity of the application instance 122.
- the activity monitor 125 may monitor, e.g., by intercepting, the OS emulator 120 calls to the activities of the application instance 122 in order to determine if an activity lifecycle event has occurred for an activity of the application instance 122.
- the monitoring of the activity lifecycle may be performed by sandboxing, or otherwise isolating, the application instance 122.
- Fig. 4 below describes in more detail an example process 400 of determining whether an activity lifecycle of the native application indicates sufficient instantiation.
- the activity monitor 125 determines, based on monitored activity lifecycle events, that the native application instance is sufficiently instantiated to be subject to the crawling operation, it generates an activity lifecycle load signal.
- the activity lifecycle load signal is a constituent indication that the native application is sufficiently loaded to be crawled.
- the memory monitor 126 may monitor the operation parameter of the memory footprint of the native application instance (204c). For example, the memory monitor 126 may monitor the memory footprint or amount of memory the application instance 122 is consuming. During operation of the application instance 122, memory of the OS emulator 120 will be consumed by the application instance 122, and when the application instance 122 is launched, the amount of memory consumed by the application instance 122 will increase. In some implementations, after launching the application instance 122, a steady memory footprint of the application instance 122 may be reached. The memory footprint of the application instance 122 may be determined by the memory monitor 126 continuously or at different points in time, which may be at regular intervals, irregular intervals, or at different transition points of the application.
- the memory monitor 126 may determine the memory footprint of the application instance 122 when the application instance 122 is launched, and then determine the memory footprint when a new application instance 122 activity is initiated.
- Fig. 5 below describes in more detail an example process 500 of determining whether a memory footprint of the native application indicates sufficient instantiation.
- the memory monitor 126 determines, based on monitored memory footprint values, that the native application instance is sufficiently instantiated to be subject to the crawling operation, it generates a memory footprint load signal.
- the memory footprint load signal is a constituent indication that the native application is sufficiently loaded to be crawled.
- the system determines whether to generate a load signal (206). For example, the load detector 130 may receive the data from the request monitor 124, the activity monitor 125, and the memory monitor 126, and, using the received data, determine if the native application instance 122 is sufficiently instantiated for a crawling and indexing operation.
- each monitored load factor must have a constituent load signal generated before the load signal for the native application is generated, e.g., the load signal is logical AND of the constituent load signals.
- the constituent load signals are tallied as votes by the load detector 130, and the load signal for the native application is generated when a majority of constituent load signals is generated.
- any given constituent load signal may be dependent on another constituent load signal, e.g., a constituent load signal for the memory footprint may not be generated until a constituent load signal for the activity lifecycle events is generated, or vice-versa.
- the load detector 130 determines the native application instance 122 is sufficiently instantiated for the crawling and indexing operation, the load detector 130 generates the load signal (208), and in response the data extractor 128 receives the load signal and crawls the content of the native application instance 122. The indexer 140 then indexes the crawled data. Otherwise, if the process 200 determines, based on monitoring the constituent load signal sources, that the application instance 122 is not sufficiently instantiated to be subject to the crawling process, then the process 200 returns to monitoring the constituent load signal sources (204).
- Fig. 3 is a flow diagram of an example process 300 for determining whether requests have been fulfilled.
- the process 300 monitors requests (302). For example, as described above, the request monitor 124 monitors for content to be returned for requests.
- the process 300 determines whether content is returned for the requests (304). If content is returned for each of the requests, then the process may determine that the requests are fulfilled and generates a constituent request load signal (306), depending on the content returned. For example, in some implementations, a request is deemed fulfilled only if the content received is responsive to the request, and does not indicate an incomplete response or an error. An error may be a notification that an address to which the request was sent is unresolvable or a requested resource no longer exits. In some implementations, the failure of the request being fulfilled will preclude crawling and indexing of the native application instance 122. Such a result may be desirable to ensure that the search system 110 provides search results for only deep links for which content is available.
- a request is deemed fulfilled even if the content received indicates an incomplete response or an error. This can occur when it is desired to index a native application using "best efforts." Thus, even if all the requested content is not available, at least the content received will be crawled and indexed.
- the process 300 determines if timeouts for the remaining requests have occurred (308). This stage may be optional, and can be implemented when it is desired to index a native application using best efforts as described above.
- the request timeout can be a time period that is selected so that at the expiration of the time period the request is likely to have been fulfilled but for an error.
- the time can be selected based on historical observations, or can be a fixed time period, e.g., five seconds. The time period is measured from the time the request handler 124 sent the request.
- Fig. 4 is a flow diagram of an example process 400 for determining whether activity lifecycle events of the native application indicates sufficient instantiation.
- the activity monitor 125 may monitor the activity lifecycle of the native application instance (402).
- the activity monitor 125 may monitor (e.g., intercept) the OS emulator 120 calls to the activities of the application instance 122 in order to determine if an activity lifecycle event has occurred for an activity of the application instance 122.
- the activity monitor 125 determines whether a lifecycle event has occurred within a time period (404). If it is determined there has been a new activity lifecycle event in the period of time, then the activity monitor 125 resets the time period and monitors the activity lifecycle events, returning to step 402.
- the activity lifecycle timeout may be a same or different time compared to a launch timeout, a timeout request, or any timeout associated with the memory monitor 126.
- the time period of the activity lifecycle timeout may be a time that is determined to be sufficient for the application instance 122 to instantiate, and may be set by system administrators or learned by a machine learning system.
- the activity monitor 125 When there is not an activity lifecycle event within the activity lifecycle timeout (406), the activity monitor 125 generates a constituent activity lifecycle load signal (406). The load detector 130 may then use this information, along with other constituent load signals, to determine if the application instance 122 has sufficient instantiation for the crawling operation.
- Fig. 5 is a flow diagram of an example process 500 for determining whether a memory footprint of the native application indicates sufficient instantiation.
- the memory footprint of the application instance 122 may be determined at a first time (502).
- the memory monitor 126 may monitor the memory footprint or amount of memory the application instance 122 is consuming.
- memory of the OS emulator 120 will be consumed by the application instance 122, and when the application instance 122 is launched, the amount of memory consumed by the application instance 122 will increase.
- a steady memory footprint of the application instance 122 may occur after the application is fully loaded.
- the memory footprint may be the application instance's 122 memory footprint, which may be the amount of main memory of the user device 108 the application instance 122 is using or referencing at a particular time.
- the application instance's 122 memory footprint may be determined from a heap size associated with the native application.
- the first time for determining the memory footprint of the application instance 122 may be at the time the application is launched. However, there can also be a memory footprint timeout after the application instance 122 is launched before the first memory footprint is obtained. The timeout may be a same or different time compared to the timeouts previously described. Alternatively, the first memory footprint may be obtained when the constituent activity lifecycle load signal is generated.
- the memory footprint of the application instance 122 is determined at a second time (504). From the first time, the second time may be a regular interval (e.g., 50 milliseconds), an irregular interval (e.g., a range between two seconds and ten seconds), or after some other native application event.
- the second time may be a regular interval (e.g., 50 milliseconds), an irregular interval (e.g., a range between two seconds and ten seconds), or after some other native application event.
- the process 500 determines whether the memory footprint at the second time is greater than the memory footprint at the first time (506). When the application instance 122 is launched, the amount of memory consumed by the application instance 122 will increase, and after launching of the application instance 122 is complete, a steady, unchanging memory footprint of the application instance 122 may be reached. If the memory footprint at the second time is not greater than the memory footprint at the first time (508), then there is an indication, based on the memory footprint determined by the memory monitor 126, that the application instance 122 has reached a point of sufficient instantiation for the crawling operation. The memory monitor then generates the constituent memory footprint load signal (508).
- process 500 may return to step 502.
- the process 500 after the first determination that the memory footprint at the second time is greater than the memory footprint at the first time, may instead return to step 504 to compare a current footprint value collected at another iteration of step 504 to a prior footprint value collected at a prior iteration of step 504. As previously described, if the memory footprint is greater at the second time than the first time (or greater at current time than at a prior time), then there is an indication that the application instance 122 has not reached a point of sufficient instantiation for the crawling operation to take place.
- the users may be provided with an opportunity to control whether programs or features collect user information (e.g., information about a user's social network, social actions or activities, profession, a user's preferences, or a user's current location), or to control whether and/or how to receive content from the content server that may be more relevant to the user.
- user information e.g., information about a user's social network, social actions or activities, profession, a user's preferences, or a user's current location
- certain data may be treated in one or more ways before it is stored or used, so that personally identifiable information is removed.
- a user's identity may be treated so that no personally identifiable information can be determined for the user, or a user's geographic location may be generalized where location information is obtained (such as to a city, ZIP code, or state level), so that a particular location of a user cannot be determined.
- location information such as to a city, ZIP code, or state level
- the user may have control over how information is collected about the user and used by a content server.
- Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer storage medium for execution by, or to control the operation of, data processing apparatus.
- a computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them.
- a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal.
- the computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
- the operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
- data processing apparatus encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing.
- the apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- the apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross- platform runtime environment, a virtual machine, or a combination of one or more of them.
- code that creates an execution environment for the computer program in question e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross- platform runtime environment, a virtual machine, or a combination of one or more of them.
- the apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
- a computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment.
- a computer program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code).
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- the processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output.
- the processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., a FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- special purpose logic circuitry e.g., a FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer.
- a processor will receive instructions and data from a read-only memory or a random access memory or both.
- the essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), to name just a few.
- Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- a keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a user computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network.
- Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
- LAN local area network
- WAN wide area network
- inter-network e.g., the Internet
- peer-to-peer networks e.g., ad hoc peer-to-peer networks.
- the computing system can include users and servers.
- a user and server are generally remote from each other and typically interact through a communication network. The relationship of user and server arises by virtue of computer programs running on the respective computers and having a user-server relationship to each other.
- a server transmits data (e.g., an HTML page) to a user device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the user device).
- Data generated at the user device e.g., a result of the user interaction
Abstract
Description
Claims
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/807,772 US9348671B1 (en) | 2015-07-23 | 2015-07-23 | Monitoring application loading |
PCT/US2016/042566 WO2017015139A1 (en) | 2015-07-23 | 2016-07-15 | Monitoring application loading |
Publications (2)
Publication Number | Publication Date |
---|---|
EP3251013A1 true EP3251013A1 (en) | 2017-12-06 |
EP3251013B1 EP3251013B1 (en) | 2018-12-05 |
Family
ID=55969693
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP16745305.9A Active EP3251013B1 (en) | 2015-07-23 | 2016-07-15 | Monitoring application loading |
Country Status (4)
Country | Link |
---|---|
US (2) | US9348671B1 (en) |
EP (1) | EP3251013B1 (en) |
CN (1) | CN107408065B (en) |
WO (1) | WO2017015139A1 (en) |
Families Citing this family (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8990183B2 (en) * | 2012-06-06 | 2015-03-24 | Microsoft Technology Licensing, Llc | Deep application crawling |
US10303802B2 (en) * | 2013-03-15 | 2019-05-28 | Gadget Software, Inc. | System for mobile application search |
US9984132B2 (en) * | 2015-12-31 | 2018-05-29 | Samsung Electronics Co., Ltd. | Combining search results to generate customized software application functions |
EP3627322A4 (en) * | 2017-06-14 | 2020-04-29 | Beijing Xiaomi Mobile Software Co., Ltd. | Application interaction method, interaction method and device |
CN109815083B (en) * | 2018-12-21 | 2021-06-04 | 瑞庭网络技术（上海）有限公司 | Application crash monitoring method and device, electronic equipment and medium |
CN110430324B (en) * | 2019-08-07 | 2021-07-09 | 华为技术有限公司 | Display method, electronic equipment and storage medium for application screen opening information |
US11301267B2 (en) * | 2020-05-22 | 2022-04-12 | Servicenow, Inc. | Automated task management techniques |
Family Cites Families (41)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6253317B1 (en) * | 1997-01-09 | 2001-06-26 | Sun Microsystems, Inc. | Method and apparatus for providing and handling traps |
AU2002359001A1 (en) * | 2001-12-28 | 2003-07-24 | Access Co., Ltd. | Usage period management system for applications |
US20040030882A1 (en) | 2002-08-08 | 2004-02-12 | Forman George Henry | Managed application pre-launching |
US7444471B1 (en) * | 2002-12-30 | 2008-10-28 | Transmeta Corporation | Method and system for using external storage to amortize CPU cycle utilization |
US7076616B2 (en) | 2003-03-24 | 2006-07-11 | Sony Corporation | Application pre-launch to reduce user interface latency |
US7730012B2 (en) | 2004-06-25 | 2010-06-01 | Apple Inc. | Methods and systems for managing data |
EP1831796A4 (en) * | 2004-11-22 | 2010-01-27 | Truveo Inc | Method and apparatus for an application crawler |
WO2006055983A2 (en) * | 2004-11-22 | 2006-05-26 | Truveo, Inc. | Method and apparatus for a ranking engine |
US7584194B2 (en) * | 2004-11-22 | 2009-09-01 | Truveo, Inc. | Method and apparatus for an application crawler |
US8707451B2 (en) | 2006-03-01 | 2014-04-22 | Oracle International Corporation | Search hit URL modification for secure application integration |
US8086957B2 (en) | 2008-05-21 | 2011-12-27 | International Business Machines Corporation | Method and system to selectively secure the display of advertisements on web browsers |
US20100257466A1 (en) | 2009-04-01 | 2010-10-07 | Yahoo! Inc. | Method and system for generating a mini-software application corresponding to a web site |
CN102483753A (en) | 2009-05-27 | 2012-05-30 | 谷歌公司 | Computer Application Data In Search Results |
US8468592B2 (en) * | 2009-07-31 | 2013-06-18 | Google Inc. | Native code module security for 64-bit instruction set architectures |
US8458384B2 (en) | 2010-02-03 | 2013-06-04 | National Instruments Corporation | Automatically launching a measurement application in response to measurement device connection |
US9098363B2 (en) | 2010-04-07 | 2015-08-04 | Apple Inc. | Search extensibility to third party applications |
US8515979B2 (en) | 2010-06-18 | 2013-08-20 | Verizon Patent And Licensing, Inc. | Cross application execution service |
US20120124061A1 (en) | 2010-11-12 | 2012-05-17 | Microsoft Corporation | Rich Search Over and Deep Integration with Applications |
US8909697B2 (en) | 2010-11-29 | 2014-12-09 | Hughes Network Systems, Llc | Computer networking system and method with javascript execution for pre-fetching content from dynamically-generated URL and javascript injection to modify date or random number calculation |
US8972438B2 (en) * | 2010-12-06 | 2015-03-03 | International Business Machines Corporation | Database access for native applications in a virtualized environment |
US9858092B2 (en) | 2011-01-06 | 2018-01-02 | Mitel Networks Corporation | Contextual application launch via search query |
US9317621B2 (en) | 2011-01-06 | 2016-04-19 | Microsoft Technology Licensing, Llc | Providing deep links in association with toolbars |
US20120316955A1 (en) | 2011-04-06 | 2012-12-13 | Yahoo! Inc. | System and Method for Mobile Application Search |
EP2712442A1 (en) | 2011-05-09 | 2014-04-02 | Google, Inc. | Recommending applications for mobile devices based on installation histories |
US9519726B2 (en) | 2011-06-16 | 2016-12-13 | Amit Kumar | Surfacing applications based on browsing activity |
US8650139B2 (en) | 2011-07-01 | 2014-02-11 | Google Inc. | Predicting user navigation events |
KR101491878B1 (en) | 2011-08-31 | 2015-02-09 | 라인 가부시키가이샤 | System and method for providing ranking information of mobile application using information obtained from user terminal |
US20130110815A1 (en) | 2011-10-28 | 2013-05-02 | Microsoft Corporation | Generating and presenting deep links |
CA2854142A1 (en) | 2011-11-01 | 2013-05-10 | Google Inc. | Launching applications from webpages |
US8554345B2 (en) | 2011-11-10 | 2013-10-08 | Cbs Interactive, Inc. | APP rating system |
KR101295644B1 (en) | 2011-11-11 | 2013-09-16 | 한국전자통신연구원 | System and method for verifying smart phone application |
US20130124606A1 (en) | 2011-11-14 | 2013-05-16 | Boopsie, Inc. | Automatic personalization of downloadable mobile apps |
US8793235B2 (en) | 2012-01-19 | 2014-07-29 | Google Inc. | System and method for improving access to search results |
GB2501276A (en) | 2012-04-18 | 2013-10-23 | Ibm | Determining web page loading at a client |
US9510141B2 (en) | 2012-06-04 | 2016-11-29 | Apple Inc. | App recommendation using crowd-sourced localized app usage data |
US8510764B1 (en) | 2012-11-02 | 2013-08-13 | Google Inc. | Method and system for deep links in application contexts |
US9002821B2 (en) * | 2013-01-16 | 2015-04-07 | Google Inc. | Indexing application pages of native applications |
US9135346B2 (en) * | 2013-06-07 | 2015-09-15 | Google Inc. | Index data for native applications |
US9305322B2 (en) * | 2013-07-23 | 2016-04-05 | Facebook, Inc. | Native application testing |
US9311407B2 (en) * | 2013-09-05 | 2016-04-12 | Google Inc. | Native application search results |
US20150205595A1 (en) * | 2014-01-20 | 2015-07-23 | Vonage Network Llc | Method and system for intelligent configuration of a native application |
-
2015
- 2015-07-23 US US14/807,772 patent/US9348671B1/en active Active
- 2015-12-22 US US14/978,121 patent/US9436531B1/en active Active
-
2016
- 2016-07-15 WO PCT/US2016/042566 patent/WO2017015139A1/en active Application Filing
- 2016-07-15 CN CN201680018508.1A patent/CN107408065B/en active Active
- 2016-07-15 EP EP16745305.9A patent/EP3251013B1/en active Active
Also Published As
Publication number | Publication date |
---|---|
CN107408065B (en) | 2021-02-12 |
EP3251013B1 (en) | 2018-12-05 |
US9436531B1 (en) | 2016-09-06 |
CN107408065A (en) | 2017-11-28 |
US9348671B1 (en) | 2016-05-24 |
WO2017015139A1 (en) | 2017-01-26 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
EP3251013B1 (en) | Monitoring application loading | |
US9652550B2 (en) | Indexing application pages of native applications | |
US10068028B1 (en) | Deep link verification for native applications | |
EP3161678B1 (en) | Deep links for native applications | |
US9547721B2 (en) | Native application search results | |
US9146972B2 (en) | Ranking of presentation modes for particular content | |
US20230106266A1 (en) | Indexing Access Limited Native Applications | |
US20200356616A1 (en) | Indexing actions for resources | |
JP6410992B1 (en) | Pre-instantiating native applications in the background | |
US9513961B1 (en) | Monitoring application loading | |
US11003728B1 (en) | Native application search results |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: THE INTERNATIONAL PUBLICATION HAS BEEN MADE |
|
PUAI | Public reference made under article 153(3) epc to a published international application that has entered the european phase |
Free format text: ORIGINAL CODE: 0009012 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: REQUEST FOR EXAMINATION WAS MADE |
|
17P | Request for examination filed |
Effective date: 20170831 |
|
AK | Designated contracting states |
Kind code of ref document: A1Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
AX | Request for extension of the european patent |
Extension state: BA ME |
|
RAP1 | Party data changed (applicant data changed or rights of an application transferred) |
Owner name: GOOGLE LLC |
|
GRAP | Despatch of communication of intention to grant a patent |
Free format text: ORIGINAL CODE: EPIDOSNIGR1 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: GRANT OF PATENT IS INTENDED |
|
RIC1 | Information provided on ipc code assigned before grant |
Ipc: G06F 9/54 20060101ALI20180522BHEPIpc: G06F 17/30 20060101ALI20180522BHEPIpc: G06F 11/30 20060101AFI20180522BHEPIpc: G06F 11/34 20060101ALI20180522BHEP |
|
DAV | Request for validation of the european patent (deleted) | ||
DAX | Request for extension of the european patent (deleted) | ||
INTG | Intention to grant announced |
Effective date: 20180612 |
|
GRAS | Grant fee paid |
Free format text: ORIGINAL CODE: EPIDOSNIGR3 |
|
GRAA | (expected) grant |
Free format text: ORIGINAL CODE: 0009210 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: THE PATENT HAS BEEN GRANTED |
|
AK | Designated contracting states |
Kind code of ref document: B1Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
REG | Reference to a national code |
Ref country code: GBRef legal event code: FG4D |
|
REG | Reference to a national code |
Ref country code: CHRef legal event code: EP |
|
REG | Reference to a national code |
Ref country code: ATRef legal event code: REFRef document number: 1073914Country of ref document: ATKind code of ref document: TEffective date: 20181215 |
|
REG | Reference to a national code |
Ref country code: IERef legal event code: FG4D |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R096Ref document number: 602016007888Country of ref document: DE |
|
REG | Reference to a national code |
Ref country code: NLRef legal event code: FP |
|
REG | Reference to a national code |
Ref country code: ATRef legal event code: MK05Ref document number: 1073914Country of ref document: ATKind code of ref document: TEffective date: 20181205 |
|
REG | Reference to a national code |
Ref country code: LTRef legal event code: MG4D |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: FIFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20181205Ref country code: BGFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20190305Ref country code: LVFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20181205Ref country code: ATFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20181205Ref country code: HRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20181205Ref country code: LTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20181205Ref country code: ESFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20181205Ref country code: NOFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20190305 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: ALFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20181205Ref country code: GRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20190306Ref country code: RSFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20181205Ref country code: SEFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20181205 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: CZFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20181205Ref country code: PTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20190405Ref country code: ITFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20181205Ref country code: PLFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20181205 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: EEFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20181205Ref country code: SMFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20181205Ref country code: SKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20181205Ref country code: ISFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20190405Ref country code: ROFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20181205 |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R097Ref document number: 602016007888Country of ref document: DE |
|
PLBE | No opposition filed within time limit |
Free format text: ORIGINAL CODE: 0009261 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: NO OPPOSITION FILED WITHIN TIME LIMIT |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: SIFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20181205Ref country code: DKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20181205 |
|
26N | No opposition filed |
Effective date: 20190906 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: MCFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20181205 |
|
REG | Reference to a national code |
Ref country code: CHRef legal event code: PL |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: TRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20181205 |
|
REG | Reference to a national code |
Ref country code: BERef legal event code: MMEffective date: 20190731 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: LIFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20190731Ref country code: LUFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20190715Ref country code: BEFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20190731Ref country code: CHFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20190731 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: IEFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20190715 |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R082Ref document number: 602016007888Country of ref document: DERepresentative=s name: VENNER SHIPLEY GERMANY LLP, DERef country code: DERef legal event code: R082Ref document number: 602016007888Country of ref document: DERepresentative=s name: VENNER SHIPLEY LLP, DE |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: CYFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20181205 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: HUFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMIT; INVALID AB INITIOEffective date: 20160715Ref country code: MTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20181205 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: MKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20181205 |
|
P01 | Opt-out of the competence of the unified patent court (upc) registered |
Effective date: 20230506 |
|
PGFP | Annual fee paid to national office [announced via postgrant information from national office to epo] |
Ref country code: NLPayment date: 20230726Year of fee payment: 8 |
|
PGFP | Annual fee paid to national office [announced via postgrant information from national office to epo] |
Ref country code: GBPayment date: 20230727Year of fee payment: 8 |
|
PGFP | Annual fee paid to national office [announced via postgrant information from national office to epo] |
Ref country code: FRPayment date: 20230725Year of fee payment: 8Ref country code: DEPayment date: 20230727Year of fee payment: 8 |