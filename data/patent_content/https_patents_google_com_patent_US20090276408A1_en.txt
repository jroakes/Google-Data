US20090276408A1 - Systems And Methods For Generating A User Interface - Google Patents
Systems And Methods For Generating A User Interface Download PDFInfo
- Publication number
- US20090276408A1 US20090276408A1 US12/504,475 US50447509A US2009276408A1 US 20090276408 A1 US20090276408 A1 US 20090276408A1 US 50447509 A US50447509 A US 50447509A US 2009276408 A1 US2009276408 A1 US 2009276408A1
- Authority
- US
- United States
- Prior art keywords
- article
- user
- insert
- request
- program code
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Abandoned
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/25—Integrating or interfacing systems involving database management systems
- G06F16/252—Integrating or interfacing systems involving database management systems between a Database Management System and a front-end application
Definitions
- the present invention relates generally to user interfaces.
- the present invention relates particularly to methods and systems for generating a user interface.
- Conventional search engines receive a search query from a user and execute a search against a global index.
- Such conventional search engines typically use one or more conventional methods for performing a search. For example, one known method, described in an article entitled “The Anatomy of a Large-Scale Hypertextual Search Engine,” by Sergey Brin and Lawrence Page, assigns a degree of importance to a document, such as a web page, based on the link structure of the web.
- the search results are often presented in a list format, comprising article identifiers and brief snippets about the documents.
- Various client applications include interfaces that combine various types of information. For example, some conventional productivity tools allow a user to view tasks and calendar entries simultaneously. Conventional applications do not, however, provide the user with the capability of combining the results of searches of both local and global information in a single, unified interface in an effective manner. Also, conventional search engines do not effectively allow the user to combine the results of a search of a messaging index with other search results.
- Embodiments of the present invention provide systems and methods for generating a user interface.
- One embodiment of the present invention comprises identifying an aspect associated with an article, generating an insert based, at least in part, on the aspect, and causing the insert to be output in association with the aspect.
- the insert may comprise a search result.
- the insert may comprise a request.
- FIG. 1 is a block diagram illustrating an exemplary environment in which one embodiment of the present invention may operate
- FIG. 2 is a flowchart illustrating generating a user interface in a first embodiment of the present invention
- FIG. 3 is a flowchart illustrating generating a user interface in a second embodiment of the present invention
- FIG. 4 is a flowchart illustrating generating a user interface in a third embodiment of the present invention.
- FIG. 5 is a screen shot illustrating a user interface according to a first embodiment of the present invention.
- FIG. 6 is a screen shot illustrating a user interface according to a second embodiment of the present invention.
- FIG. 7 is a screen shot illustrating a user interface according to a third embodiment of the present invention.
- Embodiments of the present invention provide systems and methods for generating a user interface. Exemplary embodiments are described below.
- FIG. 1 is a block diagram illustrating an exemplary environment for implementation of an embodiment of the present invention. While the environment shown in FIG. 1 reflects a client-side search engine architecture embodiment, other embodiments are possible.
- the system 100 shown in FIG. 1 includes multiple client devices 102 a - n that can communicate with a server device 150 over a network 106 .
- the network 106 shown in FIG. 1 comprises the Internet. In other embodiments, other networks, such as an intranet, may be used instead.
- methods according to the present invention may operate within a single client device that does not communicate with a server device or a network.
- the client devices 102 a - n shown in FIG. 1 each include a computer-readable medium 108 .
- the embodiment shown in FIG. 1 includes a random access memory (RAM) 108 coupled to a processor 110 .
- the processor 110 executes computer-executable program instructions stored in memory 108 .
- Such processors may include a microprocessor, an ASIC, state machines, or other processor, and can be any of a number of suitable computer processors, such as processors from Intel Corporation of Santa Clara, Calif. and Motorola Corporation of Schaumburg, Ill.
- Such processors include, or may be in communication with, media, for example computer-readable media, which stores instructions that, when executed by the processor, cause the processor to perform the steps described herein.
- Embodiments of computer-readable media include, but are not limited to, an electronic, optical, magnetic, or other storage or transmission device capable of providing a processor, such as the processor 110 of client 102 a , with computer-readable instructions.
- suitable media include, but are not limited to, a floppy disk, CD-ROM, DV)), magnetic disk, memory chip, ROM, RAM, an ASIC, a configured processor, all optical media, all magnetic tape or other magnetic media, or any other medium from which a computer processor can read instructions.
- various other forms of computer-readable media may transmit or carry instructions to a computer, including a router, private or public network, or other transmission device or channel, both wired and wireless.
- the instructions may comprise code from any suitable computer-programming language, including, for example, C, C++, C#, Visual Basic, Java, Python, Perl, and JavaScript.
- Client devices 102 a - n can be coupled to a network 106 , or alternatively, can be stand alone machines. Client devices 102 a - n may also include a number of external or internal devices such as a mouse, a CD-ROM, DVD, a keyboard, a display device, or other input or output devices. Examples of client devices 102 a - n are personal computers, digital assistants, personal digital assistants, cellular phones, mobile phones, smart phones, pagers, digital tablets, laptop computers, Internet appliances, and other processor-based devices. In general, the client devices 102 a - n may be any type of processor-based platform that operates on any suitable operating system, such as Microsoft® Windows® or Linux, capable of supporting one or more client application programs.
- any suitable operating system such as Microsoft® Windows® or Linux
- the client device 102 a can comprise a personal computer executing client application programs, also known as client applications 120 .
- the client applications 120 can be contained in memory 108 and can include, for example, a word processing application, a spreadsheet application, an email application, an instant messenger application, a presentation application, an Internet browser application, a media player application, a calendar/organizer application, a video playing application, an audio playing application, an image display application, a file management program, an operating system shell, and other applications capable of being executed by a client device.
- Client applications may also include client-side applications that interact with or access other applications (such as, for example, a web-browser executing on the client device 102 a that interacts with a remote e-mail server to access e-mail).
- the user 112 a can interact with the various client applications 120 and articles associated with the client applications 120 via various input and output devices of the client device 102 a .
- Articles include, for example, word processor documents, spreadsheet documents, presentation documents, emails, instant messenger messages, database entries, calendar entries, appointment entries, task manager entries, source code files, and other client application program content, files, messages, items, web pages of various formats, such as HTML, XML, XHTML, Portable Document Format (PDF) files, and media files, such as image files, audio files, and video files, chat messages, email messages, or any other documents or items or groups of documents or items or information of any suitable type whatsoever.
- PDF Portable Document Format
- the user's 112 a interaction with articles, the client applications 120 , and the client device 102 a creates event data that may be observed, recorded, analyzed or otherwise used.
- An event can be any occurrence possible associated with an article, client application 120 , or client device 102 a , such as inputting text in an article, displaying an article on a display device, sending an article, receiving an article, manipulating an input device, opening an article, saving an article, printing an article, closing an article, opening a client application program, closing a client application program, idle time, processor load, disk access, memory usage, bringing a client application program to the foreground, changing visual display details of the application (such as resizing or minimizing) and other suitable occurrences associated with an article, a client application program, or the client device.
- event data can be generated when the client device 112 a interacts with an article independent of the user 112 a , such as when receiving an email or performing a scheduled task.
- the memory 108 of the client device 102 a can also contain a capture processor 124 , a queue 126 , and a search engine 122 .
- the client device 102 a can also contain or is in communication with a data store 140 .
- the capture processor 124 can capture events and pass them to the queue 126 .
- the queue 126 can pass the captured events to the search engine 122 or the search engine 122 can retrieve new events from the queue 126 .
- the queue 126 notifies the search engine 122 when a new event arrives in the queue 126 and the search engine 122 retrieves the event (or events) from the queue 126 when the search engine 122 is ready to process the event (or events).
- the search engine When the search engine receives an event it can be processed and can be stored in the data store 140 .
- the search engine 122 can receive an explicit query from the user 112 a or generate an implicit query and retrieve information ‘from the data store 140 in response to the query.
- the queue is located in the search engine 122 .
- the client device 102 a does not have a queue and the events are passed from the capture processor 124 directly to the search engine 122 .
- the event data is transferred using an information exchange protocol.
- the information exchange protocol can comprise, for example, any suitable rule or convention facilitating data exchange, and can include, for example, any one of the following communication mechanisms: Extensible Markup Language-Remote Procedure Calling protocol (XML/RPC), Hypertext Transfer Protocol (HTTP), Simple Object Access Protocol (SOAP), shared memory, sockets, local or remote procedure calling, or any other suitable information exchange mechanism.
- XML/RPC Extensible Markup Language-Remote Procedure Calling protocol
- HTTP Hypertext Transfer Protocol
- SOAP Simple Object Access Protocol
- shared memory sockets, local or remote procedure calling, or any other suitable information exchange mechanism.
- the capture processor 124 can capture an event by identifying and extracting event data associated with an event. Examples of events include sending or receiving an instant messenger message, a user viewing a web page, saving a word processing document, printing a spreadsheet document, inputting text to compose or edit an email, opening a presentation application, closing an instant messenger application, entering a keystroke, moving the mouse, and hovering the mouse over a hyperlink.
- An example of event data captured by the capture processor 124 for an event involving the receipt of an instant messenger message by the user 112 a can comprise the sender of the message, the recipients of the message, the time and date the message was received, the content of the message and a conversation ID.
- a conversation ID can be, used to associate messages that form a conversation and can be provided by the instant messenger application or can be generated by the capture processor 124 .
- a conversation can be one or more messages between the user 112 a and at least one other user until the user 112 a logs out of or closes the instant messenger application or the instant messenger application is inactive for a certain period of time (for example, 30 minutes).
- Another example of event data captured by the capture processor 124 for an event involving the viewing of a web page by a user can comprise the URL of the web page, the time and date the user viewed the web page, the content of the web page in original or processed forms, a screenshot of the page as displayed to the user, and a thumbnail version of the screenshot.
- the capture processor 124 comprises multiple capture components.
- the capture processor 124 shown in FIG. 1 comprises a separate capture component for each client application in order to capture events associated with each application.
- the capture processor 124 can also comprises a separate capture component that monitors overall network activity in order to capture event data associated with network activity, such as the receipt or sending of an instant messenger message.
- the capture processor 124 shown in FIG. 1 also can comprise a separate client device capture component that monitors overall client device performance data, such as processor load, idle time, disk access, the client applications in use, and the amount of memory available.
- 1 also comprises a separate capture component to monitor and capture keystrokes input by the user and a separate capture component to monitor and capture items, such as text, displayed on the display device associated with the client device 102 a .
- An individual capture component can monitor multiple client applications and multiple capture components can monitor different aspects of a single client application.
- the capture processor 124 can monitor activity on the client device and can capture events by a generalized event definition and registration mechanism, such as an event schema.
- Each capture component can define its own event schema or can use a predefined one.
- Event schema can differ depending on the client application or activity the capture component is monitoring.
- the event schema can describe the format for an event, for example, by providing fields for event data associated with the event (such as the time of the event) and fields related to any associated article (such as the title) as well as the content of any associated article (such as the document body).
- An event schema can describe the format for any suitable event data that relates to an event.
- an event schema for an instant messenger message event sent by the user 112 a can include a recipient or list of recipients, the time sent, the date sent, content of the message, and a conversation ID.
- An event schema for a web page currently being viewed by a user can include the Uniform Resource Locator (URL) of the web page, the time being viewed, and the content of the web page.
- An event schema for a word processing document being saved by a user can include the title of the document, the time saved, the location of the document, the format of the document, the text of the document, and the location of the document. More generally, an event schema can describe the state of the system around the time of the event.
- an event schema can contain a URL for a web page event associated with a previous web page that the user navigated from.
- event schema can describe fields with more complicated structure like lists.
- an email schema can contain fields that list multiple recipients.
- An event schema can also contain optional fields so that an application can include additional event data if desired.
- the capture processor 124 can capture events occurring presently (or “real-time events”) and can capture events that have occurred in the past (or “historical events”).
- Real-time events can be “indexable” or “non-indexable”.
- the search engine 122 indexes indexable real-time events, but does not index non-indexable real-time events.
- the search engine 122 may determine whether to index an event based on the importance of the event. The importance may be measured by a capture score associated with and/or determined for the event.
- Indexable real-time events can be more important events associated with an article, such as viewing a web page, loading or saving a file, and receiving or sending an instant message or email.
- Non-indexable events can be deemed not important enough by the search engine 122 to index and store the event, such as moving the mouse or selecting a portion of text in an article.
- Non-indexable events can be used by the search engine 122 to update the current user state. While all real-time events can relate to what the user is currently doing (or the current user state), indexable real time events can be indexed and stored in the data store 140 . Alternatively, the search engine 122 can index all real time events.
- Real-time events can include, for example, sending or receiving an article, such as an instant messenger message, examining a portion of an article, such as selecting a portion of text or moving a mouse over a portion of a web page, changing an article, such as typing a word in an email message or pasting a sentence in a word processing document, closing an article, such as closing an instant messenger window or closing an email message window, loading, saving, opening, or viewing an article, such as a word processing document, web page, or email, listening to or saving an MP3 file or other audio/video file, or updating the metadata of an article, such as book marking a web page, printing a presentation document, deleting a word processing document, or moving a spreadsheet document.
- an article such as an instant messenger message
- examining a portion of an article such as selecting a portion of text or moving a mouse over a portion of a web page
- changing an article such as typing a word in an email message or pasting a sentence in a word processing document
- closing an article such as
- Historical events are similar to indexable real-time events except that the event occurred before the installation of the search engine 122 or was otherwise not captured, because, for example, the search engine 122 was not operational for a period of time while the client device 102 a was operational or because no capture component existed for a specific type of historical event at the time the event took place.
- Examples of historical events include the user's saved word processing documents, media files, presentation documents, calendar entries, and spreadsheet documents, the emails in a user's inbox, and the web pages book marked by the user.
- the capture processor 124 can capture historical events by periodically crawling the memory 108 and any associated data storage device for events not previously captured by the capture processor 124 .
- the capture processor 124 can also capture historical events by requesting certain client applications, such as a web browser or an email application, to retrieve articles and other associated information. For example, the capture processor 124 can request that the web browser application obtain all viewed web pages by the user or request that the email application obtain all email messages associated with the user. These articles may not currently exist in memory 108 or on a storage device of the client device 102 a . For example, the email application may have to retrieve emails from a server device. In one embodiment, the search engine 122 indexes historical events.
- events captured by the capture processor 124 are sent to the queue 126 in a format described by an event schema.
- the capture processor 124 can also send performance data to the queue 126 .
- Examples of performance data include current processor load, average processor load over a predetermined period of time, idle time, disk access, the client applications in use, and the amount of memory available.
- Performance data can also be provided by specific performance monitoring components, some of which may be part of the search engine 122 , for example.
- the performance data in the queue 126 can be retrieved by the search engine 122 and the capture components of the capture processor 124 .
- capture components can retrieve the performance data to alter how many events are sent to the queue 126 or how detailed the events are that are sent (fewer or smaller events when the system is busy) or how frequently events are sent (events are sent less often when the system is busy or there are already too many events waiting to be processed).
- the search engine 122 can use performance data to determine when it indexes various events and when and how often it issues implicit queries.
- the queue 126 holds events until the search engine 122 is ready to process an event or events.
- the queue 126 uses the performance data to help determine how quickly to provide the events to the search engine 122 .
- the queue 126 can comprise one or more separate queues including a user state queue and an index queue.
- the index queue can queue indexable events, for example.
- the queue 126 can have additional queues or comprise a single queue.
- the queue 126 can be implemented as a circular priority queue using memory mapped files.
- the queue can be a two- or three-priority queue where higher priority events are served before lower priority events, and other components may be able to specify the type of events they are interested in.
- real-time events can be given higher priority than historical events, and indexable events can be given higher priority than non-indexable real-time events.
- Other implementations of the queue 126 are possible.
- the client device 102 a does not have a queue 126 .
- events are passed directly from the capture processor 124 to the search engine 122 .
- events can be transferred between the capture components and the search engine using suitable information exchange mechanisms such as: Extensible Markup Language-Remote Procedure Calling protocol (XML/RPC), Hypertext Transfer Protocol (HTTP), Simple Object Access Protocol (SOAP), shared memory, sockets, local or remote procedure calling, or any other suitable information exchange mechanism.
- XML/RPC Extensible Markup Language-Remote Procedure Calling protocol
- HTTP Hypertext Transfer Protocol
- SOAP Simple Object Access Protocol
- the search engine 122 can contain an indexer 130 , a query system 132 , and a formatter 134 .
- the query system 132 can retrieve all real-time events and performance data from the queue 126 .
- the query system 132 can use performance data and real-time events to update the current user state and generate an implicit query.
- the query system 132 can also receive and process explicit queries from the user 112 a .
- Performance data can also be retrieved by to the search engine 122 from the queue 126 for use in determining the amount of activity possible by the search engine 122 .
- indexable real-time events and historical events are retrieved from the queue 126 by the indexer 130 .
- the queue 126 may send the indexable events to the indexer 130 .
- the indexer 130 can index the indexable events and can send them to the data store 140 where they are stored.
- the data store 140 can be any type of computer-readable media and can be integrated with the client device 102 a , such as a hard drive, or external to the client device 102 a , such as an external hard drive or on another data storage device accessed through the network 106 .
- the data store 140 can be in memory 108 .
- the data store 140 may facilitate one or combination of methods for storing data, including without limitation, arrays, hash tables, lists, and pairs, and may include compression and encryption.
- the data store comprises an index 142 , a database 144 and a repository 146 .
- the data store 140 comprises a local index.
- the local index in the embodiment shown in FIG. 1 may comprise information, such as articles, which are associated with the client device 102 a , a user 112 a of the client device 102 a , or a group of users of the client device 102 a .
- the local index in the data store 140 shown in FIG. 1 may comprise an index of articles created, edited, received, or stored by the client user 112 a using the client machine 102 a , or articles otherwise associated with the client user 102 a or the client machine 112 a .
- the local index may be stored in a client machine, such as in data store 140 , in a data store on a local network in a manner accessible by the client machine, on a server accessible to the client machine through the Internet, or in another accessible location.
- a global index may comprise information relevant to many users or many servers, such as, for example, an index of web pages located on multiple servers in communication with the World Wide Web.
- a global index is an index used by the GoogleTM search engine to provide search results in response to a search query.
- a single index may comprise both a local and a global index.
- an index may comprise both local and global information, and include a user or client identifier with the local information so that it may be identified with the user(s) or client(s) to which it pertains.
- an index, local or global may be present in one or multiple logical or physical locations.
- the indexer 130 when the indexer 130 receives an event, the indexer 130 can determine, from the event schema, terms (if any) associated with the event, the time of the event (if available), images (if any) associated with the event, and/or other information defining the event. The indexer 130 can also determine if the event relates to other events and associate the event with related events. For example, for a received instant messenger message event, the indexer can associate the message event with other message events from the same conversation. The messages from the same conversation can be associated with each other in a conversation object, which can be stored in the data store 140 .
- the indexer 130 can send and incorporate the terms and times, associated with the event in the index 142 of the data store 140 .
- the event can be sent to the database 144 for storage and the content of the associated article and any associated images can be stored in the repository 146 .
- the conversation object associated with instant messenger messages can be stored in the database 144 .
- a user 112 a can input an explicit query into a search engine interface displayed on the client device 102 a , which is received by the search engine 122 .
- the search engine 122 can also generate an implicit query based on a current user state, which can be determined by the query system 132 from real-time events. Based on the query, the query system 132 can locate relevant information in the data store 140 and provide a result set.
- the result set comprises article identifiers for articles associated with the client applications 120 or client articles.
- Client articles include articles associated with the user 112 a or client device 102 a , such as the user's emails, word processing documents, instant messenger messages, previously viewed web pages and any other article or portion of an article associated with the client device 102 a or user 112 a .
- An article identifier may be, for example, a Uniform Resource Locator (URL), a file name, a link, an icon, a path for a local file, or other information that may identify an article.
- the result set also comprises article identifiers for articles located on the network 106 or network articles located by a search engine on a server device.
- Network articles include articles located on the network 106 not previously viewed or otherwise referenced by the user 112 a , such as web pages not previously viewed by the user 112 a.
- Articles stored in the messaging index 142 can include one or more types of messages, such as a user's emails, chat messages, and instant messaging messages. Each time a message is received, sent, modified, printed, or otherwise accessed, a record may be stored in the messaging index 142 . This information can later be searched to identify messages that should be displayed in the user interface.
- An embodiment of the present invention may also store message threads in the data store 140 .
- messages are related together by various attributes, including, for example, the sender, recipient, date/time sent and received, the subject, the content, the window identifier of the display window in which the messages were displayed, or any other attribute of the message.
- the related messages can then be retrieved as a thread, which may be treated as a document by the display processor 128 .
- the formatter 134 can receive the search result set from the query system 132 of the search engine 122 and can format the results for output to a display processor 128 .
- the formatter 134 can format the results in XML, HTML, or tab delineated text.
- the formatter 134 displays the results as strings on user interface (UI) components such as labels.
- the display processor 128 can be contained in memory 108 and can control the display of the result set on a display device associated with the client device 102 a .
- the display processor 128 may comprise various components.
- the display processor 128 comprises a Hypertext Transfer Protocol (HTTP) server that receives requests for information and responds by constructing and transmitting Hypertext Markup Language (HTML) pages.
- HTTP Hypertext Transfer Protocol
- the HTTP server comprises a scaled-down version of the Apache Web server.
- the display processor 128 can be associated with a set of Application Programming Interfaces (API) to allow various applications to receive the results and display them in various formats.
- APIs can be implemented in various ways, including, for example, DLL exports, COM interface, VB, JAVA, or .NET libraries, or as a web service.
- a server device 150 can be coupled to the network 106 .
- the search engine 122 can transmit a search query comprised of an explicit or implicit query or both to the server device 150 .
- the user 112 a can also enter a search query in a search engine interface, which can be transmitted to the server device 150 by the client device 102 a via the network 106 .
- the query signal may instead be sent to a proxy server (not shown), which then transmits the query signal to server device 150 .
- Other configurations are also possible.
- the server device 150 can include a server executing a search engine application program, such as the GoogleTM search engine. In other embodiments, the server device 150 can comprise a related information server or an advertising server. Similar to the client devices 102 a - n , the server device 150 can include a processor 160 coupled to a computer-readable memory 162 . Server device 150 , depicted as a single computer system, may be implemented as a network of computer processors. Examples of a server device 150 are servers, mainframe computers, networked computers, a processor-based device, and similar types of systems and devices. The server processor 160 can be any of a number of computer processors, such as processors from Intel Corporation of Santa Clara, Calif. and Motorola Corporation of Schaumburg, Ill. In another embodiment, the server device 150 may exist on a client-device. In still another embodiment, there can be multiple server devices 150 .
- Memory 162 contains the search engine application program, also known as a search engine 170 .
- the search engine 170 can locate relevant information from the network 106 in response to a search query from a client device 102 a .
- the search engine 170 then can provide a result set to the client device 102 a via the network 106 .
- the result set can comprise one or more article identifiers.
- An article identifier may be, for example, a Uniform Resource Locator (URL), a file name, a link, an icon, a path for a local file, or anything else that identifies an article.
- an article identifier can comprise a URL associated with an article.
- the server device 150 has previously performed a crawl of the network 106 to locate articles, such as web pages, stored at other devices or systems coupled to the network 106 , and indexed the articles in memory 162 or on another data storage device. It should be appreciated that other methods for indexing articles in lieu of or in combination with crawling may be used, such as manual submission.
- FIG. 1 it should be noted that other embodiments of the present invention may comprise systems having different architecture than that which is shown in FIG. 1 .
- the client device 102 a is a stand-alone device and is not coupled to a network.
- the system 100 shown in FIG. 1 is merely exemplary, and is used to explain the exemplary methods shown in FIGS. 2 through 7 .
- Methods according to the present invention may be implemented by, for example, a processor-executable program code stored on a computer-readable medium.
- a method comprises identifying an aspect associated with an article, generating an insert, and causing the insert to be output in association with the aspect.
- the generation of the insert may be based, at least in part, on the aspect, and the generated insert may comprise a search result.
- the search result may comprise at least one of an article identifier, a thumbnail, a text snippet, a Uniform Resource Locator, and a path.
- An aspect may comprise an aspect of an article.
- An aspect associated with an article may comprise a hyperlink contained in a web page article; an image or sound file associated with or contained in an article; a citation in a text document; a menu or a particular menu item found in a web page; a caption; a status bar; a web counter associated with a web page article; a name, email address, or screen name of a sender or a recipient of an email or instant messenger message; a recipient input field or a subject input field of an email message; a domain name; information about an article's author or publisher; a prominent term or feature of an article; a table or a figure in a word-processor document; an entry, a column title, or a formula in a spreadsheet article; a slide or a slide title in a presentation article; source data; a Uniform Resource Locator (URL); article meta data; a JavaScript program contained in an Hypertext Transfer Protocol (HTTP) or Hypertext Markup Language (HTML) article; an
- Generation of an insert may comprise searching an article index for a search result.
- the article index searched may comprise an index of articles available on the World Wide Web.
- one such article index may comprise information related to a plurality of web page articles found by a web crawler or other index building mechanism and organized such that it is searchable upon receiving a search query.
- the article index searched may comprise a local article index.
- a local article index may comprise the article index 143 .
- the local article index may comprise a messaging index, such as the messaging index 142 described with respect to FIG. 1 , and/or other indexes associated with a client device or application.
- Searching an article index for a search result to be included in the insert may comprise generating a user context-dependent search query to use in searching the article index.
- a user context-dependent search query may be based, at least in part, on a user action history comprising a plurality of user actions.
- a method may comprise identifying an aspect associated with an article, automatically generating an insert comprising a request, and causing the insert to be output in association with the aspect.
- the generation of the insert may be based, at least in part, on the aspect.
- the request may comprise a request to the user 112 a .
- the request may comprise an article-related request.
- An article-related request may comprise a request associated with actions the client device 102 a may take associated with the article comprising the aspect.
- a request may comprise a request to the user for information, a permission, a direction, an instruction, a decision, an answer, and/or a prioritization.
- a request for permission may comprise a request for permission to index information and events associated with the article comprising the aspect.
- a request for a prioritization may comprise a request to the user 112 a to indicate the relative priority events related to the presently-viewed article, where higher priority events may be more quickly accessed later in a search of a local article index.
- a request included in an insert may comprise a user context-dependent request.
- generating the insert may comprise generating a user context-dependent request.
- a user context-dependent request may be based, at least in part, on a user action history comprising a plurality of user actions.
- An insert generated according to the present invention may be caused to be output in association with the aspect in a wide variety of different methods in different embodiments.
- at least part of the insert may be placed into the article comprising the aspect.
- at least part of the insert may be caused to be displayed in a transient display proximate to the aspect.
- at least part of the insert may be caused to be displayed in a separate window from the article, such as a pop-up window.
- a processor may 110 receive an article comprising an aspect.
- the article may comprise a web page, and the aspect may comprise a hyperlink found on the web page article.
- the processor 110 may then analyze the article.
- the processor may analyze the article for the presence of an aspect, such as a hyperlink, or an image.
- the search engine 122 may then automatically search an article index for a search result, such as an article identifier, associated with the aspect.
- the search function may search a local article index, such as the article index 143 shown in FIG. 1 .
- the local article index may comprise a plurality of Uniform Resource Locator (URL) article identifiers
- the search engine 122 may search the article index 143 or another area of the data store 140 , for a URL article identifier associated with the hyperlink aspect found on a web page article.
- the search engine 122 may also search the article index 143 for an article associated with all or a majority of the article's content.
- the search engine 122 may search a local article index for a one or more search results associated with the aspect of the article.
- the search engine 122 may search an index of articles available on the world wide web, such as by communicating with the search engine 170 .
- the generation of the insert may be based, at least in part, on the aspect.
- the processor 110 or another suitable entity may generate an association of the aspect with a search result and/or a request.
- the association may comprise more than a one-to-one relationship between a particular search result and/or request and a particular aspect.
- the association may have been previously undetermined before the processor 110 associates the applicable search result and/or request with the aspect.
- the association may comprise a wide variety of connections, relations, unions, overlaps, links, combinations, affiliations, similarities, tie-ins, and commonalities between the aspect and the search result and/or the request.
- Just some examples of associations between a search result and/or a request and an aspect may include commonality of text, related publishers or authors, and similar subject matter.
- a search result may comprise a variety of other forms and formats, including an article identifier, a text snippet excerpted from or summarizing the article it is associated with; a thumbnail, such as a thumbnail image contained in the article the article identifier is associated with; and a path, such as a Microsoft® PowerPoint presentation file name.
- a search of an article index, such as a local article index, for a search result associated with the aspect of the article may be triggered by a variety of stimuli.
- the search may be triggered by an opening of an application on the client device 102 a , by hovering an indicator on a user interface corresponding to a pointing device over the aspect, by clicking on the aspect, by typing text in the article, by clicking on a term, or by clicking on or hovering over a term receptacle such as an address bar.
- the display processor 128 may then generate an insert comprising at least one of a search result and a request.
- An exemplary insert may comprise a URL article identifier search result and a request for an input from the user 112 a related to the article comprising the aspect.
- the request for an input from the user 112 a may comprise a request for an instruction whether to archive events related to the article comprising the aspect.
- the display processor 128 may then cause the insert to be output in association with the aspect.
- the display processor 128 may modify the article by placing at least a part of the insert into the article in association with the aspect.
- the insert may be caused to be output in association with the aspect by generating and causing the output of a transient display proximate to the aspect.
- the transient display proximate to the aspect may comprise a transient menu.
- a transient display proximate to the aspect may comprise a drop-down menu near a hyperlink aspect contained in the article.
- a transient display insert may alternatively comprise a Microsoft® Windows tool-tip proximate to the aspect, and may be programmed to appear only when the user 112 a hovers an indicator on a user interface device corresponding to a mouse over the aspect.
- the insert may be caused to be output in association with the aspect by integrating the insert into the aspect of the article.
- an article comprising text may be modified by moving text found below the aspect downward on the document, and placing an insert, such as a thumbnail image search result in the newly created space formerly occupied by article text.
- an insert such as a thumbnail image search result in the newly created space formerly occupied by article text.
- the display processor 128 may then cause the modified article to be output.
- the modified article to be output to a user interface device, such as a computer monitor, for the user 112 a to view.
- the modified article is caused to be output upon receipt of an interest signal.
- the user 112 a may generate and output to the client device 102 a an interest signal comprising his or her interest in the aspect of the article.
- the user 112 a may generate an interest signal by hovering an indicator corresponding to a pointing device, such as a mouse, over a hyperlink on a web page.
- the article may comprise existing data in a first article format, such as HTML, and the insert may comprise client device-generated data in the same first article format.
- placing the insert into the article can comprise adding the client device-generated HTML data to the article's existing HTML.
- the article may comprise existing data in the first article format, and the insert may comprise client device-generated data in a second article format.
- the insert may comprise JavaScript program code, and may be placed into a Microsoft® Word article.
- a search query the search engine 122 may execute against an article index may comprise a user context-dependent search query generated by the client device 102 a .
- an insert may comprise a user context-dependent request.
- the context in which the user 112 a is operating may be determined based on the client applications 120 that the user 112 a is executing, the content of the files on which the user 112 a is operating, or other activity or event(s) occurring on the client 102 a .
- the user context may comprise, for example, a user action history comprising a plurality of user actions. Each user action comprises various parameters, including, for example, a date/time parameter.
- a user context-dependent request output to the user 112 a in an insert may comprise a request for permission to archive future events associated with the previously printed word-processing document.
- User context-dependent requests and search queries may be generated using information from a user's actions or a combination thereof.
- One such user context-dependent search query may be generated by the query system 132 or another suitable entity. For example, if the user 112 a prints a word-processing document and also highlights an aspect comprising a selection of words within that document, the queries generated may be a combination of content from the entire printed document and the highlighted words.
- a user-context dependent request may request of the user 112 a whether he or she wishes to search for articles related to the highlighted aspect.
- a user context-dependent search query or request may be generated based upon which email messages the user 112 a has recently accessed, or upon an email organization structure the user 112 a maintains in an email application. Activities or actions taken by the user 112 a while browsing websites on an information network, such as the Internet, may also be used to generate a user context-dependent search query and/or a user-context dependent request.
- An article index searched for a search result may comprise differing types of indices in different embodiments.
- a local article index may be searched.
- a local article index may comprise a messaging index.
- the messaging index 142 may comprise at least one of a chat message identifier, an email message identifier, an instant message identifier, or other messaging article.
- the messaging index 142 may comprise article identifiers for any messaging-related articles. Indices other than an article or messaging index may also be utilized.
- the display processor 128 may receive a search result set from the messaging index that includes article identifiers in the messaging index 142 that are relevant, as determined by the search engine 122 , to the term “laptop.”
- a generated insert may comprise links to email threads, chat messages, instant messages, and other messaging articles.
- the display processor 128 may additionally or alternatively receive one or more search results from an article index in response to a search query.
- the display processor 128 may receive a search result set that includes search results retrieved from an article index, such as the article index 143 that are relevant to the aspect, as determined by the search engine 122 , to the term “laptop.”
- the article index 143 may include, for example, an index of word-processor documents, and the search results may include links to the documents.
- the display processor 128 may then automatically generate an insert based, at least in part, on the aspect, and comprising at least one of a search result, and a request.
- the display processor may, for example, generate an HTML insert or other document that may be viewed in a browser, the insert including one or both of a search result and a request so that the user 112 a can easily access an article associated with the search result and/or instruct the client device 102 a to capture events related to the article presently being viewed.
- a different method according to the present invention comprises receiving a term in an input field.
- the term may comprise a word or phrase entered into an address bar of a network browser application, such as Microsoft's Internet Explorer® web browser application, and the entered term may be received by the search engine 122 .
- the input field may comprise other address bars, as well as other term receptacles, such as a query-input field, such as the query input field found in Google Corporation's Google Toolbar product.
- the input field may comprise a “To:” box provided to input a recipient's name.
- the input field may comprise an article-integrated input field. Examples of an article-integrated input field comprise a text box, as commonly found on a variety of web pages available on the Internet.
- This method further comprises searching an article index for an article identifier associated with the received term.
- the search engine 122 may perform the search.
- the article index may comprise an index on the client device 102 a , such as the article index 143 , or the messaging index 142 .
- the article index may comprise an index maintained by a server device of web page articles available on an information network, such as the Internet.
- An example of such an index is the index maintained by a search engine 170 pictured in FIG. 1 .
- the search engine 170 may comprise, for instance, the Google search engine.
- One embodiment further comprises searching a second article index for a second article identifier associated with the received term.
- the second article identifier may be associated with a second article associated with the term.
- This method further comprises receiving the article identifier, and causing it to be output in a transient menu associated with the input field.
- the display processor 128 receives the article identifier and causes it to be output in the transient menu associated with the input field.
- the transient menu may take a variety of forms.
- the transient menu may comprise a drop-down menu near, or otherwise proximate to or associated with, the input field.
- the transient menu may comprise other suitable forms, such as a pop-up menu near the input field, a slide-out menu near the input field, a separate window, a pop-up menu that covers or surrounds the input field, and a tool-tip substantially near the input field.
- the article identifier may be associated with an article.
- the article identifier may comprise a URL or other path associated with a web page article that pertains to the received term.
- the article identifier may comprise other forms and formats.
- the article identifier may comprise a path, such as a Microsoft® Excel file name.
- the article identifier may comprise a creator name associated with a creator of the article.
- the creator name may comprise the author or publisher of a web page, the author or publisher of a word-processor document, or the author or publisher of an email or instant messenger message.
- the article identifier may alternatively comprise a snippet.
- the snippet may comprise an excerpt or a summary of the article.
- the article identifier may comprise a thumbnail, such as a thumbnail image excerpted from the article.
- the article identifier may also comprise a message thread, for instance, a message thread that relates a plurality of related email messages.
- a search query the search engine 122 executes against the local article index may be a user context-dependent search query generated by the client device 102 a .
- the context in which the user 112 a is operating may be determined, for example, based on the client applications 120 that the user 112 a is executing, the content of the files on which the user 112 a is operating, or other activity or event(s) occurring on the client 102 a .
- the user context may comprise, for example, a user action history comprising a plurality of user actions. Each user action comprises various parameters, including, for example, a date/time parameter. For example, if the user 112 a prints a word-processing document multiple times in a short period of time, the queries against the messaging and article indices may be related to the content of the document the user 112 a printed.
- One embodiment further comprises receiving a select indication for the article identifier, and displaying an article associated with the article identifier.
- the display processor 128 may receive the select indication from the user 112 a , indicating that he or she is interested in seeing the article associated with the article identifier output to the user 112 a .
- the display processor 128 may then retrieve the article from the data store 140 , and output the article to the user 112 a .
- the article identifier may be a URL in such an embodiment, and the article associated with the URL article identifier may be a web page article.
- the web page article may be output to the user 112 a by displaying the web page article on a graphical user interface in communication with the client device 102 a.
- a server device such as the server device 104 may carry out another method according to the present invention.
- This method comprises receiving a term signal comprising a term, such as the one of the types of terms described above, and searching an article index for an article identifier associated with the term and an article that pertains to the term.
- the article index may comprise, for example, a server-based messaging index or a server-based article index, or the search engine 170 pictured in FIG. 1 .
- the method further comprises retrieving the article identifier, and generating an information signal causing the article identifier to be output in a transient menu associated with an input field.
- One embodiment according to this method further comprises outputting the generated information signal to a client device, such as the client device 102 a.
- a search query the search engine 122 executes against the local article index may be a user context-dependent search query generated by the client device 102 a .
- the context in which the user 112 a is operating may be determined based on the client applications 120 that the user 112 a is executing, the content of the files on which the user 112 a is operating, or other activity or event(s) occurring on the client 102 a .
- the user context may comprise, for example, a user action history comprising a plurality of user actions. Each user action comprises various parameters, including, for example, a date/time parameter. For example, if the user 112 a prints a word-processing document multiple times in a short period of time, the queries against the messaging and article indices may be related to the content of the document the user 112 a printed.
- FIG. 2 is a flowchart illustrating generating a user interface in a first embodiment of the present invention.
- the client device 102 a identifies an aspect associated with an article as shown by box 202 .
- the aspect may comprise a hyperlink contained in the web page article.
- Other examples of aspects comprise images in an article, article headers, audio files in an article, article titles, email recipients' names, and input fields contained in an article.
- the query system 132 upon identifying the aspect, the query system 132 generates a user context-dependent query.
- the user context-dependent query may be an implicit query generated by a client application 120 in response to events associated with the user 112 a , for example, information being entered by or output to the user 112 a .
- the response to the query may depend on the time of day the query is run or on previous or a sequence of previous actions by the user.
- the current user context is derived from a data store comprising a history of user actions, such as printing or opening a file, or sending an email message.
- the query generated may be an explicit query, e.g., a query entered by a user 112 a in a text box or other user input interface.
- the query system 132 Upon generating the user context-dependent query, the query system 132 executes the generated search query on a local article index, such as the article index 143 stored in the data store ( 140 ) 206 .
- the query system 132 searches the local article index for a search result, such as an article identifier, associated with the aspect.
- An exemplary search result may comprise a path of a word-processing document stored on the client device 102 a , where the document is associated with the aspect.
- the query system 132 receives the search result from the local article index as shown by box 208 .
- the search result may comprise one or more article identifiers, and may comprise snippets or text summaries of the article with which the article identifier is associated. In the case of a file, the search result may be a fully qualified path.
- the query system 132 may then rank a plurality of search results in the result set.
- the query system 132 may perform queries on additional indices, such as the messaging index 142 , or an index comprising news articles, or any other type of document or file that can be indexed.
- the query system 132 may also cause queries to be executed on indices not stored on the client 102 a or in the data store 140 .
- the query system 132 may cause queries to be executed on the search engine 170 .
- the query system 132 outputs the result set to the display processor 128 , which generates an insert as shown by box 210 .
- the insert may be based, at least in part, on the aspect, and may comprise the search result.
- the insert may comprise an HTML coding of information such as text describing the search result, a thumbnail image of the article, or any other information that would be useful to the user 112 a in identifying a potentially relevant result.
- the insert may alternatively or additionally comprise a request.
- a request may comprise an article-related request, and may comprise a user context-dependent request.
- a request may comprise, for example a request to the user 112 a to indicate whether the indexer 130 should index events pertaining to the presently viewed web page article.
- a request may comprise another request for information or for a decision from the user 112 a , such as whether an event should be marked as high-priority, whether the user 112 a would like to see more articles like the one he or she is presently accessing, whether the user would like to add a bookmark on his or her desktop to the article, whether the user would like to return to the last article he or she had accessed, whether articles received from the same author or publisher should be automatically output to the user 112 a , etc.
- the display processor 128 then places the insert into the article in association with the aspect as shown by box 212 .
- the display processor 128 may modify a web page article by placing an HTML insert into the existing HTML of the web page article such that the insert will be displayed near the aspect when the article is displayed.
- an effect of this modification of the article may comprise a displacement or a movement of existing article content or of the aspect, and the inclusion of the insert's content.
- the display processor 128 may then cause the article to be displayed or otherwise output as shown in box 214 .
- the display processor 128 may cause the article comprising the insert to be displayed on a graphical user interface in communication with the client device 102 a .
- the functions described may be performed by other components in another embodiment of the present invention.
- the query system 132 and display processor 128 are combined, and the combined component performs functions to facilitate execution of queries, ranking of result sets, and causing the outputting of the insert and article.
- Other configurations are also possible.
- FIG. 3 is a flowchart illustrating generating a user interface in a second embodiment of the present invention.
- a client application 120 receives a term in an address bar input field 302 .
- the client application 120 may comprise a network browser application, such as Microsoft's Internet Explorer®.
- Such a client application may include an address bar input field, where a user 112 a may enter in a URL of a website that they may wish to visit on the Internet.
- the client application 120 may comprise a different suitable type, such as an email program, and the input field may comprise a term receptacle for inputting an email recipient's name or email address.
- the term received by the address bar input field may comprise a full term, such as a full word, phrase, or sentence, or may comprise a partial term, such as a misspelled word, a partial word lacking a suffix or a prefix, an incomplete phrase, or a fragment sentence.
- the client application 120 outputs information conveying the received term to the search engine 122 .
- the query system 132 of the search engine 122 may then generate a user-context dependent search query 304 associated with the user 112 a and the term received in the address bar.
- the user context-dependent query 304 may be an implicit query generated by a client application 120 in response to events associated with the user 112 a , for example, information being entered by or output to the user 112 a .
- the response to the query may depend on the time of day the query is run or on previous or a sequence of previous actions by the user.
- the current user context is derived from a data store 140 comprising a history of user actions, such as printing or opening a file, or sending an email message.
- the query generated may be an explicit query, e.g., a query entered by a user 112 a in a text box, or a query term input in an input field, such as the term received in the address bar input field in 302 .
- the search engine 122 may then search an article index, such as a local article index 143 or a local messaging index 142 , for URLs associated with the generated query.
- an embodiment may search an article index for other types of article identifiers, such as file names or paths, thumbnail images, sound files, or text snippets.
- the search engine 122 may generate and output a term signal to a server device comprising a second article index, the term signal to instruct the server device to search for a second article identifier associated with a second article and the term.
- the search engine 122 may output the generated search query over the network 106 to a search engine 170 .
- the search engine 170 may search the network 106 for URLs or other article identifiers associated with the search query.
- the search engine 122 Upon finding URLs associated with the generated search query, the search engine 122 outputs the URLs to the display processor 128 .
- the display processor 128 receives the URLs 308 .
- the display processor 128 then causes the received URLs to be output to a graphical user interface in a drop-down transient menu near the address bar input field 310 .
- received URLs or other article identifiers associated with the received term or the generated query may be output in other forms of transient menus associated with the address bar or another suitable input field.
- a text snippet article identifier may be caused to be output as a transient tool-tip located substantially near the input field.
- other information that the user 112 a may find useful or informative is provided along with the article identifiers associated with the received term in the transient menu. For example, information pertaining to when the user 112 a last visited an article associated with a provided article identifier, when the user 112 a last entered the term in the term receptacle, or similar queries the user 112 a may find helpful to achieving his or her search or navigational goals may be provided along with an article identifier associated with the received term.
- FIG. 4 is a flowchart illustrating generating a user interface in a third embodiment of the present invention.
- a server device such as the server device 150 shown in FIG. 1 , receives a term signal comprising a term 402 .
- the term in such an embodiment may have been input by a user of a client device in an input field, such as an address bar of a web browser client application.
- the term signal may have been generated by a client device search function, such as the search engine 122 shown in FIG. 1 , and output over the network 106 to the server device 150 .
- a client device that receives a term in an input field may search a local article index for article identifiers associated with the term, either in addition to, or alternatively to, outputting a term signal to the server device 150 .
- the server device may output the term to a search engine application contained in the server device's memory.
- the search engine application may be, for example, the search engine 170 contained in the memory 162 of the server device 150 shown in FIG. 1 .
- the search engine 170 then generates a search query associated with the term 404 .
- the search query may comprise a user-context dependent search query associated with a user and the term received.
- the user context-dependent query may be an implicit query generated by a client application 120 in response to events associated with the user 112 a , for example, information being entered by or output to the user 112 a via the client device 102 a .
- the response to the query may depend on the time of day the query is run or on previous or a sequence of previous actions by the user.
- the current user context is derived from a data store in communication with the server device 150 that comprises a history of user actions, such as printing or opening a file, or sending an email message.
- the query generated may be an explicit query, e.g., a query derived by the server device 150 solely from the term or terms received in the term signal.
- the search engine 170 may then search an article index for an article identifier, such as a URL, associated with the generated search query 406 .
- the search engine may search the Internet for a URL of a web page article that is associated with the interests indicated by the term or terms in the term signal.
- the search engine 170 may retrieve the article identifier 408 .
- the search engine 170 may then generate an information signal causing the retrieved article identifier to be output in a transient menu associated with an input field 410 .
- the information signal may cause a URL article identifier to be output on a graphical user interface in a drop-down menu near an address bar input field on a web browser client application.
- the server device 150 then outputs the information signal generated by the search engine 170 to a client device 412 , such as the client device 102 a shown in FIG. 1 .
- the information signal may be output over the network 106 .
- the client device 102 a may then output the article identifier to the user 112 a in accordance with the instructions contained in the information signal.
- FIG. 5 is a screen shot 500 illustrating information displayed in an HTML web page article in one embodiment of an article constructed according to the method shown in FIG. 2 .
- the screen shot 500 shows a web browser client application 502 .
- the web browser client application 502 displays an HTML web page article 504 comprising aspects 506 and 508 .
- First aspect 506 comprises a title aspect of the web page article 504 .
- Aspect 508 comprises a baseline menu of areas related to the web page article 504 that a user could choose to investigate.
- the web page article 504 has been modified with the placement of inserts 510 and 512 .
- the first insert 510 comprises a request output in association with the title first aspect 506 .
- the request shown comprises article-related request.
- the request shown comprises a request to the user to select an option from among a list of three options related to the displayed web page article 504 .
- the first option allows a user of the web browser client application 502 to see a list of related web page articles that he or she has already viewed.
- the second option allows the user to exclude the presently displayed web page article 504 from a client machine data store.
- the third option allows the user to flag the web page article 504 presently displayed as important, and possibly worth viewing again.
- the second insert 512 comprises a search result, and has been output in association with the baseline menu second aspect 506 of the web page article 504 .
- the search result shown in the second insert 512 comprises an article identifier.
- the second insert 512 shown comprises information about when the user of the client device web browser application 502 last visited the presently displayed website.
- the second insert 512 further comprises HTML generated by a display processor and integrated into the existing HTML of the web page article 504 .
- inserts may comprise a wide variety of information, search results, article identifiers, and requests, and may take other forms, such as a transient display proximate to the aspect, such as a tool-tip or a transient menu, or may be displayed in a window separate from the article.
- the two inserts 510 , 512 and the layout of their placement in the web page article 504 shown in FIG. 5 are merely exemplary of how an HTML article may be modified according to the present invention.
- a user 112 a may select different, fewer, or additional categories to display on the HTML article.
- the user 112 a may access an administration page to vary the layout of the HTML article shown in FIG. 5 as desired.
- FIG. 6 is a screen shot 600 illustrating a user interface according to a second embodiment of the present invention.
- the screen shot 600 represents a graphical user interface generated according to the method shown in FIG. 3 .
- the screen shot 600 shows a client application display 602 .
- the client application comprises a Microsoft® Internet Explorer® web browser application.
- the client application display 602 comprises an address bar 604 .
- the address bar 604 may conventionally be used to input a URL of a web page article that a user wishes to visit on the Internet or an intranet.
- the address bar 604 may be used to enter a term 606 .
- the term 606 may comprise, for example, a word, a phrase, a sentence, or a query.
- the term 606 “bobby flay,” has been entered in the address bar 604 .
- a transient drop-down menu 608 is shown near the address bar 604 .
- the transient drop-down menu 608 appears when a user of the web browser 602 enters a term 606 in the address bar 604 , and disappears when the user either selects an item from the drop-down menu, or types a URL or other web address in the address bar 604 .
- the transient menu may disappear in response to a variety of stimuli.
- the transient menu may disappear in response to the receipt of a predetermined term, substring, or characters, such as “http,” or “://” in the term receptacle may trigger the transient menu to disappear.
- the transient menu may disappear momentarily as the user 112 a enters more terms in the term receptacle, and may reappear after the system has performed a new search for article identifiers associated with the additional terms.
- the drop-down menu 608 shown comprises two article identifiers 610 , 612 .
- the first article identifier 610 shown comprises a hyperlink to a web page article on a “Star chefss” website related to “Bobby Flay.”
- the first article identifier 610 further comprises a selection of hyperlinked menu items, each providing access to a different section on the “Star chefss” website related to “Bobby Flay.”
- the second article identifier 612 shown comprises a hyperlink to a page on a retail site, “Amazon.com®,” that pertains to a book titled Bobby Flay's Bold American Food , and that is likely authored by “Bobby Flay.”
- Both the first and the second article identifiers 610 , 612 shown comprise items stored in and retrieved from a local data store on a client device executing the web browser application 602 .
- article identifiers presented to a user may comprise a wide variety of suitable types, including thumbnail images, file names or paths, and may be items stored on and retrieved from a server device, or located by a search engine on a server device, such as the search engine 170 shown in FIG. 1 .
- FIG. 7 is a screen shot 700 illustrating a user interface according to a third embodiment of the present invention.
- the screen shot 700 represents a graphical user interface generated according to the method shown in FIG. 4 .
- the screen shot 700 shows a user interface of a web browser client application 702 .
- the web browser client application shown is a Microsoft Internet Explorer® web browser application.
- the web browser client application 702 comprises an address bar 704 .
- the address bar 704 may be used similarly to the address bar ( 604 ) described with respect to FIG. 6 .
- a user has entered a term 706 into the address bar 704 .
- the term 706 shown comprises “bobby flay.” In other embodiments, a variety of terms 706 , such as those described above, may be entered into the address bar 704 .
- the screen shot 700 further comprises a drop-down transient menu 708 near the address bar 704 .
- Other embodiments comprise various suitable transient menus associated with input fields.
- the transient menu may comprise a right-click menu that appears near an article-integrated input field when a user “right-clicks” the right mouse button while using a Microsoft® Windows® application.
- the transient menu 708 shown comprises three article identifiers 710 , 712 , and 714 .
- the three article identifiers shown were found by a server device running a search engine application using a query generated in response to the input term 706 “bobby flay.”
- the article identifiers shown 710 , 712 , 714 each comprise an Internet address for a website that pertains to the term 706 entered in the address bar 704 .
- the transient drop-down menu 708 shown in FIG. 7 appears when a user types a term 706 in the address bar 704 .
- the drop-down menu 708 disappears when the user enters a URL, website address, or file name in the address bar 704 , or after a predetermined period of time.
- the resultant article identifiers 710 , 712 , 714 in the drop down menu 708 comprise results that may be conventionally presented to a user upon inputting the same or a similar search term in the query box of a search engine, such as the Google® search engine.
- the present embodiment allows the user to forgo traveling to a search engine to conduct a search, instead receiving results upon entering a term in the address bar of a web browser.
- the present embodiment may also allow the user 112 a to forgo an explicit search action, such as typing a search query into a search box, that may be required in conventional methods in order to receive search results and execute a search action.
- the display processor 128 supports a set of Application Programming Interface (API) calls.
- API Application Programming Interface
- an application running on the client 102 a such as the web server, is able to call an API to display information according to an embodiment of the present invention, such as those exemplary methods set out above.
- the API may also provide the capability of formatting the result set in HTML, XML, or any other format required by the user.
- possible types of aspects may include URLs, links, recognized global entities such as names, organizations, and recent news topics, as well as recognized entities related to the current user, such as important or repetitive terms or phrases for the user, names or identifiers of people that the user communicates with, etc.
- Inserts may comprise content comprising related information, URLs, links, search result information, links to local and global search results, and meta information about local and global search results.
- Meta information about local and global search results may comprise, for example, the number of results in a local index, article information such as whether an article has been viewed, how long ago the article was last accessed or viewed, the number of times an article has been accessed or viewed, the length of time a user spent viewing an article, etc.
- generated inserts may be displayed or otherwise output as text proximate to an aspect, text after an aspect, a thumbnail or other image proximate an aspect, text or a thumbnail near the article comprising the aspect, text or a thumbnail in a pop-up or persistent window separate from the aspect or the article comprising the aspect, etc.
- an article identifier associated with a term received in an input field and received in response to a search of an article index may be displayed or otherwise output as text proximate the input field, text after the input field, text in the input field, a thumbnail or other image proximate the input field, text or a thumbnail near an article comprising or otherwise associated with the input field, text or a thumbnail in a pop-up or persistent window separate from the input field, etc.
- One embodiment of the present invention comprises an administration page.
- the user 112 a may click on an icon that provides access to the administration page.
- the user may be able to set preferences for display, such as the location of a transient menu, an insert, minimum size of a window, a type of transient display proximate an aspect, transient menu, insert or window to be displayed, a type of content to include in an insert and/or a transient menu, and various other parameters that may or may not relate to display, such as refresh rate, etc.
- a user that may not have time to perform extensive customization and input of his or her preferences may find it useful for a system to be automatically customized or customizable to accommodate the various preferences and/or practices of the user.
- an aspect may be identified based, at least in part on a user preference.
- an insert may be generated, and/or caused to be output in association with an aspect based, at least in part, on a user preference.
- Another embodiment may comprise causing an article identifier to be output in a transient menu associated with an input field based, at least in part, on a user preference.
- a user preference may be requested from the user 112 a .
- an insert comprising a request to the user 112 a may request an indication of how the user 112 a prefers to have his or her inserts and/or article identifiers output, and/or what sorts of information the user 112 a finds useful in an insert.
- one or more of the aspects, transient menu types, insert types, insert display types, and transient menu display types may be automatically set based on existing information about a user.
- news topic aspects may be used to automatically generate an insert only if the user is known to visit news sites regularly.
- related Microsoft Word® document insert types may be used only if a user is known to use that application or if he or she has that application installed on his or her client device.
- weights can be assigned to various types, configurations and contents of different aspects, inserts, term input fields, transient menus, and methods of displaying and otherwise outputting inserts and transient menus.
- the weights may be assigned based on existing information about the user.
- Existing information about the user may be obtained by performing a system analysis of a client device 102 a associated with a user 112 a .
- a user preference may be determined based, at least in part, on a system analysis.
- information about the user 112 a may be obtained by a system analysis comprising crawling a storage device(s) to locate programs, files, and activities, and/or from examining operating system or application preferences, etc.
- a system analysis of the client device 102 a may find information comprising what client applications are installed on the client device 102 a , what files are located on the client device 102 a , what user preferences have been set in the operating system, what user preferences have been set in various client applications, etc.
- a user preference may be determined based, at least in part, on a system analysis performed on a server device, a network, and/or a plurality of client and/or server devices in communication with each other.
- user preference information may be inferred by monitoring activity on a client device. For example, by monitoring application usage, emails sent and received, instant messages, etc.
- User preference information can be used to set weights of different types, configurations, and contents of aspects, inserts, term input fields, transient menus, and different methods of displaying and otherwise outputting inserts and transient menus.
- a score may be determined for a particular insert. The insert may only be displayed if the weights of the associated aspect type and insert type exceed a predetermined threshold value.
- a score may be determined for each possible method of displaying or otherwise outputting inserts and/or transient menus, and the method associated with the highest score may be used.
- a system may learn the weights of the various types, configurations and contents of aspects, inserts, term input fields, transient menus, and methods of displaying and otherwise outputting inserts and/or transient menus based on user activity. For example, if a user clicks on inserts or transient menus a percentage of the time the user accesses a client device corresponding to a particular aspect type, insert type and/or and insert display type, this information may be used to determine whether or not to perform a particular insertion.
- a system may initially display such inserts with a particular probability, or if a score associated with the insert exceeds a threshold.
- an insert might be displayed if the number of times the user has viewed an article exceeds three times. If the user clicks on such inserts often, the threshold for displaying the insert may be lowered—for example, such an insert may then be displayed whenever the number of times the user has viewed the article exceeds two times. Conversely, if a user rarely clicks on such an insert, the threshold may be increased, or the insert type or content may be abandoned completely.
- a system may learn which of the types, configurations and contents of aspects, inserts, term input fields, transient menus, and methods of displaying and otherwise outputting inserts and transient menus a user prefers over a period of time.
- a user preference may be determined based, at least in part, on a user action history comprising a plurality of user actions.
- the system allows the user to rate various types, contents or configurations of inserts and/or transient menus. For example, in one such embodiment, a request may be provided to the user in an insert requesting a rating of the current system configuration and/or inferred user preferences. In one such embodiment, a system may provide a user interface element the user can use to express such a rating, such as an “X” symbol to express negative interest, or a rating bar operable to allow a user to express a relative rating.
- a rating such as an “X” symbol to express negative interest
- a rating bar operable to allow a user to express a relative rating.
- the user can open a customization menu for each insert and/or transient menu, allowing the user to configure preferences for a particular type, configuration, and/or content of an aspect, insert, term input field, transient menu, and/or method of displaying and otherwise outputting inserts and transient menus.
Abstract
Systems and method for generating a user interface described. In one described system, an aspect associated with an article is identified. Next, an insert comprising a search result is generated based, at least in part, on the aspect. The insert is then caused to be output in association with the aspect.
Description
- This application is a divisional of U.S. patent application Ser. No. 10/814,052, filed Mar. 31, 2004, which is incorporated by reference herein in its entirety.
- The present invention relates generally to user interfaces. The present invention relates particularly to methods and systems for generating a user interface.
- Conventional search engines receive a search query from a user and execute a search against a global index. Such conventional search engines typically use one or more conventional methods for performing a search. For example, one known method, described in an article entitled “The Anatomy of a Large-Scale Hypertextual Search Engine,” by Sergey Brin and Lawrence Page, assigns a degree of importance to a document, such as a web page, based on the link structure of the web. The search results are often presented in a list format, comprising article identifiers and brief snippets about the documents.
- Various client applications include interfaces that combine various types of information. For example, some conventional productivity tools allow a user to view tasks and calendar entries simultaneously. Conventional applications do not, however, provide the user with the capability of combining the results of searches of both local and global information in a single, unified interface in an effective manner. Also, conventional search engines do not effectively allow the user to combine the results of a search of a messaging index with other search results.
- Thus, a need exists to provide an improved system and method for providing a user interface.
- Embodiments of the present invention provide systems and methods for generating a user interface. One embodiment of the present invention comprises identifying an aspect associated with an article, generating an insert based, at least in part, on the aspect, and causing the insert to be output in association with the aspect. The insert may comprise a search result. In another embodiment, the insert may comprise a request.
- These exemplary embodiments are mentioned not to limit or define the invention, but to provide examples of embodiments of the invention to aid understanding thereof. Exemplary embodiments are discussed in the Detailed Description, and further description of the invention is provided there. Advantages offered by the various embodiments of the present invention may be further understood by examining this specification.
- These and other features, aspects, and advantages of the present invention are better understood when the following Detailed Description is read with reference to the accompanying drawings, wherein:
-
FIG. 1 is a block diagram illustrating an exemplary environment in which one embodiment of the present invention may operate; -
FIG. 2 is a flowchart illustrating generating a user interface in a first embodiment of the present invention; -
FIG. 3 is a flowchart illustrating generating a user interface in a second embodiment of the present invention; -
FIG. 4 is a flowchart illustrating generating a user interface in a third embodiment of the present invention; -
FIG. 5 is a screen shot illustrating a user interface according to a first embodiment of the present invention; -
FIG. 6 is a screen shot illustrating a user interface according to a second embodiment of the present invention; and -
FIG. 7 is a screen shot illustrating a user interface according to a third embodiment of the present invention. - Embodiments of the present invention provide systems and methods for generating a user interface. Exemplary embodiments are described below.
- Referring now to the drawings in which like numerals indicate like elements throughout the several figures,
FIG. 1 is a block diagram illustrating an exemplary environment for implementation of an embodiment of the present invention. While the environment shown inFIG. 1 reflects a client-side search engine architecture embodiment, other embodiments are possible. Thesystem 100 shown inFIG. 1 includes multiple client devices 102 a-n that can communicate with aserver device 150 over anetwork 106. Thenetwork 106 shown inFIG. 1 comprises the Internet. In other embodiments, other networks, such as an intranet, may be used instead. Moreover, methods according to the present invention may operate within a single client device that does not communicate with a server device or a network. - The client devices 102 a-n shown in
FIG. 1 each include a computer-readable medium 108. The embodiment shown inFIG. 1 includes a random access memory (RAM) 108 coupled to aprocessor 110. Theprocessor 110 executes computer-executable program instructions stored inmemory 108. Such processors may include a microprocessor, an ASIC, state machines, or other processor, and can be any of a number of suitable computer processors, such as processors from Intel Corporation of Santa Clara, Calif. and Motorola Corporation of Schaumburg, Ill. Such processors include, or may be in communication with, media, for example computer-readable media, which stores instructions that, when executed by the processor, cause the processor to perform the steps described herein. Embodiments of computer-readable media include, but are not limited to, an electronic, optical, magnetic, or other storage or transmission device capable of providing a processor, such as theprocessor 110 ofclient 102 a, with computer-readable instructions. Other examples of suitable media include, but are not limited to, a floppy disk, CD-ROM, DV)), magnetic disk, memory chip, ROM, RAM, an ASIC, a configured processor, all optical media, all magnetic tape or other magnetic media, or any other medium from which a computer processor can read instructions. Also, various other forms of computer-readable media may transmit or carry instructions to a computer, including a router, private or public network, or other transmission device or channel, both wired and wireless. The instructions may comprise code from any suitable computer-programming language, including, for example, C, C++, C#, Visual Basic, Java, Python, Perl, and JavaScript. - Client devices 102 a-n can be coupled to a
network 106, or alternatively, can be stand alone machines. Client devices 102 a-n may also include a number of external or internal devices such as a mouse, a CD-ROM, DVD, a keyboard, a display device, or other input or output devices. Examples of client devices 102 a-n are personal computers, digital assistants, personal digital assistants, cellular phones, mobile phones, smart phones, pagers, digital tablets, laptop computers, Internet appliances, and other processor-based devices. In general, the client devices 102 a-n may be any type of processor-based platform that operates on any suitable operating system, such as Microsoft® Windows® or Linux, capable of supporting one or more client application programs. For example, theclient device 102 a can comprise a personal computer executing client application programs, also known asclient applications 120. Theclient applications 120 can be contained inmemory 108 and can include, for example, a word processing application, a spreadsheet application, an email application, an instant messenger application, a presentation application, an Internet browser application, a media player application, a calendar/organizer application, a video playing application, an audio playing application, an image display application, a file management program, an operating system shell, and other applications capable of being executed by a client device. Client applications may also include client-side applications that interact with or access other applications (such as, for example, a web-browser executing on theclient device 102 a that interacts with a remote e-mail server to access e-mail). - The
user 112 a can interact with thevarious client applications 120 and articles associated with theclient applications 120 via various input and output devices of theclient device 102 a. Articles include, for example, word processor documents, spreadsheet documents, presentation documents, emails, instant messenger messages, database entries, calendar entries, appointment entries, task manager entries, source code files, and other client application program content, files, messages, items, web pages of various formats, such as HTML, XML, XHTML, Portable Document Format (PDF) files, and media files, such as image files, audio files, and video files, chat messages, email messages, or any other documents or items or groups of documents or items or information of any suitable type whatsoever. - The user's 112 a interaction with articles, the
client applications 120, and theclient device 102 a creates event data that may be observed, recorded, analyzed or otherwise used. An event can be any occurrence possible associated with an article,client application 120, orclient device 102 a, such as inputting text in an article, displaying an article on a display device, sending an article, receiving an article, manipulating an input device, opening an article, saving an article, printing an article, closing an article, opening a client application program, closing a client application program, idle time, processor load, disk access, memory usage, bringing a client application program to the foreground, changing visual display details of the application (such as resizing or minimizing) and other suitable occurrences associated with an article, a client application program, or the client device. Additionally, event data can be generated when theclient device 112 a interacts with an article independent of theuser 112 a, such as when receiving an email or performing a scheduled task. - The
memory 108 of theclient device 102 a can also contain acapture processor 124, aqueue 126, and asearch engine 122. Theclient device 102 a can also contain or is in communication with adata store 140. Thecapture processor 124 can capture events and pass them to thequeue 126. Thequeue 126 can pass the captured events to thesearch engine 122 or thesearch engine 122 can retrieve new events from thequeue 126. In one embodiment, thequeue 126 notifies thesearch engine 122 when a new event arrives in thequeue 126 and thesearch engine 122 retrieves the event (or events) from thequeue 126 when thesearch engine 122 is ready to process the event (or events). When the search engine receives an event it can be processed and can be stored in thedata store 140. Thesearch engine 122 can receive an explicit query from theuser 112 a or generate an implicit query and retrieve information ‘from thedata store 140 in response to the query. In another embodiment, the queue is located in thesearch engine 122. In still another embodiment, theclient device 102 a does not have a queue and the events are passed from thecapture processor 124 directly to thesearch engine 122. According to other embodiments, the event data is transferred using an information exchange protocol. The information exchange protocol can comprise, for example, any suitable rule or convention facilitating data exchange, and can include, for example, any one of the following communication mechanisms: Extensible Markup Language-Remote Procedure Calling protocol (XML/RPC), Hypertext Transfer Protocol (HTTP), Simple Object Access Protocol (SOAP), shared memory, sockets, local or remote procedure calling, or any other suitable information exchange mechanism. - The
capture processor 124 can capture an event by identifying and extracting event data associated with an event. Examples of events include sending or receiving an instant messenger message, a user viewing a web page, saving a word processing document, printing a spreadsheet document, inputting text to compose or edit an email, opening a presentation application, closing an instant messenger application, entering a keystroke, moving the mouse, and hovering the mouse over a hyperlink. An example of event data captured by thecapture processor 124 for an event involving the receipt of an instant messenger message by theuser 112 a can comprise the sender of the message, the recipients of the message, the time and date the message was received, the content of the message and a conversation ID. A conversation ID can be, used to associate messages that form a conversation and can be provided by the instant messenger application or can be generated by thecapture processor 124. A conversation can be one or more messages between theuser 112 a and at least one other user until theuser 112 a logs out of or closes the instant messenger application or the instant messenger application is inactive for a certain period of time (for example, 30 minutes). Another example of event data captured by thecapture processor 124 for an event involving the viewing of a web page by a user can comprise the URL of the web page, the time and date the user viewed the web page, the content of the web page in original or processed forms, a screenshot of the page as displayed to the user, and a thumbnail version of the screenshot. - In the embodiment shown in
FIG. 1 , thecapture processor 124 comprises multiple capture components. For example, thecapture processor 124 shown inFIG. 1 comprises a separate capture component for each client application in order to capture events associated with each application. Thecapture processor 124 can also comprises a separate capture component that monitors overall network activity in order to capture event data associated with network activity, such as the receipt or sending of an instant messenger message. Thecapture processor 124 shown inFIG. 1 also can comprise a separate client device capture component that monitors overall client device performance data, such as processor load, idle time, disk access, the client applications in use, and the amount of memory available. Thecapture processor 124 shown inFIG. 1 also comprises a separate capture component to monitor and capture keystrokes input by the user and a separate capture component to monitor and capture items, such as text, displayed on the display device associated with theclient device 102 a. An individual capture component can monitor multiple client applications and multiple capture components can monitor different aspects of a single client application. - In one embodiment, the
capture processor 124, through the individual capture components, can monitor activity on the client device and can capture events by a generalized event definition and registration mechanism, such as an event schema. Each capture component can define its own event schema or can use a predefined one. Event schema can differ depending on the client application or activity the capture component is monitoring. Generally, the event schema can describe the format for an event, for example, by providing fields for event data associated with the event (such as the time of the event) and fields related to any associated article (such as the title) as well as the content of any associated article (such as the document body). An event schema can describe the format for any suitable event data that relates to an event. For example, an event schema for an instant messenger message event sent by theuser 112 a can include a recipient or list of recipients, the time sent, the date sent, content of the message, and a conversation ID. An event schema for a web page currently being viewed by a user can include the Uniform Resource Locator (URL) of the web page, the time being viewed, and the content of the web page. An event schema for a word processing document being saved by a user can include the title of the document, the time saved, the location of the document, the format of the document, the text of the document, and the location of the document. More generally, an event schema can describe the state of the system around the time of the event. For example, an event schema can contain a URL for a web page event associated with a previous web page that the user navigated from. In addition, event schema can describe fields with more complicated structure like lists. For example, an email schema can contain fields that list multiple recipients. An event schema can also contain optional fields so that an application can include additional event data if desired. - The
capture processor 124 can capture events occurring presently (or “real-time events”) and can capture events that have occurred in the past (or “historical events”). Real-time events can be “indexable” or “non-indexable”. In one embodiment, thesearch engine 122 indexes indexable real-time events, but does not index non-indexable real-time events. Thesearch engine 122 may determine whether to index an event based on the importance of the event. The importance may be measured by a capture score associated with and/or determined for the event. Indexable real-time events can be more important events associated with an article, such as viewing a web page, loading or saving a file, and receiving or sending an instant message or email. Non-indexable events can be deemed not important enough by thesearch engine 122 to index and store the event, such as moving the mouse or selecting a portion of text in an article. Non-indexable events can be used by thesearch engine 122 to update the current user state. While all real-time events can relate to what the user is currently doing (or the current user state), indexable real time events can be indexed and stored in thedata store 140. Alternatively, thesearch engine 122 can index all real time events. - Real-time events can include, for example, sending or receiving an article, such as an instant messenger message, examining a portion of an article, such as selecting a portion of text or moving a mouse over a portion of a web page, changing an article, such as typing a word in an email message or pasting a sentence in a word processing document, closing an article, such as closing an instant messenger window or closing an email message window, loading, saving, opening, or viewing an article, such as a word processing document, web page, or email, listening to or saving an MP3 file or other audio/video file, or updating the metadata of an article, such as book marking a web page, printing a presentation document, deleting a word processing document, or moving a spreadsheet document.
- Historical events are similar to indexable real-time events except that the event occurred before the installation of the
search engine 122 or was otherwise not captured, because, for example, thesearch engine 122 was not operational for a period of time while theclient device 102 a was operational or because no capture component existed for a specific type of historical event at the time the event took place. Examples of historical events include the user's saved word processing documents, media files, presentation documents, calendar entries, and spreadsheet documents, the emails in a user's inbox, and the web pages book marked by the user. Thecapture processor 124 can capture historical events by periodically crawling thememory 108 and any associated data storage device for events not previously captured by thecapture processor 124. Thecapture processor 124 can also capture historical events by requesting certain client applications, such as a web browser or an email application, to retrieve articles and other associated information. For example, thecapture processor 124 can request that the web browser application obtain all viewed web pages by the user or request that the email application obtain all email messages associated with the user. These articles may not currently exist inmemory 108 or on a storage device of theclient device 102 a. For example, the email application may have to retrieve emails from a server device. In one embodiment, thesearch engine 122 indexes historical events. - In the embodiment shown in
FIG. 1 , events captured by thecapture processor 124 are sent to thequeue 126 in a format described by an event schema. Thecapture processor 124 can also send performance data to thequeue 126. Examples of performance data include current processor load, average processor load over a predetermined period of time, idle time, disk access, the client applications in use, and the amount of memory available. Performance data can also be provided by specific performance monitoring components, some of which may be part of thesearch engine 122, for example. The performance data in thequeue 126 can be retrieved by thesearch engine 122 and the capture components of thecapture processor 124. For example, capture components can retrieve the performance data to alter how many events are sent to thequeue 126 or how detailed the events are that are sent (fewer or smaller events when the system is busy) or how frequently events are sent (events are sent less often when the system is busy or there are already too many events waiting to be processed). Thesearch engine 122 can use performance data to determine when it indexes various events and when and how often it issues implicit queries. - In one embodiment, the
queue 126 holds events until thesearch engine 122 is ready to process an event or events. Alternatively, thequeue 126 uses the performance data to help determine how quickly to provide the events to thesearch engine 122. Thequeue 126 can comprise one or more separate queues including a user state queue and an index queue. The index queue can queue indexable events, for example. Alternatively, thequeue 126 can have additional queues or comprise a single queue. Thequeue 126 can be implemented as a circular priority queue using memory mapped files. The queue can be a two- or three-priority queue where higher priority events are served before lower priority events, and other components may be able to specify the type of events they are interested in. Generally, real-time events can be given higher priority than historical events, and indexable events can be given higher priority than non-indexable real-time events. Other implementations of thequeue 126 are possible. In another embodiment, theclient device 102 a does not have aqueue 126. In this embodiment, events are passed directly from thecapture processor 124 to thesearch engine 122. In other embodiments, events can be transferred between the capture components and the search engine using suitable information exchange mechanisms such as: Extensible Markup Language-Remote Procedure Calling protocol (XML/RPC), Hypertext Transfer Protocol (HTTP), Simple Object Access Protocol (SOAP), shared memory, sockets, local or remote procedure calling, or any other suitable information exchange mechanism. - The
search engine 122 can contain anindexer 130, aquery system 132, and a formatter 134. Thequery system 132 can retrieve all real-time events and performance data from thequeue 126. Thequery system 132 can use performance data and real-time events to update the current user state and generate an implicit query. Thequery system 132 can also receive and process explicit queries from theuser 112 a. Performance data can also be retrieved by to thesearch engine 122 from thequeue 126 for use in determining the amount of activity possible by thesearch engine 122. - In the embodiment shown in
FIG. 1 , indexable real-time events and historical events (indexable events) are retrieved from thequeue 126 by theindexer 130. Alternatively, thequeue 126 may send the indexable events to theindexer 130. Theindexer 130 can index the indexable events and can send them to thedata store 140 where they are stored. Thedata store 140 can be any type of computer-readable media and can be integrated with theclient device 102 a, such as a hard drive, or external to theclient device 102 a, such as an external hard drive or on another data storage device accessed through thenetwork 106. In one embodiment, thedata store 140 can be inmemory 108. Thedata store 140 may facilitate one or combination of methods for storing data, including without limitation, arrays, hash tables, lists, and pairs, and may include compression and encryption. In the embodiment shown inFIG. 1 , the data store comprises anindex 142, adatabase 144 and arepository 146. - The
data store 140 comprises a local index. The local index in the embodiment shown inFIG. 1 may comprise information, such as articles, which are associated with theclient device 102 a, auser 112 a of theclient device 102 a, or a group of users of theclient device 102 a. For example, the local index in thedata store 140 shown inFIG. 1 may comprise an index of articles created, edited, received, or stored by theclient user 112 a using theclient machine 102 a, or articles otherwise associated with theclient user 102 a or theclient machine 112 a. The local index may be stored in a client machine, such as indata store 140, in a data store on a local network in a manner accessible by the client machine, on a server accessible to the client machine through the Internet, or in another accessible location. - In contrast, a global index may comprise information relevant to many users or many servers, such as, for example, an index of web pages located on multiple servers in communication with the World Wide Web. One example of a global index is an index used by the Google™ search engine to provide search results in response to a search query.
- A single index may comprise both a local and a global index. For example, in one embodiment, an index may comprise both local and global information, and include a user or client identifier with the local information so that it may be identified with the user(s) or client(s) to which it pertains. Moreover, an index, local or global, may be present in one or multiple logical or physical locations.
- In the embodiment shown in
FIG. 1 , when theindexer 130 receives an event, theindexer 130 can determine, from the event schema, terms (if any) associated with the event, the time of the event (if available), images (if any) associated with the event, and/or other information defining the event. Theindexer 130 can also determine if the event relates to other events and associate the event with related events. For example, for a received instant messenger message event, the indexer can associate the message event with other message events from the same conversation. The messages from the same conversation can be associated with each other in a conversation object, which can be stored in thedata store 140. - The
indexer 130 can send and incorporate the terms and times, associated with the event in theindex 142 of thedata store 140. The event can be sent to thedatabase 144 for storage and the content of the associated article and any associated images can be stored in therepository 146. The conversation object associated with instant messenger messages can be stored in thedatabase 144. - In the embodiment shown in
FIG. 1 , auser 112 a can input an explicit query into a search engine interface displayed on theclient device 102 a, which is received by thesearch engine 122. Thesearch engine 122 can also generate an implicit query based on a current user state, which can be determined by thequery system 132 from real-time events. Based on the query, thequery system 132 can locate relevant information in thedata store 140 and provide a result set. In one embodiment, the result set comprises article identifiers for articles associated with theclient applications 120 or client articles. Client articles include articles associated with theuser 112 a orclient device 102 a, such as the user's emails, word processing documents, instant messenger messages, previously viewed web pages and any other article or portion of an article associated with theclient device 102 a oruser 112 a. An article identifier may be, for example, a Uniform Resource Locator (URL), a file name, a link, an icon, a path for a local file, or other information that may identify an article. In another embodiment, the result set also comprises article identifiers for articles located on thenetwork 106 or network articles located by a search engine on a server device. Network articles include articles located on thenetwork 106 not previously viewed or otherwise referenced by theuser 112 a, such as web pages not previously viewed by theuser 112 a. - Articles stored in the
messaging index 142 can include one or more types of messages, such as a user's emails, chat messages, and instant messaging messages. Each time a message is received, sent, modified, printed, or otherwise accessed, a record may be stored in themessaging index 142. This information can later be searched to identify messages that should be displayed in the user interface. - An embodiment of the present invention may also store message threads in the
data store 140. In such an embodiment, messages are related together by various attributes, including, for example, the sender, recipient, date/time sent and received, the subject, the content, the window identifier of the display window in which the messages were displayed, or any other attribute of the message. The related messages can then be retrieved as a thread, which may be treated as a document by thedisplay processor 128. - The formatter 134 can receive the search result set from the
query system 132 of thesearch engine 122 and can format the results for output to adisplay processor 128. In one embodiment, the formatter 134 can format the results in XML, HTML, or tab delineated text. In another embodiment, the formatter 134 displays the results as strings on user interface (UI) components such as labels. Thedisplay processor 128 can be contained inmemory 108 and can control the display of the result set on a display device associated with theclient device 102 a. Thedisplay processor 128 may comprise various components. For example, in one embodiment, thedisplay processor 128 comprises a Hypertext Transfer Protocol (HTTP) server that receives requests for information and responds by constructing and transmitting Hypertext Markup Language (HTML) pages. In one such embodiment, the HTTP server comprises a scaled-down version of the Apache Web server. Thedisplay processor 128 can be associated with a set of Application Programming Interfaces (API) to allow various applications to receive the results and display them in various formats. The display APIs can be implemented in various ways, including, for example, DLL exports, COM interface, VB, JAVA, or .NET libraries, or as a web service. - Through the client devices 102 a-n, users 112 a-n can communicate over the
network 106, with each other and with other systems and devices coupled to thenetwork 106. As shown inFIG. 1 , aserver device 150 can be coupled to thenetwork 106. In the embodiment shown inFIG. 1 , thesearch engine 122 can transmit a search query comprised of an explicit or implicit query or both to theserver device 150. Theuser 112 a can also enter a search query in a search engine interface, which can be transmitted to theserver device 150 by theclient device 102 a via thenetwork 106. In another embodiment, the query signal may instead be sent to a proxy server (not shown), which then transmits the query signal toserver device 150. Other configurations are also possible. - The
server device 150 can include a server executing a search engine application program, such as the Google™ search engine. In other embodiments, theserver device 150 can comprise a related information server or an advertising server. Similar to the client devices 102 a-n, theserver device 150 can include aprocessor 160 coupled to a computer-readable memory 162.Server device 150, depicted as a single computer system, may be implemented as a network of computer processors. Examples of aserver device 150 are servers, mainframe computers, networked computers, a processor-based device, and similar types of systems and devices. Theserver processor 160 can be any of a number of computer processors, such as processors from Intel Corporation of Santa Clara, Calif. and Motorola Corporation of Schaumburg, Ill. In another embodiment, theserver device 150 may exist on a client-device. In still another embodiment, there can bemultiple server devices 150. -
Memory 162 contains the search engine application program, also known as asearch engine 170. Thesearch engine 170 can locate relevant information from thenetwork 106 in response to a search query from aclient device 102 a. Thesearch engine 170 then can provide a result set to theclient device 102 a via thenetwork 106. The result set can comprise one or more article identifiers. An article identifier may be, for example, a Uniform Resource Locator (URL), a file name, a link, an icon, a path for a local file, or anything else that identifies an article. In one embodiment, an article identifier can comprise a URL associated with an article. - In one embodiment, the
server device 150, or related device, has previously performed a crawl of thenetwork 106 to locate articles, such as web pages, stored at other devices or systems coupled to thenetwork 106, and indexed the articles inmemory 162 or on another data storage device. It should be appreciated that other methods for indexing articles in lieu of or in combination with crawling may be used, such as manual submission. - It should be noted that other embodiments of the present invention may comprise systems having different architecture than that which is shown in
FIG. 1 . For example, in some other embodiments of the present invention, theclient device 102 a is a stand-alone device and is not coupled to a network. Thesystem 100 shown inFIG. 1 is merely exemplary, and is used to explain the exemplary methods shown inFIGS. 2 through 7 . - Various methods may be implemented in the environment shown in
FIG. 1 and other environments, according to the present invention. Methods according to the present invention may be implemented by, for example, a processor-executable program code stored on a computer-readable medium. - For example, in one embodiment of the present invention, a method is provided that comprises identifying an aspect associated with an article, generating an insert, and causing the insert to be output in association with the aspect. The generation of the insert may be based, at least in part, on the aspect, and the generated insert may comprise a search result. The search result may comprise at least one of an article identifier, a thumbnail, a text snippet, a Uniform Resource Locator, and a path.
- An aspect may comprise an aspect of an article. An aspect associated with an article, for example, may comprise a hyperlink contained in a web page article; an image or sound file associated with or contained in an article; a citation in a text document; a menu or a particular menu item found in a web page; a caption; a status bar; a web counter associated with a web page article; a name, email address, or screen name of a sender or a recipient of an email or instant messenger message; a recipient input field or a subject input field of an email message; a domain name; information about an article's author or publisher; a prominent term or feature of an article; a table or a figure in a word-processor document; an entry, a column title, or a formula in a spreadsheet article; a slide or a slide title in a presentation article; source data; a Uniform Resource Locator (URL); article meta data; a JavaScript program contained in an Hypertext Transfer Protocol (HTTP) or Hypertext Markup Language (HTML) article; an article header; a window identifier in which an article is displayed; a conversation identifier; a roster list of participants in an instant messenger conversation; an article's title; and an input field contained in an article.
- Generation of an insert may comprise searching an article index for a search result. In one embodiment, the article index searched may comprise an index of articles available on the World Wide Web. For example, one such article index may comprise information related to a plurality of web page articles found by a web crawler or other index building mechanism and organized such that it is searchable upon receiving a search query. In another embodiment, the article index searched may comprise a local article index. For example, a local article index may comprise the
article index 143. In one embodiment, the local article index may comprise a messaging index, such as themessaging index 142 described with respect toFIG. 1 , and/or other indexes associated with a client device or application. - Searching an article index for a search result to be included in the insert may comprise generating a user context-dependent search query to use in searching the article index. A user context-dependent search query may be based, at least in part, on a user action history comprising a plurality of user actions.
- In another embodiment of the present invention, a method may comprise identifying an aspect associated with an article, automatically generating an insert comprising a request, and causing the insert to be output in association with the aspect. The generation of the insert may be based, at least in part, on the aspect. The request may comprise a request to the
user 112 a. For example, the request may comprise an article-related request. An article-related request may comprise a request associated with actions theclient device 102 a may take associated with the article comprising the aspect. For example, a request may comprise a request to the user for information, a permission, a direction, an instruction, a decision, an answer, and/or a prioritization. For example, a request for permission may comprise a request for permission to index information and events associated with the article comprising the aspect. A request for a prioritization may comprise a request to theuser 112 a to indicate the relative priority events related to the presently-viewed article, where higher priority events may be more quickly accessed later in a search of a local article index. - A request included in an insert may comprise a user context-dependent request. In one such embodiment, generating the insert may comprise generating a user context-dependent request. A user context-dependent request may be based, at least in part, on a user action history comprising a plurality of user actions.
- An insert generated according to the present invention may be caused to be output in association with the aspect in a wide variety of different methods in different embodiments. For example, in one embodiment, at least part of the insert may be placed into the article comprising the aspect. In another embodiment, at least part of the insert may be caused to be displayed in a transient display proximate to the aspect. In yet another embodiment, at least part of the insert may be caused to be displayed in a separate window from the article, such as a pop-up window. Those skilled in the art will recognize yet other ways of outputting the insert in association with an aspect.
- In one embodiment of the present invention, a processor may 110 receive an article comprising an aspect. For instance, the article may comprise a web page, and the aspect may comprise a hyperlink found on the web page article. The
processor 110 may then analyze the article. For example, in one embodiment, the processor may analyze the article for the presence of an aspect, such as a hyperlink, or an image. Upon identifying an aspect associated with the article, thesearch engine 122 may then automatically search an article index for a search result, such as an article identifier, associated with the aspect. In one embodiment, the search function may search a local article index, such as thearticle index 143 shown inFIG. 1 . For example, the local article index may comprise a plurality of Uniform Resource Locator (URL) article identifiers, and thesearch engine 122 may search thearticle index 143 or another area of thedata store 140, for a URL article identifier associated with the hyperlink aspect found on a web page article. Thesearch engine 122 may also search thearticle index 143 for an article associated with all or a majority of the article's content. In one embodiment, thesearch engine 122 may search a local article index for a one or more search results associated with the aspect of the article. In another embodiment, thesearch engine 122 may search an index of articles available on the world wide web, such as by communicating with thesearch engine 170. - The generation of the insert may be based, at least in part, on the aspect. For example, the
processor 110, or another suitable entity may generate an association of the aspect with a search result and/or a request. The association may comprise more than a one-to-one relationship between a particular search result and/or request and a particular aspect. The association may have been previously undetermined before theprocessor 110 associates the applicable search result and/or request with the aspect. The association may comprise a wide variety of connections, relations, unions, overlaps, links, combinations, affiliations, similarities, tie-ins, and commonalities between the aspect and the search result and/or the request. Just some examples of associations between a search result and/or a request and an aspect may include commonality of text, related publishers or authors, and similar subject matter. A search result may comprise a variety of other forms and formats, including an article identifier, a text snippet excerpted from or summarizing the article it is associated with; a thumbnail, such as a thumbnail image contained in the article the article identifier is associated with; and a path, such as a Microsoft® PowerPoint presentation file name. - A search of an article index, such as a local article index, for a search result associated with the aspect of the article may be triggered by a variety of stimuli. For example, the search may be triggered by an opening of an application on the
client device 102 a, by hovering an indicator on a user interface corresponding to a pointing device over the aspect, by clicking on the aspect, by typing text in the article, by clicking on a term, or by clicking on or hovering over a term receptacle such as an address bar. - In this method, the
display processor 128 may then generate an insert comprising at least one of a search result and a request. An exemplary insert may comprise a URL article identifier search result and a request for an input from theuser 112 a related to the article comprising the aspect. For instance, the request for an input from theuser 112 a may comprise a request for an instruction whether to archive events related to the article comprising the aspect. Thedisplay processor 128 may then cause the insert to be output in association with the aspect. For example, in one embodiment, thedisplay processor 128 may modify the article by placing at least a part of the insert into the article in association with the aspect. In one embodiment, the insert may be caused to be output in association with the aspect by generating and causing the output of a transient display proximate to the aspect. The transient display proximate to the aspect may comprise a transient menu. For example, a transient display proximate to the aspect may comprise a drop-down menu near a hyperlink aspect contained in the article. A transient display insert may alternatively comprise a Microsoft® Windows tool-tip proximate to the aspect, and may be programmed to appear only when theuser 112 a hovers an indicator on a user interface device corresponding to a mouse over the aspect. In yet another embodiment, the insert may be caused to be output in association with the aspect by integrating the insert into the aspect of the article. In one such embodiment, an article comprising text, for example, may be modified by moving text found below the aspect downward on the document, and placing an insert, such as a thumbnail image search result in the newly created space formerly occupied by article text. Of course, those skilled in the art will appreciate from the foregoing description of exemplary embodiments that the insert may be integrated into or output in association with the aspect in a number of other ways in other embodiments of the invention. - The
display processor 128 may then cause the modified article to be output. For example, the modified article to be output to a user interface device, such as a computer monitor, for theuser 112 a to view. In one embodiment, the modified article is caused to be output upon receipt of an interest signal. For example, theuser 112 a may generate and output to theclient device 102 a an interest signal comprising his or her interest in the aspect of the article. For instance, theuser 112 a may generate an interest signal by hovering an indicator corresponding to a pointing device, such as a mouse, over a hyperlink on a web page. - The article may comprise existing data in a first article format, such as HTML, and the insert may comprise client device-generated data in the same first article format. In such an embodiment, placing the insert into the article can comprise adding the client device-generated HTML data to the article's existing HTML. In a different embodiment, the article may comprise existing data in the first article format, and the insert may comprise client device-generated data in a second article format. For instance, the insert may comprise JavaScript program code, and may be placed into a Microsoft® Word article.
- In one embodiment, a search query the
search engine 122 may execute against an article index may comprise a user context-dependent search query generated by theclient device 102 a. In another embodiment, an insert may comprise a user context-dependent request. The context in which theuser 112 a is operating may be determined based on theclient applications 120 that theuser 112 a is executing, the content of the files on which theuser 112 a is operating, or other activity or event(s) occurring on theclient 102 a. The user context may comprise, for example, a user action history comprising a plurality of user actions. Each user action comprises various parameters, including, for example, a date/time parameter. For example, if theuser 112 a prints a word-processing document multiple times in a short period of time, the queries against a messaging and/or an article index may be related to the content of the document theuser 112 a printed, the recentness and/or the frequency of activity related to the document. Similarly, a user context-dependent request output to theuser 112 a in an insert may comprise a request for permission to archive future events associated with the previously printed word-processing document. - User context-dependent requests and search queries may be generated using information from a user's actions or a combination thereof. One such user context-dependent search query may be generated by the
query system 132 or another suitable entity. For example, if theuser 112 a prints a word-processing document and also highlights an aspect comprising a selection of words within that document, the queries generated may be a combination of content from the entire printed document and the highlighted words. A user-context dependent request may request of theuser 112 a whether he or she wishes to search for articles related to the highlighted aspect. In another embodiment, a user context-dependent search query or request may be generated based upon which email messages theuser 112 a has recently accessed, or upon an email organization structure theuser 112 a maintains in an email application. Activities or actions taken by theuser 112 a while browsing websites on an information network, such as the Internet, may also be used to generate a user context-dependent search query and/or a user-context dependent request. - An article index searched for a search result may comprise differing types of indices in different embodiments. For example, in one embodiment, a local article index may be searched. In one such embodiment, a local article index may comprise a messaging index. The
messaging index 142 may comprise at least one of a chat message identifier, an email message identifier, an instant message identifier, or other messaging article. Themessaging index 142 may comprise article identifiers for any messaging-related articles. Indices other than an article or messaging index may also be utilized. - For example, in one embodiment, if a
user 112 a is editing an article comprising a title aspect, and types the term “laptop” into the title aspect, thedisplay processor 128 may receive a search result set from the messaging index that includes article identifiers in themessaging index 142 that are relevant, as determined by thesearch engine 122, to the term “laptop.” A generated insert may comprise links to email threads, chat messages, instant messages, and other messaging articles. Thedisplay processor 128 may additionally or alternatively receive one or more search results from an article index in response to a search query. For example, thedisplay processor 128 may receive a search result set that includes search results retrieved from an article index, such as thearticle index 143 that are relevant to the aspect, as determined by thesearch engine 122, to the term “laptop.” Thearticle index 143 may include, for example, an index of word-processor documents, and the search results may include links to the documents. - In such an embodiment, the
display processor 128 may then automatically generate an insert based, at least in part, on the aspect, and comprising at least one of a search result, and a request. The display processor may, for example, generate an HTML insert or other document that may be viewed in a browser, the insert including one or both of a search result and a request so that theuser 112 a can easily access an article associated with the search result and/or instruct theclient device 102 a to capture events related to the article presently being viewed. - A different method according to the present invention comprises receiving a term in an input field. For example, the term may comprise a word or phrase entered into an address bar of a network browser application, such as Microsoft's Internet Explorer® web browser application, and the entered term may be received by the
search engine 122. In other embodiments, the input field may comprise other address bars, as well as other term receptacles, such as a query-input field, such as the query input field found in Google Corporation's Google Toolbar product. In an email application, the input field may comprise a “To:” box provided to input a recipient's name. In yet other embodiments, the input field may comprise an article-integrated input field. Examples of an article-integrated input field comprise a text box, as commonly found on a variety of web pages available on the Internet. - This method further comprises searching an article index for an article identifier associated with the received term. In one embodiment, the
search engine 122 may perform the search. In one such embodiment, the article index may comprise an index on theclient device 102 a, such as thearticle index 143, or themessaging index 142. In another embodiment, the article index may comprise an index maintained by a server device of web page articles available on an information network, such as the Internet. An example of such an index is the index maintained by asearch engine 170 pictured inFIG. 1 . Thesearch engine 170 may comprise, for instance, the Google search engine. One embodiment further comprises searching a second article index for a second article identifier associated with the received term. The second article identifier may be associated with a second article associated with the term. - This method further comprises receiving the article identifier, and causing it to be output in a transient menu associated with the input field. In one embodiment, the
display processor 128 receives the article identifier and causes it to be output in the transient menu associated with the input field. The transient menu may take a variety of forms. For instance, in one embodiment, the transient menu may comprise a drop-down menu near, or otherwise proximate to or associated with, the input field. In other embodiments, the transient menu may comprise other suitable forms, such as a pop-up menu near the input field, a slide-out menu near the input field, a separate window, a pop-up menu that covers or surrounds the input field, and a tool-tip substantially near the input field. - The article identifier may be associated with an article. For example, the article identifier may comprise a URL or other path associated with a web page article that pertains to the received term. In other embodiments, the article identifier may comprise other forms and formats. For example, the article identifier may comprise a path, such as a Microsoft® Excel file name. In another embodiment, the article identifier may comprise a creator name associated with a creator of the article. For instance, the creator name may comprise the author or publisher of a web page, the author or publisher of a word-processor document, or the author or publisher of an email or instant messenger message. The article identifier may alternatively comprise a snippet. For example, the snippet may comprise an excerpt or a summary of the article. In another embodiment, the article identifier may comprise a thumbnail, such as a thumbnail image excerpted from the article. The article identifier may also comprise a message thread, for instance, a message thread that relates a plurality of related email messages.
- In one embodiment, a search query the
search engine 122 executes against the local article index may be a user context-dependent search query generated by theclient device 102 a. The context in which theuser 112 a is operating may be determined, for example, based on theclient applications 120 that theuser 112 a is executing, the content of the files on which theuser 112 a is operating, or other activity or event(s) occurring on theclient 102 a. The user context may comprise, for example, a user action history comprising a plurality of user actions. Each user action comprises various parameters, including, for example, a date/time parameter. For example, if theuser 112 a prints a word-processing document multiple times in a short period of time, the queries against the messaging and article indices may be related to the content of the document theuser 112 a printed. - One embodiment further comprises receiving a select indication for the article identifier, and displaying an article associated with the article identifier. For example, in one such embodiment, the
display processor 128 may receive the select indication from theuser 112 a, indicating that he or she is interested in seeing the article associated with the article identifier output to theuser 112 a. Thedisplay processor 128 may then retrieve the article from thedata store 140, and output the article to theuser 112 a. The article identifier may be a URL in such an embodiment, and the article associated with the URL article identifier may be a web page article. The web page article may be output to theuser 112 a by displaying the web page article on a graphical user interface in communication with theclient device 102 a. - A server device, such as the server device 104, may carry out another method according to the present invention. This method comprises receiving a term signal comprising a term, such as the one of the types of terms described above, and searching an article index for an article identifier associated with the term and an article that pertains to the term. The article index may comprise, for example, a server-based messaging index or a server-based article index, or the
search engine 170 pictured inFIG. 1 . The method further comprises retrieving the article identifier, and generating an information signal causing the article identifier to be output in a transient menu associated with an input field. One embodiment according to this method further comprises outputting the generated information signal to a client device, such as theclient device 102 a. - As with the other methods according to the present invention, a search query the
search engine 122 executes against the local article index may be a user context-dependent search query generated by theclient device 102 a. The context in which theuser 112 a is operating may be determined based on theclient applications 120 that theuser 112 a is executing, the content of the files on which theuser 112 a is operating, or other activity or event(s) occurring on theclient 102 a. The user context may comprise, for example, a user action history comprising a plurality of user actions. Each user action comprises various parameters, including, for example, a date/time parameter. For example, if theuser 112 a prints a word-processing document multiple times in a short period of time, the queries against the messaging and article indices may be related to the content of the document theuser 112 a printed. -
FIG. 2 is a flowchart illustrating generating a user interface in a first embodiment of the present invention. In the embodiment shown, theclient device 102 a identifies an aspect associated with an article as shown bybox 202. The aspect may comprise a hyperlink contained in the web page article. Other examples of aspects comprise images in an article, article headers, audio files in an article, article titles, email recipients' names, and input fields contained in an article. - As shown by
box 204, upon identifying the aspect, thequery system 132 generates a user context-dependent query. The user context-dependent query may be an implicit query generated by aclient application 120 in response to events associated with theuser 112 a, for example, information being entered by or output to theuser 112 a. For example, the response to the query may depend on the time of day the query is run or on previous or a sequence of previous actions by the user. In one embodiment, the current user context is derived from a data store comprising a history of user actions, such as printing or opening a file, or sending an email message. In other embodiments, the query generated may be an explicit query, e.g., a query entered by auser 112 a in a text box or other user input interface. - Upon generating the user context-dependent query, the
query system 132 executes the generated search query on a local article index, such as thearticle index 143 stored in the data store (140) 206. Thequery system 132 searches the local article index for a search result, such as an article identifier, associated with the aspect. An exemplary search result may comprise a path of a word-processing document stored on theclient device 102 a, where the document is associated with the aspect. Thequery system 132 then receives the search result from the local article index as shown bybox 208. The search result may comprise one or more article identifiers, and may comprise snippets or text summaries of the article with which the article identifier is associated. In the case of a file, the search result may be a fully qualified path. - In one embodiment, the
query system 132 may then rank a plurality of search results in the result set. Thequery system 132 may perform queries on additional indices, such as themessaging index 142, or an index comprising news articles, or any other type of document or file that can be indexed. Thequery system 132 may also cause queries to be executed on indices not stored on theclient 102 a or in thedata store 140. For example, in one embodiment, thequery system 132 may cause queries to be executed on thesearch engine 170. - In the embodiment shown, the
query system 132 outputs the result set to thedisplay processor 128, which generates an insert as shown bybox 210. The insert may be based, at least in part, on the aspect, and may comprise the search result. The insert may comprise an HTML coding of information such as text describing the search result, a thumbnail image of the article, or any other information that would be useful to theuser 112 a in identifying a potentially relevant result. The insert may alternatively or additionally comprise a request. A request may comprise an article-related request, and may comprise a user context-dependent request. A request may comprise, for example a request to theuser 112 a to indicate whether theindexer 130 should index events pertaining to the presently viewed web page article. In another embodiment, a request may comprise another request for information or for a decision from theuser 112 a, such as whether an event should be marked as high-priority, whether theuser 112 a would like to see more articles like the one he or she is presently accessing, whether the user would like to add a bookmark on his or her desktop to the article, whether the user would like to return to the last article he or she had accessed, whether articles received from the same author or publisher should be automatically output to theuser 112 a, etc. - In the embodiment shown in
FIG. 2 , thedisplay processor 128 then places the insert into the article in association with the aspect as shown bybox 212. For example, thedisplay processor 128 may modify a web page article by placing an HTML insert into the existing HTML of the web page article such that the insert will be displayed near the aspect when the article is displayed. In one embodiment, an effect of this modification of the article may comprise a displacement or a movement of existing article content or of the aspect, and the inclusion of the insert's content. Thedisplay processor 128 may then cause the article to be displayed or otherwise output as shown inbox 214. In one embodiment, thedisplay processor 128 may cause the article comprising the insert to be displayed on a graphical user interface in communication with theclient device 102 a. The functions described may be performed by other components in another embodiment of the present invention. For example, in one embodiment, thequery system 132 anddisplay processor 128 are combined, and the combined component performs functions to facilitate execution of queries, ranking of result sets, and causing the outputting of the insert and article. Other configurations are also possible. -
FIG. 3 is a flowchart illustrating generating a user interface in a second embodiment of the present invention. First, aclient application 120 receives a term in an addressbar input field 302. For example, theclient application 120 may comprise a network browser application, such as Microsoft's Internet Explorer®. Such a client application may include an address bar input field, where auser 112 a may enter in a URL of a website that they may wish to visit on the Internet. In other embodiments, theclient application 120 may comprise a different suitable type, such as an email program, and the input field may comprise a term receptacle for inputting an email recipient's name or email address. The term received by the address bar input field may comprise a full term, such as a full word, phrase, or sentence, or may comprise a partial term, such as a misspelled word, a partial word lacking a suffix or a prefix, an incomplete phrase, or a fragment sentence. - The
client application 120 outputs information conveying the received term to thesearch engine 122. Thequery system 132 of thesearch engine 122 may then generate a user-contextdependent search query 304 associated with theuser 112 a and the term received in the address bar. The user context-dependent query 304 may be an implicit query generated by aclient application 120 in response to events associated with theuser 112 a, for example, information being entered by or output to theuser 112 a. For example, the response to the query may depend on the time of day the query is run or on previous or a sequence of previous actions by the user. In one embodiment, the current user context is derived from adata store 140 comprising a history of user actions, such as printing or opening a file, or sending an email message. In other embodiments, the query generated may be an explicit query, e.g., a query entered by auser 112 a in a text box, or a query term input in an input field, such as the term received in the address bar input field in 302. - In the embodiment shown in
FIG. 3 , thesearch engine 122 may then search an article index, such as alocal article index 143 or alocal messaging index 142, for URLs associated with the generated query. Alternatively or additionally, an embodiment may search an article index for other types of article identifiers, such as file names or paths, thumbnail images, sound files, or text snippets. In one embodiment, thesearch engine 122 may generate and output a term signal to a server device comprising a second article index, the term signal to instruct the server device to search for a second article identifier associated with a second article and the term. In some embodiments, thesearch engine 122 may output the generated search query over thenetwork 106 to asearch engine 170. In such an embodiment, thesearch engine 170 may search thenetwork 106 for URLs or other article identifiers associated with the search query. - Upon finding URLs associated with the generated search query, the
search engine 122 outputs the URLs to thedisplay processor 128. Thedisplay processor 128 then receives theURLs 308. Thedisplay processor 128 then causes the received URLs to be output to a graphical user interface in a drop-down transient menu near the addressbar input field 310. In other embodiments, received URLs or other article identifiers associated with the received term or the generated query may be output in other forms of transient menus associated with the address bar or another suitable input field. For example, a text snippet article identifier may be caused to be output as a transient tool-tip located substantially near the input field. In one embodiment, other information that theuser 112 a may find useful or informative is provided along with the article identifiers associated with the received term in the transient menu. For example, information pertaining to when theuser 112 a last visited an article associated with a provided article identifier, when theuser 112 a last entered the term in the term receptacle, or similar queries theuser 112 a may find helpful to achieving his or her search or navigational goals may be provided along with an article identifier associated with the received term. -
FIG. 4 is a flowchart illustrating generating a user interface in a third embodiment of the present invention. In the embodiment shown, a server device, such as theserver device 150 shown inFIG. 1 , receives a term signal comprising aterm 402. The term in such an embodiment may have been input by a user of a client device in an input field, such as an address bar of a web browser client application. For instance, the term signal may have been generated by a client device search function, such as thesearch engine 122 shown inFIG. 1 , and output over thenetwork 106 to theserver device 150. In another embodiment, a client device that receives a term in an input field may search a local article index for article identifiers associated with the term, either in addition to, or alternatively to, outputting a term signal to theserver device 150. - Upon receiving the term signal, the server device may output the term to a search engine application contained in the server device's memory. The search engine application may be, for example, the
search engine 170 contained in thememory 162 of theserver device 150 shown inFIG. 1 . Thesearch engine 170 then generates a search query associated with theterm 404. The search query may comprise a user-context dependent search query associated with a user and the term received. The user context-dependent query may be an implicit query generated by aclient application 120 in response to events associated with theuser 112 a, for example, information being entered by or output to theuser 112 a via theclient device 102 a. For example, the response to the query may depend on the time of day the query is run or on previous or a sequence of previous actions by the user. In one embodiment, the current user context is derived from a data store in communication with theserver device 150 that comprises a history of user actions, such as printing or opening a file, or sending an email message. In other embodiments, the query generated may be an explicit query, e.g., a query derived by theserver device 150 solely from the term or terms received in the term signal. - The
search engine 170 may then search an article index for an article identifier, such as a URL, associated with the generated search query 406. For instance, the search engine may search the Internet for a URL of a web page article that is associated with the interests indicated by the term or terms in the term signal. Upon finding such an article identifier, thesearch engine 170 may retrieve thearticle identifier 408. - The
search engine 170 may then generate an information signal causing the retrieved article identifier to be output in a transient menu associated with aninput field 410. For example, the information signal may cause a URL article identifier to be output on a graphical user interface in a drop-down menu near an address bar input field on a web browser client application. Theserver device 150 then outputs the information signal generated by thesearch engine 170 to aclient device 412, such as theclient device 102 a shown inFIG. 1 . The information signal may be output over thenetwork 106. Theclient device 102 a may then output the article identifier to theuser 112 a in accordance with the instructions contained in the information signal. -
FIG. 5 is a screen shot 500 illustrating information displayed in an HTML web page article in one embodiment of an article constructed according to the method shown inFIG. 2 . The screen shot 500 shows a webbrowser client application 502. The webbrowser client application 502 displays an HTMLweb page article 504 comprisingaspects 506 and 508.First aspect 506 comprises a title aspect of theweb page article 504. Aspect 508 comprises a baseline menu of areas related to theweb page article 504 that a user could choose to investigate. - As shown in
FIG. 5 , theweb page article 504 has been modified with the placement ofinserts first insert 510 comprises a request output in association with the titlefirst aspect 506. The request shown comprises article-related request. The request shown comprises a request to the user to select an option from among a list of three options related to the displayedweb page article 504. The first option allows a user of the webbrowser client application 502 to see a list of related web page articles that he or she has already viewed. The second option allows the user to exclude the presently displayedweb page article 504 from a client machine data store. The third option allows the user to flag theweb page article 504 presently displayed as important, and possibly worth viewing again. - The
second insert 512 comprises a search result, and has been output in association with the baseline menusecond aspect 506 of theweb page article 504. The search result shown in thesecond insert 512 comprises an article identifier. Thesecond insert 512 shown comprises information about when the user of the client deviceweb browser application 502 last visited the presently displayed website. Thesecond insert 512 further comprises HTML generated by a display processor and integrated into the existing HTML of theweb page article 504. In other embodiments inserts may comprise a wide variety of information, search results, article identifiers, and requests, and may take other forms, such as a transient display proximate to the aspect, such as a tool-tip or a transient menu, or may be displayed in a window separate from the article. - The two
inserts web page article 504 shown inFIG. 5 are merely exemplary of how an HTML article may be modified according to the present invention. For example, auser 112 a may select different, fewer, or additional categories to display on the HTML article. In one embodiment, theuser 112 a may access an administration page to vary the layout of the HTML article shown inFIG. 5 as desired. - Another embodiment of the present invention may present an article identifier to a user in a transient menu associated with an input field.
FIG. 6 is a screen shot 600 illustrating a user interface according to a second embodiment of the present invention. The screen shot 600 represents a graphical user interface generated according to the method shown inFIG. 3 . The screen shot 600 shows aclient application display 602. In the embodiment shown, the client application comprises a Microsoft® Internet Explorer® web browser application. Theclient application display 602 comprises anaddress bar 604. Theaddress bar 604 may conventionally be used to input a URL of a web page article that a user wishes to visit on the Internet or an intranet. In the embodiment shown, theaddress bar 604 may be used to enter aterm 606. Theterm 606 may comprise, for example, a word, a phrase, a sentence, or a query. In the embodiment shown, theterm 606, “bobby flay,” has been entered in theaddress bar 604. - In the embodiment shown in
FIG. 6 , a transient drop-down menu 608 is shown near theaddress bar 604. In the embodiment shown, the transient drop-down menu 608 appears when a user of theweb browser 602 enters aterm 606 in theaddress bar 604, and disappears when the user either selects an item from the drop-down menu, or types a URL or other web address in theaddress bar 604. In other embodiments, the transient menu may disappear in response to a variety of stimuli. For example, the transient menu may disappear in response to the receipt of a predetermined term, substring, or characters, such as “http,” or “://” in the term receptacle may trigger the transient menu to disappear. In another embodiment, the transient menu may disappear momentarily as theuser 112 a enters more terms in the term receptacle, and may reappear after the system has performed a new search for article identifiers associated with the additional terms. - The drop-
down menu 608 shown comprises twoarticle identifiers first article identifier 610 shown comprises a hyperlink to a web page article on a “StarChefs” website related to “Bobby Flay.” Thefirst article identifier 610 further comprises a selection of hyperlinked menu items, each providing access to a different section on the “StarChefs” website related to “Bobby Flay.” Thesecond article identifier 612 shown, comprises a hyperlink to a page on a retail site, “Amazon.com®,” that pertains to a book titled Bobby Flay's Bold American Food, and that is likely authored by “Bobby Flay.” Both the first and thesecond article identifiers web browser application 602. In other embodiments, article identifiers presented to a user may comprise a wide variety of suitable types, including thumbnail images, file names or paths, and may be items stored on and retrieved from a server device, or located by a search engine on a server device, such as thesearch engine 170 shown inFIG. 1 . -
FIG. 7 is a screen shot 700 illustrating a user interface according to a third embodiment of the present invention. The screen shot 700 represents a graphical user interface generated according to the method shown inFIG. 4 . The screen shot 700 shows a user interface of a webbrowser client application 702. The web browser client application shown is a Microsoft Internet Explorer® web browser application. The webbrowser client application 702 comprises anaddress bar 704. Theaddress bar 704 may be used similarly to the address bar (604) described with respect toFIG. 6 . In the embodiment shown, a user has entered aterm 706 into theaddress bar 704. Theterm 706 shown comprises “bobby flay.” In other embodiments, a variety ofterms 706, such as those described above, may be entered into theaddress bar 704. - The screen shot 700 further comprises a drop-down
transient menu 708 near theaddress bar 704. Other embodiments comprise various suitable transient menus associated with input fields. For example, in one embodiment, the transient menu may comprise a right-click menu that appears near an article-integrated input field when a user “right-clicks” the right mouse button while using a Microsoft® Windows® application. Thetransient menu 708 shown comprises threearticle identifiers input term 706 “bobby flay.” The article identifiers shown 710, 712, 714 each comprise an Internet address for a website that pertains to theterm 706 entered in theaddress bar 704. - The transient drop-
down menu 708 shown inFIG. 7 appears when a user types aterm 706 in theaddress bar 704. The drop-down menu 708 disappears when the user enters a URL, website address, or file name in theaddress bar 704, or after a predetermined period of time. In the embodiment shown inFIG. 7 , theresultant article identifiers menu 708 comprise results that may be conventionally presented to a user upon inputting the same or a similar search term in the query box of a search engine, such as the Google® search engine. The present embodiment allows the user to forgo traveling to a search engine to conduct a search, instead receiving results upon entering a term in the address bar of a web browser. The present embodiment may also allow theuser 112 a to forgo an explicit search action, such as typing a search query into a search box, that may be required in conventional methods in order to receive search results and execute a search action. - Embodiments of the present invention may incorporate additional features as well. For example, in one embodiment of the present invention, the
display processor 128 supports a set of Application Programming Interface (API) calls. In this embodiment, an application running on theclient 102 a, such as the web server, is able to call an API to display information according to an embodiment of the present invention, such as those exemplary methods set out above. The API may also provide the capability of formatting the result set in HTML, XML, or any other format required by the user. - It can be seen that there are many possible types, configurations and contents of aspects, inserts, term input fields, transient menus, and a wide variety of different methods of displaying and otherwise outputting inserts and transient menus. For example, possible types of aspects may include URLs, links, recognized global entities such as names, organizations, and recent news topics, as well as recognized entities related to the current user, such as important or repetitive terms or phrases for the user, names or identifiers of people that the user communicates with, etc.
- Inserts may comprise content comprising related information, URLs, links, search result information, links to local and global search results, and meta information about local and global search results. Meta information about local and global search results may comprise, for example, the number of results in a local index, article information such as whether an article has been viewed, how long ago the article was last accessed or viewed, the number of times an article has been accessed or viewed, the length of time a user spent viewing an article, etc.
- In various embodiments, generated inserts may be displayed or otherwise output as text proximate to an aspect, text after an aspect, a thumbnail or other image proximate an aspect, text or a thumbnail near the article comprising the aspect, text or a thumbnail in a pop-up or persistent window separate from the aspect or the article comprising the aspect, etc. Similarly an article identifier associated with a term received in an input field and received in response to a search of an article index may be displayed or otherwise output as text proximate the input field, text after the input field, text in the input field, a thumbnail or other image proximate the input field, text or a thumbnail near an article comprising or otherwise associated with the input field, text or a thumbnail in a pop-up or persistent window separate from the input field, etc.
- One embodiment of the present invention comprises an administration page. The
user 112 a may click on an icon that provides access to the administration page. In one such embodiment, the user may be able to set preferences for display, such as the location of a transient menu, an insert, minimum size of a window, a type of transient display proximate an aspect, transient menu, insert or window to be displayed, a type of content to include in an insert and/or a transient menu, and various other parameters that may or may not relate to display, such as refresh rate, etc. - In another embodiment of the present invention, a user that may not have time to perform extensive customization and input of his or her preferences may find it useful for a system to be automatically customized or customizable to accommodate the various preferences and/or practices of the user. For example, in one embodiment, an aspect may be identified based, at least in part on a user preference. Similarly, an insert may be generated, and/or caused to be output in association with an aspect based, at least in part, on a user preference. Another embodiment may comprise causing an article identifier to be output in a transient menu associated with an input field based, at least in part, on a user preference. In one embodiment, a user preference may be requested from the
user 112 a. For example, in one embodiment, an insert comprising a request to theuser 112 a may request an indication of how theuser 112 a prefers to have his or her inserts and/or article identifiers output, and/or what sorts of information theuser 112 a finds useful in an insert. - In one such embodiment employing the use of a user preference, one or more of the aspects, transient menu types, insert types, insert display types, and transient menu display types may be automatically set based on existing information about a user. For example, in one embodiment, news topic aspects may be used to automatically generate an insert only if the user is known to visit news sites regularly. In another embodiment, related Microsoft Word® document insert types may be used only if a user is known to use that application or if he or she has that application installed on his or her client device. In one embodiment, weights can be assigned to various types, configurations and contents of different aspects, inserts, term input fields, transient menus, and methods of displaying and otherwise outputting inserts and transient menus. In one such embodiment, the weights may be assigned based on existing information about the user. Existing information about the user may be obtained by performing a system analysis of a
client device 102 a associated with auser 112 a. In one embodiment, a user preference may be determined based, at least in part, on a system analysis. For example, information about theuser 112 a may be obtained by a system analysis comprising crawling a storage device(s) to locate programs, files, and activities, and/or from examining operating system or application preferences, etc. For example, a system analysis of theclient device 102 a may find information comprising what client applications are installed on theclient device 102 a, what files are located on theclient device 102 a, what user preferences have been set in the operating system, what user preferences have been set in various client applications, etc. In other embodiments, a user preference may be determined based, at least in part, on a system analysis performed on a server device, a network, and/or a plurality of client and/or server devices in communication with each other. - In one embodiment, user preference information may be inferred by monitoring activity on a client device. For example, by monitoring application usage, emails sent and received, instant messages, etc. User preference information can be used to set weights of different types, configurations, and contents of aspects, inserts, term input fields, transient menus, and different methods of displaying and otherwise outputting inserts and transient menus. In one embodiment a score may be determined for a particular insert. The insert may only be displayed if the weights of the associated aspect type and insert type exceed a predetermined threshold value. In one embodiment, a score may be determined for each possible method of displaying or otherwise outputting inserts and/or transient menus, and the method associated with the highest score may be used.
- In another embodiment, a system may learn the weights of the various types, configurations and contents of aspects, inserts, term input fields, transient menus, and methods of displaying and otherwise outputting inserts and/or transient menus based on user activity. For example, if a user clicks on inserts or transient menus a percentage of the time the user accesses a client device corresponding to a particular aspect type, insert type and/or and insert display type, this information may be used to determine whether or not to perform a particular insertion. For example, consider an insert content of “the number of times the user has viewed an article” with an insert display type of “after the aspect” and an aspect type of a URL, a system may initially display such inserts with a particular probability, or if a score associated with the insert exceeds a threshold. In such a case, an insert might be displayed if the number of times the user has viewed an article exceeds three times. If the user clicks on such inserts often, the threshold for displaying the insert may be lowered—for example, such an insert may then be displayed whenever the number of times the user has viewed the article exceeds two times. Conversely, if a user rarely clicks on such an insert, the threshold may be increased, or the insert type or content may be abandoned completely. Thus, a system may learn which of the types, configurations and contents of aspects, inserts, term input fields, transient menus, and methods of displaying and otherwise outputting inserts and transient menus a user prefers over a period of time. In one such embodiment, a user preference may be determined based, at least in part, on a user action history comprising a plurality of user actions.
- In one embodiment, the system allows the user to rate various types, contents or configurations of inserts and/or transient menus. For example, in one such embodiment, a request may be provided to the user in an insert requesting a rating of the current system configuration and/or inferred user preferences. In one such embodiment, a system may provide a user interface element the user can use to express such a rating, such as an “X” symbol to express negative interest, or a rating bar operable to allow a user to express a relative rating. In one embodiment, the user can open a customization menu for each insert and/or transient menu, allowing the user to configure preferences for a particular type, configuration, and/or content of an aspect, insert, term input field, transient menu, and/or method of displaying and otherwise outputting inserts and transient menus.
- The foregoing description of the exemplary embodiments of the invention has been presented only for the purpose of illustration and description and is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Numerous modifications and adaptations thereof will be apparent to those skilled in the art without departing from the spirit and scope of the present invention.
Claims (33)
1. A method comprising:
identifying an aspect associated with an article;
generating an insert based, at least in part, on the aspect, wherein the insert comprises a request; and
causing the insert to be output in association with the aspect.
2. The method of claim 1 , wherein automatically generating the insert comprises generating a user context-dependent request.
3. The method of claim 1 , wherein the user context-dependent request is based, at least in part, on a user action history comprising a plurality of user actions.
4. The method of claim 1 , wherein the request comprises an article-related request.
5. The method of claim 1 , wherein causing the insert to be output in association with the aspect comprises placing at least part of the insert into the article.
6. The method of claim 1 , wherein causing the insert to be output in association with the aspect comprises causing the display of at least part of the insert in a transient display proximate to the aspect.
7. The method of claim 1 , wherein causing the insert to be output in association with the aspect comprises causing the display of at least part of the insert in a window separate from the article.
8. The method of claim 1 , wherein at least one of identifying the aspect, generating the insert, and causing the insert to be output in association with the aspect is based, at least in part, on a user preference.
9. The method of claim 8 , further comprising receiving the user preference.
10. The method of claim 8 , further comprising determining the user preference based, at least in part, on a user action history comprising a plurality of user actions.
11. The method of claim 8 , further comprising determining the user preference based, at least in part, on a system analysis.
12. The method of claim 1 , wherein the aspect comprises a hyperlink.
13. The method of claim 1 , wherein the aspect comprises a title.
14. The method of claim 1 , wherein the aspect comprises an image.
15. The method of claim 1 , wherein the aspect comprises a menu item.
16. The method of claim 1 , wherein the aspect comprises an input field.
17. The method of claim 1 , wherein the article comprises a web page.
18. The method of claim 1 , wherein the article comprises a text document.
19. The method of claim 1 , wherein the article comprises an email message.
20. The method of claim 1 , wherein the article comprises an instant messenger message.
21. A method comprising:
identifying an aspect associated with an article;
generating a user context-dependent request associated with the aspect; automatically generating an insert comprising the request;
placing the insert into the article such that the insert will be displayed near the aspect when the article is displayed; and
displaying the article.
22. A computer-readable medium on which is encoded program code, the program code comprising:
program code for identifying an aspect associated with an article;
program code for generating an insert based, at least in part, on the aspect, wherein the insert comprises a request; and
program code for causing the insert to be output in association with the aspect.
23. The computer-readable medium of claim 22 , wherein the program code for automatically generating the insert comprises program code for generating a user context-dependent request.
24. The computer-readable medium of claim 23 , wherein the user context-dependent request is based, at least in part, on a user action history comprising a plurality of user actions.
25. The computer-readable medium of claim 22 , wherein the request comprises an article-related request.
26. The computer-readable medium of claim 22 , wherein the program code for causing the insert to be output in association with the aspect comprises program code for placing at least part of the insert into the article.
27. The computer-readable medium of claim 22 , wherein the program code for causing the insert to be output in association with the aspect comprises program code for causing the display of at least part of the insert in a transient display proximate to the aspect.
28. The computer-readable medium of claim 22 , wherein the program code for causing the insert to be output in association with the aspect comprises program code for causing the display of at least part of the insert in a window separate from the article.
29. The computer-readable medium of claim 22 , wherein the program code for at least one of identifying the aspect, generating the insert, and causing the insert to be output in association with the aspect is based, at least in part, on a user preference.
30. The computer-readable medium of claim 29 , further comprising program code for receiving the user preference.
31. The computer-readable medium of claim 29 , further comprising program code for determining the user preference based, at least in part, on a user action history comprising a plurality of user actions.
32. The computer-readable medium of claim 29 , further comprising program code for determining the user preference based, at least in part, on a system analysis.
33. A computer-implemented method executed by one or more computer systems and comprising:
automatically identifying an aspect associated with an article responsive to a user interaction with the aspect;
implicitly generating a user-context-dependent search query based, at least in part, on the aspect and a user action history comprising a plurality of dates upon which a plurality of user actions were performed on a plurality of articles, responsive to identifying the aspect associated with the article;
generating an insert based, at least in part, on the aspect, wherein the insert comprises a search result associated with the aspect and a request for an instruction from the user as to whether to archive events associated with the article, and the insert is generated responsive, at least in part, to searching an article index using the user-context-dependent search query; and
causing the insert to be displayed in a transient window proximate to the aspect.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/504,475 US20090276408A1 (en) | 2004-03-31 | 2009-07-16 | Systems And Methods For Generating A User Interface |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/814,052 US20080040315A1 (en) | 2004-03-31 | 2004-03-31 | Systems and methods for generating a user interface |
US12/504,475 US20090276408A1 (en) | 2004-03-31 | 2009-07-16 | Systems And Methods For Generating A User Interface |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/814,052 Division US20080040315A1 (en) | 2004-03-31 | 2004-03-31 | Systems and methods for generating a user interface |
Publications (1)
Publication Number | Publication Date |
---|---|
US20090276408A1 true US20090276408A1 (en) | 2009-11-05 |
Family
ID=39052055
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/814,052 Abandoned US20080040315A1 (en) | 2004-03-31 | 2004-03-31 | Systems and methods for generating a user interface |
US12/504,475 Abandoned US20090276408A1 (en) | 2004-03-31 | 2009-07-16 | Systems And Methods For Generating A User Interface |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/814,052 Abandoned US20080040315A1 (en) | 2004-03-31 | 2004-03-31 | Systems and methods for generating a user interface |
Country Status (1)
Country | Link |
---|---|
US (2) | US20080040315A1 (en) |
Cited By (24)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20100174708A1 (en) * | 2009-01-06 | 2010-07-08 | Tynt Multimedia Inc. | Systems and methods for detecting network resource interaction and improved search result reporting |
US20100287183A1 (en) * | 2009-05-08 | 2010-11-11 | Microsoft Corporation | Sharing and collaboration of search findings |
US20110072033A1 (en) * | 2009-09-21 | 2011-03-24 | Microsoft Corporation | Suggesting related search queries during web browsing |
US20110082850A1 (en) * | 2009-10-05 | 2011-04-07 | Tynt Multimedia Inc. | Network resource interaction detection systems and methods |
US20110082898A1 (en) * | 2009-10-05 | 2011-04-07 | Tynt Multimedia Inc. | System and method for network object creation and improved search result reporting |
US20110196829A1 (en) * | 2010-02-09 | 2011-08-11 | Vickrey Rebekah C | Method and System for Providing Efficient Access to a Tape Storage System |
US20110196830A1 (en) * | 2010-02-09 | 2011-08-11 | Yonatan Zunger | System and Method for Managing Replicas of Objects In A Distributed Storage System |
US20110196882A1 (en) * | 2010-02-09 | 2011-08-11 | Alexander Kesselman | Operating On Objects Stored In A Distributed Database |
US20110196901A1 (en) * | 2010-02-09 | 2011-08-11 | Alexander Kesselman | System and Method for Determining the Age of Objects in the Presence of Unreliable Clocks |
US20110196838A1 (en) * | 2010-02-09 | 2011-08-11 | Yonatan Zunger | Method and System for Managing Weakly Mutable Data In A Distributed Storage System |
US20110196822A1 (en) * | 2010-02-09 | 2011-08-11 | Yonatan Zunger | Method and System For Uploading Data Into A Distributed Storage System |
US20110196827A1 (en) * | 2010-02-09 | 2011-08-11 | Yonatan Zunger | Method and system for efficiently replicating data in non-relational databases |
US20110196900A1 (en) * | 2010-02-09 | 2011-08-11 | Alexandre Drobychev | Storage of Data In A Distributed Storage System |
US20110196828A1 (en) * | 2010-02-09 | 2011-08-11 | Alexandre Drobychev | Method and System for Dynamically Replicating Data Within A Distributed Storage System |
US20120095997A1 (en) * | 2010-10-18 | 2012-04-19 | Microsoft Corporation | Providing contextual hints associated with a user session |
US20130120454A1 (en) * | 2009-09-18 | 2013-05-16 | Elya Shechtman | Methods and Apparatuses for Generating Thumbnail Summaries for Image Collections |
US8532387B2 (en) | 2009-09-04 | 2013-09-10 | Adobe Systems Incorporated | Methods and apparatus for procedural directional texture generation |
US8619098B2 (en) | 2009-09-18 | 2013-12-31 | Adobe Systems Incorporated | Methods and apparatuses for generating co-salient thumbnails for digital images |
US20140101600A1 (en) * | 2012-10-10 | 2014-04-10 | Microsoft Corporation | Presentation of related tasks for identified entities |
US8861868B2 (en) | 2011-08-29 | 2014-10-14 | Adobe-Systems Incorporated | Patch-based synthesis techniques |
US9384283B2 (en) | 2010-04-19 | 2016-07-05 | Tynt Multimedia Inc. | System and method for deterring traversal of domains containing network resources |
US9542494B2 (en) | 2011-10-11 | 2017-01-10 | Microsoft Technology Licensing, Llc | Proactive delivery of related tasks for identified entities |
US10397150B1 (en) * | 2012-10-18 | 2019-08-27 | Gummarus, Llc | Methods and computer program products for processing a search query |
US20220360549A1 (en) * | 2011-10-17 | 2022-11-10 | Disintermediation Services, Inc. | Two-way real time communication system that allows asymmetric participation in conversations across multiple electronic platforms |
Families Citing this family (17)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20070078814A1 (en) * | 2005-10-04 | 2007-04-05 | Kozoru, Inc. | Novel information retrieval systems and methods |
US20080126495A1 (en) * | 2006-07-07 | 2008-05-29 | Adknowledge, Inc. | Method and system for providing electronic communications with dynamically provided content to third party mail transfer agents |
US8607167B2 (en) * | 2007-01-07 | 2013-12-10 | Apple Inc. | Portable multifunction device, method, and graphical user interface for providing maps and directions |
US8302033B2 (en) | 2007-06-22 | 2012-10-30 | Apple Inc. | Touch screen device, method, and graphical user interface for providing maps, directions, and location-based information |
US8171432B2 (en) * | 2008-01-06 | 2012-05-01 | Apple Inc. | Touch screen device, method, and graphical user interface for displaying and selecting application options |
US20090112806A1 (en) * | 2007-10-31 | 2009-04-30 | Microsoft Corporation | Query view inferred from datasource and query |
US8327272B2 (en) * | 2008-01-06 | 2012-12-04 | Apple Inc. | Portable multifunction device, method, and graphical user interface for viewing and managing electronic calendars |
US8677018B2 (en) | 2008-08-25 | 2014-03-18 | Google Inc. | Parallel, side-effect based DNS pre-caching |
US8464182B2 (en) * | 2009-06-07 | 2013-06-11 | Apple Inc. | Device, method, and graphical user interface for providing maps, directions, and location-based information |
US8595236B2 (en) * | 2009-11-05 | 2013-11-26 | International Business Machines Corporation | Searching existing user interfaces to enable design, development and provisioning of user interfaces |
US8862576B2 (en) | 2010-01-06 | 2014-10-14 | Apple Inc. | Device, method, and graphical user interface for mapping directions between search results |
US8456297B2 (en) * | 2010-01-06 | 2013-06-04 | Apple Inc. | Device, method, and graphical user interface for tracking movement on a map |
US20130159849A1 (en) * | 2011-12-20 | 2013-06-20 | Keng Fai Lee | Jump to Collaborator Cursor |
JP5895828B2 (en) * | 2012-11-27 | 2016-03-30 | 富士ゼロックス株式会社 | Information processing apparatus and program |
US9715548B2 (en) | 2013-08-02 | 2017-07-25 | Google Inc. | Surfacing user-specific data records in search |
US20160226804A1 (en) * | 2015-02-03 | 2016-08-04 | Google Inc. | Methods, systems, and media for suggesting a link to media content |
US10915501B2 (en) * | 2017-06-23 | 2021-02-09 | Microsoft Technology Licensing, Llc | Inline content file item attachment |
Citations (78)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5678038A (en) * | 1994-06-21 | 1997-10-14 | International Business Machines Corporation | Storing and retrieving heterogeneous classification systems utilizing globally unique identifiers |
US5696962A (en) * | 1993-06-24 | 1997-12-09 | Xerox Corporation | Method for computerized information retrieval using shallow linguistic analysis |
US5701469A (en) * | 1995-06-07 | 1997-12-23 | Microsoft Corporation | Method and system for generating accurate search results using a content-index |
US5717913A (en) * | 1995-01-03 | 1998-02-10 | University Of Central Florida | Method for detecting and extracting text data using database schemas |
US5796393A (en) * | 1996-11-08 | 1998-08-18 | Compuserve Incorporated | System for intergrating an on-line service community with a foreign service |
US5826261A (en) * | 1996-05-10 | 1998-10-20 | Spencer; Graham | System and method for querying multiple, distributed databases by selective sharing of local relative significance information for terms related to the query |
US5890152A (en) * | 1996-09-09 | 1999-03-30 | Seymour Alvin Rapaport | Personal feedback browser for obtaining media files |
US5940821A (en) * | 1997-05-21 | 1999-08-17 | Oracle Corporation | Information presentation in a knowledge base search and retrieval system |
US5964839A (en) * | 1996-03-29 | 1999-10-12 | At&T Corp | System and method for monitoring information flow and performing data collection |
US6012067A (en) * | 1998-03-02 | 2000-01-04 | Sarkar; Shyam Sundar | Method and apparatus for storing and manipulating objects in a plurality of relational data managers on the web |
USRE36727E (en) * | 1989-12-26 | 2000-06-06 | Kageneck; Karl-Erbo G. | Method of indexing and retrieval of electronically-stored documents |
US6167434A (en) * | 1998-07-15 | 2000-12-26 | Pang; Stephen Y. | Computer code for removing junk e-mail messages |
US6272507B1 (en) * | 1997-04-09 | 2001-08-07 | Xerox Corporation | System for ranking search results from a collection of documents using spreading activation techniques |
US20010037328A1 (en) * | 2000-03-23 | 2001-11-01 | Pustejovsky James D. | Method and system for interfacing to a knowledge acquisition system |
US20010037377A1 (en) * | 2000-04-27 | 2001-11-01 | Yumiko Nakano | Information searching apparatus and method |
US6321228B1 (en) * | 1999-08-31 | 2001-11-20 | Powercast Media, Inc. | Internet search system for retrieving selected results from a previous search |
US20020059272A1 (en) * | 2000-04-20 | 2002-05-16 | Porter Edward W. | Apparatuses, methods, programming, and propagated signals for creating, editing, organizing and viewing collaborative databases |
US20020069194A1 (en) * | 2000-12-06 | 2002-06-06 | Robbins Benjamin Jon | Client based online content meta search |
US20020103698A1 (en) * | 2000-10-31 | 2002-08-01 | Christian Cantrell | System and method for enabling user control of online advertising campaigns |
US20020129059A1 (en) * | 2000-12-29 | 2002-09-12 | Eck Jeffery R. | XML auto map generator |
US6473752B1 (en) * | 1997-12-04 | 2002-10-29 | Micron Technology, Inc. | Method and system for locating documents based on previously accessed documents |
US6484164B1 (en) * | 2000-03-29 | 2002-11-19 | Koninklijke Philips Electronics N.V. | Data search user interface with ergonomic mechanism for user profile definition and manipulation |
US20030020749A1 (en) * | 2001-07-10 | 2003-01-30 | Suhayya Abu-Hakima | Concept-based message/document viewer for electronic communications and internet searching |
US20030055831A1 (en) * | 1998-03-16 | 2003-03-20 | S.L.I. Systems, Inc. | Search engine |
US6546388B1 (en) * | 2000-01-14 | 2003-04-08 | International Business Machines Corporation | Metadata search results ranking system |
US20030093790A1 (en) * | 2000-03-28 | 2003-05-15 | Logan James D. | Audio and video program recording, editing and playback systems using metadata |
US6571234B1 (en) * | 1999-05-11 | 2003-05-27 | Prophet Financial Systems, Inc. | System and method for managing online message board |
US6583798B1 (en) * | 2000-07-21 | 2003-06-24 | Microsoft Corporation | On-object user interface |
US6587856B1 (en) * | 1998-12-07 | 2003-07-01 | Oracle International Corporation | Method and system for representing and accessing object-oriented data in a relational database system |
US20030135499A1 (en) * | 2002-01-14 | 2003-07-17 | Schirmer Andrew Lewis | System and method for mining a user's electronic mail messages to determine the user's affinities |
US6602300B2 (en) * | 1998-02-03 | 2003-08-05 | Fujitsu Limited | Apparatus and method for retrieving data from a document database |
US6633868B1 (en) * | 2000-07-28 | 2003-10-14 | Shermann Loyall Min | System and method for context-based document retrieval |
US20030208493A1 (en) * | 2002-04-12 | 2003-11-06 | Hall Bradley S. | Object relational database management system |
US6651054B1 (en) * | 1999-10-30 | 2003-11-18 | International Business Machines Corporation | Method, system, and program for merging query search results |
US6665666B1 (en) * | 1999-10-26 | 2003-12-16 | International Business Machines Corporation | System, method and program product for answering questions using a search engine |
US6687704B1 (en) * | 2000-08-31 | 2004-02-03 | Hewlett-Packard Development Company, L.P. | Database model system and method |
US6697840B1 (en) * | 2000-02-29 | 2004-02-24 | Lucent Technologies Inc. | Presence awareness in collaborative systems |
US6697799B1 (en) * | 1999-09-10 | 2004-02-24 | Requisite Technology, Inc. | Automated classification of items using cascade searches |
US20040064447A1 (en) * | 2002-09-27 | 2004-04-01 | Simske Steven J. | System and method for management of synonymic searching |
US20040068486A1 (en) * | 2002-10-02 | 2004-04-08 | Xerox Corporation | System and method for improving answer relevance in meta-search engines |
US6745178B1 (en) * | 2000-04-28 | 2004-06-01 | International Business Machines Corporation | Internet based method for facilitating networking among persons with similar interests and for facilitating collaborative searching for information |
US20040122656A1 (en) * | 2001-03-16 | 2004-06-24 | Eli Abir | Knowledge system method and appparatus |
US6785671B1 (en) * | 1999-12-08 | 2004-08-31 | Amazon.Com, Inc. | System and method for locating web-based product offerings |
US6795825B2 (en) * | 2000-09-12 | 2004-09-21 | Naphtali David Rishe | Database querying system and method |
US6803906B1 (en) * | 2000-07-05 | 2004-10-12 | Smart Technologies, Inc. | Passive touch system and method of detecting user input |
US6820237B1 (en) * | 2000-01-21 | 2004-11-16 | Amikanow! Corporation | Apparatus and method for context-based highlighting of an electronic document |
US6820093B2 (en) * | 1996-07-30 | 2004-11-16 | Hyperphrase Technologies, Llc | Method for verifying record code prior to an action based on the code |
US6834287B1 (en) * | 2001-03-14 | 2004-12-21 | Trilogy Development Group, Inc. | Classification engine for managing attribute-based data |
US6850934B2 (en) * | 2001-03-26 | 2005-02-01 | International Business Machines Corporation | Adaptive search engine query |
US6874126B1 (en) * | 2001-11-30 | 2005-03-29 | View Space Technologies | Method and apparatus for controlling content display by the cursor motion |
US20050114306A1 (en) * | 2003-11-20 | 2005-05-26 | International Business Machines Corporation | Integrated searching of multiple search sources |
US20050187920A1 (en) * | 2004-01-23 | 2005-08-25 | Porto Ranelli, Sa | Contextual searching |
US6948134B2 (en) * | 2000-07-21 | 2005-09-20 | Microsoft Corporation | Integrated method for creating a refreshable Web Query |
US20050222987A1 (en) * | 2004-04-02 | 2005-10-06 | Vadon Eric R | Automated detection of associations between search criteria and item categories based on collective analysis of user activity data |
US20060014398A1 (en) * | 2004-07-19 | 2006-01-19 | Samsung Electronics Co., Ltd. | Method of forming dielectric layer using plasma enhanced atomic layer deposition technique |
US7022905B1 (en) * | 1999-10-18 | 2006-04-04 | Microsoft Corporation | Classification of information and use of classifications in searching and retrieval of information |
US7032174B2 (en) * | 2001-03-27 | 2006-04-18 | Microsoft Corporation | Automatically adding proper names to a database |
US7039650B2 (en) * | 2002-05-31 | 2006-05-02 | Sypherlink, Inc. | System and method for making multiple databases appear as a single database |
US7043492B1 (en) * | 2001-07-05 | 2006-05-09 | Requisite Technology, Inc. | Automated classification of items using classification mappings |
US7054860B2 (en) * | 2000-06-02 | 2006-05-30 | Hitachi, Ltd. | Method and system for retrieving a document and computer readable storage medium |
US7062442B2 (en) * | 2001-02-23 | 2006-06-13 | Popcatcher Ab | Method and arrangement for search and recording of media signals |
US7099860B1 (en) * | 2000-10-30 | 2006-08-29 | Microsoft Corporation | Image retrieval systems and methods with semantic and feature based relevance feedback |
US7146399B2 (en) * | 2001-05-25 | 2006-12-05 | 2006 Trident Company | Run-time architecture for enterprise integration with transformation generation |
US7162473B2 (en) * | 2003-06-26 | 2007-01-09 | Microsoft Corporation | Method and system for usage analyzer that determines user accessed sources, indexes data subsets, and associated metadata, processing implicit queries based on potential interest to users |
US7171352B2 (en) * | 2004-04-23 | 2007-01-30 | Microsoft Corporation | Linguistic object model |
US7181459B2 (en) * | 1999-05-04 | 2007-02-20 | Iconfind, Inc. | Method of coding, categorizing, and retrieving network pages and sites |
US7194485B2 (en) * | 2003-11-21 | 2007-03-20 | International Business Machines Corporation | Mapping XML schema components to qualified java components |
US7194455B2 (en) * | 2002-09-19 | 2007-03-20 | Microsoft Corporation | Method and system for retrieving confirming sentences |
US7231395B2 (en) * | 2002-05-24 | 2007-06-12 | Overture Services, Inc. | Method and apparatus for categorizing and presenting documents of a distributed database |
US7293015B2 (en) * | 2002-09-19 | 2007-11-06 | Microsoft Corporation | Method and system for detecting user intentions in retrieval of hint sentences |
US7293014B2 (en) * | 2001-06-18 | 2007-11-06 | Siebel Systems, Inc. | System and method to enable searching across multiple databases and files using a single search |
US7305129B2 (en) * | 2003-01-29 | 2007-12-04 | Microsoft Corporation | Methods and apparatus for populating electronic forms from scanned documents |
US7318049B2 (en) * | 2000-11-17 | 2008-01-08 | Gregory Fx Iannacci | System and method for an automated benefit recognition, acquisition, value exchange, and transaction settlement system using multivariable linear and nonlinear modeling |
US7412708B1 (en) * | 2004-03-31 | 2008-08-12 | Google Inc. | Methods and systems for capturing information |
US7421645B2 (en) * | 2000-06-06 | 2008-09-02 | Microsoft Corporation | Method and system for providing electronic commerce actions based on semantically labeled strings |
US7437353B2 (en) * | 2003-12-31 | 2008-10-14 | Google Inc. | Systems and methods for unification of search results |
US7451136B2 (en) * | 2000-10-11 | 2008-11-11 | Microsoft Corporation | System and method for searching multiple disparate search engines |
US7478089B2 (en) * | 2003-10-29 | 2009-01-13 | Kontera Technologies, Inc. | System and method for real-time web page context analysis for the real-time insertion of textual markup objects and dynamic content |
Family Cites Families (73)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6978277B2 (en) * | 1989-10-26 | 2005-12-20 | Encyclopaedia Britannica, Inc. | Multimedia search system |
US5265065A (en) * | 1991-10-08 | 1993-11-23 | West Publishing Company | Method and apparatus for information retrieval from a database by replacing domain specific stemmed phases in a natural language to create a search query |
US5758257A (en) * | 1994-11-29 | 1998-05-26 | Herz; Frederick | System and method for scheduling broadcast of and access to video programs and other data using customer profiles |
US6460036B1 (en) * | 1994-11-29 | 2002-10-01 | Pinpoint Incorporated | System and method for providing customized electronic newspapers and target advertisements |
US5911139A (en) * | 1996-03-29 | 1999-06-08 | Virage, Inc. | Visual image database search engine which allows for different schema |
US6581056B1 (en) * | 1996-06-27 | 2003-06-17 | Xerox Corporation | Information retrieval system providing secondary content analysis on collections of information objects |
US5920854A (en) * | 1996-08-14 | 1999-07-06 | Infoseek Corporation | Real-time document collection search engine with phrase indexing |
US5933827A (en) * | 1996-09-25 | 1999-08-03 | International Business Machines Corporation | System for identifying new web pages of interest to a user |
US5987446A (en) * | 1996-11-12 | 1999-11-16 | U.S. West, Inc. | Searching large collections of text using multiple search engines concurrently |
US6006222A (en) * | 1997-04-25 | 1999-12-21 | Culliss; Gary | Method for organizing information |
US6014665A (en) * | 1997-08-01 | 2000-01-11 | Culliss; Gary | Method for organizing information |
US6078916A (en) * | 1997-08-01 | 2000-06-20 | Culliss; Gary | Method for organizing information |
US6182068B1 (en) * | 1997-08-01 | 2001-01-30 | Ask Jeeves, Inc. | Personalized search methods |
US6961954B1 (en) * | 1997-10-27 | 2005-11-01 | The Mitre Corporation | Automated segmentation, information extraction, summarization, and presentation of broadcast news |
US6112203A (en) * | 1998-04-09 | 2000-08-29 | Altavista Company | Method for ranking documents in a hyperlinked environment using connectivity and selective content analysis |
US6199059B1 (en) * | 1998-04-22 | 2001-03-06 | International Computex, Inc. | System and method for classifying and retrieving information with virtual object hierarchy |
US6122647A (en) * | 1998-05-19 | 2000-09-19 | Perspecta, Inc. | Dynamic generation of contextual links in hypertext documents |
US6505191B1 (en) * | 1998-07-24 | 2003-01-07 | Jarg Corporation | Distributed computer database system and method employing hypertext linkage analysis |
US7392234B2 (en) * | 1999-05-18 | 2008-06-24 | Kom, Inc. | Method and system for electronic file lifecycle management |
US6397221B1 (en) * | 1998-09-12 | 2002-05-28 | International Business Machines Corp. | Method for creating and maintaining a frame-based hierarchically organized databases with tabularly organized data |
US6789230B2 (en) * | 1998-10-09 | 2004-09-07 | Microsoft Corporation | Creating a summary having sentences with the highest weight, and lowest length |
US6490577B1 (en) * | 1999-04-01 | 2002-12-03 | Polyvista, Inc. | Search engine with user activity memory |
US6493702B1 (en) * | 1999-05-05 | 2002-12-10 | Xerox Corporation | System and method for searching and recommending documents in a collection using share bookmarks |
JP3791879B2 (en) * | 1999-07-19 | 2006-06-28 | 富士通株式会社 | Document summarization apparatus and method |
US6976053B1 (en) * | 1999-10-14 | 2005-12-13 | Arcessa, Inc. | Method for using agents to create a computer index corresponding to the contents of networked computers |
US6490575B1 (en) * | 1999-12-06 | 2002-12-03 | International Business Machines Corporation | Distributed network search engine |
US6691108B2 (en) * | 1999-12-14 | 2004-02-10 | Nec Corporation | Focused search engine and method |
US7415662B2 (en) * | 2000-01-31 | 2008-08-19 | Adobe Systems Incorporated | Digital media management apparatus and methods |
US6961910B2 (en) * | 2000-02-17 | 2005-11-01 | International Business Machines Corporation | System for interacting with participants at a web site through an interactive visual proxy |
US6976090B2 (en) * | 2000-04-20 | 2005-12-13 | Actona Technologies Ltd. | Differentiated content and application delivery via internet |
GB0016974D0 (en) * | 2000-07-12 | 2000-08-30 | Univ Salford The | Document retrieval system |
US6772188B1 (en) * | 2000-07-14 | 2004-08-03 | America Online, Incorporated | Method and apparatus for communicating with an entity automatically identified in an electronic communication |
US7027975B1 (en) * | 2000-08-08 | 2006-04-11 | Object Services And Consulting, Inc. | Guided natural language interface system and method |
US6778951B1 (en) * | 2000-08-09 | 2004-08-17 | Concerto Software, Inc. | Information retrieval method with natural language interface |
US6766320B1 (en) * | 2000-08-24 | 2004-07-20 | Microsoft Corporation | Search engine with natural language-based robust parsing for user query and relevance feedback learning |
WO2002019790A2 (en) * | 2000-09-07 | 2002-03-14 | Briere Daniel D | Marketing collateral repository and supporting data management and communication environment |
US6950791B1 (en) * | 2000-09-13 | 2005-09-27 | Antartica Systems, Inc. | Method for describing objects in a virtual space |
US20020040311A1 (en) * | 2000-10-04 | 2002-04-04 | John Douglass | Web browser page rating system |
JP3827936B2 (en) * | 2000-10-18 | 2006-09-27 | シャープ株式会社 | Information providing control device, information providing method, recording medium recording information providing program, and information providing system |
US6772169B2 (en) * | 2000-11-09 | 2004-08-03 | Expand Beyond Corporation | System, method and apparatus for the wireless monitoring and management of computer systems |
WO2002041190A2 (en) * | 2000-11-15 | 2002-05-23 | Holbrook David M | Apparatus and method for organizing and/or presenting data |
US20020065800A1 (en) * | 2000-11-30 | 2002-05-30 | Morlitz David M. | HTTP archive file |
US7440943B2 (en) * | 2000-12-22 | 2008-10-21 | Xerox Corporation | Recommender system and method |
US6714939B2 (en) * | 2001-01-08 | 2004-03-30 | Softface, Inc. | Creation of structured data from plain text |
US6853998B2 (en) * | 2001-02-07 | 2005-02-08 | International Business Machines Corporation | Customer self service subsystem for classifying user contexts |
US20040030741A1 (en) * | 2001-04-02 | 2004-02-12 | Wolton Richard Ernest | Method and apparatus for search, visual navigation, analysis and retrieval of information from networks with remote notification and content delivery |
TW480680B (en) * | 2001-04-03 | 2002-03-21 | Nanya Technology Corp | Method for producing self-aligned separated gate-type flash memory cell |
WO2002103578A1 (en) * | 2001-06-19 | 2002-12-27 | Biozak, Inc. | Dynamic search engine and database |
US6963874B2 (en) * | 2002-01-09 | 2005-11-08 | Digital River, Inc. | Web-site performance analysis system and method utilizing web-site traversal counters and histograms |
US6778979B2 (en) * | 2001-08-13 | 2004-08-17 | Xerox Corporation | System for automatically generating queries |
US7007085B1 (en) * | 2001-09-28 | 2006-02-28 | Bellsouth Intellectual Property Corporation | Message log for wireline, voice mail, email, fax, pager, instant messages and chat |
US20030115552A1 (en) * | 2001-11-27 | 2003-06-19 | Jorg Jahnke | Method and system for automatic creation of multilingual immutable image files |
US7565367B2 (en) * | 2002-01-15 | 2009-07-21 | Iac Search & Media, Inc. | Enhanced popularity ranking |
US20030154071A1 (en) * | 2002-02-11 | 2003-08-14 | Shreve Gregory M. | Process for the document management and computer-assisted translation of documents utilizing document corpora constructed by intelligent agents |
US7343365B2 (en) * | 2002-02-20 | 2008-03-11 | Microsoft Corporation | Computer system architecture for automatic context associations |
US20040003097A1 (en) * | 2002-05-17 | 2004-01-01 | Brian Willis | Content delivery system |
US20030220913A1 (en) * | 2002-05-24 | 2003-11-27 | International Business Machines Corporation | Techniques for personalized and adaptive search services |
EP1552501A4 (en) * | 2002-06-12 | 2009-07-01 | Jena Jordahl | Data storage, retrieval, manipulation and display tools enabling multiple hierarchical points of view |
US7225407B2 (en) * | 2002-06-28 | 2007-05-29 | Microsoft Corporation | Resource browser sessions search |
US7370035B2 (en) * | 2002-09-03 | 2008-05-06 | Idealab | Methods and systems for search indexing |
US7082428B1 (en) * | 2002-09-16 | 2006-07-25 | Bellsouth Intellectual Property Corporation | Systems and methods for collaborative searching |
US7171351B2 (en) * | 2002-09-19 | 2007-01-30 | Microsoft Corporation | Method and system for retrieving hint sentences using expanded queries |
US7043476B2 (en) * | 2002-10-11 | 2006-05-09 | International Business Machines Corporation | Method and apparatus for data mining to discover associations and covariances associated with data |
US7216121B2 (en) * | 2002-12-31 | 2007-05-08 | International Business Machines Corporation | Search engine facility with automated knowledge retrieval, generation and maintenance |
US20040133560A1 (en) * | 2003-01-07 | 2004-07-08 | Simske Steven J. | Methods and systems for organizing electronic documents |
US20060136405A1 (en) * | 2003-01-24 | 2006-06-22 | Ducatel Gary M | Searching apparatus and methods |
GB2399427A (en) * | 2003-03-12 | 2004-09-15 | Canon Kk | Apparatus for and method of summarising text |
US7225187B2 (en) * | 2003-06-26 | 2007-05-29 | Microsoft Corporation | Systems and methods for performing background queries from content and activity |
US7197515B2 (en) * | 2003-06-30 | 2007-03-27 | Microsoft Corporation | Declarative solution definition |
US7505969B2 (en) * | 2003-08-05 | 2009-03-17 | Cbs Interactive, Inc. | Product placement engine and method |
US7363282B2 (en) * | 2003-12-03 | 2008-04-22 | Microsoft Corporation | Search system using user behavior data |
US7937340B2 (en) * | 2003-12-03 | 2011-05-03 | Microsoft Corporation | Automated satisfaction measurement for web search |
US20050198026A1 (en) * | 2004-02-03 | 2005-09-08 | Dehlinger Peter J. | Code, system, and method for generating concepts |
-
2004
- 2004-03-31 US US10/814,052 patent/US20080040315A1/en not_active Abandoned
-
2009
- 2009-07-16 US US12/504,475 patent/US20090276408A1/en not_active Abandoned
Patent Citations (79)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
USRE36727E (en) * | 1989-12-26 | 2000-06-06 | Kageneck; Karl-Erbo G. | Method of indexing and retrieval of electronically-stored documents |
US5696962A (en) * | 1993-06-24 | 1997-12-09 | Xerox Corporation | Method for computerized information retrieval using shallow linguistic analysis |
US5678038A (en) * | 1994-06-21 | 1997-10-14 | International Business Machines Corporation | Storing and retrieving heterogeneous classification systems utilizing globally unique identifiers |
US5717913A (en) * | 1995-01-03 | 1998-02-10 | University Of Central Florida | Method for detecting and extracting text data using database schemas |
US5701469A (en) * | 1995-06-07 | 1997-12-23 | Microsoft Corporation | Method and system for generating accurate search results using a content-index |
US5964839A (en) * | 1996-03-29 | 1999-10-12 | At&T Corp | System and method for monitoring information flow and performing data collection |
US5826261A (en) * | 1996-05-10 | 1998-10-20 | Spencer; Graham | System and method for querying multiple, distributed databases by selective sharing of local relative significance information for terms related to the query |
US6820093B2 (en) * | 1996-07-30 | 2004-11-16 | Hyperphrase Technologies, Llc | Method for verifying record code prior to an action based on the code |
US5890152A (en) * | 1996-09-09 | 1999-03-30 | Seymour Alvin Rapaport | Personal feedback browser for obtaining media files |
US5796393A (en) * | 1996-11-08 | 1998-08-18 | Compuserve Incorporated | System for intergrating an on-line service community with a foreign service |
US6272507B1 (en) * | 1997-04-09 | 2001-08-07 | Xerox Corporation | System for ranking search results from a collection of documents using spreading activation techniques |
US5940821A (en) * | 1997-05-21 | 1999-08-17 | Oracle Corporation | Information presentation in a knowledge base search and retrieval system |
US6473752B1 (en) * | 1997-12-04 | 2002-10-29 | Micron Technology, Inc. | Method and system for locating documents based on previously accessed documents |
US6602300B2 (en) * | 1998-02-03 | 2003-08-05 | Fujitsu Limited | Apparatus and method for retrieving data from a document database |
US6012067A (en) * | 1998-03-02 | 2000-01-04 | Sarkar; Shyam Sundar | Method and apparatus for storing and manipulating objects in a plurality of relational data managers on the web |
US20030055831A1 (en) * | 1998-03-16 | 2003-03-20 | S.L.I. Systems, Inc. | Search engine |
US6167434A (en) * | 1998-07-15 | 2000-12-26 | Pang; Stephen Y. | Computer code for removing junk e-mail messages |
US6587856B1 (en) * | 1998-12-07 | 2003-07-01 | Oracle International Corporation | Method and system for representing and accessing object-oriented data in a relational database system |
US7181459B2 (en) * | 1999-05-04 | 2007-02-20 | Iconfind, Inc. | Method of coding, categorizing, and retrieving network pages and sites |
US6571234B1 (en) * | 1999-05-11 | 2003-05-27 | Prophet Financial Systems, Inc. | System and method for managing online message board |
US6321228B1 (en) * | 1999-08-31 | 2001-11-20 | Powercast Media, Inc. | Internet search system for retrieving selected results from a previous search |
US6697799B1 (en) * | 1999-09-10 | 2004-02-24 | Requisite Technology, Inc. | Automated classification of items using cascade searches |
US7022905B1 (en) * | 1999-10-18 | 2006-04-04 | Microsoft Corporation | Classification of information and use of classifications in searching and retrieval of information |
US6665666B1 (en) * | 1999-10-26 | 2003-12-16 | International Business Machines Corporation | System, method and program product for answering questions using a search engine |
US6651054B1 (en) * | 1999-10-30 | 2003-11-18 | International Business Machines Corporation | Method, system, and program for merging query search results |
US6785671B1 (en) * | 1999-12-08 | 2004-08-31 | Amazon.Com, Inc. | System and method for locating web-based product offerings |
US6546388B1 (en) * | 2000-01-14 | 2003-04-08 | International Business Machines Corporation | Metadata search results ranking system |
US6820237B1 (en) * | 2000-01-21 | 2004-11-16 | Amikanow! Corporation | Apparatus and method for context-based highlighting of an electronic document |
US6697840B1 (en) * | 2000-02-29 | 2004-02-24 | Lucent Technologies Inc. | Presence awareness in collaborative systems |
US20010037328A1 (en) * | 2000-03-23 | 2001-11-01 | Pustejovsky James D. | Method and system for interfacing to a knowledge acquisition system |
US20030093790A1 (en) * | 2000-03-28 | 2003-05-15 | Logan James D. | Audio and video program recording, editing and playback systems using metadata |
US6484164B1 (en) * | 2000-03-29 | 2002-11-19 | Koninklijke Philips Electronics N.V. | Data search user interface with ergonomic mechanism for user profile definition and manipulation |
US20020059272A1 (en) * | 2000-04-20 | 2002-05-16 | Porter Edward W. | Apparatuses, methods, programming, and propagated signals for creating, editing, organizing and viewing collaborative databases |
US6925456B2 (en) * | 2000-04-27 | 2005-08-02 | Fujitsu Limited | Information searching apparatus and method for online award entry |
US20010037377A1 (en) * | 2000-04-27 | 2001-11-01 | Yumiko Nakano | Information searching apparatus and method |
US6745178B1 (en) * | 2000-04-28 | 2004-06-01 | International Business Machines Corporation | Internet based method for facilitating networking among persons with similar interests and for facilitating collaborative searching for information |
US7054860B2 (en) * | 2000-06-02 | 2006-05-30 | Hitachi, Ltd. | Method and system for retrieving a document and computer readable storage medium |
US7421645B2 (en) * | 2000-06-06 | 2008-09-02 | Microsoft Corporation | Method and system for providing electronic commerce actions based on semantically labeled strings |
US6803906B1 (en) * | 2000-07-05 | 2004-10-12 | Smart Technologies, Inc. | Passive touch system and method of detecting user input |
US6583798B1 (en) * | 2000-07-21 | 2003-06-24 | Microsoft Corporation | On-object user interface |
US6948134B2 (en) * | 2000-07-21 | 2005-09-20 | Microsoft Corporation | Integrated method for creating a refreshable Web Query |
US6633868B1 (en) * | 2000-07-28 | 2003-10-14 | Shermann Loyall Min | System and method for context-based document retrieval |
US6687704B1 (en) * | 2000-08-31 | 2004-02-03 | Hewlett-Packard Development Company, L.P. | Database model system and method |
US6795825B2 (en) * | 2000-09-12 | 2004-09-21 | Naphtali David Rishe | Database querying system and method |
US7451136B2 (en) * | 2000-10-11 | 2008-11-11 | Microsoft Corporation | System and method for searching multiple disparate search engines |
US7099860B1 (en) * | 2000-10-30 | 2006-08-29 | Microsoft Corporation | Image retrieval systems and methods with semantic and feature based relevance feedback |
US20020103698A1 (en) * | 2000-10-31 | 2002-08-01 | Christian Cantrell | System and method for enabling user control of online advertising campaigns |
US7318049B2 (en) * | 2000-11-17 | 2008-01-08 | Gregory Fx Iannacci | System and method for an automated benefit recognition, acquisition, value exchange, and transaction settlement system using multivariable linear and nonlinear modeling |
US20020069194A1 (en) * | 2000-12-06 | 2002-06-06 | Robbins Benjamin Jon | Client based online content meta search |
US20020129059A1 (en) * | 2000-12-29 | 2002-09-12 | Eck Jeffery R. | XML auto map generator |
US7062442B2 (en) * | 2001-02-23 | 2006-06-13 | Popcatcher Ab | Method and arrangement for search and recording of media signals |
US6834287B1 (en) * | 2001-03-14 | 2004-12-21 | Trilogy Development Group, Inc. | Classification engine for managing attribute-based data |
US20040122656A1 (en) * | 2001-03-16 | 2004-06-24 | Eli Abir | Knowledge system method and appparatus |
US6850934B2 (en) * | 2001-03-26 | 2005-02-01 | International Business Machines Corporation | Adaptive search engine query |
US7032174B2 (en) * | 2001-03-27 | 2006-04-18 | Microsoft Corporation | Automatically adding proper names to a database |
US7146399B2 (en) * | 2001-05-25 | 2006-12-05 | 2006 Trident Company | Run-time architecture for enterprise integration with transformation generation |
US7293014B2 (en) * | 2001-06-18 | 2007-11-06 | Siebel Systems, Inc. | System and method to enable searching across multiple databases and files using a single search |
US7043492B1 (en) * | 2001-07-05 | 2006-05-09 | Requisite Technology, Inc. | Automated classification of items using classification mappings |
US20030020749A1 (en) * | 2001-07-10 | 2003-01-30 | Suhayya Abu-Hakima | Concept-based message/document viewer for electronic communications and internet searching |
US6874126B1 (en) * | 2001-11-30 | 2005-03-29 | View Space Technologies | Method and apparatus for controlling content display by the cursor motion |
US20030135499A1 (en) * | 2002-01-14 | 2003-07-17 | Schirmer Andrew Lewis | System and method for mining a user's electronic mail messages to determine the user's affinities |
US20030208493A1 (en) * | 2002-04-12 | 2003-11-06 | Hall Bradley S. | Object relational database management system |
US7231395B2 (en) * | 2002-05-24 | 2007-06-12 | Overture Services, Inc. | Method and apparatus for categorizing and presenting documents of a distributed database |
US7039650B2 (en) * | 2002-05-31 | 2006-05-02 | Sypherlink, Inc. | System and method for making multiple databases appear as a single database |
US7194455B2 (en) * | 2002-09-19 | 2007-03-20 | Microsoft Corporation | Method and system for retrieving confirming sentences |
US7293015B2 (en) * | 2002-09-19 | 2007-11-06 | Microsoft Corporation | Method and system for detecting user intentions in retrieval of hint sentences |
US20040064447A1 (en) * | 2002-09-27 | 2004-04-01 | Simske Steven J. | System and method for management of synonymic searching |
US20040068486A1 (en) * | 2002-10-02 | 2004-04-08 | Xerox Corporation | System and method for improving answer relevance in meta-search engines |
US7305129B2 (en) * | 2003-01-29 | 2007-12-04 | Microsoft Corporation | Methods and apparatus for populating electronic forms from scanned documents |
US7162473B2 (en) * | 2003-06-26 | 2007-01-09 | Microsoft Corporation | Method and system for usage analyzer that determines user accessed sources, indexes data subsets, and associated metadata, processing implicit queries based on potential interest to users |
US7478089B2 (en) * | 2003-10-29 | 2009-01-13 | Kontera Technologies, Inc. | System and method for real-time web page context analysis for the real-time insertion of textual markup objects and dynamic content |
US20050114306A1 (en) * | 2003-11-20 | 2005-05-26 | International Business Machines Corporation | Integrated searching of multiple search sources |
US7194485B2 (en) * | 2003-11-21 | 2007-03-20 | International Business Machines Corporation | Mapping XML schema components to qualified java components |
US7437353B2 (en) * | 2003-12-31 | 2008-10-14 | Google Inc. | Systems and methods for unification of search results |
US20050187920A1 (en) * | 2004-01-23 | 2005-08-25 | Porto Ranelli, Sa | Contextual searching |
US7412708B1 (en) * | 2004-03-31 | 2008-08-12 | Google Inc. | Methods and systems for capturing information |
US20050222987A1 (en) * | 2004-04-02 | 2005-10-06 | Vadon Eric R | Automated detection of associations between search criteria and item categories based on collective analysis of user activity data |
US7171352B2 (en) * | 2004-04-23 | 2007-01-30 | Microsoft Corporation | Linguistic object model |
US20060014398A1 (en) * | 2004-07-19 | 2006-01-19 | Samsung Electronics Co., Ltd. | Method of forming dielectric layer using plasma enhanced atomic layer deposition technique |
Non-Patent Citations (1)
Title |
---|
White et al., "An Approach for Implicitly Detecting Information Needs", CIKM'03, Pages 504-507, November 2003, ACM * |
Cited By (61)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8275766B2 (en) | 2009-01-06 | 2012-09-25 | Tynt Multimedia Inc. | Systems and methods for detecting network resource interaction and improved search result reporting |
US20100174708A1 (en) * | 2009-01-06 | 2010-07-08 | Tynt Multimedia Inc. | Systems and methods for detecting network resource interaction and improved search result reporting |
US8626757B1 (en) | 2009-01-06 | 2014-01-07 | Tynt Multimedia, Inc. | Systems and methods for detecting network resource interaction and improved search result reporting |
US20100287183A1 (en) * | 2009-05-08 | 2010-11-11 | Microsoft Corporation | Sharing and collaboration of search findings |
US8122041B2 (en) * | 2009-05-08 | 2012-02-21 | Microsoft Corporation | Sharing and collaboration of search findings |
US8787698B2 (en) | 2009-09-04 | 2014-07-22 | Adobe Systems Incorporated | Methods and apparatus for directional texture generation using image warping |
US8532387B2 (en) | 2009-09-04 | 2013-09-10 | Adobe Systems Incorporated | Methods and apparatus for procedural directional texture generation |
US8599219B2 (en) * | 2009-09-18 | 2013-12-03 | Adobe Systems Incorporated | Methods and apparatuses for generating thumbnail summaries for image collections |
US8619098B2 (en) | 2009-09-18 | 2013-12-31 | Adobe Systems Incorporated | Methods and apparatuses for generating co-salient thumbnails for digital images |
US20130120454A1 (en) * | 2009-09-18 | 2013-05-16 | Elya Shechtman | Methods and Apparatuses for Generating Thumbnail Summaries for Image Collections |
US9015148B2 (en) * | 2009-09-21 | 2015-04-21 | Microsoft Corporation | Suggesting related search queries during web browsing |
US20110072033A1 (en) * | 2009-09-21 | 2011-03-24 | Microsoft Corporation | Suggesting related search queries during web browsing |
US8930437B2 (en) | 2009-10-05 | 2015-01-06 | Tynt Multimedia, Inc. | Systems and methods for deterring traversal of domains containing network resources |
US8645457B2 (en) | 2009-10-05 | 2014-02-04 | Tynt Multimedia Inc. | System and method for network object creation and improved search result reporting |
US20110082897A1 (en) * | 2009-10-05 | 2011-04-07 | Tynt Multimedia Inc. | Systems and methods for deterring traversal of domains containing network resources |
US20110082898A1 (en) * | 2009-10-05 | 2011-04-07 | Tynt Multimedia Inc. | System and method for network object creation and improved search result reporting |
US20110082850A1 (en) * | 2009-10-05 | 2011-04-07 | Tynt Multimedia Inc. | Network resource interaction detection systems and methods |
US20110196831A1 (en) * | 2010-02-09 | 2011-08-11 | Yonatan Zunger | Pruning of Blob Replicas |
US8938418B2 (en) | 2010-02-09 | 2015-01-20 | Google Inc. | Method and system for efficiently replicating data in non-relational databases |
US20110196828A1 (en) * | 2010-02-09 | 2011-08-11 | Alexandre Drobychev | Method and System for Dynamically Replicating Data Within A Distributed Storage System |
US20110196836A1 (en) * | 2010-02-09 | 2011-08-11 | Alexander Kesselman | Executing Replication Requests for Objects In A Distributed Storage System |
US20110196900A1 (en) * | 2010-02-09 | 2011-08-11 | Alexandre Drobychev | Storage of Data In A Distributed Storage System |
US9747322B2 (en) | 2010-02-09 | 2017-08-29 | Google Inc. | Storage of data in a distributed storage system |
US20110196664A1 (en) * | 2010-02-09 | 2011-08-11 | Yonatan Zunger | Location Assignment Daemon (LAD) Simulation System and Method |
US8335769B2 (en) | 2010-02-09 | 2012-12-18 | Google Inc. | Executing replication requests for objects in a distributed storage system |
US8341118B2 (en) | 2010-02-09 | 2012-12-25 | Google Inc. | Method and system for dynamically replicating data within a distributed storage system |
US8352424B2 (en) | 2010-02-09 | 2013-01-08 | Google Inc. | System and method for managing replicas of objects in a distributed storage system |
US8380659B2 (en) | 2010-02-09 | 2013-02-19 | Google Inc. | Method and system for efficiently replicating data in non-relational databases |
US8423517B2 (en) | 2010-02-09 | 2013-04-16 | Google Inc. | System and method for determining the age of objects in the presence of unreliable clocks |
US20110196873A1 (en) * | 2010-02-09 | 2011-08-11 | Alexander Kesselman | System and Method for Replicating Objects In A Distributed Storage System |
US20110196827A1 (en) * | 2010-02-09 | 2011-08-11 | Yonatan Zunger | Method and system for efficiently replicating data in non-relational databases |
US8554724B2 (en) | 2010-02-09 | 2013-10-08 | Google Inc. | Method and system for efficiently replicating data in non-relational databases |
US8560292B2 (en) | 2010-02-09 | 2013-10-15 | Google Inc. | Location assignment daemon (LAD) simulation system and method |
US20110196822A1 (en) * | 2010-02-09 | 2011-08-11 | Yonatan Zunger | Method and System For Uploading Data Into A Distributed Storage System |
US8615485B2 (en) | 2010-02-09 | 2013-12-24 | Google, Inc. | Method and system for managing weakly mutable data in a distributed storage system |
US20110196838A1 (en) * | 2010-02-09 | 2011-08-11 | Yonatan Zunger | Method and System for Managing Weakly Mutable Data In A Distributed Storage System |
US20110196832A1 (en) * | 2010-02-09 | 2011-08-11 | Yonatan Zunger | Location Assignment Daemon (LAD) For A Distributed Storage System |
US20110196901A1 (en) * | 2010-02-09 | 2011-08-11 | Alexander Kesselman | System and Method for Determining the Age of Objects in the Presence of Unreliable Clocks |
US9659031B2 (en) | 2010-02-09 | 2017-05-23 | Google Inc. | Systems and methods of simulating the state of a distributed storage system |
US8744997B2 (en) | 2010-02-09 | 2014-06-03 | Google Inc. | Pruning of blob replicas |
US20110196882A1 (en) * | 2010-02-09 | 2011-08-11 | Alexander Kesselman | Operating On Objects Stored In A Distributed Database |
US8838595B2 (en) | 2010-02-09 | 2014-09-16 | Google Inc. | Operating on objects stored in a distributed database |
US8862617B2 (en) | 2010-02-09 | 2014-10-14 | Google Inc. | System and method for replicating objects in a distributed storage system |
US9317524B2 (en) | 2010-02-09 | 2016-04-19 | Google Inc. | Location assignment daemon (LAD) for a distributed storage system |
US8868508B2 (en) | 2010-02-09 | 2014-10-21 | Google Inc. | Storage of data in a distributed storage system |
US8874523B2 (en) | 2010-02-09 | 2014-10-28 | Google Inc. | Method and system for providing efficient access to a tape storage system |
US8886602B2 (en) | 2010-02-09 | 2014-11-11 | Google Inc. | Location assignment daemon (LAD) for a distributed storage system |
US20110196830A1 (en) * | 2010-02-09 | 2011-08-11 | Yonatan Zunger | System and Method for Managing Replicas of Objects In A Distributed Storage System |
US20110196833A1 (en) * | 2010-02-09 | 2011-08-11 | Alexandre Drobychev | Storage of Data In A Distributed Storage System |
US20110196829A1 (en) * | 2010-02-09 | 2011-08-11 | Vickrey Rebekah C | Method and System for Providing Efficient Access to a Tape Storage System |
US9298736B2 (en) | 2010-02-09 | 2016-03-29 | Google Inc. | Pruning of blob replicas |
US9305069B2 (en) | 2010-02-09 | 2016-04-05 | Google Inc. | Method and system for uploading data into a distributed storage system |
US9384283B2 (en) | 2010-04-19 | 2016-07-05 | Tynt Multimedia Inc. | System and method for deterring traversal of domains containing network resources |
US20120095997A1 (en) * | 2010-10-18 | 2012-04-19 | Microsoft Corporation | Providing contextual hints associated with a user session |
US8861868B2 (en) | 2011-08-29 | 2014-10-14 | Adobe-Systems Incorporated | Patch-based synthesis techniques |
US9317773B2 (en) | 2011-08-29 | 2016-04-19 | Adobe Systems Incorporated | Patch-based synthesis techniques using color and color gradient voting |
US9542494B2 (en) | 2011-10-11 | 2017-01-10 | Microsoft Technology Licensing, Llc | Proactive delivery of related tasks for identified entities |
US20220360549A1 (en) * | 2011-10-17 | 2022-11-10 | Disintermediation Services, Inc. | Two-way real time communication system that allows asymmetric participation in conversations across multiple electronic platforms |
US11855936B2 (en) * | 2011-10-17 | 2023-12-26 | Disintermediation Services, Inc. | Two-way real time communication system that allows asymmetric participation in conversations across multiple electronic platforms |
US20140101600A1 (en) * | 2012-10-10 | 2014-04-10 | Microsoft Corporation | Presentation of related tasks for identified entities |
US10397150B1 (en) * | 2012-10-18 | 2019-08-27 | Gummarus, Llc | Methods and computer program products for processing a search query |
Also Published As
Publication number | Publication date |
---|---|
US20080040315A1 (en) | 2008-02-14 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US20090276408A1 (en) | Systems And Methods For Generating A User Interface | |
US20080059419A1 (en) | Systems and methods for providing search results | |
US7725508B2 (en) | Methods and systems for information capture and retrieval | |
US9836544B2 (en) | Methods and systems for prioritizing a crawl | |
AU2005231112B2 (en) | Methods and systems for structuring event data in a database for location and retrieval | |
US9672232B1 (en) | Systems and methods for selectively storing event data | |
US7788274B1 (en) | Systems and methods for category-based search | |
US7437353B2 (en) | Systems and methods for unification of search results | |
US7707142B1 (en) | Methods and systems for performing an offline search | |
US7580568B1 (en) | Methods and systems for identifying an image as a representative image for an article | |
US10180980B2 (en) | Methods and systems for eliminating duplicate events | |
US8631001B2 (en) | Systems and methods for weighting a search query result | |
US7333976B1 (en) | Methods and systems for processing contact information | |
EP1745379B1 (en) | Profile based capture component for monitoring events in applications | |
US7693825B2 (en) | Systems and methods for ranking implicit search results | |
US7873632B2 (en) | Systems and methods for associating a keyword with a user interface area | |
US7412708B1 (en) | Methods and systems for capturing information | |
US7853606B1 (en) | Alternate methods of displaying search results | |
US9959300B1 (en) | Systems and methods for article location and retrieval |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
STCB | Information on status: application discontinuation |
Free format text: ABANDONED -- FAILURE TO RESPOND TO AN OFFICE ACTION |