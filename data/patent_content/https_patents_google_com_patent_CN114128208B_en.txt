CN114128208B - Method and system for delegating external exponentiation in private groups - Google Patents
Method and system for delegating external exponentiation in private groups Download PDFInfo
- Publication number
- CN114128208B CN114128208B CN201980098454.8A CN201980098454A CN114128208B CN 114128208 B CN114128208 B CN 114128208B CN 201980098454 A CN201980098454 A CN 201980098454A CN 114128208 B CN114128208 B CN 114128208B
- Authority
- CN
- China
- Prior art keywords
- series
- untrusted server
- exponent
- exponentiation
- server
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
- 238000000034 method Methods 0.000 title claims abstract description 40
- 230000015654 memory Effects 0.000 claims description 34
- 238000012545 processing Methods 0.000 claims description 22
- 238000004891 communication Methods 0.000 claims description 12
- 238000004590 computer program Methods 0.000 description 8
- 238000010586 diagram Methods 0.000 description 7
- 230000003287 optical effect Effects 0.000 description 4
- 230000008569 process Effects 0.000 description 4
- 238000004364 calculation method Methods 0.000 description 2
- 230000006870 function Effects 0.000 description 2
- 230000003993 interaction Effects 0.000 description 2
- 230000006855 networking Effects 0.000 description 2
- 238000013459 approach Methods 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000012423 maintenance Methods 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 238000012946 outsourcing Methods 0.000 description 1
- 229920000582 polyisocyanurate Polymers 0.000 description 1
- 230000009467 reduction Effects 0.000 description 1
- 230000004044 response Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 230000003068 static effect Effects 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Abstract
A method for delegating exo-exponentiation in a private group, comprising: executing the query instructions (130) to retrieve the query elements (152) stored on the untrusted server (111) by selecting a prime factorization of two or more prime numbers (135) of a modulus (134) associated with the query elements stored on the server; obtaining a group element (133) configured to generate a respective one of the prime numbers; generating a series of base values (162) using prime factorization and group elements; and transmitting the series of base values from the client device (10) to the server. The server is configured to use the series of base values to determine exponentiation of the group element with an exponent (154) stored on the server. The method also includes receiving a result from the server based on exponentiation of the group element with the exponent (192).
Description
Technical Field
The present disclosure relates to delegating exo-exponentiation in private groups.
Background
Private Information Retrieval (PIR) schemes allow a user to retrieve data from one or more storage devices without revealing any knowledge about the user or the retrieved data to a server hosting the one or more storage devices. For PIRs, the server storage is typically unprotected, and private information is retrieved from a public storage or server storage with a group of subscribers (all subscribers being permitted to download data from the entire storage). While a user may simply download all content from a server storage device so that the access pattern is not revealed, this can take too long when all content must be downloaded from a cloud storage service across multiple storage devices. Furthermore, conventional PIR schemes consume a large amount of bandwidth or require a large amount of computation.
Disclosure of Invention
One aspect of the present disclosure provides a method for outsourcing exponentiation in a private group. The method includes executing query instructions at data processing hardware of a client device to retrieve query elements stored on an untrusted server by selecting prime factorization of moduli associated with the query elements stored on the untrusted server. Prime factorization includes two or more prime numbers. The method further includes obtaining a group element configured to generate a respective one of the two or more prime numbers of prime number factorization, and generating a series of base values using the prime number factorization of the modulus and the group element. The method also includes transmitting the column base values from the client device to an untrusted server. The untrusted server is configured to use the series of base values to determine exponentiation of the group element with the exponent stored on the untrusted server. The method also includes receiving, at the data processing hardware, a result from the untrusted server. The result is based on exponentiation of the group element with the exponent stored on the untrusted server.
Implementations of the disclosure may include one or more of the following optional features. In some embodiments, generating the series of base values includes generating a series of initial base values using prime factorization of moduli and group elements, and modulo-reducing each initial base value in the series of initial base values to generate a series of modulo-reduced base values. Each modulo-reduced base value includes a corresponding initial base value in the series of modulo-reduced initial base values. In some examples, transmitting the series of base values to the untrusted server includes transmitting the series of modulo reduced base values to the untrusted server. The untrusted server is configured to determine exponentiation of the group element with the exponent stored on the untrusted server using the series of modulo reduced base values.
In some implementations, transmitting the series of base values to the untrusted server further includes transmitting the modulus to the untrusted server. The untrusted server may be configured to use the series of base values to determine exponentiation of the group element with the exponent stored on the untrusted server. The untrusted server may be further configured to generate a result by exponentiating the exponentiations of the group elements and transmitting the result to the client device. In some examples, the method further includes modular reduction of the result by the data processing hardware when the result includes exponentiation of the group element.
Optionally, generating the series of base values includes obtaining a digital location system representing an exponent stored on an untrusted server, and generating each base value in the series of base values based on exponentiation of the group element by a respective base element corresponding to a digital location in the digital location system. In some examples, the digital location system representing the exponent stored on the untrusted server is selected by the client device or the untrusted server based on bandwidth limitations for communications between the client device and the untrusted server. The digital position system may comprise one of binary, hexadecimal or decimal.
In some implementations, obtaining a digital location system that represents an exponent that is stored on an untrusted server further includes obtaining a number of digits for the exponent represented by the digital location system. The number of digits for the exponent is equal to the number of base values in the series of base values generated by the executed query instruction. The untrusted server may be configured to determine exponentiation of the group element with the exponent stored on the untrusted server by: for each base value in a series of base values received from a client device, exponentiation of the value at the corresponding digit position of the base value with the exponent is determined, and the exponentiation of the value at the corresponding digit position of the base value with the exponent is multiplied together. The results may be associated with the queried element, and in some examples, the client device never reveals prime factorization of the modulus to an untrusted server.
Another aspect of the present disclosure provides a system for off-delegated exponentiation in a private group. The system includes data processing hardware of a client device and memory hardware in communication with the data processing hardware. The memory hardware stores instructions that, when executed on the data processing hardware, cause the data processing hardware to perform operations. The operations include executing query instructions to retrieve query elements stored on an untrusted server by selecting prime factorization of moduli associated with the query elements stored on the untrusted server. Prime factorization includes two or more prime numbers. The operations also include obtaining a group element configured to generate a respective one of the two or more prime numbers of the prime number factorization, and generating a series of base values using the prime number factorization of the modulus and the group element. The operations also include transmitting the column base values from the client device to an untrusted server. The untrusted server is configured to use the series of base values to determine exponentiation of the group element with the exponent stored on the untrusted server. The operations also include receiving results from the untrusted server. The result is based on exponentiation of the group element with the exponent stored on the untrusted server.
This aspect may include one or more of the following optional features. In some embodiments, generating the series of base values includes generating a series of initial base values using prime factorization of moduli and group elements, and modulo-reducing each initial base value in the series of initial base values to generate a series of modulo-reduced base values. Each modulo-reduced base value includes a corresponding initial base value in the series of modulo-reduced initial base values. In some examples, transmitting the series of base values to the untrusted server includes transmitting the series of modulo reduced base values to the untrusted server. The untrusted server is configured to determine exponentiation of the group element with the exponent stored on the untrusted server using the series of modulo reduced base values.
In some implementations, transmitting the series of base values to the untrusted server further includes transmitting the modulus to the untrusted server. The untrusted server may be configured to use the series of base values to determine exponentiation of the group element with the exponent stored on the untrusted server. The untrusted server may be further configured to generate a result by exponentiating the exponentiations of the group elements and transmitting the result to the client device. In some examples, the operations further include modular reducing the result when the result includes exponentiation of the group element.
Optionally, generating the series of base values includes obtaining a digital location system representing an exponent stored on an untrusted server, and generating each base value in the series of base values based on exponentiation of the group element by a respective base element corresponding to a digital location in the digital location system. In some examples, the digital location system representing the exponent stored on the untrusted server is selected by the client device or the untrusted server based on bandwidth limitations for communications between the client device and the untrusted server. The digital position system may comprise one of binary, hexadecimal or decimal.
In some implementations, obtaining a digital location system that represents an exponent that is stored on an untrusted server further includes obtaining a number of digits for the exponent represented by the digital location system. The number of digits for the exponent is equal to the number of base values in the series of base values generated by the executed query instruction. The untrusted server may be configured to determine exponentiation of the group element with the exponent stored on the untrusted server by: for each base value in a series of base values received from a client device, exponentiation of the value at the corresponding digit position of the base value with the exponent is determined, and the exponentiation of the value at the corresponding digit position of the base value with the exponent is multiplied together. The results may be associated with the queried element, and in some examples, the client device never reveals prime factorization of the modulus to an untrusted server.
The details of one or more embodiments of the disclosure are set forth in the accompanying drawings and the description below. Other aspects, features, and advantages will be apparent from the description and drawings, and from the claims.
Drawings
FIG. 1 is a schematic diagram of an example private information retrieval system that exponentiations outside of a delegate when data blocks stored on a non-transitory data store of a distributed system are not being perceptually accessed.
FIG. 2 is a schematic diagram of an exemplary selector of the system of FIG. 1.
FIG. 3 is a schematic diagram of components of the system of FIG. 1 and an exemplary position number system.
FIG. 4 is a flowchart of example operations for generating a series of base values.
Fig. 5 is a flow diagram of an example arrangement of operations of a method for delegating exo-exponentiation in a private group.
FIG. 6 is a schematic diagram of an exemplary computing device that may be used to implement the systems and methods described herein.
Like reference symbols in the various drawings indicate like elements.
Detailed Description
Exponentiation is a common mathematical operation between a base and an exponent, where exponentiation corresponds to repeated multiplication of the base. Exponentiation is widely used in many fields such as biology, physics and computer science. However, it is difficult to calculate a very large exponent due to the superlinear nature of exponentiation. That is, as the index increases, the original computational difficulty increases at a faster rate than the linearity. However, there are some ways in which the difficulty of computing the result of a large exponentiation may be reduced. For example, when the factor of an exponent is known, the so-called "power of exponent rule" significantly reduces the computation.
However, integer factorization is also a known problem. In fact, for sufficiently large integers, there is no effective, known factorization method. This challenge forms the basis of many modern cryptography. For example, two large prime numbers may be kept secret (e.g., private key), while two large prime numbers multiplied together may be shared (e.g., public key) without revealing the secret prime number.
Exponentiation and prime factorization may also play an important role in Private Information Retrieval (PIR) schemes. PIR schemes allow a user to retrieve data from one or more storage devices without revealing any knowledge about the user or the retrieved data to a server hosting the one or more storage devices. For example, the server may store a common database of n blocks B1, … …, bn of equal length. The user wishes to download the block Bi. For privacy reasons, the user does not want to reveal the index of the downloaded data block to the server (or any other person). That is, the user desires to retrieve the selected data block unnoticed. One solution to this challenge is to have the client download the entire database. While effective, the bandwidth cost makes such a solution impractical for any general volume database.
Another approach is to use exponentiation. For example, the server may represent the database as an integer exponent E. Depending on the size of the database, E may be quite large (e.g., thousands or millions of digits). The client obtains a group G represented by a modulus M associated with a block of data on an untrusted server (e.g., a query element stored thereon). The client may select a group element g, where g is associated with a block of data (e.g., a query element) that the client stored on the server wants to download. The client desires to resolve the gE mod M because the client can use the results to imperceptibly retrieve the selected data block. The client knows the prime factorization of M, but it is desirable to keep the prime factorization secret.
In this case, the client may send only g and M to the server, and allow the server to calculate gE mod M. However, as discussed previously, exponentiation is a superlinear problem, and in the case where the exponent E (i.e., the size of the database) is sufficiently large, the computational requirements are too high. The server may greatly simplify the computation with knowledge of the prime factor of the modulus (e.g., by using the feamard theorem), but the client desires to keep the prime factor secret. Thus, it is advantageous for the client to perform efficient computations using prime factorization, and then delegate the remaining exponentiation to the server to avoid the bandwidth cost of transmitting the entire database (i.e., the exponent) and the computation cost of the server performing full exponentiation without accessing prime factorization of the modulus.
Embodiments herein are directed to routines for delegating exo-exponentiation in private groups without revealing prime factorization of moduli. The routine performs efficient exponentiation by letting the client use factorization of the secret prime number of the modulus to generate a series of base values without using the server-saved exponent, thereby allowing an actual balance between bandwidth and computation. The client sends a series of base values to the server for further calculation with the server-saved exponent without providing prime factorization.
Referring to fig. 1, in some implementations, an example system 100 includes user devices 10 (also referred to as client devices 10) associated with respective users or clients 12 and in communication with a remote system 111 (also referred to herein as a server or untrusted server) via a network 112. User device 10 may correspond to any computing device, such as a desktop workstation, a laptop workstation, or a mobile device (i.e., a smart phone). The remote system 111 may be a single computer, multiple computers, or a distributed system (e.g., cloud environment) with extensible/resilient computing resources 118 (e.g., data processing hardware) and/or storage resources 116 (e.g., memory hardware). An untrusted data store 150 (e.g., an "untrusted storage device" or an "untrusted server") is overlaid over the storage resource 116 to allow one or more clients or computing resources 118 to use the storage resource 116 expansively. The untrusted data store 150 is configured to store a plurality of data blocks 152, 152a-n available for download by the client device 10.
For example, the untrusted data store 150 includes n data blocks (B) 152 that are well known and unencrypted, and allows one or more client devices 10 to use PIR for imperceptibly retrieving the data blocks (B) 152 to hide access patterns while preserving the search functionality of the client device 10 for the data blocks (B) 152. Thus, in some configurations, the client device 10 may not own the data block 152, and the contents of the data block 152 are available to the public. Alternatively, the data block 152 may be private to a particular client 12, but the client 12 still desires to hide access patterns from the untrusted data store 150. The data block 152 may be represented by an integer. That is, the untrusted data store 150 or server 111 may process each data block 152 to generate a single integer representing all of the data blocks 152. For example, server 111 may use the chinese remainder theorem to encode each data block 152 with a different small prime number.
A client device 10 (e.g., a computer) associated with a client 12 may include associated memory hardware 122 and associated data processing hardware 124. Each client device 10 may utilize associated memory hardware 122 to save or store query instructions 130, a group (G) 132 represented by a modulus (M) 134, a location base (B) 136, and a location count (M) 138. In some examples, data processing hardware 124 executes generator 160 for generating a series of base values 162 that are published to remote system 111 (which may also be referred to herein as a server executing in an untrusted environment).
In some examples, generator 160 executes query instructions 130 to retrieve query elements (i.e., data block (B) 152) stored on untrusted data store 150. To this end, generator 160 obtains or receives or generates a modulus (M) 134 associated with the query element 150 stored on the untrusted data store 150. Modulus 134 is the product of two or more prime numbers 135. Prime number 135 is selected by user device 10 and may form the basis of the private key. Thus, prime number 135 is kept secret from all other parties, including server 111. Generator 160 also obtains or receives or generates group (G) 132 that includes one or more group elements (G) 133. Group 132 is represented by a modulus 134, and each group element 133 of group 132 is a generator of a subgroup of prime numbers 135.
Referring now to FIG. 2, in some embodiments, the data processing hardware 122 executes a selector 200 that receives the query instruction 130. The query instruction 130 includes one or more data block selections 131. Each data block selection 131 corresponds to a data block 152 (e.g., query element) to be imperceptibly retrieved from the untrusted data store 150. The selector 200 communicates with a data block prime data store 210 that is stored at the server 111 (e.g., the memory hardware 116). In some examples, data block prime data store 210 stores a respective data block prime 220 associated with each data block 152 stored on untrusted data store 150. That is, the data block prime store 210 may provide a data block prime 220 corresponding to the data block 152 to be retrieved from the data store 150. Selector 200 may use data block selection 131 from query instruction 130 to obtain data block prime 220 corresponding to data block 152 associated with data block selection 131. Using the obtained data block prime number 220, the selector 200 selects prime factorization of the modulus 134. Prime factorization includes two or more prime numbers 135, and at least one prime number 135 corresponds to a data block prime 220. Similarly, group element 133 is selected based on data block selection 131 such that both modulus 134 and group element 133 are associated with data block prime 220 associated with data block 152 to be retrieved from untrusted data store 150. That is, the group element 133 is configured to generate a corresponding one of the prime numbers 135 of the prime number factorization of the modulus M134.
Returning to FIG. 1, in some embodiments, generator 160 also receives or determines a location base (B) 136. The location base 136 is the base (also referred to as the root) of the server-saved index 154. That is, the exponent 154 may be represented by any base number greater than or equal to 2 (i.e., binary), and the location base 136 is selected by the client device 10 or the server 111 to represent the exponent 154. In some examples, the location base 136 is selected by the user 12, while in other examples, the user device 10 automatically determines the location base 136. In an additional example, the server determines the location base 136 and forwards it to the client device 10. In addition to the location base 136, the generator 160 may receive a location count 138. As described in more detail below, the position count 138 represents the number of digits 212 required to represent the exponent 154 with the position base 136 (FIG. 2).
Generator 160 uses prime factor 135 to generate a series of base values 162, 162a-n. In some examples, each base 162 is an exponentiation of the group element 133 by the position base 136, which corresponds to a value of a digit position in the position digital system. Referring now to FIG. 3, when the position base 136 is equal to 10 (i.e., using a decimal position number system), the exemplary index 154 is equal to 153,729. It should be appreciated that any location number system (i.e., location base 136) may be selected. For example, the digital location system may include binary, hexadecimal or decimal. Although generally the index 154 is extremely large, for clarity, small numbers are used in the examples. The server 111 that interprets the index 154 with the selected location base 136 (10 in this example) determines the location count 138. That is, the server 111 determines the number of digits 212 required to represent the exponent 154 with the location base 136. In the example shown, the exponent 154 (i.e., 153,729) may be represented in decimal (i.e., b=10) with 6 digits 212. Thus, the position count 138 is equal to 6 (in decimal). Regardless of the location base 136 selected, the index may be expressed as:
Here, the index 154 in decimal (i.e., the position base is equal to 10) is expressed as 9+ (2×10) + (7×100) + (3×1000) + (5×10000) + (1×100000), which amounts to 153,729. Referring now to fig. 4, equation (1) 470 allows gE to be rewritten as:
As is apparent from equation (2) 480, a portion of the gE may be calculated without the server-saved index 154. That is, generator 160 may generate a series of base values 162 as the series of:
It is apparent that the selected location base 136 affects the number of base 162 (i.e., variable m) in the series of base 162a-n, and thus, the location base 136 directly affects the cost of communicating the series of base 162. Because a larger location base 136 requires more difficult computation, the choice of location base 136 directly provides a tradeoff between communication costs and computation costs. In some examples, the location base 136 (i.e., the digital location system) is selected by the client device 10 or the server 111 based on bandwidth limitations for communications between the client device 10 and the server 111. In other examples, the location base 136 is selected to represent approximately half of the number of digits 212 required by the exponent 154 in the selected location digital system. For example, when expressed in terms of a position base of 5,000, selecting an exponent 154 that may result in a requirement of 10,000 digits.
In some embodiments, server 111 transmits location count 138 of index 154 to generator 160. Generator 160 may use location count 138 to determine the number of base values 162 to generate. In the example shown, generator 160 may generate 6 base values 162 because value 153,729 is represented by 6 digits 212. Because generator 160 has access to prime factor 135, generator 160 effectively generates a series of base values 162 without using server-saved exponents 154 (e.g., using the feamard theorem or other techniques, such as the euler theorem, the kamakerr theorem, or the chinese remainder theorem). Generator 160 may transmit a series of base values 162 to server 111.
In some implementations, the series of base values 162 represents a series of initial base values 162A, 162Aa-An. That is, in some examples, generator 160 uses prime factorization of modulus 134 and group element 133 to generate a series of initial floors 162A. Generator 160 may modulo-reduce 134 each initial floor 162A (i.e., by modulo M) to generate a series of modulo-reduced floors 162B, 162Ba-Bn. Thus, each modulo-reduced base 162B includes a corresponding initial base 162A in a series of initial base 162A that are modulo-reduced by the modulus 134. Instead of a series of initial base values 162A, generator 160 may transmit a series of modulo reduced base values 162B to untrusted server 111. That is, the series of base values 162 sent to the server 111 includes a series of initial base values 162A or a series of modulo reduced base values 162B. Reducing the initial value 162A by modulo M significantly reduces the size of the base value 162B sent to the server 11, and thus significantly reduces the bandwidth required to transmit a series of base values 162B to the server 111. Because modulo arithmetic is computationally easier than exponentiation, it may be advantageous to perform additional modulo arithmetic.
Returning to fig. 1, in some embodiments, server 111 performs an exponential multiplier 170. Exponent multiplier 170 receives a series of base values 162 from client device 10 (e.g., generator 160) and exponent 154 from untrusted data store 150. Optionally, client device 10 may also provide group element 133 and/or modulus 134 to server 111 for use by exponent multiplier 170 in generating result 192. In some examples, exponent multiplier 170 (or another module executing on server 111) determines exponent 154 from data block 152 of untrusted data store 150. Exponent multiplier 170 uses a client-generated series of base values 162 and exponent 154 to calculate gE. In some examples, server 111 determines the exponentiation of group element 133 with exponent 154 stored on untrusted server 111 by: for each base value 162 in the series of base values 162, the exponentiation of the value 482 (fig. 4) at the corresponding digit position of the base value 162 with the exponent 154 is determined, and the exponentiations of the value 482 at the corresponding digit position of the base value 162 with the exponent 154 are multiplied together to generate the result 192. The results 192 are associated with the queried element (i.e., the data block 152 selected by the data block selection 131).
Because the server 111 can now generalize this calculation to a standard problem of multiplying m bases by m exponents, the server 111 can utilize several algorithms to efficiently determine the result 192. For example, server 111 may use Pippen lattice exponentiation algorithms or other addition chain exponentiation methods. After determining the gE, the server 111 may send the gE back to the user device 10 as a result 192. Alternatively, server 111 may reduce gE by modulo M (i.e., modulo 134) to generate result 192, as this would significantly reduce the size of result 192, and modulo arithmetic is computationally easier than exponentiation, as previously discussed. The result 192 is based on exponentiation of the group element 133 with the exponent 154 stored on the untrusted data store 150. That is, the result 192 corresponds to the value of the data block 152 selected by the data block selection 131.
The system 100 provides significantly reduced bandwidth usage by sending the entire exponent 154 to the client device 10 because the system only transmits M exponents, each of which may be represented in log (M) bits. Modulus 134 (M) is typically much smaller than index 154, with M log (M) < E. Additionally, the system 100 provides significantly reduced computation on servers that fully compute exponentiation of group elements 133 because the user device 10 utilizes prime factorization of known moduli 134, which is never revealed to the untrusted server 111 or the untrusted data store 150. Thus, by splitting a large problem (i.e., exponentiation with a very large exponent) into several smaller problems (i.e., smaller base 162 exponentiations), the system 100 reduces the overall cost of computation (both asymptotic and concrete) without the client device 10 ever revealing the prime factorization of the modulus 134 to the untrusted server 111. The system 100 provides a balance between communication (e.g., bandwidth) and cost of computation and allows both the user device 10 and the server 111 to compute efficiently. For example, the system 100 may use between 10-fold and 100-fold the standard cost of computing and communication to improve the way in which the comparison was made (e.g., transmitting the full exponent 154 or allowing the server to fully calculate the gE). Although the examples herein are directed to PIR, the described methods for delegating exo-exponentiation may be advantageous in many other fields (e.g., blockchain).
Fig. 5 is a flow diagram of an example method 500 for off-delegated exponentiation of private groups. The method 500 begins at operation 502 with executing the query instruction 130 at the data processing hardware 122 of the client device 10 to retrieve the query element 152 stored on the untrusted server 111, 150 by selecting a prime factorization of the modulus 134 associated with the query element 152 stored on the untrusted server 111, 150 at operation 504. Prime factorization includes two or more prime numbers 135. At operation 506, the method 500 includes obtaining a group element 133 configured to generate a respective one of the prime numbers 135 of the prime number factoring. At operation 508, the method 500 includes generating a series of base values 162 using prime factorization of the modulus 134 and the group element 133, and at operation 510, transmitting the series of base values 162 from the client device 10 to the untrusted server 111, 150. The untrusted server 111, 150 is configured to use the series of floor values 162 to determine the exponentiation of the group element 133 with the exponent 154 stored on the untrusted server. At operation 512, the method 500 includes receiving, at the data processing hardware 122, the results 192 from the untrusted servers 111, 150. The result 192 is based on exponentiation of the group element 133 with the exponent 154 stored on the untrusted server 111, 150.
FIG. 6 is a schematic diagram of an exemplary computing device 600 that may be used to implement the systems and methods described in this document. Computing device 600 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers. The components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
Computing device 600 includes a processor 610, memory 620, storage 630, high-speed interface/controller 640 connected to memory 620 and high-speed expansion ports 650, and low-speed interface/controller 660 connected to low-speed bus 670 and storage 630. Each of the components 610, 620, 630, 640, 650, and 660 are interconnected using various buses, and may be mounted on a common motherboard or in other manners as appropriate. The processor 610 may process instructions for execution within the computing device 600, including instructions stored in the memory 620 or on the storage device 630, to display graphical information for a Graphical User Interface (GUI) on an external input/output device, such as a display 680 coupled to the high-speed interface 640. In other embodiments, multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory. Also, multiple computing devices 600 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a set of blade servers, or a multiprocessor system).
Memory 620 non-transitory stores information within computing device 600. Memory 620 may be a computer-readable medium, volatile memory unit(s), or non-volatile memory unit(s). Non-transitory memory 620 may be a physical device used to temporarily or permanently store programs (e.g., sequences of instructions) or data (e.g., program state information) for use by computing device 600. Examples of non-volatile memory include, but are not limited to, flash memory and Read Only Memory (ROM)/Programmable Read Only Memory (PROM)/Erasable Programmable Read Only Memory (EPROM)/Electrically Erasable Programmable Read Only Memory (EEPROM) (e.g., commonly used for firmware such as a boot strap). Examples of volatile memory include, but are not limited to, random Access Memory (RAM), dynamic Random Access Memory (DRAM), static Random Access Memory (SRAM), phase Change Memory (PCM), and magnetic disk or tape.
The storage device 630 is capable of providing mass storage for the computing device 600. In some implementations, the storage device 630 is a computer-readable medium. In various different implementations, the storage device 630 may be a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations. In additional embodiments, the computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer-readable medium or machine-readable medium, such as memory 620, storage device 630, or memory on processor 610.
The high-speed controller 640 manages bandwidth-intensive operations for the computing device 600, while the low-speed controller 660 manages lower bandwidth-intensive operations. This allocation of responsibilities is merely exemplary. In some implementations, the high-speed controller 640 is coupled to the memory 620, the display 680 (e.g., by a graphics processor or accelerator), and to a high-speed expansion port 650 that can accept various expansion cards (not shown). In some implementations, a low-speed controller 660 is coupled to the storage device 630 and the low-speed expansion port 690. The low-speed expansion port 690, which may include various communication ports (e.g., USB, bluetooth, ethernet, wireless ethernet), may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device, such as a switch or router, for example, through a network adapter.
As shown, computing device 600 may be implemented in a number of different forms. For example, it may be implemented as a standard server 600a, or as a laptop computer 600b multiple times in a group of such servers 600a, or as part of a rack server system 600 c.
Various implementations of the systems and techniques described here can be realized in digital electronic and/or optical circuits, integrated circuits, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof. These various embodiments may include embodiments in one or more computer programs executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
A software application (i.e., a software resource) may refer to computer software that causes a computing device to perform tasks. In some examples, a software application may be referred to as an "application," application program, "or" program. Example applications include, but are not limited to, system diagnostic applications, system management applications, system maintenance applications, word processing applications, spreadsheet applications, messaging applications, media streaming applications, social networking applications, and gaming applications.
These computer programs (also referred to as programs, software applications or code) include machine instructions for a programmable processor, and may be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. As used herein, the terms "machine-readable medium" and "computer-readable medium" refer to any computer program product, non-transitory computer-readable medium, apparatus and/or device (e.g., magnetic discs, optical disks, memory, programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term "machine-readable signal" refers to any signal used to provide machine instructions and/or data to a programmable processor.
The processes and logic flows described in this specification can be performed by one or more programmable processors (also referred to as data processing hardware) executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, and special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices including by way of example semiconductor memory devices (e.g., EPROM, EEPROM, and flash memory devices), magnetic (e.g., internal hard disk or removable magnetic) magneto-optical disks, and CD-ROM disks and DVD-ROM disks. The processor and the memory may be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, one or more aspects of the disclosure may be implemented on a computer having a display device, e.g., a CRT (cathode ray tube), LCD (liquid crystal display) monitor or touch screen for displaying information to the user and optionally a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other types of devices may also be used to provide for interaction with a user; for example, feedback provided to the user may be any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback; and input from the user may be received in any form, including acoustic, speech, or tactile input. In addition, the computer may interact with the user by sending files to and receiving files from devices used by the user; for example, by sending a web page to a web browser on a user client device in response to a request received from the web browser.
Several embodiments have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the disclosure. Accordingly, other embodiments are within the scope of the following claims.
Claims (22)
1. A method (500) for delegating exo-exponentiation in a private group, the method comprising:
Query instructions (130) are executed at data processing hardware (124) of the client device (10) to retrieve query elements (152) stored on an untrusted server (111) by:
selecting a prime factorization of a modulus (134) associated with the query element (152) stored on the untrusted server (111), the prime factorization comprising two or more prime numbers (135);
Obtaining a group element (133) configured to generate a respective one of the two or more primes (135) of the primes factorization;
Generating a series of base values (162) using the prime factorization of the modulus (134) and the group element (133); and
Transmitting the series of base values (162) from the client device (10) to the untrusted server (111), the untrusted server (111) configured to use the series of base values (162) to determine exponentiation of the group element (133) with the exponent (154) stored on the untrusted server (111); and
-Receiving, at the data processing hardware (124), a result (192) from the untrusted server (111), the result (192) being based on the exponentiation of the group element (133) with the exponent (154) stored on the untrusted server (111).
2. The method (500) according to claim 1, wherein:
Generating the series of base values (162) includes:
generating a series of initial base values (162) using the prime factorization of the modulus (134) and the group element (133); and
-Reducing each initial base value (162) in the series of base values (162) with the modulus (134) to generate a series of modulus reduced base values (162), each modulus reduced base value (162) comprising a corresponding initial base value (162) in the series of initial base values (162) reduced by the modulus (134); and
Transmitting the series of floor values (162) to the untrusted server (111) includes transmitting the series of modulo reduced floor values (162) to the untrusted server (111), the untrusted server (111) configured to use the series of modulo reduced floor values (162) to determine the exponentiation of the group element (133) with the exponent (154) stored on the untrusted server (111).
3. The method (500) of claim 1 or 2, wherein transmitting the series of floor values (162) to the untrusted server (111) further comprises transmitting the modulus (134) to the untrusted server (111), the untrusted server (111) being configured to:
-determining the exponentiation of the group element (133) with the exponent (154) stored on the untrusted server (111) using the series of base values (162);
Generating the result (192) by reducing the exponentiation of the group element (133) with the exponent (154) with the modulus (134); and
-Transmitting the result (192) to the client device (10).
4. The method (500) of claim 1, further comprising, when the result (192) includes the exponentiation of the group element (133) with the exponent (154), reducing the result (192) by the modulus (134) by the data processing hardware (124).
5. The method (500) of claim 1, wherein generating the series of base values (162) includes: obtaining a digital location system (100) representing the index (154) stored on the untrusted server (111); and
-Generating each base value (162) of the series of base values (162) based on exponentiation of the group element (133) by a respective base element (136) corresponding to a digit position in the digit position system (100).
6. The method (500) of claim 5, wherein the digital location system (100) representing the exponent (154) stored on the untrusted server (111) is selected by the client device (10) or the untrusted server (111) based on a bandwidth limit for communications between the client device (10) and the untrusted server (111).
7. The method (500) of claim 5, wherein the digital location system (100) comprises one of binary, hexadecimal or decimal.
8. The method (500) of claim 5, wherein obtaining the digital location system (100) representative of the exponent (154) stored on the untrusted server (111) further comprises obtaining a number of digits (212) for the exponent (154) represented by the digital location system (100), the number of digits (212) for the exponent (154) being equal to a number of base values (162) in the series of base values (162) generated by the executed query instruction (130).
9. The method (500) of claim 1, wherein the untrusted server (111) is configured to determine the exponentiation of the group element (133) with the exponent (154) stored on the untrusted server (111) by:
For each base value (162) in the series of base values (162) received from the client device (10), determining an exponentiation of the base value (162) with a value at a respective digit position of the exponent (154); and
-Multiplying together said exponentiation of said base value (162) with said value at said corresponding digit position of said exponent (154).
10. The method (500) of claim 1, wherein the result (192) is associated with the queried element.
11. The method (500) of claim 1, wherein the client device (10) never reveals the prime factorization of the modulus (134) to the untrusted server (111).
12. A system (100) for delegation of power in a private group, the system comprising:
Data processing hardware (124) of the client device (10); and
Memory hardware (122) in communication with the data processing hardware (124), the memory hardware (122) storing instructions that, when executed on the data processing hardware (124), cause the data processing hardware (124) to perform operations comprising:
Query instructions (130) are executed to retrieve query elements (152) stored on an untrusted server (111) by:
selecting a prime factorization of a modulus (134) associated with the query element (152) stored on the untrusted server (111), the prime factorization comprising two or more prime numbers (135);
Obtaining a group element (133) configured to generate a respective one of the two or more primes (135) of the primes factorization;
Generating a series of base values (162) using the prime factorization of the modulus (134) and the group element (133); and
Transmitting the series of base values (162) from the client device (10) to the untrusted server (111), the untrusted server (111) configured to use the series of base values (162) to determine exponentiation of the group element (133) with the exponent (154) stored on the untrusted server (111); and
-Receiving a result (192) from the untrusted server (111), the result (192) being based on the exponentiation of the group element (133) with the exponent (154) stored on the untrusted server (111).
13. The system (100) according to claim 12, wherein:
Generating the series of base values (162) includes:
generating a series of initial base values (162) using the prime factorization of the modulus (134) and the group element (133); and
-Reducing each initial base value (162) in the series of base values (162) with the modulus (134) to generate a series of modulus reduced base values (162), each modulus reduced base value (162) comprising a corresponding initial base value (162) in the series of initial base values (162) reduced by the modulus (134); and
Transmitting the series of floor values (162) to the untrusted server (111) includes transmitting the series of modulo reduced floor values (162) to the untrusted server (111), the untrusted server (111) configured to use the series of modulo reduced floor values (162) to determine the exponentiation of the group element (133) with the exponent (154) stored on the untrusted server (111).
14. The system (100) of claim 12 or 13, wherein transmitting the series of floor values (162) to the untrusted server (111) further comprises transmitting the modulus (134) to the untrusted server (111), the untrusted server (111) configured to:
-determining the exponentiation of the group element (133) with the exponent (154) stored on the untrusted server (111) using the series of base values (162);
Generating the result (192) by reducing the exponentiation of the group element (133) with the exponent (154) with the modulus (134); and
-Transmitting the result (192) to the client device (10).
15. The system (100) of claim 12, wherein the operations further comprise, when the result (192) includes the exponentiation of the group element (133) with the exponent (154), reducing the result (192) by the modulus (134).
16. The system (100) of claim 12, wherein generating the series of floor values (162) includes:
obtaining a digital location system (100) representing the index (154) stored on the untrusted server (111); and
-Generating each base value (162) of the series of base values (162) based on exponentiation of the group element (133) by a respective base element (136) corresponding to a digit position in the digit position system (100).
17. The system (100) of claim 16, wherein the digital location system (100) representing the exponent (154) stored on the untrusted server (111) is selected by the client device (10) or the untrusted server (111) based on a bandwidth limit for communications between the client device (10) and the untrusted server (111).
18. The system (100) of claim 16, wherein the digital location system (100) comprises one of binary, hexadecimal or decimal.
19. The system (100) of claim 16, wherein obtaining the digital location system (100) representative of the exponent (154) stored on the untrusted server (111) further comprises obtaining a number of digits (212) for the exponent (154) represented by the digital location system (100), the number of digits (212) for the exponent (154) being equal to a number of base values (162) in the series of base values (162) generated by the executed query instruction (130).
20. The system (100) of claim 12, wherein the untrusted server (111) is configured to determine the exponentiation of the group element (133) with the exponent (154) stored on the untrusted server (111) by:
For each base value (162) in the series of base values (162) received from the client device (10), determining an exponentiation of the base value (162) with a value at a respective digit position of the exponent (154); and
-Multiplying together said exponentiation of said base value (162) with said value at said corresponding digit position of said exponent (154).
21. The system (100) of claim 12, wherein the result (192) is associated with the queried element.
22. The system (100) of claim 12, wherein the client device (10) never reveals the prime factorization of the modulus (134) to the untrusted server (111).
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US16/411,646 US11005654B2 (en) | 2019-05-14 | 2019-05-14 | Outsourcing exponentiation in a private group |
US16/411,646 | 2019-05-14 | ||
PCT/US2019/065563 WO2020231471A1 (en) | 2019-05-14 | 2019-12-10 | Outsourcing exponentiation in a private group |
Publications (2)
Publication Number | Publication Date |
---|---|
CN114128208A CN114128208A (en) | 2022-03-01 |
CN114128208B true CN114128208B (en) | 2024-05-17 |
Family
ID=
Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN106233287A (en) * | 2015-03-02 | 2016-12-14 | 微软技术许可有限责任公司 | Management to the data base querying of large data collection |
CN107924444A (en) * | 2015-09-25 | 2018-04-17 | 英特尔公司 | Montgomery Algorithm processor, method, system and the instruction of safety |
CN109314641A (en) * | 2016-04-12 | 2019-02-05 | 多伦多大学管理委员会 | System and method for verifying homomorphic cryptography data and executing operation to it |
CN109740376A (en) * | 2018-12-21 | 2019-05-10 | 哈尔滨工业大学（深圳） | Location privacy protection method, system, equipment and medium based on NN Query |
Patent Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN106233287A (en) * | 2015-03-02 | 2016-12-14 | 微软技术许可有限责任公司 | Management to the data base querying of large data collection |
CN107924444A (en) * | 2015-09-25 | 2018-04-17 | 英特尔公司 | Montgomery Algorithm processor, method, system and the instruction of safety |
CN109314641A (en) * | 2016-04-12 | 2019-02-05 | 多伦多大学管理委员会 | System and method for verifying homomorphic cryptography data and executing operation to it |
CN109740376A (en) * | 2018-12-21 | 2019-05-10 | 哈尔滨工业大学（深圳） | Location privacy protection method, system, equipment and medium based on NN Query |
Non-Patent Citations (2)
Title |
---|
数据库服务――安全与隐私保护;田秀霞;王晓玲;高明;周傲英;;软件学报(第05期);全文 * |
隐私保护信息检索协议及其应用研究;陈杨杨;中国优秀硕士学位论文全文数据库;全文 * |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US20200396053A1 (en) | Secure Probabilistic Analytics Using an Encrypted Analytics Matrix | |
CN113557512B (en) | Secure multi-party arrival frequency and frequency estimation | |
CN110417726A (en) | A kind of key management method and relevant device | |
US20230185960A1 (en) | Private Information Retrieval with Sublinear Public-Key Operations | |
US11943352B2 (en) | Outsourcing exponentiation in a private group | |
CN115801220A (en) | Acceleration apparatus, computing system, and acceleration method | |
CN114128208B (en) | Method and system for delegating external exponentiation in private groups | |
Markovskyi et al. | Secure modular exponentiation in cloud systems | |
WO2023197995A1 (en) | Homomorphic encryption operation method and apparatus, and electronic device | |
US20180107843A1 (en) | Multiple Message Retrieval for Secure Electronic Communication | |
Bardis | Secure, green implementation of modular arithmetic operations for IoT and cloud applications | |
Tawalbeh et al. | Hardware design and implementation of ElGamal public-key cryptography algorithm | |
Brent | Some comments on CS Wallace's random number generators | |
KR20220163493A (en) | Apparatus and method for performing statistical calculation on homomorphic ciphertext | |
Sun et al. | How to compute modular exponentiation with large operators based on the right-to-left binary algorithm | |
Bisseling et al. | Mondriaan sparse matrix partitioning for attacking cryptosystems by a parallel block Lanczos algorithm–A case study | |
Bai et al. | Rsa encryption/decryption implementation based on zedboard | |
KR20230144435A (en) | Apparatus and method of homomorphic encryption opeation | |
Dams et al. | WIDESEAS: A lattice-based PIR scheme implemented in EncryptedQuery | |
Kuchin et al. | Method of Secure Modular Exponentiation on Remote Computing Platforms | |
Buell | Elliptic Curve Cryptography | |
Adiono et al. | A Low Latency and Resource Efficient Scalable RSA Cryptoprocessor Architecture | |
KR20240009211A (en) | Method and system for providing computing device for each computing power based on prediction of computing power required for fully homomorphic encryption in a cloud environment | |
JP2024516387A (en) | Method, system and program for accelerating modular arithmetic operations | |
Yang et al. | Economic costs of multi-sever private information retrieval in cloud computing |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
GR01 | Patent grant |