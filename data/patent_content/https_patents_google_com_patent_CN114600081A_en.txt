CN114600081A - Interacting with applications via dynamically updating natural language processing - Google Patents
Interacting with applications via dynamically updating natural language processing Download PDFInfo
- Publication number
- CN114600081A CN114600081A CN201980101548.6A CN201980101548A CN114600081A CN 114600081 A CN114600081 A CN 114600081A CN 201980101548 A CN201980101548 A CN 201980101548A CN 114600081 A CN114600081 A CN 114600081A
- Authority
- CN
- China
- Prior art keywords
- application
- digital assistant
- component
- natural language
- audio signal
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000003058 natural language processing Methods 0.000 title claims abstract description 214
- 238000000034 method Methods 0.000 claims abstract description 244
- 230000009471 action Effects 0.000 claims abstract description 169
- 230000005236 sound signal Effects 0.000 claims abstract description 125
- 230000004044 response Effects 0.000 claims abstract description 79
- 230000006870 function Effects 0.000 claims abstract description 68
- 238000012545 processing Methods 0.000 claims description 214
- 230000008569 process Effects 0.000 claims description 46
- 230000008859 change Effects 0.000 claims description 26
- 230000003213 activating effect Effects 0.000 claims description 21
- 230000004048 modification Effects 0.000 claims description 7
- 238000012986 modification Methods 0.000 claims description 7
- 230000004913 activation Effects 0.000 claims description 6
- 238000001514 detection method Methods 0.000 claims description 3
- 238000013507 mapping Methods 0.000 claims description 3
- 230000008846 dynamic interplay Effects 0.000 abstract description 2
- 230000026676 system process Effects 0.000 abstract 2
- 238000004891 communication Methods 0.000 description 16
- 230000000694 effects Effects 0.000 description 14
- 238000004590 computer program Methods 0.000 description 11
- 230000003993 interaction Effects 0.000 description 9
- 238000005516 engineering process Methods 0.000 description 7
- 238000013515 script Methods 0.000 description 6
- 230000000007 visual effect Effects 0.000 description 6
- 230000000670 limiting effect Effects 0.000 description 5
- 101100264195 Caenorhabditis elegans app-1 gene Proteins 0.000 description 4
- 230000009849 deactivation Effects 0.000 description 4
- 238000010801 machine learning Methods 0.000 description 4
- 238000013519 translation Methods 0.000 description 4
- WDQKVWDSAIJUTF-GPENDAJRSA-N via protocol Chemical compound ClCCNP1(=O)OCCCN1CCCl.O([C@H]1C[C@@](O)(CC=2C(O)=C3C(=O)C=4C=CC=C(C=4C(=O)C3=C(O)C=21)OC)C(=O)CO)[C@H]1C[C@H](N)[C@H](O)[C@H](C)O1.C([C@H](C[C@]1(C(=O)OC)C=2C(=C3C([C@]45[C@H]([C@@]([C@H](OC(C)=O)[C@]6(CC)C=CCN([C@H]56)CC4)(O)C(=O)OC)N3C=O)=CC=2)OC)C[C@@](C2)(O)CC)N2CCC2=C1NC1=CC=CC=C21 WDQKVWDSAIJUTF-GPENDAJRSA-N 0.000 description 4
- 238000010586 diagram Methods 0.000 description 3
- 235000013305 food Nutrition 0.000 description 3
- 230000033001 locomotion Effects 0.000 description 3
- 238000007726 management method Methods 0.000 description 3
- 230000003287 optical effect Effects 0.000 description 3
- 230000000644 propagated effect Effects 0.000 description 3
- 238000009877 rendering Methods 0.000 description 3
- 238000012552 review Methods 0.000 description 3
- 230000011218 segmentation Effects 0.000 description 3
- 238000004458 analytical method Methods 0.000 description 2
- 238000005065 mining Methods 0.000 description 2
- 230000000877 morphologic effect Effects 0.000 description 2
- 230000003068 static effect Effects 0.000 description 2
- 230000001360 synchronised effect Effects 0.000 description 2
- 238000012546 transfer Methods 0.000 description 2
- 238000012384 transportation and delivery Methods 0.000 description 2
- IRLPACMLTUPBCL-KQYNXXCUSA-N 5'-adenylyl sulfate Chemical compound C1=NC=2C(N)=NC=NC=2N1[C@@H]1O[C@H](COP(O)(=O)OS(O)(=O)=O)[C@@H](O)[C@H]1O IRLPACMLTUPBCL-KQYNXXCUSA-N 0.000 description 1
- 238000013473 artificial intelligence Methods 0.000 description 1
- 230000000386 athletic effect Effects 0.000 description 1
- 230000009286 beneficial effect Effects 0.000 description 1
- 230000008901 benefit Effects 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 230000015572 biosynthetic process Effects 0.000 description 1
- 238000004364 calculation method Methods 0.000 description 1
- 238000006243 chemical reaction Methods 0.000 description 1
- 230000008878 coupling Effects 0.000 description 1
- 238000010168 coupling process Methods 0.000 description 1
- 238000005859 coupling reaction Methods 0.000 description 1
- 238000003066 decision tree Methods 0.000 description 1
- 238000000354 decomposition reaction Methods 0.000 description 1
- 238000013135 deep learning Methods 0.000 description 1
- 230000001934 delay Effects 0.000 description 1
- 238000012217 deletion Methods 0.000 description 1
- 230000037430 deletion Effects 0.000 description 1
- 230000018109 developmental process Effects 0.000 description 1
- 238000005108 dry cleaning Methods 0.000 description 1
- 238000001914 filtration Methods 0.000 description 1
- 239000000446 fuel Substances 0.000 description 1
- 230000006872 improvement Effects 0.000 description 1
- 230000000977 initiatory effect Effects 0.000 description 1
- 238000009434 installation Methods 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 230000007257 malfunction Effects 0.000 description 1
- 239000011159 matrix material Substances 0.000 description 1
- 238000005259 measurement Methods 0.000 description 1
- 238000010295 mobile communication Methods 0.000 description 1
- 230000008439 repair process Effects 0.000 description 1
- 238000013468 resource allocation Methods 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 238000000926 separation method Methods 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 238000013179 statistical model Methods 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L15/18—Speech classification or search using natural language modelling
- G10L15/1822—Parsing for meaning understanding
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/903—Querying
- G06F16/9032—Query formulation
- G06F16/90332—Natural language query formulation or dialogue systems
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/16—Sound input; Sound output
- G06F3/167—Audio in a user interface, e.g. using voice commands for navigating, audio feedback
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/451—Execution arrangements for user interfaces
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/06—Creation of reference templates; Training of speech recognition systems, e.g. adaptation to the characteristics of the speaker's voice
- G10L15/063—Training
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L15/083—Recognition networks
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/22—Procedures used during a speech recognition process, e.g. man-machine dialogue
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/06—Creation of reference templates; Training of speech recognition systems, e.g. adaptation to the characteristics of the speaker's voice
- G10L15/063—Training
- G10L2015/0635—Training updating or merging of old and new templates; Mean values; Weighting
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/22—Procedures used during a speech recognition process, e.g. man-machine dialogue
- G10L2015/223—Execution procedure of a spoken command
Abstract
Dynamic interaction with an application is provided. For example, a system receives a first input audio signal. The system processes a first input audio signal via natural language processing techniques to identify an application. The system activates an application to execute on the client computing device. The application declares the function the application is configured to perform. The system modifies natural language processing techniques in response to functionality declared by the application. The system receives a second input audio signal. The system processes the second input audio signal via the modified natural language processing technique to detect one or more parameters. The system determines that one or more parameters are compatible for entry into an input field of an application. The system generates an action data structure for the application. The system inputs the action data structure into an application that executes the action data structure.
Description
Background
The computing device may execute an application. An application may provide a user interface that may receive input information, perform functions, and output information.
Disclosure of Invention
The technical solutions generally involve interacting with applications, such as third party (3P) applications, via dynamically updating natural language processing ("NLP") or natural language understanding. By dynamically updating the NLP, the technical solution can facilitate voice-based interaction with applications (including 3P applications) via a digital assistant.
Interacting with applications to perform actions on computing devices that have limited interfaces or use limited interfaces can be challenging. Using additional interfaces to communicate with the application may increase computational resource consumption, require the use of excessive interfaces, or delay or otherwise introduce latency into the execution and completion of the actions of the application.
Thus, the technical solution may utilize a protocol to receive claims from an application. Technical solutions may use declarations to update, in real-time (e.g., in response to invocation of an application and receipt of the declaration), natural language understanding or processing techniques used to parse or process speech input. Technical solution subsequent speech inputs may be processed using updated NLP techniques in order to improve the accuracy, reliability and likelihood of detecting input parameters used by an application to perform an action.
At least one aspect of the technical solution relates to a system for interacting with an application. The system may include a digital assistant component executed by a client computing device. The digital assistant component may include one or more processors and memory. The digital assistant component can execute a natural language processor component, an application manager component, and a direct action application programming interface ("API"). The NLP component may receive a first input audio signal detected by a microphone of the client computing device. The NLP component may process the first input audio signal via natural language processing techniques to identify an indication of an application. The application manager component can activate an application to execute on the client computing device in response to the indication. The application may declare, via the protocol, to the digital assistant the functions that the application is configured to perform. The NLP component can modify the natural language processing technique in response to a function declared by the application. The NLP component may receive a second input audio signal detected by a microphone of the client computing device. The NLP component may process the second input audio signal via the modified natural language processing technique to detect one or more parameters. The NLP component may determine, based on a comparison between the one or more parameters and the functionality declared by the application, that the one or more parameters are compatible for input to an input field of an application activated by a digital assistant on the client computing device. The direct action API may generate an action data structure for the application in response to the determination of compatibility and based on one or more parameters. The direct action API may input an action data structure into the application via the protocol to cause the application to execute the action data structure and update a user interface element of the application.
At least one aspect of the technical solution relates to a method of dynamically interacting with an application. The method may be performed by one or more digital assistant components executed by a client computing device. The method may include the digital assistant component receiving a first input audio signal detected by a microphone of the client computing device. The method may include the digital assistant component processing the first input audio signal via natural language processing techniques to identify an indication of an application. The method may include the digital assistant component activating an application to execute on the client computing device in response to the indication. The application declares, via the protocol, to the digital assistant a function that the application is configured to perform. The method may include the digital assistant component modifying the natural language processing technique in response to a functionality declared by the application. The method may include the digital assistant component receiving a second input audio signal detected by a microphone of the client computing device. The method may include the digital assistant component processing the second input audio signal via the modified natural language processing technique to detect the one or more parameters. The method may include the digital assistant component determining, based on a comparison between the one or more parameters and the functionality declared by the application, that the one or more parameters are compatible for input into an input field of an application activated by the digital assistant on the client computing device. The method may include the digital assistant component generating an action data structure for the application in response to the determination of compatibility and based on the one or more parameters. The method may include the digital assistant component entering the action data structure into the application via the protocol to cause the application to execute the action data structure and update a user interface element of the application.
At least one aspect relates to a system for dynamically interacting with an application. The system may include one or more processors and memory. For example, the system may include a data processing system executed by a client computing device. The system may include a digital assistant component executed by one or more processors and memory. The digital assistant component can activate an application for execution on the client computing device in response to the first input audio. Activation of the application can cause the application to declare, via the protocol, to the digital assistant component a function that the application is configured to perform. The digital assistant component can modify the natural language processing techniques in response to functionality declared by the application. The digital assistant component can receive a second input audio signal detected by a microphone of the client computing device. The digital assistant component may process the second input audio signal via the modified natural language processing technique to detect one or more parameters. The digital assistant component can determine, based on a comparison between the one or more parameters and the functionality declared by the application, that the one or more parameters are compatible for input to an input field of an application activated by the digital assistant on the client computing device. The digital assistant component can generate an action data structure for the application in response to the determination of compatibility and based on the one or more parameters. The digital assistant component can input the action data structure into the application via the protocol to cause the application to execute the action data structure and update a user interface element of the application. The digital assistant component can transmit a request for content to a remote data processing system. The digital assistant component can present the content item selected by the remote data processing system in response to receiving the content item from the remote data processing system.
At least one aspect relates to a method of dynamically interacting with an application. The method may be performed by one or more processors and memory. For example, the method may be performed by a data processing system executed by a client computing device. The method may be performed by a digital assistant component executed by one or more processors and memory. The method may include the digital assistant component activating an application for execution on the client computing device in response to the first input audio. Activation of the application can cause the application to declare, via the protocol, to the digital assistant component a function that the application is configured to perform. The method may include the digital assistant component modifying the natural language processing technique in response to a functionality declared by the application. The method may include the digital assistant component receiving a second input audio signal detected by a microphone of the client computing device. The method may include the digital assistant component processing the second input audio signal via the modified natural language processing technique to detect the one or more parameters. The method may include the digital assistant component determining, based on a comparison between the one or more parameters and the functionality declared by the application, that the one or more parameters are compatible for input into an input field of an application activated by the digital assistant on the client computing device. The method may include the digital assistant component generating an action data structure for the application in response to the determination of compatibility and based on the one or more parameters. The method may include the digital assistant component entering the action data structure into the application via the protocol to cause the application to execute the action data structure and update a user interface element of the application. The method may include the digital assistant component transmitting a request for content to a remote data processing system. The method may include the digital assistant component presenting the content item selected by the remote data processing system in response to receiving the content item from the remote data processing system.
These and other aspects and embodiments are discussed in detail below. The foregoing information and the following detailed description include illustrative examples of various aspects and embodiments, and provide an overview or framework for understanding the nature and character of the claimed aspects and embodiments. The accompanying drawings are included to provide an illustration and a further understanding of the various aspects and embodiments, and are incorporated in and constitute a part of this specification.
Drawings
The drawings are not intended to be drawn to scale. Like reference numbers and designations in the various drawings indicate like elements. For purposes of clarity, not every component may be labeled in every drawing. In the drawings:
FIG. 1 is a diagram of a system for dynamically interacting with an application, according to an embodiment.
FIG. 2 is an illustration of the operation of a system for dynamically interacting with an application, according to an embodiment.
FIG. 3 is an illustration of a method of dynamically interacting with an application, according to an embodiment.
FIG. 4 is a block diagram illustrating a general architecture of a computer system that may be used to implement elements of the systems depicted in FIGS. 1 and 2, as well as the method depicted in FIG. 3.
Detailed Description
Following are more detailed descriptions of various concepts related to methods, apparatus, and systems for dynamic interaction of applications and embodiments thereof. The various concepts introduced above and discussed in greater detail below may be implemented in any of numerous ways.
The technical solution generally involves interacting with third party applications. The system and method of the technical solution can interact with a (3P) application by dynamically updating natural language processing techniques (or natural language understanding). In a speech-based computing environment, such as when the input mode is based on speech input (e.g., an audio input signal detected by a microphone of the computing device), interacting with the 3P application to perform an action can be challenging. For example, a digital assistant executing on a mobile computing device (e.g., a smartphone) may receive speech input. The digital assistant can invoke or launch an application for execution on (or at least partially on) the smartphone. However, the application may not be configured with a voice interface (e.g., a user interface that allows voice input or natural language processing) to allow input parameters to be received via voice input. Without the input parameters, the application may be unable to perform the action, or unable to perform the action accurately and reliably. With a partial set of input parameters, an application may perform an action incorrectly (e.g., output an incorrect or unexpected result), or perform an action incorrectly (e.g., perform the wrong action). In some cases, the application may request additional parameters in order to perform an action using a non-voice-based interface (e.g., a display device, a touch input interface, a gesture interface, an icon, a button, a drop-down menu, a keyboard, or a mouse). Thus, without a complete set of input parameters, the application may perform an erroneous action, or activate an additional interface, which may result in wasted computational resource utilization (e.g., additional power consumption, computational processing) and introduce delays in performing or completing actions by the application (e.g., additional requests to obtain input parameters, hints, remote procedure calls).
Accordingly, the systems and methods of the technical solution generally involve interacting with third party ("3P") applications via dynamically updating natural language processing ("NLP") or natural language understanding. By dynamically updating the NLP, the technical solution can facilitate voice-based interaction with 3P applications via a digital assistant. By providing voice-based interaction, the technical limitations associated with alternative interaction methods (e.g., touch) can be overcome for 3P applications: for example, a user who may have difficulty handling a touch interface due to physical constraints may benefit. The system and method of the technical solution may utilize a protocol to receive the claim from the application. The technical solution may use the declaration to update, in real-time (e.g., in response to invocation of the application and receipt of the declaration), natural language understanding or processing techniques used to parse or process the speech input. The technical solution may use updated NLP techniques to process subsequent speech inputs in order to improve the accuracy, reliability and likelihood of detecting input parameters used by an application to perform an action.
For example, a voice input to a smartphone may include "book a table at reserve _ book _ App (book table at Restaurant _ reserve _ App)". The digital assistant may recognize the mobile application reserve _ Booking _ App (Restaurant _ Booking _ App) in the voice input and then launch the reserve _ Booking _ App mobile application on the smartphone. The retaurant boosting App mobile application may declare to the digital assistant via a protocol what functions the application may perform or the state of the user interface of the application. Using this information, the digital assistant can better understand subsequent voice inputs or voice queries related to the retaurant _ boosting _ App application. For Example, if the subsequent speech input is "at Example _ Italian _ Restaurant," the digital assistant may determine that the speech input is a continuation of the reservation via the Restaurant _ boosting _ App application. The digital assistant may then generate an action data structure with information or parameters to make the reservation and transmit the action data structure to the retaurant _ boosting _ App application via the protocol.
The technical solution may determine a context of an application based on a current state of the application, modify NLP techniques to improve a digital assistant's ability to detect input parameters in subsequent speech inputs that are compatible with the current state or context of the application, and then input these parameters into the application to allow the application to perform actions efficiently, accurately, and reliably. By providing input parameters used by an application to perform an action, the technical solution may reduce or eliminate the number of prompts or requests for input by the application while limiting or eliminating the use of different user interfaces (e.g., display device, touch screen, gesture, keyboard, or mouse). Thus, the systems and methods of the technical solution may provide a seamless process of launching an application using speech input and performing an action by the application. In this way, the beneficial aspects of the voice interface may be provided to the application.
FIG. 1 illustrates an exemplary system 100 for dynamically interacting with an application. The system 100 may include a content selection infrastructure. System 100 may include a data processing system 102. The data processing system 102 may include a computing device 128 or execute on the computing device 128. The data processing system 102 may communicate with one or more of the 3P content provider device 140, the remote data processing system 142, or the 3P application server 148 via the network 105. The network 105 may include a computer network, such as the internet, a local area network, a wide area network, a metropolitan area network, or other area network, an intranet, a satellite network, and other communication networks, such as voice or data mobile telephone networks. The network 105 may be used to access information resources, such as web pages, web sites, domain names, or uniform resource locators, that may be presented, output, rendered, or displayed on at least one computing device 128, such as a laptop computer, desktop computer, tablet computer, personal digital assistant, smart phone, portable computer, or speaker. For example, via the network 105, a user of the computing device 128 may access information or data provided by the 3P content provider device 140. The computing device 128 may or may not include a display; for example, a computing device may include a limited type of user interface, such as a microphone and speaker. In some cases, the primary user interface of the computing device 128 may be a microphone and a speaker. The computing device 128 may interface with or be included in a voice-based computing environment.
The network 105 may be used by the data processing system 102 to access information resources, such as applications, web pages, web sites, domain names, or uniform resource locators, that may be presented, output, rendered, or displayed by the client computing device 128. For example, via the network 105, a user of the client computing device 128 may access information or data provided by the 3P content provider device 140. The network 105 may include or constitute a sub-network of information resources available on the internet that are associated with a content placement or search engine results system or that are eligible to include third party digital components as part of a digital component placement campaign.
The network 105 may be any type or form of network and may include any of the following: point-to-point networks, broadcast networks, wide area networks, local area networks, telecommunications networks, data communication networks, computer networks, ATM (asynchronous transfer mode) networks, SONET (synchronous optical network) networks, SDH (synchronous digital hierarchy) networks, wireless networks and wired networks. The network 105 may include a wireless link, such as an infrared channel or satellite band. The topology of the network 105 may include a bus, star, or ring network topology. The network may include a mobile telephone network using any one or more protocols for communicating between mobile devices, including advanced mobile phone protocol ("AMPS"), time division multiple access ("TDMA"), code division multiple access ("CDMA"), global system for mobile communications ("GSM"), general packet radio service ("GPRS"), or universal mobile telecommunications system ("UMTS"). Different types of data may be communicated via different protocols, or the same type of data may be communicated via different protocols.
The system 100 may include a 3P application server 148, interface with, communicate with, or otherwise access the 3P application server 148. Data processing system 102 may communicate with 3P application server 148 via network 105. The 3P application server 148 may be remote and distinct from the data processing system 102, the remote data processing system 142, the 3P digital content provider device 140, and the computing device 128. The 3P application server 148 may be associated with a developer of the application 118. The 3P application server 148 may facilitate execution of the application 118. For example, 3P application server 148 may perform backend processing for application 118. An application 118 executing on computing device 128 may execute the front-end components of application 118, and 3P application server 148 may execute the back-end components of application 118. The application 118 executing on the computing device 128 may communicate remote procedure calls or other requests or data to the 3P application server 148. 3P application server 148 may communicate data, information, or requests to application 118 to perform functions or perform actions. 3P application server 148 can modify or change the state of application 118, which can result in the application declaring the functionality of the application or invocation of digital assistant component 106.
The servers in the machine farm may be stored in a high density rack system along with associated storage systems and located in an enterprise data center. For example, integrating servers in this manner may improve system manageability, data security, physical security of the system, and system performance by locating the servers and high performance storage systems on a localized high performance network. The centralization of all or some of the remote data processing system 142 components, including servers and storage systems, and coupling them with advanced system management tools allows for more efficient use of server resources, which saves power and processing requirements and reduces bandwidth usage.
The remote data processing system 142 can include a digital assistant server 144 and a content selector component 146. The digital assistant server 144 may be designed, constructed and operated to perform one or more functions of communicating with the digital assistant component 106 of the computing device 128. The content selector component 146 can be designed, constructed and operated to select digital component items (e.g., content items) provided by the 3P digital content provider device 140. The content selector component 146 can select content items in response to requests for content from the computing device 128. The content selector component 146 can communicate the selected content item to the computing device 128 for presentation (e.g., audio output, visual output, or audiovisual output).
The system 100 may include, access, or otherwise interact with at least one 3P content provider device 140. The 3P content provider device 140 may include at least one logic device, such as a computing device with a processor, to communicate with, for example, the computing device 128, the data processing system 102, or a remote data processing system 142 via the network 105. The 3P content provider device 140 may include at least one computing resource, server, processor, or memory. For example, the 3P content provider device 140 may include a plurality of computing resources or servers located in at least one data center. The 3P content provider device 140 may include or refer to a service provider device or a goods provider device.
The 3P digital content provider device 140 may provide the audio-based digital components for presentation by the computing device 128 as audio output digital components. The numeric component may include a response to a search query or request. The numeric component may include information from a database, search engine, or networked resource. For example, the digital components may include news information, weather information, sports information, encyclopedia entries, dictionary entries, or information from digital textbooks. The numeric component may include an offer for a good or service, such as a voice-based message, stating: "Wuld you like me to order you a taxi? (do you want me to book a car rental for your call. The 3P content provider device 140 may also provide audio-based digital components (or other digital components) to the data processing system 102, where they may be stored in the data repository 122. The data processing system 102 can select the audio digital component and provide (or instruct the content provider computing device 140 to provide) the audio digital component to the client computing device 128. The audio-based digital component may be exclusively audio, or may be combined with text, image, or video data. The digital components or content items may include images, text, video, multimedia, or other types of content in one or more formats.
The remote data processing system 142 may include a content placement system having at least one computing resource or server. The remote data processing system 142 can include at least one content selector component 146, interface with the at least one content selector component 146, or otherwise communicate with the at least one content selector component 146. The remote data processing system 142 can include, interface with, or otherwise communicate with at least one digital assistant server 144, at least one digital assistant server 144.
The content selector component 146 and the digital assistant server 144 may each include at least one processing unit or other logic device, such as a programmable logic array engine, or modules configured to communicate with each other or other resources or databases. The content selector component 146 and the digital assistant server 144 may be separate components, a single component, or part of the remote data processing system 142. System 100 and its components, such as remote data processing system 142, may include hardware elements, such as one or more processors, logic devices, or circuits.
The remote data processing system 142 may obtain anonymous computer network activity information associated with the plurality of computing devices 128. The user of the computing device 128 may affirmatively authorize the remote data processing system 142 to obtain network activity information corresponding to the user's computing device 128. For example, the remote data processing system 142 may prompt the user of the computing device 128 for consent to obtain one or more types of network activity information. The identity of the user of the computing device 128 may remain anonymous, and the computing device 128 may be associated with a unique identifier (e.g., a unique identifier of the user or computing device provided by the data processing system or the user of the computing device). The remote data processing system 142 may associate each observation with a corresponding unique identifier.
The 3P digital content provider device 140 may establish an electronic content campaign. The electronic content campaign may be stored as content data in a data repository of the content selector component 146. An electronic content campaign may refer to one or more groups of content that correspond to a common topic. The content campaign may include a hierarchical data structure including content groups, digital component data objects, and content selection criteria. To create a content campaign, the 3P digital content provider device 140 may specify values for activity level parameters of the content campaign. The activity level parameters may include, for example, the name of the activity, the preferred content network for placing the digital part object, the value of the resource to be used for the content activity, the start and end dates of the content activity, the duration of the content activity, the schedule for placement of the digital part object, the language, the geographic location, the type of computing device on which the digital part object is provided. In some cases, impression may refer to when a digital part object is obtained from its source (e.g., remote data processing system 142 or 3P digital content provider device 140) and is countable. In some cases, robot activity may be filtered and excluded as a flash due to the possibility of click fraud. Thus, in some cases, an impression may refer to a measurement of a response from a web server to a page request from a browser, filtered from robot activity and error codes, and recorded at a point as close as possible to an opportunity to render a digital part object for display on the computing device 128. In some cases, the flash may refer to a visual or audible flash; for example, the digital component objects are at least partially (e.g., 20%, 30%, 40%, 50%, 60%, 70%, or more) viewable on a display device of the client computing device 128 or audible via the speaker 136 of the computing device 128. Clicking or selecting may refer to user interaction with a digital part object, such as a voice response to an audible flash, a mouse click, a touch interaction, a gesture, a shake, an audio interaction, or a keyboard click. Translation may refer to a user taking a desired action with respect to a digital component object; for example, purchasing a product or service, completing a survey, visiting a physical store corresponding to a digital component, or completing an electronic transaction.
The 3P digital content provider device 140 may also establish one or more content groups for the content campaign. A content set includes one or more digital component objects and corresponding content selection criteria, such as keywords, words, terms, phrases, geographic locations, type of computing device, time of day, interests, topics, or verticals. Content groups under the same content campaign may share the same campaign level parameters, but may have customized specifications for particular content group level parameters, such as keywords, negative keywords (e.g., to prevent placement of numeric components if a negative keyword is present on the primary content), bids for keywords, or parameters associated with bids or content campaigns.
To create a new content group, the 3P digital content provider device 140 may provide a value for a content group level parameter for the content group. Content group level parameters include, for example, a content group name or a content group topic, and bids or results (e.g., clicks, impressions, or conversions) for different content placement opportunities (e.g., automatic placement or managed placement). The content group name or content group topic may be one or more terms that the 3P digital content provider device 140 may use to capture the topic or topic for which the digital component object of the content group is to be selected for display. For example, an auto dealer may create a different content set for each brand of vehicle that it sells, and may also create a different content set for each model of vehicle that it sells. Examples of content group topics that may be used by car dealers include, for example, "Make assets car (model a sports car)", "Make B sports car (model B sports car)", "Make C station (model C car)", "Make C truck (model C truck)", "Make C hybrid (model C hybrid) or" Make D hybrid (model D hybrid) ". An exemplary content activity theme may be "hybrid" and include content groups for both "Make C hybrid" and "Make D hybrid," for example.
The 3P digital content provider device 140 may provide one or more keywords and number component objects to each content group. The keywords may include terms associated with the digital component object or related to the product or service identified by the digital component object. Keywords may include one or more terms or phrases. For example, an automobile dealer may include "sports car", "V-6 engine", "four-wheel drive", "fuel efficiency" as a keyword for a content group or content activity. In some cases, negative keywords may be specified by the content provider to avoid, prevent, block, or disable content placement for certain terms or keywords. The content provider may specify a match type, such as an exact match, a phrase match, or a broad match, for selecting the digital component object.
The 3P digital content provider device 140 may provide one or more keywords to be used by the remote data processing system 142 to select the digital part object provided by the 3P digital content provider device 140. The 3P digital content provider device 140 may identify one or more keywords to bid on and further provide bid amounts for the various keywords. The 3P digital content provider device 140 may provide additional content selection criteria to be used by the remote data processing system 142 to select digital component objects. Multiple 3P digital content provider devices 140 may bid on the same or different keywords and the remote data processing system 142 may run a content selection process or an advertisement auction in response to receiving an indication of a keyword of an electronic message.
The 3P digital content provider device 140 may provide one or more digital component objects for selection by the remote data processing system 142. The remote data processing system 142 (e.g., via the content selector component 146) can select numeric component objects that match the resource allocation, content schedule, maximum bid, keywords, and other selection criteria specified for the content group when the content placement opportunity becomes available. Different types of digital component objects may be included in the content set, such as a voice digital component, an audio digital component, a text digital component, an image digital component, a video digital component, a multimedia digital component, or a digital component link. Upon selecting a digital part, data processing system 102 may transmit a digital part object for presentation via computing device 128, rendering on computing device 128 or a display device of computing device 128. Rendering may include displaying the digital components on a display device or playing the digital components via speakers of the computing device 128. The remote data processing system 142 may provide instructions to the computing device 128 to render the digital component object. The remote data processing system 142 may instruct the digital assistant component 106 of the computing device 128 or the audio driver 138 of the computing device 128 to generate an audio signal or sound wave. The remote data processing system 142 may instruct the application 118 executed by the computing device 128 to render the selected digital part object. For example, the application 118 may include slots (e.g., content slots) that may render digital component objects (e.g., audio slots or visual slots).
The data processing system 102 may include, execute, or otherwise communicate with the content selector component 146 to receive queries, keywords, or trigger keywords identified by the natural language processor and select a numeric component based on the trigger keywords. The content selector component 146 can select the digital components via a real-time content selection process. The content selection process may include, for example, performing a search via a search engine or accessing a database stored on a remote server or device, such as the 3P content provider device 140. The content selection process may refer to or include selecting a sponsored digital component object provided by a third-party content provider 140. The real-time content selection process may include a service in which digital components provided by multiple content providers are parsed, processed, weighted, or matched in order to select one or more digital components to provide to the computing device 128. The content selector component 146 can perform the content selection process in real time. Performing the content selection process in real-time may refer to performing the content selection process in response to a request for content received via the client computing device 128. The real-time content selection process may be performed (e.g., initiated or completed) within a time interval (e.g., 1 second, 2 seconds, 5 seconds, 10 seconds, 20 seconds, 30 seconds, 1 minute, 2 minutes, 3 minutes, 5 minutes, 10 minutes, or 20 minutes) in which the request is received. The real-time content selection process may be performed during a communication session with the client computing device 128 or within a time interval after the communication session is terminated. The data processing system 102 may select the audio ring tone to be provided after completing a digital component selection process or other digital task.
For example, the data processing system 102 may include a content selector component 146 designed, constructed, configured, or operated to select a digital component object. To select digital components for display in a speech-based environment, the data processing system 102 (e.g., via the NLP component 108) can parse the input audio signal to identify queries, keywords (e.g., trigger keywords), and use the keywords to select matching digital components. The data processing system 102 may select a matching numeric component based on a broad match, an exact match, or a phrase match. For example, the content selector component 146 can analyze, parse, or otherwise process the subject matter of the candidate digital components to determine whether the subject matter of the candidate digital components corresponds to the subject matter of a keyword or phrase of the input audio signal detected by a microphone of the client computing device 128. The content selector component 146 can use image processing techniques, character recognition techniques, natural language processing techniques, or database lookups to identify, analyze, or recognize speech, audio, terms, characters, text, symbols, or images of candidate numeric components. The candidate digital components may include metadata indicating the subject matter of the candidate digital components, in which case the content selector component 146 may process the metadata to determine whether the subject matter of the candidate digital components corresponds to the input audio signal.
The 3P digital content provider 140 may provide additional indicators when setting up a content campaign that includes digital components. The content provider may provide information at the content campaign or content group level that the content selector component 146 may identify by performing a lookup using information about candidate digital components. For example, the candidate number component may include a unique identifier, which may map to a content group, a content campaign, or a content provider. The content selector component 146 can determine information about the 3P digital content provider device 140 based on information in a content campaign data structure stored in the data repository 122.
The remote data processing system 142 may receive a request for content for presentation on the computing device 128 via a computer network. The data processing system 102 may identify the request by processing an input audio signal detected by a microphone of the client computing device 128. The request may include selection criteria for the request, such as the device type, location, and keywords associated with the request.
In response to the request, the remote data processing system 142 may select a digital part object from a data repository or database associated with the 3P digital content provider device 140 and provide the digital part via the network 105 for presentation via the computing device 128. Computing device 128 may interact with the digital component object. The computing device 128 may receive an audio response to the digital component. The computing device 128 may receive an indication of a selection of a hyperlink or other button associated with the digital part object that causes or allows the computing device 128 to identify the service provider, request a service from the service provider, instruct the service provider to perform the service, transmit information to the service provider, or otherwise query the service provider device.
The computing device 128 (or client computing device or client device) may include or execute the data processing system 102. The data processing system 102 may include at least one interface 104, interface with at least one interface 104, or otherwise communicate with at least one interface 104. The data processing system 102 can include at least one digital assistant component 106, interface with at least one digital assistant component 106, or otherwise communicate with at least one digital assistant component 106. The data processing system 102 may include, interface with, or otherwise communicate with at least one natural language processor ("NLP") component 108, at least one NLP component 108. The data processing system 102 may include at least one model 110, interface with at least one model 110, or otherwise communicate with at least one model 110. The data processing system 102 may include at least one technology 112, interface with the at least one technology 112, or otherwise communicate with the at least one technology 112. The data processing system 102 can include at least one application manager component 114, interface with the at least one application manager component 114, or otherwise communicate with the at least one application manager component 114. The data processing system 102 may include at least one direct action application programming interface ("API") 116 that interfaces with or otherwise communicates with the at least one direct action application programming interface ("API") 116. The data processing system 102 may include at least one application 118, interface with the at least one application 118, communicate with the at least one application 118, or execute the at least one application 118. The data processing system 102 may execute, at least in part, at least one application 118 (e.g., an application may include a client component and a server component). The data processing system 102 may include at least one data repository 122, interface with the at least one data repository 122, or otherwise communicate with the at least one data repository 122.
The data repository 122 may include one or more local or distributed databases and may include a database management system. The data repository 122 may include a computer data store or memory and may store applications 124, application data, profiles, indexes 126, preferences, and other data. An application 124 in the data repository 122 may refer to or include a data structure or data file that stores information associated with the application, such as statements, input fields, states, contextual information, user interfaces, input parameters, or preferences. The application 118 may refer to an activated, launched, invoked, or executed application 118, which may correspond to information about the application 118 stored in an application data structure 124 in a data repository 122. The application 124 may include executable files, application package files, configuration files, or other data that facilitates execution of the application.
The data repository 122 may include, store, manage, or maintain an index 126. The index 126 may include a mapping, association, or link that associates keywords or terms with applications. The index 126 may include a table with keywords or terms that map to candidate applications. The index 126 may include a list of applications installed on the computing device 128. The index 126 may include a list of applications authorized or accessible by the computing device 128 or its account. The index 126 may include credentials or authentication information for accessing the application. For example, the index may include a list of applications accessible to the computing device 128, as well as account information for obtaining access to the applications. The index 126 may link keywords or terms to applications or other information that facilitates recognition of an application to invoke, activate, or launch in response to an input audio signal or speech input.
The interface 104, digital assistant component 106, NLP component 108, application manager component 114, direct action API, or other components of the data processing system 102 may each include at least one processing unit or other logic device, such as a programmable logic array engine or modules configured to communicate with each other or other resources or databases. The interface 104, digital assistant component 106, NLP component 108, application manager component 114, direct action API, or other component of the data processing system 102 can be a separate component, a single component, or a portion of the data processing system 142. System 100 and its components, such as data processing system 102, may include hardware elements, such as one or more processors, logic devices, or circuits.
The computing device 128 may include, interface with, or otherwise communicate with at least one sensor 136, transducer 132, audio driver 138, pre-processor 130, or display device 134. The sensors 136 may include, for example, ambient light sensors, proximity sensors, temperature sensors, accelerometers, gyroscopes, motion detectors, GPS sensors, location sensors, microphones, or touch sensors. The transducer 132 may include a speaker or a microphone. The audio driver 138 may provide a software interface to the hardware transducer 132. The audio driver may execute audio files or other instructions provided by the data processing system 102 to control the transducer 132 to generate corresponding sound or sound waves. Display device 134 may include one or more components or functionality of display 435 depicted in fig. 4. The preprocessor 130 may be configured to detect a trigger keyword, a predetermined hotword, an initiating keyword, or an activating keyword. In some cases, the trigger key may include a request to perform an action. In some cases, the trigger keyword may include a predetermined action keyword to enable or activate the computing device 128, and the request keyword may follow the trigger keyword or hotword. The preprocessor 130 may be configured to detect keywords and perform actions based on the keywords. The preprocessor 130 can detect a wake word or other keyword or hotword and, in response to the detection, invoke the digital assistant component 106 of the data processing system 102 executed by the computing device 128. In some cases, the preprocessor 130 may filter out one or more terms or modify terms before sending the terms to the remote data processing system 142 for further processing. The pre-processor 130 may convert the analog audio signal detected by the microphone into a digital audio signal and transmit or provide one or more data packets carrying the digital audio signal to the data processing system 102 or the remote data processing system 142 via the network 105. In some cases, the pre-processor 130 may provide data packets carrying some or all of the input audio signals to the digital assistant component 106 or the remote data processing system 142 in response to detecting instructions to perform such a transfer. The instructions may include, for example, a trigger key or other key or approval to transmit the data packet including the input audio signal to the data processing system 102 or the remote data processing system 142.
The client computing device 128 may be associated with an end user that enters the voice query as audio input into the client computing device 128 (via the sensor 136) and receives audio output in the form of computer-generated speech that may be provided from the data processing system 102 (or the 3P content provider device 140) to the client computing device 128 for output from the transducer 132 (e.g., a speaker). The computer generated speech may include recordings from a real person or a computer generated language.
Data processing system 102 may include an interface 104 designed, configured, constructed, or operated to receive and transmit information using, for example, data packets. The interface 104 may receive and transmit information using one or more protocols, such as a network protocol. The interface 104 may include a hardware interface, a software interface, a wired interface, or a wireless interface. The interface 104 may facilitate converting or formatting data from one format to another. For example, the interface 104 may include an application programming interface that includes definitions for communicating between various components, such as software components. The interface 104 may facilitate communication between one or more components of the system 100, such as between the digital assistant component 106, the application 118, and the data repository 122.
The data processing system 102 may include an application, script, or program installed at the client computing device 128, such as an application for communicating input audio signals to the interface 104 of the data processing system 102 and driving components of the client computing device to render output audio signals. The data processing system 102 may receive data packets or other signals that include or identify audio input signals. For example, the data processing system 102 may execute or run the NLP component 108 to receive or obtain an audio signal and parse the audio signal. For example, the NLP component 108 can provide interaction between a person and a computer. The NLP component 108 may be configured with techniques for understanding natural language and allowing the data processing system 102 to derive meaning from human or natural language input. The NLP component 108 can include or be configured with machine learning based (such as statistical machine learning) techniques. The NLP component 108 can parse the input audio signal using a decision tree, statistical model, or probabilistic model. The NLP component 108 can perform functions such as, for example, named entity recognition (e.g., given a stream of text, determining which items in the text map to appropriate names, such as people or places, and the type of each such name, such as people, locations, or organizations), natural language generation (e.g., converting information from a computer database or semantic intent into intelligible human language), natural language understanding (e.g., converting text into a more formal representation, such as a first-order logical structure that a computer module can manipulate), machine translation (e.g., automatically translating text from one human language to another), morphological segmentation (e.g., separating words into individual morphemes and identifying categories of morphemes, which can be challenging based on the complexity of the morphology or structure of the words of the language under consideration), question answering (e.g., determining answers to human language questions, which may be specific or open-ended), semantic processing (e.g., processing that may occur after a word is identified and its meaning is encoded in order to associate the identified word with other words having similar meanings).
The NLP component 108 converts the audio input signal into recognized text by comparing the input signal to a stored set of representative audio waveforms (e.g., model 110 or technique 112) and selecting the closest match. The set of audio waveforms may be stored in the model 110 or other database accessible to the data processing system 102. Representative waveforms are generated over a large set of users and can then be enhanced with speech samples from the users. After the audio signal is converted into recognized text, the NLP component 108 matches the text to words associated with actions that the data processing system 102 can service, for example, via using a model 110 that has been trained across users or by manual specification.
The audio input signal may be detected by a sensor 136 or transducer 132 (e.g., a microphone) of the client computing device 128. Via the transducer 132, the audio driver 138, or other components, the client computing device 128 may provide an audio input signal to the data processing system 102, where it may be received and provided (e.g., through the interface 104) to the NLP component 108 or stored in the data repository 122.
The NLP component 108 may obtain an input audio signal. From the input audio signal, the NLP component 108 can identify at least one request or at least one trigger keyword corresponding to the request. The request may indicate an intent or subject of the input audio signal. The trigger key may indicate the type of action that is likely to be taken. For example, the NLP component 108 can parse the input audio signal to identify at least one request to invoke an application. The NLP component 108 can parse the input audio signal to identify at least one request, such as a request to leave home for dinner and movies in the evening. The keywords may include at least one word, phrase, root word or partial word or derivative that indicates an action to be taken. For example, the keyword "go" or "to go to" from the input audio signal may indicate a demand for traffic. In this example, the input audio signal (or the identified request) does not directly express the intent of the traffic, however the keyword indicates that the traffic is an ancillary action to the at least one other action indicated by the request.
The NLP component 108 may parse the input audio signal to identify, determine, retrieve, or otherwise obtain the request and the keyword. For example, NLP component 108 can apply semantic processing techniques (e.g., technique 112) to the input audio signal to identify keywords or requests. NLP component 108 can apply semantic processing techniques 112 to the input audio signal to identify a trigger phrase that includes one or more trigger keywords, such as a first trigger keyword and a second trigger keyword. For example, the input audio signal may include the phrases "I need to wash and dry clean me" I need to have people wash me. The "NLP component 108 may apply semantic processing techniques 112 or other natural language processing techniques to the data packet comprising the sentence to identify the trigger phrases" do my laundry "and" my dry clean ". The NLP component 108 can also identify multiple trigger keywords such as clothing and dry cleaning. For example, NLP component 108 can determine that the trigger phrase includes a trigger keyword and a second trigger keyword.
The NLP component 108 can identify a search query or trigger phrase corresponding to performing a search or other request for information. The NLP component 108 can determine that the input audio signal corresponds to a request for information about a topic, an event, a current event, a news event, a dictionary definition, a historical event, a person, a place, or a thing. For example, the NLP component 108 may determine that the input audio signal corresponds to a search query for information about historical events, such as "When did the American recommendation take place? (when the us revolution occurred. The NLP component 108 may determine that the input audio signal corresponds to a request to invoke, launch, or activate the application 118.
The NLP component 108 may filter the input audio signal to identify keywords, search queries, or trigger keywords. For example, a data packet carrying an input audio signal may include "It would be if I < I > complex get a voice complex help me to the airport" (which is too good if I can find a person who can help I go to the airport) ", in which case the NLP component 108 may filter out one or more of the following terms: "it", "woold", "be", "great", "if", "I", "result", "get", "someone", "that", "result", or "help". By filtering out these terms, the NLP component 108 can more accurately and reliably identify a trigger keyword, such as "go to the airport," and determine that this is a request for a taxi or ride share service.
Based on processing or parsing the input audio signal, the NLP component 108 may identify an application 118 to invoke, launch, open, or otherwise activate. The NLP component 108 can identify the application 118 based on parsing the input audio signal to identify terms, keywords, trigger keywords, or phrases. The NLP component 108 can perform a lookup in the index 126 using the identified term, keyword, trigger keyword, or phrase to identify the application 118. In some cases, the key may include an identifier of the Application 118, such as "Application _ Name _ a" or "Application _ Name _ B". In some cases, the keywords may indicate a type or category of application 118, such as a ride share application, a restaurant reservation application, a movie ticket application, a news application, a weather application, a navigation application, a streaming music application, a streaming video application, a restaurant review application, or other type or category of application 118.
If the input audio signal includes an identifier corresponding to an application, such as an alphanumeric identifier, the NLP component 108 can perform a lookup in the index 126 with the alphanumeric identifier to identify the application 118, and provide an indication to the application manager component 114 to activate. The indication may include a unique identifier, reference, pointer, link, or deep link of the application 118. If the input audio signal includes an indication of the type or category of the application 118, the NLP component 108 can perform a lookup in the index 126 with the type or category of the application 118 to identify whether there is a corresponding application 118 installed on the computing device 128. For example, if the category or type of application is a Restaurant reservation application, the index 126 may include a reference or identifier of the application associated with the category, such as "Restaurant _ Booking _ App. If the input audio signal includes a query or request, the NLP component 108 may determine the type of query or request and then identify the applications 118 in the index 126 that are configured to or capable of satisfying the query or request. In some cases, the NLP component 108 may communicate with the remote data processing system 142 to identify and select applications in response to the input audio signals.
The digital assistant component 106 can generate an alert or prompt even if the digital assistant component 106 cannot identify the applications 118 installed on the computing device 128 that can satisfy the input query or request using the index 126. The alert or prompt can indicate that the application is not installed and that the digital assistant component 106 is unable to satisfy the request or query. In some cases, the prompt may include an indication of the application 118 that the application 118 is configured to satisfy the query or request, but is not installed on the computing device 128, or is otherwise inaccessible by the computing device 128. The prompt may include a reference to a resource that may provide the application 118 for installation on the computing device 128.
The NLP component 108 may process the input audio signal using one or more models 110 and techniques 110. The model 110 may refer to or include a machine learning model 110 trained based on data. The model 110 may include various weights or configurations to facilitate performing natural language processing or understanding. The model 110 may include, for example, certain weights, calibrations, or configurations to facilitate performing natural language understanding. The model 110 may be calibrated to be more likely to detect certain types of terms. For example, if the NLP component 108 detects that the input request is to activate an application, the NLP component 108 can use the model 110 with a list (e.g., index 126) of all applications installed on the computing device 128. The NLP component 108 can determine which application from the list of applications corresponds to the input request. By using a model 110 with a limited set of applications installed on the computing device 128, the NLP component 108 can increase the likelihood of accurately detecting the requested application 118 as compared to the set of all applications that may be provided by the online application marketplace. Moreover, by using a model 110 with a limited set of applications 118 installed on a computing device, the NLP component 108 can reduce computing resource utilization (e.g., using a smaller model 110 can take less memory and use less processing) while improving accuracy and reliability of identifying applications as compared to a set of all applications.
The computing device 128 (or digital assistant component 106) can include an application manager component 114 designed, constructed, and operated to activate the application 118. The application manager component 114 can receive an indication of the application 118 identified by the NLP component 108. The application manager component 114 can receive an alphanumeric identifier or other reference or indication of the application 118. The application manager component 114 can perform a lookup in the index 126 to verify that the application 118 is available or compatible for activation on the computing device 128. The application manager component 114 can activate the application 118. Activating the application 118 may refer to or include bringing the application 118 to the foreground of the computing device 128. Activating an application 118 may refer to executing an application. Activating the application 118 may refer to bringing the application from a background process to a foreground process. The application manager component 114 can generate commands, scripts, processes, or other instructions to invoke, launch, or otherwise activate the application 118.
The application manager component 114 can perform a lookup in the index 126 of the client computing device 128 to determine that the application 118 is installed on the client computing device 128. The application manager component 114 can activate the application 118 in response to determining that the application 118 is installed on the client computing device 128.
Launching the application 118 can cause the application to declare information to the digital assistant component 106. The application 118 may declare the function that the application 118 is configured to perform. Declaring a function that the application 118 is configured to perform may include providing an indication of a parameter type or a parameter type that the application 118 may receive as input in order to perform a function or task. The application 118 may declare a state, such as a current state, of the application 118. The application 118 may declare the current context of the application 118. The application 118 may declare the type of function that the application 118 may perform, the type of input used to perform the function, or other information or data that facilitates the application 118 in performing a task or performing an action.
For example, application 118 may include an application that makes reservations at a restaurant. The first input audio signal may include a query or request to Make a reservation, such as "Make a reservation using reservation _ Booking _ App _1 (reservation using Restaurant _ Booking _ App _ 1)". The NLP component 108, using NLP techniques 112 and models 110 (e.g., models 110 configured with applications installed on the computing device 128), can identify the application 118, and the application manager component 114 can activate the application 118 (e.g., Restaurant _ boosting _ App _1 (Restaurant _ reservation _ App _ 1)).
The application 118 may declare the information using an API, such as a direct action API or a software development kit ("SDK"). The application 118 can be configured with an API or SDK to interface with the digital assistant component 106 via the interface 104. The application can use the interface 104 to communicate with one or more components of the digital assistant component 106, and the digital assistant component 106 can use the interface 104 to communicate with the application 118.
Exemplary declarations may include a function, an action, a format of an input value, a type of input value, a category or type of text, a name, semantic information, a numerical value, or other information that facilitates detecting an input parameter in a speech input. The application 118 may declare that the application 118 is expecting to receive a query, request, instruction, or command. The application 118 may state that the application 118 is expecting to receive a value or word, phrase, proper noun, geographic location, zip code, state, city, or town. The declaration 120 may include points of interest. The claim 120 may include currency. Thus, the application 118 may be configured to provide a statement 120 regarding what function the application 118 is capable of performing, or the current context or state of the application 118, which may indicate what input parameters the application 118 is currently capable of receiving and processing to perform the function or action. Exemplary functions may include making a reservation at a restaurant, making a reservation at a hotel, reserving a flight, renting a car, purchasing goods or services, reserving takeaway food, reserving a ride share, or reserving a taxi.
For example, application 118 may be designed, constructed, and operated to make reservations at a restaurant. The application 118 may enter a state when launched, invoked, or otherwise activated. The application 118 may enter a default or master state. In this default, main, or initial state, the application 118 may include an input text box. The input text box may be an input search box configured to receive a query. The query may include a query for restaurant type, location, or restaurant name. Thus, the current state of the application 118 may indicate that the application 118 is capable of receiving an input query in a search field of a user interface of the application 118.
The NLP component 108 can modify the natural language processing techniques 112 or the model 110 in response to functionality declared by the application. NLP component 108 can perform dynamic real-time modifications or updates to NLP processing techniques 112 or models 110. NLP component 108 can perform a declaration-based real-time update of NLP techniques 112 or models 110. NLP component 108 can use the declarations to perform real-time natural language understanding based on the state or context of the third-party application. Real-time may refer to updating NLP processing in response to activation of an application. Real-time may refer to updating the NLP processing after activating the application and before receiving the second audio input signal. Real-time may refer to, for example, updating the NLP processing technique within 1 second of activating application 118, 2 seconds of activating application 118, 3 seconds of activating application 118, 5 seconds of activating application 118, 10 seconds of activating application 118, 15 seconds of activating application 118, or 30 seconds of activating application 118.
In some cases, the model 110 may be updated based on functionality, and the NLP techniques 112 may use the updated model 110. NLP component 108 can provide updated model 110 to NLP technique 112. The NLP component 112 can select the type of model 110 or technique 112 based on the declaration. The NLP component 112 may select a model 110 or technique that is adjusted or calibrated to detect input parameters for the function declared by the application 118 in the subsequent input audio signal. For example, if the declaration indicates that the function performed by the application 118 uses input that includes a geographic region, the NLP component 112 may select a model 110 or technique 112 that is calibrated, optimized, or adjusted to detect the geographic region (such as a state, city, town, square, or other geographic region). For example, the NLP component 108 can select a dictionary for the declared function. In another example, model 110 can be adjusted to weight terms corresponding to claims more heavily than numerical values. In another example, the technique 112 may be optimized to detect geographic regions rather than numerical or semantic processing. Thus, the digital assistant component 106 can modify the natural language processing techniques 112 after activating the application 118 and based on the functionality declared by the application 118 to increase the likelihood of detecting one or more parameters relative to natural language processing techniques 112 that are not modified based on the functionality (e.g., using updated techniques 112 or techniques 112 using updated models 110 can provide an improvement in the accuracy and reliability or likelihood of detecting input parameters of the functionality relative to using default techniques 112 or default models 110 to detect input parameters).
In another example, if the declared functionality includes making a reservation at a restaurant, the NLP component 108 can select a model 110 or technique that is optimized to detect nouns (such as the name of the restaurant). Accordingly, based on the functionality claimed by the application, NLP component 108 can select a model 110 or technique 112 that is calibrated, tuned, optimized, or otherwise constructed to more reliably detect input parameters, such as proper nouns, numbers, words, phrases, questions, values, monetary amounts, or geographic locations, for performing or performing the functionality.
The digital assistant component 106 (e.g., via the NLP component 108) can receive a second input audio signal detected by a microphone (e.g., sensor 136) of the computing device 128. The digital assistant component 106 can process the second input audio signal via the modified natural language processing techniques 112 or the model 110 to detect one or more parameters corresponding to the functionality declared by the application 118. The NLP component 108 may perform real-time natural language processing of the second input audio signal using state information declared by the application 118 (e.g., declarations indicating functions that the application 118 may perform in the current state) to identify one or more parameters. Performing real-time natural language processing may refer to processing the second input audio signal using current context information declared by the application 118 to modify or update the NLP technique 112 or the model 110 to process the input signal to detect the input parameters.
The digital assistant component 106 can determine that the one or more parameters are compatible for entry into the input field of the application 118 based on a comparison between the one or more parameters and the functionality declared by the application. The digital assistant component 106 can determine that the detected input parameters are compatible with the declared functionality. The digital assistant component 106 can determine compatibility using policies, matching techniques, or other techniques. The digital assistant component 106 can compare the type of input parameter to the type of input parameter that the function is configured to receive. Types may include, for example, numerical values, geographic locations, proper nouns, questions, words, or phrases. The type may include or be based on semantics, such as meaning of the input parameter. The type may include or be based on a grammar, such as a format or grammar of the input parameters. For example, the input parameter may be a geographic location. The digital assistant component 106 can determine that the input parameter is a geographic location, such as an address, and then compare the type "address" to the type of input value configured for the declared function to determine a match or compatibility.
In another example, the digital assistant component 106 can determine the compatibility based on the number of input parameters, the range of possible input values, or the consistency between multiple input parameters.
In some cases, the digital assistant component 106 can use the template to determine compatibility. The digital assistant component 106 can identify a template associated with the declared functionality. The template may indicate the type of input parameter, the number of input parameters, the semantics and syntax associated with the input parameter, or any other information associated with the expected input parameter. The digital assistant component 106 can determine whether the detected input parameters are compatible using the template. For example, if the template indicates that the expected input parameter is a geographic location or address, but the detected input parameter is a product type, the digital assistant component 106 can determine an incompatibility between the input parameter and the declared function. In response to determining incompatibility, the digital assistant component 106 may determine not to create an action data structure having incompatible detected input parameters. The digital assistant component 106 can determine that incompatible parameters are not to be entered into the application 118 because it can cause a malfunction or error or undesirable outcome of the application 118. Thus, by detecting incompatibilities and not entering incorrect input parameters, the digital assistant component 106 can reduce or prevent incorrect and wasteful utilization of computing resources. In some cases, in response to detecting an error, the digital assistant component 106 can generate a prompt or alert requesting compatible input parameters.
The digital assistant component 106 can include a direct action API116 designed and constructed to generate an action data structure for the application 118 in response to a determination of compatibility and based on one or more parameters. The direct action API116 may enter an action data structure into the application 118 via the protocol 150 to cause the application 118 to execute the action data structure and update a user interface element of the application 118. The processor of the computing device 128 may invoke the direct action API116 to execute a script that generates a data structure to the application 118 to request or subscribe to a service or product, such as a car from a car sharing service or making a reservation at a restaurant. The direct action API116 may obtain data from the NLP component 108 and the data repository 122, as well as data received from the client computing device 128 with the end user's consent, to determine location, time, user accounts, logistics, or other information to allow the application 118 to perform actions or operations in communication with the 3P application server 148, such as making reservations at restaurants or reserving cars from a car sharing service. Using the direct action API116, the digital assistant component 106 can also communicate with the 3P application server 148 to complete the translation by making a reservation or making a car share access reservation in this example.
The direct action API116 may perform specified actions to provide input to the application 118, causing the application to perform actions to perform the functions declared by the application 118. Depending on the action specified in its input, the direct action API116 may execute code or dialog scripts that identify the parameters needed to implement the function or user request. Such code may look up additional information, such as the name of the home automation service, for example, in the data repository 122, or it may provide an audio output to render at the client computing device 128 to ask the end user a question, such as the intended destination of the requested taxi. The direct action API116 may determine the necessary parameters and may package the information into an action data structure, which may then be sent to the application 118 for execution.
Direct action API116 may receive instructions or commands from NLP component 108 or other components of digital assistant component 106 to generate or construct an action data structure. The direct action API116 may determine the type of action in order to select a template stored in the data repository 122. The type of action may include, for example, a service, a product, a reservation, or a ticket. The type of action may further include a type of service or product. For example, the service types may include car sharing services, food delivery services, laundry services, maid services, repair services, or home services. The type of product may include, for example, clothing, shoes, toys, electronics, computers, books, or jewelry. The type of reservation may include, for example, a dinner reservation or a hair salon reservation. Types of tickets may include, for example, movie tickets, stadium tickets, or airline tickets. In some cases, the types of services, products, reservations, or tickets may be categorized based on price, location, type of transportation, availability, or other attributes.
Upon identifying the type of request, the direct action API116 may access the corresponding template from a template repository stored in a data repository (e.g., stored in an application 124 data structure or database). The template may include fields in the structured data set that may be populated by the direct action API116 to take even further requested operations of the 3P application server 148 (such as an operation of sending a taxi to pick up an end user at an pick-up location and transport the end user to a destination location). The direct action API116 may perform a lookup in a template repository (e.g., stored in an application 124 data structure or database) to select a template that matches one or more features of the declared function. For example, if the declared function corresponds to a requesting car or ride to a destination, the data processing system 102 may select a car sharing service template. The car sharing service template may include one or more of the following fields: device identifier, pickup location, destination location, number of passengers, or type of service. The direct action API116 may populate the fields with values. To populate a field with a value, the direct action API116 may ping, poll, or otherwise obtain information from one or more sensors 136 of the computing device 128 or a user interface of the computing device 128. For example, the direct action API116 may use a location sensor, such as a GPS sensor, to detect the source location. The direct action API116 may obtain further information by submitting a survey, prompt, or query to a user terminal of the computing device 128. The direct action API may submit a survey, prompt, or query via the interface 104 of the data processing system 102 and a user interface (e.g., an audio interface, a voice-based user interface, a display, or a touch screen) of the computing device 128. Accordingly, the direct action API116 may select a template for the action data structure based on the trigger keyword or request, populate one or more fields in the template with information detected by the one or more sensors 136 or obtained via the user interface, and generate, create, or otherwise construct the action data structure to facilitate the 3P application server 148 to perform the operation.
The data processing system 102 may select a template from a template data structure stored in the data repository 122 (e.g., stored in the application 124 data structure or database) based on various factors including, for example, one or more of a statement from the application, a keyword, a request, the 3P application server 148, an application type, a category to which the application 118 belongs (e.g., taxi service, laundry service, flower service, reservation, or food delivery), a location, or other information.
To select a template based on the claim, the data processing system 102 (e.g., via the direct action API 116) may perform a lookup or other query operation on a template database (e.g., stored in an application 124 data structure or database) in the data repository using the claim or input parameters from the application 118 to identify a template data structure that maps or otherwise corresponds to the claim or input parameters. For example, each template in the template database may be associated with one or more claims to indicate that the template is configured to generate an action data structure in response to a claim that the application 118 may process to perform an action. In some cases, data processing system 102 may identify the type of application 118 based on information in index 126 or application 124.
To construct or generate the motion data structure, the data processing system 102 can identify one or more fields in the selected template to populate with values detected in the input audio signal by the NLP component 108 using updated or modified NLP techniques 112 or models 110. A field may be populated with a numeric value, a string, a Unicode value, boolean logic, a binary value, a hexadecimal value, an identifier, location coordinates, a geographic region, a timestamp, or other values. The fields or data structures themselves may be encrypted or masked to maintain data security.
In determining the fields in the template, the data processing system 102 can identify the values of the fields to populate the fields of the template to create an action data structure. The data processing system 102 may obtain, retrieve, determine, or otherwise identify the value of the field by parsing or processing the input audio signal using the updated or modified NLP technique 112 or model 110. In some cases, the data processing system 102 may determine values from other sources (such as the data repository 122 or the sensors 136). For example, the data processing system 102 may obtain or obtain the information by querying or polling one or more available sensors of the client computing device 128, prompting an end user of the client computing device 128 for the information, or accessing an online web-based resource using the HTTP protocol. For example, the data processing system 102 may determine that it does not have a current location of the client computing device 128, which may be a desired field of the template. The data processing system 102 may query the client computing device 128 for location information. The data processing system 102 can request that the client computing device 128 provide location information using one or more location sensors 136, such as global positioning system sensors, WiFi triangulation, cell tower triangulation, bluetooth beacons, IP addresses, or other location sensing technologies.
The direct action API116 may use the protocol 150 to enter an action data structure into the application 118. The direct action API116 may enter the action data structure via a user interface of the application 118 or other interface of the application 118. The direct action API may input an action data structure via the interface 104. The direct action API may enter an action data structure via a headless interface of the application 118. The application 118, upon receiving the action data structure, may execute the action data structure to perform an action or function.
The digital assistant component 106 can receive additional claims from the application 118. After the action data structure is entered into the application 118, the current state of the application 118 may change based on processing or executing the action data structure. The application 118 may provide updated or new declarations in response to executing the action data structure and changing the state of the application. The new or updated declaration may indicate a current state of the application after receiving the action data structure, executing the action data structure, or partially executing the action data structure. The update declaration may indicate a change to the user interface, such as an additional input field in the user interface. The NLP component 108 can modify (e.g., re-modify or re-modify) the natural language processing techniques 112 or models 110 that were previously modified in response to the functionality declared by the application in response to the indication of the change in state. The type of modification may be similar to the first modification, but is appropriate for the new declaration (e.g., declaring a new function or input for performing the new function, or requesting additional input to facilitate performance of the original function or action). The digital assistant component 106 can receive a third input audio signal after re-modifying the NLP technique 112 or the model 110. The NLP component 108 may process the third input audio signal via a natural language processing technique 112 modified in response to the indication of the state change (e.g., the modified technique 112 or the same technique 112 using a modified or different model 110) to identify the second one or more parameters. The data processing system 102 may generate a second action data structure based on the second one or more parameters.
In some cases, the application 118 may invoke the digital assistant component 106. For example, the application 118 may provide an indication of a change to the state of the application 118. Application 118 may provide the indication via protocol 150. The application 118 may provide a declaration indicating a change in the state of the application 118, or a request for input or a request for an action data structure. The declaration may indicate that the application 118 is in a ready state or available to execute the action data structure. The indication or statement may invoke the digital assistant component 106. For example, the indication may wake the digital assistant component 106 to cause the digital assistant component to detect or process the input audio signal. The call to the digital assistant component 106 can refer to or include bypassing a hotword or a wake word detected by the preprocessor 130. The invocation may cause the digital assistant component 106 to generate a prompt or output, such as an audio output requesting input from a user of the computing device 128.
The call may cause the digital assistant component 106 to parse the current user interface of the application 118 to determine the context of the application or contextual information of the application or the current state of the application. In addition to determining the state or context of the application based on the declaration from the application 118, the digital assistant component 106 (e.g., via the application manager component 114) can also parse a user interface (e.g., a graphical user interface) of the application 118 to determine the state of the application. Determining the state of the application 118 may refer to or include determining a type of input that the application 118 is capable of receiving, a change in available input, or a type of action or function that the application 118 is capable of performing. The application manager component 114 can parse the current user interface of the application 118 in response to the indication of the change to identify one or more input fields provided via the user interface element of the application 118. The digital assistant component 106 can receive an input audio signal (e.g., a third input audio signal) after being invoked by the application 118 through an assertion sent via the protocol 150. The digital assistant component 106 can process the third input audio signal using natural language processing techniques based on the declared one or more input fields to identify a second one or more parameters of the third input audio signal for input into the application 118 in response to a change in a state of the application 118.
The digital assistant component 106 can receive an indication to deactivate the application. Deactivation may refer to application 118 exiting, being shut down, being disabled, being shut down, being removed or uninstalled, entering a standby state, being a background process (e.g., no longer actively used in the foreground), or a different application entering the foreground or being a foreground process. The deactivation of the application 118 may indicate that the application 118 is not the currently-in-use primary application or is no longer the primary application that is in use or executing on the computing device 128.
The digital assistant component 106 can return the modified natural language processing technique to a default natural language processing technique. The digital assistant component can return the modified NLP technique 112 or model 110 to the default or initial technique 112 or model 110 in response to deactivation of the application 118. The digital assistant component 106 can remove modifications to the technology 112 or the model 110 from the natural language processing technology 112 (or the model 110) that are made based on the functionality declared to the digital assistant component 106 by the application 118. The digital assistant component 106 can restore the NLP to a previous state or a default state. The digital assistant component 106 can delete the modifications or adjustments made. The digital assistant component 106 can deactivate the modified technologies 112 or models 110, but store them in the data repository 122 for future use. The digital assistant component 106 can reset the technique 112 or the model 110 to an initial state or a default state to facilitate NLP of subsequent input audio signals that no longer provide input to the application 118 because the application 118 has been disabled. By resetting the NLP, the digital assistant component 106 can prevent or reduce false or inaccurate NLPs by not using techniques 112 or models 110 that adjust or calibrate for the particular functionality declared by the application 118. The NLP can revert to using techniques 112 or models 110 that are tailored to detect queries or inputs in general, rather than techniques 112 or models 110 tailored to detect specific queries or inputs for the functionality of the application 118.
The digital assistant component 106 can transmit a request for content to the remote data processing system 142. The digital assistant component 106 can transmit a request for content based on or in response to the action data structure, the functionality declared by the application 118, the declaration 120, the modified NLP technique, one or more parameters detected in the second input audio signal using the modified NLP technique, or the updated user interface element of the application. For example, the request may include information about a function declared by the application 118, the declaration 120, the modified NLP technique, one or more parameters detected in the second input audio signal using the modified NLP technique, or an updated user interface element of the application. The request may include or provide the function type or function name to the remote data processing system 142. The request may include the claim 120 or provide the claim 120 to the remote data processing system 142. The request may include or provide an indication to the remote data processing system 142 of how to modify the NLP, such as the weights applied to the NLP technique or the type of NLP technique being used. The request may include or provide information to the remote data processing system 142 regarding the parameter or value detected in the second input audio signal using the modified NLP processing technique. The request may include or provide information to the remote data processing system 142 regarding the user interface element of the application, such as a content item slot (e.g., a size or position of the content item slot at which the content item is to be presented via a visual display, or a duration of the slot, such as a duration of an audio or video content item). Thus, generating a request based on information may refer to or include generating a request with the information. In some cases, generating the request based on the updated user interface element of the application may include generating the request in response to identifying an available content slot in the user interface element of the application.
In some cases, the application 118 may generate a request for content and transmit the request for content directly to the remote data processing system 142. The application 118 may generate a request for content in response to input of the action data structure. The application 118 can generate a request for content and communicate the request to the digital assistant component 106 to communicate, forward, or otherwise communicate the request to the remote data processing system 142.
The content selector component 146 of the remote data processing system 142 can select a content item (e.g., a digital component object) based on or in response to a request. The content selector component 146 can select content items based on or in response to action data structures, functions declared by the application 118, declarations 120, modified NLP techniques, or updated user interface elements of the application. The content selector component 146 can input information associated with the action data structure, the functionality declared by the application 118, the declaration 120, the modified NLP technique, parameters or values detected in the input audio signal using the modified NLP technique, or the updated user interface element of the application into the real-time content selection process. The content selector component 146 can select content items related to or otherwise matching information with the action data structure, the application, the function declared by the application 118, the declaration 120, the modified NLP technique, parameters or values detected in the input audio signal using the modified NLP technique, or user interface elements of the updated application. For example, if the application is an e-commerce application that sells shoes, the content selector component 146 can select content items for one type of athletic shoe. In another example, if the second input audio signal detected using the modified input audio signal includes a parameter or value of a type of restaurant or a type of table in a restaurant, the remote data processing system 142 may select a content item related to the restaurant (e.g., a coupon for the restaurant).
The remote data processing system 142 can provide the selected content item to the digital assistant component 106 for presentation. The remote data processing system 142 may provide the selected content item to the application 118 for presentation. The remote data processing system 142 can provide the selected content item to the digital assistant component 106 for presentation to the application 118. The content items may be presented via a user interface of the application 118, such as in a visual content slot or audio output.
The digital assistant component 106 can present the content item separately or independently from the application 118. For example, the digital assistant component 106 can invoke a separate user interface, such as a pop-up window or banner content, for display via the display device 134 of the computing device 128. In some cases, the digital assistant component 106 can provide the content item as an audio output. The audio output may be presented before, during, or after the audio output of the application 118. In the event that the application 118 does not provide audio output, the digital assistant component 106 can provide the content item via audio output that is independent of the interface used by the application. Thus, the data processing system 102 can present the content item via a user interface (e.g., an audio interface) of the digital assistant component 106 or a user interface (e.g., a graphical user interface) of the application 118.
FIG. 2 is an illustration of operations 200 of system 100 to dynamically interface with an application. The system may include one or more components of the system 100 depicted in fig. 1 or the system 400 depicted in fig. 4. In operation 200, at act 202, the pre-processor 130 (e.g., executed by the computing device 128) may receive or detect a first speech query. The first voice query may include an input audio signal. The preprocessor 130 can detect a trigger keyword, hotword, wakeup word, alarm, or other indication to invoke the digital assistant component 106. In response to detecting the wake word, the preprocessor 130 can invoke the digital assistant component 106 at act 204.
At act 206, the NLP component 108 of the digital assistant component 106 can parse the first voice query to identify the application. NLP component 108 can identify the application using one or more NLP techniques or models. NLP component 108 can provide an indication of the application to application manager component 114 at act 208. The application manager component 114 can determine that the application 118 is installed on the computing device 128 or otherwise accessible by the computing device 128. Application manager 114 may launch or activate application 118 at act 210.
At act 212, application 118 may identify a state of application 118. For example, the application 118 may identify a current user interface, a graphical user interface, or a function that the application 118 may perform, or an input field of a user interface. Application 118 may provide a declaration of the state of application 118 to digital assistant component 106 via protocol 150 at act 214.
At act 216, NLP component 108 can perform a declaration-based real-time update of the NLP. The declaration-based real-time update of the NLP can refer to updating, modifying, or otherwise adjusting or calibrating the NLP techniques 112 or models 110 to improve accuracy and reliability by which the NLP component 108 can detect input parameters in subsequent input audio signals that are compatible with the functionality declared by the application 118.
At act 218, the digital assistant component 106 can receive a second voice query 218. The preprocessor 130 can receive the second voice query and provide the second voice query to the digital assistant component 106. In some cases, the digital assistant component 106 that has been previously invoked by the pre-processor 130 can remain in an active state and directly receive and parse the second speech query at act 220. At act 220, the NLP component 108 may detect parameters of the application 118 for activation or launching. At act 222, the digital assistant component 106 can provide the detected parameters to the direct action API 116. At act 224, the direct action API116 may use a template or other technique to generate an action data structure with input parameters.
At act 226, the direct action API116 may provide an action data structure for input into the application 118. At act 228, the application 118 may execute the action data structure. The application 118 may perform actions or otherwise process the received action data structure to change or update the state of the application. The action data structure may cause a change in the state of the application 118. At act 230, application 118 may update the state and then declare the updated state. The application 118 can re-declare the state of the application in order to provide current state information or context to the digital assistant component 106. At act 232, the application may provide a declaration corresponding to the updated status via the protocol. At act 234, NLP component 108 can receive the declaration from act 232 and perform a declaration-based real-time update of NLP technique 112 or model 110.
FIG. 3 is an illustration of an example methodology for dynamically interfacing with an application. Method 300 may be performed by one or more components, systems or elements of system 100 or system 400, including, for example, a computing device, a data processing system, a digital assistant component, an NLP component, a direct action API, or an application manager component. The method 300 may include receiving an input audio signal at 302. The input audio signal may be received via an interface of the data processing system. The input audio signal may be detected by a microphone of the client computing device. The input audio signal may include a voice query, instruction, or command from a user of the computing device.
At act 304, the data processing system may process the input audio signal using NLP to identify an application. The data processing system may identify application-based terms, keywords, or other information in the input audio signal. At decision block 308, the data processing system may determine whether the application is installed on or otherwise accessible to the computing device. The data processing system may determine whether the computing device (or its account) is authorized to access or use the application. If at decision block 308, the data processing system determines that the application is not authorized, the data processing system may proceed to act 310 to provide an alert. The alert may include an indication to download and install the application, an indication that the application is unavailable, or an indication to make another request.
If at decision block 308, the data processing system determines that the application is installed, the data processing system may proceed to act 306 to activate the application. The data processing system may launch, invoke, or otherwise bring the application to the foreground. In some cases, the data processing system may execute the application in a headless state in which the application may not present graphical user interface elements for display on a display device of the computing device. For example, the data processing system may execute an application in a voice-only mode or for interfacing via audio input and audio output. In some cases, the data processing system may activate the application in a mixed mode in which the application may provide output via the graphical user interface while receiving input via the voice-based interface via the digital assistant component. Activating the application at act 306 may cause the application to declare the current state of the application.
At act 312, a digital assistant component executed by the data processing system can receive the declaration from the activated application and modify the NLP. The digital assistant component can perform a declaration-based real-time update of the NLP technique or model. The digital assistant component can update the NLP in response to a declaration received from the application.
At act 314, the data processing system may receive a second input audio signal. The digital assistant component can receive a second input audio signal, such as a speech input, from a user of the computing device. The second input audio signal may be a continuation of the first input audio signal. At act 316, the data processing system may process the second input audio signal using the updated NLP to detect input parameters compatible with the application (e.g., a current state of the application or an input field of a function of the application). The digital assistant component can determine, based on a comparison between the one or more parameters and the functionality declared by the application, that the one or more parameters are compatible for input into an input field of the application activated by the digital assistant on the client computing device.
At act 318, the digital assistant component may generate an action data structure based on the detected input parameters or requests. The digital assistant component may generate an action data structure in response to determining that the input parameters are compatible with a function or state of the application. The digital assistant component can provide an action data structure for entry into the application. The application may execute an action data structure.
At act 320, the digital assistant component can receive an updated declaration based on the new state of the application in response to the execution (or partial execution) of the action data structure. The digital assistant component can update the NLP based on the new declaration.
At decision block 322, the data processing system may determine whether 3P content is selected. The 3P content may refer to a digital component object such as a content item, an image, a video content item, or an audio content item. The digital component object may refer to or include an advertisement. The digital assistant component can determine whether to select the 3P content based on a policy, preference, or configuration. For example, the application may provide, via the declaration, an indication that the content slot is available in the application and configured for the 3P content item. The declaration may include a type of content slot (e.g., an audio content slot, a text content slot, an image content slot, a video content slot, a pop-up window content slot, or a banner content slot). In some cases, the computing device may include a profile or preference as to whether 3P content is allowed to be provided. In some cases, the digital assistant component may determine whether to select 3P content based on the function type or the current state of the application. For example, if the application function involves navigation, the digital assistant component can determine not to select content. If the function is related to a reservation at a restaurant, the digital assistant component may determine to select 3P content.
If the digital assistant component determines at decision block 322 to select 3P content, the digital assistant can proceed to act 324 to select and provide 3P content. The digital assistant component can transmit a request for content to a remote data processing system having a content selector component. The content selector component can receive the request as well as information that facilitates a real-time content selection process. The content selector component can provide the selected content item to the digital assistant component. The digital assistant component can receive the content item and render the content item (e.g., play an audio content item) or provide the content item to the application 118 for rendering via the application (e.g., via an audio or visual content slot in the application).
The digital assistant can determine at decision block 326 (e.g., after act 324 or if decision block 322 results in a negative, or independent of act 324 or decision block 322) whether to reset the NLP to a default state. The digital assistant can determine whether to reset the NLP based on the state of the application, such as whether the application is active, inactive, terminated, standby, or uninstalled. If the digital assistant determines not to reset the NLP, the digital assistant component can proceed to act 328 to maintain the NLP. However, if at decision block 326 the digital assistant component determines to reset the NLP, the digital assistant component can proceed to act 330 to undo the update to the NLP to reset the NLP to a default or initial state (e.g., prior to the claim-based real-time update of act 312).
Thus, the technical solution may improve NLP processing in order to detect a value of a parameter in a request received in a speech-based computing environment and provide the detected value for input into an application. The digital assistant component can receive a declaration from the application to identify the parameters and the types of values of the parameters, and then use the detected types to perform NLP processing on the speech input. For example, the parameter or type of value may be a "time", "location", or application defined parameter type, such as a TableType with an associated application defined value, such as "booth", "round table", and "window view". In another example, the parameter type can be a restaurant name, which can facilitate the digital assistant component to identify the restaurant name in the speech input, rather than the name of a person or geographic area.
Fig. 4 is a block diagram of an exemplary computer system 400. Computer system or computing device 400 may include or be used to implement system 100 or components thereof, such as data processing system 102. Computing system 400 includes a bus 405 or other communication component for communicating information, and a processor 410 or processing circuit coupled to bus 405 for processing information. Computing system 400 may also include one or more processors 410 or processing circuits coupled to the bus for processing information. Computing system 400 also includes a main memory 415, such as a Random Access Memory (RAM) or other dynamic storage device, coupled to bus 405 for storing information and instructions to be executed by processor 410. The main memory 415 may be or include a data repository 145. Main memory 415 also may be used for storing location information, temporary variables, or other intermediate information during execution of instructions by processor 410. Computing system 400 may further include a Read Only Memory (ROM)420 or other static storage device coupled to bus 405 for storing static information and instructions for processor 410. A storage device 425, such as a solid state device, magnetic disk or optical disk, may be coupled to bus 405 for persistently storing information and instructions. The storage device 425 may include the data repository 145 or may be part of the data repository 145.
The processes, systems, and methods described herein may be implemented by the computing system 400 in response to the processor 410 executing an arrangement of instructions contained in main memory 415. Such instructions may be read into main memory 415 from another computer-readable medium, such as storage device 425. Execution of the arrangement of instructions contained in main memory 415 enables computing system 400 to perform the illustrative processes described herein. One or more processors in a multi-processing arrangement may also be employed to execute the instructions contained in main memory 415. Hardwired circuitry may be used in place of or in combination with software instructions and the systems and methods described herein. The systems and methods described herein are not limited to any specific combination of hardware circuitry and software.
Although an example computing system has been described in fig. 4, the subject matter including the operations described in this specification can be implemented in other types of digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
For situations in which the system discussed herein collects or may utilize personal information about a user, the user may be provided with an opportunity to control whether programs or features may collect personal information (e.g., information about the user's social network, social actions or activities, the user's preferences, or the user's location), or whether and/or how to receive content from a content server or other data processing system that may be more relevant to the user. In addition, prior to storing or using the particular data, the particular data may be anonymized in one or more ways, such that personally identifiable information is removed when generating the parameters. For example, the identity of the user may be anonymized, such that personally identifiable information of the user cannot be determined, or the geographic location of the user (such as to a city, zip code, or state-county level) may be summarized where location information is obtained, such that a particular location of the user cannot be determined. Thus, the user can control the manner in which the content server collects and uses information about him or her.
The subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. The subject matter described in this specification can be implemented as one or more computer programs, e.g., one or more circuits of computer program instructions encoded on one or more computer storage media for execution by, or to control the operation of, data processing apparatus. Alternatively or additionally, program instructions may be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. The computer storage medium may be or be included in: a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. When the computer storage medium is not a propagated signal, the computer storage medium can be the source or destination of the computer program instructions encoded in an artificially generated propagated signal. The computer storage medium may also be or be included in: one or more separate components or media (e.g., multiple CDs, disks, or other storage devices). The operations described in this specification may be implemented as operations performed by data processing apparatus on data stored in one or more computer-readable storage devices or received from other sources.
The terms "data processing system," "computing device," "component," or "data processing apparatus" encompass various devices, apparatuses, and machines for processing data, including for example, programmable processors, computers, systems on a chip, or a plurality or combination of the foregoing. The apparatus can comprise special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment may implement a variety of different computing model architectures, such as web services, distributed computing, and grid computing architectures. The digital assistant component 106, the direct action API116, the interface 104, the NLP component 108, and other data processing system 102 components may include or share one or more data processing apparatus, systems, computing devices, or processors. The digital assistant server 144 and the content selection component 146 can include or share one or more data processing apparatus, systems, computing devices, or processors.
A computer program (also known as a program, software application, app, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. The computer program may correspond to a file in a file system. A computer program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs (e.g., components of data processing system 102) to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices (e.g., EPROM, EEPROM, and flash memory devices), magnetic disks (e.g., internal hard disks or removable disks), magneto-optical disks, CD-ROM disks, and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
The subject matter described herein can be implemented in a computing system that includes a back-end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front-end component (e.g., a client computer having a graphical user interface or a web browser through which a user can interact with an implementation of the subject matter described in this specification), or a computing system that includes one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include: local area networks ("LANs") and wide area networks ("WANs"), the internet (e.g., the internet), and peer-to-peer networks (e.g., peer-to-peer networks).
A computing system, such as system 100 or system 400, may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network, such as network 105. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some implementations, the server transmits data (e.g., data packets representing digital components) to the client device (e.g., for the purpose of displaying data to and receiving user input from a user interacting with the client device). Data generated at the client device (e.g., the results of the user interaction) may be received at the server from the client device (e.g., received by the digital assistant server 144 from the digital assistant component 106 or the 3P content provider device 140 of the computing device 128).
Although operations are depicted in the drawings in a particular order, such operations need not be performed in the particular order shown, or in sequential order, and all illustrated operations need not be performed. The actions described herein may be performed in a different order.
The separation of various system components need not be separated in all embodiments, and the described program components may be included in a single hardware or software product. For example, the NLP component 108 or the direct action API116 may be a single component, app, or program, or a logical device having one or more processing circuits, or executed by one or more processors of the data processing system 102.
Having now described some illustrative embodiments, it is apparent that the foregoing is illustrative and not limiting, having been presented by way of example. In particular, although many of the examples presented herein involve specific combinations of method acts or system elements, these acts and these elements may be combined in other ways to accomplish the same objectives. Acts, elements and features discussed in connection with one embodiment are not intended to be excluded from other embodiments or similar uses in embodiments.
The phraseology and terminology used herein is for the purpose of description and should not be regarded as limiting. The use of "including," "comprising," "having," "containing," "involving," "characterized by," and variations thereof herein, is meant to encompass the items listed thereafter and equivalents thereof as well as additional items and alternative embodiments consisting of the items listed thereafter. In one embodiment, the systems and methods described herein consist of one of the described elements, acts, or components, individual combinations of more than one of the described elements, acts, or components, or all of the described elements, acts, or components.
Any reference herein to an embodiment or element or act of the systems and methods referred to in the singular may also include embodiments having a plurality of such elements, and any reference herein to any embodiment or element or act in the plural may also encompass embodiments including only a single element. References in the singular or plural form are not intended to limit the presently disclosed systems or methods, their components, acts, or elements to the singular or plural configuration. A reference to any action or element based on any information, action, or element may include an implementation in which the action or element is based, at least in part, on any information, action, or element.
Any embodiment disclosed herein may be combined with any other embodiment or examples, and references to "an embodiment," "some embodiments," "one embodiment," etc., are not necessarily mutually exclusive and are intended to indicate that a particular feature, structure, or characteristic described in connection with the embodiment may be included in at least one embodiment or example. Such terms as used herein do not necessarily all refer to the same embodiment. Any embodiment may be combined with any other embodiment, inclusively or exclusively, in any manner consistent with the aspects and embodiments disclosed herein.
References to "or" may be construed as inclusive such that any term described using "or" may indicate any single one, more than one, or all of the described terms. A reference to at least one of a conjunctive list of terms may be interpreted as inclusive or to indicate any of a single, more than one, and all of the described terms. For example, a reference to "at least one of" a "and" B "may include only 'a', only 'B', and both 'a' and 'B'. Such references used in conjunction with "including" or other open-ended terms may include additional items.
Where technical features in the drawings, detailed description or any claim are followed by reference signs, the reference signs have been included to increase the intelligibility of the drawings, detailed description, and claims. Accordingly, neither the reference numerals nor their deletions have any limiting effect on the scope of any claim element.
The systems and methods described herein may be embodied in other specific forms without departing from the characteristics thereof. For example, a device, product, or service described as a 3P or third party (such as 3P digital content provider device 140) may be, or partially or wholly include, a first party device, product, or service and may be commonly owned by an entity associated with data processing system 102, digital assistant server 144, or other component. The foregoing embodiments are illustrative and not limiting of the described systems and methods. The scope of the systems and methods described herein is, therefore, indicated by the appended claims rather than by the foregoing description, and all changes that come within the meaning and range of equivalency of the claims are intended to be embraced therein.
Claims (40)
1. A system for interacting with an application, comprising:
a digital assistant component executed by a client computing device comprising one or more processors and memory;
a natural language processor component executed by the digital assistant component to:
receiving a first input audio signal detected by a microphone of the client computing device; and
processing the first input audio signal via natural language processing techniques to identify an indication of an application;
an application manager component of the digital assistant component to activate the application to execute on the client computing device in response to the indication and to cause the application to declare to the digital assistant component, via a protocol, a function that the application is configured to perform;
the natural language processor component to:
modifying the natural language processing technique in response to the functionality declared by the application;
receiving a second input audio signal detected by the microphone of the client computing device;
processing the second input audio signal via the modified natural language processing technique to detect one or more parameters; and
determining, based on a comparison between the one or more parameters and the functionality declared by the application, that the one or more parameters are compatible for input into an input field of the application activated by the digital assistant on the client computing device; and
a direct action API executed by the digital assistant component to:
generating an action data structure for the application in response to the determination of compatibility and based on the one or more parameters; and
inputting the action data structure into the application via the protocol to cause the application to execute the action data structure and update a user interface element of the application.
2. The system of claim 1, comprising the digital assistant component to:
updating a model based on the function; and
providing the updated model to the natural language processing technique.
3. The system of claim 1 or claim 2, comprising the digital assistant component to:
modifying the natural language processing technique after activation of the application and based on the functionality declared by the application to increase a likelihood of detection of the one or more parameters relative to the natural language processing technique not modified based on the functionality.
4. The system of any preceding claim, comprising the digital assistant component to:
receiving state information declared by the application via the protocol; and
performing real-time natural language processing of the second input audio signal using the state information to identify the one or more parameters.
5. The system of any preceding claim, comprising the digital assistant component to:
receiving state information declared by the application via the protocol; and
mapping the second input audio signal to the state information via the modified natural language processing technique to identify a request.
6. The system of any preceding claim, comprising the digital assistant component to:
receiving an indication of a change to a state of the application after the action data structure is entered into the application;
in response to the indication of the change to the state, modifying a natural language processing technique previously modified in response to the functionality declared by the application;
receiving a third input audio signal; and
processing the third input audio signal via a natural language processing technique modified in response to the indication of the change in state to identify a second one or more parameters.
7. The system of any preceding claim, comprising the digital assistant component to:
receiving, from the application via the protocol, an indication of a change to a state of the application, wherein the indication of the change to the state invokes the digital assistant;
in response to the indication of the change, parsing a current user interface of the application to identify one or more input fields provided via the user interface element of the application;
receiving a third input audio signal; and
processing the third input audio signal using the natural language processing technique based on the one or more input fields to identify a second one or more parameters of the third input audio signal for input into the application in response to the change in state of the application.
8. The system of any preceding claim, comprising the digital assistant to:
performing a lookup in an index of the client computing device to determine that the application is installed on the client computing device; and
activating the application in response to determining that the application is installed on the client computing device.
9. The system of any preceding claim, comprising the digital assistant to:
receiving an indication that the application is deactivated; and
returning the modified natural language processing technique to the default natural language processing technique.
10. The system of any preceding claim, comprising the digital assistant to:
receiving an indication that the application is deactivated; and
removing the modification based on the function from the natural language processing technique.
11. A method of interacting with an application, comprising:
receiving, by a digital assistant component executed by one or more processors of a client computing device, a first input audio signal detected by a microphone of the client computing device;
processing, by the digital assistant component, the first input audio signal using natural language processing techniques to identify an indication of an application;
activating, by the digital assistant component in response to the indication, the application for execution on the client computing device and causing the application to declare, via a protocol, to the digital assistant component a function that the application is configured to perform;
modifying, by the digital assistant component, the natural language processing technique in response to the functionality declared by the application;
receiving, by the digital assistant component, a second input audio signal detected by the microphone of the client computing device;
processing, by the digital assistant component, the second input audio signal using the modified natural language processing technique to detect one or more parameters;
determining, by the digital assistant component, based on a comparison between the one or more parameters and the function declared by the application, that the one or more parameters are compatible for input to an input field of the application activated by the digital assistant on the client computing device;
generating, by the digital assistant component, an action data structure for the application in response to the determination of compatibility and based on the one or more parameters; and
entering, by the digital assistant component, the action data structure into the application via the protocol to cause the application to execute the action data structure and update a user interface element of the application.
12. The method of claim 11, comprising:
updating a model based on the function; and
providing the updated model to the natural language processing technique.
13. The method of claim 11 or claim 12, comprising:
modifying the natural language processing technique after activating the application and based on the functionality declared by the application to increase a likelihood of detection of the one or more parameters relative to the natural language processing technique not modified based on the functionality.
14. The method of any of claims 11 to 13, comprising:
receiving state information declared by the application via the protocol; and
performing real-time natural language processing of the second input audio signal using the state information to identify the one or more parameters.
15. The method of any of claims 11 to 14, comprising:
receiving state information declared by the application via the protocol; and
mapping the second input audio signal to the state information via the modified natural language processing technique to identify a request.
16. The method of any of claims 11 to 15, comprising:
receiving an indication of a change to a state of the application after the action data structure is entered into the application;
in response to the indication of the change to the state, modifying a natural language processing technique previously modified in response to the functionality declared by the application;
receiving a third input audio signal; and
processing the third input audio signal via a natural language processing technique modified in response to the indication of the change in state to identify a second one or more parameters.
17. The method of any of claims 11 to 16, comprising:
receiving, from the application via the protocol, an indication of a change to a state of the application, wherein the indication of the change to the state invokes the digital assistant;
in response to the indication of the change, parsing a current user interface of the application to identify one or more input fields provided via the user interface element of the application;
receiving a third input audio signal; and
processing the third input audio signal using the natural language processing technique based on the one or more input fields to identify a second one or more parameters of the third input audio signal for input into the application in response to the change in state of the application.
18. The method of any of claims 11 to 17, comprising:
performing a lookup in an index of the client computing device to determine that the application is installed on the client computing device; and
activating the application in response to determining that the application is installed on the client computing device.
19. The method of any of claims 11 to 18, comprising:
receiving an indication that the application is deactivated; and
returning the modified natural language processing technique to the default natural language processing technique.
20. The method of any of claims 11 to 19, comprising:
receiving an indication that the application is deactivated; and
removing the modification based on the function from the natural language processing technique.
21. A system for interacting with an application, comprising:
one or more processors and memory;
a digital assistant component executed by the one or more processors and memory to:
in response to the first input audio, activating an application for execution on the client computing device and causing the application to declare to the digital assistant component, via a protocol, a function that the application is configured to perform;
modifying the natural language processing technique in response to the functionality declared by the application;
receiving a second input audio signal detected by the microphone of the client computing device;
processing the second input audio signal via the modified natural language processing technique to detect one or more parameters;
determining, based on a comparison between the one or more parameters and the function declared by the application, that the one or more parameters are compatible for input to an input field of the application activated by the digital assistant on the client computing device;
generating an action data structure for the application in response to the determination of compatibility and based on the one or more parameters;
inputting the action data structure into the application via the protocol to cause the application to execute the action data structure and update a user interface element of the application;
transmitting a request for content to a remote data processing system; and
in response to receiving the content item from the remote data processing system, presenting the content item selected by the remote data processing system.
22. The system of claim 21, comprising:
the digital assistant component to generate the request based on the action data structure.
23. The system of claim 21, comprising:
the digital assistant component to generate the request based on the functionality declared by the application.
24. The system of claim 21, comprising:
the digital assistant component to generate the request based on the modified natural language processing technique.
25. The system of claim 21, comprising:
the digital assistant component to generate the request based on the updated user interface element of the application.
26. The system of claim 21, comprising:
the digital assistant component to provide the content item to the application for presentation via the user interface of the application.
27. The system of claim 21, comprising:
the digital assistant component to present the content item via an audio output.
28. The system of claim 21, comprising:
the digital assistant component to present the content item via an output interface different from the user interface of the application.
29. The system of claim 21, comprising:
the digital assistant component to present the content item via an audio output separate from the user interface of the application.
30. The system of claim 21, comprising:
the remote data processing system to select the content item during a real-time content selection process.
31. The system of claim 21, comprising:
the remote data processing system to select the content item based on the functionality declared by the application.
32. The system of claim 21, comprising:
the remote data processing system to select the content item based on the one or more parameters detected in the second input audio signal.
33. The system of claim 21, comprising:
the remote data processing system to select the content item based on the application.
34. The system of claim 21, comprising:
the remote data processing system to select the content item based on the action data structure entered into the application.
35. A method of interacting with an application, comprising:
in response to the first input audio, a digital assistant component executed by one or more processors activates an application for execution on the client computing device and causes the application to declare to the digital assistant component, via a protocol, a function that the application is configured to perform;
modifying, by the digital assistant component, the natural language processing technique in response to the functionality declared by the application;
receiving, by the digital assistant component, a second input audio signal detected by the microphone of the client computing device;
processing, by the digital assistant component, the second input audio signal via the modified natural language processing technique to detect one or more parameters;
determining, by the digital assistant component, based on a comparison between the one or more parameters and the function declared by the application, that the one or more parameters are compatible for input to an input field of the application activated by the digital assistant on the client computing device;
generating, by the digital assistant component, an action data structure for the application in response to the determination of compatibility and based on the one or more parameters;
entering, by the digital assistant component, the action data structure into the application via the protocol to cause the application to execute the action data structure and update a user interface element of the application;
transmitting, by the digital assistant component, a request for content to a remote data processing system;
presenting, by the digital assistant component, the content item selected by the remote data processing system in response to receiving the content item from the remote data processing system.
36. The method of claim 35, comprising:
generating, by the digital assistant component, the request based on the action data structure.
37. The method of claim 35, comprising:
providing, by the digital assistant component, the content item to the application for presentation via the user interface of the application.
38. The method of claim 35, comprising:
presenting, by the digital assistant component, the content item via an audio output.
39. The method of claim 35, comprising:
selecting, by the remote data processing system, the content item during a real-time content selection process.
40. The method of claim 35, comprising:
selecting, by the remote data processing system, the content item based on the functionality declared by the application.
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2019/063648 WO2021107951A1 (en) | 2019-11-27 | 2019-11-27 | Interfacing with applications via dynamically updating natural language processing |
Publications (1)
Publication Number | Publication Date |
---|---|
CN114600081A true CN114600081A (en) | 2022-06-07 |
Family
ID=68966056
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201980101548.6A Pending CN114600081A (en) | 2019-11-27 | 2019-11-27 | Interacting with applications via dynamically updating natural language processing |
Country Status (5)
Country | Link |
---|---|
US (1) | US11514896B2 (en) |
EP (1) | EP3847546A1 (en) |
KR (1) | KR20220062360A (en) |
CN (1) | CN114600081A (en) |
WO (1) | WO2021107951A1 (en) |
Families Citing this family (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11074280B2 (en) * | 2017-05-18 | 2021-07-27 | Aiqudo, Inc | Cluster based search and recommendation method to rapidly on-board commands in personal assistants |
US11574634B2 (en) | 2019-11-27 | 2023-02-07 | Google Llc | Interfacing with applications via dynamically updating natural language processing |
US11570182B1 (en) * | 2020-03-30 | 2023-01-31 | Amazon Technologies, Inc. | Compute-less authorization |
US20230125036A1 (en) * | 2021-10-14 | 2023-04-20 | Microsoft Technology Licensing, Llc | Natural language interface for virtual environment generation |
WO2023234931A1 (en) * | 2022-05-31 | 2023-12-07 | Google Llc | Human-in-the-loop voice automation system |
Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20160203002A1 (en) * | 2015-01-09 | 2016-07-14 | Microsoft Technology Licensing, Llc | Headless task completion within digital personal assistants |
CN108551766A (en) * | 2016-12-30 | 2018-09-18 | 谷歌有限责任公司 | Natural language processing for the session establishment with ISP |
Family Cites Families (12)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10276170B2 (en) * | 2010-01-18 | 2019-04-30 | Apple Inc. | Intelligent automated assistant |
GB2495222B (en) | 2011-09-30 | 2016-10-26 | Apple Inc | Using context information to facilitate processing of commands in a virtual assistant |
US9123345B2 (en) * | 2013-03-14 | 2015-09-01 | Honda Motor Co., Ltd. | Voice interface systems and methods |
US9384732B2 (en) * | 2013-03-14 | 2016-07-05 | Microsoft Technology Licensing, Llc | Voice command definitions used in launching application with a command |
US10249296B1 (en) * | 2014-05-27 | 2019-04-02 | Amazon Technologies, Inc. | Application discovery and selection in language-based systems |
US9548066B2 (en) * | 2014-08-11 | 2017-01-17 | Amazon Technologies, Inc. | Voice application architecture |
US10192549B2 (en) * | 2014-11-28 | 2019-01-29 | Microsoft Technology Licensing, Llc | Extending digital personal assistant action providers |
US9508339B2 (en) * | 2015-01-30 | 2016-11-29 | Microsoft Technology Licensing, Llc | Updating language understanding classifier models for a digital personal assistant based on crowd-sourcing |
DK201670540A1 (en) * | 2016-06-11 | 2018-01-08 | Apple Inc | Application integration with a digital assistant |
US10600418B2 (en) | 2016-12-07 | 2020-03-24 | Google Llc | Voice to text conversion based on third-party agent content |
US11204787B2 (en) * | 2017-01-09 | 2021-12-21 | Apple Inc. | Application integration with a digital assistant |
US11170768B2 (en) * | 2017-04-17 | 2021-11-09 | Samsung Electronics Co., Ltd | Device for performing task corresponding to user utterance |
-
2019
- 2019-11-27 KR KR1020227011840A patent/KR20220062360A/en unknown
- 2019-11-27 WO PCT/US2019/063648 patent/WO2021107951A1/en unknown
- 2019-11-27 US US16/622,805 patent/US11514896B2/en active Active
- 2019-11-27 CN CN201980101548.6A patent/CN114600081A/en active Pending
- 2019-11-27 EP EP19824120.0A patent/EP3847546A1/en active Pending
Patent Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20160203002A1 (en) * | 2015-01-09 | 2016-07-14 | Microsoft Technology Licensing, Llc | Headless task completion within digital personal assistants |
CN108551766A (en) * | 2016-12-30 | 2018-09-18 | 谷歌有限责任公司 | Natural language processing for the session establishment with ISP |
Non-Patent Citations (1)
Title |
---|
李涛;王国营;: "在线学习视频索引与检索方法", 计算机工程与设计, no. 03 * |
Also Published As
Publication number | Publication date |
---|---|
US11514896B2 (en) | 2022-11-29 |
US20210358489A1 (en) | 2021-11-18 |
EP3847546A1 (en) | 2021-07-14 |
WO2021107951A1 (en) | 2021-06-03 |
KR20220062360A (en) | 2022-05-16 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
EP3776175B1 (en) | Action validation for digital assistant-based applications | |
US11893993B2 (en) | Interfacing with applications via dynamically updating natural language processing | |
US11514896B2 (en) | Interfacing with applications via dynamically updating natural language processing | |
US11599336B2 (en) | Generating and updating voice-based software applications using application templates | |
CN110892385B (en) | Immersive WEB-based simulator for digital assistant-based applications | |
CN115210692A (en) | Interface and mode selection for digital motion execution | |
US11935536B2 (en) | Action validation for digital assistant-based applications | |
US20220308987A1 (en) | Debugging applications for delivery via an application delivery server | |
US11869504B2 (en) | Systems and methods to verify trigger keywords in acoustic-based digital assistant applications | |
US11385990B2 (en) | Debugging applications for delivery via an application delivery server | |
WO2023282890A1 (en) | Real-time micro-profile generation using a dynamic tree structure |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |