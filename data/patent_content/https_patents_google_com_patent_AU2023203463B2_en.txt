AU2023203463B2 - Preparing superpositions of computational basis states on a quantum computer - Google Patents
Preparing superpositions of computational basis states on a quantum computer Download PDFInfo
- Publication number
- AU2023203463B2 AU2023203463B2 AU2023203463A AU2023203463A AU2023203463B2 AU 2023203463 B2 AU2023203463 B2 AU 2023203463B2 AU 2023203463 A AU2023203463 A AU 2023203463A AU 2023203463 A AU2023203463 A AU 2023203463A AU 2023203463 B2 AU2023203463 B2 AU 2023203463B2
- Authority
- AU
- Australia
- Prior art keywords
- quantum
- register
- state
- qubits
- index
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
- 238000000034 method Methods 0.000 claims abstract description 76
- 230000009466 transformation Effects 0.000 claims abstract description 19
- 239000002096 quantum dot Substances 0.000 description 67
- 230000008569 process Effects 0.000 description 19
- 238000012545 processing Methods 0.000 description 18
- 238000004088 simulation Methods 0.000 description 18
- 230000009471 action Effects 0.000 description 17
- 238000004590 computer program Methods 0.000 description 17
- 230000005428 wave function Effects 0.000 description 13
- 238000004422 calculation algorithm Methods 0.000 description 12
- 238000005070 sampling Methods 0.000 description 8
- 238000003860 storage Methods 0.000 description 8
- 230000003044 adaptive effect Effects 0.000 description 7
- 238000004891 communication Methods 0.000 description 6
- 238000010586 diagram Methods 0.000 description 6
- 238000003084 configuration interaction method Methods 0.000 description 5
- 230000001419 dependent effect Effects 0.000 description 5
- 230000005283 ground state Effects 0.000 description 5
- 238000013507 mapping Methods 0.000 description 5
- 238000005259 measurement Methods 0.000 description 5
- 230000015654 memory Effects 0.000 description 5
- IJGRMHOSHXDMSA-UHFFFAOYSA-N Atomic nitrogen Chemical compound N#N IJGRMHOSHXDMSA-UHFFFAOYSA-N 0.000 description 4
- 238000004519 manufacturing process Methods 0.000 description 4
- 238000002360 preparation method Methods 0.000 description 4
- 238000007796 conventional method Methods 0.000 description 3
- 230000005284 excitation Effects 0.000 description 3
- 230000006870 function Effects 0.000 description 3
- 230000003993 interaction Effects 0.000 description 3
- 239000000463 material Substances 0.000 description 3
- 238000010606 normalization Methods 0.000 description 3
- 230000003287 optical effect Effects 0.000 description 3
- 238000013515 script Methods 0.000 description 3
- 239000004065 semiconductor Substances 0.000 description 3
- 239000000126 substance Substances 0.000 description 3
- 241000053208 Porcellio laevis Species 0.000 description 2
- 238000013459 approach Methods 0.000 description 2
- 230000005540 biological transmission Effects 0.000 description 2
- 230000015572 biosynthetic process Effects 0.000 description 2
- 238000006243 chemical reaction Methods 0.000 description 2
- 150000001844 chromium Chemical class 0.000 description 2
- 239000000470 constituent Substances 0.000 description 2
- 238000010276 construction Methods 0.000 description 2
- 238000012938 design process Methods 0.000 description 2
- 238000012912 drug discovery process Methods 0.000 description 2
- 230000005281 excited state Effects 0.000 description 2
- 230000005628 many-body perturbation theory Effects 0.000 description 2
- 229910052757 nitrogen Inorganic materials 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 238000003786 synthesis reaction Methods 0.000 description 2
- 101100001674 Emericella variicolor andI gene Proteins 0.000 description 1
- OAICVXFJPJFONN-UHFFFAOYSA-N Phosphorus Chemical compound [P] OAICVXFJPJFONN-UHFFFAOYSA-N 0.000 description 1
- 230000009286 beneficial effect Effects 0.000 description 1
- 238000009954 braiding Methods 0.000 description 1
- 239000011651 chromium Substances 0.000 description 1
- 238000011960 computer-aided design Methods 0.000 description 1
- 230000001143 conditioned effect Effects 0.000 description 1
- 230000008878 coupling Effects 0.000 description 1
- 238000010168 coupling process Methods 0.000 description 1
- 238000005859 coupling reaction Methods 0.000 description 1
- 238000005516 engineering process Methods 0.000 description 1
- 239000012535 impurity Substances 0.000 description 1
- 230000010365 information processing Effects 0.000 description 1
- 238000005040 ion trap Methods 0.000 description 1
- 150000002500 ions Chemical class 0.000 description 1
- PXUQTDZNOHRWLI-OXUVVOBNSA-O malvidin 3-O-beta-D-glucoside Chemical compound COC1=C(O)C(OC)=CC(C=2C(=CC=3C(O)=CC(O)=CC=3[O+]=2)O[C@H]2[C@@H]([C@@H](O)[C@H](O)[C@@H](CO)O2)O)=C1 PXUQTDZNOHRWLI-OXUVVOBNSA-O 0.000 description 1
- 239000011159 matrix material Substances 0.000 description 1
- 230000010355 oscillation Effects 0.000 description 1
- 229910052698 phosphorus Inorganic materials 0.000 description 1
- 239000011574 phosphorus Substances 0.000 description 1
- 238000012805 post-processing Methods 0.000 description 1
- 230000000644 propagated effect Effects 0.000 description 1
- 238000013138 pruning Methods 0.000 description 1
- 230000004044 response Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 238000000844 transformation Methods 0.000 description 1
- VLCQZHSMCYCDJL-UHFFFAOYSA-N tribenuron methyl Chemical compound COC(=O)C1=CC=CC=C1S(=O)(=O)NC(=O)N(C)C1=NC(C)=NC(OC)=N1 VLCQZHSMCYCDJL-UHFFFAOYSA-N 0.000 description 1
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/30—Arrangements for executing machine instructions, e.g. instruction decode
- G06F9/30098—Register arrangements
- G06F9/30101—Special purpose registers
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N10/00—Quantum computing, i.e. information processing based on quantum-mechanical phenomena
- G06N10/20—Models of quantum computing, e.g. quantum circuits or universal quantum computers
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N10/00—Quantum computing, i.e. information processing based on quantum-mechanical phenomena
Abstract
EDITORIAL NOTE
APPLICATION NUMBER - 2021290241
Please note: Abstract page 28 should be numbered 27.
ABSTRACT
Methods, systems and apparatus for preparing arbitrary superposition quantum states of a
quantum register on a quantum computer, the quantum state comprising a superposition of L
computational basis states. In one aspect, a register of log L qubits is prepared in a weighted
sum of register basis states, where each register basis state indexes a corresponding quantum
state computational basis state, and the amplitude of each register basis state in the weighted
sum of register basis states is equal to the amplitude of the corresponding computational basis
state in the superposition of L computational basis states. A unitary transformation that maps
the register basis states to the corresponding L computational basis states is then
implemented, including, for each index 1 to L, controlling, by the register of log L qubits,
transformation of the quantum system register state for the index to the corresponding
computational basis state for the index.
28
Description
ABSTRACT Methods, systems and apparatus for preparing arbitrary superposition quantum states of a quantum register on a quantum computer, the quantum state comprising a superposition of L computational basis states. In one aspect, a register of log L qubits is prepared in a weighted sum of register basis states, where each register basis state indexes a corresponding quantum state computational basis state, and the amplitude of each register basis state in the weighted sum of register basis states is equal to the amplitude of the corresponding computational basis state in the superposition of L computational basis states. A unitary transformation that maps the register basis states to the corresponding L computational basis states is then implemented, including, for each index 1 to L, controlling, by the register of log L qubits, transformation of the quantum system register state for the index to the corresponding computational basis state for the index.
[0001] This specification relates to quantum computing.
[0002] This application is a divisional application of Australian patent application number 2021240206 which is, in turn, a divisional of Australian patent application number 2019297413. The contents of these earlier applications is hereby incorporated by reference.
[0003] This specification describes technologies for preparing an arbitrary superposition of computational basis states on a quantum computer.
[0004] In general, one innovative aspect of the subject matter described in this specification can be implemented in a method for preparing a quantum state of a quantum system register on a quantum computer, wherein the quantum state comprises a superposition of L computational basis states, the method comprising: preparing a register of log L qubits in an initial state, the initial state comprising a weighted sum of register basis states, wherein: each register basis state indexes a corresponding quantum state computational basis state, and the amplitude of each register basis state in the weighted sum of register basis states is equal to the amplitude of the corresponding computational basis state in the superposition of L computational basis states; and preparing the quantum state by implementing a unitary transformation that maps the register basis states to the corresponding L computational basis states, comprising, for each index 1 to L, controlling, by the register of log L qubits, transformation of the quantum system register state for the index to the corresponding computational basis state for the index.
[0005] Other implementations of this aspect include corresponding computer systems, apparatus, and computer programs recorded on one or more computer storage devices, each configured to perform the actions of the methods. A system of one or more classical and/or quantum computers can be configured to perform particular operations or actions by virtue of having software, firmware, hardware, or a combination thereof installed on the system that in operation causes or cause the system to perform the actions. One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that, when executed by data processing apparatus, cause the apparatus to perform the actions.
[00061 The foregoing and other implementations can each optionally include one or more of the following features, alone or in combination. In some implementations implementing a unitary transformation that maps the register basis states to the corresponding L computational basis states comprises implementing a unary iteration quantum circuit.
[00071 In some implementations controlling transformation of the quantum system register state for the index to the corresponding computational basis state for the index comprises controlling applications of unitary operators on the quantum system register state by a state of a unary register, wherein the state of the unary register is determined by the register of log L qubits.
[0008] In some implementations controlling applications of unitary operators on the quantum system register state by a state of a unary register comprises, for each index 1 to L: reading the computational basis state corresponding to the index to the quantum system register, comprising applying a unitary operator for the index to the system register controlled by the unary register; erasing the state of the register of log L qubits using a unitary operator controlled by the unary register; and uncomputing the unary register.
[0009] In some implementations the method further comprises providing the register of log L qubits for use in further computations.
[00010] In some implementations controlling applications of unitary operators on a system register encoding the quantum state by a unary register comprising the register of log L qubits comprises controlling applications of products of Pauli-X quantum logic gates.
[00011] In some implementations implementing a unitary transformation that maps the register basis states to the corresponding L computational basis states comprises applying select unitary methods.
[00012] In some implementations preparing the register of log L qubits in the initial state comprises applying quantum circuit synthesis techniques.
[00013] In some implementations the superposition of L computational basis states is determined using an adaptive sampling configuration interaction method.
[00014] In some implementations the method further comprises providing the quantum state for use in a quantum phase estimation algorithm.
[00015] In some implementations the method further comprises performing a quantum simulation using the prepared quantum state as an initial state of the quantum simulation.
[00016] In some implementations the quantum computer comprises a circuit model quantum computer.
[000171 Another innovative aspect of the subject matter described in this specification can be implemented in a method for preparing a target quantum state of a quantum system register on a quantum computer, wherein the target quantum state comprises a superposition of L computational basis states, the method comprising, sequentially for each index 1= 1 to 1 = L: preparing the quantum system register and a unary register in a quantum state, wherein: the state of the quantum system register is entangled with the unary register, at an initial time step the state of the quantum system register equals the target quantum state up to the first (1 1) computational basis states if the state of the unary register is |0), and the state of the quantum system register equals the 1-th computational basis state if the unary register is in state 1); selecting a qubit from the quantum system register whose value is different in the1 th computational basis state and the 1+1-th computational basis state; applying a rotation to the selected qubit, wherein the rotation is controlled by the state of a unary register; erasing the unary register value for the 1-th computational basis state; and implementing a NOT logic gate on the remaining qubits in the quantum system register whose values are different in the 1-th computational basis state and the 1+1-th computational basis state, wherein implementation of the NOT logic gate is controlled by the state of the unary register.
[00018] Other implementations of this aspect include corresponding computer systems, apparatus, and computer programs recorded on one or more computer storage devices, each configured to perform the actions of the methods. A system of one or more classical and/or quantum computers can be configured to perform particular operations or actions by virtue of having software, firmware, hardware, or a combination thereof installed on the system that in operation causes or cause the system to perform the actions. One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that, when executed by data processing apparatus, cause the apparatus to perform the actions.
[00019] The foregoing and other implementations can each optionally include one or more of the following features, alone or in combination. In some implementations preparing the quantum system register and a unary register in a quantum state comprises preparing the quantum system register and unary register in a quantum state lipi) = flID)| 1 1) +
a,, IDi,)|0), wherein 1 represents the index, IDI) represents the 1-th computational basis
state, a represents a computational basis state amplitude, andI = 1 - E-X|a,12.
[000201 In some implementations the method further comprises ordering the computational basis states such that the Hamming distances between neighboring computational basis states are reduced.
[00021] In some implementations applying a rotation to the selected qubit comprises applying a Pauli X gate to the selected qubit.
[00022] In some implementations selecting a qubit from the quantum system register whose value is different the 1-th computational basis state and the 1+1-th computational basis state comprises selecting a qubit from the quantum system whose occupation numbers di,
and dll,k are different.
[00023] In some implementations the amplitude of the 1-th basis state is derived from normalization.
[00024] In some implementations I/lis derived from normalization.
[00025] In some implementations the superposition of L computational basis states is determined using an adaptive sampling configuration interaction method.
[00026] In some implementations the method further comprises providing the target quantum state for use in a quantum phase estimation algorithm.
[000271 In some implementations the method further comprises initializing a quantum simulation using the prepared target quantum state; and performing a the quantum simulation.
[00028] The subject matter described in this specification can be implemented in particular ways so as to realize one or more of the following advantages.
[00029] A system preparing quantum states using the techniques described in this specification can efficiently prepare superposition states of arbitrary size, since the cost of the quantum state procedure is, up to log factors, of O(L) where L represents the number of computational basis states. Since quantum state preparation is an essential component of many quantum computations and simulations, the presently filed subject matter thus increases the efficiency of such quantum computations and simulations. For example, phase estimation algorithms may be performed more efficiently and quantum simulations, e.g., of chemicals or materials, may be performed more efficiently.
[00030] In addition, systems implementing the techniques described in this specification may prepare larger superposition states at a same cost compared to other systems implementing conventional techniques. Since larger superposition states typically have a stronger support on target quantum states, this can increase the accuracy of quantum algorithms and computations that require the preparation of quantum states.
[00031] Near-term quantum computers can typically implement a limited number of reliable (e.g., high fidelity) quantum gates and therefore have limited computational power. Reducing the number of quantum gates used in the preparation of quantum computer quantum states can therefore free-up more of this limited computational power for performing quantum algorithms of interest. A system preparing quantum states using the techniques described in this specification can prepare superposition states using fewer T gates compared to other systems implementing conventional techniques. Since T gates are notoriously costly, a system preparing quantum states using the techniques described in this specification requires less computational resources compared to other systems implementing conventional techniques. In embodiments that utilise unary iteration techniques/circuits, the T-complexity (i.e. number of T-gates required) to produce superposition states can be further reduced.
[00032] In addition, a system preparing quantum states using the techniques described in this specification can prepare quantum states using a circuit that can be compiled more easily compared to systems using other techniques.
[00033] The details of one or more implementations of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
[00034] FIG. 1 is a plot showing the overlap of the ground state of Nitrogen and Chromium dimers as a function of the number of computational basis states used to prepare an initial superposition state.
[00035] FIG. 2 depicts an example system.
[00036] FIG. 3 is a flow diagram of an example process for preparing a superposition of basis states using a compressed register of qubits.
[000371 FIG. 4 shows an example unary iteration quantum circuit.
[00038] FIG. 5 is a flowchart of an example process for loading data using unary iteration techniques
[00039] FIG. 6 is a flow diagram of an example process for preparing a superposition of basis states using two-dimensional rotations in the space of computational basis states.
[000401 FIG. 7 is a flow diagram of an example Adaptive Sampling Configuration Interaction algorithm.
[00041] Techniques for preparing and studying ground states of quantum systems, e.g., molecular systems, on a quantum computer include applying a quantum phase estimation algorithm to project an initial guess state ip) onto the ground state. The quantum phase estimation algorithm enables the phase accumulated on a quantum register under the action of a unitary operator U to be measured. Some varieties of phase estimation, such as iterative phase estimations and phase estimations based on the quantum Fourier transform, perform this measurement protectively, enabling sampling in the eigenbasis of the unitary operator U. In the context of quantum simulation, this unitary operator usually corresponds to time evolution under the system Hamiltonian H for time t. Therefore, performing projective phase estimation on this operator will collapse the initial guess state |I) to an eigenstate of the Hamiltonian with a probability that depends on the initial overlap between the initial guess state |i) and the eigenstate of interest. If HIn) = EnIn) then performing phase estimation will project the system register to eigenstate In), and readout the associated eigenvalue En with probability Pn = (ip|n)(nI)). Therefore, the number of times that phase estimation must be repeated to prepare the eigenstate In) with high probability scales as 1/ pn. For state preparation to be efficient, this probability is to decrease at most polynomially in the system size.
[00042] Accordingly, it is important to prepare initial states I) for phase estimation with which the ground state has strong support, e.g., has an overlap that exceeds a predetermined threshold measured by the inner product. Preparing a single computational basis state as the initial state is straightforward but often a single computational basis state does not have strong support on the target eigenstate, and a superposition over a number of computational basis states provides a more suitable initial state. This is illustrated in FIG. 1, which shows the overlap of the ground state of Nitrogen and Chromium dimers as a function of the number of Slater determinants (computational basis states) used to prepare the initial superposition state. As shown in FIG. 1, there is a noticeable difference between starting in a wavefunction spanned by just one computational basis state and a wavefunction spanned by hundreds.
[000431 The present disclosure describes techniques for preparing an arbitrary superposition of computational basis states (also referred to herein as Slater determinants, as in the context of quantum chemistry) on a quantum computer. An example arbitrary superposition of L computational basis states is given by Equation (1) below. L
|i$,)= ailDi) (1) 1=1
In Equation (1), DI) represents an 1-th computational basis state with amplitude a,. In a first method, the quantum state given by Equation (1) is prepared in a compressed register of qubits and its state is mapped to a superposition of basis states. In a second method, the quantum state given by Equation (1) is prepared using two-dimensional rotations in the space of computational basis states. Both methods use unary iteration techniques, as described below in more detail.
Example hardware
[00044] FIG. 2 depicts an exemplary system 200 for preparing quantum states. The system 200 is an example of a system implemented as quantum or classical computer programs on one or more quantum computing devices or classical computers in one or more locations, in which the systems, components, and techniques described below can be implemented.
[00045] The system 200 includes a quantum computing device 202 in data communication with one or more classical processors 204. For convenience, the quantum computing device 202 and classical processors 204 are illustrated as separate entities, however in some implementations the one or more classical processors may be included in quantum computing device 202.
[00046] The quantum computing device 202 includes components for performing quantum computation. For example, the quantum computing device 202 includes quantum circuitry 206, control devices 208, and T factories 210. The quantum circuitry 206 includes components for performing quantum computations as sequences of quantum gates that implement transformations on qubits in one or more registers of qubits. For example, the quantum circuitry may include one or more quantum systems of multi-level quantum subsystems, e.g., registers of qubits 214. An example quantum circuit that may be implemented by the quantum computing device 202 is described below with reference to FIG. 4.
[000471 The type of multi-level quantum subsystems that the system 1200 utilizes may vary. For example, in some implementations the multi-level quantum subsystems may be superconducting qubits, e.g., Gmon or Xmon qubits. In some cases it may be convenient to include one or more resonators attached to one or more superconducting qubits. In other cases ion traps, photonic devices or superconducting cavities (with which states may be prepared without requiring qubits) may be used. Further examples of realizations of multi level quantum subsystems include fluxmon qubits, silicon quantum dots or phosphorus impurity qubits.
[00048] Quantum circuits comprising different quantum logic operations, e.g., single qubit gates, two qubit gates, and three qubit gates such as logical AND operations, may be constructed using the quantum circuitry 206. Constructed quantum circuits can be operated/implemented using the control devices 208. The type of control devices 208 included in the quantum system depend on the type of qubits included in the quantum computing device. For example, in some cases the control devices 208 may include devices that control the frequencies of qubits included in the quantum circuitry 206, an excitation pulse generator and control lines that couple the qubits to the excitation pulse generator. The control devices may then cause the frequency of each qubit to be adjusted towards or away from a quantum gate frequency of an excitation pulse on a corresponding control driveline. The control devices 208 may further include measurement devices, e.g., readout resonators. Measurement results obtained via measurement devices may be provided to the classical processors 204 for processing and analyzing. The control devices may further include devices that can stabilize the phase of Rabi oscillation. For example, by weakly coupling a qubit to a microwave cavity, the system can monitor the qubit state non-destructively. An output signal can be amplified by a nearly noiseless parametric amplifier and measured by a homodyne process. The measurement signal may then be mixed with a reference signal using an analog multiplier, which serves as the input of the signal generator used to control the qubit state.
[00049] The system 200 may be configured to prepare a quantum system included in the quantum computing device 202 in a particular superposition of an arbitrary number of computational basis states using the techniques described herein. Once the quantum system has been prepared in the particular state, it may be used by the system 200 to perform quantum computations or simulations.
Programmingthe hardware: preparingsuperpositionstates using a compressed registerof
qubits
[000501 FIG. 3 is a flow diagram of an example process 300 for preparing a quantum state of a quantum system register on a quantum computer, wherein the quantum state comprises a superposition of L computational basis states. In some implementations the superposition of L computational basis states may have been determined using an adaptive sampling configuration interaction method (as described in detail below). For brevity, the superposition of L basis states is referred to as a target quantum state |@i) in the below description, where the target quantum state is given by Equation (1) above.
[000511 For convenience, the process 300 will be described as being performed by a system of one or more classical and quantum computing devices located in one or more locations. For example, a quantum computation system, e.g., the system 200 of FIG. 2, appropriately programmed in accordance with this specification, can perform the process 300.
[00052] The system prepares a register of log L qubits in an initial state that includes a weighted sum of register basis states (step 302). Since the register of qubits includes log L qubits, the register may be referred to as a "compressed" register of qubits. Each register basis state indexes a corresponding quantum state computational basis state. For example, in cases where L = 8, the compressed register may include Log 8 = 3 qubits whose basis state
|000) represents the computational basis state IDo), |001) represents the computational basis state ID 1 ), 1010) represents the computational basis state ID 2 ), |011) represents the computational basis state |D 3 ), etc.
[000531 The amplitude of each register basis state in the weighted sum of register basis states is equal to the amplitude of the corresponding computational basis state in the superposition of L computational basis states. That is, the system may prepare the compressed register of qubits in a state I) , where I) can be given by Equation (2) below.
|P) lal) (2) 1=1
In Equation (2), the amplitudes a, are the same as in Equation (1) above and 11) represents a basis state of the compressed register that indexes the computational basis state IDI) of Equation (1).
[00054] To prepare the compressed register in the initial state that corresponds to the target quantum state, the system may apply techniques for initializing quantum registers such as those described in "Synthesis ofquantum-logic circuits, " V. V. Shende et al, IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems 25, 1000 (2006). In some cases preparing the compressed register in the initial state may require 0(L) quantum gates.
[00055] The system prepares the quantum state by implementing a unitary transformation that maps the basis states of the compressed register of log L qubits to the corresponding computational basis states (step 304). That is, the system implements a unitary transformation that maps |l)-)a |D) for all I = 1, 2, ... , L where the computational state IDI) is specified by the quantum system register qubit occupation numbers
dl, d1 2 , . . dl,N with N representing quantum system size.
[00056] In some implementations, the system may implement the unitary transformation by application of a unary iteration quantum circuit. An example unary iteration quantum circuit is described below with reference to FIG. 4. Applying the unitary iteration quantum circuit includes streaming over the quantum system register and storing the results in a unary register. The state of the unary register is determined by the register of log L qubits - the state of the unary register is |1) if the state of the quantum system register equals a selected basis state and is otherwise |0). Performing indexed operations, e.g., data loading, using a unary iteration quantum circuit is described below with reference to FIG. 5. The compressed register of qubits can be mapped directly onto an index register of a unary iteration quantum circuit, making the method particularly suited to implementations using unary iteration quantum circuits.
[000571 To implement the unitary transformation, the system controls, sequentially for each index 1 to L and by the register of log L qubits, a transformation of the quantum system register state for the index to the corresponding computational basis state for the index. That
is, for an -th index, the system applies a unitary U, =__X ''tothequantumsystem
register controlled by the unary register, where Xrepresents a Pauli X operator. Thisunitary only affects the state l) of the compressed register, and the corresponding computational basis state is read to the quantum system register. Equation (3) gives an example mapping produced by this operation.
|l)|0) - |l)|DI) (3)
This step requires O(NL) Clifford gates to implement and O(L) T gates.
[00058] The system may then erase the state of the compressed register using a unitary, e.g., a product of Pauli-X operators, controlled by the unary register. Equation (4) gives an example mapping produced by this operation.
Il)|D) - |0)|D) (4)
This step requires an additional O(log L) Clifford gates and zero T gates to implement in each step 1=1 to L of unary iteration.
[00059] The system may then uncompute the unary register using the same data streaming method on the system register for the state |DI).
[00060] The total cost to prepare the quantum state is therefore O(NL + Llog L) Clifford gates and O(L) T gates.
[00061] In other implementations the system may prepare the quantum state by implementing the unitary transformation using a select unitary method. Select unitary methods are described in "Toward the first quantum simulation with quantum speedup," Childs et al, PNAS, September 18, 2018 115 (38) 9456-9461.
[00062] In some implementations the system may provide the prepared quantum state for use in a quantum phase estimation algorithm. In other implementations the system may initialize a quantum simulation using the prepared target quantum state. For example, the system may perform a quantum simulation using the prepared quantum state as an initial state to determine properties of a physical system. For example, the system may perform a quantum simulation to determine properties of a chemical, e.g., a rate of a chemical reaction, as part of a drug discovery process. As another example, the system may perform a quantum simulation to determine properties of a material, e.g., the conductivity of a semiconductor, as part of a design and manufacturing process.
Example unary iterationquantum circuit construction
[00063] FIG. 4 shows an example unary iteration quantum circuit 400. For convenience, the example unary iteration quantum circuit 400 is illustrated as being configured for reading 8 data items do - d 7, e.g., data items representing superposition state amplitudes. However, in some cases the circuit may be expanded (or reduced) and configured to load an arbitrary number of data items, e.g., for preparing arbitrary superposition states.
[00064] The example unary iteration quantum circuit 400 includes an index register 402 including thee index qubits. The upper most index qubit represents the most significant bit, and the lowest index qubit represents the least significant bit. The index register 402 is configured to store an index value. The index value, as described with reference to FIG. 3, may correspond to a computational basis state. For example, the index value 011 may correspond to a third computational basis stateID3 ).
[00065] The example unary iteration quantum circuit 400 includes a control register 404 including four control qubits. In this description, the lowest control qubit is referred to as the final control qubit. The example unary iteration quantum circuit 400 also includes a data register 406 including eight data qubits. This data register corresponds to the computational basis states of the superposition state that is to be prepared.
[00066] The control register 404 encodes the index value encoded in the index register 402 via an iterative cascade of multiple logical AND operations performed between respective pairs of control qubits and index qubits, where each control qubit is made available to the cascade of operations in sequence and not in parallel. At the end of the iterative cascade, the result of a logical AND operation between an inverse of the index qubit representing the least significant bit and the penultimate control qubit storing a result of a previous logical AND operation is stored in the final control qubit.
[000671 The example unary iteration quantum circuit 400 repeatedly computes and uncomputes the control qubits to load a data item, e.g., one of data items do - d7, corresponding to the index value to the data register of data qubits. In between each repetition, a CNOT operation is performed between the last uncomputed control qubit and the next most highest control qubit, with the next most highest control qubit acting as the control. For example, between repetition 1 and repetition 2, a CNOT gate 408 is performed between the third control qubit and the second control qubit, with the second control qubit acting as the control. Between repetition 2 and 3, a CNOT gate is performed between the second control qubit and the first control qubit, with the first control qubit acting as the control.
[00068] The number of repetitions included in a data loading quantum circuit depends on the number of distinct data loading operations and/or the number of index qubits in the index register. For example, the example unary iteration quantum circuit 400 includes three index qubits and eight distinct data loading operations. Therefore, in this case, the number of compute/uncompute repetitions is equal to 4.
[000691 A repetition of computing and uncomputing the control qubits includes iteratively computing one or more logical AND operations between pairs of control and index qubits to store a result of the computations in the final control qubit. If the final control qubit is in an ON state, a multi target CNOT operation is performed on the data register qubits with the final control qubit acting as a control for the multi target CNOT operation. The multi target CNOT operation is dependent on a binary encoding of the data item. For example, if the data item has a binary representation of 10000001, the multi target CNOT operation may include a multi target CNOT operation controlled by the final control qubit that targets the qubits in the data register at offset 0 and 7, i.e., applies CNOTs to the first and the last qubit in the data register. As another example, if the data item has a binary representation of 00001111, the multi target CNOT operation may include a multi target CNOT operation controlled by the final control qubit that targets the last four qubits in the data register.
[000701 A CNOT operation is then performed between the final control qubit and the penultimate control qubit, where the penultimate control qubit acts as the control for the CNOT operation. Then, if the final control qubit is in an ON state, a multi target CNOT operation is performed on the data register qubits, again where the multi target CNOT operation is dependent on a binary encoding of the data item. Pairs of control and index qubits are then iteratively uncomputed.
[000711 The number of iterative computations and uncomputations performed in a repetition depends which repetition is being performed.
[00072] The unary iteration quantum circuit 400 ends by uncomputing the iteratively computed cascade of logical AND operations using a second cascade of uncomputations. Each control qubit is made available to the cascade of uncomputations in sequence and not in parallel.
[00073] The above described unary iteration quantum circuit 400 and variations thereof can be used to construct a "read only" type of QRAM, referred to as QROM. A QROM can read classical data indexed by a quantum register using a data loading quantum circuit, i.e. perform the example transformation given below in Equation (5),
L-1 L-1
QROMd'- alll)|0) = , alll)|DI) (5) 1=0 1=0
[000741 In Equation (5), 1 represents an index to be read and d, represents a word at offset I in a classical list d containing L words (items of data), with each word consisting of D bits, and a, are arbitrary amplitudes. The left hand side of Equation (3) describes an arbitrary superposition over the index register's L possible values with a second register in the state |0) and the left-multiplication of QROMd indicates the application of the QROM circuit. The right hand side of Equation (5) describes the state resulting from the application of the QROM circuit which has the data bits d, in the second register entangled with each possible computational basis state of the first register.
[000751 The quantum circuit 400 (and therefore the QROM construction) has a gate complexity of O(L D), since each of the D bits in each of the L words or data items from the QROM determines whether or not a CNOT gate is present and it is possible that all of the QROM's bits are set. However, because the CNOT is a Clifford operation, it is cheap to apply. This is especially so for multi-target CNOT operations, which can be combined into a single braiding operation in the surface code. The T-count of the circuit comes entirely from the unary iteration process (and is independent of data item size) whose T-count is upper bounded by 4L- 4.
[00076] Furthermore, since the T count is independent of data item size, the data item size can be (artificially) increased without affecting the T count by reading d; = concat(d2 , d 2 1 1) instead of dj. This changes the T-count from 4L to 2L + 4D, which is beneficial as long as D is less than L/2.
Example method for performing data loading
[000771 FIG. 5 is a flowchart of an example process 500 for loading data using unary iteration techniques. For convenience, the process 500 will be described as being performed by a quantum computing device in communication with one or more classical computing devices located in one or more locations. For example, the system 200 of FIG. 2, appropriately programmed in accordance with this specification, can perform the process 500.
[00078] The system encodes an index value in an index register comprising one or more index qubits (step 502), wherein the index value may be obtained through the process of some larger quantum computation. For example, as illustrated above with reference to FIG. 4, the system may include an index register with N qubits and encode an index value 1 with o I < 2N1. In some cases the index register may not encode an out-of-range value I 2 N-1
[000791 The system encodes the index value in a control register comprising multiple control qubits (step 504). Encoding the index value in the control register may include iteratively computing multiple logical AND operations between respective pairs of control qubits and index qubits to store a result of a logical AND operation between an inverse of a least significant index qubit and a penultimate control qubit storing a result of a previous logical AND operation in a final control qubit.
[00080] The system repeatedly computes and uncomputes the control qubits to load, conditioned on the state of the control qubits, a data item corresponding to the index value to a data register of data qubits (step 506). Computing and uncomputing one or more control qubits may include repeatedly: a) determining whether the final control qubit is in an ON state, and in response to determining that the final control qubit is in an ON state, performing a multi target CNOT operation on the data register qubits, wherein the multi target CNOT operation is dependent on a binary encoding of the data item and the final control qubit acts as the control for the multi target CNOT operation; b) determining a number of uncomputations of the iteratively computed logical AND operations described with reference to step 904 to perform; c) performing the determined number of uncomputations; d) performing a CNOT operation between a control qubit corresponding to the last uncomputed logical AND operation and a next highest control qubit, wherein the next highest control qubit acts as a control for the CNOT operation; e) iteratively computing a number of logical AND operations as described above with reference to step 904 to recompute the final control qubit.
[00081] Determining a number of uncomputations of the iteratively computed logical AND operations to perform includes determining how many bits are flipped when changing the binary representation of an index value corresponding to a final control qubit to the next (or, equivalently, the number of times it is possible to divide the index value in base 10 by 2 before the result becomes a non-integer). The number of uncomputations to perform is then equal to the determined number of required bit flips minus 1. Alternatively, the number of uncomputations to perform is equal to the number of times the value of the next index value can be divided by 2 before a non-integer result is obtained.
[000821 For example, for a first repetition, a multi target CNOT operation 410 is performed on the data register qubits 406 if the final control qubit is in an ON state, with the multi target CNOT operation 410 being dependent on a binary encoding of the data item do and the final control qubit acting as the control for the multi target CNOT operation 410. No uncomputations are then performed. A CNOT operation 412 is then performed between the final control qubit and a penultimate control qubit. No logical AND operations are then performed.
[00083] As another example, for a sixth repetition, a multi target CNOT operation 414 is performed on the data register qubits 406 if the final control qubit is in an ON state, with the multi target CNOT operation 414 being dependent on a binary encoding of the data item d5 and the final control qubit acting as the control for the multi target CNOT operation 414.
One uncomputation is then performed. A CNOT operation 416 is then performed between the penultimate control qubit and a next highest control qubit. One logical AND operation is then performed.
[00084] In some implementations, the system may further uncompute the iteratively computed multiple logical AND operations between respective pairs of control qubits and index qubits, as described above with reference to step 502, to reset the index register to encode the index value.
Programmingthe hardware:preparingsuperposition states using two-dimensional rotations in the space of computationalbasis states
[000851 FIG. 6 is a flow diagram of an example process 600 for preparing a quantum state of a quantum system register on a quantum computer, wherein the target quantum state comprises a superposition of L computational basis states. In some implementations the superposition of L computational basis states may have been determined using an adaptive sampling configuration interaction method.
[000861 For convenience, the process 600 will be described as being performed by a system of one or more classical or quantum computing devices located in one or more locations. For example, a quantum computation system, e.g., the system 200 of FIG. 2, appropriately programmed in accordance with this specification, can perform the process 600.
[00087] The example process 600 proceeds in sequence for each index 1= 1 to 1= L. For each index, the system prepares the quantum system register and a unary register in a quantum state given by Equation (6) below (step 602).
)=§,ID,) 1I) + E a,,ID,,)|0). (6)
In Equation (6), 1 represents the index, ID1 ) represents the 1-th computational basis state, aj
represents the amplitude of the j-th computational basis state, and I#,I= 1- EN |a,12
can be derived from normalization.
[00088] The system selects a qubit k from the quantum system register whose value is different in ID) and |D,+) (step 604). That is, the system selects a qubit from the quantum system whose occupation numbers dl,k and dl+l,k are different.
[000891 The system applies a rotation to the selected qubit (step 606), wherein the rotation is controlled by the state of a unary register. For example, the system maps
#I|D 1 ) 1) -- (aDD 1) + p +XkIDl))|1) 1 (7)
where Xk represents a Pauli X gate operating on qubit k.
[00090] The system erases the unary register value for ID1 ) (step 608). Equation (8) gives an example mapping produced by this operation.
|Dj)|11) - - |Dj)|10) (8)
Erasing the unary register requires O(N) Clifford gates and O(1) T gates.
[00091] The system implements a NOT logic gate on the remaining qubits whose values are different in ID1 ) and Dai), wherein implementation of the NOT logic gate is controlled by the state of the unary register (step 610). For example, by implementing the NOT gates in this manner, the system can perform the example mapping given below by Equation (9).
fl,|D,)|11) -) a,|D1)|10) + plslJ1|Da)|11) (9)
By combining the above mappings, the system maps the state |7P) defined in step 602 to the state |ip) for the next iteration.
[000921 The process 600 requires O(NL) Clifford gates and O(L) T gates. In some implementations the system may further order the computational basis states such that the Hamming distances between neighboring computational basis states are reduced. Ordering the computational basis states in this manner can reduce the total number of gates required to perform the process 600.
[000931 In some implementations the system may provide the prepared quantum state for use in a quantum phase estimation algorithm. In other implementations the system may initialize a quantum simulation using the prepared target quantum state. For example, the system may perform a quantum simulation using the prepared quantum state as an initial state to determine properties of a physical system. For example, the system may perform a quantum simulation to determine properties of a chemical, e.g., a rate of a chemical reaction, as part of a drug discovery process. As another example, the system may perform a quantum simulation to determine properties of a material, e.g., the conductivity of a semiconductor, as part of a design and manufacturing process.
Adaptive sampling configuration interactionmethod
[00094] The Adaptive Sampling Configuration Interaction (ASCI) method performs a diagonalization on a determinant space in which as many important degrees of freedom as possible is captured. This principle motivates most exact diagonalization and configuration interaction (CI) techniques, but most methods do not allow for explicit searching for important determinants. In contrast with some CI techniques, the idea of using a selected CI approach is to generate a relatively small set of determinants that account for 90% or more of the top contributions to the full CI wavefunction.
[00095] In selected CI methods, a wavefunction Pk is iteratively improved to reach a desired accuracy, beginning with a single determinant approximation. The search part of the algorithm has two rules: a selection criterion to determine what part of Hilbert space to search for new determinants (pruning) and a ranking criterion to determine the best determinants to include in the improved wavefunction Pk+1.
[00096] For the applications considered in this specification, the ranking criterion can be derived from a consistency relation among the coefficients of determinants in the eigenstate approximation. Expressing the time-independent Schr6dinger equation H|) = E|@) in the basis of determinants so that IV) = Zi Ci |D), whereIDj) represents the ith determinant, Equation (10) can be obtained j Hijj C;0 it C-= (10) E - Hii where Hij = (Di I H IDj) represents the Hamiltonian matrix element between the ith and jth determinants. Equation (10) can be used to predict a new and better set of determinants by taking the left hand side as an estimate of the magnitude of the expansion coefficients, as given in Equation (11):
+1 k CH jk *;HijC= (11) Ek - Hii
where Ek - (hIH ) IPrepresents the energy of the wavefunction in the kth iteration. For coefficients corresponding to an exact eigenstate of H, Ck' = Ck. Since the goal of selected CI is to include the most important weight determinants in the expansion, this equation can be used to rank the determinants by magnitude of Cr . These coefficients are related to a first order perturbation estimate for CI coefficients in many body perturbation theory.
[000971 In practice this iterative approach generates all the top contributions to the wavefunction. Having the top contributions is important to obtain highly accurate energies, as can be seen by combining the ASCI method with second order many body perturbation theory.
[00098] FIG. 7 is a flow diagram of an example ASCI algorithm. The computational parts include search, diagonalization, and post-processing steps. The growth steps are performed in the first set of iterations of ASCI to bring the variational wavefunction from the Hartree-Fock determinant to a wavefunction of size Ntdets. The wavefunction is grown, since it is slower to perform diagonalizations on a full size but inaccurate wavefunction. The refinement steps can be used when a very high accurate variational wavefunction is to be generated. During the refinement step the size of the wavefunction can be fixed but it is continually improved upon through search/diagonalization iterations.
[00099] Implementations of the digital and/or quantum subject matter and the digital functional operations and quantum operations described in this specification can be implemented in digital electronic circuitry, suitable quantum circuitry or, more generally, quantum computational systems, in tangibly-embodied digital and/or quantum computer software or firmware, in digital and/or quantum computer hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. The term "quantum computational systems" may include, but is not limited to, quantum computers, quantum information processing systems, quantum cryptography systems, or quantum simulators.
[000100] Implementations of the digital and/or quantum subject matter described in this specification can be implemented as one or more digital and/or quantum computer programs, i.e., one or more modules of digital and/or quantum computer program instructions encoded on a tangible non-transitory storage medium for execution by, or to control the operation of, data processing apparatus. The digital and/or quantum computer storage medium can be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, one or more qubits, or a combination of one or more of them. Alternatively or in addition, the program instructions can be encoded on an artificially generated propagated signal that is capable of encoding digital and/or quantum information, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode digital and/or quantum information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
[000101] The terms quantum information and quantum data refer to information or data that is carried by, held or stored in quantum systems, where the smallest non-trivial system is a qubit, i.e., a system that defines the unit of quantum information. It is understood that the term "qubit" encompasses all quantum systems that may be suitably approximated as a two level system in the corresponding context. Such quantum systems may include multi-level systems, e.g., with two or more levels. By way of example, such systems can include atoms, electrons, photons, ions or superconducting qubits. In many implementations the computational basis states are identified with the ground and first excited states, however it is understood that other setups where the computational states are identified with higher level excited states are possible.
[000102] The term "data processing apparatus" refers to digital and/or quantum data processing hardware and encompasses all kinds of apparatus, devices, and machines for processing digital and/or quantum data, including by way of example a programmable digital processor, a programmable quantum processor, a digital computer, a quantum computer, multiple digital and quantum processors or computers, and combinations thereof. The apparatus can also be, or further include, special purpose logic circuitry, e.g., an FPGA (field programmable gate array), an ASIC (application-specific integrated circuit), or a quantum simulator, i.e., a quantum data processing apparatus that is designed to simulate or produce information about a specific quantum system. In particular, a quantum simulator is a special purpose quantum computer that does not have the capability to perform universal quantum computation. The apparatus can optionally include, in addition to hardware, code that creates an execution environment for digital and/or quantum computer programs, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
[000103] A digital computer program, which may also be referred to or described as a program, software, a software application, a module, a software module, a script, or code, can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a digital computing environment. A quantum computer program, which may also be referred to or described as a program, software, a software application, a module, a software module, a script, or code, can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages, and translated into a suitable quantum programming language, or can be written in a quantum programming language, e.g., QCL or Quipper.
[000104] A digital and/or quantum computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of afile that holds other programs or data, e.g., one or more scripts stored in a markup language document, in a single file dedicated to the program in question, or in multiple coordinated files, e.g., files that store one or more modules, sub-programs, or portions of code. A digital and/or quantum computer program can be deployed to be executed on one digital or one quantum computer or on multiple digital and/or quantum computers that are located at one site or distributed across multiple sites and interconnected by a digital and/or quantum data communication network. A quantum data communication network is understood to be a network that may transmit quantum data using quantum systems, e.g. qubits. Generally, a digital data communication network cannot transmit quantum data, however a quantum data communication network may transmit both quantum data and digital data.
[000105] The processes and logic flows described in this specification can be performed by one or more programmable digital and/or quantum computers, operating with one or more digital and/or quantum processors, as appropriate, executing one or more digital and/or quantum computer programs to perform functions by operating on input digital and quantum data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA or an ASIC, or a quantum simulator, or by a combination of special purpose logic circuitry or quantum simulators and one or more programmed digital and/or quantum computers.
[000106] For a system of one or more digital and/or quantum computers to be "configured to" perform particular operations or actions means that the system has installed on it software, firmware, hardware, or a combination of them that in operation cause the system to perform the operations or actions. For one or more digital and/or quantum computer programs to be configured to perform particular operations or actions means that the one or more programs include instructions that, when executed by digital and/or quantum data processing apparatus, cause the apparatus to perform the operations or actions. A quantum computer may receive instructions from a digital computer that, when executed by the quantum computing apparatus, cause the apparatus to perform the operations or actions.
[0001071 Digital and/or quantum computers suitable for the execution of a digital and/or quantum computer program can be based on general or special purpose digital and/or quantum processors or both, or any other kind of central digital and/or quantum processing unit. Generally, a central digital and/or quantum processing unit will receive instructions and digital and/or quantum data from a read-only memory, a random access memory, or quantum systems suitable for transmitting quantum data, e.g. photons, or combinations thereof .
[000108] The elements of a digital and/or quantum computer are a central processing unit for performing or executing instructions and one or more memory devices for storing instructions and digital and/or quantum data. The central processing unit and the memory can be supplemented by, or incorporated in, special purpose logic circuitry or quantum simulators. Generally, a digital and/or quantum computer will also include, or be operatively coupled to receive digital and/or quantum data from or transfer digital and/or quantum data to, or both, one or more mass storage devices for storing digital and/or quantum data, e.g., magnetic, magneto-optical disks, optical disks, or quantum systems suitable for storing quantum information. However, a digital and/or quantum computer need not have such devices.
[000109] Digital and/or quantum computer-readable media suitable for storing digital and/or quantum computer program instructions and digital and/or quantum data include all forms of non-volatile digital and/or quantum memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; CD-ROM and DVD-ROM disks; and quantum systems, e.g., trapped atoms or electrons. It is understood that quantum memories are devices that can store quantum data for a long time with highfidelity and efficiency, e.g., light-matter interfaces where light is used for transmission and matter for storing and preserving the quantum features of quantum data such as superposition or quantum coherence.
[000110] Control of the various systems described in this specification, or portions of them, can be implemented in a digital and/or quantum computer program product that includes instructions that are stored on one or more non-transitory machine-readable storage media, and that are executable on one or more digital and/or quantum processing devices. The systems described in this specification, or portions of them, can each be implemented as an apparatus, method, or system that may include one or more digital and/or quantum processing devices and memory to store executable instructions to perform the operations described in this specification.
[000111] While this specification contains many specific implementation details, these should not be construed as limitations on the scope of what may be claimed, but rather as descriptions of features that may be specific to particular implementations. Certain features that are described in this specification in the context of separate implementations can also be implemented in combination in a single implementation. Conversely, various features that are described in the context of a single implementation can also be implemented in multiple implementations separately or in any suitable sub-combination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a sub-combination or variation of a sub-combination.
[000112] Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system modules and components in the implementations described above should not be understood as requiring such separation in all implementations, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
[0001131 Particular implementations of the subject matter have been described. Other implementations are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous.
[000114] It is to be understood that, if any prior art publication is referred to herein, such reference does not constitute an admission that the publication forms a part of the common general knowledge in the art, in Australia or any other country.
[000115] In the claims which follow and in the preceding description, except where the context requires otherwise due to express language or necessary implication, the word ''comprise" or variations such as "comprises" or "comprising" is used in an inclusive sense, i.e. to specify the presence of the stated features but not to preclude the presence or addition of further features in various embodiments. Similarly, the word "device" is used in a broad sense and is intended to cover the constituent parts provided as an integral whole as well as an instantiation where one or more of the constituent parts are provided separate to one another.
Claims (10)
- CLAIMS 1. A method to estimate a phase of an eigenvector of a unitary operator, comprising: preparing an initial quantum state that approximates the eigenvector, comprising, for each index from 1 to L: controlling, by a register of log L qubits, transformation of the initial quantum state for the index to a corresponding computational basis state for the index, wherein the register of log L qubits comprises a weighted sum of register basis states, each register basis state indexing a corresponding computational basis state, and wherein an amplitude of each register basis state in the weighted sum of register basis states is equal to an amplitude of the corresponding computational basis state in the initial quantum state; and evolving the initial quantum state according to the unitary operator to obtain an evolved quantum state; and measuring a phase of the evolved quantum state.
- 2. The method of claim 1, wherein controlling transformation of the initial quantum state for the index comprises controlling applications of the unitary operator on the initial quantum state by a state of a unary register, wherein the state of the unary register is determined by the register of log L qubits.
- 3. The method of claim 2, wherein controlling applications of unitary operators on the initial quantum state by a state of a unary register comprises, for each index 1 to L: reading the computational basis state corresponding to the index to the initial quantum state, comprising applying a unitary operator for the index to the initial quantum state controlled by the unary register; erasing the state of the register of log L qubits using a unitary operator controlled by the unary register; and uncomputing the unary register.
- 4. The method of claim 3, further comprising providing the register of log L qubits for use in further computations.
- 5. The method of claim 2, wherein controlling applications of unitary operators on the initial quantum state by a unary register comprises controlling applications of products of Pauli-X quantum logic gates.
- 6. The method of claim 1, further comprising repeatedly preparing the initial quantum state, evolving the initial quantum state, and measuring the phase of the evolved quantum state to estimate the phase of the eigenvector of the unitary operator.
- 7. The method of claim 1, wherein the unitary operator comprises a time evolution operator.
- 8. The method of claim 1, wherein the initial quantum state comprises a superposition of L computational basis states.
- 9. An apparatus comprising: quantum hardware; and one or more classical processors; wherein the apparatus is configured to perform operations comprising the method of any one of claims I to 8.
- 10. The apparatus of claim 9, wherein the quantum hardware comprises: a quantum circuit comprising: a quantum system register comprising multiple target qubits; an index register comprising log L index qubits; a control register comprising multiple control qubits; one or more control devices configured to operate the quantum circuit and cause the quantum circuit to perform the method of any one of claims 1 to 8.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
AU2023203463A AU2023203463B2 (en) | 2018-07-06 | 2023-06-02 | Preparing superpositions of computational basis states on a quantum computer |
Applications Claiming Priority (6)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201862694850P | 2018-07-06 | 2018-07-06 | |
US62/694,850 | 2018-07-06 | ||
PCT/US2019/040518 WO2020010208A1 (en) | 2018-07-06 | 2019-07-03 | Preparing superpositions of computational basis states on a quantum computer |
AU2019297413A AU2019297413B2 (en) | 2018-07-06 | 2019-07-03 | Preparing superpositions of computational basis states on a quantum computer |
AU2021240206A AU2021240206B2 (en) | 2018-07-06 | 2021-09-29 | Preparing superpositions of computational basis states on a quantum computer |
AU2023203463A AU2023203463B2 (en) | 2018-07-06 | 2023-06-02 | Preparing superpositions of computational basis states on a quantum computer |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
AU2021240206A Division AU2021240206B2 (en) | 2018-07-06 | 2021-09-29 | Preparing superpositions of computational basis states on a quantum computer |
Publications (2)
Publication Number | Publication Date |
---|---|
AU2023203463A1 AU2023203463A1 (en) | 2023-06-29 |
AU2023203463B2 true AU2023203463B2 (en) | 2023-10-26 |
Family
ID=67441677
Family Applications (3)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
AU2019297413A Active AU2019297413B2 (en) | 2018-07-06 | 2019-07-03 | Preparing superpositions of computational basis states on a quantum computer |
AU2021240206A Active AU2021240206B2 (en) | 2018-07-06 | 2021-09-29 | Preparing superpositions of computational basis states on a quantum computer |
AU2023203463A Active AU2023203463B2 (en) | 2018-07-06 | 2023-06-02 | Preparing superpositions of computational basis states on a quantum computer |
Family Applications Before (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
AU2019297413A Active AU2019297413B2 (en) | 2018-07-06 | 2019-07-03 | Preparing superpositions of computational basis states on a quantum computer |
AU2021240206A Active AU2021240206B2 (en) | 2018-07-06 | 2021-09-29 | Preparing superpositions of computational basis states on a quantum computer |
Country Status (5)
Country | Link |
---|---|
US (1) | US20210271477A1 (en) |
EP (2) | EP4310737A3 (en) |
AU (3) | AU2019297413B2 (en) |
CA (2) | CA3156724A1 (en) |
WO (1) | WO2020010208A1 (en) |
Families Citing this family (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2020068052A1 (en) * | 2018-09-25 | 2020-04-02 | Google, Llc | Error corrected variational algorithms |
CN113222151B (en) * | 2020-01-21 | 2023-09-05 | 本源量子计算科技（合肥）股份有限公司 | Quantum state transformation method and device |
US11687816B2 (en) | 2020-04-08 | 2023-06-27 | QC Ware Corp. | Quantum data loader |
US11699002B2 (en) * | 2020-05-28 | 2023-07-11 | Microsoft Technology Licensing, Llc | Separable-state simulation of quantum program code |
CN112000673A (en) * | 2020-08-31 | 2020-11-27 | 合肥本源量子计算科技有限责任公司 | Method and device for inquiring transaction elements by using quantum line |
CN112734042B (en) * | 2020-12-30 | 2022-11-15 | 山东浪潮科学研究院有限公司 | Calibration method, device and medium for multi-bit computing capability of quantum computer |
KR20240001245A (en) * | 2021-04-29 | 2024-01-03 | 큐씨 웨어 코포레이션 | Methods for efficient implementation of the unitary operators of Clifford's algebra as quantum circuits and their application to linear algebra and machine learning |
US11816538B2 (en) | 2021-04-29 | 2023-11-14 | QC Ware Corp. | Methods for efficient implementation of unitary operators in the Clifford algebra as quantum circuits and applications to linear algebra and machine learning |
US11922272B2 (en) | 2021-04-29 | 2024-03-05 | QC Ware Corp. | Methods for efficient implementation of unitary operators in the Clifford algebra as quantum circuits and applications to linear algebra and machine learning |
-
2019
- 2019-07-03 AU AU2019297413A patent/AU2019297413B2/en active Active
- 2019-07-03 CA CA3156724A patent/CA3156724A1/en active Pending
- 2019-07-03 EP EP23206819.7A patent/EP4310737A3/en active Pending
- 2019-07-03 CA CA3102290A patent/CA3102290C/en active Active
- 2019-07-03 WO PCT/US2019/040518 patent/WO2020010208A1/en unknown
- 2019-07-03 EP EP19745436.6A patent/EP3785184B1/en active Active
- 2019-07-03 US US17/257,895 patent/US20210271477A1/en active Pending
-
2021
- 2021-09-29 AU AU2021240206A patent/AU2021240206B2/en active Active
-
2023
- 2023-06-02 AU AU2023203463A patent/AU2023203463B2/en active Active
Non-Patent Citations (1)
Title |
---|
RYAN BABBUSH ET AL: "Encoding Electronic Spectra in Quantum Circuits with Linear T Complexity", ARXIV.ORG, CORNELL UNIVERSITY LIBRARY, 201 OLIN LIBRARY CORNELL UNIVERSITY ITHACA, NY 14853, 9 May 2018 (2018-05-09), XP080876570 * |
Also Published As
Publication number | Publication date |
---|---|
EP3785184B1 (en) | 2023-12-13 |
AU2023203463A1 (en) | 2023-06-29 |
WO2020010208A1 (en) | 2020-01-09 |
EP4310737A3 (en) | 2024-05-01 |
EP3785184A1 (en) | 2021-03-03 |
AU2021240206B2 (en) | 2023-03-02 |
US20210271477A1 (en) | 2021-09-02 |
AU2021240206A1 (en) | 2021-10-28 |
CA3102290C (en) | 2023-12-05 |
CA3102290A1 (en) | 2020-01-09 |
CA3156724A1 (en) | 2020-01-09 |
AU2019297413B2 (en) | 2021-09-02 |
EP4310737A2 (en) | 2024-01-24 |
AU2019297413A1 (en) | 2020-12-17 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
AU2023203463B2 (en) | Preparing superpositions of computational basis states on a quantum computer | |
Cerezo et al. | Variational quantum algorithms | |
Wang et al. | Efficient multiphoton sampling of molecular vibronic spectra on a superconducting bosonic processor | |
Babbush et al. | Encoding electronic spectra in quantum circuits with linear T complexity | |
US11809959B2 (en) | Hamiltonian simulation in the interaction picture | |
WO2020168158A1 (en) | Automated synthesizing of quantum programs | |
WO2020142122A2 (en) | Hybrid quantum-classical computer for variational coupled cluster method | |
AU2023201068B2 (en) | Plane wave dual basis for quantum simulation | |
AU2020223177B2 (en) | Increasing representation accuracy of quantum simulations without additional quantum resources | |
WO2021108902A1 (en) | Computer-implemented method of solving a hamiltonian | |
AU2024200550A1 (en) | Verified quantum phase estimation | |
US20220284337A1 (en) | Classically-boosted variational quantum eigensolver | |
Hastings | A short path quantum algorithm for exact optimization | |
AU2019455705B2 (en) | Parallel cross entropy benchmarking | |
King et al. | Computational supremacy in quantum simulation | |
US20220121979A1 (en) | Parameter initialization on quantum computers through domain decomposition | |
Halder et al. | Digital quantum simulation of strong correlation effects with iterative quantum phase estimation over the variational quantum eigensolver algorithm: $\mathrm {H_4} $ on a circle as a case study | |
Wang et al. | Memory-efficient differentiable programming for quantum optimal control of discrete lattices | |
US11550872B1 (en) | Systems and methods for quantum tomography using an ancilla | |
Hocker et al. | PEET: a Matlab tool for estimating physical gate errors in quantum information processing systems | |
Ferris | Practical Quantum Simulation on Noisy Superconducting Quantum Computers | |
WO2023043996A1 (en) | Quantum-computing based method and apparatus for estimating ground-state properties | |
WO2023237645A1 (en) | Method of performing a quantum computation | |
CN117494822A (en) | Method and device for predicting molecular crystal structure by quantum circuit | |
CN117581242A (en) | Unbiased fermi quantum monte carlo computation with quantum computers and shadow tomography |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
FGA | Letters patent sealed or granted (standard patent) |