US11354287B2 - Local orthogonal decomposition for maximum inner product search - Google Patents
Local orthogonal decomposition for maximum inner product search Download PDFInfo
- Publication number
- US11354287B2 US11354287B2 US16/715,620 US201916715620A US11354287B2 US 11354287 B2 US11354287 B2 US 11354287B2 US 201916715620 A US201916715620 A US 201916715620A US 11354287 B2 US11354287 B2 US 11354287B2
- Authority
- US
- United States
- Prior art keywords
- database
- component
- query
- quantized
- quantization operation
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/22—Indexing; Data structures therefor; Storage structures
- G06F16/2228—Indexing structures
- G06F16/2264—Multidimensional index structures
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/22—Indexing; Data structures therefor; Storage structures
- G06F16/2228—Indexing structures
- G06F16/2237—Vectors, bitmaps or matrices
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2458—Special types of queries, e.g. statistical queries, fuzzy queries or distributed queries
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/248—Presentation of query results
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/27—Replication, distribution or synchronisation of data between databases or within a distributed database system; Distributed database system architectures therefor
- G06F16/278—Data partitioning, e.g. horizontal or vertical partitioning
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/28—Databases characterised by their database models, e.g. relational or object models
- G06F16/284—Relational databases
- G06F16/285—Clustering or classification
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F17/00—Digital computing or data processing equipment or methods, specially adapted for specific functions
- G06F17/10—Complex mathematical operations
- G06F17/16—Matrix or vector computation, e.g. matrix-matrix or matrix-vector multiplication, matrix factorization
Definitions
- This description relates to large-scale classification and retrieval tasks.
- MIPS Maximum Inner Product Search
- MIPS finds the database element in the database that maximizes the inner product with the query.
- the inner product provides a measure of similarity, with a larger inner product indicating increasing similarity. Accordingly, MIPS finds the database element that is most similar to the query by finding the largest inner product between the database element and the query.
- the code stored for vector x is the index of the closest codeword in the VQ codebook: index ( ⁇ VQ (x)).
- a technique of indexing a database and processing a query includes performing a local orthogonal decomposition of a residual corresponding to a database element of a partitioned database. For each partition of the database, a respective direction is established. The residual term is then decomposed into a component parallel to the direction and a component perpendicular to the direction. The parallel and perpendicular components are then quantized separately and using different quantization techniques. For example, the parallel component may be quantized using a scalar quantization scheme, while the perpendicular component is quantized using a multiscale quantization technique.
- a database indexed using such a decomposition of the residuals showed improved recall with respect to databases indexed according to other techniques.
- a method can include receiving, by processing circuitry configured to perform indexing and search operations in a database, a plurality of database elements and direction data indicating a direction.
- the method can also include generating, by the processing circuitry, a plurality of partitions based on the plurality of database elements, each of the plurality of partitions corresponding to a respective subset of the plurality of database elements and including a respective center element.
- the method can further include determining, for each database element of the plurality of database elements, a residual term, the residual term being a difference between the database element and the center element for the subset of the plurality of database elements to which the database element corresponds.
- the method can further include performing, by the processing circuitry, a first projection operation on the residual term using a first projection operator to produce a first component of the residual term and a second projection operation on the residual term using a second projection operator to produce a second component of the residual term, the first projection operator and the second projection operator being based on the direction, the first component being parallel to the direction, the second component being perpendicular to the direction.
- the method can further include performing, by the processing circuitry, a first quantization operation on the first component to produce a first quantized component.
- the method can further include performing, by the processing circuitry, a second quantization operation on the second component to produce a second quantized component, the second quantization operation being different from the first quantization operation.
- the method can further include storing, by the processing circuitry, the first quantized component, the second quantized component, and the codeword term in respective locations in a memory, the first quantized component, the second quantized component, and the center element providing an indexing of the database.
- a computer program product includes a nontransitory storage medium, the computer program product including code that, when executed by processing circuitry configured to process a query in a database, causes the processing circuitry to perform a method.
- the method can include receiving query data representing a query.
- the method can also include, for each of a first plurality of partitions of a database having database elements, generating a center inner product of the query and a respective center point of that partition to produce a plurality of center inner products.
- the method can further include selecting a first number of the first plurality of partitions to produce a second plurality of partitions, the selecting being based on the plurality of center inner products.
- the method can further include, for each of the second plurality of partitions and for each database element in the partition, generating a parallel inner product, the parallel inner product being an inner product between the first quantized component for the query data and a first quantized component of the database element; generating a perpendicular inner product, the parallel inner product being an inner product between the second quantized component for the query data and a second quantized component for the database element; and generating a sum of the parallel inner product, the perpendicular inner product, and the center inner product of the plurality of center inner products for that partition to produce a net inner product, the net inner product indicating a degree of similarity between the query and the database element.
- the method can further include selecting a specified number of database elements based on the plurality of net inner products.
- the method can further include returning the selected database elements.
- an electronic apparatus configured to perform indexing and search operations in a database.
- the electronic apparatus includes memory and controlling circuitry coupled to the memory.
- the controlling circuitry can be configured to receive a plurality of database elements and direction data indicating a direction; generate a plurality of partitions based on the plurality of database elements, each of the plurality of partitions corresponding to a respective subset of the plurality of database elements and including a respective center element; determine, for each database element of the plurality of database elements, a residual term, the residual term being a difference between the database element and the center element for the subset of the plurality of database elements to which the database element corresponds; perform a first projection operation on the residual term using a first projection operator to produce a first component of the residual term and a second projection operation on the residual term using a second projection operator to produce a second component of the residual term, the first projection operator and the second projection operator being based on the direction, the first component being parallel to the direction, the second component being perpendicular to the direction; perform a
- FIG. 1 is a diagram that illustrates a first example electronic environment for implementing improved techniques described herein.
- FIG. 2 is a diagram that illustrates a second example electronic environment for implementing improved techniques described herein.
- FIG. 3 is a diagram that illustrates an example method of performing the improved techniques within the electronic environment shown in FIG. 1 .
- FIG. 4 is a diagram that illustrates an example method of performing the improved techniques within the electronic environment shown in FIG. 2 .
- FIG. 5 is a diagram that illustrates an example behavior of projected inner product variance with direction.
- FIG. 6 is a diagram that illustrates an example behavior of residuals and queries in a partition with respect to direction.
- FIG. 7 is a flow chart that illustrates an example database indexing process within the electronic environment shown in FIG. 1 .
- FIGS. 9A and 9B are diagrams illustrating example recall results within the electronic environments shown in FIGS. 1 and 2 .
- FIGS. 11A and 11B are diagrams illustrating example recall results within the electronic environments shown in FIGS. 1 and 2 .
- FIG. 12 illustrates an example of a computer device and a mobile computer device that can be used with circuits described here.
- a conventional approach to processing a query q involves using an inverted file, asymmetric distance computation (IVFADC) framework.
- IVFADC asymmetric distance computation
- a database X is vector quantized to produce a set of partitions P i each having a respective center c i . That is, each partition P i includes those database elements x that are closer to its center c i than to the center of any other partition.
- the center c i of partition P i is taken to be a codeword of a codebook C used in the vector quantization of the database X.
- the code word of c i is selected because it is the most similar codeword in the codebook to database item x.
- the first term q ⁇ c i may be referred to as a codeword term and the second term q ⁇ (x ⁇ c i ) may be referred to as a residual term.
- Different quantization schemes may be applied to each of the codeword and residual inner product terms.
- the IVFADC framework uses a vector quantization (VQ) for coarse partitioning and a product quantization (PQ) for residual quantization.
- Each VQ partition P i includes all database vectors x assigned to VQ center c i , because c i is more similar to the database vector than any other codeword, i.e.,
- the IVFADC framework uses the IVF to determine the partitions most similar to a query.
- the top partitions may be denoted as m ADC partitions. These partitions are selected according to respective codeword terms, i.e., the inner product result between the codeword for the partition and the query (q ⁇ c i ), i.e. a center inner product.
- codeword terms i.e., the inner product result between the codeword for the partition and the query (q ⁇ c i ), i.e. a center inner product.
- residual vectors ⁇ r x x ⁇ c i ⁇ x ⁇ P i are determined and then quantized using a product quantization (PQ).
- PQ product quantization
- Asymmetric distance computation is an efficient lookup algorithm that produces an approximate inner product. If
- the above-described conventional approach to processing a query q assumes that the residuals are uniformly distributed over a direction v, which is a unit vector in the same vector space in which the database elements and query are defined. It has been found, however, that this is not the case: an analysis of the variance of a projected inner product over direction v is highly elongated in one direction with respect to another. Such a skewed variance affects the quality of the inner product approximation and, accordingly, the recall of the classification and retrieval operations.
- a technical solution to the above-described technical problem involves decomposing the residual term according to a projection matrix that is based on a given direction v.
- the residual for that database element after applying vector quantization, is split into a component parallel to a given direction and a component perpendicular to that direction.
- the parallel component lies in a one-dimensional subspace spanned by the direction v and may be efficiently quantized with a first quantization technique, e.g., a scalar quantization.
- the perpendicular component in contrast, is quantized using a second quantization technique, e.g., multiscale quantization techniques.
- the quantized residual components and the center elements of each partition define the indexed database.
- the inner products of the query q with the residual may be computed efficiently using the quantized residual components. From these inner products, the database elements that are most similar to the query are selected and returned to the user.
- a technical advantage of the above-described technical solution is that the decomposition provides an improvement of recall of the classification and retrieval operations over the above-described conventional approaches to processing a query. Recall is defined as correctly identifying similar items. Better recall indicates that the approximation has fewer errors and provides a result more similar to a result obtained by performing MIPS without approximation. In addition, the combination of the local orthogonal decomposition and multiscale quantization described above has better recall than either alone.
- FIG. 1 is a diagram that illustrates an example electronic environment 100 in which the above-described improved techniques may be implemented. As shown, in FIG. 1 , the example electronic environment 100 includes a computer 120 .
- the computer 120 is configured to perform an indexing of a database.
- the computer 120 includes a network interface 122 , one or more processing units 124 , and memory 126 .
- the network interface 122 includes, for example, Ethernet adaptors and the like for converting electronic and/or optical signals received from a network to electronic form for use by the computer 120 .
- the set of processing units 124 include one or more processing chips and/or assemblies.
- the memory 126 includes both volatile memory (e.g., RAM) and non-volatile memory, such as one or more ROMs, disk drives, solid state drives, and the like.
- the set of processing units 124 and the memory 126 together form control circuitry, which is configured and arranged to carry out various methods and functions as described herein.
- one or more of the components of the computer 120 can be, or can include processors (e.g., processing units 124 ) configured to process instructions stored in the memory 126 .
- processors e.g., processing units 124
- Examples of such instructions as depicted in FIG. 1 include a database manager 130 , a partition manager 140 , a projection manager 150 , and a quantization manager 160 .
- the memory 126 is configured to store various data, which is described with respect to the respective managers that use such data.
- the database manager 130 is configured to obtain and store database data 132 . In some implementations, the database manager 130 receives the database data 132 over a network. In some implementations, the database manager 130 obtains the database data 132 from a disk connected locally to the computer 120 .
- the database data 132 represents contents of a database obtained by the database manager 130 .
- the database may be a SQL or NoSQL database.
- the database takes the form of a recommendation system such as that found in a streaming movie service.
- the database takes the form of an image classification service, for classifying items such as pictures, videos, and streaming content.
- the database takes the form of a natural language processing system.
- the database data 132 includes database element data 134 and direction data 136 .
- the database element data 134 represents database elements of the database.
- the database elements are each represented in the memory 126 as a vector in a multidimensional space.
- each database element can represents a file in a library of items.
- the items may be images.
- the items may be videos.
- the items may be products.
- the items may be documents.
- the elements of a vector representing a movies may include characteristics such as genre, year of release, author, cast, length, and the like.
- the direction data 136 represents a unit vector in a direction about which quantities based on the database elements may be projected. For example, it is about this direction that defines parallel and perpendicular components of a residual of a database element.
- the direction is chosen such that a quantization error (i.e., a difference between the full inner product and the approximate inner product computed using the quantizations described herein) is minimized.
- the direction corresponding to a partition is equal to a unit vector in the direction of the center element of the partition.
- the database index data 144 includes indices representing the partitions. In some implementations, the database index data 144 includes whole numbers identifying the partitions. The database index data 144 also includes, for each partition, the database elements x of the database that are closest to a center point of the partition.
- the projection manager 150 is configured to generate projection data 152 by applying projection operators to residuals (i.e., residual data 148 ) in each partition.
- the projection operators generate components of the residual parallel to and perpendicular to the direction (i.e., direction data 136 ).
- the first quantized component data 164 includes results of quantizing the parallel components of the residuals for each partition.
- the quantization manager 160 applies a scalar quantization to the parallel components of the residuals to produce the first quantized component data 164 .
- the quantization manager 160 applies a uniform quantization to a quantity related to the parallel component of the residuals to produce the first quantized component data 164 .
- the second quantized component data 166 includes results of quantizing the perpendicular components of the residuals for each partition.
- the quantization manager 160 applies a multiscale quantization to the perpendicular components of the residuals to produce the second quantized component data 166 .
- the second quantized component data 166 also includes, in some implementations, a rotation matrix and, for each partition, a respective scale factor for that partition.
- the computer 220 is configured to process a query.
- the computer 220 includes a network interface 222 , one or more processing units 224 , and memory 226 .
- the network interface 222 includes, for example, Ethernet adaptors and the like for converting electronic and/or optical signals received from a network to electronic form for use by the computer 220 .
- the set of processing units 224 include one or more processing chips and/or assemblies.
- the memory 226 includes both volatile memory (e.g., RAM) and non-volatile memory, such as one or more ROMs, disk drives, solid state drives, and the like.
- the set of processing units 224 and the memory 226 together form control circuitry, which is configured and arranged to carry out various methods and functions as described herein.
- one or more of the components of the computer 220 can be, or can include processors (e.g., processing units 224 ) configured to process instructions stored in the memory 226 .
- processors e.g., processing units 224
- Examples of such instructions as depicted in FIG. 2 include an indexed database manager 230 , a query manager 240 , a partition manager 250 , an inner product manager 260 , and an output manager 270 .
- the memory 226 is configured to store various data, which is described with respect to the respective managers that use such data.
- the second partition data 252 represents partitions corresponding to the center points that produce the specified number of the largest center inner products. These are the partitions from which inner products with residuals will be estimated and database elements ultimately returned. As with the first partition data 234 , the second partition data 252 includes database element data 254 and center element data 256 that defines the center element of each partition represented by the second partition data 252 .
- the IP manager 260 is configured to generate estimates of the IPs of the query represented by the query data 242 and the residuals of the database elements of the partitions represented by the second partition data 252 to produce IP data 262 . Further details concerning the estimates of the inner products are described with regard to FIGS. 7 and 8 .
- the estimates of these IPs, in combination with the center IPs, provide a metric for selecting database items to be presented to a user in response to a query from the user.
- the IP data 262 represents the estimated IPs of the query with the residuals of the database elements of the partitions represented by the second partition data 252 .
- the residuals are split into parallel and perpendicular components, with each component quantized using a different quantization technique. Accordingly, the IPs of the query and the residuals are similarly split into parallel IP data 264 and perpendicular IP data 266 , and the nature of the quantizations implies that the inner products will be approximations.
- the output manager 270 is configured to return a specified number of database items represented by returned database element data 272 corresponding to the largest net IPs.
- the net IP for a database element of a partition is equal to the sum of the center IP for the partition and the parallel IP and the perpendicular IP for the database element.
- the electronic environments 100 and 200 are examples of such electronic environments.
- one or both of the electronic environments 100 and 200 include a computing system distributed across several computing systems.
- the components and/or data of such systems may be combined or used separately.
- FIG. 3 is a flow chart depicting an example method 300 of encoding triangular mesh data.
- the method 300 may be performed by software constructs described in connection with FIG. 1 , which reside in memory 126 of the computer 120 and are run by the set of processing units 124 .
- the partition manager 140 determines, for each database element of the plurality of database elements, a residual term (e.g., residual data 148 ).
- the residual term is a difference between the database element and the center element for the partition to which the database element is assigned.
- the projection manager 150 performs, on each residual term, a first projection operation on the residual term using a first projection operator to produce a first component of the residual term (e.g., parallel component data 154 ) and a second projection operation on the residual term using a second projection operator to produce a second component of the residual term (e.g., perpendicular component data 156 ).
- the first projection operator and the second projection operator are based on the direction, as explained below with regard to FIGS. 7 and 8 .
- the first component is parallel to the direction
- the second component is perpendicular to the direction.
- the quantization manager 160 performs a first quantization operation on the first component to produce a first quantized component (e.g., first quantized component data 164 ) and a second quantization operation on the second component to produce a second quantized component (e.g., second quantized component data 166 ), the second quantization operation being different from the first quantization operation.
- a first quantized component e.g., first quantized component data 164
- a second quantization operation on the second component to produce a second quantized component (e.g., second quantized component data 166 ), the second quantization operation being different from the first quantization operation.
- the query manager 240 receives query data 242 representing a query from a user.
- the query in turn is represented as a vector in a multidimensional space, having the same dimension as the vectors representing the database elements of the database.
- the query manager 242 generates, for each of a first plurality of partitions of a database having database elements (e.g., first partition data 234 ), a center inner product of the query and a respective center point of that partition to produce a plurality of center inner products (e.g., center IP data 244 ).
- database elements e.g., first partition data 234
- center inner product of the query e.g., center IP data 244
- the output manager 270 selects and returns a specified number of database elements to the user based on sums of the parallel IPs, perpendicular IPs, and the center IPs.
- the conventional approaches to processing a query q described above include an inverted file and asymmetric distance computation (IVFADC) framework, which combines vector quantization (VQ) for coarse partitioning and product quantization (PQ) for residual quantization.
- IVFADC vector quantization
- PQ product quantization
- an inverted file (IVF) is generated using a VQ partitioning, where the VQ has a codebook C.
- Each VQ partition P i includes all database elements x of a database X whose closest VQ center is c i , i.e.,
- ADC asymmetric distance computation
- the projected IP variance is defined as
- FIG. 6 is a diagram that illustrates a scatter plot 600 an example behavior of residuals and queries in an example partition 610 with respect to direction.
- a partition is given.
- the residuals in the partition 610 and a sample of queries that have maximum IPs with the partition center 620 are shown in plot 600 .
- All residuals and queries with maximum IPs are projected onto the two-dimensional subspace spanned by the partition center direction and the first principal (i.e., orthogonal) direction of the residuals.
- the residuals 610 blue
- the queries 620 black
- the partition manager 140 generates an inverted file to produce the partitions ⁇ P i ⁇ [m] and the corresponding center points ⁇ c i ⁇ [m] .
- the partition manager 140 generates a direction ⁇ v i ⁇ [m] corresponding to each partition and residuals r x for each database element x of each partition.
- the direction v i c i / ⁇ c i ⁇ 2 for the partition P i .
- the projection manager 150 generates parallel and perpendicular residual components for each database element of each partition. This is referred to as Local Orthogonal Decomposition (LOD).
- LOD Local Orthogonal Decomposition
- the projection manager 150 generates a parallel projection matrix H v ⁇ and a compliment projection matrix H v ⁇ for the partition.
- the quantization manager 150 performs a multiscale quantization on the perpendicular residual components to produce a rotation matrix and a product-quantized perpendicular residual component.
- Multiscale quantization is described in [white paper ref.], which is incorporated by reference herein in its entirety.
- the quantization manager 150 generates a scale factor for each database element of each partition and performs a scalar quantization (SQ) on that scale factor.
- the scalar-quantized scale factor is multiplied by the rotation matrix and the product-quantized perpendicular residual component to produce a multiscale-quantized perpendicular residual component.
- the number of codewords in the SQ codebook is as small as 16. In such implementations, the storage cost may be negligible.
- z max be the maximum of that finite input set is relaxed to be the 99% quantile and that z min be the minimum of the finite input set is relaxed to be the 1% quantile.
- rounded outputs are clipped to within the interval [ ⁇ 2 l UQ ⁇ 1 , 2 l UQ ⁇ 1 +1].
- the computer 120 stores, as the indexed database, the partitions, the center points, the directions, the multiscale-quantized perpendicular residual component of each database element, and the uniform-quantized difference of each database element.
- the MSQ of the perpendicular residual component returns a rotation matrix and a scale factor, which are also stored.
- FIG. 8 is a flow chart that illustrates an example process 800 of query processing.
- the process 800 may be performed by software constructs described in connection with FIG. 2 , which reside in memory 226 of the user device computer 220 and are run by the set of processing units 224 .
- the query manager 240 receives a query q from a user.
- the query q is represented by a multidimensional vector, having the same dimensions as the vectors representing the database elements.
- the IP manager 260 performs an ADC of the rotated query q r and the product quantized perpendicular residual component ⁇ PQ (ô x v ) for each database entry of each selected partition. That is, the IP manager 260 generates ADC (q r , ⁇ PQ (ô x v )).
- the IP manager 260 multiplies ADC (q r , ⁇ PQ (ô x v )) by the scalar-quantized scale factor ⁇ SQ ( ⁇ x ) to produce the perpendicular component of the residual inner product with the query q.
- ⁇ MSQ (o x v ) is not orthogonal to v.
- a fast ADC may be performed on the term q ⁇ MSQ (o x v ).
- the parallel component is the former term.
- the output manager 270 selects a specified number of database elements of each partition having the largest sum of the perpendicular and parallel components of the residual inner product.
- the output manager 270 selects the specified number of the largest net inner products (sum of center inner product and perpendicular component and parallel component of residual inner products) from the selected database elements over all partitions.
- the output manager 270 returns the specified number of database elements corresponding to the largest net inner products.
- FIG. 9A is a diagram illustrating example recall results in the form of a plot 900 , corresponding to the Netflix dataset with 25 codebooks and a bitrate of 100.
- the plot 900 shows curves 910 corresponding to MIPS-PQ, 920 to MIPS-OPQ, 930 to L2-OPQ, and 940 to MIPS-LOD-MSQ.
- FIG. 9B is a diagram illustrating example recall results in the form of a plot 950 , corresponding to the Netflix dataset with 50 codebooks and a bitrate of 200.
- the plot 950 shows curves 960 corresponding to MIPS-PQ, 970 to MIPS-OPQ, 980 to L2-OPQ, and 990 to MIPS-LOD-MSQ.
- FIG. 10A is a diagram illustrating example recall results in the form of a plot 1000 , corresponding to the Glove dataset with 25 codebooks and a bitrate of 100.
- the plot 1000 shows curves 1010 corresponding to MIPS-PQ, 1020 to MIPS-OPQ, 1030 to L2-OPQ, and 1040 to MIPS-LOD-MSQ.
- FIG. 10B is a diagram illustrating example recall results in the form of a plot 1050 , corresponding to the Glove dataset with 50 codebooks and a bitrate of 200.
- the plot 1050 shows curves 1060 corresponding to MIPS-PQ, 1070 to MIPS-OPQ, 1080 to L2-OPQ, and 1090 to MIPS-LOD-MSQ.
- FIG. 11A is a diagram illustrating example recall results in the form of a plot 1100 , corresponding to the Netflix dataset with 25 codebooks and a bitrate of 100.
- the plot 1100 shows curves 1110 corresponding to MIPS-OPQ, 1120 to MIPS-LOD-MSQ, 1130 to MIPS-MSQ, and 1140 to MIPS-LOD-OPQ.
- FIG. 11B is a diagram illustrating example recall results in the form of a plot 1150 , corresponding to the Glove dataset with 25 codebooks and a bitrate of 100.
- the plot 1150 shows curves 1160 corresponding to MIPS-OPQ, 1170 to MIPS-LOD-MSQ, 1180 to MIPS-MSQ, and 1190 to MIPS-LOD-OPQ.
- LOD+MSQ consistently outperforms either one in isolation.
- LOD performs much better than MSQ alone on Netflix and worse on Glove. This is due to the fact that in the normalized Glove dataset, orthogonal components of residuals have larger norms than projected components. With LOD only, OPQ is applied to the orthogonal components and it fails to preserve the 2 norms at a low bitrate.
- FIG. 12 illustrates an example of a generic computer device 1200 and a generic mobile computer device 1250 , which may be used with the techniques described here.
- computing device 1200 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers.
- Computing device 1250 is intended to represent various forms of mobile devices, such as personal digital assistants, cellular telephones, smart phones, and other similar computing devices.
- the components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
- Computing device 1200 includes a processor 1202 , memory 1204 , a storage device 1206 , a high-speed interface 1208 connecting to memory 1204 and high-speed expansion ports 1210 , and a low speed interface 1212 connecting to low speed bus 1214 and storage device 1206 .
- Each of the components 1202 , 1204 , 1206 , 1208 , 1210 , and 1212 are interconnected using various busses, and may be mounted on a common motherboard or in other manners as appropriate.
- the processor 1202 can process instructions for execution within the computing device 1200 , including instructions stored in the memory 1204 or on the storage device 1206 to display graphical information for a GUI on an external input/output device, such as display 1216 coupled to high speed interface 1208 .
- multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory.
- multiple computing devices 1200 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).
- the memory 1204 stores information within the computing device 1200 .
- the memory 1204 is a volatile memory unit or units.
- the memory 1204 is a non-volatile memory unit or units.
- the memory 1204 may also be another form of computer-readable medium, such as a magnetic or optical disk.
- the storage device 1206 is capable of providing mass storage for the computing device 1200 .
- the storage device 1206 may be or contain a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations.
- a computer program product can be tangibly embodied in an information carrier.
- the computer program product may also contain instructions that, when executed, perform one or more methods, such as those described above.
- the information carrier is a computer- or machine-readable medium, such as the memory 1204 , the storage device 1206 , or memory on processor 1202 .
- the high speed controller 1208 manages bandwidth-intensive operations for the computing device 600 , while the low speed controller 1212 manages lower bandwidth-intensive operations. Such allocation of functions is exemplary only.
- the high-speed controller 1208 is coupled to memory 1204 , display 1216 (e.g., through a graphics processor or accelerator), and to high-speed expansion ports 1210 , which may accept various expansion cards (not shown).
- low-speed controller 1212 is coupled to storage device 1206 and low-speed expansion port 1214 .
- the low-speed expansion port which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet) may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- input/output devices such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- the computing device 1200 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server 1220 , or multiple times in a group of such servers. It may also be implemented as part of a rack server system 1224 . In addition, it may be implemented in a personal computer such as a laptop computer 1222 . Alternatively, components from computing device 1200 may be combined with other components in a mobile device (not shown), such as device 1250 . Each of such devices may contain one or more of computing device 1200 , 1250 , and an entire system may be made up of multiple computing devices 1200 , 1250 communicating with each other.
- Computing device 1250 includes a processor 1252 , memory 1264 , an input/output device such as a display 1254 , a communication interface 1266 , and a transceiver 1268 , among other components.
- the device 1250 may also be provided with a storage device, such as a microdrive or other device, to provide additional storage.
- a storage device such as a microdrive or other device, to provide additional storage.
- Each of the components 1250 , 1252 , 1264 , 1254 , 1266 , and 1268 are interconnected using various buses, and several of the components may be mounted on a common motherboard or in other manners as appropriate.
- the processor 1252 can execute instructions within the computing device 1250 , including instructions stored in the memory 1264 .
- the processor may be implemented as a chipset of chips that include separate and multiple analog and digital processors.
- the processor may provide, for example, for coordination of the other components of the device 1250 , such as control of user interfaces, applications run by device 1250 , and wireless communication by device 1250 .
- Processor 1252 may communicate with a user through control interface 1258 and display interface 1256 coupled to a display 1254 .
- the display 1254 may be, for example, a TFT LCD (Thin-Film-Transistor Liquid Crystal Display) or an OLED (Organic Light Emitting Diode) display, or other appropriate display technology.
- the display interface 1256 may comprise appropriate circuitry for driving the display 254 to present graphical and other information to a user.
- the control interface 1258 may receive commands from a user and convert them for submission to the processor 1252 .
- an external interface 1262 may be provided in communication with processor 1252 , so as to enable near area communication of device 1250 with other devices. External interface 1262 may provide, for example, for wired communication in some implementations, or for wireless communication in other implementations, and multiple interfaces may also be used.
- the memory 1264 stores information within the computing device 1250 .
- the memory 1264 can be implemented as one or more of a computer-readable medium or media, a volatile memory unit or units, or a non-volatile memory unit or units.
- Expansion memory 1274 may also be provided and connected to device 1250 through expansion interface 1272 , which may include, for example, a SIMM (Single In Line Memory Module) card interface.
- SIMM Single In Line Memory Module
- expansion memory 1274 may provide extra storage space for device 1250 , or may also store applications or other information for device 1250 .
- expansion memory 1274 may include instructions to carry out or supplement the processes described above, and may include secure information also.
- expansion memory 1274 may be provided as a security module for device 1250 , and may be programmed with instructions that permit secure use of device 1250 .
- secure applications may be provided via the SIMM cards, along with additional information, such as placing identifying information on the SIMM card in a non-hackable manner.
- the memory may include, for example, flash memory and/or NVRAM memory, as discussed below.
- a computer program product is tangibly embodied in an information carrier.
- the computer program product contains instructions that, when executed, perform one or more methods, such as those described above.
- the information carrier is a computer- or machine-readable medium, such as the memory 1264 , expansion memory 1274 , or memory on processor 1252 , that may be received, for example, over transceiver 1268 or external interface 1262 .
- Device 1250 may communicate wirelessly through communication interface 1266 , which may include digital signal processing circuitry where necessary. Communication interface 1266 may provide for communications under various modes or protocols, such as GSM voice calls, SMS, EMS, or MMS messaging, CDMA, TDMA, PDC, WCDMA, CDMA2000, or GPRS, among others. Such communication may occur, for example, through radio-frequency transceiver 1268 . In addition, short-range communication may occur, such as using a Bluetooth, WiFi, or other such transceiver (not shown). In addition, GPS (Global Positioning System) receiver module 1270 may provide additional navigation- and location-related wireless data to device 1250 , which may be used as appropriate by applications running on device 1250 .
- GPS Global Positioning System
- Device 1250 may also communicate audibly using audio codec 1260 , which may receive spoken information from a user and convert it to usable digital information. Audio codec 1260 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of device 1250 . Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating on device 1250 .
- Audio codec 1260 may receive spoken information from a user and convert it to usable digital information. Audio codec 1260 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of device 1250 . Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating on device 1250 .
- the computing device 1250 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a cellular telephone 1280 . It may also be implemented as part of a smart phone 1282 , personal digital assistant, or other similar mobile device.
- implementations of the systems and techniques described here can be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof.
- ASICs application specific integrated circuits
- These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- Implementations of the method described with regard to FIG. 3 can include one or more of the following features, alone or in any combination with each other.
- the method can include receiving a quantized query vector having a first quantized component and a second quantized component; and generating, by the processing circuitry, an inner product of the query and a sum of the first quantized component and the second quantized component, the inner product indicating a degree of similarity between the query and the database element.
- the method can also include returning or not returning the database element of the plurality of database elements based on the degree of similarity.
- the first projection operator can include an outer product of the direction with itself.
- the second projection operator can include a difference between a unit operator and the first projection operator.
- the first quantization operation can include a scalar quantization operation.
- the second quantization operation can include a multiscale quantization operation, the multiscale quantization operation including a scale factor and a rotation matrix.
- the scale factor of the multiscale quantization operation can preserve a 2 norm of the second term.
- the method can further include performing a scalar quantization operation on the scale factor of the multiscale quantization operation.
- Generating the inner product of the query and a sum of the first component and the second component can include generating a product of the rotation matrix of the multiscale quantization operation and the query.
- Performing the first quantization operation on the first component can include performing a uniform quantization operation on a difference between the residual term and the second component.
- Implementations of the computer program product described with regard to FIG. 4 can include one or more of the following features, alone or in any combination with each other.
- Selecting a specified number of the plurality of net inner products can include determining largest values of the plurality of net inner products.
- the first quantized component of the database element can include a quantized component of a residual term parallel to a direction and the second quantized component of the database element can include a quantized component of the residual term perpendicular to the direction, the residual term being, for each of the plurality of partitions and, for that partition, each of the database elements of that partition, a difference between the center point of that partition and the database element.
- the first quantization operation can include a scalar quantization operation.
- the second quantization operation can include a multiscale quantization operation, the multiscale quantization operation including a scale factor and a rotation matrix.
- the scale factor of the multiscale quantization operation can preserve a 2 norm of the residual term.
- the method can further include performing a scalar quantization operation on the scale factor of the multiscale quantization operation.
- Generating the perpendicular inner product can include generating a product of the rotation matrix of the multiscale quantization operation and the query.
- the systems and techniques described here can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- a keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user can be received in any form, including acoustic, speech, or tactile input.
- the systems and techniques described here can be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back end, middleware, or front end components.
- the components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (“LAN”), a wide area network (“WAN”), and the Internet.
- LAN local area network
- WAN wide area network
- the Internet the global information network
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network.
- the relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- the memory 126 and 226 can be any type of memory such as a random-access memory, a disk drive memory, flash memory, and/or so forth.
- the memory 126 and 226 can be implemented as more than one memory component (e.g., more than one RAM component or disk drive memory) associated with the components of the computers 120 and 220 .
- the memory 126 and 226 can be a database memory.
- the memory 126 and 226 can be, or can include, a non-local memory.
- the memory 126 and 226 can be, or can include, a memory shared by multiple devices (not shown).
- the memory 126 and 226 can be associated with a server device (not shown) within a network and configured to serve the components of the computers 120 and 220 .
- the components (e.g., modules, processing units 124 and 224 ) of the computers 120 and 220 can be configured to operate based on one or more platforms (e.g., one or more similar or different platforms) that can include one or more types of hardware, software, firmware, operating systems, runtime libraries, and/or so forth.
- the components of the computers 120 and 220 can be configured to operate within a cluster of devices (e.g., a server farm). In such an implementation, the functionality and processing of the components of the computers 120 and 220 can be distributed to several devices of the cluster of devices.
- the components of the computers 120 and 220 can be, or can include, any type of hardware and/or software configured to process attributes.
- one or more portions of the components shown in the components of the computer 120 in FIG. 1 and the computer 220 in FIG. 2 can be, or can include, a hardware-based module (e.g., a digital signal processor (DSP), a field programmable gate array (FPGA), a memory), a firmware module, and/or a software-based module (e.g., a module of computer code, a set of computer-readable instructions that can be executed at a computer).
- DSP digital signal processor
- FPGA field programmable gate array
- one or more portions of the components of the computers 120 and 220 can be, or can include, a software module configured for execution by at least one processor (not shown).
- the functionality of the components can be included in different modules and/or different components than those shown in FIGS. 1 and 2 .
- the components of the computers 120 and 220 can be configured to operate within, for example, a data center (e.g., a cloud computing environment), a computer system, one or more server/host devices, and/or so forth.
- the components of the computers 120 and 220 can be configured to operate within a network.
- the components of the computers 120 and 220 can be configured to function within various types of network environments that can include one or more devices and/or one or more server devices.
- a network can be, or can include, a local area network (LAN), a wide area network (WAN), and/or so forth.
- the network can be, or can include, a wireless network and/or wireless network implemented using, for example, gateway devices, bridges, switches, and/or so forth.
- the network can include one or more segments and/or can have portions based on various protocols such as Internet Protocol (IP) and/or a proprietary protocol.
- IP Internet Protocol
- the network can include at least a portion of the Internet.
- one or more of the components of the computer 120 can be, or can include, processors configured to process instructions stored in a memory.
- the database manager 130 (and/or a portion thereof), the partition manager 140 (and/or a portion thereof), the projection manager 150 (and/or a portion thereof), and the quantization manager 160 (and/or a portion thereof can be a combination of a processor and a memory configured to execute instructions related to a process to implement one or more functions.
- one or more of the components of the computer 120 can be, or can include, processors configured to process instructions stored in a memory.
- processors configured to process instructions stored in a memory.
- the indexed database manager 230 (and/or a portion thereof), the query manager 240 (and/or a portion thereof), the partition manager 250 (and/or a portion thereof), the IP manager 260 (and/or a portion thereof), and the output manager 170 (and/or a portion thereof can be a combination of a processor and a memory configured to execute instructions related to a process to implement one or more functions.
Abstract
Description
In other words, MIPS finds the database element in the database that maximizes the inner product with the query. The inner product provides a measure of similarity, with a larger inner product indicating increasing similarity. Accordingly, MIPS finds the database element that is most similar to the query by finding the largest inner product between the database element and the query.
-
- Scalar Quantization (SQ): the quantization a continuous range of scalar values includes determining a number nSQ of codewords in a codebook. The codewords are found by, for example, minimizing the maximum distance between the scalar values and the nSQ unknown codewords. Mathematically, this is expressed as, for a codebook BSQ={yi}[n
SQ ] having nSQ scalar codewords, a scalar quantized value of a scalar z is
- Scalar Quantization (SQ): the quantization a continuous range of scalar values includes determining a number nSQ of codewords in a codebook. The codewords are found by, for example, minimizing the maximum distance between the scalar values and the nSQ unknown codewords. Mathematically, this is expressed as, for a codebook BSQ={yi}[n
The bitrate per input is lSQ=└ log2 nSQ┐.
-
- Uniform Quantization (UQ): UQ is a special case of SQ, in which the codebook is parameterized with only two scalars: BUQ={ai+b}[n
UQ ]. - Vector Quantization (VQ): VQ is a generalization of SQ to vector spaces. Given a codebook C={ci}[m] with m codewords, an input vector x is quantized into ϕVQ(x)=
- Uniform Quantization (UQ): UQ is a special case of SQ, in which the codebook is parameterized with only two scalars: BUQ={ai+b}[n
The code stored for vector x is the index of the closest codeword in the VQ codebook: index (ϕVQ(x)).
-
- Product Quantization (PQ): To apply PQ, divide a vector x into nB subspaces, i.e., subsets of the vector space to which x belongs: x=x(1)⊕x(2)⊕ . . . ⊕x(n
B )=⊕i∈[nB ]x(i). Within each subspace, a VQ with is applied to nW codewords: ϕPQ(x)=⊕i∈[nB ]ϕVQ (i). The bitrate per input for PQ is lPQ=nB[log2 nW].
- Product Quantization (PQ): To apply PQ, divide a vector x into nB subspaces, i.e., subsets of the vector space to which x belongs: x=x(1)⊕x(2)⊕ . . . ⊕x(n
The IVFADC framework uses the IVF to determine the partitions most similar to a query. The top partitions may be denoted as mADC partitions. These partitions are selected according to respective codeword terms, i.e., the inner product result between the codeword for the partition and the query (q·ci), i.e. a center inner product. Within each partition Pi, residual vectors {rx=x−ci}x∈P
represents the VQ approximation of x, then ADC (q, ϕVQ(x))=lookup ({q·c}c∈C, index (ϕVQ(x))). That is, performing an ADC involves performing a lookup of center inner products by the index of the closest codeword in the VQ codebook. For the top mADC partitions, this formulation of the ADC is applied to residuals in those partitions. Accordingly, the residual term may be expressed as q·rx≈q·ϕPQ(rx)=ADC (q, ϕPQ(rx))=Σi∈[n
In such a conventional approach, residual vectors {rx=x−ci}x∈P
where nB is the number of codebooks used in PQ. When processing a query q, IVF is used to determine the top partitions according to q·ci. The top mADC partitions are selected to search into; ADC is then applied to the residuals in those top mADC partitions.
The importance of the projected IP variance is described with regard to
are generated. The 1000 evenly spaced directions may be denoted as nv. The
i.e., the distance between each point and the origin represents the projected IP variance on its respective direction. The elongated peanut shape clearly demonstrates that the variance of the projected IPs is more concentrated on some directions than others, i.e., the projected IP has a nonuniform variance over direction.
H v ∥ =vv T ,H v ⊥ =I−vv T,
where I is the unit matrix. Hv ∥ is a projection matrix onto a direction parallel to v and Hv ⊥ is a projection matrix onto its complement subspace, i.e., onto a direction perpendicular to v. A residual may then be decomposed as rx=Hv ∥rx+Hv ⊥rx, i.e., as the sum of a parallel residual component and a perpendicular residual component.
∥λx H v ⊥ϕPQ(ô x v)∥2 =∥o x v∥2.
The rotation matrix R is not included in the above expression because it does not affect the
ϕMSQ(o x v)=ϕSQ(λx)Rϕ PQ(ô x v),
where, in some implementations, ϕSQ is a non-uniform SQ for the partition Pi learned via a Lloyd algorithm. In some implementations, the number of codewords in the SQ codebook is as small as 16. In such implementations, the storage cost may be negligible.
where ap=(zmax−zmin)/(2l
TABLE 1 |
Datasets used for MIPS experiments |
Dataset | # Vectors | # Dims |
Netflix | 17,700 | 200 |
Glove | 1,183,514 | 200 |
m | mADC | mADC/m |
20 | 2 | 10% |
1000 | 100 | 10% |
-
- MIPS-PQ: implements the PQ scheme proposed in the original IVFADC framework.
- MIPS-OPQ: implements an optimized product quantization (OPQ) scheme that learns a global rotation matrix.
- L2-OPQ: implements the OPQ scheme and also a MIPS to
- MIPS-LOD-MSQ: implements the above-described improved techniques using both LOD and MSQ. The projection direction is set to the partition center as an effective approximation to the optimal direction.
-
- IVF: average partition size is set at about 1,000 and 10% of the partitions are searched with ADC.
- PQ: there are either 25 or 50 codebooks, each of which includes 16 codewords for PQ and OPQ. For LOD+MSQ, the number of codewords is either 23 or 48 when lUQ=8 and either 24 or 49 when lUQ=4. This keeps the number of bits spent on each database vector the same. The number of codewords is fixed at 16.
- UQ: there are lUQ=8 bits for UQ for Netflix and lUQ=4 for Glove, which results in 256 and 16 levels in the codebook, respectively.
- MSO: there are lSQ=4 bits and accordingly 16 levels for SQ of scale factors in MSQ for all experiments.
-
- MIPS-OPQ: repeated from the previous experiments.
- MIPS-LOD-MSQ: repeated from the previous experiments.
- MIPS-MSQ: implements the MSQ scheme directly on the residuals without LOD.
- MIPS-LOD-OPQ: first applies LOD and then implements the OPQ scheme on the perpendicular residual component.
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US16/715,620 US11354287B2 (en) | 2019-02-07 | 2019-12-16 | Local orthogonal decomposition for maximum inner product search |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201962802370P | 2019-02-07 | 2019-02-07 | |
US16/715,620 US11354287B2 (en) | 2019-02-07 | 2019-12-16 | Local orthogonal decomposition for maximum inner product search |
Publications (2)
Publication Number | Publication Date |
---|---|
US20200257668A1 US20200257668A1 (en) | 2020-08-13 |
US11354287B2 true US11354287B2 (en) | 2022-06-07 |
Family
ID=71946084
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US16/715,620 Active 2040-06-10 US11354287B2 (en) | 2019-02-07 | 2019-12-16 | Local orthogonal decomposition for maximum inner product search |
Country Status (1)
Country | Link |
---|---|
US (1) | US11354287B2 (en) |
Families Citing this family (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11750260B2 (en) * | 2020-09-30 | 2023-09-05 | Qualcomm Incorporated | Non-uniform quantized feedback in federated learning |
CN113290863B (en) * | 2021-04-23 | 2022-10-14 | 湖南华曙高科技股份有限公司 | Processing method and device for additive manufacturing part model and computer equipment |
Citations (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5966471A (en) * | 1997-12-23 | 1999-10-12 | United States Of America | Method of codebook generation for an amplitude-adaptive vector quantization system |
US20050105828A1 (en) * | 2003-08-14 | 2005-05-19 | Fuji Photo Film Co., Ltd. | Method and apparatus for aiding image interpretation and computer-readable recording medium storing program therefor |
US20050166054A1 (en) * | 2003-12-17 | 2005-07-28 | Yuji Fujimoto | Data processing apparatus and method and encoding device of same |
US20160379083A1 (en) * | 2015-06-24 | 2016-12-29 | Microsoft Technology Licensing, Llc | Real-time, model-based object detection and pose estimation |
US20180101570A1 (en) * | 2016-10-11 | 2018-04-12 | Google Inc. | Hierarchical quantization for fast inner product search |
US20180204111A1 (en) * | 2013-02-28 | 2018-07-19 | Z Advanced Computing, Inc. | System and Method for Extremely Efficient Image and Pattern Recognition and Artificial Intelligence Platform |
US20180341805A1 (en) * | 2015-11-06 | 2018-11-29 | Thomson Licensing | Method and Apparatus for Generating Codebooks for Efficient Search |
US10194175B2 (en) * | 2007-02-23 | 2019-01-29 | Xylon Llc | Video coding with embedded motion |
-
2019
- 2019-12-16 US US16/715,620 patent/US11354287B2/en active Active
Patent Citations (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5966471A (en) * | 1997-12-23 | 1999-10-12 | United States Of America | Method of codebook generation for an amplitude-adaptive vector quantization system |
US20050105828A1 (en) * | 2003-08-14 | 2005-05-19 | Fuji Photo Film Co., Ltd. | Method and apparatus for aiding image interpretation and computer-readable recording medium storing program therefor |
US20050166054A1 (en) * | 2003-12-17 | 2005-07-28 | Yuji Fujimoto | Data processing apparatus and method and encoding device of same |
US10194175B2 (en) * | 2007-02-23 | 2019-01-29 | Xylon Llc | Video coding with embedded motion |
US20180204111A1 (en) * | 2013-02-28 | 2018-07-19 | Z Advanced Computing, Inc. | System and Method for Extremely Efficient Image and Pattern Recognition and Artificial Intelligence Platform |
US20160379083A1 (en) * | 2015-06-24 | 2016-12-29 | Microsoft Technology Licensing, Llc | Real-time, model-based object detection and pose estimation |
US20180341805A1 (en) * | 2015-11-06 | 2018-11-29 | Thomson Licensing | Method and Apparatus for Generating Codebooks for Efficient Search |
US20180101570A1 (en) * | 2016-10-11 | 2018-04-12 | Google Inc. | Hierarchical quantization for fast inner product search |
Non-Patent Citations (27)
Title |
---|
"Quantization based Fast Inner Product search" dated Sep. 4, 2015 (hereinafter NPL_DOC) (Year: 2015). * |
Andre et al., "Cache Locality is not Enough: High-Performance Nearest Neighbor Search with Product Quantization Fast Scan", Proceedings of the VLDB Endowment, vol. 9, No. 4, 2015, pp. 288-299. |
Auvolat et al., "Clustering is Efficient for Approximate Maximum Inner Product Search", arXiv preprint arXiv:1507 05910, Nov. 30, 2015, pp. 1-10. |
Babenko et al., "Additive Quantization for Extreme Vector Compression", In Computer Vision and Pattern Recognition (CVPR), IEEE Conference, 2014, pp. 1-18. |
Babenko et al., "Efficient Indexing of Billion-Scale Datasets of Deep Descriptors", IEEE Conference on Computer Vision and Pattern Recognition (CVPR), Jun. 2016, pp. 2055-2063. |
Babenko et al., "Tree Quantization for Large-Scale Similarity Search and Classification", In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, 2015, pp. 4240-4248. |
Bachrach et al., "Speeding Up the Xbox Recommender System using a Euclidean Transformation for Innerproduct Spaces", In Proceedings of the 8th ACM Conference on Recommender Systems, 2014, pp. 257-264. |
Bennett et al., "The Netflix Prize", In KDD Cup and Workshop in Conjunction with KDD, Aug. 12, 2007, 4 pages. |
Blalock et al., "Bolt: Accelerated Data Mining with Fast Vector Compression", Proceedings of the 23rd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, Aug. 13-17, 2017, pp. 1-9. |
Dean et al., "Fast, Accurate Detection of 100,000 Object Classes on a Single Machine", Proceedings of IEEE Conference on Computer Vision and Pattern Recognition, 2013, 8 pages. |
Ge et al., "Optimized Product Quantization", IEEE Transactions on Pattern Analysis and Machine Intelligence vol. 36, No. 4, Apr. 2014, pp. 1-14. |
Jegou et al., "Product Quantization for Nearest Neighbor Search", IEEE Transactions on Pattern Analysis and Machine Intelligence, vol. 33, Issue 1, 2011, pp. 117-128. |
Johnson et al., "Billion-Scale Similarity Search with GPUs", arXiv preprint arXiv:1702.08734, 2017, pp. 1-12. |
Kalantidis et al., "Locally Optimized Product Quantization for Approximate Nearest Neighbor Search", Computer Vision and Pattern Recognition (CVPR), 2014 IEEE Conference, Jun. 2014, pp. 1-8. |
Martinez et al., "Revisiting Additive Quantization", European Conference on Computer Vision, 2016, pp. 137-153. |
Martinez et al., "Stacked Quantizers for Compositional Vector Compression", CoRR abs/1411.2173, Nov. 8, 2014, pp. 1-8. |
Mussmann et al., "Learning and Inference via Maximum Inner Product Search", Proceedings of the 33rd International Conference on Machine Learning, vol. 48, 2016, pp. 1-13. |
Norouzi et al., "Cartesian k-means", Computer Vision and Pattern Recognition (CVPR), 2013 IEEE Conference on, 2013, pp. 1-8. |
Pennington et al., "GloVe: Global Vectors for Word Representation", In Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP), Oct. 25-29, 2014, pp. 1532-1543. |
Pritzel et al., "Neural Episodic Control", Proceedings of the 34th International Conference on Machine Learning, vol. 70, Mar. 6, 2017, pp. 1-12. |
Shrivastava et al., "Asymmetric LSH (ALSH) for Sublinear Time Maximum Inner Product Search (MIPS)", In Advances in Neural Information Processing Systems, 2014, pp. 1-9. |
Wu et al., "Multiscale Quantization for Fast Similarity Search", Advances in Neural Information Processing Systems, vol. 30, 2017, pp. 5745-5755. |
Yen et al., "Loss Decomposition for Fast Learning in Large Output Spaces", Proceedings of the 35th International Conference on Machine Learning, vol. 80, 2018, pp. 5640-5649. |
Yu et al., "A Greedy Approach for Budgeted Maximum Inner Product Search", 31st Conference on Neural Information Processing Systems (NIPS), vol. 80, 2017, pp. 1-10. |
Zhang et al., "Composite Quantization for Approximate Nearest Neighbor Search", Proceedings of the 31st International Conference on Machine Learning, 2014, pp. 1-10. |
Zhang et al., "Learning Spread-Out Local Feature Descriptors", IEEE International Conference on Computer Vision ICCV, Venice, Italy, Oct. 22-29, 2017, pp. 1-9. |
Zhang et al., "Sparse Composite Quantization", Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, 2015, pp. 4548-4556. |
Also Published As
Publication number | Publication date |
---|---|
US20200257668A1 (en) | 2020-08-13 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
Ge et al. | Optimized product quantization | |
US8627070B2 (en) | Method and apparatus for variable privacy preservation in data mining | |
US9418101B2 (en) | Query optimization | |
US20180101570A1 (en) | Hierarchical quantization for fast inner product search | |
US11354287B2 (en) | Local orthogonal decomposition for maximum inner product search | |
US20130204905A1 (en) | Remapping locality-sensitive hash vectors to compact bit vectors | |
US11874866B2 (en) | Multiscale quantization for fast similarity search | |
US20180341805A1 (en) | Method and Apparatus for Generating Codebooks for Efficient Search | |
US20200118033A1 (en) | Method for approximate k-nearest-neighbor search on parallel hardware accelerators | |
US10929362B2 (en) | Adaptive query processor for query systems with limited capabilities | |
WO2016142285A1 (en) | Method and apparatus for image search using sparsifying analysis operators | |
US11720565B2 (en) | Automated query predicate selectivity prediction using machine learning models | |
JP2021103557A (en) | Method and device for searching for multi-medium content, electronic device, storage medium, and computer program product | |
US20190370599A1 (en) | Bounded Error Matching for Large Scale Numeric Datasets | |
Yang et al. | Mean-removed product quantization for large-scale image retrieval | |
US10037417B1 (en) | Transformation of network activity data for user identification | |
US11061935B2 (en) | Automatically inferring data relationships of datasets | |
EP3788561A1 (en) | Computational efficiency in symbolic sequence analytics using random sequence embeddings | |
Wu et al. | Local orthogonal decomposition for maximum inner product search | |
US11475032B2 (en) | Analyzing multidimensional process traces under edit-distance constraint | |
US20210357453A1 (en) | Query usage based organization for very large databases | |
Othman et al. | Evaluation of Geo-SPEBH algorithm based on Bandwidth for Big Data retrieval in Cloud Computing | |
US20240119052A1 (en) | Tuning Approximate Nearest Neighbor Search Engines for Speed-Recall Tradeoffs Via Lagrange Multiplier Methods | |
Klicpera et al. | Warpspeed Computation of Optimal Transport, Graph Distances, and Embedding Alignment | |
El Golli | Speeding up the self organizing map for dissimilarity data |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
FEPP | Fee payment procedure |
Free format text: ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: BIG.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NOTICE OF ALLOWANCE MAILED -- APPLICATION RECEIVED IN OFFICE OF PUBLICATIONS |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: PUBLICATIONS -- ISSUE FEE PAYMENT VERIFIED |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |