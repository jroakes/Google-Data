CN108475256B - Generating feature embedding from co-occurrence matrices - Google Patents
Generating feature embedding from co-occurrence matrices Download PDFInfo
- Publication number
- CN108475256B CN108475256B CN201780005009.3A CN201780005009A CN108475256B CN 108475256 B CN108475256 B CN 108475256B CN 201780005009 A CN201780005009 A CN 201780005009A CN 108475256 B CN108475256 B CN 108475256B
- Authority
- CN
- China
- Prior art keywords
- feature
- row
- column
- features
- embedding vector
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/23—Updating
- G06F16/2365—Ensuring data consistency and integrity
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F17/00—Digital computing or data processing equipment or methods, specially adapted for specific functions
- G06F17/10—Complex mathematical operations
- G06F17/16—Matrix or vector computation, e.g. matrix-matrix or matrix-vector multiplication, matrix factorization
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/31—Indexing; Data structures therefor; Storage structures
- G06F16/316—Indexing structures
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/33—Querying
- G06F16/332—Query formulation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/33—Querying
- G06F16/3331—Query processing
- G06F16/334—Query execution
- G06F16/3344—Query execution using natural language analysis
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F18/00—Pattern recognition
- G06F18/20—Analysing
- G06F18/21—Design or setup of recognition systems or techniques; Extraction of features in feature space; Blind source separation
- G06F18/213—Feature extraction, e.g. by transforming the feature space; Summarisation; Mappings, e.g. subspace methods
- G06F18/2134—Feature extraction, e.g. by transforming the feature space; Summarisation; Mappings, e.g. subspace methods based on separation criteria, e.g. independent component analysis
- G06F18/21343—Feature extraction, e.g. by transforming the feature space; Summarisation; Mappings, e.g. subspace methods based on separation criteria, e.g. independent component analysis using decorrelation or non-stationarity, e.g. minimising lagged cross-correlations
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/40—Processing or translation of natural language
- G06F40/42—Data-driven translation
- G06F40/44—Statistical methods, e.g. probability models
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N5/00—Computing arrangements using knowledge-based models
- G06N5/04—Inference or reasoning models
Abstract
Methods and systems, including computer programs encoded on a computer storage medium, for generating a compressed representation from a co-occurrence matrix are described. The method comprises the following steps: obtaining a set of sub-matrices of a co-occurrence matrix, wherein each row of the co-occurrence matrix corresponds to a feature from a first token and each column of the co-occurrence matrix corresponds to a feature from a second token; selecting a sub-matrix, wherein the sub-matrix is associated with a particular row block and column block of the co-occurrence matrix; assigning a respective d-dimensional initial row and initial column embedding vector to each row from the particular row block and each column of a particular column block, respectively; and determining a final row embedding vector and a final column embedding vector by iteratively adjusting the initial row embedding vector and the initial column embedding vector using the co-occurrence matrix.
Description
Technical Field
The present description relates to generating feature embedding from co-occurrence matrices.
Background
To create word embedding, the system attempts to compress the distributed structure of the original language co-occurrence statistics to generate a compact representation that preserves the properties of the original space (original space). For example, the system may implement a matrix decomposition model or samples from a sliding window. The created word embedding may be used for natural language tasks such as determining semantic similarity, parsing, and translation.
Disclosure of Invention
This specification describes methods and systems, including computer programs encoded on computer storage media, for generating feature embedding from co-occurrence matrices.
In general, one innovative aspect of the subject matter described in this specification can be embodied in methods for: obtaining a set of sub-matrices of a feature co-occurrence matrix, wherein each row of the feature co-occurrence matrix corresponds to a feature from a first feature vocabulary and each column of the feature co-occurrence matrix corresponds to a feature from a second feature vocabulary; selecting a sub-matrix from a set of sub-matrices, wherein a sub-matrix is associated with a particular row block of a feature co-occurrence matrix and a particular column block of the feature co-occurrence matrix; assigning a respective d-dimensional initial row-embedding vector to each row from a particular row block and a respective d-dimensional initial column-embedding vector to each column from a particular column block, wherein d represents a predetermined target dimension; and determining a final row embedding vector from each row of the particular row block and a final column embedding vector from each column of the particular column block by iteratively adjusting the initial row embedding vector from the particular row block and the initial column embedding vector from the particular column block using the feature co-occurrence matrix.
Other embodiments of this aspect include corresponding computer systems, apparatus, and computer programs, recorded on one or more computer storage devices, that are each configured to perform the actions of the method. A system of one or more computers may be configured to perform particular operations or actions by way of software, firmware, or any combination thereof installed on the system that, when executed, may cause the system to perform the actions. One or more computer programs may be configured to perform particular operations or actions by virtue of comprising instructions that, when executed by data processing apparatus, cause the apparatus to perform the actions.
The above and other embodiments may each optionally include one or more of the following features, either alone or in combination. In some embodiments, determining a final row embedding vector from each row of the particular row block and a final column embedding vector from each column of the particular column block is performed in parallel for a plurality of sub-matrices in a set of sub-matrices by iteratively adjusting an initial row embedding vector from the particular row block and an initial column embedding vector from the particular column block using the feature co-occurrence matrix.
In some embodiments, selecting a sub-matrix from a set of sub-matrices comprises: a sub-matrix is randomly selected from a set of sub-matrices.
In some embodiments, each d-dimensional initial row embedding vector and each d-dimensional initial column embedding vector has a variance of d according to a mean of 0 and a variance of d-1/2The normal distribution of (a) and the value of the distribution.
In some embodiments, iteratively adjusting the initial row embedding vector from the particular row block and the initial column embedding vector from the particular column block using the co-occurrence matrix comprises: for each iteration: calculating a matrix product of a row embedding vector from a particular row block and a column embedding vector from a particular column block to generate a predictive point-wise mutual information (PMI) value for the selected sub-matrix; comparing the generated predicted PMI value of the selected sub-matrix with the observed PMI value of the selected sub-matrix to determine an error; determining an adjustment to a row embedding vector from a particular row block and a column embedding vector from a particular column block based on the determined error; and adjusting the row embedding vector from the particular row block and the column embedding vector from the particular column block using the determined adjustment.
In some implementations, determining adjustments to the row embedding vector from the particular row block and the column embedding vector from the particular column block based on the determined errors includes: a random gradient descent is performed.
In some embodiments, the observed PMI value is calculated based on the respective i-j th entry of the feature co-occurrence matrix and the respective margin counts for each row feature and each column feature of the feature co-occurrence matrix.
In some embodiments, iteratively adjusting the row embedding vector from the particular row block and the column embedding vector from the particular column block using the co-occurrence matrix is performed until an amount of determined reduction between consecutive determination errors is below a predetermined threshold.
In some embodiments, the method further comprises constructing the set of sub-matrices of the co-occurrence matrix, comprising: obtaining a text corpus; calculating an initial m multiplied by n feature co-occurrence matrix through a text corpus, wherein the initial feature co-occurrence matrix comprises m rows of features and n columns of features; sorting the m rows in descending order of the characteristic frequency and generating m/k row blocks by collecting the sorted m rows into k element row blocks, wherein k is selected based on the target dimension d and the desired computational efficiency; ordering the n columns in decreasing order of the characteristic frequency and generating a block of n/k columns by collecting the ordered n columns into a block of k element rows; and constructing a set of mn @'s of the mxn feature co-occurrence matrixk2A sub-matrix comprising: for each row block and column block pair, a k × k sub-matrix is constructed from the m × n feature co-occurrence matrix by selecting the appropriate entry of the m × n feature co-occurrence matrix.
In some embodiments, the i-j-th entries of the initial m n feature co-occurrence matrix represent observed co-occurrence counts of row features i and column features j, and each i-j-th entry of the initial m n feature co-occurrence matrix takes a value greater than or equal to zero.
In some embodiments, the value of the i-j entry of the initial m × n feature co-occurrence matrix is greater than 0, and comparing the generated predicted PMI value of the selected sub-matrix with the observed PMI value of the selected sub-matrix to determine the error comprises: a weighted square error between the predicted PMI value and the observed PMI value for feature i and feature j is calculated.
In some embodiments, the weighted squared error is adjusted by a confidence function, wherein the confidence function increases or decreases the calculated error depending on the confidence of the i-j-th entry of the initial m n feature co-occurrence matrix.
In some embodiments, the confidence function is a linear transformation of the i-j-th entry of the initial m n feature co-occurrence matrix.
In some embodiments, the i-j entries of the initial m × n feature co-occurrence matrix are equal to 0, and comparing the generated predicted PMI values of the selected sub-matrix with the observed PMI values of the selected sub-matrix to determine the error comprises: a soft hinge error is applied to the predicted PMI value.
In some embodiments, the method further comprises: the phantom PMI is calculated by: the i-j entries of the initial m × n feature co-occurrence matrix are set and an asymmetric cost function is used that penalizes overestimation of the phantom PMI.
In some embodiments, the elements of an m/k row block are generated by selecting rows that are congruence mod m/k, and the elements of an n/k column block are generated by selecting columns that are congruence mod m/k.
In some implementations, the features from the first and second feature vocabulary include words or word strings of a particular language.
In some embodiments, the first token table is different from the second token table for the column token.
The subject matter described in this specification can be implemented as specific embodiments to realize one or more of the following advantages.
As described in this specification, a system that generates feature embeddings from a feature co-occurrence matrix can be used to generate low-dimensional feature embeddings that more accurately represent the original feature space than feature embeddings generated by other feature embedding systems. For example, other feature embedding systems typically generate feature embedding based on observed co-occurrences between features. However, as described in this specification, a system that generates feature embedding from a feature co-occurrence matrix generates feature embedding based on both observed co-occurrences and non-observed co-occurrences. This enables the system to identify anti-associations between features-increasing the amount of relevant information used to generate the feature embedding and thus improving the accuracy and completeness of the generated feature embedding.
As described in this specification, a system that generates feature embedding from a feature co-occurrence matrix may be more computationally efficient than other feature embedding systems. For example, the system described in this specification may require less computing time to generate comparable, if not better, accurate feature insertions than other feature embedding systems. For example, the system described in this specification can perform a complete matrix multiplication between thousands of row and column embeddings simultaneously, while generating predictions of millions of individual point-by-point mutual information values. This may allow the system to take full advantage of the computational power of modern GPUs and vectorized CPU hardware.
In addition, to achieve greater computational efficiency, the system described in this specification can be configured to apply a method in which an original feature co-occurrence matrix (which can contain millions of rows and millions of columns) is divided into smaller sub-matrices that can be sized for optimization operations on a single compute node (typically thousands of rows and thousands of columns). This allows the computation for generating feature embeddings to be distributed across computer clusters, resulting in an efficient way of learning embeddings by all values in the feature co-occurrence matrix.
As described in this specification, the system for generating feature embedding from a feature co-occurrence matrix is not aware of both the domain from which the features are extracted and the exact set of features used. Furthermore, the token tables for the rows of the co-occurrence matrix need not be the same as the token tables for the columns of the co-occurrence matrix.
Unlike other systems that generate feature embeddings, the computational requirements of the system described in this specification depend on the size of the feature co-occurrence matrix used to generate the feature embeddings, rather than the size of the feature set from which the features are sampled. This means that the systems and methods described in this specification can be applied to larger corpora than other systems and methods, resulting in higher quality word embedding.
As described in this specification, a system for generating feature embedding from a feature co-occurrence matrix provides an improvement in the scale on which other systems that generate feature embedding operate. For example, the system described in this specification can take into account very detailed features that rarely occur individually (e.g., 4 grams and 5 grams for language models, syntactic paths), and therefore require a large amount of textual data from which to gather accurate statistics. In addition, the systems and methods described in this specification can efficiently generate and apply feature embedding models that contain tens of millions of features.
The details of one or more embodiments of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
Drawings
FIG. 1 illustrates an example feature embedding system.
FIG. 2 is a flow diagram of an example process for generating feature embedding from a feature co-occurrence matrix.
FIG. 3 is a flow diagram of an example process for building a set of sub-matrices of a feature co-occurrence matrix.
FIG. 4 is a flow diagram of an example iteration of adjusting a current set of row embedding vectors and a current set of subsequent column embedding vectors of a selected sub-matrix using a feature co-occurrence matrix.
Like reference numbers and designations in the various drawings indicate like elements.
Detailed Description
This specification describes methods and systems for generating low-dimensional feature embedding from a feature co-occurrence matrix.
Example features include words of a particular language, word strings of a particular language, or syntactic paths between words. For example, the methods and systems may be used to generate (or "train") low-dimensional vector representations of words, which in turn may also be used to perform natural language processing tasks, including determining semantic similarity, parsing, or translation. The co-occurrence of such features may include the number of times a word or word string appears directly next to another word or word string, the number of times a word appears with a particular syntactic function, or the number of times a word or word string appears with a particular syntactic function.
Further example features may be obtained from domains other than words or languages. For example, a feature may include a group of videos, a group of products, or a group of people. The co-occurrence of such features may include the number of times different people have viewed different videos or the number of times different people have purchased different products.
In general, feature co-occurrences may be represented by a feature co-occurrence matrix. The feature co-occurrence matrix may be a matrix of: its entries represent statistical data describing how features from one or more feature vocabulary co-occur. For example, for a corpus of text that includes the sentences "curiosity killed cat" and "the cat sat on the mat," a feature co-occurrence matrix may be used to represent statistical data that describes how words in the corpus of text co-occur. For example, the feature co-occurrence matrix of the words "the" and "cat" may be given by the following matrix.
the | cat | sat | on | mat | curiosity | killed | |
the | 0 | 2 | 0 | 0 | 1 | 0 | 0 |
cat | 0 | 0 | 1 | 0 | 0 | 0 | 0 |
The example feature co-occurrence matrix shows that in the text corpus the word "cat" occurs twice after the word "the," sat "occurs once after" cat, "and" mat "occurs once after" the. The feature matrix for a large corpus of text can be very large, e.g., with millions of entries.
FIG. 1 illustrates an example feature embedding system 100. The feature embedding system 100 is an example of a system implemented as a computer program on one or more computers at one or more locations, in which the systems, components, and techniques described below may be implemented.
Feature embedding system 100 is a system that receives input data representing a feature co-occurrence matrix, such as feature co-occurrence matrix 102. A feature co-occurrence matrix is a matrix whose entries represent statistical data describing how features from one or more feature vocabulary co-occur. For example, each row of the feature co-occurrence matrix 102 may correspond to a feature from a first feature vocabulary and each column of the feature co-occurrence matrix 102 may correspond to a feature from a second feature vocabulary. The first token may be different from the second token. In some implementations, the received input data may include high dimensional data, such as a feature co-occurrence matrix having millions of entries.
The features in the feature vocabulary may be stored in an input data repository (e.g., input data repository 104). By way of example, the input data repository 104 may include a corpus of text. In this example, the feature vocabulary may include a vocabulary of words in a particular language, a vocabulary of word strings in a particular language, or a vocabulary of syntactic paths between words appearing in the text corpus.
Feature embedding system 100 generates output data that represents a feature embedding vector (e.g., embedding vector 106). The generated feature embedding vectors 106 may comprise low-dimensional feature embedding vectors, i.e., compact feature representations that preserve the properties of the original feature space represented by the feature co-occurrence matrix 102. Continuing with the above example, the text corpus comprising the sentences "curriculum kill the cat" and "the cat sat on the mat" may be, for example, a text corpus of english words and sentences obtained from books or other resources. Thus, a corpus of text may include a list of feature words of millions of different words, where each word is represented by a feature vector whose size depends on the size of the list of feature words (e.g., a feature vector with millions of entries). In this example, the feature embedding system 100 may be configured to generate output data representing a feature embedding vector having a size below that of the feature vocabulary, e.g., a feature vector having hundreds of entries instead of millions of entries.
The feature embedding system 100 may be configured to store the generated low-dimensional feature embedding vector 106, for example, in an output data repository 108, or to provide the low-dimensional feature embedding vector for some other direct purpose. For example, the generated low-dimensional feature embedding vectors 108 may be stored and/or provided for use in a natural language processing system, an image classification system, or other machine learning model. In general, feature embedding can be used as the basis for machine learning models. In examples where the features represented by the generated feature embedding vectors are words, the feature embedding vectors may capture basic language features that may be leveraged by a machine learning model. Because the generated feature embedding vectors are low-dimensional, it may be easier to build a machine learning model using the generated feature embedding vectors than to build a machine learning model using high-dimensional feature embedding vectors. In the text domain, feature embedding can be used to analyze text sentiment, queries with similar intent, words with similar meaning, words in different languages with similar meaning, and the like. In other fields, feature embedding may be used to identify users, similar products, similar artists, movies, songs, etc. that have similar preferences.
The feature embedding system 100 is configured to obtain a set of sub-matrices of the feature co-occurrence matrix 102, wherein each sub-matrix corresponds to a particular row block of the feature co-occurrence matrix 102 and a particular column block of the feature co-occurrence matrix 102. Optionally, feature embedding system 100 may include a sub-matrix construction module, such as sub-matrix construction module 110, configured to construct a set of sub-matrices of feature co-occurrence matrix 102. The set of sub-matrices that construct the feature co-occurrence matrix is described in detail below with reference to fig. 3.
Feature embedding system 100 includes a component for generating feature embedding vectors, such as feature embedding vector generator 112. Feature embedding vector generator 112 is configured to select a sub-matrix from a set of sub-matrices and assign a respective d-dimensional initial row embedding vector to each row from a particular row block and a respective d-dimensional initial column embedding vector to each column from a particular column block, where d represents a predetermined target dimension.
The feature embedding vector generator 112 is further configured to determine a final row embedding vector from each row of the particular row block and a final column embedding vector from each column of the particular column block by iteratively adjusting the initial row embedding vector from the particular row block and the initial column embedding vector from the particular column block using the feature co-occurrence matrix 102. The final row embedding vector and the final column embedding vector may be combined to produce an embedded vector output 106. The generation of feature embedding vectors 106 from feature co-occurrence matrix 102 is described in more detail below with reference to fig. 2 and 4.
FIG. 2 is a flow diagram of an example process for generating feature embedding from a feature co-occurrence matrix. For convenience, process 200 is described as being performed by a system of one or more computers located in one or more locations. For example, a system configured for feature embedding, such as feature embedding system 100 of FIG. 1, suitably programmed in accordance with the present description, may perform process 200.
The system obtains a set of sub-matrices of the feature co-occurrence matrix (step 202). A feature co-occurrence matrix is a matrix whose entries represent statistical data describing how features from one or more feature vocabulary co-occur at a given offset. For example, the ijth entry of the feature co-occurrence matrix may represent the observed co-occurrence count of matrix row feature i and matrix column feature j.
Example features include words of a particular language, such as a set of english words, word strings of a particular language, such as the string "United States of America," or syntactic paths between words. The feature co-occurrence matrix may then indicate the number of times a word or word string appears directly next to another word or word string, the number of times a word appears with a particular syntactic function, or the number of times a word or word string appears with a particular syntactic function.
Further example features may be obtained from domains other than words or languages. For example, a feature may include a set of videos and a set of people that form a corresponding feature vocabulary. In this example, the feature co-occurrence matrix may indicate the number of times different people viewed different videos, e.g., how often people viewing a first video also viewed a second video. As another example, a feature may include a set of products that make up a corresponding feature vocabulary. In this example, the feature co-occurrence matrix may indicate the number of times different people purchased different products, e.g., how often people who purchased the first product also purchased the second video.
In general, the feature co-occurrence matrix may be an m × n matrix, where each row of the feature co-occurrence matrix corresponds to a feature from a first feature vocabulary and each column of the feature co-occurrence matrix corresponds to a feature from a second feature vocabulary. In some embodiments, the first token may be different from the second token, for example, where a token co-occurrence matrix is used to indicate how often some words appear directly next to certain phrases, or how often some people watch certain videos.
The number of sub-matrices in a set of sub-matrices and the size of sub-matrices in a set of sub-matrices depends on the size of the feature co-occurrence matrix (e.g., depends on m and n) and on the predetermined target dimensions of the row embedding vectors and the column embedding vectors. In some embodiments, the system may be configured to construct a set of sub-matrices, for example, using the sub-matrix construction module described in fig. 1. The set of sub-matrices that build the feature co-occurrence matrix is described in more detail below with reference to fig. 3.
The system selects a sub-matrix from a set of sub-matrices (step 204). A sub-matrix is a matrix associated with a particular row block of the feature co-occurrence matrix and a particular column block of the feature co-occurrence matrix. For example, a 2 x 2 sub-matrix selected from the top left corner of the m x n feature co-occurrence matrix may be associated with a row block comprising the first two rows of the feature co-occurrence matrix and the first two columns of the feature co-occurrence matrix. In some embodiments, the system may randomly select a sub-matrix from a set of sub-matrices, e.g., according to a uniform distribution.
The system assigns a respective d-dimensional initial row-embedding vector to each row from a particular row block and a respective d-dimensional initial column-embedding vector to each column from a particular column block (step 206). In some embodiments, d is a predetermined target dimension. In general, low values of the d-dimensional initial row and column embedding vectors may produce compact but chaotic (noise) feature embedding vectors. High values for the d-dimensional initial row embedding vector and the initial column embedding vector may result in a less compact but more granular feature embedding vector. Thus, the predetermined target dimension may be selected based on various factors including, but not limited to: the size of the feature co-occurrence matrix, the type of features represented by the feature co-occurrence matrix, the computing hardware used to perform process 200, or the context in which the generated feature embedding vector is to be usedScene as described above with reference to figure 1. In some embodiments, each d-dimensional initial row embedding vector and each d-dimensional initial column embedding vector has a variance of d according to a mean of 0 and a variance of d-1/2The normal distribution of (a) and the value of the distribution.
The system uses the feature co-occurrence matrix to determine a final row embedding vector from each row of the particular row block and a final column embedding vector from each column of the particular column block (step 208). The final row embedding vector and the final column embedding vector may comprise low-dimensional feature embedding vectors of the feature co-occurrence matrix.
The system determines a final row embedding vector from the particular row block and a final column embedding vector from the particular column block by iteratively adjusting the initial row embedding vector and the initial column embedding vector using the feature co-occurrence matrix. In some embodiments, this may include: the initial row embedding vector and the initial column embedding vector are iteratively adjusted using the feature co-occurrence matrix until a determined lower drop between successively determined errors is below a predetermined threshold. An example iteration of adjusting an initial row embedding vector and an initial column embedding vector using a feature co-occurrence matrix is described below with reference to fig. 4.
In some implementations, the system can determine a final row embedding vector from each row of the particular row block and a final column embedding vector from each column of the particular column block by iteratively adjusting an initial row embedding vector from the particular row block and an initial column embedding vector from the particular column block in parallel for a plurality of sub-matrices in a set of sub-matrices using the feature co-occurrence matrix. For example, the system may perform steps 204 through 208 described above in parallel for multiple sub-matrices of the feature co-occurrence matrix.
The determined final row embedding vector and final column embedding vector may be provided for use in conjunction with a system for generating and processing feature embedding (e.g., a natural language processing system). For example, the generated word or phrase embedding may be used to represent the corresponding word or phrase in a machine learning system used to determine semantic similarity, parsing, or translation.
In the case of extracting row and column features from the same vocabulary, the system may select a set of final embedded vectors by selecting only row embedded vectors and discarding column embedded vectors, or vice versa. Alternatively, the system may concatenate the row embedding features and the column embedding features of the corresponding entry to obtain an embedding vector having a value of 2 × d for each entry. Alternatively, the system may average the row embedding and column embedding element by element for the corresponding entry.
FIG. 3 is a flow diagram of an example process for building a set of sub-matrices of a feature co-occurrence matrix. For convenience, the example process is described as a set of sub-matrices that construct a feature co-occurrence matrix for a corpus of text. However, in some implementations, the process 300 may be used to construct sub-matrices of feature co-occurrence matrices for other scenarios, such as videos or images. Process 300 will be described as being performed by a system of one or more computers located in one or more locations. For example, a system configured to perform feature embedding, e.g., feature embedding system 100 including sub-matrix building module 110 of FIG. 1, suitably programmed in accordance with the present description, may perform process 300.
The system may obtain a corpus of text (step 302). For example, a text corpus may include a portion of a web page, a portion of one or more books, or a plurality of search queries. In other examples, the system may also obtain a set of videos, images, or other features or dimensions of interest.
The system computes an initial m n feature co-occurrence matrix from the corpus of text (step 304). The initial feature co-occurrence matrix may include m row features and n column features.
As described above with reference to FIG. 2, the i-j-th entry of the initial m n feature co-occurrence matrix may represent the observed co-occurrence of row feature i with column feature j. For example, if m rows of features are words of a particular language and n columns of features are word strings, the entries of the m n feature co-occurrence matrix may represent the number of times the m-words and n-word strings co-occur in the text corpus. As another example, where the system obtains a set of videos viewed by an online user in step 302 instead of a text corpus, m rows of features may represent the online video and n columns of features may represent the online user. The entries of the m n feature co-occurrence matrix may then represent the number of times the online user viewed the video.
The system ranks the m rows of the initial feature co-occurrence matrix in descending order of feature frequency (step 306). The system may then generate an m/k line block by collecting the rank-ordered m lines into a k element line block. In some implementations, k is selected based on the target dimensions of the row and column embedding vectors and the desired computational efficiency. For example, k may be set to maximize utilization of the hardware used to generate the feature embedding.
The system ranks the n columns of the initial feature co-occurrence matrix in descending order of feature frequency (step 308). The system may then generate n/k column blocks by collecting the rank-ordered n columns into k element row blocks.
In some embodiments, the elements of an m/k row block may be generated by selecting rows that are congruence mod m/k. Also, the elements of an m/k column block may be generated by selecting columns that are congruence mod m/k. For example, if there is 2 in the initial m × n feature co-occurrence matrix25The total number row of (2), e.g. k 4096, may be selected every 2 nd258,192 rows to form a row block: the first row of tiles contains row (0, 8192, 16384 … …), the second row of tiles contains row (1, 8193, 16385 … …), and so on. In this way, the system arranges the rows according to frequency. This construction may therefore result in each row block containing a mixture of common and rare row features.
The system constructs a set of mn @'s of mxn feature co-occurrence matricesk2The submatrices (step 310). The system constructs a set of mn @' sub-matrices by constructing a k x k sub-matrix from the m x n feature co-occurrence matrices for each row block and column block pair by selecting the appropriate (e.g., corresponding) entries of the generated m x n feature co-occurrence matricesk2A sub-matrix.
FIG. 4 is a flow diagram of an example iteration 400 of adjusting a current set of row embedding vectors and a current set of subsequent column embedding vectors of a selected sub-matrix using a feature co-occurrence matrix. For example, iteration 400 may be performed on the initial set of row embedding vectors and the initial set of column embedding vectors, as described above with reference to fig. 2. For convenience, process 400 will be described as being performed by a system of one or more computers located in one or more locations. For example, a system configured for feature embedding, e.g., feature embedding system 100 of FIG. 1, suitably programmed in accordance with the present description, may perform process 400.
The system calculates a matrix product of a current row embedded vector from a particular row block and a current column embedded vector from a particular column block to generate a predicted point-wise mutual information (PMI) value for the selected sub-matrix (step 402).
The system compares the generated predicted PMI value for the selected sub-matrix with the observed PMI value for the selected sub-matrix to determine an error (step 404). The observed PMI value may be calculated based on: the corresponding i-j entry of the feature co-occurrence matrix and the corresponding margin count for each row feature of the feature co-occurrence matrix-e.g., xi*＝∑jxijWherein x isijRepresenting each entry of the feature co-occurrence matrix, and a marginal count, e.g., x, of each column feature of the feature co-occurrence matrix*j＝∑ixijWherein x isijEach entry of the feature co-occurrence matrix is represented.
As described above with reference to step 304 of FIG. 3, in some embodiments, each i-j entry of the m n feature co-occurrence matrix may take a value greater than or equal to zero. For example, the entries of the feature co-occurrence matrix may be zero if no co-occurrence is observed, or greater than zero if co-occurrence is observed. In the case where the value of the i-j entry of the initial m × n feature co-occurrence matrix is greater than 0, the system may compare the generated predicted PMI value of the selected sub-matrix with the observed PMI value of the selected sub-matrix to determine an error by calculating a weighted square error between the predicted PMI value and the observed PMI value of the feature i and the feature j.
The calculated weighted square error is adjusted by a confidence function that increases or decreases the calculated error depending on the confidence of the i-j-th entry of the initial m n feature co-occurrence matrix. In some embodiments, the confidence function is a linear transformation of the i-j-th entry of the initial m n feature co-occurrence matrix. Example confidence functions include, but are not limited to
In the case where the value of the i-j entry of the initial m × n feature co-occurrence matrix is equal to 0, the system may compare the generated predicted PMI value of the selected sub-matrix with the observed PMI value of the selected sub-matrix to determine an error by applying a soft hinge error (soft change error) (e.g., a derivative inverse of the sigmoid function) to the predicted PMI value. Applying a soft hinge error to the predicted PMI value avoids the system from overestimating the PMI. For example, the system may calculate a "phantom" PMI by: the i-j entries of the initial m × n feature co-occurrence matrix are set and an asymmetric cost function is used that penalizes overestimation of the phantom PMI. The system uses information about unobserved co-occurrences by considering the case where the value of the i-j-th entry of the initial m n feature co-occurrence matrix is equal to 0. Such information can be important and improve the accuracy of the generated feature embedding, for example, when considering rarely occurring features. For example, where the features include movies that a particular person has watched, an unobserved co-occurrence between two movies may be used to indicate that the two movies have different genres or styles.
The system determines an adjustment to the current row embedding vector from the particular row block and the current column embedding vector from the particular column block based on the determined errors (step 406). In some implementations, the system performs a random gradient descent to determine adjustments to the current row embedding vector and the current column embedding vector, e.g., by calculating a gradient of an error function relative to the input embedding vector.
The system adjusts the current row embedding vector from the particular row block and the current column embedding vector from the particular column block using the determined adjustments to generate a subsequent row embedding vector and a subsequent column embedding vector (step 408). As described above with reference to fig. 2, in some embodiments, the system may iteratively adjust the initial row embedding vector and the subsequent row embedding vector and the initial column embedding vector and the subsequent column embedding vector using the feature co-occurrence matrix until a determined drop between successively determined errors is below a predetermined threshold.
The methods and systems described in this specification can include or be used in conjunction with other systems for generating and processing feature embeddings (e.g., natural language processing systems). For example, the system may obtain a corpus of text, e.g., a set of text in the english language, and determine corresponding characteristic word lists for words or word strings ("phrases"). The feature vocabulary may be used to construct a feature co-occurrence matrix, which in turn may be parsed into segments and used to construct the corresponding set of sub-matrices described above. The constructed set of sub-matrices may be used for word or phrase embedding to generate a characteristic vocabulary. The generated word embedding may be used or processed in a natural language processing system. For example, word or phrase embedding may be used to represent a corresponding word or phrase in a natural network system. As another example, word or phrase embedding may be used to represent features of a corresponding word in a machine learning model.
Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, in tangibly embodied computer software or firmware, in computer hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a tangible, non-transitory program carrier for execution by, or to control the operation of, data processing apparatus. Alternatively or in addition, the program instructions may be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by data processing apparatus. The computer storage medium may be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, or a combination of one or more of them. However, computer storage media do not include propagated signals.
The term "data processing apparatus" encompasses various apparatuses, devices, and machines for processing data, including: such as a programmable processor, a computer, or multiple processors or computers. An apparatus may comprise special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). In addition to hardware, the apparatus may further include: the code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
A computer program (which may also be referred to or described as a program, software application, module, software module, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
As used herein, an "engine" or "software engine" refers to a software-implemented input/output system that provides output that is different from input. The engine may be a coded function block, such as a library, platform, software development kit ("SDK"), or object. Each engine may be implemented on any suitable type of computing device, for example, a server including one or more processors and computer-readable media, a mobile phone, a tablet computer, a notebook computer, a music player, an e-book reader, a laptop or desktop computer, a PDA, a smart phone, or other fixed or portable device. In addition, two or more engines may be implemented on the same computing device or on different computing devices.
The processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
Computers suitable for the execution of a computer program include, for example, central processing units that may be based on, general or special purpose microprocessors or both, or any other kind of central processing unit. Generally, a central processing unit will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a central processing unit for performing or executing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such a device. Further, a computer may be embedded in another device, e.g., a mobile phone, a Personal Digital Assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a Universal Serial Bus (USB) flash drive), to name a few.
Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including: for example, semiconductor memory devices (e.g., EPROM, EEPROM, and flash memory devices), magnetic disks (e.g., internal hard disk or removable disk), magneto-optical disks, CD-ROM disks, and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer. Other kinds of devices may also be used to provide for interaction with a user; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, the computer may interact with the user by sending documents to and receiving documents from the device used by the user; for example, by sending a web page to a web browser on the user's client device in response to a request received from the web browser.
Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front-end component (e.g., a client computer having a graphical user interface or a web browser through which a user can interact with an implementation of the subject matter described in this specification), or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network ("LAN") and a wide area network ("WAN"), e.g., the Internet.
The computing system may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any inventions or of what may be claimed, but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments (contexts) can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Also, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system modules and components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
Specific embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example, the processes illustrated in the figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some embodiments, multitasking and parallel processing may be beneficial.
Claims (24)
1. A computer-implemented method, comprising:
obtaining a set of sub-matrices of a feature co-occurrence matrix, wherein each row of the feature co-occurrence matrix corresponds to a feature from a first feature vocabulary and each column of the feature co-occurrence matrix corresponds to a feature from a second feature vocabulary;
selecting a sub-matrix from the set of sub-matrices, wherein the sub-matrix is associated with a particular row block of the feature co-occurrence matrix and a particular column block of the feature co-occurrence matrix;
assigning a respective d-dimensional initial row-embedding vector to each feature corresponding to a row from the particular row block and a respective d-dimensional initial column-embedding vector to each feature corresponding to a column from the particular column block, wherein d represents a predetermined target dimension; and
determining a final row embedding vector for each feature corresponding to a row from the particular row block and a final column embedding vector for each feature corresponding to a column from the particular column block by iteratively adjusting the initial row embedding vector from the particular row block and the initial column embedding vector from the particular column block using the feature co-occurrence matrix, including at each iteration:
calculating a matrix product of a row embedding vector of features corresponding to a row of the particular row block and a column embedding vector of features corresponding to a column of the particular column block to generate respective predictive pointwise mutual information PMI values that include each pair of features of (i) features corresponding to a row from the particular row block and (ii) features corresponding to a column from the particular column block;
determining from the feature co-occurrence matrix observed PMI values for each pair of features that includes (i) features corresponding to rows from the particular row block and (ii) features corresponding to columns from the particular column block;
for each pair of features that includes (i) features corresponding to rows from the particular row block and (ii) features corresponding to columns from the particular column block, determining an error between an observed PMI value of the pair of features and a predicted PMI value of the pair of features; and
for each pair of features that includes (i) features corresponding to a row from the particular row block and (ii) features corresponding to a column from the particular column block, a row embedding vector for a row in the pair of features and a column embedding vector for a column in the pair of features are adjusted based on an error between an observed PMI value of the pair of features and a predicted PMI value of the pair of features.
2. The method of claim 1, further comprising: providing one or more of the final row embedding vector or the final column embedding vector as input to a natural language processing system for performing a natural language processing task.
3. The method of claim 1, further comprising performing a natural language processing task based on the received input using the final row embedding vector, the final column embedding vector, or both in a natural language processing system.
4. The method of claim 1, wherein determining a final row embedding vector from each row of the particular row block and a final column embedding vector from each column of the particular column block by iteratively adjusting the initial row embedding vector from the particular row block and the initial column embedding vector from the particular column block using the feature co-occurrence matrix is performed in parallel for a plurality of sub-matrices of the set of sub-matrices.
5. The method of claim 1, wherein selecting a sub-matrix from the set of sub-matrices comprises: randomly selecting a sub-matrix from the set of sub-matrices.
6. The method of claim 1, wherein each d-dimensional initial row embedding vector and each d-dimensional initial column embedding vector has a mean of 0 and a variance of d-1/2The normal distribution of (a) to (b).
7. The method of claim 1, wherein adjusting, for each pair of features that includes (i) features corresponding to a row from the particular row block and (ii) features corresponding to a column from the particular column block, a row embedding vector for the row in the pair of features and a column embedding vector for the column in the pair of features based on an error between an observed PMI value of the pair of features and a predicted PMI value of the pair of features comprises:
determining an adjustment to a row embedding vector for a row in the pair of features and a column embedding vector for a column in the pair of features based on the determined error for the pair of features; and
the determined adjustment is used to adjust a row embedding vector for a row in the pair of features and a column embedding vector for a column in the pair of features.
8. The method of claim 7, wherein determining adjustments to a row embedding vector for a row in the pair of features and a column embedding vector for a column in the pair of features comprises: a random gradient descent is performed.
9. The method of claim 7, wherein the observed PMI value is calculated based on respective entries of the feature co-occurrence matrix corresponding to the pair of features and respective margin counts of rows of the pair of features and columns in the pair of features.
10. The method of claim 1, wherein iteratively adjusting a row embedding vector from the particular row block and a column embedding vector from the particular column block using the feature co-occurrence matrix is performed until a determined amount of reduction between consecutive determined errors is below a predetermined threshold.
11. The method of claim 1, further comprising constructing the set of sub-matrices of the feature co-occurrence matrix, comprising:
obtaining a text corpus;
calculating an initial feature co-occurrence matrix through the text corpus, wherein the initial feature co-occurrence matrix comprises m rows of features and n columns of features;
sorting the m rows in descending order of characteristic frequency and generating m/k row blocks by collecting the sorted m rows into k element row blocks, where k is selected based on the target dimension d and a desired computational efficiency;
sorting the n columns in descending order of characteristic frequency and generating n/k column blocks by collecting the sorted n columns into k element row blocks; and
constructing a group of mn submatrices of the feature co-occurrence matrix, comprising: for each row block and column block pair, a sub-matrix is constructed from the feature co-occurrence matrix by selecting the appropriate entry of the feature co-occurrence matrix.
12. The method of claim 1, wherein:
the i-j entries of the feature co-occurrence matrix represent observed co-occurrence counts of row features i and column features j, and
each i-j entry of the feature co-occurrence matrix takes a value greater than or equal to zero.
13. The method of claim 12, wherein determining an error between an observed PMI value for the pair of features and a predicted PMI value for the pair of features when a value of an i-j entry of the feature co-occurrence matrix corresponding to the pair of features is greater than 0 comprises: calculating a weighted square error between the predicted PMI value and the observed PMI value.
14. The method of claim 13, wherein the calculated weighted square error is adjusted by a confidence function, wherein the confidence function increases or decreases the calculated error depending on the confidence of the i-j entry of the feature co-occurrence matrix.
15. The method of claim 14, wherein the confidence function is a linear transformation of the i-j entries of the feature co-occurrence matrix.
16. The method of claim 12, wherein determining the error when the i-j entry corresponding to the pair of features of the feature co-occurrence matrix is equal to 0 comprises: applying a soft hinge error to the predicted PMI value.
17. The method of claim 12, comprising: calculating the phantom PMI by setting the i-j-th entry of the feature co-occurrence matrix to 1 and using an asymmetric cost function that penalizes overestimation of phantom PMI.
18. The method of claim 11, wherein:
the elements of the m/k line block are generated by selecting lines that are congruence mod m/k, and
the elements of the n/k column block are generated by selecting columns that are congruence mod m/k.
19. The method of claim 1, further comprising: the determined final row embedding vector and final column embedding vector are processed by a natural language processing system.
20. The method of claim 19, wherein processing the determined final row and column embedding vectors by a natural language processing system comprises an operation selected from the group consisting of: semantic similarity, parsing and translation are determined.
21. The method of claim 1, wherein the features from the first and second feature vocabulary include words or word strings of a particular language.
22. The method of claim 21, wherein the first list of feature words is different from the second list of feature words for column features.
23. A computer system comprising one or more computers and one or more storage devices storing instructions that, when executed by the one or more computers, cause the one or more computers to perform operations of the method of any of claims 1-22.
24. One or more computer storage media encoded with instructions that, when executed by one or more computers, cause the one or more computers to perform operations of the method of any of claims 1-22.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201662291956P | 2016-02-05 | 2016-02-05 | |
US62/291,956 | 2016-02-05 | ||
PCT/US2017/016431 WO2017136674A1 (en) | 2016-02-05 | 2017-02-03 | Generating feature embeddings from a co-occurrence matrix |
Publications (2)
Publication Number | Publication Date |
---|---|
CN108475256A CN108475256A (en) | 2018-08-31 |
CN108475256B true CN108475256B (en) | 2022-04-08 |
Family
ID=58266189
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201780005009.3A Active CN108475256B (en) | 2016-02-05 | 2017-02-03 | Generating feature embedding from co-occurrence matrices |
Country Status (4)
Country | Link |
---|---|
US (1) | US10685012B2 (en) |
EP (1) | EP3377983A1 (en) |
CN (1) | CN108475256B (en) |
WO (1) | WO2017136674A1 (en) |
Families Citing this family (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10614109B2 (en) * | 2017-03-29 | 2020-04-07 | International Business Machines Corporation | Natural language processing keyword analysis |
WO2019126030A1 (en) * | 2017-12-18 | 2019-06-27 | Mythic, Inc. | Systems and methods for mapping matrix calculations to a matrix multiply accelerator |
JP7247460B2 (en) * | 2018-03-13 | 2023-03-29 | 富士通株式会社 | Correspondence Generating Program, Correspondence Generating Device, Correspondence Generating Method, and Translation Program |
CN109065034B (en) * | 2018-09-25 | 2023-09-08 | 河南理工大学 | Infant crying translation method based on voice feature recognition |
US11373042B2 (en) * | 2018-12-13 | 2022-06-28 | Baidu Usa Llc | Embeddings with classes |
EP3968207A1 (en) * | 2020-09-09 | 2022-03-16 | Tata Consultancy Services Limited | Method and system for sustainability measurement |
CN112732915A (en) * | 2020-12-31 | 2021-04-30 | 平安科技（深圳）有限公司 | Emotion classification method and device, electronic equipment and storage medium |
Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN104636424A (en) * | 2014-12-02 | 2015-05-20 | 南昌大学 | Method for building literature review framework based on atlas analysis |
Family Cites Families (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9129300B2 (en) * | 2010-04-21 | 2015-09-08 | Yahoo! Inc. | Using external sources for sponsored search AD selection |
US8886533B2 (en) * | 2011-10-25 | 2014-11-11 | At&T Intellectual Property I, L.P. | System and method for combining frame and segment level processing, via temporal pooling, for phonetic classification |
US8935308B2 (en) * | 2012-01-20 | 2015-01-13 | Mitsubishi Electric Research Laboratories, Inc. | Method for recovering low-rank matrices and subspaces from data in high-dimensional matrices |
US9430563B2 (en) * | 2012-02-02 | 2016-08-30 | Xerox Corporation | Document processing employing probabilistic topic modeling of documents represented as text words transformed to a continuous space |
EP2817737A4 (en) * | 2012-02-22 | 2015-10-07 | Nokia Technologies Oy | Adaptive system |
US10599697B2 (en) * | 2013-03-15 | 2020-03-24 | Uda, Llc | Automatic topic discovery in streams of unstructured data |
US10931633B2 (en) * | 2015-12-10 | 2021-02-23 | Verisign, Inc. | Syntactically and/or semantically relevant alternative domain name generation |
-
2017
- 2017-02-03 WO PCT/US2017/016431 patent/WO2017136674A1/en active Application Filing
- 2017-02-03 CN CN201780005009.3A patent/CN108475256B/en active Active
- 2017-02-03 EP EP17710076.5A patent/EP3377983A1/en active Pending
- 2017-02-03 US US15/424,671 patent/US10685012B2/en active Active
Patent Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN104636424A (en) * | 2014-12-02 | 2015-05-20 | 南昌大学 | Method for building literature review framework based on atlas analysis |
Non-Patent Citations (2)
Title |
---|
Word Embedding Revisited: A New Representation Learning and Explicit Matrix Factorization Perspective;Yitan Li et al.;《Proceedings of the Twenty-Fourth International Joint Conference on Artificial Intelligence (IJCAI 2015)》;20150725;第3650-3656页 * |
基于词共现的概念图自动构建研究;张会平 等;《情报理论与实践》;20081231;第31卷(第6期);第903页，第928-930页 * |
Also Published As
Publication number | Publication date |
---|---|
US20170228414A1 (en) | 2017-08-10 |
CN108475256A (en) | 2018-08-31 |
WO2017136674A1 (en) | 2017-08-10 |
EP3377983A1 (en) | 2018-09-26 |
US10685012B2 (en) | 2020-06-16 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN108475256B (en) | Generating feature embedding from co-occurrence matrices | |
US11550871B1 (en) | Processing structured documents using convolutional neural networks | |
US9514405B2 (en) | Scoring concept terms using a deep network | |
EP3234871B1 (en) | Generating numeric embeddings of images | |
US8386240B2 (en) | Domain dictionary creation by detection of new topic words using divergence value comparison | |
US9519858B2 (en) | Feature-augmented neural networks and applications of same | |
US20170200065A1 (en) | Image Captioning with Weak Supervision | |
US11636314B2 (en) | Training neural networks using a clustering loss | |
US20170200066A1 (en) | Semantic Natural Language Vector Space | |
US11720761B2 (en) | Systems and methods for intelligent routing of source content for translation services | |
CN105022754B (en) | Object classification method and device based on social network | |
US20100299303A1 (en) | Automatically Ranking Multimedia Objects Identified in Response to Search Queries | |
CN111652378B (en) | Learning to select vocabulary for category features | |
US20150066904A1 (en) | Integrating and extracting topics from content of heterogeneous sources | |
CN106354856B (en) | Artificial intelligence-based deep neural network enhanced search method and device | |
US20130204835A1 (en) | Method of extracting named entity | |
CN113297410A (en) | Image retrieval method and device, computer equipment and storage medium | |
CN113688310A (en) | Content recommendation method, device, equipment and storage medium | |
US11531927B2 (en) | Categorical data transformation and clustering for machine learning using natural language processing | |
CN111813993A (en) | Video content expanding method and device, terminal equipment and storage medium | |
Mussumeci et al. | Reconstructing news spread networks and studying its dynamics | |
US20240013769A1 (en) | Vocabulary selection for text processing tasks using power indices | |
JP6979899B2 (en) | Generator, learning device, generation method, learning method, generation program, and learning program | |
Telek | Some structural properties of Markov and rational arrival processes | |
CN115455152A (en) | Writing material recommendation method and device, electronic equipment and storage medium |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
GR01 | Patent grant | ||
GR01 | Patent grant |