US10671081B1 - Generating and utilizing non-uniform volume measures for voxels in robotics applications - Google Patents
Generating and utilizing non-uniform volume measures for voxels in robotics applications Download PDFInfo
- Publication number
- US10671081B1 US10671081B1 US16/386,189 US201916386189A US10671081B1 US 10671081 B1 US10671081 B1 US 10671081B1 US 201916386189 A US201916386189 A US 201916386189A US 10671081 B1 US10671081 B1 US 10671081B1
- Authority
- US
- United States
- Prior art keywords
- occupied
- robot
- voxel
- voxels
- volume
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
- 238000000034 method Methods 0.000 claims abstract description 37
- 230000015654 memory Effects 0.000 claims description 16
- 230000004044 response Effects 0.000 claims description 8
- 239000012636 effector Substances 0.000 description 17
- 239000000463 material Substances 0.000 description 5
- 238000004891 communication Methods 0.000 description 4
- 210000000078 claw Anatomy 0.000 description 3
- 230000008569 process Effects 0.000 description 3
- 230000000007 visual effect Effects 0.000 description 3
- 230000009471 action Effects 0.000 description 2
- 238000005516 engineering process Methods 0.000 description 2
- 230000006870 function Effects 0.000 description 2
- 230000007246 mechanism Effects 0.000 description 2
- 230000002093 peripheral effect Effects 0.000 description 2
- 241000238631 Hexapoda Species 0.000 description 1
- 241001465754 Metazoa Species 0.000 description 1
- 239000000853 adhesive Substances 0.000 description 1
- 230000001070 adhesive effect Effects 0.000 description 1
- 238000003491 array Methods 0.000 description 1
- 230000001419 dependent effect Effects 0.000 description 1
- 238000010586 diagram Methods 0.000 description 1
- 230000008014 freezing Effects 0.000 description 1
- 238000007710 freezing Methods 0.000 description 1
- 230000003993 interaction Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 239000011159 matrix material Substances 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000003287 optical effect Effects 0.000 description 1
- 230000000149 penetrating effect Effects 0.000 description 1
- 230000002085 persistent effect Effects 0.000 description 1
- 230000009467 reduction Effects 0.000 description 1
- -1 set top box Substances 0.000 description 1
- 239000004984 smart glass Substances 0.000 description 1
- 238000003466 welding Methods 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G05—CONTROLLING; REGULATING
- G05D—SYSTEMS FOR CONTROLLING OR REGULATING NON-ELECTRIC VARIABLES
- G05D1/00—Control of position, course or altitude of land, water, air, or space vehicles, e.g. automatic pilot
- G05D1/02—Control of position or course in two dimensions
- G05D1/021—Control of position or course in two dimensions specially adapted to land vehicles
- G05D1/0212—Control of position or course in two dimensions specially adapted to land vehicles with means for defining a desired trajectory
-
- G—PHYSICS
- G05—CONTROLLING; REGULATING
- G05D—SYSTEMS FOR CONTROLLING OR REGULATING NON-ELECTRIC VARIABLES
- G05D1/00—Control of position, course or altitude of land, water, air, or space vehicles, e.g. automatic pilot
- G05D1/02—Control of position or course in two dimensions
- G05D1/021—Control of position or course in two dimensions specially adapted to land vehicles
- G05D1/0231—Control of position or course in two dimensions specially adapted to land vehicles using optical position detecting means
- G05D1/0246—Control of position or course in two dimensions specially adapted to land vehicles using optical position detecting means using a video camera in combination with image processing means
-
- B—PERFORMING OPERATIONS; TRANSPORTING
- B25—HAND TOOLS; PORTABLE POWER-DRIVEN TOOLS; MANIPULATORS
- B25J—MANIPULATORS; CHAMBERS PROVIDED WITH MANIPULATION DEVICES
- B25J9/00—Programme-controlled manipulators
- B25J9/16—Programme controls
- B25J9/1656—Programme controls characterised by programming, planning systems for manipulators
- B25J9/1664—Programme controls characterised by programming, planning systems for manipulators characterised by motion, path, trajectory planning
-
- B—PERFORMING OPERATIONS; TRANSPORTING
- B25—HAND TOOLS; PORTABLE POWER-DRIVEN TOOLS; MANIPULATORS
- B25J—MANIPULATORS; CHAMBERS PROVIDED WITH MANIPULATION DEVICES
- B25J9/00—Programme-controlled manipulators
- B25J9/16—Programme controls
- B25J9/1694—Programme controls characterised by use of sensors other than normal servo-feedback from position, speed or acceleration sensors, perception control, multi-sensor controlled systems, sensor fusion
- B25J9/1697—Vision controlled systems
-
- G—PHYSICS
- G05—CONTROLLING; REGULATING
- G05D—SYSTEMS FOR CONTROLLING OR REGULATING NON-ELECTRIC VARIABLES
- G05D1/00—Control of position, course or altitude of land, water, air, or space vehicles, e.g. automatic pilot
- G05D1/02—Control of position or course in two dimensions
- G05D1/021—Control of position or course in two dimensions specially adapted to land vehicles
- G05D1/0268—Control of position or course in two dimensions specially adapted to land vehicles using internal positioning means
- G05D1/0274—Control of position or course in two dimensions specially adapted to land vehicles using internal positioning means using mapping information stored in a memory device
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T15/00—3D [Three Dimensional] image rendering
- G06T15/08—Volume rendering
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T2200/00—Indexing scheme for image data processing or generation, in general
- G06T2200/04—Indexing scheme for image data processing or generation, in general involving 3D image data
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T7/00—Image analysis
- G06T7/70—Determining position or orientation of objects or cameras
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S901/00—Robots
- Y10S901/01—Mobile robot
Definitions
- Some robots and/or robot control systems construct and/or maintain a three-dimensional (“3D”) model of at least portions of an environment in which the robot operates.
- a robot may acquire data from a 3D vision component (e.g., a 3D laser scanner or a stereographic camera) viewing a portion of the robot's environment, and map such data to the 3D model.
- 3D models are formed as so-called “voxel-based” 3D models (“3D voxel models”), in which a 3D matrix of voxels are allocated.
- 3D voxel models data points generated by one or more 3D vision components (also referred to as a “3D point cloud”) can be projected onto spatially-corresponding voxels of the 3D voxel model.
- some robots and/or robot control systems utilize 3D models for various robotics applications, such as path planning.
- one or more path planning algorithms can utilize a “current” 3D model in generating a path of the robot from a “current position” of the robot to a “target position” of the robot.
- the path planning algorithm(s) can be utilized to generate a collision-free path while considering occupied voxels, of a 3D voxel model, as obstacles to be avoided—and while considering unoccupied voxels, of the 3D voxel model, as points through which the collision-free path may pass.
- all voxels of a 3D voxel model are typically considered to have the same volume.
- each of the occupied voxels of the 3D voxel model can be transformed into a corresponding cube of a particular volume, and those particular volume cubes considered as obstacles in generating the path.
- the present disclosure is generally directed to methods, apparatus, and computer-readable media (transitory and non-transitory) for generating and utilizing non-uniform volume measures for occupied voxels, where each of the occupied voxels represents an occupied point of an environment of a robot.
- Each of the occupied voxels is “occupied” based on it corresponding to a data point generated by a 3D vision component of the robot (e.g., a data point of a generated 3D point cloud).
- a 3D vision component of the robot e.g., a data point of a generated 3D point cloud
- each of the occupied voxels is considered as occupied based on it corresponding to a 3D position that is indicated as occupied by a corresponding 3D vision component generated data point.
- the volume measure for each of the occupied voxels is a “padding” for the occupied voxel and indicates a volume to be utilized for that occupied voxel.
- the volume measure for an occupied voxel can be a radius that indicates the volume of a sphere that has the radius and is centered on the occupied voxel.
- the volume measures for the occupied voxels are non-uniform in that they are not all the same volume measure.
- one or more first occupied voxels can have a volume measure that is a radius of 10 cm
- one or more second occupied voxels can have a volume measure that is a radius of 4 cm
- one or more third occupied voxels can have a volume measure that is a radius of 3 mm, etc.
- the volume measure for a given occupied voxel can be generated based on a position of the given occupied voxel as compared to: a current position of a reference point of the robot, a target position of the reference point of the robot, and/or position(s) of one or more “links” of the robot.
- a reference point of the robot can be, for example, a reference point of an end effector of the robot (e.g., an “action point” of the end effector, a center of mass of the end effector), or other reference point of the robot that is not relative to any end effector of the robot (e.g., a center of mass of the robot as a whole).
- a link of the robot references a structural component of the robot.
- the volume measure for an occupied voxel is determined based on the smaller of: (1) a current distance that is the distance between the occupied voxel and the current position reference point of the robot; and (2) a target distance that is the distance between the occupied voxel and the target position reference point of the robot. In some of those implementations, an initial volume measure is determined based on the smaller of the current distance and the target distance.
- the initial volume measure can be: 15 cm if the smaller of the two distances is greater than or equal to 20 cm; 8 cm if the smaller of the two distances is less than 20 cm, but greater than or equal to 12 cm; 4 cm if the smaller of the two distances is less than 12 cm, but greater than or equal to 8 cm; etc. Additional and/or alternative ranges, values, and/or techniques (e.g., an equation-based technique) may be utilized to determine an initial volume measure based on the smaller of the current distance and the target distance.
- the occupied voxel with the initial volume measure is then “checked” to determine if it collides with, and/or is within a threshold distance of, one or more links of the robot. If not, the initial volume measure can be used as the volume measure for the occupied voxel. If so, the initial volume measure can be reduced and the occupied voxel with the reduced volume measure can then be checked to determine if it is in collision with, and/or within the threshold distance of, the one or more links of the robot.
- the reduced volume measure can be used as the volume measure for the occupied voxel.
- the reduced volume measure can optionally be further reduced. The occupied voxel with the further reduced volume measure can then be checked to determine if it is in collision with, and/or within the threshold distance of, the one or more links of the robot. Multiple iterations of this may optionally be performed.
- multiple iterations may be performed until a minimum volume measure is reached and/or until other criterion/criteria are satisfied. If the occupied voxel with all checked reduced volume measures all collide with and/or are within a threshold distance of link(s) of the robot, the occupied voxel can be assumed to be part of the robot—and that occupied voxel optionally discarded and/or not considered as an obstacle in path planning and/or for other robotic operations.
- volume measures of the occupied voxels can be considered as “paddings” for the occupied voxels and the occupied voxels with their corresponding volume measures considered as obstacles.
- an object that is relatively “far away” can be represented by occupied voxel(s) each having a corresponding volume measure that is relatively large (e.g., that extends well beyond actual space occupied by the object).
- an object that is relatively “close” can be represented by occupied voxel(s) each having a corresponding volume measure that is relatively small (e.g., that does not extend beyond the actual space occupied by the object, or only slightly beyond).
- relatively large areas around relatively far away objects can be considered as “occupied”. This may improve computational efficiency of the path planning relative to one or more prior techniques. For example, for exploratory path planning techniques (e.g., randomized path planning algorithms), having relatively large areas considered as occupied may reduce a path search space. Reducing the path search space may lead to faster resolution of a path. Moreover, simultaneously having relatively smaller volumes for occupied voxels that correspond to relatively close objects may still enable generation of an achievable path that is efficient (according to one or more parameters such as shortest path, quickest path) and/or that reaches the target position.
- exploratory path planning techniques e.g., randomized path planning algorithms
- having relatively large areas considered as occupied may reduce a path search space. Reducing the path search space may lead to faster resolution of a path.
- simultaneously having relatively smaller volumes for occupied voxels that correspond to relatively close objects may still enable generation of an achievable path that is efficient (according to one or more parameters such as shortest path, quickest path) and/or that reaches
- some implementations may omit some voxels and corresponding volume measures from being considered during path planning, which may also improve the computational efficiency of the path planning. For example, some implementations may omit one or more voxels and corresponding volume measures based on the corresponding volume measures satisfying a threshold.
- a method may be provided that includes: receiving data points generated by a three-dimensional (3D) vision component viewing an environment of a robot, and generating a 3D voxel model based on the data points.
- the 3D voxel model includes occupied voxels that are occupied based on the received data points.
- the method further includes generating a volume measure for each of the occupied voxels.
- the generated volume measures include a plurality of volume measures that are each non-uniform relative to other volume measures.
- Generating the volume measure for each of the occupied voxels includes: generating the volume measure for the occupied voxel based on distance between the occupied voxel and at least one of: a current position of a reference point of the robot, and a target position of the reference point of the robot.
- the method further includes: generating a path from the current position to the target position based on a group of the occupied voxels and the volume measures of the group of the occupied voxels; and generating control commands to provide to actuators of the robot to effectuate the path.
- generating the volume measure for a given occupied voxel of the occupied voxels is further based on a geometric model of the robot in a current configuration of the robot, where the current configuration causes the reference point to be in the current position.
- generating the volume measure for the given occupied voxel includes: generating an initial volume measure for the given occupied voxel based on distance between the given occupied voxel and the at least one of the current position and the target position; and generating the volume measure for the given occupied voxel by modifying the initial volume measure based on the geometric model.
- generating the initial volume measure for the given occupied voxel based on the distance between the given occupied voxel and the at least one of the current position and the target position includes generating the initial volume measure based on a smaller of: a current distance between the given occupied voxel and the current position, and a target distance between the given occupied voxel and the target position.
- modifying the initial volume measure based on the geometric model includes: reducing the initial volume measure in response to determining that the given occupied voxel with the initial volume measure collides with the geometric model or is within a threshold distance of the geometric model.
- generating the volume measure for a given occupied voxel of the occupied voxels is further based on a geometric model of the robot in a current configuration of the robot, and the geometric model of the robot includes a plurality of bounding volumes.
- Each of the bounding volumes represents at least one corresponding link of the robot in the current configuration of the robot.
- each of the bounding volumes is a bounding box.
- the volume measures each define a corresponding radius.
- generating the path based on the occupied voxels and the volume measures of the group of the occupied voxels includes generating the path based on a plurality of spheres each defined by a corresponding one of the occupied voxels and its radius.
- the group of the occupied voxels based on which the path is generated is a subgroup of the occupied voxels of the 3D voxel model.
- the method further includes: generating the subgroup of the occupied voxels by omitting at least some of the occupied voxels of the 3D voxel model.
- omitting at least one of the occupied voxels can be based on the volume measure of that occupied voxel being larger than a threshold and/or omitting at least one of the occupied voxels can be based on determining that occupied voxel represents a component of the robot.
- determining that that a given occupied voxel represents a component of the robot includes: generating an initial volume measure for the given occupied voxel based on distance between the given occupied voxel and the at least one of the current position and the target position; generating one or more smaller volume measures for the given occupied voxel; and determining that the given occupied voxel represents a component of the robot in response to determining that the given occupied voxel with the initial volume measure collides with the robot in a current configuration of the robot and that the given occupied voxel with any of the smaller volume measures collides with the robot in the current configuration.
- implementations may include a non-transitory computer readable storage medium storing instructions executable by a processor to perform a method such as one or more of the methods described above.
- implementations may include a system (e.g., a robot, a robot control system, and/or one or more other components) including memory and one or more processors operable to execute instructions, stored in the memory, to implement one or more modules or engines that, alone or collectively, perform a method such as one or more of the methods described above.
- FIG. 1 illustrates an example environment in which implementations disclosed herein may be implemented.
- FIG. 2 illustrates an example of a portion of a 3D voxel model.
- FIG. 3A illustrates an example robot, an example 3D vision component, and example objects that may be present in an environment of the robot.
- FIG. 3B illustrates the example robot of FIG. 3A , and examples of spheres that may be generated according to implementations disclosed herein.
- the spheres are each based on a corresponding voxel and corresponding volume measure.
- An example path that can be generated based on the spheres (and additional unillustrated spheres) is also illustrated.
- FIG. 3C illustrates the example robot of FIG. 3A , an example of an initial volume for an occupied voxel that collides with a geometric model of the example robot, and an example of a reduced volume for the occupied voxel that does not collide with the geometric model of the robot.
- FIG. 3D illustrates the example robot of FIG. 3A , and an example of multiple spheres that may be generated based on occupied voxels that all correspond to one of the objects of FIG. 3A .
- FIG. 3E illustrates an example geometric model of the example robot of FIG. 3A , and an example of determining that an occupied voxel corresponds to the example robot.
- FIG. 3F illustrates another example geometric model of the example robot of FIG. 3A .
- FIG. 4 is a flowchart illustrating an example method according to implementations disclosed herein.
- FIG. 5 illustrates an example architecture of a computer system.
- Implementations disclosed herein are related to generating and utilizing non-uniform volume measures for occupied voxels, where each of the occupied voxels represents an occupied point of an environment of a robot.
- a 3D point cloud is generated by a 3D vision component of a robot.
- One or more processors e.g., of the robot
- voxels of the 3D voxel model can be indicated as “occupied” based on those voxels corresponding to data points of the 3D point cloud.
- One or more of the processors may optionally initially filter out one or more voxels of the 3D voxel model based on one or more criteria. For example, voxels that are beyond a workspace of the robot may be removed.
- One or more of the processors can then generate a volume measure for each of the occupied voxels of the 3D voxel model.
- the volume measure for each of the occupied voxels can be generated based on a position of the occupied voxel as compared to: a current position of a reference point of the robot, a target position of the reference point of the robot, and/or position(s) of one or more “links” of the robot.
- the volume measure for each of the occupied voxels is dependent on its position relative to position(s) of the robot, non-uniform volume measures are generated. In other words, the volume measures are not all the same.
- one or more first occupied voxels can have a volume measure that is a radius of 5 cm
- one or more second occupied voxels can have a volume measure that is a radius of 3 cm
- one or more third occupied voxels can have a volume measure that is a radius of 1 cm, etc.
- One or more of the processors can then utilize a group of the occupied voxels and their corresponding volume measures for path planning and/or other robotic application.
- the volume measures can each indicate the volume of a sphere (e.g., be a radius), and their corresponding occupied voxel can indicate the center of the sphere.
- One or more of the processors can generate a path, from a current position of the robot to a target position of the robot, while considering the spheres as obstacles.
- the path can be generated using an exploratory path planning technique that explores potential paths through areas that are not indicated by the spheres as occupied. For instance, a Rapidly-exploring Random Tree (RRT) algorithm may be utilized to generate the path, such as RRT-Connect.
- RRT Rapidly-exploring Random Tree
- implementations can generate relatively large volume measures for occupied voxels that correspond to objects that are relatively far away from: a current position of a robot, a target position of the robot, and/or links of the robot.
- implementations can generate relatively small volume measures for occupied voxels that correspond to objects that are relatively close to: a current position of a robot, a target position of the robot, and/or links of the robot. Accordingly, an object that is relatively “far away” can be represented by occupied voxel(s) each having a corresponding volume measure that is relatively large.
- an object that is relatively “close” can be represented by occupied voxel(s) each having a corresponding volume measure that is relatively small.
- relatively far away objects can each be represented by relatively large volume shape(s) (e.g., sphere(s))
- relatively close objects can each be represented by relatively low volume shape(s) (e.g., spheres).
- utilizing relatively large volume shapes to represent relatively far away objects can lead to faster resolution of a path.
- utilizing relatively smaller volume shapes to represent relatively close objects may still enable generation of an achievable path that is efficient and/or that reaches the target position (e.g., that doesn't avoid the target position due to over-padding near the target position).
- some implementations may omit some voxels and corresponding volume measures from being considered during path planning, which may also improve the computational efficiency of the path planning.
- FIG. 1 illustrates an example environment in which implementations disclosed herein may be implemented.
- a robot 100 is illustrated in FIG. 1 .
- Robot 100 may take various forms, including but not limited to a telepresence robot, a robot arm, a humanoid, an animal, an insect, an aquatic creature, a wheeled device, a submersible vehicle, a unmanned aerial vehicle (“UAV”), and so forth.
- robot 100 may include one or more processors 102 .
- Processor(s) 102 may take various forms, such as one or more CPUs, one or more GPUs, one or more field-programmable gate arrays (“FPGA”), and/or one or more application-specific integrated circuits (“ASIC”). In some implementations, the processor(s) 102 may be operably coupled with memory 103 .
- Memory 103 may take various forms, such as random access memory (“RAM”), dynamic RAM (“DRAM”), read-only memory (“ROM”), Magnetoresistive RAM (“MRAM”), resistive RAM (“RRAM”), NAND flash memory, and so forth.
- processor(s) 102 may be operably coupled with one or more actuators 104 1-n , one or more end effectors 106 , and/or one or more sensors 108 1-m , e.g., via one or more buses 110 .
- the robot 100 may have multiple degrees of freedom and each of the actuators may control actuation of the robot 100 within one or more of the degrees of freedom responsive to control commands.
- the control commands are generated by one or more of the processor(s) 102 and provided to the actuators (e.g., via one or more of the buses 110 ) to control the robot 100 .
- actuator encompasses a mechanical or electrical device that creates motion (e.g., a motor), in addition to any driver(s) that may be associated with the actuator and that translate received control commands into one or more signals for driving the actuator. Accordingly, providing a control command to an actuator may comprise providing the control command to a driver that translates the control command into appropriate signals for driving an electrical or mechanical device to create desired motion.
- end effector may refer to a variety of tools that may be operated by robot 100 in order to accomplish various tasks.
- some robots may be equipped with an end effector 106 that takes the form of a claw with two opposing “fingers” or “digits.”
- a claw is one type of “gripper” known as an “impactive” gripper.
- Other types of grippers may include but are not limited to “ingressive” (e.g., physically penetrating an object using pins, needles, etc.), “astrictive” (e.g., using suction or vacuum to pick up an object), or “contigutive” (e.g., using surface tension, freezing or adhesive to pick up object).
- end effectors may include but are not limited to drills, brushes, force-torque sensors, cutting tools, deburring tools, welding torches, containers, trays, and so forth.
- end effector 106 may be removable, and various types of modular end effectors may be installed onto robot 100 , depending on the circumstances.
- Some robots, such as some telepresence robots, may not be equipped with end effectors. Instead, some telepresence robots may include displays to render visual representations of the users controlling the telepresence robots, as well as speakers and/or microphones that facilitate the telepresence robot “acting” like the user.
- Sensors 108 may take various forms, including but not limited to 3D vision components (e.g., 3D laser scanners, stereographic cameras), two-dimensional cameras, light sensors (e.g., passive infrared), force sensors, pressure sensors, pressure wave sensors (e.g., microphones), proximity sensors (also referred to as “distance sensors”), torque sensors, bar code readers, radio frequency identification (“RFID”) readers, radars, range finders, accelerometers, gyroscopes, compasses, position sensors (e.g., odometer, a global positioning system), speedometers, edge detectors, and so forth. While sensors 108 1-m are depicted as being integral with robot 100 , this is not meant to be limiting. In some implementations, sensors 108 may be located external to, but may be in direct or indirect communication with, robot 100 .
- 3D vision components e.g., 3D laser scanners, stereographic cameras
- light sensors e.g., passive infrared
- force sensors e.
- Control system 150 is also illustrated in FIG. 1 and includes a 3D voxel model engine 152 , a volume measure engine 155 , and a path engine 160 .
- connection arrow 145 indicates that the control system 150 can be implemented on robot 100 and/or can be in network communication (e.g., via a local area network and/or a wide area network) with robot 100 .
- one or more (e.g., all) of the engines of the control system 150 are implemented by hardware that is local to the robot 100 , such as one or more of the processors 102 .
- Such processor(s) that implement one or more of the engines may optionally be separate from the processor(s) that generate and/or provide control commands to actuators 104 of the robot 100 .
- the control system 150 may be implemented by one or more processors that do not operate in a real-time domain of the robot 100 , whereas other processor(s) that do operate in the real-time domain generate and provide control commands to actuators 140 .
- one or more (e.g., all) of the engines of the control system 150 are implemented by hardware that is separate from the robot 100 .
- engine(s) may be implemented “in the cloud” by a remote cluster of high performance computing devices and/or by one or more computing devices that are separate from the robot 100 , but that are geographically proximal to the robot (e.g., in the same building).
- robot 100 and one or more aspects of control system 150 may communicate over one or more wired or wireless networks (not depicted) or using other wireless technology, such as radio, Bluetooth, infrared, etc.
- the 3D voxel model engine 152 receives data points sensed by a 3D vision component of the sensors 108 , and generates a 3D voxel model based on the data points.
- the data points can be a 3D point cloud and the 3D voxel model engine 152 can project the data points onto spatially-corresponding voxels of the 3D voxel model, and indicate the corresponding voxels as occupied.
- it can generate the 3D voxel model by indicating voxels as occupied based on those voxels corresponding to 3D positions that are indicated as occupied by a corresponding 3D vision component generated data point.
- the 3D voxel model engine 152 may remove some voxels from the 3D voxel model, such as voxels that are beyond a workspace of the robot.
- FIG. 2 illustrates a portion 200 of an example 3D voxel model.
- the portion 200 of the model consists of a simple cubic structure divided into twenty seven voxels.
- the modeled environment would not necessarily (or even likely) be cubic, and that far more than twenty seven voxels would realistically be used to represent the environment.
- seven voxels labeled A-G are pigmented to indicate that they have been deemed to be “occupied” voxels.
- the occupied voxels of FIG. 2 are illustrated without associated padding/volume measures. As described herein, such volume measures can be generated for occupied voxels to “pad” such voxels—causing them to effectively be represented by volumes that are centered on the voxels, and such volumes utilized by path engine 160 and/or other engines.
- Volume measure engine 155 generates volume measures for each of the occupied voxels of a 3D voxel model generated by the 3D voxel model engine 152 .
- the volume measure for each of the occupied voxels is a “padding” for the occupied voxel and indicates a volume to be utilized for that occupied voxel.
- the volume measure for an occupied voxel can be a radius that indicates the volume of a sphere that has the radius and is centered on the occupied voxel.
- Other volume measures can be utilized, such as volume measures that indicate the volume of a cube that is centered on the occupied voxel, and/or other volume measures that indicate the volume of other 3D shape(s).
- volume measure engine 155 generates non-uniform volume measures for occupied voxels of various 3D voxel models.
- the volume measures for the occupied voxels are non-uniform in that they are not all the same volume measure.
- Volume measure engine 155 can include an initial volume module 156 , a reduced volume module 157 , and a removal module 158 .
- the initial volume module 156 for each considered occupied voxel, the initial volume module 156 generates an initial volume measure. In some of those implementations, the initial volume module 156 generates the initial volume measure based on a position of the occupied voxel as compared to: a current position of a reference point of the robot and/or a target position of the reference point of the robot. In some versions of those implementations, the module 156 determines (1) a current distance that is the distance between the occupied voxel and the current position reference point of the robot; and (2) a target distance that is the distance between the occupied voxel and the target position of the reference point of the robot.
- the position of the occupied voxel may be expressed in three dimensions (X,Y,Z), and the current position and the target position may each be expressed in three dimensions.
- the current distance can be determined as the absolute value of the 3D distance between the position of the occupied voxel and the current position
- the target distance can each be determined as the absolute value of the 3D distance between the position of the occupied voxel and the target position.
- the initial volume module 156 determines the initial volume measure based on the smaller of the current distance and the target distance. For example, the initial volume module 156 can access an index (e.g., in a computer readable media) that includes initial volumes mapped to distances and/or distance ranges. The initial volume module 156 can then search the index and select the initial volume that maps to the determined smaller of the distances. As another example, the initial volume module 156 can determine the initial volume measure by applying the smaller of the two distances to a function that maps distances to initial volumes. In some other implementations, the initial volume module 156 determines the initial volume measure based on the both the current distance and the target distance.
- an index e.g., in a computer readable media
- the initial volume module 156 can then search the index and select the initial volume that maps to the determined smaller of the distances.
- the initial volume module 156 can determine the initial volume measure by applying the smaller of the two distances to a function that maps distances to initial volumes. In some other implementations, the initial volume
- the target position of the reference point utilized by the volume measure engine 155 can be obtained from various sources.
- the target position can be a user inputted target position (e.g., the user using one or more user interface input devices of a computing device to define the target position), a stored target position retrieved from memory (e.g., a stored target position for a task being performed by the robot 100 ), or a target position automatically determined by one or more components of the robot 100 (e.g., a target position determined to reach an object).
- the reduced volume module 157 determines if the occupied voxel with the initial volume collides with, and/or is within a threshold distance of, one or more links of the robot. If not, the initial volume measure can be used as the volume measure for the occupied voxel. If so, reduced volume module 157 can reduce the initial volume measure and determine if the occupied voxel with the reduced volume measure collides with, and/or is within a threshold distance of, one or more links of the robot.
- the reduced volume module 157 can assign the reduced volume measure to the occupied voxel. On the other hand, if the occupied voxel with the reduced volume measure still collides with and/or is within a threshold distance of link(s) of the robot, the reduced volume module 157 can further reduce the reduced volume measure. The reduced volume module 157 can then determine if the occupied voxel with the further reduced volume measure collides with, and/or is within a threshold distance of, one or more links of the robot.
- the reduced volume module 157 can perform multiple iterations of this, e.g., until a minimum volume measure is reached and/or until other criterion/criteria are satisfied. If the reduced volume module 157 determines the occupied voxel with all checked reduced volume measures all collide with and/or are within a threshold distance of link(s) of the robot, the occupied voxel can be assumed to be part of the robot—and that occupied voxel optionally discarded the reduced volume module 157 and/or not considered as an obstacle in path planning and/or for other robotic applications.
- a geometric model of links of the robot is utilized.
- a geometric model may include one or ore more bounded volumes that each contain one or more links of the robot.
- the one or more bounded volumes may include spheres, cubes, cuboids, cylinders, cones, and so forth.
- the positions of the bounded volumes can be determined based on the current configuration of the robot 100 (e.g., based on position sensor readings and a dynamic model of the robot 100 ).
- the reduced volume module 157 can then determine if the given occupied voxel with the given volume collides with and/or is within a threshold distance of the bounded volumes of the geometric model. For example, assume the geometric model is a plurality of cuboids, and the given occupied voxel with the given volume defines a sphere. The reduced volume module 157 can determine if the sphere intersects any of the cuboids and if so, determine that there is a collision.
- Removal module 158 can remove one or more of the occupied voxels based on determined volume measures for those occupied voxels. For example, removal module 158 can remove one or more occupied voxels that have at least a threshold volume measure. For instance, the removal module 158 can randomly remove 40% of the occupied voxels with volume measures greater than X. Removing such occupied voxels may improve computational efficiency of path planning or other robotic application(s), while still enabling generation of a path that avoids obstacles.
- Path engine 160 utilizes the occupied voxels and their corresponding volume measures determined by volume measure engine 155 to generate a path from the current position of the robot 100 to a target position of the robot 100 .
- the volume measures can each indicate the volume of a sphere (e.g., be a radius), and their corresponding occupied voxel can indicate the center of the sphere.
- the path engine 160 can generate a path, from a current position of the robot to a target position of the robot, while considering the spheres as obstacles.
- the path engine 160 can generate the path using an exploratory path planning technique that explores potential paths through areas that are not indicated by the spheres as occupied. For instance, a Rapidly-exploring Random Tree (RRT) algorithm may be utilized to generate the path, such as RRT-Connect.
- RRT Rapidly-exploring Random Tree
- FIG. 3A an example robot 300 is illustrated in a current configuration.
- the robot 300 is one example of robot 100 of FIG. 1 .
- Robot 300 is in a “robot arm” form and may include components that are in addition to those illustrated in FIG. 3A .
- the robot 300 may further include a base that supports the robot arm, such as a stationary base and/or a mobile base (e.g., that includes wheels).
- the robot 300 includes a plurality of actuators 304 1 - 304 6 and an end effector 306 in the form of a gripper claw.
- a current position 307 of a reference point of the robot 300 in the current configuration is also illustrated, where the reference point is a reference point defined relative to the end effector 306 (i.e., at an “action point” of the end effector 306 ).
- the target position 308 can be, for example, a user inputted target position, a stored target position retrieved from memory, or a target position determined by one or more components of the robot 300 .
- a 3D vision component 308 of the robot 300 that has a field of view of at least a portion of the environment of the robot 300 .
- the 3D vision component 308 can be, for example a 3D laser scanner or a stereographic camera.
- the 3D vision component 308 captures data points (e.g., a 3D point cloud) that capture visible (to the 3D vision component 308 ) surfaces in the environment of the robot (e.g., visible surfaces of objects 1 , 2 , 3 , and 4 ).
- the objects 1 , 2 , 3 , and 4 are all the same dimensions, but are at different positions in the environment.
- the 3D vision component 308 is illustrated in FIG. 3A as separate from the robot 300 for simplicity, but it is understood that it may be incorporated as part of the robot 300 (e.g., coupled to an unillustrated “base” of the robot 300 ).
- FIG. 3A the components of FIG. 3A are three-dimensional components, even though they are represented two-dimensionally in FIG. 3A for the sake of simplicity.
- objects 1 , 2 , 3 , and 4 are each 3D components.
- the positions of the various components may vary in the dimension that is “into” and “out of” FIG. 2A .
- object 1 and object 2 varying positionally in the dimensions of FIG. 3A , they may also vary positionally in a dimension that is “into” and “out of” FIG. 2A .
- FIG. 3B illustrates the robot 300 of FIG. 3A , and examples of spheres 101 , 201 - 205 , 301 - 305 , and 401 that may be generated according to implementations disclosed herein.
- the spheres 101 , 201 - 205 , 301 - 305 , and 401 are each based on a corresponding voxel and corresponding volume measure that can be generated according to implementations disclosed herein. It is noted that the spheres 101 , 201 - 205 , 301 - 305 , and 401 are 3D spheres, even though they are represented two-dimensionally in FIG. 3B for the sake of simplicity.
- An example path 309 that can be generated based on the spheres 101 , 201 - 205 , 301 - 305 , and 401 (and additional unillustrated spheres) is also illustrated.
- Sphere 101 corresponds to an occupied voxel (corresponding to the center of the sphere 101 ) that corresponds to a data point that captures object 1 ( FIG. 3A ), and that has a corresponding volume measure that is the radius of the sphere 101 .
- sphere 101 has the largest volume measure of the depicted spheres. This can be due to an occupied voxel of the sphere 101 being relatively far away from the current position 307 , the target position 308 , and the links of the robot 300 .
- the radius of the sphere 101 can be initially determined based on the distance of the occupied voxel of the sphere 101 to the current position 307 (since that distance is smaller than the distance of the occupied voxel to the target position 308 ). Further, the sphere 101 can be checked to see if interferes with (i.e., collides with and/or is within a threshold distance of) bounding boxes and/or other geometric models of the current configuration (indicated in solid lines) of the robot 300 and, since it does not, that initially determined radius utilized.
- Spheres 201 - 205 each correspond to a corresponding occupied voxel, that in turn corresponds to a corresponding data point that captures object 2 ( FIG. 3A ).
- Each of the occupied voxels represented by spheres 201 - 205 has a volume measure that is the radius of its corresponding sphere 201 - 205 .
- spheres 201 - 205 all have the same volume measure, and the volume measure of the spheres 201 - 205 is much smaller than the volume measure of sphere 101 . This can be due to the occupied voxels of each of the spheres 201 - 205 being relatively close to the current position 307 .
- the radius of the sphere 201 can be initially determined based on the distance of the occupied voxel of the sphere 201 to the current position 307 (since that distance is smaller than the distance of the occupied voxel to the target position 308 ). Further, the sphere 201 can be checked to see if interferes with bounding boxes and/or other geometric models of the current configuration (indicated in solid lines) of the robot 300 and, since it does not, that initially determined radius utilized.
- Spheres 301 - 305 each correspond to a corresponding occupied voxel, that in turn corresponds to a corresponding data point that captures object 3 ( FIG. 3A ).
- Each of the occupied voxels represented by spheres 301 - 305 has a volume measure that is the radius of its corresponding sphere 301 - 305 .
- spheres 301 - 305 all have the same volume measure, and the volume measure of the spheres 301 - 305 is the same as that of the spheres 201 - 205 . This can be due to the occupied voxels of each of the spheres 301 - 305 being relatively close to the target position 308 .
- the radius of the sphere 301 can be initially determined based on the distance of the occupied voxel of the sphere 301 to the target position 308 (since that distance is smaller than the distance of the occupied voxel to the current position 307 ). Further, the sphere 301 can be checked to see if interferes with bounding boxes and/or other geometric models of the current configuration (indicated in solid lines) of the robot 300 and, since it does not, that initially determined radius utilized.
- Sphere 401 indicates an occupied voxel (corresponding to the center of the sphere 401 ) that corresponds to a data point that captures object 4 ( FIG. 3A ), and that has a corresponding volume measure that is the radius of the sphere 401 .
- sphere 401 has a volume measure that is between that of sphere 101 , and that of spheres 201 - 205 and 301 - 305 . This can be due to an occupied voxel of the sphere 401 being relatively far away from the current position 307 and the target position 308 , but relatively close to one of the links of the robot 300 .
- an initial radius indicated by sphere 401 A (that is the same size as sphere 101 ) can be initially determined based on the distance of the occupied voxel of the sphere 401 to the current position 307 (since that distance is smaller than the distance to the target position 308 ). Further, the initially determined radius can be checked to see if interferes with bounding boxes and/or other geometric models of the current configuration (solid lines) of the robot 300 . For example, it can be determined whether the sphere 401 A collides with any bounding boxes that represent the links, such as bounding box 371 1 of FIG. 3C . Since it does (see FIG. 3C ), the initially determined radius can be reduced to that indicated by sphere 401 of FIG. 3C .
- the sphere 401 can also be checked for interference with bounding boxes and/or other geometric models of the current configuration of the robot 300 . For example, it can be determined whether the sphere 401 collides with any bounding boxes that represent the links and, since it does not, that reduced radius can be utilized. It is noted that multiple iterations of “reducing” and “checking” may be performed.
- the spheres 101 , 201 - 205 , 301 - 305 , and 401 of FIG. 3B can be provided to path engine 160 , and the path engine 160 can utilize those as indications of obstacles in generating a path that avoids obstacles, such as example path 309 of FIG. 3B .
- the example path 309 may be a 3D path, even though it is illustrated in FIG. 3B as two-dimensional for simplicity.
- Commands engine 162 can generate control commands to provide to actuators 304 1-6 to effectuate the path 309 .
- the control commands can cause the robot 300 to move from the current configuration (solid lines) to a target configuration (broken lines) in which the reference point of the robot 300 is at the target position 308 .
- the target configuration (broken lines) of the robot 300 in FIG. 3B is presented as just one example. Due to kinematic redundancy of the robot 300 , there are multiple additional target configurations in which the reference point of the end effector 306 can also be positioned at the target position 308 . Further, it is noted that in many implementations a target configuration for the target position 308 is not determined until after generation of the path 309 . For example, the path 309 may be generated, then control commands generated in real-time to effectuate the path and cause the robot to traverse through a plurality of intermediary configurations before reaching the target configuration.
- the objects 1 , 2 , 3 , and 4 are all the same size (as illustrated in FIG. 3A ), the spheres utilized to represent those objects have non-uniform volumes (as illustrated in FIG. 3B ). Again, this is based on the varying positions of occupied voxels corresponding to those objects and, in particular, the varying positions relative to the current position 307 , target position 308 , and/or a geometric model of the robot 300 . As described above, this may improve computational efficiency of the path planning relative to prior techniques.
- FIG. 3B illustrates some spheres
- additional spheres may be generated based on additional occupied voxels and optionally provided to and/or utilized by the path engine 160 .
- FIG. 3D illustrates how additional spheres 105 and 106 may be generated based on additional occupied voxels that correspond to object 1 .
- these (and optionally additional) spheres may also be provided to the path engine 160 .
- one or more of the spheres 101 , 105 , and/or 106 may be removed and a subgroup of spheres provided to the path planner.
- one or more spheres such as sphere 105 , sphere 106 and/or other spheres having at least a threshold volume measure may be removed (e.g., X % of spheres of greater than Y radius may be “randomly” removed), under the assumption that other “large” spheres that capture the same object may still remain—and since they are “oversized” they likely still encompass the object and will prevent planning of a path that collides with the object. Removing one or more spheres may improve computational efficiency of path planning as described herein.
- FIG. 3E illustrates an example geometric model 371 of the robot 300 of FIG. 3A , and an example of determining that an occupied voxel corresponds to the example robot.
- the geometric model 371 includes a plurality of bounding boxes 371 1 - 371 6 .
- Each of the bounding boxes 371 1 - 371 6 geometrically approximates a corresponding link of the robot 300 .
- bounding box 371 6 approximates end effector 306
- bounding box 371 5 approximates the structural component that couples end effector 306 to actuator 3045
- bounding box 371 4 approximates the structural component that couples actuators 3045 to actuator 3044 , etc.
- the bounding boxes can be three-dimensional, although they are represented two-dimensionally in FIG. 3E for simplicity.
- FIG. 3E also illustrates three spheres 501 A, 501 B, and 501 C, that each correspond to an occupied voxel.
- An initial radius indicated by sphere 501 A can be initially determined based on the distance of the occupied voxel of the sphere 501 A to the current position 307 (since that distance is smaller than the distance to the target position 308 ). Further, it can be determined whether the sphere 501 A collides with any of the bounding boxes 371 1 - 371 6 . Since it collides with bounding box 371 5 , the initially determined radius can be reduced to that indicated by sphere 501 B. Further, it can be determined whether the sphere 501 B collides with any of the bounding boxes 371 1 - 371 6 .
- the reduced radius can be further reduced to that indicated by sphere 501 C. Further, it can be determined whether the sphere 501 C collides with any of the bounding boxes 371 1 - 371 6 . Since it collides with bounding box 371 5 , and since the further reduced radius is a minimum radius, it can be determined that the occupied voxel corresponds to the robot 300 . In response, the occupied voxel can be removed in response to determining that the occupied voxel corresponds to the robot 300 . Removal of the occupied voxel may prevent that voxel from errantly being considered as an obstacle during path planning.
- FIG. 3F illustrates another example geometric model 372 of the example robot 300 .
- the geometric model 372 includes a plurality of bounding volumes 372 1 - 372 6 .
- Each of the bounding volumes 372 1 - 372 6 geometrically approximates a corresponding link of the robot 300 .
- FIG. 3F is provided as one example of a geometric model that includes bounding volumes that are not bounding boxes. Such a geometric model can additionally and/or alternatively be utilized in determining whether there is a conflict with link(s) of a robot.
- FIG. 4 an example method 400 according to various implementations is described.
- the operations of the method 400 are described with reference to a system that performs the operations.
- This system may include various components of a robot and/or of one or more computing devices in communication with the robot.
- operations of method 400 are shown in a particular order, this is not meant to be limiting.
- One or more operations may be reordered, omitted or added.
- the system generates a 3D voxel model based on data points generated by a 3D vision component of a robot.
- the system may receive, e.g., from a three-dimensional vision sensor of robot 100 , the data points in the form of a 3D point cloud sensed by the three-dimensional vision sensor.
- the system generates the 3D voxel model based on projecting the data points onto voxels of the 3D voxel model.
- the system removes occupied voxels that are not in a workspace of the robot. In some implementations, at block 404 the system additionally and/or alternatively removes voxels based on one or more other criteria.
- the system selects an occupied voxel from the 3D voxel model.
- the system determines a volume measure for the occupied voxel based on a distance from the occupied voxel to a current position and/or a target position of a reference point of the robot.
- the system determines whether any links of the robot collide with and/or are within a threshold distance of the occupied voxel with the volume measure.
- the volume measure is the volume measure determined at block 408 .
- the volume measure is the volume measure determined at a most recent iteration of block 412 (described below).
- the system proceeds to block 412 .
- the system reduces the volume measure.
- the system can reduce the volume measure by a certain percentage and/or a certain value.
- the percentage and/or value at each iteration of block 412 may be the same or may vary.
- the percentage and/or value at a given iteration of block 412 can be based on an extent of a collision determined at a most recent iteration of block 410 .
- the volume measure can be reduced by the extent to which it is in collision with a link, such that after reduction it no longer collides with the link.
- the system then utilizes the reduced volume measure as the volume measure and proceeds back to block 410 .
- the system performs an iteration of block 412 , then proceeds from block 412 to block 414 .
- the system can reduce the volume measure by an extent to which it is in collision (thereby ensuring it is no longer in collision), and the system can proceed from block 412 to block 414 (without first proceeding back to block 410 ) and assign the reduced volume measure to the occupied voxel.
- the system may determine that the volume measure cannot be further reduced (e.g., the volume measure is already a “minimum” volume measure). In some of those implementations, the system may remove that occupied voxel and/or flag that occupied voxel as a “robot voxel” (e.g., it corresponds to a structural component of the robot) in response to determining that the volume measure cannot be further reduced. Stated differently, the system can assume that occupied voxel corresponds to the robot itself since even at a minimum volume measure it is still determined (at an iteration of block 410 ) to be in conflict with link(s) of the robot.
- the system may determine that the volume measure cannot be further reduced (e.g., the volume measure is already a “minimum” volume measure). In some of those implementations, the system may remove that occupied voxel and/or flag that occupied voxel as a “robot voxel” (e.g., it corresponds
- the system proceeds to block 414 .
- the system assigns the volume measure to the occupied voxel, the proceeds to block 416 .
- the system determines whether there are additional occupied voxels to process. If so, the system proceeds to block 406 and selects an additional unprocessed occupied voxel, then performs blocks 408 , 410 , optionally 412 , and 414 for the additional occupied voxel. In some implementations, the system may optionally process multiple voxels in parallel.
- the system determines there are no additional occupied voxels to process, the system proceeds to block 418 .
- the system removes one or more occupied voxels. For example, the system can remove occupied voxels based on volume measures assigned to the occupied voxels. For instance, the system can randomly remove X % of the occupied voxels that have volume measures greater than A. Also, for example, the system can randomly remove X % of the occupied voxels that have volume measures between A and B, Y % of the occupied voxels that have volume measures between B and C, etc. As used herein, randomly can mean either truly randomly or pseudo-randomly.
- the system generates a path based on the occupied voxels and assigned volume measures, optionally ignoring any occupied voxels removed at blocks 418 , 412 , or 404 .
- the system can generate the path from the current position to the target position, while considering the occupied voxels with the assigned volume measures as obstacles to be avoided by the path.
- the system executes the generated path.
- the system can generate control commands in real-time, and provide the control commands to actuators of the robot to effectuate the path.
- the control commands provided to the actuators can cause the robot to traverse through a plurality of intermediary configurations that follow the path, and before reaching a target configuration at which a reference point of the robot is at the target position.
- FIG. 5 is a block diagram of an example computer system 510 .
- Computer system 510 typically includes at least one processor 514 which communicates with a number of peripheral devices via bus subsystem 512 .
- peripheral devices may include a storage subsystem 524 , including, for example, a memory subsystem 525 and a file storage subsystem 526 , user interface output devices 520 , user interface input devices 522 , and a network interface subsystem 516 .
- Network interface subsystem 516 provides an interface to outside networks and is coupled to corresponding interface devices in other computer systems.
- User interface input devices 522 may include a keyboard, pointing devices such as a mouse, trackball, touchpad, or graphics tablet, a scanner, a touchscreen incorporated into the display, audio input devices such as voice recognition systems, microphones, and/or other types of input devices.
- pointing devices such as a mouse, trackball, touchpad, or graphics tablet
- audio input devices such as voice recognition systems, microphones, and/or other types of input devices.
- use of the term “input device” is intended to include all possible types of devices and ways to input information into computer system 510 or onto a communication network.
- User interface output devices 520 may include a display subsystem, a printer, a fax machine, or non-visual displays such as audio output devices.
- the display subsystem may include a cathode ray tube (CRT), a flat-panel device such as a liquid crystal display (LCD), a projection device, or some other mechanism for creating a visible image.
- the display subsystem may also provide non-visual display such as via audio output devices.
- output device is intended to include all possible types of devices and ways to output information from computer system 510 to the user or to another machine or computer system.
- Storage subsystem 524 stores programming and data constructs that provide the functionality of some or all of the modules described herein.
- the storage subsystem 524 may include the logic to perform selected aspects of method 400 , and/or to implement one or more aspects of robot 100 or control system 150 .
- Memory 525 used in the storage subsystem 524 can include a number of memories including a main random access memory (RAM) 530 for storage of instructions and data during program execution and a read only memory (ROM) 532 in which fixed instructions are stored.
- a file storage subsystem 526 can provide persistent storage for program and data files, and may include a hard disk drive, a CD-ROM drive, an optical drive, or removable media cartridges. Modules implementing the functionality of certain implementations may be stored by file storage subsystem 526 in the storage subsystem 524 , or in other machines accessible by the processor(s) 514 .
- Bus subsystem 512 provides a mechanism for letting the various components and subsystems of computer system 510 communicate with each other as intended. Although bus subsystem 512 is shown schematically as a single bus, alternative implementations of the bus subsystem may use multiple busses.
- Computer system 510 can be of varying types including a workstation, server, computing cluster, blade server, server farm, smart phone, smart watch, smart glasses, set top box, tablet computer, laptop, or any other data processing system or computing device. Due to the ever-changing nature of computers and networks, the description of computer system 510 depicted in FIG. 5 is intended only as a specific example for purposes of illustrating some implementations. Many other configurations of computer system 510 are possible having more or fewer components than the computer system depicted in FIG. 5 .
Abstract
Methods, apparatus, systems, and computer-readable media are provided for generating and utilizing non-uniform volume measures for occupied voxels, where each of the occupied voxels represents an occupied point of an environment of a robot. The volume measure for each of the occupied voxels is a “padding” for the occupied voxel and indicates a volume to be utilized for that occupied voxel. The volume measures for the occupied voxels are non-uniform in that they are not all the same volume measure. During path planning, the non-uniform volume measures of the occupied voxels can be considered as “paddings” for the occupied voxels and the occupied voxels with their corresponding volume measures considered as obstacles.
Description
Some robots and/or robot control systems construct and/or maintain a three-dimensional (“3D”) model of at least portions of an environment in which the robot operates. For example, a robot may acquire data from a 3D vision component (e.g., a 3D laser scanner or a stereographic camera) viewing a portion of the robot's environment, and map such data to the 3D model. Some 3D models are formed as so-called “voxel-based” 3D models (“3D voxel models”), in which a 3D matrix of voxels are allocated. For example, data points generated by one or more 3D vision components (also referred to as a “3D point cloud”) can be projected onto spatially-corresponding voxels of the 3D voxel model.
Further, some robots and/or robot control systems utilize 3D models for various robotics applications, such as path planning. For example, one or more path planning algorithms can utilize a “current” 3D model in generating a path of the robot from a “current position” of the robot to a “target position” of the robot. For instance, the path planning algorithm(s) can be utilized to generate a collision-free path while considering occupied voxels, of a 3D voxel model, as obstacles to be avoided—and while considering unoccupied voxels, of the 3D voxel model, as points through which the collision-free path may pass. In generating a path, all voxels of a 3D voxel model are typically considered to have the same volume. For example, each of the occupied voxels of the 3D voxel model can be transformed into a corresponding cube of a particular volume, and those particular volume cubes considered as obstacles in generating the path.
The present disclosure is generally directed to methods, apparatus, and computer-readable media (transitory and non-transitory) for generating and utilizing non-uniform volume measures for occupied voxels, where each of the occupied voxels represents an occupied point of an environment of a robot. Each of the occupied voxels is “occupied” based on it corresponding to a data point generated by a 3D vision component of the robot (e.g., a data point of a generated 3D point cloud). In other words, each of the occupied voxels is considered as occupied based on it corresponding to a 3D position that is indicated as occupied by a corresponding 3D vision component generated data point. The volume measure for each of the occupied voxels is a “padding” for the occupied voxel and indicates a volume to be utilized for that occupied voxel. For example, the volume measure for an occupied voxel can be a radius that indicates the volume of a sphere that has the radius and is centered on the occupied voxel. The volume measures for the occupied voxels are non-uniform in that they are not all the same volume measure. For example, one or more first occupied voxels can have a volume measure that is a radius of 10 cm, one or more second occupied voxels can have a volume measure that is a radius of 4 cm, one or more third occupied voxels can have a volume measure that is a radius of 3 mm, etc.
In some implementations, the volume measure for a given occupied voxel can be generated based on a position of the given occupied voxel as compared to: a current position of a reference point of the robot, a target position of the reference point of the robot, and/or position(s) of one or more “links” of the robot. A reference point of the robot can be, for example, a reference point of an end effector of the robot (e.g., an “action point” of the end effector, a center of mass of the end effector), or other reference point of the robot that is not relative to any end effector of the robot (e.g., a center of mass of the robot as a whole). A link of the robot references a structural component of the robot.
In some implementations, the volume measure for an occupied voxel is determined based on the smaller of: (1) a current distance that is the distance between the occupied voxel and the current position reference point of the robot; and (2) a target distance that is the distance between the occupied voxel and the target position reference point of the robot. In some of those implementations, an initial volume measure is determined based on the smaller of the current distance and the target distance. As one example, the initial volume measure can be: 15 cm if the smaller of the two distances is greater than or equal to 20 cm; 8 cm if the smaller of the two distances is less than 20 cm, but greater than or equal to 12 cm; 4 cm if the smaller of the two distances is less than 12 cm, but greater than or equal to 8 cm; etc. Additional and/or alternative ranges, values, and/or techniques (e.g., an equation-based technique) may be utilized to determine an initial volume measure based on the smaller of the current distance and the target distance.
In some versions of the implementations that determine an initial volume measure for an occupied voxel, the occupied voxel with the initial volume measure is then “checked” to determine if it collides with, and/or is within a threshold distance of, one or more links of the robot. If not, the initial volume measure can be used as the volume measure for the occupied voxel. If so, the initial volume measure can be reduced and the occupied voxel with the reduced volume measure can then be checked to determine if it is in collision with, and/or within the threshold distance of, the one or more links of the robot. If the occupied voxel with the reduced volume measure no longer collides with and/or is no longer within a threshold distance of link(s) of the robot, the reduced volume measure can be used as the volume measure for the occupied voxel. On the other hand, if the occupied voxel with the reduced volume measure still collides with and/or is within a threshold distance of link(s) of the robot, the reduced volume measure can optionally be further reduced. The occupied voxel with the further reduced volume measure can then be checked to determine if it is in collision with, and/or within the threshold distance of, the one or more links of the robot. Multiple iterations of this may optionally be performed. For example, multiple iterations may be performed until a minimum volume measure is reached and/or until other criterion/criteria are satisfied. If the occupied voxel with all checked reduced volume measures all collide with and/or are within a threshold distance of link(s) of the robot, the occupied voxel can be assumed to be part of the robot—and that occupied voxel optionally discarded and/or not considered as an obstacle in path planning and/or for other robotic operations.
Various techniques described herein can be utilized to cause relatively large volume measures to be defined for occupied voxels that correspond to objects that are relatively far away from: a current position of a robot, a target position of the robot, and/or links of the robot. Moreover, those various techniques can be utilized to cause relatively small volume measures to be defined for occupied voxels that correspond to objects that are relatively close to: a current position of a robot, a target position of the robot, and/or links of the robot. During path planning, the volume measures of the occupied voxels can be considered as “paddings” for the occupied voxels and the occupied voxels with their corresponding volume measures considered as obstacles. Accordingly, an object that is relatively “far away” can be represented by occupied voxel(s) each having a corresponding volume measure that is relatively large (e.g., that extends well beyond actual space occupied by the object). On the other hand, an object that is relatively “close” can be represented by occupied voxel(s) each having a corresponding volume measure that is relatively small (e.g., that does not extend beyond the actual space occupied by the object, or only slightly beyond).
In this manner, during path planning (or other robotic applications), relatively large areas around relatively far away objects can be considered as “occupied”. This may improve computational efficiency of the path planning relative to one or more prior techniques. For example, for exploratory path planning techniques (e.g., randomized path planning algorithms), having relatively large areas considered as occupied may reduce a path search space. Reducing the path search space may lead to faster resolution of a path. Moreover, simultaneously having relatively smaller volumes for occupied voxels that correspond to relatively close objects may still enable generation of an achievable path that is efficient (according to one or more parameters such as shortest path, quickest path) and/or that reaches the target position. Additionally, as described herein, some implementations may omit some voxels and corresponding volume measures from being considered during path planning, which may also improve the computational efficiency of the path planning. For example, some implementations may omit one or more voxels and corresponding volume measures based on the corresponding volume measures satisfying a threshold.
In some implementations, a method may be provided that includes: receiving data points generated by a three-dimensional (3D) vision component viewing an environment of a robot, and generating a 3D voxel model based on the data points. The 3D voxel model includes occupied voxels that are occupied based on the received data points. The method further includes generating a volume measure for each of the occupied voxels. The generated volume measures include a plurality of volume measures that are each non-uniform relative to other volume measures. Generating the volume measure for each of the occupied voxels includes: generating the volume measure for the occupied voxel based on distance between the occupied voxel and at least one of: a current position of a reference point of the robot, and a target position of the reference point of the robot. The method further includes: generating a path from the current position to the target position based on a group of the occupied voxels and the volume measures of the group of the occupied voxels; and generating control commands to provide to actuators of the robot to effectuate the path.
This method and other implementations of technology disclosed herein may each optionally include one or more of the following features.
In some implementations, generating the volume measure for a given occupied voxel of the occupied voxels is further based on a geometric model of the robot in a current configuration of the robot, where the current configuration causes the reference point to be in the current position. In some of those implementations, generating the volume measure for the given occupied voxel includes: generating an initial volume measure for the given occupied voxel based on distance between the given occupied voxel and the at least one of the current position and the target position; and generating the volume measure for the given occupied voxel by modifying the initial volume measure based on the geometric model. In some versions of those implementations, generating the initial volume measure for the given occupied voxel based on the distance between the given occupied voxel and the at least one of the current position and the target position includes generating the initial volume measure based on a smaller of: a current distance between the given occupied voxel and the current position, and a target distance between the given occupied voxel and the target position. Further, in some versions of those implementations, modifying the initial volume measure based on the geometric model includes: reducing the initial volume measure in response to determining that the given occupied voxel with the initial volume measure collides with the geometric model or is within a threshold distance of the geometric model.
In some implementations, generating the volume measure for a given occupied voxel of the occupied voxels is further based on a geometric model of the robot in a current configuration of the robot, and the geometric model of the robot includes a plurality of bounding volumes. Each of the bounding volumes represents at least one corresponding link of the robot in the current configuration of the robot. In some of those implementations, each of the bounding volumes is a bounding box.
In some implementations, the volume measures each define a corresponding radius. In some of those implementations, generating the path based on the occupied voxels and the volume measures of the group of the occupied voxels includes generating the path based on a plurality of spheres each defined by a corresponding one of the occupied voxels and its radius.
In some implementations, the group of the occupied voxels based on which the path is generated is a subgroup of the occupied voxels of the 3D voxel model. In some of those implementations, the method further includes: generating the subgroup of the occupied voxels by omitting at least some of the occupied voxels of the 3D voxel model. In some versions of those implementations, omitting at least one of the occupied voxels can be based on the volume measure of that occupied voxel being larger than a threshold and/or omitting at least one of the occupied voxels can be based on determining that occupied voxel represents a component of the robot. In some implementations, determining that that a given occupied voxel represents a component of the robot includes: generating an initial volume measure for the given occupied voxel based on distance between the given occupied voxel and the at least one of the current position and the target position; generating one or more smaller volume measures for the given occupied voxel; and determining that the given occupied voxel represents a component of the robot in response to determining that the given occupied voxel with the initial volume measure collides with the robot in a current configuration of the robot and that the given occupied voxel with any of the smaller volume measures collides with the robot in the current configuration.
Other implementations may include a non-transitory computer readable storage medium storing instructions executable by a processor to perform a method such as one or more of the methods described above. Yet another implementation may include a system (e.g., a robot, a robot control system, and/or one or more other components) including memory and one or more processors operable to execute instructions, stored in the memory, to implement one or more modules or engines that, alone or collectively, perform a method such as one or more of the methods described above.
It should be appreciated that all combinations of the foregoing concepts and additional concepts described in greater detail herein are contemplated as being part of the subject matter disclosed herein. For example, all combinations of claimed subject matter appearing at the end of this disclosure are contemplated as being part of the subject matter disclosed herein.
Implementations disclosed herein are related to generating and utilizing non-uniform volume measures for occupied voxels, where each of the occupied voxels represents an occupied point of an environment of a robot. As one particular example, assume a 3D point cloud is generated by a 3D vision component of a robot. One or more processors (e.g., of the robot) can generate a 3D voxel model based on the 3D point cloud. For example, voxels of the 3D voxel model can be indicated as “occupied” based on those voxels corresponding to data points of the 3D point cloud. One or more of the processors may optionally initially filter out one or more voxels of the 3D voxel model based on one or more criteria. For example, voxels that are beyond a workspace of the robot may be removed.
One or more of the processors can then generate a volume measure for each of the occupied voxels of the 3D voxel model. The volume measure for each of the occupied voxels can be generated based on a position of the occupied voxel as compared to: a current position of a reference point of the robot, a target position of the reference point of the robot, and/or position(s) of one or more “links” of the robot. As the volume measure for each of the occupied voxels is dependent on its position relative to position(s) of the robot, non-uniform volume measures are generated. In other words, the volume measures are not all the same. For example, one or more first occupied voxels can have a volume measure that is a radius of 5 cm, one or more second occupied voxels can have a volume measure that is a radius of 3 cm, one or more third occupied voxels can have a volume measure that is a radius of 1 cm, etc.
One or more of the processors can then utilize a group of the occupied voxels and their corresponding volume measures for path planning and/or other robotic application. For example, the volume measures can each indicate the volume of a sphere (e.g., be a radius), and their corresponding occupied voxel can indicate the center of the sphere. One or more of the processors can generate a path, from a current position of the robot to a target position of the robot, while considering the spheres as obstacles. For example, the path can be generated using an exploratory path planning technique that explores potential paths through areas that are not indicated by the spheres as occupied. For instance, a Rapidly-exploring Random Tree (RRT) algorithm may be utilized to generate the path, such as RRT-Connect.
As described herein, in generating volume measures for occupied voxels, implementations can generate relatively large volume measures for occupied voxels that correspond to objects that are relatively far away from: a current position of a robot, a target position of the robot, and/or links of the robot. On the other hand, in generating volume measures for occupied voxels, implementations can generate relatively small volume measures for occupied voxels that correspond to objects that are relatively close to: a current position of a robot, a target position of the robot, and/or links of the robot. Accordingly, an object that is relatively “far away” can be represented by occupied voxel(s) each having a corresponding volume measure that is relatively large. On the other hand, an object that is relatively “close” can be represented by occupied voxel(s) each having a corresponding volume measure that is relatively small. In this manner, during path planning relatively far away objects can each be represented by relatively large volume shape(s) (e.g., sphere(s)), while relatively close objects can each be represented by relatively low volume shape(s) (e.g., spheres).
This may provide various technical advantages. For example, utilizing relatively large volume shapes to represent relatively far away objects can lead to faster resolution of a path. Also, for example, utilizing relatively smaller volume shapes to represent relatively close objects may still enable generation of an achievable path that is efficient and/or that reaches the target position (e.g., that doesn't avoid the target position due to over-padding near the target position). Additionally, as described herein, some implementations may omit some voxels and corresponding volume measures from being considered during path planning, which may also improve the computational efficiency of the path planning.
Turning now to the figures, these and other implementations are described in more detail. FIG. 1 illustrates an example environment in which implementations disclosed herein may be implemented. A robot 100 is illustrated in FIG. 1 . Robot 100 may take various forms, including but not limited to a telepresence robot, a robot arm, a humanoid, an animal, an insect, an aquatic creature, a wheeled device, a submersible vehicle, a unmanned aerial vehicle (“UAV”), and so forth. In various implementations, robot 100 may include one or more processors 102. Processor(s) 102 may take various forms, such as one or more CPUs, one or more GPUs, one or more field-programmable gate arrays (“FPGA”), and/or one or more application-specific integrated circuits (“ASIC”). In some implementations, the processor(s) 102 may be operably coupled with memory 103. Memory 103 may take various forms, such as random access memory (“RAM”), dynamic RAM (“DRAM”), read-only memory (“ROM”), Magnetoresistive RAM (“MRAM”), resistive RAM (“RRAM”), NAND flash memory, and so forth.
In some implementations, processor(s) 102 may be operably coupled with one or more actuators 104 1-n, one or more end effectors 106, and/or one or more sensors 108 1-m, e.g., via one or more buses 110. The robot 100 may have multiple degrees of freedom and each of the actuators may control actuation of the robot 100 within one or more of the degrees of freedom responsive to control commands. The control commands are generated by one or more of the processor(s) 102 and provided to the actuators (e.g., via one or more of the buses 110) to control the robot 100. As used herein, “actuator” encompasses a mechanical or electrical device that creates motion (e.g., a motor), in addition to any driver(s) that may be associated with the actuator and that translate received control commands into one or more signals for driving the actuator. Accordingly, providing a control command to an actuator may comprise providing the control command to a driver that translates the control command into appropriate signals for driving an electrical or mechanical device to create desired motion.
As used herein, “end effector” may refer to a variety of tools that may be operated by robot 100 in order to accomplish various tasks. For example, some robots may be equipped with an end effector 106 that takes the form of a claw with two opposing “fingers” or “digits.” Such a claw is one type of “gripper” known as an “impactive” gripper. Other types of grippers may include but are not limited to “ingressive” (e.g., physically penetrating an object using pins, needles, etc.), “astrictive” (e.g., using suction or vacuum to pick up an object), or “contigutive” (e.g., using surface tension, freezing or adhesive to pick up object). More generally, other types of end effectors may include but are not limited to drills, brushes, force-torque sensors, cutting tools, deburring tools, welding torches, containers, trays, and so forth. In some implementations, end effector 106 may be removable, and various types of modular end effectors may be installed onto robot 100, depending on the circumstances. Some robots, such as some telepresence robots, may not be equipped with end effectors. Instead, some telepresence robots may include displays to render visual representations of the users controlling the telepresence robots, as well as speakers and/or microphones that facilitate the telepresence robot “acting” like the user.
The 3D voxel model engine 152 receives data points sensed by a 3D vision component of the sensors 108, and generates a 3D voxel model based on the data points. For example, the data points can be a 3D point cloud and the 3D voxel model engine 152 can project the data points onto spatially-corresponding voxels of the 3D voxel model, and indicate the corresponding voxels as occupied. In other words, it can generate the 3D voxel model by indicating voxels as occupied based on those voxels corresponding to 3D positions that are indicated as occupied by a corresponding 3D vision component generated data point. In some implementations, the 3D voxel model engine 152 may remove some voxels from the 3D voxel model, such as voxels that are beyond a workspace of the robot.
As described herein, the volume measure engine 155 generates non-uniform volume measures for occupied voxels of various 3D voxel models. The volume measures for the occupied voxels are non-uniform in that they are not all the same volume measure. Volume measure engine 155 can include an initial volume module 156, a reduced volume module 157, and a removal module 158.
In some implementations, for each considered occupied voxel, the initial volume module 156 generates an initial volume measure. In some of those implementations, the initial volume module 156 generates the initial volume measure based on a position of the occupied voxel as compared to: a current position of a reference point of the robot and/or a target position of the reference point of the robot. In some versions of those implementations, the module 156 determines (1) a current distance that is the distance between the occupied voxel and the current position reference point of the robot; and (2) a target distance that is the distance between the occupied voxel and the target position of the reference point of the robot. For example, the position of the occupied voxel may be expressed in three dimensions (X,Y,Z), and the current position and the target position may each be expressed in three dimensions. The current distance can be determined as the absolute value of the 3D distance between the position of the occupied voxel and the current position, and the target distance can each be determined as the absolute value of the 3D distance between the position of the occupied voxel and the target position.
In some implementations, the initial volume module 156 determines the initial volume measure based on the smaller of the current distance and the target distance. For example, the initial volume module 156 can access an index (e.g., in a computer readable media) that includes initial volumes mapped to distances and/or distance ranges. The initial volume module 156 can then search the index and select the initial volume that maps to the determined smaller of the distances. As another example, the initial volume module 156 can determine the initial volume measure by applying the smaller of the two distances to a function that maps distances to initial volumes. In some other implementations, the initial volume module 156 determines the initial volume measure based on the both the current distance and the target distance.
The target position of the reference point utilized by the volume measure engine 155 can be obtained from various sources. For example, the target position can be a user inputted target position (e.g., the user using one or more user interface input devices of a computing device to define the target position), a stored target position retrieved from memory (e.g., a stored target position for a task being performed by the robot 100), or a target position automatically determined by one or more components of the robot 100 (e.g., a target position determined to reach an object).
In some implementations, for each initial volume measure generated by the initial volume module 156, the reduced volume module 157 determines if the occupied voxel with the initial volume collides with, and/or is within a threshold distance of, one or more links of the robot. If not, the initial volume measure can be used as the volume measure for the occupied voxel. If so, reduced volume module 157 can reduce the initial volume measure and determine if the occupied voxel with the reduced volume measure collides with, and/or is within a threshold distance of, one or more links of the robot. If the occupied voxel with the reduced volume measure no longer collides with and/or is no longer within a threshold distance of link(s) of the robot, the reduced volume module 157 can assign the reduced volume measure to the occupied voxel. On the other hand, if the occupied voxel with the reduced volume measure still collides with and/or is within a threshold distance of link(s) of the robot, the reduced volume module 157 can further reduce the reduced volume measure. The reduced volume module 157 can then determine if the occupied voxel with the further reduced volume measure collides with, and/or is within a threshold distance of, one or more links of the robot. The reduced volume module 157 can perform multiple iterations of this, e.g., until a minimum volume measure is reached and/or until other criterion/criteria are satisfied. If the reduced volume module 157 determines the occupied voxel with all checked reduced volume measures all collide with and/or are within a threshold distance of link(s) of the robot, the occupied voxel can be assumed to be part of the robot—and that occupied voxel optionally discarded the reduced volume module 157 and/or not considered as an obstacle in path planning and/or for other robotic applications.
In some implementations, in determining whether a given occupied voxel with a given volume conflicts with one or more links of the robot, a geometric model of links of the robot is utilized. For example, a geometric model may include one or ore more bounded volumes that each contain one or more links of the robot. For instance, the one or more bounded volumes may include spheres, cubes, cuboids, cylinders, cones, and so forth. The positions of the bounded volumes can be determined based on the current configuration of the robot 100 (e.g., based on position sensor readings and a dynamic model of the robot 100). The reduced volume module 157 can then determine if the given occupied voxel with the given volume collides with and/or is within a threshold distance of the bounded volumes of the geometric model. For example, assume the geometric model is a plurality of cuboids, and the given occupied voxel with the given volume defines a sphere. The reduced volume module 157 can determine if the sphere intersects any of the cuboids and if so, determine that there is a collision.
Removal module 158 can remove one or more of the occupied voxels based on determined volume measures for those occupied voxels. For example, removal module 158 can remove one or more occupied voxels that have at least a threshold volume measure. For instance, the removal module 158 can randomly remove 40% of the occupied voxels with volume measures greater than X. Removing such occupied voxels may improve computational efficiency of path planning or other robotic application(s), while still enabling generation of a path that avoids obstacles. This can be due to the large padding/volume measures that are utilized for occupied voxels, since some occupied voxels with those large volume measures will likely still remain after a random removal—and since they are “oversized” they likely still encompass the corresponding object and will prevent planning of a path that collides with the object.
Turning now to FIGS. 3A-3F , additional description is provided of various implementations. In FIG. 3A , an example robot 300 is illustrated in a current configuration. The robot 300 is one example of robot 100 of FIG. 1 . Robot 300 is in a “robot arm” form and may include components that are in addition to those illustrated in FIG. 3A . For example, the robot 300 may further include a base that supports the robot arm, such as a stationary base and/or a mobile base (e.g., that includes wheels). The robot 300 includes a plurality of actuators 304 1-304 6 and an end effector 306 in the form of a gripper claw. A current position 307 of a reference point of the robot 300 in the current configuration is also illustrated, where the reference point is a reference point defined relative to the end effector 306 (i.e., at an “action point” of the end effector 306).
Also illustrated in FIG. 3A is a target position 308 of the reference point of the robot 300. The target position 308 can be, for example, a user inputted target position, a stored target position retrieved from memory, or a target position determined by one or more components of the robot 300.
Also illustrated in FIG. 3A is a 3D vision component 308 of the robot 300, that has a field of view of at least a portion of the environment of the robot 300. The 3D vision component 308 can be, for example a 3D laser scanner or a stereographic camera. The 3D vision component 308 captures data points (e.g., a 3D point cloud) that capture visible (to the 3D vision component 308) surfaces in the environment of the robot (e.g., visible surfaces of objects 1, 2, 3, and 4). The objects 1, 2, 3, and 4 are all the same dimensions, but are at different positions in the environment. The 3D vision component 308 is illustrated in FIG. 3A as separate from the robot 300 for simplicity, but it is understood that it may be incorporated as part of the robot 300 (e.g., coupled to an unillustrated “base” of the robot 300).
It is noted that the components of FIG. 3A are three-dimensional components, even though they are represented two-dimensionally in FIG. 3A for the sake of simplicity. For example, objects 1, 2, 3, and 4 are each 3D components. Also, it is noted that the positions of the various components may vary in the dimension that is “into” and “out of” FIG. 2A . For example, in addition to object 1 and object 2 varying positionally in the dimensions of FIG. 3A , they may also vary positionally in a dimension that is “into” and “out of” FIG. 2A .
Spheres 201-205 each correspond to a corresponding occupied voxel, that in turn corresponds to a corresponding data point that captures object 2 (FIG. 3A ). Each of the occupied voxels represented by spheres 201-205 has a volume measure that is the radius of its corresponding sphere 201-205. As can be seen, spheres 201-205 all have the same volume measure, and the volume measure of the spheres 201-205 is much smaller than the volume measure of sphere 101. This can be due to the occupied voxels of each of the spheres 201-205 being relatively close to the current position 307. For example, the radius of the sphere 201 can be initially determined based on the distance of the occupied voxel of the sphere 201 to the current position 307 (since that distance is smaller than the distance of the occupied voxel to the target position 308). Further, the sphere 201 can be checked to see if interferes with bounding boxes and/or other geometric models of the current configuration (indicated in solid lines) of the robot 300 and, since it does not, that initially determined radius utilized.
Spheres 301-305 each correspond to a corresponding occupied voxel, that in turn corresponds to a corresponding data point that captures object 3 (FIG. 3A ). Each of the occupied voxels represented by spheres 301-305 has a volume measure that is the radius of its corresponding sphere 301-305. As can be seen, spheres 301-305 all have the same volume measure, and the volume measure of the spheres 301-305 is the same as that of the spheres 201-205. This can be due to the occupied voxels of each of the spheres 301-305 being relatively close to the target position 308. For example, the radius of the sphere 301 can be initially determined based on the distance of the occupied voxel of the sphere 301 to the target position 308 (since that distance is smaller than the distance of the occupied voxel to the current position 307). Further, the sphere 301 can be checked to see if interferes with bounding boxes and/or other geometric models of the current configuration (indicated in solid lines) of the robot 300 and, since it does not, that initially determined radius utilized.
For example, with reference to FIG. 3C an initial radius indicated by sphere 401A (that is the same size as sphere 101) can be initially determined based on the distance of the occupied voxel of the sphere 401 to the current position 307 (since that distance is smaller than the distance to the target position 308). Further, the initially determined radius can be checked to see if interferes with bounding boxes and/or other geometric models of the current configuration (solid lines) of the robot 300. For example, it can be determined whether the sphere 401A collides with any bounding boxes that represent the links, such as bounding box 371 1 of FIG. 3C . Since it does (see FIG. 3C ), the initially determined radius can be reduced to that indicated by sphere 401 of FIG. 3C . The sphere 401 can also be checked for interference with bounding boxes and/or other geometric models of the current configuration of the robot 300. For example, it can be determined whether the sphere 401 collides with any bounding boxes that represent the links and, since it does not, that reduced radius can be utilized. It is noted that multiple iterations of “reducing” and “checking” may be performed.
The spheres 101, 201-205, 301-305, and 401 of FIG. 3B can be provided to path engine 160, and the path engine 160 can utilize those as indications of obstacles in generating a path that avoids obstacles, such as example path 309 of FIG. 3B . It is noted that the example path 309 may be a 3D path, even though it is illustrated in FIG. 3B as two-dimensional for simplicity. Commands engine 162 can generate control commands to provide to actuators 304 1-6 to effectuate the path 309. For example, the control commands can cause the robot 300 to move from the current configuration (solid lines) to a target configuration (broken lines) in which the reference point of the robot 300 is at the target position 308.
It is noted that the target configuration (broken lines) of the robot 300 in FIG. 3B is presented as just one example. Due to kinematic redundancy of the robot 300, there are multiple additional target configurations in which the reference point of the end effector 306 can also be positioned at the target position 308. Further, it is noted that in many implementations a target configuration for the target position 308 is not determined until after generation of the path 309. For example, the path 309 may be generated, then control commands generated in real-time to effectuate the path and cause the robot to traverse through a plurality of intermediary configurations before reaching the target configuration.
It is also noted that although the objects 1, 2, 3, and 4 are all the same size (as illustrated in FIG. 3A ), the spheres utilized to represent those objects have non-uniform volumes (as illustrated in FIG. 3B ). Again, this is based on the varying positions of occupied voxels corresponding to those objects and, in particular, the varying positions relative to the current position 307, target position 308, and/or a geometric model of the robot 300. As described above, this may improve computational efficiency of the path planning relative to prior techniques.
Although FIG. 3B illustrates some spheres, additional spheres may be generated based on additional occupied voxels and optionally provided to and/or utilized by the path engine 160. For example, FIG. 3D illustrates how additional spheres 105 and 106 may be generated based on additional occupied voxels that correspond to object 1. For example: sphere 101 may have a center that corresponds to a first voxel that is occupied based on a first data point that captures object 1; sphere 105 may have a center that corresponds to a second voxel that is occupied based on a second data point that captures object 1; and sphere 106 may have a center that corresponds to a third voxel that is occupied based on a third data point that captures object 1. In some implementations, these (and optionally additional) spheres may also be provided to the path engine 160.
In some implementations, one or more of the spheres 101, 105, and/or 106 (and/or additional spheres) may be removed and a subgroup of spheres provided to the path planner. For example, one or more spheres such as sphere 105, sphere 106 and/or other spheres having at least a threshold volume measure may be removed (e.g., X % of spheres of greater than Y radius may be “randomly” removed), under the assumption that other “large” spheres that capture the same object may still remain—and since they are “oversized” they likely still encompass the object and will prevent planning of a path that collides with the object. Removing one or more spheres may improve computational efficiency of path planning as described herein.
Referring now to FIG. 4 , an example method 400 according to various implementations is described. For convenience, the operations of the method 400 are described with reference to a system that performs the operations. This system may include various components of a robot and/or of one or more computing devices in communication with the robot. Moreover, while operations of method 400 are shown in a particular order, this is not meant to be limiting. One or more operations may be reordered, omitted or added.
At block 402, the system generates a 3D voxel model based on data points generated by a 3D vision component of a robot. For example, the system may receive, e.g., from a three-dimensional vision sensor of robot 100, the data points in the form of a 3D point cloud sensed by the three-dimensional vision sensor. In some implementations, the system generates the 3D voxel model based on projecting the data points onto voxels of the 3D voxel model.
At block 404, the system removes occupied voxels that are not in a workspace of the robot. In some implementations, at block 404 the system additionally and/or alternatively removes voxels based on one or more other criteria.
At block 406, the system selects an occupied voxel from the 3D voxel model.
At block 408, the system determines a volume measure for the occupied voxel based on a distance from the occupied voxel to a current position and/or a target position of a reference point of the robot.
At block 410, the system determines whether any links of the robot collide with and/or are within a threshold distance of the occupied voxel with the volume measure. In a first iteration of block 410 for a given selected voxel, the volume measure is the volume measure determined at block 408. In any subsequent iterations of block 410 for a given selected voxel, the volume measure is the volume measure determined at a most recent iteration of block 412 (described below).
At block 410, if it is determined that link(s) of the robot collide with and/or are within a threshold distance of the occupied voxel with the volume measure, the system proceeds to block 412. At block 412, the system reduces the volume measure. For example, the system can reduce the volume measure by a certain percentage and/or a certain value. The percentage and/or value at each iteration of block 412 may be the same or may vary. For example, the percentage and/or value at a given iteration of block 412 can be based on an extent of a collision determined at a most recent iteration of block 410. For instance, the volume measure can be reduced by the extent to which it is in collision with a link, such that after reduction it no longer collides with the link.
In some implementations, the system then utilizes the reduced volume measure as the volume measure and proceeds back to block 410. In some other implementations, the system performs an iteration of block 412, then proceeds from block 412 to block 414. For example, at block 412 the system can reduce the volume measure by an extent to which it is in collision (thereby ensuring it is no longer in collision), and the system can proceed from block 412 to block 414 (without first proceeding back to block 410) and assign the reduced volume measure to the occupied voxel.
In some implementations, at an iteration of block 412 the system may determine that the volume measure cannot be further reduced (e.g., the volume measure is already a “minimum” volume measure). In some of those implementations, the system may remove that occupied voxel and/or flag that occupied voxel as a “robot voxel” (e.g., it corresponds to a structural component of the robot) in response to determining that the volume measure cannot be further reduced. Stated differently, the system can assume that occupied voxel corresponds to the robot itself since even at a minimum volume measure it is still determined (at an iteration of block 410) to be in conflict with link(s) of the robot.
At block 410, if it is determined that link(s) of the robot do not collide with and/or are not within a threshold distance of the occupied voxel with the volume measure, the system proceeds to block 414. At block 414, the system assigns the volume measure to the occupied voxel, the proceeds to block 416.
At block 416, the system determines whether there are additional occupied voxels to process. If so, the system proceeds to block 406 and selects an additional unprocessed occupied voxel, then performs blocks 408, 410, optionally 412, and 414 for the additional occupied voxel. In some implementations, the system may optionally process multiple voxels in parallel.
If, at block 416, the system determines there are no additional occupied voxels to process, the system proceeds to block 418. At block 418, the system removes one or more occupied voxels. For example, the system can remove occupied voxels based on volume measures assigned to the occupied voxels. For instance, the system can randomly remove X % of the occupied voxels that have volume measures greater than A. Also, for example, the system can randomly remove X % of the occupied voxels that have volume measures between A and B, Y % of the occupied voxels that have volume measures between B and C, etc. As used herein, randomly can mean either truly randomly or pseudo-randomly.
At block 420, the system generates a path based on the occupied voxels and assigned volume measures, optionally ignoring any occupied voxels removed at blocks 418, 412, or 404. For example, the system can generate the path from the current position to the target position, while considering the occupied voxels with the assigned volume measures as obstacles to be avoided by the path.
At block 422, the system executes the generated path. For example, the system can generate control commands in real-time, and provide the control commands to actuators of the robot to effectuate the path. The control commands provided to the actuators can cause the robot to traverse through a plurality of intermediary configurations that follow the path, and before reaching a target configuration at which a reference point of the robot is at the target position.
The input and output devices allow user interaction with computer system 510. Network interface subsystem 516 provides an interface to outside networks and is coupled to corresponding interface devices in other computer systems.
User interface input devices 522 may include a keyboard, pointing devices such as a mouse, trackball, touchpad, or graphics tablet, a scanner, a touchscreen incorporated into the display, audio input devices such as voice recognition systems, microphones, and/or other types of input devices. In general, use of the term “input device” is intended to include all possible types of devices and ways to input information into computer system 510 or onto a communication network.
User interface output devices 520 may include a display subsystem, a printer, a fax machine, or non-visual displays such as audio output devices. The display subsystem may include a cathode ray tube (CRT), a flat-panel device such as a liquid crystal display (LCD), a projection device, or some other mechanism for creating a visible image. The display subsystem may also provide non-visual display such as via audio output devices. In general, use of the term “output device” is intended to include all possible types of devices and ways to output information from computer system 510 to the user or to another machine or computer system.
While several implementations have been described and illustrated herein, a variety of other means and/or structures for performing the function and/or obtaining the results and/or one or more of the advantages described herein may be utilized, and each of such variations and/or modifications is deemed to be within the scope of the implementations described herein. More generally, all parameters, dimensions, materials, and configurations described herein are meant to be exemplary and that the actual parameters, dimensions, materials, and/or configurations will depend upon the specific application or applications for which the teachings is/are used. Those skilled in the art will recognize, or be able to ascertain using no more than routine experimentation, many equivalents to the specific implementations described herein. It is, therefore, to be understood that the foregoing implementations are presented by way of example only and that, within the scope of the appended claims and equivalents thereto, implementations may be practiced otherwise than as specifically described and claimed. Implementations of the present disclosure are directed to each individual feature, system, article, material, kit, and/or method described herein. In addition, any combination of two or more such features, systems, articles, materials, kits, and/or methods, if such features, systems, articles, materials, kits, and/or methods are not mutually inconsistent, is included within the scope of the present disclosure.
Claims (19)
1. A method, comprising:
receiving data points generated by a vision component viewing an environment of a robot;
generating a three-dimensional (3D) voxel model based on the data points, the 3D voxel model including occupied voxels that are occupied based on the received data points;
generating a volume measure for each of the occupied voxels, wherein generating the volume measures includes generating a plurality of volume measures that are each non-uniform relative to other volume measures;
generating a subgroup of the occupied voxels by omitting at least some of the occupied voxels of the 3D voxel model;
generating a path, from a current position to a target position, based on the subgroup of the occupied voxels and the volume measures of the subgroup of the occupied voxels; and
generating control commands to provide to actuators of the robot to effectuate the path.
2. The method of claim 1 , wherein omitting a given occupied voxel of the occupied voxels is based on the volume measure of the given occupied voxel being larger than a threshold.
3. The method of claim 1 , wherein omitting at least some of the occupied voxels comprises omitting at least a threshold percentage of the occupied voxels with corresponding volume measures larger than a threshold.
4. The method of claim 1 , wherein omitting a given occupied voxel of the occupied voxels is based on determining that the given occupied voxel represents a component of the robot.
5. The method of claim 4 , wherein determining that the given occupied voxel represents a component of the robot comprises:
generating an initial volume measure for the given occupied voxel based on distance between the given occupied voxel and the at least one of the current position and the target position;
generating one or more smaller volume measures for the given occupied voxel; and
determining that the given occupied voxel represents a component of the robot in response to determining that the given occupied voxel with the initial volume measure collides with the robot in a current configuration of the robot and that the given occupied voxel with any of the smaller volume measures collides with the robot in the current configuration.
6. The method of claim 1 , wherein the volume measures each define a corresponding radius and wherein generating the path based on the occupied voxels and the volume measures of the subgroup of the occupied voxels comprises generating the path based on a plurality of spheres each defined by a corresponding one of the occupied voxels and its radius.
7. A robot, comprising:
robot actuators;
a vision component;
one or more processors operably coupled with the vision component; and
memory operably coupled with the one or more processors, the memory storing instructions that, when executed by the one or more processors, cause the one or more processors to:
receive data points generated by the vision component;
generate a three-dimensional (3D) voxel model based on the data points, the 3D voxel model including occupied voxels that are occupied based on the received data points;
generate a volume measure for each of the occupied voxels, wherein in generating the volume measures one or more of the processors are to generate a plurality of volume measures that are each non-uniform relative to other volume measures;
generate a subgroup of the occupied voxels by omitting at least some of the occupied voxels of the 3D voxel model;
generate a robot path based on the subgroup of the occupied voxels and the volume measures of the subgroup of the occupied voxels; and
generate control commands to provide to one or more of the robot actuators to effectuate the robot path.
8. The robot of claim 7 , wherein in omitting a given occupied voxel, of the occupied voxels, in generating the subgroup, one or more of the processors are to omit the given occupied voxel based on the volume measure of the given occupied voxel being larger than a threshold.
9. The robot of claim 7 , wherein in omitting a given occupied voxel, of the occupied voxels, in generating the subgroup, one or more of the processors are to omit at least a threshold percentage of the occupied voxels with corresponding volume measures larger than a threshold.
10. The robot of claim 8 , wherein in omitting a given occupied voxel, of the occupied voxels, in generating the subgroup, one or more of the processors are to omit the given occupied voxel based on determining that the given occupied voxel represents a component of the robot.
11. The robot of claim 10 , wherein in determining that the given occupied voxel represents a component of the robot, one or more of the processors is to:
generate an initial volume measure for the given occupied voxel based on distance between the given occupied voxel and at least one of a current position of the robot and a target position of the robot;
generate one or more smaller volume measures for the given occupied voxel; and
determine that the given occupied voxel represents a component of the robot in response to determining that the given occupied voxel with the initial volume measure collides with the robot in a current configuration of the robot and that the given occupied voxel with any of the smaller volume measures collides with the robot in the current configuration.
12. The robot of claim 7 , wherein the volume measures each define a corresponding radius.
13. The robot of claim 12 , wherein in generating the path based on the occupied voxels and the volume measures of the subgroup of the occupied voxels, one or more of the processors is to generate the path based on a plurality of spheres each defined by a corresponding one of the occupied voxels and its radius.
14. A robot control system, comprising:
one or more processors; and
memory operably coupled with the one or more processors, the memory storing instructions that, when executed by the one or more processors, cause the one or more processors to:
receive data points generated by a vision component of a robot;
generate a three-dimensional (3D) voxel model based on the data points, the 3D voxel model including occupied voxels that are occupied based on the received data points;
generate a volume measure for each of the occupied voxels, wherein in generating the volume measures one or more of the processors are to generate a plurality of volume measures that are each non-uniform relative to other volume measures;
generate a subgroup of the occupied voxels by omitting at least some of the occupied voxels of the 3D voxel model;
generate a robot path based on the subgroup of the occupied voxels and the volume measures of the subgroup of the occupied voxels; and
generate control commands to provide to one or more of the robot actuators to effectuate the robot path.
15. The robot of control system of claim 14 , wherein in omitting a given occupied voxel, of the occupied voxels, in generating the subgroup, one or more of the processors are to omit the given occupied voxel based on the volume measure of the given occupied voxel being larger than a threshold.
16. The robot of control system of claim 14 , wherein in omitting a given occupied voxel, of the occupied voxels, in generating the subgroup, one or more of the processors are to omit at least a threshold percentage of the occupied voxels with corresponding volume measures larger than a threshold.
17. The robot control system of claim 14 , wherein in omitting a given occupied voxel, of the occupied voxels, in generating the subgroup, one or more of the processors are to omit the given occupied voxel based on determining that the given occupied voxel represents a component of the robot.
18. The robot control system of claim 17 , wherein in determining that the given occupied voxel represents a component of the robot one or more of the processors is to:
generate an initial volume measure for the given occupied voxel based on distance between the given occupied voxel and at least one of a current position of the robot and a target position of the robot;
generate one or more smaller volume measures for the given occupied voxel; and
determine that the given occupied voxel represents a component of the robot in response to determining that the given occupied voxel with the initial volume measure collides with the robot in a current configuration of the robot and that the given occupied voxel with any of the smaller volume measures collides with the robot in the current configuration.
19. The robot control system of claim 14 , wherein the volume measures each define a corresponding radius, and wherein in generating the path based on the occupied voxels and the volume measures of the subgroup of the occupied voxels, one or more of the processors is to generate the path based on a plurality of spheres each defined by a corresponding one of the occupied voxels and its radius.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US16/386,189 US10671081B1 (en) | 2017-04-20 | 2019-04-16 | Generating and utilizing non-uniform volume measures for voxels in robotics applications |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/492,647 US10303180B1 (en) | 2017-04-20 | 2017-04-20 | Generating and utilizing non-uniform volume measures for voxels in robotics applications |
US16/386,189 US10671081B1 (en) | 2017-04-20 | 2019-04-16 | Generating and utilizing non-uniform volume measures for voxels in robotics applications |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/492,647 Continuation US10303180B1 (en) | 2017-04-20 | 2017-04-20 | Generating and utilizing non-uniform volume measures for voxels in robotics applications |
Publications (1)
Publication Number | Publication Date |
---|---|
US10671081B1 true US10671081B1 (en) | 2020-06-02 |
Family
ID=66636096
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/492,647 Active 2037-10-29 US10303180B1 (en) | 2017-04-20 | 2017-04-20 | Generating and utilizing non-uniform volume measures for voxels in robotics applications |
US16/386,189 Active US10671081B1 (en) | 2017-04-20 | 2019-04-16 | Generating and utilizing non-uniform volume measures for voxels in robotics applications |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/492,647 Active 2037-10-29 US10303180B1 (en) | 2017-04-20 | 2017-04-20 | Generating and utilizing non-uniform volume measures for voxels in robotics applications |
Country Status (1)
Country | Link |
---|---|
US (2) | US10303180B1 (en) |
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20230356400A1 (en) * | 2018-02-06 | 2023-11-09 | Realtime Robotics, Inc. | Motion planning of a robot storing a discretized environment on one or more processors and improved operation of same |
EP4279224A4 (en) * | 2021-01-12 | 2024-02-28 | Kawasaki Heavy Ind Ltd | Path generation device, path generation method, and path generation program |
Families Citing this family (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP6879464B2 (en) * | 2017-08-02 | 2021-06-02 | オムロン株式会社 | Interference determination method, interference determination system and computer program |
WO2019139815A1 (en) | 2018-01-12 | 2019-07-18 | Duke University | Apparatus, method and article to facilitate motion planning of an autonomous vehicle in an environment having dynamic objects |
ES2928250T3 (en) | 2018-03-21 | 2022-11-16 | Realtime Robotics Inc | Planning the movement of a robot for various environments and tasks and improving its operation |
CN112601641B (en) * | 2018-08-23 | 2024-03-08 | 实时机器人有限公司 | Collision detection for robotic motion planning |
US11213946B1 (en) * | 2018-12-27 | 2022-01-04 | X Development Llc | Mitigating reality gap through optimization of simulated hardware parameter(s) of simulated robot |
DE102019103349B3 (en) * | 2019-02-11 | 2020-06-18 | Beckhoff Automation Gmbh | Industrial robot system and method for controlling an industrial robot |
JP7299097B2 (en) * | 2019-08-02 | 2023-06-27 | 国立大学法人信州大学 | Trajectory generator |
CN115279559A (en) * | 2020-03-06 | 2022-11-01 | 医达科技公司 | Method and system for obstacle avoidance in robot path planning using depth sensors |
US11977392B2 (en) * | 2020-05-11 | 2024-05-07 | Mobile Industrial Robots Inc. | Identifying elements in an environment |
CN113589822A (en) | 2020-08-20 | 2021-11-02 | 深圳市海柔创新科技有限公司 | Warehouse robot navigation route reservation |
EP4282601A1 (en) * | 2021-03-12 | 2023-11-29 | Huawei Technologies Co., Ltd. | Method for controlling movement of moving body and related device |
Citations (17)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6194860B1 (en) * | 1999-11-01 | 2001-02-27 | Yoder Software, Inc. | Mobile camera-space manipulation |
US20070010913A1 (en) * | 2005-07-05 | 2007-01-11 | Atsushi Miyamoto | Motion editing apparatus and motion editing method for robot, computer program and robot apparatus |
US20070071311A1 (en) * | 2005-09-28 | 2007-03-29 | Deere & Company, A Delaware Corporation | Method for processing stereo vision data using image density |
US20070239315A1 (en) * | 2004-07-13 | 2007-10-11 | Matsushta Electric Industrial Co., Ltd. | Article holding system, robot, and method of controlling robot |
US8229595B2 (en) * | 2008-06-19 | 2012-07-24 | Seelinger Michael J | Method and system for providing autonomous control of a platform |
US20130325244A1 (en) * | 2011-01-28 | 2013-12-05 | Intouch Health | Time-dependent navigation of telepresence robots |
US20160016312A1 (en) * | 2013-03-15 | 2016-01-21 | Carnegie Mellon University | A Supervised Autonomous Robotic System for Complex Surface Inspection and Processing |
US20160023352A1 (en) * | 2014-07-25 | 2016-01-28 | California Institute Of Technology | SURROGATE: A Body-Dexterous Mobile Manipulation Robot with a Tracked Base |
US9347793B2 (en) * | 2012-04-02 | 2016-05-24 | Honeywell International Inc. | Synthetic vision systems and methods for displaying detached objects |
US20160342433A1 (en) * | 2015-05-18 | 2016-11-24 | Goodrich Corporation | System architecture for machine vision on moving platforms |
US20170120449A1 (en) * | 2014-03-14 | 2017-05-04 | Mitsubishi Heavy Industries, Ltd. | Simulation apparatus of robot, simulation method of robot, control unit and robot system |
US20170157769A1 (en) * | 2015-12-02 | 2017-06-08 | Qualcomm Incorporated | Simultaneous mapping and planning by a robot |
US20170168488A1 (en) * | 2015-12-15 | 2017-06-15 | Qualcomm Incorporated | Autonomous visual navigation |
US20170165835A1 (en) * | 2015-12-09 | 2017-06-15 | Qualcomm Incorporated | Rapidly-exploring randomizing feedback-based motion planning |
US10078333B1 (en) * | 2016-04-17 | 2018-09-18 | X Development Llc | Efficient mapping of robot environment |
US10108194B1 (en) * | 2016-09-02 | 2018-10-23 | X Development Llc | Object placement verification |
US10112297B2 (en) * | 2015-06-03 | 2018-10-30 | Seiko Epson Corporation | Robot control apparatus, robot, and robot system |
-
2017
- 2017-04-20 US US15/492,647 patent/US10303180B1/en active Active
-
2019
- 2019-04-16 US US16/386,189 patent/US10671081B1/en active Active
Patent Citations (17)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6194860B1 (en) * | 1999-11-01 | 2001-02-27 | Yoder Software, Inc. | Mobile camera-space manipulation |
US20070239315A1 (en) * | 2004-07-13 | 2007-10-11 | Matsushta Electric Industrial Co., Ltd. | Article holding system, robot, and method of controlling robot |
US20070010913A1 (en) * | 2005-07-05 | 2007-01-11 | Atsushi Miyamoto | Motion editing apparatus and motion editing method for robot, computer program and robot apparatus |
US20070071311A1 (en) * | 2005-09-28 | 2007-03-29 | Deere & Company, A Delaware Corporation | Method for processing stereo vision data using image density |
US8229595B2 (en) * | 2008-06-19 | 2012-07-24 | Seelinger Michael J | Method and system for providing autonomous control of a platform |
US20130325244A1 (en) * | 2011-01-28 | 2013-12-05 | Intouch Health | Time-dependent navigation of telepresence robots |
US9347793B2 (en) * | 2012-04-02 | 2016-05-24 | Honeywell International Inc. | Synthetic vision systems and methods for displaying detached objects |
US20160016312A1 (en) * | 2013-03-15 | 2016-01-21 | Carnegie Mellon University | A Supervised Autonomous Robotic System for Complex Surface Inspection and Processing |
US20170120449A1 (en) * | 2014-03-14 | 2017-05-04 | Mitsubishi Heavy Industries, Ltd. | Simulation apparatus of robot, simulation method of robot, control unit and robot system |
US20160023352A1 (en) * | 2014-07-25 | 2016-01-28 | California Institute Of Technology | SURROGATE: A Body-Dexterous Mobile Manipulation Robot with a Tracked Base |
US20160342433A1 (en) * | 2015-05-18 | 2016-11-24 | Goodrich Corporation | System architecture for machine vision on moving platforms |
US10112297B2 (en) * | 2015-06-03 | 2018-10-30 | Seiko Epson Corporation | Robot control apparatus, robot, and robot system |
US20170157769A1 (en) * | 2015-12-02 | 2017-06-08 | Qualcomm Incorporated | Simultaneous mapping and planning by a robot |
US20170165835A1 (en) * | 2015-12-09 | 2017-06-15 | Qualcomm Incorporated | Rapidly-exploring randomizing feedback-based motion planning |
US20170168488A1 (en) * | 2015-12-15 | 2017-06-15 | Qualcomm Incorporated | Autonomous visual navigation |
US10078333B1 (en) * | 2016-04-17 | 2018-09-18 | X Development Llc | Efficient mapping of robot environment |
US10108194B1 (en) * | 2016-09-02 | 2018-10-23 | X Development Llc | Object placement verification |
Non-Patent Citations (4)
Title |
---|
Marder-Eppstein, Eitan, et al. "The office marathon: Robust navigation in an indoor office environment." Robotics and Automation (ICRA), International Conference on IEEE, 2010. 8 pages. |
Quispe, Ana Huamán, and Mike Stilman. Diverse workspace path planning for robot manipulators. Georgia Institute of Technology, 2012; 17 pages. |
Vandapel, Nicolas, James Kuffner, and Omead Amidi. "Planning 3-d path networks in unstructured environments." Robotics and Automation, 2005. ICRA 2005. Proceedings of the 2005 IEEE International Conference; pp. 4624-4629. |
Yan, Fei, Yi-Sha Liu, and Ji-Zhong Xiao. "Path planning in complex 3D environments using a probabilistic roadmap method." International Journal of Automation and Computing 10.6 (2013): 525-533. |
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20230356400A1 (en) * | 2018-02-06 | 2023-11-09 | Realtime Robotics, Inc. | Motion planning of a robot storing a discretized environment on one or more processors and improved operation of same |
EP4279224A4 (en) * | 2021-01-12 | 2024-02-28 | Kawasaki Heavy Ind Ltd | Path generation device, path generation method, and path generation program |
Also Published As
Publication number | Publication date |
---|---|
US10303180B1 (en) | 2019-05-28 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10671081B1 (en) | Generating and utilizing non-uniform volume measures for voxels in robotics applications | |
US11548145B2 (en) | Deep machine learning methods and apparatus for robotic grasping | |
US11554483B2 (en) | Robotic grasping prediction using neural networks and geometry aware object representation | |
US11691277B2 (en) | Grasping of an object by a robot based on grasp strategy determined using machine learning model(s) | |
US11640517B2 (en) | Update of local features model based on correction to robot action | |
US11192250B1 (en) | Methods and apparatus for determining the pose of an object based on point cloud data | |
US10166676B1 (en) | Kinesthetic teaching of grasp parameters for grasping of objects by a grasping end effector of a robot | |
US11042783B2 (en) | Learning and applying empirical knowledge of environments by robots | |
US10853646B1 (en) | Generating and utilizing spatial affordances for an object in robotics applications | |
US10078333B1 (en) | Efficient mapping of robot environment | |
US10946519B1 (en) | Offline computation and caching of precalculated joint trajectories | |
US10105847B1 (en) | Detecting and responding to geometric changes to robots | |
US9992480B1 (en) | Apparatus and methods related to using mirrors to capture, by a camera of a robot, images that capture portions of an environment from multiple vantages | |
US20210101286A1 (en) | Robotic manipulation using domain-invariant 3d representations predicted from 2.5d vision data | |
US20240033904A1 (en) | Simulating multiple robots in virtual environments | |
US10035264B1 (en) | Real time robot implementation of state machine | |
US10780581B1 (en) | Generation and application of reachability maps to operate robots | |
US11654550B1 (en) | Single iteration, multiple permutation robot simulation | |
US11938638B2 (en) | Simulation driven robotic control of real robot(s) | |
WO2022147018A1 (en) | Simulation driven robotic control of real robot(s) |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
FEPP | Fee payment procedure |
Free format text: ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: BIG.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |