CN113646835A - Joint automatic speech recognition and speaker binarization - Google Patents
Joint automatic speech recognition and speaker binarization Download PDFInfo
- Publication number
- CN113646835A CN113646835A CN202080024957.3A CN202080024957A CN113646835A CN 113646835 A CN113646835 A CN 113646835A CN 202080024957 A CN202080024957 A CN 202080024957A CN 113646835 A CN113646835 A CN 113646835A
- Authority
- CN
- China
- Prior art keywords
- output
- sequence
- neural network
- speaker
- symbol
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000013528 artificial neural network Methods 0.000 claims abstract description 67
- 238000000034 method Methods 0.000 claims abstract description 32
- 238000012545 processing Methods 0.000 claims abstract description 27
- 238000003860 storage Methods 0.000 claims abstract description 12
- 238000013518 transcription Methods 0.000 claims description 20
- 230000035897 transcription Effects 0.000 claims description 20
- 230000008569 process Effects 0.000 claims description 16
- 238000009826 distribution Methods 0.000 claims description 14
- 238000013507 mapping Methods 0.000 claims description 7
- 230000001143 conditioned effect Effects 0.000 claims description 3
- 238000004590 computer program Methods 0.000 abstract description 15
- 238000012549 training Methods 0.000 description 10
- 230000015654 memory Effects 0.000 description 7
- 230000000306 recurrent effect Effects 0.000 description 7
- 238000004422 calculation algorithm Methods 0.000 description 5
- 238000004891 communication Methods 0.000 description 5
- 238000010801 machine learning Methods 0.000 description 5
- 238000010586 diagram Methods 0.000 description 4
- 230000006870 function Effects 0.000 description 3
- 230000003993 interaction Effects 0.000 description 3
- 230000002103 transcriptional effect Effects 0.000 description 3
- 230000009286 beneficial effect Effects 0.000 description 2
- 230000015556 catabolic process Effects 0.000 description 2
- 238000006731 degradation reaction Methods 0.000 description 2
- 230000006872 improvement Effects 0.000 description 2
- 238000004519 manufacturing process Methods 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 238000011084 recovery Methods 0.000 description 2
- 238000011160 research Methods 0.000 description 2
- 230000004044 response Effects 0.000 description 2
- 238000005070 sampling Methods 0.000 description 2
- 238000013515 script Methods 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 208000008035 Back Pain Diseases 0.000 description 1
- 241000009334 Singa Species 0.000 description 1
- 230000004913 activation Effects 0.000 description 1
- 230000002457 bidirectional effect Effects 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 238000004364 calculation method Methods 0.000 description 1
- 230000001149 cognitive effect Effects 0.000 description 1
- 238000013480 data collection Methods 0.000 description 1
- 238000005516 engineering process Methods 0.000 description 1
- 238000007667 floating Methods 0.000 description 1
- 210000004209 hair Anatomy 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 239000011159 matrix material Substances 0.000 description 1
- 238000012805 post-processing Methods 0.000 description 1
- 230000000644 propagated effect Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L17/00—Speaker identification or verification
- G10L17/18—Artificial neural networks; Connectionist approaches
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/044—Recurrent networks, e.g. Hopfield networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L15/16—Speech classification or search using artificial neural networks
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/22—Procedures used during a speech recognition process, e.g. man-machine dialogue
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/26—Speech to text systems
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/28—Constructional details of speech recognition systems
- G10L15/30—Distributed recognition, e.g. in client-server systems, for mobile phones or network applications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N5/00—Computing arrangements using knowledge-based models
- G06N5/01—Dynamic search techniques; Heuristics; Dynamic trees; Branch-and-bound
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/06—Creation of reference templates; Training of speech recognition systems, e.g. adaptation to the characteristics of the speaker's voice
- G10L15/063—Training
Abstract
Methods, systems, and apparatus, including computer programs encoded on a computer storage medium, for processing audio data using a neural network.
Description
Cross Reference to Related Applications
This application claims priority from U.S. patent application No.62/830,306 filed on 5.4.2019, the entire contents of which are incorporated herein by reference.
Background
The present description relates to neural networks that perform speech recognition and speaker binarization (speaker binarization).
Neural networks are machine learning models that employ one or more layers of nonlinear units to predict the output of received inputs. Some neural networks include one or more hidden layers in addition to the output layer. The output of each hidden layer is used as input to the next layer in the network, i.e. the next hidden layer or output layer. Each layer of the network generates an output from the received input in accordance with current values of the respective set of parameters.
Some neural networks are recurrent neural networks. A recurrent neural network is a neural network that receives an input sequence and generates an output sequence from the input sequence. In particular, the recurrent neural network may use some or all of the network internal states from the previous time step in computing the output at the current time step. An example of a recurrent neural network is a long-short term (LSTM) neural network that includes one or more LSTM memory blocks. Each LSTM memory block can include one or more cells, each cell including an input gate, a forgetting gate, and an output gate, allowing the cell to store a previous state of the cell, e.g., for generating a current activation or other component to be provided to the LSTM neural network.
Disclosure of Invention
This specification describes a system, implemented as a computer program on one or more computers in one or more locations, that generates a transcription of audio data. In particular, the transcription generated by the system identifies words spoken in a given audio segment, and for each of the spoken words, identifies the speaker who uttered the word. The identification of the speaker can be identifying a speaker role of the speaker in the conversation from a set of possible speaker roles or identifying a unique speaker from a set of possible unique speakers.
Particular embodiments of the subject matter described in this specification can be implemented to realize one or more of the following advantages.
There is a need for a conventional system of speakers that both recognize spoken words in an audio segment and identify words, combines the output of separate ASR and SD systems that each operate on acoustic data (i.e., audio frames) and are independently trained. Combining two such systems while reasoning, i.e., after training each system separately, produces poor output for several reasons. In particular, it can be difficult to accurately align the outputs of the ASR and SD systems across time, as the SD system is not constrained to respect word boundaries in the output generated by the ASR system (i.e., because the SD system also operates on acoustic-only data). On the other hand, the described system generates an output sequence of speakers that both transcribe words in the audio and identify each of the spoken words. In doing so, the SD output adheres to word boundaries because the neural network learns through training that speaker identity labels are not output among spoken words. In addition, the described system is capable of generating SD outputs conditioned on both acoustic cues from the input audio data and linguistic cues from speech that have been recognized at any given time step. By incorporating these additional linguistic cues and by configuring the neural network to inherently respect word boundaries in generating the SD output, the system is able to generate a high quality SD output, i.e., a higher quality SD output than conventional systems that operate independently of the ASR process. In addition, prior attempts to combine acoustic cues and linguistic cues (spoken words) have not successfully improved binarization. However, the described techniques effectively combine these cues to generate high quality speaker binarization results. The described system greatly simplifies the engineering overhead in production to service the model because post-processing (e.g., alignment between speech recognition output and binarization output in previous systems) is eliminated. Finally, the described techniques are well suited for generating rich transcriptions including punctuation and capitalization.
The details of one or more embodiments of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
Drawings
FIG. 1 illustrates an example speech processing system.
FIG. 2 illustrates an example architecture of a joint ASR-SD neural network.
FIG. 3 is a flow diagram of an example process for determining a transcription of a sequence of input audio segments.
FIG. 4 illustrates an example transcription generated using a joint ASR-SD neural network.
FIG. 5 is a schematic diagram showing the performance of the described system relative to a baseline system.
Like reference numbers and designations in the various drawings indicate like elements.
Detailed Description
FIG. 1 illustrates an example speech processing system 100. The speech processing system 100 is an example of a system implemented as a computer program on one or more computers in one or more locations where the following systems, components and techniques can be implemented.
The system 100 generates a transcription of the audio data. In particular, the transcription generated by the system 100 identifies the words spoken in a given audio segment and, for each of the spoken words, identifies the speaker who uttered the word, i.e., identifies the role of the speaker who uttered the word in the conversation or uniquely identifies an individual speaker.
More specifically, the system 100 performs joint Automatic Speech Recognition (ASR) and speaker binarization (SD) by transcribing, i.e., mapping, the input sequences 110 of the audio data 110 to output sequences 150 of output symbols using the neural network 120. This neural network 120 is referred to in this specification as a "joint ASR-SD neural network".
The system 100 is referred to as performing "joint" ASR and SD because the single output sequence 150 generated using the neural network 120 defines both the ASR output of the audio data, i.e., which words were spoken in the audio segment, and the SD output of the audio data, i.e., which speaker spoken each word.
More specifically, the input sequence of audio data 110 is a sequence of audio frames, e.g., log-mel filter bank energies or other representations of the original audio, and each output symbol in the output sequence 150 is individually selected from a set of output symbols that includes both text symbols and speaker tag symbols.
A text symbol is a symbol representing a unit of text in a natural language, such as a phoneme, grapheme, morpheme, character, word block, or word in a natural language. Alternatively, the text symbols can also include other writing units, such as punctuation marks.
The speaker tag symbols (also referred to as "speaker identity tags") in the set of output symbols each identify a different speaker from the set of possible speakers.
In some cases, each speaker tag symbol identifies a different role from a set of possible roles that the speaker can have in the conversation. For example, the set of output symbols may include a patient speaker tag symbol that identifies that the patient is speaking and a physician speaker tag symbol that identifies that a physician or other medical professional is speaking. As another example, the set of output symbols may include a client speaker tag symbol identifying that the client is speaking and a representative speaker tag symbol identifying that the client service representative is speaking.
In some other cases, each speaker tag symbol identifies a different unique individual speaker from the set of possible individual speakers. For example, the set of possible individual speakers can include John Smith, Jane Doe, and John Doe.
The set of output symbols also typically includes a blank output symbol that, when selected as output at a given time step, indicates that the system has not emitted a speaker tag symbol or text symbol at the given time step.
Thus, the system 100 generates the output sequence 150 by generating a respective output symbol at each of a plurality of time steps. By allowing the neural network 120 to select at each time step from a set of symbols that includes text symbols defining what words were spoken in the audio input and speaker tag symbols defining who was identified as speaking each word, the system 100 configures the joint ASR-SD neural network 120 to perform joint ASR and SD, i.e., instead of performing ASR and SD independently on the same input and then merging the results of the two processes.
As used in this specification, the terms "embed" and "represent" an ordered set of index values, e.g., a vector or matrix of floating points or other numerical values, that represent an input, e.g., that represent an input text symbol or that represent a span of text symbols.
Once the system 100 has generated the output sequence, the system 100 can provide the output sequence 150 as an output of the audio data sequence 110, i.e., by storing the output sequence in one or more memories or providing data identifying the output in the output sequence for presentation to a user, or can generate a transcription of the audio data sequence 110 from the output sequence 150 and provide the transcription as an output of the system for the audio data sequence 110.
The transcription identifies words spoken in the audio data sequence 110 from the text symbols in the output sequence 150 and identifies which speaker spoken each word from the speaker tag symbols. An example of transcription and how the transcription is generated from the output sequence is described below with reference to fig. 4.
In some embodiments, at inference time, the system 100 performs a beam search using the neural network 120 to generate the final output sequence 150.
In particular, in wave search decoding, the system 100 maintains a number of "bundles" of the highest scoring partial sequences, and at each output time step, expands each sequence in the bundles by one output symbol (i.e., by adding each possible output symbol to each partial sequence). In other words, for a given time step and for each partial output sequence in a bundle, the system 100 determines the fractional distribution of the partial output sequence using the following technique. The system 100 then selects a number of extended output sequences from all of the partial output sequences that will have the highest total score as the partial sequence to be maintained for the next time step. The total score for each partial sequence can be, for example, the log-likelihood of the output symbols in the partial sequence based on the fractional distribution that generated the partial sequence for the corresponding time step.
FIG. 2 illustrates an example architecture of the federated ASR-SD neural network 120.
As shown in the example of fig. 2, neural network 120 includes a transcribing neural network 210, a predicting neural network 220, a combining neural network 230, and a soffmax output layer 240.
The transcriptive neural network 210 is configured to process the audio segment data to generate a respective encoded representation for each time step in the output sequence
For example, the transcribing neural network 210 can be a deep recurrent neural network, e.g., a stacked recurrent neural network that includes unidirectional or bidirectional long-short term memory (LSTM) neural network layers or other types of recurrent layers. In some cases, to demonstrate the fact that there are fewer output time steps than there may be in audio segment data, the transcribing neural network 210 can include one or more time-delayed neural network (TDNN) layers interspersed among a stack of loop layers. The TDNN layer is used to reduce the time resolution of the audio segment data.
The predictive neural network 220 is configured to process, at each time step, the current output symbol y for that time stepu-1To generate a predicted representation of the time step
Current output symbol y at any given time stepu-1It is usually the most recently emitted non-blank output symbol in the output sequence, i.e. the output symbol at the time step which is the closest after the time step at which the output symbol is a blank output symbol with respect to a given time step has been ignored. When a non-blank output symbol has not been included at any earlier time step in the output sequence, e.g., the first time step in the output sequence, thenThe system can use the fixed placeholder input as the current output symbol.
For example, the predictive neural network 220 can include mapping each non-blank output symbol (and placeholder output) to a corresponding embedded layer, followed by one or more unidirectional LSTM or other recursive layers. In some cases, the last recursive layer directly generates the prediction representation, while in other cases, the last recursive layer is followed by the fully-connected layer that generated the prediction representation.
The joint neural network 230 is configured to process, at each time step, (i) the encoded representation of the audio frame at that time step and (ii) the predicted representation at that time step to generate a set of logit/t，uThe set of locations includes a respective location for each of the output symbols in the set of output symbols. As described above, the set of output symbols includes both text symbols and speaker tag symbols.
For example, the joint neural network 230 can be a single fully-connected layer that maps a cascade of (i) the coded representation and (ii) the predicted representation to a logit or a multi-layer perceptron (MLP) that maps a cascade of (i) the coded representation and (ii) the predicted representation to a logit.
The softmax output layer 240 is configured to receive the respective logitl of each of the output symbolst，uAnd a probability distribution P (y | t, u) over the output symbols in the set of output symbols, i.e. a probability distribution comprising the respective probabilities of each text symbol, each speaker tag symbol and a blank symbol, is generated.
Thus, when the neural network 120 has the architecture described in fig. 2, to map the sequence of audio segments to the output sequence using the neural network 220, the system performs the following at each time step:
(1) the current output symbol at the time step is processed using the predictive neural network 220 to generate a predictive representation of the time step, conditioned on any non-blank output symbols at any earlier time step that have been included in the output sequence,
(2) processing (i) the encoded representation at the time step and (ii) the predicted representation at the time step using a joint neural network 230 to generate a respective location for each of the output symbols in the set of output symbols,
(3) processing the respective locations of each of the output symbols using the softmax output layer 240 to generate a probability distribution over the output symbols in the set of output symbols, an
(4) The output symbols at the time step are selected using a probability distribution, e.g., by sampling or greedily selecting the symbols with the highest probabilities according to the probability distribution.
To generate the coded representation of the time step, the system can pre-process the audio sequence using the transcriptional neural network 210 prior to the first time step to generate the coded representation of all time steps, or perform the required additional processing necessary to generate the coded representation of the time step at each time step using the transcriptional neural network 210.
In some cases, for example, when performing a beam search as described above, rather than performing step (4), the system performs steps (1) - (3) for each of the k candidate output sequences in the beam from a time step and then updates the beam using the probability distributions of the candidate output sequences, for example, by generating a candidate set of extended candidate output sequences that each extend a respective one of the candidate output sequences by one symbol and then maintaining the k extended candidate output sequences with the highest overall scores for the next time step.
In order for the neural network 120 to be effectively used to generate output sequences, the system trains the neural network 120 on training data that includes a sequence of training input audio segments and, for each sequence of training input audio segments, a corresponding output target. The corresponding output target for each training input sequence is an output sequence that includes text symbols and speaker tag symbols. More specifically, for each word spoken in the training input audio segment, the corresponding output target includes identifying the speaker tag symbol that spoken the word as the next speaker tag symbol after the text symbol corresponding to the word.
To train the neural network 120 on the training data, the system can use an algorithm called a forward-backward algorithm to optimize an objective function that measures the conditional probability assigned to the ground truth output sequence by the neural network 120 given the corresponding input audio segment (i.e., by marginalizing the possible alignments that would produce the corresponding audio segment if the blank output symbols were removed). Example techniques for training a neural network having the architecture described in fig. 2 using the back-and-forth algorithm are "Improving the efficiency of forward-backward algorithm" in IEEE Automatic Speech Recognition and Understanding research (ASRU),2017 (using batch calculation in tensor flow to improve the efficiency of the forward-backward algorithm ", IEEE Automatic Speech Recognition and Understanding research conference (ASRU), 2017) and" efficiency of recovery of neural network in "in t.bagby and k.rao," in IEEE engineering and recovery neural network, refer to the Technology of "engineering, street (slr)" in IEEE 2018, incorporated by reference in the entire specification of the IEEE software, which is incorporated by reference in the IEEE specification.
Fig. 3 is a flow diagram of an example process 300 for processing a sequence of audio segments. For convenience, process 300 will be described as being performed by a system of one or more computers located in one or more locations. For example, a suitably programmed audio processing system, such as system 100 of fig. 1, can perform process 300.
The system obtains a sequence of audio segments characterizing the audio segments (step 302). The audio segments may be the entire dialog or fixed length parts of a larger dialog, e.g., ten, fifteen, or thirty seconds.
More specifically, the sequence of audio segments includes a plurality of audio frames. For example, each audio frame can be a d-dimensional log-mel filter bank energy, where d is a fixed constant, such as fifty, eighty, or one hundred, or a different acoustic feature representation of the corresponding portion of the audio segment.
The system maps the sequence of audio segments to an output sequence including respective output symbols for each of a plurality of time steps using a joint ASR-SD neural network (step 304).
As described above, for each of the time steps, the output symbols for the time step in the output sequence are selected from a set of output symbols comprising: (i) a plurality of text symbols, (ii) a plurality of speaker tag symbols, and (iii) a blank symbol.
Further, as described further above, the system can maintain and update a single candidate sequence at each time step by maintaining a bundle of candidate sequences and then selecting the highest scoring candidate sequence in the bundle, or by sampling or greedily selecting output symbols from the probability distribution generated by the joint ASR-SD neural network at the time step.
The system then determines from the output sequence (i) a transcription of audio segment data that identifies the spoken word in the audio segment and (ii) for each of the spoken words, identifies a speaker from the set of possible speakers who spoken the word (step 306). For example, when the text symbols in the vocabulary are morphemes, the system can identify the spoken word in the transcription by removing all blank outputs and then appropriately concatenating adjacent morphemes in the output sequence, i.e., by concatenating the morphemes labeled with a tag indicating that the morphemes are in the middle of the word. The system can then identify the speaker of each word by identifying each word as being spoken by the speaker represented by the speaker tag symbol immediately following the text symbol representing the word in the output sequence.
FIG. 4 illustrates an example transcription 400 generated using a joint ASR-SD neural network.
In the example of FIG. 4, the speaker tag symbol identifies the role of the speaker in the conversation, i.e., instead of uniquely identifying an individual speaker.
Thus, to generate the example transcription 400, the system generates an output sequence that includes text symbols corresponding to the words "hello dr smith" ("your smith doctor") that are tagged with the speaker tag < spk: pt > corresponding to the "patient" role. Thus, the portion of the output sequence indicates that the plurality of words "hello dr smith" were spoken by a speaker having the patient role in the dialog in which the transcription 400 was generated.
More generally, including a speaker tag in the output sequence indicates that words corresponding to text tags that precede the speaker tag (i.e., start with the previous speaker tag, or start with the beginning of the output sequence if the previous speaker tag was not present) are predicted to have been spoken by the speaker identified by the speaker tag. In other words, for each word represented by a set of text symbols in the output system, the system identifies the word as spoken by the speaker represented by the speaker tag symbol immediately following the text symbol representing the word in the output sequence.
Similarly, following the speaker tag < spk: pt >, the output sequence includes text symbols corresponding to a plurality of words "hello mr jones have branches you today" ("Mr. Jones you good, what today you get there") and then includes the speaker tag < spk: dr > corresponding to the "doctor" role. The system thus identifies the multiple words "hello mr jones has hairs you speaker today" in the transcript 400 as being spoken by the speaker having the doctor's role.
The output sequence then includes text symbols corresponding to the word "I am creating with my back pain" that the system identifies as spoken by the speaker in the patient role, as these text symbols are followed by the speaker tag < spk: pt >.
Fig. 5 is a diagram 500 illustrating the performance of the described system relative to a baseline system.
In particular, graph 500 shows a distribution of word binarization error rates (WDER) for dialogs processed using the described system and a distribution of WDER for dialogs processed by the baseline system.
The baseline system is a system that uses a high-quality ASR neural network to generate textual symbols for a conversation and separately uses a high-quality SD system to identify speaker tags for portions of the conversation. The baseline system then uses sophisticated techniques for determining when the speaker changes during the conversation and aligns the outputs of the ASR system and the SD system.
However, as can be seen from fig. 5, the described system consistently generates transcripts with lower, i.e., better WDER than the baseline system. More specifically, the distribution shown in graph 500 reflects a large improvement in WDER produced using the described system, i.e., a relative improvement of about 86% from 15.8% down to 2.2% over baseline. This gain in WDER comes at the cost of small ASR performance cost with approximately 0.6% degradation in Word Error Rate (WER). Thus, as can be seen from fig. 5, the described system performs the SD performance of the system significantly with minimal or no ASR performance degradation relative to a high quality ASR system.
The description uses the term "configured" in conjunction with system and computer program components to refer to both system and computer program components. By a system of one or more computers that is to be configured to perform certain operations or actions is meant that the system has installed thereon software, firmware, hardware, or a combination of software, firmware, hardware that in operation causes the system to perform those operations or actions. By one or more computer programs to be configured to perform certain operations or actions is meant that the one or more programs include instructions, which when executed by a data processing apparatus, cause the apparatus to perform the operations or actions.
Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, in tangibly embodied computer software or firmware, in computer hardware comprising the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a tangible, non-transitory storage medium for execution by, or to control the operation of, data processing apparatus. The computer storage medium can be a machine-readable storage device, a machine-readable storage substrate, a random or serial access storage device, or a combination of one or more of them. Alternatively or in addition, the program instructions can be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
The term "data processing apparatus" refers to data processing hardware and encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers. An apparatus can also be, or further comprise, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can optionally include, in addition to hardware, code that creates an execution environment for the computer program, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
A computer program, which may also be referred to or described as a program, software application, app, module, software module, script, or code, can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages; and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data, such as one or more scripts stored in a markup language document; in a single file dedicated to the program in question, or in multiple coordinated files, such as files storing one or more modules, sub programs, or portions of code. A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a data communication network.
In this specification, the term "database" is used broadly to refer to any collection of data: the data need not be structured in any particular way, or at all, and it can be stored in a storage device in one or more locations. Thus, for example, the index database can include multiple data collections, each of which can be organized and accessed differently.
Similarly, the term "engine" is used broadly in this specification to refer to a software-based system, subsystem, or process that is programmed to perform one or more particular functions. Typically, the engine will be implemented as one or more software modules or components installed on one or more computers in one or more locations. In some cases, one or more computers will be dedicated to a particular engine; in other cases, multiple engines can be installed and run on the same computer or multiple computers.
The processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, and in combination with, special purpose logic circuitry, e.g., an FPGA or an ASIC.
A computer suitable for executing a computer program can be based on a general purpose microprocessor or a special purpose microprocessor or both, or any other kind of central processing unit. Generally, a central processing unit will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a central processing unit for executing or carrying out instructions and one or more memory devices for storing instructions and data. The central processing unit and the memory can be supplemented by, or incorporated in, special purpose logic circuitry. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such a device. Further, the computer can be embedded in another device, e.g., a mobile telephone, a Personal Digital Assistant (PDA), a mobile audio or video player, a game controller, a Global Positioning System (GPS) receiver, or a portable storage device, e.g., a Universal Serial Bus (USB) flash drive, etc.
Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and storage devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disks; and CD ROM and DVD-ROM disks.
To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, the computer is able to interact with the user by sending documents to and receiving documents from the device used by the user; for example, by sending a web page to a web browser on the user's device in response to receiving a request from the web browser. In addition, computers can interact with users by sending text messages or other forms of messages to personal devices, such as smart phones that are running messaging applications, and in turn receiving response messages from the users.
The data processing apparatus for implementing the machine learning model can also comprise, for example, a dedicated hardware accelerator unit for processing common and computationally intensive parts of the machine learning training or production, i.e. reasoning, workload.
The machine learning model can be implemented and deployed using a machine learning framework, for example, a TensorFlow framework, a Microsoft Cognitive Toolkit framework, an Apache Singa framework, or an Apache MXNet framework.
Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface, a web browser, or an app through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a Local Area Network (LAN) and a Wide Area Network (WAN), such as the Internet.
The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, the server sends data, such as an HTML page, to the user device, for example, for the purpose of displaying data to a user interacting with the device as a client and receiving user input from the user. Data generated at the user device, e.g., results of user interaction, can be received from the device at the server.
While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any invention or of what may be claimed, but rather as descriptions of features that may be specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, while operations are depicted in the drawings and described in the claims in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some cases, multitasking and parallel processing may be beneficial. Moreover, the separation of various system modules and components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
Specific embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some cases, multitasking and parallel processing may be beneficial.
Claims (10)
1. A computer-implemented method, comprising:
obtaining a sequence of audio segments characterizing an audio segment, the sequence of audio segments comprising a plurality of audio frames;
mapping the sequence of audio segments to an output sequence using a joint automatic speech recognition-speaker binarization ASR-SD neural network, the output sequence comprising a respective output symbol for each of a plurality of time steps, wherein, for each of the time steps, the output symbols for the time step in the output sequence are selected from a set of output symbols comprising (i) a plurality of text symbols, (ii) a plurality of speaker tag symbols, each speaker tag symbol identifying a different speaker from a set of possible speakers, and (iii) a blank symbol; and
determining from the output sequence a transcription of the audio segment data that (i) identifies words spoken in the audio segment, and (ii) identifies, for each of the spoken words, the speaker from a set of possible speakers who spoken the word.
2. The method of claim 1, wherein the joint ASR-SD neural network comprises a transcription neural network, and wherein mapping the sequence of audio segments comprises:
processing the sequence of audio segments using the transcribing neural network, wherein the transcribing neural network is configured to process the audio segment data to generate a respective encoded representation for each of the plurality of time steps.
3. The method of claim 2, wherein the joint ASR-SD neural network further comprises a predictive neural network, and wherein mapping the sequence of audio segments comprises, for each time step:
identifying a current output symbol of the time step, an
Processing the current output symbol for the time step using the predictive neural network, wherein the predictive neural network is configured to process the current output symbol to generate a predicted representation of the time step conditioned on any non-blank output symbols that have been included at any earlier time step in the output sequence.
4. The method of claim 3, wherein the joint ASR-SD neural network comprises a joint neural network and a softmax output layer, and wherein mapping the sequence of audio segments comprises, for each time step:
processing the encoded representation of the time step and the predicted representation of the time step to generate a respective location for each output symbol in the set of output symbols; and
processing the logit of the output symbols using the softmax output layer to generate a probability distribution over the output symbols in the set of output symbols.
5. The method of claim 4, wherein mapping the sequence of audio segments comprises, for each time step:
selecting an output symbol from the set of output symbols using the probability distribution.
6. A method according to any preceding claim, wherein the text symbols represent phonemes, morphemes or characters.
7. The method of any preceding claim, wherein determining from the output sequence a transcription of the audio segment data that (i) identifies words spoken in the audio segment and (ii) for each of the spoken words identifies the speaker from a set of possible speakers who spoken the word comprises:
identifying a word represented by the text symbol in the output sequence; and
for each identified word, identifying the word as spoken by the speaker represented by the speaker tag symbol immediately following the text symbol representing the word in the output sequence.
8. The method of any preceding claim, wherein the set of possible speakers is a set of possible speaking roles in a conversation, and wherein each speaker tag symbol identifies a different speaking role from the plurality of possible speaking roles.
9. A system comprising one or more computers and one or more storage devices storing instructions that, when executed by the one or more computers, cause the one or more computers to perform the operations of the respective methods of any preceding claim.
10. A computer storage medium encoded with instructions that, when executed by one or more computers, cause the one or more computers to perform the operations of any preceding claim.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201962830306P | 2019-04-05 | 2019-04-05 | |
US62/830,306 | 2019-04-05 | ||
PCT/US2020/026937 WO2020206455A1 (en) | 2019-04-05 | 2020-04-06 | Joint automatic speech recognition and speaker diarization |
Publications (1)
Publication Number | Publication Date |
---|---|
CN113646835A true CN113646835A (en) | 2021-11-12 |
Family
ID=70465505
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202080024957.3A Pending CN113646835A (en) | 2019-04-05 | 2020-04-06 | Joint automatic speech recognition and speaker binarization |
Country Status (4)
Country | Link |
---|---|
US (1) | US20220199094A1 (en) |
EP (1) | EP3921833A1 (en) |
CN (1) | CN113646835A (en) |
WO (1) | WO2020206455A1 (en) |
Families Citing this family (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN110138654B (en) * | 2019-06-06 | 2022-02-11 | 北京百度网讯科技有限公司 | Method and apparatus for processing speech |
US11646032B2 (en) * | 2020-02-27 | 2023-05-09 | Medixin Inc. | Systems and methods for audio processing |
GB2596350B (en) * | 2020-06-26 | 2023-10-04 | Lexiqal Ltd | A system and method for understanding and explaining spoken interactions using speech acoustic and linguistic markers |
US11790921B2 (en) * | 2020-08-04 | 2023-10-17 | OTO Systems Inc. | Speaker separation based on real-time latent speaker state characterization |
US11978435B2 (en) * | 2020-10-13 | 2024-05-07 | Mitsubishi Electric Research Laboratories, Inc. | Long-context end-to-end speech recognition system |
US11574639B2 (en) | 2020-12-18 | 2023-02-07 | Microsoft Technology Licensing, Llc | Hypothesis stitcher for speech recognition of long-form audio |
Citations (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JPH06161495A (en) * | 1992-01-24 | 1994-06-07 | Ricoh Co Ltd | Speech recognizing device |
US20170169815A1 (en) * | 2015-12-10 | 2017-06-15 | Nuance Communications, Inc. | System and methods for adapting neural network acoustic models |
CN107221333A (en) * | 2016-03-21 | 2017-09-29 | 中兴通讯股份有限公司 | A kind of identity authentication method and device |
GB201804073D0 (en) * | 2018-03-14 | 2018-04-25 | Papercup Tech Limited | A speech processing system and a method of processing a speech signal |
CN108140386A (en) * | 2016-07-15 | 2018-06-08 | 谷歌有限责任公司 | Speaker verification |
US20180166066A1 (en) * | 2016-12-14 | 2018-06-14 | International Business Machines Corporation | Using long short-term memory recurrent neural network for speaker diarization segmentation |
US20180261236A1 (en) * | 2017-03-10 | 2018-09-13 | Baidu Online Network Technology (Beijing) Co., Ltd. | Speaker recognition method and apparatus, computer device and computer-readable medium |
CN109086264A (en) * | 2017-06-14 | 2018-12-25 | 松下知识产权经营株式会社 | It speaks and continues determination method, speaks and continue decision maker and recording medium |
CN109147796A (en) * | 2018-09-06 | 2019-01-04 | 平安科技（深圳）有限公司 | Audio recognition method, device, computer equipment and computer readable storage medium |
CN109215662A (en) * | 2018-09-18 | 2019-01-15 | 平安科技（深圳）有限公司 | End-to-end audio recognition method, electronic device and computer readable storage medium |
US10210860B1 (en) * | 2018-07-27 | 2019-02-19 | Deepgram, Inc. | Augmented generalized deep learning with special vocabulary |
Family Cites Families (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10546575B2 (en) * | 2016-12-14 | 2020-01-28 | International Business Machines Corporation | Using recurrent neural network for partitioning of audio data into segments that each correspond to a speech feature cluster identifier |
US10559311B2 (en) * | 2017-03-31 | 2020-02-11 | International Business Machines Corporation | Speaker diarization with cluster transfer |
US10621991B2 (en) * | 2018-05-06 | 2020-04-14 | Microsoft Technology Licensing, Llc | Joint neural network for speaker recognition |
US10388272B1 (en) * | 2018-12-04 | 2019-08-20 | Sorenson Ip Holdings, Llc | Training speech recognition systems using word sequences |
US11017778B1 (en) * | 2018-12-04 | 2021-05-25 | Sorenson Ip Holdings, Llc | Switching between speech recognition systems |
US11170761B2 (en) * | 2018-12-04 | 2021-11-09 | Sorenson Ip Holdings, Llc | Training of speech recognition systems |
US10573312B1 (en) * | 2018-12-04 | 2020-02-25 | Sorenson Ip Holdings, Llc | Transcription generation from multiple speech recognition systems |
-
2020
- 2020-04-06 WO PCT/US2020/026937 patent/WO2020206455A1/en unknown
- 2020-04-06 EP EP20722138.3A patent/EP3921833A1/en active Pending
- 2020-04-06 CN CN202080024957.3A patent/CN113646835A/en active Pending
- 2020-04-06 US US17/601,662 patent/US20220199094A1/en active Pending
Patent Citations (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JPH06161495A (en) * | 1992-01-24 | 1994-06-07 | Ricoh Co Ltd | Speech recognizing device |
US20170169815A1 (en) * | 2015-12-10 | 2017-06-15 | Nuance Communications, Inc. | System and methods for adapting neural network acoustic models |
CN107221333A (en) * | 2016-03-21 | 2017-09-29 | 中兴通讯股份有限公司 | A kind of identity authentication method and device |
CN108140386A (en) * | 2016-07-15 | 2018-06-08 | 谷歌有限责任公司 | Speaker verification |
US20180166066A1 (en) * | 2016-12-14 | 2018-06-14 | International Business Machines Corporation | Using long short-term memory recurrent neural network for speaker diarization segmentation |
US20180261236A1 (en) * | 2017-03-10 | 2018-09-13 | Baidu Online Network Technology (Beijing) Co., Ltd. | Speaker recognition method and apparatus, computer device and computer-readable medium |
CN109086264A (en) * | 2017-06-14 | 2018-12-25 | 松下知识产权经营株式会社 | It speaks and continues determination method, speaks and continue decision maker and recording medium |
GB201804073D0 (en) * | 2018-03-14 | 2018-04-25 | Papercup Tech Limited | A speech processing system and a method of processing a speech signal |
US10210860B1 (en) * | 2018-07-27 | 2019-02-19 | Deepgram, Inc. | Augmented generalized deep learning with special vocabulary |
CN109147796A (en) * | 2018-09-06 | 2019-01-04 | 平安科技（深圳）有限公司 | Audio recognition method, device, computer equipment and computer readable storage medium |
CN109215662A (en) * | 2018-09-18 | 2019-01-15 | 平安科技（深圳）有限公司 | End-to-end audio recognition method, electronic device and computer readable storage medium |
Non-Patent Citations (4)
Title |
---|
DANIEL GARCIA-ROMERO 等: "Speaker diarization using deep neural network embeddings", 《2017 IEEE INTERNATIONAL CONFERENCE ON ACOUSTICS, SPEECH AND SIGNAL PROCESSING (ICASSP)》 * |
EL SHAFEY 等: "Joint speech recognition and speaker diarization via sequence transduction", 《ARXIV》 * |
TAE JIN PARK 等: "Multimodal Speaker Segmentation and Diarization using Lexical and Acoustic Cues via Sequence to Sequence Neural Network", 《ARXIV》 * |
魏爽: "一种利用人工神经网络优化语音识别的方法", 《数字技术与应用》 * |
Also Published As
Publication number | Publication date |
---|---|
US20220199094A1 (en) | 2022-06-23 |
WO2020206455A1 (en) | 2020-10-08 |
EP3921833A1 (en) | 2021-12-15 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11776531B2 (en) | Encoder-decoder models for sequence to sequence mapping | |
US11335333B2 (en) | Speech recognition with sequence-to-sequence models | |
US11900915B2 (en) | Multi-dialect and multilingual speech recognition | |
US11423883B2 (en) | Contextual biasing for speech recognition | |
CN113646835A (en) | Joint automatic speech recognition and speaker binarization | |
US20180174576A1 (en) | Acoustic-to-word neural network speech recognizer | |
US10431206B2 (en) | Multi-accent speech recognition | |
US11929060B2 (en) | Consistency prediction on streaming sequence models | |
US11961515B2 (en) | Contrastive Siamese network for semi-supervised speech recognition | |
JP2023545988A (en) | Transformer transducer: One model that combines streaming and non-streaming speech recognition | |
KR20230147685A (en) | Word-level reliability learning for subword end-to-end automatic speech recognition | |
Rasipuram et al. | Acoustic and lexical resource constrained ASR using language-independent acoustic model and language-dependent probabilistic lexical model | |
US20230104228A1 (en) | Joint Unsupervised and Supervised Training for Multilingual ASR | |
US20220310080A1 (en) | Multi-Task Learning for End-To-End Automated Speech Recognition Confidence and Deletion Estimation | |
CN117378004A (en) | Supervised and unsupervised training with loss of alignment of sequences | |
US20230317059A1 (en) | Alignment Prediction to Inject Text into Automatic Speech Recognition Training | |
US20220122586A1 (en) | Fast Emit Low-latency Streaming ASR with Sequence-level Emission Regularization | |
Deng et al. | History utterance embedding transformer lm for speech recognition | |
KR20230156125A (en) | Lookup table recursive language model | |
JP2024510816A (en) | Tyed and reduced RNN-T | |
US20230107493A1 (en) | Predicting Word Boundaries for On-Device Batching of End-To-End Speech Recognition Models | |
US20240161732A1 (en) | Multi-dialect and multilingual speech recognition | |
US20230017892A1 (en) | Injecting Text in Self-Supervised Speech Pre-training | |
US20240153508A1 (en) | End-to-End Speech Recognition Adapted for Multi-Speaker Applications | |
KR20230156795A (en) | Word segmentation regularization |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |