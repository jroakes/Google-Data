This application is a continuation of U.S. application Ser. No. 13/734,810, filed Jan. 4, 2013, which is a continuation-in-part of U.S. application Ser. No. 13/646,521, filed Oct. 5, 2012, which are hereby expressly incorporated by reference herein. U.S. application Ser. No. 13/734,810 also claims the benefit of U.S. Provisional Application No. 61/714,568, filed Oct. 16, 2012, which is also hereby expressly incorporated by reference herein.
BACKGROUND
Computing devices (e.g., mobile phones, tablet computers, etc.) may provide a graphical keyboard as part of a graphical user interface for composing text using a presence-sensitive screen. The graphical keyboard may enable a user of the computing device to enter text (e.g., an e-mail, a text message, or a document, etc.). For instance, a computing device may present a graphical, or soft, keyboard on the presence-sensitive display that permits the user to enter data by tapping keys on the keyboard display.
Gesture-based keyboards may be used to input text into a smartphone. Such keyboards may suffer from limitations in accuracy, speed, and inability to adapt to the user. Some keyboards may also require a dedicated gesture dictionary that must be maintained separately. Such keyboard may also be difficult to integrate with multiple on-device dictionaries.
SUMMARY
In one example, a method includes outputting, by a computing device and for display at a presence-sensitive display operatively coupled to the computing device, a graphical keyboard comprising a plurality of keys; receiving an indication of a gesture entered at the presence-sensitive display, the gesture to select a group of keys of the plurality of keys; determining, by the computing device and in response to receiving the indication of the gesture, a candidate word based at least in part on the group of keys, wherein the determining comprises: determining, by the computing device, a group of alignment points traversed by the gesture; determining, by the computing device, respective cost values for each of at least two keys of the plurality of keys, wherein each of the respective cost values represents a probability that an alignment point of the group of alignment points indicates a key of the plurality of keys; comparing, by the computing device, the respective cost values for at least each of at least two keys of the plurality of keys to determine a combination of keys having a combined cost value; and outputting, for display at the presence-sensitive display and based at least in part on the respective cost values, the candidate word.
In another example, a computing device, includes: at least one processor; a presence-sensitive display that is operatively coupled to the at least one processor; and at least one module operable by the at least one processor to: output, for display at the presence-sensitive display, a graphical keyboard comprising a plurality of keys; receive, at the presence-sensitive display, an indication of a gesture to select a group of keys of the plurality of keys; determine, in response to receiving the indication of the gesture, a candidate word based at least in part on the group of keys; determine a group of alignment points traversed by the gesture; determine respective cost values for each of at least two of the plurality of keys, wherein each of the respective cost values represents a probability that an alignment point of the group of alignment point indicates a key of the plurality of keys; compare the respective cost values to determine a combination of keys having a combined cost value; and determine the candidate word based at least in part on the respective cost values.
In another example, a computer-readable storage medium encoded with instructions that, when executed, cause at least one processor of a computing device to: output, by the computing device and for display at a presence-sensitive display operatively coupled to the computing device, a graphical keyboard comprising a plurality of keys; receive an indication of a gesture entered at the presence-sensitive display, the gesture to select a group of keys of the plurality of keys; determine, by the computing device and in response to receiving the indication of the gesture, a candidate word based at least in part on the group of keys, wherein the determining comprises: determine, by the computing device, a group of alignment points traversed by the gesture; determine, by the computing device, respective cost values for each of at least two keys of the plurality of keys, wherein each of the respective cost values represents a probability that an alignment point of the group of alignment points indicates a key of the plurality of keys; compare, by the computing device, the respective cost values for at least each of at least two keys of the plurality of keys to determine a combination of keys having a combined cost value; and output, for display at the presence-sensitive display and based at least in part on the respective cost values, the candidate word.
The details of one or more examples of the disclosure are set forth in the accompanying drawings and the description below. Other features, objects, and advantages will be apparent from the description and drawings, and from the claims.
BRIEF DESCRIPTION OF DRAWINGS
FIG. 1 is a block diagram illustrating an example computing device that may be used to incrementally determine text from a gesture, in accordance with one or more techniques of the present disclosure.
FIG. 2 is a block diagram illustrating further details of one example of a computing device as shown in FIG. 1, in accordance with one or more techniques of the present disclosure.
FIGS. 3A-C are block diagrams illustrating further details of one example of a computing device shown in FIG. 1, in accordance with one or more techniques of the present disclosure.
FIGS. 4A-B are flow diagrams illustrating example operations of a computing device to determine a candidate word from a gesture, in accordance with one or more techniques of the present disclosure.
FIG. 5 is a flow diagram illustrating example operations of a computing device to determine a candidate word from a gesture, in accordance with one or more techniques of the present disclosure.
DETAILED DESCRIPTION
In general, this disclosure is directed to techniques for incrementally determining one or more candidate words based on a detected gesture that selects a sequence of characters included in a graphical keyboard. In some examples, a presence-sensitive display device that displays the graphical keyboard may detect the gesture. Such techniques may improve a user's ability to enter text using a graphical keyboard. A presence-sensitive display (e.g., a touch-sensitive screen) may enable a user to input text by detecting user inputs in the form of gestures performed at or near the presence-sensitive display. In some examples, a user may wish to enter a string of characters (e.g., a word), by performing one or more gestures at or near the presence-sensitive display.
Rather than performing multiple gestures to input a single word, techniques of the present disclosure may improve the speed and accuracy at which a user can enter text into a graphical keyboard of a computing device. For instance, using techniques of this disclosure, a user may, instead of performing a discrete gesture for each key of a word, perform a single gesture that indicates the word. As the user performs the gesture, the computing device may incrementally determine one or more candidate words indicated by the gesture. By incrementally determining the candidate words as the gesture is performed, the computing device may present the user with one or more candidate words with minimal post-gesture entry processing time. To determine candidate words, the incremental determinations may include searching for one or more points of a gesture that each align with a given keyboard position of a letter. The search may include selecting a point of the gesture that best aligns with the letter of the keyboard.
Based on the search, techniques of the disclosure may construct one or more probable interpretations for a gesture by traversing both the gesture and various states in a lexicon (e.g., dictionary) in parallel. In this way, techniques of the disclosure can incrementally match the gesture to words in a lexicon trie, one node/letter at a time, using a spatial gesture model. In some examples, techniques of the disclosure may use one or more spatial and/or temporal alignment features to improve the accuracy of the incremental determinations. Such techniques may also support other advanced gesture interactions such two-handed gestures and multi-word gestures.
By enabling the user to enter a word with a single gesture and performing incremental determinations to identify candidate words, techniques of this disclosure enable the user to increase the rate at which text is entered. Consequently, techniques of the disclosure may relieve a user from performing a tap gesture for each letter of the word, which may be difficult for a user and/or may result in a decreased text-entry rate due to the requirement that the user's finger discretely contact individual keys. The techniques may also reduce the effort required of a user to accurately indicate specific keys of the graphical keyboard.
FIG. 1 is a block diagram illustrating an example computing device 2 that may be used to incrementally determine text from a gesture, in accordance with one or more techniques of the present disclosure. In some examples, computing device 2 may be associated with user 18. A user associated with a computing device may interact with the computing device by providing various user inputs into the computing device.
Examples of computing device 2 may include, but are not limited to, portable or mobile devices such as mobile phones (including smart phones), laptop computers, desktop computers, tablet computers, smart television platforms, cameras, personal digital assistants (PDAs), servers, mainframes, etc. As shown in the example of FIG. 1, computing device 2 may be a tablet computer. Computing device 2, in some examples can include user interface (UI) device 4, UI module 6, gesture module 8, and language model 10. Other examples of computing device 2 that implement techniques of this disclosure may include additional components not shown in FIG. 1.
Computing device 2 may include UI device 4. In some examples, UI device 4 is configured to receive tactile, audio, or visual input. UI device 4, as shown in FIG. 1, may include a touch-sensitive and/or presence-sensitive display or any other type of device for receiving input. UI device 4 may output content such as graphical user interface (GUI) 12 for display. In the example of FIG. 1, UI device 4 may be a presence-sensitive display that can display a graphical user interface and receive input from user 18 using capacitive, inductive, and/or optical detection at or near the presence sensitive display.
As shown in FIG. 1, computing device 2 may include UI module 6. UI module 6 may perform one or more functions to receive input, such as user input or network data, and send such input to other components associated with computing device 2, such as gesture module 8. For example, UI module 6 may determine a gesture performed by user 18 at UI device 4. UI module 6 may also receive data from components associated with computing device 2, such as gesture module 8. Using the data, UI module 6 may cause other components associated with computing device 2, such as UI device 4, to provide output based on the data. For instance, UI module 6 may receive data from gesture module 8 that causes UI device 4 to display information in text entry field 14 of GUI 12.
UI module 6 may be implemented in various ways. For example, UI module 6 may be implemented as a downloadable or pre-installed application or “app.” In another example, UI module 6 may be implemented as part of a hardware unit of computing device 2. In another example, UI module 6 may be implemented as part of an operating system of computing device 2.
Computing device 2, in some examples, includes gesture module 8. Gesture module 8 may include functionality to perform any variety of operations on computing device 2. For instance, gesture module 8 may include functionality to incrementally determine text from a gesture in accordance with the techniques described herein. Gesture module 8 may be implemented in various ways. For example, gesture module 8 may be implemented as a downloadable or pre-installed application or “app.” In another example, gesture module 8 may be implemented as part of a hardware unit of computing device 2. In another example, gesture module 8 may be implemented as part of an operating system of computing device 2.
Gesture module 8 may receive data from components associated with computing device 2, such as UI module 6. For instance, gesture module 8 may receive gesture data from UI module 6 that causes gesture module 8 to determine text from the gesture data. Gesture module 8 may also send data to components associated with computing device 2, such as UI module 6. For instance, gesture module 8 may send text determined from the gesture data to UI module 6 that causes UI device 4 to display GUI 10.
As shown in FIG. 1, GUI 12 may be a user interface generated by UI module 6 that allows user 18 to interact with computing device 2. GUI 12 may include graphical content. Graphical content, generally, may include text, images, a group of moving images, etc. As shown in FIG. 1, graphical content may include graphical keyboard 16, text entry area 14, and word suggestion areas 24A-C (collectively “word suggestion areas 24”). Graphical keyboard 16 may include a plurality of keys, such as “N” key 20A, “O” key 20B, and “W” key 20C. In some examples, each of the plurality of keys included in graphical keyboard 16 represents a single character. In other examples, one or more of the plurality of keys included in graphical keyboard 16 represents a group of characters selected based on a plurality of modes.
In some examples, text entry area 14 may include characters or other graphical content that are included in, for example, a text-message, a document, an e-mail message, a web browser, or any other situation where text entry is desired. For instance, text entry area 14 may include characters or other graphical content that are selected by user 18 via gestures performed at UI device 4. In some examples, word suggestion areas 24 may each display a word. UI module 6 may cause UI device 4 to display graphical keyboard 16 and detect a gesture having gesture path 22 which is incrementally determined by gesture module 8 in accordance with techniques of the present disclosure further described herein. Additionally, UI module 6 may cause UI device 4 to display a candidate word determined from the gesture in word suggestion areas 24.
Computing device 2, in some examples, includes language model 10. Language model 10 may include a lexicon. In some examples, a lexicon may include a listing of words and may include additional information about the listed words. A lexicon may be represented by a range of data structures, such as an array, a list, and/or a tree. For example, language model 10 may include a lexicon stored in a trie data structure. A lexicon trie data structure may contain a plurality of nodes, each node may represent a letter. The first node in a lexicon trie may be called the entry node which may not correspond to a letter. In other examples, the entry node may correspond to a letter. Each node may have one or more child nodes. For instance, the entry node may have twenty-six child nodes, each corresponding to a letter of the English alphabet.
A subset of the nodes in a lexicon trie may each include a flag which indicates that the node is a terminal node. Each terminal node of a lexicon trie may indicate a complete word (e.g., a candidate word). The letters indicated by the nodes along a path of nodes from the entry node to a terminal node may spell out a word indicated by the terminal node. In some examples, language model 10 may be a default dictionary installed on computing device 2. In other examples, language model 10 may include multiple sources of lexicons, which may be stored at computing device 2 or stored at one or more remote computing devices and are accessible to computing device 2 via one or more communication channels.
In some examples, language model 10 may be implemented in the firmware of computing device 2. Language model 10 may include language model frequency information such as n-gram language models. An n-gram language model may provide a probability distribution for an item xi (letter or word) in a contiguous sequence of items based on the previous items in the sequence (i.e., P(xi|xi−(n-1), . . . , xi-1)). For instance, a bigram language model (an n-gram model where n=2), may provide a probability that the letter “w” follows the sequence “no”. In some examples, language model 10 includes a lexicon trie with integrated language model frequency information. For instance, each node of the lexicon trie may include a representation of a letter and a probability value.
Techniques of the present disclosure may improve the speed and accuracy with which a user can enter text into a computing device. Using techniques of this disclosure, a user may, instead of performing a discrete gesture for each keys of a word, perform a single gesture that indicates the word. As the user performs the gesture, the computing device may incrementally determine the word indicated by the gesture. By incrementally decoding the gesture as it is being performed, the user is presented with a candidate word with minimal post-gesture entry processing time. Moreover, by enabling the user to enter a word with a single gesture, techniques of this disclosure enable the user to increase the rate at which text is entered. Techniques of the disclosure are now further described herein with respect to components of FIG. 1.
As shown in the example of FIG. 1, UI module 6 may cause UI device 4 to display GUI 12. User 18 may desire to enter text, for example the word “now” into text entry area 14. User 18, in accordance with the techniques of this disclosure may perform a gesture at graphical keyboard 16. In one example, the gesture may be a continuous motion in which user 18's finger moves into proximity with UI device 4 such that the gesture performed by the finger is detected by UI device 4 throughout the performance of the gesture. In a different example, user 18 may, move his/her finger into proximity with UI device 4 such that the finger is temporarily detected by UI device 4 and then user 18's finger moves away from UI device 4 such that the finger is no longer detected. The gesture may include a plurality of portions. In some examples, the gesture may be divided into portions with substantially equivalent time durations. Where the gesture includes a plurality of portions, the gesture may include a final portion which may be portion of the gesture detected prior to detecting that the gesture is complete. For instance, a portion of the gesture may be designated as the final portion where user 18 moves his/her finger out of proximity with UI device 4 such that the finger is no longer detected.
While user 18 performs the gesture to select a group of keys of the plurality of keys, UI module 6 may detect a gesture having gesture path 22 at the presence-sensitive display. As shown in FIG. 1, user 18 performs the gesture by tracing gesture path 22 through or near keys of keyboard 16 that correspond to the characters of the desired word (i.e., the characters represented by “N” key 20A, “O” key 20B, and “W” key 20C). UI module 6 may send data that indicates gesture path 22 to gesture module 8. In some examples, UI module 6 incrementally sends data indicating gesture path 22 to gesture module 8 as gesture path 22 is detected by UI device 4 and received by UI module 6. For instance, UI module 6 may send a stream of coordinate pairs indicating gesture path 22 to gesture module 8 as gesture path 22 is detected by UI device 4 and received by UI module 6.
In response to receiving data that represents gesture path 22 from UI module 6, gesture module 8 may determine a candidate word. A candidate word may be a word suggested to the user that is composed of a group of keys indicated by gesture path 22. The group of keys may be determined based on gesture path 22 and a lexicon. Gesture module 8 may determine a candidate word by determining a group of alignment points traversed by gesture path 22, determining respective cost values for each of at least two keys of the plurality of keys, and comparing the respective cost values for at least each of at least two keys of the plurality of keys, as further described below.
An alignment point is a point along gesture path 22 that may indicate a key of the plurality of keys. An alignment point may include one or more coordinates corresponding to the determined position of the alignment point. For instance, an alignment point may include Cartesian coordinates corresponding to a point on GUI 12.
In some examples, gesture module 8 determines the group of alignment points traversed by gesture path 22 based on a plurality of features associated with gesture path 22. The plurality of features associated with gesture path 22 may include a length of a segment of gesture path 22. For instance, gesture module 8 may determine the length along the gesture segment from a previous alignment point and the current alignment point. For better alignments, the length will more closely approximate the straight-line distance between to two corresponding keyboard letters.
In another example, gesture module 8 may determine a direction of a segment from a first point to a second point of gesture path 22 to determine the group of alignment points. For better alignments, the direction of the segment will more closely approximate the direction of a straight line from between two corresponding keyboard letters.
In some examples, a curvature of a segment of gesture path 22, a local speed representing a rate at which a segment of path 22 was detected, and a global speed representing a rate at which gesture path 22 was detected. If gesture module 8 determines a slower speed or pause for the local speed, gesture module 8 may determine that a point at the segment is more likely to be an alignment point. If gesture module 8 determines that a gesture was drawn quickly, the gesture module 8 may determine the gesture is more likely to be imprecise and therefore gesture module 8 may increase the weigh on the language module (i.e., n-gram frequencies) than the spatial model. In one example, gesture module 8 may determine an alignment point of the group of alignment points based on a segment of gesture path 22 having a high curvature value. Additionally, gesture module 8 may determine an alignment point of the group of alignment points based on a segment of gesture path 22 having a low local speed (i.e., the user's finger slowed down while performing the segment of the gesture). In the example of FIG. 1, gesture module 8 may determine a first alignment point at the start of gesture path 22, a second alignment point at the point where gesture path 22 experiences a significant change in curvature, and a third alignment point at the end of gesture path 22. In still other examples, techniques of the disclosure can identify a shape of the gesture as a feature and determine an alignment point based on the shape of the gesture.
In some examples, gesture module 8 may determine respective cost values for each of at least two keys of the plurality of keys included in keyboard 16. Each of the respective cost values may represent a probability that an alignment point indicates a key. In some examples, the respective cost values may be based on physical features of the gesture path, the alignment point, and/or the key. For instance, the respective cost values may be based on the physical location of the alignment point with reference to the physical location of the key.
In some examples, the respective cost values may be based on language model 10. For instance, the respective cost values may be based on the probability that a second key will be selected after a first key (e.g., the probability that the “o” key will be selected after the “n” key). In some examples, the keys for which respective cost values are determined are selected based at least in part on language model 10. In some examples, the cost values are lower where there is a greater likelihood that an alignment point indicates a key. In other examples, the cost values are higher where there is a greater likelihood that an alignment point indicates a key.
In the example of FIG. 1, gesture module 8 may determine a first cost value representing a probability that the first alignment point indicates “N” key 20A and a second cost value representing a probability that the first alignment point indicates “B” key 20D. Similarly, gesture module 8 may determine a third cost value representing a probability that the second alignment point indicates “O” key 20B and a third cost value representing a probability that the second alignment point indicates “P” key 20E. Lastly, gesture module 8 may determine a fifth cost value representing a probability that the third alignment point indicates “W” key 20C and a sixth cost value representing a probability that the third alignment point indicates “Q” key 20F.
Gesture module 8 may compare the respective cost values for at least two keys of the plurality of keys to determine a combination of keys having a combined cost value. A combined cost value may represent a probability that gesture path 22 indicates a combination of keys. Gesture module 8 may compare the respective cost values for at least two keys of the plurality of keys to determine which of the at least two keys is indicated by an alignment point. Gesture module 8 may determine a combination of keys by determining which keys are indicated by each alignment point. In some examples, gesture module 8 determines which of the at least two keys is indicated by an alignment point without regard to which keys are indicated by other alignment points. In other examples, gesture module 8 determines which of the at least two keys is indicated by the alignment point based on which keys are indicated by other alignment points. In such examples, gesture module 8 may revise the determination of which key is indicated by a previous alignment point based on the respective cost values for a current alignment point.
In some examples, gesture module 8 may compare the combined cost value of a determined combination of keys with a threshold value. In some examples, the threshold value is the combined cost value of a different determined combination of keys. For instance, gesture module 8 may determine a first combination of keys having a first combined cost value and a second combination of keys having a second combined cost value. In such an instance, gesture module 8 may determine that the candidate word is based on the combination of keys with the lower combined cost value. In the example of FIG. 1, gesture module 8 may compare the determined respective cost values (i.e., first, second, third, fourth, fifth, and sixth) to determine a combination of keys (i.e., “N”, “O”, and “W”) having a combined cost value.
In some examples, gesture module 8 begins to determine a candidate word prior to the time in which UI device 4 completes detecting gesture path 22. In the example of FIG. 1, rather than determining the candidate word after UI device 4 completes detecting gesture path 22, gesture module 8 may determine a plurality of words as gesture path 22 is detected, such as “no”, “not”, and “now”. Additionally, in the example of FIG. 1, gesture module 8 may contemporaneously revise the determined plurality of words as gesture path 22 is detected, such as revision “no” to “bow”. Furthermore, rather than determining the candidate word based on a geometric shape of the gesture, techniques of the disclosure may determine a candidate word based on a group of characters indicated by the gesture. Gesture module 8 may send the determined word to UI module 6 which may then cause UI device 4 to display the word “now” in text entry area 14 of GUI 12.
In some alternative embodiments, a user can pause when gesturing for a specified time duration at a key to indicate that the key should be included in the gesture path. In another alternative embodiment, rather than using a trie based search as described using techniques of the disclosure, gesture module 8 may maintain a separate gesture-specific word list or dictionary.
In some examples, techniques of the disclosure provide for efficient performance on computing devices, for instance, recognizing gestures in fewer than 100 milliseconds in some cases. Techniques of the disclosure may also use the default dictionary installed on the mobile device rather than using a dedicated gesture dictionary that may be maintained separately and use additional storage resources. In this way, techniques of the disclosure may reduce storage requirements by using a dictionary that is already stored by a default input entry system. Moreover, the dictionary may be implemented efficiently as a compact lexicon trie. Using a default dictionary already provided on a computing device also provides ready support foreign languages, contact names, and user added words in accordance with techniques of the disclosure. By using, e.g., a lexicon trie and the default dictionary, techniques of the disclosure may integrate the language model frequencies (i.e., n-gram probabilities) into the gesture interpretation, thereby allowing the search techniques to concentrate on the most promising paths for candidate words based on both the shape of the gesture and the probability of the word being considered.
FIG. 2 is a block diagram illustrating further details of one example of a computing device shown in FIG. 1, in accordance with one or more techniques of the present disclosure. FIG. 2 illustrates only one particular example of computing device 2 as shown in FIG. 1, and many other examples of computing device 2 may be used in other instances.
As shown in the specific example of FIG. 2, computing device 2 includes one or more processors 40, one or more input devices 42, one or more communication units 44, one or more output devices 46, one or more storage devices 48, and user interface (UI) device 4. Computing device 2, in one example further includes UI module 6, gesture module 8, and operating system 58 that are executable by computing device 2. Computing device 2, in one example, further includes language model 10, key regions 52, active beam 54, and next beam 56. Each of components 4, 40, 42, 44, 46, and 48 (physically, communicatively, and/or operatively) for inter-component communications. In some examples, communication channels 50 may include a system bus, a network connection, an inter-process communication data structure, or any other method for communicating data. As one example in FIG. 2, components 4, 40, 42, 44, 46, and 48 may be coupled by one or more communication channels 50. UI module 6 and gesture module 8 may also communicate information with one another as well as with other components in computing device 2, such as language model 10, key regions 52, active beam 54, and next beam 56.
Processors 40, in one example, are configured to implement functionality and/or process instructions for execution within computing device 2. For example, processors 40 may be capable of processing instructions stored in storage device 48. Examples of processors 40 may include, any one or more of a microprocessor, a controller, a digital signal processor (DSP), an application specific integrated circuit (ASIC), a field-programmable gate array (FPGA), or equivalent discrete or integrated logic circuitry.
One or more storage devices 48 may be configured to store information within computing device 2 during operation. Storage device 48, in some examples, is described as a computer-readable storage medium. In some examples, storage device 48 is a temporary memory, meaning that a primary purpose of storage device 48 is not long-term storage. Storage device 48, in some examples, is described as a volatile memory, meaning that storage device 48 does not maintain stored contents when the computer is turned off. Examples of volatile memories include random access memories (RAM), dynamic random access memories (DRAM), static random access memories (SRAM), and other forms of volatile memories known in the art. In some examples, storage device 48 is used to store program instructions for execution by processors 40. Storage device 48, in one example, is used by software or applications running on computing device 2 (e.g., gesture module 8) to temporarily store information during program execution.
Storage devices 48, in some examples, also include one or more computer-readable storage media. Storage devices 48 may be configured to store larger amounts of information than volatile memory. Storage devices 48 may further be configured for long-term storage of information. In some examples, storage devices 48 include non-volatile storage elements. Examples of such non-volatile storage elements include magnetic hard discs, optical discs, floppy discs, flash memories, or forms of electrically programmable memories (EPROM) or electrically erasable and programmable (EEPROM) memories.
Computing device 2, in some examples, also includes one or more communication units 44. Computing device 2, in one example, utilizes communication unit 44 to communicate with external devices via one or more networks, such as one or more wireless networks. Communication unit 44 may be a network interface card, such as an Ethernet card, an optical transceiver, a radio frequency transceiver, or any other type of device that can send and receive information. Other examples of such network interfaces may include Bluetooth, 3G and WiFi radios computing devices as well as Universal Serial Bus (USB). In some examples, computing device 2 utilizes communication unit 44 to wirelessly communicate with an external device such as a server.
Computing device 2, in one example, also includes one or more input devices 42. Input device 42, in some examples, is configured to receive input from a user through tactile, audio, or video feedback. Examples of input device 42 include a presence-sensitive display, a mouse, a keyboard, a voice responsive system, video camera, microphone or any other type of device for detecting a command from a user. In some examples, a presence-sensitive display includes a touch-sensitive screen.
One or more output devices 46 may also be included in computing device 2. Output device 46, in some examples, is configured to provide output to a user using tactile, audio, or video stimuli. Output device 46, in one example, includes a presence-sensitive display, a sound card, a video graphics adapter card, or any other type of device for converting a signal into an appropriate form understandable to humans or machines. Additional examples of output device 46 include a speaker, a cathode ray tube (CRT) monitor, a liquid crystal display (LCD), or any other type of device that can generate intelligible output to a user. In some examples, UI device 4 may include functionality of input device 42 and/or output device 46. In the example of FIG. 2, UI device 4 may be a touch-sensitive screen.
In some examples, UI device 4 may include functionality of input device 42 and/or output device 46. In the example of FIG. 2, UI device 4 may be a presence-sensitive display. In some examples, a presence sensitive display may detect an object at and/or near the screen of the presence-sensitive display. As one example range, a presence-sensitive display may detect an object, such as a finger or stylus that is within 2 inches or less of the physical screen of the presence-sensitive display. The presence-sensitive display may determine a location (e.g., an (x,y) coordinate) of the presence-sensitive display at which the object was detected. In another example range, a presence-sensitive display may detect an object 6 inches or less from the physical screen of the presence-sensitive display and other exemplary ranges are also possible. The presence-sensitive display may determine the location of the display selected by a user's finger using capacitive, inductive, and/or optical recognition techniques. In some examples, presence sensitive display provides output to a user using tactile, audio, or video stimuli as described with respect to output device 46.
Computing device 2 may include operating system 58. Operating system 58, in some examples, controls the operation of components of computing device 2. For example, operating system 58, in one example, facilitates the communication of UI module 6 and/or gesture module 8 with processors 40, communication unit 44, storage device 48, input device 42, and output device 46. UI module 6 and gesture module 8 may each include program instructions and/or data that are executable by computing device 2. As one example, UI module 6 may include instructions that cause computing device 2 to perform one or more of the operations and actions described in the present disclosure.
Computing device 2 may include active beam 54. Active beam 54, in some examples, is configured to store one or more tokens created by gesture module 8. Active beam 54 may be included within storage devices 48. The specific functionality of active beam 54 is further described in the description of FIG. 3, below.
Computing device 2 may also include next beam 56. Next beam 56, in some examples, is configured to store one or more tokens created by gesture module 8. Next beam 56 may be included within storage devices 48. The specific functionality of next beam 56 is further described in the description of FIG. 3, below.
Computing device 2 can include additional components that, for clarity, are not shown in FIG. 2. For example, computing device 2 can include a battery to provide power to the components of computing device 2. Similarly, the components of computing device 2 shown in FIG. 2 may not be necessary in every example of computing device 2. For example, in some configurations, computing device 2 may not include communication unit 44.
In accordance with the techniques of this disclosure, computing device 2 may output a graphical keyboard comprising a plurality of keys at output device 44. User 18 may perform a gesture to select a group of keys of the plurality of keys at input device 42. In response to user 18 performing the gesture, input device 42 may detect a gesture path, such as gesture path 22 of FIG. 1, which may be received by UI module 6 as gesture path data. UI module 6 may then send the gesture path data to gesture module 8. In some examples, UI module 6 incrementally sends the gesture path data to gesture module 8 as gesture path 22 is detected by input device 42.
In response to receiving the gesture path data, gesture module 8 may create a token at the entry node of a lexicon which may be included in language model 10. In some examples, language module 10 may be implemented as a trie data structure. Each movable token may represent a partial alignment between a node in the lexicon (i.e., partial word) and a point along the gesture. As the token advances to child nodes in the lexicon (i.e., next letters in the word) the corresponding alignment point on the gesture may advance as well. As the token advances to the next letter in a word, techniques of the disclosure may determine how far the token needs to advance along the gesture-path. For instance, techniques of the disclosure may include search for an alignment point along the gesture that best aligns to a letter of a key, taking into account a number of features described below. The techniques are further described herein.
As described in FIG. 1, a lexicon trie data structure may contain a plurality of nodes, each node may represent a letter. Gesture module 8 may push the token into active beam 54. Gesture module 8 may create a token copy on each of the token's child nodes. In the example of FIG. 1, gesture module 8 may create a first token copy on the child node representing the letter “N” and a second token copy on the child node representing the letter “B”.
For each token copy, gesture module 8 may determine, based on a plurality of features associated with the gesture path data, an alignment point traversed by the gesture. In the example of FIG. 1, gesture module 8 may determine that a first alignment point is located at the start of gesture path 22. In some examples, gesture module 8 may determine the curvature of the path at a point along the gesture path. In such examples, gesture module 8 may determine that the point is more likely to be an alignment point where there is a high curvature (where the gesture path changes direction abruptly at the point). In other examples, gesture module 8 may determine a mid-segment curvature (the maximum curvature of the gesture path between two points along the gesture). In another example, gesture module 8 may determine that a point is less likely to be the next alignment point where there is a high mid-segment curvature. In some examples, gesture module 8 may determine that a point is an alignment point based on the speed at which the gesture path was detected. In some examples, a slower rate of detection indicates that the point is an alignment point. In some examples, a high mid-segment curvature may indicate that there were corners between a first point and a second point, suggesting that the second point is less likely to be the next alignment point (i.e., a point was missed in-between).
In some examples, an alignment point may be based on the maximum distance between points of a gesture segment between two or more points and an ideal line from a first key to a second key. An ideal line may be, e.g., a shortest distance path from the first key to the second key. For a better alignment the maximum distance may be small, signifying that the gesture segment does not deviate from the ideal line.
For each alignment point, gesture module 8 may determine respective cost values for each of at least two keys of the plurality of keys. Each of the respective cost values may represent a probability that the alignment point indicates a key of the plurality of keys. In the example of FIG. 1, gesture module 8 may determine a first cost value representing a probability that the first alignment point indicates the node representing the letter “N” and a second cost value representing a probability that the first alignment point indicates the node representing the letter “B”. In some examples, gesture module 8 may then update the token copy with the respective alignment point and/or cost value and push the token copy in next beam 56. In the example of FIG. 1, gesture module 8 may add the first cost value to the first token copy and the second cost value to the second token copy.
In some examples, gesture module 8 determines the respective cost values by comparing respective physical cost values with respective lexical cost values, as further described below. In some examples, gesture module 8 may weight the respective physical cost values differently than the respective lexical cost values. For instance, gesture module 8 may determine a cost value by summing the result of multiplying a physical cost value by a physical weighting value, and multiplying a lexical cost value by a lexical weighting value.
In some examples, gesture module 8 may determine that the lexical cost values should be weighted greater than the physical cost values. Gesture module 8 may determine that the lexical cost values should be weighted greater than the physical cost values where there is an indication that the physical cost values may be unreliable, such as where the gesture path is detected at high rate of speed. For instance, gesture module 8 may determine that a value associated with a feature (e.g., speed) satisfies one or more thresholds. For instance, gesture module 8 may determine that speed of the gesture is greater than or equal to a threshold value. In other examples, gesture module 8 may determine that the speed of the gesture is less than or equal to a threshold value. In any case, gesture module 8 may determine that the physical cost values are unreliable if the determined value satisfies a threshold.
In some examples, gesture module 8 may determine that the lexical cost values should be weighted greater than the physical cost values based on a determined raw distance of a gesture. In one example, a raw distance of a gesture may be a determined physical distance of a gesture that is performed by an input unit at a presence-sensitive display. For instance, when short gestures are spatially similar (e.g., “I'm” vs “in”, “I′d” vs “is”, etc.) gesture module 8 may weigh the physical cost higher than the lexical cost values. In other examples, gesture module 8 may weigh the lexical cost values higher than the physical cost values. As one example, gesture module 8 may initially determine the length of a gesture based a motion of an input unit (e.g., finger, stylus, etc.) at UI device 4. In response to determining the gesture length, gesture module 8 may apply a first weight to the lexical cost values and a second weight to the physical cost values to normalize the relative weights of the spatial and language models. The first weight may be greater than the second weight in some examples. For instance, when long gestures are spatially different and long, e.g., greater than a threshold distance, (e.g. a gesture that traverses the keyboard from the key “A” to key “P” to “L” to “E”) gesture module 8 may apply a first weight to the lexical cost values that is greater than a second weight that is applied to the spatial cost values. In some examples, gesture module 8 may apply a first weight to the lexical cost values, but may not apply a second weight to the spatial cost values and vice versa. In this way, gesture module 8 may only apply a weight to one of the lexical or spatial cost values to increase and/or decrease the cost values to which the weight was applied. In other examples, the second weight may be greater than the first weight, for instance, when short gestures are short and spatially similar, e.g., less than a threshold distance. In some examples, the value of the weights may be proportional to the gesture length.
In some examples, gesture module 8 may use statistical machine learning to adapt to the style of the user and modify the weighting values over time. For instance, gesture module 8 may, in response to determining that the user is inaccurate while performing gestures, weigh the lexical cost values greater than the physical cost values. In some examples, gesture module 8 may determine that the physical cost values should be weighted greater than the lexical cost values. Gesture module 8 may determine that the physical cost values should be weighted greater than the lexical cost values where there is an indication that the lexical cost values may be unreliable, such as where the user has a history of entering words not included in the lexicon. In some examples, the weighting values may be estimated and optimized heuristically, such as by measuring accuracy from a plurality of computing devices.
Gesture module 8 may determine respective physical cost values for each of the at least two keys of the plurality of keys. Each of the respective physical cost values may represent a probability that physical features of an alignment point of the group of alignment points indicate physical features of a key of the plurality of keys. For instance, gesture module 8 may determine the respective physical cost values by evaluating the Euclidian distance between an alignment point of the group of alignment points and a keyboard position of key. Physical features of the plurality of keys may be included in key regions 52. For example, key regions 52 may include, for each of the plurality of keys, a set of coordinates that correspond to a location and/or area of graphical keyboard 16 where each key is displayed. In the example of FIG. 1, gesture module 8 may determine a first physical cost value based on the Euclidian distance between the first alignment point and “N” key 20A. In some examples, gesture module 8 may determine the physical cost values by comparing the Euclidian distance between a first alignment point and a second alignment point with the Euclidian distance between a first letter indicated by the first alignment point and a second letter which may be represented by the second alignment point. Gesture module 8 may determine that the cost value of the second letter is inversely proportional to the difference between the distances (i.e., that the second letter is more probable where the distances are more similar). For instance, a smaller distance may suggest a better alignment.
Gesture module 8 may also determine the respective cost values by determining respective lexical cost values for each of the at least two keys of the plurality of keys. Each of the respective lexical cost values may represent a probability that a letter represented by a key of the plurality of keys is included in the candidate word. The lexical cost values may be based on language model 10. For instance, the lexical cost values may represent the likelihood that a given letter is selected based on probable words included in language model 10. In the example of FIG. 1, gesture module 8 may determine a first lexical cost value based on an entry in language model 10 indicating a frequency that the letter “N” is the first letter in a word.
Gesture module 8 may determine whether the token is at a terminal node of the lexicon. In response to determining that the token is at a terminal node, gesture module 8 may add the token (or a representation thereof) to a list of output predictions. In some cases, gesture module 8 may compare the respective cost values for each node from the entry node to the terminal node to determine a combined cost value for the word indicated by the terminal node. In other cases, the combined cost value for the word indicated by the terminal node may be reflected by the token's cost value. In either case, gesture module 8 may then discard the token (i.e., remove the token from active beam 54). For instance, in one example, in the token passing process gesture module 8 may keep only a group of top-n tokens, and discard the rest. The top-n tokens may be the tokens with the most likely words or character strings. In this way, gesture module 9 may efficiently scale to large lexicons. Alternative embodiments may use any suitable search techniques.
Gesture module 8 may then determine whether UI module 6 has completed receiving the gesture path data. Where UI module 6 has completed receiving the gesture path data, gesture module 8 may output one or more candidate words for display at the presence-sensitive display. Where UI module 6 has not completed receiving the gesture path data, gesture module 8 may continue to incrementally process the gesture path data. In some examples, gesture module 8 may output one or more output predictions prior to UI module 6 completing reception of the gesture path data. The techniques are further described below in the description of FIG. 3.
FIGS. 3A-C are block diagrams illustrating further details of one example of a computing device shown in FIG. 1, in accordance with one or more techniques of the present disclosure. As shown in the conceptual example of FIG. 3A, at time 60, computing device 2 may include GUI 12, active beam 54A, and next beam 56A. GUI 12 may include graphical keyboard 16 which may include “N” key 20A, “B” key 20D, gesture path 22A, and alignment point 26A. While shown in FIG. 3A, gesture path 22A and/or alignment point 26A may not be visible during the performance of the techniques described herein.
As shown in the example of FIG. 1, a user may desire to enter text into computing device 2 by performing a gesture at graphical keyboard 16. As previously discussed, while the user performs the gesture, computing device 2 may detect a gesture having a gesture path. In the example of FIG. 3A, computing device 2 is shown as having detected gesture path 22A.
In response to detecting gesture path 22A, computing device 2 may determine alignment point 26A along gesture path 22A. Additionally, in response to detecting gesture path 22A, computing device 2 may create a token and push the token into active beam 54A. At time 60, the contents on active beam 54A may be represented by Table 1 below.
|
TABLE 1 |
|
|
|
|
Parent |
Letter Key of |
Letter |
Cost |
|
Index |
Index |
Current Node |
Chain |
Value |
|
|
|
0 |
— |
— |
— |
0 |
|
|
In Table 1, each row represents an individual token, the index column represents a unique identifier for each token, the parent index column represents the index value of the token to which the listed token is a child, the letter key of the current node column represent the letter key represented by the current node of the token, the letter chain column represents all of the letter keys represented by the nodes from the entry node to the current node of the token, and the cost value column represent the cost value of the token. As shown in Table 1, the created token has an index of 0 (i.e., token0), no parent index, no letter key of the current node, no letter chain, and a cost value of zero.
To determine the text indicated by the gesture, computing device 2 may create a copy of each token on its child nodes. In some examples, an entry node may have 26 child nodes (one for each letter of the English alphabet). For simplicity, in the example of FIG. 3A, the entry node has only two child nodes on the letters “B” and “N”. Therefore, computing device 2 may create a copy of the token with index 0 on child node “N” (i.e. token1) and child node “B” (i.e. token2). For each created token copy, computing device 2 may determine a cost value as described above. Computing device 2 may push each token copy in to next beam 56A, the contents of which may be represented by Table 2 below.
|
TABLE 2 |
|
|
|
|
Parent |
Letter Key of |
Letter |
Cost |
|
Index |
Index |
Current Node | Chain |
Value | |
|
|
|
1 |
0 |
N | N |
CV1 | |
|
2 |
0 |
B |
B |
CV2 |
|
|
The entries shown in Table 2 are identical in format to the entry shown in Table 1. In Table 2, token1 has cost value CV1 and token2 has cost value CV2. After creating the token copies, computing device 2 may determine that token0 is not a terminal node and discard token0. Computing device 2 may subsequently determine whether active beam 54A is empty (i.e., contains no tokens). In response to determining that active beam 54A is empty, computing device 2 may copy the contents of next beam 56A to active beam 54B of FIG. 3B and discard the contents of next beam 56A.
In the example of FIG. 3B, computing device 2 is shown as having detected gesture path 22B at time 62. As described above, the contents of active beam 54B may be represented by Table 2. Computing device 2 may determine alignment point 26B along gesture path 22B. Computing device 2 may, for each token in active beam 54B, create a copy on each child node. In the example of FIG. 3B, token1 and token2 each have child nodes with letter keys “O” and “P”. For each created token copy, computing device 2 may determine a cost value as described above. Computing device 2 may push each token copy in to next beam 56B, the contents of which may be represented by Table 3 below.
|
TABLE 3 |
|
|
|
|
Parent |
Letter Key of |
Letter |
Cost |
|
Index |
Index |
Current Node |
Chain |
Value |
|
|
|
3 |
1 |
O |
NO |
CV1 + CV3 |
|
4 |
1 |
P |
NP |
CV1 + CV4 |
|
5 |
2 |
O |
BO |
CV2 + CV5 |
|
6 |
2 |
P |
BP |
CV2 + CV6 |
|
|
The entries shown in Table 3 are identical in format to the entries shown in Table 1 and Table 2. In Table 3, the cost value for each token includes the cost value for the previous letters and the cost value for the current letter. Computing device 2 may determine which, if any, of the tokens are on terminal nodes. For instance, computing device 2 may determine that token3 is on a terminal node because its letter chain “NO” is a word. In response to determining that a token is on a terminal node, computing device 2 may copy the token to a list of output predictions. The list of output predictions may be represented by Table 4 below. In some examples, computing device 2 may copy only the letter chain of the token to the list of output predictions.
|
TABLE 4 |
|
|
|
|
Parent |
Letter Key of |
Letter |
Cost |
|
Index |
Index |
Current Node |
Chain |
Value |
|
|
|
3 |
1 |
O |
NO |
CV1 + CV3 |
|
|
Computing device 2 may subsequently determine whether active beam 54A is empty. In response to determining that active beam 54B is empty, computing device 2 may copy the contents of next beam 56B to active beam 54C of FIG. 3C and discard the contents of next beam 56B.
In the example of FIG. 3C, computing device 2 is shown as having detected gesture path 22C at time 64. As described above, the contents of active beam 54C may be represented by table 3. Computing device 2 may determine alignment point 26C along gesture path 22C. Computing device 2 may, for each token in active beam 54C, create a copy on each child node. In the example of FIG. 3C, token3 through token6 each have child nodes with letter keys “O” and “P”. For each created token copy, computing device 2 may determine a cost value as described above. Computing device 2 may push each token copy in to next beam 56C, the contents of which may be represented by Table 5 below.
TABLE 5 |
|
|
Parent |
Letter Key of |
Letter |
Cost |
Index |
Index |
Current Node |
Chain |
Value |
|
|
7 |
3 |
W |
NOW |
CV1 + CV3 + CV7 |
8 |
3 |
Q |
NOQ |
CV1 + CV3 + CV8 |
9 |
4 |
W |
NPW |
CV1 + CV4 + CV9 |
10 |
4 |
Q |
NPQ |
CV1 + CV4 + CV10 |
11 |
5 |
W |
BOW |
CV2 + CV5 + CV11 |
12 |
5 |
Q |
BOQ |
CV2 + CV5 + CV12 |
13 |
6 |
W |
BPW |
CV2 + CV6 + CV13 |
14 |
6 |
Q |
BPQ |
CV2 + CV6 + CV14 |
|
The entries shown in Table 5 are identical in format to the entries shown in Tables 1-3. In Table 5, the cost value for each token includes the cost value for the previous letters and the cost value for the current letter. Computing device 2 may determine which, if any, of the tokens are on terminal nodes. For instance, computing device 2 may determine that token7 and token11 are on terminal nodes because their respective letter chains “NOW” and “BOW” are words. In response to determining that a token is on a terminal node, computing device 2 may copy token7 and token11 to a list of output predictions. The list of output predictions may be represented by Table 6 below.
TABLE 6 |
|
|
Parent |
Letter Key of |
Letter |
Cost |
Index |
Index |
Current Node |
Chain |
Value |
|
|
3 |
1 |
O |
NO |
CV1 + CV3 |
7 |
3 |
W |
NOW |
CV1 + CV3 + CV7 |
11 |
5 |
W |
BOW |
CV2 + CV5 + CV11 |
|
Computing device 2 may subsequently determine whether active beam 54C is empty. In response to determining that active beam 54B is empty, computing device 2 may determine whether the user has completed performing the gesture. In response to determining that the user has completed performing the gesture, computing device 2 may output the list of output predictions. In some examples, computing device 2 may determine a subset of the list of output predictions which have the highest cost values (i.e., the predictions with the best probability). Additionally, in some examples, computing device 2 may, at each subsequent alignment point, revise the cost values of the tokens contained in the list of output predictions. For instance, computing device 2 may increase the cost value of token3 (e.g., make token3 less probable) in response to detecting gesture path 22C.
FIGS. 4A-B are flow diagrams illustrating example operations of a computing device to determine a candidate word from a gesture, in accordance with one or more techniques of the present disclosure. For purposes of illustration only, the example operations are described below within the context of computing device 2, as shown in FIGS. 1 and 2.
In the example of FIGS. 4A-B, computing device 2 may initially output a graphical keyboard comprising a plurality of keys at a presence-sensitive display (e.g., UI device 4) of computing device 2 (70). Computing device 2 may subsequently detect a gesture at the presence-sensitive display (72). In response to detecting the gesture, computing device 2 may create a token having a cost value of zero at the entry node of a lexicon stored on computing device 2 as a lexicon trie (74). Computing device 2 may push the token into an active beam (76). Computing device 2 may subsequently select a token from the active beam (78). Computing device 2 may create a copy of the token on each child node of the token (80). Computing device 2 may select a token copy (82) and determine an alignment point along the gesture (84). Computing device 2 may determine a cost value representing a probability that the alignment point indicates the letter key of the node on which the token copy is positioned and add the cost value to the token copy (86). Computing device 2 may push the token copy into a next beam (88). Computing device 2 may determine whether there are any token copies remaining (90). If there are token copies remaining (94), computing device 2 may select a new token copy (82).
If there are not any token copies remaining (92), computing device 2 may determine whether the token is at a terminal node of the lexicon trie (96). If the token is at a terminal node (98), computing device 2 may copy the word represented by the token to a list of candidate words (102). After copying the word to the list of candidate words, or if the token is not at a terminal node (100), computing device 2 may discard the token (104).
Computing device 2 may subsequently determine whether any tokens remain in the active beam (106). If there are tokens remaining in the active beam (110), computing device 2 may select a new token from the active beam (78). If there are no tokens remaining in the active beam (108), computing device 2 may determine whether any tokens remain in the next beam (112). If there are tokens remaining in the next beam (114), computing device 2 may copy the next beam to the active beam (120) and select a new token from the active beam (78). If there are no tokens remaining in the next beam (116), computing device 2 may output the list of candidate words at the presence-sensitive display (118).
In one example, techniques of the disclosure may be implemented using the following example pseudocode:
|
Initialization: |
Create a token t with cost = 0 and index = 0 in the entry node of the lexicon. |
push t into active_beam |
Operations: |
while active_beam is not empty do |
Advance_tokens(active_beam, next_beam) |
active_beam = next_beam |
clear next_beam |
end |
Advance_tokens(active_beam, next_beam): |
for each token t do |
let n be the node of token t |
let k1 be the letter key of node n |
let p1 be the current alignment point of token t |
for each child node c of n do |
let k2 be the letter key of node c |
let tc be a copy of token t |
Align_key_to_gesture(tc, k1, k2, p1) |
push tc into next_beam |
end |
if t is a terminal node then |
copy t to terminal list |
else |
discard t |
end |
end |
Align_key_to_gesture(token t, key k1, key k2, point p1): |
find the point p2 along the gesture that best matches the input |
add the cost to token t |
update the current alignment point of token t to point p2 |
|
In the above example pseudocode, active_beam may be active beam 54, next_beam may be next beam 56, and the lexicon may be included in language model 10.
FIG. 5 is a flow diagram illustrating example operations of a computing device to determine a candidate word from a gesture, in accordance with one or more techniques of the present disclosure. For purposes of illustration only, the example operations are described below within the context of computing device 2, as shown in FIGS. 1 and 2.
In the example of FIG. 5, computing device 2 may initially output, for display at a presence-sensitive display operatively coupled to computing device 2, a graphical keyboard comprising a plurality of keys (140). Computing device 2 may subsequently detect a gesture at the presence-sensitive display to select a group of keys of the plurality of keys (142). In response to detecting the gesture, computing device 2 may determine a candidate word based at least in part on the group of keys (144).
In order to determine a candidate word based at least in part on the group of keys, computing device 2 may: determine, based on a plurality of features associated with the gesture, a group of alignment points traversed by the gesture (146); determine respective cost values for each of at least two keys of the plurality of keys (148); and compare the respective cost values for at least each of at least two keys of the plurality of keys to determine a combination of keys having a combined cost value (150). Computing device 2 may subsequently output the candidate word at the presence-sensitive display (152).
In one example, the operations include determining a first cost value for a first key of the plurality of keys based on a first alignment point of the group of alignment points and a second cost value for a second key of the plurality of keys based on a second alignment point of the group of alignment points.
In one example, the operations include determining respective physical cost values for each of the at least two keys of the plurality of keys, wherein each of the respective physical cost values represents a probability that physical features of an alignment point of the group of alignment points indicate physical features of a key of the plurality of keys; determining respective lexical cost values for each of the at least two keys of the plurality of keys, wherein each of the respective lexical cost values represents a probability that a key of the plurality of keys is included in the candidate word; and comparing the respective physical cost values with the respective lexical cost values to determine the respective cost values for each of the at least two keys of the plurality of keys. In one example, determining the respective physical cost values for each of the at least two keys may include comparing key regions of each of the at least two keys of the plurality of keys with at least one of the plurality of features associated with the gesture. In one example, the key regions comprise a location of the presence-sensitive display that outputs the respective key. In one example, determining the respective lexical cost values for each of the at least two keys may include comparing each of the at least two keys of the plurality of keys with a language model. In one example, the language model includes an n-gram language model. In one example, computing device 2 includes firmware and the language model is implemented in the firmware. In one example, comparing the respective physical cost values with the respective lexical cost values to determine the respective cost values for each of the at least two keys of the plurality of keys may include weighting the respective physical cost values differently than the respective lexical cost values. In one example, in response to determining that the physical cost values satisfy one or more thresholds, weighting the lexical cost values with a first weighting value, and weighting the physical cost values with a second weighting value, wherein the first weighting value is greater than the second weighting value.
In one example, the plurality of features associated with the gesture may include at least one of a length of a segment of the gesture, a direction of the segment of the gesture, a curvature of the segment of the gesture, a local speed representing a rate at which the segment of the gesture was detected, a global speed representing a rate at which the gesture was detected. In such an example, the segment of the gesture may include a path traversed by the gesture at the presence-sensitive display. In one example, the candidate word from the group of keys may be determined contemporaneously with the detection of the gesture to select the group of keys of the plurality of keys.
In one example, the operations include copying, in response to the detecting a portion of the gesture, a token from a first node of a lexicon to a second node of the lexicon, wherein the second node is a child node of the first node; determining, based on a plurality of features associated with the portion of the gesture, an alignment point traversed by the portion of the gesture; determining whether the second node is a terminal node, wherein each terminal node represents a candidate word; copying, in response to determining that the second node is a terminal node, the candidate word represented by the second node to a list of output predictions; determining whether the portion of the gesture is a final portion of the gesture; and outputting, in response to determining that the portion of the gesture is the final portion of the gesture, at least a portion of the list of output predictions for display at the presence-sensitive display. In one example, determining the alignment point traversed by the portion of the gesture may include determining a cost value for the alignment point, wherein the cost value represents a probability that the alignment point indicates the second node. In one example, determining the cost value for the alignment point includes determining a physical cost value for the alignment point; determining a lexical cost value for the alignment point; and comparing the physical cost value and the lexical cost value to determine the cost value for the alignment point. In one example, determining the lexical cost value for the alignment point may include comparing the alignment point with a language model. In one example, the lexicon may include the language model. In one example, the operations include determining a combined cost value for the candidate word; and removing, from the list output predictions, candidate words having combined cost values which fail to satisfy a threshold. In one example, the lexicon may be stored on the computing device as a trie data structure. In one example, each node of the lexicon corresponds to at least one key of the plurality of keys. In one example, outputting the candidate word that is based on the combination of keys may include outputting, for display at the presence-sensitive display, the candidate word in response to determining, by the computing device, that combined cost value of the combination of keys satisfies a threshold.
The techniques described in this disclosure may be implemented, at least in part, in hardware, software, firmware, or any combination thereof. For example, various aspects of the described techniques may be implemented within one or more processors, including one or more microprocessors, digital signal processors (DSPs), application specific integrated circuits (ASICs), field programmable gate arrays (FPGAs), or any other equivalent integrated or discrete logic circuitry, as well as any combinations of such components. The term “processor” or “processing circuitry” may generally refer to any of the foregoing logic circuitry, alone or in combination with other logic circuitry, or any other equivalent circuitry. A control unit including hardware may also perform one or more of the techniques of this disclosure.
Such hardware, software, and firmware may be implemented within the same device or within separate devices to support the various techniques described in this disclosure. In addition, any of the described units, modules or components may be implemented together or separately as discrete but interoperable logic devices. Depiction of different features as modules or units is intended to highlight different functional aspects and does not necessarily imply that such modules or units must be realized by separate hardware, firmware, or software components. Rather, functionality associated with one or more modules or units may be performed by separate hardware, firmware, or software components, or integrated within common or separate hardware, firmware, or software components.
The techniques described in this disclosure may also be embodied or encoded in an article of manufacture including a computer-readable storage medium encoded with instructions. Instructions embedded or encoded in an article of manufacture including a computer-readable storage medium encoded, may cause one or more programmable processors, or other processors, to implement one or more of the techniques described herein, such as when instructions included or encoded in the computer-readable storage medium are executed by the one or more processors. Computer readable storage media may include random access memory (RAM), read only memory (ROM), programmable read only memory (PROM), erasable programmable read only memory (EPROM), electronically erasable programmable read only memory (EEPROM), flash memory, a hard disk, a compact disc ROM (CD-ROM), a floppy disk, a cassette, magnetic media, optical media, or other computer readable media. In some examples, an article of manufacture may include one or more computer-readable storage media.
In some examples, a computer-readable storage medium may include a non-transitory medium. The term “non-transitory” may indicate that the storage medium is not embodied in a carrier wave or a propagated signal. In certain examples, a non-transitory storage medium may store data that can, over time, change (e.g., in RAM or cache).
Various examples have been described. These and other examples are within the scope of the following claims.