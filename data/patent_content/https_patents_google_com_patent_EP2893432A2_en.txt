EP2893432A2 - In browser muxing and demuxing for video playback - Google Patents
In browser muxing and demuxing for video playbackInfo
- Publication number
- EP2893432A2 EP2893432A2 EP13834920.4A EP13834920A EP2893432A2 EP 2893432 A2 EP2893432 A2 EP 2893432A2 EP 13834920 A EP13834920 A EP 13834920A EP 2893432 A2 EP2893432 A2 EP 2893432A2
- Authority
- EP
- European Patent Office
- Prior art keywords
- format
- content
- file
- samples
- video
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Withdrawn
Links
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N21/00—Selective content distribution, e.g. interactive television or video on demand [VOD]
- H04N21/40—Client devices specifically adapted for the reception of or interaction with content, e.g. set-top-box [STB]; Operations thereof
- H04N21/47—End-user applications
- H04N21/478—Supplemental services, e.g. displaying phone caller identification, shopping application
- H04N21/4782—Web browsing, e.g. WebTV
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N21/00—Selective content distribution, e.g. interactive television or video on demand [VOD]
- H04N21/40—Client devices specifically adapted for the reception of or interaction with content, e.g. set-top-box [STB]; Operations thereof
- H04N21/43—Processing of content or additional data, e.g. demultiplexing additional data from a digital video stream; Elementary client operations, e.g. monitoring of home network or synchronising decoder's clock; Client middleware
- H04N21/44—Processing of video elementary streams, e.g. splicing a video clip retrieved from local storage with an incoming video stream, rendering scenes according to MPEG-4 scene graphs
- H04N21/4402—Processing of video elementary streams, e.g. splicing a video clip retrieved from local storage with an incoming video stream, rendering scenes according to MPEG-4 scene graphs involving reformatting operations of video signals for household redistribution, storage or real-time display
- H04N21/440218—Processing of video elementary streams, e.g. splicing a video clip retrieved from local storage with an incoming video stream, rendering scenes according to MPEG-4 scene graphs involving reformatting operations of video signals for household redistribution, storage or real-time display by transcoding between formats or standards, e.g. from MPEG-2 to MPEG-4
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N21/00—Selective content distribution, e.g. interactive television or video on demand [VOD]
- H04N21/40—Client devices specifically adapted for the reception of or interaction with content, e.g. set-top-box [STB]; Operations thereof
- H04N21/47—End-user applications
- H04N21/472—End-user interface for requesting content, additional data or services; End-user interface for interacting with content, e.g. for content reservation or setting reminders, for requesting event notification, for manipulating displayed content
- H04N21/47202—End-user interface for requesting content, additional data or services; End-user interface for interacting with content, e.g. for content reservation or setting reminders, for requesting event notification, for manipulating displayed content for requesting content on demand, e.g. video on demand
Definitions
- the specification relates to a system for converting content file format such as video file format.
- a video hosting site manages videos that are accessed by clients. Publishers upload video content to the video hosting site. The video hosting site pushes videos uploaded by publishers to the clients.
- the videos uploaded by publishers are stored on the video hosting site as video files with specific video file formats.
- a publisher uploads a video with a Moving Picture Experts Group-4 (M PEG-4) video file format to a video hosting site.
- the uploaded video is stored on the video hosting site as an MPEG-4 video file.
- a user who accesses the video hosting site might want to view the video in a flash player on a user device such as a smart phone. Therefore, here comes a requirement of translating the MPEG-4 video file to a Flash Video (FLV) file since a flash player cannot play a video file with the MPEG-4 file format, but can play a video file with a FLV file format.
- FLV Flash Video
- Another requirement might be converting the video file format in real time once a user requests to view the video in a different format.
- Embodiments disclosed herein provide a system and method for converting a content file from a first format to a second format.
- a browser comprises a flash player.
- the flash player comprises a format module.
- the format module comprises a parser, a table generator, a determining module and a packaging module.
- the parser parses data in the content file with the first format for one or more file headers.
- the table generator is communicatively coupled to the parser for receiving the one or more file headers and generating one or more content tables based at least in part on the one or more file headers.
- the content table comprises one or more of a table identifier, a table name, a sample identifier, a sample name, a type, a byte offset, a length, a time offset and a motion feature.
- the determining module is communicatively coupled to the table generator for receiving the one or more content tables from the table generator and determining one or more samples in the content file with the first format based at least in part on the one or more content tables.
- the packaging module is communicatively coupled to the determining module for receiving the one or more samples in the content file with the first format and generating one or more tags based at least in part on the one or more samples.
- the packaging module converts the content file from the first format to the second format based at least in part on the one or more tags.
- Figure 1 is a high-level block diagram illustrating one embodiment of a system for converting content file format.
- Figure 2 is a block diagram illustrating one embodiment of a client device where a format module is illustrated in detail.
- Figure 3 is a block diagram illustrating one embodiment of a storage device.
- Figure 4 shows an example of a content table in accordance with an embodiment.
- Figure 5 is a flow diagram of one embodiment of a method for converting a content file from a first format to a second format.
- Figure 6 is a flow diagram of one embodiment of another method for converting a content file from a first format to a second format.
- the specification also relates to an apparatus for performing the operations herein.
- This apparatus may be specially constructed for the required purposes, or it may comprise a general-purpose computer selectively activated or reconfigured by a computer program stored in the computer.
- a computer program may be stored in a computer readable storage medium, such as, but is not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, flash memories including USB keys with non-volatile memory or any type of media suitable for storing electronic instructions, each coupled to a computer system bus.
- Some embodiments can take the form of an entirely hardware embodiment, an entirely software embodiment or an embodiment containing both hardware and software elements.
- a preferred embodiment is implemented in software, which includes but is not limited to firmware, resident software, microcode, etc.
- some embodiments can take the form of a computer program product accessible from a computer-usable or computer-readable storage medium providing program code for use by or in connection with a computer or any instruction execution system.
- a computer-usable or computer readable medium can be any apparatus that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device.
- a data processing system suitable for storing and/or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus.
- the memory elements can include local memory employed during actual execution of the program code, bulk storage, and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.
- I/O devices including but not limited to keyboards, displays, pointing devices, etc.
- I/O controllers can be coupled to the system either directly or through intervening I/O controllers.
- Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks.
- Modems, cable modem and Ethernet cards are just a few of the currently available types of network adapters.
- embodiments described herein include collection of data describing a user and/or activities of users.
- data is only collected upon the user providing consent to the collection of this data.
- a user is prompted to explicitly allow data collection.
- the user may opt-in or opt-out of participating in such data collection activities.
- the collected data is anonymized prior to performing any analysis to obtain any statistical patterns so that the identity of the user cannot be determined from the collected data.
- FIG. 1 illustrates a block diagram of a system 1 30 for converting content file format.
- the illustrated embodiment of the system 1 30 includes client devices 1 15a, 1 15n (also referred to collectively or individually as client devices 1 1 5) that are accessed by users 125a, 125n (also referred to collectively or individually as users 125), a content provider 1 18 and an asset hosting site 100.
- these entities are communicatively coupled via a network 105.
- the asset hosting site 100, the content provider 1 18 and the client devices 1 1 5 are communicatively coupled to one another via a network 105 to facilitate sharing of information (e.g., video content file) between users 125 of client devices 1 15.
- FIG. 1 Although one content provider 1 18, two client devices 1 1 5, and one asset hosting site 100 are illustrated in Figure 1 , persons having ordinary skill in the art will recognize that any number of content providers 1 1 8, client devices 1 1 5 and asset hosting sites 100 can be communicatively coupled to the network 105. Furthermore, while one network 105 is coupled to the client devices 1 15, the content provider 1 1 8 and the asset hosting site 100, persons having ordinary skill in the art will appreciate that any number of networks 105 can be connected to the client devices 1 1 5, the content provider 1 18 and the asset hosting site 100.
- the network 105 is a conventional type, wired or wireless, and may have any number of configurations such as a star configuration, token ring configuration or other configurations known to those skilled in the art. Furthermore, the network 105 may comprise a local area network (LAN), a wide area network (WAN) (e.g., the Internet), and/or any other interconnected data path across which multiple devices may communicate. In yet another embodiment, the network 105 may be a peer-to-peer network. The network 105 may also be coupled to or include portions of a telecommunications network for sending data in a variety of different communication protocols. For example, the network 105 is a 3G network or a 4G network.
- the network 105 includes Bluetooth communication networks or a cellular communications network for sending and receiving data such as via short messaging service (SMS), multimedia messaging service (MMS), hypertext transfer protocol (HTTP), direct data connection, WAP, e-mail, etc.
- SMS short messaging service
- MMS multimedia messaging service
- HTTP hypertext transfer protocol
- WAP direct data connection
- e-mail etc.
- all or some of the links in the network 105 are encrypted using conventional encryption technologies such as secure sockets layer (SSL), secure HTTP and/or virtual private networks (VPNs).
- SSL secure sockets layer
- VPNs virtual private networks
- the content provider 1 1 8 is communicatively coupled to the network 105 via signal line 1 8 1 .
- the client device 1 1 5a is coupled to the network 105 via signal line 1 83.
- the user 125a interacts with the client device 1 1 5a as represented by signal line 1 97.
- Cl ient device 1 1 5n and user 125n are coupled and interact in a similar manner.
- the asset hosting site 100 is communicatively coupled to the network 105 via signal line 1 13.
- the asset hosting site 100 is any system that allows users to access video content via searching and/or browsing interfaces.
- An example of an asset hosting site 100 is the YOUTUBETM website, found at www.youtube.com.
- Other video hosting sites are known as well, and are adapted to operate according to the teachings disclosed herein.
- the term "website” represents any computer system adapted to serve content using any internet working protocols, and is not intended to be limited to content uploaded or downloaded via the Internet or the HTTP protocol.
- sources of the video content on the asset hosting site 100 are from uploads of videos by users, searches or crawls of other websites or databases of videos, or the like, or any combination thereof.
- the asset hosting site 100 is configured to allow uploading of video content by users 125 and/or the content provider 1 18.
- the asset hosting site 100 is configured to obtain videos from other sources by crawling such sources or searching such sources in real time.
- the video content files received and shared by the asset hosting site 100 will be referred to as videos, video files, or video items.
- the asset hosting site 100 can receive and share content of any media type and file type.
- the asset hosting site 100 shares a content file such as a video, an audio, a combination of video and audio, an image such as a JPEG or GIF file and/or a text file, etc.
- the asset hosting site 100 is communicatively coupled to the network 105 via signal line 1 13.
- the asset hosting site 100 includes: a front end interface 102; a video serving module 104; a video search module 106; an upload server 108; a thumbnail generator 1 1 2; a GUI module 1 26; a user database 1 14; a video database 1 16; and a graphical data storage 194.
- the components of the asset hosting site 100 are communicatively coupled to one another.
- Other conventional features, such as firewalls, load balancers, authentication servers, application servers, failover servers, site management tools, and so forth are not shown so as not to obscure the feature of the system.
- the illustrated components of the asset hosting site 100 are implemented as single pieces of software or hardware or as multiple pieces of software or hardware.
- functions described in one embodiment as being performed by one component can also be performed by other components in other embodiments, or by a combination of components.
- functions described in one embodiment as being performed by components of the asset hosting site 100 are performed by one or more client devices 1 15 and/or content providers 1 1 8 in other embodiments, if appropriate.
- the functionality attributed to a particular component is performed by different or multiple components operating together.
- Each of the various servers and modules on the asset hosting site 100 is implemented as a server program executing on a server-class computer comprising one or more central processing units ("CPU,” or “CPUs” if plural), memory, network interface, peripheral interfaces, and other well-known components.
- CPU central processing units
- the computers themselves run an open-source operating system such as LINUX, have one or more CPUs, 1 gigabyte or more of memory, and 100 gigabytes or more of disk storage.
- other types of computers are used, and it is expected that as more powerful computers are developed in the future, they are configured in accordance with the teachings disclosed herein.
- the functionality implemented by any of the elements is provided from computer program products that are stored in one or more tangible, non-transitory computer-readable storage mediums (e.g., random access memory (“RAM”), flash, solid-state drive (“SSD”), hard disk drive, optical/magnetic media, etc.).
- RAM random access memory
- SSD solid-state drive
- hard disk drive optical/magnetic media, etc.
- the front end interface 102 is an interface that handles communication with the content provider 1 1 8 and client devices 1 1 5 via the network 105. For example, the front end interface 102 receives video files uploaded from the content provider 1 1 8 and/or users 125 of the client devices 1 1 5 and delivers the video files to the upload server 108. In one embodiment, the front end interface 102 receives requests from users 125 of the client devices 1 1 and delivers the requests to the other components of the asset hosting site 100 (e.g., the video search module 106, the video serving module 104, etc.). For example, the front end interface 102 receives a video search query from a user 125 and sends the video search query to the video search module 106.
- the front end interface 102 receives a video search query from a user 125 and sends the video search query to the video search module 106.
- the front end interface 102 receives a request for data in a content file such as a video file with a MPEG-4 ("MP4") file format from the client device 1 15.
- the front end interface 102 delivers the request to the video serving module 104.
- the data that is requested includes one or more file headers.
- the file header comprises supplemental data that is stored in the front of the video file such as the first one-half megabyte of the MP4 video file.
- the supplemental data included in the file header describes the locations of one or more samples in the MP4 video file.
- the front end interface 1 02 receives a request for one or more samples in a content file from the client device 1 1 5.
- the content file is a MP4 video file and the sample in the MP4 video file includes one or more of an audio sample and a video sample.
- an audio sample corresponds to an audio frame in the MP4 video file and a video sample corresponds to a video frame in the MP4 video file.
- the sample in a content file will be described in further detail below with reference to Figure 2.
- the front end interface 102 receives a request for a content file such as a video file from the client device 1 1 5.
- the front end interface 102 receives the retrieved data and/or the one or more samples in the video files from the video serving module 104.
- the front end interface 102 delivers the retrieved data and/or the one or more samples in the video files to the client devices 1 1 5 through the network 105.
- the front end interface 102 receives data that includes a file header of a MP4 video file and sends the data to the client device 1 15.
- the upload server 108 receives video files from the content provider 1 18 and/or users 125 operating on client devices 1 1 5 via the front end interface 102.
- the video files have a MP4 file format.
- the upload server 108 processes the video files and stores the video files in the video database 1 1 6.
- the upload server 108 assigns a video identifier (video ID) to a video and stores the video and the video ID in the video database 1 1 6.
- Further examples of processing a video file by the upload server 108 include performing one or more of: formatting; compressing; metadata tagging; and content analysis, etc.
- the video database 1 ! 6 is a storage system that stores video files shared by the asset hosting site 1 00 with the users 125.
- the video database 1 16 stores the video files received and/or processed by the upload server 108.
- the video database 1 16 stores the video files with a MP4 file format.
- the video database 1 16 stores metadata of the video files.
- the video database 1 16 stores one or more of: a video title;. a video ID; description; one or more keywords; tag information; and administrative rights of a video file.
- the administrative rights of a video file include one or more of: the right to delete the video file; the right to edit information about the video file; and the right to associate the video fi le with an advertisement, etc.
- the video search module 106 includes code and routines that, when executed by a processor (not pictured), processes any search queries received by the front end interface 102 from a user 125 using a client device 1 15.
- a search query from a user 125 includes search criteria such as keywords that, for example, identify videos the user 125 is interested in viewing.
- the video search module 106 uses the search criteria to query the metadata of video files stored in the video database 1 1 6.
- the video search module 106 returns the search results to the client device 1 1 5 via the front end interface 102.
- the video search module 106 identifies videos stored in the video database 1 16 matching the keyword and returns search results (e.g., video IDs, titles, descriptions, thumbnails of the identified videos) to the user 125 via the front end interface 1 02.
- search results e.g., video IDs, titles, descriptions, thumbnails of the identified videos
- the video serving module 1 04 includes code and routines that, when executed by a processor (not pictured), processes requests for videos and serves videos to client devices 1 15. For example, the video serving module 104 receives a request for viewing a video from a user 1 25 of the client device 1 1 , retrieves the video from the video database 1 16 based at least in part on the request and transmits the video to the client device 1 15 via the front end interface 102.
- the video serving module 104 receives a request from a client device 1 15 to access a video when the user 125 clicks on a link to the video.
- the request received from the client device 1 15 includes the video ID of the video.
- the video ID is included automatically in the request once the user 125 clicks on the link for the video.
- the video serving module 104 uses the video ID to search and locate the video in the video database 1 1 6. Once the requested video is located, the video serving module 104 sends the video to the client device 1 1 5 via the front end interface 1 02.
- the video is presented to the user 125 on the client device
- Metadata associated with the video such as the title and description of the video is also presented to the user 125.
- the video serving module 104 stores the video ID of the video in the user database 1 14 after sending the video to the client device 1 15 so that a video viewing history of the user 125 is stored in the user database 1 14.
- the video serving module 104 receives a request for data in a video file from the client device 1 1 5.
- the request includes metadata of the video such as one or more of a video ID, a video title and one or more keywords of the video.
- the video serving module 104 searches and locates the video file based at least in part on the metadata included in the request.
- the request also includes information describing a location and/or a length of the data in the video file.
- the video serving module 104 retrieves the data from the video file based at least in part on the information that describes the location and/or length of the data in the video file. Then the video serving module 104 transmits the data to the client device 1 1 5 via the front end interface 102.
- the video serving module 104 receives a request for one or more samples in a video file from the client device 1 1 5.
- the request includes metadata of the video.
- the video serving module 104 locates the video file based at least in part on the metadata in the request.
- the request also indicates locations and/or lengths of the one or more samples in the video file.
- the video serving module 104 retrieves the one or more samples from the video file based at least in part on the request.
- the video serving module 104 then sends the one or more samples in the video file to the client device 1 1 5.
- the user database 1 14 is a storage system that stores data and/or information associated with any user.
- the user database 1 14 stores video IDs of video files uploaded by a user 1 25 so that a video uploading history of the user 125 is maintained in the user database 1 14.
- the user database 1 14 also stores video IDs of video files that the user 125 has accessed from the video database 1 1 6 for viewing so that a video viewing history for the user 125 is stored in the user database 1 14.
- the user 125 is identified by using a unique user name and password and/or by using the user's 1 25n internet protocol address.
- the thumbnail generator 1 12 includes code and routines that, when executed by a processor (not pictured), generates a thumbnail for a video.
- a thumbnail is an image that represents a video on the asset hosting site 100.
- the thumbnail generator 1 12 analyzes the video and selects a frame from the video as the thumbnail.
- the thumbnail generator 1 12 provides one or more images for the video and allows a publisher (e.g., a content provider 1 1 8 or a user 1 25 uploading the video using a client device 1 15) to select one image as the thumbnail.
- the graphical data storage 194 is a storage system that stores graphical code for generating graphical user interfaces ("GUIs") for display to the user 125 of the client device 1 15.
- GUIs graphical user interfaces
- the GUI module 1 26 includes code and routines that, when executed by a processor (not pictured), generates a user interface that displays information to a user and/or allows a user to input information via the user interface.
- the GUI module 126 provides the functionality described below for receiving inputs from users 125 and/or displaying information to users 1 25.
- the GUI module 126 is communicatively coupled to the front end interface 102.
- the GUI module 126 retrieves graphical data from the graphical data storage 194 and transmits the graphical data to the front end interface 102.
- the front end interface 102 communicates with the network 105 to transmit the graphical data to a processor- based computing device communicatively coupled to the network 105.
- the front end interface 102 transmits the graphical data to one or more of the content provider 1 18 and client device 1 1 5.
- One or more of the content provider 1 18 and the client device 1 1 5 receives the graphical data and generates a GUI displayed on a display device (e.g., a monitor) communicatively coupled to the content provider 1 18 and/or the client device 1 15.
- the G UI is displayed on a display device and viewed by a human user (e.g., a user such as a user 1 25).
- the GU I includes one or more fields, drop down boxes or other conventional graphics used by the human user to provide inputs that are then transmitted to the asset hosting site 100 via the network 105.
- Data inputted into the GUI is received by the front end interface 102 and stored in one or more of the video database 1 1 6 and user database 1 14.
- the client device 1 1 5 is any computing device.
- the client device 1 1 5 is any computing device.
- the client device 1 1 5 is any computing device.
- the system 130 comprises a combination of different types of client devices 1 15.
- a plurality of other client devices 1 1 5 is any combination of a personal computer, a smart phone and a tablet computer.
- the client device 1 1 5 comprises a browser 198.
- the browser
- the browser 198 includes code and routines stored in a memory (not pictured) of the client device 1 1 5 and executed by a processor (not pictured) of the client device 1 1 5.
- the browser 198 generates a browser application such as Google Chrome.
- the browser 198 comprises a flash player 1 88 and the flash player 1 88 comprises a format module 150.
- format module 1 50 is illustrated as part of the flash player 188, persons having ordinary skill in the art will recognize that the format module 1 50 could reside on either the browser 198 or the asset hosting site 100.
- the browser 1 98, the flash player 188 and the format module 150 are shown in reference to the client device 1 1 5a, persons having ordinary skill in the art will recognize that any client device 1 1 5 may comprise these elements.
- one browser 1 98, one flash player 188 and one format module 1 50 are illustrated in reference to the client device 1 1 5, persons having ordinary skill in the art will recognize that any number of browsers 1 98, flash players 188 and format modules 150 can be comprised in the client device 1 15.
- the Hash player 1 88 includes code and routines that, when executed by a processor (not pictured) of the client device 1 15, generates a flash player interface embedded in a browser application such as Google Chrome playing a content file such as a video. For example, responsive to a user 1 25 requesting to view a video in a flash player interface, the flash player 1 88 generates the flash player interface that plays the video with a FLV file format.
- the format module 1 50 includes code and routines that, when executed by a processor (not pictured) in the client device 1 1 5, converts a content file such as a video file from a first format to a second format.
- the format module 150 converts a video file from a MP4 file format to a FLV file format.
- the format module 1 50 generates a request for data in a content file such as a video file with a first format when the user 125 clicks to view the video file in a second format if the video file with the second format is not available. For example, when a user 125 requests to view a video file in a flash player interface which requires a FLV file format, the format module 150 generates a request for data in the video file with an MP4 format that is stored in the asset hosting site 100 i f there is no such video file with the FLV format available in the asset hosting site 100.
- the request includes one or more of a video ID, a video title and one or more keywords of the video file.
- the request also includes information that describes the location and/or the length of the data in the video file.
- the format module 1 50 transmits the request to the video serving module 104 in the asset hosting site 100 via the front end interface 102.
- the format module 150 receives the data in the video file from the video serving module 104 and processes the data. For example, the format module 150 parses the data and converts the video file from the MP4 file format to the FLV file format. The format module 150 then sends the FLV file to other components of the flash player 188 to present the video on the client device 1 1 5 for the user 125.
- Figure 2 depicted is an embodiment of a client device 1 15 showing the format module 150 in more detail. Specifically, Figure 2 depicts a processor 235, a memory 237, a storage device 280 and the flash player 1 88 including the format module 150.
- the processor 235 is a computer processor of the client device 1 15, and can be used to execute code and routines.
- the processor 235 comprises an arithmetic logic unit, a microprocessor, a general purpose controller or some other processor array to perform computations and execute code and routines.
- the processor 235 is coupled to the bus 220 for communication with the other components of the client device 1 1 5.
- Processor 235 processes data signals and may comprise various computing architectures including a complex instruction set computer (CISC) architecture, a reduced instruction set computer (RISC) architecture, or an architecture implementing a combination of instruction sets.
- CISC complex instruction set computer
- RISC reduced instruction set computer
- the processor 235 is communicatively coupled to the bus 220 via signal line 236.
- the memory 237 is a non-transitory storage medium.
- the memory 237 stores instructions and/or data that may be executed by the processor 235.
- the memory 237 stores the format module 1 50.
- the memory 237 is
- the instructions and/or data stored on the memory 237 comprises code for performing any and/or all of the techniques described herein.
- the memory 237 is a dynamic random access memory (DRAM) device, a static random access memory (SRAM) device, flash memory or some other memory device known in the art.
- the memory 237 also includes a non-volatile memory or similar permanent storage device and media such as a hard disk drive, a floppy disk drive, a CD-ROM device, a
- the memory 237 is communicatively coupled to the bus 220 via signal line 238.
- the memory 237 stores the format module 150 and the sub-modules 202, 204, 206, 208, 2 10 and 212 that are included in the format module 1 50.
- the storage device 280 is a non-transitory memory that stores data generated and/or received by the format module 1 50 or its sub-modules and other data necessary to perform the functionality described below.
- the storage device 280 will be described in further detail below with reference to Figure 3.
- the format module 150 comprises a communication interface
- a fetching module 204 a parser 206, a table generator 208, a determining module 210 and a packaging module 2 1 2.
- the communication interface 202 includes code and routines for handling communications between the fetching module 204, the parser 206, the table generator 208, the determining module 2 10, the packaging module 2 1 2, other components (not pictured) of the client device 1 1 5 and the components of the asset hosting site 100.
- the communication interface 202 is a set of instructions executable by the processor 235.
- the communication interface 202 is stored in the memory 237 and is accessible and executable by the processor 235.
- the communication interface 202 is adapted for cooperation and communication with the processor 235 and other components of the client device 1 15 via signal line 222.
- the communication interface 202 is communicatively coupled to the bus 220 via signal line 222.
- the communication interface 202 receives a message from other components (not pictured) of the client device 1 1 5 when a user 125 requests to view a video file in a flash player interface embedded in a browser such as Google Chrome.
- the communication interface 202 delivers the message that indicates the requesting of the user 125 to the fetching module 204.
- the communication interface 202 receives a request for data in a content file such as a video fi le from the fetching module 204 and transmits the request to the video serving module 1 04 included in the asset hosting site 100 via the front end interface 102.
- the communication interface 202 receives a request for one or more samples in a content file from the determining module 210.
- the communication interface 202 sends the request to the video serving module 104 in the asset hosting site 100 via the front end interface 102.
- the communication interface 202 receives data in the content file from the video serving module 1 04 via the front end interface 102.
- the data includes one or more file headers for the content file such as a video file.
- the communication interface 202 sends the received data to the parser 206 for parsing the data.
- the communication interface 202 receives one or more samples in the content file from the video serving module 104 via the front end interface 102.
- the communication interface 202 delivers the received one or more samples to the determining module 210 to parse the one or more samples.
- the communication interface 202 also communicates with the packaging module 212 and other components (not pictured) of the client device 1 15 to pass the output of the packaging module 2 12 (a content file with a converted file format such as a FLV file) to the other components (not pictured) of the client device 1 15 such as some related components of the flash player 188. This way, the content file can be played in the flash player interface.
- the communication interface 202 also handles the communications between other sub-modules 204, 206, 208, 210 and 212 in the format module 150.
- the communication interface 202 communicates with the table generator 208 and the determining module 210 to pass the output of the table generator 208 (one or more content tables) to the determining module 2 10.
- this description may occasionally omit mention of the communication interface 202 for purposes of clarity and convenience.
- the above scenario may be described as the table generator 208 passing one or more content tables to the determining module 210.
- the fetching module 204 includes code and routines for fetching data in the content file from the asset hosting site 100.
- the fetching module 204 is a set of instructions executable by the processor 235 to provide the functionality described below for fetching data in the content file from the asset hosting site 100.
- the fetching module 204 is stored in the memory 237 and is accessible and executable by the processor 235.
- the fetching module 204 is adapted for cooperation and communication with the processor 235 and other components of the client device 1 15 via signal line 224.
- the fetching module 204 is communicatively coupled to the bus 220 via signal line 224.
- the fetching module 204 generates a request for data in a content file with a first format responsive to receiving a message that indicates a user 125 requesting to view the content file in a second format. For example, the fetching module 204 receives a message from the communication interface 202 indicating that a user 125 requests to view a video in a flash player interface when the user 125 clicks on a link to the FLV format video in a playlist included in the flash player interface. Based at least in part on the received message, the fetching module 204 generates a request for data in a video file with an MP4 format that is stored in the asset hosting site 100 if there is no such a video file with a FLV format available in the asset hosting site 100. For example, the fetching module 204 retrieves metadata of the video file (such as a video ID, a video title and a keyword) from the received message and generates the request including the metadata.
- metadata of the video file such as a video ID, a video title and a keyword
- the fetching module 204 generates the request for data in a content file with a first format periodically such as in a pre-determined time interval (e.g., a day, a week, a month). In yet another embodiment, the fetching module 204 generates the request for data in a content file with a first format such as a MP4 video file once the MP4 video file is uploaded by a user 125 of a client device 1 1 5 or by a content provider 1 18.
- a pre-determined time interval e.g., a day, a week, a month.
- the request includes one or more of a video ID, a video title and a keyword of the video.
- the request also includes information describing one or more of a location and a length of the data.
- the request includes one or more of a start byte, an end byte, a start time and an end time to indicate the location of the requested data.
- the request includes one or more of a length in byte (such as two megabytes) and a time length (such as three seconds) of the requested data.
- the fetching module 204 transmits the request for data in the content file with a first format to the communication interface 202 and the communication interface 202 delivers the request to the video serving module 104 in the asset hosting site 100 via the network 105.
- the parser 206 includes code and routines for parsing data in content files for one or more file headers.
- the parser 206 is a set of instructions executable by the processor 235 to provide the functionality described below for parsing data in content files for one or more file headers.
- the parser 206 is stored in the memory 237 and is accessible and executable by the processor 235. In either embodiment, the parser 206 is adapted for cooperation and communication with the processor 235 and other components of the client device 1 1 5 via signal line 226.
- the parser 206 is communicatively coupled to the bus 220 via signal line 226.
- the parser 206 receives the data in the content file with the first format from the asset hosting site 100 through the communication interface 202.
- the parser 206 parses the data at byte level for one or more file headers.
- the content file is a MP4 video file.
- the parser 206 parses the data at byte level for a file header for the MP4 video file.
- the file header includes supplemental data (such as a number of bytes) that describes locations of one or more samples (such as video samples, audio samples) in the MP4 video file.
- the file header includes one megabyte indicating one or more of byte offsets and time offsets of the one or more samples in the MP4 video file.
- the file header also includes a number of bytes indicating one or more of types of the samples, lengths of the samples, motion features of the samples if the samples are video samples and any other features about the samples.
- the parser 206 sends the parsed data to the table generator
- the parser 206 sends the one or more file headers that include supplemental data to the table generator 208 to generate one or more content tables based on the one or more file headers.
- the parser 206 sends the one or more file headers to the storage device 280 for storage.
- the parser 206 receives one or more samples of a content file and parses the samples based on one or more content tables that contain descriptions of the samples.
- the content tables and the samples will be described in further detail below with reference to the table generator 208 and the determining module 2 10.
- the table generator 208 includes code and routines for generating one or more content tables based at least in part on the one or more file headers.
- the table generator 208 is a set of instructions executable by the processor 235 to provide the functionality described below for generating one or more content tables based at least in part on the one or more file headers.
- the table generator 208 is stored in the memory 237 and is accessible and executable by the processor 235. In either embodiment, the table generator 208 is adapted for cooperation and communication with the processor 235 and other components of the client device 1 15 via signal line 228.
- the table generator 208 is communicatively coupled to the bus 220 via signal line 228.
- the table generator 208 receives the parsed data including one or more file headers from the parser 206. In another embodiment, the table generator 208 retrieves one or more file headers from the storage device 280. In either embodiment, the table generator 208 generates one or more content tables based at least in part on the one or more file headers.
- the table generator 208 generates a content table that contains one or more entries. Each entry in the content table corresponds to one sample in the content file.
- the table generator 208 uses the supplemental data included in the file headers to populate the one or more entries in the content table.
- an entry in the content table includes one or more of a type of the sample (such as video and audio ), a byte offset (e.g., the start byte of the sample in the content file), a length in byte, a time offset (e.g., the start time of the video or the audio frame that the sample corresponds to) and a motion feature (e.g., the feature of the video frame that the sample corresponds to such as key frame and intermediate frame).
- a type of the sample such as video and audio
- a byte offset e.g., the start byte of the sample in the content file
- a length in byte e.g., the start time of the video or the audio frame that the sample corresponds to
- a motion feature
- the table generator 208 assigns a sample identifier ("sample
- the table generator 208 assigns a sample in a video file a sample ID that indicates the index of the sample in the video file.
- the table generator 208 populates the entry in the content table that corresponds to the sample in the video file with the sample ID.
- the table generator 208 generates a table identifier ("table ID") to a content table.
- the table generator 208 prepends the table ID to the index to form the sample ID for the sample.
- the table generator 208 generates a content table for a video file and assigns a table ID for the content table.
- the table generator 208 generates a sample ID for a sample in the video file using the table ID and an index of the sample.
- the table generator 208 generates more than one content table for one content file.
- the table generator 208 assigns table IDs for the content tables and generates sample IDs for samples accordingly.
- the table generator 208 also generates one or more tables of a content table.
- the table of content indicates the relationship between one or more content tables and one or more content files.
- a content table ID is listed to correspond to a content ID such as a video ID that refers to a content file such as a video file.
- the table generator 208 transmits the one or more content tables and/or the one or more tables of content to the determining module 210. In another embodiment, the table generator 208 sends the one or more content tables and/or the one or more tables of content to the storage device 280 for storage. In yet another embodiment, the table generator 208 also transmits the one or more content tables and/or the one or more tables of content to the packaging module 212.
- the determining module 21 0 includes code and routines for determining one or more samples in the content file based at least in part on the one or more content tables.
- the determining module 2 10 is a set of instructions executable by the processor 235 to provide the functionality described below for determining one or more samples in the content file.
- the determining module 2 1 0 is stored in the memory 237 and is accessible and executable by the processor 235.
- the determining module 2 10 is adapted for cooperation and communication with the processor 235 and other components of the client device 1 1 5 via signal line 230.
- the determining module 210 is communicatively coupled to the bus 220 via signal line 230.
- the determining module 2 10 receives the one or more content tables from the table generator 208. In another embodiment, the determining module 210 retrieves the one or more content tables from the storage device 280. In either embodiment, the determining module 210 determines one or more samples in the content file based at least in part on the one or more content tables.
- a sample in a video content file corresponds to a frame of the video such as a video frame and an audio frame.
- the sample corresponding to a video frame or an audio frame is called a video sample or an audio sample, respectively.
- the sample in a content file such as an MP4 video file includes a number of bytes.
- a video sample in an MP4 video file includes 1 ,500-3,000 bytes and an audio sample in an P4 video file includes 150-300 bytes.
- a key frame sample indicates that the video frame that the sample represents is a key frame.
- a key frame defines either a starting point or an ending point of a transition of a motion in a video.
- the determining module 2 1 0 analyzes the one or more entries in the one or more content tables and determines the locations of the one or more samples in the content file. For example, the determining module 2 1 0 retrieves the byte offset (such as 200,000 bytes) and length (such as 1 ,800 bytes) for a sample with a sample ID " 1 " from an entry in the content table. The determining module 210 then analyzes the retrieved information and determines that the sample " 1 " starts at the No. 200,000 byte in the content file and ends 1 ,800 bytes after the No. 200,000 byte (e.g., No. 201 ,800 byte).
- the determining module 2 1 0 analyzes the one or more entries in the one or more content tables and determines the locations of the one or more samples in the content file. For example, the determining module 2 1 0 retrieves the byte offset (such as 200,000 bytes) and length (such as 1 ,800 bytes) for a sample with a sample ID " 1 " from an entry
- the determining module 2 10 also retrieves one or more samples from the content file based on the detemiination. For example, the determining module 210 generates a request for one or more samples in the content file such as a video file with a MP4 format and transmits the request to the asset hosting site 100 via the communication interface 202. In one embodiment, the request for one or more samples includes the information that describes the locations of the one or more samples in the content file.
- the determining module 2 10 retrieves the one or more samples in the order indicated by the sample IDs in the content table. In another embodiment, the determining module 2 10 retrieves a pre-determined number of bytes from the content file. The pre-determined number of bytes includes one or more samples.
- the determining module 2 10 includes a parser (not pictured) that parses the retrieved one or more samples at byte level based at least in part on the one or more content tables.
- the determining module 210 transmits the retrieved one or more samples to the parser 206.
- the parser 206 parses the one or more samples at byte level based at least in part on the one or more content tables. For example, in either embodiment, the one or more samples are parsed according to the byte offset, the length in byte and other features in the one or more content tables.
- the packaging module 2 12 includes code and routines for generating one or more tags based at least in part on the one or more samples from a content file and converting the content file format based at least in part on the tags.
- the packaging module 2 12 is a set of instructions executable by the processor 235 to provide the functionality described below for generating one or more tags based at least in part on the one or more samples from a content file and converting the content file format based at least in part on the tags.
- the packaging module 212 is stored in the memory 237 and is accessible and executable by the processor 235. In either embodiment, the packaging module 212 is adapted for cooperation and communication with the processor 235 and other components of the client device 1 1 5 via signal line 232.
- the packaging module 2 1 0 is communicatively coupled to the bus 220 via signal line 232.
- the packaging module 2 12 receives the one or more parsed samples from the determining module 210.
- the packaging module 212 receives the one or more parsed samples from the parser 206.
- the packaging module 212 generates one or more tags based at least in part on the one or more parsed samples.
- a tag includes one or more tag headers and one or more samples.
- a tag header includes data that describes one or more samples.
- a tag includes a tag header and a sample.
- the tag header includes one or more of a tag type, a tag length, a time offset and a motion feature.
- the tag type corresponds to the type of the sample.
- the type of the sample includes audio and video.
- the tag length corresponds to the length of the sample and the time offset is the time offset of the sample.
- the motion feature indicates whether the frame that the sample corresponds to is a key frame or an intermediate frame. .
- a tag header for a video sample includes 1 6 bytes.
- a tag header for an audio sample includes 13 bytes that describes the features of the audio sample.
- the packaging module 2 1 2 generates one or more tag headers based at least in part on the one or more content tables.
- the packaging module 212 retrieves the one or more content tables from the storage device 280.
- the packaging module 212 receives the one or more content tables from the table generator 208.
- the packaging module 212 uses one or more entries in the content tables to generate a tag header with 1 6 bytes describing the features for a video sample.
- the tag header includes a tag type (e.g., type of the sample such as video), a tag length (e.g., the length of the sample), the time offset and the motion feature.
- the packaging module 212 prepends the one or more tag headers to the one or more samples to form a tag.
- the packaging module 212 prepends a tag header for a video sample to the video sample to form a video tag (e.g., a tag with a video type).
- the packaging module 2 12 transmits the one or more tags in sequence to other components of the flash player 1 88 to play the video file in the flash player interface included in a browser application such as Google Chrome.
- the packaging module 212 sends the one or more tags to the storage device 280 for storage.
- the packaging module 212 generates a script tag and inserts the script tag into a sequence of video and audio tags.
- the script tag allows the flash player 1 88 to add a cal lback function that will be executed when the script tag is decoded.
- Figure 3 is a block diagram 300 il lustrating one embodiment of the storage device
- the storage device 280 includes file header data 302, content tables 304 and tags 306. Persons of ordinary skill in the art will recognize that the storage device 280 may store additional data not depicted in Figure 3, such as samples in video files.
- the file header data 302 is data in a content file such as a video file that is fetched from the asset hosting site 100 by the fetching module 204 and parsed by the parser 206.
- the file header data 302 includes one or more file headers for one or more content files such as MP4 video files that are stored in the asset hosting site 100.
- a file header includes supplemental data that describes one or more features for one or more samples in a content file such as an P4 video file.
- the features includes one or more of locations of the one or more samples (e.g., byte offsets of the one or more samples), types of the one or more samples (e.g., video, audio), lengths of the one or more samples, motion features of the one or more samples if the one or more samples are video samples and any other features about the one or more samples.
- locations of the one or more samples e.g., byte offsets of the one or more samples
- types of the one or more samples e.g., video, audio
- lengths of the one or more samples e.g., motion features of the one or more samples if the one or more samples are video samples and any other features about the one or more samples.
- the content tables 304 include one or more content tables generated by the table generator 208.
- the table generator 208 generates one or more content tables based at least in part on the one or more file headers that are received from the parser 206.
- the table generator 208 analyzes the one or more file headers and determines one or more features for one or more samples in the content fi le such as an MP4 video file based on the analyzing.
- the table generator 208 generates one or more content tables based at least in part on the determined one or more features for samples in the content file such as the MP4 video file.
- one entry in the content table includes one or more of a sample ID, a type of the sample, a byte offset, a length, a time offset and a motion feature of the sample.
- a sample ID a sample ID
- a type of the sample a type of the sample
- a byte offset a length
- a time offset a motion feature of the sample.
- the content tables 304 also include one or more tables of a content table.
- the content tables 304 include a table of content that stores one or more corresponding relationships between one or more content tables and one or more content files such as MP4 video files.
- the tags 306 include tags generated by the packaging module 212.
- the packaging module 21 2 generates a tag header based at least in part on the one or more content tables.
- the packaging module 2 ! 2 prepends the tag header to a corresponding sample to form a tag. Therefore, a tag includes a tag header and a sample.
- the tag header includes one or more of a tag type, a tag length, a time offset and a motion feature.
- the format module 150 uses data retrieved from the asset hosting site 100, the format module 150 generates one or more content tables describing the locations and/or other features of the one or more samples in the content file.
- Figure 4 illustrates one embodiment of a content table 400 generated by the table generator 208 of the format module 150.
- the content table 400 includes a table ID 401 .
- the table I D identifies the content table 400.
- the table ID is included in a table of content to indicate that the content table 400 corresponds to a content file such as a video file.
- the content table 400 also includes a sample I D 402 and sample features 404,
- the content table 400 includes a type 404 identifying the type of the frame that a sample corresponds to.
- the content table 400 includes a byte offset 406 that indicates the start byte of the sample in the content file.
- the content table 400 also includes a length 408 identifying a length in byte of a sample.
- the content table 400 includes a time offset 4 10 indicating the start time of the frame that the sample corresponds to.
- the content table 400 also includes a motion feature 4 1 2. I f the type 404 for a sample is video, which means the sample corresponds to a video frame, the motion feature 412 for the sample is either "key" or "intermediate” indicating the video frame is either a key frame or an intermediate frame respectively.
- Figures 5-6 depict various methods 500 and 600 performed by the system described above with reference to Figures 1 -4.
- Figure 5 is a flow diagram depicting one embodiment of a method 500 for converting a content file from a first format to a second format.
- the format module 150 retrieves 502 a content file with a first format.
- the content file is a video file with an MP4 video file format.
- the format module 150 retrieves data in the MP4 video file that includes one or more file headers from the asset hosting site 100.
- the format module 1 50 unpackages (or demuxes) the content file with the first format.
- the format module 150 parses the retrieved data in the content file such as an MP4 video file at byte level for one or more file headers.
- the format module 150 generates one or more content tables based at least in part on the one or more file headers.
- the format module 1 50 then retrieves and parses one or more samples in the content file each including one or more bytes based at least in part on the one or more content tables. In this way, the format module 1 50 unpackages (or demuxes) the content file such as an MP4 video file into one or more samples.
- the format module 1 50 converts the content file from the first format to the second format.
- the format module 1 50 converts the content file from the MP4 video file format to an FLV file format by packaging (or muxing) the one or more samples.
- the format module 150 generates one or more tags based at least in part on the one or more samples by prepending a tag header to each sample. By arranging the one or more tags in sequence based on the locations of the one or more samples in the MP4 video file, the format module 1 50 converts the MP4 video file to an FLV file.
- FIG. 6 is a flow diagram depicting one embodiment of another method 600 for converting a content file from a first format to a second format.
- the fetching module 204 fetches 602 data from a content file with a first format.
- the fetching module 204 generates a request for data in a content file with the first format responsive to a user 125 requesting to view the content file in the second format i f the content file with the second format is not available.
- the fetching module 204 sends the request to the asset hosting site 100 through the communication interface 202 to fetch the data from the content file with the first format stored in the asset hosting site 1 00.
- the parser 206 parses the data that is fetched from the content file with the first format. For example, the parser 206 receives the data in the content file with the first format such as an MP4 video file from the asset hosting site 100 via the communication interface 202. The parser 206 parses the data at byte level for one or more file headers.
- an MP4 video file header includes supplemental data describing the locations of one or more samples in the MP4 video file.
- the MP4 video file header also includes supplemental data indicating one or more of types of the one or more samples, lengths of the one or more samples, motion features of the one or more samples if the one or more samples are video samples and any other features about the one or more samples.
- the table generator 208 generates one or more content tables.
- the table generator 208 generates a content table based at least in part on the one or more file headers. For example, the table generator 208 generates a content table including one or more of a type of sample, a byte offset of a sample, a length of a sample, a time offset of a sample and a motion feature of a sample if the sample corresponds to a video frame in the video file.
- the determining module 2 10 determines one or more samples in the content file based at least in part on the one or more content tables. For example, according to the ' locations of the one or more samples that are indicated in the one or more content tables, the determining module 210 determines the one or more samples in the content file such as the MP4 video file.
- the determining module 210 retrieves the one or more samples from the content file. For example, the determining module 210 retrieves the one or more samples in the MP4 video file from the asset hosting site 1 00 based at least in part on the determination of the locations of the one or more samples in the MP4 video fi le.
- the determining module 2 10 parses the one or more samples based at least in part on the one or more content tables
- the determining module 210 includes a parser that parses the one or more samples based at least in part on the one or more content tables.
- the determining module 210 sends the retrieved one or more samples to the parser 206 to parse the one or more samples based at least in part on the one or more content tables.
- the one or more samples are parsed at byte level based at least in part on one or more of the byte offset, the length in byte and other features included in the one or more content tables.
- the packaging module 2 1 2 generates one or more tag headers for the one or more samples.
- the packaging module 2 1 2 generates 1 3 or 16 bytes as a tag header that describes the features for an audio sample or a video sample respectively.
- the packaging module 2 12 generates one or more tags based at least in part on the one or more samples and the one or more tag headers. For example, the packaging module 212 prepends a tag header to a corresponding sample to form a tag.
- the packaging module 2 1 2 converts the content file from the first format to a second format based at least in part on the one or more tags. For example, by arranging the one or more tags in sequence based on the locations of the one or more samples in the content file with the first format such as the MP4 video file, the packaging module 212 converts the content file from the first format such as the MP4 format to the second format such as an FLV format.
- modules, routines, features, attributes, methodologies and other aspects of the disclosure can be implemented as software, hardware, firmware or any combination of the three.
- a component an example of which is a module, of the specification is implemented as software
- the component can be implemented as a standalone program, as part of a larger program, as a plurality of separate programs, as a statically or dynamically linked library, as a kernel loadable module, as a device driver, and/or in every and any other way known now or in the future to those of ordinary skill in the art of computer programming.
- the disclosure is in no way limited to implementation in any specific programming language, or for any specific operating system or environment. Accordingly, the disclosure is intended to be illustrative, but not limiting, of the scope of the specification, which is set forth in the following claims.
Abstract
Description
Claims
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/603,247 US20140063339A1 (en) | 2012-09-04 | 2012-09-04 | In Browser Muxing and Demuxing For Video Playback |
PCT/US2013/058080 WO2014039570A2 (en) | 2012-09-04 | 2013-09-04 | In browser muxing and demuxing for video playback |
Publications (2)
Publication Number | Publication Date |
---|---|
EP2893432A2 true EP2893432A2 (en) | 2015-07-15 |
EP2893432A4 EP2893432A4 (en) | 2016-05-18 |
Family
ID=50187089
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP13834920.4A Withdrawn EP2893432A4 (en) | 2012-09-04 | 2013-09-04 | In browser muxing and demuxing for video playback |
Country Status (4)
Country | Link |
---|---|
US (1) | US20140063339A1 (en) |
EP (1) | EP2893432A4 (en) |
CN (1) | CN104737121B (en) |
WO (1) | WO2014039570A2 (en) |
Families Citing this family (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN106254961B (en) * | 2016-07-27 | 2019-09-17 | 青岛海信电器股份有限公司 | Video broadcasting method and TV in TV |
CN113516737A (en) * | 2020-03-27 | 2021-10-19 | 北京小米松果电子有限公司 | Animation conversion method and device and intelligent equipment |
CN114422499B (en) * | 2021-12-27 | 2023-12-05 | 北京奇艺世纪科技有限公司 | File downloading method, system and device |
Family Cites Families (17)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
EP1267579A3 (en) * | 2001-06-11 | 2003-03-19 | Canal+ Technologies Société Anonyme | MPEG table structure |
CN100353450C (en) * | 2003-01-10 | 2007-12-05 | 华为技术有限公司 | Processing method of multi-media data |
KR101244308B1 (en) * | 2003-12-08 | 2013-03-18 | 삼성전자주식회사 | Encoding Method for moving picture file and the Digital right management using the same |
US7555715B2 (en) * | 2005-10-25 | 2009-06-30 | Sonic Solutions | Methods and systems for use in maintaining media data quality upon conversion to a different data format |
US20100166387A1 (en) * | 2006-09-05 | 2010-07-01 | Panasonic Corporation | Method and apparatus for playing video data of high bit rate format by a player capable of playing video data of low bit rate format |
CN100544439C (en) * | 2006-11-21 | 2009-09-23 | 华为技术有限公司 | A kind of method and system of supporting the media data of multiple coded format |
US20080263589A1 (en) * | 2007-04-23 | 2008-10-23 | Alan Jacobson | System and method using web database and video caching and streaming programming for video classified advertisements |
WO2009114111A2 (en) * | 2008-03-12 | 2009-09-17 | Packetvideo Corp. | System and method for reformatting digital broadcast multimedia for a mobile device |
US8566353B2 (en) * | 2008-06-03 | 2013-10-22 | Google Inc. | Web-based system for collaborative generation of interactive videos |
CN101646076A (en) * | 2008-08-08 | 2010-02-10 | 厦门时迅信息科技有限公司 | Video transmission method in wireless network |
CN101656099B (en) * | 2008-08-18 | 2012-06-27 | 安凯(广州)微电子技术有限公司 | Audio and video production and play method used for MP3 player |
CN101800894B (en) * | 2009-02-09 | 2012-06-27 | 纬创资通股份有限公司 | Method and system for converting and transmitting multimedia video and audio |
US8909806B2 (en) * | 2009-03-16 | 2014-12-09 | Microsoft Corporation | Delivering cacheable streaming media presentations |
WO2011022405A2 (en) * | 2009-08-17 | 2011-02-24 | Akamai Technologies, Inc. | Method and system for http-based stream delivery |
CN103004189B (en) * | 2010-07-15 | 2015-11-25 | 联发科技（新加坡）私人有限公司 | The method for searching of the FLASH video tab in bit stream and search device thereof |
CN102402542A (en) * | 2010-09-14 | 2012-04-04 | 腾讯科技（深圳）有限公司 | Video tagging method and system |
US9237363B2 (en) * | 2011-02-12 | 2016-01-12 | Openwave Mobility, Inc. | Dynamic injection of metadata into flash video |
-
2012
- 2012-09-04 US US13/603,247 patent/US20140063339A1/en not_active Abandoned
-
2013
- 2013-09-04 CN CN201380054728.6A patent/CN104737121B/en active Active
- 2013-09-04 WO PCT/US2013/058080 patent/WO2014039570A2/en active Application Filing
- 2013-09-04 EP EP13834920.4A patent/EP2893432A4/en not_active Withdrawn
Also Published As
Publication number | Publication date |
---|---|
EP2893432A4 (en) | 2016-05-18 |
WO2014039570A2 (en) | 2014-03-13 |
US20140063339A1 (en) | 2014-03-06 |
CN104737121B (en) | 2018-06-22 |
CN104737121A (en) | 2015-06-24 |
WO2014039570A3 (en) | 2014-05-15 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9990431B2 (en) | Rich web page generation | |
US10657157B1 (en) | Dynamic bitwise sharding of live stream comment groups | |
US10747948B1 (en) | Video annotation system | |
US8661124B2 (en) | Organizing social activity information on a site | |
US9497276B2 (en) | Trackable sharing of on-line video content | |
CN110139162B (en) | Media content sharing method and device, storage medium and electronic device | |
US20130104024A1 (en) | Optimization of web page content including video | |
US20120173441A1 (en) | Ownership Resolution System | |
US10303781B1 (en) | Deriving associations between assets | |
US20170078361A1 (en) | Method and System for Collecting Digital Media Data and Metadata and Audience Data | |
US20130227076A1 (en) | System Independent Remote Storing of Digital Content | |
US20210029395A1 (en) | Content restriction system | |
US20140063339A1 (en) | In Browser Muxing and Demuxing For Video Playback | |
US10264324B2 (en) | System and method for group-based media composition | |
US9009611B1 (en) | Batch graphical user interface generator | |
US9436686B1 (en) | Claim evaluation system |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PUAI | Public reference made under article 153(3) epc to a published international application that has entered the european phase |
Free format text: ORIGINAL CODE: 0009012 |
|
17P | Request for examination filed |
Effective date: 20150402 |
|
AK | Designated contracting states |
Kind code of ref document: A2Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
AX | Request for extension of the european patent |
Extension state: BA ME |
|
DAX | Request for extension of the european patent (deleted) | ||
A4 | Supplementary search report drawn up and despatched |
Effective date: 20160420 |
|
RIC1 | Information provided on ipc code assigned before grant |
Ipc: H04N 21/00 20110101ALI20160414BHEPIpc: G06F 7/00 20060101AFI20160414BHEP |
|
RAP1 | Party data changed (applicant data changed or rights of an application transferred) |
Owner name: GOOGLE LLC |
|
17Q | First examination report despatched |
Effective date: 20180724 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: THE APPLICATION IS DEEMED TO BE WITHDRAWN |
|
18D | Application deemed to be withdrawn |
Effective date: 20200603 |
|
P01 | Opt-out of the competence of the unified patent court (upc) registered |
Effective date: 20230519 |