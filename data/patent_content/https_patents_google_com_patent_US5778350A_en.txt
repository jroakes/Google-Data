US5778350A - Data collection, processing, and reporting system - Google Patents
Data collection, processing, and reporting system Download PDFInfo
- Publication number
- US5778350A US5778350A US08/566,429 US56642995A US5778350A US 5778350 A US5778350 A US 5778350A US 56642995 A US56642995 A US 56642995A US 5778350 A US5778350 A US 5778350A
- Authority
- US
- United States
- Prior art keywords
- set forth
- data
- input data
- tables
- input
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/12—Use of codes for handling textual entities
Definitions
- This invention is related in general to the field of data processing systems. More particularly, the invention is related to a data collection, processing, and reporting system.
- MVS MVS Integrated Control System
- JARS Job Accounting Reporting System
- IBM International Business Machines
- a system and method for collecting, processing, and reporting data are provided which eliminates or substantially reduces the disadvantages associated with prior systems and methods.
- the system and method for collecting and processing input data and generating output data includes at least one input processing table having format and content information of the input data, and at least one output processing table having format and content information of the output data.
- a multi-tasking process is used to spawn a plurality of subtasks, each subtask processing one type of data, the subtasks accessing the input processing table for determining how the input data are to be read, and further accessing the output processing table for determining how to create and format the output data.
- a plurality of data dictionary tables that controls the reading, processing, and outputting of data.
- the plurality of data dictionary tables include at least one input processing table having format and content information of the input data, and at least one output processing table having format and content information of the output data.
- FIG. 1 is a top level block diagram of an embodiment of a data collection, management, and reporting system constructed in accordance with the teachings of the present invention
- FIG. 2 is a block diagram of the data dictionary tables
- FIG. 3 is a simplified flowchart of an exemplary collector main task process
- FIGS. 4A and 4B show a simplified flowchart of an exemplary PACSTSK process
- FIG. 5 is a simplified flowchart of an exemplary PACSPOT process
- FIG. 6 is a simplified flowchart of an exemplary PACSPTB process
- FIG. 7 is a simplified flowchart of an exemplary PACSFOR process.
- FIG. 8 is a simplified flowchart of an exemplary PACSEOF process.
- FIGS. 1-8 The preferred embodiment(s) of the present invention is (are) illustrated in FIGS. 1-8, like reference numerals being used to refer to like and corresponding parts of the various drawings.
- an embodiment of the data collection, management, and reporting system is indicated generally at 10 and constructed according to the teachings of the present invention.
- the source of raw data 16 may be any device, instrumentation, or system
- the present invention is shown and described herein in the context of data generated by various monitors 14 that collect data on resource or equipment usage.
- These resources 12 may include data storage devices, databases, CPUs, mainframes, computer networks, gateways, and any resource the usage of which can be measured.
- monitor software 14 include CICS®, TSO®, SMF®, RMF®, VM®, all by IBM, IMF® by Boole and Babbage, and TSOMAN® and IDMS® by Computer Associates.
- the large quantity of raw input data 16 is managed by a data storage manager 18 such as IBM's DF/HSM®.
- a collector 20 then collects raw input data 16, computes output values, and provides output data in the form of tables and reports 24.
- Output tables generated by collector 20 may be used by other applications, such as general ledger and forecasting, for further processing.
- Collector 20 may be directed to run several times throughout a day as data becomes available or as a batch job. Data from all monitors 14 in different record types and formats may be processed in the same run.
- the actions of collector 20 is controlled by input data parameters and data dictionary tables 22. As shown, data dictionary tables 22 may also be managed by the same data storage manager 18 as input data 16.
- An interactive user interface 26 is provided to allow users to access information in data dictionary tables 22 and output data 24, and to modify and update the information in data dictionary tables 22.
- user interface provides a menu-driven graphical interface for viewing and maintaining the information stored in data dictionary tables 22 and output data 24.
- Special grant and view rules specified in data dictionary tables 22 define what information, i.e. which tables and which rows and columns, a user is authorized to view and/or change.
- FIG. 2 shows six categories of data dictionary tables 22 used to control the various actions of collector 20 in the data collection, management, and reporting process. Because the use of data dictionary tables 22, the present invention is a very flexible data processing and management system. Changes and modifications can be made by altering the information in the data dictionary tables rather than the source code. Other existing applications require substantial source code modifications to expand or change their functions.
- data dictionary tables 22 are maintained as DB2 tables.
- DB2 is IBM's relational database manager in which data are stored in tables consisting of columns and rows.
- the specific references to DB2 herein should not be construed as limiting the teachings of the present invention to the use of DB2 when other relational database managers are applicable.
- DB2 is merely an exemplary relational database manager used in the discussion herein.
- Data dictionary tables 22 include: system definition tables 30, input processing tables 32, output processing tables 34, application tables 36, system activity tables 38, and grants/indexes/views tables 40. Each group of tables are described in below with some details given on certain selected tables. Exemplary table layout and format of certain selected dictionary tables are presented along with discussions on these tables.
- System definition tables 30 contain information specific to the system on which the input records are collected.
- the PSYSID physical system ID
- LSYSID logical system ID
- a LSYSLKP logical system ID lookup
- a CPUMODEL CPU model table contains additional information, such as a speed factor used for CPU normalization established by the organization.
- System definition tables 30 also include a RECTYLKP (record type lookup) table which provides a mechanism for processing records that do not conform to the organization's numbering standards. For example, some vendor products may generate SMF records with optional record numbering. It is reasonable to expect that new or migrating accounts might use a record numbering system different from the organization's standards. To facilitate processing in such cases, the RECTYLKP table maps the record numbers contained in the data with the record numbers used in dictionary tables 22.
- RECTYLKP record type lookup
- Input processing tables 32 are used by collector 20 to read and process the input records.
- a RECNAME (record name) table provides the general characteristics of the record being read, including information on how to determine the PSYSID, RECTYPE (record type), and SUBTYPE (sub-division of a record type).
- the RECNAME table also provides other general processing considerations like error limits, checkpoint retention limits, and the record exclusion expressions for invalid record formats or skip records.
- Checkpointing describes the process of time stamping a record so that upon restart after an abend, it may be identified as processed or not processed. Processed records are skipped over until an unprocessed record is reached for data collection and processing to continue.
- An exemplary layout for the RECNAME table is shown below:
- the RECTOFF column contains the offset of the field containing the RECTYPE for the specified RECNAME.
- RECTLEN contains the length of the field containing the RECTYPE for the specified RECNAME.
- RECTDATA contains the data type for the field.
- the SUBTXXXX columns similarly contain the specifications for the field containing the SUBTYPE for the specified RECNAME.
- the PSYSXXX columns contain specifications for the field containing the PSYSID for the specified RECNAME.
- the TSXXXX columns contain the specifications for the field containing the time stamp for the specified RECNAME.
- the COMMIT column contains the number or character string that causes collector 20 to issue a commit statement.
- PROTFLAG is used to specify whether a row or column can be modified or deleted by a user using user interface 26 to access the table. For example, an N designation in this column indicates some columns in the row can be modified; an S designation indicates that the row cannot be modified or deleted; and a U designation indicates the row can be modified.
- the PROTFLAG is used in many other tables in a similar manner.
- the VALIDREC column contains a boolean expression used to determine whether an input record 16 is valid. VALIDREC may be an offset into the record, functions, and operators.
- CHKPTRET is a column containing the number of days to retain data in a checkpoint summary table (CHKPTSUM) for the specified RECNAME.
- Checkpointing is used to detect duplicate processing of a record.
- Each input record has an entry in a base table.
- the base table contains the time stamps of a uniquely defined set of records, based on date, record type, subtype, system, or a combination of these properties.
- the base table is checked prior to reading and processing each input data record to determine if the record has been process previously.
- the CHKPTSUM table is updated to include a summarization of the detail data, including the range of time stamps of records belonging to the deleted base table.
- CHKPTRET is used to specify how many days an entry in the CHKPTSUM table is to be retained.
- the OLDDATA column contains the limit on the number of records too old to be checkpointed in a single collector run. When the limit is exceeded, the subtask abends with a specific return code. A value of zero as shown indicates there is no limit.
- the columns starting with TS2 are columns that contain information about a secondary field used to determine the time stamp for the specified RECNAME.
- the SKIPREC column contains a boolean expression evaluated for each record to determine whether the record is to be processed. The SKIPREC expression may contain offsets into the record, functions, and operators. If the evaluation is true, then the record is skipped.
- Input processing tables 32 of data dictionary tables 22 further include a SOFTREL (software release) table used to determine the release version of the software that generated the input data record.
- SOFTREL software release
- the RELFORM are boolean expressions used to identify each unique SOFTWARE, RECNAME, RECTYPE, and RELEASE combination supported by system 10. During a collector run, all RELFORMs for the RECNAME and RECTYPE are evaluated. If an expression evaluates as true, the SOFTWARE and RELEASE associated with the RELFORM are assigned to the input data. If none of the expressions evaluate as true, the record is rejected as an unsupported release.
- Further input processing tables 32 include a SECTTYPE (section type) table defines the parameters required by formulas or algorithms for calculating offsets to the various sections within the record.
- a SECTION table identifies the formula or algorithm used to resolve the offset to each section in the record.
- a INPUTFLD (input field) table contains the data type, data length, and offsets within the section for each input field in the record.
- a TSTYPE (time stamp type) table contains the information needed to create the checkpoints for records that do not contain a time stamp field.
- a INPUTREC (input record) table contains an expression used to discard entire input records based on certain input field values.
- a CICVTREL (CICS VTAM release) table, CICDICTB (CICS dictionary) table, and CICREGN (CICS region) table are used for special IBM-defined CICS data processing.
- Input processing tables 30 also include some tables used for referential integrity not described specifically herein.
- Output processing tables 34 provide the information needed to create and write rows to the output tables.
- a NAMETYPE (name type) table contains the information needed to name the table and its objects.
- a OUTTBL (output table) table is used to define important characteristics for output tables identified by TABLEID, an identifier for the output table. Some of these characteristics may include: the table timespan (TIMESPAN), the filter or expression used to exclude certain rows, the criteria to activate table maintenance jobs, and the number of days to keep a table before migrating, archiving or deleting it (DAYSMIGR).
- TIMESPAN is described in more detail in conjunction with output tables 24 below.
- TABLEID identifies a group or family of output tables that share similar characteristics.
- TABLEID is the key in the OUTTBL table that is used to define the characteristics of a group of output tables. TABLEID is also used to tie together output columns, applications, and record types. Below is an example of a portion of the OUTTBL table.
- An OUTTBLRC (output table records) table is used to identify the specific records by information such as RECNAME, RECTYPE, and SUBTYPE that are used as input to the table identified by TABLEID.
- the PROTFLAG column in the tables is used to determine whether the row can be modified or deleted or if only certain columns of the row can be modified by users using user interface 26 to access the table.
- An exemplary portion of the OUTTBLRC table is shown below.
- a COL (column) table contains the general definitions of the output columns and the data type (OUTTYPE) and length (OUTLENG) for each output column.
- An OUTDESC column contains textual description of the entries.
- An OUTCOL (output column) table contains the formulas (FORMULA) used to calculate the values in an output column identified by SOFTWARE, RELEASE, RECNAME, RECTYPE, and SUBTYPE. For example:
- the formula is written in a formula language interpreted and evaluated at execution time. Because the formulas are stored in the OUTCOL table, the source code need not be modified or recompiled when changes in the formulas are desired.
- the formulas may yield boolean values or numerical values. For example, some formulas resolve to true or false to aid in processing decisions within collector 20. Other formulas return calculated values to be stored in output tables. Arithmetic operations such as addition, subtraction, multiplication, division, and exponentiation are provided. Bit string operations such as logical AND, OR, and concatenation are also available. There are also other formulas that can be used to generate pseudo logical system identifier (LSYSID).
- LSYSID pseudo logical system identifier
- An OUTCOLAC (output column action) table defines the action (ACTION) to be used when the specified column (COL) is included in a particular table definition.
- Valid ACTION in the OUTCOLAC Table may include:
- One primary end product of system 10 is output data in the form of tables stored in a relational database and managed by a relational database manager, such as DB2.
- Data in output table columns may represent the input record fields directly or a calculation involving many input record fields.
- the organization of output data and tables 24 is results-oriented. In other words, output tables 24 are designed to maximize performance by subsequent applications that use output tables 24.
- a distinguishing characteristic of output tables 24 includes TIMESPANS and TIMESTAMPS columns.
- TIMESPAN is a column that must be specified when an output table 24 is defined to the OUTTBL dictionary table.
- TIMESPAN identifies the frequency with which new tables are created, and the form of the date that is used in the table name. Standard TIMESPAN Values may specify that daily, weekly, monthly, quarterly, or yearly tables are to be created.
- Special TIMESPAN Values may also be used to specify time periods other than the daily through yearly periods.
- a TIMESPAN A may be used to specify tables containing data accumulated for an accounting month. Accounting months may be defined as all the data collected between two dates that is used to bill resource usage the following month. Regardless of when data was generated, the collection of billing data is closed out as of a certain date and bills are generated. If any data collected after the closeout date has a record time stamp that indicates it was generated in the last accounting month, it is still placed in the current accounting month table.
- TIMESPAN B stands for the base table used by collector 20 for checkpointing or duplicate data detection.
- each input record has a row entry in the base table.
- the base table must contain a key column with the name CHKPTTS, which contains a DB2 format time stamp, for example. Any additional data fields required to identify a unique occurrence of a record should be added as additional key columns.
- TIMESPAN X is a special week format for weekly transmission files. Instead of using the preceding Sunday as a start date for the table, a date independent of input time stamps is used to generate the table date. This is needed because of short weeks at month end, correction to invalids, suspend records, and other situations that make a record's time stamp unrelated to the table date desired.
- TIMESPAN P indicates that the table is permanent or perpetual and that table date is not a relevant term.
- Each run of collector 20 either updates existing rows or adds new rows.
- the only method of deleting rows from a perpetual table is by a post-processor that issues an explicit delete command.
- Perpetual tables may be used as temporary holding tanks for detailed data later used for billing or other purposes.
- Data dictionary tables 22 also include application tables 36, which provide a mechanism to refer to diverse output columns as a single group.
- application tables 36 which provide a mechanism to refer to diverse output columns as a single group.
- an ACTVAPPL table is used to activate or deactivate applications by specifying the logical system ID (LSYSID).
- LSYSID logical system ID
- the table contains a column of APPLIDs and a corresponding column of LSYSIDs, and presence of the APPLID-LSYSID combination in this table indicates that the application is active and data for this application is collected.
- Application tables 36 also include an APPLCOLS table, which identifies which columns (COLs) are output to which output tables (TABLEIDs) for which applications (APPLID). Some applications are corporate supported and cannot be altered or deleted, but any number of applications can be added to collect data of interest at the local level.
- a PROTFLAG column may be used to indicate whether the entry may be deleted or modified by users using user interface 26.
- An APPL table of application tables 36 contains all valid applications, a brief description, and a DEFAULT column used to indicate if the application should be automatically added to the ACTVAPPL table for each system in the LSYSID table.
- the APPL table is also used for referential integrity; unless an application is defined in the APPL table, it cannot be used in other tables that contain the APPLID column.
- ACTVAPPL active application table
- Data dictionary tables 22 further include system activity tables 38 to provide an audit trail and statistics detailing of all input and output data processed by collector 20.
- the CHKPTSUM table retains summary information about data already processed.
- the CHKPTSUM table is used as a secondary check for duplicate data; the base table is the primary test for duplicate data.
- the key columns of each base table are defined to successfully distinguish one record from another in the input data stream. Records containing duplicate values for the key columns in base table are rejected as duplicates.
- a base table is deleted, its rows are summarized to form entries in the CHKPTSUM table.
- the CHKPTRNG column in the RECTYPE table contains the value (in minutes) used to determine if two consecutive time stamps in the base table contain missing data.
- the TBLNAME column contains the fully qualified table name with all symbolics resolved.
- the CHKPTDT column contains the date corresponding to the date of the data in the base table.
- the STARTTM column contains the lowest time stamp value of the CHKPTRNG column in the RECTYPE table, and the ENDTIME column contains the highest time stamp value of the checkpoint time stamp range represented in the entry in the CHKPTSUM table.
- the format for STARTTM and ENDTIME is YYYY-MM-DD-HH.MM.SS.SSSSS.
- a TABLECAT (table catalog) table of system activity tables 38 is used to track the activity and status of all output tables.
- the TABLECAT table includes table name, table ID, time stamp, deletion date, migration date, size, storage group, and statistical information on each table.
- a TBLSQL (table Structured Query Language) table contains the SQL needed to create or recreate a table. SQL is used to access and update all data stored in DB2, to define and create all logical and physical data objects, and to control data security.
- a DDNJOBST table (DDname job statistics) and DTLJOBST (detail job statistics) table track the activity and job statistics of all collector runs. Included in the statistics are the highest return code, the start and end times, the CPU time, the number of commits, and the number of rollbacks.
- An EVENTLOG (event log) table tracks significant events occurring to data dictionary tables 22 to provide an audit trail. For example, table deletions, row insertions, row deletions, and the time stamp of these events are recorded in the EVENTLOG table.
- a MESSAGE table defines all output messages, and contains the limits associated with each message.
- a STORGRP (storage group) table contains the various active storage groups available within system 10.
- a storage group is a named, VSAM catalog controlled set of DASD (direct access storage device) volumes on which DB2 databases are allocated.
- the VOLUME table identifies which volumes are associated with the active storage groups.
- a SYSTEM table is used to define system 10 to the business unit or organization using it.
- the SYSTEM table may contain the PSYSIDs and LSYSIDs of the machines on site.
- Grants, views, and indexes are issued for each newly created table based on the SQL stored in a Grants/Views/Indexes tables 40. Indexes are automatically generated for each table and are used to speed searches through DB2 tables.
- An index is a set of pointers that are logically ordered by the values of a key. For each output table, a default index is defined that is equal to the keys named in the OUTCOLAC table.
- a INDEXTBL (index table) table can be used to specify additional indexes if desired. Additional indexes are needed only when frequently used search patterns differ from the key structure of the table.
- a view is a logical DB2 table consisting of a subset of columns from one or more DB2 tables.
- a view is a logical object and does not exist physically.
- a view is used to either simplify or restrict access to the information contained in specific columns and/or rows of one or more tables.
- a VIEWTBL table contains the SQL needed to produce the predefined view, while a VIEWDEP (view dependencies) table lists the tables that must exist for the same time stamp before the view can be created. Views are defined in several different tables. Columns within a view are defined in a VIEWCOL (view column) table.
- a VWCOLAC (view column action) table identifies the action and the column associated with each view column.
- a VWOUTCOL (view output column) contains the formula needed to define a view column, and an APPLVCOL (application view column) table defines which columns are to be included in a view based on the application.
- a GRANTTBL (grant table) table contains the table grant rules to be issued each time a new table with the same TABLEID is created.
- a GRANTVW (grant view) table contains the grant view rule to be issued when all tables comprising the view have been created.
- data dictionary tables 22 are not independent of one another.
- the relationships between the tables are expressed in the form of constraints. If one table is named as a constraint as a second table, then an entry must exist in the first table before rows with the key value can be added to the second table.
- APPL and LSYSID tables are constraints on the ACTVAPPL table. This means the APPL column must be defined in the APPL table and the LSYSID column must be defined in the LSYSID table before the APPLID/LSYSID combination can be added as an entry in the ACTVAPPL table.
- Constraints impact critical operations involving data dictionary tables 22. For example, user interface 26, prevent the addition of a row to a table if the constraints have not been met.
- rows cannot be deleted using user interface 26 if a restrict rule is in effect and a lower level table uses the entry. For example, an application cannot be deleted from the APPL table until all entries in the ACTVAPPL table with the same APPLID are also deleted.
- a form of constraint cascade constraint, applies, deleting one entry may cause all lower levels to be deleted. For example, deleting a system from the LSYSID table causes the deletion of all rows in the ACTVAPPL table for that LSYSID.
- FIGS. 3-8 are flowcharts of exemplary process flows of collector 20. References are made to data dictionary tables 22 as they are used to direct process flow, and to process and compute data.
- Collector 20 is preferably a batch program that reads one or more input files and writes information derived from the input data to one or more output tables. To maximize throughput, collector 20 is a multi-tasking program that initiates a separate input task for each input file. Collector 20 dynamically creates and alters any needed database object including databases, tablespaces, tables, indexes, views, and grants. Tablespace is defined in DB2, for example, as the physical spaces that holds tables. Database is defined in DB2, for example, as a collection of one or more tablespaces. Collector 20 may be run as soon as any input file becomes available or throughout the day as often as desired.
- the collector main task begins by interpreting and validating execution parameters, as shown in block 62.
- the program execution parameters control the operation of collector 20 including all input subtasks.
- the execution parameters can be specified either in the PARM keyword on the EXEC statement in the collector JCL (job control language), or it can be specified on the PROGRAM parameter card in a PARMS SYSIN file.
- An exemplary list of execution parameters includes the following:
- PLAN ⁇ plan name
- SYS ssss Required parameter that identifies the DB2 subsystem to be used, 1-4 characters.
- TRACE xxxx Used specifically for debugging purposes to dump structures after specific checkpoints.
- MSGLIM ⁇ 1
- COMMIT # of seconds
- a DB2 commit is executed when either the interval exceeds this value or the number of rows changed since the previous commit exceeds the value in the COMMIT column of the RECNAME table.
- a DB2 commit is also executed when a DB2 object is created or modified.
- RESTART ⁇ Y
- RESTART (JOBNAME) A search is done in the DDNJOBST table for the latest entry that matches the specified JOBNAME. If no match is found, an error message is provided. If a match is found, collector 20 skips all previously processed records as indicated by the PROCESS column of DTLJOBST table and begins processing the remaining records. This variation of the RESTART parameter is useful if collector 20 is restarted with a different job name than the previous run.
- RESTART (JOBNAME,JOBNUM) A search is done in the DDNJOBST Table for the latest entry that matches the specified JOBNAME and JOBNUM. If no match is found, an error message is provided. If a match is found, collector 20 skips all previously processed records as indicated by the PROCESS column of the DTLJOBST table and begins processing the remaining records. This variation of the RESTART parameter is useful if another collector is running or has run since the collector that needs to be restarted.
- collector 20 connects to the DB2 subsystem specified in the execution parameters, SYS. Thereafter, a message suppression tree is built, as shown in block 66, which determines the level of messages to be activated or suppressed as specified in the TRACE and MSGLIM execution parameters. If the RESTART execution parameter is specified as determined in block 68, the status of the restarted job is determined in block 70.
- the internal control blocks are built for all subtasks and starts a subtask for each input file or data set that contains valid parameters and passes a unique thread to each subtask. Therefore, each subtask processes one type of data, and multiple types of data may be processed in this multi-tasking environment by executing only one job. Input files of the same type of data may be concatenated together for processing by the same subtask.
- main task 60 waits for each subtask to complete processing, as shown in block 76.
- main task 60 notes whether it abended and what return code was returned by the subtask, as shown in blocks 78 and 80.
- Possible return codes may include:
- the return codes assist in determining the appropriate procedure to use when restarting collector 20.
- the end-of-job statistics are then printed and the main task disconnects from the DB2 subsystem, as shown in blocks 82 and 84.
- the main task then returns with the highest return code of all subtasks, as shown in block 86.
- FIG. 4A and 4B shows the subtask process flow, PACSTSK 90, as each subtask reads and processes records of one type of data or compatible data.
- the subtask receives control card information from the main task, which may include information on the record and data being processed and the resource monitor software used to generate the data record. Therefore, the information includes the record types and software types, as shown in block 94.
- a RECTYLKP (record type lookup) table is consulted to convert the record number to a standard record number that is defined within system 10.
- a job event history entry is created in DDNJOBST and DTLJOBST tables to log the job statistics.
- the process flow determines how to read the input data records by ascertaining which software and release version was used to generate the data by consulting the RELEASE, SOFTWARE, SOFTREL, CICREGN, and CICVTREL tables, as shown in block 100. Subsequently a record is read, as shown in block 102. If the record is to be skipped, as determined by consulting the RECNAME table, a SKIPREC formula in the execution parameters, and/or some other sources, the current record is skipped, as shown in blocks 104 and 105. Otherwise, the record is then checked against the RECNAME table and/or a VALIDREC formula in block 106 to determine whether it is a valid record. The record is skipped if it is invalid.
- the record time stamp is then determined, as shown in block 108. If the time stamp is not valid, as determined in block 110, the record is either marked as invalid for later processing by some other means of error management method, as shown in block 111. Input records that cannot be processed may be written to an output file for later processing.
- the CHKPTRET column from the RECNAME table is used to determine if the data is too old to process in block 112.
- the CHKPTRET column defines the number of days that row entries in the CHKPTSUM table are kept before they are deleted.
- the age of the record is determined by subtracting the record time stamp from the current date and time. If the record age is greater than the CHKPTRET value, the record is defined as too old to process, although mechanisms may be provided to force processing, if desired. If a force parameter is present to force processing, process flow continues to block 114. Otherwise, the record is treated as invalid.
- the physical system ID (PSYSID) is then read to lookup the logical system ID (LSYSID), and the record type and subtype (RECTYPE and SUBTYPE) are read to determine the logical record type, as shown in blocks 114-120. If this is a new RECTYPE or SUBTYPE for this subtask, new control blocks are started, as shown in block 124. New control blocks may include lists of valid input fields and output columns for this record, and the formulas for determining the values of the output columns. In block 126, it is determined which active applications are active for this combination of software and release version by using the ACTVAPPL table and certain execution parameters and control cards.
- the NAMETYPE column from the OUTTBL table is used to translate the software and release combination to an output object naming convention
- the DBASE column from the NAMETYPE table is used to convert a symbolic name to a system-assigned unique database name. If the DB2 catalog does not already contain the named database, then the database is created.
- the process flow determines the tablespace requirement. This is done by estimating the number of rows, using TABLECAT and OUTTBL tables, and by determined the row size using APPLCOLS, OUTCOLAC, and OUTCOL tables. An algorithm that takes into account the information from the above-identified tables and the size of certain existing tables (from the TABLECAT table) is used to compute the tablespace requirements. Thereafter in blocks 136 and 138, subtasks PACSPOT and PACSPTB are called to continue processing the input data records. Another subtask PACSEOF is then called in block 140 to complete data processing, and the process flow returns to the main task in block 142.
- FIG. 5 An exemplary process flow of the PACSPOT subtask is shown in FIG. 5 beginning in block 150.
- the primary function of PACSPOT is to create DB2 objects in a multi-tasking environment. Mechanisms are provided to prevent deadlocks on resources.
- the process flow first determines on which data storage volume the output object is to be created.
- the DB2 catalog is used to evaluate the storage group (STOGROUP) assigned and the VOLUME and STORGRP tables are also used.
- the VOLUME table identifies which volume(s) are associated with which active storage group(s) and the STORGRP table identifies the active storage groups in system 10.
- the amount of free space on the candidate volume is then determined and compared to the determined space needs for the object to be created on the volume, as shown in blocks 154 and 156.
- the subtask enqueues on the storage device or resources and creates the database, tablespace, tables, and views on the volume, as shown in blocks 158 and 160.
- An entry is then created in a TABLECAT table in order to track the activity and the status of the newly created output table, as shown in block 162. If an auxiliary index is needed for the newly created output table, then the INDEXTBL table is used to obtain the SQL needed to create the index, as shown in block 164.
- the GRANTTBL table is then used to obtain and execute the grant SQL for the created objects, as shown in block 166.
- a view is needed as determined by consulting the VIEWDEP, VIEWCOL, and VIEWTBL tables, then the views are created by using information in VIEWTBL, VIEWDEP, VIEWCAT, VIEWCOLAC, and VIEWCOL tables, as shown in blocks 168 and 170.
- the grant statement for the view just created is then obtained from the GRANTVW table and executed in block 172.
- the subtask dequeues on the resource, and updates the job event history in DDNJOBST and DTLJOBST tables with information on the newly created objects.
- the subtask then returns in block 178.
- FIG. 6 An exemplary process flow for the PACSPTB subtask is shown in FIG. 6 and beginning in block 190.
- the primary function of the PACSPTB subtask is to compute and resolve formulas to provide values to the rows in the output tables and to output the rows to DB2 tables.
- the PACSPTB subtask maps fields of the input records to the output tables by using INPUTFLD, INPUTREC, SECTION, and SECTTYPE tables, as shown in block 192.
- the PACSFOR subroutine or subtask is called to evaluate the formula language to compute the output column values, as shown in block 194.
- the values returned are then provided as output to populate the rows of the DB2 output table, as shown in block 196.
- the DTLJOBST and DDNJOBST tables are then updated.
- the subtask returns in block 200.
- FIG. 7 An exemplary process flow for the PACSFOR subroutine or subtask 210 is shown in FIG. 7.
- PACSFOR recursively evaluates the formula or equation to finally yield a value, as shown in block 212, which is then returned to the calling subtask in block 214.
- lists and tree structures are used to resolve the formula.
- PACSFOR also may invoke dictionary tables and other tables as needed to obtain lookup values.
- PACSEOF updates the job event history and statistics in the DDNJOBST and DTLJOBST tables, as shown in block 222.
- the input files are closed and DB2 objects are committed. End-of-task reports, if any, are written, as shown in block 228.
- the subtask returns in block 230.
- system 10 receives, processes, and outputs data dynamically.
- Data are received and their format is determined by consulting data dictionary tables 22.
- the input data may be mapped to the output tables and/or reports either directly or after processing and formula evaluation.
- the content and format of the output data, tables and reports are also defined by data dictionary tables 20. Because data dictionary tables 20 can be altered, the operation of collector 20 can be modified and updated easily without changing the source code and recompiling the program. For an organization that encompasses several business units spanning the globe all reporting to a central site, system 10 provides the needed flexibility and efficiency to collect, manage, and process the diverse data collected.
Abstract
Description
__________________________________________________________________________ RECNAME RECNAME RECTOFF RECTLEN RECTDATA SUBTOFF __________________________________________________________________________ SMF 5 1BINARY 22 __________________________________________________________________________ SUBTLEN SUBTDATA PSYSOFF PSYSLEN PSYSDATA __________________________________________________________________________ 2BINARY 14 4 EBCEDIC __________________________________________________________________________ TSOFF TSLEN TSDATA COMMIT PROTFLAG VALIDREC __________________________________________________________________________ 6 8 BINARY 1000 N LENGTH>14 __________________________________________________________________________ . . . CHKPTRET OLDDATA TS2OFF TS2LEN TS2DATA SKIPREC __________________________________________________________________________ 60 0 7 5 BINARY __________________________________________________________________________
______________________________________ SOFTREL SOFTWARE RELEASE RECNAME RECTYPE PROTFLAG ______________________________________ MVS/BAT V01R03M05 SMF 30 S IDMS V10R01M00 ID2 6 S DASDBILL V03R00M06 DSD 0 S ______________________________________ RELFORM ______________________________________ SUBSTR (#RECORD, 19, 3) = `JES` & COMPARE(SUBSTR(#RECORD . . . SUBSTR (#RECORD,49,4) = `R102` #RECLEN < 91 ______________________________________
______________________________________ OUTTBL TABLEID TIMESPAN NAMETYPE DAYSMIGR . . . ______________________________________ SMF03004CPUTB W 1 30 . . . ______________________________________
__________________________________________________________________________ OUTTBLRC RECNANE RECTYPE SUBTYPE TABLEIDPROTFLAG __________________________________________________________________________ SMF 30 4 SMF03004CPUTB S __________________________________________________________________________
______________________________________ COL COL OUTTYPE OUTLENG PROTFLAG OUTDESC ______________________________________ CPU INTEGER 4 S CPU TIME DATE CHAR 10 S Date HOUR SMALLINT 2 S Hour of the day 0-23 JOBNAME CHAR 6 S Job name ______________________________________
______________________________________ OUTCOL SOFTWARE RELEASE RECNAME RECTYPE SUBTYPE ______________________________________MVS V02R01M03 SMF 30 04MVS V02R01M03 SMF 30 04MVS V02R01M03 SMF 30 04MVS V02R01M03 SMF 30 04MVS V02R01M03 SMF 30 04MVS V02R01M03 SMF 30 04MVS V02R01M03 SMF 30 04 ______________________________________ COL ROW FORMULA ______________________________________ ACCESS 1 SMF30ACT BILLELEM 1 IF(PRIME(SMF30RST,SMP30RET),0027,0026) BILLELEM 2 0022 DATE 1 SMF30DTE HOUR 1 HOUR(SMF30TME) QUANTITY 1 (SMF30CPT+SMF30CPS) QUANTITY 2 (SMF30CPT+SMF30CPS) ______________________________________
______________________________________ OUTCOLAC COL TABLEID ACTION PROTFLAG ______________________________________ CPU SMF03004CPUTB A S JOBNAME SMF03004CPUTB K3 S HOUR SMF03004CPUTB K2 S DATE SMF03004CPUTB K1 S ______________________________________
______________________________________ ACTION KEYWORD LONG DESCRIPTION ______________________________________ A Add Add current value to existing COL value. H High Retain highest value encountered for COL. I Increment Add one (1) to current value of COL. Kn Key COL is the nth key for the output table. L Low Retain the lowest value encountered. P Parent COL is needed to resolve another COL. R Replace Retain last (most recent) value for COL. S Save Retain first value encountered for COL. ______________________________________
______________________________________ APPLCOLS COL TABLEID APPLID PROTFLAG ______________________________________ CPU SMF03004CPUTB CORPAPPL S JOBNAME SMF03004CPUTB CORPAPPL S HOUR SMF03004CPUTB CORPAPPL S DATE SMF03004CPUTB CORPAPPL S ______________________________________
______________________________________ APPL APPLID APPLDESC ______________________________________ CASDATA CORPORATE CAPACITY ANALYSIS SYSTEM IPACS INFO. PROCESSING ACCOUNTING AND COSTING SYSTEM PERFORM IPC PERFORMANCE SMF03001 BASE APPLICATION FORSMF 30 SUBTYPE 1 RECORDS SM03001D DETAIL APPLICATION FORSMF 30 SUBTYPE 1 RECORDS ______________________________________ PROTFLAG DEFAULT ______________________________________ S Y S Y S Y S Y S N S N ______________________________________
______________________________________ CHKPTSUM TBLNAME CHKPTDT ______________________________________ B040590.T1010SMF030004B 1990-04- ASE 05 B040590.T1010SMF030004B 1990-04- ASE 05 B040590.T1015SMF030004J 1990-04- BPF 05 ______________________________________ STARTTM ENDTIME RECNAME ______________________________________ 1990-04-05- 1990-04-05- SMF 00.00.00.00000 10.15.00.00000 1990-04-05- 1990-04-05- SMF 10.45.01.00000 23.59.00.00000 1990-04-05- 1990-04-05- SMF 00.00.00.10000 23.59.00.10000 ______________________________________
______________________________________ 0 All input records were processed without warning or errors. 4 All input records were processed and warning messages were encountered. 8 Some input records could not be processed due to errors. 12 A severe error causedcollector 20 to cancel all processing before the end of one or more input files. 30Collector 20 encountered an error before attempting to process any input files. 99 The input subtask for one or more input files abended before reading the end of the file. ______________________________________
Claims (63)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US08/566,429 US5778350A (en) | 1995-11-30 | 1995-11-30 | Data collection, processing, and reporting system |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US08/566,429 US5778350A (en) | 1995-11-30 | 1995-11-30 | Data collection, processing, and reporting system |
Publications (1)
Publication Number | Publication Date |
---|---|
US5778350A true US5778350A (en) | 1998-07-07 |
Family
ID=24262852
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US08/566,429 Expired - Lifetime US5778350A (en) | 1995-11-30 | 1995-11-30 | Data collection, processing, and reporting system |
Country Status (1)
Country | Link |
---|---|
US (1) | US5778350A (en) |
Cited By (68)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6081773A (en) * | 1997-09-03 | 2000-06-27 | Sharp Kabushiki Kaisha | Translation apparatus and storage medium therefor |
US6120553A (en) * | 1997-12-18 | 2000-09-19 | Sidwell; Leland P. | System for modifying JCL statements to optimize data storage allocations |
US6131190A (en) * | 1997-12-18 | 2000-10-10 | Sidwell; Leland P. | System for modifying JCL parameters to optimize data storage allocations |
WO2001004798A1 (en) * | 1999-07-07 | 2001-01-18 | Computer Associates Think, Inc. | Real-time database object statistics collection |
US6233578B1 (en) * | 1996-09-11 | 2001-05-15 | Nippon Telegraph And Telephone Corporation | Method and system for information retrieval |
US6282544B1 (en) * | 1999-05-24 | 2001-08-28 | Computer Associates Think, Inc. | Method and apparatus for populating multiple data marts in a single aggregation process |
US20020013841A1 (en) * | 1997-11-20 | 2002-01-31 | Limor Schweitzer | System, method and computer program product for reporting in a network-based filtering and aggregating platform |
US20020038364A1 (en) * | 2000-06-12 | 2002-03-28 | Limor Schweitzer | System, method and computer program product for reading, correlating, processing, categorizing and aggregating events of any type |
US6374254B1 (en) * | 1999-06-30 | 2002-04-16 | International Business Machines Corporation | Scalable, distributed, asynchronous data collection mechanism |
US20020091636A1 (en) * | 1999-03-25 | 2002-07-11 | Nortel Networks Corporation | Capturing quality of service |
US6421676B1 (en) * | 1999-06-30 | 2002-07-16 | International Business Machines Corporation | Scheduler for use in a scalable, distributed, asynchronous data collection mechanism |
US20030070141A1 (en) * | 2001-10-02 | 2003-04-10 | International Business Machines Corporation | Data conversion system and method |
US20030069676A1 (en) * | 2001-10-05 | 2003-04-10 | Koyo Seiko Co., Ltd. | Electric power steering apparatus |
US6549890B2 (en) * | 1997-08-29 | 2003-04-15 | Superbserv, Inc. | Interactive computer system and data analysis method |
US20030171976A1 (en) * | 2002-03-07 | 2003-09-11 | Farnes Christopher D. | Method and system for assessing customer experience performance |
US20030177212A1 (en) * | 1999-11-18 | 2003-09-18 | Xacct Technologies, Inc. | System, method and computer program product for network record synthesis |
US6625657B1 (en) | 1999-03-25 | 2003-09-23 | Nortel Networks Limited | System for requesting missing network accounting records if there is a break in sequence numbers while the records are transmitting from a source device |
US6662227B2 (en) * | 1997-02-14 | 2003-12-09 | Netiq Corp | System and method for analyzing remote traffic data in a distributed computing environment |
US20040059651A1 (en) * | 1999-12-16 | 2004-03-25 | Sumitomo Bank, Limited, New York | Conversion engine and financial reporting system using the conversion engine |
US6742096B1 (en) * | 1998-07-03 | 2004-05-25 | Thomson Licensing S.A. | Fast startup procedure for multimode data players and/or recorders |
US6751663B1 (en) | 1999-03-25 | 2004-06-15 | Nortel Networks Limited | System wide flow aggregation process for aggregating network activity records |
US6766318B1 (en) * | 1999-03-11 | 2004-07-20 | Oracle International Corporation | Approach for collecting statistical information in information systems |
US20050086242A1 (en) * | 2003-09-04 | 2005-04-21 | Oracle International Corporation | Automatic workload repository battery of performance statistics |
GB2410577A (en) * | 2004-01-31 | 2005-08-03 | Patrick Ian Carmody | Development and maintenance of computer databases |
US20050177590A1 (en) * | 2004-02-11 | 2005-08-11 | Chen Yao-Ching S. | Low-overhead built-in timestamp column for relational database systems |
US20050185673A1 (en) * | 1998-10-02 | 2005-08-25 | Campbell Rene L. | System and Method for Managing Computer and Phone Network Resources |
US7058657B1 (en) * | 2003-01-07 | 2006-06-06 | Perlegen Sciences, Inc. | Architecture for developing and reusing analytic and visualization components and methods of use thereof |
US20060294148A1 (en) * | 2005-06-22 | 2006-12-28 | Xavier Brunet | Network usage management system and method |
US7167860B1 (en) | 1999-03-25 | 2007-01-23 | Nortel Networks Limited | Fault tolerance for network accounting architecture |
US20070106613A1 (en) * | 2005-11-10 | 2007-05-10 | Murphy Michael J | Automated accounting system |
US7243143B1 (en) | 1999-03-25 | 2007-07-10 | Nortel Networks Limited | Flow probe connectivity determination |
US20070276592A1 (en) * | 2006-05-26 | 2007-11-29 | States Pride, Llc. | Method for deep mapping |
US20080162416A1 (en) * | 2006-12-29 | 2008-07-03 | Paul Sinclair | Techniques for extending database date statistics |
US20080215826A1 (en) * | 2007-03-02 | 2008-09-04 | Gergana Vassileva Markova | Deterministic memory management in a computing environment |
CN100440144C (en) * | 2007-01-26 | 2008-12-03 | 华为技术有限公司 | Method and device for implementing compatibility between the old and new editions of system |
US20090024913A1 (en) * | 2007-07-20 | 2009-01-22 | Oracle International Corporation | Generating reports in applications |
US20090106756A1 (en) * | 2007-10-19 | 2009-04-23 | Oracle International Corporation | Automatic Workload Repository Performance Baselines |
US7702909B2 (en) * | 2003-12-22 | 2010-04-20 | Klimenty Vainstein | Method and system for validating timestamps |
US7913311B2 (en) | 2001-12-12 | 2011-03-22 | Rossmann Alain | Methods and systems for providing access control to electronic data |
US7921288B1 (en) | 2001-12-12 | 2011-04-05 | Hildebrand Hal S | System and method for providing different levels of key security for controlling access to secured items |
US7921284B1 (en) | 2001-12-12 | 2011-04-05 | Gary Mark Kinghorn | Method and system for protecting electronic data in enterprise environment |
US7921450B1 (en) | 2001-12-12 | 2011-04-05 | Klimenty Vainstein | Security system using indirect key generation from access rules and methods therefor |
US7930756B1 (en) | 2001-12-12 | 2011-04-19 | Crocker Steven Toye | Multi-level cryptographic transformations for securing digital assets |
US7950066B1 (en) | 2001-12-21 | 2011-05-24 | Guardian Data Storage, Llc | Method and system for restricting use of a clipboard application |
US20110178984A1 (en) * | 2010-01-18 | 2011-07-21 | Microsoft Corporation | Replication protocol for database systems |
US20110191299A1 (en) * | 2010-02-01 | 2011-08-04 | Microsoft Corporation | Logical data backup and rollback using incremental capture in a distributed database |
US8006280B1 (en) | 2001-12-12 | 2011-08-23 | Hildebrand Hal S | Security system for generating keys from access rules in a decentralized manner and methods therefor |
US20110225288A1 (en) * | 2010-03-12 | 2011-09-15 | Webtrends Inc. | Method and system for efficient storage and retrieval of analytics data |
US20110225287A1 (en) * | 2010-03-12 | 2011-09-15 | Webtrends Inc. | Method and system for distributed processing of web traffic analytics data |
US8065713B1 (en) | 2001-12-12 | 2011-11-22 | Klimenty Vainstein | System and method for providing multi-location access management to secured items |
US20110302220A1 (en) * | 2010-06-08 | 2011-12-08 | Albert Marcella | Sql processing for data conversion |
US8127366B2 (en) | 2003-09-30 | 2012-02-28 | Guardian Data Storage, Llc | Method and apparatus for transitioning between states of security policies used to secure electronic documents |
US8176334B2 (en) | 2002-09-30 | 2012-05-08 | Guardian Data Storage, Llc | Document security system that permits external users to gain access to secured files |
US8204885B2 (en) * | 2008-01-07 | 2012-06-19 | Akiban Technologies, Inc. | Multiple dimensioned database architecture supporting operations on table groups |
US8266674B2 (en) | 2001-12-12 | 2012-09-11 | Guardian Data Storage, Llc | Method and system for implementing changes to security policies in a distributed security system |
US8327138B2 (en) | 2003-09-30 | 2012-12-04 | Guardian Data Storage Llc | Method and system for securing digital assets using process-driven security policies |
USRE43906E1 (en) | 2001-12-12 | 2013-01-01 | Guardian Data Storage Llc | Method and apparatus for securing digital assets |
US8543827B2 (en) | 2001-12-12 | 2013-09-24 | Intellectual Ventures I Llc | Methods and systems for providing access control to secured data |
US8707034B1 (en) | 2003-05-30 | 2014-04-22 | Intellectual Ventures I Llc | Method and system for using remote headers to secure electronic files |
US9910726B2 (en) | 2016-02-17 | 2018-03-06 | International Business Machines Corporation | System dump analysis |
US10033700B2 (en) | 2001-12-12 | 2018-07-24 | Intellectual Ventures I Llc | Dynamic evaluation of access rights |
US10204135B2 (en) | 2015-07-29 | 2019-02-12 | Oracle International Corporation | Materializing expressions within in-memory virtual column units to accelerate analytic queries |
US10360545B2 (en) | 2001-12-12 | 2019-07-23 | Guardian Data Storage, Llc | Method and apparatus for accessing secured electronic data off-line |
US10366083B2 (en) | 2015-07-29 | 2019-07-30 | Oracle International Corporation | Materializing internal computations in-memory to improve query performance |
US11226955B2 (en) | 2018-06-28 | 2022-01-18 | Oracle International Corporation | Techniques for enabling and integrating in-memory semi-structured data and text document searches with in-memory columnar query processing |
US11372995B2 (en) * | 2020-01-17 | 2022-06-28 | Snowflake Inc. | Container-centric access control on database objects |
CN116933743A (en) * | 2023-09-15 | 2023-10-24 | 中船黄埔文冲船舶有限公司 | Ship service data processing method, device, equipment and storage medium |
US11934543B1 (en) | 2022-11-17 | 2024-03-19 | Snowflake Inc. | Transient object references |
Citations (20)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US3822378A (en) * | 1971-09-29 | 1974-07-02 | Casio Computer Co Ltd | Addition-subtraction device and memory means utilizing stop codes to designate form of stored data |
US4003031A (en) * | 1974-01-24 | 1977-01-11 | Casio Computer Co., Ltd. | Information-arranging device |
US4031515A (en) * | 1974-05-01 | 1977-06-21 | Casio Computer Co., Ltd. | Apparatus for transmitting changeable length records having variable length words with interspersed record and word positioning codes |
US4032900A (en) * | 1974-11-15 | 1977-06-28 | Casio Computer Co., Ltd. | Apparatus for distinguishing heading information from other information in an information processing system |
US4034350A (en) * | 1974-11-15 | 1977-07-05 | Casio Computer Co., Ltd. | Information-transmitting apparatus |
US4064553A (en) * | 1974-11-15 | 1977-12-20 | Casio Computer Co., Ltd. | Information processor |
US4079234A (en) * | 1975-12-12 | 1978-03-14 | Casio Computer Co., Ltd. | Manual key input apparatus |
US4103334A (en) * | 1975-10-21 | 1978-07-25 | Casio Computer Co., Ltd. | Data handling system involving memory-to-memory transfer |
US4133041A (en) * | 1975-12-25 | 1979-01-02 | Casio Computer Co., Ltd. | Data processing control apparatus with selective data readout |
US4321672A (en) * | 1979-11-26 | 1982-03-23 | Braun Edward L | Financial data processing system |
US4360872A (en) * | 1979-06-15 | 1982-11-23 | Omron Tateisi Electronics Co. | Electronic cash register system |
US4370707A (en) * | 1971-08-03 | 1983-01-25 | Computer Service, Inc. | Computer system for generating architectural specifications and project control instructions |
US4555759A (en) * | 1981-05-18 | 1985-11-26 | International Business Machines Corp. | Selective use of restored file setups |
US4633397A (en) * | 1984-12-24 | 1986-12-30 | Richard Macco | Union member accounts management system |
US4730252A (en) * | 1985-09-24 | 1988-03-08 | International Business Machines Corp. | Document composition from parts inventory |
US4809170A (en) * | 1987-04-22 | 1989-02-28 | Apollo Computer, Inc. | Computer device for aiding in the development of software system |
US4852000A (en) * | 1987-09-24 | 1989-07-25 | Universal Data Associates | Method for expense report storage and calculation |
US4851999A (en) * | 1985-07-24 | 1989-07-25 | Teruko Moriyama | General-purpose management system |
US5526518A (en) * | 1988-07-14 | 1996-06-11 | Casio Computer Co., Ltd. | Data processing apparatus |
US5528492A (en) * | 1991-09-06 | 1996-06-18 | Kabushiki Kaisha Toshiba | Method of managing medical diagnostic data with reference relationship |
-
1995
- 1995-11-30 US US08/566,429 patent/US5778350A/en not_active Expired - Lifetime
Patent Citations (20)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4370707A (en) * | 1971-08-03 | 1983-01-25 | Computer Service, Inc. | Computer system for generating architectural specifications and project control instructions |
US3822378A (en) * | 1971-09-29 | 1974-07-02 | Casio Computer Co Ltd | Addition-subtraction device and memory means utilizing stop codes to designate form of stored data |
US4003031A (en) * | 1974-01-24 | 1977-01-11 | Casio Computer Co., Ltd. | Information-arranging device |
US4031515A (en) * | 1974-05-01 | 1977-06-21 | Casio Computer Co., Ltd. | Apparatus for transmitting changeable length records having variable length words with interspersed record and word positioning codes |
US4032900A (en) * | 1974-11-15 | 1977-06-28 | Casio Computer Co., Ltd. | Apparatus for distinguishing heading information from other information in an information processing system |
US4034350A (en) * | 1974-11-15 | 1977-07-05 | Casio Computer Co., Ltd. | Information-transmitting apparatus |
US4064553A (en) * | 1974-11-15 | 1977-12-20 | Casio Computer Co., Ltd. | Information processor |
US4103334A (en) * | 1975-10-21 | 1978-07-25 | Casio Computer Co., Ltd. | Data handling system involving memory-to-memory transfer |
US4079234A (en) * | 1975-12-12 | 1978-03-14 | Casio Computer Co., Ltd. | Manual key input apparatus |
US4133041A (en) * | 1975-12-25 | 1979-01-02 | Casio Computer Co., Ltd. | Data processing control apparatus with selective data readout |
US4360872A (en) * | 1979-06-15 | 1982-11-23 | Omron Tateisi Electronics Co. | Electronic cash register system |
US4321672A (en) * | 1979-11-26 | 1982-03-23 | Braun Edward L | Financial data processing system |
US4555759A (en) * | 1981-05-18 | 1985-11-26 | International Business Machines Corp. | Selective use of restored file setups |
US4633397A (en) * | 1984-12-24 | 1986-12-30 | Richard Macco | Union member accounts management system |
US4851999A (en) * | 1985-07-24 | 1989-07-25 | Teruko Moriyama | General-purpose management system |
US4730252A (en) * | 1985-09-24 | 1988-03-08 | International Business Machines Corp. | Document composition from parts inventory |
US4809170A (en) * | 1987-04-22 | 1989-02-28 | Apollo Computer, Inc. | Computer device for aiding in the development of software system |
US4852000A (en) * | 1987-09-24 | 1989-07-25 | Universal Data Associates | Method for expense report storage and calculation |
US5526518A (en) * | 1988-07-14 | 1996-06-11 | Casio Computer Co., Ltd. | Data processing apparatus |
US5528492A (en) * | 1991-09-06 | 1996-06-18 | Kabushiki Kaisha Toshiba | Method of managing medical diagnostic data with reference relationship |
Cited By (116)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6233578B1 (en) * | 1996-09-11 | 2001-05-15 | Nippon Telegraph And Telephone Corporation | Method and system for information retrieval |
US20040088407A1 (en) * | 1997-02-14 | 2004-05-06 | Boyd William Glen | System and method for analyzing remote traffic data in a distributed computing environment |
US6662227B2 (en) * | 1997-02-14 | 2003-12-09 | Netiq Corp | System and method for analyzing remote traffic data in a distributed computing environment |
US7206838B2 (en) * | 1997-02-14 | 2007-04-17 | Webtrends Corporation | System and method for analyzing remote traffic data in a distributed computing environment |
US8195794B2 (en) | 1997-02-14 | 2012-06-05 | Webtrends, Inc. | System and method for analyzing remote traffic data in a distributed computing environment |
US7734772B2 (en) | 1997-02-14 | 2010-06-08 | Webtrends, Inc. | System and method for analyzing remote traffic data in a distributed computing environment |
US20100217767A1 (en) * | 1997-02-14 | 2010-08-26 | Webtrends Inc. | System and method for analyzing remote traffic data in a distributed computing environment |
US6549890B2 (en) * | 1997-08-29 | 2003-04-15 | Superbserv, Inc. | Interactive computer system and data analysis method |
US6081773A (en) * | 1997-09-03 | 2000-06-27 | Sharp Kabushiki Kaisha | Translation apparatus and storage medium therefor |
US6947984B2 (en) * | 1997-11-20 | 2005-09-20 | Xacct Technologies, Ltd. | System, method and computer program product for reporting in a network-based filtering and aggregating platform |
US20020091811A1 (en) * | 1997-11-20 | 2002-07-11 | Limor Schweitzer | System, method and computer program product for merging data in a network-based filtering and aggregating platform |
US20020013841A1 (en) * | 1997-11-20 | 2002-01-31 | Limor Schweitzer | System, method and computer program product for reporting in a network-based filtering and aggregating platform |
US7631065B2 (en) | 1997-11-20 | 2009-12-08 | Amdocs (Israel) Ltd. | System, method and computer program product for merging data in a network-based filtering and aggregating platform |
US6120553A (en) * | 1997-12-18 | 2000-09-19 | Sidwell; Leland P. | System for modifying JCL statements to optimize data storage allocations |
US6131190A (en) * | 1997-12-18 | 2000-10-10 | Sidwell; Leland P. | System for modifying JCL parameters to optimize data storage allocations |
US6742096B1 (en) * | 1998-07-03 | 2004-05-25 | Thomson Licensing S.A. | Fast startup procedure for multimode data players and/or recorders |
US20050185673A1 (en) * | 1998-10-02 | 2005-08-25 | Campbell Rene L. | System and Method for Managing Computer and Phone Network Resources |
US6766318B1 (en) * | 1999-03-11 | 2004-07-20 | Oracle International Corporation | Approach for collecting statistical information in information systems |
US6625657B1 (en) | 1999-03-25 | 2003-09-23 | Nortel Networks Limited | System for requesting missing network accounting records if there is a break in sequence numbers while the records are transmitting from a source device |
US6751663B1 (en) | 1999-03-25 | 2004-06-15 | Nortel Networks Limited | System wide flow aggregation process for aggregating network activity records |
US7167860B1 (en) | 1999-03-25 | 2007-01-23 | Nortel Networks Limited | Fault tolerance for network accounting architecture |
US7243143B1 (en) | 1999-03-25 | 2007-07-10 | Nortel Networks Limited | Flow probe connectivity determination |
US20020091636A1 (en) * | 1999-03-25 | 2002-07-11 | Nortel Networks Corporation | Capturing quality of service |
US6282544B1 (en) * | 1999-05-24 | 2001-08-28 | Computer Associates Think, Inc. | Method and apparatus for populating multiple data marts in a single aggregation process |
US6850952B2 (en) * | 1999-05-24 | 2005-02-01 | Computer Associates Think, Inc. | Method and apparatus for populating multiple data marts in a single aggregation process |
US6421676B1 (en) * | 1999-06-30 | 2002-07-16 | International Business Machines Corporation | Scheduler for use in a scalable, distributed, asynchronous data collection mechanism |
US6374254B1 (en) * | 1999-06-30 | 2002-04-16 | International Business Machines Corporation | Scalable, distributed, asynchronous data collection mechanism |
AU776348B2 (en) * | 1999-07-07 | 2004-09-02 | Computer Associates Think, Inc. | Real-time database object statistics collection |
WO2001004798A1 (en) * | 1999-07-07 | 2001-01-18 | Computer Associates Think, Inc. | Real-time database object statistics collection |
US6389430B1 (en) | 1999-07-07 | 2002-05-14 | Computer Associates Think, Inc. | Real-time database object statistics collection |
US20030177212A1 (en) * | 1999-11-18 | 2003-09-18 | Xacct Technologies, Inc. | System, method and computer program product for network record synthesis |
US6836797B2 (en) * | 1999-11-18 | 2004-12-28 | Xacct Technologies, Ltd. | System, method and computer program product for network record synthesis |
US20100169193A1 (en) * | 1999-12-16 | 2010-07-01 | Sumitomo Mitsui Banking Corporation | Conversion engine and financial reporting system using the conversion engine |
US8311908B2 (en) | 1999-12-16 | 2012-11-13 | Sumitomo Mitsui Banking Corporation | Conversion engine and financial reporting system using the conversion engine |
US20040059651A1 (en) * | 1999-12-16 | 2004-03-25 | Sumitomo Bank, Limited, New York | Conversion engine and financial reporting system using the conversion engine |
US7565311B2 (en) * | 1999-12-16 | 2009-07-21 | Sumitomo Mitsui Banking Corporation | Conversion engine and financial reporting system using the conversion engine |
US20020038364A1 (en) * | 2000-06-12 | 2002-03-28 | Limor Schweitzer | System, method and computer program product for reading, correlating, processing, categorizing and aggregating events of any type |
US6931444B2 (en) * | 2000-06-12 | 2005-08-16 | Amdocs (Israel) Ltd. | System, method and computer program product for reading, correlating, processing, categorizing and aggregating events of any type |
US7480854B2 (en) | 2001-10-02 | 2009-01-20 | International Business Machines Corporation | Data conversion system and method |
US20030070141A1 (en) * | 2001-10-02 | 2003-04-10 | International Business Machines Corporation | Data conversion system and method |
US20090119331A1 (en) * | 2001-10-02 | 2009-05-07 | Zeggert Debra L | Data conversion system |
US20030069676A1 (en) * | 2001-10-05 | 2003-04-10 | Koyo Seiko Co., Ltd. | Electric power steering apparatus |
US8341406B2 (en) | 2001-12-12 | 2012-12-25 | Guardian Data Storage, Llc | System and method for providing different levels of key security for controlling access to secured items |
US10033700B2 (en) | 2001-12-12 | 2018-07-24 | Intellectual Ventures I Llc | Dynamic evaluation of access rights |
US8918839B2 (en) | 2001-12-12 | 2014-12-23 | Intellectual Ventures I Llc | System and method for providing multi-location access management to secured items |
US7930756B1 (en) | 2001-12-12 | 2011-04-19 | Crocker Steven Toye | Multi-level cryptographic transformations for securing digital assets |
US9129120B2 (en) | 2001-12-12 | 2015-09-08 | Intellectual Ventures I Llc | Methods and systems for providing access control to secured data |
US8543827B2 (en) | 2001-12-12 | 2013-09-24 | Intellectual Ventures I Llc | Methods and systems for providing access control to secured data |
USRE43906E1 (en) | 2001-12-12 | 2013-01-01 | Guardian Data Storage Llc | Method and apparatus for securing digital assets |
US7921450B1 (en) | 2001-12-12 | 2011-04-05 | Klimenty Vainstein | Security system using indirect key generation from access rules and methods therefor |
US8341407B2 (en) | 2001-12-12 | 2012-12-25 | Guardian Data Storage, Llc | Method and system for protecting electronic data in enterprise environment |
US10229279B2 (en) | 2001-12-12 | 2019-03-12 | Intellectual Ventures I Llc | Methods and systems for providing access control to secured data |
US9542560B2 (en) | 2001-12-12 | 2017-01-10 | Intellectual Ventures I Llc | Methods and systems for providing access control to secured data |
US7913311B2 (en) | 2001-12-12 | 2011-03-22 | Rossmann Alain | Methods and systems for providing access control to electronic data |
US8266674B2 (en) | 2001-12-12 | 2012-09-11 | Guardian Data Storage, Llc | Method and system for implementing changes to security policies in a distributed security system |
US10360545B2 (en) | 2001-12-12 | 2019-07-23 | Guardian Data Storage, Llc | Method and apparatus for accessing secured electronic data off-line |
US7921284B1 (en) | 2001-12-12 | 2011-04-05 | Gary Mark Kinghorn | Method and system for protecting electronic data in enterprise environment |
US7921288B1 (en) | 2001-12-12 | 2011-04-05 | Hildebrand Hal S | System and method for providing different levels of key security for controlling access to secured items |
US8065713B1 (en) | 2001-12-12 | 2011-11-22 | Klimenty Vainstein | System and method for providing multi-location access management to secured items |
US8006280B1 (en) | 2001-12-12 | 2011-08-23 | Hildebrand Hal S | Security system for generating keys from access rules in a decentralized manner and methods therefor |
US10769288B2 (en) | 2001-12-12 | 2020-09-08 | Intellectual Property Ventures I Llc | Methods and systems for providing access control to secured data |
US7950066B1 (en) | 2001-12-21 | 2011-05-24 | Guardian Data Storage, Llc | Method and system for restricting use of a clipboard application |
US8943316B2 (en) | 2002-02-12 | 2015-01-27 | Intellectual Ventures I Llc | Document security system that permits external users to gain access to secured files |
US20030171976A1 (en) * | 2002-03-07 | 2003-09-11 | Farnes Christopher D. | Method and system for assessing customer experience performance |
US8176334B2 (en) | 2002-09-30 | 2012-05-08 | Guardian Data Storage, Llc | Document security system that permits external users to gain access to secured files |
USRE47443E1 (en) | 2002-09-30 | 2019-06-18 | Intellectual Ventures I Llc | Document security system that permits external users to gain access to secured files |
US7058657B1 (en) * | 2003-01-07 | 2006-06-06 | Perlegen Sciences, Inc. | Architecture for developing and reusing analytic and visualization components and methods of use thereof |
US8707034B1 (en) | 2003-05-30 | 2014-04-22 | Intellectual Ventures I Llc | Method and system for using remote headers to secure electronic files |
US20050086195A1 (en) * | 2003-09-04 | 2005-04-21 | Leng Leng Tan | Self-managing database architecture |
US7603340B2 (en) | 2003-09-04 | 2009-10-13 | Oracle International Corporation | Automatic workload repository battery of performance statistics |
US20050086242A1 (en) * | 2003-09-04 | 2005-04-21 | Oracle International Corporation | Automatic workload repository battery of performance statistics |
US20050086246A1 (en) * | 2003-09-04 | 2005-04-21 | Oracle International Corporation | Database performance baselines |
US7526508B2 (en) * | 2003-09-04 | 2009-04-28 | Oracle International Corporation | Self-managing database architecture |
US7664798B2 (en) | 2003-09-04 | 2010-02-16 | Oracle International Corporation | Database performance baselines |
US8739302B2 (en) | 2003-09-30 | 2014-05-27 | Intellectual Ventures I Llc | Method and apparatus for transitioning between states of security policies used to secure electronic documents |
US8127366B2 (en) | 2003-09-30 | 2012-02-28 | Guardian Data Storage, Llc | Method and apparatus for transitioning between states of security policies used to secure electronic documents |
US8327138B2 (en) | 2003-09-30 | 2012-12-04 | Guardian Data Storage Llc | Method and system for securing digital assets using process-driven security policies |
US7702909B2 (en) * | 2003-12-22 | 2010-04-20 | Klimenty Vainstein | Method and system for validating timestamps |
GB2410577A (en) * | 2004-01-31 | 2005-08-03 | Patrick Ian Carmody | Development and maintenance of computer databases |
US20050177590A1 (en) * | 2004-02-11 | 2005-08-11 | Chen Yao-Ching S. | Low-overhead built-in timestamp column for relational database systems |
US20090070304A1 (en) * | 2004-02-11 | 2009-03-12 | International Business Machines Corporation | Low-overhead built-in timestamp column for relational database systems |
US7624119B2 (en) | 2004-02-11 | 2009-11-24 | International Business Machines Corporation | Low-overhead built-in timestamp column for relational database systems |
US7657624B2 (en) | 2005-06-22 | 2010-02-02 | Hewlett-Packard Development Company, L.P. | Network usage management system and method |
US20060294148A1 (en) * | 2005-06-22 | 2006-12-28 | Xavier Brunet | Network usage management system and method |
US8090653B2 (en) * | 2005-11-10 | 2012-01-03 | The Escher Group, Ltd. | Automated accounting system |
US20070106613A1 (en) * | 2005-11-10 | 2007-05-10 | Murphy Michael J | Automated accounting system |
US20070276592A1 (en) * | 2006-05-26 | 2007-11-29 | States Pride, Llc. | Method for deep mapping |
US20080162416A1 (en) * | 2006-12-29 | 2008-07-03 | Paul Sinclair | Techniques for extending database date statistics |
US7577679B2 (en) * | 2006-12-29 | 2009-08-18 | Teradata Us, Inc. | Techniques for extending database date statistics |
CN100440144C (en) * | 2007-01-26 | 2008-12-03 | 华为技术有限公司 | Method and device for implementing compatibility between the old and new editions of system |
US8001336B2 (en) * | 2007-03-02 | 2011-08-16 | International Business Machines Corporation | Deterministic memory management in a computing environment |
US20110238944A1 (en) * | 2007-03-02 | 2011-09-29 | Gergana Vassileva Markova | Deterministic memory management in a computing environment |
US20080215826A1 (en) * | 2007-03-02 | 2008-09-04 | Gergana Vassileva Markova | Deterministic memory management in a computing environment |
US20090024913A1 (en) * | 2007-07-20 | 2009-01-22 | Oracle International Corporation | Generating reports in applications |
US8756496B2 (en) * | 2007-07-20 | 2014-06-17 | Oracle International Corporation | Generating reports in applications |
US9710353B2 (en) | 2007-10-19 | 2017-07-18 | Oracle International Corporation | Creating composite baselines based on a plurality of different baselines |
US20090106756A1 (en) * | 2007-10-19 | 2009-04-23 | Oracle International Corporation | Automatic Workload Repository Performance Baselines |
US8990811B2 (en) | 2007-10-19 | 2015-03-24 | Oracle International Corporation | Future-based performance baselines |
US8204885B2 (en) * | 2008-01-07 | 2012-06-19 | Akiban Technologies, Inc. | Multiple dimensioned database architecture supporting operations on table groups |
US20110178984A1 (en) * | 2010-01-18 | 2011-07-21 | Microsoft Corporation | Replication protocol for database systems |
US8825601B2 (en) | 2010-02-01 | 2014-09-02 | Microsoft Corporation | Logical data backup and rollback using incremental capture in a distributed database |
US20110191299A1 (en) * | 2010-02-01 | 2011-08-04 | Microsoft Corporation | Logical data backup and rollback using incremental capture in a distributed database |
US20110225287A1 (en) * | 2010-03-12 | 2011-09-15 | Webtrends Inc. | Method and system for distributed processing of web traffic analytics data |
US20110225288A1 (en) * | 2010-03-12 | 2011-09-15 | Webtrends Inc. | Method and system for efficient storage and retrieval of analytics data |
US20110302220A1 (en) * | 2010-06-08 | 2011-12-08 | Albert Marcella | Sql processing for data conversion |
US10366083B2 (en) | 2015-07-29 | 2019-07-30 | Oracle International Corporation | Materializing internal computations in-memory to improve query performance |
US10204135B2 (en) | 2015-07-29 | 2019-02-12 | Oracle International Corporation | Materializing expressions within in-memory virtual column units to accelerate analytic queries |
US10372706B2 (en) | 2015-07-29 | 2019-08-06 | Oracle International Corporation | Tracking and maintaining expression statistics across database queries |
US11238039B2 (en) | 2015-07-29 | 2022-02-01 | Oracle International Corporation | Materializing internal computations in-memory to improve query performance |
US9910726B2 (en) | 2016-02-17 | 2018-03-06 | International Business Machines Corporation | System dump analysis |
US11226955B2 (en) | 2018-06-28 | 2022-01-18 | Oracle International Corporation | Techniques for enabling and integrating in-memory semi-structured data and text document searches with in-memory columnar query processing |
US11372995B2 (en) * | 2020-01-17 | 2022-06-28 | Snowflake Inc. | Container-centric access control on database objects |
US11544399B2 (en) | 2020-01-17 | 2023-01-03 | Snowflake Inc. | Container-centric access control on database objects |
US11841969B2 (en) | 2020-01-17 | 2023-12-12 | Snowflake Inc. | Container-centric access control on database objects |
US11934543B1 (en) | 2022-11-17 | 2024-03-19 | Snowflake Inc. | Transient object references |
CN116933743A (en) * | 2023-09-15 | 2023-10-24 | 中船黄埔文冲船舶有限公司 | Ship service data processing method, device, equipment and storage medium |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US5778350A (en) | Data collection, processing, and reporting system | |
US5564047A (en) | Trigger generation in an active database management system | |
US6161109A (en) | Accumulating changes in a database management system by copying the data object to the image copy if the data object identifier of the data object is greater than the image identifier of the image copy | |
EP2901323B1 (en) | Policy driven data placement and information lifecycle management | |
US6119128A (en) | Recovering different types of objects with one pass of the log | |
US5787415A (en) | Low maintenance data delivery and refresh system for decision support system database | |
US8886617B2 (en) | Query-based searching using a virtual table | |
US6105033A (en) | Method and apparatus for detecting and removing obsolete cache entries for enhancing cache system operation | |
US20070118547A1 (en) | Efficient index versioning in multi-version databases | |
EP0723238A1 (en) | Relational database system and method with high data availability during table data restructuring | |
EP0633538A2 (en) | Relational database management system | |
CN103460208A (en) | Methods and systems for loading data into a temporal data warehouse | |
Uhrowczik | Data dictionary/directories | |
EP1145156A1 (en) | Method for maintaining exception tables for a check utility | |
England et al. | Microsoft SQL Server 2005 performance optimization and tuning handbook | |
Effelsberg et al. | Logical, internal, and physical reference behavior in CODASYL database systems | |
Wu et al. | Divergence control algorithms for epsilon serializability | |
Lilja et al. | Online bulk deletion | |
Alapati et al. | Oracle Database 12c Performance Tuning Recipes: A Problem-Solution Approach | |
US6115722A (en) | Method for checking tablespaces involved in referential integrity | |
Lusk et al. | A practical design methodology for the implementation of IMS databases, using the entity-relationship model | |
Teschke et al. | Concurrent warehouse maintenance without compromising session consistency | |
Powell | Oracle High Performance Tuning for 9i and 10g | |
Adams | Workload models for DBMS performance evaluation | |
Greenwald et al. | Oracle in a Nutshell: A Desktop Quick Reference |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: ELECTRONIC DATA SYSTEMS CORPORATION, A TEXAS CORPOFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:ADAMS, RAYMOND J.;BRICHTA, HARRIET E.;HENN, ROGER J.;AND OTHERS;REEL/FRAME:007878/0707;SIGNING DATES FROM 19951129 TO 19960329 |
|
AS | Assignment |
Owner name: ELECTRONIC DATA SYSTEMS CORPORATION, A DELAWARE COFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:ELECTRONIC DATA SYSTEMS CORPORATION, A TEXAS CORPORATION;REEL/FRAME:009160/0747Effective date: 19960606 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
REMI | Maintenance fee reminder mailed | ||
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: ELECTRONIC DATA SYSTEMS, LLC, DELAWAREFree format text: CHANGE OF NAME;ASSIGNOR:ELECTRONIC DATA SYSTEMS CORPORATION;REEL/FRAME:022460/0948Effective date: 20080829Owner name: ELECTRONIC DATA SYSTEMS, LLC,DELAWAREFree format text: CHANGE OF NAME;ASSIGNOR:ELECTRONIC DATA SYSTEMS CORPORATION;REEL/FRAME:022460/0948Effective date: 20080829 |
|
AS | Assignment |
Owner name: HEWLETT-PACKARD DEVELOPMENT COMPANY, L.P., TEXASFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:ELECTRONIC DATA SYSTEMS, LLC;REEL/FRAME:022449/0267Effective date: 20090319Owner name: HEWLETT-PACKARD DEVELOPMENT COMPANY, L.P.,TEXASFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:ELECTRONIC DATA SYSTEMS, LLC;REEL/FRAME:022449/0267Effective date: 20090319 |
|
FPAY | Fee payment |
Year of fee payment: 12 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:HEWLETT-PACKARD DEVELOPMENT COMPANY, L.P.;HEWLETT-PACKARD COMPANY;REEL/FRAME:027661/0258Effective date: 20111025 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044144/0001Effective date: 20170929 |