CN111680721B - Accurate and interpretable classification with hard attention - Google Patents
Accurate and interpretable classification with hard attention Download PDFInfo
- Publication number
- CN111680721B CN111680721B CN202010419464.1A CN202010419464A CN111680721B CN 111680721 B CN111680721 B CN 111680721B CN 202010419464 A CN202010419464 A CN 202010419464A CN 111680721 B CN111680721 B CN 111680721B
- Authority
- CN
- China
- Prior art keywords
- classification
- model
- input
- attention
- computer system
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
- 238000013145 classification model Methods 0.000 claims abstract description 52
- 238000010801 machine learning Methods 0.000 claims abstract description 51
- 238000000034 method Methods 0.000 claims abstract description 47
- 238000012549 training Methods 0.000 claims abstract description 41
- 230000008569 process Effects 0.000 claims abstract description 26
- 230000006870 function Effects 0.000 claims description 17
- 238000013527 convolutional neural network Methods 0.000 claims description 16
- 239000013598 vector Substances 0.000 claims description 5
- 238000012935 Averaging Methods 0.000 claims description 4
- 230000009471 action Effects 0.000 abstract description 6
- 238000013528 artificial neural network Methods 0.000 description 17
- 230000015654 memory Effects 0.000 description 13
- 238000010586 diagram Methods 0.000 description 12
- 230000008901 benefit Effects 0.000 description 7
- 238000005457 optimization Methods 0.000 description 7
- 238000012545 processing Methods 0.000 description 7
- 238000004891 communication Methods 0.000 description 4
- 230000000694 effects Effects 0.000 description 4
- 238000012986 modification Methods 0.000 description 3
- 230000004048 modification Effects 0.000 description 3
- 230000000306 recurrent effect Effects 0.000 description 3
- 230000000007 visual effect Effects 0.000 description 3
- 230000004913 activation Effects 0.000 description 2
- 238000012360 testing method Methods 0.000 description 2
- 241001494875 Naja naja Species 0.000 description 1
- 238000007792 addition Methods 0.000 description 1
- 230000004931 aggregating effect Effects 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 238000013461 design Methods 0.000 description 1
- 238000001514 detection method Methods 0.000 description 1
- 238000011143 downstream manufacturing Methods 0.000 description 1
- 238000005516 engineering process Methods 0.000 description 1
- 230000001815 facial effect Effects 0.000 description 1
- 230000006872 improvement Effects 0.000 description 1
- 230000003993 interaction Effects 0.000 description 1
- 230000007787 long-term memory Effects 0.000 description 1
- 230000007246 mechanism Effects 0.000 description 1
- 238000002156 mixing Methods 0.000 description 1
- 239000000203 mixture Substances 0.000 description 1
- 238000010606 normalization Methods 0.000 description 1
- 230000003287 optical effect Effects 0.000 description 1
- 230000002787 reinforcement Effects 0.000 description 1
- 230000004044 response Effects 0.000 description 1
- 230000006403 short-term memory Effects 0.000 description 1
- 238000006467 substitution reaction Methods 0.000 description 1
- 230000026676 system process Effects 0.000 description 1
- 238000010200 validation analysis Methods 0.000 description 1
- 238000012795 verification Methods 0.000 description 1
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F18/00—Pattern recognition
- G06F18/20—Analysing
- G06F18/24—Classification techniques
- G06F18/241—Classification techniques relating to the classification model, e.g. parametric or non-parametric approaches
- G06F18/2415—Classification techniques relating to the classification model, e.g. parametric or non-parametric approaches based on parametric or probabilistic models, e.g. based on likelihood ratio or false acceptance rate versus a false rejection rate
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/084—Backpropagation, e.g. using gradient descent
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F18/00—Pattern recognition
- G06F18/20—Analysing
- G06F18/21—Design or setup of recognition systems or techniques; Extraction of features in feature space; Blind source separation
- G06F18/214—Generating training patterns; Bootstrap methods, e.g. bagging or boosting
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F18/00—Pattern recognition
- G06F18/20—Analysing
- G06F18/22—Matching criteria, e.g. proximity measures
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F18/00—Pattern recognition
- G06F18/20—Analysing
- G06F18/24—Classification techniques
- G06F18/241—Classification techniques relating to the classification model, e.g. parametric or non-parametric approaches
- G06F18/2413—Classification techniques relating to the classification model, e.g. parametric or non-parametric approaches based on distances to training or reference patterns
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F18/00—Pattern recognition
- G06F18/20—Analysing
- G06F18/285—Selection of pattern recognition techniques, e.g. of classifiers in a multi-classifier system
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N20/00—Machine learning
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N7/00—Computing arrangements based on specific mathematical models
- G06N7/01—Probabilistic graphical models, e.g. probabilistic networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V10/00—Arrangements for image or video recognition or understanding
- G06V10/40—Extraction of image or video features
- G06V10/44—Local feature extraction by analysis of parts of the pattern, e.g. by detecting edges, contours, loops, corners, strokes or intersections; Connectivity analysis, e.g. of connected components
- G06V10/443—Local feature extraction by analysis of parts of the pattern, e.g. by detecting edges, contours, loops, corners, strokes or intersections; Connectivity analysis, e.g. of connected components by matching or filtering
- G06V10/449—Biologically inspired filters, e.g. difference of Gaussians [DoG] or Gabor filters
- G06V10/451—Biologically inspired filters, e.g. difference of Gaussians [DoG] or Gabor filters with interaction between the filter responses, e.g. cortical complex cells
- G06V10/454—Integrating the filters into a hierarchical structure, e.g. convolutional neural networks [CNN]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V10/00—Arrangements for image or video recognition or understanding
- G06V10/70—Arrangements for image or video recognition or understanding using pattern recognition or machine learning
- G06V10/77—Processing image or video features in feature spaces; using data integration or data reduction, e.g. principal component analysis [PCA] or independent component analysis [ICA] or self-organising maps [SOM]; Blind source separation
- G06V10/774—Generating sets of training patterns; Bootstrap methods, e.g. bagging or boosting
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V10/00—Arrangements for image or video recognition or understanding
- G06V10/70—Arrangements for image or video recognition or understanding using pattern recognition or machine learning
- G06V10/77—Processing image or video features in feature spaces; using data integration or data reduction, e.g. principal component analysis [PCA] or independent component analysis [ICA] or self-organising maps [SOM]; Blind source separation
- G06V10/776—Validation; Performance evaluation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V10/00—Arrangements for image or video recognition or understanding
- G06V10/70—Arrangements for image or video recognition or understanding using pattern recognition or machine learning
- G06V10/87—Arrangements for image or video recognition or understanding using pattern recognition or machine learning using selection of the recognition techniques, e.g. of a classifier in a multiple classifier system
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V20/00—Scenes; Scene-specific elements
- G06V20/10—Terrestrial scenes
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V20/00—Scenes; Scene-specific elements
- G06V20/70—Labelling scene content, e.g. deriving syntactic or semantic representations
Abstract
In general, the present disclosure is directed to novel machine learning classification models that utilize hard attention operations to make discrete attention actions. The present disclosure also provides a self-supervising pre-training process that initializes the model to a state with more frequent rewards. Given only the true value classification labels of a set of training inputs (e.g., images), the proposed model is able to learn a strategy at discrete attention locations that identifies certain portions of the inputs (e.g., blocks of images) that are relevant to the classification. In this way, the model is able to provide a high precision classification while also providing an explicit and interpretable basis for decision making.
Description
Cross Reference to Related Applications
The present application claims priority from U.S. provisional patent application Ser. No. 62/848,945, filed 5/16/2019. U.S. provisional patent application No. 62/848,945 is incorporated by reference in its entirety.
Technical Field
The present disclosure relates generally to machine learning. More particularly, the present disclosure relates to machine learning models and training techniques thereof that are capable of using hard attention to generate classifications for inputs (e.g., images) to improve the interpretability of the classifications.
Background
Artificial neural networks and other machine learning models achieve the most advanced performance over many different tasks, including classification tasks. For example, convolutional Neural Networks (CNNs) achieve the most advanced performance over many image classification tasks. However, since a neural network such as CNN calculates a nonlinear function of the input, it is difficult to interpret the decision thereof.
Thus, while Convolutional Neural Networks (CNNs) have been successful in many computer vision tasks, they have been slowly deployed in certain critical applications, mainly because CNN predictions cannot be interpreted. In particular, CNNs compute very complex functions of their inputs, which makes it unclear which aspects of the inputs contribute to the predictions.
While many researchers have attempted to devise methods for interpreting CNN and other machine learning model decisions, it is unclear whether these interpretations faithfully describe the model they intend to interpret. Furthermore, opponent machine learning studies have shown that small changes in image pixels can change classifier decisions, highlighting the intuitiveness of CNN classifiers.
One interesting class of models that provide more interpretable decisions is the "hard" visual attention model. These models typically rely on a controller that selects relevant portions of the input to make decisions, which provide interpretability through design. These models are inspired by human vision, where the fovea and vision system processes only a limited portion of the visual scene at high resolution, while the top-down path controls the motion of the eyes to sequentially sample a significant portion of the visual scene.
While models that take advantage of hard attention perform well on simple data sets such as MNIST, it has been challenging to extend these models from small tasks to real world images. Furthermore, training hard attention models with class label supervision alone is challenging. For example, in large images, the action space is high-dimensional and sparsity is rewarded, which typically results in failure of the optimization process.
Disclosure of Invention
Aspects and advantages of embodiments of the disclosure will be set forth in part in the description which follows, or may be learned from the description, or may be learned by practice of the embodiments.
One example aspect of the present disclosure is directed to a computer system that performs classification with hard attention. The computing system includes a machine learning classification model. The machine-learned classification model includes a representation model configured to receive and process an input including a plurality of portions to generate a plurality of sets of features for the plurality of portions of the input, respectively. The machine learning classification model includes a classification model configured to receive and process multiple sets of features to generate respective classification data for each of multiple portions of the input. The machine learning classification model includes an attention model configured to receive and process multiple sets of features to select an noted portion of the multiple portions of the input at each of one or more iterations. At each of one or more iterations, the machine-learned classification model is configured to output a respective prediction that includes respective classification data of the noted portion of the input selected by the attention model at such iteration. The computing system includes one or more processors and one or more non-transitory computer-readable media storing instructions that, when executed by the one or more processors, cause the computer system to perform operations. The operations include obtaining an input comprising a plurality of portions. These operations include inputting an input into a machine learning classification model. The operations include, at each of one or more iterations, receiving a respective prediction as an output of a machine-learned classification model.
Other aspects of the disclosure are directed to various systems, apparatuses, non-transitory computer-readable media, user interfaces, and electronic devices.
These and other features, aspects, and advantages of various embodiments of the present disclosure will become better understood with reference to the following description and appended claims. The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate exemplary embodiments of the disclosure and together with the description, serve to explain the principles of interest.
Drawings
A detailed discussion of embodiments directed to one of ordinary skill in the art is set forth in the specification, which makes reference to the accompanying drawings, in which:
FIG. 1 depicts a block diagram of an example machine learning classification model, according to an example embodiment of the present disclosure.
FIG. 2 depicts a block diagram of an example machine learning classification model, according to an example embodiment of the disclosure.
Fig. 3 depicts a block diagram of an example glance unit, according to an example embodiment of the present disclosure.
Fig. 4A depicts a block diagram of an example computing system, according to an example embodiment of the present disclosure.
Fig. 4B depicts a block diagram of an example computing device, according to an example embodiment of the present disclosure.
Fig. 4C depicts a block diagram of an example computing device, according to an example embodiment of the present disclosure.
FIG. 5 depicts a flowchart of an example method for training and using a machine-learned classifier model with hard attention according to an example embodiment of the present disclosure.
Fig. 6 illustrates an example input image 600.
Repeated reference numerals are intended to identify identical features in the various embodiments.
Detailed Description
Overview
In general, the present disclosure is directed to novel machine learning classification models that utilize hard attention operations to make discrete attention actions. The present disclosure also provides a self-supervising pre-training process that initializes the model to a state with more frequent rewards. Given only the truth (ground trunk) classification labels of a set of training inputs (e.g., images), the proposed model is able to learn a strategy at discrete attention locations that identifies certain portions of the inputs (e.g., blocks of images) that are related to the classification. In this way, the model is able to provide a high precision classification while also providing an explicit and interpretable basis for decision making.
More specifically, a model employing hard attention makes decisions based only on a subset of inputs (e.g., a subset of pixels in an input image). In computer vision or other image processing applications, this typically takes the form of a square "glance" of a series of images.
Models that utilize hard attention are difficult to train with gradient-based optimization. Other models also resort to soft attention in order to make training easier to handle. Typical soft attention mechanisms rescale features at one or more stages of the network. Soft masks for rescaling often appear to provide some insight into the decision making process of the model, but the final decision of the model may still depend on the information provided by the less weighted features.
In contrast, the present disclosure proposes a novel hard attention model and a novel training process to train the model. The proposed model and training process overcomes the high dimensionality and rewarding sparsity that makes hard attention models difficult to optimize. The proposed model finely discretizes the motion space into a number of parts (e.g. overlapping parts of the input image), which allows to notice relevant features in the input (e.g. image) while overcoming the complexity of processing a continuous motion space. In some embodiments, the model may be trained using a pre-training process to pre-tune the model to a good initial point where rewards are not sparse for strategic gradient optimization.
The present disclosure provides a number of technical effects and benefits. As one example technical effect and benefit, the machine learning classification model described herein operates to provide classification with hard attention output. Thus, the portion of the input that is relied upon to arrive at the classification is explicitly identified. This makes the classification provided by the model easier for humans to interpret, which can make it more feasible to apply classification models to various problems. That is, for certain problems in which the decision basis is required or should be interpretable, machine learning techniques have not been previously applied, and thus have not received the benefits they produce, such as inference speed and high accuracy. As such, the systems and methods of the present disclosure allow for a wider use of machine learning and thus enable increased processing speeds and prediction accuracy for new fields and use cases. Furthermore, the systems and methods of the present disclosure provide classification with the most advanced accuracy relative to other hard-attention methods. Thus, a more accurate classification may be produced, which enables downstream processes to operate with increased accuracy and efficiency.
As another example technical effect and benefit, in the past, training of hard attention models without attention supervision has been challenging, resulting in low accuracy and poor attention location. Difficulties stem from the fact that: it is difficult to explicitly quantify what the salient locations in the image for a given decision are. For example, in large images such as ImageNet, the action space is high-dimensional and sparsity is rewarded, which typically results in failure of the optimization process. Failure of the optimization process results in wasted computing resources such as processor usage, memory usage, and network usage. However, the present disclosure provides a pre-training process that can be used to pre-tune the model to a good initial point where the reward is not sparse for strategic gradient optimization. This results in a higher success rate of the optimization process. In this way, the systems and methods reduce the consumption of computing resources such as processor usage, memory usage, and network usage.
U.S. provisional patent application No. 62/848,945 describes example embodiments of the systems and methods of the present disclosure and example experimental results of such example embodiments. U.S. provisional patent application No. 62/848,945 is fully incorporated into and forms a part of the present disclosure.
Referring now to the drawings, example embodiments of the present disclosure will be discussed in further detail.
Example machine learning model
FIG. 1 depicts a block diagram of an example machine learning classification model 10, according to an example embodiment of the present disclosure. The example machine learning classification model 10 is configured to receive a set of input data 20 comprising a plurality of portions. The machine-learned classification model 10 is configured to process the input data 20 to produce a prediction 30 for each iteration for each of one or more iterations.
The input data 20 may describe any type of input including, for example, image data, audio data, and/or text data. Portions of the input data 20 may be overlapping or non-overlapping. As one example, the portion of the input data 20 may include overlapping blocks of images. As another example, the portion of the input data 20 may include a portion of text data (e.g., a word, a phoneme, an n-gram, a grapheme, or other portion). As another example, the portion of the input data 20 may include an embedded or other pre-processed representation of the portion of the input. As yet another example, the portion of the input data 20 may include a portion of sensor data generated by one or more sensors.
The predictions 30 for each iteration may include a classification (e.g., along with an identification of a particular one of the portions of the input data 20 that resulted in the classification) relative to the plurality of categories of input data 20. The classification may be a binary classification, or may take the form of a confidence score, probability value, or other numerical representation of the classification.
According to aspects of the present disclosure, the machine-learned classification model 10 may include a representation model 12, a classification model 14, and an attention model 16. Each of the models 12, 14, and 16 may be or include various types of machine learning models, as described elsewhere herein, including, but not limited to, artificial neural networks (hereinafter "neural networks"). Example neural networks include convolutional neural networks.
The representation model 12 may be configured to receive and process input data 20 comprising a plurality of portions to generate sets of features 22 for the plurality of portions of the input data 20, respectively. A set of features 22 may be generated for each portion of the input data 20.
The classification model 14 may be configured to receive and process multiple sets of features 22 to generate respective classification data 24 for each of the multiple portions of the input. For example, the respective classification data 24 generated by the classification model 14 for each of the plurality of portions of the input 20 may be or include a log probability (log) vector that provides a value for each of the plurality of candidate classification labels.
The attention model 16 may be configured to receive and process multiple sets of features 22 to select an noted portion 26 of the multiple portions of the input at each of one or more iterations. As shown in fig. 1, in some implementations, the attention model 16 may also receive data from the classification model 14 (e.g., receive an internal representation from the classification model 14, which may be referred to as an intermediate classification), and the attention model 16 may use such data to help select the noted portion 26 of each iteration.
At each of one or more iterations, the machine-learned classification model 10 may be configured to output a respective prediction 30, the prediction 30 including respective classification data 24 of the noted portion 26 of the input selected by the attention model 16 at such iteration. For example, at each iteration, a hard attention operation 28 may be performed to select classification data 24 associated with the noted portion 26 selected by the attention model 16.
As described elsewhere herein, in some embodiments, a final classification may be generated from predictions 30 for all iterations. As one example, generating the final classification may include averaging the respective predictions 30 received for one or more iterations to obtain an average prediction; and selecting the category with the highest score from the average predictions as the final classification.
As another example, fig. 2 depicts a block diagram of an example machine learning classification model 200, according to an example embodiment of the disclosure. Similar to the example model 10 of fig. 1, the machine-learned classification model 200 of fig. 2 includes a representation model, a classification model, and an attention model. The machine-learned classification model 200 of fig. 2 operates to generate one or more predictions for the image 202.
In particular, to understand the intuition behind the illustrated model architecture, one imagines using a trained image classification model and applying it to different locations of the image to obtain logarithmic probability vectors at the different locations. To find the correct label, the log probabilities at the different locations can be averaged and the salient locations on the image can be found, the image block that causes the greatest response on the correct label channel can be selected.
More specifically, as shown in fig. 2, the representation model may include a representation network. The representation network may be a convolutional neural network that learns features from blocks at different locations of the image 202. In some implementations, different portions of the image 202 may be scanned using any convolution network with a finite receptive field to form image features at different locations, which is illustrated in fig. 2 as an "image feature tensor". For example, the "BagNet" architecture may enable efficient learning of these representations without requiring one scan. For example, a ResNet architecture can be used in which most of the 3×3 convolutions are replaced with 1×1 convolutions in order to limit the receptive field of the adjustment model and the step size is adjusted to obtain a higher resolution output. One example shows a receptive field of 63 x 63 for a network and computes 2048 feature vectors at different locations in image 202 that are only 8 pixels apart. For an image of size 224 x 224, it maps to 361 possible attention positions in the image.
The example classification model shown in fig. 2 may perform a 1 x 1 convolution with ReLU activation to encode the image feature representation into a 512-dimensional feature space (what feature is shown in fig. 2). The classification model may then apply another 1 x 1 convolution to produce a 1000-dimensional log-probability tensor for classification. Introducing this 512-dimensional bottleneck can provide less performance improvement on the original BagNet model.
The attention model may comprise an attention network and a glance unit. The attention network may be configured to receive and process image feature tensors (and optionally what features) to produce an intermediate attention representation (illustrated in fig. 2 as "hybrid features"). In particular, as shown in fig. 2, the attention network may include a convolutional network (shown as a "location network") operating on 2048 image feature tensors. As one example, the location network may include six convolutional layers alternating between 3 x 3 convolutional layers and 1 x 1 convolutional layers, each of which is followed by batch normalization and ReLU activation. The dimensions may be reduced every two layers, from 2048 position features to 1024 position features to 512 position features (e.g., features shown as "where"). The linear 1 x 1 convolutional layer can then be used to join and blend what and where features to a tensor with 1024 features (F) (e.g., shown as "blended features").
The glance unit may be configured to, for each of one or more iterations: an intermediate attention representation (e.g. "blending feature") is obtained and a position is generated which may for example correspond to a specific one of the input parts. For each iteration, a hard attention operation may be performed on the position and logarithmic probabilities to produce a prediction for such an iteration.
Specifically, as an example, fig. 3 depicts a block diagram of an example glance unit, according to an example embodiment of the present disclosure. As shown in fig. 3, at each iteration, the glance unit may: an intermediate attention representation (e.g. "hybrid feature") is obtained and the cell states associated with the most recent iteration are obtained. The cell state may identify which portions of the input have been selected as the noted portions in the previous iteration. Next, at each iteration, the glance unit may combine the intermediate attention representation with the unit states associated with the previous iteration to produce a position probability distribution over multiple portions of the input; selecting an noted portion based on the location probability distribution; and updating the cell state for a next iteration based on the noted portion.
In some implementations, the glance unit may be configured to combine the intermediate attention representation and the unit states associated with the previous iteration such that the position probability distribution is virtually zero for the portions that have been selected as the noted portions in the previous iteration.
More specifically, as one example shown in fig. 3, the glance unit may take what and where features F are mixed and output the location to glance at each iteration. The cell may include a 2D state (C t ) This state tracks the accessed location by placing a 1 in the corresponding location in the cell state until iteration t. This element state can be used to prevent the network from returning to the previously seen location. The glance unit may first select the relevant spatial location from F, and then select the characteristic channel based on the relevant location:
where h and w are representations of output features from the representation networkD is the dimension of the hybrid feature and a e R d Is a trainable vector. A larger negative number times the state (e.g) Can be used to mask the previously used location. Next, the glance unit may calculate a weighted sum of the characteristic channels and perform a spatial softmax:
reflecting the policy of the model at the glance position. During testing, the model is located +. >The representation at (a) represents the probability of extracting the logarithm at iteration t in the network. For example, the final prediction may be obtained by averaging the extracted log probabilities over all iterations.
Example training procedure
The models described herein may be trained based on a set of training data that includes example training inputs labeled, for example, with true value classifications. For example, the truth classification may be applied to the input as a whole, rather than to a particular portion of the input. As one example, the ImageNet dataset can be divided into a training subset and a validation subset, which are then used to train and validate the model. For example, a model may be trained on the training subset, and the hyper-parameters may be selected based on the verification subset. All results can then be calculated on a separate subset of tests.
According to aspects of the present disclosure, a three-step training process may be performed using only the training class labels as a supervisor. First, a representation model (e.g., a representation network) may be pre-trained. As one example, a representation model (e.g., a representation network) may be pre-trained by optimizing the following goals:
wherein X is ij ∈R 63×63×3 Is the image block at position (i, j), y target Is a target class, c=1000 is a class number, θ is a representation model parameter, and λ is a hyper parameter. This goal is based solely on the average log probability over all possible locations plus the model weight -regularizing the calculated cross entropy loss.
Second, the attention model may be pre-trained to issue glance positions ordered in descending order of maximum logarithmic probability. For example, the following objectives may be optimized:
wherein the method comprises the steps ofIs the target position of the t-th ranking, i.e. +.>Is the position with the greatest logarithmic probability, andis the location with the least logarithmic probability. Given an input image X ε R 224×224×3 And cell state C t-1 ，Is the model at iteration t for the purpose of noticing the position +.>And the probability given, i.e.)>Wherein the method comprises the steps ofThe parameter η is the weight of the attention model. For this step, one example is set to t=12.
Finally, the entire model can be trained to maximize the expected rewards, where rewards (r e {0,1 }) represent whether the model eventually predicts correctly after 6 glances (t=6). In particular, in some embodiments, the training system may use REINFORCE loss for discrete strategies, cross entropy loss, andregularization. Parameter updates are given by the gradient of the target:
where s=2 such that two tracks i are sampled from the category distribution at a time s The position probability is determined byGiven, b is the average accuracy of the model calculated on each small batch, and X t Representing the image block sampled at iteration t. The effect of summing the b and S monte carlo samples is to reduce the variance in the gradient estimate.
As an example hyper-parameter setting, in each of the above steps, the model may be trained over 120 epochs using a Nesterov momentum of 0.9.
Example devices and systems
Fig. 4A depicts a block diagram of an example computing system 100, according to an example embodiment of the disclosure. The system 100 includes a user computing device 102, a server computing system 130, and a training computing system 150 communicatively coupled by a network 180.
The user computing device 102 may be any type of computing device, such as, for example, a personal computing device (e.g., a notebook computer or desktop), a mobile computing device (e.g., a smart phone or tablet), a game console or controller, a wearable computing device, an embedded computing device, or any other type of computing device.
The user computing device 102 includes one or more processors 112 and memory 114. The one or more processors 112 may be any suitable processing device (e.g., processor core, microprocessor, ASIC, FPGA, controller, microcontroller, etc.) and may be one or more operatively connected processors. Memory 114 may include one or more non-transitory computer-readable storage media, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, and the like, as well as combinations thereof. The memory 114 may store data 116 and instructions 118 that are executed by the processor 112 to cause the user computing device 102 to perform operations.
In some implementations, the user computing device 102 may store or include one or more machine learning models 120. For example, the machine learning model 120 may be or otherwise include various machine learning models, such as a neural network (e.g., a deep neural network) or other types of machine learning models, including nonlinear models and/or linear models. The neural network may include a feed forward neural network, a recurrent neural network (e.g., a long and short term memory recurrent neural network), a convolutional neural network, or other form of neural network. An example machine learning model 120 is discussed with reference to fig. 1-3.
In some implementations, one or more machine learning models 120 may be received from the server computing system 130 over the network 180, stored in the user computing device memory 114, and then used or otherwise implemented by the one or more processors 112. In some implementations, the user computing device 102 can implement multiple parallel instances of a single machine learning model 120 (e.g., to perform parallel classification between multiple instances of different inputs).
Additionally or alternatively, one or more machine learning models 140 may be included in or otherwise stored and implemented by a server computing system 130, the server computing system 130 in communication with the user computing device 102 according to a client-server relationship. For example, the machine learning model 140 may be implemented by the server computing system 130 as part of a web service (e.g., an image classification service). Accordingly, one or more models 120 may be stored and implemented at the user computing device 102 and/or one or more models 140 may be stored and implemented at the server computing system 130.
The user computing device 102 may also include one or more user input components 122 that receive user input. For example, the user input component 122 may be a touch-sensitive component (e.g., a touch-sensitive display screen or touchpad) that is sensitive to touch by a user input object (e.g., a finger or stylus). The touch sensitive component may be used to implement a virtual keyboard. Other example user input components include a microphone, a conventional keyboard, or other means by which a user may provide user input.
The server computing system 130 includes one or more processors 132 and memory 134. The one or more processors 132 may be any suitable processing device (e.g., a processor core, microprocessor, ASIC, FPGA, controller, microcontroller, etc.), and may be one processor or multiple processors operatively connected. Memory 134 may include one or more non-transitory computer-readable storage media, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, and the like, as well as combinations thereof. Memory 134 may store data 136 and instructions 138 that are executed by processor 132 to cause server computing system 130 to perform operations.
In some implementations, the server computing system 130 includes or is otherwise implemented by one or more server computing devices. In instances where the server computing system 130 includes multiple server computing devices, such server computing devices may operate in accordance with a sequential computing architecture, a parallel computing architecture, or some combination thereof.
As described above, the server computing system 130 may store or otherwise include one or more machine learning models 140. For example, model 140 may be or may otherwise include various machine learning models. Example machine learning models include neural networks or other multi-layer nonlinear models. Example neural networks include feed forward neural networks, deep neural networks, recurrent neural networks, and convolutional neural networks. An example model 140 is discussed with reference to fig. 1-3.
The user computing device 102 and/or the server computing system 130 may train the models 120 and/or 140 via interactions with a training computing system 150 communicatively coupled via a network 180. The training computing system 150 may be separate from the server computing system 130 or may be part of the server computing system 130.
The training computing system 150 includes one or more processors 152 and memory 154. The one or more processors 152 may be any suitable processing device (e.g., processor core, microprocessor, ASIC, FPGA, controller, microcontroller, etc.), and may be one processor or multiple processors operatively connected. The memory 154 may include one or more non-transitory computer-readable storage media, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, and the like, as well as combinations thereof. Memory 154 may store data 156 and instructions 158 that are executed by processor 152 to cause training computing system 150 to perform operations. In some implementations, the training computing system 150 includes or is otherwise implemented by one or more server computing devices.
Training computing system 150 may include a model trainer 160 that trains machine learning models 120 and/or 140 stored at user computing device 102 and/or server computing system 130 using various training or learning techniques, such as, for example, back propagation of errors. In some implementations, performing back-propagation of the error may include performing truncated back-propagation over time. Model trainer 160 may perform a variety of generalization techniques (e.g., weight decay, discard, etc.) to enhance the generalization ability of the trained model. In another example, model trainer 160 may perform reinforcement learning techniques in which rewards are provided based on actions selected by applying policies.
In particular, model trainer 160 may train machine learning models 120 and/or 140 based on a set of training data 162. Training data 162 may include inputs labeled with, for example, true values. The input may be an image input, a text input, and/or an audio input. In some implementations, ground truth classification may be applied to the input as a whole (e.g., not to some corresponding portion of the input).
In some implementations, the training examples can be provided by the user computing device 102 if the user has provided permission. Thus, in such embodiments, the model 120 provided to the user computing device 102 may be trained by the training computing system 150 on user-specific data received from the user computing device 102. In some cases, this process may be referred to as a personalized model.
Model trainer 160 includes computer logic for providing the desired functionality. Model trainer 160 may be implemented in hardware, firmware, and/or software that controls a general purpose processor. For example, in some embodiments, model trainer 160 includes program files stored on a storage device, loaded into memory, and executed by one or more processors. In other implementations, model trainer 160 includes one or more sets of computer-executable instructions stored in a tangible computer-readable storage medium, such as a RAM hard disk or an optical or magnetic medium.
The network 180 may be any type of communication network, such as a local area network (e.g., an intranet), a wide area network (e.g., the internet), or some combination thereof, and may include any number of wired or wireless links. In general, communications over network 180 may be carried via any type of wired and/or wireless connection using various communication protocols (e.g., TCP/IP, HTTP, SMTP, FTP), coding or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL).
FIG. 4A illustrates one example computing system that may be used to implement the present disclosure. Other computing systems may also be used. For example, in some implementations, the user computing device 102 may include a model trainer 160 and a training data set 162. In such implementations, the model 120 may be trained and used locally at the user computing device 102. In some of such implementations, the user computing device 102 may implement the model trainer 160 to personalize the model 120 based on user-specific data.
Fig. 4B depicts a block diagram of an example computing device 190, according to an example embodiment of the disclosure. Computing device 190 may be a user computing device or a server computing device.
Computing device 190 includes a plurality of applications (e.g., applications 1 through N). Each application contains its own machine learning library and machine learning model(s). For example, each application may include a machine learning model. Example applications include text messaging applications, email applications, dictation applications, virtual keyboard applications, browser applications, and the like.
As shown in fig. 4B, each application may communicate with a plurality of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components. In some implementations, each application can communicate with each device component using an API (e.g., public API). In some implementations, the API used by each application is specific to that application.
Fig. 4C depicts a block diagram of an example computing device 195, according to an example embodiment of the disclosure. The computing device 195 may be a user computing device or a server computing device.
Computing device 195 includes a plurality of applications (e.g., applications 1 through N). Each application communicates with a central intelligent layer. Example applications include text messaging applications, email applications, dictation applications, virtual keyboard applications, browser applications, and the like. In some implementations, each application can communicate with the central intelligence layer (and model(s) stored therein) using an API (e.g., a common API in all applications).
The central intelligence layer includes a plurality of machine learning models. For example, as shown in fig. 4C, a corresponding machine learning model (e.g., model) may be provided for each application and managed by the central intelligence layer. In other implementations, two or more applications may share a single machine learning model. For example, in some embodiments, the central intelligence layer may provide a single model (e.g., a single model) for all applications. In some implementations, the central intelligence layer is included within or otherwise implemented by the operating system of the computing device 195.
The central intelligence layer may communicate with the central device data layer. The central device data layer may be a centralized repository of data for computing devices 195. As shown in fig. 4C, the central device data layer may communicate with a plurality of other components of the computing device, such as, for example, one or more sensors, a context manager, a device status component, and/or additional components. In some implementations, the central device data layer can communicate with each device component using an API (e.g., a dedicated API).
Example method
Fig. 5 depicts a flowchart of an example method performed in accordance with an example embodiment of the present disclosure. Although fig. 5 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particular order or arrangement shown. The various steps of method 500 may be omitted, rearranged, combined, and/or accommodated in various ways without departing from the scope of the present disclosure.
At 501, a computing system may train a machine learning classification model. For example, the machine learning classification model may have the structure illustrated and discussed with reference to fig. 1, 2, and/or 3.
In one example, training the model at 501 may include training a machine learning classification model in multiple phases. As one example, in a first stage, a computing system may jointly train a representation model and a classification model using a first objective function. For example, the first objective function may evaluate differences between the input truth classification labels and the respective classification data generated for each of the plurality of portions of the input.
As another example, in the second phase, the computing system may train the attention model using a second objective function. For example, the second objective function may evaluate the ability of the attention model to select the noted portion based on a confidence ranking of the respective classification data generated based on the classification model.
As another example, at a third stage subsequent to the first and second stages, the computing system may train the machine-learned classification model using a third objective function. For example, the third objective function may be or include a reward function that provides rewards having a magnitude based on whether the final classification resulting from each prediction matches the input ground truth classification.
After training the model, the computing system may deploy the model to make inferences (e.g., which may include execution of blocks 502-510).
At 502, a computing system may obtain an input comprising a plurality of portions. At 504, the computing system may input an input into the machine learning classification model. At 506, the computing system may receive the respective predictions as outputs of the machine learning model at each of one or more iterations.
At 508, the computing system may generate a final classification based at least in part on the respective predictions received at each of the one or more iterations. As one example, generating the final classification may include averaging the predictions received for one or more iterations to obtain an average prediction; and selecting the category with the highest score from the average predictions as the final classification. Other combinations of individual predictions may also be performed. For example, the highest scoring category may be selected and then only the noted portion associated with this category may be provided for use as the final classification. In yet another example, a second, more powerful classification model may be applied to additional input generated by extracting and aggregating the noted portions (e.g., only selected portions of the original input image) to generate the final classification. The second model may operate on each of the noted portions individually and/or on aggregate additional inputs.
At 510, the computing system may provide hard attention data associated with the final classification for display to the user. For example, the hard attention data may identify an noted portion of the input selected at each of one or more iterations. As one example, fig. 6 illustrates an example input image 600. The final classification of "indian cobra" has been generated from the image 600, wherein hard attention is displayed via the boxes around the relevant noted image portions.
Additional disclosure
The technology discussed herein refers to servers, databases, software applications, and other computer-based systems, as well as actions taken by such systems and information transmitted therefrom and thereto. The inherent flexibility of computer-based systems allows for a variety of possible configurations, combinations, and divisions of tasks and functions between and among components. For example, the processes discussed herein may be implemented using a single device or component or multiple devices or components working in combination. The database and application may be implemented on a single system or distributed across multiple systems. Distributed components may run sequentially or in parallel.
While the subject matter has been described in detail with respect to various specific example embodiments thereof, each example is provided by way of illustration and not limitation of the disclosure. Substitutions, modifications and equivalents will now occur to those skilled in the art upon understanding the foregoing. Accordingly, this disclosure does not preclude inclusion of such modifications, variations and/or additions to the present subject matter as would be readily apparent to one of ordinary skill in the art. For example, features illustrated or described as part of one embodiment can be used with another embodiment to yield a still further embodiment. It is therefore intended that the present disclosure cover such alternatives, modifications, and equivalents.
Although the models described herein have been discussed primarily with reference to classification, they may also be applied to other machine learning tasks, including other computer vision or image processing tasks, such as object detection, facial recognition, or the like.
Claims (16)
1. A computer system that performs classification using hard attention, the computer system comprising:
a machine learning classification model comprising:
a representation model configured to receive and process an input comprising a plurality of portions to generate sets of features for the plurality of portions of the input, respectively;
a classification model configured to receive and process the plurality of sets of features to generate respective classification data for each of the plurality of portions of the input; and
an attention model configured to receive and process the plurality of sets of features to select an noted portion of the plurality of portions of the input at each of one or more iterations;
wherein, at each of one or more iterations, the machine-learned classification model is configured to output a respective prediction comprising respective classification data of the noted portion of the input selected by the attention model at such iteration;
The computer system further includes:
one or more processors; and
one or more non-transitory computer-readable media storing instructions that, when executed by the one or more processors, cause a computer system to perform operations, wherein the operations comprise:
obtaining the input comprising a plurality of portions;
inputting the input into the machine learning classification model; and
at each of one or more iterations, receiving a respective prediction as an output of the machine-learned classification model;
wherein the input comprises an image, and wherein the plurality of portions of the input comprise a plurality of blocks of the image.
2. The computer system of claim 1, wherein the operations further comprise:
generating a final classification, wherein generating the final classification comprises:
averaging the received predictions for one or more iterations to obtain an average prediction; and
and selecting the category with the highest score from the average predictions as a final classification.
3. The computer system of claim 1, wherein the operations further comprise:
hard attention data is provided for display to a user, wherein the hard attention data identifies an noted portion of the input selected at each of one or more iterations.
4. The computer system of claim 1, wherein the attention model comprises:
an attention network configured to receive and process the plurality of sets of features to produce an intermediate attention representation; and
a glance unit configured to, at each of one or more iterations:
obtaining the intermediate attention representation;
obtaining a cell state associated with a most recent iteration, wherein the cell state identifies a portion that has been selected as an noted portion in a previous iteration;
combining the intermediate attention representation and cell states associated with previous iterations to produce a position probability distribution over portions of the input;
selecting an noted portion based on the location probability distribution; and
updating the cell state based on the noted portion for a next iteration.
5. The computer system of claim 4, wherein the attention network is configured to:
receiving an intermediate classification representation generated by the classification model; and
an intermediate attention representation is generated based at least in part on the plurality of sets of features and the intermediate classification representation.
6. The computer system of claim 4 or 5, wherein the glance unit is configured to combine the intermediate attention representation and a unit state associated with a previous iteration such that the position probability distribution is virtually zero for a portion that has been selected as an noted portion in a previous iteration.
7. The computer system of claim 1, wherein the plurality of blocks of the image at least partially overlap.
8. The computer system of claim 1, wherein the input comprises a text input describing text, an audio input describing audio, or a sensor data input describing data generated by one or more sensors.
9. The computer system of claim 1, wherein the representation model comprises a first convolutional neural network, the classification model comprises a second convolutional neural network, and the attention model comprises a third convolutional neural network.
10. The computer system of claim 1, wherein the respective classification data generated by the classification model for each of the plurality of portions of the input comprises a logarithmic probability vector providing a value for each of a plurality of candidate classification labels.
11. The computer system of claim 1, wherein the operations further comprise: training the machine learning classification model in a plurality of phases, wherein training the machine learning classification model in the plurality of phases comprises:
in a first stage, jointly training the representation model and the classification model using a first objective function;
Training the attention model using a second objective function in a second stage; and
in a third stage subsequent to the first stage and the second stage, the machine-learned classification model is trained using a third objective function.
12. The computer system of claim 11, wherein the first objective function evaluates differences between a true value classification label for the input and the respective classification data generated for each of the plurality of portions of the input.
13. The computer system of claim 11 or 12, wherein the second objective function evaluates the ability of the attention model to select the noted portion according to a confidence ranking based on respective classification data produced by the classification model.
14. The computer system of claim 11, wherein the third objective function comprises a reward function that provides rewards having a magnitude based on whether a final classification resulting from each prediction matches a true-value classification for the input.
15. A computer-implemented method, wherein the method is implemented by the computer system of any of claims 1-14.
16. One or more non-transitory computer-readable media storing instructions for execution by the computer system of any one of claims 1-14.
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201962848945P | 2019-05-16 | 2019-05-16 | |
US62/848,945 | 2019-05-16 |
Publications (2)
Publication Number | Publication Date |
---|---|
CN111680721A CN111680721A (en) | 2020-09-18 |
CN111680721B true CN111680721B (en) | 2024-01-02 |
Family
ID=72434136
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202010419464.1A Active CN111680721B (en) | 2019-05-16 | 2020-05-18 | Accurate and interpretable classification with hard attention |
Country Status (2)
Country | Link |
---|---|
US (1) | US11475277B2 (en) |
CN (1) | CN111680721B (en) |
Families Citing this family (23)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2018176000A1 (en) | 2017-03-23 | 2018-09-27 | DeepScale, Inc. | Data synthesis for autonomous control systems |
US11893393B2 (en) | 2017-07-24 | 2024-02-06 | Tesla, Inc. | Computational array microprocessor system with hardware arbiter managing memory requests |
US10671349B2 (en) | 2017-07-24 | 2020-06-02 | Tesla, Inc. | Accelerated mathematical engine |
US11157441B2 (en) | 2017-07-24 | 2021-10-26 | Tesla, Inc. | Computational array microprocessor system using non-consecutive data formatting |
US11409692B2 (en) | 2017-07-24 | 2022-08-09 | Tesla, Inc. | Vector computational unit |
US11561791B2 (en) | 2018-02-01 | 2023-01-24 | Tesla, Inc. | Vector computational unit receiving data elements in parallel from a last row of a computational array |
US11215999B2 (en) | 2018-06-20 | 2022-01-04 | Tesla, Inc. | Data pipeline and deep learning system for autonomous driving |
US11361457B2 (en) | 2018-07-20 | 2022-06-14 | Tesla, Inc. | Annotation cross-labeling for autonomous control systems |
US11636333B2 (en) | 2018-07-26 | 2023-04-25 | Tesla, Inc. | Optimizing neural network structures for embedded systems |
US11562231B2 (en) | 2018-09-03 | 2023-01-24 | Tesla, Inc. | Neural networks for embedded devices |
CN115512173A (en) | 2018-10-11 | 2022-12-23 | 特斯拉公司 | System and method for training machine models using augmented data |
US11196678B2 (en) | 2018-10-25 | 2021-12-07 | Tesla, Inc. | QOS manager for system on a chip communications |
US11816585B2 (en) | 2018-12-03 | 2023-11-14 | Tesla, Inc. | Machine learning models operating at different frequencies for autonomous vehicles |
US11537811B2 (en) | 2018-12-04 | 2022-12-27 | Tesla, Inc. | Enhanced object detection for autonomous vehicles based on field view |
US11610117B2 (en) | 2018-12-27 | 2023-03-21 | Tesla, Inc. | System and method for adapting a neural network model on a hardware platform |
US10997461B2 (en) | 2019-02-01 | 2021-05-04 | Tesla, Inc. | Generating ground truth for machine learning from time series elements |
US11567514B2 (en) | 2019-02-11 | 2023-01-31 | Tesla, Inc. | Autonomous and user controlled vehicle summon to a target |
US10956755B2 (en) | 2019-02-19 | 2021-03-23 | Tesla, Inc. | Estimating object properties using visual image data |
KR20210111557A (en) * | 2020-03-03 | 2021-09-13 | 현대자동차주식회사 | Apparatus for classifying object based on deep learning and method thereof |
CN112116028B (en) * | 2020-09-29 | 2024-04-26 | 联想(北京)有限公司 | Model decision interpretation realization method and device and computer equipment |
CN112232436B (en) * | 2020-11-04 | 2022-08-05 | 杭州智策略科技有限公司 | Interpretable network attack detection method integrating decision tree and hierarchical attention mechanism |
CN113435480B (en) * | 2021-06-07 | 2022-06-21 | 电子科技大学 | Method for improving long tail distribution visual recognition capability through channel sequential switching and self-supervision |
US20230239541A1 (en) * | 2022-01-25 | 2023-07-27 | Dish Network L.L.C. | Adaptive volume control for media output devices and systems |
Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10108902B1 (en) * | 2017-09-18 | 2018-10-23 | CS Disco, Inc. | Methods and apparatus for asynchronous and interactive machine learning using attention selection techniques |
CN109447115A (en) * | 2018-09-25 | 2019-03-08 | 天津大学 | Zero sample classification method of fine granularity based on multilayer semanteme supervised attention model |
CN109544524A (en) * | 2018-11-15 | 2019-03-29 | 中共中央办公厅电子科技学院 | A kind of more attribute image aesthetic evaluation systems based on attention mechanism |
Family Cites Families (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8694449B2 (en) * | 2009-05-29 | 2014-04-08 | Board Of Trustees Of Michigan State University | Neuromorphic spatiotemporal where-what machines |
US9471934B2 (en) * | 2011-02-25 | 2016-10-18 | Nokia Technologies Oy | Method and apparatus for feature-based presentation of content |
SG10201405182WA (en) * | 2014-08-25 | 2016-03-30 | Univ Singapore Technology & Design | Method and system |
US9984062B1 (en) * | 2015-07-10 | 2018-05-29 | Google Llc | Generating author vectors |
GB2545661A (en) * | 2015-12-21 | 2017-06-28 | Nokia Technologies Oy | A method for analysing media content |
WO2020056041A1 (en) * | 2018-09-11 | 2020-03-19 | Pointivo, Inc. | Improvements in data acquistion, processing, and output generation for use in analysis of one or a collection of physical assets of interest |
US11461583B2 (en) * | 2018-11-16 | 2022-10-04 | Uatc, Llc | Binary feature compression for autonomous devices |
US10810243B2 (en) * | 2019-03-08 | 2020-10-20 | Fuji Xerox Co., Ltd. | System and method for generating abstractive summaries of interleaved texts |
-
2020
- 2020-05-13 US US15/931,106 patent/US11475277B2/en active Active
- 2020-05-18 CN CN202010419464.1A patent/CN111680721B/en active Active
Patent Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10108902B1 (en) * | 2017-09-18 | 2018-10-23 | CS Disco, Inc. | Methods and apparatus for asynchronous and interactive machine learning using attention selection techniques |
CN109447115A (en) * | 2018-09-25 | 2019-03-08 | 天津大学 | Zero sample classification method of fine granularity based on multilayer semanteme supervised attention model |
CN109544524A (en) * | 2018-11-15 | 2019-03-29 | 中共中央办公厅电子科技学院 | A kind of more attribute image aesthetic evaluation systems based on attention mechanism |
Non-Patent Citations (1)
Title |
---|
张润岩 ; 孟凡荣 ; 周勇 ; 刘兵 ; .基于注意力与神经图灵机的语义关系抽取模型.计算机应用.2018,(07),第1831-1837页. * |
Also Published As
Publication number | Publication date |
---|---|
US20200364540A1 (en) | 2020-11-19 |
US11475277B2 (en) | 2022-10-18 |
CN111680721A (en) | 2020-09-18 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN111680721B (en) | Accurate and interpretable classification with hard attention | |
Jaafra et al. | Reinforcement learning for neural architecture search: A review | |
Raschka | Python machine learning | |
Kumar | Machine Learning Quick Reference: Quick and essential machine learning hacks for training smart data models | |
JP2023052555A (en) | interactive machine learning | |
Koch et al. | Deep learning of potential outcomes | |
Dudek | Data-driven randomized learning of feedforward neural networks | |
Simsek et al. | Deep learning in smart health: Methodologies, applications, challenges | |
WO2022125181A1 (en) | Recurrent neural network architectures based on synaptic connectivity graphs | |
US10853691B1 (en) | Neural network architecture | |
Seddik et al. | Multi-variable time series decoding with Long Short-Term Memory and mixture attention | |
US20220343134A1 (en) | Convolutional neural network architectures based on synaptic connectivity | |
Zhan | DL 101: Basic introduction to deep learning with its application in biomedical related fields | |
US20210232895A1 (en) | Flexible Parameter Sharing for Multi-Task Learning | |
Pasa et al. | Backpropagation-free graph neural networks | |
US9646056B1 (en) | Rank-ordering and cognitive saliency schema-based selection | |
Zhang et al. | Best-in-class imitation: Non-negative positive-unlabeled imitation learning from imperfect demonstrations | |
Razo | Deep learning methods for engineering applications | |
Voleti | Unfolding the evolution of machine learning and its expediency | |
Gupta et al. | Deep Learning with R Cookbook: Over 45 unique recipes to delve into neural network techniques using R 3.5. x | |
US11941586B2 (en) | System for applying an artificial intelligence engine in real-time to affect course corrections and influence outcomes | |
Li et al. | Glance and glimpse network: A stochastic attention model driven by class saliency | |
US20230342588A1 (en) | Ai system to initiate a concurrent reaction according to predicted user behavior | |
El Mouatasim et al. | Stochastic perturbation of subgradient algorithm for nonconvex deep neural networks | |
US20230353524A1 (en) | Engaging unknowns in response to interactions with knowns |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
GR01 | Patent grant | ||
GR01 | Patent grant |