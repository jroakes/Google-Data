CN115552406A - Synthesizing programs in a spreadsheet programming language - Google Patents
Synthesizing programs in a spreadsheet programming language Download PDFInfo
- Publication number
- CN115552406A CN115552406A CN202180034105.7A CN202180034105A CN115552406A CN 115552406 A CN115552406 A CN 115552406A CN 202180034105 A CN202180034105 A CN 202180034105A CN 115552406 A CN115552406 A CN 115552406A
- Authority
- CN
- China
- Prior art keywords
- program
- candidate
- programs
- spreadsheet
- candidate programs
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/166—Editing, e.g. inserting or deleting
- G06F40/177—Editing, e.g. inserting or deleting of tables; using ruled lines
- G06F40/18—Editing, e.g. inserting or deleting of tables; using ruled lines of spreadsheets
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/30—Creation or generation of source code
- G06F8/31—Programming languages or programming paradigms
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2457—Query processing with adaptation to user needs
- G06F16/24578—Query processing with adaptation to user needs using ranking
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/70—Software maintenance or management
- G06F8/75—Structural analysis for program understanding
Abstract
Techniques are described herein for automatically synthesizing a program that includes one or more functions in a spreadsheet programming language. One method comprises the following steps: receiving a first instance of an input provided in a first cell included in a spreadsheet; automatically synthesizing a plurality of candidate programs, the candidate programs comprising a first set of candidate programs according to the first example, wherein each candidate program in the first set of candidate programs comprises at least one function in a spreadsheet programming language, and when executed, the candidate programs generate an output that matches the first example; ranking the plurality of candidate programs; and storing a highest ranked program of the plurality of candidate programs in association with the first cell in the spreadsheet.
Description
Background
Spreadsheet applications may implement a spreadsheet programming language that includes various functions that operate on data in cells or ranges of cells in a spreadsheet and/or on other inputs to produce various outputs. Non-limiting examples of functions in spreadsheet programming languages include summation, count, average, length, concatenation, maximum, minimum, and lookup functions.
The user may manually enter the data into a spreadsheet that is available programmatically. For example, a user may manually type a last name into a column in a first table, which can be obtained by extracting the last name from a column in a second table storing full names using a function in a spreadsheet programming language instead. However, this manual approach can be an inefficient use of user time and computer storage resources, as it can result in excessive data entry, client device usage, and duplication of the same data in multiple places in the spreadsheet. Additionally, when the underlying data changes in one location (e.g., the user's last name changes), such changes must be manually propagated to all places in the spreadsheet where the data is used.
Users who are not programmers or experienced users of spreadsheet application may not know or be accustomed to using functions in a spreadsheet programming language that may be used to programmatically obtain data to populate certain cells in a spreadsheet. Additionally, the user may not understand how to combine multiple functions in a spreadsheet programming language together to form a program to obtain data to fill certain cells in a spreadsheet. Other users may be able to write their own programs that use multiple functions in a spreadsheet programming language to obtain data, but the user-written programs may be an inefficient solution that requires additional processing and memory resources than a more efficient solution for obtaining the same data. Moreover, manually producing the program can typically take a significant amount of time (e.g., identifying the appropriate function(s), for making trial and error, etc.) and, as a result, can result in excessive use of power resources and/or other computational resources of the client device used to manually produce the program. This situation may be exacerbated when the client device has a relatively small display and/or software keyboard, both of which can extend the amount of time required for the production program.
Disclosure of Invention
Embodiments disclosed herein relate to an automatic composition program that includes at least one function in a spreadsheet programming language and that, when executed, generates output that matches one or more user-provided output examples. For example, user input in a first cell in a spreadsheet can be used as a first example, and a plurality of candidate programs in the underlying spreadsheet programming language that include a first set of candidate programs can be automatically synthesized such that each program in the first set of candidate programs, when executed, generates output that matches the first example. The candidate programs can then be ranked based on one or more criteria, and the highest ranked program can be selected and stored in association with the first cell, e.g., as an alternative to user input.
In some implementations, user input in a second cell in the spreadsheet can be used as a second example, and the automatically synthesized plurality of candidate programs may include a second set of candidate programs that, when executed, generate output that matches the second example. Candidate programs that are not included in both the first set of candidate programs and the second set of candidate programs can be removed from the candidate programs prior to ranking the candidate programs based on the predetermined criteria. In this way, any automatic compositing program that does not produce output according to the two user-provided examples is excluded from the candidate programs. In other implementations, user input in additional cells in the spreadsheet can be used as additional examples, and automatic composition programs that do not produce output according to the additional examples can also be excluded from the candidate programs.
In some implementations, additional cells in the spreadsheet that are related to the first cell can be identified and a highest ranked program can be stored in association with each of the additional cells. For example, additional cells in a column in a particular table in the spreadsheet can be identified as being related to the first cell in the column in the particular table, and the highest ranked program can be stored in association with each of the additional cells in the column.
In some implementations, the automated composition program may use as input data from one or more other cells (e.g., data source cells) present in one or more tables in the spreadsheet. In other embodiments, the automated composition program can use data from an external data source (such as an enterprise knowledge base) as input. The external data source can be included in an external data source map associated with the spreadsheet that includes a reference (e.g., a uniform resource locator or other link) to the external data source.
In some embodiments, the data type of the first example can be determined and execution of programs having output data types that do not match the data type of the first example is avoided. Thus, system resources can be saved by avoiding invoking programs that cannot generate output that matches the user-provided examples.
In some embodiments, the data type of the first example can be determined as a numerical data type, and execution of a program having an output data type that does not match the numerical data type can be avoided. In other embodiments, the data type of the first example can be determined as the date data type, and execution of a program having an output data type that does not match the date data type can be avoided.
In some implementations, the program input data can be obtained from a data source cell in the spreadsheet or from an external data source, and the data type of the program input data can be determined. It is possible to avoid executing a program having an input data type that does not match the data type of the program input data. Accordingly, system resources can be saved by avoiding calling a program that cannot utilize a data type included in program input data as input.
In some embodiments, a range of acceptable output values can be determined and execution of programs having output data values that fall outside the range of acceptable output data values can be avoided. Thus, system resources can be saved by avoiding calling programs that cannot generate outputs that fall within an acceptable range of values.
In some implementations, candidate programs with more frequently used functions can be ranked higher than candidate programs with less frequently used functions. For example, a score can be assigned to each function in the candidate program based on the frequency of use of the functions from the historical spreadsheet data (e.g., frequency of use when manually written); and an overall score for the candidate program can be determined based on the scores assigned to each of the functions in the candidate program. The candidate programs can then be ranked based on the overall score. Thus, the candidate programs that include the more frequently used function(s) may be ranked higher and, therefore, more likely to be selected, utilized, and presented to the user. The more frequently used function(s) of the candidate programs can be more easily understood by the user, which can result in more computationally efficient review and/or editing of these programs.
In some implementations, a shorter, e.g., less total number of usage functions, ranking of candidate programs can precede a candidate program that uses a greater total number of functions. In other embodiments, simpler, e.g., ranking of a smaller number of candidate programs using a lower number of nested function levels can precede using a larger number of candidate programs using a higher number of nested function levels. Thus, system resources can be saved by avoiding the use of overly complex programs.
In some implementations, a corpus of spreadsheets (e.g., a set of classes of spreadsheets created by users of a particular company or organization) can be obtained, and the corpus of spreadsheets can be analyzed to obtain a plurality of program idioms, each program idiom including a plurality of functions in a spreadsheet programming language. Additional candidate programs can be automatically synthesized and included in a first set of candidate programs according to the first example, wherein each of the additional candidate programs includes one or more of the program idioms, and when executed generate an output that matches the first example. In other embodiments, the additional candidate programs can include functions in a spreadsheet programming language in addition to the program idiom. Additionally, in other embodiments, online resources can be analyzed to obtain multiple program idioms in addition to or instead of analyzing the corpus of spreadsheets.
In some additional or alternative embodiments, a first instance of user input provided in a first cell included in a spreadsheet and a second instance of user input provided in a second cell included in the spreadsheet can be received. A first set of programs according to the first example and a second set of programs according to the second example can be automatically synthesized. Each program of the first set of programs, when executed, generates an output matching the first example, and each program of the second set of programs, when executed, generates an output matching the second example. Candidate programs can then be generated by determining the intersection of the first set of programs with the second set of programs. The candidate programs can then be ranked, a highest ranked program of the plurality of candidate programs can be determined, and the user input provided in a first cell in the spreadsheet and the user input provided in a second cell in the spreadsheet can be replaced with the highest ranked program.
It should be appreciated that all combinations of the foregoing concepts and additional concepts described in greater detail herein are contemplated as being part of the subject matter disclosed herein. For example, all combinations of claimed subject matter appearing at the end of this disclosure are contemplated as being part of the subject matter disclosed herein.
Drawings
FIG. 1 schematically depicts an example environment in which selected aspects of the present disclosure may be implemented, according to various embodiments.
FIG. 2 depicts a flowchart illustrating an example method for practicing selected aspects of the present disclosure.
FIG. 3 depicts another flowchart illustrating an example method for practicing selected aspects of the present disclosure.
Fig. 4 depicts an example application of the techniques described herein, in accordance with various embodiments.
Fig. 5 illustrates an example architecture of a computing device.
Detailed Description
FIG. 1 schematically depicts an example environment 100 in which selected aspects of the present disclosure may be implemented, according to various embodiments. Any of the computing devices depicted in fig. 1 or elsewhere in the figures may include logic, such as one or more microprocessors (e.g., a central processing unit or "CPU", graphics processing unit or "GPU") executing computer-readable instructions stored in memory, or other types of logic, such as an application specific integrated circuit ("ASIC"), a field programmable gate array ("FPGA"), etc. Some of the systems depicted in fig. 1, such as spreadsheet system 110, may be implemented using one or more server computing devices, sometimes referred to as a "cloud infrastructure," although this is not required.
In an embodiment, environment 100 may include a spreadsheet system 110, the spreadsheet system 110 implementing a spreadsheet application that may be accessed from various clients (including clients 130-1, \ 8230; \8230;, 130-n that may be included in environment 100) through a thin client interface, such as a web browser (e.g., a web-based spreadsheet application) or any of the program interfaces. In an embodiment, the spreadsheet application implemented by the spreadsheet system 110 may be a software as a service (SaaS) spreadsheet application. The spreadsheet system 110 and clients 130-1, 130-n may communicate via a computer network 160, which computer network 160 may be any suitable network, including a Local Area Network (LAN), a Wide Area Network (WAN), or any combination of the internet. Among other aspects, spreadsheet system 110 may include a program synthesizer 120 configured to perform selected aspects of the present disclosure in order to automatically synthesize a program that includes one or more functions in a spreadsheet programming language for use in a spreadsheet created, modified, and/or viewed using one or more of clients 130-1, 130-1.
Each of the clients 130-1, 130-n may be, for example, a user computing device used by a user to access a spreadsheet application, such as a SaaS spreadsheet application provided by the spreadsheet system 110, e.g., through a web browser, via a spreadsheet application user interface. In an example, a client 130-1, \8230;, 130-n may be a user computing device associated with an individual or entity or organization, such as a business (e.g., financial institution, bank, etc.), non-profit organization, club, university, government institution, or any other organization that uses a spreadsheet application. For example, an enterprise may run a spreadsheet application to create, modify, and/or view one or more spreadsheets to manage financial records, enterprise records, customer lists, and the like.
In various implementations, environment 100 may include clients 130-1, \8230 \ 8230;, 130-n spreadsheet corpora 140-1, \8230;, 140-n, which may be accessed via computer network 160 or another network. Each of the spreadsheet corpuses 140-1, 140-n may include a plurality of spreadsheets created by one or more of the clients 130-1, 130. In an example, spreadsheet corpora 140-1, \8230;, 140-n may include a collection of spreadsheets created, edited, or viewed by users of one or more of clients 130-1, \8230;, 130-n associated with a particular entity or organization.
By way of example, the program synthesizer 120 may be configured to utilize data entered into one or more cells in a spreadsheet to assist the client 130-1, \8230;, 130-n automatic synthesis programs that include one or more functions in a spreadsheet programming language for use in a spreadsheet. For example, program synthesizer 120 may be configured to enable programs including one or more functions in a spreadsheet programming language to be automatically synthesized without any human intervention and, optionally, to present the output of the automatic synthesis program to users of clients 130-1, \8230;, 130-n via a spreadsheet application user interface and, optionally, to present the automatic synthesis program itself to users of clients 130-1, ·.
In various embodiments, environment 100 may include external data sources 150-1, \8230; \8230, 150-m, which store data that clients 130-1, \8230;, 130-n, and/or program synthesizer 120 of spreadsheet system 110 may access via computer network 160 or another network. In an embodiment, data in external data sources 150-1, \8230;, 150-m may be used as input to a program automatically synthesized by program synthesizer 120.
FIG. 2 is a flow diagram illustrating an example method 200 for automatically synthesizing a program that includes one or more functions in a spreadsheet programming language according to embodiments disclosed herein. For convenience, the operations of the flow diagrams are described with reference to a system that operates. The system may include various components of various computer systems, such as one or more components of spreadsheet system 110. Further, while the operations of method 200 are shown in a particular order, this is not intended to be limiting. One or more operations may be reordered, omitted, or added.
At block 210, the system may receive an example(s) of input provided in the cell(s) included in the spreadsheet. In an embodiment, at block 210, the program synthesizer 120 of the spreadsheet system 110 may receive a first instance of an input provided in a first cell included in a spreadsheet. In an example, the program synthesizer 120 of the spreadsheet system 110 may receive a last name (e.g., "LastNameOne") as a first example in response to a user providing the last name as input in a first cell (e.g., B2) in a spreadsheet via a spreadsheet application user interface displayed on one of the clients 130-1, \8230;, 130-n.
Still referring to block 210, the program synthesizer 120 of the spreadsheet system 110 may optionally receive one or more additional examples, such as a second example of an input provided in a second cell included in the spreadsheet. In an embodiment, the program synthesizer 120 may receive any number of examples. In an example, program synthesizer 120 of spreadsheet system 110 may receive another last name (e.g., "lntwoo") as a second example in response to a user providing the last name as input in a second cell (e.g., B3) in the spreadsheet via a spreadsheet application user interface displayed on one of clients 130-1, \8230; \ 8230;, 130-n.
Still referring to FIG. 2, at block 220, the system may automatically synthesize a plurality of candidate programs including a set of candidate program(s) according to the example(s). In an embodiment, at block 220, the program synthesizer 120 of the spreadsheet system 110 may automatically synthesize the first set of candidate programs according to the first example received in block 210 using a dynamic programming based search algorithm. In an embodiment, each candidate program in the first set of candidate programs may include at least one function in a spreadsheet programming language, and upon execution of the candidate program, the candidate program generates an output that matches the first example.
Still referring to block 220, in an embodiment, each candidate program, when executed, may use data stored in one or more data source cells in the spreadsheet and/or data from one or more of the external data sources 150-1, \8230;, 150-m as program input data. For example, in automatically synthesizing candidate programs, program synthesizer 120 may obtain program input data from one or more of external data sources 150-1, \8230;, 150-m and then use the program input data as input to one or more of the candidate programs (e.g., as input to one or more functions in a spreadsheet programming language used in the candidate programs). In embodiments, the external data sources may include an enterprise repository, a database, other spreadsheets, and/or any other data source. In an embodiment, external data sources 150-1, \8230;, 150-m may be included in an external data source map associated with a spreadsheet and including references (e.g., paths, uniform resource locators, links, etc.) to external data sources 150-1, \8230;, 150-m. In an embodiment, the program synthesizer 120 may use a sample-based search technique to handle very large tables and knowledge bases.
In an embodiment, for a given user, the external data sources 150-1, \8230 @, 150-m used by the program synthesizer 120 can include (or be limited to) an enterprise knowledge base linked to the user's account. In an example, the program synthesizer 120 can use all of the enterprise repositories of the organization for a first user, but the program synthesizer 120 can use only a subset of the enterprise repositories of the organization for a second user based on a link with the user's account. In embodiments, the link to the user's account may be included in the external data source map and/or may be based on the user's permissions/rights to the database.
In an embodiment, program synthesizer 120 can first search external data sources 150-1, \8230;, personal and/or enterprise databases included in 150-m to identify or locate program input data, and only search external data sources 150-1, \8230;, other general purpose databases included in 150-m if program input data is not identified (located) in the personal and/or enterprise databases.
Continuing with the previous example, the program synthesizer 120 of the spreadsheet system 110 may automatically synthesize a first set of candidate programs that generate an output that matches the last name received as a first example ("LastNameOne") at block 210. One or more of the candidate programs may use, as program input data, data stored in another cell of the spreadsheet (e.g., data stored in a cell (e.g., cell A2) that is located in a column (e.g., column a) that stores a full name in the same row as the first cell corresponding to the first example). In an example, the program input data "firstNameOne LastNameOne" may be stored in cell A2.
The first candidate program included in the first set of candidate programs may be a program using a "LEN" function of returning a character string length in the spreadsheet programming language, a program using a "FIND" function of returning a position in the text where a character string first appears in the spreadsheet programming language, and a program using a "RIGHT" function of returning a sub-character string from the end of a specified character string in the spreadsheet programming language. For example, the program RIGHT (A2, LEN (A2) -FIND (", A2)) may be included in the first set of candidate programs synthesized at block 210. When the first candidate program is executed, "firstNameOne LastNameOne" is used as program input data, and "LastNameOne" is returned as an output, so the first candidate program generates an output matching the first example.
The second candidate program included in the first set of candidate programs may be a program that uses a "RIGHT" function in the spreadsheet programming language. For example, the program RIGHT (A2, 11) may be included in the first set of candidate programs synthesized at block 210. When the second candidate program is executed, "FirstNameOne LastNameOne" is used as program input data, and "LastNameOne" is returned as an output, so the second candidate program generates an output matching the first example.
Still referring to block 220, in an embodiment, in response to the program synthesizer 120 of the spreadsheet system 110 receiving one or more additional examples at block 210, the program synthesizer 120 may automatically synthesize an additional set of candidate programs according to each of the additional examples using a dynamic programming based search algorithm. In an embodiment, the program synthesizer 120 may synthesize several sets of candidate programs that match the number of examples received at block 210. For example, where the second example is received by the program synthesizer 120 at block 210, the program synthesizer 120 may automatically synthesize a second set of candidate programs according to the second example received at block 210 using a dynamic programming based search algorithm. Additionally, where a third example is received by the program synthesizer 120 at block 210, the program synthesizer 120 may use a dynamic programming based search algorithm to automatically synthesize a third set of candidate programs according to the third example received at block 210, and so on.
Continuing with the previous example, program synthesizer 120 of spreadsheet system 110 may automatically synthesize a second set of candidate programs that generate an output that matches the last name ("LNTwo") received as a second example at block 210. One or more of the candidate programs may use, as program input data, data stored in another cell of the spreadsheet (e.g., data stored in a cell (e.g., cell A3) that is located in a column (e.g., column a) that stores a full name in the same row as a second cell corresponding to the second example). In an example, program input data "FNTwo LNTwo" may be stored in cell A3.
The first candidate program included in the second set of candidate programs may be a program using a "LEN" function that returns a length of a character string in the spreadsheet programming language, a program using a "FIND" function that returns a position in the text where a returned character string first appears in the spreadsheet programming language, and a program using a "RIGHT" function that returns a substring from the end of a specified character string in the spreadsheet programming language. For example, the program RIGHT (A3, LEN (A3) -FIND (", A3)) may be included in the second set of candidate programs synthesized at block 210. When the first candidate program is executed, "FNTwo LNTwo" is used as program input data, and "LNTwo" is returned as an output, so the first candidate program included in the second candidate program set generates an output matching the second example.
The second candidate program included in the second set of candidate programs may be a program that uses a "RIGHT" function in a spreadsheet programming language. For example, the program RIGHT (A3, 5) may be included in the second set of candidate programs synthesized at block 210. When the second candidate program is executed, "FNTwo LNTwo" is used as program input data, and "LNTwo" is returned as an output, so that the second candidate programs included in the second candidate program set generate outputs that match the second example.
Still referring to block 220, in an embodiment, the program synthesizer 120 of the spreadsheet system 110 may synthesize candidate programs in which the number of functions progressively increases as the number of examples received at block 210 increases. In an example, where only one example is received at block 210, the program compositor 120 may use only the LEFT, RIGHT, and MID functions in compositing the candidate program, but where two examples are received at block 210, the program compositor 120 may use the IF and case transform functions in compositing the candidate program.
Still referring to block 220, in an embodiment, the program synthesizer 120 of the spreadsheet system 110 may determine the example data type when automatically synthesizing a plurality of candidate programs including a set of candidate program(s) according to the example(s) and refrain from executing programs having output data types that do not match the example data type. In an example, the program synthesizer 120 can determine the data type of the first example as a numerical data type, and the program synthesizer 120 can avoid executing programs having output data types that do not match the numerical data type. In another example, the program synthesizer 120 may determine the data type of the first example as a date data type, and the program synthesizer 120 may refrain from executing a program having an output data type that does not match the date data type.
Still referring to block 220, in an embodiment, the program synthesizer 120 of the spreadsheet system 110, when automatically synthesizing a plurality of candidate programs including a set of candidate program(s) according to the example(s), may obtain program input data from a data source cell in the spreadsheet or from one of the external data sources 150-1, \8230;, 150-m, determine a data type of the program input data, and avoid executing programs having input data types that do not match the data type of the program input data.
Still referring to block 220, in an embodiment, the program synthesizer 120 of the spreadsheet system 110 may determine a range of acceptable output data values (e.g., 1 to 31 for one day of the month) when automatically synthesizing a plurality of candidate programs including a set of candidate program(s) according to the example(s) and refrain from executing programs having output data values that fall outside the range of acceptable data output values.
Still referring to block 220, in an embodiment, program synthesizer 120 of spreadsheet system 110 may obtain one or more of spreadsheet corpora 140-1, \8230;, 140-n and analyze one or more of spreadsheet corpora 140-1, \8230;, 140-n to obtain a plurality of program idioms (e.g., predefined programs), each program idiom comprising a plurality of functions in a spreadsheet programming language. In other embodiments, the program synthesizer 120 of the spreadsheet system 110 may analyze one or more online resources (e.g., a website, a tutorial, one or more of the external data sources 150-1, \8230;, one or more of 150-m, etc.) to obtain a plurality of program idioms. In an embodiment, in automatically synthesizing a plurality of candidate programs including a set of candidate program(s) according to the example(s), the program synthesizer 120 may automatically synthesize additional candidate programs including at least one program idiom in each of the set of candidate programs and optionally one or more additional functions in the spreadsheet programming language. In an example, the program synthesizer 120 may automatically synthesize additional candidate programs in the first set of candidate programs according to the first example, wherein each of the additional candidate programs, when executed, generates an output that matches the first example.
Still referring to block 220, in an embodiment, in response to receiving one or more additional examples at block 210 by the program synthesizer 120 of the spreadsheet system 110, and after synthesizing a set of candidate programs according to each of the examples received at block 210, the program synthesizer 120 may remove candidate programs that are not included in all of the set of candidate programs. For example, if the program synthesizer 120 receives two examples at block 210, the program synthesizer 120 may remove candidate programs that are not included in both the first set of candidate programs according to the first example and the second set of candidate programs according to the second example. Likewise, if the program synthesizer 120 receives three examples at block 210, the program synthesizer 120 may remove candidate programs that are not included in each of the first set of candidate programs according to the first example, the second set of candidate programs according to the second example, and the third second set of candidate programs according to the third example.
Still referring to block 220, in an embodiment, to determine whether a particular candidate program is included in the set of all candidate programs, the program synthesizer 120 may determine that candidate programs that differ only in cells for program input data are the same candidate program. For example, the program synthesizer 120 may determine that the candidate program RIGHT (A2, LEN (A2) -FIND (", A2)) included in the first set of candidate programs is the same as the candidate program RIGHT (A3, LEN (A3) -FIND (", A3)) included in the second set of candidate programs.
Still referring to block 220, in other embodiments, the program synthesizer 120 may summarize program inputs used in candidate programs before determining whether a particular candidate program is included in the set of all candidate programs. For example, the program synthesizer 120 may summarize the candidate programs RIGHT (A2, LEN (A2) -FIND (", A2)) to RIGHT (a [ current row ], LEN (a [ current row ]) -FIND (", a [ current row ])), and may summarize the candidate programs RIGHT (A3, LEN (A3) -FIND (", A3)) to RIGHT (a [ current row ], LEN (a [ current row ]) -FIND (", a [ current row ])), wherein [ current row ] is a placeholder for a current row in the spreadsheet.
Continuing with the previous example, the program synthesizer 120 of the spreadsheet system 110 may determine that the candidate program RIGHT (a [ current row ], LEN (a [ current row ]) -FIND (", a [ current row ])) is the only candidate program present in both the first set of candidate programs and the second set of candidate programs and then remove all other candidate programs from the set of candidate programs generated at block 220. In other embodiments, program synthesizer 120 may determine that the candidate programs RIGHT (a [ current row ], 11) and RIGHT (a [ current row ], 5) are not present in both the first and second sets of candidate programs and then remove these candidate programs from the set of candidate programs generated at block 220.
Still referring to FIG. 2, at block 230, the system may rank the plurality of candidate programs. In an embodiment, at block 230, the program synthesizer 120 of the spreadsheet system 110 may rank the plurality of candidate programs automatically synthesized at block 220. In an embodiment, the program synthesizer 120 may rank candidate programs with more frequently used functions higher than candidate programs with less frequently used functions (e.g., based on historical spreadsheet data).
Still referring to block 230, in an example, for each of the candidate programs generated in block 220 that remain after removing any candidate programs that are not present in all of the sets from the set of candidate programs generated at block 220, the program synthesizer 120 may assign a score to each of the function(s) in the candidate program. In an example, a relatively higher score may be assigned to functions in the candidate program that are more frequently used in one or more of spreadsheet corpora 140-1, \8230;, 140-n, and a relatively lower score may be assigned to functions in the candidate program that are less frequently used in one or more of spreadsheet corpora 140-1, \8230; \8230, 140-n. The program synthesizer 120 may then determine, for each of the candidate programs, an overall score for the candidate program based on the scores assigned to each of the function(s) in the candidate program. For example, the program synthesizer 120 may determine the total score by averaging the scores assigned to each of the function(s) in the candidate program. Alternatively, the program synthesizer 120 may determine the overall score based on the lowest score of the scores assigned to each of the function(s) in the candidate program. The program synthesizer 120 may then rank the plurality of candidate programs based on the overall score.
Still referring to block 230, in other embodiments, the program synthesizer 120 may rank the candidate program with the lesser total number of used functions ahead of the candidate program with the greater total number of used functions. In other embodiments, the program synthesizer 120 may rank candidate programs that use a smaller number of levels of nested functions before candidate programs that use a larger number of levels of nested functions. In other embodiments, the program synthesizer 120 may rank candidate programs that use functions previously used by a particular user or organization before candidate programs that use functions not previously used by a particular user or organization. In other implementations, the program synthesizer 120 may rank the candidate programs based on a character category-based tokenization mechanism that breaks up input and output strings. In other embodiments, the program synthesizer 120 may rank candidate programs that produce tokenized outputs higher than candidate programs that do not.
Still referring to block 230, in other embodiments, the program synthesizer 120 may rank the candidate programs based on the program input data sources. For example, the program synthesizer 120 may rank the candidate programs that obtain program input data from a spreadsheet or knowledge base within the organization higher than the candidate programs that obtain program input data from a general knowledge base. In another example, the program synthesizer 120 may rank higher candidate programs that obtain program input data from more frequently accessed sources than candidate programs that obtain program input data from less frequently accessed sources. In other implementations, the program synthesizer 120 may rank the candidate programs generated at block 220 using any other criterion or combination of criteria.
Still referring to FIG. 2, at block 240, the system may store the highest ranked program of the plurality of candidate programs in association with the cell(s) in the spreadsheet associated with the example(s). In an embodiment, at block 240, the program synthesizer 120 of the spreadsheet system 110 may store the highest ranked candidate program among the plurality of candidate programs at block 230 in association with the first cell in the spreadsheet (i.e., the cell associated with the first example received at block 210). In an embodiment, a prompt for an automatic composition program (e.g., for the highest-ranked program determined at block 230) may be displayed on a user interface displayed on clients 130-1, \8230; \ 8230;, 130-n at block 240, and storing the highest-ranked program at block 240 may be performed in response to a user indication to accept the automatic composition program (e.g., by selecting a button in the prompt or by entering a keyboard shortcut).
Still referring to block 240, in an embodiment, the program synthesizer 120 may cause the input provided (e.g., by the user) in the first cell (i.e., the first example) to be replaced by the highest ranked program. In an embodiment, while the program synthesizer 120 may replace the input provided in the first cell with the highest ranked program, the value displayed in the first cell (e.g., on the user interface displayed on the client 130-1, \8230;, 130-n) may remain unchanged because the output of the highest ranked program matches the input previously provided (e.g., by the user) in the cell.
Continuing with the previous example, program synthesizer 120 may determine that program RIGHT (a [ current line ], LEN (a [ current line ]) -FIND (", a [ current line ])) is the highest ranked program at block 230, and program synthesizer 120 may store program RIGHT (a [ current line ], LEN (a [ current line ]) -FIND (", a [ current line ])) in association with the first cell in the spreadsheet (i.e., B2, which is the cell associated with the first example received at block 210) replacing the input ("LastNameOne") provided in the first cell. Although the input "LastNameOne" provided in the first cell (i.e., B2) is replaced with the highest-ranked program RIGHT (a [ current line ], LEN (a [ current line ]) -FIND (", a [ current line ]), in an example, the program may output" LastNameOne "so the value displayed in the first cell may remain unchanged.
Still referring to block 240, in an embodiment, in response to receiving one or more additional examples at block 210 by the program synthesizer 120 of the spreadsheet system 110, the program synthesizer 120 of the spreadsheet system 110 may store the highest ranked candidate program among the plurality of candidate programs at block 230 in association with the cell in the spreadsheet associated with the additional examples. For example, where the program synthesizer 120 receives the second example at block 210, the program synthesizer 120 may store the highest ranked candidate program of the plurality of candidate programs at block 230 in association with the second cell in the spreadsheet (i.e., the cell associated with the second example received at block 210).
Still referring to block 240, in an embodiment, the program synthesizer 120 may cause the input provided (e.g., by the user) in the cell associated with the additional example (e.g., the second example, etc.) in the spreadsheet to be replaced with the highest ranked program. In an embodiment, while the program synthesizer 120 may replace the input provided in the cells associated with the additional examples in the spreadsheet with the highest ranked program, the values displayed in the cells associated with the additional examples (e.g., on the user interface displayed on the clients 130-1, \8230;, 130-n) may remain unchanged because the output of the highest ranked program matches the input previously provided (e.g., by the user) in the cell.
Still referring to FIG. 2, at block 250, the system may determine additional cell(s) in the spreadsheet that are related to the cell(s) associated with the example(s). In an embodiment, at block 250, the program synthesizer 120 of the spreadsheet system 110 may determine one or more additional cells in the spreadsheet that are related to the cell(s) associated with the example(s) received at block 210.
Still referring to block 250, in an embodiment, the program synthesizer 120 may determine one or more additional cells based on cells included in the same column of a particular table in the spreadsheet as the cell associated with the example. In other implementations, the program synthesizer 120 may determine one or more additional cells based on cells included in the same row of a particular table in the spreadsheet as the cells associated with the example. In other implementations, the program synthesizer 120 can use any other criteria (e.g., the title or label of a column or row in a spreadsheet, existing data, etc.) to determine one or more additional cells related to the cell associated with the example.
Still referring to FIG. 2, at block 260, the system may store the highest ranked program in association with additional cell(s) in the spreadsheet that are related to the cell(s) associated with the example(s). In an embodiment, at block 260, the program synthesizer 120 of the spreadsheet system 110 may store the highest ranked candidate program of the plurality of candidate programs at block 230 in association with each of the additional cell(s) determined at block 250.
FIG. 3 is a flow diagram illustrating an example method 300 for automatically synthesizing a program including one or more functions in a spreadsheet programming language, according to embodiments disclosed herein. For convenience, the operations of the flow diagrams are described with reference to a system that performs the operations. The system may include various components of various computer systems, such as one or more components of spreadsheet system 110. Further, while the operations of method 300 are shown in a particular order, this is not intended to be limiting. One or more operations may be reordered, omitted, or added.
At block 310, the system may receive a first example of user input provided in a first cell included in a spreadsheet and a second example of user input provided in a second cell included in the spreadsheet. In an embodiment, at block 310, the program synthesizer 120 of the spreadsheet system 110 may receive a first instance of usage input provided in a first cell included in the spreadsheet and a second instance of user input provided in a second cell included in the spreadsheet.
Still referring to FIG. 3, at block 320, the system may automatically synthesize a first set of programs according to the first example and a second set of programs according to the second example. In an embodiment, at block 320, the program synthesizer 120 of the spreadsheet system 110 may automatically synthesize a first set of programs according to the first example received at block 310 using a search algorithm based on dynamic programming and automatically synthesize a second set of programs according to the second example received at block 310. In an embodiment, each program of the first set of programs automatically synthesized by the program synthesizer 120 upon execution of the program generates an output that matches the first example received at block 310, and each program of the second set of programs automatically synthesized by the program synthesizer 120 upon execution of the program generates an output that matches the second example received at block 310. In an embodiment, a program in a first set of programs and a program in a second set of programs may use data stored in one or more cells in a spreadsheet and/or data from one or more of external data sources 150-1, \8230 \ 8230;, 150-m as program input data.
Still referring to FIG. 3, at block 330, the system may generate a candidate program by determining an intersection of the first set of programs and the second set of programs. In an embodiment, at block 330, the program synthesizer 120 of the spreadsheet system 110 may generate candidate programs by determining the intersection of the first set of programs and the second set of programs automatically synthesized at block 320. In an embodiment, prior to determining the intersection of the first set of programs and the second set of programs, the program synthesizer 120 may summarize program inputs (e.g., as described with respect to block 220) used in the programs (e.g., in the first set of programs and the second set of programs). In an embodiment, program synthesizer 120 may then determine programs that exist in both the first set of programs and the second set of programs as an intersection.
Still referring to FIG. 3, at block 340, the system may rank the candidate programs. In an embodiment, at block 340, the program synthesizer 120 of the spreadsheet system 110 may rank the candidate programs generated at block 330. In an embodiment, the program synthesizer 120 may rank the candidate programs based on any of the criteria described with respect to block 230 or based on any other criteria or combination of criteria.
Still referring to FIG. 3, at block 350, the system may determine the highest ranked of the candidate programs. In an embodiment, at block 350, the program synthesizer 120 of the spreadsheet system 110 may determine the highest ranked program among the candidate programs ranked at block 340.
Still referring to FIG. 3, at block 360, the system may replace the user input provided in the first cell in the spreadsheet and the user input provided in the second cell in the spreadsheet with the highest ranked program. In an embodiment, at block 360, the program synthesizer 120 of the spreadsheet system 110 may replace the user input provided in the first cell in the spreadsheet received at block 310 and the user input provided in the second cell in the spreadsheet received at block 310 with the highest ranked program determined at block 350.
Still referring to block 360, in an embodiment, while the program compositor 120 may replace the user input provided in the first cell with the highest ranked program, the value displayed in the first cell (e.g., on the user interface displayed on the client 130-1, \8230;, 130-n) may remain unchanged because the output of the highest ranked program matches the input previously provided (e.g., by the user) in the first cell. Additionally, in an embodiment, while the program synthesizer 120 may replace user input provided in the second cell with the highest ranked program, the value displayed in the second cell (e.g., on the user interface displayed on the client 130-1, \8230; 130-n) may remain unchanged because the output of the highest ranked program matches the input previously provided (e.g., by the user) in the second cell.
Still referring to FIG. 3, at block 370, the system may determine additional cell(s) in the spreadsheet that are related to the first cell and the second cell. In an embodiment, at block 370, the program synthesizer 120 of the spreadsheet system 110 may determine additional cell(s) in the spreadsheet that are related to the first cell associated with the first example received at block 310 and the second cell associated with the second example received at block 310.
Still referring to FIG. 3, at block 380, the system may store the highest-ranked program in association with additional cell(s) in the spreadsheet that are related to the first cell and the second cell. In an embodiment, at block 380, the program synthesizer 120 of the spreadsheet system 110 may store the highest ranked program in association with the additional cell(s) in the spreadsheet that are related to the first cell and the second cell determined at block 370.
FIG. 4 depicts an example of how a program including one or more functions in a spreadsheet programming language may be automatically synthesized. At the bottom, a graphical user interface ("GUI") 400 is depicted that may be used by a spreadsheet application user to view, create, or edit a spreadsheet (e.g., "spreadsheet 1"). In this example, spreadsheet 1 includes a full name column (A) and a last name column (B). The full name column may include various full names.
In some implementations, in response to the user entering data (e.g., a last name, such as "LastNameOne") into the last name column (B) in the second row 420, the program synthesizer 120 of the spreadsheet system 110 may receive the input provided by the user in the first cell (B2) in the spreadsheet as a first example (e.g., as described with respect to block 210 of fig. 2). Additionally, in some implementations, in response to the user entering data (e.g., a last name, such as "lntwos") into the last name column (B) in the third row 430, the program synthesizer 120 of the spreadsheet system 110 can receive as a second example the input provided by the user in the second cell (B3) in the spreadsheet (e.g., as described with respect to block 210 of fig. 2).
Still referring to fig. 4, in some implementations, after automatically synthesizing the plurality of candidate programs (e.g., as described with respect to block 220 of fig. 2) and ranking the plurality of candidate programs (e.g., as described with respect to block 230 of fig. 2), the program synthesizer 120 of the spreadsheet system 110 may store the highest ranked program in association with the first cell (B2) and the second cell (B3) in the spreadsheet (e.g., as described with respect to block 240 of fig. 2). In an embodiment, in response to receiving a selection of a cell, such as the second cell (B3), a highest ranked program (e.g., = Right (A3, LEN (A3) -FIND (", A3))) may be displayed in the formula bar 410 in the GUI 400 stored in association with the cell.
Still referring to fig. 4, in some implementations, the program synthesizer 120 of the spreadsheet system 110 may determine additional cells (i.e., B4 in the third row 440 and B5 in the fourth row 450) in the spreadsheet that are related to the cells associated with the example (i.e., B2 and B3) (e.g., as described with respect to block 250 of fig. 2). In some implementations, after determining additional cells in the spreadsheet that are related to the cell associated with the example, the program synthesizer 120 of the spreadsheet system 110 may store the highest ranked program in association with the additional cells (i.e., B4 in the third row 440 and B5 in the fourth row 450) (e.g., as described with respect to block 260 of fig. 2).
The scenario of fig. 4 is for illustrative purposes only. The techniques described herein may be used to automatically synthesize programs for any number of applications.
FIG. 5 is a block diagram of an example computing device 510 that may optionally be used to perform one or more aspects of the techniques described herein. Computing device 510 typically includes at least one processor 514 that communicates with a number of peripheral devices over a bus subsystem 512. These peripheral devices may include a storage subsystem 524, which includes, for example, a memory subsystem 525 and a file storage subsystem 526, a user interface output device 520, a user interface input device 522, and a network interface subsystem 516. The input and output devices allow user interaction with computing device 510. Network interface subsystem 516 provides an interface to external networks and couples to corresponding interface devices in other computing devices.
The user interface input devices 522 may include a keyboard, a pointing device (such as a mouse, trackball, touchpad, or graphical tablet), a scanner, a touch screen incorporated into a display, an audio input device (such as a voice recognition system, microphone), and/or other types of input devices. In general, use of the term "input device" is intended to include all possible types of devices and ways to input information into computing device 510 or onto a communication network.
User interface output devices 520 may include a display subsystem, a printer, a facsimile machine, or a non-visual display (such as an audio output device). The display subsystem may include a Cathode Ray Tube (CRT), a flat panel device such as a Liquid Crystal Display (LCD), a projection device, or some other mechanism for creating a visual image. The display subsystem may also provide a non-visual display, such as via an audio output device. In general, use of the term "output device" is intended to include all possible types of devices and ways to output information from computing device 510 to a user or to another machine or computing device.
These software modules are typically executed by processor 514 alone or in combination with other processors. Memory subsystem 525 included in storage subsystem 524 can include several memories including a main Random Access Memory (RAM) 530 for storing instructions and data during program execution and a Read Only Memory (ROM) 532 that stores fixed instructions. File storage subsystem 526 is capable of providing permanent storage for program and data files, and may include a hard disk drive, a floppy disk drive along with associated removable media, a CD-ROM drive, an optical drive, or removable media cartridges. Modules implementing the functionality of certain embodiments may be stored by file storage subsystem 526 in storage subsystem 524, or in other machines accessible by processor(s) 514.
The computing device 510 can be of different types, including a workstation, a server, a computing cluster, a blade server, a server farm, or any other data processing system or computing device. Due to the ever-changing nature of computers and networks, the description of computing device 510 depicted in FIG. 5 is intended only as a specific example for purposes of illustrating some embodiments. Many other configurations are possible in which computing device 510 has more or fewer components than the computing device depicted in fig. 5.
By providing a method and system for automatically composing a program, embodiments may address the problem of excessive data entry, client device usage, and duplication of the same data in multiple places in a spreadsheet. In particular, some embodiments may improve the functionality of a computer by providing methods and systems for automatically synthesizing programs that include at least one function in a spreadsheet programming language and that, when executed, generate output that matches one or more user-provided output examples. Thus, by using rules that improve computer-related technology, embodiments allow a computer to perform functions that previously could not be performed by the computer. In addition, embodiments use techniques rooted by definition to computer technology (e.g., spreadsheet programming languages, spreadsheet user interfaces, etc.).
While several embodiments have been described and illustrated herein, various other means and/or structures for performing the function and/or obtaining the results and/or one or more of the advantages described herein may be utilized and each of such variations and/or modifications is considered to be within the scope of the embodiments described herein. More generally, all parameters, dimensions, materials, and configurations described herein are intended to be exemplary, and the actual parameters, dimensions, materials, and/or configurations will depend upon the particular application or applications for which the teachings are used. Those skilled in the art will recognize, or be able to ascertain using no more than routine experimentation, many equivalents to the specific embodiments described herein. It is, therefore, to be understood that the foregoing embodiments are presented by way of example only and that, within the scope of the appended claims and equivalents thereto, embodiments may be practiced otherwise than as specifically described and claimed. Embodiments of the present disclosure are directed to each individual feature, system, article, material, kit, and/or method described herein. In addition, any combination of two or more such features, systems, articles, materials, kits, and/or methods, if such features, systems, articles, materials, kits, and/or methods are not mutually inconsistent, is included within the scope of the present disclosure.
Claims (22)
1. A method implemented by one or more processors, the method comprising:
receiving a first instance of an input provided in a first cell included in a spreadsheet;
automatically synthesizing a plurality of candidate programs, the plurality of candidate programs including a first set of candidate programs according to the first example, wherein each candidate program in the first set of candidate programs includes at least one function in a spreadsheet programming language, and when executed, the candidate program generates an output that matches the first example;
ranking the plurality of candidate programs; and
storing a highest ranked program of the plurality of candidate programs in association with the first cell in the spreadsheet.
2. The method of claim 1, further comprising receiving a second instance of input provided in a second cell included in the spreadsheet, and
wherein the automatically synthesized plurality of candidate programs further comprises a second set of candidate programs according to the second example, wherein each candidate program in the second set of candidate programs comprises at least one function in the spreadsheet programming language, and when the candidate program is executed, the candidate program generates an output that matches the second example.
3. The method of claim 2, further comprising:
removing from the plurality of candidate programs, prior to ranking the plurality of candidate programs, candidate programs not included in both the first set of candidate programs and the second set of candidate programs.
4. The method of any of the preceding claims, further comprising:
determining at least one additional cell in the spreadsheet that is related to the first cell; and
storing the highest ranked program in association with each of the at least one additional cell in the spreadsheet that is related to the first cell.
5. The method of any of the preceding claims, further comprising obtaining program input data from at least one data source cell in the spreadsheet,
wherein at least one candidate program of the first set of candidate programs, when executed, uses the program input data obtained from the at least one data source cell in the spreadsheet as input.
6. The method of any one of the preceding claims, further comprising obtaining program input data from at least one external data source,
wherein at least one candidate program of the first set of candidate programs, when executed, uses the program input data obtained from the at least one external data source as input.
7. The method of claim 6, wherein the at least one external data source comprises an enterprise repository.
8. The method of claim 6, wherein the at least one external data source is included in an external data source map that is associated with the spreadsheet and includes references to a plurality of external data sources.
9. The method of any preceding claim, wherein, in automatically synthesizing the plurality of candidate programs comprising the first set of candidate programs according to the first example:
determining a data type of the first example, an
Refraining from executing a program having an output data type that does not match the data type of the first example.
10. The method of claim 9, wherein:
determining the data type of the first example as a numeric data type or a date data type, an
Avoiding execution of a program having an output data type that does not match the numeric data type or the date data type.
11. The method of any preceding claim, wherein, in automatically synthesizing the plurality of candidate programs comprising the first set of candidate programs according to the first example:
obtaining program input data from data source cells in the spreadsheet or from an external data source,
determining the data type of the program input data, an
Avoiding execution of a program having an input data type that does not match the data type of the program input data.
12. The method of any of the preceding claims, wherein, when automatically synthesizing the plurality of candidate programs including the first set of candidate programs according to the first example:
determining a range of acceptable output data values, an
Avoiding execution of programs having output data values that fall outside of the range of acceptable output data values.
13. The method of any of the preceding claims, wherein when ranking the plurality of candidate programs, candidate programs having more frequently used functions are ranked higher than candidate programs having less frequently used functions.
14. The method of claim 13, wherein ranking the plurality of candidate programs comprises:
for each candidate program of the plurality of candidate programs:
assigning a score to each of a plurality of functions in the candidate program based on the frequency of use of the function; and
determining a total score for the candidate program based on the scores assigned to each of the plurality of functions in the candidate program; and
ranking the plurality of candidate programs based on the overall score.
15. The method of any of claims 1 to 12, wherein in ranking the plurality of candidate programs, the candidate program using the lesser total number of functions is ranked ahead of the candidate program using the greater total number of functions.
16. The method of any of claims 1 to 12, wherein in ranking the plurality of candidate programs, a candidate program using a lesser number of nested function levels is ranked ahead of a candidate program using a greater number of nested function levels.
17. The method of any one of the preceding claims, further comprising:
obtaining a corpus of spreadsheets;
analyzing the corpus of spreadsheets to obtain a plurality of program idioms, each program idiom comprising a plurality of functions in the spreadsheet programming language; and
automatically synthesizing additional candidate programs in the first set of candidate programs according to the first example,
wherein:
each of the additional candidate programs includes at least one of the plurality of program idioms, and when the candidate program is executed, the candidate program generates an output that matches the first example; and
one or more of the additional candidate programs further include at least one function in the spreadsheet programming language.
18. The method of any of the preceding claims, further comprising:
analyzing at least one online resource to obtain a plurality of program idioms, each program idiom comprising a plurality of functions in the spreadsheet programming language; and
automatically synthesizing additional candidate programs in the first set of candidate programs according to the first example, wherein each of the additional candidate programs includes at least one of the plurality of program idioms, and the candidate programs, when executed, generate outputs that match the first example.
19. A method implemented by one or more processors, the method comprising:
receiving a first instance of user input provided in a first cell included in a spreadsheet and a second instance of user input provided in a second cell included in the spreadsheet;
automatically synthesizing a first set of programs according to the first example and a second set of programs according to the second example, wherein each program in the first set of programs generates output that matches the first example when the program is executed, and each program in the second set of programs generates output that matches the second example when the program is executed;
generating a plurality of candidate programs by determining an intersection of the first set of programs and the second set of programs;
ranking the plurality of candidate programs;
determining a highest ranked program of the plurality of candidate programs; and
replacing the user input provided in the first cell in the spreadsheet and the user input provided in the second cell in the spreadsheet with the highest ranked program.
20. A computer program product comprising instructions which, when executed by one or more processors, cause the one or more processors to carry out the method according to any one of claims 1 to 19.
21. A computer-readable storage medium comprising instructions that, when executed by one or more processors, cause the one or more processors to perform the method of any one of claims 1-19.
22. A system comprising a processor, a computer readable memory, one or more computer readable storage media, and program instructions collectively stored on the one or more computer readable storage media, the program instructions executable to perform the method of any of claims 1-19.
Applications Claiming Priority (5)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US202063036898P | 2020-06-09 | 2020-06-09 | |
US63/036,898 | 2020-06-09 | ||
US17/122,290 | 2020-12-15 | ||
US17/122,290 US11481195B2 (en) | 2020-06-09 | 2020-12-15 | Synthesizing programs in a spreadsheet programming language |
PCT/US2021/036647 WO2021252651A1 (en) | 2020-06-09 | 2021-06-09 | Synthesizing programs in a spreadsheet programming language |
Publications (1)
Publication Number | Publication Date |
---|---|
CN115552406A true CN115552406A (en) | 2022-12-30 |
Family
ID=78817443
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202180034105.7A Pending CN115552406A (en) | 2020-06-09 | 2021-06-09 | Synthesizing programs in a spreadsheet programming language |
Country Status (6)
Country | Link |
---|---|
US (2) | US11481195B2 (en) |
EP (1) | EP4133398A1 (en) |
JP (2) | JP7387918B2 (en) |
KR (2) | KR102602636B1 (en) |
CN (1) | CN115552406A (en) |
WO (1) | WO2021252651A1 (en) |
Family Cites Families (23)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JPH08234975A (en) * | 1995-02-28 | 1996-09-13 | Fujitsu Ltd | Program generation device and method |
US6055548A (en) | 1996-06-03 | 2000-04-25 | Microsoft Corporation | Computerized spreadsheet with auto-calculator |
JP2000276535A (en) | 1999-03-23 | 2000-10-06 | Hitachi Information Systems Ltd | Method for automatically generating spreadsheet expression, and recording medium with its processing program recorded thereon |
US6766512B1 (en) * | 2000-11-22 | 2004-07-20 | Furraylogic Ltd. | Methods and systems for generating a structured language model from a spreadsheet model |
US20030226105A1 (en) * | 2002-05-29 | 2003-12-04 | Mattias Waldau | Method in connection with a spreadsheet program |
US8799234B2 (en) | 2010-07-12 | 2014-08-05 | Microsoft Corporation | Semantic entity manipulation using input-output examples |
US7451397B2 (en) | 2004-12-15 | 2008-11-11 | Microsoft Corporation | System and method for automatically completing spreadsheet formulas |
US8539444B2 (en) * | 2008-06-30 | 2013-09-17 | International Business Machines Corporation | System and method for platform-independent, script-based application generation for spreadsheet software |
US8645911B2 (en) * | 2009-04-20 | 2014-02-04 | Exigen Properties, Inc. | Systems, methods and machine readable mediums for defining and executing new commands in a spreadsheet software application |
US8972930B2 (en) | 2010-06-04 | 2015-03-03 | Microsoft Corporation | Generating text manipulation programs using input-output examples |
US10409892B2 (en) | 2011-01-26 | 2019-09-10 | Microsoft Technology Licensing, Llc | Formatting data by example |
US9448772B2 (en) | 2013-03-15 | 2016-09-20 | Microsoft Technology Licensing, Llc | Generating program fragments using keywords and context information |
US10956433B2 (en) | 2013-07-15 | 2021-03-23 | Microsoft Technology Licensing, Llc | Performing an operation relative to tabular data based upon voice input |
US10565222B2 (en) | 2016-09-15 | 2020-02-18 | Oracle International Corporation | Techniques for facilitating the joining of datasets |
US10546055B2 (en) | 2016-10-20 | 2020-01-28 | Microsoft Technology Licensing, Llc | Join with format modification by example |
US10394815B2 (en) | 2016-10-20 | 2019-08-27 | Microsoft Technology Licensing, Llc | Join with predictive granularity modification by example |
US10713429B2 (en) * | 2017-02-10 | 2020-07-14 | Microsoft Technology Licensing, Llc | Joining web data with spreadsheet data using examples |
KR102028665B1 (en) * | 2017-05-04 | 2019-10-04 | 고려대학교 산학협력단 | Method for synthesizing programs |
US10782939B2 (en) | 2017-08-07 | 2020-09-22 | Microsoft Technology Licensing, Llc | Program predictor |
US10685175B2 (en) * | 2017-10-21 | 2020-06-16 | ScienceSheet Inc. | Data analysis and prediction of a dataset through algorithm extrapolation from a spreadsheet formula |
US10831451B2 (en) * | 2017-12-01 | 2020-11-10 | Microsoft Technology Licensing, Llc | Synthesized programming-by-example programs |
US10635414B2 (en) * | 2018-04-24 | 2020-04-28 | Microsoft Technology Licensing, Llc | Output prefix specification transformers |
US11036478B2 (en) * | 2019-08-07 | 2021-06-15 | Sap Se | Automated determination of transformation objects |
-
2020
- 2020-12-15 US US17/122,290 patent/US11481195B2/en active Active
-
2021
- 2021-06-09 EP EP21737273.9A patent/EP4133398A1/en active Pending
- 2021-06-09 KR KR1020227039102A patent/KR102602636B1/en active IP Right Grant
- 2021-06-09 CN CN202180034105.7A patent/CN115552406A/en active Pending
- 2021-06-09 KR KR1020237038784A patent/KR20230159635A/en active Application Filing
- 2021-06-09 JP JP2022564445A patent/JP7387918B2/en active Active
- 2021-06-09 WO PCT/US2021/036647 patent/WO2021252651A1/en unknown
-
2022
- 2022-10-24 US US17/972,327 patent/US20230039841A1/en active Pending
-
2023
- 2023-11-15 JP JP2023194349A patent/JP2024020411A/en active Pending
Also Published As
Publication number | Publication date |
---|---|
KR20230159635A (en) | 2023-11-21 |
US11481195B2 (en) | 2022-10-25 |
EP4133398A1 (en) | 2023-02-15 |
US20230039841A1 (en) | 2023-02-09 |
US20210382697A1 (en) | 2021-12-09 |
KR102602636B1 (en) | 2023-11-16 |
KR20220154257A (en) | 2022-11-21 |
JP2024020411A (en) | 2024-02-14 |
JP2023528166A (en) | 2023-07-04 |
WO2021252651A1 (en) | 2021-12-16 |
JP7387918B2 (en) | 2023-11-28 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US20080249992A1 (en) | Cross-language searching | |
CN111177231A (en) | Report generation method and report generation device | |
US20130038612A1 (en) | Automatic generation of trend charts | |
US9639522B2 (en) | Methods and apparatus related to determining edit rules for rewriting phrases | |
US20230214195A1 (en) | Generation and/or recommendation of tools for automating aspects of computer programming | |
US20070240099A1 (en) | Flexible attribute management in workflow processing systems | |
WO2010058222A2 (en) | Updating data within a business planning tool | |
US20240126982A1 (en) | People suggestion in collaborative online text editors | |
US20190012302A1 (en) | Annotations of textual segments based on user feedback | |
US20020055953A1 (en) | Method and apparatus for handling scenarios in spreadsheet documents | |
US9910924B2 (en) | Disambiguation of online social mentions | |
KR20230057114A (en) | Method and apparatus for deriving keywords based on technical document database | |
US10120858B2 (en) | Query analyzer | |
US9798449B2 (en) | Fuzzy search and highlighting of existing data visualization | |
KR102602636B1 (en) | Program synthesis in a spreadsheet programming language | |
US20210383060A1 (en) | User interface(s) related to synthesizing programs in a spreadsheet programming language | |
US20240119224A1 (en) | Table cell splitting in an online document editor | |
JP2016533563A (en) | Method and system for automatically generating documents from an index | |
US20230098522A1 (en) | Automated categorization of data by generating unity and reliability metrics | |
US20110153627A1 (en) | System and Method of Generating Reusable Distance Measures for Data Processing | |
US20230252006A1 (en) | System for annotating input data using graphs via a user interface | |
US20230350657A1 (en) | Translating large source code using sparse self-attention | |
Lajuni et al. | Exploring Human Capital Training Trends Using Bibliometric Analysis | |
CN114218226A (en) | Report information system | |
CN115408422A (en) | Data template generation method and device |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |