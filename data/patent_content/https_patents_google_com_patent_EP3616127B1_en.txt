EP3616127B1 - Real-time anomaly detection and correlation of time-series data - Google Patents
Real-time anomaly detection and correlation of time-series data Download PDFInfo
- Publication number
- EP3616127B1 EP3616127B1 EP18783321.5A EP18783321A EP3616127B1 EP 3616127 B1 EP3616127 B1 EP 3616127B1 EP 18783321 A EP18783321 A EP 18783321A EP 3616127 B1 EP3616127 B1 EP 3616127B1
- Authority
- EP
- European Patent Office
- Prior art keywords
- time
- series data
- anomalous
- data
- groups
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
- 238000001514 detection method Methods 0.000 title description 85
- 230000002547 anomalous effect Effects 0.000 claims description 203
- 238000000034 method Methods 0.000 claims description 121
- 230000002596 correlated effect Effects 0.000 claims description 110
- 238000012545 processing Methods 0.000 claims description 53
- 238000013179 statistical model Methods 0.000 claims description 19
- 238000005070 sampling Methods 0.000 claims description 18
- 238000004422 calculation algorithm Methods 0.000 claims description 9
- 230000008569 process Effects 0.000 description 30
- 238000003860 storage Methods 0.000 description 10
- 230000006870 function Effects 0.000 description 9
- 238000004891 communication Methods 0.000 description 7
- 238000010586 diagram Methods 0.000 description 7
- 238000004590 computer program Methods 0.000 description 6
- 238000004140 cleaning Methods 0.000 description 5
- 230000002123 temporal effect Effects 0.000 description 5
- 238000013480 data collection Methods 0.000 description 4
- 238000009826 distribution Methods 0.000 description 4
- 230000000875 corresponding effect Effects 0.000 description 3
- 238000011156 evaluation Methods 0.000 description 3
- 238000007619 statistical method Methods 0.000 description 3
- 238000012549 training Methods 0.000 description 3
- 230000008859 change Effects 0.000 description 2
- 230000001186 cumulative effect Effects 0.000 description 2
- 238000005315 distribution function Methods 0.000 description 2
- 230000000694 effects Effects 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 238000013515 script Methods 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 230000002411 adverse Effects 0.000 description 1
- 238000004458 analytical method Methods 0.000 description 1
- 238000013459 approach Methods 0.000 description 1
- 238000013473 artificial intelligence Methods 0.000 description 1
- 230000008901 benefit Effects 0.000 description 1
- 238000004364 calculation method Methods 0.000 description 1
- 230000015556 catabolic process Effects 0.000 description 1
- 238000007418 data mining Methods 0.000 description 1
- 230000003247 decreasing effect Effects 0.000 description 1
- 238000006731 degradation reaction Methods 0.000 description 1
- 238000005516 engineering process Methods 0.000 description 1
- 238000001914 filtration Methods 0.000 description 1
- 238000009499 grossing Methods 0.000 description 1
- 238000012880 independent component analysis Methods 0.000 description 1
- 238000007689 inspection Methods 0.000 description 1
- 238000010801 machine learning Methods 0.000 description 1
- 238000012067 mathematical method Methods 0.000 description 1
- 239000000203 mixture Substances 0.000 description 1
- 238000012544 monitoring process Methods 0.000 description 1
- 238000003058 natural language processing Methods 0.000 description 1
- 230000006855 networking Effects 0.000 description 1
- 238000010606 normalization Methods 0.000 description 1
- 238000005457 optimization Methods 0.000 description 1
- 230000000737 periodic effect Effects 0.000 description 1
- 238000007781 pre-processing Methods 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 238000006467 substitution reaction Methods 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 238000012800 visualization Methods 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F17/00—Digital computing or data processing equipment or methods, specially adapted for specific functions
- G06F17/10—Complex mathematical operations
- G06F17/18—Complex mathematical operations for evaluating statistical data, e.g. average values, frequency distributions, probability functions, regression analysis
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/07—Responding to the occurrence of a fault, e.g. fault tolerance
- G06F11/0703—Error or fault processing not based on redundancy, i.e. by taking additional measures to deal with the error or fault not making use of redundancy in operation, in hardware, or in data representation
- G06F11/0706—Error or fault processing not based on redundancy, i.e. by taking additional measures to deal with the error or fault not making use of redundancy in operation, in hardware, or in data representation the processing taking place on a specific hardware platform or in a specific software environment
- G06F11/0709—Error or fault processing not based on redundancy, i.e. by taking additional measures to deal with the error or fault not making use of redundancy in operation, in hardware, or in data representation the processing taking place on a specific hardware platform or in a specific software environment in a distributed system consisting of a plurality of standalone computer nodes, e.g. clusters, client-server systems
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/07—Responding to the occurrence of a fault, e.g. fault tolerance
- G06F11/0703—Error or fault processing not based on redundancy, i.e. by taking additional measures to deal with the error or fault not making use of redundancy in operation, in hardware, or in data representation
- G06F11/0751—Error or fault detection not based on redundancy
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/07—Responding to the occurrence of a fault, e.g. fault tolerance
- G06F11/0703—Error or fault processing not based on redundancy, i.e. by taking additional measures to deal with the error or fault not making use of redundancy in operation, in hardware, or in data representation
- G06F11/0766—Error or fault reporting or storing
- G06F11/0775—Content or structure details of the error report, e.g. specific table structure, specific error fields
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/07—Responding to the occurrence of a fault, e.g. fault tolerance
- G06F11/0703—Error or fault processing not based on redundancy, i.e. by taking additional measures to deal with the error or fault not making use of redundancy in operation, in hardware, or in data representation
- G06F11/079—Root cause analysis, i.e. error or fault diagnosis
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F18/00—Pattern recognition
- G06F18/20—Analysing
- G06F18/24—Classification techniques
- G06F18/243—Classification techniques relating to the number of classes
- G06F18/2433—Single-class perspective, e.g. one-against-all classification; Novelty detection; Outlier detection
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/14—Network architectures or network communication protocols for network security for detecting or protecting against malicious traffic
- H04L63/1408—Network architectures or network communication protocols for network security for detecting or protecting against malicious traffic by monitoring network traffic
- H04L63/1425—Traffic logging, e.g. anomaly detection
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2218/00—Aspects of pattern recognition specially adapted for signal processing
- G06F2218/12—Classification; Matching
Definitions
- a time series is a series of data points indexed in time order.
- data can be represented as a time series, such as daily temperatures, closing values of financial markets, as well as data relating to network performance such as latency, packet loss or network outages.
- Time series data can include one or more data points that may be anomalous or otherwise outside the normally expected range of values that is commonly associated with the specific variable being represented in the time series. To better understand the nature of the anomalous time series data points, it is advantageous to detect and accurately classify the anomalous data from the expected, non-anomalous data present in the time series.
- Network data can often be represented as a time series. For example, many network performance characteristics can be measured as a function of time such as packet or link latency or the amount of up-time or down-time exhibited by a particular network entity, such as a switch, or by a collection of network entities. Evaluating network time series data for anomaly detection and correlation can rapidly become a complex problem as the overall network size and the dynamic interconnectedness of participating network entities constantly changes. For example, as physical networks become larger with a greater number of interconnections, the likelihood of network outages or failure events may also rise. In many cases, the network failures may be correlated, for example certain sets of links may tend to fail simultaneously due to single points of failures within the network.
- the invention relates to a computer-implemented method for detecting and correlating anomalous time-series data as defined in claim 1.
- the method includes receiving a plurality of time-series data associated with one or more network data streams.
- the method also includes processing the received plurality of time-series data and generating one or more sets of aligned time-series data.
- the method includes detecting anomalous time-stamped data points in each of the one or more sets of aligned time-series data and generating one or more groups of annotated time-series data.
- the annotation identifies one or more specific time-stamped data points as anomalous.
- the method also includes determining the number of anomalous groups of annotated time-series data within all of the one or more groups of annotated time-series data.
- the method includes determining the probability that one or more anomalous groups of annotated time-series data belong to at least one of the groups of annotated time-series data using a generative statistical model and outputting one or more correlated anomalous groups.
- the one or more anomalous groups are determined to be correlated based on the anomalous groups including one or more statistically correlated anomalous time-stamped data points.
- the method also includes processing each of the one or more outputted correlated anomalous groups to generate a detailed statistical report for each correlated anomalous group.
- the method also includes outputting an aggregated statistical report for the one or more correlated anomalous groups.
- the received time-series data includes one or more of binary data types, categorical data types, or real-valued data types.
- the one or more network data streams are received from external sources.
- processing the received plurality of time-series data includes one or more of normalizing the time-series data, inputting missing values, performing time-stamp up-sampling, performing time-stamp down-sampling, and removing noise from the received plurality of time-series data.
- the steps of processing the received plurality of time-series data are performed in parallel.
- the generated one or more sets of aligned time-series data are temporally aligned.
- detecting anomalous time-stamped data points in each of the one or more sets of aligned time-series data is performed using one or more virtual interfaces.
- the one or more virtual interfaces are determined based on the data type of the aligned time-series data.
- the one or more of virtual interfaces may detect anomalous time-stamped data points in parallel.
- determining the number of anomalous groups within all of the one or more annotated sets of time-series data is performed using a locality sensitive hashing algorithm.
- the generative statistical model is a Latent Dirichlet Allocation model.
- determining the probability that one or more anomalous group of annotated time-series data belong to at least one of the groups of annotated time-series data and outputting one or more correlated anomalous groups is performed in parallel.
- the one or more anomalous groups are determined to be not correlated based on the one or more anomalous groups not including one or more statistically correlated anomalous time-stamped data points.
- the detailed statistical report for each correlated anomalous group identifies the Pearson correlation coefficients, Jaccard similarities, and/or Bayes factors of each correlated anomalous group.
- the aggregated statistical report is output to users via one or more application programming interfaces.
- the aggregated statistical report is human-interpretable.
- the aggregated statistical report includes the probabilities of single network entity failures and grouped network entity failures.
- a system for detecting and correlating anomalous time-series data includes a memory storing computer-readable instructions and one or more generative statistical models.
- the system also includes a processor configured to execute the computer-readable instructions.
- the instructions when executed cause the processor to receive a plurality of time-series data associated with one or more network data streams.
- the processors are further configured to process the received plurality of time-series data and generate one or more sets of aligned time-series data.
- the processors are further configured to detect anomalous time-stamped data points in each of the one or more sets of aligned time-series data and generate one or more groups of annotated time-series data.
- the annotation identifies one or more specific time-stamped data points as anomalous.
- the processors are further configured to determine the number of anomalous groups of annotated time-series data within all of the one or more groups of annotated time-series data.
- the processors are further configured to determine the probability that one or more anomalous groups of annotated time-series data belong to at least one of the groups of annotated time-series data using a generative statistical model and output one or more correlated anomalous groups.
- the one or more anomalous groups are determined to be correlated based on the anomalous groups including one or more statistically correlated anomalous time-stamped data points.
- the processors are further configured to process each of the one or more outputted correlated anomalous groups to generate a detailed statistical report for each correlated anomalous group.
- the processors are further configured to output an aggregated statistical report for the one or more correlated anomalous groups.
- the processors are configured to receive time-series data including one or more of binary data types, categorical data types, or real-valued data types. In some implementations, the processors are configured to receive one or more network data streams from external sources. In some implementations, the processors are configured to process the received plurality of time-series data by one or more of normalizing the time-series data, inputting missing values, performing time-stamp up-sampling, performing time-stamp down-sampling, and removing noise from the received plurality of time-series data. In some implementations, the processors are configured to perform the steps of processing the received plurality of time-series data in parallel.
- the processors are configured to generate one or more sets of aligned time-series data that are temporally aligned. In some implementations, the processors are configured to perform detecting anomalous time-stamped data points in each of the one or more sets of aligned time-series data using one or more virtual interfaces. The one or more virtual interfaces are determined based on the data type of the aligned time-series data. In some implementations, the processors are configured with one or more virtual interfaces to detect anomalous time-stamped data points in parallel. In some implementations, the processors are configured to determine the number of anomalous groups within all of the one or more annotated sets of time-series data using a locality sensitive hashing algorithm.
- the generative statistical model is a Latent Dirichlet Allocation model.
- the processors are configured to determine the probability that one or more anomalous groups of annotated time-series data belong to at least one of the groups of annotated time-series data and output one or more correlated anomalous groups parallel.
- the processors are configured to determine that one or more anomalous groups are not correlated based on the one or more anomalous groups not including one or more statistically correlated anomalous time-stamped data points.
- the processors are configured to identify in the detailed statistical report for each correlated anomalous group the Pearson correlation coefficients, Jaccard similarities, and/or Bayes factors of each correlated anomalous group.
- the processors are configured to output the aggregated statistical report to users via one or more application programming interfaces.
- the aggregated statistical report is human-interpretable.
- aggregated statistical report includes the probabilities of single network entity failures and grouped network entity failures.
- not all of the depicted components in each figure may be required, and one or more implementations may include additional components not shown in a figure. Variations in the arrangement and type of the components may be made without departing from the scope of the invention as defined in the appended claims. Additional components, different components, or fewer components may be utilized within the scope of the invention as defined in the appended claims.
- the disclosed system includes a number of components to collect and process network data streams.
- the system components can process the network data streams in real-time by performing the disclosed method of detecting and correlating anomalies from the collected network data streams.
- the system includes a data collection component to receive the network data streams from external data sources and perform data cleaning.
- the data collection component may be a module to normalize data stream values, input missing values, perform timestamp up-sampling or down-sampling, as well as removing noise from the data stream values.
- the data collection component may perform the data cleaning steps in parallel.
- the data collection component outputs the cleaned data as set or groups of aligned time series data.
- the aligned time series data can further be processed by an anomaly detection component.
- the anomaly detection component may include a plurality of virtual interfaces that are configured to perform anomaly detection based on the various data types that are present in the aligned time series data that are associated with the collected network data streams. For example, latency data received in histogram format may be converted to cumulative distribution function curves that are then normalized before calculating the difference in the area under the curve.
- the virtual interface may support processing network outage data as binary variables, as well as processing data which includes real-values, such as conditions where a data spike may indicate an anomaly.
- the anomaly detection component may perform the processing for various data types in parallel.
- the anomaly detection component may annotate specific time-stamped data points within the time-series data determined to be anomalous and may output groups or sets of annotated time series data.
- the sets of annotated (anomalous) time series data are received by a global correlation component and processed by dividing the groups of annotated (anomalous) time series data into smaller groups to avoid cross-group correlation.
- the groups may then be further processed in parallel.
- a locality sensitive hashing function or algorithm is used to determine the number of anomalous groups within or across all of the sets of annotated time series data.
- the number of groups is then provided as an input to a generative statistical model, such as a Latent Dirichlet Allocation (LDA) model, to find the probability that one or more groups of annotated time series data belong to one of the groups of annotated time series data determined by the locality sensitive hashing function.
- LDA Latent Dirichlet Allocation
- the method steps performed by the global correlation component may also be performed in parallel.
- the output of the global correlation component is a grouping of the time series data such that the anomalies within a group are statistically correlated and the anomalies across groups are not statistically correlated.
- network entity groupings may be determined based on temporal failure patterns without requiring exhaustive pairwise time series data comparison.
- Multiple local correlation components process the groups of anomalous time series data generated by the global correlation component in parallel and output statistics for a particular group of anomalous time series data.
- one local correlation component may output statistical data for a particular group of anomalous time series data including, but not limited to, Pearson correlation coefficients, Jaccard similarities, and/or Bayes factors.
- a reporting component aggregates the statistics generated by the local correlation components and presents the data as reports to users via various application programming interfaces (APIs).
- APIs application programming interfaces
- the reports and data included therein are human-interpretable and provide, for a given anomaly group, the probabilities of single and grouped network entity failures which can used for network planning and data-driven optimization of network resources.
- the system and method disclosed herein addresses the problem of automatically detecting and correlating anomalous events from large amounts of time-series data in real-time or near real-time.
- Advances in computer processing, internet technologies, sensor architectures, and communication networking have created an unprecedented data ecosphere that is available for analysis using similarly advanced techniques in data science such as data mining, artificial intelligence, machine learning, classification and visualization.
- Gaining insight from such large volumes of data can be time-consuming, error prone, and is often limited by the configuration of specific tools or resources.
- One approach to help manage the task of evaluating such large volumes of data is to evaluate outliers or anomalous data points that are present in the volumes of data.
- outliers tend to be ignored as minor, unexplainable inconsistencies associated with the data being collected, outliers can also shed important insight into the root cause of the anomalous data. This is especially true in network data, where anomalous time-series data may indicate the failure of a particular network device, network interface or connection between networks or network devices. As the complexity and size of modern sensor and communication networks increase, the inter-connectedness of network elements also increases which means larger volumes of time-series data must be evaluated in order to accurately assess anomalous data points so that the root cause of the anomaly can be better understood.
- network failure data has been represented as binary data values. For example, a binary value for a particular network failure may be associated with each network link. If the link is operational, the value would be "0", if the link has failed, the value would be "1", or vice versa.
- Using only binary values for anomaly detection limits the correlative inferencing such that latent factors, which are associated with network failure events, remain un-discovered and hidden providing reduced insight into the root cause of a particular network failure.
- using real-valued data streams, such as latency or packet loss instead of solely binary data can improve the ability to robustly correlate latent or hidden factors (or network entities) that are likely to behave anomalously.
- Solutions to these problems may be achieved by the disclosed systems and methods whereby network data streams, and corresponding time-series data within the network data streams, may be monitored and evaluated in an automated, near real-time manner to detect anomalous network failure events in order to condense or correlate the failure events into groups of outliers so that the root causes of the failures can be determined.
- This solution can also help improve network planning by identifying critical failure modes and modeling the failure modes accurately such that future occurrences can be more easily associated with a previously determined root cause.
- the disclosed systems and methods enable anomaly detection and correlation to be performed in a way that may afford greater scalability and parallelization compared to traditional techniques because the components of the system may be configured in a distributed architecture as will be described in relation to Figure 2 .
- the distributed architecture enables greater parallel processing of the large volumes of network failure data that may be generated by larger, more complex networks.
- the system and method may also provide more robust processing of noisy, uncorrelated anomaly data by removing or ignoring small individual fluctuations in the data that may distort anomaly correlation.
- the system and method are not limited to detecting and correlating network failure anomalies based solely on binary failure data.
- the system and method function to process real-valued network failure data types in order to more robustly detect and correlate anomalies that may be associated with latent or hidden factors (or network entities).
- Figure 1 illustrates an example functional block diagram of a system 100 for detecting and correlating anomalous time-series data.
- the system100 includes a plurality of time-series data sources, shown as binary time-series data source 105a, categorical time-series data source 105b, and real-value time-series data source 105c.
- the plurality of time-series data sources will each generally be referred to as a time-series data source 105 or collectively as time-series data sources 105.
- the system 100 also includes an anomaly detection and correlation system 110.
- the anomaly detection and correlation system 110 includes a data collector 130 and an anomaly detection sub-system 135.
- the anomaly detection sub-system 135 includes a plurality of detectors 140, such as detector 140a, 140b, and 140c.
- the plurality of detectors 140 will each generally be referred to as detector 140 or collectively as detectors 140.
- the anomaly detection and correlation system 110 also includes an anomaly correlation sub-system 145.
- the anomaly correlation sub-system 145 includes a global correlator 150 and a plurality of local correlators 155, such as local correlators 155a, 155b, and 155c.
- the plurality of local correlators will each generally be referred to as local correlator 155 or collectively as local correlators 155.
- the anomaly detection and correlation system 110 also includes a reporting module 160.
- the system 100 includes a plurality of time-series data sources 105 that store network time-series data.
- the time-series data sources 105 are sources of time-series data.
- the time-series data stored in the time-series data sources 105 is received by the data collector 130 of the anomaly detection and correlation system 110.
- the time-series data sources 105 may store time-series data that may be associated with one or more aspects of a network's performance over a period of time, such as latency values, link status (e.g., the link is functional or non-functional), and/or network entity ownership.
- the time-series data stored in the data sources 105 may include a variety of time-series data types.
- the binary time-series data source 105a may store binary time-series data.
- Binary time-series data may include data, measured as a function of time, that represents one of only two possible values.
- binary time-series data source 105a may store binary time-series data such as link connectivity status as measured over time, where the time-series value of the link connectivity status may be only one of two values (e.g., functional (1) or non-functional (0)) or vice versa.
- the time-series data sources 105 may also include a categorical time-series data source 105b.
- the categorical time-series data source 105b may store categorical time-series data types.
- Categorical time-series data types may include data, measured as a function of time, which represents one of multiple possible values (or categories).
- a categorical time-series data source 105b may store categorical time-series data such as the network operator associated with a particular network entity, such as a switch or router that is deployed in a network.
- the categorical time-series data may represent the name of the network operator associated with a specific network entity.
- the network operator may be a single operator identified from multiple possible operators.
- the time-series data sources 105 may also include a real-value time-series data source 105c.
- the real-value time-series data source 105c may store real-value time-series data.
- Real-value time-series data may include data, measured as a function of time, which represents numerical or real-value data.
- a real-value data-source 105c may store real-value time-series data such as latency values that are associated with a particular link or network device in a packet-switched network, measured in milliseconds.
- the real-value time-series data may include a specific numerical value that has been measured as a function of time.
- the time-series data sources 105 may store time-series data that is associated with one or more network data streams.
- the network data streams may be received from external sources.
- the network data streams may be associated with networks that are located remotely from the time-series data sources 105 or the anomaly detection and correlation system 110.
- the system 100 includes an anomaly detection and correlation system 110.
- the anomaly detection and correlation system 110 includes multiple components that are configured to detect and correlate anomalies in time-series data that is associated with one or more network data streams and received from the time-series data sources 105.
- the anomaly detection and correlation system 110 includes a data collector 130.
- the data collector 130 receives the time-series data from the time-series data sources 105 and prepares the data for anomaly detection and correlation processing.
- the data collector 130 applies a variety of data cleaning methods on the received time-series data in order to prepare the data for efficient detection and correlation processing.
- the data collector may perform methods on the received time-series data including, but not limited to, normalization, missing value imputation, timestamp up- or down-sampling, as well as noise removal.
- the data collector 130 aligns the time-series data temporally and generates one or more sets of temporally aligned time-series data.
- the data collector 130 may fetch the time-series data from the time-series data sources 105 to perform the data cleaning methods. Additional details of the data cleaning methods that are performed by the data collector 130 will be described in more detail in relation to Figure 4 .
- the anomaly detection and correlation system 110 includes an anomaly detection sub-system 135.
- the anomaly detection sub-system 135 receives the temporally aligned time-series data that was generated by the data collector 130 and performs anomaly detection on the aligned time-series data.
- the anomaly detection sub-system 135 includes a plurality of detectors such as detectors 140.
- the detectors 140 may be virtual interfaces for anomaly detection whose implementation corresponds to a particular time-series data type.
- the detectors 140 apply different anomaly detection techniques based on the time-series data type of the aligned time-series data received from the data collector 130 and annotate the anomalous time-stamped data points that were detected.
- the anomaly detection sub-system 135 generates groups of annotated (anomalous) time-series data for output. Additional details of the anomaly detection methods that are performed by the anomaly detection sub-system 135 will be described below in more detail in relation to Figure 5 .
- the anomaly detection and correlation server 110 includes an anomaly correlation sub-system 145.
- the anomaly correlation module 145 receives as input the groups of annotated time-series data and performs correlation techniques on the data to output a grouping of time-series data such that the anomalies within each group are statistically correlated to each other and the anomalies across different groups are not correlated or are substantially less correlated to each other.
- the anomaly correlation sub-system 145 includes a global correlator 150.
- the global correlator 150 divides the inputted groups of annotated time-series data into smaller groups so there is little or no cross-correlation between groups.
- the global correlator 150 performs correlation on the groups using a combination of hashing techniques to determine the number of anomalous groups or number of potentially anomalous groups across all inputted groups of annotated time-series data and subsequently provides the groups as inputs to a generative statistical model, such as a Latent Dirichlet Allocation model in order to determine the probability of each time-series belonging to only one group of the inputted groups of annotated time-series data.
- the output of the generative statistical model is a distribution of network entities that are associated with groups of correlated anomalous time-series data.
- the anomaly correlation sub-system 145 includes a plurality of local correlators, such as local correlators 155a-155c.
- the plurality of local collectors will be generally referred to as local correlators 155.
- the local correlators 155 each receive a respective group of correlated anomalous time-series data output by the global correlator 150.
- the local correlators 155 may perform additional statistical processing on each of the groups of correlated anomalous time-series data.
- the statistical processing performed by the local correlators 155 on the groups of correlated anomalous time-series data and the detected anomalies therein may include, but are not limited to, determining the Pearson correlation coefficient, the Jaccard similarities, and/or the Bayes factors.
- the local correlators 155 may output a detailed statistical report for each group of correlated anomalous time-series data which includes the results of the statistical processing performed by the local correlators 155. Additional details of the global correlator 150 and the local correlator's 155 functionality will be described below in relation to Figures 6 and 7 , respectively.
- a feedback loop may exist between the anomaly correlation sub-system 145 and the anomaly detection sub-system 135 as shown in Figure 1 with the bi-directional arrow connecting the two sub-systems.
- the detectors 140 may be trained using the correlation results generated by the global correlator 150. This feedback loop may enable the detectors 140 to detect anomalies with greater accuracy.
- the anomaly detection and correlation system includes a reporting module, such are reporting module 160.
- the reporting module 160 may aggregate the detailed statistical reports that were output from the local correlators 155 and may generate an aggregated statistical report for the groups of correlated anomalous time-series data.
- the aggregated statistical reports may be made available to users through one or more application programming interfaces (APIs). Additional details of the reporting module 160 functionality will be described below in relation to Figure 7 .
- APIs application programming interfaces
- the system 100 shown in Figure 1 includes an anomaly detection and correlation system 110 including a plurality of components (or modules) and subsystems. Each sub-system may further include one or more components (or modules). As shown in Figure 1 , the plurality of components (or modules) and subsystems in the anomaly detection and correlation system 110 are configured on a single server and may operate in parallel on the single server. As will be shown in Figure 2 , the plurality of components (or modules) and subsystems in the anomaly detection and correlation system 110 may also be configured in an arrangement including distributed servers in order to increase the parallel processing of time-series data for anomaly detection and correlation.
- Figure 2 illustrates an example distributed server architecture for detecting and correlating anomalous time-series data.
- the architecture 200 includes identical components as described in relation to Figure 1 , however, the plurality of components and subsystems shown in Figure 2 are arranged in a configuration of distributed servers that are connected via a network, instead of arranged within a single server as shown in Figure 1 .
- the functionality of the individual components and sub-systems shown in Figure 2 is identical to the functionality of the individual components and sub-systems shown in Figure 1 .
- the architecture 200 shown in Figure 2 includes time-series data sources 105, an anomaly detection system 205, a network 210, a global correlation sub-system 215, and a plurality of local correlation sub-systems 220a-220c.
- the plurality of local correlation sub-systems 220a-c will be collectively referred to as local correlation sub-systems 220.
- the architecture 200 also includes a reporting sub-system 225.
- a plurality of time-series data sources are communicatively coupled to a network, such as the network 210.
- the time-series data sources 105 store time-series data of different data types that may be processed for anomaly detection and correlation.
- the stored time-series data may be transmitted over a network and received by the anomaly detection system 205.
- the anomaly detection system 205 includes a data collector, such as the data collector 130 described in relation to Figure 1 , and an anomaly detection sub-system, such as the anomaly detection sub-system 135 described in relation to Figure 1 .
- the anomaly detection sub-system 135 includes a plurality of detectors 140a-140c, which will each generally be referred to as detector 140 or collectively as detectors 140.
- the anomaly detection system 205 receives time-series data from the time-series data sources 205 over network 210 for processing by the data collector 130 and subsequently by the detectors 140 that are configured in the anomaly detection sub-system 135.
- the architecture 200 includes a network 210.
- the network 210 can include, for example, any one or more of a personal area network (PAN), a local area network (LAN), a campus area network (CAN), a metropolitan area network (MAN), a wide area network (WAN), a broadband network (BBN), the Internet, and the like.
- PAN personal area network
- LAN local area network
- CAN campus area network
- MAN metropolitan area network
- WAN wide area network
- BBN broadband network
- the network can include, but is not limited to, any one or more of the following network topologies, including a bus network, a star network, a ring network, a mesh network, a star-bus network, tree or hierarchical network, and the like.
- the network 210 enables the communication of data to be processed by the distributed servers configured to detect and correlate anomalous time-series data.
- the architecture 200 includes a global correlation sub-system 215.
- the global correlation sub-system 215 includes a global correlator, such as the global correlator 150 described in relation to Figure 1 .
- the global correlation sub-system 215 receives annotated time-series data over the network 210 from the anomaly detection system 205.
- the architecture 200 includes a plurality of local correlation sub-systems 220a-220c.
- the plurality of local correlation sub-systems will each generally be referred to as local correlation sub-system 220 or collectively referred to as local correlation sub-systems 220.
- Each respective local correlation subsystem 220 includes a local correlator 155a-155c, such as local correlator 155a-c described in relation to Figure 1 .
- the plurality of local correlators will each generally be referred to as local correlator 155 or collectively referred to as local correlators 155.
- the local correlation sub-systems 220 receive correlated anomalous groups of time-series data over the network 210 from the respective global correlation sub-system 215.
- the local correlators 155 process the correlated anomalous groups of time-series data to generate detailed statistical data and a detailed statistical report that is associated with each group of correlated anomalous data.
- the local correlation sub-systems 220 may transmit the detailed statistical reports over the network 210 for processing by the reporting sub-system 225.
- the reporting sub-system 225 includes a reporting module, such as reporting module 160 described in relation to Figure 1 .
- the anomaly detection system 205, the global correlation sub-system 215, the local correlation sub-systems 225, and the reporting sub-system 225 are configured on individual servers in a distributed server architecture 200.
- each system and/or sub-system may be configured on a separate server.
- individual systems and/or sub-systems may be combined on one or more servers.
- the individual systems and/or sub-systems may be implemented individually or combined on one or more virtual machines.
- the individual systems and/or sub-systems may be implemented individually or combined in one or more containerized environments.
- the individual systems and/or sub-systems may be implemented in such a distributed architecture 200 to enable greater parallelization of the anomaly detection and correlation processing that is performed by the components, systems, and/or sub-systems.
- the architecture 200 may enable greater scalability and increased processing capabilities than may be achieved in a non-distributed architecture.
- the distributed arrangement of the components, systems, and/or sub-systems as shown in Figure 2 may also allow the detection and correlation processing of anomalous time-series data to occur at or near real-time execution speeds.
- Figure 3 illustrates an example method 300 for detecting and correlating anomalous time-series data performed by the components of the anomaly detection and correlation system 110 shown in Figure 1 .
- the method 300 includes receiving a plurality of time-series data (stage 310).
- the method further includes generating aligned time-series data (stage 320) and generating annotated time-series data (stage 330).
- the method includes outputting correlated anomalous groups of time-series data (stage 340) and generating a detailed statistical report for each correlated anomalous group (stage 350).
- the method further includes outputting an aggregated statistical report (stage 360).
- the method 300 begins by the data collector 130 receiving a plurality of time-series data, such as the time-series data that is stored in the time-series data sources 105 shown in Figure 1 .
- the plurality of received time-series data may include a plurality of time-series data types, such as binary time-series data, categorical time-series data, and/or real-valued time-series data.
- the time-series data may be associated with one or more network data streams that may be received from one or more external sources.
- the data collector 130 may process the received time-series data and may condition or clean the data for subsequent processing by the anomaly detection sub-system 135.
- the data collector 130 temporally aligns the time-series data and generates one or more sets of aligned time-series data.
- the method steps and processing details performed by the data collector 130 on the time-series data received from the plurality of time-series data sources 105 will be described below in relation to Figure 4 .
- the detectors 140 of the anomaly detection sub-system 135 generate annotated time-series data.
- the anomaly detection sub-system 135 receives the sets of aligned time series data generated by the data collector 130 in stage 320 and the plurality of detectors 140 process the received time-series data to detect anomalous time-stamped data points that may be present in each of the one or more sets of aligned time-series data.
- the detectors 140 perform per-time-series anomaly detection to filter out irrelevant data.
- the detectors 140 may annotate anomalous time-stamped data points that are detected in the sets of aligned time-series data and may generate one or more groups of annotated time-series data.
- Each annotated group of time-series data may include one or more individually annotated anomalous time-stamped data points that were found to be present in the plurality of time-stamped data points included in each set of aligned time-stamped data.
- the method steps and processing details performed by the anomaly detection sub-system 135 on the sets of aligned time-series data received from the data collector 130 will be described below in relation to Figure 5 .
- the anomaly correlation sub-system 145 outputs correlated anomalous groups.
- the sets of annotated time-series data generated by the detectors 140 of the anomaly detection sub-system 135 are received by the anomaly correlation sub-system 145 where the global correlator 150 may process the sets of annotated time-series data to determine the statistical correlation of the annotated time-stamped data identified in stage 330.
- the global correlator 150 may divide the sets of annotated time-series data into smaller groups so that there is no or only limited cross-group correlation across the groups.
- the global correlator 150 may determine a number of correlated anomalous groups of annotated time-series data within all of the one or more groups of annotated time-series data received from the detectors 140.
- the global correlator 150 may output the correlated anomalous groups.
- the local correlators 155 of the of the anomaly correlation sub-system 145 generate detailed statistical reports for each of the correlated anomalous groups.
- the local correlators 155 receive the correlated anomalous groups output by the global correlator 150 in stage 340 and process the received time-series data to generate specific statistics for each group of correlated anomalous time-series data.
- the statistical methods applied to each group may include but are not limited to determining the Pearson correlation coefficient, the Jaccard similarity coefficient, and/or the Bayes factors.
- the local correlators 155 may include the results of the applied statistical methods in a detailed statistical report that is associated with the correlated anomalous groups and the anomalies identified therein.
- the local correlators 155 may generate the detailed statistical report for subsequent processing.
- the method steps and processing details performed by the local correlators 155 on the correlated anomalous groups of time-series data received from the global correlator 150 will be described below in relation to Figure 7 .
- the reporting module 160 outputs an aggregated statistical report.
- the reporting module 160 receives the detailed statistical reports generated by the local correlators 155 in stage 350 and aggregates the detailed statistical report data for each correlated anomalous group into an aggregated statistical report.
- the aggregated statistical report may be formatted such that the report is human-interpretable or readily interpreted by a human.
- the aggregated statistical report may include probability data, such as the probability that a single network entity is associated with a network failure.
- the reporting module 160 may output the aggregated statistical report.
- the aggregated statistical report may be output to users via one or more application programming interfaces (APIs).
- APIs application programming interfaces
- Figure 4 illustrates an example method 400 for generating aligned time-series data performed by the data collector 130 shown in Figure 1 .
- the method 400 describes the method steps associated with generating aligned time-series data which was described earlier in relation to stage 320 of Figure 3 .
- the method 400 includes normalizing time-series data (stage 410) and imputing missing values (stage 420).
- the method also includes time-stamp up-sampling or time-stamp down-sampling (stage 430) and noise removal (stage 440).
- the method includes temporally aligning time-series data (stage 450).
- the method 400 begins by the data collector 130 normalizing the time-series data that was received from the plurality of time-series data sources 105.
- the data collector 130 may clean or condition the received data for later processing to ensure more accurate most accurate anomaly detection and correlation.
- the data can be associated with one or more network data streams that may be received from a variety of external sources, the data may be of an undetermined quality.
- the data collector 130 may perform the following method steps to enhance the quality of data so that subsequent anomaly detection and correlation can be performed in the most robust manner possible. For example, in stage 410 the data collector 130 may normalize the received time-series data. Normalizing the time-series data rescales the data from its original range of values so that all values are within the range of 0 and 1.
- the data collector 130 imputes missing values.
- the data collector 130 may process the received time-series data and determine that one or more values are missing. Missing data can have adverse effects on the anomaly detection because the detectors 140 may falsely identify a missing value as an anomalous data point. The result of this false identification may be an over-estimation of the number of anomalous data points present with the received time-series data.
- the data collector 130 may include logic, algorithms or other ways of processing the received time-series data in order to identify and input missing values as appropriate based on the data type associated with the received time-series data.
- the data collector 130 performs time-stamp up-sampling and/or time-stamp down-sampling.
- up-sampling the frequency of the time-series data is increased.
- down-sampling the frequency of the time-series data is decreased.
- the received time-series data may have been collected on an hourly basis. Up-sampling the hourly time-series data to a basis of every 15 minutes would generate a new set of time-series data with extended values corresponding to the new time basis (e.g., every15 minutes).
- Time-stamp up-sampling may produce missing values that must be filled by interpolation or by inputting missing values as described in stage 420.
- Time-stamp down-sampling may require careful selection of the statistical methods used to calculate new aggregated time-series data points, when, for example, the basis of the time-series data is changed from microseconds to seconds.
- the data collector 130 performs noise removal.
- the data collector 130 may process the received time-series data to remove noise from the data using a variety of mathematical methods and/or algorithms. The method selected may depend on the data type of the time-series data, as well as the level of dimensionality of the time-series data. For example, noise may be removed in the received time-series data using median, mean, or trimmed mean absolute deviations. In some implementations, the noise removal may be performed using deconvolution techniques such as Weiner filtering, blind convolution techniques, exponential smoothing, outlier removal or substitution, as well as independent component analysis techniques.
- the data collector temporally aligns time-series data.
- the data collector 130 may process the received time-series data to align the data temporally or in the context of time.
- the data may include variability affecting the time scale on which the data was measured.
- the time axes may have been shifted, compressed, or even expanded in complex, nonlinear ways.
- the scale of the measured time-series data can be inconsistent between sets of the same data. As a result, it is prudent to temporally align the time-series data.
- the data collector 130 may apply logic or algorithms such as the dynamic time warping algorithm used to measure similarity between two temporal sequences in order to align the time-series data in a temporal manner.
- the data collector 130 outputs one or more sets of temporally aligned time-series data to the anomaly detection sub-system 135.
- Figure 5 illustrates an example method 500 for generating annotated time-series data performed by the detectors 140 that may be configured within the anomaly detection sub-system 135 shown in Figure 1 .
- the method 500 describes the method steps associated with generating aligned time-series data which was described earlier in relation to stage 330 of Figure 3 .
- the method 500 includes selecting a virtual interface based on the data type of the aligned time-series data (stage 510).
- the method also includes discretizing the aligned time-series data (stage 520).
- the method includes processing binary data types (stage 530), processing real-value data types (stage 540), and processing categorical data types (stage 550).
- the method also includes annotating anomalous time-stamped data points (stage 560).
- the method 500 begins by the anomaly detection sub-system 135 receiving the sets of aligned time-series data generated by the data collector 130.
- the anomaly detection sub-system 135 may include a plurality of detectors 140.
- Each detector 140 such as detectors 140a-140c shown in Figure 1 , may implement a different virtual interface for performing anomaly detection.
- the different implementations may be based on or correspond to the data types of the time-series data that was received from the time-series data sources 105.
- detector 140a may be configured to detect anomalies within binary time-series data, such as time-series data that is received from the binary time-series data source 105b.
- the anomaly detection sub-system 135 may select the appropriate virtual interface that is configured on a particular detector 140 and upon selection, forward the aligned time-series data to the selected detector 140 for anomaly detection.
- Each detector 140 may implement different processing techniques that correspond to the data type of the received time-series data.
- the anomaly detection sub-system 135 discretizes the aligned time-series data.
- the anomaly detection sub-system 135 may discretize the aligned time-series data in order to convert the aligned time-series data into a smaller number of finite values.
- Discretization typically involves the process of transferring continuous functions, models, equations, and/or data (e.g., time-series data) into discrete counterparts. Discretization further enables the data to be more suitable for numerical evaluation and implementation on computing devices.
- discretizing the aligned time-series data has the effect of emulating network failure data more accurately. For example, as a result of discretization, the original time-series data becomes sparse, consisting mostly of zeroes and the occasional non-zero integer value which may correspond to an anomaly. A variety of discretization pre-processing steps may be used.
- one of the detectors 140 processes binary data types.
- Binary data types may include types of data for which the data values may only represent a "0" or a "1" for more than a certain number of samples.
- the anomaly detection sub-system 135 identifies the appropriate detector 140 that is configured to process the received time-series data type and detect anomalies.
- detector 140a may be configured to process binary time-series data types and detect anomalies. The detector 140a may detect and identify binary time-series data values as an anomaly if the data value is "1".
- the detector 140a may identify the binary time-series data value as not anomalous. Upon detecting anomalous data values in the binary time-series data, the detector 140a may annotate the binary time-stamped data values as anomalous.
- one of the detectors 140 processes real-value data types.
- Real-value data types may include types of data for which the data values may be any numerical value, such as "1.5", “25.6", or "89".
- the anomaly detection sub-system 135 identifies the appropriate detector 140 that is configured to process real-value time-series data.
- the detector 140 configured to process real-value data types may apply specific processing to the real-value time-series data.
- the detector 140 when processing latency histogram values, where the value may represent a real-value data type that is associated with the latency between two network entities (e.g., measured in milliseconds), the detector 140 that has been identified to process real-value time-series data types may first convert the latency histogram data into a cumulative distribution function (CDF) curves representing the real-value latency data. The CDF curves may then be normalized and the detector 140 may then determine the differences in the area under the curve. Upon detecting anomalous data values in the real-value time-series data that are outside the area under the curve, the identified detector 140 may annotate those real-value time-stamped data values as anomalous.
- CDF cumulative distribution function
- one of the detectors 140 processes categorical data types.
- Categorical data types may include types of data for which the data values may be one of multiple selections, such as a categorical data type that identifies network entity ownership. There may be more than two possible network owners associated with a particular network entity. The ownership of the network entity may change over time.
- the anomaly detection sub-system 135 identifies the appropriate detector 140 that is configured to process categorical time-series data. The identified detector 140 may apply specific processing to the categorical time-series data.
- a change in the categorical data value or a value spike at a specific time-stamp may indicate an anomalous data point.
- thresholds can be learned from historical data and used to identify anomalies for future evaluations of data represented as categorical time-series data types. Upon detecting anomalous data values in the categorical time-series data, the identified detector 140 may annotate those categorical time-stamped data values as anomalous.
- the detectors 140 annotate anomalous time-stamped data points.
- anomalous time-stamped data points may be annotated to identify the data points as an anomaly.
- the annotation may be a unique identifier that is applied to anomalous data points.
- the unique identifier may be based on the data type of the anomalous data point in order to distinguish the resulting groups of anomalous data of one data-type from the anomalous groups identified for a different data-type.
- Figure 6 illustrates an example method 600 for correlating anomalous groups of time-series data performed by the global correlator 150 that may be configured within the anomaly correlation sub-system 145 shown in Figure 1 .
- the method 600 describes the method steps associated with outputting correlated anomalous groups which was described earlier in relation to stage 340 of Figure 3 .
- the method 600 includes determining the number of anomalous groups of annotated time-series data within all of the groups of annotated time-series data (stage 610).
- the method includes determining the probability that each anomalous group of annotated time-series data belongs to one of the groups of annotated time-series data using a generative statistical model (stage 620).
- the method also includes determining whether or not the annotated time-series groups are statistically correlated (stage 630).
- the method includes, responsive to determining that the annotated time-series groups are statistically correlated, grouping the statistically correlated anomalous groups (stage 640) and outputting the correlated anomalous groups (stage 650).
- the method also includes, responsive to determining that the annotated time-series groups are not statistically correlated, storing the un-correlated groups (stage 660).
- the global correlator 150 receives the one or more groups of annotated time-series data generated by the local detectors 140 and determines the number of anomalous groups of annotated time-series data within all of the groups of annotated time-series data. In this way, the likelihood of cross-group correlation and inaccurate anomaly correlation may be reduced or avoided.
- the groups may be processed in parallel, for example in a distributed architecture similar to that shown in Figure 2 , configured with multiple anomaly correlation sub-systems 215.
- the global correlator 150 may be configured to utilize a locality sensitive hashing algorithm to detect the number of anomalous groups or potentially anomalous groups across all of the annotated time-series groups received from the detectors 140.
- Locality sensitive hashing serves to reduce the dimensionality of high-dimensional data, such as time-series data. LSH hashes the inputted annotated groups of time-series data so that similarly annotated time-stamps in each group may be mapped or grouped as an anomalous group of annotated time-series data.
- the global correlator 150 determines the probability that each anomalous group of annotated time-series data belongs to one of the groups of annotated time-series data using a generative statistical model.
- the groups of anomalous annotated time-series data which include real-values data types may be transformed into binary or categorical data types by calculating the mean and standard deviations for each group of time-series data. The new value will be how many standard deviations the old value is from the mean.
- the number of groups may be used as an input parameter to the generative statistical model in order to determine the probability that each anomalous group of annotated time-series data belongs to one of the groups of annotated time series data.
- Generative statistical models are models used for generating values that may be associated with a phenomenon, such as anomalous time-series data that is associated with a network failure event.
- the generative statistical models generate values associated with phenomenon that may be observed as well as phenomenon that may be hidden.
- Generative statistical models are typically probabilistic and specify a joint probability distribution over the observed and hidden phenomenon values. Examples of generative statistical models include Gaussian mixture models, hidden Markov models, naive Bayes models and latent Dirichlet allocation models.
- Latent dirichlet allocation (LDA) modeling is a natural language processing technique that can infer latent topics, or groupings of words, that may be likely to occur in a set of documents.
- LDA may also be used for anomaly correlation by considering the discrete time-stamps data points of individual time-series data as "documents" and the network entities that failed within each particular discrete time-stamp data point as the corresponding document "words".
- the LDA model may output a distribution of probabilities of failing network entities per topic, where the entities associated with higher probabilities may be most likely to fail simultaneously over the time period captured by the collection of individual time-series data that was input to the model. In this way, groups of correlated failing network entities may be determined based on temporal failure patterns without performing exhaustive pairwise comparisons of individual time-series data.
- the LDA model assumes that the "documents" or discrete time-stamps data points of individual time-series data will be sparse and include relatively few failures (or detected anomalies) compared to the time-series data that is associated with the total number of network entities.
- LDA models may be trained to explain network failure events that may be associated with independent latent factors.
- Each factor may consist of a set of links connecting one or more network entities that tend to historically fail together.
- a link failure can be attributed to different factors at different time-stamps.
- the LDA model may learn sets of independent and sparse factors, for example each factor may be mapped to a small number of failure patters that occur simultaneously.
- the LDA model may also allow use of domain knowledge. For example, the physical single points of network failures may be modeled explicitly in the LDA training process. In this example, the link-to-factor assignment may be fixed and only the failure probability may be learned from the model.
- the LDA model training process may be implemented using a feedback loop between the anomaly correlation sub-system 145 and the anomaly detection sub-system 135, as shown in Figure 1 as a bi-directional arrow between the two sub-systems.
- the method includes determining whether or not the groups of anomalous time-series data are statistically correlated.
- the global detector 150 may compare the probabilities generated by the LDA model and statistically correlate one or more anomalous groups based on the determination that one or more groups include one or more statistically correlated anomalous time-stamped data points.
- the statistical correlation may be based on one or more probabilities exceeding a pre-determined threshold.
- the global correlator 150 may determine that one or more groups of anomalous time-series data may be statistically correlated based on the output distribution of probabilities for one or more groups exceeding a particular threshold value.
- the global correlator 150 may group the statistically correlated anomalous groups. For example, the global correlator 150 may group correlated anomalous groups of time-series data based on two or more of the correlated anomalous groups based on the two or more groups including the one or more shared network entities that have failed. In some implementations, the global correlator 150 may group correlated anomalous groups based on the two or more correlated groups including similar failure probabilities as determined by the LDA model in stage 620. In some implementations, the global correlator 150 may group correlated anomalous groups based on the two or more correlated groups including failure probabilities that are within a range of pre-determined values.
- the global correlator 150 outputs correlated anomalous groups.
- the global correlator 150 may output the correlated anomalous groups to the plurality of local correlators 155 as shown in Figures 1 or 2 .
- the global correlator 150 may store the statistically un-correlated groups. Groups are considered statistically un-correlated if the global correlator 150 has determined the groups do not include correlated anomalous time-stamp data, or the correlation between the data in the groups is below a pre-selected correlation threshold. In such situations, the global correlator 150 may, for example, store the statistically un-correlated groups in memory or a database. In some implementations, the global correlator 150 may store the statistically un-correlated groups for use in training the LDA model.
- Figure 7 is an example functional block diagram for generating detailed statistical reports for each correlated anomalous group and outputting an aggregated statistical report.
- the diagram 700 includes similar components as described in relation to Figure 1 , however for clarity, the data collector 130 and the anomaly detection subsystem 135 have been removed from the anomaly detection and correlation system 110 in order to describe the processing performed by the local correlators 155 and the reporting module 160 in more detail.
- the anomaly correlation sub-system 145 includes a global correlator 150 and a plurality of correlated anomalous groups 705, e.g., correlated anomalous groups 1-3.
- the anomaly correlation sub-system 145 also includes a local correlator 155a.
- the local correlator 155a includes a plurality of calculators such as the Pearson correlation coefficient calculator 710, the Jaccard similarity coefficient calculator 715, and the Bayes factor calculator 720.
- the local correlators 155, such as local correlator 155a may also be configured to include a variety of other calculators as shown by calculator N 725.
- the anomaly detection and correlation system 110 includes a plurality of detailed statistical reports 730 and a reporting module 160.
- the architecture 700 includes an aggregated statistical report 735, a computing device 740 and a plurality of APIs 745.
- the anomaly correlation sub-system 145 includes a global correlator 150.
- the global correlator 150 may determine the number of anomalous groups and outputs one or more correlated anomalous groups 705.
- the global correlator outputs the correlated anomalous groups as described in relation to method step 340 shown in Figure 3 .
- the global correlator 150 outputs the correlated anomalous groups 705 to the local correlator 155a.
- the anomaly correlation sub-system 145 includes a local correlator 155, such as local correlator 155a.
- the local correlator 155a includes a plurality of calculators that may be configured to generate specific statistical data for each group of correlated anomalous time-series data received from the global correlator 150.
- the local correlator 155a includes a Pearson correlation coefficient calculator 710, a Jaccard similarity coefficient calculator 715, and a Bayes factor calculator 720.
- the local correlators 155, such as the local correlator 155a may also include any number of calculators, shown as calculator N 725, that are appropriate for providing statistics related to a received group of correlated anomalous time-series data 705.
- the Pearson correlation coefficient (PCC) calculator 710 may be used to generate a measure of the linear correlation between two variables.
- the Pearson correlation coefficient calculator 710 may generate a value that is between +1 and -1, where +1 is indicative of a total positive linear correlation, 0 is indicative of no linear correlation, and -1 is indicative of a total negative linear correlation.
- the local correlator 155a may apply the Pearson correlation coefficient calculator 710 to one or more correlated anomalous groups 705 and determine the Pearson correlation coefficient between the correlated anomalous time-stamped data points within each correlated anomalous groups 705.
- the local correlator 155a includes a Jaccard similarity coefficient calculator 715.
- the Jaccard similarity coefficient calculator 715 may generate a statistic used for comparing the similarity and diversity of input sample sets.
- the Jaccard similarity coefficient measures similarities between finite sample sets and is defined as the size of the intersection divided by the size of the union of the sample sets.
- the Jaccard similarity coefficient may be represented as a percentage identifying the degree of similarity between two sets of data. For example, a Jaccard similarity coefficient of 100% indicates that two sets of data share all of the same members, while a Jaccard similarity coefficient of 0% indicates that the two sets share no members.
- a Jaccard similiarty coefficient of 50% indicates that the two sets share half of the members.
- the local correlator 155a may apply the Jaccard correlation coefficient calculator 715 to the correlated anomalous groups 705 received from the global correlator 150 and determine the Jaccard correlation coefficients between the correlated anomalous time-stamped data points within each correlated anomalous groups 705.
- the local correlator 155a includes a Bayes factor calculator 720.
- the Bayes factor calculator 720 may generate a Bayes factor that represents a ratio of the likelihood probability of two competing hypotheses, usually a null hypothesis and an alternative hypothesis.
- the Bayes factor is a way of quantifying support for one particular hypothesis model over another in order to determine which particular hypothesis model is true.
- Various scales have been proposed in literature to assist interpreting the calculated Bayes factor values.
- Bayes factors that range from 1-3 indicate the strength of one particular hypothesis over a second hypothesis is barely worth mentioning
- Bayes factors that range between 3-20 indicate positive evidence that one particular hypothesis is stronger than a second hypothesis
- Bayes factors that range between 20-150 indicate strong evidence that one particular hypothesis is stronger than a second hypothesis.
- the local correlator 155a may apply the Bayes factor calculator 720 to the correlated anomalous groups 705 to determine that the correlated anomalous time-stamped data points within each group are anomalous when compared to other correlated anomalous time-stamped data points within the same group.
- the local correlators 155 such as local correlator 155a, output one or more detailed statistical reports 730 as described in relation to method step 350 shown in Figure 3 .
- the detailed statistical reports 730 generated by the local correlator 155a are subsequently processed by the reporting module 160.
- the reporting module 160 may collect or receive the detailed statistical reports 730 generated for each correlated anomalous group 705 and output an aggregated statistical report 735 for one or more of the correlated anomalous groups.
- the reporting module 160 may output the aggregated statistical report 735 as described in relation to method step 360 shown in Figure 3 .
- the aggregated statistical report 735 may include summarized statistical data for one or more correlated anomalous groups 705.
- the aggregated statistical report 735 may be formatted in a manner that is easily interpreted by humans.
- the aggregated statistical report 735 may include the probability a single network entity may fail, as well as the probabilities a group of network entities may fail.
- the aggregated statistical report 735 indicates that switch X3A has a .75 (or 75%) probability of failing based on the detected anomalies which were correlated in regard to link connectivity data associated with that particular switch.
- a computing device such as computing device 740 may interact with the anomaly detection and correlation system 110 via one or more APIs 745 (e.g., APIs A-C).
- APIs 745 e.g., APIs A-C
- a user of computing device 740 may submit commands via one or more APIs 745 to the anomaly detection and correlation system 110.
- the API 745 may specify computer-readable executable instructions for the reporting module 160 that may be configured in the anomaly detection and correlation system 110 to output the aggregated statistical report 735 to the computing device 740.
- Figure 8 is a block diagram 800 illustrating an example computer system 810 with which the time-series data sources 105, the anomaly detection and correlation system 110 including any components therein of Figure 1 , and the computing device 740 of Figure 7 can be implemented.
- the computer system 810 may be implemented using hardware or a combination of software and hardware, either in a dedicated server, or integrated into another entity, or distributed across multiple entities.
- the computing system 810 includes at least one processor 850 for performing actions in accordance with instructions and one or more memory devices 870 or 875 for storing instructions and data.
- the illustrated example computing system 810 includes one or more processors 850 in communication, via a bus 815, with at least one network interface driver controller 820 with one or more network interface cards 822 connecting to one or more network devices 824, memory 870, and any other devices 880, e.g., an I/O interface.
- the network interface card 822 may have one or more network interface driver ports to communicate with the connected devices or components.
- a processor 850 executes instructions received from memory.
- the processor 850 illustrated incorporates, or is directly connected to, cache memory 875.
- the processor 850 may be any logic circuitry that processes instructions, e.g., instructions fetched from the memory 870 or cache 875.
- the processor 850 is a microprocessor unit or special purpose processor.
- the computing device 810 may be based on any processor, or set of processors, capable of operating as described herein.
- the processor 850 may be a single core or multi-core processor.
- the processor 850 may be multiple processors.
- the processor 850 can be configured to run multi-threaded operations.
- the processor 850 may host one or more virtual machines or containers, along with a hypervisor or container manager for managing the operation of the virtual machines or containers. In such implementations, the methods shown and described in Figures 3 - 7 can be implemented within the virtualized or containerized environments provided on the processor 850.
- the memory 870 may be any device suitable for storing computer readable data.
- the memory 870 may be a device with fixed storage or a device for reading removable storage media. Examples include all forms of non-volatile memory, media and memory devices, semiconductor memory devices (e.g., EPROM, EEPROM, SDRAM, and flash memory devices), magnetic disks, magneto optical disks, and optical discs (e.g., CD ROM, DVD-ROM, and Blu-ray ® discs).
- a computing system 810 may have any number of memory devices 870.
- the memory 870 supports virtualized or containerized memory accessible by virtual machine or container execution environments provided by the computing system 810.
- the cache memory 875 is generally a form of computer memory placed in close proximity to the processor 850 for fast read times. In some implementations, the cache memory 875 is part of, or on the same chip as, the processor 850. In some implementations, there are multiple levels of cache 875, e.g., L2 and L3 cache layers.
- the network interface driver controller 820 manages data exchanges via the network interface driver 822 (also referred to as network interface driver ports).
- the network interface driver controller 820 handles the physical and data link layers of the OSI model for network communication. In some implementations, some of the network interface driver controller's tasks are handled by the processor 850. In some implementations, the network interface driver controller 820 is part of the processor 850.
- a computing system 810 has multiple network interface driver controllers 820.
- the network interface driver ports configured in the network interface card 822 are connection points for physical network links.
- the network interface controller 820 supports wireless network connections and an interface port associated with the network interface card 822 is a wireless receiver/transmitter.
- a computing device 810 exchanges data with other network devices 824 via physical or wireless links that interface with network interface driver ports configured in the network interface card 822.
- the network interface controller 820 implements a network protocol such as Ethernet.
- the other network devices 824 are connected to the computing device 810 via a network interface driver port included in the network interface card 822.
- the other network devices 824 may be peer computing devices, network devices, or any other computing device with network functionality.
- a first network device 824 may be a network device such as a hub, a bridge, a switch, or a router, connecting the computing device 810 to a data network such as the Internet or network 210 shown in Figure 2 .
- the other devices 880 may include an I/O interface, external serial device ports, and any additional co-processors.
- a computing system 810 may include an interface (e.g., a universal serial bus (USB) interface) for connecting input devices (e.g., a keyboard, microphone, mouse, or other pointing device), output devices (e.g., video display, speaker, or printer), or additional memory devices (e.g., portable flash drive or external media drive).
- a computing device 800 includes an additional device 880 such as a coprocessor, e.g., a math co-processor can assist the processor 850 with high precision or complex calculations.
- Implementations of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software embodied on a tangible medium, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Implementations of the subject matter described in this specification can be implemented as one or more computer programs embodied on a tangible medium, i.e., one or more modules of computer program instructions, encoded on one or more computer storage media for execution by, or to control the operation of, a data processing apparatus.
- a computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them.
- the computer storage medium can also be, or be included in, one or more separate components or media (e.g., multiple CDs, disks, or other storage devices).
- the computer storage medium may be tangible and non-transitory.
- the operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
- the operations may be executed within the native environment of the data processing apparatus or within one or more virtual machines or containers hosted by the data processing apparatus.
- a computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment.
- a computer program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code).
- a computer program can be deployed to be executed on one computer or on multiple computers or one or more virtual machines or containers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- Examples of communication networks include a local area network ("LAN”) and a wide area network (“WAN”), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
- the processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output.
- the processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit).
- references to "or” may be construed as inclusive so that any terms described using “or” may indicate any of a single, more than one, and all of the described terms.
- the labels “first,” “second,” “third,” and so forth are not necessarily meant to indicate an ordering and are generally used merely to distinguish between like or similar items or elements.
Description
- A time series is a series of data points indexed in time order. A wide variety of data can be represented as a time series, such as daily temperatures, closing values of financial markets, as well as data relating to network performance such as latency, packet loss or network outages. Time series data can include one or more data points that may be anomalous or otherwise outside the normally expected range of values that is commonly associated with the specific variable being represented in the time series. To better understand the nature of the anomalous time series data points, it is advantageous to detect and accurately classify the anomalous data from the expected, non-anomalous data present in the time series.
- Network data can often be represented as a time series. For example, many network performance characteristics can be measured as a function of time such as packet or link latency or the amount of up-time or down-time exhibited by a particular network entity, such as a switch, or by a collection of network entities. Evaluating network time series data for anomaly detection and correlation can rapidly become a complex problem as the overall network size and the dynamic interconnectedness of participating network entities constantly changes. For example, as physical networks become larger with a greater number of interconnections, the likelihood of network outages or failure events may also rise. In many cases, the network failures may be correlated, for example certain sets of links may tend to fail simultaneously due to single points of failures within the network. Similarly, latencies between large groups of endpoints pairs could increase simultaneously due to the degradation of shared portions of their path(s). Evaluating streams of network data in real-time to identify network failure events would greatly benefit network efficiency and operation, however doing so can be difficult because the network data often includes noise, missing values, and/or inconsistent time granularity. In addition, real-time monitoring and evaluation involves processing extremely large amounts of network data, which can be difficult to scale as the size and complexity of modem network infrastructures grow.
- Document
US 7 363 656 B2 (MAU NETWORKS INC [US]) discloses a system for detecting network intrusions and other conditions in a network. - According to one aspect, the invention relates to a computer-implemented method for detecting and correlating anomalous time-series data as defined in
claim 1. The method includes receiving a plurality of time-series data associated with one or more network data streams. The method also includes processing the received plurality of time-series data and generating one or more sets of aligned time-series data. The method includes detecting anomalous time-stamped data points in each of the one or more sets of aligned time-series data and generating one or more groups of annotated time-series data. The annotation identifies one or more specific time-stamped data points as anomalous. The method also includes determining the number of anomalous groups of annotated time-series data within all of the one or more groups of annotated time-series data. The method includes determining the probability that one or more anomalous groups of annotated time-series data belong to at least one of the groups of annotated time-series data using a generative statistical model and outputting one or more correlated anomalous groups. The one or more anomalous groups are determined to be correlated based on the anomalous groups including one or more statistically correlated anomalous time-stamped data points. The method also includes processing each of the one or more outputted correlated anomalous groups to generate a detailed statistical report for each correlated anomalous group. The method also includes outputting an aggregated statistical report for the one or more correlated anomalous groups. - In some implementations, the received time-series data includes one or more of binary data types, categorical data types, or real-valued data types. In some implementations, the one or more network data streams are received from external sources. In some implementations, processing the received plurality of time-series data includes one or more of normalizing the time-series data, inputting missing values, performing time-stamp up-sampling, performing time-stamp down-sampling, and removing noise from the received plurality of time-series data. In some implementations, the steps of processing the received plurality of time-series data are performed in parallel. In some implementations, the generated one or more sets of aligned time-series data are temporally aligned. In some implementations, detecting anomalous time-stamped data points in each of the one or more sets of aligned time-series data is performed using one or more virtual interfaces. The one or more virtual interfaces are determined based on the data type of the aligned time-series data. In some implementations, the one or more of virtual interfaces may detect anomalous time-stamped data points in parallel. In some implementations, determining the number of anomalous groups within all of the one or more annotated sets of time-series data is performed using a locality sensitive hashing algorithm. In some implementations, the generative statistical model is a Latent Dirichlet Allocation model. In some implementations, determining the probability that one or more anomalous group of annotated time-series data belong to at least one of the groups of annotated time-series data and outputting one or more correlated anomalous groups is performed in parallel. In some implementations, the one or more anomalous groups are determined to be not correlated based on the one or more anomalous groups not including one or more statistically correlated anomalous time-stamped data points. In some implementations, the detailed statistical report for each correlated anomalous group identifies the Pearson correlation coefficients, Jaccard similarities, and/or Bayes factors of each correlated anomalous group. In some implementations, the aggregated statistical report is output to users via one or more application programming interfaces. In some implementations, the aggregated statistical report is human-interpretable. In some implementations, the aggregated statistical report includes the probabilities of single network entity failures and grouped network entity failures.
- According to certain aspects of the present disclosure, a system for detecting and correlating anomalous time-series data is provided. The system includes a memory storing computer-readable instructions and one or more generative statistical models. The system also includes a processor configured to execute the computer-readable instructions. The instructions, when executed cause the processor to receive a plurality of time-series data associated with one or more network data streams. The processors are further configured to process the received plurality of time-series data and generate one or more sets of aligned time-series data. The processors are further configured to detect anomalous time-stamped data points in each of the one or more sets of aligned time-series data and generate one or more groups of annotated time-series data. The annotation identifies one or more specific time-stamped data points as anomalous. The processors are further configured to determine the number of anomalous groups of annotated time-series data within all of the one or more groups of annotated time-series data. The processors are further configured to determine the probability that one or more anomalous groups of annotated time-series data belong to at least one of the groups of annotated time-series data using a generative statistical model and output one or more correlated anomalous groups. The one or more anomalous groups are determined to be correlated based on the anomalous groups including one or more statistically correlated anomalous time-stamped data points. The processors are further configured to process each of the one or more outputted correlated anomalous groups to generate a detailed statistical report for each correlated anomalous group. The processors are further configured to output an aggregated statistical report for the one or more correlated anomalous groups.
- In some implementations, the processors are configured to receive time-series data including one or more of binary data types, categorical data types, or real-valued data types. In some implementations, the processors are configured to receive one or more network data streams from external sources. In some implementations, the processors are configured to process the received plurality of time-series data by one or more of normalizing the time-series data, inputting missing values, performing time-stamp up-sampling, performing time-stamp down-sampling, and removing noise from the received plurality of time-series data. In some implementations, the processors are configured to perform the steps of processing the received plurality of time-series data in parallel. In some implementations, the processors are configured to generate one or more sets of aligned time-series data that are temporally aligned. In some implementations, the processors are configured to perform detecting anomalous time-stamped data points in each of the one or more sets of aligned time-series data using one or more virtual interfaces. The one or more virtual interfaces are determined based on the data type of the aligned time-series data. In some implementations, the processors are configured with one or more virtual interfaces to detect anomalous time-stamped data points in parallel. In some implementations, the processors are configured to determine the number of anomalous groups within all of the one or more annotated sets of time-series data using a locality sensitive hashing algorithm. In some implementations, the generative statistical model is a Latent Dirichlet Allocation model. In some implementations, the processors are configured to determine the probability that one or more anomalous groups of annotated time-series data belong to at least one of the groups of annotated time-series data and output one or more correlated anomalous groups parallel. In some implementations, the processors are configured to determine that one or more anomalous groups are not correlated based on the one or more anomalous groups not including one or more statistically correlated anomalous time-stamped data points. In some implementations, the processors are configured to identify in the detailed statistical report for each correlated anomalous group the Pearson correlation coefficients, Jaccard similarities, and/or Bayes factors of each correlated anomalous group. In some implementations, the processors are configured to output the aggregated statistical report to users via one or more application programming interfaces. In some implementations, the aggregated statistical report is human-interpretable. In some implementations, aggregated statistical report includes the probabilities of single network entity failures and grouped network entity failures.
- The accompanying drawings, which are included to provide further understanding and are incorporated in and constitute a part of this specification, illustrate disclosed embodiments and together with the description serve to explain the principles of the claimed embodiments. In the drawings:
-
Figure 1 illustrates an example functional block diagram of a system for detecting and correlating anomalous time-series data. -
Figure 2 illustrates an example architecture for detecting and correlating anomalous time-series data in a distributed server architecture. -
Figure 3 is a flowchart showing an example method for detecting and correlating anomalous time-series data. -
Figure 4 is a flowchart showing an example method for generating aligned time-series data. -
Figure 5 is a flowchart showing an example method for generating annotated time-series data. -
Figure 6 is a flowchart showing an example method for correlating anomalous groups of time-series data. -
Figure 7 illustrates an example functional block diagram for generating detailed statistical reports for each correlated anomalous group and for outputting an aggregated statistical report. -
Figure 8 is a block diagram of an example computing system. - In one or more implementations, not all of the depicted components in each figure may be required, and one or more implementations may include additional components not shown in a figure. Variations in the arrangement and type of the components may be made without departing from the scope of the invention as defined in the appended claims. Additional components, different components, or fewer components may be utilized within the scope of the invention as defined in the appended claims.
- The disclosed system includes a number of components to collect and process network data streams. The system components can process the network data streams in real-time by performing the disclosed method of detecting and correlating anomalies from the collected network data streams. The system includes a data collection component to receive the network data streams from external data sources and perform data cleaning. For example, the data collection component may be a module to normalize data stream values, input missing values, perform timestamp up-sampling or down-sampling, as well as removing noise from the data stream values. The data collection component may perform the data cleaning steps in parallel. The data collection component outputs the cleaned data as set or groups of aligned time series data.
- The aligned time series data can further be processed by an anomaly detection component. The anomaly detection component may include a plurality of virtual interfaces that are configured to perform anomaly detection based on the various data types that are present in the aligned time series data that are associated with the collected network data streams. For example, latency data received in histogram format may be converted to cumulative distribution function curves that are then normalized before calculating the difference in the area under the curve. In addition, the virtual interface may support processing network outage data as binary variables, as well as processing data which includes real-values, such as conditions where a data spike may indicate an anomaly. In some implementations, the anomaly detection component may perform the processing for various data types in parallel. The anomaly detection component may annotate specific time-stamped data points within the time-series data determined to be anomalous and may output groups or sets of annotated time series data.
- The sets of annotated (anomalous) time series data are received by a global correlation component and processed by dividing the groups of annotated (anomalous) time series data into smaller groups to avoid cross-group correlation. The groups may then be further processed in parallel. A locality sensitive hashing function or algorithm is used to determine the number of anomalous groups within or across all of the sets of annotated time series data. The number of groups is then provided as an input to a generative statistical model, such as a Latent Dirichlet Allocation (LDA) model, to find the probability that one or more groups of annotated time series data belong to one of the groups of annotated time series data determined by the locality sensitive hashing function. The method steps performed by the global correlation component may also be performed in parallel. The output of the global correlation component is a grouping of the time series data such that the anomalies within a group are statistically correlated and the anomalies across groups are not statistically correlated. Using LDA, network entity groupings may be determined based on temporal failure patterns without requiring exhaustive pairwise time series data comparison.
- Multiple local correlation components process the groups of anomalous time series data generated by the global correlation component in parallel and output statistics for a particular group of anomalous time series data. For example, one local correlation component may output statistical data for a particular group of anomalous time series data including, but not limited to, Pearson correlation coefficients, Jaccard similarities, and/or Bayes factors.
- A reporting component aggregates the statistics generated by the local correlation components and presents the data as reports to users via various application programming interfaces (APIs). The reports and data included therein are human-interpretable and provide, for a given anomaly group, the probabilities of single and grouped network entity failures which can used for network planning and data-driven optimization of network resources.
- The system and method disclosed herein addresses the problem of automatically detecting and correlating anomalous events from large amounts of time-series data in real-time or near real-time. Advances in computer processing, internet technologies, sensor architectures, and communication networking have created an unprecedented data ecosphere that is available for analysis using similarly advanced techniques in data science such as data mining, artificial intelligence, machine learning, classification and visualization. Gaining insight from such large volumes of data can be time-consuming, error prone, and is often limited by the configuration of specific tools or resources. One approach to help manage the task of evaluating such large volumes of data is to evaluate outliers or anomalous data points that are present in the volumes of data. While outliers tend to be ignored as minor, unexplainable inconsistencies associated with the data being collected, outliers can also shed important insight into the root cause of the anomalous data. This is especially true in network data, where anomalous time-series data may indicate the failure of a particular network device, network interface or connection between networks or network devices. As the complexity and size of modern sensor and communication networks increase, the inter-connectedness of network elements also increases which means larger volumes of time-series data must be evaluated in order to accurately assess anomalous data points so that the root cause of the anomaly can be better understood. Traditional methods to detect and evaluate network time-series data anomalies, such as rule- or threshold-based alerting, dashboard inspection, or periodic spot checking of data, are not suitable given the enormous amounts of data being generated in modem networks and are also not robust to handle noisy, fluctuating anomaly data. In addition, traditionally network failure data has been represented as binary data values. For example, a binary value for a particular network failure may be associated with each network link. If the link is operational, the value would be "0", if the link has failed, the value would be "1", or vice versa. Using only binary values for anomaly detection limits the correlative inferencing such that latent factors, which are associated with network failure events, remain un-discovered and hidden providing reduced insight into the root cause of a particular network failure. As will be discussed in more detail below, using real-valued data streams, such as latency or packet loss, instead of solely binary data can improve the ability to robustly correlate latent or hidden factors (or network entities) that are likely to behave anomalously.
- Solutions to these problems may be achieved by the disclosed systems and methods whereby network data streams, and corresponding time-series data within the network data streams, may be monitored and evaluated in an automated, near real-time manner to detect anomalous network failure events in order to condense or correlate the failure events into groups of outliers so that the root causes of the failures can be determined. This solution can also help improve network planning by identifying critical failure modes and modeling the failure modes accurately such that future occurrences can be more easily associated with a previously determined root cause. In addition, the disclosed systems and methods enable anomaly detection and correlation to be performed in a way that may afford greater scalability and parallelization compared to traditional techniques because the components of the system may be configured in a distributed architecture as will be described in relation to
Figure 2 . The distributed architecture enables greater parallel processing of the large volumes of network failure data that may be generated by larger, more complex networks. The system and method may also provide more robust processing of noisy, uncorrelated anomaly data by removing or ignoring small individual fluctuations in the data that may distort anomaly correlation. In addition, the system and method are not limited to detecting and correlating network failure anomalies based solely on binary failure data. The system and method function to process real-valued network failure data types in order to more robustly detect and correlate anomalies that may be associated with latent or hidden factors (or network entities). -
Figure 1 illustrates an example functional block diagram of asystem 100 for detecting and correlating anomalous time-series data. The system100 includes a plurality of time-series data sources, shown as binary time-series data source 105a, categorical time-series data source 105b, and real-value time-series data source 105c. The plurality of time-series data sources will each generally be referred to as a time-series data source 105 or collectively as time-series data sources 105. Thesystem 100 also includes an anomaly detection andcorrelation system 110. The anomaly detection andcorrelation system 110 includes adata collector 130 and ananomaly detection sub-system 135. Theanomaly detection sub-system 135 includes a plurality of detectors 140, such asdetector correlation system 110 also includes ananomaly correlation sub-system 145. Theanomaly correlation sub-system 145 includes aglobal correlator 150 and a plurality of local correlators 155, such aslocal correlators correlation system 110 also includes areporting module 160. - As shown in
Figure 1 , thesystem 100 includes a plurality of time-series data sources 105 that store network time-series data. The time-series data sources 105 are sources of time-series data. The time-series data stored in the time-series data sources 105 is received by thedata collector 130 of the anomaly detection andcorrelation system 110. The time-series data sources 105 may store time-series data that may be associated with one or more aspects of a network's performance over a period of time, such as latency values, link status (e.g., the link is functional or non-functional), and/or network entity ownership. - The time-series data stored in the data sources 105 may include a variety of time-series data types. For example, as shown in
Figure 1 , the binary time-series data source 105a may store binary time-series data. Binary time-series data may include data, measured as a function of time, that represents one of only two possible values. In this example, binary time-series data source 105a may store binary time-series data such as link connectivity status as measured over time, where the time-series value of the link connectivity status may be only one of two values (e.g., functional (1) or non-functional (0)) or vice versa. As further shown inFigure 1 , the time-series data sources 105 may also include a categorical time-series data source 105b. The categorical time-series data source 105b may store categorical time-series data types. Categorical time-series data types may include data, measured as a function of time, which represents one of multiple possible values (or categories). For example, a categorical time-series data source 105b may store categorical time-series data such as the network operator associated with a particular network entity, such as a switch or router that is deployed in a network. In this example, the categorical time-series data may represent the name of the network operator associated with a specific network entity. The network operator may be a single operator identified from multiple possible operators. As further shown inFigure 1 , the time-series data sources 105 may also include a real-value time-series data source 105c. The real-value time-series data source 105c may store real-value time-series data. Real-value time-series data may include data, measured as a function of time, which represents numerical or real-value data. For example, a real-value data-source 105c may store real-value time-series data such as latency values that are associated with a particular link or network device in a packet-switched network, measured in milliseconds. In this example, the real-value time-series data may include a specific numerical value that has been measured as a function of time. - In some implementations, the time-series data sources 105 may store time-series data that is associated with one or more network data streams. The network data streams may be received from external sources. For example, the network data streams may be associated with networks that are located remotely from the time-series data sources 105 or the anomaly detection and
correlation system 110. - As further shown in
Figure 1 , thesystem 100 includes an anomaly detection andcorrelation system 110. The anomaly detection andcorrelation system 110 includes multiple components that are configured to detect and correlate anomalies in time-series data that is associated with one or more network data streams and received from the time-series data sources 105. - As shown in
Figure 1 , the anomaly detection andcorrelation system 110 includes adata collector 130. Thedata collector 130 receives the time-series data from the time-series data sources 105 and prepares the data for anomaly detection and correlation processing. In broad terms, thedata collector 130 applies a variety of data cleaning methods on the received time-series data in order to prepare the data for efficient detection and correlation processing. For example, the data collector may perform methods on the received time-series data including, but not limited to, normalization, missing value imputation, timestamp up- or down-sampling, as well as noise removal. In addition, thedata collector 130 aligns the time-series data temporally and generates one or more sets of temporally aligned time-series data. In some implementations, thedata collector 130 may fetch the time-series data from the time-series data sources 105 to perform the data cleaning methods. Additional details of the data cleaning methods that are performed by thedata collector 130 will be described in more detail in relation toFigure 4 . - As further shown in
Figure 1 , the anomaly detection andcorrelation system 110 includes ananomaly detection sub-system 135. Theanomaly detection sub-system 135 receives the temporally aligned time-series data that was generated by thedata collector 130 and performs anomaly detection on the aligned time-series data. Theanomaly detection sub-system 135 includes a plurality of detectors such as detectors 140. The detectors 140 may be virtual interfaces for anomaly detection whose implementation corresponds to a particular time-series data type. The detectors 140 apply different anomaly detection techniques based on the time-series data type of the aligned time-series data received from thedata collector 130 and annotate the anomalous time-stamped data points that were detected. Theanomaly detection sub-system 135 generates groups of annotated (anomalous) time-series data for output. Additional details of the anomaly detection methods that are performed by theanomaly detection sub-system 135 will be described below in more detail in relation toFigure 5 . - As shown in
Figure 1 , the anomaly detection andcorrelation server 110 includes ananomaly correlation sub-system 145. Theanomaly correlation module 145 receives as input the groups of annotated time-series data and performs correlation techniques on the data to output a grouping of time-series data such that the anomalies within each group are statistically correlated to each other and the anomalies across different groups are not correlated or are substantially less correlated to each other. Theanomaly correlation sub-system 145 includes aglobal correlator 150. Theglobal correlator 150 divides the inputted groups of annotated time-series data into smaller groups so there is little or no cross-correlation between groups. Theglobal correlator 150 performs correlation on the groups using a combination of hashing techniques to determine the number of anomalous groups or number of potentially anomalous groups across all inputted groups of annotated time-series data and subsequently provides the groups as inputs to a generative statistical model, such as a Latent Dirichlet Allocation model in order to determine the probability of each time-series belonging to only one group of the inputted groups of annotated time-series data. The output of the generative statistical model is a distribution of network entities that are associated with groups of correlated anomalous time-series data. In this way, heavier-weighted network entities, e.g., those with higher correlative probabilities, are most likely to fail simultaneously over the time period associated with the timestamped data of the inputted groups of annotated time-series data. In this way groups of network entities can be discovered as the root causes of anomalous time-series data based on the temporal failure patterns of the time-series data without requiring exhaustive pairwise comparisons of the time-series data. - As further shown in
Figure 1 , theanomaly correlation sub-system 145 includes a plurality of local correlators, such aslocal correlators 155a-155c. The plurality of local collectors will be generally referred to as local correlators 155. The local correlators 155 each receive a respective group of correlated anomalous time-series data output by theglobal correlator 150. The local correlators 155 may perform additional statistical processing on each of the groups of correlated anomalous time-series data. The statistical processing performed by the local correlators 155 on the groups of correlated anomalous time-series data and the detected anomalies therein may include, but are not limited to, determining the Pearson correlation coefficient, the Jaccard similarities, and/or the Bayes factors. The local correlators 155 may output a detailed statistical report for each group of correlated anomalous time-series data which includes the results of the statistical processing performed by the local correlators 155. Additional details of theglobal correlator 150 and the local correlator's 155 functionality will be described below in relation toFigures 6 and7 , respectively. - In some implementations, a feedback loop may exist between the
anomaly correlation sub-system 145 and theanomaly detection sub-system 135 as shown inFigure 1 with the bi-directional arrow connecting the two sub-systems. In this way, the detectors 140 may be trained using the correlation results generated by theglobal correlator 150. This feedback loop may enable the detectors 140 to detect anomalies with greater accuracy. - As shown in
Figure 1 , the anomaly detection and correlation system includes a reporting module, such are reportingmodule 160. Thereporting module 160 may aggregate the detailed statistical reports that were output from the local correlators 155 and may generate an aggregated statistical report for the groups of correlated anomalous time-series data. The aggregated statistical reports may be made available to users through one or more application programming interfaces (APIs). Additional details of thereporting module 160 functionality will be described below in relation toFigure 7 . - The
system 100 shown inFigure 1 includes an anomaly detection andcorrelation system 110 including a plurality of components (or modules) and subsystems. Each sub-system may further include one or more components (or modules). As shown inFigure 1 , the plurality of components (or modules) and subsystems in the anomaly detection andcorrelation system 110 are configured on a single server and may operate in parallel on the single server. As will be shown inFigure 2 , the plurality of components (or modules) and subsystems in the anomaly detection andcorrelation system 110 may also be configured in an arrangement including distributed servers in order to increase the parallel processing of time-series data for anomaly detection and correlation. -
Figure 2 illustrates an example distributed server architecture for detecting and correlating anomalous time-series data. Thearchitecture 200 includes identical components as described in relation toFigure 1 , however, the plurality of components and subsystems shown inFigure 2 are arranged in a configuration of distributed servers that are connected via a network, instead of arranged within a single server as shown inFigure 1 . The functionality of the individual components and sub-systems shown inFigure 2 is identical to the functionality of the individual components and sub-systems shown inFigure 1 . - The
architecture 200 shown inFigure 2 includes time-series data sources 105, ananomaly detection system 205, anetwork 210, aglobal correlation sub-system 215, and a plurality oflocal correlation sub-systems 220a-220c. The plurality oflocal correlation sub-systems 220a-c will be collectively referred to as local correlation sub-systems 220. Thearchitecture 200 also includes areporting sub-system 225. - As shown in
Figure 2 , a plurality of time-series data sources, such as time-series data sources 105 described in relation toFigure 1 , are communicatively coupled to a network, such as thenetwork 210. The time-series data sources 105 store time-series data of different data types that may be processed for anomaly detection and correlation. The stored time-series data may be transmitted over a network and received by theanomaly detection system 205. Theanomaly detection system 205 includes a data collector, such as thedata collector 130 described in relation toFigure 1 , and an anomaly detection sub-system, such as theanomaly detection sub-system 135 described in relation toFigure 1 . Theanomaly detection sub-system 135 includes a plurality ofdetectors 140a-140c, which will each generally be referred to as detector 140 or collectively as detectors 140. Theanomaly detection system 205 receives time-series data from the time-series data sources 205 overnetwork 210 for processing by thedata collector 130 and subsequently by the detectors 140 that are configured in theanomaly detection sub-system 135. - As further shown in
Figure 2 , thearchitecture 200 includes anetwork 210. Thenetwork 210 can include, for example, any one or more of a personal area network (PAN), a local area network (LAN), a campus area network (CAN), a metropolitan area network (MAN), a wide area network (WAN), a broadband network (BBN), the Internet, and the like. Further, the network can include, but is not limited to, any one or more of the following network topologies, including a bus network, a star network, a ring network, a mesh network, a star-bus network, tree or hierarchical network, and the like. Thenetwork 210 enables the communication of data to be processed by the distributed servers configured to detect and correlate anomalous time-series data. - As shown in
Figure 2 , thearchitecture 200 includes aglobal correlation sub-system 215. Theglobal correlation sub-system 215 includes a global correlator, such as theglobal correlator 150 described in relation toFigure 1 . Theglobal correlation sub-system 215 receives annotated time-series data over thenetwork 210 from theanomaly detection system 205. - As further shown in
Figure 2 , thearchitecture 200 includes a plurality oflocal correlation sub-systems 220a-220c. The plurality of local correlation sub-systems will each generally be referred to as local correlation sub-system 220 or collectively referred to as local correlation sub-systems 220. Each respective local correlation subsystem 220 includes alocal correlator 155a-155c, such aslocal correlator 155a-c described in relation toFigure 1 . The plurality of local correlators will each generally be referred to as local correlator 155 or collectively referred to as local correlators 155. The local correlation sub-systems 220 receive correlated anomalous groups of time-series data over thenetwork 210 from the respectiveglobal correlation sub-system 215. The local correlators 155 process the correlated anomalous groups of time-series data to generate detailed statistical data and a detailed statistical report that is associated with each group of correlated anomalous data. The local correlation sub-systems 220 may transmit the detailed statistical reports over thenetwork 210 for processing by thereporting sub-system 225. Thereporting sub-system 225 includes a reporting module, such asreporting module 160 described in relation toFigure 1 . - As shown in
Figure 2 , theanomaly detection system 205, theglobal correlation sub-system 215, thelocal correlation sub-systems 225, and thereporting sub-system 225 are configured on individual servers in a distributedserver architecture 200. In some implementations, each system and/or sub-system may be configured on a separate server. In some implementations, individual systems and/or sub-systems may be combined on one or more servers. In some implementations, the individual systems and/or sub-systems may be implemented individually or combined on one or more virtual machines. In some implementations, the individual systems and/or sub-systems may be implemented individually or combined in one or more containerized environments. The individual systems and/or sub-systems may be implemented in such a distributedarchitecture 200 to enable greater parallelization of the anomaly detection and correlation processing that is performed by the components, systems, and/or sub-systems. In this way, thearchitecture 200 may enable greater scalability and increased processing capabilities than may be achieved in a non-distributed architecture. The distributed arrangement of the components, systems, and/or sub-systems as shown inFigure 2 may also allow the detection and correlation processing of anomalous time-series data to occur at or near real-time execution speeds. -
Figure 3 illustrates anexample method 300 for detecting and correlating anomalous time-series data performed by the components of the anomaly detection andcorrelation system 110 shown inFigure 1 . Themethod 300 includes receiving a plurality of time-series data (stage 310). The method further includes generating aligned time-series data (stage 320) and generating annotated time-series data (stage 330). The method includes outputting correlated anomalous groups of time-series data (stage 340) and generating a detailed statistical report for each correlated anomalous group (stage 350). The method further includes outputting an aggregated statistical report (stage 360). - At
stage 310, themethod 300 begins by thedata collector 130 receiving a plurality of time-series data, such as the time-series data that is stored in the time-series data sources 105 shown inFigure 1 . The plurality of received time-series data may include a plurality of time-series data types, such as binary time-series data, categorical time-series data, and/or real-valued time-series data. The time-series data may be associated with one or more network data streams that may be received from one or more external sources. Thedata collector 130 may process the received time-series data and may condition or clean the data for subsequent processing by theanomaly detection sub-system 135. - At
stage 320, thedata collector 130 temporally aligns the time-series data and generates one or more sets of aligned time-series data. The method steps and processing details performed by thedata collector 130 on the time-series data received from the plurality of time-series data sources 105 will be described below in relation toFigure 4 . - At
stage 330, the detectors 140 of theanomaly detection sub-system 135 generate annotated time-series data. Theanomaly detection sub-system 135 receives the sets of aligned time series data generated by thedata collector 130 instage 320 and the plurality of detectors 140 process the received time-series data to detect anomalous time-stamped data points that may be present in each of the one or more sets of aligned time-series data. The detectors 140 perform per-time-series anomaly detection to filter out irrelevant data. The detectors 140 may annotate anomalous time-stamped data points that are detected in the sets of aligned time-series data and may generate one or more groups of annotated time-series data. Each annotated group of time-series data may include one or more individually annotated anomalous time-stamped data points that were found to be present in the plurality of time-stamped data points included in each set of aligned time-stamped data. The method steps and processing details performed by theanomaly detection sub-system 135 on the sets of aligned time-series data received from thedata collector 130 will be described below in relation toFigure 5 . - At
stage 340, theanomaly correlation sub-system 145 outputs correlated anomalous groups. The sets of annotated time-series data generated by the detectors 140 of theanomaly detection sub-system 135 are received by theanomaly correlation sub-system 145 where theglobal correlator 150 may process the sets of annotated time-series data to determine the statistical correlation of the annotated time-stamped data identified instage 330. Theglobal correlator 150 may divide the sets of annotated time-series data into smaller groups so that there is no or only limited cross-group correlation across the groups. In this way, theglobal correlator 150 may determine a number of correlated anomalous groups of annotated time-series data within all of the one or more groups of annotated time-series data received from the detectors 140. Theglobal correlator 150 may output the correlated anomalous groups. The method steps and processing details performed by theanomaly correlation sub-system 135 and its components therein on the sets of annotated time-series data received from theanomaly detection sub-system 135 will be described below in relation toFigure 6 . - At
stage 350, the local correlators 155 of the of theanomaly correlation sub-system 145 generate detailed statistical reports for each of the correlated anomalous groups. The local correlators 155 receive the correlated anomalous groups output by theglobal correlator 150 instage 340 and process the received time-series data to generate specific statistics for each group of correlated anomalous time-series data. The statistical methods applied to each group may include but are not limited to determining the Pearson correlation coefficient, the Jaccard similarity coefficient, and/or the Bayes factors. The local correlators 155 may include the results of the applied statistical methods in a detailed statistical report that is associated with the correlated anomalous groups and the anomalies identified therein. The local correlators 155 may generate the detailed statistical report for subsequent processing. The method steps and processing details performed by the local correlators 155 on the correlated anomalous groups of time-series data received from theglobal correlator 150 will be described below in relation toFigure 7 . - At
stage 360, thereporting module 160 outputs an aggregated statistical report. Thereporting module 160 receives the detailed statistical reports generated by the local correlators 155 instage 350 and aggregates the detailed statistical report data for each correlated anomalous group into an aggregated statistical report. The aggregated statistical report may be formatted such that the report is human-interpretable or readily interpreted by a human. The aggregated statistical report may include probability data, such as the probability that a single network entity is associated with a network failure. Thereporting module 160 may output the aggregated statistical report. In some implementations, the aggregated statistical report may be output to users via one or more application programming interfaces (APIs). The method steps and processing details performed by thereporting module 160 on the detailed statistical reports received from the local correlator 155 will be described below in relation toFigure 7 . -
Figure 4 illustrates anexample method 400 for generating aligned time-series data performed by thedata collector 130 shown inFigure 1 . Themethod 400 describes the method steps associated with generating aligned time-series data which was described earlier in relation to stage 320 ofFigure 3 . Themethod 400 includes normalizing time-series data (stage 410) and imputing missing values (stage 420). The method also includes time-stamp up-sampling or time-stamp down-sampling (stage 430) and noise removal (stage 440). The method includes temporally aligning time-series data (stage 450). - At
stage 410, themethod 400 begins by thedata collector 130 normalizing the time-series data that was received from the plurality of time-series data sources 105. Thedata collector 130 may clean or condition the received data for later processing to ensure more accurate most accurate anomaly detection and correlation. As the data can be associated with one or more network data streams that may be received from a variety of external sources, the data may be of an undetermined quality. Thedata collector 130 may perform the following method steps to enhance the quality of data so that subsequent anomaly detection and correlation can be performed in the most robust manner possible. For example, instage 410 thedata collector 130 may normalize the received time-series data. Normalizing the time-series data rescales the data from its original range of values so that all values are within the range of 0 and 1. - At
stage 420, thedata collector 130 imputes missing values. Thedata collector 130 may process the received time-series data and determine that one or more values are missing. Missing data can have adverse effects on the anomaly detection because the detectors 140 may falsely identify a missing value as an anomalous data point. The result of this false identification may be an over-estimation of the number of anomalous data points present with the received time-series data. Thedata collector 130 may include logic, algorithms or other ways of processing the received time-series data in order to identify and input missing values as appropriate based on the data type associated with the received time-series data. - At
stage 430, thedata collector 130 performs time-stamp up-sampling and/or time-stamp down-sampling. In up-sampling, the frequency of the time-series data is increased. In down-sampling, the frequency of the time-series data is decreased. For example, the received time-series data may have been collected on an hourly basis. Up-sampling the hourly time-series data to a basis of every 15 minutes would generate a new set of time-series data with extended values corresponding to the new time basis (e.g., every15 minutes). Time-stamp up-sampling may produce missing values that must be filled by interpolation or by inputting missing values as described instage 420. Time-stamp down-sampling may require careful selection of the statistical methods used to calculate new aggregated time-series data points, when, for example, the basis of the time-series data is changed from microseconds to seconds. - At
stage 440, thedata collector 130 performs noise removal. Thedata collector 130 may process the received time-series data to remove noise from the data using a variety of mathematical methods and/or algorithms. The method selected may depend on the data type of the time-series data, as well as the level of dimensionality of the time-series data. For example, noise may be removed in the received time-series data using median, mean, or trimmed mean absolute deviations. In some implementations, the noise removal may be performed using deconvolution techniques such as Weiner filtering, blind convolution techniques, exponential smoothing, outlier removal or substitution, as well as independent component analysis techniques. - At
stage 450, the data collector temporally aligns time-series data. Thedata collector 130 may process the received time-series data to align the data temporally or in the context of time. When processing large volumes of time-series data, it is important to recognize that the data may include variability affecting the time scale on which the data was measured. For example, the time axes may have been shifted, compressed, or even expanded in complex, nonlinear ways. In some cases, the scale of the measured time-series data can be inconsistent between sets of the same data. As a result, it is prudent to temporally align the time-series data. Thedata collector 130 may apply logic or algorithms such as the dynamic time warping algorithm used to measure similarity between two temporal sequences in order to align the time-series data in a temporal manner. Thedata collector 130 outputs one or more sets of temporally aligned time-series data to theanomaly detection sub-system 135. -
Figure 5 illustrates anexample method 500 for generating annotated time-series data performed by the detectors 140 that may be configured within theanomaly detection sub-system 135 shown inFigure 1 . Themethod 500 describes the method steps associated with generating aligned time-series data which was described earlier in relation to stage 330 ofFigure 3 . Themethod 500 includes selecting a virtual interface based on the data type of the aligned time-series data (stage 510). The method also includes discretizing the aligned time-series data (stage 520). The method includes processing binary data types (stage 530), processing real-value data types (stage 540), and processing categorical data types (stage 550). The method also includes annotating anomalous time-stamped data points (stage 560). - At
stage 510, themethod 500 begins by theanomaly detection sub-system 135 receiving the sets of aligned time-series data generated by thedata collector 130. Theanomaly detection sub-system 135 may include a plurality of detectors 140. Each detector 140, such asdetectors 140a-140c shown inFigure 1 , may implement a different virtual interface for performing anomaly detection. The different implementations may be based on or correspond to the data types of the time-series data that was received from the time-series data sources 105. For example,detector 140a may be configured to detect anomalies within binary time-series data, such as time-series data that is received from the binary time-series data source 105b. As time-series data is received from thedata collector 130, theanomaly detection sub-system 135 may select the appropriate virtual interface that is configured on a particular detector 140 and upon selection, forward the aligned time-series data to the selected detector 140 for anomaly detection. Each detector 140 may implement different processing techniques that correspond to the data type of the received time-series data. - At
stage 520, theanomaly detection sub-system 135 discretizes the aligned time-series data. Theanomaly detection sub-system 135 may discretize the aligned time-series data in order to convert the aligned time-series data into a smaller number of finite values. Discretization typically involves the process of transferring continuous functions, models, equations, and/or data (e.g., time-series data) into discrete counterparts. Discretization further enables the data to be more suitable for numerical evaluation and implementation on computing devices. As used in the method performed by theanomaly detection sub-system 135, discretizing the aligned time-series data has the effect of emulating network failure data more accurately. For example, as a result of discretization, the original time-series data becomes sparse, consisting mostly of zeroes and the occasional non-zero integer value which may correspond to an anomaly. A variety of discretization pre-processing steps may be used. - At
stage 530, one of the detectors 140 processes binary data types. Binary data types may include types of data for which the data values may only represent a "0" or a "1" for more than a certain number of samples. Upon determining the data type of the data included in the set of annotated time-series data received from thedata collector 130, theanomaly detection sub-system 135 identifies the appropriate detector 140 that is configured to process the received time-series data type and detect anomalies. For example,detector 140a may be configured to process binary time-series data types and detect anomalies. Thedetector 140a may detect and identify binary time-series data values as an anomaly if the data value is "1". If the data value is "0", thedetector 140a may identify the binary time-series data value as not anomalous. Upon detecting anomalous data values in the binary time-series data, thedetector 140a may annotate the binary time-stamped data values as anomalous. - At
stage 540, one of the detectors 140 processes real-value data types. Real-value data types may include types of data for which the data values may be any numerical value, such as "1.5", "25.6", or "89". Upon determining that the data type of the data included in the set of annotated time-series data includes real-value data types, theanomaly detection sub-system 135 identifies the appropriate detector 140 that is configured to process real-value time-series data. The detector 140 configured to process real-value data types may apply specific processing to the real-value time-series data. For example, when processing latency histogram values, where the value may represent a real-value data type that is associated with the latency between two network entities (e.g., measured in milliseconds), the detector 140 that has been identified to process real-value time-series data types may first convert the latency histogram data into a cumulative distribution function (CDF) curves representing the real-value latency data. The CDF curves may then be normalized and the detector 140 may then determine the differences in the area under the curve. Upon detecting anomalous data values in the real-value time-series data that are outside the area under the curve, the identified detector 140 may annotate those real-value time-stamped data values as anomalous. - At
stage 550, one of the detectors 140 processes categorical data types. Categorical data types may include types of data for which the data values may be one of multiple selections, such as a categorical data type that identifies network entity ownership. There may be more than two possible network owners associated with a particular network entity. The ownership of the network entity may change over time. Upon determining that the data type of the data includes in the set of annotated time-series data includes categorical data types, theanomaly detection sub-system 135 identifies the appropriate detector 140 that is configured to process categorical time-series data. The identified detector 140 may apply specific processing to the categorical time-series data. For example, a change in the categorical data value or a value spike at a specific time-stamp may indicate an anomalous data point. In some implementations, thresholds can be learned from historical data and used to identify anomalies for future evaluations of data represented as categorical time-series data types. Upon detecting anomalous data values in the categorical time-series data, the identified detector 140 may annotate those categorical time-stamped data values as anomalous. - At
stage 560, the detectors 140 annotate anomalous time-stamped data points. As described above in relation to the data-type-specific processing that is performed by the detectors 140, anomalous time-stamped data points may be annotated to identify the data points as an anomaly. The annotation may be a unique identifier that is applied to anomalous data points. In some implementations, the unique identifier may be based on the data type of the anomalous data point in order to distinguish the resulting groups of anomalous data of one data-type from the anomalous groups identified for a different data-type. -
Figure 6 illustrates anexample method 600 for correlating anomalous groups of time-series data performed by theglobal correlator 150 that may be configured within theanomaly correlation sub-system 145 shown inFigure 1 . Themethod 600 describes the method steps associated with outputting correlated anomalous groups which was described earlier in relation to stage 340 ofFigure 3 . Themethod 600 includes determining the number of anomalous groups of annotated time-series data within all of the groups of annotated time-series data (stage 610). The method includes determining the probability that each anomalous group of annotated time-series data belongs to one of the groups of annotated time-series data using a generative statistical model (stage 620). The method also includes determining whether or not the annotated time-series groups are statistically correlated (stage 630). The method includes, responsive to determining that the annotated time-series groups are statistically correlated, grouping the statistically correlated anomalous groups (stage 640) and outputting the correlated anomalous groups (stage 650). The method also includes, responsive to determining that the annotated time-series groups are not statistically correlated, storing the un-correlated groups (stage 660). - At
stage 610, theglobal correlator 150 receives the one or more groups of annotated time-series data generated by the local detectors 140 and determines the number of anomalous groups of annotated time-series data within all of the groups of annotated time-series data. In this way, the likelihood of cross-group correlation and inaccurate anomaly correlation may be reduced or avoided. In addition, by dividing the groups of annotated time-series data into smaller groups, the groups may be processed in parallel, for example in a distributed architecture similar to that shown inFigure 2 , configured with multipleanomaly correlation sub-systems 215. Theglobal correlator 150 may be configured to utilize a locality sensitive hashing algorithm to detect the number of anomalous groups or potentially anomalous groups across all of the annotated time-series groups received from the detectors 140. Locality sensitive hashing (LSH) serves to reduce the dimensionality of high-dimensional data, such as time-series data. LSH hashes the inputted annotated groups of time-series data so that similarly annotated time-stamps in each group may be mapped or grouped as an anomalous group of annotated time-series data. - At
stage 620, theglobal correlator 150 determines the probability that each anomalous group of annotated time-series data belongs to one of the groups of annotated time-series data using a generative statistical model. The groups of anomalous annotated time-series data which include real-values data types may be transformed into binary or categorical data types by calculating the mean and standard deviations for each group of time-series data. The new value will be how many standard deviations the old value is from the mean. With the number of groups of anomalous annotated time-series data now known, the number of groups may be used as an input parameter to the generative statistical model in order to determine the probability that each anomalous group of annotated time-series data belongs to one of the groups of annotated time series data. - Generative statistical models are models used for generating values that may be associated with a phenomenon, such as anomalous time-series data that is associated with a network failure event. The generative statistical models generate values associated with phenomenon that may be observed as well as phenomenon that may be hidden. Generative statistical models are typically probabilistic and specify a joint probability distribution over the observed and hidden phenomenon values. Examples of generative statistical models include Gaussian mixture models, hidden Markov models, naive Bayes models and latent Dirichlet allocation models. Latent dirichlet allocation (LDA) modeling is a natural language processing technique that can infer latent topics, or groupings of words, that may be likely to occur in a set of documents. LDA may also be used for anomaly correlation by considering the discrete time-stamps data points of individual time-series data as "documents" and the network entities that failed within each particular discrete time-stamp data point as the corresponding document "words". By determining and inputting the number of anomalous annotated groups of time-series data as the number of observed "topics", the LDA model may output a distribution of probabilities of failing network entities per topic, where the entities associated with higher probabilities may be most likely to fail simultaneously over the time period captured by the collection of individual time-series data that was input to the model. In this way, groups of correlated failing network entities may be determined based on temporal failure patterns without performing exhaustive pairwise comparisons of individual time-series data. This is possible because the LDA model assumes that the "documents" or discrete time-stamps data points of individual time-series data will be sparse and include relatively few failures (or detected anomalies) compared to the time-series data that is associated with the total number of network entities.
- In addition, LDA models may be trained to explain network failure events that may be associated with independent latent factors. Each factor may consist of a set of links connecting one or more network entities that tend to historically fail together. In this mixed-membership model, a link failure can be attributed to different factors at different time-stamps. The LDA model may learn sets of independent and sparse factors, for example each factor may be mapped to a small number of failure patters that occur simultaneously. The LDA model may also allow use of domain knowledge. For example, the physical single points of network failures may be modeled explicitly in the LDA training process. In this example, the link-to-factor assignment may be fixed and only the failure probability may be learned from the model. The LDA model training process may be implemented using a feedback loop between the
anomaly correlation sub-system 145 and theanomaly detection sub-system 135, as shown inFigure 1 as a bi-directional arrow between the two sub-systems. - At
stage 630, the method includes determining whether or not the groups of anomalous time-series data are statistically correlated. Theglobal detector 150 may compare the probabilities generated by the LDA model and statistically correlate one or more anomalous groups based on the determination that one or more groups include one or more statistically correlated anomalous time-stamped data points. In some implementations the statistical correlation may be based on one or more probabilities exceeding a pre-determined threshold. For example, theglobal correlator 150 may determine that one or more groups of anomalous time-series data may be statistically correlated based on the output distribution of probabilities for one or more groups exceeding a particular threshold value. - At
stage 640, responsive to determining that one or more groups of anomalous time-series data are statistically correlated, theglobal correlator 150 may group the statistically correlated anomalous groups. For example, theglobal correlator 150 may group correlated anomalous groups of time-series data based on two or more of the correlated anomalous groups based on the two or more groups including the one or more shared network entities that have failed. In some implementations, theglobal correlator 150 may group correlated anomalous groups based on the two or more correlated groups including similar failure probabilities as determined by the LDA model instage 620. In some implementations, theglobal correlator 150 may group correlated anomalous groups based on the two or more correlated groups including failure probabilities that are within a range of pre-determined values. - At
stage 650, theglobal correlator 150 outputs correlated anomalous groups. Theglobal correlator 150 may output the correlated anomalous groups to the plurality of local correlators 155 as shown inFigures 1 or2 . - At
stage 660, responsive to determining that one or more groups of anomalous time-series data are not statistically correlated, theglobal correlator 150 may store the statistically un-correlated groups. Groups are considered statistically un-correlated if theglobal correlator 150 has determined the groups do not include correlated anomalous time-stamp data, or the correlation between the data in the groups is below a pre-selected correlation threshold. In such situations, theglobal correlator 150 may, for example, store the statistically un-correlated groups in memory or a database. In some implementations, theglobal correlator 150 may store the statistically un-correlated groups for use in training the LDA model. -
Figure 7 is an example functional block diagram for generating detailed statistical reports for each correlated anomalous group and outputting an aggregated statistical report. The diagram 700 includes similar components as described in relation toFigure 1 , however for clarity, thedata collector 130 and theanomaly detection subsystem 135 have been removed from the anomaly detection andcorrelation system 110 in order to describe the processing performed by the local correlators 155 and thereporting module 160 in more detail. - As shown in
Figure 7 , theanomaly correlation sub-system 145 includes aglobal correlator 150 and a plurality of correlatedanomalous groups 705, e.g., correlated anomalous groups 1-3. Theanomaly correlation sub-system 145 also includes alocal correlator 155a. Thelocal correlator 155a includes a plurality of calculators such as the Pearsoncorrelation coefficient calculator 710, the Jaccardsimilarity coefficient calculator 715, and theBayes factor calculator 720. The local correlators 155, such aslocal correlator 155a, may also be configured to include a variety of other calculators as shown bycalculator N 725. The anomaly detection andcorrelation system 110 includes a plurality of detailedstatistical reports 730 and areporting module 160. Thearchitecture 700 includes an aggregatedstatistical report 735, acomputing device 740 and a plurality ofAPIs 745. - As shown in
Figure 7 , theanomaly correlation sub-system 145 includes aglobal correlator 150. Theglobal correlator 150 may determine the number of anomalous groups and outputs one or more correlatedanomalous groups 705. The global correlator outputs the correlated anomalous groups as described in relation tomethod step 340 shown inFigure 3 . Theglobal correlator 150 outputs the correlatedanomalous groups 705 to thelocal correlator 155a. - As further shown in
Figure 7 , theanomaly correlation sub-system 145 includes a local correlator 155, such aslocal correlator 155a. Thelocal correlator 155a includes a plurality of calculators that may be configured to generate specific statistical data for each group of correlated anomalous time-series data received from theglobal correlator 150. Thelocal correlator 155a includes a Pearsoncorrelation coefficient calculator 710, a Jaccardsimilarity coefficient calculator 715, and aBayes factor calculator 720. The local correlators 155, such as thelocal correlator 155a, may also include any number of calculators, shown ascalculator N 725, that are appropriate for providing statistics related to a received group of correlated anomalous time-series data 705. - The Pearson correlation coefficient (PCC)
calculator 710 may be used to generate a measure of the linear correlation between two variables. The Pearsoncorrelation coefficient calculator 710 may generate a value that is between +1 and -1, where +1 is indicative of a total positive linear correlation, 0 is indicative of no linear correlation, and -1 is indicative of a total negative linear correlation. Thelocal correlator 155a may apply the Pearsoncorrelation coefficient calculator 710 to one or more correlatedanomalous groups 705 and determine the Pearson correlation coefficient between the correlated anomalous time-stamped data points within each correlatedanomalous groups 705. - As further shown in
Figure 7 , thelocal correlator 155a includes a Jaccardsimilarity coefficient calculator 715. The Jaccardsimilarity coefficient calculator 715 may generate a statistic used for comparing the similarity and diversity of input sample sets. The Jaccard similarity coefficient measures similarities between finite sample sets and is defined as the size of the intersection divided by the size of the union of the sample sets. The Jaccard similarity coefficient may be represented as a percentage identifying the degree of similarity between two sets of data. For example, a Jaccard similarity coefficient of 100% indicates that two sets of data share all of the same members, while a Jaccard similarity coefficient of 0% indicates that the two sets share no members. A Jaccard similiarty coefficient of 50% indicates that the two sets share half of the members. In some implementations, thelocal correlator 155a may apply the Jaccardcorrelation coefficient calculator 715 to the correlatedanomalous groups 705 received from theglobal correlator 150 and determine the Jaccard correlation coefficients between the correlated anomalous time-stamped data points within each correlatedanomalous groups 705. - As shown in
Figure 7 , thelocal correlator 155a includes aBayes factor calculator 720. TheBayes factor calculator 720 may generate a Bayes factor that represents a ratio of the likelihood probability of two competing hypotheses, usually a null hypothesis and an alternative hypothesis. The Bayes factor is a way of quantifying support for one particular hypothesis model over another in order to determine which particular hypothesis model is true. Various scales have been proposed in literature to assist interpreting the calculated Bayes factor values. For example, Bayes factors that range from 1-3 indicate the strength of one particular hypothesis over a second hypothesis is barely worth mentioning, Bayes factors that range between 3-20 indicate positive evidence that one particular hypothesis is stronger than a second hypothesis, while Bayes factors that range between 20-150 indicate strong evidence that one particular hypothesis is stronger than a second hypothesis. In some implementations, thelocal correlator 155a may apply theBayes factor calculator 720 to the correlatedanomalous groups 705 to determine that the correlated anomalous time-stamped data points within each group are anomalous when compared to other correlated anomalous time-stamped data points within the same group. - As further shown in
Figure 7 , the local correlators 155, such aslocal correlator 155a, output one or more detailedstatistical reports 730 as described in relation tomethod step 350 shown inFigure 3 . The detailedstatistical reports 730 generated by thelocal correlator 155a are subsequently processed by thereporting module 160. Thereporting module 160 may collect or receive the detailedstatistical reports 730 generated for each correlatedanomalous group 705 and output an aggregatedstatistical report 735 for one or more of the correlated anomalous groups. Thereporting module 160 may output the aggregatedstatistical report 735 as described in relation tomethod step 360 shown inFigure 3 . - As shown in
Figure 7 , the aggregatedstatistical report 735 may include summarized statistical data for one or more correlatedanomalous groups 705. The aggregatedstatistical report 735 may be formatted in a manner that is easily interpreted by humans. The aggregatedstatistical report 735 may include the probability a single network entity may fail, as well as the probabilities a group of network entities may fail. For example, as shown inFigure 7 , the aggregatedstatistical report 735 indicates that switch X3A has a .75 (or 75%) probability of failing based on the detected anomalies which were correlated in regard to link connectivity data associated with that particular switch. Similarly, the group of individual switches Y1C, Y2C, Y3C, Y4C, and Y5C (shown as Y1C-Y5C) have been identified to have a .60 (or 60%) probability of failing based on the detection anomalies which were correlated in regard link connectivity data associated with this group of individual switches.
As further shown inFigure 7 , a computing device, such ascomputing device 740 may interact with the anomaly detection andcorrelation system 110 via one or more APIs 745 (e.g., APIs A-C). For example, a user ofcomputing device 740 may submit commands via one ormore APIs 745 to the anomaly detection andcorrelation system 110. TheAPI 745 may specify computer-readable executable instructions for thereporting module 160 that may be configured in the anomaly detection andcorrelation system 110 to output the aggregatedstatistical report 735 to thecomputing device 740. -
Figure 8 is a block diagram 800 illustrating anexample computer system 810 with which the time-series data sources 105, the anomaly detection andcorrelation system 110 including any components therein ofFigure 1 , and thecomputing device 740 ofFigure 7 can be implemented. In certain aspects, thecomputer system 810 may be implemented using hardware or a combination of software and hardware, either in a dedicated server, or integrated into another entity, or distributed across multiple entities. - In broad overview, the
computing system 810 includes at least oneprocessor 850 for performing actions in accordance with instructions and one ormore memory devices example computing system 810 includes one ormore processors 850 in communication, via abus 815, with at least one networkinterface driver controller 820 with one or morenetwork interface cards 822 connecting to one ormore network devices 824,memory 870, and anyother devices 880, e.g., an I/O interface. Thenetwork interface card 822 may have one or more network interface driver ports to communicate with the connected devices or components. Generally, aprocessor 850 executes instructions received from memory. Theprocessor 850 illustrated incorporates, or is directly connected to,cache memory 875. - In more detail, the
processor 850 may be any logic circuitry that processes instructions, e.g., instructions fetched from thememory 870 orcache 875. In many embodiments, theprocessor 850 is a microprocessor unit or special purpose processor. Thecomputing device 810 may be based on any processor, or set of processors, capable of operating as described herein. Theprocessor 850 may be a single core or multi-core processor. Theprocessor 850 may be multiple processors. In some implementations, theprocessor 850 can be configured to run multi-threaded operations. In some implementations, theprocessor 850 may host one or more virtual machines or containers, along with a hypervisor or container manager for managing the operation of the virtual machines or containers. In such implementations, the methods shown and described inFigures 3 - 7 can be implemented within the virtualized or containerized environments provided on theprocessor 850. - The
memory 870 may be any device suitable for storing computer readable data. Thememory 870 may be a device with fixed storage or a device for reading removable storage media. Examples include all forms of non-volatile memory, media and memory devices, semiconductor memory devices (e.g., EPROM, EEPROM, SDRAM, and flash memory devices), magnetic disks, magneto optical disks, and optical discs (e.g., CD ROM, DVD-ROM, and Blu-ray® discs). Acomputing system 810 may have any number ofmemory devices 870. In some implementations, thememory 870 supports virtualized or containerized memory accessible by virtual machine or container execution environments provided by thecomputing system 810. - The
cache memory 875 is generally a form of computer memory placed in close proximity to theprocessor 850 for fast read times. In some implementations, thecache memory 875 is part of, or on the same chip as, theprocessor 850. In some implementations, there are multiple levels ofcache 875, e.g., L2 and L3 cache layers. - The network
interface driver controller 820 manages data exchanges via the network interface driver 822 (also referred to as network interface driver ports). The networkinterface driver controller 820 handles the physical and data link layers of the OSI model for network communication. In some implementations, some of the network interface driver controller's tasks are handled by theprocessor 850. In some implementations, the networkinterface driver controller 820 is part of theprocessor 850. In some implementations, acomputing system 810 has multiple networkinterface driver controllers 820. The network interface driver ports configured in thenetwork interface card 822 are connection points for physical network links. In some implementations, thenetwork interface controller 820 supports wireless network connections and an interface port associated with thenetwork interface card 822 is a wireless receiver/transmitter. Generally, acomputing device 810 exchanges data withother network devices 824 via physical or wireless links that interface with network interface driver ports configured in thenetwork interface card 822. In some implementations, thenetwork interface controller 820 implements a network protocol such as Ethernet. - The
other network devices 824 are connected to thecomputing device 810 via a network interface driver port included in thenetwork interface card 822. Theother network devices 824 may be peer computing devices, network devices, or any other computing device with network functionality. For example, afirst network device 824 may be a network device such as a hub, a bridge, a switch, or a router, connecting thecomputing device 810 to a data network such as the Internet ornetwork 210 shown inFigure 2 . - The
other devices 880 may include an I/O interface, external serial device ports, and any additional co-processors. For example, acomputing system 810 may include an interface (e.g., a universal serial bus (USB) interface) for connecting input devices (e.g., a keyboard, microphone, mouse, or other pointing device), output devices (e.g., video display, speaker, or printer), or additional memory devices (e.g., portable flash drive or external media drive). In some implementations, acomputing device 800 includes anadditional device 880 such as a coprocessor, e.g., a math co-processor can assist theprocessor 850 with high precision or complex calculations. - Implementations of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software embodied on a tangible medium, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Implementations of the subject matter described in this specification can be implemented as one or more computer programs embodied on a tangible medium, i.e., one or more modules of computer program instructions, encoded on one or more computer storage media for execution by, or to control the operation of, a data processing apparatus. A computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. The computer storage medium can also be, or be included in, one or more separate components or media (e.g., multiple CDs, disks, or other storage devices). The computer storage medium may be tangible and non-transitory.
- The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources. The operations may be executed within the native environment of the data processing apparatus or within one or more virtual machines or containers hosted by the data processing apparatus.
- A computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers or one or more virtual machines or containers that are located at one site or distributed across multiple sites and interconnected by a communication network. Examples of communication networks include a local area network ("LAN") and a wide area network ("WAN"), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
- The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit).
- While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any inventions or of what may be claimed, but rather as descriptions of features specific to particular implementations of particular inventions. Certain features that are described in this specification in the context of separate implementations can also be implemented in combination in a single implementation. Conversely, various features that are described in the context of a single implementation can also be implemented in multiple implementations separately or in any suitable sub-combination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a sub-combination or variation of a sub-combination.
- Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the implementations described above should not be understood as requiring such separation in all implementations, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
- References to "or" may be construed as inclusive so that any terms described using "or" may indicate any of a single, more than one, and all of the described terms. The labels "first," "second," "third," and so forth are not necessarily meant to indicate an ordering and are generally used merely to distinguish between like or similar items or elements.
Claims (14)
- A computer-implemented method for automatically detecting and correlating anomalous time-series data related to performance characteristics of a computer network, the method comprising:receiving (310) a plurality of time-series data associated with one or more network data streams;processing the received plurality of time-series data and generating (320) one or more sets of aligned time-series data;detecting anomalous time-stamped data points in each of the one or more sets of aligned time-series data and generating (330) one or more groups of annotated time-series data, wherein the annotation identifies one or more specific time-stamped data points as anomalous;determining (610) a number of anomalous groups of annotated time-series data within all of the one or more groups of annotated time-series data;determining (620) the probability that one or more anomalous groups of annotated time-series data belong to at least one of the groups of annotated time-series data using a generative statistical model and outputting (340, 650) one or more correlated anomalous groups, wherein the one or more anomalous groups are determined to be correlated based on the anomalous group including one or more statistically correlated anomalous time-stamped data points;processing each of the one or more outputted correlated anomalous groups to generate (350) a detailed statistical report (730) for each correlated anomalous group; andoutputting (360) to users an aggregated statistical report (735) for the one or more correlated anomalous groups, including probabilities of single and grouped network entity failures for detecting and correlating network failure anomalies and for performing network planning by identifying and modeling critical failure modes and optimizing network resources.
- The method of claim 1 or the system of claim 14, wherein the received time-series data includes one or more of binary data types, categorical data types, or real-valued data types.
- The method of claim 1 or the system of claim 14, wherein the one or more network data streams are received from external sources.
- The method of claim 1 or the system of claim 14, wherein processing the received plurality of time-series data comprises one or more of:normalizing (410) the time-series data,inputting (420) missing values,performing (430) time-stamp up-sampling,performing (430) time-stamp down-sampling, andremoving (440) noise from the received plurality of time-series data;wherein the steps of processing the received plurality of time-series data are preferably performed in parallel.
- The method of claim 1 or the system of claim 14, wherein the generated one or more sets of aligned time-series data are temporally aligned.
- The method of claim 1 or the system of claim 14, wherein detecting anomalous time-stamped data points in each of the one or more sets of aligned time-series data is performed using one or more virtual interfaces;wherein the one or more virtual interfaces are determined (510) based on the data type of the aligned time-series data; andwherein the one or more of virtual interfaces may preferably detect anomalous time-stamped data points in parallel.
- The method of claim 1 or the system of claim 14, wherein detecting anomalous time-stamped data points includes discretizing (520) each of the one or more sets of aligned time-series data; and/or
wherein determining (610) the number of anomalous groups within all of the one or more annotated sets of time-series data is performed using a locality sensitive hashing algorithm. - The method of claim 1 or the system of claim 14, wherein the generative statistical model is a Latent Dirichlet Allocation model.
- The method of claim 1 or the system of claim 14, wherein determining (620) the probability that one or more anomalous groups of annotated time-series data belong to at least one of the groups of annotated time-series data and outputting (340, 650) one or more correlated anomalous groups is performed in parallel.
- The method of claim 1 or the system of claim 14, wherein the one or more anomalous groups are determined to be not correlated based on the one or more anomalous groups not including one or more statistically correlated anomalous time-stamped data points.
- The method of claim 1 or the system of claim 14, wherein the detailed statistical report for each correlated anomalous group identifies the Pearson correlation coefficient, the Jaccard similarity coefficient, and/or the Bayes factors of each correlated anomalous group.
- The method of claim 1 or the system of claim 14, wherein the aggregated statistical report (735) is output to users via one or more application programming interfaces.
- The method of claim 1 or the system of claim 14, wherein the aggregated statistical report (735) is human-interpretable.
- A system for automatically detecting and correlating anomalous time-series data, the system comprising:a memory storing computer-readable instructions and one or more generative statistical models; anda processor, the processor configured to execute the computer-readable instructions, which when executed carry out the method comprising:receiving (310) a plurality of time-series data associated with one or more network data streams,processing the received plurality of time-series data and generating (320) one or more sets of aligned time-series data,detecting anomalous time-stamped data points in each of the one or more sets of aligned time-series data and generating (330) one or more groups of annotated time-series data, wherein the annotation identifies one or more specific time-stamped data points as anomalous,determining (610) a number of anomalous groups of annotated time-series data within all of the one or more groups of annotated time-series data,determining (620) the probability that one or more anomalous groups of annotated time-series data belong to at least one of the groups of annotated time-series data using a generative statistical model and outputting (340, 650) one or more correlated anomalous groups, wherein the one or more anomalous groups are determined to be correlated based on the anomalous group including one or more statistically correlated anomalous time-stamped data points,processing each of the one or more outputted correlated anomalous groups to generate (350) a detailed statistical report (730) for each correlated anomalous group,outputting (360) to users an aggregated statistical report (735) for the one or more correlated anomalous groups, including probabilities of single and grouped network entity failures for detecting and correlating network failure anomalies and for performing network planning by identifying and modeling critical failure modes and optimizing network resources.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
EP24164831.0A EP4369220A2 (en) | 2017-11-17 | 2018-09-25 | Real-time anomaly detection and correlation of time-series data |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/816,483 US10628252B2 (en) | 2017-11-17 | 2017-11-17 | Real-time anomaly detection and correlation of time-series data |
PCT/US2018/052684 WO2019099107A1 (en) | 2017-11-17 | 2018-09-25 | Real-time anomaly detection and correlation of time-series data |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP24164831.0A Division EP4369220A2 (en) | 2017-11-17 | 2018-09-25 | Real-time anomaly detection and correlation of time-series data |
Publications (2)
Publication Number | Publication Date |
---|---|
EP3616127A1 EP3616127A1 (en) | 2020-03-04 |
EP3616127B1 true EP3616127B1 (en) | 2024-04-17 |
Family
ID=63794749
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP18783321.5A Active EP3616127B1 (en) | 2017-11-17 | 2018-09-25 | Real-time anomaly detection and correlation of time-series data |
EP24164831.0A Pending EP4369220A2 (en) | 2017-11-17 | 2018-09-25 | Real-time anomaly detection and correlation of time-series data |
Family Applications After (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP24164831.0A Pending EP4369220A2 (en) | 2017-11-17 | 2018-09-25 | Real-time anomaly detection and correlation of time-series data |
Country Status (3)
Country | Link |
---|---|
US (2) | US10628252B2 (en) |
EP (2) | EP3616127B1 (en) |
WO (1) | WO2019099107A1 (en) |
Families Citing this family (43)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
DE102017222616A1 (en) * | 2017-12-13 | 2019-06-13 | Robert Bosch Gmbh | A method for automatically creating rules for rule-based anomaly detection in a data stream |
US11382546B2 (en) * | 2018-04-10 | 2022-07-12 | Ca, Inc. | Psychophysical performance measurement of distributed applications |
US10535417B2 (en) | 2018-05-16 | 2020-01-14 | Micron Technology, Inc. | Memory system quality margin analysis and configuration |
US10825540B2 (en) * | 2018-05-16 | 2020-11-03 | Micron Technology, Inc. | Memory system quality integral analysis and configuration |
US11108795B2 (en) * | 2018-05-25 | 2021-08-31 | At&T Intellectual Property I, L.P. | Intrusion detection using robust singular value decomposition |
US20200034733A1 (en) * | 2018-07-27 | 2020-01-30 | Vmware, Inc. | Anomaly detection on time series data |
US20200097852A1 (en) * | 2018-09-20 | 2020-03-26 | Cable Television Laboratories, Inc. | Systems and methods for detecting and grouping anomalies in data |
US11257001B2 (en) * | 2018-10-09 | 2022-02-22 | International Business Machines Corporation | Prediction model enhancement |
US11232368B2 (en) * | 2019-02-20 | 2022-01-25 | Accenture Global Solutions Limited | System for predicting equipment failure events and optimizing manufacturing operations |
US11494690B2 (en) * | 2019-03-15 | 2022-11-08 | Hong Kong Applied Science and Technology Research Institute Company Limited | Apparatus and method of high dimensional data analysis in real-time |
FR3094164B1 (en) * | 2019-03-22 | 2021-10-29 | Streamroot | Method of obtaining a data segment by a client device capable of communicating with a plurality of content delivery networks |
US11410061B2 (en) * | 2019-07-02 | 2022-08-09 | Servicenow, Inc. | Dynamic anomaly reporting |
EP4004734A4 (en) * | 2019-07-26 | 2023-08-16 | Telefonaktiebolaget LM Ericsson (publ.) | Methods, devices and computer storage media for anomaly detection |
CN112532467B (en) * | 2019-09-17 | 2022-12-27 | 华为技术有限公司 | Method, device and system for realizing fault detection |
US11651249B2 (en) * | 2019-10-22 | 2023-05-16 | EMC IP Holding Company LLC | Determining similarity between time series using machine learning techniques |
EP3859459A1 (en) * | 2020-02-03 | 2021-08-04 | Robert Bosch GmbH | A computer implemented machine learning system and a method for operating the machine learning system for determining a time series |
US11501189B2 (en) | 2020-02-17 | 2022-11-15 | Kyndryl, Inc. | Anomaly detection using zonal parameter characteristics and non-linear scoring |
CN111507412B (en) * | 2020-04-20 | 2021-02-19 | 南京工程学院 | Voltage missing value filling method based on historical data auxiliary scene analysis |
US11675799B2 (en) * | 2020-05-05 | 2023-06-13 | International Business Machines Corporation | Anomaly detection system |
US11675646B2 (en) * | 2020-06-25 | 2023-06-13 | Amazon Technologies, Inc. | Systems, apparatuses, and methods for anomaly detection |
US11651031B2 (en) * | 2020-08-10 | 2023-05-16 | International Business Machines Corporation | Abnormal data detection |
US11212195B1 (en) | 2020-09-11 | 2021-12-28 | Microsoft Technology Licensing, Llc | IT monitoring recommendation service |
US11314584B1 (en) | 2020-11-25 | 2022-04-26 | International Business Machines Corporation | Data quality-based confidence computations for KPIs derived from time-series data |
US11243835B1 (en) | 2020-12-03 | 2022-02-08 | International Business Machines Corporation | Message-based problem diagnosis and root cause analysis |
US11513930B2 (en) | 2020-12-03 | 2022-11-29 | International Business Machines Corporation | Log-based status modeling and problem diagnosis for distributed applications |
US11599404B2 (en) | 2020-12-03 | 2023-03-07 | International Business Machines Corporation | Correlation-based multi-source problem diagnosis |
US20220179764A1 (en) * | 2020-12-03 | 2022-06-09 | International Business Machines Corporation | Multi-source data correlation extraction for anomaly detection |
US11797538B2 (en) | 2020-12-03 | 2023-10-24 | International Business Machines Corporation | Message correlation extraction for mainframe operation |
US11403326B2 (en) | 2020-12-03 | 2022-08-02 | International Business Machines Corporation | Message-based event grouping for a computing operation |
US11474892B2 (en) | 2020-12-03 | 2022-10-18 | International Business Machines Corporation | Graph-based log sequence anomaly detection and problem diagnosis |
US11817994B2 (en) * | 2021-01-25 | 2023-11-14 | Yahoo Assets Llc | Time series trend root cause identification |
US20220335347A1 (en) * | 2021-04-15 | 2022-10-20 | Business Objects Software Ltd | Time-series anomaly prediction and alert |
US11856014B2 (en) * | 2021-04-23 | 2023-12-26 | Capital One Services, Llc | Anomaly detection in computing computing system events |
US20220342860A1 (en) * | 2021-04-23 | 2022-10-27 | Capital One Services, Llc | Anomaly detection in a split timeseries dataset |
US11640387B2 (en) * | 2021-04-23 | 2023-05-02 | Capital One Services, Llc | Anomaly detection data workflow for time series data |
US11625237B2 (en) | 2021-06-03 | 2023-04-11 | International Business Machines Corporation | Autonomous contextual software support anomaly detection and playbook automation |
US20230004551A1 (en) * | 2021-07-02 | 2023-01-05 | Viettel Group | Method of processing and storing data for real time anomaly detection problem |
CN113268372B (en) * | 2021-07-21 | 2021-09-24 | 中国人民解放军国防科技大学 | One-dimensional time series anomaly detection method and device and computer equipment |
US11902127B2 (en) * | 2021-11-23 | 2024-02-13 | Cisco Technology, Inc. | Automatic detection and tracking of anomalous rectifiable paths using time-series dynamics |
WO2023147871A1 (en) * | 2022-02-04 | 2023-08-10 | Telefonaktiebolaget Lm Ericsson (Publ) | Extracting temporal patterns from data collected from a communication network |
US20230291636A1 (en) * | 2022-03-10 | 2023-09-14 | Cisco Technology, Inc. | Application degradation root causing and rerouting using time series clustering |
CN114659804B (en) * | 2022-03-21 | 2024-02-27 | 广州华盈信息技术有限公司 | Method and system for monitoring automobile detection data of automobile detection station |
CN117538936A (en) * | 2023-09-27 | 2024-02-09 | 北京锐星远畅科技有限公司 | Rapid detection method and system for shot gather abnormal channel in petroleum geophysical exploration |
Family Cites Families (13)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7363656B2 (en) | 2002-11-04 | 2008-04-22 | Mazu Networks, Inc. | Event detection/anomaly correlation heuristics |
US20090030753A1 (en) * | 2007-07-27 | 2009-01-29 | General Electric Company | Anomaly Aggregation method |
WO2011121726A1 (en) * | 2010-03-30 | 2011-10-06 | 株式会社 東芝 | Anomaly detection device |
US9727533B2 (en) * | 2014-05-20 | 2017-08-08 | Facebook, Inc. | Detecting anomalies in a time series |
KR102195070B1 (en) * | 2014-10-10 | 2020-12-24 | 삼성에스디에스 주식회사 | System and method for detecting and predicting anomalies based on analysis of time-series data |
US10261851B2 (en) * | 2015-01-23 | 2019-04-16 | Lightbend, Inc. | Anomaly detection using circumstance-specific detectors |
US10042697B2 (en) * | 2015-05-28 | 2018-08-07 | Oracle International Corporation | Automatic anomaly detection and resolution system |
US9323599B1 (en) * | 2015-07-31 | 2016-04-26 | AppDynamics, Inc. | Time series metric data modeling and prediction |
US10198339B2 (en) * | 2016-05-16 | 2019-02-05 | Oracle International Corporation | Correlation-based analytic for time-series data |
US10270788B2 (en) * | 2016-06-06 | 2019-04-23 | Netskope, Inc. | Machine learning based anomaly detection |
US10567535B2 (en) * | 2017-01-27 | 2020-02-18 | International Business Machines Corporation | Monitoring and alerting a user to variants from predicted patterns based on real time device analysis |
CN107203806B (en) * | 2017-05-15 | 2020-01-10 | 东软集团股份有限公司 | Data anomaly detection method and device, readable storage medium and electronic equipment |
US20200097852A1 (en) * | 2018-09-20 | 2020-03-26 | Cable Television Laboratories, Inc. | Systems and methods for detecting and grouping anomalies in data |
-
2017
- 2017-11-17 US US15/816,483 patent/US10628252B2/en active Active
-
2018
- 2018-09-25 EP EP18783321.5A patent/EP3616127B1/en active Active
- 2018-09-25 EP EP24164831.0A patent/EP4369220A2/en active Pending
- 2018-09-25 WO PCT/US2018/052684 patent/WO2019099107A1/en unknown
-
2020
- 2020-03-02 US US16/806,218 patent/US11275639B2/en active Active
Also Published As
Publication number | Publication date |
---|---|
US20190155672A1 (en) | 2019-05-23 |
US20200201701A1 (en) | 2020-06-25 |
EP3616127A1 (en) | 2020-03-04 |
US10628252B2 (en) | 2020-04-21 |
EP4369220A2 (en) | 2024-05-15 |
US11275639B2 (en) | 2022-03-15 |
WO2019099107A1 (en) | 2019-05-23 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
EP3616127B1 (en) | Real-time anomaly detection and correlation of time-series data | |
JP6811276B2 (en) | Sparse neural network-based anomaly detection in multidimensional time series | |
US11403164B2 (en) | Method and device for determining a performance indicator value for predicting anomalies in a computing infrastructure from values of performance indicators | |
US20180348747A1 (en) | System and method for unsupervised root cause analysis of machine failures | |
AU2012284459B2 (en) | Method of sequential kernel regression modeling for forecasting and prognostics | |
Song et al. | Identifying performance anomalies in fluctuating cloud environments: A robust correlative-GNN-based explainable approach | |
CN113518011B (en) | Abnormality detection method and apparatus, electronic device, and computer-readable storage medium | |
JP6875179B2 (en) | System analyzer and system analysis method | |
Lim et al. | Identifying recurrent and unknown performance issues | |
AU2012284497A1 (en) | Monitoring system using kernel regression modeling with pattern sequences | |
Nizam et al. | Real-time deep anomaly detection framework for multivariate time-series data in industrial iot | |
CA2841442A1 (en) | System of sequential kernel regression modeling for forecasting and prognostics | |
Yang | Monitoring and diagnosing of mean shifts in multivariate manufacturing processes using two-level selective ensemble of learning vector quantization neural networks | |
JPWO2019239542A1 (en) | Abnormality detection device, abnormality detection method, and abnormality detection program | |
CN117041017B (en) | Intelligent operation and maintenance management method and system for data center | |
Gupta et al. | A supervised deep learning framework for proactive anomaly detection in cloud workloads | |
CN113554128A (en) | Unconventional anomaly detection method and system and storage medium | |
Berns et al. | Towards Gaussian Processes for Automatic and Interpretable Anomaly Detection in Industry 4.0. | |
Yamnual et al. | Failure detection through monitoring of the scientific distributed system | |
Xin et al. | Dynamic probabilistic model checking for sensor validation in Industry 4.0 applications | |
Xu et al. | Deep multi-instance contrastive learning with dual attention for anomaly precursor detection | |
CN115330362A (en) | Engineering progress data processing method and system | |
Hu et al. | TS-InvarNet: Anomaly detection and localization based on tempo-spatial KPI invariants in distributed services | |
Yang et al. | Root Cause Location Based on Prophet and Kernel Density Estimation | |
Gu et al. | Performance issue identification in cloud systems with relational-temporal anomaly detection |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: UNKNOWN |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: THE INTERNATIONAL PUBLICATION HAS BEEN MADE |
|
PUAI | Public reference made under article 153(3) epc to a published international application that has entered the european phase |
Free format text: ORIGINAL CODE: 0009012 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: REQUEST FOR EXAMINATION WAS MADE |
|
17P | Request for examination filed |
Effective date: 20191126 |
|
AK | Designated contracting states |
Kind code of ref document: A1Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
AX | Request for extension of the european patent |
Extension state: BA ME |
|
DAV | Request for validation of the european patent (deleted) | ||
DAX | Request for extension of the european patent (deleted) | ||
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: EXAMINATION IS IN PROGRESS |
|
17Q | First examination report despatched |
Effective date: 20211005 |
|
REG | Reference to a national code |
Ref document number: 602018068230Country of ref document: DERef country code: DERef legal event code: R079Free format text: PREVIOUS MAIN CLASS: G06K0009620000Ipc: G06F0017180000 |
|
GRAP | Despatch of communication of intention to grant a patent |
Free format text: ORIGINAL CODE: EPIDOSNIGR1 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: GRANT OF PATENT IS INTENDED |
|
RIC1 | Information provided on ipc code assigned before grant |
Ipc: G06F 18/2433 20230101ALI20231011BHEPIpc: H04L 9/40 20220101ALI20231011BHEPIpc: G06F 17/18 20060101AFI20231011BHEP |
|
INTG | Intention to grant announced |
Effective date: 20231110 |
|
GRAS | Grant fee paid |
Free format text: ORIGINAL CODE: EPIDOSNIGR3 |
|
GRAA | (expected) grant |
Free format text: ORIGINAL CODE: 0009210 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: THE PATENT HAS BEEN GRANTED |
|
AK | Designated contracting states |
Kind code of ref document: B1Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
P01 | Opt-out of the competence of the unified patent court (upc) registered |
Effective date: 20240308 |
|
REG | Reference to a national code |
Ref country code: GBRef legal event code: FG4D |
|
REG | Reference to a national code |
Ref country code: CHRef legal event code: EP |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R096Ref document number: 602018068230Country of ref document: DE |