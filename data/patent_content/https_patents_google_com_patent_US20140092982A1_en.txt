US20140092982A1 - Scan pattern determination from base layer pixel information for scalable extension - Google Patents
Scan pattern determination from base layer pixel information for scalable extension Download PDFInfo
- Publication number
- US20140092982A1 US20140092982A1 US14/020,922 US201314020922A US2014092982A1 US 20140092982 A1 US20140092982 A1 US 20140092982A1 US 201314020922 A US201314020922 A US 201314020922A US 2014092982 A1 US2014092982 A1 US 2014092982A1
- Authority
- US
- United States
- Prior art keywords
- edge
- video
- unit
- scan
- base layer
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
Images
Classifications
-
- H04N19/00775—
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/102—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or selection affected or controlled by the adaptive coding
- H04N19/129—Scanning of coding units, e.g. zig-zag scan of transform coefficients or flexible macroblock ordering [FMO]
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/134—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or criterion affecting or controlling the adaptive coding
- H04N19/136—Incoming video signal characteristics or properties
- H04N19/14—Coding unit complexity, e.g. amount of activity or edge presence estimation
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/169—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding
- H04N19/17—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding the unit being an image region, e.g. an object
- H04N19/176—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding the unit being an image region, e.g. an object the region being a block, e.g. a macroblock
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/30—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using hierarchical techniques, e.g. scalability
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/169—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding
- H04N19/187—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding the unit being a scalable video layer
Definitions
- Video compression systems employ block processing for most of the compression operations.
- a block is a group of neighboring pixels and may be treated as one coding unit in terms of the compression operations. Theoretically, a larger coding unit is preferred to take advantage of correlation among immediately neighboring pixels.
- Various video compression standards e.g., Motion Picture Expert Group (“MPEG”)-1, MPEG-2, and MPEG-4, use block sizes of 4 ⁇ 4, 8 ⁇ 8, and 16 ⁇ 16 (referred to as a macroblock).
- High efficiency video coding is a block-based hybrid spatial and temporal predictive coding scheme.
- HEVC partitions an input picture into square blocks referred to as coding tree units (“CTUs”) as shown in FIG. 1 .
- the CTU can be as large as 128 ⁇ 128 pixels.
- Each CTU can be partitioned into smaller square blocks called coding units (“CUs”).
- FIG. 2 shows an example of a CTU partition of CUs.
- a CTU 100 is first partitioned into four CUs 102 .
- Each CU 102 may be further split into four smaller CUs 102 that are a quarter of the size of the CU 102 .
- CUs 102 - 1 , 102 - 3 , and 102 - 4 are a quarter of the size of CTU 100 . Further, a CU 102 - 2 has been split into four CUs 102 - 5 , 102 - 6 , 102 - 7 , and 102 - 8 .
- Each CU 102 may include one or more blocks, which may be referred to as prediction units (“PUs”).
- FIG. 3A shows an example of a CU partition of PUs.
- the PUs may be used to perform spatial prediction or temporal prediction.
- a CU can be either spatially or temporally predictively coded. If a CU is coded in intra mode, each PU of the CU can have its own spatial prediction direction. If a CU is coded in inter mode, each PU of the CU can have its own motion vectors and associated reference pictures.
- a set of block transforms of different sizes may be applied to a CU 102 .
- the CU partition of PUs 202 shown in FIG. 3A may be associated with a set of transform units (“TUs”) 204 shown in FIG. 3B .
- TUs transform units
- FIG. 3B PU 202 - 1 is partitioned into four TUs 204 - 5 through 204 - 8 .
- TUs 204 - 2 , 204 - 3 , and 204 - 4 are the same size as corresponding PUs 202 - 2 through 202 - 4 .
- Each TU 204 can include one or more transform coefficients in most cases but may include none (e.g., all zeros). Transform coefficients of the TU 204 can be quantized into one of a finite number of possible values. After the transform coefficients have been quantized, the quantized transform coefficients can be entropy coded to obtain the final compressed bits that can be sent to a decoder.
- scalable video coding supports decoders with different capabilities.
- An encoder generates multiple bitstreams for an input video.
- One of the output bitstreams referred to as the base layer
- the base layer can be decoded by itself, and this bitstream provides the lowest scalability level of the video output.
- the decoder can process the base-layer bitstream together with other output bitstreams, referred to as enhancement layers.
- One or more enhancement layers may be added to the base layer to generate higher scalability levels.
- One example is spatial scalability, where the base layer represents the lowest resolution video and the decoder can generate higher resolution video by combining the base-layer bitstream together with additional enhancement-layer bitstreams.
- additional enhancement-layer bitstreams produces a better quality video output.
- a method determines a first unit of video in a base layer and analyzes a portion of pixels for the first unit of video in the base layer.
- a scan pattern for a second unit of video in an enhancement layer is determined based on analyzing the portion of the pixels in the base layer.
- the enhancement layer is useable to enhance the base layer.
- the method then performs a scan of the second unit of video in the selected scan pattern for a transform process in the enhancement layer.
- FIG. 1 shows an input picture partitioned into square blocks referred to as coding tree units.
- FIG. 2 shows an example of a CTU partition of CUs.
- FIG. 3A shows an example of a CU partition of PUs.
- FIG. 3B shows a set of transform units.
- FIG. 4 depicts an example of a system for encoding and decoding video content according to one embodiment.
- FIG. 5 depicts a table showing different scan patterns that the encoder and decoder can use for enhancement layers based on pixel information from the base layer according to one embodiment.
- FIG. 6 is a simplified flowchart of a method for selecting the scan pattern according to one embodiment.
- FIG. 7 shows an example of a transform unit in the base layer according to one embodiment.
- FIG. 8 depicts pseudocode of one method for determining whether the vertical edge and horizontal edge exist according to one embodiment.
- FIG. 9 is a simplified flowchart of a method for encoding video according to one embodiment.
- FIG. 10 is a simplified flowchart of a method for decoding video according to one embodiment.
- FIG. 11A depicts an encoder according to one embodiment.
- FIG. 11B depicts a decoder according to one embodiment.
- FIG. 4 depicts an example of a system 400 for encoding and decoding video content according to one embodiment.
- Encoder 402 and decoder 403 may encode and decode a bitstream using HEVC; however, other video compression standards may also be appreciated.
- Encoder 402 includes a scan-pattern manager 404 - 1
- decoder 403 includes a scan-pattern manager 404 - 2 .
- Both scan-pattern managers 404 - 1 and 404 - 2 may perform similar functions and thus a discussion regarding either scan-pattern manager 404 may apply to the other scan-pattern manager.
- both scan-pattern managers 404 - 1 and 404 - 2 determine a scan pattern implicitly. By implicitly determining the scan pattern, encoder 402 and decoder 403 may independently make this determination without any signaling of which scan pattern to use. For example, encoder 402 does not explicitly signal to decoder 403 which scan pattern to use in a transform process. Rather, scan-pattern manager 404 - 1 and scan manager 404 - 2 independently determine the same scan pattern to use in a transform process.
- Encoder 402 may use scalable video coding to send multiple bitstreams (e.g., a base layer and multiple enhancement layers) to different decoders 403 for an input video. Decoders 403 can then determine which bitstreams to process based on their own capabilities. For example, decoders can pick which quality is desired and process the corresponding bitstreams. For example, each decoder 403 may process the base layer and then can decide how many enhancement-layer bitstreams to combine with the base layer for varying levels of quality.
- bitstreams e.g., a base layer and multiple enhancement layers
- Encoder 402 encodes the base layer by down sampling the input video and coding the down-sampled version. To encode the base layer, encoder 402 encodes the bitstream with all the information that decoder 403 needs to decode the base layer. An enhancement layer, however, cannot be decoded on its own. To encode an enhancement layer, encoder 402 up samples the down-sampled base layer and then subtracts the up-sampled version from the down-sampled base layer. The difference is then coded for the enhancement layer, which results in a smaller bitstream than the base layer. Encoder 402 may encode any number of enhancement layers by continuing the upsampling.
- Encoder 402 and decoder 403 may perform a transform process while encoding/decoding the base layer and the enhancement layers.
- a transform unit for a prediction unit undergoes a transform process.
- the transform process de-correlates the pixels within a block and compacts the block energy into low-order coefficients in the transform unit.
- the transform process may result in a residual prediction unit in the transform domain as a transform calculation is performed.
- encoder 402 and decoder 403 may perform a discrete cosine transform (“DCT”) or a discrete sine transform (“DST”) on pixel values in the transform unit.
- DCT discrete cosine transform
- DST discrete sine transform
- DCT may be used for any TU
- DST can be used only for a 4 ⁇ 4 intra Luma TU
- transform skip is available for the 4 ⁇ 4 TU.
- the transform process may declare that no transform should be used, which may be referred to as transform skip mode. Conventionally, a flag is transmitted to indicate whether or not transform skip is used.
- encoder 402 When performing the transform process, encoder 402 encodes the coefficients of the transform unit in the bitstream based on a scan pattern. Then, decoder 403 decodes the bitstream using the same scan pattern used to encode the bitstream. In one embodiment, encoder 402 and decoder 403 can use three scan patterns, such as diagonal, horizontal, and vertical patterns. Conventionally, in a single layer, the three scan patterns may be used in intra 4 ⁇ 4 and 8 ⁇ 8 transform units. Conventionally, encoder 402 determines the scan pattern based on the intra-prediction direction in the same layer. However, if intra-prediction is not used, encoder 402 signals the scan pattern to decoder 403 . The signaling, however, increases overhead as bits are used to signal the scan pattern.
- particular embodiments implicitly determine the scan pattern without signaling which scan pattern is used from encoder 402 to decoder 403 . Also, particular embodiments determine the scan pattern based on pixels in the base layer for an enhancement layer. Thus, information from a different layer is used to determine the scan pattern. Also, particular embodiments are flexible in that encoder 402 and decoder 403 determine the scan pattern implicitly even when the base layer TU layer does not use intra prediction.
- FIG. 5 depicts a table 500 showing different scan patterns that encoder 402 and decoder 403 can use for enhancement layers based on pixel information from the base layer according to one embodiment.
- scan-pattern manager 404 when encoding or decoding an enhancement layer, analyzes the pixel information in the base layer to determine which scan pattern to use with the transform process.
- scan-pattern manager 404 detects whether a high frequency component exists in the base layer.
- One high frequency component is an edge that may occur in the base layer.
- An edge may be a difference in pixel values between consecutive pixels (or in a group of pixels) that is over a threshold. For example, an edge may be where pixels change in color or on a border of an object.
- encoder 402 and decoder 403 may detect other high frequency components.
- the edge that scan-pattern manager 404 detects is horizontal. Based on detecting the horizontal edge, scan-pattern manager 404 may determine a vertical scan pattern shown at 504 for the transform process when encoder 402 and decoder 403 perform a transform calculation, such as using the DCT and DST transforms. Also, scan-pattern manager 404 determines a horizontal scan pattern at 506 when the transform skip process is used (e.g., no transform calculation is performed).
- scan-pattern manager 404 may determine a horizontal scan pattern at 510 when performing a transform calculation, and the vertical scan pattern at 512 when using the transform skip process.
- scan-pattern manager 404 may use the diagonal scan pattern when performing a transform calculation and the transform skip process.
- the goal of adaptive scan is to select a scan pattern that can reach all nonzero (quantized) transform coefficients in a shortest distance.
- a video block that possesses strong horizontal patterns has strong energy along vertical frequency components.
- transform skip process may be most efficient when the unit may have no transform coefficients or very few, and a scan pattern with the same direction as dominant edges within the transform unit is more efficient.
- scan-pattern manager 404 may select other scan patterns based on the edges detected.
- FIG. 6 is a simplified flowchart 600 of a method for selecting the scan pattern according to one embodiment.
- scan-pattern manager 404 determines a unit of video in an enhancement layer. For example, scan-pattern manager 404 determines a transform unit in a prediction unit of a picture being encoded or decoded.
- scan-pattern manager 404 analyzes at least a portion of the pixels of a base layer. For example, pixel values in a corresponding transform unit (e.g., a transform unit in the same position of the current transform unit) in the base layer are analyzed. In one embodiment, as is discussed in more detail below, pixel values along the boundary of the transform unit (i.e., pixels directly next to a neighboring transform unit) in the base layer are analyzed. Although boundary pixels are described, pixels not along the boundary may be used. This may increase accuracy, but increase overhead.
- scan-pattern manager 404 determines a location of an edge based on the analysis in 604 . For example, a horizontal edge, a vertical edge, both a horizontal edge and a vertical edge, or no horizontal edge nor vertical edge is determined.
- scan-pattern manager 404 selects a scan pattern based on the determination of the edge or edges. For example, scan-pattern manager 404 determines the scan pattern based on table 500 shown in FIG. 5 .
- encoder 402 and decoder 403 then perform the scan using the scan pattern for the transform process.
- FIG. 7 shows an example of a transform unit in the base layer according to one embodiment.
- Boundary pixels are depicted for edge detection. However, it will be understood that pixels other than those found along the boundary may be used for edge detection.
- Each boundary pixel is depicted by the letter “P” where P[0,x], P[7,x], P[y,0], and P[y,7] are boundary pixels, W is the width of the transform unit, k is an integer between 0 and W-m, where m is a positive integer setting the distance between the two boundary pixels for edge testing purposes, and x and y are pixel coordinates in the horizontal and vertical dimensions, respectively.
- this size TU (8 ⁇ 8) is shown, other sized may be used.
- pixels in a first row shown at 702 are compared to determine a maximum distance between pixels.
- scan manager 404 compares pixel P[0,0] to P[0,1] to determine a difference in the pixel values.
- scan manager 404 compares pixel P[0,1] to pixel P[0,2] to determine the difference in these pixel values. This continues as each consecutive pixel value in the row at 702 is compared.
- Scan-pattern manager 404 determines the maximum difference between consecutive pixel values in the row at 702 .
- consecutive pixel values are described, the comparison may not be between consecutive pixels (e.g., every other pixel may be compared or groups of pixels may be compared).
- scan manager 404 records the location of the peak. Similarly, in a row shown at 704 , scan manager 404 compares pixel P[7,0] to pixel P[7,1] to determine the difference in pixel values. Similarly, as described above, scan-pattern manager 404 then continues to compare consecutive pixel values for the entire row at 704 . Scan-pattern manager 404 then determines the peak difference between pixel values as the bottom vertical edge peak and records the location of the peak.
- a column at 706 is used to determine a left horizontal edge. For example, scan manager 404 compares pixel P[0,0] to pixel P[1,0] to determine the difference in pixel values. Then, scan manager 404 compares pixel P[1,0] to pixel P[2,0] to determine another difference in pixel values. This process continues as scan manager 404 determines the difference in pixel values for consecutive pixels in the entire column. Scan-pattern manager 404 then determines the left horizontal edge peak based on the maximum difference determined and records the location of the peak. In a column 708 , scan-pattern manager 404 performs the same calculation with the pixel values to determine a right horizontal edge peak and records the location of the peak.
- scan-pattern manager 404 may determine if a vertical edge or horizontal edge is found in the transform unit. For example, scan-pattern manager 404 compares the top vertical edge peak and bottom vertical edge peak and the respective locations to thresholds to determine if a vertical edge is present, and scan-pattern manager 404 compares the left horizontal edge peak and the right horizontal edge peak with respective locations to thresholds to determine whether a horizontal edge is present.
- Scan-pattern manager 404 may use different methods to determine whether a transform unit includes a horizontal edge or a vertical edge.
- FIG. 8 depicts pseudocode 800 of one method for determining whether the vertical edge and horizontal edge exist according to one embodiment.
- the variable top_vertical_edge_peak represents the value of the top vertical edge peak.
- Scan-pattern manager 404 determines the value as a maximum of the absolute value between each pixel value shown in the row at 702 .
- the variable top_vertical_edge_location is the horizontal coordinate of the top_vertical_edge_peak.
- variable bottom_vertical_edge_peak is the bottom vertical edge peak value in the row shown at 704 .
- Scan-pattern manager 404 determines the bottom vertical edge peak as the maximum of the absolute value for the pixels in the row shown at 704 .
- the variable bottom_vertical_edge_location is the horizontal coordinate of bottom_vertical_edge_peak.
- variable left_horizontal_edge_peak represents the horizontal edge peak value in the column shown at 706 .
- Scan-pattern manager 404 determines bottom_vertical_edge_peak as the maximum of the absolute value of the pixels in the column shown at 706 .
- the variable left_horizontal_edge_location is the vertical coordinate of left_horizontal_edge_peak, which may be the value of k.
- the variable right_horizontal_edge_peak is the value of the horizontal edge peak in the column shown at 708 .
- Scan-pattern manager 404 determines the value of the edge peak based on the maximum of the absolute value of the pixels shown in the column shown at 708 .
- the variable right_horizontal_edge_location is the vertical coordinate of right_horizontal_edge_peak.
- scan-pattern manager 404 tests whether the top vertical edge peak is greater than a threshold vertical_edge_threshold, that the bottom vertical edge peak is greater than a threshold vertical_edge_threshold, and further that the absolute value of the top vertical edge location minus the bottom vertical edge location is less than a threshold vertical_location_threshold. That is, line 9 tests whether both the top vertical edge peak and the bottom vertical edge peak are greater than a certain value that would indicate a large difference in pixel values, which makes this location most likely an edge. Further, line 9 tests whether the top vertical edge location and the bottom vertical edge location are within a certain distance.
- scan-pattern manager 404 determines that a vertical edge is present by setting the variable vertical_edge to the value of “present.”
- Scan-pattern manager 404 determines whether a horizontal edge is present.
- the above analysis may be used to determine the horizontal edge using the horizontal edge values. For example, if the left horizontal edge peak is located in a pixel P[2,0] and the right horizontal edge peak is located in a pixel P[1,7], and the peak values are above a threshold, then at line 12 , scan-pattern manager 404 - 1 may determine that a horizontal edge is present.
- the vertical edge threshold and horizontal edge threshold are thresholds that scan-pattern manager 404 uses to test whether edge peaks are true edges or not. If edge peaks for either the two horizontal edge peaks or the two vertical edge peaks are greater than the edge threshold, then these two edge peaks are considered true edges.
- the vertical location threshold and the horizontal location threshold are thresholds that scan-pattern manager 404 uses to determine whether testing true edges form a horizontal edge, a vertical edge, or other direction edge. If the difference between coordinates is both two edges are smaller than the location threshold, then the two edges form either a horizontal edge or a vertical edge.
- horizontal_edge_threshold and vertical_edge_threshold are both set to 50, and horizontal_location_threshold and vertical_edge_thershold are both set to 1.
- FIG. 9 is a simplified flowchart 900 of a method for encoding video according to one embodiment.
- encoder 402 receives an input video.
- encoder 402 encodes the base layer.
- the input video may be down sampled and encoded into the base-layer bitstream.
- Encoder 402 may encode multiple enhancement layers. The following process may be performed for each enhancement layer.
- encoder 402 determines a TU in a PU in a unit of video in the enhancement layer.
- encoder 402 determines a corresponding TU in the base layer.
- encoder 402 analyzes pixels of the corresponding TU in the base layer to determine a scan pattern to use for the TU in the enhancement layer. The scan pattern can be determined as described above.
- encoder 402 then performs the transform process using the scan pattern. Encoder 402 then finishes the encoding of the enhancement layers.
- encoder 402 sends the base layer and the enhancement layers to decoders 403 .
- encoder 402 may use simulcast to send the encoded bitstreams for the base layer and the enhancement layers.
- FIG. 10 is a simplified flowchart 1000 of a method for decoding video according to one embodiment.
- decoder 403 receives the base layer and enhancement layers.
- decoder 403 determines which enhancement layers to decode. As described above, based on the decoder's capabilities, different levels of quality may be achieved by using different numbers of enhancement layers.
- Decoder 403 may decode one or more enhancement layers. The following process may be performed for each enhancement layer that is decoded.
- decoder 403 determines a TU in a PU in a unit of video in the enhancement layer.
- decoder 403 determines a corresponding TU in the base layer.
- decoder 403 analyzes pixels of the corresponding TU in the base layer to determine a scan pattern to use for the TU in the enhancement layer. The scan pattern can be determined as described above.
- decoder 403 then performs the transform process using the scan pattern. Decoder 403 then finishes the decoding of the enhancement layers and combines the enhancement layers with the base layer. In this case, decoder 403 implicitly determines the scan pattern to use in the enhancement layer based on pixel values from the base layer.
- encoder 402 described can be incorporated or otherwise associated with a transcoder or an encoding apparatus at a headend, and decoder 403 can be incorporated or otherwise associated with a downstream device, such as a mobile device, a set-top box, or a transcoder.
- FIG. 11A depicts an example of encoder 402 according to one embodiment. A general operation of encoder 402 is now described; however, it will be understood that variations on the encoding process described will be appreciated by a person skilled in the art based on the disclosure and teachings herein.
- a spatial prediction block 1104 may include different spatial prediction directions per PU, such as horizontal, vertical, 45-degree diagonal, 135-degree diagonal, DC (flat averaging), and planar, or any other direction.
- the spatial prediction direction for the PU can be coded as a syntax element. In some embodiments, brightness information (Luma) and color information (Chroma) for the PU can be predicted separately.
- the number of Luma intra prediction modes for all block size is 35. In alternate embodiments, the number of Luma intra prediction modes for blocks of any size can be 35.
- An additional mode can be used for the Chroma intra prediction mode. In some embodiments, the Chroma prediction mode can be called “IntraFromLuma.”
- Temporal prediction block 1106 performs temporal prediction.
- Inter-mode coding can use data from the current input image and one or more reference images to code “P” pictures or “B” pictures. In some situations or embodiments, inter-mode coding can result in higher compression than intra-mode coding.
- inter-mode PUs 204 can be temporally predictive coded, such that each PU 204 of the CU 202 can have one or more motion vectors and one or more associated reference images.
- Temporal prediction can be performed through a motion estimation operation that searches for a best match prediction for the PU over the associated reference images. The best match prediction can be described by the motion vectors and associated reference images.
- P pictures use data from the current input image and one or more previous reference images.
- B pictures use data from the current input image and both previous and subsequent reference images and can have up to two motion vectors.
- the motion vectors and reference pictures can be coded in the HEVC bitstream.
- the motion vectors can be syntax elements “MV,” and the reference pictures can be syntax elements “refIdx.”
- inter mode can allow both spatial and temporal predictive coding. The best match prediction is described by the MV and associated refIdx.
- the motion vector and associated reference picture index are included in the coded bitstream.
- Transform block 1107 performs a transform operation with the residual PU, e.
- a set of block transforms of different sizes can be performed on a CU, such that some PUs can be divided into smaller TUs, and other PUs can have TUs the same size as the PU. Division of CUs and PUs into TUs can be shown by a quadtree representation.
- Transform block 1107 outputs the residual PU in a transform domain, E.
- a quantizer 1108 then quantizes the transform coefficients of the residual PU, E.
- Quantizer 1108 converts the transform coefficients into a finite number of possible values. In some embodiments, this is a lossy operation in which data lost by quantization may not be recoverable.
- entropy coding block 1110 entropy encodes the quantized coefficients, which results in final compression bits to be transmitted. Different entropy coding methods may be used, such as context-adaptive variable length coding or context-adaptive binary arithmetic coding.
- a de-quantizer 1112 de-quantizes the quantized transform coefficients of the residual PU.
- De-quantizer 1112 then outputs the de-quantized transform coefficients of the residual PU, E′.
- An inverse transform block 1114 receives the de-quantized transform coefficients, which are then inverse transformed resulting in a reconstructed residual PU, e′.
- the reconstructed PU, e′ is then added to the corresponding prediction, x′, either spatial or temporal, to form the new reconstructed PU, x′′.
- Particular embodiments may be used in determining the prediction.
- the collocated picture manager 404 may be used in the prediction process to determine the collocated picture to use.
- a loop filter 1116 performs de-blocking on the reconstructed PU, x′′, to reduce blocking artifacts. Additionally, loop filter 1116 may perform a sample adaptive offset process after the completion of the de-blocking filter process for the decoded picture, which compensates for a pixel value offset between reconstructed pixels and original pixels. Also, loop filter 1116 may perform adaptive loop filtering over the reconstructed PU, which minimizes coding distortion between the input and output pictures. Additionally, if the reconstructed pictures are reference pictures, the reference pictures are stored in a reference buffer 1118 for future temporal prediction. Intra-mode coded images can be a possible point where decoding can begin without needing additional reconstructed images.
- FIG. 11B depicts an example of decoder 403 according to one embodiment.
- Decoder 403 receives input bits from encoder 402 for encoded video content.
- An entropy decoding block 1130 performs entropy decoding on the input bitstream to generate quantized transform coefficients of a residual PU.
- a de-quantizer 1132 de-quantizes the quantized transform coefficients of the residual PU.
- De-quantizer 1132 then outputs the de-quantized transform coefficients of the residual PU, E′.
- An inverse transform block 1134 receives the de-quantized transform coefficients, which are then inverse transformed resulting in a reconstructed residual PU, e′.
- the reconstructed PU, e′ is then added to the corresponding prediction, x′, either spatial or temporal, to form the new reconstructed PU, x′′.
- a loop filter 1136 performs de-blocking on the reconstructed PU, x′′, to reduce blocking artifacts. Additionally, loop filter 1136 may perform a sample adaptive offset process after the completion of the de-blocking filter process for the decoded picture, which compensates for a pixel-value offset between reconstructed pixels and original pixels. Also, loop filter 1136 may perform adaptive loop filtering over the reconstructed PU, which minimizes coding distortion between the input and output pictures. Additionally, if the reconstructed pictures are reference pictures, the reference pictures are stored in a reference buffer 1138 for future temporal prediction.
- the prediction PU, x′ is obtained through either spatial prediction or temporal prediction.
- a spatial prediction block 1140 may receive decoded spatial prediction directions per PU, such as horizontal, vertical, 45-degree diagonal, 135-degree diagonal, DC (flat averaging), and planar. The spatial prediction directions are used to determine the prediction PU, x′.
- a temporal prediction block 1142 performs temporal prediction through a motion estimation operation. Particular embodiments may be used in determining the prediction.
- the collocated picture manager 404 may be used in the prediction process to determine the collocated picture to use.
- a decoded motion vector is used to determine the prediction PU, x′. Interpolation may be used in the motion estimation operation.
Abstract
Description
- The present disclosure claims priority to U.S. Provisional Applications 61/707,947, filed on Sep. 29, 2012, and 61/718,198, filed on Oct. 25, 2012, which are incorporated herein by reference in their entireties.
- Video compression systems employ block processing for most of the compression operations. A block is a group of neighboring pixels and may be treated as one coding unit in terms of the compression operations. Theoretically, a larger coding unit is preferred to take advantage of correlation among immediately neighboring pixels. Various video compression standards, e.g., Motion Picture Expert Group (“MPEG”)-1, MPEG-2, and MPEG-4, use block sizes of 4×4, 8×8, and 16×16 (referred to as a macroblock).
- High efficiency video coding (“HEVC”) is a block-based hybrid spatial and temporal predictive coding scheme. HEVC partitions an input picture into square blocks referred to as coding tree units (“CTUs”) as shown in
FIG. 1 . Unlike prior coding standards, the CTU can be as large as 128×128 pixels. Each CTU can be partitioned into smaller square blocks called coding units (“CUs”).FIG. 2 shows an example of a CTU partition of CUs. A CTU 100 is first partitioned into fourCUs 102. EachCU 102 may be further split into foursmaller CUs 102 that are a quarter of the size of the CU 102. This partitioning process can be repeated based on certain criteria, such as limits to the number of times a CU can be partitioned. As shown, CUs 102-1, 102-3, and 102-4 are a quarter of the size ofCTU 100. Further, a CU 102-2 has been split into four CUs 102-5, 102-6, 102-7, and 102-8. - Each
CU 102 may include one or more blocks, which may be referred to as prediction units (“PUs”).FIG. 3A shows an example of a CU partition of PUs. The PUs may be used to perform spatial prediction or temporal prediction. A CU can be either spatially or temporally predictively coded. If a CU is coded in intra mode, each PU of the CU can have its own spatial prediction direction. If a CU is coded in inter mode, each PU of the CU can have its own motion vectors and associated reference pictures. - Unlike prior standards where only one transform of 8×8 or 4×4 is applied to a macroblock, a set of block transforms of different sizes may be applied to a
CU 102. For example, the CU partition of PUs 202 shown inFIG. 3A may be associated with a set of transform units (“TUs”) 204 shown inFIG. 3B . InFIG. 3B , PU 202-1 is partitioned into four TUs 204-5 through 204-8. Also, TUs 204-2, 204-3, and 204-4 are the same size as corresponding PUs 202-2 through 202-4. Each TU 204 can include one or more transform coefficients in most cases but may include none (e.g., all zeros). Transform coefficients of the TU 204 can be quantized into one of a finite number of possible values. After the transform coefficients have been quantized, the quantized transform coefficients can be entropy coded to obtain the final compressed bits that can be sent to a decoder. - Using the above block processing, scalable video coding supports decoders with different capabilities. An encoder generates multiple bitstreams for an input video. One of the output bitstreams, referred to as the base layer, can be decoded by itself, and this bitstream provides the lowest scalability level of the video output. To achieve a higher level of video output, the decoder can process the base-layer bitstream together with other output bitstreams, referred to as enhancement layers. One or more enhancement layers may be added to the base layer to generate higher scalability levels. One example is spatial scalability, where the base layer represents the lowest resolution video and the decoder can generate higher resolution video by combining the base-layer bitstream together with additional enhancement-layer bitstreams. Thus, using additional enhancement-layer bitstreams produces a better quality video output.
- In one embodiment, a method determines a first unit of video in a base layer and analyzes a portion of pixels for the first unit of video in the base layer. A scan pattern for a second unit of video in an enhancement layer is determined based on analyzing the portion of the pixels in the base layer. The enhancement layer is useable to enhance the base layer. The method then performs a scan of the second unit of video in the selected scan pattern for a transform process in the enhancement layer.
- The following detailed description and accompanying drawings provide a better understanding of the nature and advantages of particular embodiments.
-
FIG. 1 shows an input picture partitioned into square blocks referred to as coding tree units. -
FIG. 2 shows an example of a CTU partition of CUs. -
FIG. 3A shows an example of a CU partition of PUs. -
FIG. 3B shows a set of transform units. -
FIG. 4 depicts an example of a system for encoding and decoding video content according to one embodiment. -
FIG. 5 depicts a table showing different scan patterns that the encoder and decoder can use for enhancement layers based on pixel information from the base layer according to one embodiment. -
FIG. 6 is a simplified flowchart of a method for selecting the scan pattern according to one embodiment. -
FIG. 7 shows an example of a transform unit in the base layer according to one embodiment. -
FIG. 8 depicts pseudocode of one method for determining whether the vertical edge and horizontal edge exist according to one embodiment. -
FIG. 9 is a simplified flowchart of a method for encoding video according to one embodiment. -
FIG. 10 is a simplified flowchart of a method for decoding video according to one embodiment. -
FIG. 11A depicts an encoder according to one embodiment. -
FIG. 11B depicts a decoder according to one embodiment. - Described herein are techniques for a video compression system. In the following description, for purposes of explanation, numerous examples and specific details are set forth in order to provide a thorough understanding of particular embodiments. Particular embodiments as defined by the claims may include some or all of the features in these examples alone or in combination with other features described below and may further include modifications and equivalents of the features and concepts described herein.
-
FIG. 4 depicts an example of asystem 400 for encoding and decoding video content according to one embodiment.Encoder 402 anddecoder 403 may encode and decode a bitstream using HEVC; however, other video compression standards may also be appreciated. -
Encoder 402 includes a scan-pattern manager 404-1, anddecoder 403 includes a scan-pattern manager 404-2. Both scan-pattern managers 404-1 and 404-2 may perform similar functions and thus a discussion regarding either scan-pattern manager 404 may apply to the other scan-pattern manager. In particular embodiments, both scan-pattern managers 404-1 and 404-2 determine a scan pattern implicitly. By implicitly determining the scan pattern,encoder 402 anddecoder 403 may independently make this determination without any signaling of which scan pattern to use. For example,encoder 402 does not explicitly signal todecoder 403 which scan pattern to use in a transform process. Rather, scan-pattern manager 404-1 and scan manager 404-2 independently determine the same scan pattern to use in a transform process. -
Encoder 402 may use scalable video coding to send multiple bitstreams (e.g., a base layer and multiple enhancement layers) todifferent decoders 403 for an input video.Decoders 403 can then determine which bitstreams to process based on their own capabilities. For example, decoders can pick which quality is desired and process the corresponding bitstreams. For example, eachdecoder 403 may process the base layer and then can decide how many enhancement-layer bitstreams to combine with the base layer for varying levels of quality. -
Encoder 402 encodes the base layer by down sampling the input video and coding the down-sampled version. To encode the base layer,encoder 402 encodes the bitstream with all the information that decoder 403 needs to decode the base layer. An enhancement layer, however, cannot be decoded on its own. To encode an enhancement layer,encoder 402 up samples the down-sampled base layer and then subtracts the up-sampled version from the down-sampled base layer. The difference is then coded for the enhancement layer, which results in a smaller bitstream than the base layer.Encoder 402 may encode any number of enhancement layers by continuing the upsampling. -
Encoder 402 anddecoder 403 may perform a transform process while encoding/decoding the base layer and the enhancement layers. A transform unit for a prediction unit undergoes a transform process. The transform process de-correlates the pixels within a block and compacts the block energy into low-order coefficients in the transform unit. The transform process may result in a residual prediction unit in the transform domain as a transform calculation is performed. For example,encoder 402 anddecoder 403 may perform a discrete cosine transform (“DCT”) or a discrete sine transform (“DST”) on pixel values in the transform unit. In one embodiment, DCT may be used for any TU, DST can be used only for a 4×4 intra Luma TU, and transform skip is available for the 4×4 TU. The transform process may declare that no transform should be used, which may be referred to as transform skip mode. Conventionally, a flag is transmitted to indicate whether or not transform skip is used. - When performing the transform process,
encoder 402 encodes the coefficients of the transform unit in the bitstream based on a scan pattern. Then,decoder 403 decodes the bitstream using the same scan pattern used to encode the bitstream. In one embodiment,encoder 402 anddecoder 403 can use three scan patterns, such as diagonal, horizontal, and vertical patterns. Conventionally, in a single layer, the three scan patterns may be used in intra 4×4 and 8×8 transform units. Conventionally,encoder 402 determines the scan pattern based on the intra-prediction direction in the same layer. However, if intra-prediction is not used,encoder 402 signals the scan pattern todecoder 403. The signaling, however, increases overhead as bits are used to signal the scan pattern. In contrast, particular embodiments implicitly determine the scan pattern without signaling which scan pattern is used fromencoder 402 todecoder 403. Also, particular embodiments determine the scan pattern based on pixels in the base layer for an enhancement layer. Thus, information from a different layer is used to determine the scan pattern. Also, particular embodiments are flexible in thatencoder 402 anddecoder 403 determine the scan pattern implicitly even when the base layer TU layer does not use intra prediction. -
FIG. 5 depicts a table 500 showing different scan patterns that encoder 402 anddecoder 403 can use for enhancement layers based on pixel information from the base layer according to one embodiment. In one embodiment, scan-pattern manager 404, when encoding or decoding an enhancement layer, analyzes the pixel information in the base layer to determine which scan pattern to use with the transform process. In one embodiment, scan-pattern manager 404 detects whether a high frequency component exists in the base layer. One high frequency component is an edge that may occur in the base layer. An edge may be a difference in pixel values between consecutive pixels (or in a group of pixels) that is over a threshold. For example, an edge may be where pixels change in color or on a border of an object. Although edges are described,encoder 402 anddecoder 403 may detect other high frequency components. - At 502, the edge that scan-pattern manager 404 detects is horizontal. Based on detecting the horizontal edge, scan-pattern manager 404 may determine a vertical scan pattern shown at 504 for the transform process when
encoder 402 anddecoder 403 perform a transform calculation, such as using the DCT and DST transforms. Also, scan-pattern manager 404 determines a horizontal scan pattern at 506 when the transform skip process is used (e.g., no transform calculation is performed). - At 508, when scan-pattern manager 404 determines that a vertical edge exists within the TU, scan-pattern manager 404 may determine a horizontal scan pattern at 510 when performing a transform calculation, and the vertical scan pattern at 512 when using the transform skip process.
- Also, at 516, when scan-pattern manager 404 determines that there are both horizontal and vertical edges or no horizontal or vertical edges, at 518 and 520, scan-pattern manager 404 may use the diagonal scan pattern when performing a transform calculation and the transform skip process. The goal of adaptive scan is to select a scan pattern that can reach all nonzero (quantized) transform coefficients in a shortest distance. Statistically, a video block that possesses strong horizontal patterns has strong energy along vertical frequency components. Hence, it is more efficient to use vertical scan when a block possesses dominant horizontal edges and utilizes transform process. Similarly, it is more efficient to use horizontal scan when a block possesses dominant vertical edges and utilizes a transform process. Also, when no edges, diagonal edges, or both vertical and horizontal edges exist, it is more efficient to use diagonal scan. The transform skip process may be most efficient when the unit may have no transform coefficients or very few, and a scan pattern with the same direction as dominant edges within the transform unit is more efficient. Although the above scan patterns are selected, scan-pattern manager 404 may select other scan patterns based on the edges detected.
-
FIG. 6 is asimplified flowchart 600 of a method for selecting the scan pattern according to one embodiment. At 602, scan-pattern manager 404 determines a unit of video in an enhancement layer. For example, scan-pattern manager 404 determines a transform unit in a prediction unit of a picture being encoded or decoded. - At 604, scan-pattern manager 404 analyzes at least a portion of the pixels of a base layer. For example, pixel values in a corresponding transform unit (e.g., a transform unit in the same position of the current transform unit) in the base layer are analyzed. In one embodiment, as is discussed in more detail below, pixel values along the boundary of the transform unit (i.e., pixels directly next to a neighboring transform unit) in the base layer are analyzed. Although boundary pixels are described, pixels not along the boundary may be used. This may increase accuracy, but increase overhead.
- At 606, scan-pattern manager 404 determines a location of an edge based on the analysis in 604. For example, a horizontal edge, a vertical edge, both a horizontal edge and a vertical edge, or no horizontal edge nor vertical edge is determined.
- Then, at 608, scan-pattern manager 404 selects a scan pattern based on the determination of the edge or edges. For example, scan-pattern manager 404 determines the scan pattern based on table 500 shown in
FIG. 5 . At 610,encoder 402 anddecoder 403 then perform the scan using the scan pattern for the transform process. - A method to determine the scan pattern is now described.
FIG. 7 shows an example of a transform unit in the base layer according to one embodiment. Boundary pixels are depicted for edge detection. However, it will be understood that pixels other than those found along the boundary may be used for edge detection. Each boundary pixel is depicted by the letter “P” where P[0,x], P[7,x], P[y,0], and P[y,7] are boundary pixels, W is the width of the transform unit, k is an integer between 0 and W-m, where m is a positive integer setting the distance between the two boundary pixels for edge testing purposes, and x and y are pixel coordinates in the horizontal and vertical dimensions, respectively. Although this size TU (8×8) is shown, other sized may be used. - In one embodiment, pixels in a first row shown at 702 are compared to determine a maximum distance between pixels. For example, scan manager 404 compares pixel P[0,0] to P[0,1] to determine a difference in the pixel values. Subsequently, scan manager 404 compares pixel P[0,1] to pixel P[0,2] to determine the difference in these pixel values. This continues as each consecutive pixel value in the row at 702 is compared. Scan-pattern manager 404 then determines the maximum difference between consecutive pixel values in the row at 702. Although consecutive pixel values are described, the comparison may not be between consecutive pixels (e.g., every other pixel may be compared or groups of pixels may be compared). The maximum difference forms the top vertical edge peak, and scan manager 404 records the location of the peak. Similarly, in a row shown at 704, scan manager 404 compares pixel P[7,0] to pixel P[7,1] to determine the difference in pixel values. Similarly, as described above, scan-pattern manager 404 then continues to compare consecutive pixel values for the entire row at 704. Scan-pattern manager 404 then determines the peak difference between pixel values as the bottom vertical edge peak and records the location of the peak.
- A column at 706 is used to determine a left horizontal edge. For example, scan manager 404 compares pixel P[0,0] to pixel P[1,0] to determine the difference in pixel values. Then, scan manager 404 compares pixel P[1,0] to pixel P[2,0] to determine another difference in pixel values. This process continues as scan manager 404 determines the difference in pixel values for consecutive pixels in the entire column. Scan-pattern manager 404 then determines the left horizontal edge peak based on the maximum difference determined and records the location of the peak. In a
column 708, scan-pattern manager 404 performs the same calculation with the pixel values to determine a right horizontal edge peak and records the location of the peak. - Based on the top vertical edge peak, bottom vertical edge peak, left horizontal edge peak, and right horizontal edge peak, scan-pattern manager 404 may determine if a vertical edge or horizontal edge is found in the transform unit. For example, scan-pattern manager 404 compares the top vertical edge peak and bottom vertical edge peak and the respective locations to thresholds to determine if a vertical edge is present, and scan-pattern manager 404 compares the left horizontal edge peak and the right horizontal edge peak with respective locations to thresholds to determine whether a horizontal edge is present.
- Scan-pattern manager 404 may use different methods to determine whether a transform unit includes a horizontal edge or a vertical edge.
FIG. 8 depictspseudocode 800 of one method for determining whether the vertical edge and horizontal edge exist according to one embodiment. Inline 1, the variable top_vertical_edge_peak represents the value of the top vertical edge peak. Scan-pattern manager 404 determines the value as a maximum of the absolute value between each pixel value shown in the row at 702. In line 2, the variable top_vertical_edge_location is the horizontal coordinate of the top_vertical_edge_peak. - In line 3, the variable bottom_vertical_edge_peak is the bottom vertical edge peak value in the row shown at 704. Scan-pattern manager 404 determines the bottom vertical edge peak as the maximum of the absolute value for the pixels in the row shown at 704. In line 4, the variable bottom_vertical_edge_location is the horizontal coordinate of bottom_vertical_edge_peak.
- In line 5, the variable left_horizontal_edge_peak represents the horizontal edge peak value in the column shown at 706. Scan-pattern manager 404 determines bottom_vertical_edge_peak as the maximum of the absolute value of the pixels in the column shown at 706. In line 6, the variable left_horizontal_edge_location is the vertical coordinate of left_horizontal_edge_peak, which may be the value of k. In line 7, the variable right_horizontal_edge_peak is the value of the horizontal edge peak in the column shown at 708. Scan-pattern manager 404 determines the value of the edge peak based on the maximum of the absolute value of the pixels shown in the column shown at 708. In line 8, the variable right_horizontal_edge_location is the vertical coordinate of right_horizontal_edge_peak.
- In line 9, scan-pattern manager 404 tests whether the top vertical edge peak is greater than a threshold vertical_edge_threshold, that the bottom vertical edge peak is greater than a threshold vertical_edge_threshold, and further that the absolute value of the top vertical edge location minus the bottom vertical edge location is less than a threshold vertical_location_threshold. That is, line 9 tests whether both the top vertical edge peak and the bottom vertical edge peak are greater than a certain value that would indicate a large difference in pixel values, which makes this location most likely an edge. Further, line 9 tests whether the top vertical edge location and the bottom vertical edge location are within a certain distance. For example, if the top vertical edge location and the bottom vertical edge location are on different ends of the block, then this may be a diagonal edge. However, if the top vertical edge location and bottom vertical edge location are close to each other, such as if pixel P[0,1] and pixel P[7,2] are the locations, then this more likely is a vertical edge. In this case, at line 10, scan-pattern manager 404 determines that a vertical edge is present by setting the variable vertical_edge to the value of “present.”
- Scan-pattern manager 404 then determines whether a horizontal edge is present. The above analysis may be used to determine the horizontal edge using the horizontal edge values. For example, if the left horizontal edge peak is located in a pixel P[2,0] and the right horizontal edge peak is located in a pixel P[1,7], and the peak values are above a threshold, then at line 12, scan-pattern manager 404-1 may determine that a horizontal edge is present.
- Accordingly, the vertical edge threshold and horizontal edge threshold are thresholds that scan-pattern manager 404 uses to test whether edge peaks are true edges or not. If edge peaks for either the two horizontal edge peaks or the two vertical edge peaks are greater than the edge threshold, then these two edge peaks are considered true edges. The vertical location threshold and the horizontal location threshold are thresholds that scan-pattern manager 404 uses to determine whether testing true edges form a horizontal edge, a vertical edge, or other direction edge. If the difference between coordinates is both two edges are smaller than the location threshold, then the two edges form either a horizontal edge or a vertical edge.
- In one example, if the variable m is set to 2, then horizontal_edge_threshold and vertical_edge_threshold are both set to 50, and horizontal_location_threshold and vertical_edge_thershold are both set to 1.
-
FIG. 9 is asimplified flowchart 900 of a method for encoding video according to one embodiment. At 902,encoder 402 receives an input video. At 904,encoder 402 encodes the base layer. As described above, the input video may be down sampled and encoded into the base-layer bitstream. -
Encoder 402 may encode multiple enhancement layers. The following process may be performed for each enhancement layer. At 906,encoder 402 determines a TU in a PU in a unit of video in the enhancement layer. At 908,encoder 402 determines a corresponding TU in the base layer. At 910,encoder 402 analyzes pixels of the corresponding TU in the base layer to determine a scan pattern to use for the TU in the enhancement layer. The scan pattern can be determined as described above. At 912,encoder 402 then performs the transform process using the scan pattern.Encoder 402 then finishes the encoding of the enhancement layers. - Once finishing the encoding of the base layer and the enhancement layers,
encoder 402 sends the base layer and the enhancement layers todecoders 403. For example,encoder 402 may use simulcast to send the encoded bitstreams for the base layer and the enhancement layers. -
FIG. 10 is asimplified flowchart 1000 of a method for decoding video according to one embodiment. At 1002,decoder 403 receives the base layer and enhancement layers. At 1004,decoder 403 determines which enhancement layers to decode. As described above, based on the decoder's capabilities, different levels of quality may be achieved by using different numbers of enhancement layers. -
Decoder 403 may decode one or more enhancement layers. The following process may be performed for each enhancement layer that is decoded. At 1006,decoder 403 determines a TU in a PU in a unit of video in the enhancement layer. At 1008,decoder 403 determines a corresponding TU in the base layer. At 1010,decoder 403 analyzes pixels of the corresponding TU in the base layer to determine a scan pattern to use for the TU in the enhancement layer. The scan pattern can be determined as described above. At 1012,decoder 403 then performs the transform process using the scan pattern.Decoder 403 then finishes the decoding of the enhancement layers and combines the enhancement layers with the base layer. In this case,decoder 403 implicitly determines the scan pattern to use in the enhancement layer based on pixel values from the base layer. - In various embodiments,
encoder 402 described can be incorporated or otherwise associated with a transcoder or an encoding apparatus at a headend, anddecoder 403 can be incorporated or otherwise associated with a downstream device, such as a mobile device, a set-top box, or a transcoder.FIG. 11A depicts an example ofencoder 402 according to one embodiment. A general operation ofencoder 402 is now described; however, it will be understood that variations on the encoding process described will be appreciated by a person skilled in the art based on the disclosure and teachings herein. - For a current PU, x, a prediction PU, x′, is obtained through either spatial prediction or temporal prediction. The prediction PU is then subtracted from the current PU, resulting in a residual PU, e. Spatial prediction relates to intra-mode pictures. Intra-mode coding can use data from the current input image, without referring to other images, to code an I picture. A
spatial prediction block 1104 may include different spatial prediction directions per PU, such as horizontal, vertical, 45-degree diagonal, 135-degree diagonal, DC (flat averaging), and planar, or any other direction. The spatial prediction direction for the PU can be coded as a syntax element. In some embodiments, brightness information (Luma) and color information (Chroma) for the PU can be predicted separately. In one embodiment, the number of Luma intra prediction modes for all block size is 35. In alternate embodiments, the number of Luma intra prediction modes for blocks of any size can be 35. An additional mode can be used for the Chroma intra prediction mode. In some embodiments, the Chroma prediction mode can be called “IntraFromLuma.” -
Temporal prediction block 1106 performs temporal prediction. Inter-mode coding can use data from the current input image and one or more reference images to code “P” pictures or “B” pictures. In some situations or embodiments, inter-mode coding can result in higher compression than intra-mode coding. In inter-mode PUs 204 can be temporally predictive coded, such that each PU 204 of the CU 202 can have one or more motion vectors and one or more associated reference images. Temporal prediction can be performed through a motion estimation operation that searches for a best match prediction for the PU over the associated reference images. The best match prediction can be described by the motion vectors and associated reference images. P pictures use data from the current input image and one or more previous reference images. B pictures use data from the current input image and both previous and subsequent reference images and can have up to two motion vectors. The motion vectors and reference pictures can be coded in the HEVC bitstream. In some embodiments, the motion vectors can be syntax elements “MV,” and the reference pictures can be syntax elements “refIdx.” In some embodiments, inter mode can allow both spatial and temporal predictive coding. The best match prediction is described by the MV and associated refIdx. The motion vector and associated reference picture index are included in the coded bitstream. -
Transform block 1107 performs a transform operation with the residual PU, e. A set of block transforms of different sizes can be performed on a CU, such that some PUs can be divided into smaller TUs, and other PUs can have TUs the same size as the PU. Division of CUs and PUs into TUs can be shown by a quadtree representation.Transform block 1107 outputs the residual PU in a transform domain, E. - A
quantizer 1108 then quantizes the transform coefficients of the residual PU,E. Quantizer 1108 converts the transform coefficients into a finite number of possible values. In some embodiments, this is a lossy operation in which data lost by quantization may not be recoverable. After the transform coefficients have been quantized,entropy coding block 1110 entropy encodes the quantized coefficients, which results in final compression bits to be transmitted. Different entropy coding methods may be used, such as context-adaptive variable length coding or context-adaptive binary arithmetic coding. - Also, in a decoding process within
encoder 402, a de-quantizer 1112 de-quantizes the quantized transform coefficients of the residual PU. De-quantizer 1112 then outputs the de-quantized transform coefficients of the residual PU, E′. Aninverse transform block 1114 receives the de-quantized transform coefficients, which are then inverse transformed resulting in a reconstructed residual PU, e′. The reconstructed PU, e′, is then added to the corresponding prediction, x′, either spatial or temporal, to form the new reconstructed PU, x″. Particular embodiments may be used in determining the prediction. For example, the collocated picture manager 404 may be used in the prediction process to determine the collocated picture to use. Aloop filter 1116 performs de-blocking on the reconstructed PU, x″, to reduce blocking artifacts. Additionally,loop filter 1116 may perform a sample adaptive offset process after the completion of the de-blocking filter process for the decoded picture, which compensates for a pixel value offset between reconstructed pixels and original pixels. Also,loop filter 1116 may perform adaptive loop filtering over the reconstructed PU, which minimizes coding distortion between the input and output pictures. Additionally, if the reconstructed pictures are reference pictures, the reference pictures are stored in areference buffer 1118 for future temporal prediction. Intra-mode coded images can be a possible point where decoding can begin without needing additional reconstructed images. -
FIG. 11B depicts an example ofdecoder 403 according to one embodiment. A general operation ofdecoder 403 is now described; however, it will be understood that variations on the decoding process described will be appreciated by a person skilled in the art based on the disclosure and teachings herein.Decoder 403 receives input bits fromencoder 402 for encoded video content. - An
entropy decoding block 1130 performs entropy decoding on the input bitstream to generate quantized transform coefficients of a residual PU. A de-quantizer 1132 de-quantizes the quantized transform coefficients of the residual PU. De-quantizer 1132 then outputs the de-quantized transform coefficients of the residual PU, E′. Aninverse transform block 1134 receives the de-quantized transform coefficients, which are then inverse transformed resulting in a reconstructed residual PU, e′. - The reconstructed PU, e′, is then added to the corresponding prediction, x′, either spatial or temporal, to form the new reconstructed PU, x″. A
loop filter 1136 performs de-blocking on the reconstructed PU, x″, to reduce blocking artifacts. Additionally,loop filter 1136 may perform a sample adaptive offset process after the completion of the de-blocking filter process for the decoded picture, which compensates for a pixel-value offset between reconstructed pixels and original pixels. Also,loop filter 1136 may perform adaptive loop filtering over the reconstructed PU, which minimizes coding distortion between the input and output pictures. Additionally, if the reconstructed pictures are reference pictures, the reference pictures are stored in areference buffer 1138 for future temporal prediction. - The prediction PU, x′, is obtained through either spatial prediction or temporal prediction. A
spatial prediction block 1140 may receive decoded spatial prediction directions per PU, such as horizontal, vertical, 45-degree diagonal, 135-degree diagonal, DC (flat averaging), and planar. The spatial prediction directions are used to determine the prediction PU, x′. - A
temporal prediction block 1142 performs temporal prediction through a motion estimation operation. Particular embodiments may be used in determining the prediction. For example, the collocated picture manager 404 may be used in the prediction process to determine the collocated picture to use. A decoded motion vector is used to determine the prediction PU, x′. Interpolation may be used in the motion estimation operation. - The above description illustrates various embodiments along with examples of how aspects of particular embodiments may be implemented. The above examples and embodiments should not be deemed to be the only embodiments and are presented to illustrate the flexibility and advantages of particular embodiments as defined by the following claims. Based on the above disclosure and the following claims, other arrangements, embodiments, implementations and equivalents may be employed without departing from the scope hereof as defined by the claims.
Claims (20)
Priority Applications (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/020,922 US9826229B2 (en) | 2012-09-29 | 2013-09-09 | Scan pattern determination from base layer pixel information for scalable extension |
PCT/US2013/058843 WO2014051980A1 (en) | 2012-09-29 | 2013-09-10 | Scan pattern determination from base layer pixel information for scalable extension |
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201261707947P | 2012-09-29 | 2012-09-29 | |
US201261718198P | 2012-10-25 | 2012-10-25 | |
US14/020,922 US9826229B2 (en) | 2012-09-29 | 2013-09-09 | Scan pattern determination from base layer pixel information for scalable extension |
Publications (2)
Publication Number | Publication Date |
---|---|
US20140092982A1 true US20140092982A1 (en) | 2014-04-03 |
US9826229B2 US9826229B2 (en) | 2017-11-21 |
Family
ID=50385178
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/020,922 Expired - Fee Related US9826229B2 (en) | 2012-09-29 | 2013-09-09 | Scan pattern determination from base layer pixel information for scalable extension |
Country Status (2)
Country | Link |
---|---|
US (1) | US9826229B2 (en) |
WO (1) | WO2014051980A1 (en) |
Cited By (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9350988B1 (en) | 2012-11-20 | 2016-05-24 | Google Inc. | Prediction mode-based block ordering in video coding |
US9681128B1 (en) | 2013-01-31 | 2017-06-13 | Google Inc. | Adaptive pre-transform scanning patterns for video and image compression |
US20220385950A1 (en) * | 2019-04-05 | 2022-12-01 | Comcast Cable Communications, Llc | Methods, systems, and apparatuses for processing video by adaptive rate distortion optimization |
Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20090046941A1 (en) * | 2005-11-30 | 2009-02-19 | Koninklijke Philips Electronics, N.V. | Encoding method and apparatus applying coefficient reordering |
US20110211636A1 (en) * | 2008-11-07 | 2011-09-01 | Yoshihisa Yamada | Image encoder and image decoder |
US20120263238A1 (en) * | 2009-12-28 | 2012-10-18 | Fujitsu Limited | Video encoder and video decoder |
US20150195566A1 (en) * | 2012-10-01 | 2015-07-09 | Fraunhofer-Gesellschaft Zur Foerderung Der Angewandten Forschung E.V. | Scalable video coding using derivation of subblock subdivision for prediction from base layer |
Family Cites Families (54)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
ATE159396T1 (en) | 1991-06-04 | 1997-11-15 | Qualcomm Inc | SYSTEM FOR ADAPTIVE COMPRESSION OF THE BLOCK SIZES OF AN IMAGE |
KR960006762B1 (en) | 1992-02-29 | 1996-05-23 | 삼성전자주식회사 | 2-dimensional data scanning selecting circuit for image coding |
KR100371130B1 (en) | 1996-05-28 | 2003-02-07 | 마쯔시다덴기산교 가부시키가이샤 | Image predictive decoding apparatus and method thereof, and image predictive cording apparatus and method thereof |
JP3967405B2 (en) | 1996-10-09 | 2007-08-29 | テキサス インスツルメンツ インコーポレイテツド | Image signal encoding method |
JPH10257488A (en) | 1997-03-12 | 1998-09-25 | Oki Data:Kk | Image coder and image decoder |
US6108383A (en) | 1997-07-15 | 2000-08-22 | On2.Com, Inc. | Method and apparatus for compression and decompression of video images |
US6256423B1 (en) | 1998-09-18 | 2001-07-03 | Sarnoff Corporation | Intra-frame quantizer selection for video compression |
US6434197B1 (en) | 1999-01-07 | 2002-08-13 | General Instrument Corporation | Multi-functional transcoder for compressed bit streams |
US6473460B1 (en) | 2000-03-31 | 2002-10-29 | Matsushita Electric Industrial Co., Ltd. | Method and apparatus for calculating motion vectors |
US6687304B1 (en) | 2000-04-19 | 2004-02-03 | Koninklijke Philips Electronics N.V. | Efficient video data data access using fixed ratio compression |
GB2381403B (en) | 2000-05-10 | 2004-12-01 | Picturetel Corp | Video coding using multiple buffers |
US6870963B2 (en) | 2001-06-15 | 2005-03-22 | Qualcomm, Inc. | Configurable pattern optimizer |
CN101448162B (en) | 2001-12-17 | 2013-01-02 | 微软公司 | Method for processing video image |
KR100973216B1 (en) | 2002-04-23 | 2010-07-30 | 노키아 코포레이션 | Method and device for indicating quantizer parameters in a video coding system |
JP2003324743A (en) | 2002-05-08 | 2003-11-14 | Canon Inc | Motion vector searching apparatus and motion vector searching method |
US7450642B2 (en) | 2002-11-13 | 2008-11-11 | Sony Corporation | Fast motion vector prediction method |
US7457362B2 (en) | 2003-10-24 | 2008-11-25 | Texas Instruments Incorporated | Loop deblock filtering of block coded video in a very long instruction word processor |
TWI225363B (en) | 2003-11-10 | 2004-12-11 | Mediatek Inc | Method and apparatus for controlling quantization level of a video encoding bit stream |
KR20050112445A (en) | 2004-05-25 | 2005-11-30 | 경희대학교 산학협력단 | Prediction encoder/decoder, prediction encoding/decoding method and recording medium storing a program for performing the method |
US8724702B1 (en) | 2006-03-29 | 2014-05-13 | Nvidia Corporation | Methods and systems for motion estimation used in video coding |
US20070268964A1 (en) | 2006-05-22 | 2007-11-22 | Microsoft Corporation | Unit co-location-based motion estimation |
US8208545B2 (en) | 2006-06-01 | 2012-06-26 | Electronics And Telecommunications Research Institute | Method and apparatus for video coding on pixel-wise prediction |
EP2047687B1 (en) | 2006-08-02 | 2018-05-16 | Thomson Licensing DTV | Adaptive geometric partitioning for video encoding |
JP4875007B2 (en) | 2007-02-09 | 2012-02-15 | パナソニック株式会社 | Moving picture coding apparatus, moving picture coding method, and moving picture decoding apparatus |
US8369411B2 (en) | 2007-03-29 | 2013-02-05 | James Au | Intra-macroblock video processing |
JPWO2008120577A1 (en) | 2007-03-29 | 2010-07-15 | 株式会社東芝 | Image encoding and decoding method and apparatus |
WO2008132890A1 (en) | 2007-04-16 | 2008-11-06 | Kabushiki Kaisha Toshiba | Image encoding and image decoding method and device |
US8571104B2 (en) | 2007-06-15 | 2013-10-29 | Qualcomm, Incorporated | Adaptive coefficient scanning in video coding |
KR101426272B1 (en) | 2008-03-10 | 2014-08-07 | 삼성전자주식회사 | Apparatus of encoding image and apparatus of decoding image |
KR20090097689A (en) | 2008-03-12 | 2009-09-16 | 삼성전자주식회사 | Method and apparatus of encoding/decoding image based on intra prediction |
US8000546B2 (en) | 2008-08-01 | 2011-08-16 | National Cheng Kung University | Adaptive scan method for image/video coding |
US8325796B2 (en) | 2008-09-11 | 2012-12-04 | Google Inc. | System and method for video coding using adaptive segmentation |
US8311111B2 (en) | 2008-09-11 | 2012-11-13 | Google Inc. | System and method for decoding using parallel processing |
KR101306834B1 (en) | 2008-09-22 | 2013-09-10 | 에스케이텔레콤 주식회사 | Video Encoding/Decoding Apparatus and Method by Using Prediction Possibility of Intra Prediction Mode |
US8605791B2 (en) | 2008-11-21 | 2013-12-10 | Nvidia Corporation | Video processor using an optimized slicemap representation |
US8666181B2 (en) | 2008-12-10 | 2014-03-04 | Nvidia Corporation | Adaptive multiple engine image motion detection system and method |
KR101680877B1 (en) | 2009-10-30 | 2016-11-29 | 선 페이턴트 트러스트 | Image decoding method, image encoding method, image decoding device, image encoding device, programs, and integrated circuits |
KR101623124B1 (en) | 2009-12-03 | 2016-05-24 | 에스케이 텔레콤주식회사 | Apparatus and method for encoding video, apparatus and method for decoding video and directional intra-prediction method therefor |
US20110235706A1 (en) | 2010-03-25 | 2011-09-29 | Texas Instruments Incorporated | Region of interest (roi) video encoding |
US8929440B2 (en) | 2010-04-09 | 2015-01-06 | Sony Corporation | QP adaptive coefficients scanning and application |
DK3457689T3 (en) | 2010-05-25 | 2020-10-12 | Lg Electronics Inc | NEW PLANAR PREDICTION MODE |
US8848779B2 (en) | 2010-07-15 | 2014-09-30 | Sharp Laboratories Of America, Inc. | Method of parallel video coding based on block size |
US8873617B2 (en) | 2010-07-15 | 2014-10-28 | Sharp Laboratories Of America, Inc. | Method of parallel video coding based on same sized blocks |
US8855188B2 (en) | 2010-07-15 | 2014-10-07 | Sharp Laboratories Of America, Inc. | Method of parallel video coding based on mapping |
US8879619B2 (en) | 2010-07-15 | 2014-11-04 | Sharp Laboratories Of America, Inc. | Method of parallel video coding based on scan order |
US8837577B2 (en) | 2010-07-15 | 2014-09-16 | Sharp Laboratories Of America, Inc. | Method of parallel video coding based upon prediction type |
KR101530284B1 (en) | 2010-07-16 | 2015-06-19 | 삼성전자주식회사 | Method and apparatus for video intra prediction encoding, and method and apparatus for video intra prediction decoding |
US8885701B2 (en) | 2010-09-08 | 2014-11-11 | Samsung Electronics Co., Ltd. | Low complexity transform coding using adaptive DCT/DST for intra-prediction |
CN102447896B (en) | 2010-09-30 | 2013-10-09 | 华为技术有限公司 | Method, device and system for processing image residual block |
US9154801B2 (en) | 2010-09-30 | 2015-10-06 | Texas Instruments Incorporated | Method and apparatus for diagonal scan and simplified coding of transform coefficients |
US20120163457A1 (en) | 2010-12-28 | 2012-06-28 | Viktor Wahadaniah | Moving picture decoding method, moving picture coding method, moving picture decoding apparatus, moving picture coding apparatus, and moving picture coding and decoding apparatus |
US9338449B2 (en) | 2011-03-08 | 2016-05-10 | Qualcomm Incorporated | Harmonized scan order for coding transform coefficients in video coding |
US9866859B2 (en) | 2011-06-14 | 2018-01-09 | Texas Instruments Incorporated | Inter-prediction candidate index coding independent of inter-prediction candidate list construction in video coding |
EP2727355A1 (en) | 2011-06-29 | 2014-05-07 | Motorola Mobility LLC | Methods and system for using a scan coding pattern during intra coding |
-
2013
- 2013-09-09 US US14/020,922 patent/US9826229B2/en not_active Expired - Fee Related
- 2013-09-10 WO PCT/US2013/058843 patent/WO2014051980A1/en active Application Filing
Patent Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20090046941A1 (en) * | 2005-11-30 | 2009-02-19 | Koninklijke Philips Electronics, N.V. | Encoding method and apparatus applying coefficient reordering |
US20110211636A1 (en) * | 2008-11-07 | 2011-09-01 | Yoshihisa Yamada | Image encoder and image decoder |
US20120263238A1 (en) * | 2009-12-28 | 2012-10-18 | Fujitsu Limited | Video encoder and video decoder |
US20150195566A1 (en) * | 2012-10-01 | 2015-07-09 | Fraunhofer-Gesellschaft Zur Foerderung Der Angewandten Forschung E.V. | Scalable video coding using derivation of subblock subdivision for prediction from base layer |
Cited By (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9350988B1 (en) | 2012-11-20 | 2016-05-24 | Google Inc. | Prediction mode-based block ordering in video coding |
US9681128B1 (en) | 2013-01-31 | 2017-06-13 | Google Inc. | Adaptive pre-transform scanning patterns for video and image compression |
US20220385950A1 (en) * | 2019-04-05 | 2022-12-01 | Comcast Cable Communications, Llc | Methods, systems, and apparatuses for processing video by adaptive rate distortion optimization |
US11800156B2 (en) * | 2019-04-05 | 2023-10-24 | Comcast Cable Communications, Llc | Methods, systems, and apparatuses for processing video by adaptive rate distortion optimization |
Also Published As
Publication number | Publication date |
---|---|
US9826229B2 (en) | 2017-11-21 |
WO2014051980A1 (en) | 2014-04-03 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10979731B2 (en) | Apparatus for decoding an image | |
US20140092956A1 (en) | Adaptive transform options for scalable extension | |
US9549177B2 (en) | Evaluation of signaling of collocated reference picture for temporal prediction | |
US20170359598A1 (en) | Method and device for providing compensation offsets for a set of reconstructed samples of an image | |
US9210425B2 (en) | Signaling of temporal motion vector predictor (MVP) flag for temporal prediction | |
CN107071459B (en) | Apparatus for encoding moving picture | |
KR102113985B1 (en) | Image decoding device, image coding device, image decoding method, image coding method and storage medium | |
US9300959B2 (en) | Implicit determination of collocated picture for temporal prediction | |
US9319681B2 (en) | Signaling of temporal motion vector predictor (MVP) enable flag | |
KR102293097B1 (en) | Devices and methods for video coding | |
US10003793B2 (en) | Processing of pulse code modulation (PCM) parameters | |
US20140269939A1 (en) | Device and method for scalable coding of video information | |
US20140092975A1 (en) | Devices and methods for using base layer motion vector for enhancement layer motion vector prediction | |
US20210274220A1 (en) | Multi-layer video encoder/decoder with base layer intra mode used for enhancement layer intra mode prediction | |
KR20130067280A (en) | Decoding method of inter coded moving picture | |
US9826229B2 (en) | Scan pattern determination from base layer pixel information for scalable extension | |
Ehmann et al. | Transform-coded pel-recursive video compression |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: MOTOROLA MOBILITY LLC, ILLINOISFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:PANUSOPONE, KRIT;WANG, LIMIN;REEL/FRAME:031314/0131Effective date: 20130909 |
|
AS | Assignment |
Owner name: GOOGLE TECHNOLOGY HOLDINGS LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MOTOROLA MOBILITY LLC;REEL/FRAME:034274/0290Effective date: 20141028 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FEPP | Fee payment procedure |
Free format text: MAINTENANCE FEE REMINDER MAILED (ORIGINAL EVENT CODE: REM.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
LAPS | Lapse for failure to pay maintenance fees |
Free format text: PATENT EXPIRED FOR FAILURE TO PAY MAINTENANCE FEES (ORIGINAL EVENT CODE: EXP.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20211121 |