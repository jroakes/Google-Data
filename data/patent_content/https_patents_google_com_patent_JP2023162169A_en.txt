JP2023162169A - System and method for safe identification information search - Google Patents
System and method for safe identification information search Download PDFInfo
- Publication number
- JP2023162169A JP2023162169A JP2023120733A JP2023120733A JP2023162169A JP 2023162169 A JP2023162169 A JP 2023162169A JP 2023120733 A JP2023120733 A JP 2023120733A JP 2023120733 A JP2023120733 A JP 2023120733A JP 2023162169 A JP2023162169 A JP 2023162169A
- Authority
- JP
- Japan
- Prior art keywords
- client device
- query
- database
- value
- identifier
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000000034 method Methods 0.000 title claims abstract description 81
- 230000004044 response Effects 0.000 claims abstract description 28
- 230000000737 periodic effect Effects 0.000 claims description 100
- 235000014510 cooky Nutrition 0.000 claims description 93
- 238000004590 computer program Methods 0.000 description 11
- 238000004891 communication Methods 0.000 description 10
- 238000012545 processing Methods 0.000 description 10
- 230000006870 function Effects 0.000 description 9
- 230000008569 process Effects 0.000 description 7
- 238000010586 diagram Methods 0.000 description 5
- 230000001360 synchronised effect Effects 0.000 description 5
- 238000003491 array Methods 0.000 description 4
- 230000002354 daily effect Effects 0.000 description 3
- 230000000644 propagated effect Effects 0.000 description 3
- 230000008859 change Effects 0.000 description 2
- 230000003993 interaction Effects 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 238000013515 script Methods 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 230000006399 behavior Effects 0.000 description 1
- 238000004422 calculation algorithm Methods 0.000 description 1
- 230000001413 cellular effect Effects 0.000 description 1
- 239000003795 chemical substances by application Substances 0.000 description 1
- 238000013480 data collection Methods 0.000 description 1
- 230000000694 effects Effects 0.000 description 1
- 238000005516 engineering process Methods 0.000 description 1
- 230000003203 everyday effect Effects 0.000 description 1
- 239000000835 fiber Substances 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 230000002085 persistent effect Effects 0.000 description 1
- 239000000523 sample Substances 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 239000010409 thin film Substances 0.000 description 1
- 238000012795 verification Methods 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
- 230000003442 weekly effect Effects 0.000 description 1
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/32—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials
- H04L9/321—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials involving a third party or a trusted authority
- H04L9/3213—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials involving a third party or a trusted authority using tickets or tokens, e.g. Kerberos
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/30—Network architectures or network communication protocols for network security for supporting lawful interception, monitoring or retaining of communications or communication related information
- H04L63/308—Network architectures or network communication protocols for network security for supporting lawful interception, monitoring or retaining of communications or communication related information retaining data, e.g. retaining successful, unsuccessful communication attempts, internet access, or e-mail, internet telephony, intercept related information or call content
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/951—Indexing; Web crawling techniques
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/04—Network architectures or network communication protocols for network security for providing a confidential data exchange among entities communicating through data packet networks
- H04L63/0407—Network architectures or network communication protocols for network security for providing a confidential data exchange among entities communicating through data packet networks wherein the identity of one or more communicating identities is hidden
- H04L63/0421—Anonymous communication, i.e. the party's identifiers are hidden from the other party or parties, e.g. using an anonymizer
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/2866—Architectures; Arrangements
- H04L67/30—Profiles
- H04L67/303—Terminal profiles
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/32—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials
- H04L9/3236—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials using cryptographic hash functions
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/32—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials
- H04L9/3247—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials involving digital signatures
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/10—Network architectures or network communication protocols for network security for controlling access to devices or network resources
- H04L63/102—Entity profiles
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/02—Protocols based on web technology, e.g. hypertext transfer protocol [HTTP]
Abstract
Description
人々は実店舗に行く代わりにオンラインで商品を買う場合がある。人々が買い物をするために様々なウェブページおよびドメインにアクセスしている間、多くの場合、ウェブページおよびドメインに関連付けられるサードパーティは、ウェブページにアクセスするために使用されるコンピューティングデバイスを識別し、コンピューティングデバイスに関する情報を識別するために様々な技法(たとえば、サードパーティクッキー)を使用し得る。サードパーティは、多くの場合、人々がコンピューティングデバイスを使用してウェブページおよびドメインにアクセスしたときに人々にコンテンツを提供するコンテンツプロバイダである。コンテンツサーバを介して、サードパーティは、コンテンツサーバのデータベースに記憶された情報に関連付けられるコンピューティングデバイスを識別するデバイス識別子とともに情報を記憶し得る。 People may buy products online instead of going to a physical store. While people visit various web pages and domains to make purchases, third parties associated with the web pages and domains often identify the computing devices used to access the web pages. and may use various techniques (e.g., third-party cookies) to identify information about a computing device. Third parties are often content providers that serve content to people when they access web pages and domains using computing devices. Through the content server, the third party may store information along with a device identifier that identifies the computing device associated with the information stored in the content server's database.
人々がオンラインで買い物を続けるにつれて、多くの場合、人々が知らないうちに、ますます多くのサードパーティが彼らのコンピューティングデバイスに関する情報を取得する可能性がある。サードパーティは、コンピューティングデバイスがさらにウェブページにアクセスするときに、コンピューティングデバイスにコンテンツを提供するために、コンテンツサーバに記憶されている情報を使用することができる。サードパーティが要求に応じてコンピューティングデバイスに関する情報を持っているかどうかを識別することを要求する法律があるが、コンピューティングデバイスは、サードパーティがデバイスに関する情報をまだ持っていない場合、要求を行うときにデバイス情報(たとえば、コンピューティングデバイスに関連付けられるデバイス識別子)をサードパーティに提供し得る。さらに、サードパーティが有している情報の量を決定するために、悪意のあるパーティが要求を盗聴する可能性があるため、サードパーティはコンピューティングデバイスからの要求に信頼性をもって応答することを躊躇する可能性がある。 As people continue to shop online, more and more third parties can obtain information about their computing devices, often without people knowing. A third party can use the information stored on the content server to provide content to the computing device when the computing device further accesses the web page. There are laws that require a third party to identify whether it has information about a computing device upon request, but the computing device cannot make a request if the third party does not already have information about the device. At times, we may provide device information (eg, a device identifier associated with a computing device) to a third party. Additionally, third parties cannot reliably respond to requests from computing devices because malicious parties may eavesdrop on requests to determine how much information the third party has. There is a possibility of hesitation.
本明細書で論じられるシステムおよび方法は、安全な識別情報検索の方法を提供するので、コンピューティングデバイスは、コンテンツサーバまたはコンテンツプロバイダがコンピューティングデバイスに関するデータをすでに収集しているかどうかを決定するための要求を行うときに、コンテンツサーバまたはコンテンツプロバイダがまだ有していない情報をコンテンツサーバまたはコンテンツプロバイダに提供する必要がない。コンピューティングデバイスは、各コンピューティングデバイスに固有のクエリトークンを計算し得、いくつかの実装形態では、時間とともに継続的に変化する値を有する周期変数に基づいて計算し得る。コンピューティングデバイスは、様々なコンテンツサーバと同期し得るため、コンテンツサーバは、コンピューティングデバイスと同じ周期変数および暗号化技法を使用して、コンテンツサーバのデータベースに記憶されているデバイス識別子のクエリトークンを計算することができる。コンテンツサーバとコンピューティングデバイスとの間の同期エラーを回避するために、いくつかの実装形態では、コンテンツサーバは、コンテンツサーバのデータベース内のデバイス識別子ごとに複数のクエリトークンを計算する場合がある。コンテンツサーバがクエリトークンを含む要求を受信すると、コンテンツサーバは、一致するものを識別するために、クエリトークンをデータベースに記憶されているクエリトークンと比較し得る。コンテンツサーバが一致を識別した場合、コンテンツサーバは、一致が見つかったことを示す応答信号(たとえば、回答)を送信し得る。コンテンツサーバはまた、応答信号内の一致する記憶されたクエリトークンに関連付けられるコンピューティングデバイスに関する特性の識別を含み得る。コンテンツサーバが、クエリのクエリトークンに一致する記憶されたクエリトークンを識別できない場合、コンテンツサーバは、一致が見つからなかったことを示す応答信号をクエリに関連付けられるコンピューティングデバイスに送信し得る。 The systems and methods discussed herein provide a method for secure identity retrieval so that a computing device can determine whether a content server or content provider has already collected data about the computing device. When making a request, there is no need to provide the content server or content provider with information that the content server or content provider does not already have. The computing devices may calculate a query token that is unique to each computing device, and in some implementations may be calculated based on a periodic variable that has a value that continuously changes over time. Because the computing device may synchronize with various content servers, the content server uses the same periodic variables and cryptographic techniques as the computing device to query tokens for device identifiers stored in the content server's database. can be calculated. To avoid synchronization errors between the content server and the computing device, in some implementations, the content server may calculate multiple query tokens for each device identifier in the content server's database. When a content server receives a request that includes a query token, the content server may compare the query token to query tokens stored in a database to identify matches. If the content server identifies a match, the content server may send a response signal (eg, an answer) indicating that a match was found. The content server may also include identification of characteristics regarding the computing device associated with the matching stored query token in the response signal. If the content server cannot identify a stored query token that matches the query token of the query, the content server may send a response signal to the computing device associated with the query indicating that no match was found.
コンテンツサーバにクエリを実行するコンピューティングデバイスのプライバシ、およびコンテンツサーバ自体のデータの機密性を保護する(たとえば、コンテンツサーバのデータ量とデータ収集機能をプライベートに保つ)ために、コンテンツサーバは、コンピューティングデバイスが、コンテンツサーバが受信するクエリに関連付けられていることを確認し、コンテンツサーバがクエリを実行するコンピューティングデバイスに送信する回答を暗号化し得る。コンテンツサーバは、クエリに署名するために、コンピューティングデバイスによって生成されたデジタル署名上のコンピューティングデバイスのデバイス識別子に関連付けられる公開鍵を使用することによってコンピューティングデバイスのIDを検証し得る。コンテンツサーバは、コンピューティングデバイスに関連付けられる公開鍵を使用して、コンピューティングデバイスへの回答を暗号化し得る。その結果、デバイス識別子に関連付けられるコンピューティングデバイスのみが、コンテンツサーバがそれらに関するデータを収集したかどうかに関する情報をコンテンツサーバから取得し得る。いくつかの実装形態では、一致しないことを示す応答信号は、あらかじめ定められた長さまで埋めることができ、デフォルトまたはヌル情報を含んでもよく、および/あるいは否定応答信号が、盗聴デバイスまたは情報を探ろうとする悪意のあるコンピューティングデバイスに対する肯定応答信号と同様に表示されるように、ハッシュまたは暗号化されてもよい。 To protect the privacy of the computing devices that query the content server, and the confidentiality of the content server's own data (e.g., keeping the content server's data volume and data collection capabilities private), the content server A computing device may be associated with a query that the content server receives and may encrypt answers that the content server sends to the computing device executing the query. The content server may verify the identity of the computing device by using a public key associated with the computing device's device identifier on a digital signature generated by the computing device to sign the query. The content server may encrypt the response to the computing device using a public key associated with the computing device. As a result, only the computing devices associated with the device identifier may obtain information from the content server regarding whether the content server has collected data about them. In some implementations, the no-match response signal may be padded to a predetermined length, may include default or null information, and/or the negative response signal may be used to detect eavesdropping devices or information. It may be hashed or encrypted so that it appears similar to an acknowledgment signal to an attempting malicious computing device.
本明細書に記載のシステムおよび方法はまた、どのドメインがブラウザに関するデータを収集したかを決定するためにブラウザによって使用され得る。ブラウザは、上記と同様の暗号化技法を使用することができるが、クッキークエリトークンを計算するためにドメインおよびクッキーの値を使用する。ドメインは、ブラウザがクッキークエリトークンを計算するために使用するのと同じ技法および値を使用して、ドメインがデータを記憶しているブラウザの記憶されたクッキークエリトークンを計算することができる。ドメインは、ドメインにブラウザのデータが記憶されているかどうかを決定するために、ブラウザから受信したクッキークエリトークンを、記憶されているクッキークエリトークンと比較することができる。ドメインは、ドメインをホストしているサーバにブラウザに関するデータを記憶し得る。ドメインは、ブラウザに関する情報が記憶されているかどうか、および情報のカテゴリを示す応答信号をブラウザに送信することができる。ドメインは応答信号を暗号化できるため、悪意のあるサードパーティは、ドメインが収集したデータの量または種類を決定できない場合がある。 The systems and methods described herein may also be used by a browser to determine which domains have collected data about the browser. The browser may use similar cryptographic techniques as above, but uses the domain and cookie value to calculate the cookie query token. A domain can calculate stored cookie query tokens for browsers in which the domain stores data using the same techniques and values that browsers use to calculate cookie query tokens. A domain may compare a cookie query token received from a browser to a stored cookie query token to determine whether the domain has browser data stored. A domain may store data about browsers on the server hosting the domain. The domain may send a response signal to the browser indicating whether information about the browser is stored and the category of the information. Because the domain can encrypt response signals, a malicious third party may not be able to determine the amount or type of data that the domain has collected.
有利なことに、本明細書で論じられるシステムおよび方法を実装することによって、コンピューティングデバイスは、コンテンツサーバがまだ記憶していないデバイス識別情報をコンテンツプロバイダに提供せずに、コンテンツサーバがコンピューティングデバイスに関する情報を有しているかどうかの識別についてコンテンツサーバに安全にクエリを実行し得る。クエリトークンは継続的に変更される可能性があるため、クエリを実行するデバイスのデバイス識別子を有していないコンテンツサーバは、デバイスに関する永続的な情報を取得できない可能性がある。同様に、システムは、ハッシュまたは暗号化された応答の使用および否定的な確認応答のパディングを通じて、情報を探る試みに対して安全である可能性がある。さらに、デバイスとコンテンツサーバとの間の通信は、コンテンツサーバが収集した情報の量を示すデータを悪意のあるサードパーティに提供することからコンテンツサーバを保護するために安全である可能性がある。その結果、説明したシステムと方法は、コンピューティングデバイスとコンテンツサーバとの間の安全な通信方法を提供するため、コンピューティングデバイスは、新しいデバイス識別情報を提供せずにコンテンツサーバに情報を要求し、コンテンツサーバは悪意のあるサードパーティにデータを提供せずに応答し得る。 Advantageously, by implementing the systems and methods discussed herein, a computing device allows a content server to use a computing device without providing device identification information to a content provider that the content server does not already store. A content server may be securely queried for identification of whether it has information about the device. Since the query token may change continuously, a content server that does not have the device identifier of the device performing the query may not be able to obtain persistent information about the device. Similarly, the system may be secure against attempts to probe information through the use of hashed or encrypted responses and padding of negative acknowledgments. Additionally, communications between the device and the content server may be secure to protect the content server from providing data to malicious third parties indicating the amount of information collected by the content server. As a result, the described systems and methods provide a secure method of communication between a computing device and a content server so that the computing device can request information from the content server without providing new device identification information. , the content server may respond without providing data to a malicious third party.
本明細書で説明する態様では、安全な識別情報検索のための方法が説明される。本方法は、サーバデバイスによって、周期変数の値を検索するステップと、サーバデバイスによって、対応する複数のクライアントデバイス識別子および周期変数の値から複数のクエリトークンを計算するステップとを含み得る。各クエリトークンは、第1のデータベースにおける対応するクライアントデバイス識別子に関連付けられ得る。本方法は、第1のクライアントデバイスからサーバデバイスによって、第1のクライアントデバイスのクライアントデバイス識別子および周期変数の値から計算された第1のクエリトークンを受信するステップと、サーバデバイスによって、第1のデータベースにおいて計算された複数のクエリトークンのうち、第1のクエリトークンと一致する第2のクエリトークンを識別するステップと、識別に応答して、サーバデバイスによって、関連付けられるクライアントデバイス識別子を検索するステップとをさらに備え得る。本方法は、サーバデバイスによって、第2のデータベースから、関連付けられるクライアントデバイス識別子に従って第1のクライアントデバイスの1つまたは複数の特性を検索するステップと、サーバデバイスによってクライアントデバイスに、検索された1つまたは複数の特性を送信するステップとをさらに備え得る。 Aspects described herein describe methods for secure identity retrieval. The method may include, by the server device, retrieving a value of the periodic variable and calculating, by the server device, a plurality of query tokens from the corresponding plurality of client device identifiers and the value of the periodic variable. Each query token may be associated with a corresponding client device identifier in the first database. The method includes the steps of: receiving a first query token calculated by a server device from a first client device from a client device identifier of the first client device and a value of a periodic variable; identifying a second query token that matches the first query token from among the plurality of query tokens computed in the database; and responsive to the identification, retrieving an associated client device identifier by the server device. It may further include. The method includes the steps of: retrieving, by the server device, one or more characteristics of the first client device from a second database according to an associated client device identifier; or transmitting a plurality of characteristics.
いくつかの実装形態では、本方法は、サーバデバイスによって、計算された複数のクエリトークンに基づいて確率的データ構造を生成するステップと、サーバデバイスによって、第1のクエリトークンを確率的データ構造と比較するステップとをさらに備え得る。第2のクエリトークンを識別するステップは、確率的データ構造に一致する第1のクエリトークンに応答して実行され得る。 In some implementations, the method includes the steps of: generating, by the server device, a probabilistic data structure based on the plurality of calculated query tokens; The method may further include a step of comparing. Identifying the second query token may be performed in response to the first query token matching the probabilistic data structure.
いくつかの実装形態では、確率的データ構造はブルームフィルタを備え得る。いくつかの実装形態では、周期変数は、現在の日付の証券取引所の終値、または相互に検証可能な値を備え得る。いくつかの実装形態では、複数のクエリトークンを計算するステップは、対応する複数のクライアントデバイス識別子および周期変数の以前の値から第2の複数のクエリトークンを計算するステップを備え得、第2の複数のクエリトークンは、対応するクライアントデバイス識別子に関連して第1のデータベースに記憶される。 In some implementations, the probabilistic data structure may comprise a Bloom filter. In some implementations, the periodic variable may comprise the closing price of a stock exchange on the current date, or a mutually verifiable value. In some implementations, calculating the plurality of query tokens may comprise calculating a second plurality of query tokens from the corresponding plurality of client device identifiers and previous values of the periodic variable, A plurality of query tokens are stored in the first database in association with corresponding client device identifiers.
いくつかの実装形態では、本方法は、サーバデバイスによって、第1のデータベースから第3の複数のクエリトークン、複数のクライアントデバイス識別子から計算された第3の複数のクエリトークン、および周期変数の2回前の値を除去するステップをさらに備え得る。いくつかの実装形態では、複数のクエリトークンを計算するステップは、複数のクエリトークンのそれぞれについて、周期変数の値と対応するクライアントデバイス識別子との組合せの一方向ハッシュ(たとえば、セキュアハッシュアルゴリズム-256などのアメリカ国立標準技術研究所によって公開されたハッシュ関数のいずれか)を計算するステップをさらに備える。いくつかの実装形態では、第1のクライアントデバイスの1つまたは複数の特性を検索するステップは、第2のデータベースから第1のクライアントデバイスの公開暗号化鍵を検索するステップをさらに備える。検索された1つまたは複数の特性を送信するステップは、第1のクライアントデバイスの検索された公開暗号化鍵を用いて1つまたは複数の特性を暗号化するステップをさらに備え得る。 In some implementations, the method includes determining, by the server device, a third plurality of query tokens from the first database, a third plurality of query tokens calculated from the plurality of client device identifiers, and two of the periodic variables. The method may further include the step of removing the previous value. In some implementations, computing the plurality of query tokens includes, for each of the plurality of query tokens, a one-way hash of the combination of the value of the periodic variable and the corresponding client device identifier (e.g., secure hash algorithm-256 the hash function published by the National Institute of Standards and Technology). In some implementations, retrieving one or more characteristics of the first client device further comprises retrieving the first client device's public encryption key from the second database. Sending the retrieved one or more characteristics may further include encrypting the one or more characteristics using the retrieved public encryption key of the first client device.
いくつかの実装形態では、本方法は、第2のクライアントデバイスからサーバデバイスによって、第2のクライアントデバイスのクライアントデバイス識別子および周期変数の値から計算された第3のクエリトークンを受信するステップと、サーバデバイスによって、第3のクエリトークンに対応する第1のデータベースにエントリが存在しないことを決定するステップとをさらに備え得る。 In some implementations, the method includes receiving, by the server device from the second client device, a third query token calculated from the client device identifier of the second client device and the value of the periodic variable; and determining, by the server device, that there is no entry in the first database corresponding to the third query token.
いくつかの実装形態では、本方法は、第3のクエリトークンに対応する第1のデータベースにエントリが存在しないという決定に応答して、サーバデバイスによって第2のクライアントデバイスに、ランダムデータ文字列またはヌルデータ文字列のうちの1つを送信するステップをさらに備え得る。いくつかの実装形態では、複数のクライアントデバイス識別子は、クッキー値を含み得る。いくつかの実装形態では、複数のクエリトークンは、周期的値、クッキー値、および複数のドメイン識別子から計算され得、各クッキー値は、複数のドメイン識別子のドメイン識別子に対応する。いくつかの実装形態では、第1のクッキー値は、第1のドメインに関連付けられ、第2のドメインと共有され得る。いくつかの実装形態では、サーバデバイスは、第1のドメインまたは第2のドメインの一方に関連付けられ得、第2のサーバデバイスは、第1のドメインまたは第2のドメインの他方に関連付けられる。 In some implementations, the method includes transmitting the random data string or The method may further include transmitting one of the null data strings. In some implementations, multiple client device identifiers may include a cookie value. In some implementations, multiple query tokens may be computed from a periodic value, a cookie value, and multiple domain identifiers, with each cookie value corresponding to a domain identifier of the multiple domain identifiers. In some implementations, the first cookie value may be associated with the first domain and shared with the second domain. In some implementations, a server device may be associated with one of the first domain or the second domain, and the second server device is associated with the other of the first domain or the second domain.
いくつかの実装形態では、関連付けられるクライアントデバイス識別子を検索するステップは、第1のクッキー値および第1のドメイン識別子を検索するステップをさらに備え得る。検索された1つまたは複数の特性を送信するステップは、第2のドメインに関連付けられるサーバデバイスによって、第1のクッキー値および第1のドメイン識別子を用いて検索された1つまたは複数の特性を暗号化するステップをさらに備え得る。 In some implementations, searching for an associated client device identifier may further comprise searching for a first cookie value and a first domain identifier. Sending the retrieved one or more characteristics includes, by a server device associated with the second domain, transmitting the retrieved one or more characteristics using the first cookie value and the first domain identifier. The method may further include encrypting.
本明細書で説明される別の態様では、安全な識別情報検索のためのサーバデバイスが説明される。サーバデバイスは、複数のクライアントデバイスの第1のクライアントデバイスと通信するネットワークインターフェースと、複数のクエリトークンおよび対応する複数の関連付けられるクライアントデバイス識別子を備える第1のデータベースを記憶するメモリデバイス、ならびに複数のクライアントデバイス識別子および関連付けられるデバイス特性を備える第2のデータベースと、プロセッサとを備え得る。プロセッサは、周期変数の値を検索することと、対応する複数のクライアントデバイス識別子および周期変数の値から複数のクエリトークンを計算することと、第1のクライアントデバイスからネットワークインターフェースを介して、第1のクライアントデバイスのクライアントデバイス識別子および周期変数の値から計算された第1のクエリトークンを受信することとを行うように構成され得る。プロセッサは、第1のデータベースにおいて計算された複数のクエリトークンのうち、第1のクエリトークンと一致する第2のクエリトークンを識別することと、識別に応答して、第1のデータベースから、関連付けられるクライアントデバイス識別子を検索することとを行うようにさらに構成され得る。プロセッサは、第2のデータベースから、関連付けられるクライアントデバイス識別子に従って第1のクライアントデバイスの1つまたは複数の特性を検索することと、ネットワークインターフェースを介してクライアントデバイスに、検索された1つまたは複数の特性を送信することとを行うようにさらに構成され得る。 In another aspect described herein, a server device for secure identity retrieval is described. The server device includes a network interface for communicating with a first client device of the plurality of client devices, a memory device storing a first database comprising a plurality of query tokens and a corresponding plurality of associated client device identifiers, and a plurality of client device identifiers. A second database comprising client device identifiers and associated device characteristics and a processor may be included. The processor is configured to retrieve a value of the periodic variable, calculate a plurality of query tokens from the corresponding plurality of client device identifiers and a value of the periodic variable, and retrieve the first client device from the first client device via the network interface. and receiving a first query token calculated from a client device identifier of a client device of the client device and a value of a periodic variable. The processor identifies a second query token that matches the first query token from among the plurality of query tokens computed in the first database, and in response to the identification, determines an association from the first database. The client device identifier may be further configured to search for a client device identifier that is assigned. The processor retrieves one or more characteristics of the first client device from the second database according to the associated client device identifier and transmits the retrieved one or more characteristics to the client device via the network interface. and transmitting the characteristics.
いくつかの実装形態では、プロセッサは、サーバデバイスによって、計算された複数のクエリトークンに基づいて確率的データ構造を生成することと、第1のクエリトークンを確率的データ構造と比較することとを行うようにさらに構成される。第2のクエリトークンを識別することは、確率的データ構造に一致する第1のクエリトークンに応答して実行され得る。 In some implementations, the processor includes, by the server device, generating a probabilistic data structure based on the plurality of computed query tokens and comparing the first query token with the probabilistic data structure. further configured to do so. Identifying the second query token may be performed in response to the first query token matching the probabilistic data structure.
いくつかの実装形態では、プロセッサは、対応する複数のクライアントデバイス識別子および周期変数の以前の値から第2の複数のクエリトークンを計算するようにさらに構成され得、第2の複数のクエリトークンは、対応するクライアントデバイス識別子に関連して第1のデータベースに記憶される。いくつかの実装形態では、プロセッサは、第1のデータベースから第3の複数のクエリトークン、複数のクライアントデバイス識別子から計算された第3の複数のクエリトークン、および周期変数の2回前の値を除去するようにさらに構成され得る。いくつかの実装形態では、プロセッサは、複数のクエリトークンのそれぞれについて、周期変数の値と対応するクライアントデバイス識別子との組合せの一方向ハッシュを計算するようにさらに構成され得る。 In some implementations, the processor may be further configured to calculate a second plurality of query tokens from the corresponding plurality of client device identifiers and a previous value of the periodic variable, the second plurality of query tokens being , stored in the first database in association with a corresponding client device identifier. In some implementations, the processor calculates a third plurality of query tokens from the first database, a third plurality of query tokens calculated from the plurality of client device identifiers, and two previous values of the periodic variable. may be further configured to remove. In some implementations, the processor may be further configured to calculate, for each of the plurality of query tokens, a one-way hash of the combination of the periodic variable value and the corresponding client device identifier.
ある態様のオプション機能は、任意の他の態様と組み合わせることができる。 Optional features of an aspect may be combined with any other aspects.
1つまたは複数の実装形態の詳細は、添付の図面および以下の説明に記載されている。本開示の他の特徴、態様、および利点は、説明、図面、および特許請求の範囲から明らかになるであろう。 The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the disclosure will be apparent from the description, drawings, and claims.
様々な図面での同様の参照番号および名称は、同様の要素を示している。 Like reference numbers and designations in the various drawings indicate similar elements.
ユーザがインターネットを閲覧すると、コンテンツサーバは、ユーザが閲覧に使用するコンピューティングデバイスに関するデバイス識別子および他の様々なデータを取得し得、多くの場合、ユーザはコンテンツサーバがそのようなデータを収集したことを知らない。デバイス識別子および他の様々なデータを取得することによって、コンテンツサーバは、ターゲットコンテンツ(たとえば、コンピューティングデバイスに関するデータに基づくコンテンツ)を提供するために、コンピューティングデバイスを個別に識別し得る。コンピューティングデバイスが様々なウェブページにアクセスするときに、コンピューティングデバイスのデバイス識別子をコンテンツサーバによって検索および記憶できるため、コンピューティングデバイスを使用している人々は、コンピューティングデバイスがコンテンツサーバによって識別されるのを防ぐことができない場合がある。コンピューティングデバイスは、コンテンツサーバがコンピューティングデバイスに関するデータを収集したかどうかを決定するためにコンテンツサーバにクエリを実行する場合があるが、コンテンツサーバは通常、コンピューティングデバイスのデバイス識別子に基づいてデータを記憶する。その結果、そのような実装形態では、デバイス識別のためにコンテンツサーバにクエリを送信するクライアントデバイスは、コンテンツサーバが識別するためのクライアントデバイスのデバイス識別子を提供せずにクエリを送信できない場合がある。コンテンツサーバがデバイス識別子を識別すると、コンテンツサーバは、将来的にコンピューティングデバイスにターゲットコンテンツを提供するためにデバイス識別子を記憶し得る。 When a user browses the Internet, content servers may obtain device identifiers and various other data about the computing device that the user uses to browse, and in many cases, the user may be unaware that the content server has collected such data. I don't know that. By obtaining a device identifier and various other data, a content server may uniquely identify a computing device to provide targeted content (eg, content based on data about the computing device). When a computing device accesses various web pages, the device identifier of the computing device can be retrieved and stored by the content server, so that people using the computing device can be assured that the computing device is being identified by the content server. It may not be possible to prevent this from occurring. Although a computing device may query a content server to determine whether the content server has collected data about the computing device, the content server typically collects data based on the computing device's device identifier. remember. As a result, in such implementations, a client device that sends a query to a content server for device identification may not be able to do so without providing the client device's device identifier for the content server to identify. . Once the content server identifies the device identifier, the content server may store the device identifier for providing targeted content to the computing device in the future.
たとえば、第1に図1を参照すると、2つのシーケンス102および110のブロック図が示されており、いくつかの実装形態では、各シーケンス102および110は、コンテンツサーバがデバイスに関するデータを記憶したかどうかを尋ね、コンテンツサーバがデバイスに関するデータを記憶した場合、データのタイプまたはカテゴリを尋ねるクエリをコンテンツサーバに送信するデバイスを含む。シーケンス102は、コンテンツサーバ106がクライアントデバイス104に関するデータを収集したかどうかを識別するために、コンテンツサーバ106にクエリを送信するクライアントデバイス104のシーケンスであり得る。コンテンツサーバ106は、クライアントデバイス104がインターネットを閲覧し、様々なウェブページおよび/またはドメインを閲覧している間に、クライアントデバイス104に関するデータを収集した可能性がある。クライアントデバイス104は、クエリにクライアントデバイス104のデバイス識別子を含み得るので、コンテンツサーバ106は、コンテンツサーバ106が記憶し、クライアントデバイス104に関連付けられるデータを識別し得る。 For example, referring first to FIG. 1, a block diagram of two sequences 102 and 110 is shown, and in some implementations, each sequence 102 and 110 is a block diagram of a content server storing data about a device. and, if the content server has stored data about the device, the device sends a query to the content server asking for the type or category of the data. Sequence 102 may be a sequence of client device 104 sending a query to content server 106 to identify whether content server 106 has collected data about client device 104. Content server 106 may have collected data about client device 104 while client device 104 is browsing the Internet and viewing various web pages and/or domains. Client device 104 may include the device identifier of client device 104 in the query, so content server 106 may identify data stored by content server 106 and associated with client device 104.
シーケンス102において、クライアントデバイス104は、コンテンツサーバ106がクライアントデバイス104に関するデータを有しているかどうかを尋ねるクエリをコンテンツサーバ106に送信し得る。クライアントデバイス104は、クライアントデバイス104を個別に識別できるクエリに、クライアントデバイス104のデバイス識別子(たとえば、デバイス8)を含み得る。コンテンツサーバ106は、コンテンツサーバ106がデータを収集した様々なデバイスのデバイス識別子(たとえば、デバイス1、デバイス2、デバイス3など)のリストを含むデータベース108を含み得る。コンテンツサーバ106は、データベース108を処理し、クエリのデバイス識別子をデータベース108内のデバイス識別子と比較し得る。コンテンツサーバ106がデバイスデータベース108内の一致する識別子を識別する場合、コンテンツサーバ106は、コンテンツサーバ106がクライアントデバイス104に関するデータを収集したことを示す信号をクライアントデバイス104に送信し得る。しかしながら、コンテンツサーバ106がデータベース108内の一致する識別子を識別しない場合、コンテンツサーバ106は、コンテンツサーバ106がクライアントデバイス104に関するデータを収集していないことを示す信号をクライアントデバイス104に送信し得る。 In sequence 102, client device 104 may send a query to content server 106 asking if content server 106 has data regarding client device 104. Client device 104 may include a device identifier for client device 104 (eg, device 8) in a query that can uniquely identify client device 104. Content server 106 may include a database 108 that includes a list of device identifiers (eg, device 1, device 2, device 3, etc.) for various devices for which content server 106 has collected data. Content server 106 may process database 108 and compare the device identifier of the query to device identifiers in database 108. If content server 106 identifies a matching identifier in device database 108, content server 106 may send a signal to client device 104 indicating that content server 106 has collected data regarding client device 104. However, if content server 106 does not identify a matching identifier in database 108, content server 106 may send a signal to client device 104 indicating that content server 106 is not collecting data regarding client device 104.
いくつかの実装形態では、コンテンツサーバ106がデータベース108内に一致するデバイス識別子がないと決定した場合、コンテンツサーバ106は、クライアントデバイス104のデバイス識別子をデータベース108に追加し得る。コンテンツサーバ106は、データベース108にデバイス識別子を追加したことをクライアントデバイス104に通知し得、または場合によっては、コンテンツサーバ106がクライアントデバイス104に関するデータを有していないが、それにもかかわらずクライアントデバイス104のデバイス識別子を記憶することを示し得る。その結果、コンテンツサーバがクライアントデバイス104に関するデータを有するかどうかを決定するためにコンテンツサーバ106にクエリを実行することによって、クライアントデバイス104は、次に、意図せずまたは望ましくないことに、クライアントデバイス104に関するデータ(たとえば、クライアントデバイス104のIPアドレス)をコンテンツサーバ106に提供し得る。いくつかの実装形態では、コンテンツサーバ106は、デバイスタイプ、ブラウザタイプ、オペレーティングシステムタイプ、または他のそのような情報(たとえば、ユーザエージェントフィールドなどのHTTP要求におけるメタデータ、デバイスにタッチスクリーンがあるかどうかの識別(デバイスがモバイルデバイスである可能性があることを示す)など)などのクエリとともに、クライアントデバイス104に関する追加情報を取得することが可能であり得る。 In some implementations, if content server 106 determines that there is no matching device identifier in database 108, content server 106 may add the device identifier of client device 104 to database 108. Content server 106 may notify client device 104 that it has added the device identifier to database 108, or in some cases, content server 106 may not have data about client device 104 but the client device may indicate storing 104 device identifiers. As a result, by querying the content server 106 to determine whether the content server has data about the client device 104, the client device 104 may then inadvertently or undesirably 104 (eg, the IP address of client device 104) may be provided to content server 106. In some implementations, the content server 106 includes information such as device type, browser type, operating system type, or other such information (e.g., metadata in the HTTP request such as a user agent field, whether the device has a touch screen, etc.) Along with the query, it may be possible to obtain additional information about the client device 104, such as identification (such as whether the device may be a mobile device).
逆に、シーケンス110は、同様のクエリをコンテンツサーバ114に送信するクライアントデバイス112の例示的なシーケンスを示す。しかしながら、シーケンス110において、クライアントデバイス112は、暗号化された(または、たとえばSHA256を介して暗号ハッシュされた)デバイス識別子をクエリ内のコンテンツサーバ114に送信し得る。具体的には、シーケンス110のいくつかの実装形態では、クライアントデバイス112は、コンテンツサーバ114が、クエリの一部として明示的または暗号化されていないデバイス識別子または他のデータを含まずに、クライアントデバイス104に関するデータを有するかどうかを尋ねるクエリをコンテンツサーバ114に送信し得る。クエリを送信するために、クライアントデバイス112は、第1に、クライアントデバイス112のデバイス識別子に基づいてクエリトークンを計算し得る。クエリトークンはまた、周期変数(たとえば、毎時、毎日、毎週、または他のそのような間隔で更新される変数)の値と、コンテンツサーバ114とクライアントデバイス112の両方に知られている暗号化技法(たとえば、SHA256のような一方向ハッシュ技法)に基づいて計算され得る。周期変数は、クライアントデバイス112およびコンテンツサーバ114によって検証され得る相互に検証可能な変数であり得る。以下でより詳細に説明するように、いくつかの実装形態では、クライアントデバイス112は、クライアントデバイス112のデバイス識別子を周期変数の値と連結し、クライアントデバイス112とコンテンツサーバ114の両方に知られている暗号化技法を実行することによってクエリトークンを計算し得る。クライアントデバイス112は、クエリトークン(たとえば、図示される例では27D2C8BC4)を計算し、クエリとともにクエリトークンをコンテンツサーバ114に送信し得る。 Conversely, sequence 110 depicts an example sequence of client device 112 sending a similar query to content server 114. However, in sequence 110, client device 112 may send an encrypted (or cryptographically hashed, eg, via SHA256) device identifier to content server 114 in a query. Specifically, in some implementations of sequence 110, client device 112 may request that content server 114 send a request to the client without including an explicit or unencrypted device identifier or other data as part of the query. A query may be sent to content server 114 asking if it has data about device 104. To send a query, client device 112 may first calculate a query token based on the device identifier of client device 112. The query token also includes the value of a periodic variable (e.g., a variable that is updated hourly, daily, weekly, or other such interval) and an encryption technique known to both content server 114 and client device 112. (e.g., one-way hashing techniques such as SHA256). Periodic variables may be mutually verifiable variables that may be verified by client device 112 and content server 114. As described in more detail below, in some implementations, the client device 112 concatenates the device identifier of the client device 112 with the value of a periodic variable known to both the client device 112 and the content server 114. The query token may be calculated by performing cryptographic techniques. Client device 112 may calculate a query token (eg, 27D2C8BC4 in the illustrated example) and send the query token to content server 114 along with the query.
コンテンツサーバ114は、クライアントデバイス112などのクライアントデバイスに関するデータを収集し、そのデータをコンテンツサーバ114のデータベース116に記憶するサーバであり得る。コンテンツサーバ114は、コンテンツサーバ114がデータを記憶した各クライアントデバイスに関連付けられるデバイス識別子を収集および記憶し得る。コンテンツサーバ114は、デバイス識別子ごとに複数の記憶されたクエリトークンを計算し得る。コンテンツサーバ114は、クライアントデバイス112と同じ周期変数および同じ暗号化技法の値を使用して、記憶されたクエリトークンを計算し得る。いくつかの実装形態では、コンテンツサーバ114は、コンテンツサーバ114とクライアントデバイス112が完全に同期されていない場合(たとえば、異なる時間を提供するクロックなど、一致しない異なるソースからのデータに依存している場合)、デバイス識別子ごとに複数の記憶されたクエリトークンを記憶し得、これは、コンテンツサーバ114がデータベース116を検索して、クライアントデバイス112がクエリトークンを計算するために使用した値とは異なる周期変数の値に基づいて計算された記憶されたクエリトークンを探す場合に偽陰性を引き起こす可能性がある。 Content server 114 may be a server that collects data about client devices, such as client device 112, and stores that data in database 116 of content server 114. Content server 114 may collect and store device identifiers associated with each client device on which content server 114 has stored data. Content server 114 may calculate multiple stored query tokens for each device identifier. Content server 114 may use the same periodic variable and the same encryption technique values as client device 112 to calculate the stored query token. In some implementations, the content server 114 may rely on data from disparate sources that do not match if the content server 114 and the client device 112 are not fully synchronized (e.g., clocks that provide different times). ), multiple stored query tokens may be stored for each device identifier, which is different from the value that content server 114 used to search database 116 and client device 112 to calculate the query token. This can lead to false negatives when looking for stored query tokens that are calculated based on the values of periodic variables.
コンテンツサーバ114は、クライアントデバイス112がコンテンツサーバ114に送信したクエリトークンを、データベース116に記憶されたクエリトークンと比較し得る。コンテンツサーバ114が一致するクエリトークンを識別する場合、コンテンツサーバ114は、一致が見つかったことを示す信号をクライアントデバイス112に送信し得る。いくつかの実装形態では、コンテンツサーバ114はまた、クライアントデバイス112に関して以前に記憶された情報を(たとえば、別個のデータベースから、または同じデータベース内のトークン識別子に関連付けられて)検索し得、また、コンテンツサーバ114がクライアントデバイス112のために収集したデータのカテゴリを示す信号を送信し得る。しかしながら、コンテンツサーバ114が一致する値がないと決定した場合、コンテンツサーバ114は、一致が見つからなかったことを示す信号をクライアントデバイス112に送信し得、その結果、コンテンツサーバ114は、クライアントデバイス112に関するデータを収集しなかった。クライアントデバイス112は、クライアントデバイス112に関するデータを収集したコンテンツサーバの数を決定するために、任意の数のコンテンツサーバに同様のクエリを送信し得る。 Content server 114 may compare the query token that client device 112 sent to content server 114 with the query token stored in database 116. If content server 114 identifies a matching query token, content server 114 may send a signal to client device 112 indicating that a match has been found. In some implementations, content server 114 may also retrieve previously stored information about client device 112 (e.g., from a separate database or in association with a token identifier within the same database) and Content server 114 may transmit a signal indicating the category of data collected for client device 112. However, if content server 114 determines that there is no matching value, content server 114 may send a signal to client device 112 indicating that no match was found, such that content server 114 We did not collect data on Client device 112 may send a similar query to any number of content servers to determine the number of content servers that have collected data about client device 112.
有利なことに、シーケンス110に示されるように、クライアントデバイス112は、クライアントデバイス112のデバイス識別子に暗号化技法を使用するので、クライアントデバイスは、それ自体を個別に識別し、クライアントデバイス112に関連付けられるデバイス識別子をコンテンツサーバに提供することなく、様々なコンテンツサーバにクエリを送信し得る。クライアントデバイス112に関するデータを収集したコンテンツサーバは、クライアントデバイス112が送信するクエリトークンに基づいてクライアントデバイス112に関連付けられるデバイス識別子を識別できる場合があるが、これらのコンテンツサーバは、データベースに記憶されたクライアントデバイス112のデバイス識別子をすでに有している。コンテンツサーバのデータベースに一致するクエリトークンがないと決定したコンテンツサーバは、デバイス識別子で実行される暗号化技法のために、クエリトークンからクライアントデバイス112を識別できない場合がある。たとえば、シーケンス110において、コンテンツサーバは、識別子「27D2C8BC4」をそのデータベースに追加することができる場合があるが、この識別子は、コンテンツサーバに知られていない周期変数およびデバイス識別子に基づいて計算されるので、後続の識別子を計算できない場合がある(たとえば、周期識別子の次の値の場合)。したがって、以前にコンテンツサーバに知られていなかったクライアントデバイスに関する情報を取得しようとする試みは、せいぜい短時間しか有効ではない可能性がある。その結果、これらのコンテンツサーバは、クエリを送信したデバイスの情報(たとえば、デバイス識別子)を識別せずに、データベースに一致するクエリがないことを示す信号をクライアントデバイス112に送り返すことができるだけである可能性がある。 Advantageously, as shown in sequence 110, the client device 112 uses cryptographic techniques for the device identifier of the client device 112 so that the client device uniquely identifies and associates it with the client device 112. Queries may be sent to various content servers without providing the content servers with device identifiers that are used. Content servers that have collected data about client devices 112 may be able to identify device identifiers associated with client devices 112 based on query tokens that client devices 112 send; Already has a device identifier for client device 112. A content server that determines that there is no matching query token in the content server's database may not be able to identify the client device 112 from the query token due to cryptographic techniques performed on the device identifier. For example, in sequence 110, the content server may be able to add the identifier "27D2C8BC4" to its database, which is calculated based on a periodic variable and a device identifier unknown to the content server. Therefore, it may not be possible to calculate subsequent identifiers (for example, for the next value of a periodic identifier). Therefore, attempts to obtain information about a client device that was not previously known to the content server may be effective only for a short time at most. As a result, these content servers can only send a signal back to the client device 112 indicating that there is no matching query in the database, without identifying information (e.g., device identifier) of the device that sent the query. there is a possibility.
たとえば、次に図2を参照すると、いくつかの実装形態による、安全な識別情報検索のためのシステム200の実装形態が示されている。システム200は、クライアントデバイス202、ネットワーク216、およびコンテンツサーバ218を含むように示されている。クライアントデバイス202は、異なるサードパーティに関連付けられるウェブページおよびドメインにアクセスすることによってインターネットを閲覧することができる。クライアントデバイス202は、ネットワーク216を介してインターネットを閲覧することができる。ネットワーク216は、同期または非同期ネットワークを含むことができる。クライアントデバイス202がインターネットを閲覧するとき、コンテンツサーバ(たとえば、コンテンツサーバ218)は、クライアントデバイス202に関するデータを収集および記憶することができる。データは、クライアントデバイス202の1つまたは複数の特性(地理的位置、訪問されたウェブページ、訪問されたウェブページのコンテンツ、IPアドレスなど)を含み得る。コンテンツサーバは、クライアントデバイス202に関連付けられるデバイス識別子を識別し、デバイス識別子をコンテンツサーバのデータベースに記憶し得る。クライアントデバイス202は、コンテンツサーバ218がクライアントデバイス202に関する特性(たとえば、データ)を記憶しているかどうかの識別のために、コンテンツサーバ218に(たとえば、クエリ)要求を送信し得る。 For example, referring now to FIG. 2, an implementation of a system 200 for secure identity retrieval is shown, according to some implementations. System 200 is shown to include a client device 202, a network 216, and a content server 218. Client device 202 can browse the Internet by accessing web pages and domains associated with different third parties. Client device 202 can browse the Internet via network 216. Network 216 may include a synchronous or asynchronous network. As client device 202 browses the Internet, a content server (eg, content server 218) may collect and store data about client device 202. The data may include one or more characteristics of client device 202 (geographic location, visited web pages, content of visited web pages, IP address, etc.). The content server may identify a device identifier associated with client device 202 and store the device identifier in the content server's database. Client device 202 may send a request (eg, query) to content server 218 to identify whether content server 218 has stored characteristics (eg, data) about client device 202 .
クライアントデバイス202は、デスクトップコンピュータ、ラップトップコンピュータ、ポータブルコンピュータ、タブレットコンピュータ、ウェアラブルコンピュータ、埋込み型コンピュータ、スマートテレビ、セットトップボックス、コンソール、モノのインターネット(IoT)デバイスまたはスマートアプライアンスを含む任意のタイプおよび形態のメディアデバイスまたはコンピューティングデバイス、あるいは他のタイプおよび形式のコンピューティングデバイスを備え得る。クライアントデバイスは、クライアント、デバイス、クライアントデバイス、ユーザデバイス、コンピューティングデバイス、匿名化されたコンピューティングデバイス、または他のそのような用語と、様々に呼ばれ得る。クライアントデバイスは、ローカルエリアネットワーク(LAN)、インターネットなどのワイドエリアネットワーク(WAN)、衛星ネットワーク、ケーブルネットワーク、ブロードバンドネットワーク、光ファイバネットワーク、マイクロ波ネットワーク、セルラーネットワーク、ワイヤレスネットワークなどを含む、任意の適切なネットワーク、あるいはこれらまたは他のそのようなネットワークの任意の組合せを介してデータを受信し得る。多くの実装形態では、ネットワークは、同じまたは異なるタイプの複数のサブネットワークを含み得、ゲートウェイ、モデム、ファイアウォール、ルータ、スイッチなどを含む複数の追加のデバイス(図示せず)を含み得る。 Client devices 202 can be of any type and type, including desktop computers, laptop computers, portable computers, tablet computers, wearable computers, embedded computers, smart televisions, set-top boxes, consoles, Internet of Things (IoT) devices, or smart appliances. or other types and formats of computing devices. A client device may be variously referred to as a client, device, client device, user device, computing device, anonymized computing device, or other such terminology. The client device may be any suitable network, including a local area network (LAN), a wide area network (WAN) such as the Internet, a satellite network, a cable network, a broadband network, a fiber optic network, a microwave network, a cellular network, a wireless network, etc. or any combination of these or other such networks. In many implementations, a network may include multiple subnetworks of the same or different types, and may include multiple additional devices (not shown), including gateways, modems, firewalls, routers, switches, and the like.
クライアントデバイス202は、コンテンツサーバ(たとえば、コンテンツサーバ218)から、コンテンツサーバがクライアントデバイス202に関するデータを収集したかどうかを示す識別情報を安全に取得するように構成された1つまたは複数のクライアントデバイスを備え得る。クライアントデバイス202は、いくつかの実装形態では、プロセッサ204およびメモリ206を含むように示されている。クライアントデバイス202内の1つまたは複数のコンポーネントは、クライアントデバイス202内の各コンポーネントと、コンテンツサーバ218および他のコンテンツサーバ(図示せず)などの外部コンポーネントとの間の通信を容易にすることができる。 Client device 202 includes one or more client devices configured to securely obtain identification information from a content server (e.g., content server 218) indicating whether the content server has collected data about client device 202. can be provided. Client device 202 is shown to include a processor 204 and memory 206 in some implementations. One or more components within client device 202 may facilitate communication between each component within client device 202 and external components, such as content server 218 and other content servers (not shown). can.
プロセッサ204は、いくつかの実装形態では、クライアントデバイス202内のメモリ206内のモジュールおよび/またはコンポーネントに対して命令を実行するように構成された1つまたは複数のプロセッサを備え得る。いくつかの実装形態では、メモリ206は、変数レトリバ208、クエリトークン計算機210、ブラウザ212、および復号化器214を含むように示されている。メモリ206は、任意の数のコンポーネントを含み得る。各コンポーネント208、210、212、および214の動作を実行するために、メモリ206内のモジュールに対して命令を実行することによって、プロセッサ204は、コンテンツサーバ218(または、他の任意のコンテンツサーバ)が、コンテンツサーバ218がクライアントデバイス202に関するデータを収集したかどうかを決定するために、クライアントデバイス202によって行われた要求からクライアントデバイス202を識別することを防ぐことができる。 Processor 204, in some implementations, may comprise one or more processors configured to execute instructions to modules and/or components within memory 206 within client device 202. In some implementations, memory 206 is shown to include a variable retriever 208, a query token calculator 210, a browser 212, and a decoder 214. Memory 206 may include any number of components. By executing instructions on modules in memory 206 to perform the operations of each component 208, 210, 212, and 214, processor 204 controls content server 218 (or any other content server). However, content server 218 may be prevented from identifying client device 202 from requests made by client device 202 to determine whether it has collected data about client device 202.
簡単に概説すると、プロセッサ204は、コンテンツサーバ218がまだそれを有していない場合、クライアントデバイス202のデバイス識別子をコンテンツサーバ218に提供する(または、限られた期間のみ有効であり得、そこから他の後続の識別子またはトークンを計算することができない、ハッシュ化された識別子またはトークンを提供する)ことなく、クライアントデバイス202を一意に識別するクエリトークンを計算することができる。プロセッサ204は、時間とともに変化する周期変数の値を検索することができる。プロセッサ204は、連結識別子を計算するために周期変数の値をクライアントデバイス202のデバイス識別子と連結することができ、または、それ以外の場合は、周期値とデバイス識別子を組み合わせることができる(たとえば、乗算、ビット単位のXORなど、一般に連結識別子と呼ばれる)。プロセッサ204は、コンテンツサーバ218がクライアントデバイス202に関して1つまたは複数の特性を有するかどうかを決定するために、連結識別子をクエリにおいてコンテンツサーバ218に送信することができる。プロセッサ204は、コンテンツサーバ218から暗号化された回答を受信することと、クライアントデバイス202の公開鍵で暗号化することと、クライアントデバイス202に固有の秘密鍵を使用して回答を復号化することとを行うことができる。いくつかの実施形態では、回答または応答が暗号化されない場合がある(たとえば、追加データなしの否定応答または肯定応答が使用される実装形態、またはトランスポート層セキュリティなどの傍受を防ぐために他のセキュリティ対策が利用される実装形態)。 Briefly outlined, processor 204 provides a device identifier for client device 202 to content server 218 if content server 218 does not already have one (or it may only be valid for a limited period of time and A query token that uniquely identifies client device 202 can be calculated without providing a hashed identifier or token from which other subsequent identifiers or tokens can be calculated. Processor 204 can retrieve values of periodic variables that change over time. Processor 204 may concatenate the value of the periodic variable with the device identifier of client device 202 to calculate a concatenated identifier, or may otherwise combine the periodic value and the device identifier (e.g., multiplication, bitwise XOR, etc. (commonly called concatenated identifiers). Processor 204 may send the linkage identifier in a query to content server 218 to determine whether content server 218 has one or more characteristics regarding client device 202. Processor 204 receives the encrypted answer from content server 218, encrypts it with a public key of client device 202, and decrypts the answer using a private key unique to client device 202. and can be done. In some embodiments, the answer or response may not be encrypted (e.g., implementations where negative or positive responses without additional data are used, or other security measures are used to prevent eavesdropping, such as transport layer security). the implementation mode in which the countermeasure is used).
メモリ206は、変数レトリバ208を含むように示されている。変数レトリバ208は、いくつかの実装形態では、周期変数の値を検索するためのアプリケーション、サーバ、サービス、デーモン、ルーチン、または他の実行可能ロジックを備え得る。変数レトリバ208は、場合によっては、クライアントデバイス202の管理者またはユーザから、どのコンテンツサーバがクライアントデバイス202に関するデータを収集したかを決定するために、様々なコンテンツサーバ218にクエリを実行する要求を受信し得る。要求を受信すると、変数レトリバ208は、周期変数の値を検索し得る。 Memory 206 is shown to include a variable retriever 208. Variable retriever 208, in some implementations, may comprise an application, server, service, daemon, routine, or other executable logic for retrieving values of periodic variables. Variable retriever 208 may receive requests from an administrator or user of client device 202 to query various content servers 218 to determine which content servers have collected data about client device 202. can be received. Upon receiving the request, variable retriever 208 may retrieve the value of the periodic variable.
周期変数は、時間の経過とともに継続的に変化する値を持つ変数であり、場合によっては管理者によって決定され得、したがって、2つの独立したパーティが同じ情報を与えられたときに周期変数の同じ値を独立して検索し得る。値は、英数字および/または記号を含む文字列であり得る。たとえば、周期変数は、シカゴの現在の時刻(たとえば、9:00PMまたは21:00)であり得る。2つの異なる場所にいる2つのパーティが同時にシカゴの現在時刻を検索する可能性がある場合、両方のパーティが同じ値を検索する可能性がある。そのパーティが最初の検索から5分後にシカゴの現在時刻を検索した場合、2つのパーティは最初の検索時とは異なる時刻を検索するが、パーティは互いに同じ時刻を検索する。この例では、時刻が値である可能性がある。周期変数の他の例には、これらに限定されないが、指定されたタイムゾーンにおける現在の日付(たとえば、6/21/19)、ニューヨーク証券取引所の株式の終値(たとえば、200ドル)、設定された頻度で継続的に増加するナンス値などがある。したがって、周期変数は、周期的に更新され、クライアントデバイスとコンテンツサーバの両方によって独立して決定可能または検索可能である任意の情報または情報の組合せを備え得る。 A periodic variable is a variable with a value that changes continuously over time, possibly determined by an administrator, and thus when two independent parties are given the same information, the same value of a periodic variable Values can be retrieved independently. The value may be a string containing alphanumeric characters and/or symbols. For example, a periodic variable may be the current time in Chicago (eg, 9:00 PM or 9:00 PM). If two parties in two different locations can search for the current time in Chicago at the same time, it is possible that both parties will search for the same value. If that party searches for the current time in Chicago 5 minutes after the first search, the two parties will search for a different time than they did for the first search, but the parties will search for the same time as each other. In this example, time could be the value. Other examples of periodic variables include, but are not limited to, the current date in a specified time zone (e.g., 6/21/19), the closing price of a stock on the New York Stock Exchange (e.g., $200), a setting For example, there is a nonce value that continuously increases with the frequency of the specified value. Accordingly, a periodic variable may comprise any information or combination of information that is periodically updated and independently determinable or searchable by both the client device and the content server.
説明したように、周期変数の値は、任意の形式で表されてよく、任意のタイプの文字または記号を含み得る。たとえば、ニューヨーク証券取引所の株式の現在価値は、200ドルまたは200の文字列で表されてよく、現在の日付は、6/21/19または6-21-19の文字列で表されてよく、現在の時刻は文字列9:00PMまたは21:00で表されてよい。値は任意の形式で表され得る。管理者は、周期変数の値のタイプおよび形式を決定し得る。 As explained, the value of the periodic variable may be represented in any format and may include any type of letter or symbol. For example, the current value of a stock on the New York Stock Exchange is often represented by $200 or a string of 200, and the current date is often represented by a string of 6/21/19 or 6-21-19. , the current time may be represented by the string 9:00PM or 21:00. Values may be expressed in any format. An administrator may determine the type and format of the periodic variable's value.
変数レトリバ208は、周期変数に応じて、クライアントデバイス202の様々なデータベースから、またはネットワーク216を介して様々なサーバからそれらを検索することによって、周期変数の値を検索し得る。たとえば、周期変数がシカゴの現在の日付である場合、クライアントデバイス202は、シカゴの現在の日付に基づいて内部カレンダを維持し、内部カレンダから現在の日付を識別し得る。場合によっては、変数レトリバ208は、ネットワーク216全体のサーバからの周期変数の値を識別し得る。一例では、変数レトリバ208は、ニューヨーク証券取引所の株式の現在の値を識別し、ネットワーク216を介してそのようなデータを記憶するサーバから検索し得る。変数レトリバ208は、任意のソースから値を識別して検索し得る。 Variable retriever 208 may retrieve values for periodic variables by retrieving them from various databases on client device 202 or from various servers over network 216, depending on the periodic variable. For example, if the periodic variable is the current date in Chicago, client device 202 may maintain an internal calendar based on the current date in Chicago and identify the current date from the internal calendar. In some cases, variable retriever 208 may identify values for periodic variables from servers across network 216. In one example, variable retriever 208 may identify and retrieve the current value of a New York Stock Exchange stock from a server that stores such data via network 216. Variable retriever 208 may identify and retrieve values from any source.
メモリ206は、クエリトークン計算機210を含むように示されている。クエリトークン計算機210は、いくつかの実装形態では、クエリトークンを計算し、それらをコンテンツサーバ218に送信するためのアプリケーション、サーバ、サービス、デーモン、ルーチン、または他の実行可能ロジックを備え得る。クエリトークンは、周期変数の値と連結されたデバイス識別子の一方向ハッシュである場合がある。クエリトークン計算機210は、変数レトリバ208によって検索された周期変数の値と、クライアントデバイス202に関連付けられるデバイス識別子とを識別し得る。クエリトークン計算機210は、連結されたデバイス識別子を取得するために、周期変数の値をデバイス識別子の終わりまたは始まりに連結することができ、または周期変数とデバイス識別子を組み合わせるために他の動作(たとえば、乗算、加算、減算など)を実行し得る。場合によっては、クエリトークン計算機210は、周期変数の値の複数のインスタンスをデバイス識別子に連結することができる。 Memory 206 is shown to include a query token calculator 210. Query token calculator 210, in some implementations, may comprise an application, server, service, daemon, routine, or other executable logic for calculating query tokens and sending them to content server 218. The query token may be a one-way hash of the device identifier concatenated with the value of the periodic variable. Query token calculator 210 may identify the value of the periodic variable retrieved by variable retriever 208 and a device identifier associated with client device 202. Query token calculator 210 may concatenate the value of the periodic variable to the end or beginning of the device identifier to obtain a concatenated device identifier, or perform other operations (e.g. , multiplication, addition, subtraction, etc.). In some cases, query token calculator 210 may concatenate multiple instances of the periodic variable's value to the device identifier.
クエリトークン計算機210は、クエリトークンを取得するために、連結されたデバイス識別子に対して暗号化技法を実行することができる。暗号化技法は、一方向ハッシュ(たとえば、SHA-1、SHA-256、SHA-512、MD5など)などの一方向暗号化技法である可能性がある。有利なことに、連結されたデバイス識別子に一方向暗号化技法を使用することによって、クエリトークン計算機210は、デバイス識別子を平文に回復するために、第2のパーティまたはデバイス(たとえば、コンテンツサーバ218)によって解読できないクエリトークンを計算することができ(ただし、第2のパーティまたはデバイスが、デバイス識別子が何であるか、周期変数の値が何であるか、クエリトークンを計算するためにどの暗号化技法が使用されたかを知っている場合、第2のパーティまたはデバイスは一致する値を有するトークンを生成し得る)、基になるデータ(たとえば、デバイス識別子やおよび周期変数の値)が一致することを識別するために、生成されたトークンとクエリトークンを比較し得る。その結果、クライアントデバイス202は、コンテンツサーバがまだそれを有していない場合、クライアントデバイス202のデバイス識別子をコンテンツサーバに提供することなく、任意のコンテンツサーバにクエリトークンを送信し得る。 Query token calculator 210 may perform cryptographic techniques on the concatenated device identifier to obtain a query token. The encryption technique may be a one-way encryption technique, such as one-way hashing (eg, SHA-1, SHA-256, SHA-512, MD5, etc.). Advantageously, by using a one-way encryption technique on the concatenated device identifier, the query token calculator 210 is able to communicate with a second party or device (e.g., the content server 218 ) to calculate a query token that cannot be decrypted (provided that the second party or device knows what the device identifier is, what the value of the periodic variable is, what cryptographic technique is used to calculate the query token) A second party or device may generate a token with a matching value if the second party or device knows that the underlying data (e.g., the device identifier and the value of the periodic variable) matches. The generated token and the query token may be compared to identify. As a result, client device 202 may send a query token to any content server without providing the content server with the device identifier of client device 202 if the content server does not already have one.
クエリトークンをコンテンツサーバ218に送信するとき、クエリトークン計算機210またはクライアントデバイス202の他の任意のコンポーネントは、クエリトークンが含まれるメッセージに、クライアントデバイス202に関連付けられる秘密鍵を用いてデジタル署名し得る。以下に説明するように、コンテンツサーバ218がクライアントデバイス202に関するデータを収集した場合、コンテンツサーバ218は、クライアントデバイス202のデバイス識別子に関連付けられる公開鍵を検索し、デジタル署名に基づいて、クエリトークンを含むメッセージが、デバイス識別子に関連付けられるクライアントデバイスから受信されたことを検証する。コンテンツサーバ218が、メッセージがクライアントデバイス202によって送信されなかったと決定した場合(たとえば、デジタル署名検証が失敗した場合)、コンテンツサーバ218は、メッセージに応答しない、および/またはコンテンツサーバ218がメッセージを送信したコンピューティングデバイスと接続しているTCP/IPソケット接続をすべて切断する。 When sending the query token to content server 218, query token calculator 210 or any other component of client device 202 may digitally sign the message containing the query token using a private key associated with client device 202. . As described below, when content server 218 collects data about client device 202, content server 218 searches for the public key associated with the device identifier of client device 202 and generates a query token based on the digital signature. verifying that a message containing the message was received from a client device associated with the device identifier; If content server 218 determines that the message was not sent by client device 202 (e.g., digital signature verification failed), content server 218 does not respond to the message, and/or content server 218 sends the message. Disconnect all TCP/IP socket connections to the connected computing device.
クエリトークン計算機210は、クエリトークンを計算する際に、計算されたクエリトークンをコンテンツサーバ218に送信することができる。いくつかの実装形態では、クエリトークン計算機210は、クエリトークン計算機210に関するデータを潜在的に収集する可能性があるコンテンツサーバのリストからコンテンツサーバ218を識別した後、計算されたクエリトークンをコンテンツサーバ218に送信し得る。クエリトークン計算機210は、ネットワーク216を介してリストを記憶するサーバからコンテンツサーバのリストをダウンロードすることができる。クエリトークン計算機210は、コンテンツサーバのリスト上の各コンテンツサーバを識別し、識別されたコンテンツサーバの各々または一部にクエリトークンを送信することができる。クライアントデバイス202は、リスト上の各コンテンツサーバから回答を受信し、クライアントデバイス202に関するデータを収集したコンテンツサーバの数を決定し得る。 Upon calculating the query token, the query token calculator 210 may send the calculated query token to the content server 218. In some implementations, query token calculator 210 sends the calculated query token to the content server after identifying content server 218 from a list of content servers that potentially collect data about query token calculator 210. 218. Query token calculator 210 can download the list of content servers from a server that stores the list via network 216. Query token calculator 210 can identify each content server on the list of content servers and send a query token to each or some of the identified content servers. Client device 202 may receive responses from each content server on the list and determine the number of content servers that have collected data about client device 202.
コンテンツサーバ218は、いくつかの実装形態では、コンテンツサーバ218が様々なコンピューティングデバイス(たとえば、クライアントデバイス202)に関するデータを収集したかどうかを決定する際に安全な識別情報検索のために構成された1つまたは複数のサーバまたはプロセッサを備え得る。いくつかの実装形態では、コンテンツサーバ218は、プロセッサ220およびメモリ222を含むように示されている。簡単に概説すると、プロセッサ220を通じて、コンテンツサーバ218は、周期変数の値を検索することと、コンテンツサーバ218がデータを収集したクライアントデバイスに関連付けられる記憶されたクエリトークンを計算することと、クライアントデバイスからクエリトークンを受信することと、クエリトークンをデータベースに記憶されたクエリトークンと比較することと、データベース内の一致する記憶されたクエリトークンを識別することと、第2のデータベースから一致する記憶されたクエリトークンに関連付けられるデバイス識別子を検索することと、デバイス識別子に基づいてクライアントデバイス202の1つまたは複数の特性を検索することと、1つまたは複数の特性をクライアントデバイス202に送信することとを行うように構成することができる。コンテンツサーバ218内の1つまたは複数のコンポーネントは、コンテンツサーバ218内の各コンポーネントとクライアントデバイス202などの外部コンポーネントとの間の通信を容易にすることができる。コンテンツサーバ218は、複数の接続されたデバイス(たとえば、サーババンク、ブレードサーバのグループ、またはマルチプロセッサシステムとして)を含むことができ、各デバイスは、必要な動作の一部を提供することができる。 Content server 218, in some implementations, is configured for secure identity retrieval in determining whether content server 218 has collected data about various computing devices (e.g., client device 202). may include one or more servers or processors. In some implementations, content server 218 is shown to include a processor 220 and memory 222. Briefly outlined, the content server 218, through the processor 220, is responsible for retrieving values of periodic variables, calculating stored query tokens that are associated with client devices from which the content server 218 has collected data; receiving a query token from a second database; comparing the query token with a query token stored in a database; identifying a matching stored query token in the database; retrieving one or more characteristics of the client device 202 based on the device identifier; and transmitting the one or more characteristics to the client device 202. It can be configured to do this. One or more components within content server 218 may facilitate communication between each component within content server 218 and an external component, such as client device 202. Content server 218 may include multiple connected devices (e.g., as a server bank, group of blade servers, or multiprocessor system), each device may provide a portion of the required operations. .
プロセッサ220は、いくつかの実装形態では、コンテンツサーバ218内のメモリ222内のモジュールまたはコンポーネントに対して命令を実行するように構成された1つまたは複数のプロセッサを備え得る。いくつかの実装形態では、プロセッサ220は、メモリ222内でモジュールを実行し得る。いくつかの実装形態では、メモリ222は、変数レトリバ224、クエリトークン計算機226、構造ジェネレータ228、クエリトークンマッチャ230、暗号化器232、サーバアプリケーション234、識別子データベース236、および特性データベース238を含むように示されている。 Processor 220 may comprise one or more processors configured to execute instructions to modules or components within memory 222 within content server 218 in some implementations. In some implementations, processor 220 may execute modules within memory 222. In some implementations, memory 222 includes a variable retriever 224, a query token calculator 226, a structure generator 228, a query token matcher 230, an encryptor 232, a server application 234, an identifier database 236, and a characteristics database 238. It is shown.
メモリ222は、変数レトリバ224を含むように示されている。変数レトリバ224は、いくつかの実装形態では、周期的値の値を検索するためのアプリケーション、サーバ、サービス、デーモン、ルーチン、または他の実行可能ロジックを備え得る。変数レトリバ224は、クライアントデバイス202の変数レトリバ208が周期変数の値を検索する方法と同様の方法で、周期変数の値を検索し得る。変数レトリバ224は、クライアントデバイス202と通信してもよく、管理者から入力を受信してもよく、したがって、変数レトリバ224は、クライアントデバイス202の変数レトリバ208と同じタイプの、および/または同じソースから周期変数の値を検索する。たとえば、クライアントデバイス202の変数レトリバ208は、シカゴの現在の日付に対応する周期変数の値を検索するように構成され得る。コンテンツサーバ218の変数レトリバ224はまた、クライアントデバイス202との通信の結果として、または管理者入力から、シカゴの現在の日付に対応する周期変数の値を検索するように構成され得る。その結果、変数レトリバ208および変数レトリバ224は、本明細書に記載のプロセスを実行する際に、周期変数の同じ値を検索し得る(たとえば、変数レトリバ208および変数レトリバ224は同期され得る)。 Memory 222 is shown to include a variable retriever 224. Variable retriever 224, in some implementations, may comprise an application, server, service, daemon, routine, or other executable logic for retrieving the value of a periodic value. Variable retriever 224 may retrieve values for periodic variables in a manner similar to the way variable retriever 208 of client device 202 retrieves values for periodic variables. Variable retriever 224 may communicate with client device 202 and may receive input from an administrator, such that variable retriever 224 is of the same type and/or from the same source as variable retriever 208 of client device 202. Find the value of a periodic variable from. For example, variable retriever 208 of client device 202 may be configured to retrieve the value of a periodic variable that corresponds to the current date in Chicago. The variable retriever 224 of the content server 218 may also be configured to retrieve the value of the periodic variable corresponding to the current date in Chicago as a result of communication with the client device 202 or from administrator input. As a result, variable retriever 208 and variable retriever 224 may search for the same value of the periodic variable when performing the processes described herein (eg, variable retriever 208 and variable retriever 224 may be synchronized).
変数レトリバ224は、周期変数の複数の値を検索し得る。たとえば、周期変数がシカゴの現在の日付である場合、変数レトリバ224は、シカゴの現在の日付、前日の日付から現在の日付までの日付、および/または現在の日付の翌日の日付の値を検索し得、したがって、クエリトークンが比較され得る周期変数の値のスライディングウィンドウを提供する。別の例では、周期変数がニューヨーク証券取引所の終値である場合、変数レトリバ224は、現在の日付および/または現在の日付の1日以上前の終値の株式に関連付けられる値を検索し得る。変数レトリバ224は、任意の数の値を検索し得る。 Variable retriever 224 may retrieve multiple values of a periodic variable. For example, if the periodic variable is the current date in Chicago, the variable retriever 224 retrieves values for the current date in Chicago, dates from the previous day's date to the current date, and/or the date after the current date. , thus providing a sliding window of values of periodic variables against which query tokens can be compared. In another example, if the periodic variable is the closing price on the New York Stock Exchange, the variable retriever 224 may retrieve values associated with stocks on the current date and/or closing prices one or more days before the current date. Variable retriever 224 may retrieve any number of values.
いくつかの実装形態では、変数レトリバ224は、クライアントデバイス202からのクエリトークンの受信に応答して周期変数の値を検索し得る。変数レトリバ224は、クエリトークンを受信することと、周期変数(たとえば、ニューヨークの時刻、ニューヨークの日付など)を識別することと、周期変数の対応する値を検索することとを行うことができる。有利なことに、クエリトークンを受信した後に周期変数を検索することによって、コンテンツサーバ218は、暗号化されたデバイス識別子の値をデータベースに継続的に記憶する必要がなく、メモリおよびストレージ空間を節約し得る。しかしながら、このような実装形態では、コンテンツサーバは、クエリトークンを処理する前に、データベース内のデバイス識別子ごとにトークンのセットを生成する必要がある場合があり、これには、大量の処理リソースが必要になる場合がある。同様の実装形態では、コンテンツサーバは、クエリトークンの受信後に検索された周期変数の値を使用して、データベース内の各識別子のトークンを繰り返し生成し、次の識別子に進む前に生成された各トークンを受信したクエリトークンと比較し、これにより、平均して処理時間が短縮される可能性がある(たとえば、識別子のサブセットのみを処理した後に一致が識別された場合)。他の実装形態では、以下で説明するように、一致しないトークンの処理時間を大幅に短縮するために、確率的データ構造が使用され得る。 In some implementations, variable retriever 224 may retrieve the value of the periodic variable in response to receiving a query token from client device 202. Variable retriever 224 can receive a query token, identify a periodic variable (eg, New York time, New York date, etc.), and retrieve a corresponding value of the periodic variable. Advantageously, by retrieving the periodic variable after receiving the query token, the content server 218 does not need to continuously store the encrypted device identifier value in the database, saving memory and storage space. It is possible. However, in such implementations, the content server may need to generate a set of tokens for each device identifier in the database before processing the query token, which requires significant processing resources. It may be necessary. In a similar implementation, the content server repeatedly generates a token for each identifier in the database using the value of the periodic variable retrieved after receiving the query token, and each generated token before proceeding to the next identifier. Compare the token with the received query token, which may reduce processing time on average (e.g., if a match is identified after processing only a subset of identifiers). In other implementations, probabilistic data structures may be used to significantly reduce processing time for unmatched tokens, as described below.
メモリ222は、クエリトークン計算機226を含むように示されている。クエリトークン計算機226は、コンテンツサーバ218がデータを記憶した様々なデバイス識別子のクエリトークンを計算するためのアプリケーション、サーバ、サービス、デーモン、ルーチン、または他の実行可能ロジックを備え得る。クエリトークン計算機226は、クライアントデバイス202がクエリトークンを計算する方法と同様の方法で、デバイス識別子のクエリトークンを計算し得る。以下に説明する識別子データベース236のデータ構造に記憶される各デバイス識別子について、クエリトークン計算機226は、連結された記憶されたデバイス識別子を取得するために、周期変数の検索された値をデバイス識別子の終わりまたは始まりに連結し得る。クエリトークン計算機226は、記憶されたクエリトークンを計算するために、クライアントデバイス202がクライアントデバイス202の連結されたデバイス識別子に対して実行する暗号化技法に対応する(たとえば、同じである)連結された記憶されたデバイス識別子に対して暗号化技法を実行することができる。クエリトークン計算機226は、識別子データベース236内のデバイス識別子の各々または一部に関連付けられる記憶されたクエリトークンを計算し得る。 Memory 222 is shown to include a query token calculator 226. Query token calculator 226 may comprise an application, server, service, daemon, routine, or other executable logic for calculating query tokens for various device identifiers on which content server 218 has stored data. Query token calculator 226 may calculate a query token for a device identifier in a manner similar to how client device 202 calculates a query token. For each device identifier stored in the data structure of the identifier database 236 described below, the query token calculator 226 combines the retrieved value of the periodic variable with the device identifier to obtain a concatenated stored device identifier. Can be linked to the end or beginning. Query token calculator 226 includes a concatenated device identifier that corresponds to (e.g., is the same as) a cryptographic technique that client device 202 performs on the concatenated device identifier of client device 202 to calculate a stored query token. Cryptographic techniques may be performed on the stored device identifiers. Query token calculator 226 may calculate stored query tokens associated with each or a portion of the device identifiers in identifier database 236.
いくつかの実装形態では、クエリトークン計算機226は、識別子データベース236内のデバイス識別子ごとに複数の記憶されたクエリトークンを計算し得る。たとえば、以下の表に示されるように、クエリトークン計算機226は、昨日の日付、今日の日付、および明日の日付の値に対応するデバイス識別子について、記憶されたクエリトークンを計算し得る。 In some implementations, query token calculator 226 may calculate multiple stored query tokens for each device identifier in identifier database 236. For example, as shown in the table below, query token calculator 226 may calculate stored query tokens for device identifiers that correspond to yesterday's date, today's date, and tomorrow's date values.
表において、||は文字列(たとえば、デバイス識別子および周期変数の値)を連結する方法を示し、SHA256はSHA-256ハッシュ関数を示す。記憶されたクエリトークンを計算するために、任意のタイプの値または暗号化技法が使用され得る。表のデータは、以下に説明するように、識別子データベース236に記憶され得る。 In the table, || indicates how strings (eg, device identifiers and values of periodic variables) are concatenated, and SHA256 indicates the SHA-256 hash function. Any type of value or cryptographic technique may be used to calculate the stored query token. The data in the table may be stored in an identifier database 236, as described below.
いくつかの実装形態では、メモリ222は、識別子データベース236を含むことも示されている。識別子データベース236は、コンテンツサーバ218がデータを収集したコンピューティングデバイスに関連付けられるデバイス識別子を含む動的データベースであり得る。識別子データベース236は、グラフデータベース、MySQL、Oracle、Microsoft SQL、PostgreSql、DB2、ドキュメントストア、検索エンジン、Key-Valueストアなどであり得る。識別子データベース236は、任意の量のデータを保持するように構成することができ、任意の数のコンポーネントで構成することができる。デバイス識別子は、クエリトークン計算機226によって計算される記憶されたクエリトークンに関連付けることができる。デバイス識別子は、デバイス識別子をクエリトークン計算機226によって計算された記憶されたクエリトークンに一致させるルックアップテーブル(たとえば、ハッシュテーブル)に記憶されたクエリトークンに関連付けることができる。各デバイス識別子は、周期変数の異なる値に基づいて計算された複数の記憶されたクエリトークンと一致する場合がある。いくつかの実装形態では、デバイス識別子および対応する記憶されたクエリトークンは、識別子データベース236の確率的データ構造に関連付けられ得る。 In some implementations, memory 222 is also shown to include an identifier database 236. Identifier database 236 may be a dynamic database containing device identifiers associated with computing devices from which content server 218 has collected data. Identifier database 236 can be a graph database, MySQL, Oracle, Microsoft SQL, PostgreSql, DB2, document store, search engine, key-value store, etc. Identifier database 236 can be configured to hold any amount of data and can be composed of any number of components. The device identifier may be associated with a stored query token calculated by query token calculator 226. The device identifier may be associated with a query token stored in a lookup table (eg, a hash table) that matches the device identifier to a stored query token calculated by query token calculator 226. Each device identifier may match multiple stored query tokens calculated based on different values of the periodic variable. In some implementations, device identifiers and corresponding stored query tokens may be associated with probabilistic data structures in identifier database 236.
いくつかの実装形態では、識別子データベース236の記憶されたクエリトークンは、コンテンツサーバ218によって固定または可変レートで識別子データベース236に定期的に追加および/または削除され得る。たとえば、ある日、クエリトークン計算機226は、今日の日付、昨日の日付、および明日の日付の値に基づいて、識別子データベース236内の各デバイス識別子のクエリトークンを計算し得る。2日目に、クエリトークン計算機226は、識別子データベース236から2日目の日付の2日前の日付に対応する記憶されたクエリトークンを削除し得る。クエリトークン計算機226はまた、2日後の日付の日付に対応するクエリトークンを識別子データベース236に追加し得る。その結果、識別子データベース236に記憶されたクエリトークンの数は、識別子データベース236の固定量のメモリを必要とするように、および/または記憶されたクエリトークンを記憶するために必要なメモリの量を減らすように制御され得る。 In some implementations, stored query tokens in identifier database 236 may be added to and/or removed from identifier database 236 periodically by content server 218 at a fixed or variable rate. For example, on one day, query token calculator 226 may calculate a query token for each device identifier in identifier database 236 based on the values of today's date, yesterday's date, and tomorrow's date. On the second day, query token calculator 226 may delete from identifier database 236 the stored query token corresponding to a date two days before the second day's date. Query token calculator 226 may also add a query token corresponding to a date two days in the future to identifier database 236. As a result, the number of query tokens stored in identifier database 236 may be such that the identifier database 236 requires a fixed amount of memory and/or the amount of memory required to store the stored query tokens. can be controlled to reduce
メモリ222は、構造ジェネレータ228を含むように示されている。構造ジェネレータ228は、クエリトークン計算機226によって計算された記憶されたクエリトークンに関連付けられる識別子データベース236のデータ構造を生成するためのアプリケーション、サーバ、サービス、デーモン、ルーチン、または他の実行可能ロジックを備え得る。データ構造は、確率的なデータ構造(たとえば、ブルームフィルタ、HyperLogLog、Count-Minスケッチなど)であり得る。ブルームフィルタの場合、構造ジェネレータ228は確率的データ構造を生成し得るので、データ構造は、記憶されたクエリトークンが確率的データ構造に関連付けられ得ることか、または記憶されたクエリトークンが確率的データ構造に確実に関連付けられないことを示すことができる。 Memory 222 is shown to include a structure generator 228. Structure generator 228 comprises an application, server, service, daemon, routine, or other executable logic for generating data structures for identifier database 236 associated with stored query tokens computed by query token calculator 226. obtain. The data structure may be a probabilistic data structure (eg, Bloom filter, HyperLogLog, Count-Min sketch, etc.). In the case of a Bloom filter, the structure generator 228 may generate a probabilistic data structure such that the data structure may be associated with the stochastic data structure or the stored query token may be associated with the stochastic data structure. It can be shown that it cannot be reliably associated with a structure.
構造ジェネレータ228は、記憶されたクエリトークンに関連付けられる配列として確率的データ構造を生成し得る。クエリトークン計算機226は、記憶されたクエリトークンごとにバイナリ配列(たとえば、バイナリ値の配列)を計算し、確率的データ構造の配列にバイナリ配列を追加し得る。たとえば、構造ジェネレータ228は、56の値を有する記憶されたクエリトークンのバイナリ配列を[1、1、1、0、0、0]と計算し得る。構造ジェネレータ228は、確率的データ構造と記憶されたクエリトークンのバイナリ配列との間でOR演算を実行することによって、確率的データ構造にバイナリ配列を追加し得る。構造ジェネレータ228は、識別子データベース236に記憶された各クエリトークンのバイナリ配列を確率的データ構造に追加し得る。いくつかの実装形態では、クエリトークン計算機226は、記憶されたクエリトークンをバイナリ配列としてすでに計算および/または記憶している可能性がある。 Structure generator 228 may generate probabilistic data structures as arrays associated with stored query tokens. Query token calculator 226 may compute a binary array (eg, an array of binary values) for each stored query token and add the binary array to the array of probabilistic data structures. For example, structure generator 228 may calculate a binary array of stored query tokens with 56 values as [1, 1, 1, 0, 0, 0]. Structure generator 228 may add a binary array to the probabilistic data structure by performing an OR operation between the probabilistic data structure and the stored binary array of query tokens. Structure generator 228 may add the binary array of each query token stored in identifier database 236 to a probabilistic data structure. In some implementations, query token calculator 226 may have already calculated and/or stored stored query tokens as a binary array.
いくつかの実装形態では、構造ジェネレータ228は、記憶されたクエリトークンに対して様々なハッシュ関数を実行し、ハッシュ関数の出力に対応するインデックスを1つに設定することによって、確率的データ構造を生成し得る。出力に対応しないインデックスはゼロのままである可能性がある。 In some implementations, structure generator 228 creates a probabilistic data structure by performing various hash functions on the stored query tokens and setting an index corresponding to the output of the hash functions to one. can be generated. Indexes that do not correspond to output may remain zero.
一致する記憶されたクエリトークンが識別子データベース236にあるかどうかを決定するためにクエリが行われるとき、以下に説明するクエリトークンマッチャ230は、クエリトークンマッチャ230がクライアントデバイス202から受信したクエリトークンのバイナリ配列を計算し得る。クエリトークンマッチャ230は、構造ジェネレータ228が確率的データ構造を生成するためにどのように構成されているかに応じて、クエリトークンの文字列をバイナリに変換するか(文字列がまだバイナリになっていない場合)、クエリトークンに対して様々なハッシュ関数を実行し、構造ジェネレータに応じて、ハッシュ関数の出力に対応する配列のインデックスを1に設定し、残りのインデックスはゼロのままにすることによって、バイナリ配列を計算することができる。クエリトークンマッチャ230がハッシュ関数を使用してバイナリ配列を計算する場合、クエリトークンマッチャ230は、クエリトークンのバイナリ配列を生成するために確率的データ構造を生成するために構造ジェネレータ228が使用したのと同じハッシュ関数を使用し得る。クエリトークンマッチャ230は、バイナリ配列のインデックス値を確率的データ構造の配列と比較し得る。クエリトークンマッチャ230は、クエリトークンのバイナリ配列のインデックスの「1」値を確率的データ構造の対応するインデックスと比較することができる(たとえば、クエリトークンと確率的データ構造との間でビット単位のAND演算を実行する)。比較の各インデックス値が1である場合、一致するクエリトークンが識別子データベース236にある可能性がある(偽陽性を許容する)。しかしながら、比較の1つのインデックス値がゼロである場合、一致するクエリトークンは識別子データベース236にない。そのような確率的なデータ構造またはフィルタは、偽陰性をもたらさない可能性があり、より集中的なトークンごとの比較を行う前に、一致が存在するかどうかをすばやく検証できる。 When a query is made to determine whether there is a matching stored query token in identifier database 236, query token matcher 230, described below, matches the query token that query token matcher 230 receives from client device 202. Binary arrays can be computed. Query token matcher 230 converts the query token string to binary (if the string is not yet binary) depending on how structure generator 228 is configured to generate probabilistic data structures. If not), by running various hash functions on the query token and depending on the structure generator, by setting the index of the array corresponding to the output of the hash function to 1 and leaving the remaining indices as zero. , binary arrays can be computed. If query token matcher 230 uses a hash function to compute a binary array, query token matcher 230 uses a You can use the same hash function as . Query token matcher 230 may compare index values of a binary array to an array of probabilistic data structures. Query token matcher 230 may compare the "1" value of the index of the binary array of query tokens to the corresponding index of the probabilistic data structure (e.g., the bitwise difference between the query token and the probabilistic data structure). perform an AND operation). If each index value of the comparison is 1, then there is a possibility that a matching query token exists in the identifier database 236 (tolerating false positives). However, if the index value of one of the comparisons is zero, then there are no matching query tokens in the identifier database 236. Such probabilistic data structures or filters may not yield false negatives and can quickly verify whether a match exists before performing more intensive token-by-token comparisons.
いくつかの実装形態では、構造ジェネレータ228は、データが識別子データベース236から削除される各インスタンスにおいて新しいデータ構造を生成することによって、確率的データ構造を更新し得る。構造ジェネレータ228は、新しいデータ構造を生成するために上記の技法を実行し得る。たとえば、クエリトークン計算機226が、今日の日付、昨日の日付、および明日の日付に対応する周期変数の値について、記憶されたクエリトークンを毎日計算する場合、識別子データベース236は、それが内部カレンダおよび時計に基づいて新しい日であると決定すると、昨日の日付の前日の日付に対応する記憶されたクエリトークンを削除し、明日の日付に基づいて新しい記憶されたクエリトークンを識別子データベース236に追加するように構成され得る。構造ジェネレータ228は、識別子データベース236内の更新されたデータに対応する新しいデータ構造を毎日生成し得る。 In some implementations, structure generator 228 may update the probabilistic data structure by generating a new data structure at each instance where data is deleted from identifier database 236. Structure generator 228 may perform the techniques described above to generate new data structures. For example, if query token calculator 226 calculates stored query tokens daily for the values of periodic variables that correspond to today's date, yesterday's date, and tomorrow's date, identifier database 236 may Upon determining that it is a new day based on the clock, remove the remembered query token corresponding to the day before yesterday's date and add a new remembered query token to the identifier database 236 based on tomorrow's date. It can be configured as follows. Structure generator 228 may generate new data structures daily that correspond to updated data in identifier database 236.
いくつかの実装形態では、毎日新しいデータ構造を生成する代わりに、構造ジェネレータ228は、カウントフィルタを生成し得る。カウントフィルタはブルームフィルタと同様であり得るが、各インデックスが1または0の値を有する代わりに、カウントフィルタは、インデックスに1つの値を有する記憶されたクエリトークンの数に対応する各インデックス値のカウンタを増分し得る。たとえば、3つの記憶されたクエリトークンが同じインデックスに1つの値を有する場合、確率的データ構造のインデックスは3の値を有し得る。データ構造ジェネレータ228は、記憶されたクエリトークンを削除および/またはカウントフィルタに追加するので、インデックスの値は、それぞれ、減少または増加し得る。クエリトークンマッチャ230がクエリトークンをカウントフィルタと比較するとき、クエリトークンマッチャ230は、クエリトークンが識別子データベース236に一致するクエリトークンを有するかどうかを決定するために、各インデックス値が1またはゼロではなく、非ゼロまたはゼロであるかどうかを決定することができる。 In some implementations, instead of generating new data structures every day, structure generator 228 may generate count filters. A count filter can be similar to a bloom filter, but instead of each index having a value of 1 or 0, a count filter has a value of 1 or 0 for each index value corresponding to the number of stored query tokens that have 1 value in the index. A counter may be incremented. For example, if three stored query tokens have one value in the same index, then the index of the probabilistic data structure may have a value of three. As the data structure generator 228 removes and/or adds stored query tokens to the count filter, the value of the index may decrease or increase, respectively. When query token matcher 230 compares a query token to the count filter, query token matcher 230 determines whether each index value is 1 or zero to determine whether the query token has a matching query token in identifier database 236. It can be determined whether the value is non-zero or zero.
メモリ222は、クエリトークンマッチャ230を含むように示されている。クエリトークンマッチャ230は、識別子データベース236に一致する記憶されたクエリトークンがあるかどうかを決定するためのアプリケーション、サーバ、サービス、デーモン、ルーチン、または他の実行可能ロジックを備え得る。クエリトークンマッチャ230は、コンテンツサーバ218がクライアントデバイス202から受信するクエリトークンを、識別子データベース236のデータ構造および/または識別子データベース236の記憶されたクエリトークンと比較し得る。クエリトークンマッチャ230が、識別子データベース236に一致する記憶されたクエリトークンがあると決定した場合、クエリトークンマッチャ230は、一致する記憶されたクエリトークンを識別し得る。クエリトークンマッチャ230は、記憶されたクエリトークンおよび対応するデバイス識別子を記憶する識別子データベース236のルックアップテーブルから、一致する記憶されたクエリトークンを識別し得る。 Memory 222 is shown to include a query token matcher 230. Query token matcher 230 may comprise an application, server, service, daemon, routine, or other executable logic for determining whether there is a matching stored query token in identifier database 236. Query token matcher 230 may compare query tokens that content server 218 receives from client device 202 to data structures in identifier database 236 and/or stored query tokens in identifier database 236. If query token matcher 230 determines that there is a matching stored query token in identifier database 236, query token matcher 230 may identify a matching stored query token. Query token matcher 230 may identify matching stored query tokens from a lookup table in identifier database 236 that stores stored query tokens and corresponding device identifiers.
クエリトークンマッチャ230は、コンテンツサーバ218がクライアントデバイス202から受信したクエリトークンを確率的データ構造と比較することによって、一致するクエリトークンがあると決定し得る。クエリトークンマッチャ230は、コンテンツサーバ218がクライアントデバイス202から受信したクエリトークンを識別し、それを、上記のように、識別子データベース236のデータ構造に関連付けられるブルームフィルタと比較することができる。クエリトークンマッチャ230は、クエリトークンが識別子データベース236に一致する記憶されたクエリトークンを有するかどうかを示すバイナリ値(たとえば、はい、またはいいえ)を決定し得る。クエリトークンマッチャ230は、一致する記憶されたクエリトークンがある場合は真の回答を受信し、一致する記憶されたクエリトークンがない場合は偽の回答を受信することができる。クエリトークンマッチャ230が偽の回答を受信した場合、暗号化器232は、一致がなかったことを示す信号をクライアントデバイス202に送信し得る。クエリトークンマッチャ230が真の回答を受信した場合、暗号化器232は、一致があったことを示す信号をクライアントデバイス202に送信し得る。 Query token matcher 230 may determine that there is a matching query token by comparing the query token that content server 218 receives from client device 202 to a probabilistic data structure. Query token matcher 230 may identify a query token received by content server 218 from client device 202 and compare it to a Bloom filter associated with a data structure in identifier database 236, as described above. Query token matcher 230 may determine a binary value (eg, yes, or no) indicating whether the query token has a matching stored query token in identifier database 236. Query token matcher 230 may receive a true answer if there is a matching stored query token and a false answer if there is no matching stored query token. If query token matcher 230 receives a false answer, encryptor 232 may send a signal to client device 202 indicating that there was no match. If query token matcher 230 receives a true answer, encryptor 232 may send a signal to client device 202 indicating that there was a match.
いくつかの実装形態では、クエリトークンマッチャ230が確率的データ構造との比較に基づいて一致があったと決定した場合、クエリトークンマッチャ230は、クエリトークンを識別子データベース236内のルックアップテーブルの記憶されたクエリトークンと比較し得る。有利なことに、クエリトークンを識別子データベース236内のルックアップテーブルと比較することによって、クエリトークンマッチャ230は、確率的データ構造との比較に基づいて生成される可能性がある偽陽性の可能性を排除または削減することができる。いくつかの実装形態では、クエリトークンマッチャ230は、クエリトークンを確率的データ構造と比較することなく、最初にクエリトークンをルックアップテーブルと比較し得る。クエリトークンマッチャ230は、コンテンツサーバ218がクライアントデバイス202から受信したクエリトークンと同じハッシュ値(たとえば、文字列)を有する記憶されたクエリトークンをクエリトークンマッチャ230が識別する場合、識別子データベース236に一致するクエリトークンがあると決定し得る。クエリトークンマッチャ230は、クエリトークンマッチャ230が、一致するハッシュ値を有する記憶されたクエリトークンを識別しない場合、一致するクエリトークンがないと決定し得る。 In some implementations, if the query token matcher 230 determines that there is a match based on the comparison with the probabilistic data structure, the query token matcher 230 matches the query token to one stored in a lookup table in the identifier database 236. can be compared with the query token. Advantageously, by comparing query tokens to lookup tables in identifier database 236, query token matcher 230 eliminates the possibility of false positives that may be generated based on comparisons with probabilistic data structures. can be eliminated or reduced. In some implementations, query token matcher 230 may first compare the query token to a lookup table without comparing the query token to a probabilistic data structure. Query token matcher 230 matches identifier database 236 if query token matcher 230 identifies a stored query token that has the same hash value (e.g., a string) as the query token received by content server 218 from client device 202. It may be determined that there is a query token that Query token matcher 230 may determine that there are no matching query tokens if query token matcher 230 does not identify a stored query token with a matching hash value.
メモリ222は、暗号化器232を含むように示されている。暗号化器232は、クライアントデバイス202からのクエリに応答してコンテンツサーバ218がクライアントデバイス202に送信する回答を暗号化するためのアプリケーション、サーバ、サービス、デーモン、ルーチン、または他の実行可能ロジックを備え得る。クエリトークンマッチャ230が識別子データベース236に一致する記憶されたクエリトークンを識別しない場合、暗号化器232は、クライアントデバイス202に、ランダム文字列またはヌルデータ文字列を送信し得る。一例では、ランダム文字列は、タイムスタンプの複数のインスタンスを含み得る。その結果、クライアントデバイス202がランダム文字列またはヌルデータ文字列を受信すると、クライアントデバイス202はそれを復号化して、それがランダムであると決定しようとし得る。文字列がランダムであるという決定に基づいて、クライアントデバイスは、コンテンツサーバ218がクライアントデバイス202に関する情報を記憶していない可能性があると決定し得る。有利なことに、タイムスタンプの複数のインスタンスを含めることによって、暗号化のエントロピを増加させることができ、サードパーティがコンテンツサーバ218からクライアントデバイス202への信号を復号化することをより困難にする。コンテンツサーバ218からの回答を傍受するコンテンツサーバまたは他のサードパーティは、ランダム文字列またはヌルデータ文字列の意味を復号化または知ることができない可能性がある。 Memory 222 is shown to include an encryptor 232. Encryptor 232 includes an application, server, service, daemon, routine, or other executable logic for encrypting answers that content server 218 sends to client device 202 in response to queries from client device 202. I can prepare. If query token matcher 230 does not identify a stored query token that matches identifier database 236, encryptor 232 may send a random string or a null data string to client device 202. In one example, the random string may include multiple instances of timestamps. As a result, when client device 202 receives a random string or null data string, client device 202 may attempt to decode it and determine that it is random. Based on the determination that the string is random, the client device may determine that content server 218 may not have stored information about client device 202. Advantageously, including multiple instances of timestamps can increase the entropy of the encryption, making it more difficult for third parties to decode the signal from content server 218 to client device 202. . A content server or other third party that intercepts the answer from content server 218 may not be able to decode or know the meaning of the random string or null data string.
しかしながら、クエリトークンマッチャ230が、識別子データベース236に一致するクエリトークンがあると決定した場合、暗号化器232は、一致するクエリトークンに関連付けられるデバイス識別子を識別し、デバイス識別子を特性データベース238内のルックアップテーブルと比較し得る。識別子データベース236内のデバイス識別子の各々または一部は、公開鍵に関連付けられ得る。公開鍵は、特性データベース238に記憶され、デバイス識別子に関連付けられ得る。暗号化器232は、デバイス識別子を特性データベース238の表と比較し、デバイス識別子に関連付けられる公開鍵を検索し得る。暗号化器232は、暗号化器232が公開鍵を用いてクライアントデバイス202に送り返す回答を暗号化し得る。暗号化された回答は、コンテンツサーバ218がクライアントデバイス202に関するデータおよび/またはコンテンツサーバ218がクライアントデバイス202に関して記憶した情報および情報のカテゴリを含む1つまたは複数の特性を収集したことを示す識別を含み得る。暗号化器232は、暗号化された回答をクライアントデバイス202に送信し得る。クライアントデバイス202の復号化器214は、以下に説明するように、暗号化された回答を復号化することができる。 However, if query token matcher 230 determines that there is a matching query token in identifier database 236, encryptor 232 identifies the device identifier associated with the matching query token and stores the device identifier in characteristics database 238. Can be compared to a lookup table. Each or a portion of device identifiers within identifier database 236 may be associated with a public key. The public key may be stored in the properties database 238 and associated with the device identifier. Encryptor 232 may compare the device identifier to a table in property database 238 and retrieve the public key associated with the device identifier. Encryptor 232 may encrypt the answer that encryptor 232 sends back to client device 202 using the public key. The encrypted answer includes an identification indicating that the content server 218 has collected data about the client device 202 and/or one or more characteristics including information and categories of information that the content server 218 has stored about the client device 202. may be included. Encryptor 232 may send the encrypted answer to client device 202. Decryptor 214 of client device 202 can decrypt the encrypted answer, as described below.
いくつかの実装形態では、暗号化器232は、ナンス値およびタイムスタンプを使用して、クライアントデバイス202に送信される回答をさらに暗号化し得る。暗号化器232は、回答を暗号化するために次の式を使用することができる。
Answerencrypted=PiblicKeyEncryption(KeypublicAnswerplaintext||nonce||timestamp)
上記のように、||は、別の文字列の値を1つの文字列に連結することを示している。Answerplaintextは、暗号化器232が暗号化する回答であり得、クライアントデバイス202に関して記憶された情報の識別子を含み得る。暗号化器232は、絶えず増分しているカウンタ(たとえば、時間に対応する増分、サーバ218とクライアントデバイス202との間で送信されるメッセージなど)の使用を通じて、ナンスの値を検索し得る。ナンスは、コンテンツサーバ218とクライアントデバイス202との間で同期され得るので、クライアントデバイス202は、暗号化器232が回答を暗号化するために使用したナンスを知るであろう。いくつかの実装形態では、ナンスの全部または一部が回答とともにクライアントデバイス202に送信され得、クライアントデバイス202がナンスを識別して回答を復号化できるようにするか、またはクエリの一部としてクライアントデバイス202から受信され得る。暗号化器232は、サーバ218の内部時計から時間を検索することによってタイムスタンプを生成し得る。ナンスおよびタイムスタンプの各々は、任意の順序および任意の回数で回答と連結され得る。
In some implementations, encryptor 232 may further encrypt the answer sent to client device 202 using the nonce value and timestamp. Encryptor 232 may use the following formula to encrypt the answer.
Answer encrypted =PiblicKeyEncryption(Key public Answer plaintext ||nonce||timestamp)
As shown above, || indicates concatenation of values from separate strings into one string. Answer plaintext may be the answer that encryptor 232 encrypts and may include an identifier of information stored about client device 202. Encryptor 232 may retrieve the value of the nonce through the use of a constantly incrementing counter (eg, an increment corresponding to time, messages sent between server 218 and client device 202, etc.). The nonce may be synchronized between content server 218 and client device 202, so client device 202 will know the nonce that encryptor 232 used to encrypt the answer. In some implementations, all or part of the nonce may be sent to the client device 202 with the answer, allowing the client device 202 to identify the nonce and decrypt the answer, or as part of a query. may be received from device 202. Encryptor 232 may generate the timestamp by retrieving the time from server 218's internal clock. Each nonce and timestamp may be concatenated with the answer in any order and any number of times.
いくつかの実装形態では、メモリ222はまた、特性データベース238を含むように示されている。特性データベース238は、デバイス識別子、デバイス識別子に関連付けられる公開鍵、およびデバイス識別子に関連付けられるコンピューティングデバイスの1つまたは複数の特性を含む動的データベースであり得る。公開鍵に対応する秘密鍵は、デバイス識別子または同じユーザの他のデバイスに関連付けられるデバイスに機密情報として記憶され得る。特性データベース238は、グラフデータベース、MySQL、Oracle、Microsoft SQL、PostgreSql、DB2、ドキュメントストア、検索エンジン、Key-Valueストアなどであってよい。特性データベース238は、任意の量のデータを保持するように構成することができ、任意の数のコンポーネントで構成することができる。デバイス識別子は、クエリトークン計算機226によって計算される記憶されたクエリトークンに関連付けられ得る。デバイス識別子は、識別子データベース236の対応するデバイス識別子に関連付けられ得る。特性データベース238のデバイス識別子の各々または一部は、公開鍵および/あるいは1つまたは複数の特性に関連付けられ得る。公開鍵および/あるいは1つまたは複数の特性は、対応するデバイス識別子と一致するルックアップテーブルに記憶され得る。1つまたは複数の特性は、デバイス識別子に関連付けられるクライアントデバイスの地理的位置、訪問されたウェブページ、訪問されたウェブページのコンテンツなどのうちの1つまたは複数を含み得る。1つまたは複数の特性は、クライアントデバイスまたはクライアントデバイスと対話するユーザの任意の特性、あるいはクライアントデバイスまたはユーザの推論された特性を含み得る。 In some implementations, memory 222 is also shown to include a characteristics database 238. Characteristics database 238 may be a dynamic database that includes one or more characteristics of a device identifier, a public key associated with the device identifier, and a computing device associated with the device identifier. The private key corresponding to the public key may be stored as confidential information on a device that is associated with a device identifier or other devices of the same user. The properties database 238 may be a graph database, MySQL, Oracle, Microsoft SQL, PostgreSql, DB2, document store, search engine, key-value store, etc. Characteristics database 238 can be configured to hold any amount of data and can be composed of any number of components. The device identifier may be associated with a stored query token calculated by query token calculator 226. The device identifier may be associated with a corresponding device identifier in the identifier database 236. Each or a portion of the device identifiers in property database 238 may be associated with a public key and/or one or more properties. The public key and/or one or more characteristics may be stored in a lookup table that matches a corresponding device identifier. The one or more characteristics may include one or more of the client device's geographic location, visited web pages, content of visited web pages, etc. associated with the device identifier. The one or more characteristics may include any characteristics of the client device or a user interacting with the client device, or inferred characteristics of the client device or user.
暗号化器232は、クライアントデバイス202の識別されたデバイス識別子に関連付けられる公開鍵と、クライアントデバイス202の1つまたは複数の特性のデータとの両方を識別および検索するために、識別されたクライアントデバイス識別子を特性データベース238と比較し得る。公開鍵を使用して、暗号化器232は、回答に1つまたは複数の特性を含む信号を暗号化し、暗号化された信号をクライアントデバイス202に送信し得る。 The encryptor 232 is configured to use the identified client device 202 to identify and retrieve both a public key associated with the identified device identifier of the client device 202 and data of one or more characteristics of the client device 202. The identifier may be compared to the characteristics database 238. Using the public key, encryptor 232 may encrypt a signal that includes the one or more characteristics in the answer and send the encrypted signal to client device 202.
さらに図2を参照すると、クライアントデバイス202のメモリ206は、復号化器214を含むように示されている。復号化器214は、コンテンツサーバ218から暗号化された信号を受信および復号化するために、アプリケーション、サーバ、サービス、デーモン、ルーチン、または他の実行可能ロジックを備え得る。復号化器214は、クライアントデバイス202のデータベース(図示せず)からクライアントデバイス202に固有の秘密鍵にアクセスし得る。復号化器214は、暗号化された信号の回答を処理して、コンテンツサーバ218がクライアントデバイス202に関するデータを収集したかどうかを決定するために、秘密鍵を使用して暗号化された信号を復号化し得る。さらに、復号化器214は、コンテンツサーバ218がクライアントデバイス202に関するデータを収集したことを示す信号を送信する場合、コンテンツサーバ218が収集したデータのカテゴリを決定することができる。 Still referring to FIG. 2, memory 206 of client device 202 is shown to include a decoder 214. Decryptor 214 may include an application, server, service, daemon, routine, or other executable logic to receive and decrypt encrypted signals from content server 218. Decryptor 214 may access a private key specific to client device 202 from a database (not shown) on client device 202. Decryptor 214 processes the encrypted signal response to determine whether content server 218 has collected data about client device 202 using the private key. Can be decrypted. Additionally, decoder 214 may determine the category of data collected by content server 218 if content server 218 sends a signal indicating that it has collected data regarding client device 202.
いくつかの実装形態では、クライアントデバイス202に関するデータを収集したコンテンツサーバの数および各コンテンツサーバが収集したデータのカテゴリを決定するために、クライアントデバイス202は、クエリトークンを複数のコンテンツサーバに送信し得る。復号化器214は、クライアントデバイス202の識別子がコンテンツサーバのデータベースにあることを示す信号をクライアントデバイス202に送信する各コンテンツサーバのカウンタを増分および維持し得る。いくつかの実装形態では、復号化器214はまた、各カテゴリに関連付けられるクライアントデバイス202のデータを有するコンテンツサーバの数について、データの各カテゴリに関連付けられるカウンタを増分および維持し得る。カテゴリカウンタを通じて、クライアントデバイス202は、各カテゴリに関連付けられるデータを有するコンテンツサーバの数のカウントを決定し得る。 In some implementations, client device 202 sends a query token to multiple content servers to determine the number of content servers that have collected data about client device 202 and the categories of data that each content server has collected. obtain. Decoder 214 may increment and maintain a counter for each content server that sends a signal to client device 202 indicating that the client device 202's identifier is in the content server's database. In some implementations, decoder 214 may also increment and maintain a counter associated with each category of data for the number of content servers that have data for client devices 202 associated with each category. Through the category counters, client device 202 may determine a count of the number of content servers that have data associated with each category.
別の実装形態では、システム200を実装して、クライアントデバイスのブラウザが、どのコンテンツサーバがブラウザに関連付けられるデータを有するかを決定できるようにすることができる。ブラウザがコンテンツサーバに関連付けられるドメインにアクセスしたときに、コンテンツサーバがブラウザに関連付けられるデータを収集した可能性がある。場合によっては、複数のコンテンツサーバが単一のドメインに関連付けられ得る。場合によっては、単一のコンテンツサーバが複数のドメインに関連付けられ得る。コンテンツサーバは、クッキー(たとえば、サードパーティのクッキー)を使用してブラウザからデータを収集し得る。クッキーの値はコンピューティングデバイスに固有である可能性があるため、クッキーはコンピューティングデバイスのデバイス識別子である可能性がある。クッキーはまた、様々なドメインに関連付けられ得る。場合によっては、複数のコンテンツサーバが、ブラウザのクッキーによって提供される同じ情報にアクセスし得る。そのような場合、各コンテンツサーバはクッキーから同じ情報または同じ情報の一部を取得し得る。たとえば、コンピューティングデバイスのブラウザに記憶されたクッキー(および、クッキーの値)は、第1のドメインおよび第2のドメインに関連付けられ得る。1つのコンテンツサーバが第1のドメインに関連付けられてよく、別のコンテンツサーバが第2のドメインに関連付けられてよい。その結果、2つのコンテンツサーバが異なるドメインに関連付けられている場合でも、各コンテンツサーバはクッキーからコンピューティングデバイスのブラウザのデータを受信する可能性がある。 In another implementation, system 200 may be implemented to allow a client device's browser to determine which content servers have data associated with the browser. A content server may have collected data associated with a browser when the browser accessed a domain associated with the content server. In some cases, multiple content servers may be associated with a single domain. In some cases, a single content server may be associated with multiple domains. Content servers may use cookies (eg, third-party cookies) to collect data from browsers. The cookie value may be unique to a computing device, such that the cookie may be a device identifier for the computing device. Cookies may also be associated with various domains. In some cases, multiple content servers may access the same information provided by a browser cookie. In such a case, each content server may obtain the same information, or some of the same information, from the cookie. For example, a cookie (and a cookie value) stored on a computing device's browser may be associated with a first domain and a second domain. One content server may be associated with the first domain and another content server may be associated with the second domain. As a result, each content server may receive computing device browser data from cookies even if the two content servers are associated with different domains.
システム200は、クッキーを使用してブラウザに関するデータを収集したコンテンツサーバを決定する方法を提供する。たとえば、クライアントデバイス202は、ブラウザ212を含むように示されている。ブラウザ212は、コンテンツサーバがブラウザ212に関するデータを収集したかどうかを決定するためにコンテンツサーバ218に送信するクッキークエリトークンを生成するために、アプリケーション、サーバ、サービス、デーモン、ルーチン、または他の実行可能ロジックを備え得る。ブラウザ212は、コンテンツサーバにクエリを実行し、どのコンテンツサーバ(たとえば、コンテンツサーバ218)がブラウザ212およびデータが分類され得る任意のカテゴリに関するデータを収集したかを決定するために、変数レトリバ208および/またはクエリトークン計算機210によって実行される動作と同様の動作を実行することができる。ブラウザと呼ばれるが、ブラウザ212は、生産性アプリケーション、メディアアプリケーション、ゲームアプリケーション、ウェブブラウザアプリケーション、または他のそのようなアプリケーションの一部として含む、コンテンツサーバと通信するための任意のタイプおよび形式のアプリケーションを備え得る。 System 200 provides a method for determining a content server that uses cookies to collect data about a browser. For example, client device 202 is shown to include a browser 212. Browser 212 uses an application, server, service, daemon, routine, or other execution to generate a cookie query token that content server 218 sends to determine whether the content server has collected data about browser 212. Possibility logic may be provided. Browser 212 queries content servers and uses variable retriever 208 and /Or operations similar to those performed by query token calculator 210 may be performed. Although referred to as a browser, browser 212 may be any type and form of application for communicating with a content server, including as part of a productivity application, media application, gaming application, web browser application, or other such application. can be provided.
ブラウザ212は、コンテンツサーバの様々なアプリケーション(たとえば、コンテンツサーバ218)に送信して、どのコンテンツサーバがブラウザ212に関するデータを収集したかを決定するために、ブラウザクエリトークンを生成することができる。ブラウザ212は、ネットワーク216全体の様々なサーバから、またはクライアントデバイス202の内部データベースから、周期変数の値(たとえば、シカゴにおける時刻、シカゴにおける日付、ニューヨーク証券取引所の終値における株式の価値など)を検索することができる。ブラウザ212はまた、クライアントデバイス202に記憶されたファイルから、ブラウザ212がクエリを実行しているコンテンツサーバに関連付けられるドメインに関連付けられる、およびブラウザ212に固有であり得るクッキーの値(たとえば、クッキー値)を取得および/または識別し得る。ブラウザ212は、ドメインのドメイン識別子(たとえば、www.example.com)をさらに検索し得る。ブラウザ212は、連結されたクッキー識別子を取得するために検索された値を連結し得、連結されたクッキー識別子をクッキークエリトークンに暗号化するためにSHA-256などの暗号化技法を実行し得る。このプロセスの例示的な式を以下に示す。
Browser query token=SHA256(Cookie Value||domain||today's date)
この例では、今日の日付は、現在の日付に対応する周期変数の値である。ブラウザ212は、コンテンツサーバ218および同じドメインおよび/またはクッキーに関連付けられる他のサーバがブラウザ212に関するデータを収集したかどうかを決定するために、ブラウザクエリトークンを計算し、ドメインに関連付けられるコンテンツサーバに送信し得る。
Browser 212 may generate browser query tokens to send to various applications of content servers (eg, content server 218) to determine which content servers have collected data about browser 212. Browser 212 retrieves values for periodic variables (e.g., time in Chicago, date in Chicago, value of a stock at closing price on the New York Stock Exchange, etc.) from various servers across network 216 or from an internal database of client device 202. Can be searched. Browser 212 also retrieves from files stored on client device 202 a cookie value that is associated with a domain that is associated with the content server that browser 212 is querying, and that may be unique to browser 212 (e.g., cookie value ) may be obtained and/or identified. Browser 212 may further search for a domain identifier for the domain (eg, www.example.com). Browser 212 may concatenate the retrieved values to obtain a concatenated cookie identifier and may perform a cryptographic technique such as SHA-256 to encrypt the concatenated cookie identifier into a cookie query token. . An exemplary formula for this process is shown below.
Browser query token=SHA 256 (Cookie Value||domain||today's date)
In this example, today's date is the value of the periodic variable that corresponds to the current date. Browser 212 calculates a browser query token and sends the browser query token to the content server associated with the domain to determine whether content server 218 and other servers associated with the same domain and/or cookies have collected data about browser 212. Can be sent.
コンテンツサーバ218は、サーバアプリケーション234を含むように示されている。サーバアプリケーション234は、クライアントデバイス(たとえば、クライアントデバイス202)からクッキークエリトークンを受信し、サーバアプリケーション234がクライアントデバイスのブラウザ(たとえば、ブラウザ212)に関連付けられるデータを収集したかどうかを決定するためのアプリケーション、サーバ、FTPサーバ、HTTPサーバ、サービス、デーモン、ルーチン、または他の実行可能ロジックを備え得る。サーバアプリケーション234は、サーバアプリケーション234がデータを収集したブラウザの各々または一部について、記憶されたクッキークエリトークンを計算し得る。サーバアプリケーション234は、クライアントデバイス202のブラウザ212が周期変数の値を検索するのと同様の方法で周期変数の値を検索することによって、記憶されたクッキークエリトークンを計算し得る。サーバアプリケーション234は、ブラウザ212と同じ情報(たとえば、同じ変数)および/またはデータソースに基づいて周期変数の値を検索し得るので、サーバアプリケーション234が検索する値は、ブラウザ212が検索する値と一致し得る。サーバアプリケーション234は、記憶されたクッキークエリトークンを計算するために周期的な間隔で値を検索し得る。たとえば、サーバアプリケーション234およびブラウザ212の両方は、今日の日付(たとえば、02-3-2019)に関連付けられる値を検索するように構成され得る。サーバアプリケーション234は、コンテンツサーバ218の内部カレンダから今日の日付の値を検索し得、一方、ブラウザ212は、クライアントデバイス202の内部カレンダから今日の日付の値を検索し得る。クライアントデバイス202およびコンテンツサーバ218のカレンダは同期され得るので、サーバアプリケーション234およびクライアントデバイス202の両方が同じ値を検索し得る。さらに、クライアントデバイス202およびコンテンツサーバ218は、同じ形式で同じ値を検索し得る。 Content server 218 is shown to include server application 234. Server application 234 receives a cookie query token from a client device (e.g., client device 202) and receives a cookie query token for determining whether server application 234 has collected data associated with the client device's browser (e.g., browser 212). It may comprise an application, server, FTP server, HTTP server, service, daemon, routine, or other executable logic. Server application 234 may calculate stored cookie query tokens for each or some of the browsers for which server application 234 has collected data. Server application 234 may calculate the stored cookie query token by retrieving the value of the periodic variable in a manner similar to how browser 212 of client device 202 retrieves the value of the periodic variable. Because server application 234 may retrieve values for periodic variables based on the same information (e.g., the same variables) and/or data sources as browser 212, the values that server application 234 retrieves are different from the values that browser 212 retrieves. Can match. Server application 234 may retrieve the value at periodic intervals to calculate the stored cookie query token. For example, both server application 234 and browser 212 may be configured to search for values associated with today's date (eg, 02-3-2019). Server application 234 may retrieve today's date value from content server 218's internal calendar, while browser 212 may retrieve today's date value from client device 202's internal calendar. The calendars of client device 202 and content server 218 may be synchronized so that both server application 234 and client device 202 may search for the same values. Additionally, client device 202 and content server 218 may search for the same value in the same format.
いくつかの実装形態では、サーバアプリケーション234は、複数の記憶されたクッキークエリトークンを計算するために、周期変数の複数の値を検索し得る。たとえば、周期変数が今日の日付に関連付けられている場合、サーバアプリケーション234は、現在の日付の今日の日付、明日の日付、および昨日の日付の値を検索し得る。サーバアプリケーション234は、任意の周期変数に関連付けられる任意の数の値を検索し得る。 In some implementations, server application 234 may retrieve multiple values of the periodic variable to calculate multiple stored cookie query tokens. For example, if the periodic variable is associated with today's date, server application 234 may retrieve the values of today's date, tomorrow's date, and yesterday's date for the current date. Server application 234 may retrieve any number of values associated with any periodic variable.
サーバアプリケーション234は、サーバアプリケーション234に関連付けられるドメインに関連付けられる各クッキーについて、記憶されたクッキークエリトークンを計算し得る。サーバアプリケーション234は、クッキー値をドメイン(たとえば、ドメイン識別子)および周期変数の検索された値と連結することによって、記憶されたクッキークエリトークンを計算し得る。上記の例を続けると、サーバアプリケーション234は、ブラウザ212のクッキー値を、ドメインの値(たとえば、クッキーに関連付けられるドメインの名前)および今日の日付と連結し得る。サーバアプリケーション234は、記憶されたクッキークエリトークンを計算するためにブラウザ212によって実行される暗号化技法と一致する暗号化技法を実行し得る。場合によっては、ドメインのクッキー値は、複数のコンテンツサーバ間(たとえば、クッキーコンソーシアム内)で共有され得、それぞれが独自のドメインを有する。そのような場合、記憶されたクッキーエリトークンは、以前にクッキーをドロップまたは作成した(たとえば、クッキーを所有している)ドメインの値に関連付けられている(たとえば、タグ付けされている)場合がある。ドメインのクッキー値がどのコンテンツサーバとも共有されていないが、ドメインのコンテンツサーバ218と共有されている場合、記憶されているクッキークエリトークンはドメインの値に関連付けられない可能性がある。 Server application 234 may calculate a stored cookie query token for each cookie associated with a domain associated with server application 234. Server application 234 may compute a stored cookie query token by concatenating the cookie value with the retrieved values of the domain (eg, domain identifier) and periodic variable. Continuing with the example above, server application 234 may concatenate the browser 212 cookie value with the domain value (eg, the name of the domain associated with the cookie) and today's date. Server application 234 may perform cryptographic techniques consistent with those performed by browser 212 to calculate stored cookie query tokens. In some cases, a domain's cookie value may be shared among multiple content servers (eg, within a cookie consortium), each with its own domain. In such cases, the remembered cookie Eli token may be associated (e.g., tagged) with the value of the domain that previously dropped or created the cookie (e.g., owns the cookie). be. If a domain's cookie value is not shared with any content server, but is shared with the domain's content server 218, then the stored cookie query token may not be associated with the domain's value.
いくつかの実装形態では、サーバアプリケーション234は、様々なブラウザに関連付けられるクッキーごとに、複数の記憶されたクッキークエリトークンを計算し得る。たとえば、以下のルックアップテーブルに示されるように、サーバアプリケーション234は、昨日の日付、今日の日付、および明日の日付の周期変数の値に関連付けられる各クッキーの記憶されたクッキークエリトークンを計算し得る。 In some implementations, server application 234 may calculate multiple stored cookie query tokens for each cookie associated with different browsers. For example, as shown in the lookup table below, server application 234 calculates a remembered cookie query token for each cookie that is associated with the periodic variable values of yesterday's date, today's date, and tomorrow's date. obtain.
ルックアップテーブルは、サーバアプリケーション234が様々なブラウザに関連付けられるクッキーのために記憶した可能性のあるルックアップテーブルを例示している。サーバアプリケーション234は、計算された記憶されたクッキークエリトークンを識別子データベース236に記憶し得る。サーバアプリケーション234は、データベース内の任意の数のクッキーに対して任意の数の記憶されたクッキークエリトークンを記憶し得る。いくつかの実装形態では、経過する日ごとに、サーバアプリケーション234は、昨日の日付の値に関連付けられる記憶されたクッキークエリトークンを削除し、明日の日付の値に関連付けられる新しい記憶されたクッキークエリトークンを計算し得る。 Lookup table is illustrative of lookup tables that server application 234 may have stored for cookies associated with various browsers. Server application 234 may store the calculated stored cookie query token in identifier database 236. Server application 234 may store any number of stored cookie query tokens for any number of cookies in the database. In some implementations, for each day that passes, server application 234 deletes the remembered cookie query token associated with yesterday's date value and creates a new remembered cookie query token associated with tomorrow's date value. Tokens can be calculated.
いくつかの実装形態では、記憶されたクッキークエリトークンは、上記の確率的データ構造と同様の確率的データ構造(たとえば、ブルームフィルタ)に関連付けられ得る。サーバアプリケーション234は、識別子データベース236に一致する記憶されたクッキークエリトークンがあるかどうかを決定するために、サーバアプリケーション234がブラウザ212から受信したクッキークエリトークンを確率的データ構造と比較し得る。サーバアプリケーション234は、クッキークエリトークンを確率的データ構造と比較し、データベースに一致するクッキークエリトークンがあるかどうかに関して、バイナリのはい、またはいいえの回答を決定し得る。はいの回答は、識別子データベース236に一致する記憶されたクッキークエリトークンが存在する可能性が高いことに対応し得、一方、いいえの回答は、識別子データベース236に一致するクッキークエリトークンが存在しないことに対応し得る。 In some implementations, the stored cookie query token may be associated with a probabilistic data structure (eg, a Bloom filter) similar to the probabilistic data structure described above. Server application 234 may compare the cookie query token that server application 234 receives from browser 212 to a probabilistic data structure to determine if there is a matching stored cookie query token in identifier database 236. Server application 234 may compare the cookie query token to a probabilistic data structure and determine a binary yes or no answer as to whether there is a matching cookie query token in the database. A yes answer may correspond to a high probability that there is a matching stored cookie query token in the identifier database 236, whereas a no answer indicates that there is no matching cookie query token in the identifier database 236. can correspond to
サーバアプリケーション234は、ブラウザ212を介してクライアントデバイス202からクッキークエリトークンを受信し、クッキークエリトークンがデータベースに記憶された任意の記憶されたクッキークエリトークンと一致するかどうかを決定し得る。サーバアプリケーション234は、識別子データベース236内に一致する記憶されたクッキークエリトークンがあるかどうかを決定するために、クッキークエリトークンを識別子データベース236内のルックアップテーブルの記憶されたクッキークエリトークンと比較し得る。一致する記憶されたクッキークエリトークンがある場合、それは、サーバアプリケーション234が、ブラウザ212に関連付けられるクッキーを通じてブラウザ212に関するデータを収集したことを示し得る。そのような場合、サーバアプリケーション234は、一致するクッキークエリトークンが存在することを確認し、識別子データベース236のルックアップテーブルの記憶されたクッキークエリトークンとクッキークエリトークンを比較することによって、一致するクッキークエリトークンに関連付けられるクッキーの値および/またはドメインを識別し得る。 Server application 234 may receive the cookie query token from client device 202 via browser 212 and determine whether the cookie query token matches any stored cookie query token stored in the database. Server application 234 compares the cookie query token to the stored cookie query token in the lookup table in identifier database 236 to determine whether there is a matching stored cookie query token in identifier database 236. obtain. If there is a matching stored cookie query token, it may indicate that server application 234 has collected data about browser 212 through cookies associated with browser 212. In such a case, the server application 234 verifies that a matching cookie query token exists and identifies the matching cookie query token by comparing the cookie query token to the stored cookie query token in the lookup table of the identifier database 236. A cookie value and/or domain associated with the query token may be identified.
サーバアプリケーション234が一致するクッキークエリトークンがあることを確認した場合、サーバアプリケーション234は、ルックアップテーブルから一致するクッキークエリトークンに関連付けられるクッキーの値を識別することができる。サーバアプリケーション234は、サーバアプリケーション234がブラウザ212に関連するデータを収集および記憶した1つまたは複数の特性を識別するために、クッキーの値を第2のデータベース(たとえば、特性データベース238)と比較することができる。1つまたは複数の特性は、特性データベース238内のルックアップテーブルに記憶され、サーバアプリケーション234がブラウザ212に関して収集したデータの異なるカテゴリに編成され得る。たとえば、サーバアプリケーション234は、ニュースのウェブサイト上、エンターテインメントのウェブサイト上、広告主のウェブサイト上などにおいてブラウザ212の動作を示すブラウザ212に関連付けられるデータを収集し得る。サーバアプリケーション234は、サーバアプリケーション234がクライアントデバイス202に関するデータおよび/またはサーバアプリケーション234が収集したデータのカテゴリのリスト(たとえば、1つまたは複数の特性)を収集したかどうかを示すブール応答を含む信号をブラウザ212に送り返すことができる。 If the server application 234 determines that there is a matching cookie query token, the server application 234 can identify the cookie value associated with the matching cookie query token from the lookup table. Server application 234 compares the value of the cookie to a second database (e.g., characteristics database 238) to identify one or more characteristics for which server application 234 has collected and stored data related to browser 212. be able to. One or more characteristics may be stored in lookup tables within characteristics database 238 and organized into different categories of data that server application 234 collects about browser 212. For example, server application 234 may collect data associated with browser 212 indicating the behavior of browser 212 on news websites, entertainment websites, advertiser websites, etc. Server application 234 receives a signal that includes a Boolean response indicating whether server application 234 has collected data about client device 202 and/or a list of categories of data (e.g., one or more characteristics) that server application 234 has collected. can be sent back to the browser 212.
悪意のあるパーティが、サーバアプリケーション234がブラウザ212に送信する信号においてサーバアプリケーション234からの情報を傍受および/または確認しないことを確実にするために、サーバアプリケーション234は、様々な技法を使用して信号を暗号化し得る。サーバアプリケーション234は、応答を固定長に埋めることができるので、悪意のあるパーティは、サーバアプリケーション234が収集した可能性のあるデータの量を決定できない可能性がある。さらに、サーバアプリケーション234は、HTTPSプロトコルを使用して信号を保護し得る。サーバアプリケーション234は、暗号化鍵として上記のルックアップテーブルからのクッキー値およびドメインを使用して、対称鍵アルゴリズム(たとえば、AES)で信号を暗号化し得る。サーバアプリケーション234はまた、対称鍵暗号化技法を適用する前に、応答にタイムスタンプを含めることができる。 To ensure that a malicious party does not intercept and/or see information from server application 234 in the signals that server application 234 sends to browser 212, server application 234 uses various techniques. The signal may be encrypted. Because server application 234 can pad responses to a fixed length, a malicious party may not be able to determine the amount of data that server application 234 may have collected. Additionally, server application 234 may use the HTTPS protocol to secure the signal. Server application 234 may encrypt the signal with a symmetric key algorithm (eg, AES) using the cookie value and domain from the lookup table described above as the encryption key. Server application 234 may also include a timestamp in the response before applying symmetric key encryption techniques.
次に図3を参照すると、いくつかの実装形態による、安全な識別情報検索のための方法300のフローチャートが示されている。方法300は、任意の数の動作を含むことができる。動作は任意の順序で実行することができる。方法300は、サーバデバイス(たとえば、コンテンツサーバ218)によって実行することができる。動作302において、サーバデバイスは、周期変数の値を検索することができる。周期変数は、設定された周波数または変化する周波数において継続的に変化する値を有する変数にすることができる。たとえば、周期変数は、現在の日付、現在の時刻、ニューヨーク証券取引所の終値での様々な株式の株価、増分カウンタに基づいて決定されたナンス値などであり得る。周期変数に応じて、サーバデバイスは、サーバデバイス内のデータベースに値を記憶してもよく、別のソース(たとえば、ニューヨーク証券取引所の株価の値を記憶するデータベース)から値を取得してもよい。 Referring now to FIG. 3, a flowchart of a method 300 for secure identity retrieval is shown, according to some implementations. Method 300 can include any number of acts. Operations can be performed in any order. Method 300 can be performed by a server device (eg, content server 218). At act 302, the server device may retrieve the value of the periodic variable. A periodic variable can be a variable that has a continuously changing value at a set frequency or a changing frequency. For example, the periodic variable may be the current date, the current time, the stock prices of various stocks at the closing price of the New York Stock Exchange, a nonce value determined based on an incremental counter, and so on. Depending on the periodic variable, the server device may store the value in a database within the server device or retrieve the value from another source (for example, a database that stores stock price values on the New York Stock Exchange). good.
動作304において、サーバデバイスは、複数のクエリトークンを計算することができる。サーバデバイスは、クライアントデバイスごとの連結識別子を取得するために、周期変数の値を識別し、サーバデバイスに情報が記憶されている任意のクライアントデバイス識別番号の末尾に値を連結することによって、複数のクエリトークンを計算することができる。サーバデバイスは、複数のクエリトークンを取得するために、各クライアントデバイスに関連付けられる連結識別子に対して一方向ハッシュなどの暗号化技法を実行することができる。いくつかの実装形態では、サーバデバイスは、第2の複数のクエリトークンを計算することができる。第2の複数のクエリトークンは、複数のクエリトークンと同じクライアントデバイスに関連付けられているが、異なる周期変数値に基づくクエリトークンを含むことができる。 At act 304, the server device may calculate multiple query tokens. The server device obtains a concatenated identifier for each client device by identifying the value of the periodic variable and concatenating the value to the end of any client device identification number for which information is stored on the server device. query token can be calculated. The server device may perform cryptographic techniques, such as one-way hashing, on the concatenated identifier associated with each client device to obtain multiple query tokens. In some implementations, the server device can calculate a second plurality of query tokens. The second plurality of query tokens can include query tokens that are associated with the same client device as the plurality of query tokens but are based on different periodic variable values.
動作306において、サーバデバイスは、複数のクエリトークンの各々に関連付けられ得る確率的データ構造を生成することができる。複数のクエリトークンは、サーバデバイスのデータベースに記憶され得る。サーバデバイスは、設定された間隔を含め、いつでもデータベースにクエリトークンを追加および/またはデータベースから削除し得る。確率的データ構造は、いくつかの実装形態では、クエリトークンがある程度確実にデータベースに存在するか、データベースに確実に存在しないかを示すブルームフィルタであり得る。 At act 306, the server device can generate a probabilistic data structure that can be associated with each of the plurality of query tokens. Multiple query tokens may be stored in a database of the server device. The server device may add and/or delete query tokens from the database at any time, including at configured intervals. The probabilistic data structure, in some implementations, may be a Bloom filter that indicates whether the query token is more or less certain to exist in the database or more or less certain to not be in the database.
動作308において、サーバデバイスは、クライアントデバイスから第1のクエリトークンを受信することができる。クライアントデバイスは、サーバデバイスが複数のクエリトークンの各々を計算するために使用するのと同じまたは同様の技法を使用して、第1のクエリトークンを生成し得る。第1のクエリトークンは、クライアントデバイスのデバイス識別子に関連付けられ得る。クライアントデバイスは、周期変数の値を検索することによって第1のクエリトークンを計算し、その値を連結されたデバイス識別子を取得するためにデバイス識別子と連結し得る。クライアントデバイスは、第1のクエリトークンを取得するために、連結されたデバイス識別子に対して暗号化技法を使用することによって、連結されたデバイス識別子から第1のクエリトークンを計算し得る。暗号化技法は、サーバデバイスが複数のクエリトークンの各々を取得するために実行するのと同じ暗号化技法であり得る。クライアントデバイスは、サーバデバイスがクライアントデバイスに関する情報を有しているかどうかを決定するために、クエリにおいて第1のクエリトークンをサーバデバイスに送信し得る。いくつかの実装形態では、クエリを送信する前に、クライアントデバイスが秘密鍵を使用してクエリに署名する場合がある。 At act 308, the server device can receive a first query token from the client device. The client device may generate the first query token using the same or similar techniques that the server device uses to calculate each of the plurality of query tokens. The first query token may be associated with a device identifier of the client device. The client device may compute the first query token by retrieving the value of the periodic variable and concatenate the value with the device identifier to obtain a concatenated device identifier. The client device may calculate a first query token from the concatenated device identifiers by using cryptographic techniques on the concatenated device identifiers to obtain the first query token. The encryption technique may be the same encryption technique that the server device performs to obtain each of the plurality of query tokens. The client device may send a first query token to the server device in a query to determine whether the server device has information about the client device. In some implementations, the client device may sign the query using a private key before sending the query.
動作310において、サーバデバイスは、サーバデバイスが、サーバデバイスのデータベース内の第1のクエリトークンと一致するクエリトークンを有するかどうかを決定することができる。サーバデバイスは、第1のクエリトークンをデータベースのデータ構造と比較することができる。サーバデバイスが、第1のクエリトークンと一致する(たとえば、同じ文字列を有する)データ構造内のクエリトークンを識別しない場合、サーバデバイスは、データベース内のクエリを実行しているクライアントデバイスの一致するクエリトークンがないと決定し得る。その結果、動作312において、サーバデバイスは、一致が見つからなかったことを示す信号をクライアントデバイスに送信し得る。 At act 310, the server device may determine whether the server device has a query token that matches the first query token in the server device's database. The server device may compare the first query token to data structures in the database. If the server device does not identify a query token in the data structure that matches (e.g., has the same string) the first query token, the server device identifies the query token in the database that matches the client device performing the query. It may be determined that there is no query token. As a result, in act 312, the server device may send a signal to the client device indicating that no match was found.
しかしながら、サーバデバイスが第1のクエリトークンと一致するデータ構造内のクエリトークンを識別した場合、サーバデバイスはデータベース内のクエリを実行しているクライアントデバイスのクエリトークンに一致するクエリトークンがあると決定し得る。その結果、動作314において、サーバデバイスは、第2のクエリトークンを識別し得る。第2のクエリトークンから、サーバデバイスは要求を行っているクライアントデバイスのデバイス識別子を識別し得る。 However, if the server device identifies a query token in the data structure that matches the first query token, the server device determines that there is a query token that matches the query token of the client device performing the query in the database. It is possible. As a result, in operation 314, the server device may identify the second query token. From the second query token, the server device may identify the device identifier of the client device making the request.
動作316において、サーバデバイスは、クライアントデバイスの特性を記憶する第2のデータベースから、クライアントデバイスの1つまたは複数の特性を検索し得る。1つまたは複数の特性は、サーバデバイスが収集したデバイスに関するデータ(たとえば、地理的位置、訪問されたウェブページ、訪問されたウェブページのコンテンツなど)であり得る。サーバデバイスは、クライアントデバイスの公開暗号化鍵を取得するために、クライアントデバイスのデバイス識別子を第2のデータベースのデータ構造と比較し得る。サーバデバイスは、デジタル署名に基づいてデバイス識別子に関連付けられるクライアントデバイスからクエリが受信されたことを確認するために、公開鍵を使用し得る。 At act 316, the server device may retrieve one or more characteristics of the client device from a second database that stores characteristics of the client device. The one or more characteristics may be data about the device collected by the server device (eg, geographic location, visited web pages, content of visited web pages, etc.). The server device may compare the client device's device identifier to the data structure of the second database to obtain the client device's public encryption key. A server device may use the public key to verify that a query was received from a client device that is associated with a device identifier based on the digital signature.
動作318において、サーバデバイスは、クライアントデバイスからのクエリに対する回答における1つまたは複数の特性を暗号化するために、公開鍵を使用し得る。暗号化された回答は、サーバデバイスが回答、ナンス、およびタイムスタンプを連結することによって計算する連結された値を含み得る。回答は、バイナリ値(たとえば、サーバデバイスがクライアントデバイスのデータを収集したかどうか)、および/またはサーバデバイスがクライアントデバイスに関して収集した様々なカテゴリのユーザデータ(たとえば、1つまたは複数の特性)の識別を含み得る。動作320において、サーバデバイスは、1つまたは複数の特性をクライアントデバイスに送信し得る。クライアントデバイスは、デジタル署名に基づくクライアントデバイスの秘密鍵を使用して、暗号化された回答を復号化し得る。 At act 318, the server device may use the public key to encrypt one or more characteristics in the answer to the query from the client device. The encrypted answer may include a concatenated value that the server device calculates by concatenating the answer, nonce, and timestamp. The answer may be a binary value (e.g., whether the server device collected data for the client device) and/or a number of different categories of user data (e.g., one or more characteristics) that the server device collected about the client device. May include identification. At act 320, the server device may send one or more characteristics to the client device. The client device may decrypt the encrypted answer using the client device's private key based on the digital signature.
有利なことに、コンテンツサーバからの識別を要求するコンピューティングデバイスのデバイス識別子に関連付けられるクエリトークンを計算することによって、コンピューティングデバイスは、デバイスがコンテンツサーバにクエリを実行するときに、それらに関するデータをまだ有していないコンテンツサーバから匿名のままである可能性がある。本明細書で提供されるシステムおよび方法は、デバイスのデバイス識別子を送信せずにコンテンツサーバにクエリを送信することによって、コンテンツサーバがクエリを実行するデバイスに関する情報を有するかどうかを決定するために、デバイスがコンテンツサーバにクエリを実行することを可能にする。代わりに、デバイスは、暗号化技法(たとえば、一方向暗号化技法)を使用してクエリトークンを計算し、クエリトークンをコンテンツサーバに送信し得る。クエリトークンには一時的な暗号化された値(たとえば、タイムスタンプまたは現在の日付)を含み得るため、コンテンツサーバはクエリトークンに基づいてクエリデバイスについて何も識別することができない。コンテンツサーバは、クエリトークンを生成するために使用される暗号化技法を知っている場合があり、同様に、コンテンツサーバが記憶したデバイス識別子に対応する記憶されたクエリトークンを計算し得る。したがって、クエリトークンは一方向暗号化技法を使用して計算される可能性があるため、コンテンツサーバは、デバイス識別子がまだわかっていない場合、クエリを実行するデバイスのデバイス識別子を識別できずに、クエリを実行するデバイスに関するデータを有するかどうかのみを識別することができる。さらに、デバイスとコンテンツサーバ間の通信が暗号化される可能性があるため、悪意のあるパーティがコンテンツサーバに関するデータを識別できない可能性がある。 Advantageously, by computing a query token that is associated with the device identifier of a computing device requesting identification from a content server, the computing device can retrieve data about them when the device queries the content server. It is possible to remain anonymous from content servers that do not yet have . The systems and methods provided herein determine whether a content server has information about a querying device by sending a query to a content server without transmitting the device's device identifier. , allows devices to query content servers. Alternatively, the device may calculate the query token using cryptographic techniques (eg, one-way cryptographic techniques) and send the query token to the content server. Because the query token may include a temporary encrypted value (eg, a timestamp or current date), the content server cannot identify anything about the query device based on the query token. The content server may be aware of the cryptographic techniques used to generate the query token, and may similarly calculate a stored query token that corresponds to the device identifier stored by the content server. Therefore, because the query token may be computed using one-way encryption techniques, the content server cannot identify the device identifier of the device performing the query if the device identifier is not already known. It can only identify whether it has data about the device performing the query. Additionally, communications between the device and the content server may be encrypted, so a malicious party may not be able to identify data about the content server.
本明細書に記載のシステムがユーザまたはユーザデバイスにインストールされたアプリケーションに関する個人情報を収集する、または個人情報を利用する状況では、ユーザには、プログラムまたは機能がユーザ情報(たとえば、ユーザのソーシャルネットワーク、ソーシャルアクション、またはアクティビティ、職業、ユーザの嗜好、あるいはユーザの現在地に関する情報)を収集するかどうかを制御する機会が提供される場合がある。さらに、特定のデータは、記憶または使用される前に1つまたは複数の方法で処理されるため、個人情報が削除される場合がある。たとえば、ユーザの個人を識別できる情報を特定できないようにユーザのIDが処理されてもよく、ユーザの特定の位置を決定できないように、位置情報が取得されるユーザの地理的位置(都市、郵便番号、州レベルなど)が一般化されてもよい。したがって、ユーザは、ユーザに関する情報がどのように収集され、コンテンツサーバによって使用されるかを制御し得る。 In situations where the systems described herein collect or make use of personal information about users or applications installed on a user's device, the user may have a program or feature that collects or utilizes personal information about the user or applications installed on the user's device. , social actions, or activities, occupation, user preferences, or information about the user's current location). Additionally, certain data may be processed in one or more ways before it is stored or used so that personal information may be removed. For example, a user's ID may be processed so that no personally identifiable information about the user can be determined, and the user's geographic location (city, postal address, number, state level, etc.) may be generalized. Thus, the user may control how information about the user is collected and used by the content server.
本明細書に記載されている主題および動作の実装形態は、デジタル電子回路、あるいは本明細書に開示されている構造およびそれらの構造的同等物を含むコンピュータソフトウェア、ファームウェア、またはハードウェアにおいて、あるいはそれらの1つまたは複数の組合せにおいて実装することができる。本明細書に記載されている主題の実装形態は、1つまたは複数のコンピュータプログラム、すなわち、データ処理装置による実行のために、またはデータ処理装置の動作を制御するために1つまたは複数のコンピュータストレージ媒体上に符号化されたコンピュータプログラム命令の1つまたは複数のモジュールとして実装することができる。あるいは、またはさらに、プログラム命令は、データ処理装置による実行のために適切な受信機装置に送信するための情報を符号化するために生成される、人工的に生成された伝搬信号、たとえば、機械生成の電気、光、または電磁信号に符号化することができる。コンピュータストレージ媒体は、コンピュータ可読ストレージデバイス、コンピュータ可読ストレージ基板、ランダムまたはシリアルアクセスメモリアレイまたはデバイス、あるいはそれらの1つまたは複数の組合せであるか、またはそれらに含まれ得る。さらに、コンピュータストレージ媒体は伝搬信号ではないが、コンピュータストレージ媒体は、人工的に生成された伝搬信号に符号化されたコンピュータプログラム命令のソースまたは宛先であり得る。コンピュータストレージ媒体はまた、1つまたは複数の別個のコンポーネントまたは媒体(たとえば、複数のCD、ディスク、または他のストレージデバイス)であるか、またはそれらに含まれ得る。したがって、コンピュータストレージ媒体は有形である可能性がある。 The subject matter and acts described herein may be implemented in digital electronic circuits, or in computer software, firmware, or hardware that includes the structures disclosed herein and structural equivalents thereof; Can be implemented in one or more combinations thereof. Implementations of the subject matter described herein may include one or more computer programs, i.e., one or more computer programs for execution by or for controlling the operation of a data processing device. It may be implemented as one or more modules of computer program instructions encoded on a storage medium. Alternatively, or in addition, the program instructions may include an artificially generated propagated signal, e.g., a mechanical The generated electrical, optical, or electromagnetic signals can be encoded. The computer storage medium may be or include a computer readable storage device, a computer readable storage substrate, a random or serial access memory array or device, or a combination of one or more thereof. Additionally, although a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination for computer program instructions encoded in an artificially generated propagated signal. Computer storage media can also be or included in one or more separate components or media (eg, multiple CDs, disks, or other storage devices). Accordingly, computer storage media may be tangible.
本明細書に記載されている動作は、1つまたは複数のコンピュータ可読ストレージデバイスに記憶されているか、または他のソースから受信されたデータに対してデータ処理装置によって実行される動作として実装することができる。 The operations described herein may be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources. Can be done.
「クライアント」または「サーバ」という用語は、プログラム可能なプロセッサ、コンピュータ、チップ上のシステム、または複数のもの、あるいは前述の組合せなど、データを処理するためのあらゆる種類の装置、デバイス、およびマシンを含む。装置は、たとえば、FPGA(フィールドプログラマブルゲートアレイ)またはASIC(特定用途向け集積回路)などの専用論理回路を含むことができる。装置はまた、ハードウェアに加えて、問題のコンピュータプログラムの実行環境を作成するコード、たとえば、プロセッサファームウェア、プロトコルスタック、データベース管理システム、オペレーティングシステム、クロスプラットフォームランタイム環境、仮想マシン、あるいはそれらの1つまたは複数の組合せを構成するコードを含むことができる。装置および実行環境は、ウェブサービス、分散コンピューティングおよびグリッドコンピューティングインフラストラクチャなど、様々な異なるコンピューティングモデルインフラストラクチャを実現することができる。 The term "client" or "server" refers to any kind of apparatus, device, and machine for processing data, such as a programmable processor, computer, system on a chip, or any combination of the foregoing. include. The device may include dedicated logic circuitry, such as an FPGA (Field Programmable Gate Array) or an ASIC (Application Specific Integrated Circuit), for example. In addition to the hardware, the device also includes the code that creates the execution environment for the computer program in question, such as processor firmware, protocol stacks, database management systems, operating systems, cross-platform runtime environments, virtual machines, or one of these. Or it can include codes that constitute multiple combinations. The devices and execution environments can implement a variety of different computing model infrastructures, such as web services, distributed computing, and grid computing infrastructures.
コンピュータプログラム(プログラム、ソフトウェア、ソフトウェアアプリケーション、スクリプト、またはコードとも呼ばれる)は、コンパイラ型またはインタプリタ型言語、宣言型または手続き型言語を含む、あらゆる形式のプログラミング言語で記述することができ、スタンドアロンプログラムとして、またはモジュール、コンポーネント、サブルーチン、オブジェクト、またはコンピューティング環境における使用に適した他のユニットとして、を含む、あらゆる形式で展開することができる。コンピュータプログラムは、ファイルシステム内のファイルに対応する場合があるが、対応する必要はない。プログラムは、他のプログラムまたはデータを保持するファイルの一部(たとえば、マークアップ言語ドキュメントに記憶された1つまたは複数のスクリプト)、問題のプログラム専用の単一のファイル、あるいは複数の調整されたファイル(たとえば、1つまたは複数のモジュール、サブプログラム、またはコードの一部を記憶するファイル)に記憶することができる。コンピュータプログラムは、1台のコンピュータ、または1つのサイトに配置されているか、複数のサイトに分散され、通信ネットワークによって相互接続されている複数のコンピュータで実行されるように展開することができる。 A computer program (also called a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and as a stand-alone program. , or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to files within a file system. A program can be part of a file that holds other programs or data (for example, one or more scripts stored in a markup language document), a single file dedicated to the program in question, or a collection of multiple tailored Can be stored in a file (e.g., a file that stores one or more modules, subprograms, or portions of code). A computer program can be deployed to run on a single computer or on multiple computers located at one site or distributed across multiple sites and interconnected by a communications network.
本明細書に記載のプロセスおよび論理フローは、入力データを動作して出力を生成することによってアクションを実行するために、1つまたは複数のコンピュータプログラムを実行する1つまたは複数のプログラム可能なプロセッサによって実行することができる。プロセスおよび論理フローはまた、FPGA(フィールドプログラマブルゲートアレイ)またはASIC(特定用途向け集積回路)などの専用論理回路によって実行することができ、装置はそれらとして実装することができる。 The processes and logic flows described herein involve one or more programmable processors executing one or more computer programs to perform actions by operating on input data and producing output. It can be executed by The processes and logic flows can also be performed by, and the device can be implemented as, dedicated logic circuits such as FPGAs (Field Programmable Gate Arrays) or ASICs (Application Specific Integrated Circuits).
コンピュータプログラムの実行に適したプロセッサは、汎用マイクロプロセッサと専用マイクロプロセッサの両方、および任意の種類のデジタルコンピュータの任意の1つまたは複数のプロセッサを含む。一般に、プロセッサは読取り専用メモリまたはランダムアクセスメモリ、あるいはその両方から命令およびデータを受信する。コンピュータの本質的な要素は、命令に従ってアクションを実行するためのプロセッサと、命令およびデータを記憶するための1つまたは複数のメモリデバイスである。一般に、コンピュータはまた、データを記憶するための1つまたは複数の大容量ストレージデバイス、たとえば、磁気、光磁気ディスク、または光ディスクを含むか、そこからデータを受信するか、またはそこにデータを転送するか、あるいはその両方を行うために動作可能に結合される。しかしながら、コンピュータにそのようなデバイスが必要なわけではない。さらに、コンピュータは、別のデバイス、たとえば、ほんの数例を挙げると、モバイル電話、携帯情報端末(PDA)、モバイルオーディオまたはビデオプレーヤ、ゲームコンソール、全地球測位システム(GPS)受信機、またはポータブルストレージデバイス(たとえば、ユニバーサルシリアルバス(USB)フラッシュドライブ)に組み込むことができる。コンピュータプログラム命令およびデータを記憶するために適したデバイスには、半導体メモリデバイス、たとえば、EPROM、EEPROM、およびフラッシュメモリデバイスを含む、すべての形態の不揮発性メモリ、メディアおよびメモリデバイス、磁気ディスク、たとえば、内蔵ハードディスクまたはリムーバブルディスク、光磁気ディスク、ならびにCD-ROMおよびDVD-ROMディスクが含まれる。プロセッサおよびメモリは、専用論理回路によって補完されてもよく、それに組み込まれてもよい。 Processors suitable for the execution of a computer program include both general and special purpose microprocessors, and any one or more processors of any type of digital computer. Generally, a processor receives instructions and data from read-only memory and/or random access memory. The essential elements of a computer are a processor for performing actions according to instructions and one or more memory devices for storing instructions and data. Generally, a computer also includes one or more mass storage devices for storing data, receiving data from, or transferring data to, for example, magnetic, magneto-optical, or optical disks. and/or operably coupled to do so. However, computers do not require such devices. Additionally, the computer may be connected to another device, such as a mobile phone, personal digital assistant (PDA), mobile audio or video player, game console, Global Positioning System (GPS) receiver, or portable storage device, to name just a few. Can be integrated into a device (for example, a Universal Serial Bus (USB) flash drive). Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including semiconductor memory devices such as EPROM, EEPROM, and flash memory devices, magnetic disks, such as , internal hard disks or removable disks, magneto-optical disks, and CD-ROM and DVD-ROM disks. The processor and memory may be supplemented by or incorporated in dedicated logic circuitry.
ユーザとの対話を提供するために、本明細書に記載されている主題の実装形態は、たとえば、CRT(陰極線管)、LCD(液晶ディスプレイ)、OLED(有機発光ダイオード)、TFT(薄膜トランジスタ)、プラズマなどのディスプレイデバイス、他の柔軟な構成、あるいは、ユーザに情報を表示するためのその他のモニタ、およびユーザがコンピュータに入力を提供できるキーボード、ポインティングデバイス、たとえばマウス、トラックボールなど、またはタッチスクリーン、タッチパッドなどを備えたコンピュータに実装することができる。ユーザとの対話を提供するために、他の種類のデバイスも使用することができる。ユーザに提供されるフィードバックは、視覚的フィードバック、聴覚的フィードバック、または触覚的フィードバックなど、あらゆる形態の感覚的フィードバックであり得、ユーザからの入力は、音響、音声、または触覚入力を含む任意の形式で受信することができる。さらに、コンピュータは、ユーザによって使用されるデバイスとの間でドキュメントを送受信することによって、ウェブブラウザから受信した要求に応答して、ユーザのコンピューティングデバイス上のウェブブラウザにウェブページを送信することによって、ユーザと対話することができる。 To provide user interaction, implementations of the subject matter described herein can be implemented using, for example, CRTs (Cathode Ray Tubes), LCDs (Liquid Crystal Displays), OLEDs (Organic Light Emitting Diodes), TFTs (Thin Film Transistors), A display device such as a plasma, other flexible configuration, or other monitor for displaying information to the user, and a keyboard, pointing device, such as a mouse, trackball, etc., or touch screen, that allows the user to provide input to the computer. , a touchpad, etc. Other types of devices can also be used to provide user interaction. The feedback provided to the user may be any form of sensory feedback, such as visual, auditory, or tactile feedback, and the input from the user may be any form including acoustic, audio, or tactile input. can be received at Additionally, the computer may send and receive documents to and from the device used by the user, by sending web pages to the web browser on the user's computing device in response to requests received from the web browser, and by sending web pages to the web browser on the user's computing device. , can interact with the user.
本明細書に記載されている主題の実装形態は、データサーバなどのバックエンドコンポーネントを含む、あるいはアプリケーションサーバなどのミドルウェアコンポーネントを含む、あるいは、たとえばユーザが本明細書に記載されている主題の実装形態と対話することができるグラフィカルユーザインターフェースまたはウェブブラウザを備えたクライアントコンピュータなどのフロントエンドコンポーネントを含む、あるいは1つまたは複数のそのようなバックエンド、ミドルウェア、またはフロントエンドコンポーネントの任意の組合せを含むコンピューティングシステムにおいて実装することができる。システムのコンポーネントは、たとえば、通信ネットワークなどのデジタルデータ通信の任意の形式または媒体によって相互接続することができる。通信ネットワークは、ローカルエリアネットワーク(「LAN」)およびワイドエリアネットワーク(「WAN」)、ネットワーク間(たとえば、インターネット)、およびピアツーピアネットワーク(たとえば、アドホックピアツーピアネットワーク)を含み得る。 Implementations of the subject matter described herein may include back-end components, such as a data server, or may include middleware components, such as an application server, or may include, for example, a user implementing the subject matter described herein. includes a front-end component, such as a client computer with a graphical user interface or web browser capable of interacting with the form, or includes any combination of one or more such back-end, middleware, or front-end components Can be implemented in a computing system. The components of the system may be interconnected by any form or medium of digital data communication, such as, for example, a communications network. Communication networks may include local area networks (“LANs”) and wide area networks (“WANs”), inter-networks (eg, the Internet), and peer-to-peer networks (eg, ad hoc peer-to-peer networks).
本明細書には多くの特定の実装形態の詳細が含まれているが、これらは発明の範囲または主張される可能性のあるものの制限として解釈されるべきではなく、特定の発明の特定の実装形態に固有の機能の説明として解釈されるべきである。本明細書において個別の実装形態の文脈において説明されている特定の機能は、単一の実装形態において組み合わせて実装することもできる。逆に、単一の実装形態の文脈において説明されている様々な機能は、複数の実装形態において個別に、または任意の適切なサブコンビネーションにおいて実装することもできる。さらに、特徴は、特定の組合せで作用するものとして上記で説明され、最初にそのように主張されても、主張された組合せからの1つまたは複数の特徴は、場合によっては組合せから切り出されてよく、主張された組合せは、サブコンビネーションまたはサブコンビネーションの変形に向けられ得る。 Although this specification contains details of many specific implementations, these should not be construed as limitations on the scope of the invention or what may be claimed; It should be interpreted as a description of form-specific function. Certain features that are described herein in the context of separate implementations can also be implemented in combination in a single implementation. Conversely, various features that are described in the context of a single implementation can also be implemented in multiple implementations individually or in any suitable subcombination. Furthermore, even if features are described above as operating in a particular combination and are initially claimed as such, one or more features from the claimed combination may in some cases be excised from the combination. Often, the claimed combination may be directed to subcombinations or variations of subcombinations.
同様に、動作は特定の順序で図面に示されているが、これは、望ましい結果を達成するために、そのような動作が示される特定の順序または連続した順序で実行されること、または図示されるすべての動作が実行されることを必要とするものとして理解されるべきではない。特定の状況では、マルチタスクと並列処理が有利な場合がある。さらに、上記の実装形態における様々なシステムコンポーネントの分離は、すべての実装形態においてそのような分離を必要とするものとして理解されるべきではなく、説明されたプログラムコンポーネントおよびシステムは、一般に、単一のソフトウェア製品に一緒に統合されるか、または複数のソフトウェア製品にパッケージ化することができることが理解されるべきである。 Similarly, although acts are shown in the drawings in a particular order, this does not mean that such acts may be performed in the particular order shown or in sequential order to achieve the desired results. It should not be understood as requiring that all operations performed be performed. Multitasking and parallel processing may be advantageous in certain situations. Furthermore, the separation of various system components in the implementations described above is not to be understood as requiring such separation in all implementations, and that the program components and systems described are generally integrated into a single It should be understood that software products may be integrated together or packaged into multiple software products.
したがって、主題の特定の実装形態が説明されてきた。他の実装形態は、以下の特許請求の範囲内にある。場合によっては、特許請求の範囲に記載されているアクションは、異なる順序で実行することができ、それでも所望の結果を達成することができる。さらに、添付の図面に示されているプロセスは、所望の結果を達成するために、必ずしも示されている特定の順序または連続した順序を必要としない。特定の実装形態では、マルチタスクまたは並列処理が利用され得る。 Accordingly, particular implementations of the subject matter have been described. Other implementations are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve the desired result. Furthermore, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desired results. Certain implementations may utilize multitasking or parallel processing.
102 シーケンス
104 クライアントデバイス
106 コンテンツサーバ
108 データベース
110 シーケンス
112 クライアントデバイス
114 コンテンツサーバ
116 データベース
200 システム
202 クライアントデバイス
204 プロセッサ
206 メモリ
208 変数レトリバ
210 クエリトークン計算機
212 ブラウザ
214 復号化器
216 ネットワーク
218 コンテンツサーバ
220 プロセッサ
222 メモリ
224 変数レトリバ
226 クエリトークン計算機
228 構造ジェネレータ
230 クエリトークンマッチャ
232 暗号化器
234 サーバアプリケーション
236 識別子データベース
238 特性データベース
300 方法
102 sequences
104 Client device
106 Content Server
108 Database
110 Sequence
112 Client device
114 Content Server
116 Database
200 systems
202 Client Device
204 processor
206 Memory
208 Variable Retriever
210 Query Token Calculator
212 Browser
214 Decoder
216 Network
218 Content Server
220 processor
222 Memory
224 Variable Retriever
226 Query Token Calculator
228 Structure Generator
230 query token matcher
232 Encryptor
234 Server Application
236 Identifier Database
238 Characteristics Database
300 ways
Claims (20)
サーバデバイスによって、周期変数の値を検索するステップと、
前記サーバデバイスによって、対応する複数のクライアントデバイス識別子および前記周期変数の前記値から複数のクエリトークンを計算するステップであって、各クエリトークンが第1のデータベースにおける対応するクライアントデバイス識別子に関連付けられる、ステップと、
第1のクライアントデバイスから前記サーバデバイスによって、前記第1のクライアントデバイスのクライアントデバイス識別子および前記周期変数の前記値から計算された第1のクエリトークンを受信するステップと、
前記サーバデバイスによって、前記第1のデータベースにおいて前記計算された複数のクエリトークンのうち、前記第1のクエリトークンと一致する第2のクエリトークンを識別するステップと、
前記識別に応答して、前記サーバデバイスによって、前記関連付けられるクライアントデバイス識別子を検索するステップと、
前記サーバデバイスによって、第2のデータベースから、前記関連付けられるクライアントデバイス識別子に従って前記第1のクライアントデバイスの1つまたは複数の特性を検索するステップと、
前記サーバデバイスによって前記クライアントデバイスに、前記検索された1つまたは複数の特性を送信するステップと
を備える、方法。 A method for secure identification information retrieval, comprising:
retrieving the value of the periodic variable by the server device;
calculating, by the server device, a plurality of query tokens from a plurality of corresponding client device identifiers and the value of the periodic variable, each query token being associated with a corresponding client device identifier in a first database; step and
receiving by the server device from a first client device a first query token calculated from a client device identifier of the first client device and the value of the periodic variable;
identifying, by the server device, a second query token among the plurality of calculated query tokens in the first database that matches the first query token;
retrieving, by the server device, the associated client device identifier in response to the identification;
retrieving, by the server device, one or more characteristics of the first client device from a second database according to the associated client device identifier;
transmitting the retrieved one or more characteristics by the server device to the client device.
前記サーバデバイスによって、前記第1のクエリトークンを前記確率的データ構造と比較するステップと
をさらに備え、
前記第2のクエリトークンを識別するステップが、前記確率的データ構造に一致する前記第1のクエリトークンに応答して実行される、請求項1に記載の方法。 generating, by the server device, a probabilistic data structure based on the calculated plurality of query tokens;
and comparing, by the server device, the first query token with the probabilistic data structure;
2. The method of claim 1, wherein identifying the second query token is performed in response to the first query token matching the probabilistic data structure.
前記検索された1つまたは複数の特性を送信するステップが、前記第1のクライアントデバイスの前記検索された公開暗号化鍵を用いて前記1つまたは複数の特性を暗号化するステップをさらに備える、請求項1に記載の方法。 retrieving the one or more characteristics of the first client device further comprises retrieving a public encryption key of the first client device from the second database;
Sending the retrieved one or more characteristics further comprises encrypting the one or more characteristics using the retrieved public encryption key of the first client device. The method according to claim 1.
前記サーバデバイスによって、前記第3のクエリトークンに対応する前記第1のデータベースにエントリが存在しないことを決定するステップと
をさらに備える、請求項1に記載の方法。 receiving by the server device from a second client device a third query token calculated from a client device identifier of the second client device and the value of the periodic variable;
2. The method of claim 1, further comprising: determining by the server device that there is no entry in the first database corresponding to the third query token.
前記検索された1つまたは複数の特性を送信するステップが、前記第2のドメインに関連付けられる前記サーバデバイスによって、前記第1のクッキー値および前記第1のドメイン識別子を用いて前記検索された1つまたは複数の特性を暗号化するステップをさらに備える、請求項12に記載の方法。 retrieving the associated client device identifier further comprises retrieving a first cookie value and a first domain identifier;
The step of transmitting the retrieved one or more characteristics includes, by the server device associated with the second domain, transmitting the retrieved one or more characteristics using the first cookie value and the first domain identifier. 13. The method of claim 12, further comprising encrypting one or more characteristics.
複数のクライアントデバイスの第1のクライアントデバイスと通信するネットワークインターフェースと、
複数のクエリトークンおよび対応する複数の関連付けられるクライアントデバイス識別子を備える第1のデータベースを記憶するメモリデバイス、ならびに前記複数のクライアントデバイス識別子および関連付けられるデバイス特性を備える第2のデータベースと、
周期変数の値を検索することと、
前記対応する複数のクライアントデバイス識別子および前記周期変数の前記値から前記複数のクエリトークンを計算することと、
前記第1のクライアントデバイスから前記ネットワークインターフェースを介して、前記第1のクライアントデバイスのクライアントデバイス識別子および前記周期変数の前記値から計算された第1のクエリトークンを受信することと、
前記第1のデータベースにおいて前記計算された複数のクエリトークンのうち、前記第1のクエリトークンと一致する第2のクエリトークンを識別することと、
前記識別に応答して、前記第1のデータベースから、前記関連付けられるクライアントデバイス識別子を検索することと、
前記第2のデータベースから、前記関連付けられるクライアントデバイス識別子に従って前記第1のクライアントデバイスの1つまたは複数の特性を検索することと、
前記ネットワークインターフェースを介して前記クライアントデバイスに、前記検索された1つまたは複数の特性を送信することと
を行うように構成されたプロセッサと
を備える、サーバデバイス。 A server device for secure identification information retrieval, comprising:
a network interface communicating with a first client device of the plurality of client devices;
a memory device storing a first database comprising a plurality of query tokens and a corresponding plurality of associated client device identifiers, and a second database comprising said plurality of client device identifiers and associated device characteristics;
searching for the value of a periodic variable;
calculating the plurality of query tokens from the corresponding plurality of client device identifiers and the value of the periodic variable;
receiving from the first client device via the network interface a first query token calculated from a client device identifier of the first client device and the value of the periodic variable;
identifying a second query token from the plurality of calculated query tokens in the first database that matches the first query token;
retrieving the associated client device identifier from the first database in response to the identification;
retrieving one or more characteristics of the first client device from the second database according to the associated client device identifier;
a processor configured to: transmit the retrieved one or more characteristics to the client device via the network interface.
前記計算された複数のクエリトークンに基づいて確率的データ構造を生成することと、
前記第1のクエリトークンを前記確率的データ構造と比較することと
を行うようにさらに構成され、
前記第2のクエリトークンを識別することが、前記確率的データ構造に一致する前記第1のクエリトークンに応答して実行される、請求項16に記載のシステム。 The processor,
generating a probabilistic data structure based on the calculated plurality of query tokens;
further configured to: compare the first query token with the probabilistic data structure;
17. The system of claim 16, wherein identifying the second query token is performed in response to the first query token matching the probabilistic data structure.
前記対応する複数のクライアントデバイス識別子および前記周期変数の以前の値から第2の複数のクエリトークンを計算するようにさらに構成され、前記第2の複数のクエリトークンが、前記対応するクライアントデバイス識別子に関連して前記第1のデータベースに記憶される、請求項16に記載のシステム。 The processor,
further configured to calculate a second plurality of query tokens from the corresponding plurality of client device identifiers and a previous value of the periodic variable, wherein the second plurality of query tokens correspond to the corresponding client device identifiers. 17. The system of claim 16, wherein the system is associated with and stored in the first database.
前記第1のデータベースから第3の複数のクエリトークン、前記複数のクライアントデバイス識別子から計算された前記第3の複数のクエリトークン、および前記周期変数の2回前の値を除去するようにさらに構成される、請求項18に記載のシステム。 The processor,
further configured to remove a third plurality of query tokens from the first database, the third plurality of query tokens calculated from the plurality of client device identifiers, and two previous values of the periodic variable. 19. The system of claim 18, wherein:
前記複数のクエリトークンのそれぞれについて、前記周期変数の前記値と前記対応するクライアントデバイス識別子との組合せの一方向ハッシュを計算するようにさらに構成される、請求項16に記載のシステム。 The processor,
17. The system of claim 16, further configured to calculate, for each of the plurality of query tokens, a one-way hash of a combination of the value of the periodic variable and the corresponding client device identifier.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
JP2023120733A JP2023162169A (en) | 2019-09-03 | 2023-07-25 | System and method for safe identification information search |
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
JP2022514227A JP7322283B2 (en) | 2019-09-03 | 2019-09-03 | Systems and methods for secure identity retrieval |
PCT/US2019/049333 WO2021045727A1 (en) | 2019-09-03 | 2019-09-03 | Systems and methods for secure identification retrieval |
JP2023120733A JP2023162169A (en) | 2019-09-03 | 2023-07-25 | System and method for safe identification information search |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
JP2022514227A Division JP7322283B2 (en) | 2019-09-03 | 2019-09-03 | Systems and methods for secure identity retrieval |
Publications (1)
Publication Number | Publication Date |
---|---|
JP2023162169A true JP2023162169A (en) | 2023-11-08 |
Family
ID=67989082
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
JP2022514227A Active JP7322283B2 (en) | 2019-09-03 | 2019-09-03 | Systems and methods for secure identity retrieval |
JP2023120733A Pending JP2023162169A (en) | 2019-09-03 | 2023-07-25 | System and method for safe identification information search |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
JP2022514227A Active JP7322283B2 (en) | 2019-09-03 | 2019-09-03 | Systems and methods for secure identity retrieval |
Country Status (6)
Country | Link |
---|---|
US (3) | US11310046B2 (en) |
EP (1) | EP4026289A1 (en) |
JP (2) | JP7322283B2 (en) |
KR (1) | KR20220059506A (en) |
CN (1) | CN114600421A (en) |
WO (1) | WO2021045727A1 (en) |
Families Citing this family (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP7322283B2 (en) * | 2019-09-03 | 2023-08-07 | グーグル エルエルシー | Systems and methods for secure identity retrieval |
CN117112549B (en) * | 2023-10-20 | 2024-03-26 | 中科星图测控技术股份有限公司 | Big data merging method based on bloom filter |
Family Cites Families (18)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10326798B2 (en) * | 1998-07-16 | 2019-06-18 | Grid7, LLC | System and method for secure data transmission and storage |
EP2020797B1 (en) * | 2007-08-02 | 2016-06-15 | Apple Inc. | Client-server Opaque token passing apparatus and method |
US9256686B2 (en) | 2008-09-15 | 2016-02-09 | International Business Machines Corporation | Using a bloom filter in a web analytics application |
US8528069B2 (en) | 2010-09-30 | 2013-09-03 | Microsoft Corporation | Trustworthy device claims for enterprise applications |
US20130080690A1 (en) * | 2011-09-23 | 2013-03-28 | William Brooks Barrett | Method to emulate eeprom using flash memory |
US9172687B2 (en) | 2012-12-28 | 2015-10-27 | Nok Nok Labs, Inc. | Query system and method to determine authentication capabilities |
US10445769B2 (en) | 2013-12-24 | 2019-10-15 | Google Llc | Systems and methods for audience measurement |
US10600076B2 (en) * | 2014-08-14 | 2020-03-24 | Google Llc | Systems and methods for obfuscated audience measurement |
CN105471826B (en) * | 2014-09-04 | 2019-08-20 | 中电长城网际系统应用有限公司 | Ciphertext data query method, apparatus and cryptogram search server |
US9679024B2 (en) * | 2014-12-01 | 2017-06-13 | Facebook, Inc. | Social-based spelling correction for online social networks |
US9342617B1 (en) | 2015-05-19 | 2016-05-17 | Parrable, Inc. | Unique identifiers for browsers |
CN108431819B (en) * | 2015-12-03 | 2021-06-08 | 奥卡交互有限公司 | Method and system for protecting client access to service of DRM agent of video player |
CN106230603B (en) * | 2016-09-19 | 2019-08-16 | 中国传媒大学 | A kind of authentication authority method |
US20180082284A1 (en) * | 2016-09-20 | 2018-03-22 | Paypal, Inc. | Processing a transaction using a multiple-use token |
JP6904857B2 (en) | 2017-08-31 | 2021-07-21 | キヤノン株式会社 | Delegation system, control method, and program |
US11558193B2 (en) * | 2018-08-13 | 2023-01-17 | Google Llc | Location-based access to controlled access resources |
WO2020163580A1 (en) * | 2019-02-06 | 2020-08-13 | Mastercard International Incorporated | Method and system for generation of a high assurance payment token |
JP7322283B2 (en) * | 2019-09-03 | 2023-08-07 | グーグル エルエルシー | Systems and methods for secure identity retrieval |
-
2019
- 2019-09-03 JP JP2022514227A patent/JP7322283B2/en active Active
- 2019-09-03 US US16/757,835 patent/US11310046B2/en active Active
- 2019-09-03 WO PCT/US2019/049333 patent/WO2021045727A1/en unknown
- 2019-09-03 CN CN201980101624.3A patent/CN114600421A/en active Pending
- 2019-09-03 EP EP19769957.2A patent/EP4026289A1/en active Pending
- 2019-09-03 KR KR1020227010944A patent/KR20220059506A/en not_active Application Discontinuation
-
2022
- 2022-03-21 US US17/699,434 patent/US11784817B2/en active Active
-
2023
- 2023-06-26 US US18/341,689 patent/US20230336351A1/en active Pending
- 2023-07-25 JP JP2023120733A patent/JP2023162169A/en active Pending
Also Published As
Publication number | Publication date |
---|---|
CN114600421A (en) | 2022-06-07 |
US11784817B2 (en) | 2023-10-10 |
US20230336351A1 (en) | 2023-10-19 |
WO2021045727A1 (en) | 2021-03-11 |
KR20220059506A (en) | 2022-05-10 |
US11310046B2 (en) | 2022-04-19 |
US20220209953A1 (en) | 2022-06-30 |
JP7322283B2 (en) | 2023-08-07 |
EP4026289A1 (en) | 2022-07-13 |
JP2022545847A (en) | 2022-10-31 |
US20210075614A1 (en) | 2021-03-11 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
Miao et al. | Lightweight fine-grained search over encrypted data in fog computing | |
CN109891424B (en) | Establishing links between identifiers without revealing specific identifying information | |
US9647836B2 (en) | Secure storage for shared documents | |
US10268834B2 (en) | Privacy-preserving querying mechanism on privately encrypted data on semi-trusted cloud | |
US11388006B2 (en) | Systems and methods for authenticated control of content delivery | |
US20230188507A1 (en) | Domain specific browser identifiers as replacement of browser cookies | |
JP2023162169A (en) | System and method for safe identification information search | |
US20230254126A1 (en) | Encrypted search with a public key | |
US10615965B1 (en) | Protected search index | |
CN110069946A (en) | A kind of Security Index system based on SGX | |
CN113287109A (en) | System and method for protecting device privacy |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
A521 | Request for written amendment filed |
Free format text: JAPANESE INTERMEDIATE CODE: A523Effective date: 20230824 |
|
A621 | Written request for application examination |
Free format text: JAPANESE INTERMEDIATE CODE: A621Effective date: 20230824 |