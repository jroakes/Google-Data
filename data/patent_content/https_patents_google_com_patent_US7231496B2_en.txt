US7231496B2 - Method, system and program product for caching data objects - Google Patents
Method, system and program product for caching data objects Download PDFInfo
- Publication number
- US7231496B2 US7231496B2 US10/662,539 US66253903A US7231496B2 US 7231496 B2 US7231496 B2 US 7231496B2 US 66253903 A US66253903 A US 66253903A US 7231496 B2 US7231496 B2 US 7231496B2
- Authority
- US
- United States
- Prior art keywords
- data objects
- cache
- discard
- rules
- log
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F12/00—Accessing, addressing or allocating within memory systems or architectures
- G06F12/02—Addressing or allocation; Relocation
- G06F12/08—Addressing or allocation; Relocation in hierarchically structured memory systems, e.g. virtual memory systems
- G06F12/12—Replacement control
- G06F12/121—Replacement control using replacement algorithms
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F12/00—Accessing, addressing or allocating within memory systems or architectures
- G06F12/02—Addressing or allocation; Relocation
- G06F12/08—Addressing or allocation; Relocation in hierarchically structured memory systems, e.g. virtual memory systems
- G06F12/0802—Addressing of a memory level in which the access to the desired data or data block requires associative addressing means, e.g. caches
- G06F12/0862—Addressing of a memory level in which the access to the desired data or data block requires associative addressing means, e.g. caches with prefetch
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2212/00—Indexing scheme relating to accessing, addressing or allocation within memory systems or architectures
- G06F2212/60—Details of cache memory
- G06F2212/6024—History based prefetching
Definitions
- a portal page is generated at a web “portal” server by portal server software (e.g., WebSphere Portal Server, which is commercially available from International Business Machines Corp. of Armonk, N.Y.).
- portal server software e.g., WebSphere Portal Server, which is commercially available from International Business Machines Corp. of Armonk, N.Y.
- a portal page typically includes sections or visual portlets that each contain certain content formatted according to a user's preferences. For example, a user could establish his/her own portal page that has sections for news, weather and sports.
- the portal server would obtain the desired content from the appropriate content providers. Once obtained, the content would be aggregated for display in the appropriate sections as a portal web page.
- This portal technology has lead to the explosion of personalized “home” pages for individual web users.
- a need for a method, system and program product for caching data objects there exists a need for a method, system and program product for caching data objects. Specifically, a need exists for a system that can leverage data object caching so that latency in data delivery is minimized or eliminated. A further need exists for the caching of data objects to be controlled by refresh and discard rules so that the cache is continually optimized.
- the present invention provides a method, system and program product for caching data objects.
- a history of requests for data objects are tracked and maintained in a cache log. Based on the history, certain data objects are prefetched into a cache. When a request for a cached data object is later received, the requested data object can be retrieved from the cache and served to the requesting user. Thus, the latency involved with obtaining the data objects from the appropriate sources is eliminated.
- discard and refresh rules are assigned to each data object on a class basis. Accordingly, data objects in the cache can be refreshed and/or discarded so that the caching operation can be optimized.
- a first aspect of the present invention provides a method for caching data objects, comprising: providing a cache having a cache log for the data objects; assigning discard rules to the data objects on a class basis; predicting needed data objects based on the cache log; prefetching the needed data objects into the cache; and discarding particular data objects from the cache based on the discard rules.
- a second aspect of the present invention provides a system for caching data objects, comprising: a logger for logging a history of requests for data objects in a cache log; a predictor for analyzing the cache log and prefetching needed data objects into a cache based on the history of requests; and a request analyzer for discarding data objects from the cache based on discard rules assigned to the data objects, wherein the discard rules are assigned to the data objects on a class basis.
- a third aspect of the present invention provides a program product stored on a recordable medium for caching data objects, which when executed, comprises: program code for logging a history of requests for data objects in a cache log; program code for analyzing the cache log and prefetching needed data objects into a cache based on the history of requests; and program code for discarding data objects from the cache based on discard rules assigned to the data objects, wherein the discard rules are assigned to the data objects on a class basis.
- the present invention provides a method, system and program product for caching data objects.
- FIG. 1 depicts a system for caching data objects, according to the present invention.
- FIG. 2 depicts an illustrative web portal page with shared data objects.
- FIG. 3 depicts the caching system of FIG. 1 , according to the present invention.
- FIG. 4 depicts a method flow diagram, according to the present invention.
- the present invention provides a method, system and program product for caching data objects.
- a history of requests for data objects are tracked and maintained in a cache log. Based on the history, certain data objects are prefetched into a cache. When a request for a cached data object is later received, the requested data object can be retrieved from the cache and served to the requesting user. Thus, the latency involved with obtaining the data objects from the appropriate sources is eliminated.
- discard and refresh rules are assigned to each data object on a class basis. Accordingly, data objects in the cache can be refreshed and/or discarded so that the caching operation can be optimized.
- server 14 could be an application server, portal server or the like.
- user 16 will operate client 12 to request data objects (e.g., in a web page).
- Server 14 will process the requests, obtain the necessary data objects from content sources 18 , generate markup language including the requested data objects, and serve the markup language to client 12 .
- client 12 can be any type of computerized device capable of communicating with server 14 .
- client 12 could be a personal computer, a hand held device, a cellular telephone, etc.
- the teachings of the present invention are typically implemented in a network environment such as the Internet, a wide area network (WAN), a local area network (LAN), a virtual private network (VPN), etc.
- a network environment such as the Internet, a wide area network (WAN), a local area network (LAN), a virtual private network (VPN), etc.
- communication between client 12 and server 14 could occur via a direct hardwired connection (e.g., serial port), or via an addressable connection that may utilize any combination of wireline and/or wireless transmission methods.
- Server 14 and client 12 may utilize conventional network connectivity, such as Token Ring, Ethernet, WiFi or other conventional communications standards.
- connectivity could be provided by conventional TCP/IP sockets-based protocol.
- client 12 would utilize an Internet service provider to establish connectivity to server 14 .
- server 14 generally comprises central processing unit (CPU) 20 , memory 22 , bus 24 , input/output (I/O) interfaces 26 , external devices/resources 28 and log 30 .
- CPU 20 may comprise a single processing unit, or be distributed across one or more processing units in one or more locations, e.g., on a client and computer system.
- Memory 22 may comprise any known type of data storage and/or transmission media, including magnetic media, optical media, random access memory (RAM), read-only memory (ROM), a data cache, etc.
- memory 22 may reside at a single physical location, comprising one or more types of data storage, or be distributed across a plurality of physical systems in various forms.
- I/O interfaces 26 may comprise any system for exchanging information to/from an external source.
- External devices/resources 28 may comprise any known type of external device, including speakers, a CRT, LCD screen, hand-held device, keyboard, mouse, voice recognition system, speech output system, printer, monitor/display, facsimile, pager, etc.
- Bus 24 provides a communication link between each of the components in server 14 and likewise may comprise any known type of transmission link, including electrical, optical, wireless, etc.
- application 32 Shown in memory 22 of server 14 is application 32 , which can represent any type of program that is capable of obtaining data objects for user 16 .
- application 32 could be a network-based electronic mail program such as LOTUS NOTES that renders an “inbox” view for user 16 .
- application 32 can be an application server program such as WebSphere Application Server, or a portal program such as WebSphere Portal Server (both of which are commercially available from International Business Machines Corp. of Armonk, N.Y.). In the case of the latter, application 32 would receive requests from client 12 and interface with one or more portlets (not shown) to obtain the content from content providers 18 .
- discard rules and refresh rules are assigned to the data objects on a class basis.
- the discard rules set forth the parameters for discarding a class of data objects from cache 36 to discard queue 40 . This prevents cache 36 from becoming overloaded.
- a discard rule could state that for a certain class, if a data object is not requested at least 5 times in a 24 hour period, that data object should be discarded from cache 36 .
- the refresh rules set forth the parameters for refreshing or updating the data objects in cache 36 from refresh queue 38 . This prevents the data objects therein from becoming stale.
- a refresh rule could state that all Internet web page-based data objects should be refreshed every ten minutes.
- CollabObjs ⁇ public: CollabObjs( ); ⁇ CollabObjs( ); Register(const char *ObjClass, int (*UpdateObj) (const char*ObjName, const char *LastTime, void ** Instance)); ⁇ where ObjName is the name of the cached instance.
- administrator 41 and/or user 16 will also assign discard rules and refresh rules to each data object class via class registration system 50 .
- objects have parametric data applied to rules defining:
- predictor 54 is a requestor that forecasts traffic, trends and rules governing cache behavior. It can request any object that people and machines do, in fact that is its chief goal, but its requests do not participate in the cache log.
- Data objects written to refresh queue 38 are discarded when either they have been flushed or are about to be flushed from cache 36 . If they are near the end of discard queue 40 , they are also discarded.
- a data object is replaced in cache 36 , a new slot and space is allocated to house it, the data is written to disk in page/slot format and finally the old version's page and slot is replaced in the hash table and its memory and page(s) freed.
- a semaphore is only necessary for the hash table update.
Abstract
Description
class CollabObjs { | ||
public: | ||
CollabObjs( ); | ||
~CollabObjs( ); | ||
Register(const char *ObjClass, int (*UpdateObj) | ||
(const char*ObjName, const char *LastTime, void ** Instance)); | ||
} | ||
where ObjName is the name of the cached instance.
Create table Cachelog ( | ||
thedate date (date of the entry) | ||
Reqnum int (order of request from initialization) | ||
Objclass int | ||
Objinstance varchar (30) | ||
Realtime time (the actual time of the request) | ||
Requestor varchar(30) (IP address or other identifier) | ||
dow int (day of week) | ||
tod int (time of day (minute from midnight)) | ||
cost int (ms to fetch) | ||
Size int (size in bytes) | ||
) | ||
- 1. To gather the number of dates for which data has been gathered (for this day of week):
- SELECT COUNT DISTINCT(thedate) FROM Cachelog WHERE
dow=<this day of week> - The value gathered from this query (DAYCOUNT) will be used as a qualifier of predictive data below.
- 2. To find the instances historically most commonly referenced at this time on this day of the week:
- SELECT COUNT(*), AVG(cost), objclass, objinstance FROM Cachelog WHERE
dow=<this day of week>AND
tod IS BETWEEN<now (in minutes since midnight)>+cost/1000/60−<some adjustment>AND
<30 minutes from now>+cost/1000/60 - GROUP BY objclass, objinstance
-
ORDER BY 1 DESCENDING, 2 DESCENDING
-
- SELECT COUNT DISTINCT (thedate) FROM Cachelog WHERE
dow=<this day of week>AND
tod IS BETWEEN <now (in minutes since midnight)>+cost/1000/60−<some adjustment>AND
<30 minutes from now>+cost/1000/60 AND
objectclass=<this object class>AND objinstance=<this object instance>
If the result of this query/DAYCOUNT is less than the predictive factor for this object type, precache is not performed. This same rule is applied to the other prefetch logic examples below. Data objects are cached in this following manner when LRU is the discard metric in force. - 3. To find the most prevalent, expensive and yet smallest data object instances referenced at this time on this day of the week:
- SELECT COUNT(*), AVG(size), AVG(cost), objclass, objinstance FROM Cachelog WHERE
dow=<this day of week>AND
tod IS BETWEEN<now (in milliseconds since midnight)>+cost−<some adjustment>AND
<30 minutes from now in milliseconds>+cost - GROUP BY objclass, objinstance
-
ORDER BY 1 DESCENDING, 2, 3 DESC
Instances are cached in this manner when Size is the discard metric in force.
-
- 4. To find sequences of requests by batch processes, the following query is issued:
SELECT objclass, objinstance, reqnum, requestor, cost FROM Cachelog |
WHERE dow = <this day of week> OR dow = |
<this day of week> + 1 |
GROUP BY requestor |
HAVING COUNT(*) > <min batch stream threshold> |
ORDER BY requestor, reqnum |
The streams of requests are compressed and encoded and compared against each other. When a stream is found to be an exact match of another, a count of that stream is incremented. The streams with the highest occurrence counts and largest costs are candidates for predictive caching. When requests are received that match their first 3 request classes and data objects, the stream is played back as “pull” refreshes in time to satisfy each request in the stream. To cover the passing of midnight, dow of <this day of week>+1 is used and the reqnum value establishes the continuity of the stream. Streams have a minimum size of <min batch stream threshold>, which defaults to 10. This method of predictive caching is employed during periods of predominant batch processing or when the LOU cache metric is in force.
- SELECT COUNT(*), AVG(cost), AVG(size) objclass FROM Cachelog WHERE
dow=<this day of week>AND
tod IS BETWEEN<now (in milliseconds since midnight)>+cost−<some adjustment>AND
<30 minutes from now in milliseconds>+cost - GROUP BY objclass
-
ORDER BY 1 DESC, 2 DESC
LOU=1/Count of References
Size rank=(Size/1000)*(1−(LOU/1000))
LRU=Current time (ms)−Time of last reference (ms)
Claims (23)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/662,539 US7231496B2 (en) | 2003-09-15 | 2003-09-15 | Method, system and program product for caching data objects |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/662,539 US7231496B2 (en) | 2003-09-15 | 2003-09-15 | Method, system and program product for caching data objects |
Publications (2)
Publication Number | Publication Date |
---|---|
US20050060498A1 US20050060498A1 (en) | 2005-03-17 |
US7231496B2 true US7231496B2 (en) | 2007-06-12 |
Family
ID=34274125
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/662,539 Active 2024-06-28 US7231496B2 (en) | 2003-09-15 | 2003-09-15 | Method, system and program product for caching data objects |
Country Status (1)
Country | Link |
---|---|
US (1) | US7231496B2 (en) |
Cited By (32)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20050256940A1 (en) * | 2004-05-04 | 2005-11-17 | International Business Machines Corporation | Methods, systems, and computer program products for client side prefetching and caching of portlets |
US20060195779A1 (en) * | 2005-02-28 | 2006-08-31 | Mcelroy Thomas F | Methods, systems and computer program products for maintaining a separation between markup and data at the client |
US20070040013A1 (en) * | 2004-09-30 | 2007-02-22 | Searete Llc, A Limited Liability Corporation Of The State Of Delaware | Obtaining user assistance |
US20070150661A1 (en) * | 2005-12-26 | 2007-06-28 | Kabushiki Kaisha Toshiba | Information processing apparatus, information processing apparatus, and access control method |
US20070198920A1 (en) * | 2003-12-09 | 2007-08-23 | Lloyd Stratton C | Method and system for caching of non-real time data |
US20070224938A1 (en) * | 2006-03-24 | 2007-09-27 | Searete Llc, A Limited Liability Corporation Of The State Of Delaware | Vehicle control and communication via device in proximity |
US20070224939A1 (en) * | 2006-03-24 | 2007-09-27 | Searete Llc, A Limited Liability Corporation Of The State Of Delaware | Vehicle control and communication via device in proximity |
US20070260589A1 (en) * | 2006-05-08 | 2007-11-08 | Fujitsu Limited | Computer product, request grouping apparatus, and request grouping method |
US20070279241A1 (en) * | 2006-05-31 | 2007-12-06 | Searete Llc, A Limited Liability Corporation Of The State Of Delaware | Vehicle control and communication via device in proximity |
US20090144315A1 (en) * | 2007-11-29 | 2009-06-04 | Sap Ag | System and method for implementing a non-destructive tree filter |
US7725077B2 (en) | 2006-03-24 | 2010-05-25 | The Invention Science Fund 1, Llc | Wireless device with an aggregate user interface for controlling other devices |
US20100253507A1 (en) * | 2006-03-24 | 2010-10-07 | Searete Llc, A Limited Liability Corporation | Wireless device with an aggregate user interface for controlling other devices |
US20110047453A1 (en) * | 2009-08-23 | 2011-02-24 | Bank Of America Corporation | Display Rendering System With Supporting Components |
US20110047535A1 (en) * | 2009-08-23 | 2011-02-24 | Bank Of America Corporation | Dynamic Configuration System |
US20110047449A1 (en) * | 2009-08-23 | 2011-02-24 | Bank Of America Corporation | Widget Framework |
US20110055202A1 (en) * | 2009-08-31 | 2011-03-03 | Heimendinger Scott M | Predictive data caching |
US20110113201A1 (en) * | 2009-11-12 | 2011-05-12 | Oracle International Corporation | Garbage collection in a cache with reduced complexity |
US20110145293A1 (en) * | 2009-12-11 | 2011-06-16 | Samantha Stewart | Methods, Systems, and Products for Creating Sharable Objects |
US8126400B2 (en) | 2006-03-24 | 2012-02-28 | The Invention Science Fund I, Llc | Method for an aggregate user interface for controlling other devices |
US20140067852A1 (en) * | 2012-09-06 | 2014-03-06 | salesforce.com,inc. | Mechanism for facilitating scaling and efficient management of database systems and resources in an on-demand services environment |
US20140207912A1 (en) * | 2013-01-18 | 2014-07-24 | Limelight Networks, Inc. | Selective content pre-warming in content delivery networks based on user actions and content categorizations |
US20150019547A1 (en) * | 2012-04-20 | 2015-01-15 | Krishnamurthy Thalapathy | Unified user profiles |
US20150186545A1 (en) * | 2013-12-30 | 2015-07-02 | Yahoo! Inc. | Smart Content Pre-Loading on Client Devices |
WO2019106457A1 (en) * | 2017-11-28 | 2019-06-06 | International Business Machines Corporation | Fast locate using imitation reads on tape drives |
US10339474B2 (en) | 2014-05-06 | 2019-07-02 | Modern Geographia, Llc | Real-time carpooling coordinating system and methods |
US10445799B2 (en) | 2004-09-30 | 2019-10-15 | Uber Technologies, Inc. | Supply-chain side assistance |
US10458801B2 (en) | 2014-05-06 | 2019-10-29 | Uber Technologies, Inc. | Systems and methods for travel planning that calls for at least one transportation vehicle unit |
US10514816B2 (en) | 2004-12-01 | 2019-12-24 | Uber Technologies, Inc. | Enhanced user assistance |
US10657468B2 (en) | 2014-05-06 | 2020-05-19 | Uber Technologies, Inc. | System and methods for verifying that one or more directives that direct transport of a second end user does not conflict with one or more obligations to transport a first end user |
US10687166B2 (en) | 2004-09-30 | 2020-06-16 | Uber Technologies, Inc. | Obtaining user assistance |
US11100434B2 (en) | 2014-05-06 | 2021-08-24 | Uber Technologies, Inc. | Real-time carpooling coordinating system and methods |
US11106588B2 (en) * | 2017-11-28 | 2021-08-31 | International Business Machines Corporation | Deferred method of allocating disk space for lightning segments |
Families Citing this family (33)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7114033B2 (en) * | 2003-03-25 | 2006-09-26 | Emc Corporation | Handling data writes copied from a remote data storage device |
US7284091B2 (en) * | 2004-05-21 | 2007-10-16 | Bea Systems, Inc. | Systems and methods for passivation of cached objects in transaction |
US7543273B2 (en) * | 2004-05-21 | 2009-06-02 | Bea Systems, Inc. | Systems and methods for dynamic control of cache and pool sizes using a batch scheduler |
US7756910B2 (en) * | 2004-05-21 | 2010-07-13 | Bea Systems, Inc. | Systems and methods for cache and pool initialization on demand |
US20060155569A1 (en) * | 2005-01-07 | 2006-07-13 | Lord Judd A | Style trend tracking tool |
CA2513019A1 (en) * | 2005-07-22 | 2007-01-22 | Research In Motion Limited | A method for communicating state information between a server and a mobile device browser with version handling |
CA2513016A1 (en) * | 2005-07-22 | 2007-01-22 | Research In Motion Limited | A secure method of synchronizing cache contents of a mobile browser with a proxy server |
CA2513018A1 (en) | 2005-07-22 | 2007-01-22 | Research In Motion Limited | Method for training a proxy server for content delivery based on communication of state information from a mobile device browser |
CA2513022A1 (en) * | 2005-07-22 | 2007-01-22 | Research In Motion Limited | System and method for communicating state management between a browser user-agent and a mobile data server |
CA2513014A1 (en) * | 2005-07-22 | 2007-01-22 | Research In Motion Limited | A method of controlling delivery of multi-part content from an origin server to a mobile device browser via a proxy server |
CA2513010A1 (en) * | 2005-07-22 | 2007-01-22 | Research In Motion Limited | A method for detecting state changes between data stored in a first computing device and data retrieved from a second computing device |
US8548948B2 (en) * | 2006-04-11 | 2013-10-01 | Oracle International Corporation | Methods and apparatus for a fine grained file data storage system |
US7590800B2 (en) * | 2006-06-30 | 2009-09-15 | Seagate Technology Llc | 2D dynamic adaptive data caching |
US7743216B2 (en) * | 2006-06-30 | 2010-06-22 | Seagate Technology Llc | Predicting accesses to non-requested data |
US20090177732A1 (en) * | 2008-01-08 | 2009-07-09 | Daryl Martin | Method and system for automated and configurable remote cache refreshes |
EP2081120A1 (en) * | 2008-01-08 | 2009-07-22 | Research In Motion Limited | Method and system for configurable rule-based cache refreshes |
US9495471B2 (en) * | 2008-12-04 | 2016-11-15 | International Business Machines Corporation | Optimize view elements sizes to maximize most data viewed in a multiple view elements GUI |
US9075665B2 (en) * | 2010-06-29 | 2015-07-07 | International Business Machines Corporation | Smoothing peak system load via behavior prediction in collaborative systems with temporal data access patterns |
WO2013015835A1 (en) | 2011-07-22 | 2013-01-31 | Seven Networks, Inc. | Mobile application traffic optimization |
US8812788B2 (en) | 2010-11-09 | 2014-08-19 | Lsi Corporation | Virtual cache window headers for long term access history |
US8769000B2 (en) * | 2011-02-01 | 2014-07-01 | Microsoft Corporation | Adaptive network communication techniques |
WO2012149216A2 (en) * | 2011-04-27 | 2012-11-01 | Seven Networks, Inc. | Mobile device which offloads requests made by a mobile application to a remote entity for conservation of mobile device and network resources and methods therefor |
US9615126B2 (en) | 2011-06-24 | 2017-04-04 | Google Technology Holdings LLC | Intelligent buffering of media streams delivered over internet |
US8996987B2 (en) * | 2011-06-30 | 2015-03-31 | Apple Inc. | List view optimization |
US9537899B2 (en) | 2012-02-29 | 2017-01-03 | Microsoft Technology Licensing, Llc | Dynamic selection of security protocol |
WO2014172386A2 (en) | 2013-04-15 | 2014-10-23 | Seven Networks, Inc. | Temporary or partial offloading of mobile applicaton functions to a cloud-based environment |
US9886386B2 (en) | 2013-07-18 | 2018-02-06 | Avago Technologies General Ip (Singapore) Pte. Ltd. | Self-adjusting caching system |
US9612758B1 (en) * | 2015-03-10 | 2017-04-04 | EMC IP Holding Company LLC | Performing a pre-warm-up procedure via intelligently forecasting as to when a host computer will access certain host data |
US10684950B2 (en) | 2018-03-15 | 2020-06-16 | Bank Of America Corporation | System for triggering cross channel data caching |
CN113157198A (en) * | 2020-01-07 | 2021-07-23 | 伊姆西Ip控股有限责任公司 | Method, apparatus and computer program product for managing a cache |
US11265396B1 (en) | 2020-10-01 | 2022-03-01 | Bank Of America Corporation | System for cross channel data caching for performing electronic activities |
US11778067B2 (en) | 2021-06-16 | 2023-10-03 | Bank Of America Corporation | System for triggering cross channel data caching on network nodes |
US11880307B2 (en) | 2022-06-25 | 2024-01-23 | Bank Of America Corporation | Systems and methods for dynamic management of stored cache data based on predictive usage information |
Citations (22)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6085193A (en) * | 1997-09-29 | 2000-07-04 | International Business Machines Corporation | Method and system for dynamically prefetching information via a server hierarchy |
US6092080A (en) * | 1996-07-08 | 2000-07-18 | Survivors Of The Shoah Visual History Foundation | Digital library system |
US6157993A (en) * | 1997-10-14 | 2000-12-05 | Advanced Micro Devices, Inc. | Prefetching data using profile of cache misses from earlier code executions |
US6185608B1 (en) * | 1998-06-12 | 2001-02-06 | International Business Machines Corporation | Caching dynamic web pages |
US6266742B1 (en) * | 1997-10-27 | 2001-07-24 | International Business Machines Corporation | Algorithm for cache replacement |
US20010043600A1 (en) | 2000-02-15 | 2001-11-22 | Chatterjee Aditya N. | System and method for internet page acceleration including multicast transmissions |
US20010054084A1 (en) | 1999-12-31 | 2001-12-20 | Arkadi Kosmynin | Method and system for communication in the usenet |
US20010056416A1 (en) | 2000-03-16 | 2001-12-27 | J.J. Garcia-Luna-Aceves | System and method for discovering information objects and information object repositories in computer networks |
US6360273B1 (en) | 1998-02-23 | 2002-03-19 | International Business Machines Corporation | Method for collaborative transformation and caching of web objects in a proxy network |
US6363397B1 (en) | 1998-02-10 | 2002-03-26 | International Business Machines Corporation | Method for selecting objects to be cached, method for discarding cached objects, and computer |
US20020073167A1 (en) | 1999-12-08 | 2002-06-13 | Powell Kyle E. | Internet content delivery acceleration system employing a hybrid content selection scheme |
US20020078300A1 (en) | 1999-08-16 | 2002-06-20 | Chanda Dharap | Semantics-based caching policy to minimize latency |
US6453404B1 (en) * | 1999-05-27 | 2002-09-17 | Microsoft Corporation | Distributed data cache with memory allocation model |
US20020133537A1 (en) | 2001-03-12 | 2002-09-19 | Whizz Technology Ltd. | Server cluster and server-side cooperative caching method for use with same |
US20020143892A1 (en) | 2001-04-03 | 2002-10-03 | Mogul Jeffrey C. | Reduction of network retrieval latency using cache and digest |
US6505200B1 (en) * | 2000-07-06 | 2003-01-07 | International Business Machines Corporation | Application-independent data synchronization technique |
US20030009538A1 (en) | 2000-11-06 | 2003-01-09 | Shah Lacky Vasant | Network caching system for streamed applications |
US20030051101A1 (en) | 2001-04-19 | 2003-03-13 | Snowshore Networks, Inc. | Cache for large-object real-time latency elimination |
US6542967B1 (en) | 1999-04-12 | 2003-04-01 | Novell, Inc. | Cache object store |
US6662274B2 (en) * | 2001-06-20 | 2003-12-09 | Intel Corporation | Method for using cache prefetch feature to improve garbage collection algorithm |
US6766422B2 (en) * | 2001-09-27 | 2004-07-20 | Siemens Information And Communication Networks, Inc. | Method and system for web caching based on predictive usage |
US6823514B1 (en) * | 2000-11-14 | 2004-11-23 | International Business Machines Corporation | Method and system for caching across multiple contexts |
-
2003
- 2003-09-15 US US10/662,539 patent/US7231496B2/en active Active
Patent Citations (23)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6092080A (en) * | 1996-07-08 | 2000-07-18 | Survivors Of The Shoah Visual History Foundation | Digital library system |
US6085193A (en) * | 1997-09-29 | 2000-07-04 | International Business Machines Corporation | Method and system for dynamically prefetching information via a server hierarchy |
US6157993A (en) * | 1997-10-14 | 2000-12-05 | Advanced Micro Devices, Inc. | Prefetching data using profile of cache misses from earlier code executions |
US6266742B1 (en) * | 1997-10-27 | 2001-07-24 | International Business Machines Corporation | Algorithm for cache replacement |
US20020065809A1 (en) | 1998-02-10 | 2002-05-30 | International Business Machines Corporation | Method for selecting objects to be cached, method for discarding cached objects, and computer |
US6363397B1 (en) | 1998-02-10 | 2002-03-26 | International Business Machines Corporation | Method for selecting objects to be cached, method for discarding cached objects, and computer |
US6360273B1 (en) | 1998-02-23 | 2002-03-19 | International Business Machines Corporation | Method for collaborative transformation and caching of web objects in a proxy network |
US6185608B1 (en) * | 1998-06-12 | 2001-02-06 | International Business Machines Corporation | Caching dynamic web pages |
US6542967B1 (en) | 1999-04-12 | 2003-04-01 | Novell, Inc. | Cache object store |
US6453404B1 (en) * | 1999-05-27 | 2002-09-17 | Microsoft Corporation | Distributed data cache with memory allocation model |
US20020078300A1 (en) | 1999-08-16 | 2002-06-20 | Chanda Dharap | Semantics-based caching policy to minimize latency |
US20020073167A1 (en) | 1999-12-08 | 2002-06-13 | Powell Kyle E. | Internet content delivery acceleration system employing a hybrid content selection scheme |
US20010054084A1 (en) | 1999-12-31 | 2001-12-20 | Arkadi Kosmynin | Method and system for communication in the usenet |
US20010043600A1 (en) | 2000-02-15 | 2001-11-22 | Chatterjee Aditya N. | System and method for internet page acceleration including multicast transmissions |
US20010056416A1 (en) | 2000-03-16 | 2001-12-27 | J.J. Garcia-Luna-Aceves | System and method for discovering information objects and information object repositories in computer networks |
US6505200B1 (en) * | 2000-07-06 | 2003-01-07 | International Business Machines Corporation | Application-independent data synchronization technique |
US20030009538A1 (en) | 2000-11-06 | 2003-01-09 | Shah Lacky Vasant | Network caching system for streamed applications |
US6823514B1 (en) * | 2000-11-14 | 2004-11-23 | International Business Machines Corporation | Method and system for caching across multiple contexts |
US20020133537A1 (en) | 2001-03-12 | 2002-09-19 | Whizz Technology Ltd. | Server cluster and server-side cooperative caching method for use with same |
US20020143892A1 (en) | 2001-04-03 | 2002-10-03 | Mogul Jeffrey C. | Reduction of network retrieval latency using cache and digest |
US20030051101A1 (en) | 2001-04-19 | 2003-03-13 | Snowshore Networks, Inc. | Cache for large-object real-time latency elimination |
US6662274B2 (en) * | 2001-06-20 | 2003-12-09 | Intel Corporation | Method for using cache prefetch feature to improve garbage collection algorithm |
US6766422B2 (en) * | 2001-09-27 | 2004-07-20 | Siemens Information And Communication Networks, Inc. | Method and system for web caching based on predictive usage |
Non-Patent Citations (3)
Title |
---|
Haas et al., "Loading a Chache with Query Results", Proceedings of the 25th VLDB Conference, Edinburgh Scotland, 1999. |
Kanada, "Two Rule-Based Building-Block Architectures for Policy-Based Nework Control", Undated, pp. 1-10. |
Patterson et al., "Informed Prefetching and Caching", Dec. 1995, pp. 79-95. |
Cited By (60)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20070198920A1 (en) * | 2003-12-09 | 2007-08-23 | Lloyd Stratton C | Method and system for caching of non-real time data |
US8694892B2 (en) * | 2003-12-09 | 2014-04-08 | Siebel Systems, Inc. | Method and system for caching of non-real time data |
US7624160B2 (en) * | 2004-05-04 | 2009-11-24 | International Business Machines Corporation | Methods, systems, and computer program products for client side prefetching and caching of portlets |
US20050256940A1 (en) * | 2004-05-04 | 2005-11-17 | International Business Machines Corporation | Methods, systems, and computer program products for client side prefetching and caching of portlets |
US20070040013A1 (en) * | 2004-09-30 | 2007-02-22 | Searete Llc, A Limited Liability Corporation Of The State Of Delaware | Obtaining user assistance |
US10872365B2 (en) | 2004-09-30 | 2020-12-22 | Uber Technologies, Inc. | Supply-chain side assistance |
US10445799B2 (en) | 2004-09-30 | 2019-10-15 | Uber Technologies, Inc. | Supply-chain side assistance |
US7922086B2 (en) | 2004-09-30 | 2011-04-12 | The Invention Science Fund I, Llc | Obtaining user assistance |
US10687166B2 (en) | 2004-09-30 | 2020-06-16 | Uber Technologies, Inc. | Obtaining user assistance |
US10514816B2 (en) | 2004-12-01 | 2019-12-24 | Uber Technologies, Inc. | Enhanced user assistance |
US8001456B2 (en) | 2005-02-28 | 2011-08-16 | International Business Machines Corporation | Methods for maintaining separation between markup and data at a client |
US20060195779A1 (en) * | 2005-02-28 | 2006-08-31 | Mcelroy Thomas F | Methods, systems and computer program products for maintaining a separation between markup and data at the client |
US20070150661A1 (en) * | 2005-12-26 | 2007-06-28 | Kabushiki Kaisha Toshiba | Information processing apparatus, information processing apparatus, and access control method |
US11012552B2 (en) | 2006-03-24 | 2021-05-18 | Uber Technologies, Inc. | Wireless device with an aggregate user interface for controlling other devices |
US9621701B2 (en) | 2006-03-24 | 2017-04-11 | Searete Llc | Wireless device with an aggregate user interface for controlling other devices |
US7725077B2 (en) | 2006-03-24 | 2010-05-25 | The Invention Science Fund 1, Llc | Wireless device with an aggregate user interface for controlling other devices |
US8538331B2 (en) * | 2006-03-24 | 2013-09-17 | The Invention Science Fund I, LC | Vehicle control and communication via device in proximity |
US20100253507A1 (en) * | 2006-03-24 | 2010-10-07 | Searete Llc, A Limited Liability Corporation | Wireless device with an aggregate user interface for controlling other devices |
US10681199B2 (en) | 2006-03-24 | 2020-06-09 | Uber Technologies, Inc. | Wireless device with an aggregate user interface for controlling other devices |
US20070224939A1 (en) * | 2006-03-24 | 2007-09-27 | Searete Llc, A Limited Liability Corporation Of The State Of Delaware | Vehicle control and communication via device in proximity |
US8126400B2 (en) | 2006-03-24 | 2012-02-28 | The Invention Science Fund I, Llc | Method for an aggregate user interface for controlling other devices |
US20070224938A1 (en) * | 2006-03-24 | 2007-09-27 | Searete Llc, A Limited Liability Corporation Of The State Of Delaware | Vehicle control and communication via device in proximity |
US8180293B2 (en) | 2006-03-24 | 2012-05-15 | The Invention Science Fund I, Llc | Vehicle control and communication via device in proximity |
US8358976B2 (en) | 2006-03-24 | 2013-01-22 | The Invention Science Fund I, Llc | Wireless device with an aggregate user interface for controlling other devices |
US7788370B2 (en) * | 2006-05-08 | 2010-08-31 | Fujitsu Limited | Computer product, request grouping apparatus, and request grouping method |
US20070260589A1 (en) * | 2006-05-08 | 2007-11-08 | Fujitsu Limited | Computer product, request grouping apparatus, and request grouping method |
US20070279241A1 (en) * | 2006-05-31 | 2007-12-06 | Searete Llc, A Limited Liability Corporation Of The State Of Delaware | Vehicle control and communication via device in proximity |
US8195106B2 (en) | 2006-05-31 | 2012-06-05 | The Invention Science Fund I, Llc | Vehicle control and communication via device in proximity |
US8290966B2 (en) * | 2007-11-29 | 2012-10-16 | Sap Aktiengesellschaft | System and method for implementing a non-destructive tree filter |
US20090144315A1 (en) * | 2007-11-29 | 2009-06-04 | Sap Ag | System and method for implementing a non-destructive tree filter |
US20110047535A1 (en) * | 2009-08-23 | 2011-02-24 | Bank Of America Corporation | Dynamic Configuration System |
US20110047453A1 (en) * | 2009-08-23 | 2011-02-24 | Bank Of America Corporation | Display Rendering System With Supporting Components |
US20110047449A1 (en) * | 2009-08-23 | 2011-02-24 | Bank Of America Corporation | Widget Framework |
US9032368B2 (en) * | 2009-08-23 | 2015-05-12 | Bank Of America Corporation | Dynamic configuration system |
US9201665B2 (en) | 2009-08-23 | 2015-12-01 | Bank Of America Corporation | Outputting presentation code updated for a particular user in response to receiving a page identifier |
US20110055202A1 (en) * | 2009-08-31 | 2011-03-03 | Heimendinger Scott M | Predictive data caching |
US8356026B2 (en) | 2009-08-31 | 2013-01-15 | Microsoft Corporation | Predictive data caching |
US8171228B2 (en) | 2009-11-12 | 2012-05-01 | Oracle International Corporation | Garbage collection in a cache with reduced complexity |
US20110113201A1 (en) * | 2009-11-12 | 2011-05-12 | Oracle International Corporation | Garbage collection in a cache with reduced complexity |
US20110145293A1 (en) * | 2009-12-11 | 2011-06-16 | Samantha Stewart | Methods, Systems, and Products for Creating Sharable Objects |
US20150019547A1 (en) * | 2012-04-20 | 2015-01-15 | Krishnamurthy Thalapathy | Unified user profiles |
US20140067852A1 (en) * | 2012-09-06 | 2014-03-06 | salesforce.com,inc. | Mechanism for facilitating scaling and efficient management of database systems and resources in an on-demand services environment |
US8886769B2 (en) * | 2013-01-18 | 2014-11-11 | Limelight Networks, Inc. | Selective content pre-warming in content delivery networks based on user actions and content categorizations |
US20140207912A1 (en) * | 2013-01-18 | 2014-07-24 | Limelight Networks, Inc. | Selective content pre-warming in content delivery networks based on user actions and content categorizations |
US20150186545A1 (en) * | 2013-12-30 | 2015-07-02 | Yahoo! Inc. | Smart Content Pre-Loading on Client Devices |
US9990440B2 (en) * | 2013-12-30 | 2018-06-05 | Oath Inc. | Smart content pre-loading on client devices |
US10339474B2 (en) | 2014-05-06 | 2019-07-02 | Modern Geographia, Llc | Real-time carpooling coordinating system and methods |
US10657468B2 (en) | 2014-05-06 | 2020-05-19 | Uber Technologies, Inc. | System and methods for verifying that one or more directives that direct transport of a second end user does not conflict with one or more obligations to transport a first end user |
US11669785B2 (en) | 2014-05-06 | 2023-06-06 | Uber Technologies, Inc. | System and methods for verifying that one or more directives that direct transport of a second end user does not conflict with one or more obligations to transport a first end user |
US11466993B2 (en) | 2014-05-06 | 2022-10-11 | Uber Technologies, Inc. | Systems and methods for travel planning that calls for at least one transportation vehicle unit |
US11100434B2 (en) | 2014-05-06 | 2021-08-24 | Uber Technologies, Inc. | Real-time carpooling coordinating system and methods |
US10458801B2 (en) | 2014-05-06 | 2019-10-29 | Uber Technologies, Inc. | Systems and methods for travel planning that calls for at least one transportation vehicle unit |
WO2019106457A1 (en) * | 2017-11-28 | 2019-06-06 | International Business Machines Corporation | Fast locate using imitation reads on tape drives |
US10423336B2 (en) | 2017-11-28 | 2019-09-24 | International Business Machines Corporation | Fast locate using imitation reads on tape drives |
US11099738B2 (en) | 2017-11-28 | 2021-08-24 | International Business Machines Corporation | Fast locate using imitation reads on tape drives |
US11106364B2 (en) | 2017-11-28 | 2021-08-31 | International Business Machines Corporation | Fast locate using imitation reads on tape drives |
US11106588B2 (en) * | 2017-11-28 | 2021-08-31 | International Business Machines Corporation | Deferred method of allocating disk space for lightning segments |
GB2581727B (en) * | 2017-11-28 | 2022-05-04 | Ibm | Fast locate using imitation reads on tape drives |
GB2581727A (en) * | 2017-11-28 | 2020-08-26 | Ibm | Fast locate using imitation reads on tape drives |
US11099737B2 (en) | 2017-11-28 | 2021-08-24 | International Business Machines Corporation | Fast locate using imitation reads on tape drives |
Also Published As
Publication number | Publication date |
---|---|
US20050060498A1 (en) | 2005-03-17 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7231496B2 (en) | Method, system and program product for caching data objects | |
US11140211B2 (en) | Systems and methods for caching and serving dynamic content | |
US6772203B1 (en) | Updating data objects for dynamic application caching | |
CN109684358B (en) | Data query method and device | |
US6266742B1 (en) | Algorithm for cache replacement | |
Shim et al. | Proxy cache algorithms: Design, implementation, and performance | |
EP1139232A1 (en) | Cache time determination | |
US20030046365A1 (en) | System and method for caching content | |
US8429130B2 (en) | Optimized prefetching for wide area networks | |
Labrinidis et al. | Exploring the tradeoff between performance and data freshness in database-driven web servers | |
EP1416387A2 (en) | System and method for maintaining transaction cache consistency in mobile computing environment | |
Challenger et al. | Efficiently serving dynamic data at highly accessed web sites | |
US20130006918A1 (en) | Statistical Applications in OLTP Environment | |
US20090265704A1 (en) | Application Management for Reducing Energy Costs | |
Psounis et al. | Efficient randomized web-cache replacement schemes using samples from past eviction times | |
JPH1124981A (en) | Wide area distributed file system | |
US20040172459A1 (en) | Multi-tier business layer architecture for information systems | |
CN110191168A (en) | Processing method, device, computer equipment and the storage medium of online business datum | |
US20070067569A1 (en) | Method and system for communicating validation information to a web cache | |
US7818600B2 (en) | Method, apparatus, and program for minimizing invalid cache notification events in a distributed caching environment | |
CN1503949B (en) | Server, computer system, object management method, server control method | |
US7873715B1 (en) | Optimized instrumentation of web pages for performance management | |
CN113688155A (en) | System for preventing buffer avalanche | |
US20030017819A1 (en) | Regional business model for subscription computing | |
US7590931B2 (en) | Method and apparatus for form pooling |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:CURTIS, JOHN D.;REEL/FRAME:014512/0209Effective date: 20030911 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
REMI | Maintenance fee reminder mailed | ||
FPAY | Fee payment |
Year of fee payment: 4 |
|
SULP | Surcharge for late payment | ||
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026664/0866Effective date: 20110503 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 12TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1553); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 12 |