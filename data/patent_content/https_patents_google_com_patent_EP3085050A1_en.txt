EP3085050A1 - Privileged static hosted web applications - Google Patents
Privileged static hosted web applicationsInfo
- Publication number
- EP3085050A1 EP3085050A1 EP14824307.4A EP14824307A EP3085050A1 EP 3085050 A1 EP3085050 A1 EP 3085050A1 EP 14824307 A EP14824307 A EP 14824307A EP 3085050 A1 EP3085050 A1 EP 3085050A1
- Authority
- EP
- European Patent Office
- Prior art keywords
- web application
- static web
- static
- application
- web
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
- 230000003068 static effect Effects 0.000 title claims abstract description 220
- 238000000034 method Methods 0.000 claims abstract description 77
- 230000008859 change Effects 0.000 claims abstract description 25
- 238000010200 validation analysis Methods 0.000 claims abstract description 9
- 230000015654 memory Effects 0.000 claims description 55
- 238000012795 verification Methods 0.000 claims description 54
- 230000008569 process Effects 0.000 claims description 23
- 241000700605 Viruses Species 0.000 claims description 6
- ZXQYGBMAQZUVMI-GCMPRSNUSA-N gamma-cyhalothrin Chemical compound CC1(C)[C@@H](\C=C(/Cl)C(F)(F)F)[C@H]1C(=O)O[C@H](C#N)C1=CC=CC(OC=2C=CC=CC=2)=C1 ZXQYGBMAQZUVMI-GCMPRSNUSA-N 0.000 claims description 6
- 230000006399 behavior Effects 0.000 description 19
- 238000004891 communication Methods 0.000 description 19
- 238000013515 script Methods 0.000 description 12
- 230000006870 function Effects 0.000 description 10
- 238000009434 installation Methods 0.000 description 10
- 238000004590 computer program Methods 0.000 description 9
- 230000000875 corresponding effect Effects 0.000 description 7
- 235000014510 cooky Nutrition 0.000 description 6
- 238000012552 review Methods 0.000 description 6
- 230000008901 benefit Effects 0.000 description 5
- 238000004422 calculation algorithm Methods 0.000 description 5
- 238000010586 diagram Methods 0.000 description 5
- 230000003287 optical effect Effects 0.000 description 5
- 238000012545 processing Methods 0.000 description 5
- 230000009471 action Effects 0.000 description 4
- 230000005540 biological transmission Effects 0.000 description 4
- 238000011156 evaluation Methods 0.000 description 4
- 230000007246 mechanism Effects 0.000 description 4
- 230000000644 propagated effect Effects 0.000 description 4
- VYZAMTAEIAYCRO-UHFFFAOYSA-N Chromium Chemical compound [Cr] VYZAMTAEIAYCRO-UHFFFAOYSA-N 0.000 description 3
- 230000003993 interaction Effects 0.000 description 3
- 239000013589 supplement Substances 0.000 description 3
- XUIMIQQOPSSXEZ-UHFFFAOYSA-N Silicon Chemical compound [Si] XUIMIQQOPSSXEZ-UHFFFAOYSA-N 0.000 description 2
- 230000002547 anomalous effect Effects 0.000 description 2
- 230000001413 cellular effect Effects 0.000 description 2
- 230000003247 decreasing effect Effects 0.000 description 2
- 238000005516 engineering process Methods 0.000 description 2
- 230000007717 exclusion Effects 0.000 description 2
- 230000000670 limiting effect Effects 0.000 description 2
- 239000004973 liquid crystal related substance Substances 0.000 description 2
- 238000012986 modification Methods 0.000 description 2
- 230000004048 modification Effects 0.000 description 2
- 230000002829 reductive effect Effects 0.000 description 2
- 229910052710 silicon Inorganic materials 0.000 description 2
- 239000010703 silicon Substances 0.000 description 2
- 239000000758 substrate Substances 0.000 description 2
- 229910001218 Gallium arsenide Inorganic materials 0.000 description 1
- 230000002776 aggregation Effects 0.000 description 1
- 238000004220 aggregation Methods 0.000 description 1
- 238000004458 analytical method Methods 0.000 description 1
- 230000003466 anti-cipated effect Effects 0.000 description 1
- 238000003491 array Methods 0.000 description 1
- 238000013475 authorization Methods 0.000 description 1
- 238000012790 confirmation Methods 0.000 description 1
- 230000002596 correlated effect Effects 0.000 description 1
- 238000013461 design Methods 0.000 description 1
- 238000001514 detection method Methods 0.000 description 1
- 239000012634 fragment Substances 0.000 description 1
- 208000015181 infectious disease Diseases 0.000 description 1
- 230000002452 interceptive effect Effects 0.000 description 1
- 238000012544 monitoring process Methods 0.000 description 1
- 230000006855 networking Effects 0.000 description 1
- 239000013307 optical fiber Substances 0.000 description 1
- 230000008520 organization Effects 0.000 description 1
- 230000004044 response Effects 0.000 description 1
- 238000012419 revalidation Methods 0.000 description 1
- 230000002441 reversible effect Effects 0.000 description 1
- 230000004884 risky behavior Effects 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 239000000126 substance Substances 0.000 description 1
- 230000001360 synchronised effect Effects 0.000 description 1
- 238000012360 testing method Methods 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/10—Network architectures or network communication protocols for network security for controlling access to devices or network resources
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/955—Retrieval from the web using information identifiers, e.g. uniform resource locators [URL]
- G06F16/9566—URL specific, e.g. using aliases, detecting broken or misspelled links
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/10—Protecting distributed programs or content, e.g. vending or licensing of copyrighted material ; Digital rights management [DRM]
- G06F21/12—Protecting executable software
- G06F21/121—Restricting unauthorised execution of programs
- G06F21/128—Restricting unauthorised execution of programs involving web programs, i.e. using technology especially used in internet, generally interacting with a web browser, e.g. hypertext markup language [HTML], applets, java
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/50—Monitoring users, programs or devices to maintain the integrity of platforms, e.g. of processors, firmware or operating systems
- G06F21/55—Detecting local intrusion or implementing counter-measures
- G06F21/56—Computer malware detection or handling, e.g. anti-virus arrangements
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
- G06F21/629—Protecting access to data via a platform, e.g. using keys or access control rules to features or functions of an application
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/10—Network architectures or network communication protocols for network security for controlling access to devices or network resources
- H04L63/102—Entity profiles
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/12—Applying verification of the received information
- H04L63/123—Applying verification of the received information received data contents, e.g. message integrity
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/14—Network architectures or network communication protocols for network security for detecting or protecting against malicious traffic
- H04L63/1441—Countermeasures against malicious traffic
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/14—Network architectures or network communication protocols for network security for detecting or protecting against malicious traffic
- H04L63/1441—Countermeasures against malicious traffic
- H04L63/145—Countermeasures against malicious traffic the attack involving the propagation of malware through the network, e.g. viruses, trojans or worms
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04W—WIRELESS COMMUNICATION NETWORKS
- H04W12/00—Security arrangements; Authentication; Protecting privacy or anonymity
- H04W12/08—Access security
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04W—WIRELESS COMMUNICATION NETWORKS
- H04W12/00—Security arrangements; Authentication; Protecting privacy or anonymity
- H04W12/12—Detection or prevention of fraud
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04W—WIRELESS COMMUNICATION NETWORKS
- H04W12/00—Security arrangements; Authentication; Protecting privacy or anonymity
- H04W12/12—Detection or prevention of fraud
- H04W12/128—Anti-malware arrangements, e.g. protection against SMS fraud or mobile malware
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/02—Protocols based on web technology, e.g. hypertext transfer protocol [HTTP]
Definitions
- Embodiments relate to hosted web applications. Background
- applications are either hosted by a network or remote server or installed on a client computing device.
- Hosted applications have the advantage of being flexible in that a change to the application can affect all users of the application.
- hosted applications are typically not considered secure because of the nature of the Internet.
- Installed applications have the advantage of being secure in that they are typically standalone (e.g., disconnected) from the Internet.
- installed applications are not flexible in that a change to the application typically requires a new installation of the application.
- a method can include receiving a static web application at a trusted server, validating assurance characteristics of the static web application, and upon successful validation of the static web application, providing access to the static web application via a uniform resource locator (URL) that identifies the static web application at a trusted server location within a public Internet and that can be used to navigate to the static web application from a browser running on a client device.
- URL uniform resource locator
- the static web application when executed on the browser running on the client device, can be granted at least one permission to utilize local resources of the client device during execution of the static web application by the browser.
- the validating of the assurance characteristics of the static web application as a whole, can be performed before the change to the object is made accessible via the URL.
- Implementations can include one or more of the following features.
- the static web application can be granted the at least one permission based on a prior verification and vetting process based on at least one permission that the web application seeks to declare.
- the static web application can be granted the at least one permission based on a prior maliciousness ranking and a threshold value.
- the static web application can contain all of the resources necessary to execute the application on the client computing device and wherein code needed to execute the application by the client computing device is not dynamically generated.
- the method can further include hosting the static web application on the trusted server. The hosting can include providing access to the static web application, and code associated with the static web application, to a web crawler.
- the validating of the assurance characteristics of the static web application can include verifying an object of the static web application does not include an object identified as at least one of a malware, a virus, and a Trojan.
- the validating of the assurance characteristics of the static web application can include verifying a trustworthiness ranking of a developer of the static web application.
- the updating of the static web application can include replacing objects of the static web application with a revalidated entire application. Prior to requesting at least one permission to utilize local resources of the client device during execution of the static web application by the browser the static web application can execute, on the client device, without permission to utilize local resources of the client device.
- a server in another general aspect, includes a memory configured to store a static web application, a verification module configured to validate assurance characteristics of the static web application, and an application server, upon successful validation of the static web application, configured to provide access to the static web application via a uniform resource locator (URL) that identifies the static web application at a trusted server location within a public Internet and that can be used to navigate to the static web application from a browser running on a client device.
- the static web application when executed on the browser running on the client device, is granted at least one permission to utilize local resources of the client device during execution of the static web application by the browser.
- the verification module upon receiving a change to an object of the static web application, is further configured to repeat the validating of the assurance characteristics of the static web application, as a whole, before the change to the object is made accessible via the URL.
- Implementations can include one or more of the following features.
- the static web application can be granted the at least one permission based on a prior verification and vetting process based on at least one permission that the web application seeks to declare.
- the static web application can be granted the at least one permission based on a prior maliciousness ranking and a threshold value.
- the static web application can contain all of the resources necessary to execute the application on the client computing device and wherein code needed to execute the application by the client computing device is not dynamically generated.
- the static web application can be hosted on the server. The hosting can include providing access to the static web application, and code associated with the static web application, to a web crawler.
- the validating of the assurance characteristics of the static web application can include verifying an object of the static web application does not include an object identified as at least one of a malware, a virus, and a Trojan.
- the validating of the assurance characteristics of the static web application can include verifying a trustworthiness ranking of a developer of the static web application.
- the updating of the static web application can include replacing objects of the static web application with a revalidated entire application. Prior to requesting at least one permission to utilize local resources of the client device during execution of the static web application by the browser the static web application can execute, on the client device, without permission to utilize local resources of the client device.
- a non-transitory computer-readable storage medium having stored thereon computer executable program code which, when executed on a computer system, causes the computer system to perform steps.
- the steps include receiving a static web application at a trusted server, validating assurance characteristics of the static web application, and upon successful validation of the static web application, providing access to the static web application via a uniform resource locator (URL) that identifies the static web application at a trusted server location within a public Internet and that can be used to navigate to the static web application from a browser running on a client device.
- the static web application when executed on the browser running on the client device, can be granted at least one permission to utilize local resources of the client device during execution of the static web application by the browser.
- the validating of the assurance characteristics of the static web application as a whole, can be performed before the change to the object is made accessible via the URL.
- Implementations can include one or more of the following features.
- the static web application can be granted the at least one permission based on a prior verification and vetting process based on at least one permission that the web application seeks to declare.
- the static web application can be granted the at least one permission based on a prior maliciousness ranking and a threshold value.
- the static web application can contain all of the resources necessary to execute the application on the client computing device and wherein code needed to execute the application by the client computing device is not dynamically generated.
- the steps can further include hosting the static web application on the trusted server.
- the hosting can include providing access to the static web application, and code associated with the static web application, to a web crawler.
- the validating of the assurance characteristics of the static web application can include verifying an object of the static web application does not include an object identified as at least one of a malware, a virus, and a Trojan.
- the validating of the assurance characteristics of the static web application can include verifying a trustworthiness ranking of a developer of the static web application.
- the updating of the static web application can include replacing objects of the static web application with a revalidated entire application. Prior to requesting at least one permission to utilize local resources of the client device during execution of the static web application by the browser the static web application can execute, on the client device, without permission to utilize local resources of the client device.
- Systems and methods described here include an application environment that exhibits one or more advantages of hosted and installed applications.
- FIGS. 1 and 2 are schematic block diagrams of systems according to at least one example embodiment.
- FIGS. 3 and 4 are flowcharts of method of distributing privileged static hosted web applications according to at least one example embodiment.
- FIGS. 5 and 6 are flowcharts of method of verifying web applications according to at least one example embodiment.
- FIG. 7 is a schematic block diagram of a computer device and a mobile computer device that can be used to implement the techniques described here.
- a web browser executed by a client device can receive code (e.g., HTML code) from a remote server (e.g., a remote server that hosts a website) and can execute the received code on the client device for the benefit of a user of the client device.
- code e.g., HTML code
- remote server e.g., a remote server that hosts a website
- the web browser may include or have installed one or more web applications.
- a "web application” may be configured to perform a single task or multiple tasks for a user.
- the web application may be configured to be executed or interpreted by the web browser.
- web applications can be run inside a web browser with a dedicated user interface, and may provide functionality and an experience that is more rich and interactive than a standalone website but are less cumbersome and monolithic than a desktop application. Examples of web applications include games, photo editors, and video players that are run inside the browser.
- Web applications can include "hosted web applications," or "packaged web applications.” Hosted web applications can request, and be granted, additional permissions to use local resources of a client computing device, beyond what typical code executed by a browser is permitted to use (e.g., such as, the ability to use more than the normal quota of temporary storage space, use geolocation features without additional confirmation prompts beyond a single install-time one, and the ability to always have a hidden page open which is performing tasks such as synchronizing data for offline use or receiving server-pushed notifications to display to the user). Hosted web applications also get special treatment in a user interface, in that hosted web applications may be shown with a large icon that can be clicked to launch the application either in a tab or in a standalone (possibly full screen) window.
- Packaged applications can be thought of as web applications whose code is bundled, so that the user can download all of the content of the web application for execution by the browser or in a standalone window.
- a packaged web application may not need to have network access to perform its functionality for the user, and rather may be executed successfully by the browser locally on the computing device without access to a network.
- Packaged web applications have the option of using extension application programming interfaces (APIs), allowing packaged apps to change the way the browser behaves or looks.
- APIs extension application programming interfaces
- a packaged web application may operate without appearing to run in a browser, e.g., without the browser "chrome", tabs, or other user interface of the browser.
- the packaged web application would operate in a standalone window without access to content scripts or APIs related to browser state such as cookies, history, bookmarks, open tabs, etc.
- packaged web applications may access USB drives, BLUETOOTH devices, open raw network sockets, act as servers, or access the local filesystem, as examples.
- the web browser may include or be configured to interact with one or more browser extensions.
- a "browser extension” may include one or more web pages packaged or grouped together as a definable whole, and configured to extend the functionality to the web browser.
- "browser extensions” are small software programs that can modify and enhance the functionality of a web browser. They may be written using web technologies such as HTML, JAVASCRIPT, and CSS. Extensions may have little or no user interface.
- extensions may provide a small user interface icon or other user interface that may modify a browser's "chrome", which is defined herein to include an area outside of a webpage displayed in the browser (such as the borders of a web browser window, which include the window frames, menus, toolbars and scroll bars). Selecting the icon or the other user interface may activate the functionality of the extension within the browser.
- browser extensions also provide extra functionality to a browser, but generally, unlike web applications, there is little or no user interface component to the functionality provided by an extension. Instead, browser extensions extend the functionality of the browser and the websites being viewed in it. For example, browser extensions can extend the functionality of the browser by adding a new button to the address bar, such as an ever-present currency converter. Buttons like this can also apply to the current website being viewed, for example, clicking the currency converter button can convert all prices on the website presented to a user into a currency chosen by the user.
- an extension can be installed so that when a user hovers a cursor over a thumbnail image on a webpage executed by a browser a larger-size version of the image is displayed until the user moves the cursor away from the image.
- and extension may be installed to embed a "mail this" button next to every link in every page.
- Extensions may modify websites, for example to block advertisements, to increase a zoom level on pages, or read strings of text and pass those to a text to speech engine for a blind user.
- a developer may want injected code from an extension to communicate to the rest of the extension.
- an extension may remove all images from a news website.
- the extension may establish a communication channel back to the rest of the extension running in its own process in the browser, using a content script. Because content scripts run in the context of a web page and not the extension, they often need some way of communicating with the rest of the extension.
- an RSS reader extension might use content scripts to detect the presence of an RSS feed on a page, then notify the background page in order to display a page action icon for that page.
- a message can contain any valid object (e.g., a JSON object such as null, boolean, number, string, array, or object).
- Packaged web applications in contrast to browser extensions, may look and feel like native applications, with a big-screen design and rich user interface. Both extensions and packaged web applications may bundle all their files into a single file (e.g., .CRX file) that a user downloads and installs. This bundling means that, unlike hosted applications, extensions and packaged web applications do not need to depend on content from the web. Browser extensions and web applications may be distributed via a trusted web store, or via individual websites, as examples.
- the API (and/or web API)) may be an element of a web browser as discussed above.
- the API (and/or web API)) may be an element of a web based operating system (Browser-OS).
- a Browser-OS may be a bootable version of a web browser (including a browser, a media player and a file system).
- the Browser-OS may store all of a user applications and data on the Web, as opposed to a local hard drive.
- the Browser-OS e.g., Chrome-OS®
- a web browser and/or a Browser-OS may include an associated runtime.
- a runtime also called a runtime system or a runtime environment
- can implement some behavior e.g., low-level (e.g., core) and/or high-level (e.g., type checking, garbage collection and/or debugging) of a computer language (e.g., HTML and/or JAVASCRIPT) or program (e.g., a web browser).
- a computer language e.g., HTML and/or JAVASCRIPT
- Any computer language can implement some form of runtime, whether the language is a compiled language, interpreted language, embedded domain-specific language, or is invoked via an API.
- the runtime can retrieve a background page, return details about a manifest, and listen for and respond to events in the app or extension lifecycle.
- the runtime can convert the relative path of URLs to fully -qualified URLs.
- the runtime can manage the app lifecycle. The app runtime manages app installation, controls the event page, and can shut down the app at anytime.
- a user may be comfortable with downloading and installing the application and giving the packaged web application a high level of access to the computing device because the packaged web application has gone through a verification and validation process before the packaged web application listed in a digital marketplace. Therefore, the user trusts that the downloaded code will not be malicious, even though the code has been given a high level of access to the computing device.
- a hosted web application even if the application has been approved in the digital marketplace, is essentially nothing more than then a URL to a website plus some metadata that defines some permissions. Because the code at the website pointed to by the URL can change, users should be reluctant to grant a high level of access to the computing device to a hosted web application because the code may become malicious even if the code had been previously approved.
- Both packaged web applications and hosted web applications contemplate the user permissions to allow increased use of local resources when running the application.
- users are willing to allow packaged web applications to use more dangerous permissions (e.g., a high level of access to the computing device) because of the code of the packaged web applications is validated and static. In other words, the code of the packaged web application will not change after the code is downloaded and installed on the users machine.
- Example embodiments provide systems and methods that create a "hybrid” hosted web application.
- the "hybrid” hosted web application is a privileged static hosted web application that can exhibit the benefits of both of the above described hosted web applications and packaged web applications as described in more detail below.
- the privileged static hosted web application can be a hosted web application including the security properties (e.g., because the privileged static hosted web application has been verified and validated) and offline properties (e.g., will not change) of a packaged web application.
- the privileged static hosted web application may place constraints on how hosting web applications works.
- a privileged static hosted web application is accessed via a trusted hosting provider (e.g., remote server) that is configured to operate in a known (by a client computing device) method, mode, state and/or condition.
- a trusted hosting provider e.g., remote server
- privileged static hosted web application provides content (e.g., web application objects) that are static and that have been audited in some way to ensure stability, security and/or tested or reviewed to meet some criteria.
- content e.g., web application objects
- trusted web application and static web application may be used somewhat interchangeably.
- FIG. 1 is a block diagram of a computing network 100 in accordance with at least one example embodiment.
- the network 100 may be used to implement web applications and browser extensions using the techniques described herein.
- the depiction of network 100 in FIG. 1 is shown by way of example. It will be appreciated that other network configurations may be used for implementing such techniques.
- the network 100 includes computing devices 110A and HOB.
- the computing devices 110A and HOB may take the form of a number of different devices, such as a personal computer, laptop computer, tablet computer, netbook computer, or a web- enabled phone, as examples.
- the devices 110A and HOB each include a browser 120A and 120B that may be used to access various types of content. Such content may include web sites, photos, video, audio and executable scripts, for example.
- browser 120A includes web application 130A and browser extension 140A, which may be installed on the computing device 11 OA using the techniques described herein and, once installed, may operate as an integrated part of the browser 120A.
- the web application 130A may include respective client-side components of the application.
- the web application 130A may include a description of the web application and/or code that is executable by the browser 120A, where that code provides functionality for the web application.
- browser 120B includes web application 130B and browser extension 140B, which may be installed on the computing device HOB using the techniques described herein and, once installed, may operate as an integrated part of the browser 120B.
- the computing devices 11 OA and HOB are coupled with a network 160.
- the network 160 may include a data access network that provides access to the Internet and/or the World Wide Web.
- computing devices 110A and HOB (using browsers 120A and 120B, for example) may communicate with a digital marketplace server 150 (e.g., a web application server or web store), a web application origin 170, a trusted web application origin 180, and a browser extension origin 190.
- the web application origin 170 may include server-side components for the web applications 130A and 130B.
- the browser extension origin 190 may include server-side components for the browser extensions 140A and 140B.
- the web applications 130A and 130B and browser extensions 140A and 140B may operate using multiple origins. Therefore, the web applications 130A and 130B may have server-side components on multiple web application origins, for example.
- the trusted web application origin 180 may include server- side components for the web applications 132A and 132B.
- the web applications 132A and 132B may be privileged static hosted web applications. As discussed above, hosted web applications can request, and be granted, additional permissions to use local resources of a client computing device, beyond what typical code executed by a browser is permitted to use.
- the web applications 132A and 132B may be privileged in that the computing devices 11 OA and HOB may grant extraordinary access to local computing resources. Extraordinary access may be access above that which a hosted web application is granted.
- the computing devices 110A and HOB may grant access to local computing resources in order for the privileged static hosted web application to access content scripts or APIs related to browser and/or a high level of access to the computing device.
- access may be granted to, for example, USB drives, BLUETOOTH devices, open raw network sockets, act as servers, and/or the local filesystem (e.g., not associated with storing pages or browser state such as cookies, history, bookmarks, open tabs).
- the trusted web application origin 180 may include only the objects associated with a trusted (e.g., privileged static hosted web application) application. Accordingly, the trusted web application origin 180 may include privileged static hosted web applications that have gone through some verification process. Verification processes are described in more detail below. In short, verification processes may be based on assurance characteristics of the web application. The assurance characteristics may be associated with, for example, a developer of the web application, a ranking of the web application based on signals relevant to potential malicious behavior of the web application, and/or scripts executed by the web application.
- the web applications 132A and 132B may be static in that any computing device (e.g., via a web browser) accessing one of web applications 132A and 132B will receive a same web application object (e.g., web page).
- a static web application is not dynamic with regard to changes to individual objects that make up the web application.
- a static web application is changed by replacing (e.g., uploading for use) the entirety of the web application.
- a developer of a static web application can not replace individual web application objects (e.g., a web page or a user interface or a script) without replacing the web application as a whole.
- objects of the web application 132A and/or 132B can not be replaced, redirected, switched, reordered, recoded, and/or the like, and made accessible via the URL without the web application 132A and/or 132B, as a whole, first successfully being validated and/or revalidated.
- the web applications 132A and 132B may be static in that the web application contains all of the resources necessary to execute the application on the client computing device and the code needed to execute the application by the client computing device is not dynamically generated.
- the web applications 132A and 132B may be hosted web applications in that the objects that make up the web application are stored (or substantially stored) on networked or server side computing device (e.g., a server) and served to client computing devices.
- a client device e.g., computing devices 110A and/or HOB
- the web applications 132A and 132B may be hosted by a secure server, for example.
- Such hosting includes providing access to the static web application, and code associated with the static web application, to a web crawler.
- the digital marketplace server 150 may be configured to receive requests from user computing devices (such as the computing device 110A) for installation of web applications and browser extensions, and to provide, in response to such requests, installation procedures (or installation packages) for the web applications or browser extensions.
- installation procedures/packages may include, at least, the client-side component for a requested web application.
- browser 120A may be used to request installation of the web applications 130A and browser extension 140A by interacting with the digital marketplace server 150.
- the digital marketplace 150 may implement a website that is used to distribute web applications, among other content.
- the digital marketplace server 150 may implement an e- commerce site.
- Digital marketplace server 150 may acquire web applications and browser extensions from developers, for example from web application origin 170, trusted web application origin 180, or browser extension origin 190.
- Requests to install web applications may be included in messages from the computing device 110 to the digital marketplace server 150 that indicate agreement to purchase respective web applications.
- the digital marketplace server 150 may take other forms or implement other techniques, such as providing access to free web applications, or may take the form of a developer's website which provides access to web application installation procedures/packages.
- installing a web application may include starting a background page for the web application, if the web application includes a background page feature.
- a background page of a web application may enable the web application to run as soon as the user logs into their computer, including before the user launches a web browser application or launches the associated web application in the web browser application.
- a background page may an invisible element running in a browser application, where the background page includes a declared association, in the web browser application, with the installed web application.
- network 100 illustrates only a single digital marketplace server 150, web application origin 170, trusted web application origin 180, and browser extension origin 190, it will be appreciated that additional digital marketplaces, servers, origins or trusted origins may be included in network 100.
- the web application origin 170, the trusted web application origin 180, and browser extension origin 190 may also implement one or more websites that the computing devices 110A and HOB (e.g., using browsers 120A and 120B) may interact with to request installation of web applications 130A, 130B, 132A and 132B and browser extensions 140A and 140B.
- web application 130A may be a packaged application, which includes a manifest file that may include permissions (e.g., permissions to use local resources or do other things normal HTML code is not permitted to do) and at least one HTML file to provide a user interface, along with other files, such as image files.
- web application 132A may be a privileged static hosted web applications, which includes a manifest file that may include permissions (e.g., permissions to use local resources or do other things normal HTML code is not permitted to do) and at least one HTML file to provide a user interface, along with other files, such as image files.
- Browser extension 140A may also include a manifest file and an HTML file, for example.
- trusted web application origin 180 may be trusted because it includes a manual review management component, i.e., people review web applications for security issues, bugs, etc. Further, trusted web application origin 180 may be trusted because it may be operated by the same company that develops browsers 120A and 120B, for example, as well as operating systems used to execute web applications and browser extensions. Trusted web application origin 180 may also be trusted because it may operate autonomous procedures by a processor of a computing device to validate web applications for security issues, authorship, bugs, etc.
- trusted web application origin 180 may be less trusted because they are not known to include the same levels of automated and/or manual review or other scrutiny as trusted web application origin 180, and because other origins may not provide trusted browsers or operating systems, for example.
- the trusted web application origin 180 may be one of a select few web application origins with known addresses identifying the web application origin as trusted.
- Browsers 120A and 120B may also provide feedback to trusted web application origin 180 about the local usage of a web application on the client computing device.
- trusted web application origin 180 may gather information about how an application is actually used and about any security issues encountered after the application is accessed from the trusted web application origin 180, for example.
- trusted web application origin 180 may analyze web applications based on signals related to security issues, where such signals may include signals based on information about how applications actually perform after the web applications are accessed from the trusted web application origin 180 and executed by a client computing device. For example, users may report malware or bugs to the trusted web application origin 180.
- FIG. 2 illustrates a block diagram of a system 200 including a computing device 1 10 (e.g., computing devices 1 10A and/or 1 10B), the trusted web application origin 180, a sync server 240, and a network 230 according to at least one example embodiment.
- the computing device 1 10 includes at least one processor 205 and at least one memory 210.
- the at least one processor 205 and the at least one memory 210 are communicatively coupled via bus 212.
- the computing device 1 10 may be, for example, an element of any computing device (e.g., personal computer, a laptop computer and the like).
- the at least one memory 210 includes code that can be executed to provide an operating system (O/S) 214, a browser 216, and a runtime 218.
- the operating system (O/S) 214, the browser 216, and the runtime 218 (together) may be configured to implement (at least a portion of) the methods described herein.
- the operating system 214 manages hardware resources associated with computing device 1 10 and provides common services for computer programs executing on computing device 110.
- the browser 216 implements the functions of a browser (e.g., web browser) described in more detail above.
- the runtime 218 can implement some behavior (e.g., low-level (e.g., core) and/or high-level (e.g., type checking, garbage collection and/or debugging)) of a computer language (e.g., HTML and/or JAVASCRIPT) or program (e.g., a web browser). Any computer language can implement some form of runtime, whether the language is a compiled language, interpreted language, embedded domain-specific language, or is invoked via an API.
- the runtime 218 can retrieve a background page, return details about a manifest, and listen for and respond to events in the app or extension lifecycle.
- the runtime 218 can convert the relative path of URLs to fully-qualified or absolute URLs.
- the runtime 218 can manage an application lifecycle. In this case, runtime 218 manages application installation, controls the event page, and can shut down the application at anytime.
- the system 200 can also include a sync server 240 that includes one or more processors 242, one or more memories 250, an operating system (O/S) 244, an identifier database 246, and a trusted server database 248.
- the identifier database 246 can store unique identifiers to enable syncing between various user sessions on different client computing devices e.g., computing devices 110, 110A and/or HOB.
- a user account allows a user to authenticate to system services (e.g., web applications) and receive authorization to access them.
- system services e.g., web applications
- a user may authenticate herself with a password or other credentials for the purposes of accounting, security, and resource management, for example.
- an operating system may use an identifier such as an integer to refer to the user, rather than a username.
- the username may be correlated with a user identifier.
- a system may reconcile and validate the proper ownership of user accounts, and can permanently link ownership of those user accounts to particular individuals by assigning a unique identifier to validated account login identifiers (e.g., user names and passwords, secure identifiers, etc.).
- the system may validate that individuals only have account login identifiers for the appropriate systems and applications, for example according to an organization's business policies, access control policies, and various application requirements.
- all of the user's bookmarks, extensions, web applications, theme, other browser preferences and/or settings may be loaded from a sync server 240 via a network 230 and a network interface 220. Accordingly, the user's bookmarks, extensions, web applications, theme, other browser preferences and/or settings may be saved (e.g., in memory 250) and synced to a user's account (e.g., using identifier database 246). The user can then load these settings anytime the user signs into the web browser on other computers and devices. Changes to browser settings, for example, may be synced instantaneously to the account, and may be automatically reflected on other computers where the user has signed in (and enabled syncing).
- Changes to settings on one computing device may be automatically copied (e.g., via sync server 240) from other computers (for example, if the user has enabled that sync feature).
- Synced data may be encrypted when it travels between computing devices to keep information secure. Further, passwords may be encrypted on computing devices using a cryptographic key.
- the sync server 240 may include a central service configured to hash settings that detects if suddenly a large number of devices request hashes for specific new settings and in this case refuse to provide hashes.
- the sync server 240 may include user submitted information about inconsistencies that are then used to build or improve a model to calculate confidence.
- the sync server 240 may report detections of inconsistencies to estimate the magnitude of infection rates.
- information associated with browser settings may be read from a file (e.g., XML file) or data store (e.g., database) downloaded (e.g., synchronized) from the sync server 240 and stored in memory 210.
- the identifier database 246 and/or the trusted server database 248 may access the file and/or data store in order to supplement and or generate the information about settings.
- the trusted server database 248 may include a listing of trusted web application origin(s) 180 and/or a listing of trusted server(s) 260 and/or some other networked device(s) configured to provide access to privileged static hosted web applications.
- the trusted server database 248 may include whitelists and/or blacklists indicating trusted web application origin(s) (e.g., corresponding addresses of trusted/untrusted web application origin(s)).
- a whitelist may include a list of permissible trusted web application origin(s).
- a blacklist may include a list of non-permissible trusted web application origin(s).
- a server may be configured as a trusted web application origin, but be listed on a blacklist based on some criteria (e.g., user exclusion and/or past issues).
- whitelists and blacklists may be used.
- a whitelist in a corporate environment may allow employees to utilize productivity applications as privileged static hosted web applications, and a blacklist may prevent specific games or social applications from being used as privileged static hosted web applications.
- a parent may create a blacklist to deny children from utilizing certain categories (e.g., payment based games) of privileged static hosted web applications.
- the system 200 can also include a trusted server 260 that includes one or more processors 262, one or more memories 278, an operating system (O/S) 264, an application server 266, a verification module 268, trusted criteria 270, a verified web applications datastore 272, and an other web applications datastore 272.
- a trusted server 260 that includes one or more processors 262, one or more memories 278, an operating system (O/S) 264, an application server 266, a verification module 268, trusted criteria 270, a verified web applications datastore 272, and an other web applications datastore 272.
- the verification module 268 may be configured to utilize the trusted criteria 270 in order to validate assurance characteristics of the web application.
- the verification module 268 may verify that a web application can be a trusted web application based on assurance characteristics of the web application.
- the verification module 268 may be configured to gather, and store associated information in the trusted criteria 270, a great deal of information about how an application is actually used and about any security issues a user encounters after the application is accessed from the verification module 268, for example.
- the verification module 268 may analyze web applications based on signals related to security issues, where such signals may include signals based on information about how applications actually perform after the web applications are accessed from the verification module 268 and executed by a client computing device. For example, users may report malware or bugs to the verification module 268.
- the verification module 268 may be configured to utilize information stored in the trusted criteria 270 to determine if a web application is a static web application.
- a static web application is not dynamic with regard to changes to individual objects that make up the web application.
- a static web application is changed by replacing (e.g., uploading for use) the entirety of the web application.
- a developer of a static webpage can not replace individual web application objects (e.g., a web page or a user interface or a script) without replacing the web application as a whole.
- the verification module 268 may be configured to utilize information stored in the trusted criteria 270 to revoke (or remove) a web application from a trusted status should any information associated with the application change placing the trustworthiness of the application in doubt.
- the verification module 268 may be configured to track access into and out of the web application.
- the web application Upon determining (e.g., verifying) a web application is trusted and static, the web application is associated with (or stored in) verified web applications datastore 272.
- the web application upon verification, the web application becomes a privileged static hosted web application.
- web application objects, metadata, URLs, and the like are associated with the verified web applications datastore 272.
- the verified, trusted web applications as a privileged static hosted web application, may have an associated URL (relative or absolute).
- objects associated with the web application may be indexed (e.g., using a web crawler). Therefore, the web application, as privileged static hosted web application, (and its associated objects) may be searchable using a search engine. Further, objects or content associated with a privileged static hosted web application may be navigated to via a browser or shared (linked to) other applications.
- Other web applications datastore 274 may include web applications not intended as privileged static hosted web application (e.g., the other web applications may not be static) that may be associated with the trusted server 260.
- the other web applications datastore 274 may include web applications waiting to for, or in the process of, verification.
- a developer may load a web application version 2.0 in association with the other web applications datastore 274 and "tag" the web application 2.0 as a replacement/upgrade for a web application 1.0.
- the web application 2.0 is verified (e.g., checked as static, checked as secure, and the like) and once verified web application 2.0 is associated with verified web applications datastore 272.
- web application 2.0 may be associated with other web applications datastore 274.
- An out of date or historical web application associated with the other web applications datastore 274 may have any associated URLs disabled so that access is disabled.
- the computing device 110, trusted server 260 and/or sync server 240 may be at least one computing device and should be understood to represent virtually any computing device configured to perform the methods described herein.
- the computing device 110, trusted server 260 and/or sync server 240 may be understood to include various standard components which may be utilized to implement the techniques described herein, or different or future versions thereof.
- the computing device 110, trusted server 260 and/or sync server 240 are illustrated as including the at least one processor 205, 242 and 262, respectively, as well as the at least one memory 210, 250 and 278 (e.g., a non- transitory computer readable storage medium) respectively.
- the at least one processor 205, 242 and/or 262 may be formed on a substrate and may be utilized to execute instructions stored on the at least one memory 210, 250 and/or 278, so as to thereby implement the various features and functions described herein, or additional or alternative features and functions.
- the at least one processor 205, 242 and/or 262 and the at least one memory 210, 250 and/or 278 may be utilized for various other purposes.
- the at least one memory 210, 250 and/or 278 may be understood to represent an example of various types of memory and related hardware and software which might be used to implement any one of the modules described herein.
- Systems and/or methods described above and/or below may include data and/or storage elements.
- the data and/or storage elements (e.g., data base tables) may be stored in, for example, the at least one memory 210, 250 and/or 278.
- FIGS. 3-6 are flowcharts of methods according to example embodiments.
- the steps described with regard to FIGS. 3-6 may be performed due to the execution of software code stored in a memory (e.g., at least one memory 210, 250 and/or 278) associated with an apparatus (e.g., as shown in FIGS. 1 and 2) and executed by at least one processor (e.g., at least one processor 205, 262 and/or 242) associated with the apparatus.
- a processor e.g., at least one processor 205, 262 and/or 242
- alternative embodiments are contemplated such as a system embodied as a special purpose processor.
- the steps described below are described as being executed by a processor, the steps are not necessarily executed by a same processor. In other words, at least one processor may execute the steps described below with regard to FIGS. 3-6.
- FIG. 3 is a flowchart of a method according to at least one example embodiment.
- a web application is received at a trusted server.
- a web application developer may develop an application that is a candidate to become a privileged static hosted web application.
- the web application (including all, or substantially all, application objects) may be communicated from the developers computing device (not shown) to a trusted server (e.g., trusted server 260).
- the trusted server may store the received web application.
- trusted server 260 may store the web application in the other web applications datastore 274 and/or in memory 278.
- assurance characteristics of the web application are validated.
- the verification module 268 may validate assurance characteristics associated with the web application.
- the assurance characteristics that may be validated and the mechanism by which the assurance characteristics may be validated may be stored in the trust criteria 270.
- the assurance characteristics may be associated with the objects associated with the web application.
- a web application that includes an object identified as malware, a virus, a Trojan or some other form of malicious software may be deemed untrustworthy.
- a web application that includes links to objects or objects that are external (e.g., not associated with or stored on the trusted server) may be considered untrustworthy or not static because the objects could be changed outside of the trusted environment.
- assurance characteristics may be associated with the developer. For example, a developer that has many reports of problematic web applications may be considered untrustworthy or may have a ranking associated with a lower trustworthiness score than other developers. Accordingly, web applications associated with an untrustworthy developer may be considered untrustworthy.
- step S320 access to the web application is provided via a uniform resource locator (URL) that identifies a location of the web application in a public Internet.
- URL uniform resource locator
- the objects associated with the now privileged static hosted web application may be associated with (or stored in) the verified web applications datastore 272 which then may be accessed via the public Internet (e.g., universally available to a user from anywhere within the Internet).
- Each of the objects within the web application (e.g., the privileged static hosted web application) may be relative to an initial or start-up object.
- the URL associated with the initial or start-up object may be published as the access mechanism to the web application.
- each of the objects within the web application e.g., the privileged static hosted web application
- each of the absolute URLs may be published.
- FIG. 4 is a flowchart of another method according to at least one example embodiment.
- a server is identified as a trusted server.
- a client computing device e.g., computing device 110
- the server may have a unique identification.
- the client computing device may have access to a list of trusted servers.
- the list of trusted servers may be stored locally and/or be accessed through a networked server (e.g., sync server 240).
- the unique identification of the server is used to search the list of trusted servers to determine if the server is a trusted server. In other words, if the server is included in the list of trusted servers, the server is identified as a trusted server.
- the server may communicate some set of information that the client device can use to determine the trustworthiness of the server.
- a user of the client device may select the server as a trusted server based on, for example, ownership of the server.
- a web application associated with the trusted server is accessed via a uniform resource locator (URL) that identifies the web application.
- a uniform resource locator URL
- a privileged static hosted web application may have an associated URL.
- the URL may be associated with an initial or start-up object for the web application with a relative URL for other objects of the web application and/or each object of the web application may have an associated absolute URL.
- each object may be linked to, called and/or accessed using any internet protocol.
- the privileged static hosted web application may have properties similar to those of a packaged web application. One of those properties is the ability to operate offline. Therefore, accessing the web application may include downloading (e.g., via HTML) all of the objects associated with the web application. As discussed above, the web application being a privileged static hosted web application is static. Therefore, downloading the objects as static objects ensures consistency with regard to functionality of the web application which is a property of packaged web applications.
- a runtime (e.g., runtime 218 shown in FIG. 2) associated with the client (e.g., computing device 110) interacts with a host server (e.g., trusted server 260) such that the host server includes the objects associated with the web application and the runtime executes the web application. Accordingly, the runtime communicates with the host server and collaborates with the host server in the execution of the web application (e.g., privileged static hosted web application). In contrast to a packaged application, there is no prior download of all of the objects associated with the web application. In other words, the privileged static hosted web application is executed by the runtime without a prior download of the web application objects.
- a host server e.g., trusted server 260
- the runtime communicates with the host server and collaborates with the host server in the execution of the web application (e.g., privileged static hosted web application).
- the privileged static hosted web application is executed by the runtime without a prior download of the web application objects.
- step S415 at least one permission to utilize at least one local resource of a client device is granted during execution of the web application by the client device.
- the web application e.g., a privileged static hosted web application
- APIs application programming interfaces
- the web application may operate without appearing to run in a browser, e.g., without the browser "chrome", tabs, or other user interface of the browser. In such a case, the web application would operate in a standalone window without access to content scripts or APIs related to browser state such as cookies, history, bookmarks, open tabs, etc.
- the web application may be granted access to operating system (e.g., Browser-OS or operating system 214) resources (e.g., API's).
- resources e.g., API's.
- the web application may be granted access to USB drives, BLUETOOTH devices, open raw network sockets, act as servers, or access to the local filesystem, as examples.
- FIG. 5 is a flowchart of another method according to at least one example embodiment.
- the method includes identifying, by at least one processor (e.g., a silicon-based hardware processor) of a computing system, a web application available for hosting by a server for execution by a browser executing on the client computing device.
- the web application is ranked automatically based on signals relevant to potential malicious behavior of the web applications when the web application is executed by a browser executing on the client computing device.
- the web application is selected as a privileged static hosted web application based on the ranking.
- the verification module 268 may be configured to select a web application based on the permissions used by a particular web application. For example, a score can be assigned to each permission that might be used by a web application, where the scores are indicative of a risk level of a web application that uses the permission. For example, a score assigned to a cross-origin XML HttpRequest permission might be very high, because of the potential for malicious consequences when this permission is utilized. Similarly, a score for a permission for the web application to run native code on the client device or for a permission for the web app to access or store a user's password information might be very high.
- a score assigned to a permission to determine a time when the web application is idle might be very low.
- a score assigned to a permission to access all of the user's data on all websites visited by the user may be higher than a score assigned to a permission to access a user's data on a particular single website or on a small number of websites.
- the scores can be quantitative scores that range from a minimum value to a maximum value and that can take on discrete intermediate values between the minimum and a maximum value.
- the values of a score can have one or more significant digits. For example, scores can range from 1 to 10 in steps of 1, 0.1, 0.01, etc.
- the scores assigned to a permission can be determined by one or more experts who assign scores based on their anticipated use in a web application.
- a score for a permission can be determined based on performance metrics associated with a web application that use a particular permission. For example, a score for a permission can be determined based on a frequency with which a web application uses the permission crashes when executed on a client computing device.
- the permissions that are declared by a web application can be determined automatically (i.e., without human interaction).
- the application verification module 268 can automatically parse the manifest file of the proposed application to determine the permissions that would be sought from a user who would access the proposed application.
- the permissions declared by a web application can be analyzed by the verification module to determine a score and a rank of the web application based, at least in part, on the permissions declared by the web application.
- a score for the potential malicious behavior of a web application can be based on an aggregation of the individual scores of permissions used by the web application.
- web application A, B, C, D, E, F, G identified by their ID in the table, can declare the use of one or more of permissions PI, P2, P3, P4, P5, P6, each of which has been assigned an individual score.
- the score of the permission is shown in the corresponding cell of the Table 1.
- a score for a web application can be the sum of the individual scores for permissions declared by the web application, as shown in the most right- hand column of Table 1, which ranks the web applications by their total score.
- a score for a web application can be a weighted sum of the individual scores for permissions declared by the web application.
- a score for a web application can be equal to the maximum score of a permission declared by the web application for example, as shown in Table 2 below, which provides another ranking of web application.
- the way a score for a web application is determined based on permissions can depend on what the web application is. For example, an algorithm used to determine a score for a game web application based on the permissions declared by the game application can be different than algorithm used to determine a score for a productivity web application based on the permissions declared by the productivity application.
- the scores assigned to a web application can also be determined based on the methods or functions called by a permission that is declared by the web application. In general, a score for a web application that declares a particular potentially dangerous permission but does not make calls to dangerous methods with that permission will have a lower score than a web application that uses the same permission that makes calls to dangerous methods in that permission.
- a web application that declares the cross-origin XML HttpRequest permission and uses the permission to request access to domains known to be safe may have a lower score than a web application that declares the cross-origin XML HttpRequest permission and uses the permission to request access to all domains (e.g., http://*/) or that uses the permission to request access that is known to be less than safe or that is not known explicitly to be safe.
- the influence of a method call can affect the score assigned to a permission declared by a web application by increasing/decreasing the score that a particular permission would receive otherwise.
- method calls may receive their own scores that are considered along with scores for permissions in an algorithm to determine a score for a web application, such as, for example, as explained above.
- the verification module 268 can check if the code of the proposed web application matches one or more known malicious code sequences (i.e., malware) that may result in harm to the user to the client computing device.
- the trust criteria 270 can store a plurality of known fingerprints of malicious code sequences, and the verification module 268 can parse the code of the proposed web application and then compare the parsed code to the fingerprints of stored malicious code. Then, if the code of the proposed application matches one or more known potentially malicious code sequences, the proposed application can receive a higher score than the proposed application would receive based on its declared permissions alone.
- the verification module 268 also can check if the code of the proposed web application matches one or more potentially malicious code sequences that may leave the client device vulnerable to security attacks (e.g., cross-site scripting (XSS) attacks that enable attackers to inject client-side script into web pages executed by the client computing device) or that indicate that the code of the web application has changed significantly and therefore may have changed its purpose.
- the trust criteria 270 can store a plurality of known fingerprints of suspicious code sequences, and the verification module 268 can parse the code of the proposed web application and then compare the parsed code to the fingerprints of code stored in the application analysis database. Then, if the code of the proposed application matches one or more suspicious code sequences the proposed application can receive a higher score than the proposed application would receive based on its declared permissions alone.
- web applications In addition to the signals described above used to determine a ranking of web application based on signals relevant to potential malicious behavior of the web application, web applications also can be ranked based on reputation-based measures. For example, a score determined for a web application based on the permissions declared by the web application can be supplemented (e.g., increased or decreased) based on various information that can be used to infer a reputation of the web application.
- a first web application that contacts a website that has been determined to include code that causes malicious, unsecured, or risky behavior when executed may receive a higher score than a second web application that does not contact the website, even if the first and second web applications declare the same permissions and make the same method calls.
- a web application may be selected as privileged static hosted web application if a score and/or rank is between a first threshold value and a second threshold value. For example, if a web application has a corresponding score and/or rank that is below a first threshold value, the risk may be so low (e.g., no permissions requested and/or no detected malware) that there is no need or desire to host the web application on a trusted server. However, if a web application has a corresponding score and/or rank that is above a second threshold value, the risk may be so high that the web application is considered to risky and/or untrustworthy. In between the first threshold value and the second threshold value may be web applications that are candidates for selection as a privileged static hosted web application. Alternatively, a web application that has a corresponding score and/or rank that is above or below a may be selected as a privileged static hosted web application.
- FIG. 6 is a flowchart of another method according to at least one example embodiment.
- a web application is received, by at least one processor, where source code for the received web application includes scripting language code.
- code of the received web application is rewritten to include code to track behavior of the received web application during execution of the re-written web application.
- the re-written web application is executed in a browser run by one or more processors of a computer system.
- step S620 determine, by one or more processors of the computer system, based on evaluation of results of executing the re-written web application whether the web application violates one or more predetermined conditions.
- the web application is selected as a privileged static hosted web application based on the violation.
- the trusted server 260 may be configured to receive a request and a copy of the proposed web application, the trusted server 260 can initiate an automatic vetting process of the proposed web application.
- the automatic vetting process can be performed by the verification module 268 within the trusted server 260 before it is offered for sale as a hosted web application.
- the proposed web application can be stored in the other web apps datastore 274 of the trusted server 260 before it is vetted and approved.
- Verification module 268 can include one or more memories configured for storing executable code as well as one or more associated processors. In one implementation, the verification module 268 can automatically dynamically test a web application that is proposed for use a privileged static hosted web application, for example, for inclusion in the verified web applications datastore 272, to determine whether the proposed web application violates one or more predetermined conditions that would trigger either exclusion of the proposed web application or a mandatory manual review of the proposed web application should be performed. When the proposed web application is received in a package format, a file extractor (e.g., as a sub element of the verification module 268) can extract files from the package.
- a file extractor e.g., as a sub element of the verification module 268
- the file extractor can extract the manifest file, which can include information such as the title, version and build data of the web application, and the location path to source code files that are included in the package.
- the file extractor can access the manifest file to retrieves a listing of files that include source code.
- the file extractor can scan file extensions of the files included in the web application package and identify files with extensions specific to source code files.
- Source code of the received web application can be rewritten to include code to track behavior of the web application during execution of the rewritten web application.
- the rewritten code of the web application can be executed by the trusted server 260.
- the rewritten code of the web application can be executed by a browser that runs within a virtual machine of the trusted server 260. While the rewritten web application executes within the browser, it can connect to a network, such as the Internet, through a proxy. While the rewritten web application executes, its dynamic behavior can be logged and analyzed.
- an automatic determination i.e., without human input or intervention
- an automatic determination can be made about whether the proposed web application would violate one or more predetermined conditions that are relevant to whether the proposed web application should be selected as a privileged static hosted web application. Then, based on evaluation of results of whether the web application violates a predetermined condition, an automatic determination (e.g., without human input or intervention) can be made whether the proposed web application can be a privileged static hosted web application, or whether to deny the proposed web application as a privileged static hosted web application, or whether to flag the proposed web application for further manual review.
- Web applications that utilize scripting language source code can receive a variety of inputs that can be used as values for variables in the source code.
- JavaScript event handlers may execute as a result of user actions such as clicking buttons or submitting forms that are presented to the user when the code is executed.
- JavaScript can accept user input, such as, for example, text input by a user as values for variables in the code.
- JavaScript can also accept uniform resource locators (URLs) as values for variables in the code, and information hosted on other tabs or frames, different from the tab or frame in which the JavaScript code of the web application executes, can communicate with JavaScript code of the web application through inter-frame communication abstractions such as URL fragment identifiers and the PostMessage operation of HTML 5. All of these various inputs to the scripting language code can influence the dynamic behavior of the web application, sometimes in ways that are difficult to foresee. Therefore, the trusted server 260 can be used to evaluate automatically all, or at least a large number of the control paths of the proposed web application and determine the inputs that influence the control path taken by the web applications during execution of its code.
- URLs uniform resource locators
- the verification module 268 can rewrite source code of the proposed web application to replace certain inputs with symbolic variables, so that symbolic information is propagated during execution of the rewritten web applications. Then, whenever an operand of a JavaScript operation is symbolic, the operation can be simulated by creating a formula for the result of the operation in terms of symbolic information used for the operands. When symbolic value is propagated to a node of the control path for the code of the web application from which multiple branches occur, the verification module 268 can determine the inputs that would cause the code execution to propagate down each branch.
- Nodes in the control path can be associated with control words in the source code.
- control words in a JavaScript code many include “if, “else”, “for”, “ease”, “switch”, “default”, “break”, etc.
- Control words are specific to a particular programming language used to for the source code of a web application.
- the verification module 268 can monitor the propagation of symbolic information to determine which symbols, corresponding to variables in the code of the proposed web application, influence the control paths taken by the executed code. This symbolic execution of the rewritten code can be used to fully execute all possible control code paths in the source code of the proposed web application.
- the verification module 268 analyzes the dynamic behavior of the web application.
- a standard JavaScript interpreter can be used to interpret the rewritten web application.
- a JavaScript interpreter that is used to interpret the proposed web application can also be used to interpret the code of the rewritten web application and a special interpreter need not be used.
- control paths in the code of a proposed web application can be executed by, for example a virtual machine that mimics a client computing device, and the results of that execution can be used to determine whether the proposed web application violates one or more predetermined conditions that would prevent the proposed web application from being a privileged static hosted web application or that would require the proposed web application to be manually vetted before it could be a privileged static hosted web application.
- control paths that include operations may be flagged as potentially suspicious, either because of what the operation does or because of the inputs that the operation uses to perform its function.
- Such control paths that include potentially suspicious operations can be executed (e.g., by the virtual machine) to observe the dynamic behaviour of the proposed web application. While the web application executes, the verification module 268 can monitor the dynamic behaviour of the proposed web application, including the behaviour of the potentially suspicious operations. Monitoring the dynamic behaviour of the proposed web application can include logging network requests made by the web application, logging writes made to local storage, recording dialog boxes that appear as a result of the execution of the code, etc.
- the verification module 268 may list a web application having a code block that executes only when a URL input is equal to a particular value as a predetermined condition to look for during dynamic execution of the rewritten web application.
- a web application may operate benignly in nearly all cases, except when a URL input is equal to a particular value (e.g., "www . facebook . com"), and then in the anomalous case the web application may perform undesirable actions (e.g., sending spam, sending unwanted ads, or automatically downloading a new web application).
- the verification module 268 may list a web application having a code block that prompts a user to download and install a Windows binary file as a predetermined condition to look for during dynamic execution of the rewritten web application.
- Rewriting of a proposed web application also can be used to automatically detect leaks of sensitive information from a web application executing on a computing device across a network to a third-party site.
- Rewriting of a proposed web application in this manner can be known as "taint tracking" in which the flow of information within, and out of, a web application can be monitored automatically.
- a "taint" property can be added to tainted variables (e.g., variables that received and/or store personal and sensitive information of a user) that are identified in the code of the proposed web applications.
- An example tainted variable is a variable that receives the results of a function such as "GetBrowserBookmarks()" or "GetBrowserCookies().”
- Other examples of tainted variables include those variables that receive or store personal or sensitive information of the user such as, for example, information about a user's browsing history a user's browser bookmarks, a user's cookies, HTML forms, user preferences, saved passwords, a user's keyboard or mouse movements, HTML data, URLs associated with a user, etc.
- Var y x + a;
- variable "x" is a tainted variable because it receives a listing of the user's bookmarks and the browser that executes the code.
- Variable "y” is also a tainted variable because it is set, at least in part, to the data in variable "x.”
- primitive datatypes can be rewritten as objects and a "taint" property can be added to each object.
- the "document.cookie” which represents a primitive data type can be rewritten as an object, so that the result of the operation read(document.cookie) returns an object rather than a primitive string, and the object can contain extra information that identifies the result of the operation as a tainted variable.
- Verification module 268 also can determine operations in the source code that act as sinks for tainted sources and transmit personal or sensitive information of a user.
- the operation XMLHttpRequest() can act as a sink of personal or sensitive information.
- the cross-origin XML HttpRequest permission may be used to enable a web application or an extension application to request access to remote servers outside of its origin.Rewritten code of a proposed web application can be executed, and the taint property can be propagated through operations of the code as the code executes.
- the verification module 268 can monitor when the tainted source is passed through a sink such that information is leaked from the web application across a network.
- the verification module 268 can make an automatic determination of whether the web application violates one or more predetermined conditions (e.g., whether personal user information associated with a tainted variable is leaked from the web application across a network). Then, based on the determination of whether the web application violates one or more of the predetermined conditions the verification module 268 can associate the web application with a score. The score then can be used to automatically determine whether the web application can be a privileged static hosted web application, whether to prohibit the web application from being a privileged static hosted web application, or whether to flag the web application for manual review.
- predetermined conditions e.g., whether personal user information associated with a tainted variable is leaked from the web application across a network.
- the proposed web applications can be a privileged static hosted web application very quickly after the developer merchant requests that the application be listed.
- the proposed web applications can be selected as a privileged static hosted web application in less than 10 minutes, less than 5 minutes, less than 3 minutes, or less than 1 minute after the request has been received at the trusted server 260.
- the speed with which a web application can be listed for distribution to consumers after a developer merchant has requested that web applications be listed can provide for a satisfying experience for merchants and developers.
- a requested permission associated with the web application may match one or more predetermined permissions. If the requested permission matches one or more predetermined permissions, then the proposed web application is flagged for a manual vetting process before setting the proposed web application as a privileged static hosted web application.
- the web application may be executed for a period of time or use without permission to utilize the at least one local resource of the client device. Then, after the period of time or use, the web application may be granted permission to utilize the at least one local resource of the client device. In this way a user can grant the permissions upon developing some confidence in the security of the web application.
- a privileged static hosted web application may be associated with editing photos. Initially, the application may not be given permission to store edited (changed) photos locally (e.g., to a local hard drive or flash drive). After the user utilizes the photo editing application for a period of time, or a number of times, the user may trust the application and give the photo editing application, as a privileged static hosted web application, permission to locally store edited (changed) photos.
- the web application may be utilized for a trial period prior to, for example, purchasing the web application as a packaged web application.
- a user of a client device may search for a desired web application.
- the user With a typical packaged application the user must download the entire application prior to use. This download can take a significant amount of time and/or utilize a significant amount of resources.
- a privileged static hosted web application the user may use the web application and decide the web application does or does not meet the user's needs. Accordingly, after trialing the webpage has a privileged, static hosted web application, the user can choose to not install the web application as a packaged application.
- the user can download and install the packaged web application version of the trialed web application.
- the user can have some assurances that the privileged static hosted web application and the packaged application behave the same.
- This "trial" implementation may or may not include an execution of the application with a reduced or limited set of permissions to utilize local resource(s) of the client device.
- system 200 (and/or elements thereof) illustrated in FIG. 2 may be implemented as an element of and/or an extension of the generic computer device 700 and/or the generic mobile computer device 750 described below with regard to FIG. 7.
- system 200 illustrated in FIG. 2 may be implemented in a separate system from the generic computer device 700 and/or the generic mobile computer device 750 having some or all of the features described below with regard to the generic computer device 700 and/or the generic mobile computer device 750.
- system 200 (and/or elements thereof) illustrated in FIG. 2 may be implemented as an element of and/or an extension of the generic computer device 700 and/or the generic mobile computer device 750 described below with regard to FIG. 7.
- system 200 illustrated in FIG. 2 may be implemented in a separate system from the generic computer device 700 and/or the generic mobile computer device 750 having some or all of the features described below with regard to the generic computer device 700 and/or the generic mobile computer device 750.
- FIG. 7 shows an example of a generic computer device 700 and a generic mobile computer device 750, which may be used with the techniques described here.
- Computing device 700 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers.
- Computing device 750 is intended to represent various forms of mobile devices, such as personal digital assistants, cellular telephones, smart phones, and other similar computing devices.
- the components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
- Computing device 700 includes a processor 702, memory 704, a storage device 706, a high-speed interface 708 connecting to memory 704 and highspeed expansion ports 710, and a low speed interface 712 connecting to low speed bus 714 and storage device 706.
- Each of the components 702, 704, 706, 708, 710, and 712, are interconnected using various busses, and may be mounted on a common motherboard or in other manners as appropriate.
- the processor 702 can process instructions for execution within the computing device 700, including instructions stored in the memory 704 or on the storage device 706 to display graphical information for a GUI on an external input/output device, such as display 716 coupled to high speed interface 708.
- multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory.
- multiple computing devices 700 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).
- the memory 704 stores information within the computing device 700.
- the memory 704 is a volatile memory unit or units. In another implementation, the memory 704 is a non-volatile memory unit or units.
- the memory 704 may also be another form of computer-readable medium, such as a magnetic or optical disk.
- the storage device 706 is capable of providing mass storage for the computing device 700.
- the storage device 706 may be or contain a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations.
- a computer program product can be tangibly embodied in an information carrier.
- the computer program product may also contain instructions that, when executed, perform one or more methods, such as those described above.
- the information carrier is a computer- or machine-readable medium, such as the memory 704, the storage device 706, or memory on processor 702.
- the high speed controller 708 manages bandwidth-intensive operations for the computing device 700, while the low speed controller 712 manages lower bandwidth-intensive operations.
- the high-speed controller 708 is coupled to memory 704, display 716 (e.g., through a graphics processor or accelerator), and to high-speed expansion ports 710, which may accept various expansion cards (not shown).
- low-speed controller 712 is coupled to storage device 706 and low- speed expansion port 714.
- the low-speed expansion port which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet) may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- input/output devices such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- the computing device 700 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server 720, or multiple times in a group of such servers. It may also be implemented as part of a rack server system 724. In addition, it may be implemented in a personal computer such as a laptop computer 722. Alternatively, components from computing device 700 may be combined with other components in a mobile device (not shown), such as device 750. Each of such devices may contain one or more of computing device 700, 750, and an entire system may be made up of multiple computing devices 700, 750 communicating with each other.
- Computing device 750 includes a processor 752, memory 764, an input/output device such as a display 754, a communication interface 766, and a transceiver 768, among other components.
- the device 750 may also be provided with a storage device, such as a microdrive or other device, to provide additional storage.
- a storage device such as a microdrive or other device, to provide additional storage.
- Each of the components 750, 752, 764, 754, 766, and 768, are interconnected using various buses, and several of the components may be mounted on a common motherboard or in other manners as appropriate.
- the processor 752 can execute instructions within the computing device 750, including instructions stored in the memory 764.
- the processor may be implemented as a chipset of chips that include separate and multiple analog and digital processors.
- the processor may provide, for example, for coordination of the other components of the device 750, such as control of user interfaces, applications run by device 750, and wireless communication by device 750.
- Processor 752 may communicate with a user through control interface
- the display 754 may be, for example, a TFT LCD (Thin-Film-Transistor Liquid Crystal Display) or an OLED (Organic Light Emitting Diode) display, or other appropriate display technology.
- the display interface 756 may include appropriate circuitry for driving the display 754 to present graphical and other information to a user.
- the control interface 758 may receive commands from a user and convert them for submission to the processor 752.
- an external interface 762 may be provide in communication with processor 752, so as to enable near area communication of device 750 with other devices.
- External interface 762 may provide, for example, for wired communication in some implementations, or for wireless communication in other implementations, and multiple interfaces may also be used.
- the memory 764 stores information within the computing device 750.
- the memory 764 can be implemented as one or more of a computer-readable medium or media, a volatile memory unit or units, or a non-volatile memory unit or units.
- Expansion memory 774 may also be provided and connected to device 750 through expansion interface 772, which may include, for example, a SIMM (Single In Line Memory Module) card interface.
- SIMM Single In Line Memory Module
- expansion memory 774 may provide extra storage space for device 750, or may also store applications or other information for device 750.
- expansion memory 774 may include instructions to carry out or supplement the processes described above, and may include secure information also.
- expansion memory 774 may be provide as a security module for device 750, and may be programmed with instructions that permit secure use of device 750.
- secure applications may be provided via the SIMM cards, along with additional information, such as placing identifying information on the SIMM card in a non-hackable manner.
- the memory may include, for example, flash memory and/or NVRAM memory, as discussed below.
- a computer program product is tangibly embodied in an information carrier.
- the computer program product contains instructions that, when executed, perform one or more methods, such as those described above.
- the information carrier is a computer- or machine-readable medium, such as the memory 764, expansion memory 774, or memory on processor 752, that may be received, for example, over transceiver 768 or external interface 762.
- Device 750 may communicate wirelessly through communication interface 766, which may include digital signal processing circuitry where necessary. Communication interface 766 may provide for communications under various modes or protocols, such as GSM voice calls, SMS, EMS, or MMS messaging, LTE, CDMA, TDMA, PDC, WCDMA, CDMA2000, or GPRS, among others. Such communication may occur, for example, through radio-frequency transceiver 768. In addition, short- range communication may occur, such as using a Bluetooth, WiFi, or other such transceiver (not shown). In addition, GPS (Global Positioning System) receiver module 770 may provide additional navigation- and location-related wireless data to device 750, which may be used as appropriate by applications running on device 750.
- GPS Global Positioning System
- Device 750 may also communicate audibly using audio codec 760, which may receive spoken information from a user and convert it to usable digital information. Audio codec 760 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of device 750. Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating on device 750.
- Audio codec 760 may receive spoken information from a user and convert it to usable digital information. Audio codec 760 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of device 750. Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating on device 750.
- the computing device 750 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a cellular telephone 780. It may also be implemented as part of a smart phone 782, personal digital assistant, or other similar mobile device.
- Various implementations of the systems and techniques described here can be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof.
- ASICs application specific integrated circuits
- These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- the systems and techniques described here can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- a keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user can be received in any form, including acoustic, speech, or tactile input.
- the systems and techniques described here can be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back end, middleware, or front end components.
- the components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network ("LAN”), a wide area network (“WAN”), and the Internet.
- LAN local area network
- WAN wide area network
- the Internet the global information network
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network.
- the relationship of client and server arises by virtue of computer programs
- Methods discussed above may be implemented by hardware, software, firmware, middleware, microcode, hardware description languages, or any combination thereof.
- the program code or code segments to perform the necessary tasks may be stored in a machine or computer readable medium such as a storage medium and/or a non-transitory computer-readable storage medium.
- a processor(s) e.g., a processor formed on a silicon or GaAs substrate
- references to acts and symbolic representations of operations that may be implemented as program modules or functional processes include routines, programs, objects, components, data structures, etc., that perform particular tasks or implement particular abstract data types and may be described and/or implemented using existing hardware at existing structural elements.
- Such existing hardware may include one or more Central Processing Units (CPUs), digital signal processors (DSPs), application- specific-integrated-circuits, field programmable gate arrays (FPGAs) computers or the like.
- CPUs Central Processing Units
- DSPs digital signal processors
- FPGAs field programmable gate arrays
- the software implemented aspects of the example embodiments are typically encoded on some form of non-transitory program storage medium or implemented over some type of transmission medium.
- the program storage medium may be magnetic (e.g., a floppy disk or a hard drive) or optical (e.g., a compact disk read only memory, or "CD ROM"), and may be read only or random access.
- the transmission medium may be twisted wire pairs, coaxial cable, optical fiber, or some other suitable transmission medium known to the art. The example embodiments not limited by these aspects of any given implementation.
Abstract
Description
Claims
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201361918145P | 2013-12-19 | 2013-12-19 | |
US14/522,897 US10104081B2 (en) | 2013-12-19 | 2014-10-24 | Privileged static hosted web applications |
PCT/US2014/070829 WO2015095310A1 (en) | 2013-12-19 | 2014-12-17 | Privileged static hosted web applications |
Publications (2)
Publication Number | Publication Date |
---|---|
EP3085050A1 true EP3085050A1 (en) | 2016-10-26 |
EP3085050B1 EP3085050B1 (en) | 2020-08-26 |
Family
ID=53401401
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP14824307.4A Active EP3085050B1 (en) | 2013-12-19 | 2014-12-17 | Privileged static hosted web applications |
Country Status (5)
Country | Link |
---|---|
US (1) | US10104081B2 (en) |
EP (1) | EP3085050B1 (en) |
CN (1) | CN105940654B (en) |
DE (1) | DE202014010889U1 (en) |
WO (1) | WO2015095310A1 (en) |
Families Citing this family (36)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20140157256A1 (en) * | 2012-11-30 | 2014-06-05 | Donotgeotrack | Owner/user-driven controlled distribution of software for mobile devices and personal computer through a privileged portal |
US9310981B2 (en) * | 2013-02-13 | 2016-04-12 | Dropbox, Inc. | Seamless editing and saving of online content items using applications |
US10104081B2 (en) | 2013-12-19 | 2018-10-16 | Google Llc | Privileged static hosted web applications |
US10380006B2 (en) * | 2015-06-05 | 2019-08-13 | International Business Machines Corporation | Application testing for security vulnerabilities |
US10089469B1 (en) * | 2015-06-12 | 2018-10-02 | Symantec Corporation | Systems and methods for whitelisting file clusters in connection with trusted software packages |
EP3121749B1 (en) * | 2015-07-22 | 2019-06-26 | Nxp B.V. | Method and apparatus for ensuring control flow integrity |
US10878123B2 (en) * | 2016-04-11 | 2020-12-29 | Hewlett-Packard Development Company, L.P. | Application approval |
US10313383B2 (en) * | 2016-06-01 | 2019-06-04 | Mastercard International Incorporated | Systems and methods for use in evaluating vulnerability risks associated with payment applications |
US10719631B2 (en) * | 2016-07-27 | 2020-07-21 | Tortuga Logic Inc. | Method and system for detecting hardware trojans and unintentional design flaws |
US10586045B2 (en) * | 2016-08-11 | 2020-03-10 | The Mitre Corporation | System and method for detecting malware in mobile device software applications |
US10558771B2 (en) | 2017-06-30 | 2020-02-11 | Tortuga Logic Inc. | Systems and methods for security and safety fault analysis using information flow |
US10728250B2 (en) * | 2017-07-31 | 2020-07-28 | International Business Machines Corporation | Managing a whitelist of internet domains |
US10902148B2 (en) * | 2017-12-07 | 2021-01-26 | Verizon Media Inc. | Securing digital content using separately authenticated hidden folders |
CN110058987B (en) * | 2018-01-18 | 2023-06-27 | 伊姆西Ip控股有限责任公司 | Method, apparatus, and computer readable medium for tracking a computing system |
US10931675B2 (en) * | 2018-04-10 | 2021-02-23 | Microsoft Technology Licensing, Llc | Local API access authorization |
US10915638B2 (en) * | 2018-05-16 | 2021-02-09 | Target Brands Inc. | Electronic security evaluator |
CN108833369B (en) * | 2018-05-28 | 2021-06-29 | 郑州云海信息技术有限公司 | Method, device and equipment for accessing file system |
US11188353B2 (en) * | 2018-07-12 | 2021-11-30 | Vmware, Inc. | Runtime extension system for bundled web application |
US11356532B1 (en) * | 2018-08-10 | 2022-06-07 | Meta Platforms, Inc. | Systems and methods for packaging web resources |
US11714955B2 (en) | 2018-08-22 | 2023-08-01 | Microstrategy Incorporated | Dynamic document annotations |
US11815936B2 (en) | 2018-08-22 | 2023-11-14 | Microstrategy Incorporated | Providing contextually-relevant database content based on calendar data |
JP7224821B2 (en) * | 2018-09-11 | 2023-02-20 | キヤノン株式会社 | Device diagnostic web system and device diagnostic method |
US11188622B2 (en) * | 2018-09-28 | 2021-11-30 | Daniel Chien | Systems and methods for computer security |
US11682390B2 (en) | 2019-02-06 | 2023-06-20 | Microstrategy Incorporated | Interactive interface for analytics |
US11949677B2 (en) * | 2019-04-23 | 2024-04-02 | Microsoft Technology Licensing, Llc | Resource access based on audio signal |
US11288637B2 (en) * | 2019-09-16 | 2022-03-29 | Microstrategy Incorporated | Systems and methods for analytics integration into electronic applications |
US11366862B2 (en) * | 2019-11-08 | 2022-06-21 | Gap Intelligence, Inc. | Automated web page accessing |
US11677754B2 (en) | 2019-12-09 | 2023-06-13 | Daniel Chien | Access control systems and methods |
CN111262884B (en) * | 2020-03-16 | 2021-06-11 | 佛山市诚名信息科技有限公司 | Smart home access authorization method and device, smart home system and server |
US11611629B2 (en) * | 2020-05-13 | 2023-03-21 | Microsoft Technology Licensing, Llc | Inline frame monitoring |
US11509463B2 (en) | 2020-05-31 | 2022-11-22 | Daniel Chien | Timestamp-based shared key generation |
US11438145B2 (en) | 2020-05-31 | 2022-09-06 | Daniel Chien | Shared key generation based on dual clocks |
DE102021129026A1 (en) | 2021-11-08 | 2023-05-11 | KraLos GmbH | Methods and associated computer systems for ensuring the integrity of data |
LU500837B1 (en) | 2021-11-08 | 2023-05-15 | KraLos GmbH | Methods and associated computer systems for ensuring the integrity of data |
US11843618B1 (en) * | 2022-05-15 | 2023-12-12 | Uab 360 It | Optimized analysis for detecting harmful content |
US11790107B1 (en) | 2022-11-03 | 2023-10-17 | Vignet Incorporated | Data sharing platform for researchers conducting clinical trials |
Family Cites Families (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2007106185A2 (en) * | 2005-11-22 | 2007-09-20 | Mashlogic, Inc. | Personalized content control |
US8635701B2 (en) * | 2008-03-02 | 2014-01-21 | Yahoo! Inc. | Secure browser-based applications |
US8800043B2 (en) * | 2008-05-19 | 2014-08-05 | Microsoft Corporation | Pre-emptive pre-indexing of sensitive and vulnerable assets |
US8725793B2 (en) * | 2009-04-03 | 2014-05-13 | Google Inc. | Architectural pattern for persistent web application design |
US9215548B2 (en) | 2010-09-22 | 2015-12-15 | Ncc Group Security Services, Inc. | Methods and systems for rating privacy risk of applications for smart phones and other mobile platforms |
US9672355B2 (en) * | 2011-09-16 | 2017-06-06 | Veracode, Inc. | Automated behavioral and static analysis using an instrumented sandbox and machine learning classification for mobile security |
US8181254B1 (en) | 2011-10-28 | 2012-05-15 | Google Inc. | Setting default security features for use with web applications and extensions |
US9386105B2 (en) | 2011-11-02 | 2016-07-05 | Microsoft Technology Licensing, Llc | Techniques for dynamic domain-based isolation |
US8935755B1 (en) * | 2012-02-06 | 2015-01-13 | Google Inc. | Managing permissions and capabilities of web applications and browser extensions based on install location |
US9135445B2 (en) * | 2012-03-19 | 2015-09-15 | Google Inc. | Providing information about a web application or extension offered by website based on information about the application or extension gathered from a trusted site |
US10104081B2 (en) | 2013-12-19 | 2018-10-16 | Google Llc | Privileged static hosted web applications |
-
2014
- 2014-10-24 US US14/522,897 patent/US10104081B2/en active Active
- 2014-12-17 WO PCT/US2014/070829 patent/WO2015095310A1/en active Application Filing
- 2014-12-17 EP EP14824307.4A patent/EP3085050B1/en active Active
- 2014-12-17 CN CN201480074274.3A patent/CN105940654B/en active Active
- 2014-12-17 DE DE202014010889.7U patent/DE202014010889U1/en active Active
Also Published As
Publication number | Publication date |
---|---|
CN105940654A (en) | 2016-09-14 |
CN105940654B (en) | 2019-07-23 |
US10104081B2 (en) | 2018-10-16 |
WO2015095310A1 (en) | 2015-06-25 |
DE202014010889U1 (en) | 2017-02-20 |
EP3085050B1 (en) | 2020-08-26 |
US20150180875A1 (en) | 2015-06-25 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
EP3085050B1 (en) | Privileged static hosted web applications | |
US10681050B2 (en) | Ephemeral applications | |
US9135445B2 (en) | Providing information about a web application or extension offered by website based on information about the application or extension gathered from a trusted site | |
US9762598B1 (en) | Automatic dynamic vetting of browser extensions and web applications | |
Chin et al. | Bifocals: Analyzing webview vulnerabilities in android applications | |
US8843820B1 (en) | Content script blacklisting for use with browser extensions | |
US8935755B1 (en) | Managing permissions and capabilities of web applications and browser extensions based on install location | |
US20180121657A1 (en) | Security risk evaluation | |
US8181254B1 (en) | Setting default security features for use with web applications and extensions | |
WO2018208669A1 (en) | Systems and methods for providing user interfaces based on actions associated with untrusted emails | |
US10614208B1 (en) | Management of login information affected by a data breach | |
US9195809B1 (en) | Automated vulnerability and error scanner for mobile applications | |
US10943008B2 (en) | System and method of detecting hidden behavior of a browser extension | |
US9208235B1 (en) | Systems and methods for profiling web applications | |
US9443077B1 (en) | Flagging binaries that drop malicious browser extensions and web applications | |
US20180343174A1 (en) | Rule based page processing and network request processing in browsers | |
US11586726B2 (en) | Secure web framework | |
US9965744B1 (en) | Automatic dynamic vetting of browser extensions and web applications | |
AlJarrah et al. | Closer look at mobile hybrid apps configurations: Statistics and implications | |
EP3522057B1 (en) | System and method of detecting hidden behavior of a browser extension | |
CA3224095A1 (en) | Security risk remediation tool | |
CN113778506A (en) | Browser control method, system and device and electronic equipment |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PUAI | Public reference made under article 153(3) epc to a published international application that has entered the european phase |
Free format text: ORIGINAL CODE: 0009012 |
|
17P | Request for examination filed |
Effective date: 20160629 |
|
AK | Designated contracting states |
Kind code of ref document: A1Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
AX | Request for extension of the european patent |
Extension state: BA ME |
|
DAX | Request for extension of the european patent (deleted) | ||
RAP1 | Party data changed (applicant data changed or rights of an application transferred) |
Owner name: GOOGLE LLC |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: EXAMINATION IS IN PROGRESS |
|
17Q | First examination report despatched |
Effective date: 20180123 |
|
RIC1 | Information provided on ipc code assigned before grant |
Ipc: H04W 12/12 20090101ALI20200203BHEPIpc: G06F 21/62 20130101ALI20200203BHEPIpc: G06F 21/56 20130101ALI20200203BHEPIpc: H04L 29/06 20060101AFI20200203BHEPIpc: H04L 29/08 20060101ALI20200203BHEPIpc: H04W 12/08 20090101ALI20200203BHEPIpc: G06F 21/12 20130101ALI20200203BHEP |
|
GRAP | Despatch of communication of intention to grant a patent |
Free format text: ORIGINAL CODE: EPIDOSNIGR1 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: GRANT OF PATENT IS INTENDED |
|
INTG | Intention to grant announced |
Effective date: 20200317 |
|
GRAS | Grant fee paid |
Free format text: ORIGINAL CODE: EPIDOSNIGR3 |
|
GRAA | (expected) grant |
Free format text: ORIGINAL CODE: 0009210 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: THE PATENT HAS BEEN GRANTED |
|
AK | Designated contracting states |
Kind code of ref document: B1Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
REG | Reference to a national code |
Ref country code: GBRef legal event code: FG4D |
|
REG | Reference to a national code |
Ref country code: CHRef legal event code: EP |
|
REG | Reference to a national code |
Ref country code: ATRef legal event code: REFRef document number: 1307489Country of ref document: ATKind code of ref document: TEffective date: 20200915 |
|
REG | Reference to a national code |
Ref country code: IERef legal event code: FG4D |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R096Ref document number: 602014069474Country of ref document: DE |
|
REG | Reference to a national code |
Ref country code: LTRef legal event code: MG4D |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: FIFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200826Ref country code: GRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20201127Ref country code: SEFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200826Ref country code: HRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200826Ref country code: LTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200826Ref country code: BGFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20201126Ref country code: NOFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20201126Ref country code: PTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20201228 |
|
REG | Reference to a national code |
Ref country code: NLRef legal event code: MPEffective date: 20200826 |
|
REG | Reference to a national code |
Ref country code: ATRef legal event code: MK05Ref document number: 1307489Country of ref document: ATKind code of ref document: TEffective date: 20200826 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: ISFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20201226Ref country code: PLFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200826Ref country code: LVFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200826Ref country code: NLFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200826Ref country code: RSFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200826 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: DKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200826Ref country code: CZFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200826Ref country code: ROFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200826Ref country code: SMFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200826Ref country code: EEFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200826 |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R097Ref document number: 602014069474Country of ref document: DE |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: ALFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200826Ref country code: ATFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200826Ref country code: ESFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200826 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: SKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200826 |
|
PLBE | No opposition filed within time limit |
Free format text: ORIGINAL CODE: 0009261 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: NO OPPOSITION FILED WITHIN TIME LIMIT |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: ITFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200826 |
|
REG | Reference to a national code |
Ref country code: CHRef legal event code: PL |
|
26N | No opposition filed |
Effective date: 20210527 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: SIFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200826Ref country code: MCFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200826 |
|
REG | Reference to a national code |
Ref country code: BERef legal event code: MMEffective date: 20201231 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: IEFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20201217Ref country code: FRFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20201231Ref country code: LUFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20201217 |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R079Ref document number: 602014069474Country of ref document: DEFree format text: PREVIOUS MAIN CLASS: H04L0029060000Ipc: H04L0065000000 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: LIFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20201231Ref country code: CHFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20201231 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: TRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200826Ref country code: MTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200826Ref country code: CYFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200826 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: MKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200826 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: BEFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20201231 |
|
P01 | Opt-out of the competence of the unified patent court (upc) registered |
Effective date: 20230505 |
|
PGFP | Annual fee paid to national office [announced via postgrant information from national office to epo] |
Ref country code: GBPayment date: 20231227Year of fee payment: 10 |
|
PGFP | Annual fee paid to national office [announced via postgrant information from national office to epo] |
Ref country code: DEPayment date: 20231229Year of fee payment: 10 |