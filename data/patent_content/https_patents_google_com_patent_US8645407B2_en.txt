US8645407B2 - System and method for providing search query refinements - Google Patents
System and method for providing search query refinements Download PDFInfo
- Publication number
- US8645407B2 US8645407B2 US13/289,348 US201113289348A US8645407B2 US 8645407 B2 US8645407 B2 US 8645407B2 US 201113289348 A US201113289348 A US 201113289348A US 8645407 B2 US8645407 B2 US 8645407B2
- Authority
- US
- United States
- Prior art keywords
- query
- resource
- cluster
- queries
- refinement
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/242—Query formulation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/28—Databases characterised by their database models, e.g. relational or object models
- G06F16/284—Relational databases
- G06F16/285—Clustering or classification
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/33—Querying
- G06F16/332—Query formulation
- G06F16/3325—Reformulation based on results of preceding query
- G06F16/3326—Reformulation based on results of preceding query using relevance feedback from the user, e.g. relevance feedback on documents, documents sets, document terms or passages
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/35—Clustering; Classification
- G06F16/355—Class or cluster creation or modification
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/951—Indexing; Web crawling techniques
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99931—Database or file accessing
- Y10S707/99933—Query processing, i.e. searching
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99931—Database or file accessing
- Y10S707/99933—Query processing, i.e. searching
- Y10S707/99935—Query augmenting and refining, e.g. inexact access
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99941—Database schema or data structure
- Y10S707/99944—Object-oriented database structure
- Y10S707/99945—Object-oriented database structure processing
Definitions
- the present invention relates in general to query processing and, in particular, to a system and method for providing search query refinements.
- Search engines have evolved in tempo with the increased usage of the Web to enable users to find and retrieve relevant Web content in an efficient and timely manner. As the amount and types of Web content have increased, the sophistication and accuracy of search engines have likewise improved. Generally, search engines strive to provide the highest quality results in response to a search query. However, determining quality is difficult, as the relevance of retrieved Web content is inherently subjective and dependent upon the interests, knowledge and attitudes of the user.
- a typical search query scenario begins with either a natural language question or individual terms, often in the form of keywords, being submitted to a search engine.
- the search engine executes a search against a data repository describing information characteristics of potentially retrievable Web content and identifies the candidate Web pages. Searches can often return thousands or even millions of results, so most search engines typically rank or score only a subset of the most promising results.
- the top Web pages are then presented to the user, usually in the form of Web content titles, hyperlinks, and other descriptive information, such as snippets of text taken from the Web pages.
- a poorly-framed search query could be ambiguous or be too general or specific to yield responsive and high quality search results.
- terms within a search query can be ambiguous at a syntactic or semantic level.
- a syntactic ambiguity can be the result of an inadvertent homonym, which specifies an incorrect word having the same sound and possibly same spelling, but different meaning from the word actually meant.
- the word “bear” can mean to carry or can refer to an animal or an absence of clothing.
- a semantic ambiguity can be the result of improper context.
- the word “jaguar” can refer to an animal, a version of the Macintosh operating system, or a brand of automobile.
- search terms that are too general result in overly broad search results while search terms that are too narrow result in unduly restrictive and non-responsive search results.
- An embodiment provides a system and method for creating query refinement suggestions. At least one search document retrieved responsive to a query is matched to one or more stored queries. The stored query is scored as a potential query refinement suggestion.
- a further embodiment provides a system and method for providing search query refinements.
- a stored query and a stored document are associated as a logical pairing.
- a weight is assigned to the logical pairing.
- the search query is issued and a set of search documents is produced.
- At least one search document is matched to at least one stored document.
- the stored query and the assigned weight associated with the matching at least one stored document are retrieved.
- At least one cluster is formed based on the stored query and the assigned weight associated with the matching at least one stored document.
- the stored query associated with the matching at least one stored document are scored for the at least one cluster relative to at least one other cluster. At least one such scored search query is suggested as a set of query refinements.
- a further embodiment provides a system and method for integrating query refinement candidates. At least one search document retrieved responsive to a query is matched to one or more stored documents associated with a stored query and weight. At least one cluster is formed based on the stored query and weight associated with each stored document matched responsive to the query. At least one further search document retrieved responsive to a candidate query is matched to the one or more stored documents. At least one further cluster is formed based on the stored query and weight associated with each stored document matched responsive to the candidate query. The at least one cluster and the at least one further cluster are combined. The stored query for the combined cluster relative to at least one other cluster is scored as a potential query refinement suggestion.
- FIG. 1 is a block diagram showing a system for providing search query refinements, in accordance with the present invention.
- FIG. 2 is a functional block diagram showing a precomputation server, in accordance with the present invention.
- FIG. 3 is a functional block diagram showing a query refinement server, in accordance with the present invention.
- FIG. 4 is a flow diagram showing a method for providing search query refinements, in accordance with the present invention.
- FIG. 5 is a flow diagram showing the routine for performing precomputation for use in the method of FIG. 4 .
- FIGS. 6-9 are flow diagrams showing the routines for referencing query sources for use in the method of FIG. 5 .
- FIG. 10 is a flow diagram showing the routine for performing on-line query refinements for use in the method of FIG. 4 .
- FIG. 11 is a flow diagram showing a routine for integrating candidate query refinements for use in the method of FIG. 4 , in accordance with a further embodiment.
- FIG. 1 is a block diagram showing a system 10 for providing search query refinements, in accordance with the present invention.
- a plurality of individual clients 12 are communicatively interfaced to a server 11 via an internetwork 13 , such as the Internet, or other form of communications network, as would be recognized by one skilled in the art.
- the individual clients 12 are operated by users 19 who transact requests for Web content and other operations through their respective client 12 .
- each client 12 can be any form of computing platform connectable to a network, such as the internetwork 13 , and capable of interacting with application programs.
- a network such as the internetwork 13
- Exemplary examples of individual clients include, without limitation, personal computers, digital assistances, “smart” cellular telephones and pagers, lightweight clients, workstations, “dumb” terminals interfaced to an application server, and various arrangements and configurations thereof, as would be recognized by one skilled in the art.
- the internetwork 13 includes various topologies, configurations, and arrangements of network interconnectivity components arranged to interoperatively couple with enterprise, wide area and local area networks and include, without limitation, conventionally wired, wireless, satellite, optical, and equivalent network technologies, as would be recognized by one skilled in the art.
- each client 12 executes a Web browser 18 (“Web browser”), which preferably implements a graphical user interface and through which search queries are sent to a Web server 20 executing on the server 11 .
- Web browser Web browser
- Each search query describes or identifies information, generally in the form of Web content, which is potentially retrievable via the Web server 20 .
- the search query provides search characteristics, typically expressed as individual terms, such as keywords and the like, and attributes, such as language, character encoding and so forth, which enables a search engine 21 , also executing on the server 11 , to identify and send back search result documents, generally in the form of Web pages.
- Other styles, forms or definitions of search queries and characteristics are feasible, as would be recognized by one skilled in the art.
- the Web pages are sent back to the Web browser 18 for presentation, usually in the form of Web content titles, hyperlinks, and other descriptive information, such as snippets of text taken from the Web pages.
- the user can view or access the Web pages on the graphical user interface and can input selections and responses in the form of typed text, clicks, or both.
- the server 11 maintains a search database 15 in which Web content 22 is maintained.
- the Web content 22 could also be maintained remotely on other Web servers (not shown) interconnected either directly or indirectly via the internetwork 13 and which are preferably accessible by each client 12 .
- the server 11 maintains a cache 23 in which cached documents 24 and cached queries 25 are maintained.
- the cache 23 associates each cached document 24 with one or more cached queries 25 to improve searching performance, as is known in the art.
- the search engine 21 maintains a query log 26 in which records of previous search queries 27 are tracked.
- the search engine 21 preferably identifies the Web content 22 best matching the search characteristics to provide high quality Web pages, such as described in S. Brin and L. Page, “The Anatomy of a Large-Scale Hypertextual Search Engine” (1998) and in U.S. Pat. No. 6,285,999, issued Sep. 4, 2001 to Page, the disclosures of which are incorporated by reference.
- the search engine 21 operates on information characteristics describing potentially retrievable Web content. Note the functionality provided by the server 20 , including the Web server 20 and search engine 21 , could be provided by a loosely- or tightly-coupled distributed or parallelized computing configuration, in addition to a uniprocessing environment.
- Search queries can potentially be ambiguous or lack generality or specificity. Such poorly-framed search queries can be remedied through search query refinements, which can be provided in response to search query issuances.
- Search query refinements are generated and suggested as a two-part operation.
- a search query is associated with a search result document in a one-to-one association and a weight is assigned to each search query-search result document association, as further described below with reference to FIG. 2 .
- the search query-search result document associations and assigned weights are matched to at least one new search query to form scored clusters, as further described below with reference to FIG. 3 .
- the clusters are projected from multi-dimensional space based on constituent query terms and unique search queries associated with any document in each cluster are scored.
- the clusters are named based on the scoring, preferably by highest scores.
- the named clusters are sorted and provided as suggested refinements to the original search query.
- the individual computer systems include general purpose, programmed digital computing devices consisting of a central processing unit (processors 13 and 16 , respectively), random access memory (memories 14 and 17 , respectively), non-volatile secondary storage, such as a hard drive or CD ROM drive, network or wireless interfaces, and peripheral devices, including user interfacing means, such as a keyboard and display.
- Program code including software programs, and data is loaded into the RAM for execution and processing by the CPU and results are generated for display, output, transmittal, or storage.
- the Web browser 18 is an HTTP-compatible Web browser, such as the Internet Explorer, licensed by Microsoft Corporation, Redmond, Wash.; Navigator, licensed by Netscape Corporation, Mountain View, Calif.; or other forms of Web browsers, as are known in the art.
- FIG. 2 is a functional block diagram 30 showing a precomputation server 34 , in accordance with the present invention.
- the precomputation system 31 builds a set of associated queries and documents, preferably as an off-line operation.
- the precomputation system 31 includes a precomputation engine 34 , which associates a stored query 40 with a stored document 41 and assigns a weight 43 to each association 42 , as further described below with reference to FIG. 5 .
- the precomputation system 31 builds and maintains the association database 39 .
- the association database 39 stores the stored queries 40 , stored documents 41 , associations 42 , and weights 43 , which are used by a query refinement server to formulate and suggest query refinements, as further described below with reference to FIG. 3 .
- the precomputation system 31 also references the query log 26 , which is stored in the search database 15 , and the cached documents 24 and cached queries 25 , which are stored in the cache (both shown in FIG. 1 ).
- the precomputation engine 34 logically includes four modules. Other logical arrangements and definitions of functional modules are possible, as would be recognized by one skilled in the art.
- an associator 35 associates a stored query 40 with a stored document 41 and the stored query-stored document pairing is maintained in the association database 39 as a set of associations 42 .
- Each stored query 40 is associated with only one stored document 41 , although any given stored query 40 can be paired with one or more stored documents 41 in a one-to-many relationship.
- Each individual pairing is maintained as a separate association 42 in the association database 39 .
- the individual pairings need not be explicitly stored in the form of associations 42 and can instead be logically recorded or tracked, such as by using a mapping, table or other means for matching stored queries 40 with stored documents 41 , as would be recognized by one skilled in the art.
- the associator 35 also assigns a weight 43 to each association 42 .
- Each weight 43 estimates the relevance of the stored document 41 to the associated stored query 40 .
- the weights 43 for each of the multiple associations 42 are summed. If query frequency data is available, such as, for example, when a search query 59 is cached, the weight 43 is multiplied by the search query frequency, that is, the number of times that the search query 59 has been issued.
- a selector 36 selects one or more of the stored documents 41 for association with a stored query 40 based on an issued search.
- the selector 36 selects the stored documents 41 , which are each separately associated with a stored query 40 based on either a search document chosen following an issued search or from a set of search results received for an issued search, as further described below respectively with reference to FIGS. 6 and 7 .
- the regenerator 37 selects one or more of the stored documents 41 , which are each separately associated with a stored query 40 based on the query log 26 .
- the regenerator 37 regenerates the search results from previously tracked queries 27 , as reflected in the query log 26 .
- the regenerator 37 selects the regenerated search results as stored documents 41 , which are each separately associated with a previously tracked search query 27 , as further described below with reference to FIG. 8 .
- the inverter 38 selects one or more of the stored documents, which are each separately associated with a stored query 40 based on cached data.
- the inverter 38 evaluates the cached documents 24 and cached queries 25 and inverts the cached document-cached queries pairings into cached query-cached documents pairings.
- the inverter 38 selects the inverted cached documents 24 as stored documents 41 , which are each separately associated with a cached query 25 , as further described below with reference to FIG. 9 .
- the individual computer system including the precomputation system 31 , include general purpose, programmed digital computing devices consisting of a central processing unit (processor 33 ), random access memory (memory 32 ), non-volatile secondary storage, such as a hard drive or CD ROM drive, network or wireless interfaces, and peripheral devices, including user interfacing means, such as a keyboard and display.
- Program code including software programs, and data is loaded into the RAM for execution and processing by the CPU and results are generated for display, output, transmittal, or storage.
- the functionality provided by the precomputation system 31 could be provided by a loosely- or tightly-coupled distributed or parallelized computing configuration, in addition to a uniprocessing environment.
- FIG. 3 is a functional block diagram 50 showing a query refinement system 51 , in accordance with the present invention.
- the query refinement system 51 formulates and suggests one or more query refinements 67 .
- the query refinements can be formulated either as an on-line operation following a search query issuance or based on precomputations for a given set of search queries.
- the query refinement system 51 includes a query refinement engine 54 , which formulates the query refinements 67 as suggestions in response to an actual search query 59 , as further described below with reference to FIG. 10 , and which integrates candidate query refinements 68 , as further described below with reference to FIG. 11 .
- the query refinement engine 54 logically includes four modules. Other logical arrangements and definitions of functional modules are possible, as would be recognized by one skilled in the art.
- a matcher 55 matches one or more of the stored documents 41 to the actual search documents 60 , generated by the search engine 21 (shown in FIG. 1 ) in response to the issuance of a search query 59 .
- the search engine 21 also generates relevance scores 60 as part of the search query issuance.
- the matcher 55 identifies the stored queries 40 and assigned weights 43 using the associations 43 corresponding to the matched stored documents 41 .
- a clusterer 56 forms one or more clusters 62 based on term vectors 62 formed from the terms occurring in the matched stored queries 40 and corresponding weights 43 .
- the term vectors 62 are normalized vectors projected into multi-dimensional space, with each dimension corresponding to a term, which can be an individual word or word combination.
- the clusters 62 are ranked based on the relevance scores 61 assigned to the search documents 60 corresponding to the matched stored documents 41 and the number of stored documents 41 occurring in each cluster 62 .
- the highest ranking clusters 62 are selected as potential refinement clusters 64 .
- the clusters 62 are formed using a hierarchical agglomerative clustering algorithm, such as described in E.
- Rasmussen “Clustering Algorithms,” in “Information Retrieval,” (W. Frakes & R. Baeza-Yates eds. 1992), the disclosure of which is incorporated by reference, although other types of clustering algorithms could be used, as would be recognized by one skilled in the art.
- a scorer 57 computes center-weighted term vectors, referred to as centroids 65 , which each represent the weighted center of the term vector 62 of each cluster 63 .
- the centroids 65 are computed from each of the potential refinement clusters 64 .
- the scorer 57 assigns scores 66 to each unique search query in each of the potential refinement clusters 64 based on the number of stored documents 41 with which the search query is associated and the distance from the centroid 65 .
- Other approaches to computing centroids 65 could also be used, including using unweighted values and by varying the forms of weighting and averaging, as would be recognized by one skilled in the art.
- a presenter 58 identifies the substantially highest scoring search queries as one or more query refinements 67 to the user 19 .
- the details of the formulation of the search query refinements including the term vectors 62 , clusters 63 , potential refinement clusters 64 , centroids 65 , and scores 66 , are encapsulated by the query refinement engine 54 .
- a user 19 will only be aware of the actual suggested query refinements 67 .
- the individual computer system including the query refinement system 51 , include general purpose, programmed digital computing devices consisting of a central processing unit (processor 53 ), random access memory (memory 52 ), non-volatile secondary storage, such as a hard drive or CD ROM drive, network or wireless interfaces, and peripheral devices, including user interfacing means, such as a keyboard and display.
- Program code including software programs, and data is loaded into the RAM for execution and processing by the CPU and results are generated for display, output, transmittal, or storage.
- the functionality provided by the query refinement system 51 could be provided by a loosely- or tightly-coupled distributed or parallelized computing configuration, in addition to a uniprocessing environment.
- FIG. 4 is a flow diagram showing a method 70 for providing search query refinements, in accordance with the present invention.
- the method 70 is described as a sequence of process operations or steps, which can be executed, for instance, by the precomputation engine 34 of FIG. 2 and the query refinement engine 54 of FIG. 3 , or equivalent components.
- the method 70 performs precomputation (Block 71 ) and query refinement (Block 72 ).
- Precomputation (Block 71 ) builds the association database 39 (shown in FIG. 2 ) by associating and storing representative stored queries 40 with stored documents 41 , along with associations 42 and weights 43 , as further described below with reference to FIG. 5 .
- precomputation is performed as an off-line operation independent of any specific search query.
- Query refinement (Block 72 ) formulates query refinement suggestions structured to better frame search queries posted by users.
- the query refinement suggestions are performed as an on-line operation based on search query results observed for issued search queries, which can be matched and applied to the data maintained in the association database 39 , as further described below with reference to FIG. 10 .
- candidate query refinements 68 can be integrated into query refinement suggestions, which can also be matched and applied to the data maintained in the association database 39 , as further described below with reference to FIG. 11 .
- the method terminates upon the completion of the last query refinement operation.
- FIG. 5 is a flow diagram showing the routine 80 for performing precomputation for use in the method 70 of FIG. 4 .
- the purpose of this routine is to build the association database 39 (shown in FIG. 3 ) and associate stored queries 40 with stored documents 41 to form associations 42 and assign weights 43 .
- query sources are referenced to build the stored queries 40 and stored documents 41 maintained in the association database 39 .
- query source referencing refers to identifying appropriate pairings of search queries and search result documents based on actual search query issuances, including current, stored and cached search query issuances.
- the stored queries 40 can originate from actual search queries, as further described below with reference to FIGS. 6 and 7 , previous search queries 27 tracked in the query log 26 , as further described below with reference to FIG. 8 , and cached queries 25 maintained in the cache 13 , as further described below with reference to FIG. 9 .
- the stored documents 41 can be search documents 60 retrieved in response to actual search queries 59 , or can be regenerated search results or cached documents 24 maintained in the cache 13 .
- Other sources of search queries and documents for association as stored queries 40 and stored documents 41 are possible, as would be recognized by one skilled in the art.
- each stored query 40 is iteratively processed (Block 82 ), as follows.
- a stored query 40 is separately associated with each stored document 41 (Block 83 ).
- a one-to-one association 42 is formed, provided, however, that each associated stored document 41 is based on the issuance of the corresponding associated stored query 40 .
- Each stored query 40 is separately associated with only one stored document 41 , although any given stored query 40 can be paired with one or more stored documents 41 in a one-to-many relationship.
- a weight 43 is assigned to the association 42 (Block 84 ), reflecting the relevance of the stored document 41 to the stored query 40 . Processing continues with each remaining stored query 40 (Block 85 ), after which the routine returns.
- FIGS. 6-9 are flow diagrams showing the routines for referencing query sources for use in the method 80 of FIG. 5 .
- the purposes of these routines are to populate the stored queries 40 and stored documents 41 maintained in the association database 39 .
- Each of the routines identifies search queries 59 and related search documents 60 , respectively for use as stored queries 40 and stored documents 41 .
- Each stored query 40 in an association 42 is associated with a stored document 41 , although any given stored query 40 can be paired with one or more stored documents 41 in a one-to-many relationship.
- Each individual pairing is maintained as a separate association 42 .
- the individual pairings need not be explicitly stored in the form of associations 42 and can be logically recorded or tracked, such as by using a mapping, table or other means for matching stored queries 40 with stored documents 41 , as would be recognized by one skilled in the art.
- each of the stored queries 40 take the form of a search query 59 expressed as, for instance, keywords or terms. Terms include individual words or combinations of words.
- Each of the stored documents 41 are preferably stored as references and not as actual content. Generally, each stored document 41 can be in the form of, by way of example, a uniform resource locator (URL), hyperlink, anchor, or document excerpt.
- URL uniform resource locator
- FIG. 6 is a flow diagram showing a routine 90 for performing precomputation based on a chosen search document.
- the purpose of this routine is to identify a one-to-one pairing relationship between a search query 59 and a selected search document 60 .
- the one-to-one relationship can occur, for instance, when a user 19 selects a particular search document 60 from among a set of search results following the issuance of a search query 59 .
- a search query 59 is issued (Block 91 ) and search results, consisting of search documents 60 (shown in FIG. 3 ), are received (Block 92 ).
- the actual search query 59 is selected as the stored query 40 (Block 93 ).
- a search document 59 is selected as a stored document 41 , when the search document 59 is chosen by the user 19 performing the search from among the search results (Block 94 ). The routine then returns.
- FIG. 7 is a flow diagram showing a routine 100 for performing precomputation based on a search results.
- the purpose of this routine is to identify a one-to-many pairing relationship between a search query 59 and a set of search results 60 .
- the one-to-many relationship occurs when a set of search results are identified following the issuance of a search query 59 .
- the search is query issued (Block 101 ) and search results, consisting of search documents 60 (shown in FIG. 3 ), are received (Block 102 ).
- the actual search query 59 is selected as the stored query 40 (Block 103 ).
- the set of search documents 59 are selected as stored documents 41 (Block 104 ). Note that each search query is separately associated with only one search document and multiple search query-search document associations can be formed for any given search query.
- the routine then returns.
- FIG. 8 is a flow diagram showing a routine 110 for performing precomputation based on previously tracked queries.
- the purpose of this routine is to reference the query log 26 (shown in FIG. 1 ) for previous search queries 27 and to regenerate search results based on those previously tracked queries 27 .
- previous search queries 27 are tracked using the query log 26 (Block 111 ). Each previous search query 27 is selected as a stored query 40 (Block 112 ) and search results based on the previous search query are regenerated (Block 113 ). The regenerated search results are selected as stored documents 41 (Block 114 ). Note that each previous search query is separately associated with only one regenerated search result document and multiple previous search query-regenerated search result document associations can be formed for any given previous search query. If further previous search queries 27 remain in the query log 26 (Block 115 ), processing continues with the next previous search query 27 (Block 112 ). Otherwise, the routine returns.
- FIG. 9 is a flow diagram showing a routine 120 for performing precomputation based on cached documents and queries.
- the purpose of this routine is to invert pairings of cached document-cached queries maintained in the cache 23 for use as stored queries 40 and stored documents 41 .
- Cached documents 24 and cached queries 25 are maintained in the cache 23 (shown in FIG. 1 ).
- the cached documents 24 and cached queries 25 are organized in the cache 23 as cached query-cached document pairings.
- the associations 42 and weights 43 are based on stored document-stored query pairings.
- the cached query-cached document pairings implicit in the organization of the cache 23 are inverted to form cached document-cached query pairings (Block 122 ).
- An inverted search query is selected as a stored query 40 (Block 123 ) and the corresponding inverted documents are selected as stored documents 41 (Block 124 ).
- each inverted search query is separately associated with only one inverted document and multiple inverted search query-inverted document associations can be formed for any given inverted search query. If further cached query-cached documents pairings remain (Block 125 ), processing continues with the selection of the next inverted pairing (Block 123 ). Otherwise, if no further cached document-cached queries pairings remain (Block 125 ), the routine returns.
- FIG. 10 is a flow diagram showing the routine 130 for performing on-line query refinements for use in the method 80 of FIG. 4 .
- the purpose of this routine is to formulate one or more search query refinements 67 preferably on-line, which can be suggested following an actual search query 59 issuance.
- a search query 59 is issued (Block 131 ) and search results, in the form of search documents 60 , and relevance scores 61 are received (Block 132 ). If possible, the stored documents 41 are matched to the search results (Block 133 ). Ideally, at least one of the search results will match a stored document 41 . However, as the association database 39 is preferably built as an off-line operation, the set of stored documents 41 may not fully match every possible search results. Accordingly, those search results, which do not have a matching stored document 41 , are skipped.
- each term vector 62 is a vector in multi-dimensional space, where each dimension corresponds to a distinct term and each term represents an individual word or word combination.
- the length of a term vector 62 in each dimension equals the sum of the weights of the corresponding term in the set of associated queries.
- Those term vector elements corresponding to the terms from the original search query 59 are multiplied by a constant factor to downwardly weight the terms to enforce independence from the original search query 59 .
- the term vectors 62 are normalized (Block 136 ). In the described embodiment, the term vectors 62 are length normalized to a length of one, although other normalizations are possible, as would be recognized by one skilled in the art.
- Clusters 63 are then formed based on the distances of the term vectors 62 from a common origin (Block 137 ).
- the clusters 62 are formed using a hierarchical agglomerative clustering algorithm, such as described in E. Rasmussen, described supra., the disclosure of which is incorporated by reference, although other forms of clustering could also be applied, as would be recognized by one skilled in the art.
- the resulting clusters 63 are ranked using the relevance scores 61 assigned to the search documents 60 corresponding to the matched stored documents 41 and the number of stored documents 41 occurring in each cluster 63 (Block 138 ).
- the highest ranking clusters are selected as the potential refinement clusters 64 (Block 139 ).
- the potential refinement clusters 63 are selected based on a predefined threshold value, although other cluster selection criteria are possible, as would be recognized by one skilled in the art.
- centroid 65 For each potential refinement cluster 64 (Block 140 ), a centroid 65 is computed (Block 141 ). Each centroid 65 represents the weighted center of the term vector 62 for each cluster 63 , as a normalized sum of the product of the term vector 62 for each stored query 40 and the relevance score 61 assigned to the search documents 60 corresponding to the matched stored documents 41 of the original search query 59 . Other approaches to computing centroids 65 could also be used, including using unweighted values and by varying the forms of weighting and averaging, as would be recognized by one skilled in the art.
- a score 66 is then computed for each unique search query 59 occurring in the potential refinement cluster 64 (Block 143 ).
- Each score 66 is computed as the product of the frequency of the stored query 40 for the cluster 63 times the length of the distance vector measured from the term vector 62 of the stored query 40 to the centroid 65 of the cluster 63 .
- Other forms of scoring, ordering and ranking are possible, as would be recognized by one skilled in the art.
- the stored query 40 with the highest score 66 is selected as the name of the cluster 63 (Block 143 ). Alternatively, other cluster naming selection criteria using highest, averaged, lowest, or other forms of scoring, ordering and ranking are possible, as would be recognized by one skilled in the art.
- the score 66 for the unique stored query 40 exceeds a predefined threshold (Block 144 )
- the name is added to the set of query refinements 67 (Block 145 ). Processing continues with each remaining potential refinement cluster 64 (Block 146 ).
- the set of refinements 67 are sorted into rankings (Block 147 ) as a function of the relevance scores 61 assigned to the search documents 60 corresponding to the matched stored documents 41 appearing in each cluster 63 plus the size of the cluster 63 in number of stored documents 41 .
- the set of refinements 67 are augmented with supplemental queries (Block 148 ).
- each supplemental query consists of the terms originally appearing in the search query 59 and negated forms of all terms appearing in the set of refinements 67 , but not appearing in the original search query.
- Other forms of augmenting the set of refinements 67 are feasible, as would be recognized by one skilled in the art.
- the set of refinements 67 are presented (Block 149 ) based on the rankings and, optionally, cluster scores. The routine then returns.
- FIG. 11 is a flow diagram showing a routine 160 for integrating candidate query refinements for use in the method 80 of FIG. 4 , in accordance with a further embodiment.
- the purpose of this routine is to formulate one or more search query refinements 67 , which can be suggested by integrating candidate query refinements 68 .
- the candidate query refinements 68 can originate from any external source, as would be recognized by one skilled in the art, including the user 19 as user-specified query refinements, third parties, and other approaches to attempting to remedy poorly-framed search queries. For brevity, those detailed operations previously presented above with reference to FIG. 10 are described in summary fashion where applicable.
- each of the clusters are used as cluster names and suggested as refinements.
- the resulting refinements often consist of terms not generally occurring in a user-specified search query and, as a result, can be difficult to understand and can perform poorly when used as a search query.
- a search query 59 is issued (Block 161 ) and search results, in the form of search documents 60 , and relevance scores 61 are received (Block 162 ).
- search results matching and term vector computation and normalization an initial set of clusters 63 is formed based on the distances of the term vectors 62 (Block 163 ).
- an attempt is made to assign the candidate query refinement 68 to one of the clusters 63 (Block 165 ). If the candidate query refinement 68 is not assigned to a cluster 63 (Block 166 ), the candidate query refinement 68 is added to a set of orthogonal queries (Block 167 ). Processing continues with each remaining candidate query refinement 68 (Block 168 ).
- a search query 59 is issued (Block 170 ) and search results, in the form of search documents 60 , and relevance scores 61 are again received (Block 171 ).
- the search results are pooled into a second set of documents (Block 172 ).
- a second set of clusters 63 is formed based on the distances of the term vectors 62 (Block 173 ).
- a union is formed of the initial and second sets of clusters 63 (Block 174 ).
- clusters 63 in the union are named for the unique queries with the highest scores (Block 175 ). Finally, the set of refinements 67 are presented (Block 149 ) based on the rankings and, optionally, cluster scores. The routine then returns.
- a user 19 might submit a search query 59 , which includes the individual word, “jaguar.”
- a set of search documents 60 are received and the top 100 documents are chosen for clustering.
- the search documents 60 might naturally identify several relevant semantic groupings, including documents about automobiles manufactured by Jaguar Corporation, including hyperlink references to the official Jaguar Corporation Websites in the United States and United Kingdom and a Jaguar brand automobile owners association.
- the semantic groupings might also include documents about the Macintosh operating system version code-named jaguar, documents about jaguar animals, as well as documents about a number of other miscellaneous topics that may not be groupable into cohesive document clusters 63 .
- term vectors 62 are computed for each of the top 100 documents ranked by relevance score. As above, a set of 100 documents is used merely for the purposes of illustration and any other limit would be equally suitable, as would be recognized by one skilled in the art.
- Each selected search document 60 is matched to a stored document 41 in the association database 39 and the corresponding stored queries 40 are determined by looking up the associations 42 for each matched stored document 41 .
- the term vectors 62 are formed by flattening the constituent terms for each corresponding stored query 40 into a simple vector space.
- Clusters 63 are generated from the term vectors 62 , which typically extracts the relevant semantic groupings, such as those groupings described above.
- a cluster centroid 65 is calculated for each cluster 63 .
- All search queries 59 associated with a search document 60 in the cluster 63 are scored according to the distance from the cluster centroid 65 and the percent of stored documents 41 occurring in the cluster 63 with which each stored document 41 is associated. For instance, assume that a cluster 63 is calculated for the example “jaguar” search query 59 for the semantic grouping containing documents about Jaguar brand automobiles.
- the dominant terms include words, such as “jaguar,” “automobile,” “auto,” “car,” “USA,” “UK,” and so forth.
- the best matching query name suitable as a suggested query refinement 67 would be “jaguar car,” which has good coverage over the entire cluster 63 and also contains the two terms having a highest weight in the cluster centroid 65 .
- a cluster 63 is calculated for the semantic grouping containing documents about the Macintosh code-named jaguar operating system.
- the dominant terms include words, such as “jaguar,” “X,” “Mac,” “OS,” and so forth.
- the best matching query name suitable as a suggested query refinement 67 assuming case insensitivity, would be “mac os x jaguar,” which contains all of the top search query terms and appears in many of the documents in the cluster 63 .
- Other generated clusters 63 and query names suitable as suggested query refinement 67 include “jaguar racing” for documents about Jaguar automobile racing clubs and “jaguar cat” for documents about the jaguar animal.
- the refinements 67 are sorted as a function of the relevance scores 61 assigned to the search documents 60 corresponding to the matched stored documents 41 appearing in each cluster 63 plus the size of the cluster 63 in number of stored documents 41 .
- a cluster 63 will be ranked higher than another cluster 63 if the cluster 63 is either larger or has stored documents 41 having higher relevance scores 61 .
- the final ranking of the refinements 67 includes “jaguar car,” “mac os x jaguar,” “jaguar racing,” and “jaguar cat.” The rankings and, optionally, cluster scores are used for presentation purposes.
- the refinements 67 would include negated forms of all terms appearing in the set of refinements 67 , but not appearing in the original search query.
- the alternative refinements 67 include “jaguar-car-mac-os-x-racing-cat.”
- a predetermined set of search queries 59 selected from past user queries could be used to precompute possible sets of refinements 67 for the predetermined queries. The predetermined queries would be issued and the search results would be maintained in a database for look up in response to user search requests based on the predetermined queries.
Abstract
A system and method for providing search query refinements are presented. A stored query and a stored document are associated as a logical pairing. A weight is assigned to the logical pairing. The search query is issued and a set of search documents is produced. At least one search document is matched to at least one stored document. The stored query and the assigned weight associated with the matching at least one stored document are retrieved. At least one cluster is formed based on the stored query and the assigned weight associated with the matching at least one stored document. The stored query associated with the matching at least one stored document are scored for the at least one cluster relative to at least one other cluster. At least one such scored search query is suggested as a set of query refinements.
Description
This application is a continuation of U.S. application Ser. No. 10/668,721, filed Sep. 22, 2003, which claims priority under 35 USC §119(e) to U.S. provisional application No. 60/500,539, filed Sep. 5, 2003, the disclosures of which are incorporated by reference.
The present invention relates in general to query processing and, in particular, to a system and method for providing search query refinements.
Although the Internet traces back to the late 1960s, the widespread availability and acceptance of personal computing and internetworking have resulted in the explosive growth and unprecedented advances in information sharing technologies. In particular, the Worldwide Web (“Web”) has revolutionized accessibility to untold volumes of information in stored electronic form to a worldwide audience, including written, spoken (audio) and visual (imagery and video) information, both in archived and real-time formats. In short, the Web has provided desktop access to every connected user to a virtually unlimited library of information in almost every language worldwide.
Search engines have evolved in tempo with the increased usage of the Web to enable users to find and retrieve relevant Web content in an efficient and timely manner. As the amount and types of Web content have increased, the sophistication and accuracy of search engines have likewise improved. Generally, search engines strive to provide the highest quality results in response to a search query. However, determining quality is difficult, as the relevance of retrieved Web content is inherently subjective and dependent upon the interests, knowledge and attitudes of the user.
Existing methods used by search engines are based on matching search query terms to terms indexed from Web pages. More advanced methods determine the importance of retrieved Web content using, for example, a hyperlink structure-based analysis, such as described in S. Brin and L. Page, “The Anatomy of a Large-Scale Hypertextual Search Engine,” (1998) and in U.S. Pat. No. 6,285,999, issued Sep. 4, 2001 to Page, the disclosures of which are incorporated by reference.
A typical search query scenario begins with either a natural language question or individual terms, often in the form of keywords, being submitted to a search engine. The search engine executes a search against a data repository describing information characteristics of potentially retrievable Web content and identifies the candidate Web pages. Searches can often return thousands or even millions of results, so most search engines typically rank or score only a subset of the most promising results. The top Web pages are then presented to the user, usually in the form of Web content titles, hyperlinks, and other descriptive information, such as snippets of text taken from the Web pages.
Providing quality search results can be complicated by the literal and implicit scope of the search query itself. A poorly-framed search query could be ambiguous or be too general or specific to yield responsive and high quality search results. For instance, terms within a search query can be ambiguous at a syntactic or semantic level. A syntactic ambiguity can be the result of an inadvertent homonym, which specifies an incorrect word having the same sound and possibly same spelling, but different meaning from the word actually meant. For example, the word “bear” can mean to carry or can refer to an animal or an absence of clothing. A semantic ambiguity can be the result of improper context. For example, the word “jaguar” can refer to an animal, a version of the Macintosh operating system, or a brand of automobile. Similarly, search terms that are too general result in overly broad search results while search terms that are too narrow result in unduly restrictive and non-responsive search results.
Accordingly, there is a need for an approach to providing suggestions for search query refinements that will resolve ambiguities or over generalities or over specificities occurring in properly framed search queries. Preferably, such an approach would provide refined search queries that, when issued, result in search results closely related to the actual topic underlying the intent of the original search query and provide suggestions that reflect conceptual independence and clear meanings as potential search terms.
An embodiment provides a system and method for creating query refinement suggestions. At least one search document retrieved responsive to a query is matched to one or more stored queries. The stored query is scored as a potential query refinement suggestion.
A further embodiment provides a system and method for providing search query refinements. A stored query and a stored document are associated as a logical pairing. A weight is assigned to the logical pairing. The search query is issued and a set of search documents is produced. At least one search document is matched to at least one stored document. The stored query and the assigned weight associated with the matching at least one stored document are retrieved. At least one cluster is formed based on the stored query and the assigned weight associated with the matching at least one stored document. The stored query associated with the matching at least one stored document are scored for the at least one cluster relative to at least one other cluster. At least one such scored search query is suggested as a set of query refinements.
A further embodiment provides a system and method for integrating query refinement candidates. At least one search document retrieved responsive to a query is matched to one or more stored documents associated with a stored query and weight. At least one cluster is formed based on the stored query and weight associated with each stored document matched responsive to the query. At least one further search document retrieved responsive to a candidate query is matched to the one or more stored documents. At least one further cluster is formed based on the stored query and weight associated with each stored document matched responsive to the candidate query. The at least one cluster and the at least one further cluster are combined. The stored query for the combined cluster relative to at least one other cluster is scored as a potential query refinement suggestion.
Still other embodiments of the present invention will become readily apparent to those skilled in the art from the following detailed description, wherein are described embodiments of the invention by way of illustrating the best mode contemplated for carrying out the invention. As will be realized, the invention is capable of other and different embodiments and its several details are capable of modifications in various obvious respects, all without departing from the spirit and the scope of the present invention. Accordingly, the drawings and detailed description are to be regarded as illustrative in nature and not as restrictive.
System Overview
In general, each client 12 can be any form of computing platform connectable to a network, such as the internetwork 13, and capable of interacting with application programs. Exemplary examples of individual clients include, without limitation, personal computers, digital assistances, “smart” cellular telephones and pagers, lightweight clients, workstations, “dumb” terminals interfaced to an application server, and various arrangements and configurations thereof, as would be recognized by one skilled in the art. The internetwork 13 includes various topologies, configurations, and arrangements of network interconnectivity components arranged to interoperatively couple with enterprise, wide area and local area networks and include, without limitation, conventionally wired, wireless, satellite, optical, and equivalent network technologies, as would be recognized by one skilled in the art.
For Web content exchange and, in particular, to transact searches, each client 12 executes a Web browser 18 (“Web browser”), which preferably implements a graphical user interface and through which search queries are sent to a Web server 20 executing on the server 11. Each search query describes or identifies information, generally in the form of Web content, which is potentially retrievable via the Web server 20. The search query provides search characteristics, typically expressed as individual terms, such as keywords and the like, and attributes, such as language, character encoding and so forth, which enables a search engine 21, also executing on the server 11, to identify and send back search result documents, generally in the form of Web pages. Other styles, forms or definitions of search queries and characteristics are feasible, as would be recognized by one skilled in the art.
The Web pages are sent back to the Web browser 18 for presentation, usually in the form of Web content titles, hyperlinks, and other descriptive information, such as snippets of text taken from the Web pages. The user can view or access the Web pages on the graphical user interface and can input selections and responses in the form of typed text, clicks, or both. The server 11 maintains a search database 15 in which Web content 22 is maintained. The Web content 22 could also be maintained remotely on other Web servers (not shown) interconnected either directly or indirectly via the internetwork 13 and which are preferably accessible by each client 12. In a further embodiment, the server 11 maintains a cache 23 in which cached documents 24 and cached queries 25 are maintained. The cache 23 associates each cached document 24 with one or more cached queries 25 to improve searching performance, as is known in the art. Finally, in a still further embodiment, the search engine 21 maintains a query log 26 in which records of previous search queries 27 are tracked.
The search engine 21 preferably identifies the Web content 22 best matching the search characteristics to provide high quality Web pages, such as described in S. Brin and L. Page, “The Anatomy of a Large-Scale Hypertextual Search Engine” (1998) and in U.S. Pat. No. 6,285,999, issued Sep. 4, 2001 to Page, the disclosures of which are incorporated by reference. In identifying matching Web content 22, the search engine 21 operates on information characteristics describing potentially retrievable Web content. Note the functionality provided by the server 20, including the Web server 20 and search engine 21, could be provided by a loosely- or tightly-coupled distributed or parallelized computing configuration, in addition to a uniprocessing environment.
Search queries can potentially be ambiguous or lack generality or specificity. Such poorly-framed search queries can be remedied through search query refinements, which can be provided in response to search query issuances. Search query refinements are generated and suggested as a two-part operation. First, a search query is associated with a search result document in a one-to-one association and a weight is assigned to each search query-search result document association, as further described below with reference to FIG. 2 . Second, the search query-search result document associations and assigned weights are matched to at least one new search query to form scored clusters, as further described below with reference to FIG. 3 . The clusters are projected from multi-dimensional space based on constituent query terms and unique search queries associated with any document in each cluster are scored. The clusters are named based on the scoring, preferably by highest scores. The named clusters are sorted and provided as suggested refinements to the original search query.
The individual computer systems, including server 11 and clients 12, include general purpose, programmed digital computing devices consisting of a central processing unit ( processors 13 and 16, respectively), random access memory ( memories 14 and 17, respectively), non-volatile secondary storage, such as a hard drive or CD ROM drive, network or wireless interfaces, and peripheral devices, including user interfacing means, such as a keyboard and display. Program code, including software programs, and data is loaded into the RAM for execution and processing by the CPU and results are generated for display, output, transmittal, or storage. The Web browser 18 is an HTTP-compatible Web browser, such as the Internet Explorer, licensed by Microsoft Corporation, Redmond, Wash.; Navigator, licensed by Netscape Corporation, Mountain View, Calif.; or other forms of Web browsers, as are known in the art.
Precomputation Server
The precomputation system 31 builds and maintains the association database 39. The association database 39 stores the stored queries 40, stored documents 41, associations 42, and weights 43, which are used by a query refinement server to formulate and suggest query refinements, as further described below with reference to FIG. 3 . In further embodiments, the precomputation system 31 also references the query log 26, which is stored in the search database 15, and the cached documents 24 and cached queries 25, which are stored in the cache (both shown in FIG. 1 ).
The precomputation engine 34 logically includes four modules. Other logical arrangements and definitions of functional modules are possible, as would be recognized by one skilled in the art. First, an associator 35 associates a stored query 40 with a stored document 41 and the stored query-stored document pairing is maintained in the association database 39 as a set of associations 42. Each stored query 40 is associated with only one stored document 41, although any given stored query 40 can be paired with one or more stored documents 41 in a one-to-many relationship. Each individual pairing is maintained as a separate association 42 in the association database 39. However, the individual pairings need not be explicitly stored in the form of associations 42 and can instead be logically recorded or tracked, such as by using a mapping, table or other means for matching stored queries 40 with stored documents 41, as would be recognized by one skilled in the art.
The associator 35 also assigns a weight 43 to each association 42. Each weight 43 estimates the relevance of the stored document 41 to the associated stored query 40. When multiple associations 42 for the same stored query-stored document pairing occurs, the weights 43 for each of the multiple associations 42 are summed. If query frequency data is available, such as, for example, when a search query 59 is cached, the weight 43 is multiplied by the search query frequency, that is, the number of times that the search query 59 has been issued.
Second, a selector 36 selects one or more of the stored documents 41 for association with a stored query 40 based on an issued search. In the described embodiment, the selector 36 selects the stored documents 41, which are each separately associated with a stored query 40 based on either a search document chosen following an issued search or from a set of search results received for an issued search, as further described below respectively with reference to FIGS. 6 and 7 .
Third, the regenerator 37 selects one or more of the stored documents 41, which are each separately associated with a stored query 40 based on the query log 26. In a further embodiment, the regenerator 37 regenerates the search results from previously tracked queries 27, as reflected in the query log 26. The regenerator 37 selects the regenerated search results as stored documents 41, which are each separately associated with a previously tracked search query 27, as further described below with reference to FIG. 8 .
Fourth, the inverter 38 selects one or more of the stored documents, which are each separately associated with a stored query 40 based on cached data. In a still further embodiment, the inverter 38 evaluates the cached documents 24 and cached queries 25 and inverts the cached document-cached queries pairings into cached query-cached documents pairings. The inverter 38 selects the inverted cached documents 24 as stored documents 41, which are each separately associated with a cached query 25, as further described below with reference to FIG. 9 .
The individual computer system, including the precomputation system 31, include general purpose, programmed digital computing devices consisting of a central processing unit (processor 33), random access memory (memory 32), non-volatile secondary storage, such as a hard drive or CD ROM drive, network or wireless interfaces, and peripheral devices, including user interfacing means, such as a keyboard and display. Program code, including software programs, and data is loaded into the RAM for execution and processing by the CPU and results are generated for display, output, transmittal, or storage. Note the functionality provided by the precomputation system 31 could be provided by a loosely- or tightly-coupled distributed or parallelized computing configuration, in addition to a uniprocessing environment.
Query Refinement Server
The query refinement engine 54 logically includes four modules. Other logical arrangements and definitions of functional modules are possible, as would be recognized by one skilled in the art. First, a matcher 55 matches one or more of the stored documents 41 to the actual search documents 60, generated by the search engine 21 (shown in FIG. 1 ) in response to the issuance of a search query 59. The search engine 21 also generates relevance scores 60 as part of the search query issuance. The matcher 55 identifies the stored queries 40 and assigned weights 43 using the associations 43 corresponding to the matched stored documents 41.
Second, a clusterer 56 forms one or more clusters 62 based on term vectors 62 formed from the terms occurring in the matched stored queries 40 and corresponding weights 43. The term vectors 62 are normalized vectors projected into multi-dimensional space, with each dimension corresponding to a term, which can be an individual word or word combination. The clusters 62 are ranked based on the relevance scores 61 assigned to the search documents 60 corresponding to the matched stored documents 41 and the number of stored documents 41 occurring in each cluster 62. The highest ranking clusters 62 are selected as potential refinement clusters 64. In the described embodiment, the clusters 62 are formed using a hierarchical agglomerative clustering algorithm, such as described in E. Rasmussen, “Clustering Algorithms,” in “Information Retrieval,” (W. Frakes & R. Baeza-Yates eds. 1992), the disclosure of which is incorporated by reference, although other types of clustering algorithms could be used, as would be recognized by one skilled in the art.
Third, a scorer 57 computes center-weighted term vectors, referred to as centroids 65, which each represent the weighted center of the term vector 62 of each cluster 63. The centroids 65 are computed from each of the potential refinement clusters 64. The scorer 57 assigns scores 66 to each unique search query in each of the potential refinement clusters 64 based on the number of stored documents 41 with which the search query is associated and the distance from the centroid 65. Other approaches to computing centroids 65 could also be used, including using unweighted values and by varying the forms of weighting and averaging, as would be recognized by one skilled in the art.
Finally, a presenter 58 identifies the substantially highest scoring search queries as one or more query refinements 67 to the user 19. Importantly, the details of the formulation of the search query refinements, including the term vectors 62, clusters 63, potential refinement clusters 64, centroids 65, and scores 66, are encapsulated by the query refinement engine 54. Thus, a user 19 will only be aware of the actual suggested query refinements 67.
The individual computer system, including the query refinement system 51, include general purpose, programmed digital computing devices consisting of a central processing unit (processor 53), random access memory (memory 52), non-volatile secondary storage, such as a hard drive or CD ROM drive, network or wireless interfaces, and peripheral devices, including user interfacing means, such as a keyboard and display. Program code, including software programs, and data is loaded into the RAM for execution and processing by the CPU and results are generated for display, output, transmittal, or storage. Note the functionality provided by the query refinement system 51 could be provided by a loosely- or tightly-coupled distributed or parallelized computing configuration, in addition to a uniprocessing environment.
Method Overview
The method 70 performs precomputation (Block 71) and query refinement (Block 72). Precomputation (Block 71) builds the association database 39 (shown in FIG. 2 ) by associating and storing representative stored queries 40 with stored documents 41, along with associations 42 and weights 43, as further described below with reference to FIG. 5 . In the described embodiment, precomputation is performed as an off-line operation independent of any specific search query.
Query refinement (Block 72) formulates query refinement suggestions structured to better frame search queries posted by users. In one embodiment, the query refinement suggestions are performed as an on-line operation based on search query results observed for issued search queries, which can be matched and applied to the data maintained in the association database 39, as further described below with reference to FIG. 10 . In a further embodiment, candidate query refinements 68 can be integrated into query refinement suggestions, which can also be matched and applied to the data maintained in the association database 39, as further described below with reference to FIG. 11 .
The method terminates upon the completion of the last query refinement operation.
Precomputation Routine
Initially, query sources are referenced to build the stored queries 40 and stored documents 41 maintained in the association database 39. Briefly, query source referencing refers to identifying appropriate pairings of search queries and search result documents based on actual search query issuances, including current, stored and cached search query issuances. Thus, the stored queries 40 can originate from actual search queries, as further described below with reference to FIGS. 6 and 7 , previous search queries 27 tracked in the query log 26, as further described below with reference to FIG. 8 , and cached queries 25 maintained in the cache 13, as further described below with reference to FIG. 9 . In addition, the stored documents 41 can be search documents 60 retrieved in response to actual search queries 59, or can be regenerated search results or cached documents 24 maintained in the cache 13. Other sources of search queries and documents for association as stored queries 40 and stored documents 41 are possible, as would be recognized by one skilled in the art.
Once the stored queries 40 for the association database 39 have been identified and stored, each stored query 40 is iteratively processed (Block 82), as follows. A stored query 40 is separately associated with each stored document 41 (Block 83). A one-to-one association 42 is formed, provided, however, that each associated stored document 41 is based on the issuance of the corresponding associated stored query 40. Each stored query 40 is separately associated with only one stored document 41, although any given stored query 40 can be paired with one or more stored documents 41 in a one-to-many relationship. A weight 43 is assigned to the association 42 (Block 84), reflecting the relevance of the stored document 41 to the stored query 40. Processing continues with each remaining stored query 40 (Block 85), after which the routine returns.
Query Source Referencing Routines
Each stored query 40 in an association 42 is associated with a stored document 41, although any given stored query 40 can be paired with one or more stored documents 41 in a one-to-many relationship. Each individual pairing is maintained as a separate association 42. However, the individual pairings need not be explicitly stored in the form of associations 42 and can be logically recorded or tracked, such as by using a mapping, table or other means for matching stored queries 40 with stored documents 41, as would be recognized by one skilled in the art.
In the association database, each of the stored queries 40 take the form of a search query 59 expressed as, for instance, keywords or terms. Terms include individual words or combinations of words. Each of the stored documents 41 are preferably stored as references and not as actual content. Generally, each stored document 41 can be in the form of, by way of example, a uniform resource locator (URL), hyperlink, anchor, or document excerpt.
Query Source Referencing Using a Chosen Search Document
First, a search query 59 is issued (Block 91) and search results, consisting of search documents 60 (shown in FIG. 3 ), are received (Block 92). The actual search query 59 is selected as the stored query 40 (Block 93). A search document 59 is selected as a stored document 41, when the search document 59 is chosen by the user 19 performing the search from among the search results (Block 94). The routine then returns.
Query Source Referencing Using Search Results
The search is query issued (Block 101) and search results, consisting of search documents 60 (shown in FIG. 3 ), are received (Block 102). The actual search query 59 is selected as the stored query 40 (Block 103). The set of search documents 59 are selected as stored documents 41 (Block 104). Note that each search query is separately associated with only one search document and multiple search query-search document associations can be formed for any given search query. The routine then returns.
Query Source Referencing Using Tracked Queries
Initially, previous search queries 27 are tracked using the query log 26 (Block 111). Each previous search query 27 is selected as a stored query 40 (Block 112) and search results based on the previous search query are regenerated (Block 113). The regenerated search results are selected as stored documents 41 (Block 114). Note that each previous search query is separately associated with only one regenerated search result document and multiple previous search query-regenerated search result document associations can be formed for any given previous search query. If further previous search queries 27 remain in the query log 26 (Block 115), processing continues with the next previous search query 27 (Block 112). Otherwise, the routine returns.
Query Source Referencing Using Cached Data
On-Line Query Refinements Routine
Initially, a search query 59 is issued (Block 131) and search results, in the form of search documents 60, and relevance scores 61 are received (Block 132). If possible, the stored documents 41 are matched to the search results (Block 133). Ideally, at least one of the search results will match a stored document 41. However, as the association database 39 is preferably built as an off-line operation, the set of stored documents 41 may not fully match every possible search results. Accordingly, those search results, which do not have a matching stored document 41, are skipped.
Next, for each matched search result, the association 42 corresponding to the matched stored document 41 is determined and is used to retrieve the associated stored queries 40 and weights 43 (Block 134). A term vector 62 is then computed from the terms occurring in the matched stored queries 40 and corresponding weights 43 (Block 135). Each term vector 62 is a vector in multi-dimensional space, where each dimension corresponds to a distinct term and each term represents an individual word or word combination. The length of a term vector 62 in each dimension equals the sum of the weights of the corresponding term in the set of associated queries. Those term vector elements corresponding to the terms from the original search query 59 are multiplied by a constant factor to downwardly weight the terms to enforce independence from the original search query 59. The term vectors 62 are normalized (Block 136). In the described embodiment, the term vectors 62 are length normalized to a length of one, although other normalizations are possible, as would be recognized by one skilled in the art.
The resulting clusters 63 are ranked using the relevance scores 61 assigned to the search documents 60 corresponding to the matched stored documents 41 and the number of stored documents 41 occurring in each cluster 63 (Block 138). The highest ranking clusters are selected as the potential refinement clusters 64 (Block 139). In the described embodiment, the potential refinement clusters 63 are selected based on a predefined threshold value, although other cluster selection criteria are possible, as would be recognized by one skilled in the art.
For each potential refinement cluster 64 (Block 140), a centroid 65 is computed (Block 141). Each centroid 65 represents the weighted center of the term vector 62 for each cluster 63, as a normalized sum of the product of the term vector 62 for each stored query 40 and the relevance score 61 assigned to the search documents 60 corresponding to the matched stored documents 41 of the original search query 59. Other approaches to computing centroids 65 could also be used, including using unweighted values and by varying the forms of weighting and averaging, as would be recognized by one skilled in the art.
A score 66 is then computed for each unique search query 59 occurring in the potential refinement cluster 64 (Block 143). Each score 66 is computed as the product of the frequency of the stored query 40 for the cluster 63 times the length of the distance vector measured from the term vector 62 of the stored query 40 to the centroid 65 of the cluster 63. Other forms of scoring, ordering and ranking are possible, as would be recognized by one skilled in the art. The stored query 40 with the highest score 66 is selected as the name of the cluster 63 (Block 143). Alternatively, other cluster naming selection criteria using highest, averaged, lowest, or other forms of scoring, ordering and ranking are possible, as would be recognized by one skilled in the art. If the score 66 for the unique stored query 40 exceeds a predefined threshold (Block 144), the name is added to the set of query refinements 67 (Block 145). Processing continues with each remaining potential refinement cluster 64 (Block 146).
Finally, the set of refinements 67 are sorted into rankings (Block 147) as a function of the relevance scores 61 assigned to the search documents 60 corresponding to the matched stored documents 41 appearing in each cluster 63 plus the size of the cluster 63 in number of stored documents 41. As an optional step, the set of refinements 67 are augmented with supplemental queries (Block 148). In the described embodiment, each supplemental query consists of the terms originally appearing in the search query 59 and negated forms of all terms appearing in the set of refinements 67, but not appearing in the original search query. Other forms of augmenting the set of refinements 67 are feasible, as would be recognized by one skilled in the art. The set of refinements 67 are presented (Block 149) based on the rankings and, optionally, cluster scores. The routine then returns.
Integrating Candidate Query Refinements Routine
By way of example, other approaches attempt to remedy poorly-framed search queries by suggesting refinements, which can be considered and selected by a user as an adjunct to or in lieu of the original search query. One approach suggests previous, recurring search queries, which contain the terms used in the original search query, along with other terms. However, the suggested queries can overlap in meaning with the original search query and word co-occurrences and frequencies poorly divide the search space into conceptually independent partitions. Another related approach tracks search query refinements entered by other users and suggests frequently-used refinements to modify the original search query. However, reliance on only frequently occurring refinements can also poorly divide the search space into conceptually independent partitions. Yet another related approach clusters documents received in response to an original search query based on the terms occurring in each document. The terms that characterize each of the clusters are used as cluster names and suggested as refinements. However, the resulting refinements often consist of terms not generally occurring in a user-specified search query and, as a result, can be difficult to understand and can perform poorly when used as a search query.
Initially, as before, a search query 59 is issued (Block 161) and search results, in the form of search documents 60, and relevance scores 61 are received (Block 162). Following search results matching and term vector computation and normalization, an initial set of clusters 63 is formed based on the distances of the term vectors 62 (Block 163). For each candidate query refinement 68 (Block 164), an attempt is made to assign the candidate query refinement 68 to one of the clusters 63 (Block 165). If the candidate query refinement 68 is not assigned to a cluster 63 (Block 166), the candidate query refinement 68 is added to a set of orthogonal queries (Block 167). Processing continues with each remaining candidate query refinement 68 (Block 168).
Next, for each candidate query refinement 68 in the set of orthogonal queries (Block 169), a search query 59 is issued (Block 170) and search results, in the form of search documents 60, and relevance scores 61 are again received (Block 171). The search results are pooled into a second set of documents (Block 172). Following search results matching and term vector computation and normalization, a second set of clusters 63 is formed based on the distances of the term vectors 62 (Block 173). A union is formed of the initial and second sets of clusters 63 (Block 174). Following cluster ranking, potential refinement cluster 64 selection, centroid 65 computation, and unique query scoring, the clusters 63 in the union are named for the unique queries with the highest scores (Block 175). Finally, the set of refinements 67 are presented (Block 149) based on the rankings and, optionally, cluster scores. The routine then returns.
Query Refinement Example
By way of example, a user 19 might submit a search query 59, which includes the individual word, “jaguar.” Upon issuance, a set of search documents 60 are received and the top 100 documents are chosen for clustering. Note a set of 100 documents is used merely for the purposes of illustration and any other limit would be equally suitable, as would be recognized by one skilled in the art. The search documents 60 might naturally identify several relevant semantic groupings, including documents about automobiles manufactured by Jaguar Corporation, including hyperlink references to the official Jaguar Corporation Websites in the United States and United Kingdom and a Jaguar brand automobile owners association. The semantic groupings might also include documents about the Macintosh operating system version code-named jaguar, documents about jaguar animals, as well as documents about a number of other miscellaneous topics that may not be groupable into cohesive document clusters 63.
During the clustering phase, term vectors 62 are computed for each of the top 100 documents ranked by relevance score. As above, a set of 100 documents is used merely for the purposes of illustration and any other limit would be equally suitable, as would be recognized by one skilled in the art. Each selected search document 60 is matched to a stored document 41 in the association database 39 and the corresponding stored queries 40 are determined by looking up the associations 42 for each matched stored document 41. The term vectors 62 are formed by flattening the constituent terms for each corresponding stored query 40 into a simple vector space. Clusters 63 are generated from the term vectors 62, which typically extracts the relevant semantic groupings, such as those groupings described above.
A cluster centroid 65 is calculated for each cluster 63. All search queries 59 associated with a search document 60 in the cluster 63 are scored according to the distance from the cluster centroid 65 and the percent of stored documents 41 occurring in the cluster 63 with which each stored document 41 is associated. For instance, assume that a cluster 63 is calculated for the example “jaguar” search query 59 for the semantic grouping containing documents about Jaguar brand automobiles. In the corresponding cluster centroid 65, the dominant terms include words, such as “jaguar,” “automobile,” “auto,” “car,” “USA,” “UK,” and so forth. The best matching query name suitable as a suggested query refinement 67 would be “jaguar car,” which has good coverage over the entire cluster 63 and also contains the two terms having a highest weight in the cluster centroid 65.
Similarly, further assume that a cluster 63 is calculated for the semantic grouping containing documents about the Macintosh code-named jaguar operating system. In the corresponding cluster centroid 65, the dominant terms include words, such as “jaguar,” “X,” “Mac,” “OS,” and so forth. The best matching query name suitable as a suggested query refinement 67, assuming case insensitivity, would be “mac os x jaguar,” which contains all of the top search query terms and appears in many of the documents in the cluster 63. Other generated clusters 63 and query names suitable as suggested query refinement 67 include “jaguar racing” for documents about Jaguar automobile racing clubs and “jaguar cat” for documents about the jaguar animal.
Finally, the refinements 67 are sorted as a function of the relevance scores 61 assigned to the search documents 60 corresponding to the matched stored documents 41 appearing in each cluster 63 plus the size of the cluster 63 in number of stored documents 41. A cluster 63 will be ranked higher than another cluster 63 if the cluster 63 is either larger or has stored documents 41 having higher relevance scores 61. In the example, the final ranking of the refinements 67 includes “jaguar car,” “mac os x jaguar,” “jaguar racing,” and “jaguar cat.” The rankings and, optionally, cluster scores are used for presentation purposes.
In a further embodiment, the refinements 67 would include negated forms of all terms appearing in the set of refinements 67, but not appearing in the original search query. Thus, the alternative refinements 67 include “jaguar-car-mac-os-x-racing-cat.” In a still further embodiment, a predetermined set of search queries 59 selected from past user queries could be used to precompute possible sets of refinements 67 for the predetermined queries. The predetermined queries would be issued and the search results would be maintained in a database for look up in response to user search requests based on the predetermined queries.
While the invention has been particularly shown and described as referenced to the embodiments thereof, those skilled in the art will understand that the foregoing and other changes in form and detail may be made therein without departing from the spirit and scope of the invention.
Claims (7)
1. A method performed by a data processing apparatus, the method comprising:
accessing, by the data processing apparatus, a database that stores query-resource pairings and a respective weight for each query-resource pairing, each query-resource pairing identifying a single query and a single resource associated with the query;
receiving, by the data processing apparatus, a search query from a user device;
obtaining, by the data processing apparatus and in response to receiving the search query, search results, each search result referencing a resource and having a relevance score indicating a measure of relevance of the search result to the search query;
identifying, by the data processing apparatus, a subset of the resources referenced by the search results, each resource in the subset matching a resource that is identified by one or more of the query-resource pairings;
for each resource in the subset:
generating, by the data processing apparatus, a term vector from queries identified by stored query-resource pairings that correspond to the resource, wherein each dimension of the term vector corresponds to a distinct term of the queries identified by the stored query-resource pairings that correspond to the resource, and each dimension of the term vector has a value that is based on the respective weights of each of the query-resource pairing that identifies (i) the resource and (ii) a query that includes the distinct term that corresponds to the dimension;
multiplying, by a constant factor, the value of each dimension of the term vector that corresponds to a distinct term that matches a term included in the received search query; and
normalizing the term vector;
generating, by the data processing apparatus, one or more clusters of resources based on the term vectors of each resource in the subset;
generating, by the data processing apparatus and for each cluster, a rank score based on (i) the relevance scores of the search results that reference resources that match the resources of the cluster, and (ii) a quantity of the resources of the cluster;
selecting, by the data processing apparatus, as refinement clusters, n clusters with the highest rank score, where n is a positive integer;
generating, by the data processing apparatus, a respective centroid for each refinement cluster, each centroid representing a weighted center of a term vector that corresponds to the refinement cluster;
generating, by the data processing apparatus and for each refinement cluster, a cluster score for each unique query identified by stored query-resource pairings that correspond to the resources of the refinement cluster based upon (i) a quantity of the query-resource pairings that identify the unique query, and (ii) a distance from the unique query to the centroid of the potential refinement cluster;
for each refinement cluster, selecting, by the data processing apparatus, as a representative query for the refinement cluster, a unique query that has a highest cluster score of the cluster scores for the unique queries identified by stored query-resource pairings that correspond to the resources of the refinement cluster;
selecting, by the data processing apparatus, as a set of candidate queries, the representative queries of m refinement clusters with the highest rank score, where m is a positive integer; and
providing, by the data processing apparatus, one or more of the candidate queries to the user device.
2. A method performed by a data processing apparatus, the method comprising:
accessing, by the data processing apparatus, a database that stores query-resource pairings and a respective weight for each query-resource pairing, each query-resource pairing identifying a single query and a single resource associated with the query;
obtaining, by the data processing apparatus and in response to receiving a search query, search results, each search result referencing a respective resource and having a respective relevance score;
identifying, by the data processing apparatus, a subset of the resources referenced by the search results that match at least one resource that is identified by one or more of the query-resource pairings;
selecting, by the data processing apparatus, a set of the queries identified by query-resource pairings that identify a resource included in the subset based at least on the relevance score of the respective resource and the weight for each respective query-resource pairing
providing, by the data processing apparatus, one or more of the queries of the set to the user device;
generating, for each resource in the subset, a term vector from queries identified by stored query-resource pairings that correspond to the resource, wherein each dimension of the term vector corresponds to a distinct term of the queries identified by the stored query-resource pairings that correspond to the resource, and each dimension of the term vector has a value that is based on the respective weights of each query-resource pairing that identifies (i) the resource and (ii) a query that includes the distinct term that corresponds to the dimension;
generating one or more clusters of resources based on the term vectors of each resource in the subset;
for at least one cluster, selecting, as a representative query for the cluster, a query identified by stored query-resource pairings that correspond to the resources of the cluster based on the term vectors for each resource included in the cluster,
wherein selecting a set of the queries identified by query resource pairings that identify a resource included in the subset comprises selecting the set of queries from the representative queries;
generating, for each cluster, a rank score based on (i) the relevance scores of the search results that reference resources that match the resources of the cluster, and (ii) a quantity of the resources of the cluster; and
selecting, as refinement clusters, n clusters with the highest rank score, wherein n is a positive integer, and wherein each representative query is selected from one of the refinement clusters,
wherein selecting a set of the queries identified by query resource pairings that identify a resource included in the subset further comprises selecting one or more of the set of queries from the representative queries of m refinement clusters with the highest rank score, where m is a positive integer;
generating a respective centroid for each refinement cluster, each centroid representing a weighted center of a term vector that corresponds to the refinement cluster; and
generating, for each refinement cluster, a cluster score for each unique query identified by stored query-resource pairings that correspond to the resources of the refinement cluster based upon (i) a quantity of the query-resource pairings that identify the unique query, and (ii) a distance from the unique query to the centroid of the potential refinement cluster,
wherein each representative query selected for each refinement cluster is a unique query that has a highest cluster score of the cluster scores for the unique queries identified by stored query-resource pairings that correspond to the resources of the refinement cluster.
3. The method of claim 2 , further comprising:
for each resource in the subset:
multiplying, by a constant factor, the value of each dimension of the term vector that corresponds to a distinct term that matches a term included in the received search query; and
normalizing the term vector.
4. A system comprising:
a data processing apparatus; and
a data storage device storing instructions that, when executed, cause the data processing apparatus to perform operations comprising:
accessing a database that stores query-resource pairings and a respective weight for each query-resource pairing, each query-resource pairing identifying a single query and a single resource associated with the query;
obtaining, in response to receiving a search query, search results, each search result referencing a respective resource and having a respective relevance score;
identifying a subset of the resources referenced by the search results that match at least one resource that is identified by one or more of the query-resource pairings;
selecting a set of the queries identified by query-resource pairings that identify a resource included in the subset based at least on the relevance score of the respective resource and the weight for each respective query-resource pairing;
providing one or more of the queries of the set to the user device;
generating, for each resource in the subset, a term vector from queries identified by stored query-resource pairings that correspond to the resource, wherein each dimension of the term vector corresponds to a distinct term of the queries identified by the stored query-resource pairings that correspond to the resource, and each dimension of the term vector has a value that is based on the respective weights of each query-resource pairing that identifies (i) the resource and (ii) a query that includes the distinct term that corresponds to the dimension;
generating one or more clusters of resources based on the term vectors of each resource in the subset;
for at least one cluster, selecting, as a representative query for the cluster, a query identified by stored query-resource pairings that correspond to the resources of the cluster based on the term vectors for each resource included in the cluster,
wherein selecting a set of the queries identified by query resource pairings that identify a resource included in the subset comprises selecting the set of queries from the representative queries;
generating, for each cluster, a rank score based on (i) the relevance scores of the search results that reference resources that match the resources of the cluster, and (ii) a quantity of the resources of the cluster; and
selecting, as refinement clusters, n clusters with the highest rank score, wherein n is a positive integer, and wherein each representative query is selected from one of the refinement clusters,
wherein selecting a set of the queries identified by query resource pairings that identify a resource included in the subset further comprises selecting one or more of the set of queries from the representative queries of m refinement clusters with the highest rank score, where m is a positive integer;
generating a respective centroid for each refinement cluster, each centroid representing a weighted center of a term vector that corresponds to the refinement cluster; and
generating, for each refinement cluster, a cluster score for each unique query identified by stored query-resource pairings that correspond to the resources of the refinement cluster based upon (i) a quantity of the query-resource pairings that identify the unique query, and (ii) a distance from the unique query to the centroid of the potential refinement cluster,
wherein each representative query selected for each refinement cluster is a unique query that has a highest cluster score of the cluster scores for the unique queries identified by stored query-resource pairings that correspond to the resources of the refinement cluster.
5. The system of claim 4 , wherein the operations further comprise:
for each resource in the subset:
multiplying, by a constant factor, the value of each dimension of the term vector that corresponds to a distinct term that matches a term included in the received search query; and
normalizing the term vector.
6. A computer-readable device comprising instructions that, upon execution, cause a data processing apparatus to perform operations comprising:
accessing a database that stores query-resource pairings and a respective weight for each query-resource pairing, each query-resource pairing identifying a single query and a single resource associated with the query;
obtaining, in response to receiving a search query, search results, each search result referencing a respective resource and having a respective relevance score;
identifying a subset of the resources referenced by the search results that match at least one resource that is identified by one or more of the query-resource pairings;
selecting a set of the queries identified by query-resource pairings that identify a resource included in the subset based at least on the relevance score of the respective resource and the weight for each respective query-resource pairing;
providing one or more of the queries of the set to the user device;
generating, for each resource in the subset, a term vector from queries identified by stored query-resource pairings that correspond to the resource, wherein each dimension of the term vector corresponds to a distinct term of the queries identified by the stored query-resource pairings that correspond to the resource, and each dimension of the term vector has a value that is based on the respective weights of each query-resource pairing that identifies (i) the resource and (ii) a query that includes the distinct term that corresponds to the dimension;
generating one or more clusters of resources based on the term vectors of each resource in the subset;
for at least one cluster, selecting, as a representative query for the cluster, a query identified by stored query-resource pairings that correspond to the resources of the cluster based on the term vectors for each resource included in the cluster,
wherein selecting a set of the queries identified by query resource pairings that identify a resource included in the subset comprises selecting the set of queries from the representative queries;
generating, for each cluster, a rank score based on (i) the relevance scores of the search results that reference resources that match the resources of the cluster, and (ii) a quantity of the resources of the cluster; and
selecting, as refinement clusters, n clusters with the highest rank score, wherein n is a positive integer, and wherein each representative query is selected from one of the refinement clusters,
wherein selecting a set of the queries identified by query resource pairings that identify a resource included in the subset further comprises selecting one or more of the set of queries from the representative queries of m refinement clusters with the highest rank score, where m is a positive integer;
generating a respective centroid for each refinement cluster, each centroid representing a weighted center of a term vector that corresponds to the refinement cluster; and
generating, for each refinement cluster, a cluster score for each unique query identified by stored query-resource pairings that correspond to the resources of the refinement cluster based upon (i) a quantity of the query-resource pairings that identify the unique query, and (ii) a distance from the unique query to the centroid of the potential refinement cluster,
wherein each representative query selected for each refinement cluster is a unique query that has a highest cluster score of the cluster scores for the unique queries identified by stored query-resource pairings that correspond to the resources of the refinement cluster.
7. The computer-readable device of claim 6 , wherein the operations further comprise:
for each resource in the subset:
multiplying, by a constant factor, the value of each dimension of the term vector that corresponds to a distinct term that matches a term included in the received search query; and
normalizing the term vector.
Priority Applications (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/289,348 US8645407B2 (en) | 2003-09-05 | 2011-11-04 | System and method for providing search query refinements |
US14/169,879 US9552388B2 (en) | 2003-09-05 | 2014-01-31 | System and method for providing search query refinements |
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US50053903P | 2003-09-05 | 2003-09-05 | |
US10/668,721 US8086619B2 (en) | 2003-09-05 | 2003-09-22 | System and method for providing search query refinements |
US13/289,348 US8645407B2 (en) | 2003-09-05 | 2011-11-04 | System and method for providing search query refinements |
Related Parent Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/668,721 Continuation US8086619B2 (en) | 2003-09-05 | 2003-09-22 | System and method for providing search query refinements |
US10/688,721 Continuation US20050038102A1 (en) | 1997-10-14 | 2003-10-15 | Upregulation of type III endothelial cell Nitric Oxide Synthase by HMG-CoA reductase inhibitors |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/169,879 Continuation US9552388B2 (en) | 2003-09-05 | 2014-01-31 | System and method for providing search query refinements |
Publications (2)
Publication Number | Publication Date |
---|---|
US20120054216A1 US20120054216A1 (en) | 2012-03-01 |
US8645407B2 true US8645407B2 (en) | 2014-02-04 |
Family
ID=34228721
Family Applications (3)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/668,721 Expired - Fee Related US8086619B2 (en) | 2003-09-05 | 2003-09-22 | System and method for providing search query refinements |
US13/289,348 Expired - Fee Related US8645407B2 (en) | 2003-09-05 | 2011-11-04 | System and method for providing search query refinements |
US14/169,879 Expired - Lifetime US9552388B2 (en) | 2003-09-05 | 2014-01-31 | System and method for providing search query refinements |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/668,721 Expired - Fee Related US8086619B2 (en) | 2003-09-05 | 2003-09-22 | System and method for providing search query refinements |
Family Applications After (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/169,879 Expired - Lifetime US9552388B2 (en) | 2003-09-05 | 2014-01-31 | System and method for providing search query refinements |
Country Status (5)
Country | Link |
---|---|
US (3) | US8086619B2 (en) |
EP (1) | EP1665090A1 (en) |
JP (1) | JP4908214B2 (en) |
WO (1) | WO2005026989A1 (en) |
ZA (1) | ZA200602743B (en) |
Families Citing this family (136)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20090030948A9 (en) * | 2001-08-31 | 2009-01-29 | Lipman L K | Method and apparatus for matter-centric document management |
US6952691B2 (en) * | 2002-02-01 | 2005-10-04 | International Business Machines Corporation | Method and system for searching a multi-lingual database |
US8229957B2 (en) * | 2005-04-22 | 2012-07-24 | Google, Inc. | Categorizing objects, such as documents and/or clusters, with respect to a taxonomy and data structures derived from such categorization |
US7854009B2 (en) | 2003-06-12 | 2010-12-14 | International Business Machines Corporation | Method of securing access to IP LANs |
US8086619B2 (en) | 2003-09-05 | 2011-12-27 | Google Inc. | System and method for providing search query refinements |
US8548995B1 (en) * | 2003-09-10 | 2013-10-01 | Google Inc. | Ranking of documents based on analysis of related documents |
US20050065774A1 (en) * | 2003-09-20 | 2005-03-24 | International Business Machines Corporation | Method of self enhancement of search results through analysis of system logs |
US8014997B2 (en) | 2003-09-20 | 2011-09-06 | International Business Machines Corporation | Method of search content enhancement |
US7617205B2 (en) | 2005-03-30 | 2009-11-10 | Google Inc. | Estimating confidence for query revision models |
US7418455B2 (en) * | 2003-11-26 | 2008-08-26 | International Business Machines Corporation | System and method for indexing weighted-sequences in large databases |
US7890526B1 (en) * | 2003-12-30 | 2011-02-15 | Microsoft Corporation | Incremental query refinement |
US7689585B2 (en) * | 2004-04-15 | 2010-03-30 | Microsoft Corporation | Reinforced clustering of multi-type data objects for search term suggestion |
US8065383B2 (en) * | 2004-05-17 | 2011-11-22 | Simplefeed, Inc. | Customizable and measurable information feeds for personalized communication |
US9223868B2 (en) | 2004-06-28 | 2015-12-29 | Google Inc. | Deriving and using interaction profiles |
US9026534B2 (en) * | 2004-07-21 | 2015-05-05 | Cisco Technology, Inc. | Method and system to collect and search user-selected content |
US7496563B2 (en) * | 2004-08-04 | 2009-02-24 | International Business Machines Corporation | Method for locating documents a user has previously accessed |
US7831601B2 (en) * | 2004-08-04 | 2010-11-09 | International Business Machines Corporation | Method for automatically searching for documents related to calendar and email entries |
US7634461B2 (en) * | 2004-08-04 | 2009-12-15 | International Business Machines Corporation | System and method for enhancing keyword relevance by user's interest on the search result documents |
US7421421B2 (en) | 2004-08-04 | 2008-09-02 | International Business Machines Corporation | Method for providing multi-variable dynamic search results visualizations |
US20060031043A1 (en) * | 2004-08-04 | 2006-02-09 | Tolga Oral | System and method for utilizing a desktop integration module to collect user metrics |
US8261196B2 (en) * | 2004-08-04 | 2012-09-04 | International Business Machines Corporation | Method for displaying usage metrics as part of search results |
US20060031199A1 (en) * | 2004-08-04 | 2006-02-09 | Newbold David L | System and method for providing a result set visualizations of chronological document usage |
US7395260B2 (en) * | 2004-08-04 | 2008-07-01 | International Business Machines Corporation | Method for providing graphical representations of search results in multiple related histograms |
US7493303B2 (en) * | 2004-08-04 | 2009-02-17 | International Business Machines Corporation | Method for remotely searching a local user index |
US8065316B1 (en) * | 2004-09-30 | 2011-11-22 | Google Inc. | Systems and methods for providing search query refinements |
US8005853B2 (en) * | 2004-11-09 | 2011-08-23 | Snap-On Incorporated | Method and system for dynamically adjusting searches for diagnostic information |
US8346757B1 (en) * | 2005-03-28 | 2013-01-01 | Google Inc. | Determining query terms of little significance |
US7565345B2 (en) | 2005-03-29 | 2009-07-21 | Google Inc. | Integration of multiple query revision models |
US7870147B2 (en) * | 2005-03-29 | 2011-01-11 | Google Inc. | Query revision using known highly-ranked queries |
US8438142B2 (en) * | 2005-05-04 | 2013-05-07 | Google Inc. | Suggesting and refining user input based on original user input |
US20070016545A1 (en) * | 2005-07-14 | 2007-01-18 | International Business Machines Corporation | Detection of missing content in a searchable repository |
US7725485B1 (en) | 2005-08-01 | 2010-05-25 | Google Inc. | Generating query suggestions using contextual information |
KR100643309B1 (en) * | 2005-08-19 | 2006-11-10 | 삼성전자주식회사 | Apparatus and method for providing audio file using clustering |
US7921109B2 (en) * | 2005-10-05 | 2011-04-05 | Yahoo! Inc. | Customizable ordering of search results and predictive query generation |
US20070078803A1 (en) * | 2005-10-05 | 2007-04-05 | Gilmour David L | Method, system and apparatus for searchcasting with privacy control |
US7676517B2 (en) * | 2005-10-14 | 2010-03-09 | Microsoft Corporation | Search results injected into client applications |
US7756855B2 (en) * | 2006-10-11 | 2010-07-13 | Collarity, Inc. | Search phrase refinement by search term replacement |
US8429184B2 (en) | 2005-12-05 | 2013-04-23 | Collarity Inc. | Generation of refinement terms for search queries |
US8903810B2 (en) | 2005-12-05 | 2014-12-02 | Collarity, Inc. | Techniques for ranking search results |
CN100524307C (en) * | 2006-06-27 | 2009-08-05 | 国际商业机器公司 | Method and device for establishing coupled relation between documents |
BRPI0713830A2 (en) * | 2006-07-24 | 2017-10-17 | Chacha Search Inc | "computer readable method for controlling a computer including a guide database, computer readable memory for controlling a computer including a video and system training database" |
WO2008091387A2 (en) * | 2006-08-07 | 2008-07-31 | Chacha Search, Inc. | Electronic previous search results log |
US7831472B2 (en) | 2006-08-22 | 2010-11-09 | Yufik Yan M | Methods and system for search engine revenue maximization in internet advertising |
US9069750B2 (en) | 2006-10-10 | 2015-06-30 | Abbyy Infopoisk Llc | Method and system for semantic searching of natural language texts |
US9495358B2 (en) | 2006-10-10 | 2016-11-15 | Abbyy Infopoisk Llc | Cross-language text clustering |
US9098489B2 (en) | 2006-10-10 | 2015-08-04 | Abbyy Infopoisk Llc | Method and system for semantic searching |
US9189482B2 (en) | 2012-10-10 | 2015-11-17 | Abbyy Infopoisk Llc | Similar document search |
US9892111B2 (en) | 2006-10-10 | 2018-02-13 | Abbyy Production Llc | Method and device to estimate similarity between documents having multiple segments |
US9075864B2 (en) | 2006-10-10 | 2015-07-07 | Abbyy Infopoisk Llc | Method and system for semantic searching using syntactic and semantic analysis |
US8442972B2 (en) * | 2006-10-11 | 2013-05-14 | Collarity, Inc. | Negative associations for search results ranking and refinement |
US7917528B1 (en) * | 2007-04-02 | 2011-03-29 | Google Inc. | Contextual display of query refinements |
US20080250008A1 (en) * | 2007-04-04 | 2008-10-09 | Microsoft Corporation | Query Specialization |
US8935249B2 (en) | 2007-06-26 | 2015-01-13 | Oracle Otc Subsidiary Llc | Visualization of concepts within a collection of information |
US8832140B2 (en) * | 2007-06-26 | 2014-09-09 | Oracle Otc Subsidiary Llc | System and method for measuring the quality of document sets |
US8655868B2 (en) | 2007-09-12 | 2014-02-18 | Ebay Inc. | Inference of query relationships based on retrieved attributes |
US7765204B2 (en) * | 2007-09-27 | 2010-07-27 | Microsoft Corporation | Method of finding candidate sub-queries from longer queries |
US8019748B1 (en) | 2007-11-14 | 2011-09-13 | Google Inc. | Web search refinement |
US20090144262A1 (en) * | 2007-12-04 | 2009-06-04 | Microsoft Corporation | Search query transformation using direct manipulation |
US8001152B1 (en) | 2007-12-13 | 2011-08-16 | Zach Solan | Method and system for semantic affinity search |
US20090171929A1 (en) * | 2007-12-26 | 2009-07-02 | Microsoft Corporation | Toward optimized query suggeston: user interfaces and algorithms |
US20090228296A1 (en) * | 2008-03-04 | 2009-09-10 | Collarity, Inc. | Optimization of social distribution networks |
US8082278B2 (en) * | 2008-06-13 | 2011-12-20 | Microsoft Corporation | Generating query suggestions from semantic relationships in content |
US8438178B2 (en) | 2008-06-26 | 2013-05-07 | Collarity Inc. | Interactions among online digital identities |
US8538943B1 (en) * | 2008-07-24 | 2013-09-17 | Google Inc. | Providing images of named resources in response to a search query |
US8768933B2 (en) * | 2008-08-08 | 2014-07-01 | Kabushiki Kaisha Toshiba | System and method for type-ahead address lookup employing historically weighted address placement |
NL1035823C2 (en) * | 2008-08-15 | 2010-02-16 | Cornelis Remigius Verheijen | Method and system for ordering and maintaining information. |
JP5552582B2 (en) * | 2008-08-20 | 2014-07-16 | 株式会社Ｇ０２ | Content search device |
US9213961B2 (en) * | 2008-09-21 | 2015-12-15 | Oracle International Corporation | Systems and methods for generating social index scores for key term analysis and comparisons |
US9449078B2 (en) | 2008-10-01 | 2016-09-20 | Microsoft Technology Licensing, Llc | Evaluating the ranking quality of a ranked list |
US8515950B2 (en) * | 2008-10-01 | 2013-08-20 | Microsoft Corporation | Combining log-based rankers and document-based rankers for searching |
CN101464897A (en) * | 2009-01-12 | 2009-06-24 | 阿里巴巴集团控股有限公司 | Word matching and information query method and device |
US8719249B2 (en) * | 2009-05-12 | 2014-05-06 | Microsoft Corporation | Query classification |
US9020936B2 (en) * | 2009-08-14 | 2015-04-28 | Microsoft Technology Licensing, Llc | Using categorical metadata to rank search results |
US20120011432A1 (en) | 2009-08-19 | 2012-01-12 | Vitrue, Inc. | Systems and methods for associating social media systems and web pages |
US10339541B2 (en) | 2009-08-19 | 2019-07-02 | Oracle International Corporation | Systems and methods for creating and inserting application media content into social media system displays |
US11620660B2 (en) | 2009-08-19 | 2023-04-04 | Oracle International Corporation | Systems and methods for creating and inserting application media content into social media system displays |
US7831609B1 (en) * | 2009-08-25 | 2010-11-09 | Vizibility Inc. | System and method for searching, formulating, distributing and monitoring usage of predefined internet search queries |
US9104737B2 (en) * | 2009-10-08 | 2015-08-11 | Microsoft Technology Licensing, Llc | Social distance based search result order adjustment |
US8700652B2 (en) * | 2009-12-15 | 2014-04-15 | Ebay, Inc. | Systems and methods to generate and utilize a synonym dictionary |
US8631004B2 (en) * | 2009-12-28 | 2014-01-14 | Yahoo! Inc. | Search suggestion clustering and presentation |
US8875038B2 (en) | 2010-01-19 | 2014-10-28 | Collarity, Inc. | Anchoring for content synchronization |
US8150841B2 (en) * | 2010-01-20 | 2012-04-03 | Microsoft Corporation | Detecting spiking queries |
US8150859B2 (en) * | 2010-02-05 | 2012-04-03 | Microsoft Corporation | Semantic table of contents for search results |
US8983989B2 (en) * | 2010-02-05 | 2015-03-17 | Microsoft Technology Licensing, Llc | Contextual queries |
US8903794B2 (en) * | 2010-02-05 | 2014-12-02 | Microsoft Corporation | Generating and presenting lateral concepts |
US8260664B2 (en) * | 2010-02-05 | 2012-09-04 | Microsoft Corporation | Semantic advertising selection from lateral concepts and topics |
US8954404B2 (en) * | 2010-02-24 | 2015-02-10 | Demand Media, Inc. | Rule-based system and method to associate attributes to text strings |
US20110231395A1 (en) * | 2010-03-19 | 2011-09-22 | Microsoft Corporation | Presenting answers |
US9704165B2 (en) | 2010-05-11 | 2017-07-11 | Oracle International Corporation | Systems and methods for determining value of social media pages |
US8909623B2 (en) | 2010-06-29 | 2014-12-09 | Demand Media, Inc. | System and method for evaluating search queries to identify titles for content production |
US8560562B2 (en) | 2010-07-22 | 2013-10-15 | Google Inc. | Predictive query suggestion caching |
KR101274419B1 (en) * | 2010-12-30 | 2013-06-17 | 엔에이치엔(주) | System and mehtod for determining rank of keyword for each user group |
CN102567408B (en) | 2010-12-31 | 2014-06-04 | 阿里巴巴集团控股有限公司 | Method and device for recommending search keyword |
US8688667B1 (en) * | 2011-02-08 | 2014-04-01 | Google Inc. | Providing intent sensitive search results |
US8515985B1 (en) * | 2011-06-24 | 2013-08-20 | Google Inc. | Search query suggestions |
US20130110827A1 (en) * | 2011-10-26 | 2013-05-02 | Microsoft Corporation | Relevance of name and other search queries with social network feature |
US20130124490A1 (en) * | 2011-11-10 | 2013-05-16 | Microsoft Corporation | Contextual suggestion of search queries |
US9015160B2 (en) * | 2011-12-14 | 2015-04-21 | Brainspace Corporation | Multi-concept latent semantic analysis queries |
US8862592B2 (en) | 2012-01-10 | 2014-10-14 | Swoop Search, Llc | Systems and methods for graphical search interface |
US8694513B2 (en) | 2012-01-10 | 2014-04-08 | Swoop Search, Llc | Systems and methods for graphical search interface |
US9384184B2 (en) * | 2012-01-11 | 2016-07-05 | International Business Machines Corporation | Predicting a command in a command line interface |
US9201964B2 (en) * | 2012-01-23 | 2015-12-01 | Microsoft Technology Licensing, Llc | Identifying related entities |
US9342601B1 (en) | 2012-02-24 | 2016-05-17 | Google Inc. | Query formulation and search in the context of a displayed document |
US8423567B1 (en) * | 2012-03-23 | 2013-04-16 | Sap Ag | Dynamic query data visualizer |
US8560522B1 (en) | 2012-03-29 | 2013-10-15 | Sap Ag | Additional query date term granularity |
US11202958B2 (en) * | 2012-04-11 | 2021-12-21 | Microsoft Technology Licensing, Llc | Developing implicit metadata for data stores |
US9767144B2 (en) | 2012-04-20 | 2017-09-19 | Microsoft Technology Licensing, Llc | Search system with query refinement |
US9892198B2 (en) * | 2012-06-07 | 2018-02-13 | Oath Inc. | Page personalization performed by an edge server |
US20140075282A1 (en) * | 2012-06-26 | 2014-03-13 | Rediff.Com India Limited | Method and apparatus for composing a representative description for a cluster of digital documents |
US8918416B1 (en) * | 2012-09-19 | 2014-12-23 | Google Inc. | Classifying queries |
US8843470B2 (en) * | 2012-10-05 | 2014-09-23 | Microsoft Corporation | Meta classifier for query intent classification |
US9858314B2 (en) * | 2012-11-27 | 2018-01-02 | International Business Machines Corporation | System and method for refining search results |
US9116957B1 (en) * | 2013-03-05 | 2015-08-25 | Google Inc. | Substitute term scoring |
US9116952B1 (en) | 2013-05-31 | 2015-08-25 | Google Inc. | Query refinements using search data |
US9779182B2 (en) * | 2013-06-07 | 2017-10-03 | Microsoft Technology Licensing, Llc | Semantic grouping in search |
US9646166B2 (en) | 2013-08-05 | 2017-05-09 | International Business Machines Corporation | Masking query data access pattern in encrypted data |
US9852306B2 (en) | 2013-08-05 | 2017-12-26 | International Business Machines Corporation | Conjunctive search in encrypted data |
US9418103B2 (en) * | 2013-12-06 | 2016-08-16 | Quixey, Inc. | Techniques for reformulating search queries |
RU2580431C2 (en) * | 2014-03-27 | 2016-04-10 | Общество С Ограниченной Ответственностью "Яндекс" | Method and server for processing search queries and computer readable medium |
US20150293925A1 (en) * | 2014-04-09 | 2015-10-15 | Apple Inc. | Automatic generation of online media stations customized to individual users |
CN103914552B (en) * | 2014-04-14 | 2017-06-20 | 百度在线网络技术（北京）有限公司 | Using search method and device |
US20160140130A1 (en) * | 2014-11-18 | 2016-05-19 | Radialpoint Safecare Inc. | Method of Naming Query Clusters |
US9727648B2 (en) * | 2014-12-19 | 2017-08-08 | Quixey, Inc. | Time-box constrained searching in a distributed search system |
US10362060B2 (en) * | 2015-12-30 | 2019-07-23 | International Business Machines Corporation | Curtailing search engines from obtaining and controlling information |
CN105808761A (en) * | 2016-03-16 | 2016-07-27 | 山东大学 | Solr webpage sorting optimization method based on big data |
US10540378B1 (en) * | 2016-06-28 | 2020-01-21 | A9.Com, Inc. | Visual search suggestions |
KR101916798B1 (en) * | 2016-10-21 | 2018-11-09 | 네이버 주식회사 | Method and system for providing recommendation query using search context |
US11074280B2 (en) * | 2017-05-18 | 2021-07-27 | Aiqudo, Inc | Cluster based search and recommendation method to rapidly on-board commands in personal assistants |
US20180341686A1 (en) * | 2017-05-26 | 2018-11-29 | Nanfang Hu | System and method for data search based on top-to-bottom similarity analysis |
US11514095B2 (en) * | 2018-05-04 | 2022-11-29 | International Business Machines Corporation | Tiered retrieval of secured documents |
RU2731658C2 (en) | 2018-06-21 | 2020-09-07 | Общество С Ограниченной Ответственностью "Яндекс" | Method and system of selection for ranking search results using machine learning algorithm |
CN109388711A (en) * | 2018-09-05 | 2019-02-26 | 广州视源电子科技股份有限公司 | The method and apparatus of log stream cluster |
RU2733481C2 (en) | 2018-12-13 | 2020-10-01 | Общество С Ограниченной Ответственностью "Яндекс" | Method and system for generating feature for ranging document |
RU2744029C1 (en) | 2018-12-29 | 2021-03-02 | Общество С Ограниченной Ответственностью "Яндекс" | System and method of forming training set for machine learning algorithm |
US10803065B1 (en) * | 2019-09-12 | 2020-10-13 | Business Objects Software Ltd | Microcubes |
US11100170B2 (en) * | 2019-11-15 | 2021-08-24 | Microsoft Technology Licensing, Llc | Domain-agnostic structured search query exploration |
Citations (22)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5056021A (en) | 1989-06-08 | 1991-10-08 | Carolyn Ausborn | Method and apparatus for abstracting concepts from natural language |
US5488725A (en) | 1991-10-08 | 1996-01-30 | West Publishing Company | System of document representation retrieval by successive iterated probability sampling |
US6006225A (en) | 1998-06-15 | 1999-12-21 | Amazon.Com | Refining search queries by the suggestion of correlated terms from prior searches |
US6026388A (en) | 1995-08-16 | 2000-02-15 | Textwise, Llc | User interface and other enhancements for natural language information retrieval system and method |
JP2000227922A (en) | 1999-02-08 | 2000-08-15 | Nippon Telegr & Teleph Corp <Ntt> | Information retrieval device and method therefor, and recording medium recording program for executing its method |
US6173275B1 (en) | 1993-09-20 | 2001-01-09 | Hnc Software, Inc. | Representation and retrieval of images using context vectors derived from image information elements |
JP2001202390A (en) | 1999-12-14 | 2001-07-27 | Xerox Corp | Network base information retrieval system and documentary search promoting method |
US6285999B1 (en) | 1997-01-10 | 2001-09-04 | The Board Of Trustees Of The Leland Stanford Junior University | Method for node ranking in a linked database |
US6446061B1 (en) | 1998-07-31 | 2002-09-03 | International Business Machines Corporation | Taxonomy generation for document collections |
JP2002324077A (en) | 2001-04-24 | 2002-11-08 | Mitsubishi Electric Corp | Apparatus and method for document retrieval |
US20030014399A1 (en) | 2001-03-12 | 2003-01-16 | Hansen Mark H. | Method for organizing records of database search activity by topical relevance |
US6510406B1 (en) | 1999-03-23 | 2003-01-21 | Mathsoft, Inc. | Inverse inference engine for high performance web search |
US6560597B1 (en) | 2000-03-21 | 2003-05-06 | International Business Machines Corporation | Concept decomposition using clustering |
US6675159B1 (en) | 2000-07-27 | 2004-01-06 | Science Applic Int Corp | Concept-based search and retrieval system |
US6701305B1 (en) | 1999-06-09 | 2004-03-02 | The Boeing Company | Methods, apparatus and computer program products for information retrieval and document classification utilizing a multidimensional subspace |
US6711585B1 (en) | 1999-06-15 | 2004-03-23 | Kanisa Inc. | System and method for implementing a knowledge management system |
US6823333B2 (en) | 2001-03-02 | 2004-11-23 | The United States Of America As Represented By The Administrator Of The National Aeronautics And Space Administration | System, method and apparatus for conducting a keyterm search |
US20050055341A1 (en) | 2003-09-05 | 2005-03-10 | Paul Haahr | System and method for providing search query refinements |
US7130849B2 (en) | 2002-02-05 | 2006-10-31 | Hitachi, Ltd. | Similarity-based search method by relevance feedback |
US7158969B2 (en) * | 2003-06-12 | 2007-01-02 | International Business Machines Corporation | Iterative data analysis process via query result augmentation and result data feedback |
US7162473B2 (en) * | 2003-06-26 | 2007-01-09 | Microsoft Corporation | Method and system for usage analyzer that determines user accessed sources, indexes data subsets, and associated metadata, processing implicit queries based on potential interest to users |
US7617203B2 (en) * | 2003-08-01 | 2009-11-10 | Yahoo! Inc | Listings optimization using a plurality of data sources |
Family Cites Families (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US2801561A (en) * | 1954-04-16 | 1957-08-06 | Vern G Bonner | Wrench with segmental work engaging portions |
AU8102198A (en) * | 1997-07-01 | 1999-01-25 | Partran Aps | A method of noise reduction in speech signals and an apparatus for performing the method |
US6574632B2 (en) * | 1998-11-18 | 2003-06-03 | Harris Corporation | Multiple engine information retrieval and visualization system |
US6493702B1 (en) * | 1999-05-05 | 2002-12-10 | Xerox Corporation | System and method for searching and recommending documents in a collection using share bookmarks |
US6745650B1 (en) * | 2002-12-02 | 2004-06-08 | Tsung-Chieh Chang | Spanner head orientation positioning device |
-
2003
- 2003-09-22 US US10/668,721 patent/US8086619B2/en not_active Expired - Fee Related
-
2004
- 2004-09-01 JP JP2006525450A patent/JP4908214B2/en not_active Expired - Fee Related
- 2004-09-01 WO PCT/US2004/028651 patent/WO2005026989A1/en active Application Filing
- 2004-09-01 EP EP04783030A patent/EP1665090A1/en not_active Ceased
-
2006
- 2006-04-04 ZA ZA200602743A patent/ZA200602743B/en unknown
-
2011
- 2011-11-04 US US13/289,348 patent/US8645407B2/en not_active Expired - Fee Related
-
2014
- 2014-01-31 US US14/169,879 patent/US9552388B2/en not_active Expired - Lifetime
Patent Citations (23)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5056021A (en) | 1989-06-08 | 1991-10-08 | Carolyn Ausborn | Method and apparatus for abstracting concepts from natural language |
US5488725A (en) | 1991-10-08 | 1996-01-30 | West Publishing Company | System of document representation retrieval by successive iterated probability sampling |
US6173275B1 (en) | 1993-09-20 | 2001-01-09 | Hnc Software, Inc. | Representation and retrieval of images using context vectors derived from image information elements |
US6026388A (en) | 1995-08-16 | 2000-02-15 | Textwise, Llc | User interface and other enhancements for natural language information retrieval system and method |
US6285999B1 (en) | 1997-01-10 | 2001-09-04 | The Board Of Trustees Of The Leland Stanford Junior University | Method for node ranking in a linked database |
US6006225A (en) | 1998-06-15 | 1999-12-21 | Amazon.Com | Refining search queries by the suggestion of correlated terms from prior searches |
US6446061B1 (en) | 1998-07-31 | 2002-09-03 | International Business Machines Corporation | Taxonomy generation for document collections |
JP2000227922A (en) | 1999-02-08 | 2000-08-15 | Nippon Telegr & Teleph Corp <Ntt> | Information retrieval device and method therefor, and recording medium recording program for executing its method |
US6510406B1 (en) | 1999-03-23 | 2003-01-21 | Mathsoft, Inc. | Inverse inference engine for high performance web search |
US6701305B1 (en) | 1999-06-09 | 2004-03-02 | The Boeing Company | Methods, apparatus and computer program products for information retrieval and document classification utilizing a multidimensional subspace |
US6711585B1 (en) | 1999-06-15 | 2004-03-23 | Kanisa Inc. | System and method for implementing a knowledge management system |
JP2001202390A (en) | 1999-12-14 | 2001-07-27 | Xerox Corp | Network base information retrieval system and documentary search promoting method |
US6732088B1 (en) | 1999-12-14 | 2004-05-04 | Xerox Corporation | Collaborative searching by query induction |
US6560597B1 (en) | 2000-03-21 | 2003-05-06 | International Business Machines Corporation | Concept decomposition using clustering |
US6675159B1 (en) | 2000-07-27 | 2004-01-06 | Science Applic Int Corp | Concept-based search and retrieval system |
US6823333B2 (en) | 2001-03-02 | 2004-11-23 | The United States Of America As Represented By The Administrator Of The National Aeronautics And Space Administration | System, method and apparatus for conducting a keyterm search |
US20030014399A1 (en) | 2001-03-12 | 2003-01-16 | Hansen Mark H. | Method for organizing records of database search activity by topical relevance |
JP2002324077A (en) | 2001-04-24 | 2002-11-08 | Mitsubishi Electric Corp | Apparatus and method for document retrieval |
US7130849B2 (en) | 2002-02-05 | 2006-10-31 | Hitachi, Ltd. | Similarity-based search method by relevance feedback |
US7158969B2 (en) * | 2003-06-12 | 2007-01-02 | International Business Machines Corporation | Iterative data analysis process via query result augmentation and result data feedback |
US7162473B2 (en) * | 2003-06-26 | 2007-01-09 | Microsoft Corporation | Method and system for usage analyzer that determines user accessed sources, indexes data subsets, and associated metadata, processing implicit queries based on potential interest to users |
US7617203B2 (en) * | 2003-08-01 | 2009-11-10 | Yahoo! Inc | Listings optimization using a plurality of data sources |
US20050055341A1 (en) | 2003-09-05 | 2005-03-10 | Paul Haahr | System and method for providing search query refinements |
Non-Patent Citations (16)
Title |
---|
Chen An et al. "Fuzzy Concept Graph and Application in Web Document Clustering", 2001, pp. 101-106, IEEE. |
Christina Yip Chung et al., "Thematic Mapping-From Unstructured Documents to Taxonomies," CIKM'02, Nov. 4-9, 2002, pp. 608-610, ACM, McLean, Virginia, USA. |
Doug Beeferman et al.; Agglomerative Clustering of a Search Engine Query Log; Proceedings of the 6th ACM SIGKDD International Conference on Knowledge and Discovery and Data Mining; Aug. 2000; 10 pages. |
Edie Rasmussen; "Information Retrieval: Data Structures and Algorithims"; Prentice Hall, 1992; pp. 419-442. |
F. Scholer and H. E. Williams: "Query Association for Effective Retrieval", School of Computer Science and Information Technology, RMIT University, Melbourne, Australia, 2002, 8 pages. |
Hang Cui et al.; Probalistic Query Expansion Using Query Logs; Proceedings of the 11th International Conference on World Wide Web; May 7-11, 2002, 18 pages. |
Hiroyuki Kawano, "Overview of Mondou Web Search Engine Using Text Mining and Information Visualizing Technologies," IEEE, 2001, pp. 234-241. |
International Search Report from corresponding PCT Application, mail date Feb. 18, 2005, 5 pages. |
James Osborn et al., "Justice: A Judicial Search Tool Using Intelligent Concept Extraction," ICAIL-99, 1999, pp. 173-181, ACM. |
Ji-Rong Wen et al.; Clustering User Queries of a Search Engine; Proceedings of the 10th International Conference on World Wide Web; May 1-5, 2001; pp. 162-168. |
Ji-Rong Wen et al.; Clustering User Queries of a Search Engine; Proceedings of the 10th International Conference on World WideWeb; May 1-5, 2001; 14 pages. |
Kang et al., "Query Type Classification for Web Document Retrieval", SIGIR '03, Jul. 29-Aug. 1, 2003, Toronto, Canada, 8 pages. * |
Larry Fitzpatrick et al.; Automatic Feedback Using Past Queries: Social Search?; Proceedings of the 20th Annual International ACM SIGIR Conference on Research and Development in Information Retrieval; Jul. 1997 (print date); pp. 306-313. |
Natalie S. Glance; Community Search Assistant; Proceedings of the 6th International Conference on Intelligent User Interfaces; Jan. 14-17, 2001; pp. 91-96. |
Tomoe Tomiyama et al.; "Concept-Based Web Communities for Google Search Engine"; 2003, IEEE; The IEEE International Conference on Fuzzy Systems; pp. 1122-1128. |
Yo-Ping Huang et al.; "A Fuzzy Feature Clustering with Relevance Feedback Approach to Content-Base Image Retrieval"; VECIMS 2003-International Symposium on Virtual Environments, Human-Computer Interfaces, and Measurement Systems; Lugano, Switzerland, Jul. 27-29, 2003; pp. 57-62. |
Also Published As
Publication number | Publication date |
---|---|
US8086619B2 (en) | 2011-12-27 |
US20120054216A1 (en) | 2012-03-01 |
ZA200602743B (en) | 2007-05-30 |
JP4908214B2 (en) | 2012-04-04 |
US20140149415A1 (en) | 2014-05-29 |
JP2007504561A (en) | 2007-03-01 |
US20050055341A1 (en) | 2005-03-10 |
EP1665090A1 (en) | 2006-06-07 |
US9552388B2 (en) | 2017-01-24 |
WO2005026989A1 (en) | 2005-03-24 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9552388B2 (en) | System and method for providing search query refinements | |
US9218397B1 (en) | Systems and methods for improved searching | |
US8145618B1 (en) | System and method for determining a composite score for categorized search results | |
US10223439B1 (en) | Systems and methods for providing search query refinements | |
EP1596313B1 (en) | Method and system for schema matching of web databases | |
US7392238B1 (en) | Method and apparatus for concept-based searching across a network | |
US7865495B1 (en) | Word deletion for searches | |
US9507804B2 (en) | Similar search queries and images | |
US8024326B2 (en) | Methods and systems for improving a search ranking using related queries | |
US6101491A (en) | Method and apparatus for distributed indexing and retrieval | |
US8156102B2 (en) | Inferring search category synonyms | |
US7739264B2 (en) | System and method for generating substitutable queries on the basis of one or more features | |
US20080215565A1 (en) | Searching heterogeneous interrelated entities | |
US20040064447A1 (en) | System and method for management of synonymic searching | |
JP2013506189A (en) | Retrieving information based on general query attributes | |
Shang et al. | Precision evaluation of search engines |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE, INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:HAAHR, PAUL;BAKER, STEVE;REEL/FRAME:029656/0145Effective date: 20030919 |
|
FEPP | Fee payment procedure |
Free format text: MAINTENANCE FEE REMINDER MAILED (ORIGINAL EVENT CODE: REM.) |
|
LAPS | Lapse for failure to pay maintenance fees |
Free format text: PATENT EXPIRED FOR FAILURE TO PAY MAINTENANCE FEES (ORIGINAL EVENT CODE: EXP.) |
|
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20180204 |