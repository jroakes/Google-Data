CN116438527A - Particle signal for offline to online modeling - Google Patents
Particle signal for offline to online modeling Download PDFInfo
- Publication number
- CN116438527A CN116438527A CN202180047111.6A CN202180047111A CN116438527A CN 116438527 A CN116438527 A CN 116438527A CN 202180047111 A CN202180047111 A CN 202180047111A CN 116438527 A CN116438527 A CN 116438527A
- Authority
- CN
- China
- Prior art keywords
- machine learning
- learning model
- activity
- data
- computing system
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 239000002245 particle Substances 0.000 title description 2
- 230000000694 effects Effects 0.000 claims abstract description 348
- 238000010801 machine learning Methods 0.000 claims abstract description 203
- 238000000034 method Methods 0.000 claims abstract description 159
- 238000009826 distribution Methods 0.000 claims abstract description 56
- 230000004044 response Effects 0.000 claims abstract description 13
- 238000012549 training Methods 0.000 claims description 38
- 238000004891 communication Methods 0.000 claims description 18
- 230000002123 temporal effect Effects 0.000 claims description 18
- 238000005070 sampling Methods 0.000 claims description 5
- 230000001131 transforming effect Effects 0.000 claims 2
- 238000012545 processing Methods 0.000 description 65
- 230000008569 process Effects 0.000 description 53
- 238000006243 chemical reaction Methods 0.000 description 30
- 238000013528 artificial neural network Methods 0.000 description 19
- 230000015654 memory Effects 0.000 description 17
- 230000009466 transformation Effects 0.000 description 15
- 238000011156 evaluation Methods 0.000 description 11
- 230000003993 interaction Effects 0.000 description 10
- 238000013519 translation Methods 0.000 description 7
- 230000000007 visual effect Effects 0.000 description 7
- 230000006870 function Effects 0.000 description 6
- 230000037361 pathway Effects 0.000 description 6
- 230000009977 dual effect Effects 0.000 description 5
- 230000000306 recurrent effect Effects 0.000 description 5
- 230000008901 benefit Effects 0.000 description 4
- 230000004048 modification Effects 0.000 description 4
- 238000012986 modification Methods 0.000 description 4
- 230000007704 transition Effects 0.000 description 4
- 239000013598 vector Substances 0.000 description 4
- 238000013527 convolutional neural network Methods 0.000 description 3
- 238000013480 data collection Methods 0.000 description 3
- 238000005259 measurement Methods 0.000 description 3
- 230000007246 mechanism Effects 0.000 description 3
- 230000009471 action Effects 0.000 description 2
- 238000004458 analytical method Methods 0.000 description 2
- 230000005540 biological transmission Effects 0.000 description 2
- 238000013500 data storage Methods 0.000 description 2
- 230000001934 delay Effects 0.000 description 2
- 238000001514 detection method Methods 0.000 description 2
- 238000003709 image segmentation Methods 0.000 description 2
- 238000002372 labelling Methods 0.000 description 2
- 230000007787 long-term memory Effects 0.000 description 2
- 238000012423 maintenance Methods 0.000 description 2
- 238000007726 management method Methods 0.000 description 2
- 238000012544 monitoring process Methods 0.000 description 2
- 239000000047 product Substances 0.000 description 2
- 230000011218 segmentation Effects 0.000 description 2
- 230000006403 short-term memory Effects 0.000 description 2
- 230000001052 transient effect Effects 0.000 description 2
- 101100262292 Caenorhabditis elegans txdc-9 gene Proteins 0.000 description 1
- 238000007792 addition Methods 0.000 description 1
- 230000004075 alteration Effects 0.000 description 1
- 230000006399 behavior Effects 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 238000007906 compression Methods 0.000 description 1
- 230000006835 compression Effects 0.000 description 1
- 238000013144 data compression Methods 0.000 description 1
- 238000010586 diagram Methods 0.000 description 1
- 230000006872 improvement Effects 0.000 description 1
- 238000013507 mapping Methods 0.000 description 1
- 239000003550 marker Substances 0.000 description 1
- 230000003287 optical effect Effects 0.000 description 1
- 239000013589 supplement Substances 0.000 description 1
- 238000013024 troubleshooting Methods 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/248—Presentation of query results
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/084—Backpropagation, e.g. using gradient descent
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/09—Supervised learning
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q30/00—Commerce
- G06Q30/02—Marketing; Price estimation or determination; Fundraising
- G06Q30/0201—Market modelling; Market analysis; Collecting market data
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q30/00—Commerce
- G06Q30/02—Marketing; Price estimation or determination; Fundraising
- G06Q30/0201—Market modelling; Market analysis; Collecting market data
- G06Q30/0202—Market predictions or forecasting for commercial activities
Abstract
Exemplary aspects of embodiments of the present disclosure provide an example computer-implemented method. The example method includes receiving source activity data. The example method includes performing a query on a target activity related to the source activity data. In the example method, performing the query includes determining a predicted target activity related to the source activity data using a first machine learning model of a machine learning model framework. In the example method, executing the query includes generating a predicted time distribution of the target activity using a second machine learning model of the machine learning model framework. The example method includes outputting, in response to a query, a query result based at least in part on the predicted target activity and the predicted time distribution of the target activity.
Description
Technical Field
The present disclosure relates generally to generating associations using machine learning models. More particularly, example aspects of the present disclosure relate to generating associations between online activities and offline activities using a machine learning model framework.
Background
Some service providers may provide cross-platform services to users or customers. In some examples, the cross-platform services may include services provided on one service pathway (e.g., an online system) with limited communication with another service pathway (e.g., another system, a physical service outlet, etc.). To provide improved cross-platform services, it may be desirable to associate data records of activities in one pathway with data records of activities in another pathway.
Disclosure of Invention
Aspects and advantages of embodiments of the disclosure will be set forth in part in the description which follows, or may be learned by practice of the embodiments.
In one example aspect, the present disclosure provides an example computer-implemented method. An example method includes receiving, by a computing system including one or more processors, a record of a tag. In an example method, the marked record includes a linked source activity and a linked target activity. An example method includes updating, by a computing system, one or more parameters of a first machine learning model using a record of tags, the first machine learning model configured to output data describing a target activity associated with a source activity. An example method includes updating, by the computing system, one or more parameters of a second machine learning model using the marked record, the second machine learning model configured to output a distribution of target activity over time.
In one example aspect, the present disclosure provides another example computer-implemented method. An example method includes receiving, by a computing system including one or more processors, source activity data. An example method includes executing, by a computing system, a query for a target activity related to source activity data. In an example method, executing the query includes determining, by the computing system, a predicted target activity related to the source activity data using a first machine learning model of a machine learning model framework. In an example method, executing the query includes generating, by the computing system, a predicted temporal distribution of the target activity using a second machine learning model of the machine learning model framework. An example method includes generating, by a computing system in response to a query, a query result based at least in part on a predicted target activity and a predicted temporal distribution of the target activity.
In one example aspect, the present disclosure provides an example system. An example system includes one or more processors and one or more memory devices storing computer-readable instructions. In an example system, the instructions, when executed, cause one or more processors to perform operations. In an example system, operations include receiving source activity data. In an example system, operations include performing a query for a target activity related to source activity data. In an example system, performing a query includes determining a predicted target activity related to source activity data using a first machine learning model of a machine learning model framework. In an example system, executing the query includes generating a predicted time distribution of the target activity using a second machine learning model of the machine learning model framework. In an example system, operations include generating, by a computing system in response to a query, a query result based at least in part on a predicted target activity and a predicted temporal distribution of the target activity.
In one example aspect, the present disclosure provides an example computer-readable medium storing computer-readable instructions that, when executed, cause one or more processors to perform operations. In an example computer-readable medium, operations include receiving source activity data. In an example computer-readable medium, operations include performing a query for a target activity related to source activity data. In an example computer-readable medium, performing the query includes determining a predicted target activity related to the source activity data using a first machine learning model of a machine learning model framework. In an example computer-readable medium, performing the query includes generating a predicted time distribution of the target activity using a second machine learning model of the machine learning model framework. In an example computer-readable medium, operations include generating, by a computing system in response to a query, a query result based at least in part on a predicted target activity and a predicted temporal distribution of the target activity.
These and other features, aspects, and advantages of various embodiments of the present disclosure will become better understood with reference to the following description and appended claims. The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate exemplary embodiments of the disclosure and together with the description, serve to explain the principles of interest.
Drawings
A detailed discussion of embodiments directed to one of ordinary skill in the art is set forth in the specification, which makes reference to the accompanying drawings, in which:
FIG. 1 depicts an example system for processing queries on a dataset in accordance with an example aspect of the present disclosure;
FIG. 2 depicts an exemplary embodiment of a query processing subsystem for processing queries on a dataset in accordance with an exemplary aspect of the present disclosure;
FIG. 3 depicts an example processing system for processing queries on a dataset in accordance with an example aspect of the present disclosure;
FIG. 4 depicts a flowchart of an example method for processing queries on a dataset, according to an example aspect of the disclosure;
FIG. 5 depicts a flowchart of another example method for processing queries on a dataset in accordance with an example aspect of the present disclosure; and
FIG. 6 depicts a flowchart of an example method for training a system for processing queries on a dataset, in accordance with an example aspect of the present disclosure.
Repeated reference numerals across the several figures are intended to identify identical features in different implementations.
Detailed Description
In general, the present disclosure relates to techniques for associating activity data from a source platform with a target activity in a different pathway than the source platform. In some embodiments, the source activity data may describe interactions with content on a source computing system (e.g., a system hosting service provider content). In some embodiments, the target activity may be related to the subject matter of the source activity data, but in some scenarios the source platform may not have visibility to the target activity for determining the relationship. For example, a source activity may include interactions with an online service, while a target activity may include accessing a physical location associated with the online service—in some cases, the online platform may not be in communication with a physical location that indicates information about any access.
Advantageously, systems and methods according to example aspects of the present disclosure may enable, for example, a service provider to perform a query on source activity data to obtain data describing a target activity associated with (e.g., derived from, responsive to, etc.) the source activity. For example, in some embodiments, a service provider associated with the online platform in the above scenario may perform a query on the activity data on the online platform to obtain data describing access to the physical location. The retrieved query results may include a set of conversion tag information (conversion label information) (e.g., indicating that the source activity has been "converted to" the target activity, etc.). In some examples, the set of conversion tag information may correspond to a distribution over time. For example, the distribution over time may indicate a "lag" between the source activity and any subsequent transition to the target activity. In some examples, each hysteresis value (e.g., sampled from the output distribution) corresponds to a probability that the target activity has that hysteresis value. In this way, for example, systems and methods according to example aspects of the present disclosure may allow queries for related target activities to be processed on a set of source activity data (e.g., when such query results may not otherwise be available).
In some embodiments, systems and methods according to example aspects of the present disclosure may use a machine learning model framework to process queries on source activity data to obtain the above-described advantages. In some embodiments, systems and methods according to example aspects of the present disclosure utilize a dual model structure in a machine learning model framework. For example, the machine learning model framework may include a transformation model and a hysteresis model. Each model may be trained on a set of labeled records (such as the source activity data and the lag time of the subsequent conversion, labeled or otherwise linked to correspond to each other). In this way, for example, the machine learning model framework may use the tagged (e.g., tagged) data to learn to use the transformation model to obtain target activity tag information on a set of untagged source activity data, use the hysteresis model to obtain a hysteresis time for any subsequent target activity, and thereby obtain results of a query for related target activities on the source activity data set (e.g., otherwise, when such query results may not be available).
Example systems and methods according to example aspects of the present disclosure may provide various technical effects and benefits. For example, in some embodiments, example systems and methods may enable processing of queries for related events in data-limited contexts (which would otherwise lack sufficient data to return available query results). Query processing may be enabled by, for example, using the machine learning model framework of the present disclosure to index one or more source activity events as corresponding to one or more target activity events according to one or more parameters of the machine learning model framework.
In some embodiments, by employing a machine learning model framework to obtain conversion results and hysteresis results on a source activity dataset (e.g., even when direct target activity mapping is not generally available), example systems and methods may allow query results to be obtained with less time, effort, and/or expense (e.g., computational expense). For example, by learning parameter sets of a model framework for machine learning over smaller known indexed data sets, and using the learned parameter sets to determine correlations between non-indexed source activity inputs and target activity outputs, example systems and methods may extend the capabilities of a database processing system to determine relationships between activity data (e.g., between non-indexed online and offline activities).
In some embodiments, example systems and methods according to example aspects of the present disclosure may provide improved storage, management, retrieval, and cross-referencing of data structures in memory (e.g., in a database). For example, an example database may contain real-world data (real-world data) structures describing various unlabeled source activity instances. The example database (or another database) may also contain a data structure describing marked active data instances. Based on the marked data instances, an example computing system according to the present disclosure may learn an intermediate set of data structures (e.g., a set of learned parameters of a machine learning model framework) to map unmarked source activity instances to subsequent target activities. While the intermediate set of data structures is not necessarily interpretable by a human observer (e.g., can be understood to be identifiably representative of underlying real data), the intermediate set of data structures is operable to cause a computing system executing a machine learning model to learn to associate an unlabeled source activity instance set with target activity label information and/or a temporal distribution of target activity. In this way, for example, source activity data that is not otherwise indexed and/or classified that has no structural relationship with the target activity data may be advantageously queried by systems and methods according to the present disclosure. And in some embodiments, for example, an intermediate set of data structures may be used to provide for association of untagged source activity instance data structures in a database with one or more conversion tags to enable improved storage and/or retrieval of those data structures (e.g., indexed storage based on one or more tags, retrieval based on one or more tags, etc.).
In some examples, the dual model framework of example embodiments of the present disclosure may provide, among other things, improved storage, management, retrieval, and cross-referencing of data structures in memory (e.g., in a database). For example, by utilizing two different models for transition labeling and hysteresis determination, the machine learning model framework may achieve modularity that allows more options for reconfiguration, maintenance, troubleshooting, and updating of the query processing system of the present disclosure. Further, the query processing system of the present disclosure utilizing a dual model framework may be configured on-the-fly by replacing either or both of the conversion model or the lag model with a replacement model trained for one or more specific tasks. For example, in some seasons, the hysteresis may be optimally determined differently than how the hysteresis is optimally determined in other seasons. Thus, the dual model framework provides a highly configurable query processing system for processing queries for unlabeled source activity data in a database.
In some embodiments, for example, an intermediate set of data structures may be used to provide processing and execution of queries on an unlabeled set of source active instances. For example, the query may include a query that obtains a predicted temporal distribution of target activities related to an input set of source activities. An unlabeled source activity instance may not include any value or label that records a link to a target activity. Advantageously, however, the intermediate set of data structures may map the input source activity data to an output data structure containing query objects: time distribution of target activity related to an input set of source activity. In this way, for example, example systems and methods in accordance with aspects of the present disclosure may provide for the execution and processing of queries on an input dataset even when such queries may not otherwise be available (e.g., due to data-starvation or communication-limited implementations).
In some embodiments, example systems and methods according to example aspects of the present disclosure may provide for determining correlations between a set of unlabeled source activity data. For example, the correlation may be determined along a dimension in the source activity data that has no markers or has incomplete markers. For example, a time dependency may be determined on the source activity data even when the source activity data may lack a complete (or any) signature of the time relationship. For example, in some embodiments, the source activity data may include a timestamp (e.g., date, time, date and time, etc.) associated with the source activity, but the source activity data may lack a timestamp of any subsequent target activity. Advantageously, example systems and methods according to example aspects of the present disclosure may provide for determining a correlation between source activity data from a time dimension of any subsequent target data (e.g., for which tag information may be lacking). For example, example systems and methods according to example aspects of the present disclosure may provide for determining a temporal relationship of a time window (e.g., data describing source activity instances that are all determined to have transitioned within a given time window, such as counts, etc.).
As shown herein, the example systems and methods of the present disclosure provide improvements in data storage, indexing, query processing, and result retrieval, which in turn may improve the ability of the computing system to associate data structures (e.g., by indexing previously unlabeled real data for a query), increase computational efficiency (e.g., by returning fewer empty query results due to unlabeled data), and reduce computational costs (e.g., by predicting tag information for unlabeled data, rather than requiring additional data collection), in some examples.
Example systems and methods
Referring now to the drawings, example embodiments of the present disclosure will be discussed in more detail. FIG. 1 depicts one example system 100 for processing example queries in accordance with example aspects of the present disclosure. The example system 100 includes a computing system 102. Computing system 102 may be any type of system of one or more computing devices. The computing device may be, for example, a personal computing device (e.g., a laptop or desktop), a mobile computing device (e.g., a smartphone or tablet), a game console or controller, a wearable computing device, an embedded computing device, a server computing device, a node of a distributed computing device, a virtual instance hosted on a shared server, or any other type of computing device. In some embodiments, computing system 102 includes multiple computing devices interconnected via a network or distributed in an interoperable manner. For example, computing system 102 may include a server for serving content over a network (e.g., network 180). For example, computing system 102 may include a web server for hosting web content, for collecting data about the web content (e.g., for receiving, monitoring, generating, or otherwise processing data about the web content, such as using, downloading, and/or interacting with the web content).
Computing system 102 may include a processor 112 and a memory 114. The one or more processors 112 may be any suitable processing device (e.g., processor core, microprocessor, ASIC, FPGA, controller, microcontroller, etc.), and may be an operatively connected processor or processors. Memory 114 may include one or more non-transitory computer-readable storage media, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, and the like, and combinations thereof. Memory 114 may store data 116 and instructions 118 that are executed by processor 112 to cause computing system 102 to perform operations.
In some implementations, the client computing system 102 may store or otherwise implement one or more machine learning models that execute a machine learning model framework. In some embodiments, the query processing subsystem 120 includes a dual model machine learning model framework. The machine learning model framework may include a machine learning transformation model 122 (e.g., with a learnable weight 124), a machine learning hysteresis model 126 (e.g., with a learnable weight 128). The one or more machine learning models may be or may additionally include various machine learning models, such as neural networks (e.g., deep neural networks) or other types of machine learning models, including nonlinear models and/or linear models. The neural network may include a feed forward neural network, a recurrent neural network (e.g., a long and short term memory recurrent neural network), a convolutional neural network, or other form of neural network. Some example machine learning models may utilize an attention mechanism, such as self-attention. For example, some example machine learning models may include a multi-headed self-care model (e.g., transformer model (transformer model)).
As shown in fig. 1, an embodiment of an example system 100 may be configured to process a query 130 on a source activity 140 (e.g., containing a source activity event 142) with respect to a target activity 150 (e.g., containing a target activity event 152). In response to processing the query 130, the computing system 102 may output the query results 160. In some embodiments, query results 160 may include conversion data 162 (e.g., output from conversion model 122 according to weights 124) and hysteresis distribution 164 (e.g., output from hysteresis model 126 according to weights 128). Query 130 may be processed using a marked record 170, the marked record 170 containing a linked source activity event 142 'and a linked target activity event 152'.
In some embodiments, the query 130 is entered into an input of the computing system 102. For example, in some embodiments, the query processing subsystem 120 may be configured to process various queries 130 as inputs to the computing system 102. In some embodiments, the query 130 may be implicit in the structure and/or configuration of the query processing subsystem 120. For example, the query processing subsystem 120 may be configured to generate a response to a query of a predicted temporal distribution of the target activity. For example, the query processing subsystem 120 may be configured to generate a response to a query describing the timing of a subsequent target activity 150 and related to the source activity 140.
In some embodiments, the source activity 140 includes unlabeled source activity events 142. Unlabeled source activity event 142 may include an instance of substantially any kind or type of data that may describe various phenomena. Generally, an instance refers to a set of one or more data values that are combined together to describe a particular subject or topic. For example, an instance may be a feature vector. Examples may be associated with image data (e.g., feature vectors of images, hashed images, etc.). Examples may be associated with measurements or other data collection events (e.g., at a particular time, or of a particular subject, or using a particular device, or from a particular perspective, etc.). In some examples, an instance of an unlabeled source activity event may indicate a communication (e.g., a message in a content item) from a source entity.
An instance may be associated with a Web session, such as a set of interactions with a Web server. In some embodiments, the instance may be associated with user interactions with web content (e.g., anonymous or identified). In some embodiments, the unlabeled source activity event 142 may not contain label information for the instance. In some embodiments, unlabeled source activity event 142 may contain some tag information, but may lack other tag information. For example, an unlabeled source activity event 142 may lack the tag certainty of a query that is expected to be processed on the set of unlabeled source activity events 142 or otherwise respond to the query.
For example, in some embodiments, the source activity event 142 may contain data describing the source platform and/or content items on the platform that facilitate the event. The source activity event 142 may contain data describing the user and its role in the event, such as how long the user interacted with the platform and/or content item, what action the user took on the platform (e.g., what content was watched, such as using a content ID, whether any product was added to a shopping cart and/or whether any product was purchased), shipping location information, known or estimated user demographics, and the like. In some embodiments, the source activity event 142 may include timing data. For example, the timing data may include the date of the event (e.g., day, month, year, etc.), the duration of the event, local calendar features (e.g., holidays, seasons, traditional and/or expected patterns of behavior for various days/dates, etc.). In some examples, the timing data may be input to all models (e.g., both the conversion model 122 and the hysteresis model 126) of the query processing subsystem 120. In some examples, one or more elements of the timing data are input only into the hysteresis model 126.
In some embodiments, the source activity event 142 may be anonymized or otherwise obscured in the source activity 140. For example, the source activity 140 may be reported to the computing system 102 in an aggregated manner (e.g., as a collection of aggregated events).
In some embodiments, the targeted activity event 152 may include an instance of substantially any kind or type of data that may describe various phenomena. Generally, an instance refers to a set of one or more data values that are combined together to describe a particular topic or subject matter. For example, an instance may be a feature vector. Examples may be associated with image data (e.g., feature vectors of images, hashed images, etc.). Examples may be associated with measurement or other data collection events (e.g., at a particular time, or of a particular subject, or using a particular device, or from a particular perspective, etc.). An instance may be associated with a Web session, such as a set of interactions with a Web server. In some embodiments, the instance may be associated with user interactions with web content (e.g., anonymous or identified). In some examples, an instance of the target activity event may indicate receipt and/or response to a communication (e.g., a message in a content item) from the source entity. Thus, in some embodiments, determining the target activity related to the source activity data may include estimating a read/view status of the communication from the source entity. Similarly, in some embodiments, determining a target activity related to the source activity data may include determining a recipient of the communication from the source entity (e.g., "store visitor on day X is a potential recipient of the online communication Y," etc.). In this way, for example, the source activity and the target activity may include communications between the source platform and the user,
In some embodiments, the target activity event 152 is not configured for transmission 154 to the computing system 102. For example, the target activity event 152 may be an event that is not captured by data available to the computing system 102. The target activity event 152 may include access at or other interactions with a physical location associated with a service provider. The target activity event 152 may include user interactions with systems (e.g., other than the source platform) that are not configured to transmit information through one or more boundaries 156 (e.g., hardware boundaries, such as network boundaries, firewalls, etc., and/or policy boundaries, such as data sharing policies, data storage policies, etc.).
Query results 160 may include, for example, conversion data 162 and hysteresis distribution 164 or based on conversion data 162 and hysteresis distribution 164. Translation data 162 may include a set of target activities (e.g., counts of positive translation tags). In some examples, the conversion data 162 includes data describing one or more features extracted (e.g., floating) from the input source activity 140 associated with a positive conversion (e.g., a higher likelihood of a positive conversion). In this way, for example, one or more queries 130 may be executed on the source activity 140 for obtaining data associated with the positive transition.
The hysteresis distribution 164 may include a distribution of the target activity event 152 over time. The time of the target activity event 152 may in some cases "lag" the time of the source activity event 142 (from which the source activity event 142 was generated). The hysteresis distribution 164 may include a list of estimated hysteresis times for the target activity indicated in the translation data 162. In some embodiments, the distribution 164 may include, for example, a histogram. An example histogram of target activity events 152 may include a plurality of segments (bins) corresponding to timing data (e.g., event dates, event times, etc.). And the probability associated with the occurrence of the target activity event 152 in the segment. In some embodiments, a segment may be associated with an estimated count of segments.
In some embodiments, the hysteresis distribution 164 may be sampled from the intermediate output of the query processing system 120. For example, in some embodiments, the conversion model 122 outputs a predicted target activity (e.g., multiple conversions from source activity to target activity), the hysteresis model 126 outputs a distribution of probabilities of target activity over multiple days, and both outputs may be used for sampling to obtain the hysteresis distribution 164.
For example, in some embodiments, the hysteresis distribution 164 associates the conversion data 162 with a plurality of time periods. For example, the hysteresis distribution 164 may include a data structure containing entries for a plurality of time periods and entries for the translation data 162 that the query processing subsystem 120 has associated with a respective time period of the plurality of time periods.
In some embodiments, the query processing subsystem 120 may be configured to process the query 130 using the marked records 170. The tagged record 170 may include, for example, a linked source activity event 142 'and a linked target activity event 152' (e.g., events linked to each other, respectively). The source activity event 142' may include a source activity event as discussed above with respect to the source activity event 142. Further, the source activity events 142 'may include data linking them to the target activity event 152' (e.g., using a tag, using one or more structural features of a data structure, etc.).
In some embodiments, the marked record 170 may include a subset of the source activity 140 and the target activity 150. For example, the source activity 140 may include a source activity event 142 and a linked source activity event 142'. For example, the source platform may provide services to multiple users, with only a portion of the users providing any indication that the user is engaged in a corresponding target activity. For example, in some embodiments, a set of logged-in users (e.g., users associated with an account, such as an account of a service provider, a source platform, content on a source platform, etc.) may provide more information for unregistered users, and logged-in users may provide information about source activities and corresponding target activities (e.g., both associated with user IDs of users). In some embodiments, the user ID is associated with a third party system (e.g., a system other than the source platform system, a party other than the publisher of the source content, etc.).
In some embodiments, the query processing subsystem 120 may include a machine learning model framework trained using the labeled records 170. For example, the weights 124 and 128 of the conversion model 122 and the hysteresis model 126, respectively, may be learned (e.g., set, updated, adjusted, tuned, etc.) using the labeled record 170.
For example, FIG. 2 depicts an example embodiment of a query processing subsystem 120 that describes inferred (solid line) and model update (dashed line) data flows. The data store 202 may contain source activity 140 and a marked record 170. During training, the query processing subsystem 120 may execute a query (e.g., query 130) on the marked records 170 to obtain query results 160. For example, the conversion model 122 may use the weights 124 (e.g., conversion data 162) to generate target activity data. The hysteresis model 126 may use the weights 128 to generate hysteresis data (e.g., the hysteresis distribution 164). In some embodiments, the outputs of the conversion model 122 and the lag model 124 are sampled (e.g., randomly sampled, uniformly sampled, etc.) by a sampler 220 for providing query results 160 (e.g., containing conversion data 162 and a lag distribution 164).
Query results 160 may be used to update one or more of weights 124 and weights 128. For example, the evaluator 222 may evaluate the output 160, such as determining whether the output query result 160 is aligned with the marked record 170. For example, the evaluator 222 may determine a target (e.g., a loss, a cost, a score, etc.) based on the query result 160. For example, the evaluator 222 may compare the query result 160 with the marked record 170, such as by comparing one or more predicted lag profiles with one or more measured lag times (e.g., by determining one or more measured time delays between the linked source activity event 142 'and the linked target activity event 152', and comparing with the predicted time delays of the marked record 170) and one or more measured counts of target activity. In this way, for example, some embodiments may employ the linked target activity event 152' to form "real" reference data for evaluating predicted data describing the target activity event.
In some embodiments, the evaluator determines a transformation model evaluation 223 and a hysteresis model evaluation 224. In some embodiments, the transformation model evaluation 223 and the hysteresis model evaluation 224 are the same evaluation (e.g., included or included in the objective, loss, cost, score, etc. of the transformation model 122 and the hysteresis model 126). In some embodiments, the transformation model evaluation 223 and the hysteresis model evaluation 224 comprise different evaluations of each of the transformation model 122 and the hysteresis model 126. For example, in some embodiments, the conversion model evaluation 223 may be based on a count and/or rate of predicted target activity output by the conversion model 122 (e.g., directly output from the conversion model 122 and/or sampled via the sampler 220, as indicated by the various options in the dashed line in the figure). In some embodiments, the rate at which the target activity is predicted (e.g., the ratio of target activity-related source activity to the total amount of source activity, such as a "slew rate," etc.) may be determined relative to the total amount of source activity. For example, in some embodiments, the hysteresis model evaluation 224 may be based on a distribution of probabilities output by the hysteresis model 126 (e.g., output directly from the hysteresis model 126 and/or sampled via the sampler 220, as shown by the various options in the dashed line in the figure).
Based at least in part on evaluator 222, model updater 226 can update one or more parameters of weights 124 and/or weights 128. For example, model updater 280 may include or perform substantially any model updating technique, such as gradient-based methods, evolutionary methods, and the like. In some embodiments, model updater 226 updates weights 124 and weights 128 together. In some embodiments, model updater 226 implements a transition model update 227 and a lag model update 228. In some embodiments, the conversion model update 227 and the lag model update 228 are implemented independently (e.g., optionally together, but optionally with different evaluations, differently configured model update techniques, such as using different hyper-parameters, etc.).
In some embodiments, the evaluator 222 and the model updater 226 are contained within the computing system 102. In some embodiments, the evaluator 222 and/or the model updater 226 are external to the computing system 102 (e.g., and connected to the computing system 102, such as via a network or other inter-system communication protocol).
In this way, for example, a machine-learned model framework may be trained in accordance with example aspects of the present disclosure to obtain weights 124 and 128, where weights 124 and 128 may provide processing of queries for unlabeled source activity 140. For example, the weights are not necessarily interpretable to a human observer (e.g., may be interpreted as cognitively representing underlying real-world data), but may instead form a collection of data structures whose function is to associate unlabeled source activity events 142 with a temporal distribution of target activity events 152 in response to a query thereto. In this way, for example, the data structure may be used to enable improved query processing relative to additional unlabeled and non-indexed source activity events 142. In this way, example implementations of the query processing systems and methods of the present disclosure may provide the ability to expand the computing system's ability to execute queries, for example, which they might otherwise be unable to do.
FIG. 3 depicts a block diagram of an example computing system 300, according to an example embodiment of the disclosure. The example system 300 includes a client computing system 302, a server computing system 330, and a training computing system 350 communicatively coupled by a network 380.
Client computing system 302 may be any type of system of one or more computing devices. The computing device may be, for example, a personal computing device (e.g., a laptop or desktop), a mobile computing device (e.g., a smartphone or tablet), a game console or controller, a wearable computing device, an embedded computing device, a server computing device, a node of a distributed computing device, a virtual instance hosted on a shared server, or any other type of computing device. In some embodiments, client computing system 302 includes multiple computing devices interconnected via a network or distributed in an interoperable manner. For example, client computing system 302 may include a server for serving content over a network (e.g., network 380). For example, client computing system 302 may include a web server for hosting web content, for collecting data about the web content (e.g., for receiving, monitoring, generating, or otherwise processing data about the web content, such as using, downloading, and/or interacting with the web content).
In some embodiments, the client computing system 302 may be associated with a service provider and/or source platform associated with the source activity 140, for example. For example, client computing system 302 may be a source platform hosting content on behalf of a service provider. For example, the client computing system 302 may host online content for a service provider (e.g., having offline presence, such as a physical location, for facilitating the target activity 150) that is also associated with the target activity 150. For example, the client computing system 302 may host first party content. The source activity 140 may include interactions with the first party content and may be measured as part of a first party measurement collection. For example, the first party entity may be associated with the publication of the first party content.
Client computing system 302 includes one or more processors 312 and memory 314. The one or more processors 312 may be any suitable processing device (e.g., processor core, microprocessor, ASIC, FPGA, controller, microcontroller, etc.), and may be a processor or multiple processors operatively connected. Memory 314 may include one or more non-transitory computer-readable storage media such as RAM, ROM, EEPROM, EPROM, flash memory devices, disks, and the like, and combinations thereof. Memory 314 may store data 316 and instructions 318 that are executed by processor 312 to cause client computing system 302 to perform operations.
In some implementations, the client computing system 302 can store or include one or more machine learning models 320. For example, the machine learning model 320 may be or may additionally include various machine learning models, such as a neural network (e.g., deep neural network) or other types of machine learning models, including nonlinear models and/or linear models. The neural network may include a feed forward neural network, a recurrent neural network (e.g., a long and short term memory recurrent neural network), a convolutional neural network, or other form of neural network. Some machine learning models may utilize an attention mechanism, such as self-attention. For example, some example machine learning models may include a multi-headed self-attention model (e.g., a transformer model). The example machine learning model 320 includes a machine learning model framework that includes the transformation model 122 and the hysteresis model 126, such as discussed above with reference to fig. 1 and 2.
In some implementations, one or more machine learning models 320 may be received from the server computing system 330 over the network 380, stored in the client computing system memory 314, and then used or otherwise executed by the one or more processors 312. In some implementations, the client computing system 302 may execute multiple parallel instances of a single machine learning model 320.
Additionally, or alternatively, one or more machine learning models 340 (which may be the same as or different from machine learning model 320) may be included in server computing system 330 or otherwise stored and executed, server computing system 330 in communication with client computing system 302 according to a client-server relationship. For example, the machine learning model 340 may be implemented by the server computing system 340 as part of a web service (e.g., a service for processing queries on the source activity 140 according to any of the various aspects of the present disclosure). The example machine learning model 340 includes a machine learning model framework that includes the transformation model 122 and the hysteresis model 126, such as discussed above with reference to fig. 1 and 2. Accordingly, one or more machine learning models 320 may be stored and implemented at client computing system 302 and/or one or more machine learning models 340 may be stored and implemented at server computing system 330.
In some embodiments, the server computing system 330 may configure a dual-model framework for the query processing subsystem 120. For example, in some embodiments, the server computing system 330 may store one or more conversion models 122 and/or one or more hysteresis models 126 (e.g., a set of one or more weights 124, weights 128, etc.) for use in replacing one or more other conversion models 122 and/or hysteresis models 126 or for use in configuration and/or maintenance of the query processing subsystem 120 using one or more other conversion models 122 and/or hysteresis models 126. For example, in some embodiments, some transformation models or hysteresis models may be widely applicable, while some transformation models or hysteresis models may provide improved performance in a particular domain (e.g., a particular kind of subject activity, a particular kind of target activity, etc.), and the server computing system 330 may replace and/or supplement the dual-model framework of the query processing subsystem 120 to improve and configure the processing of the query 130.
The client computing system 302 may also include one or more input components 322 that receive input (e.g., user input, input from other systems, etc.). For example, the input component 322 may be a touch-sensitive component (e.g., a touch-sensitive display screen or touch pad) that is sensitive to the touch of an input object (e.g., a finger or stylus). Other example input components include a microphone, a keyboard (e.g., physical and/or graphical), a network port (e.g., wireless, wired, etc.), a communication bus, and so forth.
The server computing system 330 includes one or more processors 332 and memory 334. The one or more processors 332 may be any suitable processing device (e.g., processor core, microprocessor, ASIC, FPGA, controller, microcontroller, etc.), and may be an operatively connected processor or processors. Memory 334 may include one or more non-transitory computer-readable storage media such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, and the like, and combinations thereof. Memory 334 may store data 336 and instructions 338 that are executed by processor 332 to cause server computing system 330 to perform operations.
In some implementations, the server computing system 330 includes or is implemented by one or more server computing devices. In instances where the server computing system 330 includes multiple server computing devices, such server computing devices may operate in accordance with a sequential computing architecture, a parallel computing architecture, or some combination thereof.
As described above, the server computing system 330 may store or otherwise include one or more machine learning models 340. Exemplary machine learning models include neural networks or other multi-layer nonlinear models. Example neural networks include feed forward neural networks, deep neural networks, recurrent neural networks, and convolutional neural networks. Some machine learning models may utilize an attention mechanism, such as self-attention. For example, some example machine learning models may include a multi-headed self-care model (e.g., a transformer model).
In some embodiments, client computing system 302 is able to access information that is not available to server computing system 330 and/or training computing system 350. In some embodiments, the client computing system 302 may be configured to host (host) first party content. The first party content may include, for example, content associated with an owner, operator, and/or beneficiary of the client computing system 302 (e.g., a contractual beneficiary, such as a tenant of a computing time on the client computing system 302). In some embodiments, the client computing system 302 may collect data (e.g., telemetry, analysis, usage statistics, logs, etc.). With respect to the downloading, viewing, and use of first party content (e.g., source activity 140). In some embodiments, the client computing system 302 may collect data regarding the downloading, viewing, and use of and/or linking to the first party content and/or other services or aspects related to the client computing system or beneficiary thereof. In some embodiments, the server computing system 330 may not have full or unlimited access to the first party content on the client computing system 302, or unlimited access to data regarding the viewing and use of the content.
In some embodiments, neither client computing system 302 nor server computing system 330 has full access to target activity 150. For example, in some scenarios, target activity 150 is not or cannot be fully recorded. In some scenarios, the client computing system 302 and/or the server computing system 330 may not have access to the complete target activity 150 (or, for example, data describing it). However, in some embodiments, the server computing system 330 may access the marked record 170, for example, and the marked record 170 may optionally include a marked subset of the target activity 150 and a marked subset of the source activity 140. For example, the server computing system 330 may be associated with multiple logged-in users reporting that they are engaged in both the source activity 140 and the target activity 150.
Thus, in some embodiments, according to example aspects of the present disclosure, one or more machine learning models 340 may be advantageously trained to associate source activity 140 with target activity 150. For example, one or more machine learning models 340 may be trained in accordance with example aspects of the present disclosure to learn to generate relationships between source activity 140 and target activity 150 to obtain a set of weights (e.g., weights 124 and weights 128) for obtaining results for queries processed on source activity 140.
Client computing system 302 and/or server computing system 330 may train models 320 and/or 340 through interactions with training computing system 350 communicatively coupled via network 380. The training computing system 350 may be separate from the server computing system 330 or may be part of the server computing system 330.
The training computing system 350 includes one or more processors 352 and memory 354. The one or more processors 352 may be any suitable processing device (e.g., a processor core, microprocessor, ASIC, FPGA, controller, microcontroller, etc.), and may be a processor or multiple processors operatively connected. Memory 354 may include one or more non-transitory computer-readable storage media, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, and the like, and combinations thereof. Memory 354 may store data 356 and instructions 358 that are executed by processor 352 to cause training computing system 350 to perform operations. In some implementations, the training computing system 350 includes or is implemented by one or more server computing devices.
Training computing system 350 may include a model trainer 360, model trainer 360 using various training or learning techniques (such as, for example, back propagation of errors) to train machine learning models 320 and/or 340 stored at client computing system 302 and/or server computing system 330. For example, the loss function may be counter-propagated through the model to update one or more parameters of the model (e.g., based on gradients of the loss function). Various loss functions may be used, such as mean square error, likelihood loss, cross entropy loss, hinge loss, and/or various other loss functions. Gradient descent techniques may be used to iteratively update parameters in one or more training iterations. In some implementations, performing the back-propagation of the error may include performing truncated back-propagation over time. Model trainer 360 may perform one or more techniques (e.g., weight decay (weight decay), exit (dropout), etc.) to increase the ability of the model being trained.
In particular, model trainer 360 may train machine learning models 320 and/or 340 based on a set of training data 362. Training data 362 may include, for example, a record of the labeling according to example aspects of the present disclosure (e.g., as described above, such as with reference to fig. 1 and 2).
In some implementations, the training data 362 can include data provided or otherwise obtained by the client computing system 302. Thus, in such implementations, model 320 provided to client computing system 302 and/or model 340 provided to server computing system 330 may be trained by training computing system 350 on data received from client computing system 302. In some embodiments, training data 362 includes data that is not accessible to server computing system 330 and/or training computing system 350 unless provided by client computing system 302.
Model trainer 360 includes computer logic for providing the desired functionality. Model trainer 360 may be implemented in hardware, firmware, and/or software that controls a general purpose processor. For example, in some implementations, model trainer 360 includes program files stored on a storage device, loaded into memory, and executed by one or more processors. In other implementations, model trainer 360 includes one or more sets of computer-executable instructions stored in a tangible computer-readable storage medium (such as RAM, a hard disk, or an optical or magnetic medium).
The machine learning models (e.g., models 120, 320, 340, etc.) described in this specification may be used for various tasks, applications, and/or use cases. In some implementations, the input to the machine learning model of the present disclosure can be image data. The machine learning model may process the image data to generate an output. As an example, the machine learning model may process the image data to produce an image recognition output (e.g., recognition of the image data, potential embedding of the image data, encoded representation of the image data, hashing of the image data, etc.). As another example, the machine learning model may process the image data to generate an image segmentation output. As another example, the machine learning model may process image data to generate an image classification output. As another example, the machine learning model may process the image data to generate an image data modification output (e.g., a change in the image data, etc.). As another example, the machine learning model may process the image data to generate an encoded image data output (e.g., an encoded and/or compressed representation of the image data, etc.). As another example, the machine learning model may process the image data to generate an amplified image data output. As another example, the machine learning model may process the image data to generate a prediction output.
In some implementations, the input of the machine learning model of the present disclosure may be text or natural language data. The machine learning model may process text or natural language data to generate an output. As one example, the machine learning model may process natural language data to generate a language encoded output. As another example, the machine learning model may process text or natural language data to generate a latent text-embedded output. As another example, the machine learning model may process text or natural language data to generate a translation output. As another example, the machine learning model may process text or natural language data to generate a classification output. As another example, the machine learning model may process text or natural language data to generate a text segmentation output. As another example, the machine learning model may process text or natural language data to generate semantic intent output. As another example, the machine learning model may process text or natural language data to generate an upgraded (upscaled) text or natural language output (e.g., higher quality text or natural language data than the input text or natural language, etc.). As another example, the machine learning model may process text or natural language data to generate a predictive output.
In some implementations, the input to the machine learning model of the present disclosure can be speech data. The machine learning model may process the speech data to generate an output. As one example, the machine learning model may process speech data to generate a speech recognition output. As another example, the machine learning model may process speech data to generate speech translation output. As another example, the machine learning model may process speech data to generate potential embedded outputs. As another example, the machine learning model may process the speech data to produce an encoded speech output (e.g., an encoded and/or compressed representation of the speech data, etc.). As another example, the machine learning model may process the speech data to generate an upgraded speech output (e.g., higher quality speech data than the input speech data, etc.). As another example, the machine learning model may process the speech data to generate a textual representation output (e.g., a textual representation of the input speech data, etc.). As another example, the machine learning model may process speech data to generate a prediction output.
In some implementations, the input of the machine learning model of the present disclosure may be potentially encoded data (e.g., a potential spatial representation of the input, etc.). The machine-learned model may process the potentially encoded data to generate an output. As one example, the machine learning model may process the potentially encoded data to generate an identification output. As another example, the machine learning model may process the potentially encoded data to generate a reconstructed output. As another example, the machine learning model may process the potentially encoded data to generate a search output. As another example, a machine learning model may process potentially encoded data to generate a refocusing (recasting) output. As another example, the machine learning model may process the potentially encoded data to generate a prediction output.
In some implementations, the input to the machine learning model of the present disclosure can be statistical data. The statistical data may be, represent, or otherwise include data calculated and/or calculated from some other data source. The machine learning model may process the statistical data to generate an output. For example, the machine learning model may process the statistical data to generate an identification output. As another example, the machine learning model may process the statistical data to generate a prediction output. As another example, the machine learning model may process the statistical data to generate a classification output. As another example, the machine learning model may process the statistical data to generate a segmentation output. As another example, the machine learning model may process the statistical data to generate a visual output. As another example, the machine learning model may process the statistical data to generate a diagnostic output.
In some implementations, the input to the machine learning model of the present disclosure can be sensor data. The machine learning model may process the sensor data to generate an output. As one example, the machine learning model may process the sensor data to generate an identification output. As another example, the machine learning model may process the sensor data to generate a prediction output. As another example, the machine-learned model may process the sensor data to generate a classification output. As another example, the machine-learned model may process the sensor data to generate a segmented output. As another example, the machine-learned model may process the sensor data to generate a visual output. As another example, the machine-learned model may process the sensor data to generate a diagnostic output. As another example, the machine-learned model may process the sensor data to generate a detection output.
In some cases, the machine learning model may be configured to perform tasks including encoding input data for reliable and/or efficient transmission or storage (and/or corresponding decoding). For example, the task may be an audio compression task. The input may comprise audio data and the output may comprise compressed audio data. In another example, the input includes visual data (e.g., one or more images or videos), the output includes compressed visual data, and the task is a visual data compression task. In another example, a task may include generating an embedding of input data (e.g., input audio or video data).
In some cases, the input includes visual data and the task is a computer visual task. In some cases, pixel data including one or more images is input, and the task is an image processing task. For example, the image processing task may be an image classification, wherein the output is a set of scores, each score corresponding to a different object class and representing likelihood values (likelihoods) for one or more images describing objects belonging to the object class. The image processing task may be object detection, wherein the image processing output identifies one or more regions in the one or more images, and for each region, the region describes likelihood values of the object of interest. As another example, the image processing task may be image segmentation, wherein the image processing output defines a respective likelihood for each category in the predetermined set of categories for each pixel in the one or more images. For example, the set of categories may be foreground and background. As another example, the set of categories may be object classes. As another example, the image processing task may be depth estimation, wherein the image processing output defines a respective depth value for each pixel in the one or more images. As another example, the image processing task may be motion estimation, wherein the network input comprises a plurality of images, and the image processing output defines, for each pixel of one of the input images, a motion of the scene described at the pixel between the images in the network input.
In some cases, the input includes audio data representing a spoken language, and the task is a speech recognition task. The output may include a text output mapped to a spoken language. In some cases, the task includes encrypting or decrypting the input data. In some cases, tasks include microprocessor performance tasks such as branch prediction or memory address translation.
In some embodiments, any of the inputs described above may be provided for a tagging task or other indexing task. For example, any of the inputs described above or other inputs may be or include instances, such as unlabeled instances (e.g., lack some or all of the labels, such as lack desired labels). In some embodiments, the task is to process queries for input instances. The output (e.g., or intermediate output) may include a data structure that associates the unlabeled instance with one or more values that indicate a relationship with the query tag. In this way, for example, the task may be an indexing task to index unlabeled instances (e.g., tag data about tags not previously associated with the instances) for processing the tag data query. The output may include a count or other summary output describing the relationship between the unlabeled instance and the query tag. The output may include a retrieval of unlabeled examples determined to be relevant to the query tag. In some embodiments, the index may be transient (e.g., stored to obtain various metrics and/or analyses from processing queries for the indexed instance and later offloaded) or stored for longer than a transient duration (e.g., written to disk, etc.).
FIG. 3 illustrates one example computing system that may be used to implement the present disclosure. Other computing systems may also be used. For example, in some implementations, the client computing system 102 may include a model trainer 160 and a training data set 162. In such implementations, the model 120 may be trained and used locally at the client computing system 102. In some such implementations, the client computing system 102 may implement the model trainer 160 to personalize the model 120 based on user-specific data.
Fig. 4 depicts a flowchart of an example method 400 performed in accordance with an example embodiment of the present disclosure. Although fig. 4 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the order or arrangement particularly shown. The various steps of the example method 400 may be omitted, rearranged, combined, and/or adapted in various ways without departing from the scope of the present disclosure.
At 402, the example method 400 includes receiving a record of a tag. In the example method 400, the marked record may include a linked source activity and a linked target activity. For example, the record of marks may include record 170 of marks.
At 404, the example method 400 includes updating one or more parameters of the first machine learning model using the marked record. In the example method 400, a first machine learning model is configured to output data describing a target activity associated with a source activity. For example, the first machine learning model may include a transformation model (e.g., transformation model 122) for determining a transformation from a source activity (e.g., an activity on a source platform, such as source activity 140) to a related target activity (e.g., an activity in another pathway related to the subject of the source activity). In some embodiments, the source activity data includes data describing online activities, and the target activity includes offline activities. In some embodiments, the source activity data includes data describing an online activity, and the target activity includes an online activity.
At 406, the example method 400 includes updating one or more parameters of the second machine learning model using the marked record. In the example method 400, the second machine learning model is configured to output a distribution of the target activity over time. For example, the second machine learning model may include a hysteresis model (e.g., hysteresis model 126) for determining a temporal distribution of target activity flowing from or otherwise related to the source activity.
In some embodiments of the example method 400, the first machine learning model and the second machine learning model are part of a machine learning model framework configured to process queries on source activity data. For example, in some embodiments, processing the query includes receiving source activity data. In some embodiments, source activity data may be associated with linked source activities. For example, in some embodiments, the linked source activities form a subset of the source activity data (e.g., otherwise a subset of the unlinked source activity data is linked to the target activity). In some embodiments, the source activity data includes data describing online activity on the source system, and communication with the source system is restricted to indicate a link between the source activity data and the target activity. In some embodiments, processing the query includes determining a predicted target activity related to the source activity data using a first machine learning model. In some embodiments, processing the query includes generating a predicted temporal distribution of the target activity using a second machine learning model. In some embodiments, processing the query includes generating a query result in response to the query based at least in part on the predicted target activity and the predicted temporal distribution of the target activity. In some embodiments, generating the results of the query includes sampling the output of the second machine learning model. In some embodiments, the query results include a data structure that associates the predicted target activity with a plurality of time periods.
In some embodiments of the example method 400, the first machine learning model and the second machine learning model are trained using different updates. For example, in some embodiments, one or more parameters of the first machine learning model are updated independently of one or more parameters of the second machine learning model. For example, in some embodiments, updating the one or more parameters includes updating one or more first parameters of the first machine learning model based at least in part on target activity counts on a training set of predicted target activities. In some embodiments, updating the one or more parameters includes updating one or more second parameters of the second machine learning model based at least in part on the predicted time distribution of the target activity.
In some embodiments of the exemplary method 400, the first machine learning model and the second machine learning model each receive the same set of input signals. In some embodiments, the input to the second machine learning model includes a date (e.g., in addition to the set that is also provided to the first machine learning model). In some embodiments, the output of the first machine learning model is input to the second machine learning model. In some embodiments, the output of the first machine learning model includes a target activity count.
Fig. 5 depicts a flowchart of an example method 500 performed in accordance with an example embodiment of the present disclosure. Although fig. 5 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the order or arrangement particularly shown. The various steps of the example method 500 may be omitted, rearranged, combined, and/or adapted in various ways without departing from the scope of the present disclosure.
At 502, the example method 500 includes receiving source activity data. In some embodiments, the source activity data (e.g., source activity 140) includes data describing online activity. In some embodiments, the source activity data includes data describing online activity associated with a first party platform (e.g., client computing device 302).
At 504, the example method 500 includes performing a query for a target activity related to the source activity data. In some embodiments, the target activity comprises an offline activity. In some embodiments, the query is an implicit query (e.g., implicit in the structure and/or machine learning framework of a query processing subsystem such as query processing subsystem 120).
At 506, executing the query includes determining a predicted target activity related to the source activity data using a first machine learning model of the machine learning model framework. In some embodiments, the output of the first machine learning model includes a target activity count (e.g., an estimated amount of target activity events).
At 508, executing the query includes generating a predicted time distribution of the target activity (e.g., target activity 150) using a second machine learning model of the machine learning model framework. In some embodiments, the output of the second machine learning model includes a distribution (e.g., a probability distribution) of the target activity over time.
At 510, the example method 500 includes generating a query result (e.g., the query result 160) in response to the query based at least in part on the predicted target activity and the predicted temporal distribution of the target activity. In some embodiments, the query results may include data describing a distribution of predicted target activity over time. In some embodiments, the query results include a data structure that associates the predicted target activity with a plurality of time periods. In some embodiments, generating the query result includes sampling an output of the second machine learning model.
In some embodiments of the exemplary method 500, the first machine learning model and the second machine learning model are trained using different updates. For example, in some embodiments, updating the one or more parameters includes updating one or more first parameters of the first machine learning model based at least in part on target activity counts on a training set of predicted target activities, and updating one or more second parameters of the second machine learning model based at least in part on a predicted time distribution of the target activities.
In some embodiments of the exemplary method 500, the first machine learning model and the second machine learning model each receive the same set of input signals. In some embodiments, the input to the second machine learning model includes a date (e.g., in addition to the set that is also provided to the first machine learning model). In some embodiments, the output of the first machine learning model is input to the second machine learning model. In some embodiments, the output of the first machine learning model includes a target activity count.
In some embodiments of the exemplary method 500, the source activity data includes data describing online activity on the source system, and communication with the source system is restricted to indicate a link between the source activity data and the target activity.
Fig. 6 depicts a flowchart of an example method 600 of training an example machine learning model framework (e.g., training the query processing subsystem 120, such as performing the example methods 400 and/or 500) in accordance with an example embodiment of the present disclosure. Although fig. 6 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the order or arrangement particularly shown. The various steps of the exemplary method 600 may be omitted, rearranged, combined, and/or adapted in various ways without departing from the scope of the present disclosure.
For example, at 602, the example method 600 includes receiving a record of a marker. In some embodiments, the record of the tag (e.g., the record of the tag 170) may include source activity data (e.g., as received at 502). In the example method 600, the tagged record includes linked source activity data and linked target activity data (e.g., source activity data linked to a target activity event).
At 604, the example method 600 includes performing a training query on a target activity related to a source activity. In some embodiments of the example method 600, executing the training query includes determining a training set of predicted target activities related to the linked source activity data using a first machine learning model. In some embodiments of the example method 600, executing the training query includes generating a training time distribution of the target activity using a second machine learning model.
At 610, the example method 600 includes updating one or more parameters of a machine learning model framework based at least in part on the training set of predicted target activities, the training time distribution of target activities, and the linked target activity data. For example, in some embodiments, the first machine learning model and the second machine learning model are trained using different updates. In some embodiments, for example, updating the one or more parameters includes updating one or more first parameters of the first machine learning model based at least in part on target activity counts on a training set of predicted target activities. In some embodiments, for example, updating the one or more parameters includes updating one or more second parameters of the second machine learning model based at least in part on the predicted time distribution of the target activity.
Other disclosures of
The techniques discussed herein refer to servers, databases, software applications, and other computer-based systems, as well as actions taken and information sent to and from such systems. The inherent flexibility of computer-based systems allows for a wide variety of possible configurations, combinations, and divisions of tasks and functions between and among components. For example, the processes discussed herein may be implemented using a single device or component or a plurality of devices or components working in combination. The database and application may be implemented on a single system or distributed across multiple systems. Distributed components may run sequentially or in parallel.
While the present subject matter has been described in detail with respect to various specific example embodiments thereof, each example is provided by way of explanation and not limitation of the present disclosure. Alterations, modifications and equivalents to such embodiments will readily occur to those skilled in the art upon attaining an understanding of the foregoing. Accordingly, the subject disclosure does not preclude inclusion of such modifications, variations and/or additions to the present subject matter as would be readily apparent to one of ordinary skill in the art. For example, features illustrated or described as part of one embodiment can be used with another embodiment to yield still a further embodiment. Accordingly, the present disclosure is intended to cover such alternatives, modifications, and equivalents.
Claims (22)
1. A computer-implemented method, comprising:
receiving, by a computing system including one or more processors, source activity data;
a query is performed by the computing system for a target activity related to the source activity data,
wherein executing the query comprises:
determining, by the computing system, a predicted target activity related to the source activity data using a first machine learning model of a machine learning model framework; and is also provided with
Generating, by the computing system, a predicted time distribution of the target activity using a second machine learning model of the machine learning model framework; and is also provided with
A query result is generated by the computing system in response to the query based at least in part on the predicted target activity and a predicted temporal distribution of the target activity.
2. A computer-implemented method, comprising:
receiving, by a computing system comprising one or more processors, a record comprising a tag of linked source activity data and linked target activity data;
executing, by the computing system, a training query for a target activity related to the source activity, wherein executing the training query comprises:
determining, by the computing system, a training set of predicted target activities related to the linked source activity data using a first machine learning model of a machine learning model framework; and is also provided with
Generating, by the computing system, a training time distribution of the target activity using a second machine learning model of the machine learning model framework; and is also provided with
One or more parameters of the machine learning model framework are updated by the computing system based at least in part on a training set of predicted target activities, training time distributions of target activities, and linked target activity data.
3. The computer-implemented method of claim 1, wherein generating the query result comprises sampling an output of the second machine learning model.
4. The computer-implemented method of claim 1 or claim 3, wherein the query results include a data structure that associates the predicted target activity with a plurality of time periods.
5. The computer-implemented method of any of claims 2 to 4, wherein the first machine learning model and the second machine learning model are trained using different updates.
6. The computer-implemented method of claim 2 or claim 5, wherein updating the one or more parameters comprises:
updating, by the computing system, one or more first parameters of the first machine learning model based at least in part on target activity counts on a training set of predicted target activities; and is also provided with
One or more second parameters of the second machine learning model are updated by the computing system based at least in part on the predicted temporal distribution of the target activity.
7. The computer-implemented method of any of the preceding claims, wherein the first machine learning model and the second machine learning model each receive a same set of input signals.
8. The computer-implemented method of any of the preceding claims, wherein the input to the second machine learning model comprises a date.
9. The computer-implemented method of any of the preceding claims, wherein the source activity data comprises data describing online activity on a source system, and wherein communication with the source system is restricted to indicate a link between the source activity data and a target activity.
10. The computer-implemented method of any of the preceding claims, wherein an output of the first machine learning model is input to the second machine learning model.
11. The computer-implemented method of any of the preceding claims, wherein the output of the first machine learning model comprises a target activity count.
12. The computer-implemented method of any of the preceding claims, wherein the source activity data comprises data describing an online activity and the target activity comprises an offline activity.
13. The computer-implemented method of any of the preceding claims, wherein the source activity data comprises data describing an online activity and the target activity comprises an online activity.
14. A computer-implemented method, comprising:
receiving, by a computing system comprising one or more processors, a record comprising a tag of linked source activity and linked target activity;
updating, by the computing system, one or more parameters of a first machine learning model using the marked record, the first machine learning model configured to output data describing a target activity associated with a source activity; and
one or more parameters of a second machine learning model configured to output a temporal distribution of the target activity are updated by the computing system using the marked records, the second machine learning model being different from the first machine learning model.
15. The computer-implemented method of claim 14, further comprising:
Receiving, by the computing system, source activity data, wherein the source activity data is associated with the linked source activity;
determining, by the computing system, a predicted target activity related to the source activity data using the first machine learning model;
generating, by the computing system, a predicted time distribution of the target activity using the second machine learning model; and is also provided with
A query result is generated by the computing system in response to the query based at least in part on the predicted target activity and a predicted temporal distribution of the target activity.
16. The computer-implemented method of claim 14 or claim 15, wherein generating the query results comprises sampling, by the computing system, the predicted target activity and a predicted temporal distribution of the target activity.
17. The computer-implemented method of claim 14 or claim 16, wherein the one or more parameters of the first machine learning model are updated independently of the one or more parameters of the second machine learning model.
18. The computer-implemented method of any of claims 14 to 17, wherein the first machine learning model and the second machine learning model each receive a same set of input signals.
19. The computer-implemented method of any of claims 14 to 18, wherein the source activity data comprises data describing online activity on a source system, and wherein communication with the source system is restricted to indicate a link between the source activity data and a target activity.
20. A system, comprising:
one or more processors; and
one or more memory devices storing computer-readable instructions that, when executed, cause the one or more processors to perform operations comprising the method of any of the preceding claims.
21. The system of claim 20, wherein the system comprises a plurality of sensors,
wherein the one or more memory devices store a learning data structure for performing a query in accordance with any one of the preceding claims, the learning data structure comprising a first weight of a first machine learning model and a second weight of a second machine learning model; and wherein the first and second heat sinks are disposed,
the operations further comprise:
determining the predicted target activity by transforming a set of input signals using the learning data structure; and is also provided with
A predicted time distribution of the target activity is generated by transforming the set of input signals using the learning data structure.
22. A computer-readable medium storing computer-readable instructions that, when executed, cause the one or more processors to perform operations comprising the method of any of claims 1-19.
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2021/058600 WO2023086074A1 (en) | 2021-11-09 | 2021-11-09 | Granular signals for offline-to-online modeling |
Publications (1)
Publication Number | Publication Date |
---|---|
CN116438527A true CN116438527A (en) | 2023-07-14 |
Family
ID=78829748
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202180047111.6A Pending CN116438527A (en) | 2021-11-09 | 2021-11-09 | Particle signal for offline to online modeling |
Country Status (4)
Country | Link |
---|---|
US (1) | US20240104108A1 (en) |
EP (1) | EP4200758A1 (en) |
CN (1) | CN116438527A (en) |
WO (1) | WO2023086074A1 (en) |
Family Cites Families (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20190205939A1 (en) * | 2017-12-31 | 2019-07-04 | OneMarket Network LLC | Using Machine Learned Visitor Intent Propensity to Greet and Guide a Visitor at a Physical Venue |
-
2021
- 2021-11-09 US US18/013,062 patent/US20240104108A1/en active Pending
- 2021-11-09 CN CN202180047111.6A patent/CN116438527A/en active Pending
- 2021-11-09 WO PCT/US2021/058600 patent/WO2023086074A1/en active Application Filing
- 2021-11-09 EP EP21823698.2A patent/EP4200758A1/en active Pending
Also Published As
Publication number | Publication date |
---|---|
EP4200758A1 (en) | 2023-06-28 |
WO2023086074A1 (en) | 2023-05-19 |
US20240104108A1 (en) | 2024-03-28 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10417528B2 (en) | Analytic system for machine learning prediction model selection | |
US10521734B2 (en) | Machine learning predictive labeling system | |
US11190562B2 (en) | Generic event stream processing for machine learning | |
US20180053071A1 (en) | Distributed event prediction and machine learning object recognition system | |
US20190325267A1 (en) | Machine learning predictive labeling system | |
US20170109676A1 (en) | Generation of Candidate Sequences Using Links Between Nonconsecutively Performed Steps of a Business Process | |
US20170109667A1 (en) | Automaton-Based Identification of Executions of a Business Process | |
WO2016118979A2 (en) | Systems, methods, and devices for an enterprise internet-of-things application development platform | |
US11768908B2 (en) | System and method for collection of a website in a past state and retroactive analysis thereof | |
JP6911603B2 (en) | How to generate predictive models for the categories of facilities visited by users, programs, server equipment, and processing equipment | |
US20170109636A1 (en) | Crowd-Based Model for Identifying Executions of a Business Process | |
Mehrotra et al. | Deep sequential models for task satisfaction prediction | |
US20170109638A1 (en) | Ensemble-Based Identification of Executions of a Business Process | |
CN110717597A (en) | Method and device for acquiring time sequence characteristics by using machine learning model | |
Babu et al. | Framework for Predictive Analytics as a Service using ensemble model | |
Dai et al. | Continuous audit intelligence as a service (CAIaaS) and intelligent app recommendations | |
US20170109640A1 (en) | Generation of Candidate Sequences Using Crowd-Based Seeds of Commonly-Performed Steps of a Business Process | |
Leke et al. | A deep learning-cuckoo search method for missing data estimation in high-dimensional datasets | |
CN111159241A (en) | Click conversion estimation method and device | |
Allu et al. | Predicting the success rate of a start-up using lstm with a swish activation function | |
US20170109637A1 (en) | Crowd-Based Model for Identifying Nonconsecutive Executions of a Business Process | |
US10489485B2 (en) | Analytic system for streaming quantile computation | |
US20200027028A1 (en) | Analytic system for gradient boosting tree compression | |
CN111127057A (en) | Multi-dimensional user portrait restoration method | |
CN116438527A (en) | Particle signal for offline to online modeling |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |