US8688720B1 - Method and apparatus for characterizing documents based on clusters of related words - Google Patents
Method and apparatus for characterizing documents based on clusters of related words Download PDFInfo
- Publication number
- US8688720B1 US8688720B1 US12/131,637 US13163708A US8688720B1 US 8688720 B1 US8688720 B1 US 8688720B1 US 13163708 A US13163708 A US 13163708A US 8688720 B1 US8688720 B1 US 8688720B1
- Authority
- US
- United States
- Prior art keywords
- words
- cluster
- generating
- active
- clusters
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/35—Clustering; Classification
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/31—Indexing; Data structures therefor; Storage structures
- G06F16/313—Selection or weighting of terms for indexing
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/35—Clustering; Classification
- G06F16/353—Clustering; Classification into predefined classes
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99931—Database or file accessing
- Y10S707/99933—Query processing, i.e. searching
- Y10S707/99935—Query augmenting and refining, e.g. inexact access
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99941—Database schema or data structure
- Y10S707/99943—Generating database or data structure, e.g. via user interface
Definitions
- the present invention relates to techniques for performing queries on textual documents. More specifically, the present invention relates to a method and an apparatus for characterizing a textual document based on clusters of conceptually related words.
- Prototype systems with stemming components have been attempted but without any real success. This is because the problem of determining whether a stem can be used in a particular context is difficult. That might be determined more by other nearby words in the text rather than by the word to be stemmed itself. For example, if one were looking for the James Bond movie, “for your eyes only”, a result that returned a page with the words “for your eye only” might not look as good.
- One embodiment of the present invention provides a system characterizes a document with respect to clusters of conceptually related words.
- the system selects “candidate clusters” of conceptually related words that are related to the set of words. These candidate clusters are selected using a model that explains how sets of words are generated from clusters of conceptually related words.
- the system constructs a set of components (such as a vector) to characterize the document, wherein the set of components includes components for candidate clusters. Each component in the set of components indicates a degree to which a corresponding candidate cluster is related to the set of words.
- the model is a probabilistic model, which contains nodes representing random variables for words and for clusters of conceptually related words.
- each component in the set of components indicates a degree to which a corresponding candidate cluster is active in generating the set of words.
- nodes in the probabilistic model are coupled together by weighted links. If a cluster node in the probabilistic model fires, a weighted link from the cluster node to another node can cause the other node to fire.
- the probability that the node does not fire is the product of the probabilities that links from the active parent nodes do not fire.
- the probabilistic model includes a universal node that is always active and that has weighted links to all cluster nodes.
- the system selects the candidate clusters by constructing an evidence tree. This involves starting with terminal nodes associated with the set of words, and following links in the reverse direction to parent cluster nodes. The system uses this evidence tree to estimate a likelihood that each parent cluster node was active in generating the set of words. The system subsequently selects a parent cluster node to be a candidate cluster node based on its estimated likelihood.
- estimating the likelihood that a given parent node is active in generating the set of words may involve considering: the unconditional probability that the given parent node is active; conditional probabilities that the given parent node is active assuming parent nodes of the given parent node are active; and conditional probabilities that the given parent node is active assuming child nodes of the given parent node are active.
- considering the conditional probabilities involves considering weights on links between nodes.
- estimating the likelihood that a given parent node is active in generating the set of words involves marking terminal nodes during the estimation process to ensure that terminal nodes are not factored into the estimation more than once.
- constructing the evidence tree involves pruning unlikely nodes from the evidence tree.
- the degree to which a candidate cluster is active in generating the set of words is determined by calculating a probability that a candidate cluster is active in generating the set of words.
- the degree to which a candidate cluster is active in generating the set of words is determined by multiplying a probability that a candidate cluster is active in generating the set of words by an activation for the candidate cluster, wherein the activation indicates how many links from the candidate cluster to other nodes are likely to fire.
- constructing the set of components involves normalizing the set of components.
- constructing the set of components involves approximating a probability that a given candidate cluster is active over states of the probabilistic model that could have generated the set of words.
- approximating the probability involves selecting states for the probabilistic model that are likely to have generated the set of words in the document, and then considering only selected states while calculating the probability that the given candidate cluster is active.
- selecting a state that is likely to have generated the set of words involves randomly selecting a starting state for the probabilistic model, and then performing hill-climbing operations beginning at the starting state to reach a state that is likely to have generated the set of words.
- performing the hill-climbing operations involves periodically changing states of individual candidate clusters without regards to an objective function for the hill-climbing operations to explore states of the probabilistic model that are otherwise unreachable through hill-climbing operations.
- the document can include a web page or a set of terms from a query.
- FIG. 1 illustrates a probabilistic model in accordance with an embodiment of the present invention.
- FIG. 2 illustrates a state of the probabilistic model in accordance with an embodiment of the present invention.
- FIG. 3 illustrates a model representing states in the United States in accordance with an embodiment of the present invention.
- FIG. 4 illustrates global nodes and a number of local networks in accordance with an embodiment of the present invention.
- FIG. 5 illustrates an interaction between local network nodes and global model nodes.
- FIG. 6 illustrates a reworked model in accordance with an embodiment of the present invention.
- FIG. 7A illustrates a simple network with two boolean nodes in accordance with an embodiment of the present invention.
- FIG. 7B illustrates how inference works in a simple network with two boolean nodes in accordance with an embodiment of the present invention.
- FIG. 8 illustrates a noisy-or network where loopy fails in accordance with an embodiment of the present invention.
- FIG. 9 illustrates a loopy computation inside a simple session in accordance with an embodiment of the present invention.
- FIG. 10 illustrates a simplified local network in accordance with an embodiment of the present invention.
- FIG. 11 illustrates two clusters competing to trigger a terminal in accordance with an embodiment of the present invention.
- FIG. 12 illustrates how a local probabilistic network can deal dynamically with compounds in the lexicon at run-time in accordance with an embodiment of the present invention.
- FIG. 13 illustrates how a single cluster C issues a virtual message to global nodes via “terminal sparseness” in accordance with an embodiment of the present invention.
- FIG. 14 illustrates how a sparse link message gets used in figuring out the optimal setting of a new global node in accordance with an embodiment of the present invention.
- FIG. 15.1 illustrates a belief network in accordance with an embodiment of the present invention.
- FIG. 15.2A illustrates an exemplary network in accordance with an embodiment of the present invention.
- FIG. 15.2B illustrates an alternative exemplary network in accordance with an embodiment of the present invention.
- FIG. 16 illustrates system output in accordance with an embodiment of the present invention.
- FIG. 17 illustrates more system output in accordance with an embodiment of the present invention.
- FIG. 18 illustrates even more system output in accordance with an embodiment of the present invention.
- FIG. 19 illustrates yet even more system output in accordance with an embodiment of the present invention.
- FIG. 20 illustrates results of a search in accordance with an embodiment of the present invention.
- FIG. 21 illustrates data structures involved in characterizing a document in accordance with an embodiment of the present invention.
- FIG. 22 presents a flow chart of the characterization process in accordance with an embodiment of the present invention.
- FIG. 23 presents of a flow chart of the process for selecting candidate clusters in accordance with an embodiment of the present invention.
- FIG. 24 presents a flow chart of the process of approximating probabilities for candidate clusters in accordance with an embodiment of the present invention.
- FIG. 25 illustrates how states for the probabilistic model are selected in accordance with an embodiment of the present invention.
- a computer readable storage medium which may be any device or medium that can store code and/or data for use by a computer system.
- the transmission medium may include a communications network, such as the Internet.
- One embodiment of the present invention provides a system that learns concepts by learning an explanatory model of text.
- small pieces of text are generated in a fairly simple, but incredibly powerful way, through the execution of probabilistic network.
- the system learns the parameters of this network by examining many examples of small pieces of text.
- One embodiment of the system considers the important information in a piece of text to be the words (and compounds) used in the text. For example in the query “cooking classes palo alto” the words are “cooking” and “classes”, and the compounds consist of the simple compound “palo alto”. Distinguishing compounds from words is done on the basis of compositionality. For example, “cooking classes” is not a compound because it is about both cooking and classes. However “palo alto” is not about “palo” and “alto” separately. This is sometimes a hard distinction to make, but good guesses can make such a system better than no guesses at all.
- FIG. 1 shows one such model.
- the circles are called model nodes.
- These nodes represent random variables, each of which models the existence or non-existence of concepts or terminals.
- the only terminals we are considering in this model are “elephant”, “grey” and “skies”.
- This model might be used for example to explain why the words grey and skies often occur together, why the words grey and elephant often occur together, but yet why the words “elephant” and “skies” rarely occur together. It is because when people are generating text with these words, they have ideas in mind. The system's concepts are supposed to model the ideas in a person's mind before they generate text.
- This model can be used or “executed” to generate text.
- U Universal node
- firing means that the idea of that concept is active, and is able to fire terminals.
- terminals the idea of firing is that the terminals exist in the text to be generated.
- FIG. 2 shows this particular execution of the model detailed in FIG. 1 .
- C 1 becoming active
- FIG. 2 shows this particular execution of the model detailed in FIG. 1 .
- C 1 becoming active
- FIG. 2 shows this particular execution of the model detailed in FIG. 1 .
- C 1 becoming active
- FIG. 2 shows this particular execution of the model detailed in FIG. 1 .
- C 1 becoming active
- FIG. 2 shows this particular execution of the model detailed in FIG. 1 .
- FIG. 3 shows an example concept representing the states of the United States of America.
- the concept can fire terminals representing each of the 50 states, each with probability 1/50.
- That probability is roughly (1/50)*(49/50) 49 , which is approximately 0.7%.
- For this concept to fire all the states would be (1/50) 50 which is incredibly small.
- we develop such a concept that covers the idea of the states of the United States we would want it to explain pieces of text where all the states occur.
- each concept picks an activation level.
- this activation level chooses “how many” terminals are to be picked from this concept. Note that this activation level is not a quality of our model. In fact, it is only chosen when the model is being executed. What activation does is it modifies the probability that this concept fires each of its terminals (but not its sub-concepts, i.e. concept to concept linking is unaffected by activation).
- the probability that the result does NOT fire is the product of the probability that each cause does NOT fire it.
- Bayesian Networks a certain class of probabilistic models
- Bayesian networks are well-understood probabilistic modeling techniques in which conditional independences are asserted between various random variables in a joint distribution. As in the model above, Bayesian networks have nodes and directed links. These networks compactly represent a joint distribution over a number of random variables while structurally representing conditional independence assumptions about these variables.
- the set of nodes pointing to a node is called its “parents”.
- the set of nodes reachable from a node via following links is called its “descendants” or “children”; and the structure implies that a node is independent of its non-descendants given its parents.
- the entire distribution is therefore encoded in the conditional probability tables of a child given its parents (nodes with no parents have their own distributions). The probability of a particular instantiation of the entire network is simply then the product of the probabilities of each child given its parents.
- Bayesian networks are related to our model in the following way, if each node in the execution of our model is considered to be a random variable then the joint distribution over the set of nodes that are turned on is exactly that which arises from considering our model as a Bayesian network with noisy-or combination functions.
- noisy-or conditional probabilities turn a boolean child on independently from each parent. That is, the probability of a child being off is the product of the probability that each parent does not fire it. Note this is exactly the combination function used in our model to decide if multiple active concepts that link to a terminal fire it.
- Bayesian networks are themselves a subclass of more general probabilistic models.
- some source of text In learning a generative model of text, in one embodiment of the present invention some source of text must be chosen. Some considerations in such a choice are as follows: (1) it should have related words in close proximity; (2) it should present evidence that is independent, given the model we are trying to learn (more on this later); and (3) it should be relevant to different kinds of text. For this reason, the implementation of the model which follows uses exemplary “query sessions” from a search engine as its small pieces of text. We have also implemented and run our model on web pages and other sources of text, but for the purposes of making this exposition more concrete, we focus on the analysis of query sessions.
- a query session also referred to as a user session or a session
- a query session as the set of words used by a single user on a search engine for a single day.
- users will search for related material, issuing several queries in a row about a particular topic. Sometimes, these queries are interspersed with random other topics.
- An example query session (not an actual one) might look as follows:
- a node can be introduced representing each link between a concept and another concept or a terminal. These kinds of nodes are called global nodes, and they represent our uncertainty about the model itself
- FIG. 4 shows what this big network might look like.
- the node U ⁇ C 1 represents the uncertainty about the weight of the link between U and C 1 in the model (Recall that U is our name for the universal node that is always active).
- U is our name for the universal node that is always active.
- our model does not allow everything to link to everything else. This is because in order to have a consistent explanation of ideas all coming from the Universe U, cycles in the link structure are not allowed—for example a concept C 1 that can cause C 2 that can cause C 1 and so on, makes C 1 and C 2 always likely even it U does not link to them. For this reason, a concept is only allowed to link to higher numbered concepts than itself and the universal concept can link to everyone.
- each network the terminals for a particular user session are assumed to be active. Note that our model is replicated for each such session. This is because what we observe for each session is only the words that the user used, and not in fact that concepts that were active in the user's mind when those words came about! The local nodes here represent our uncertainty about these concepts. Because the user may have been thinking of anything when they wrote each word they wrote, all concepts have to be considered in each local network.
- each link between U and C 1 in a local network is mediated by the global node (U ⁇ C 1 ).
- the probability that U fires C 1 in each local network depends on the global node (U ⁇ C 1 ).
- each the global node (U ⁇ C 1 ) would point to every C 1 in every local network.
- FIG. 5 shows this interaction with one such network because there was not enough space to do so in FIG. 4 .
- FIG. 5 only shows the interactions for a model with two concepts.
- the links here between the global node (U ⁇ C 1 ) and C 1 represents the fact that C 1 needs to know both the status of U and the global node (U ⁇ C 1 ) before it fires in a local session.
- FIG. 6 shows a slightly reworked version of this model, where variables exist to explicitly show whether or not each concept triggers another concept or terminal. Note that the joint distributions implied by both are the same, once they are projected to the original variables we are interested in (i.e. C 1 and C 2 ). The triangles in this figure represent extra “trigger” variables, and it is often helpful to think about the model with them because they simplify the number of conditional probabilities that are required.
- the “trigger” variable between U and C 2 only needs to know the distributions of U and the (U ⁇ C 2 ) to decide the probability that C 2 gets fired from U.
- the other trigger into C 2 only needs to know the values of the C 1 and (C 1 ⁇ C 2 ) distributions.
- Loopy belief propagation relies on two types of messages that are transmitted in a network in order to figure out the marginal distributions of all nodes in a particular network.
- Down messages are those that move with the flow of links, and they summarize for whatever node is on the other side of the link, the belief in the source given all other evidence other than what comes from the destination.
- Up messages move against the flow of the links and tell the destination node (which is also the parent in the probabilistic network sense) what the probability is of this side of the link, given various values of the destination node.
- FIG. 7A displays a simple two boolean node network with noisy-or components.
- node A has prior 0.1 of being true, and B has 0.3 of being true given that A is true.
- B has 0.3 of being true given that A is true.
- A propagates a down message to B telling it that given all other evidence, A believes it itself is true with probability 0.1.
- B receives this message, and factors in the conditional probability (noisy-or) at itself, and concludes that it is true with probability 0.03, and we are done.
- FIG. 7B displays a two boolean node network that shows how inference works using up messages.
- B sends an up message to A, this tells A that B can only be true if A is true: that is, given that A is false, the probability of the evidence from below that B knows about is 0. Therefore A must be true.
- A receives this message and multiplies it by its prior on itself, which has a 0.1 chance of being true, and concludes that it must be true and so therefore given the evidence, A is true.
- Loopy belief propagation is not technically an exact solution to the inference problem for the following reason.
- evidence arrives at a particular point from two different sources, they lose information about whether those sources are correlated.
- Three people A, B, C are involved in a conversation. A tells B that he believes the stock market will go up in the next month. B tells C the same information. At this point C tells A that someone else believes the stock market will rise.
- the problem with loopy is that with this simple belief propagation system, A cannot now tell that C's belief is in fact based on A's original assertion, and therefore evidence from A circulates back to itself. In a slightly more complex way, loopy belief propagation circulates evidence around loops in the network to create a usually accurate but sometimes inaccurate solution.
- FIG. 8 shows a noisy-or network where loopy fails.
- D is assumed true, and it's only source is really A, so inference should show that A is true.
- Loopy however settles on a value of approximately 0.6 for A. Usually, however, loopy works pretty well, and we will examine how it can be improved later on in the disclosure.
- Loopy messages are used across the global/local boundaries in the big network.
- the global nodes propagate down their beliefs in themselves to a particular local network—and since the network is just one of billions usually this is just the same belief propagated everywhere.
- the trigger nodes propagate up the probability of the network given everything else that is known about the trigger node.
- FIG. 9 shows the loopy computation happening inside a particularly simple session and with a model including only one concept (C 1 ) and one terminal (T 1 ). Note that in this session, we have seen the terminal T 1 , that is why the local node is darkened. Now, let's take a look at what some of the messages surrounding this model are.
- our system In figuring out this down message, our system first compiles evidence coming in from other sessions about this global node. Our system then picks a best nonzero value W for this node. It then translates the up messages into messages about the node's existence, allowing it to determine how much of the probability to send in the down message at the best value W and how much at the value 0. This simplification of the down message from global nodes is advantageous in dealing with the discrete-continuous nature of the global nodes in a computationally feasible manner.
- the simplified down message from (U ⁇ C 1 ) is along the little arrow next to the link emanating from (U ⁇ C 1 ). It is labeled (0.1, 1.0). This means that the best value is 0.1, and with probability 1.0, this link exists. For reasons that we would like all networks to be partially explainable, we never let the links from U to anything have probability less than 1.0.
- Another example down message is the one emanating from (C 1 ⁇ T 1 ) to the trigger node in between C 1 and T 1 in the local network. This message is labeled (0.2, 0.8) which means it has a 0.8 chance of being nonzero, and when it is nonzero, it equals 0.2.
- T 1 is true. Let us determine how likely it is that C 1 caused it.
- the down message the trigger node from U sends to T 1 is (0.095, 0.905), where 0.095 represents the belief that the node is true and 0.905 represents the belief that the node is false.
- the nature of this down message is totally different than that of the down message from a global node. This is because the trigger node is a boolean variable, whereas the global node is a strange mix of a continuous and discrete variable with some probability mass at 0 and some density at the other points, and further this is approximated by a two point distribution, then further simplified into a single point distribution.
- the trigger is a boolean node, it need only send down its one number, the probability of it being true, the other number is just 1 minus the first number, and in our implementation, we do this optimization.
- T 1 takes this number and sends up to the trigger node on the C 1 side, the probability of T 1 given that the trigger triggered, versus the probability of T 1 given that the trigger did not trigger. This up message is (1.0, 0.095).
- up messages for boolean variables have two such values, but really only one is needed, the ratio between the two (given that infinity is a representable number).
- the trigger node from C 1 to T 1 gets an up message of (1.0, 0.095) but it also has a down message coming from C 1 above.
- This message is (0.095, 0.905) from C 1 .
- the trigger node has all the information it needs. It transforms the message from above into (0.095*0.1478, 1 ⁇ 0.095*0.1478) or (0.014, 0.986). This transformation means that it now has its own belief given what is above it. Now it multiplies that component-wise by its belief of what is below it to get (0.014*1.0, 0.986*0.095) or (0.014, 0.09367), then it normalizes this to sum to 1 to get (0.13, 0.87), which is its final belief. Similar computations can now be carried out to figure out all the other “hidden variables” in this network.
- loopy gives a node a belief on its parents, and its children's belief on itself. It uses its conditional probability distribution to transform the belief on its parents to a belief on itself. It now has two belief numbers for itself, which it multiplies component-wise, then it normalizes to 1 to obtain its own belief.
- a couple of optimizations we often do in computing these messages are the following: we do many probability computations in log space in order to avoid underflows. This includes both the down messages and the up message ratios.
- loopy in order to implement loopy so that it works in linear time in the number of parents on a node, it helps to be able to subtract out the effects of one parent from the belief of the node. This is done via a special routine that takes N numbers and computes all N products of N ⁇ 1 of those numbers in order to do this propagation quickly.
- FIG. 11 shows two clusters C 1 and C 2 competing to trigger a terminal.
- the down messages from (C 1 ⁇ T) and (C 2 ⁇ T) to the appropriate trigger nodes indicate a firing probability of q1 and q2, respectively.
- C 2 can launch T with probability 1 ⁇ e ⁇ a2q2 , and similarly for C 1 launching T.
- the messages coming into C 1 from the other parts of the model show that it is p1 likely to be true.
- messages coming into C 2 from other parts of the model show that it is p2 likely to be true.
- C 1 and C 2 are decided to have activations a1 and a2; and the node T is a terminal that has been observed.
- the probability of T being true is: 1 ⁇ e ⁇ a1q1 and therefore the whole network probability is, p 1(1 ⁇ p 2)(1 ⁇ e ⁇ a1q1 ).
- the probability of the network is p 2(1 ⁇ p 1)(1 ⁇ e ⁇ a2q2 )
- T it is impossible that T is true if neither C 1 nor C 2 are true.
- the function message sent up to the global node (C 1 ⁇ T) is: p 1 p 2(1 ⁇ e ⁇ a1q1 e ⁇ a2q2 )+ p 1(1 ⁇ p 2)(1 ⁇ e ⁇ a1q1 )+ p 2(1 ⁇ p 1)(1 ⁇ e ⁇ a2q2 ).
- this function sums up into the following form: a+be ⁇ a1q1 . . . where a is the sum of all constant terms above and b is the coefficient of e ⁇ a1q1 in the above sum.
- q2, p1, p2 are all considered constant for the purpose of sending up a message to the node (C 1 ⁇ T).
- this equation can be rewritten as: 1 +ke ⁇ a1q1 . . . leaving only two numbers to send up to the global model, k and a1.
- link messages we refer to these up messages to the global nodes as link messages.
- ⁇ i 1 N ⁇ log ⁇ ⁇ ( 1 + k i ⁇ e - a i ⁇ x ) .
- the up messages When the best value is chosen, the up messages then can be converted into up messages for a boolean existence variable, trading off the best value of X versus the value of 0.
- the product of probabilities above is simply evaluated at X and at 0, and the prior on the link's existence (1/1000 as above or as determined by Kolmogorov complexity) is mixed in. This mixing in gives us the existence probability for the link.
- Our model deals with a finite set of words or compounds that it understands, which is referred to as a lexicon.
- a preprocessing phase is required to determine this lexicon. This preprocessing phase determines the important words and compounds for our model to be able to process. Roughly speaking, all words that are seen over a particular fraction of the time in user sessions are included. Compound inclusion is more complicated. Two strategies are possible here: 1) be more inclusive of the compounds and do run-time compounding 2) be less inclusive on the compounds and do static-time compounding.
- Splits are a similar concept, where the compound is split apart at either end.
- a break is also a split but for a longer compound like “this is the time for all good men” a break could be seeing the words “the time” somewhere else in the session.
- this information can be combined with information about the likelihood of the break to account for the possibility that the break is not intentional but accidental, for example, a user could see the following user session:
- our model takes the frequencies of the words and compounds in the lexicon, and uses them to pre-compound the text.
- each sequence is explained using a dynamic programming approach that tries to maximize the probability of seeing a sequence of tokens from the lexicon.
- the dynamic programming approach is to run across the length of a piece of text and maximally explain the sequence of tokens seen so far.
- the best explanation of the sequence up to each new word then one of two things is possible: (1) either the word is explained by its own lexicon token, and all the other words before are explained by their best explanation to that point or (2) the word is a part of a compound that mixes with the best explanation of the query up to a number of tokens previous. Both of these alternatives can be explored, and a new best explanation for the session up to that point can be generated.
- FIG. 12 shows how a local probabilistic network can deal dynamically with compounds in the lexicon at run-time.
- evidence is not counted for the words new, york, or even new york. Rather, we see that at the first position, either the word “new” or the compound “new york” would explain that position. Similarly, either “york” or “new york” explains the second position as well. All of the messages we discussed in the previous section are fairly easy to adjust to this new compounding method. In fact, this method has the advantage of being able to decide whether or not a pair of words is a compound based on the other words in the session.
- Loopy belief propagation is an iterative approach, and so there is always time in its running to introduce new potential clusters, and this is what our model does.
- our model takes a number of user sessions and examines the words in the sessions. If a session contains a sufficient number of words, then a new cluster is formed that perfectly explains that particular session. This new cluster introduces a large number of potential model nodes—one for each potential model link in or out of this new cluster. Not all of these are stored either, in fact, our model only stores a particular link if the link optimization phase determines that it is more likely than a particular threshold to be existent, AND it's weight is sufficiently larger than the weight of a link from CANADA. This is to remove spurious links from the model, because as we will see they cost both memory and computational resources. This simplification will be referred to as “model sparseness”.
- terminal sparseness removes all but a few terminals from each local session, and summarizes them with some evidence for each concept pointing at a “false” boolean node with a determined weight (that weight being determined by the probability of firing nothing divided by the probabilities of it firing the terminals actually in the session).
- Our model runs a routine called “parent picking” to determine which clusters to even consider within a local network.
- This routine uses a few types of information (1) the a priori likelihood of the cluster which can be estimated from its probability in all other sessions (2) the words in the session, which generate likelihood for the clusters that point at them (3) the words linked from the cluster with high probability and (4) the structure of the global model.
- We will return to and examine this routine later but for the moment note that after running this routine on a small piece of text, if typically reduces the numbers of clusters to be examined by large factors.
- our model ends up considering only 12 out of the million plus clusters. This “cluster sparseness” also greatly reduces the amount of work required to analyze a session.
- FIG. 14 shows what such a network might look like (here we have eliminated the trigger nodes for aesthetic reasons).
- Our new cluster C points to both california and berkeley in this session. Note that using terminal sparseness all other terminals are not considered explicitly, and similarly using cluster sparseness. Also, because of not storing in the model links that are low probability, there is no explicit link between C and San Francisco (that is why there is a dotted line between them). Note also that the global node (C ⁇ San Francisco) also does not explicitly exist because of model sparseness. Now, if C is determined to be probable in the session, it is advantageous to send an up message to the node (C ⁇ San Francisco) which does not exist.
- Our model is able to be run in parallel on separate computational units which exchange data using a shared file system or a network.
- a stage in its operation is said to be “sharded” if it can be split up in a way such as to make this parallelism possible.
- Data is said to be “sharded” in the same way (for example, often we say a file is sharded by id, this means that it is split into N pieces, and data with a certain id is placed in the id mod N piece).
- User sessions are stored as one or more files in the file system. Their format is such that a lexicon lookup has already transformed each recognized word into a unique integer, which is its terminal_id.
- the Lexicon allows terminal_ids to be transformed back and forth from strings of text to small ids.
- One advantage of using ids is that they are placed in a small dense space and so can often simplify the data structures that are used to manipulate them.
- the Lexicon is stored in a format that enables easy translation from terminal_id to terminal, and back. Each terminal has a unique terminal_id.
- Our model can be stored with all of the relevant link relationships, be they from cluster to terminal or cluster to cluster.
- the source of each link is referred to as the parent, and the destination a child.
- Each link between a parent and a child can be stored.
- this information is stored in an inverted index, sharded by child_id.
- Each cluster as it is created, is given its own cluster_id. This id may live in the same space as the terminal_ids.
- the inverted index stores for each child, the list of parents of that child, as well as their existence probabilities, and their weights. All of this information is bit-encoded using compressive techniques such as rice encodings, in order to reduce the amount of space that the index takes in memory.
- One particular optimization is to store the inverted index data in blocks of doubling sizes, where within each block the parents are stored in id order for compression.
- the inter-block ordering can then be chosen to emphasize the important links for a target first.
- the advantage of this data structure is the most important links into a terminal or cluster can be retrieved without exploring the whole index entry. This of course can be done simply by sorting by importance.
- the second advantage is that large portions of the index entry are sorted by id, making it more compressive than a simple sort by importance.
- the model may also be stored in an inverted order, with parents having lists of children. This may be used for debugging information.
- the model may also be separated into separate index and data structures, where the index here is a pointer index into the file so that the parents (or children) of a cluster or terminal can be found with two file accesses.
- our model keeps around various pieces of information such as (1) the probability of each cluster given no other information about the session. This approximated as the frequency of that cluster over the last iteration of loopy (2) the total sum activation times probability for each cluster. This is used for the virtual link messages in the link optimization.
- This information is sometimes called the order one information or model, because it is an order 1 (no correlation accounted for) model of whether a cluster exists or not, and of its expected activation times probability.
- the model can also store all of the outlink sums for all clusters.
- an outlink is a link from a cluster to another cluster. This is summed up by multiplying the current existence value of the link times its weight.
- the model can also store all of its activated outlink sums. This is the sum of links from the cluster to terminals.
- the model may optionally store a list of cluster names in a file. These names are typically decided on by choosing a few of the more prominent terminals in the cluster and concatenating them. This is largely a mnemonic device for compounding. However, it can also be used to identify via a terminal the current cluster in our model that responds to a particular information need. For example, a set of pornographic words may be used to identify pornographic clusters, which can easily be then used in combination with our model to form a search safe for children.
- the up link messages are stored temporarily in the processing of the next iteration. These messages are sharded by a combination of parent and child id.
- our model is loaded largely into memory to save file system accesses.
- our model reads training sessions from a file system. It forms local networks for those sessions using the sparseness principles above. It then runs inference (loopy) on the local sessions, because that is required to settle on the probabilities of the various clusters, which is important for extracting link messages (as detailed above).
- our model After running inference, our model extracts up link messages from those sessions and saves those messages sharded by (source_id, target_id) of the message. It also extracts “node messages” from the sessions. These node messages contain the current probability and activation of both clusters and terminals (terminals always have an activation of 1). This information is saved to the file system sharded by id to be processed by a later phase. Note now that this information for each cluster is exactly what is needed to adjust for the effect of “link message sparseness”, i.e. it contains, in the parlance of FIG. 13 , precisely the “a” and “p” necessary to recreate an e ⁇ pax message at any global node with source C.
- our model also decides on which of its sessions it can base new clusters off of. For each of these sessions, our model creates a “new cluster message” that records the likely terminals and clusters. The new cluster will be intended to point at the terminals and be pointed at by the clusters involved. These “new cluster messages” are stored in the file system sharded by id for the “process new clusters” phase to process.
- This phase is sharded by session. This means that the input can be broken up into many pieces (shards), and each processing unit can handle only one particular set of sessions. Note that the sharding of the input (by sessions) is different than the sharding of the output.
- N input session shards
- the output of this stage is then MN node message files sharded by both the session shard and cluster id shard. This data is then merged together N ways to produce the M cluster id shards.
- a similar process occurs for the link shards as well. In general, when a phase shards by a different method than its output, its partial files are merged to obtain a result sharded by what the next stage expects.
- This “cross product merge” is one way of dealing with input that is sharded differently from what is output. It is a very efficient way of generating data in parallel, to be consumed by further processes in parallel as well. An alternative to it would be to simply use the file system and append all the data simultaneously to the output shards. This tends to be slower when large amounts of data are appended and the source sharding is large.
- the probability sum of the clusters, and the sum of the activation times probability of the clusters is determined.
- This information is simply a summary of “node messages” produced in the process sessions phase. This information is saved to the file system as a new set of “summarized node messages” sharded by id and is part of our model. This information is referred to as the order one model.
- node id here node can be either a terminal or a cluster. This means that each processing unit is responsible for computing the order one model for only part of the data, which in fact is the part that it outputs data for; so no cross-product merge is necessary.
- This phase takes the new cluster messages, and decides how the new clusters will fit into our model. This decision is delayed until this time, because it requires information computed in the O1 phase. This is for an important dynamic theoretical reason.
- a new cluster is introduced a decision can be made on the likelihood and best values of all links into it. Typically, such a cluster will be linked from CANADA as well as the other links in the “new cluster message” it is based off of
- the new cluster is given links that are too strong (high weight and likelihood) it will immediately take over words from existing good clusters, without learning new concepts. This is because the cluster does not yet point to a properly related set of terminals. If the new cluster is given links that are too weak, it will not be important enough to make a difference in any sessions, and it will not receive strong enough link messages, and it will fail as well. Here failing means that the link messages it receives eliminate links from/to it and the rest of the model.
- Entry messages are basically what exists in the inverted index information of the model.
- An entry contains information about a source, target, likelihood of existence and best value. This information is sharded by target id.
- This phase is sharded by the cluster id of the new cluster. That is, each processing unit produces entry messages for only certain of the new cluster ids. Note since the different processing units may be producing data that is destined (by target id) for the same shard, they have to append their data asynchronously to some of the same files using the file system. A cross product merge could be used here as well but the quantity of the data is fairly small, so the data is just merged immediately at the file system level.
- This phase receives all the link messages from the process sessions phase, and all the summarized node messages, and optimizes the likelihood and probability of the links in the manner described above in the link optimization section. Its output is again a set of “entry messages” sharded by target id.
- This phase is sharded by a combination of source and target id. That is, each processing unit is responsible for only those links that fall within its sharding space.
- the resulting data is fairly small, and need not go through a cross product merge, it can be appended to a set of files in parallel from all the sources.
- This phase takes all the entry messages and puts them together for one particular target.
- This phase also limits the number of sources that may point to a particular target to a set number N. Typical values for N are 100 or so.
- the N sources that get to point to the target are the most important ones for the target. Importance here is determined by the product of the of value for the source, and the link weight and link likelihood along that link. This simplification is done to keep the number of parents pointing at a particular node small, for reasons of efficiency. This is yet another scalability technique, which we will refer to as “row sparseness”.
- the output of this phase is a particular shard of the inverted indices for the model files described above.
- the output is sharded by target id, the same way as the input.
- This entire phase is sharded by target id as well.
- This phase inverts the parent index data to build a child index. It's input is sharded by the target of a link, its output is instead sharded by the source.
- Each processing unit appends to a number of result files in parallel.
- a particular model is translated into “entry messages”, the order one parts of the model are loaded into memory (they are required for the p1 and p2 components); and this translation takes place.
- the output of the translation is a set of entry messages that then feeds into the “build parent index” phase of the regular operation.
- one embodiment of the present invention does not include all of the thousands of clusters in the local belief network which we solve.
- To determine which clusters are to be candidates we keep a priority queue of clusters to be evaluated, so as to evaluate them in increasing order of height in the model (decreasing cluster id, increasing generality).
- For a given cluster C 1 we construct a belief network as shown in FIG. 15.1 .
- cluster C 2 linked to the terminals “grey” and “mouse” in the session and also to cluster C 1 , we could either construct a network like in FIG. 15.2A which includes C 1 , or one like in FIG. 15.2B which includes the link from C 2 to “grey”. We would choose which one to construct depending on which message was stronger, the one from C 1 to C 2 or the one from “grey” to C 2 .
- a fix for this is to change the weight of the links from CANADA to all terminals to reflect their probability in the candidate language (i.e. the language of web pages). Because an explanation from CANADA for a terminal is basically a statement that there is no well-defined concept that originated that terminal, this ends up discounting the effect of those words somewhat. This often results in a better concept engine for comparing the concepts in queries and web pages.
- N is typically 10 or so
- This technique has been applied with our model when training on web pages.
- the PARENTS and CHILDREN section list the other clusters that this cluster is related to.
- the column on the left lists the number of times that a parent is expected to trigger, or a child is triggered by, this particular cluster.
- the parent information here is sparse, only CANADA is a parent of this cluster, and this is because the concept of jobs is so large that renumbering moves it quickly to be a parent of many other concepts.
- the numbers that follow the child clusters are a pair detailing the best value of the link between the two clusters, and the logodds belief in the links' existence, which in this case is infinite so the link is there with probability 1.0 according to our model.
- Total Firing: 6408187.000000 means that the sum probability of existence of this cluster (o1) was 6408187 times in the last iteration of our model. Firing is sometimes used as a synonym here for probability or sum of probabilities.
- Total Activation: 11139140.000000 is the order one entry for the sum of the cluster's activation times its probability in all sessions in the last iteration (it should really be called Total Activation Times Probability but that name is unwieldy).
- Outlink Sum: 0.848506 means the sum of the weight times likelihood of its links to clusters is 0.848506.
- the first terminal is “jobs”.
- the information on the left, 1841287, is the number of times this cluster triggers the word “jobs”.
- the information to the right of the word is again its best value and log likelihood of existence.
- the next few words are “job”, “employment”, “in”, “job-search”, “careers”, “it”, “career”, “job-opportunities”, “human-resources”, and so on. All of these terminals are used when people talk about the concept of jobs! Note that many more terminals are linked to from this cluster, and only the most significant ones are displayed in this figure.
- FIG. 18 shows this output.
- the next line is “Firing: 3049398.000000” which means the sum of probabilities of occurrence of this word over the previous iteration is 3049398 (note that because of compounding, a terminal can have a probability of occurrence in a session different than 1.0).
- the next few lines detail the clusters that cause this terminal most strongly, the first being the [jobs job employment in job-search careers] cluster! Note that many more clusters link to this terminal, and only the most significant ones are displayed in this figure.
- CANADA is the cluster that causes “in” the most.
- the interpretation of this is as follows: “in” is used when people are talking about jobs, but “in” is also caused by other things more often, so it is not as strong an indicator as the word “jobs” in what people are searching for. Note here as well that many more clusters link to this terminal, and only the most significant ones are displayed in this figure.
- FIG. 20 shows the results of this search. Let's begin with the line “QUERY: palo alto restaurants”. This is simply what was typed into the box. The next two lines are the compound “palo alto” and the word “restaurants”. They represent the current compounding (sometimes called segmentation) of the query.
- the last number, 9.9789 is the number of bits it takes to represent the word. There is a duality between bit representation cost and probability, where bit cost is the negative of the log base 2 of the probability. This means that the word palo-alto occurs roughly one in 2 ⁇ 9.9789 (around 1000) times a word occurs. The number in the middle is an APPROXIMATION to how many bits the word requires given that the other words have been seen. The word palo-alto does not get better (more likely) but the word restaurants does! This is because people searching for palo alto with a very high frequency (around 1 in 2 3.7 or 1 in 10) want restaurants in palo alto. The same might apply in a document for people writing about palo alto.
- This information is in determining which words in a literal search can be dropped because they are less specifying than the others. For example, if a search for “palo alto” restaurants does not return enough results from a corpus of documents, perhaps you can look for pages that just mention palo alto and see if they are about restaurants but use a different word (like one of the words in the [restaurants in resturants restuarants dining best] cluster for example).
- the first number for palo-alto 15.2624 is also a bit cost, but assuming that the highly probable (>0.95) clusters in a document are on, which none are for this session. This number is also an approximation.
- a node can be either a cluster or a terminal.
- the rest of that line deals with timing information.
- the next few lines display information about all the clusters found in the query.
- the first is a restaurant cluster named [restaurants in resturants restuarants dining best]. There are three columns of numbers on the left. The first is the probability of the cluster. The second is its probability times its activation. The third is its probability times an adjusted activation.
- the second cluster to be found is the [san-jose ca sunnyvale santa-clara bay-area mountain-view] cluster, with a probability of existence of 0.682912.
- the third is a cluster of [palo-alto menlo-park restaurant evvia palo straits-cafe] with probability of 0.37.
- Evvia and “Straits cafe” are actually restaurants in Palo Alto. This cluster has specialized to be the concept of restaurants around Palo Alto!
- our model can be used to estimate the probabilities that various concepts are present in any piece of text. The same can be done for web pages as well, and by looking at the joint concepts present in a web page and a query, one of the uses of our model is for a search over web pages. The next section talks about some of the uses of our model.
- This can be the information retrieval scoring function that is required in any document search engine, including the special case where the documents are web pages.
- a specialization of this is attaching advertisements to web pages.
- the probabilities of clusters in the text can be used as features for an arbitrary classification task. For example, a pornography filter can be produced by projecting the text of a page onto clusters, and then building a classifier that uses the clusters and the words as its input.
- One advantage of this method is that the search can be limited arbitrarily in order to trade off speed of execution versus accuracy. In the analysis of larger pieces of text, in order to have our model return in an adequate amount of time, the tradeoff is often made in favor of speed of execution.
- One more way to do inference in the local networks is to run loopy for a while and see if it converges quickly or not.
- loopy does not converge quickly, one or more nodes can be “conditioned” i.e. loopy is run for both true and false values of these variables. If the network is conditioned enough, loopy becomes more stable, this is because conditioning on the top or side of loops breaks the cycle of message looping in loopy (for various theoretical reasons). This conditioning is applied recursively until loopy converges quickly. After running conditioned loopy, the result is various conditions under which all the link messages are known.
- FIG. 21 illustrates data structures involved in characterizing a document in accordance with an embodiment of the present invention. These data structures include, order one probability table 2102 , parent table 2104 , child table 2106 and link table 2108 .
- Order one probability table 2102 includes entries for each node in the probabilistic model that approximate the order one (unconditional) probability that the node is active in generating a given set of words. Hence, an entry in order one probability table 2102 indicates how common an associated word or cluster is in sets of words that are generated by the probabilistic model. In one embodiment of the present invention, order one priority table 2102 also includes an “activation” for each cluster node indicating how many how many links from the candidate cluster to other nodes are likely to fire.
- Parent table 2104 includes entries that identify parents of associated nodes in the probabilistic model, as well as the link weights from the identified parents.
- child table 2106 includes entries that identify children of associated nodes in the probabilistic model, as well as the link weights to the identified children.
- link table 2108 is populated during the process of characterizing a document.
- Link table 2108 includes entries for links to consider as evidence while constructing an evidence tree as is discussed below with reference to FIGS. 22-25 . Each entry in link table 2108 contains the weight for an associated link as well as the identifier for the associated parent node. Moreover, link table 2108 can be sorted by parent identifier as is discussed below.
- FIG. 22 presents a flow chart of the characterization process in accordance with an embodiment of the present invention.
- the system starts by receiving a document containing a set of words (step 2202 ).
- this document can include a web page or a set of terms (words) from a query.
- the system selects a set of “candidate clusters” from the probabilistic model that are likely to be active in generating the set of words (step 2204 ). This process is described in more detail below with reference to FIG. 23 . Note that by selecting a set of candidate clusters, the system limits the number of clusters that are considered in subsequent computational operations, thereby reducing the amount of computation involved in characterizing the document.
- the system then constructs a vector (set of components) to characterize the document (step 2206 ).
- This vector includes components for candidate clusters, wherein each component of the vector indicates a degree to which the corresponding candidate cluster was active in generating the set of words in the document. This process is described in more detail below with reference to FIGS. 24-25 .
- the system can use this vector to facilitate a number of different operations related to the document (step 2208 ). Some of these uses are listed above in a preceding section of this specification entitled “Uses of the Model”.
- FIG. 23 presents of a flow chart of the process for selecting candidate clusters in accordance with an embodiment of the present invention.
- This flow chart describes in more detail the operations involved in performing step 2204 in FIG. 22 .
- the system starts by constructing an “evidence tree” starting from terminal nodes associated with the set of words in the document and following links to parent nodes (step 2302 ). As a node is selected to be part of the evidence tree, links to the node from parent nodes are inserted into link table 2108 .
- the system uses the evidence tree to estimate the likelihood that each parent cluster is active in generating the set of words (step 2304 ). More specifically, in one embodiment of the present invention, for a cluster node C i that only points to terminal nodes, the system estimates the likelihood that C i was involved in generating the set of words (we refer to this estimated likelihood as the “Guess of C i ”) using the following formula,
- This formula indicates that the guess of C i is the order one probability of C i multiplied by a product of conditional probability contributions from active child nodes w j of C i .
- the numerator of this contribution is the weight of the link from C i to w j multiplied by a guess at the activation of C i . Recall that the activation of C i is an indicator of the number of active links out of node C i .
- the denominator of this contribution, ⁇ tilde over (P) ⁇ (w j ), is the order one probability of w j multiplied by the number of words in the set of words.
- Score ⁇ ( C i ) ⁇ k ⁇ Contribution ⁇ ( C k , C i ) ⁇ ⁇ j ⁇ Contribution ⁇ ( w j , C i ) .
- the guess of C i is the order one probability of C i multiplied by a product of conditional probability contributions.
- these conditional probability contributions come from other cluster nodes C k as well as from child nodes w j .
- Contribution ⁇ ( C k , C i ) P ⁇ ( C k
- the system marks terminal nodes during the estimation process for a given cluster node to ensure that terminal nodes are not factored into the estimation more than once.
- the system selects parent nodes to be candidate cluster nodes based on these estimated likelihoods (step 2306 ).
- the system has a set of candidate clusters to consider along with their activations.
- FIG. 24 presents a flow chart of the process of approximating probabilities for candidate clusters in accordance with an embodiment of the present invention.
- the system first selects states for the probabilistic model that are likely to have generated the set of words (step 2402 ).
- the system constructs the vector, wherein the vector includes components for candidate clusters. Each of these components indicates a likelihood that a corresponding candidate cluster is active in generating the set of words.
- the system considers only selected states in approximating the probability that an associated candidate cluster is active in generating the set of words (step 2404 ).
- P ⁇ ( C i ) ⁇ P network ⁇ ( C i ⁇ ⁇ is ⁇ ⁇ on ) ⁇ P network ⁇ ( explored ) .
- This formula indicates that P(C i ) is the sum of the network probabilities for networks in which C i is discovered to be active divided by the sum of all network probabilities for networks that have been explored.
- the probability of a given network state occurring can be calculated as,
- P network ⁇ nodes ⁇ ⁇ j that ⁇ ⁇ are ⁇ ⁇ on ⁇ ( 1 - ⁇ nodes ⁇ ⁇ i ⁇ ⁇ that ⁇ ⁇ are on ⁇ ⁇ and ⁇ ⁇ point ⁇ ⁇ to ⁇ ⁇ j ⁇ ( 1 - w i -> j ) ) ⁇ ⁇ nodes ⁇ ⁇ k that ⁇ ⁇ are ⁇ ⁇ off ⁇ ( ⁇ nodes ⁇ ⁇ i ⁇ ⁇ that ⁇ ⁇ are on ⁇ ⁇ and ⁇ ⁇ point ⁇ ⁇ to ⁇ ⁇ k ⁇ ( 1 - w i -> k ) )
- This probability includes contributions from nodes that are “on”.
- the system computes the probability that at least one link into j (from an active parent node i) fires. This is one minus the probability that no link into j from an active parent node i fires, wherein the probability that a link from an active node does not fire is one minus the link weight.
- the probability also includes contributions from nodes k that are “off”. For a given node k that is off, the contribution is the probability that no link points to k from active node i, which is simply the product of one minus the link weights.
- FIG. 25 illustrates how states for the probabilistic model are selected in accordance with an embodiment of the present invention.
- This flow chart describes in more detail the operations involved in performing step 2402 in FIG. 25 .
- one embodiment of the present invention considers only candidate cluster nodes and terminal nodes associated with the set of words in the document. All other nodes are ignored.
- the system starts by randomly selecting a starting state for the probabilistic model (step 2502 ).
- Each starting state indicates which nodes in the probabilistic model are active and which ones are not. Note that any starting state is possible because the universal node can trigger any subset of the candidate nodes to fire.
- link weights in the probabilistic model tend to make some states more likely than others in generating the set of words in the document. Hence, it is unlikely that a random starting state would have generated the set of words in the document.
- the system performs “hill-climbing” operations to reach a state that is likely to have generated the set of words in the document (step 2504 ).
- hill-climbing operation typically changes the state of the system in a manner that increases the value of a specific objective function.
- the objective function is the probability of a given network state occurring, P network , which is described above.
- the system periodically changes the state of an individual candidate cluster between hill-climbing operations without regards to the objective function. In doing so, the system fixes the changed state so it does not change during subsequent hill-climbing operations. This produces a local optimum for the objective function, which includes the changed state, which enables to system to explore states of the probabilistic model that are otherwise unreachable through only hill-climbing operations.
Abstract
Description
5 billion sessions×(1 million terminal local nodes+5 million concept local nodes)×=30 billion million local terminal nodes
. . . and that's the easy part. Now let's count the links. The global model has 5 million nodes, each of which can link to 1 million terminals, each of which can be replicated in the
1 million terminals×5 million clusters×5 billion sessions×2=50 million million billion links!
. . . and the worst part is that correct inference techniques run in exponential time over the size of the network, so basically, doing this the straightforward way is impossibly expensive. The next section of this disclosure discusses the different things that can and have to be done in order to make this system possible.
Scalability Techniques and Loopy Belief Propagation
1−e −a1q1 e −a2q2
and therefore the whole network probability is,
p1p2(1−e −a1q1 e −a2q2).
If C1 is true and C2 is false, the probability of this happening is p1(1−p2). The probability of T being true is:
1−e −a1q1
and therefore the whole network probability is,
p1(1−p2)(1−e −a1q1).
Similarly, if C2 is true and C1 is false the probability of the network is
p2(1−p1)(1−e −a2q2)
And last, it is impossible that T is true if neither C1 nor C2 are true. Therefore, the function message sent up to the global node (C1→T) is:
p1p2(1−e −a1q1 e −a2q2)+
p1(1−p2)(1−e −a1q1)+
p2(1−p1)(1−e −a2q2).
a+be −a1q1
. . . where a is the sum of all constant terms above and b is the coefficient of e−a1q1 in the above sum. Note that q2, p1, p2 are all considered constant for the purpose of sending up a message to the node (C1→T). In fact, since the constant factor this function is multiplied by does not matter, this equation can be rewritten as:
1+ke −a1q1
. . . leaving only two numbers to send up to the global model, k and a1. We refer to these up messages to the global nodes as link messages.
1+ke −a1q1.
P(C is true|all else)*P(T is false|C is true)+P(C is false|all else)*P(T is false|C is false)=pe −ax+(1−p)≅p(1−ax)+1−p=1−pax≅e −pax
w′p2=
or
W′=
(4) Comparing the words and concepts between a document and an advertisement. This can be used as a proxy for how well an advertisement will perform if attached to a certain piece of content. A specialization of this is attaching advertisements to web pages.
(5) Comparing the words and concepts between a query and an advertisement (or targeting criteria for an advertisement). In search engines, advertisers often select a set of “targeting criteria”, which when they show up in user queries, and ad is served. These text of these criteria (and the ad copy itself) can be compared to a query via the use of clusters in our model. This comparison can be a proxy for how well the ad will perform if served on a search page resulting from the query.
(6) Comparing the words and concepts between two documents. This can be used as a distance metric for conceptual clustering of documents, where similar documents are grouped together.
(7) Projecting text into the space of clusters. The probabilities of clusters in the text can be used as features for an arbitrary classification task. For example, a pornography filter can be produced by projecting the text of a page onto clusters, and then building a classifier that uses the clusters and the words as its input.
(8) Generalizing a web query to retrieve more results, using the bit cost or probability of a set of words or terminals given their parent clusters.
(9) Guessing at whether a particular word is a misspelling of another word by looking at the concepts induced by the two words.
Local Inference Mechanisms
wherein
{tilde over (P)}(C i →w j)=(weightC
and wherein
{tilde over (P)}(w j)=O1(w j)×(#words).
This formula indicates that the guess of Ci is the order one probability of Ci multiplied by a product of conditional probability contributions from active child nodes wj of Ci. The numerator of this contribution, {tilde over (P)}(Ci→wj), is the weight of the link from Ci to wj multiplied by a guess at the activation of Ci. Recall that the activation of Ci is an indicator of the number of active links out of node Ci. The denominator of this contribution, {tilde over (P)}(wj), is the order one probability of wj multiplied by the number of words in the set of words.
Guess(C i)=O1(C i)·Score(C i),
wherein
As in the case of a cluster node that only points to terminals, the guess of Ci is the order one probability of Ci multiplied by a product of conditional probability contributions. However, these conditional probability contributions come from other cluster nodes Ck as well as from child nodes wj.
wherein P(Ck|Ci) is the conditional probability of Ck given C1, P(Ck) is the order one probability of Ck, and Score(Ck) is the previously calculated score of Ck. Note that since the evidence tree is constructed from terminals up, the score of the child node Ck will have been computed before the score of the parent node Ci is computed.
V i=Activation(C i)×P(C i),
wherein the Activation(Ci) is an indicator of the number of links that will fire if node Ci fires, and wherein P(Ci) is the probability that Ci is active in generating the set of words in the document.
This formula indicates that P(Ci) is the sum of the network probabilities for networks in which Ci is discovered to be active divided by the sum of all network probabilities for networks that have been explored.
This probability includes contributions from nodes that are “on”. More specifically, for each node j that is on in a given network, the system computes the probability that at least one link into j (from an active parent node i) fires. This is one minus the probability that no link into j from an active parent node i fires, wherein the probability that a link from an active node does not fire is one minus the link weight.
Claims (21)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/131,637 US8688720B1 (en) | 2002-10-03 | 2008-06-02 | Method and apparatus for characterizing documents based on clusters of related words |
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US41614402P | 2002-10-03 | 2002-10-03 | |
US10/676,571 US7383258B2 (en) | 2002-10-03 | 2003-09-30 | Method and apparatus for characterizing documents based on clusters of related words |
US12/131,637 US8688720B1 (en) | 2002-10-03 | 2008-06-02 | Method and apparatus for characterizing documents based on clusters of related words |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/676,571 Continuation US7383258B2 (en) | 2002-10-03 | 2003-09-30 | Method and apparatus for characterizing documents based on clusters of related words |
Publications (1)
Publication Number | Publication Date |
---|---|
US8688720B1 true US8688720B1 (en) | 2014-04-01 |
Family
ID=32069938
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/676,571 Active 2025-07-26 US7383258B2 (en) | 2002-10-03 | 2003-09-30 | Method and apparatus for characterizing documents based on clusters of related words |
US12/131,637 Active 2026-01-07 US8688720B1 (en) | 2002-10-03 | 2008-06-02 | Method and apparatus for characterizing documents based on clusters of related words |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/676,571 Active 2025-07-26 US7383258B2 (en) | 2002-10-03 | 2003-09-30 | Method and apparatus for characterizing documents based on clusters of related words |
Country Status (7)
Country | Link |
---|---|
US (2) | US7383258B2 (en) |
EP (1) | EP1546932A4 (en) |
JP (1) | JP4465274B2 (en) |
KR (1) | KR101014895B1 (en) |
CN (1) | CN100504856C (en) |
CA (1) | CA2500914C (en) |
WO (1) | WO2004031916A2 (en) |
Cited By (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20120308124A1 (en) * | 2011-06-02 | 2012-12-06 | Kriegman-Belhumeur Vision Technologies, Llc | Method and System For Localizing Parts of an Object in an Image For Computer Vision Applications |
US20140214735A1 (en) * | 2013-01-28 | 2014-07-31 | Pagebites, Inc. | Method for an optimizing predictive model using gradient descent and conjugate residuals |
US9600777B2 (en) | 2013-03-11 | 2017-03-21 | Georges Harik | Configuring and optimizing computational structure for a machine learning application using a tuple of vectors |
WO2018087190A1 (en) | 2016-11-11 | 2018-05-17 | Octimine Technologies Gmbh | Apparatus and method for semantic search |
US10862834B2 (en) * | 2016-11-14 | 2020-12-08 | Tencent Technology (Shenzhen) Company Limited | Method and apparatus for generating descriptive texts corresponding to chat message images via a condition probability model |
Families Citing this family (122)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8229957B2 (en) * | 2005-04-22 | 2012-07-24 | Google, Inc. | Categorizing objects, such as documents and/or clusters, with respect to a taxonomy and data structures derived from such categorization |
US7231393B1 (en) * | 2003-09-30 | 2007-06-12 | Google, Inc. | Method and apparatus for learning a probabilistic generative model for text |
US7020593B2 (en) * | 2002-12-04 | 2006-03-28 | International Business Machines Corporation | Method for ensemble predictive modeling by multiplicative adjustment of class probability: APM (adjusted probability model) |
GB0322600D0 (en) * | 2003-09-26 | 2003-10-29 | Univ Ulster | Thematic retrieval in heterogeneous data repositories |
US7617205B2 (en) | 2005-03-30 | 2009-11-10 | Google Inc. | Estimating confidence for query revision models |
US8010459B2 (en) * | 2004-01-21 | 2011-08-30 | Google Inc. | Methods and systems for rating associated members in a social network |
US8015119B2 (en) | 2004-01-21 | 2011-09-06 | Google Inc. | Methods and systems for the display and navigation of a social network |
EP1562111B1 (en) * | 2004-02-03 | 2017-04-26 | Sap Se | A context modeller for modelling a context representation and a method of modelling a context representation |
US7313552B2 (en) * | 2004-03-19 | 2007-12-25 | Sybase, Inc. | Boolean network rule engine |
US7409383B1 (en) * | 2004-03-31 | 2008-08-05 | Google Inc. | Locating meaningful stopwords or stop-phrases in keyword-based retrieval systems |
US8019875B1 (en) | 2004-06-04 | 2011-09-13 | Google Inc. | Systems and methods for indicating a user state in a social network |
US8832132B1 (en) | 2004-06-22 | 2014-09-09 | Google Inc. | Personalizing search queries based on user membership in social network communities |
US9223868B2 (en) | 2004-06-28 | 2015-12-29 | Google Inc. | Deriving and using interaction profiles |
US7860314B2 (en) * | 2004-07-21 | 2010-12-28 | Microsoft Corporation | Adaptation of exponential models |
US8015019B1 (en) | 2004-08-03 | 2011-09-06 | Google Inc. | Methods and systems for providing a document |
US20060074910A1 (en) * | 2004-09-17 | 2006-04-06 | Become, Inc. | Systems and methods of retrieving topic specific information |
US9031898B2 (en) * | 2004-09-27 | 2015-05-12 | Google Inc. | Presentation of search results based on document structure |
US7668822B2 (en) * | 2004-12-23 | 2010-02-23 | Become, Inc. | Method for assigning quality scores to documents in a linked database |
WO2006071811A2 (en) * | 2004-12-23 | 2006-07-06 | Become, Inc. | Method for assigning relative quality scores to a collection of linked documents |
US7716140B1 (en) | 2004-12-31 | 2010-05-11 | Google Inc. | Methods and systems for controlling access to relationship information in a social network |
US7567946B2 (en) * | 2005-03-14 | 2009-07-28 | Xerox Corporation | Method, apparatus, and article of manufacture for estimating parameters of a probability model on shared device usage probabilistic semantic analysis |
US7870147B2 (en) * | 2005-03-29 | 2011-01-11 | Google Inc. | Query revision using known highly-ranked queries |
US8412780B2 (en) | 2005-03-30 | 2013-04-02 | Google Inc. | Methods and systems for providing current email addresses and contact information for members within a social network |
CN100470544C (en) | 2005-05-24 | 2009-03-18 | 国际商业机器公司 | Method, equipment and system for chaiming file |
US7818208B1 (en) | 2005-06-28 | 2010-10-19 | Google Inc. | Accurately estimating advertisement performance |
US8028337B1 (en) | 2005-08-30 | 2011-09-27 | Sprint Communications Company L.P. | Profile-aware filtering of network traffic |
US8204974B1 (en) * | 2005-08-30 | 2012-06-19 | Sprint Communications Company L.P. | Identifying significant behaviors within network traffic |
US8316292B1 (en) | 2005-11-18 | 2012-11-20 | Google Inc. | Identifying multiple versions of documents |
US8095876B1 (en) | 2005-11-18 | 2012-01-10 | Google Inc. | Identifying a primary version of a document |
US20070156887A1 (en) * | 2005-12-30 | 2007-07-05 | Daniel Wright | Predicting ad quality |
US8065184B2 (en) * | 2005-12-30 | 2011-11-22 | Google Inc. | Estimating ad quality from observed user behavior |
US7827060B2 (en) | 2005-12-30 | 2010-11-02 | Google Inc. | Using estimated ad qualities for ad filtering, ranking and promotion |
US10600090B2 (en) | 2005-12-30 | 2020-03-24 | Google Llc | Query feature based data structure retrieval of predicted values |
US20070157228A1 (en) | 2005-12-30 | 2007-07-05 | Jason Bayer | Advertising with video ad creatives |
US7739226B2 (en) * | 2006-02-09 | 2010-06-15 | Ebay Inc. | Method and system to analyze aspect rules based on domain coverage of the aspect rules |
US9443333B2 (en) * | 2006-02-09 | 2016-09-13 | Ebay Inc. | Methods and systems to communicate information |
US7739225B2 (en) | 2006-02-09 | 2010-06-15 | Ebay Inc. | Method and system to analyze aspect rules based on domain coverage of an aspect-value pair |
US7640234B2 (en) * | 2006-02-09 | 2009-12-29 | Ebay Inc. | Methods and systems to communicate information |
US7725417B2 (en) * | 2006-02-09 | 2010-05-25 | Ebay Inc. | Method and system to analyze rules based on popular query coverage |
US7849047B2 (en) | 2006-02-09 | 2010-12-07 | Ebay Inc. | Method and system to analyze domain rules based on domain coverage of the domain rules |
US8380698B2 (en) * | 2006-02-09 | 2013-02-19 | Ebay Inc. | Methods and systems to generate rules to identify data items |
WO2007095075A2 (en) * | 2006-02-09 | 2007-08-23 | Ebay Inc. | Methods and systems to communicate information |
US8019754B2 (en) * | 2006-04-03 | 2011-09-13 | Needlebot Incorporated | Method of searching text to find relevant content |
US8856145B2 (en) * | 2006-08-04 | 2014-10-07 | Yahoo! Inc. | System and method for determining concepts in a content item using context |
US7660804B2 (en) * | 2006-08-16 | 2010-02-09 | Microsoft Corporation | Joint optimization of wrapper generation and template detection |
US7831472B2 (en) | 2006-08-22 | 2010-11-09 | Yufik Yan M | Methods and system for search engine revenue maximization in internet advertising |
US20080066107A1 (en) | 2006-09-12 | 2008-03-13 | Google Inc. | Using Viewing Signals in Targeted Video Advertising |
EP1903457B1 (en) * | 2006-09-19 | 2012-05-30 | Exalead | Computer-implemented method, computer program product and system for creating an index of a subset of data |
US7747607B2 (en) * | 2006-09-21 | 2010-06-29 | Yahoo! Inc. | Determining logically-related sub-strings of a string |
US9069750B2 (en) | 2006-10-10 | 2015-06-30 | Abbyy Infopoisk Llc | Method and system for semantic searching of natural language texts |
US9189482B2 (en) | 2012-10-10 | 2015-11-17 | Abbyy Infopoisk Llc | Similar document search |
US9892111B2 (en) | 2006-10-10 | 2018-02-13 | Abbyy Production Llc | Method and device to estimate similarity between documents having multiple segments |
US9495358B2 (en) | 2006-10-10 | 2016-11-15 | Abbyy Infopoisk Llc | Cross-language text clustering |
US9098489B2 (en) | 2006-10-10 | 2015-08-04 | Abbyy Infopoisk Llc | Method and system for semantic searching |
US9075864B2 (en) | 2006-10-10 | 2015-07-07 | Abbyy Infopoisk Llc | Method and system for semantic searching using syntactic and semantic analysis |
JP5011947B2 (en) * | 2006-10-19 | 2012-08-29 | オムロン株式会社 | FMEA sheet creation method and FMEA sheet automatic creation apparatus |
US7945854B2 (en) * | 2006-10-30 | 2011-05-17 | Palo Alto Research Center Incorporated | Systems and methods for the combination and display of social and textual content |
US20080172293A1 (en) * | 2006-12-28 | 2008-07-17 | Yahoo! Inc. | Optimization framework for association of advertisements with sequential media |
US20080159114A1 (en) * | 2007-01-02 | 2008-07-03 | Dipietro Richard Anthony | High density data storage medium, method and device |
US9507858B1 (en) * | 2007-02-28 | 2016-11-29 | Google Inc. | Selectively merging clusters of conceptually related words in a generative model for text |
US8584013B1 (en) | 2007-03-20 | 2013-11-12 | Google Inc. | Temporal layers for presenting personalization markers on imagery |
US8271476B2 (en) * | 2007-03-30 | 2012-09-18 | Stuart Donnelly | Method of searching text to find user community changes of interest and drug side effect upsurges, and presenting advertisements to users |
US8103707B2 (en) * | 2007-03-30 | 2012-01-24 | Verizon Patent And Licensing Inc. | Method and system for presenting non-linear content based on linear content metadata |
US8275773B2 (en) * | 2007-03-30 | 2012-09-25 | Stuart Donnelly | Method of searching text to find relevant content |
US8086624B1 (en) * | 2007-04-17 | 2011-12-27 | Google Inc. | Determining proximity to topics of advertisements |
US8229942B1 (en) | 2007-04-17 | 2012-07-24 | Google Inc. | Identifying negative keywords associated with advertisements |
US8667532B2 (en) | 2007-04-18 | 2014-03-04 | Google Inc. | Content recognition for targeting video advertisements |
US20080276266A1 (en) * | 2007-04-18 | 2008-11-06 | Google Inc. | Characterizing content for identification of advertising |
US8433611B2 (en) * | 2007-06-27 | 2013-04-30 | Google Inc. | Selection of advertisements for placement with content |
US20090006190A1 (en) * | 2007-06-28 | 2009-01-01 | Google Inc. | Determining location-based commercial information |
US8073803B2 (en) * | 2007-07-16 | 2011-12-06 | Yahoo! Inc. | Method for matching electronic advertisements to surrounding context based on their advertisement content |
US20090024470A1 (en) * | 2007-07-20 | 2009-01-22 | Google Inc. | Vertical clustering and anti-clustering of categories in ad link units |
US8180725B1 (en) * | 2007-08-01 | 2012-05-15 | Google Inc. | Method and apparatus for selecting links to include in a probabilistic generative model for text |
US8554618B1 (en) | 2007-08-02 | 2013-10-08 | Google Inc. | Automatic advertising campaign structure suggestion |
US9064024B2 (en) | 2007-08-21 | 2015-06-23 | Google Inc. | Bundle generation |
WO2009046130A1 (en) * | 2007-10-01 | 2009-04-09 | Wand, Inc. | Method for resolving failed search queries |
CN101493823B (en) * | 2007-10-05 | 2012-06-13 | 富士通株式会社 | Identifying clusters of words according to word affinities |
US8572087B1 (en) | 2007-10-17 | 2013-10-29 | Google Inc. | Content identification |
US9824372B1 (en) | 2008-02-11 | 2017-11-21 | Google Llc | Associating advertisements with videos |
US8255948B1 (en) | 2008-04-23 | 2012-08-28 | Google Inc. | Demographic classifiers from media content |
US8214346B2 (en) * | 2008-06-27 | 2012-07-03 | Cbs Interactive Inc. | Personalization engine for classifying unstructured documents |
US20100037149A1 (en) * | 2008-08-05 | 2010-02-11 | Google Inc. | Annotating Media Content Items |
US8583618B2 (en) * | 2008-11-24 | 2013-11-12 | Business Objects S.A. | Determination of graphical format to present search results |
US8234274B2 (en) * | 2008-12-18 | 2012-07-31 | Nec Laboratories America, Inc. | Systems and methods for characterizing linked documents using a latent topic model |
US8099453B2 (en) * | 2009-01-22 | 2012-01-17 | Hewlett-Packard Development Company, L.P. | System and method for data clustering |
US20100211894A1 (en) * | 2009-02-18 | 2010-08-19 | Google Inc. | Identifying Object Using Generative Model |
US8296257B1 (en) * | 2009-04-08 | 2012-10-23 | Google Inc. | Comparing models |
US8060512B2 (en) * | 2009-06-05 | 2011-11-15 | Xerox Corporation | Hybrid tensor-based cluster analysis |
DE102009031872A1 (en) | 2009-07-06 | 2011-01-13 | Siemens Aktiengesellschaft | Method and device for automatically searching for documents in a data memory |
US8326820B2 (en) | 2009-09-30 | 2012-12-04 | Microsoft Corporation | Long-query retrieval |
US8229959B1 (en) | 2009-11-11 | 2012-07-24 | Google Inc. | Sharable search result labels |
US9152708B1 (en) | 2009-12-14 | 2015-10-06 | Google Inc. | Target-video specific co-watched video clusters |
US8402032B1 (en) | 2010-03-25 | 2013-03-19 | Google Inc. | Generating context-based spell corrections of entity names |
CN102236664B (en) * | 2010-04-28 | 2016-04-13 | 百度在线网络技术（北京）有限公司 | Based on the normalized searching system of semanteme, search method and information processing method |
US8161073B2 (en) | 2010-05-05 | 2012-04-17 | Holovisions, LLC | Context-driven search |
AU2010202901B2 (en) * | 2010-07-08 | 2016-04-14 | Patent Analytics Holding Pty Ltd | A system, method and computer program for preparing data for analysis |
JP5403696B2 (en) * | 2010-10-12 | 2014-01-29 | 株式会社Ｎｅｃ情報システムズ | Language model generation apparatus, method and program thereof |
US8751496B2 (en) | 2010-11-16 | 2014-06-10 | International Business Machines Corporation | Systems and methods for phrase clustering |
US9026479B1 (en) | 2011-02-02 | 2015-05-05 | Google Inc. | Predicting user interests |
US8869208B2 (en) * | 2011-10-30 | 2014-10-21 | Google Inc. | Computing similarity between media programs |
US8997008B2 (en) | 2012-07-17 | 2015-03-31 | Pelicans Networks Ltd. | System and method for searching through a graphic user interface |
US9245024B1 (en) * | 2013-01-18 | 2016-01-26 | Google Inc. | Contextual-based serving of content segments in a video delivery system |
US9542391B1 (en) | 2013-11-11 | 2017-01-10 | Amazon Technologies, Inc. | Processing service requests for non-transactional databases |
US10540404B1 (en) * | 2014-02-07 | 2020-01-21 | Amazon Technologies, Inc. | Forming a document collection in a document management and collaboration system |
US10599753B1 (en) | 2013-11-11 | 2020-03-24 | Amazon Technologies, Inc. | Document version control in collaborative environment |
US11336648B2 (en) | 2013-11-11 | 2022-05-17 | Amazon Technologies, Inc. | Document management and collaboration system |
US9652554B2 (en) * | 2013-12-26 | 2017-05-16 | Facebook, Inc. | Systems and methods for adding users to a networked computer system |
FR3016459A1 (en) * | 2014-01-15 | 2015-07-17 | Intema Solutions Inc | |
CN103810266B (en) * | 2014-01-27 | 2017-04-05 | 中国电子科技集团公司第十研究所 | Semantic network target recognition sentences card method |
US10691877B1 (en) | 2014-02-07 | 2020-06-23 | Amazon Technologies, Inc. | Homogenous insertion of interactions into documents |
US20170109641A1 (en) * | 2014-03-25 | 2017-04-20 | Hitachi, Ltd. | Probabilistic inference system |
US9811931B2 (en) | 2014-06-02 | 2017-11-07 | Business Objects Software Limited | Recommendations for creation of visualizations |
US9807073B1 (en) | 2014-09-29 | 2017-10-31 | Amazon Technologies, Inc. | Access to documents in a document management and collaboration system |
US9928232B2 (en) | 2015-02-27 | 2018-03-27 | Microsoft Technology Licensing, Llc | Topically aware word suggestions |
CN104881400B (en) * | 2015-05-19 | 2018-01-19 | 上海交通大学 | Semantic dependency computational methods based on associative network |
US9684842B2 (en) | 2015-10-29 | 2017-06-20 | The Nielsen Company (Us), Llc | Methods and apparatus to extract text from imaged documents |
EP3398091B1 (en) * | 2016-02-19 | 2022-05-11 | Huawei Technologies Co., Ltd. | System and method for unified access control on federated database |
US10803245B2 (en) * | 2016-09-06 | 2020-10-13 | Microsoft Technology Licensing, Llc | Compiling documents into a timeline per event |
JP6751064B2 (en) * | 2017-09-20 | 2020-09-02 | 株式会社東芝 | Data search system, data search method, and program |
JP6652986B2 (en) * | 2018-05-02 | 2020-02-26 | 株式会社Ｆｒｏｎｔｅｏ | Risk behavior prediction device, prediction model generation device, and risk behavior prediction program |
US11205179B1 (en) | 2019-04-26 | 2021-12-21 | Overstock.Com, Inc. | System, method, and program product for recognizing and rejecting fraudulent purchase attempts in e-commerce |
CN116821053B (en) * | 2023-08-30 | 2023-11-21 | 之江实验室 | Data reporting method, device, computer equipment and storage medium |
Citations (27)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5675819A (en) * | 1994-06-16 | 1997-10-07 | Xerox Corporation | Document information retrieval using global word co-occurrence patterns |
US5794050A (en) | 1995-01-04 | 1998-08-11 | Intelligent Text Processing, Inc. | Natural language understanding system |
US5815830A (en) | 1994-12-23 | 1998-09-29 | Anthony; Andre Charles | Automatic generation of hypertext links to multimedia topic objects |
US6078914A (en) | 1996-12-09 | 2000-06-20 | Open Text Corporation | Natural language meta-search system and method |
US6108662A (en) | 1998-05-08 | 2000-08-22 | Allen-Bradley Company, Llc | System method and article of manufacture for integrated enterprise-wide control |
US6137911A (en) * | 1997-06-16 | 2000-10-24 | The Dialog Corporation Plc | Test classification system and method |
US6161130A (en) * | 1998-06-23 | 2000-12-12 | Microsoft Corporation | Technique which utilizes a probabilistic classifier to detect "junk" e-mail by automatically updating a training and re-training the classifier based on the updated training set |
US20020087310A1 (en) | 2000-12-29 | 2002-07-04 | Lee Victor Wai Leung | Computer-implemented intelligent dialogue control method and system |
US20020120619A1 (en) | 1999-11-26 | 2002-08-29 | High Regard, Inc. | Automated categorization, placement, search and retrieval of user-contributed items |
US20030037041A1 (en) * | 1994-11-29 | 2003-02-20 | Pinpoint Incorporated | System for automatic determination of customized prices and promotions |
US20030088562A1 (en) * | 2000-12-28 | 2003-05-08 | Craig Dillon | System and method for obtaining keyword descriptions of records from a large database |
US6651054B1 (en) | 1999-10-30 | 2003-11-18 | International Business Machines Corporation | Method, system, and program for merging query search results |
US20040008308A1 (en) | 1998-03-13 | 2004-01-15 | Sharp Kabushiki Kaisha | Liquid crystal display device with improved field angles |
US6684205B1 (en) | 2000-10-18 | 2004-01-27 | International Business Machines Corporation | Clustering hypertext with applications to web searching |
US20040088308A1 (en) | 2002-08-16 | 2004-05-06 | Canon Kabushiki Kaisha | Information analysing apparatus |
US6751611B2 (en) | 2002-03-01 | 2004-06-15 | Paul Jeffrey Krupin | Method and system for creating improved search queries |
US6820093B2 (en) | 1996-07-30 | 2004-11-16 | Hyperphrase Technologies, Llc | Method for verifying record code prior to an action based on the code |
US6868525B1 (en) | 2000-02-01 | 2005-03-15 | Alberti Anemometer Llc | Computer graphic display visualization system and method |
US7013298B1 (en) | 1996-07-30 | 2006-03-14 | Hyperphrase Technologies, Llc | Method and system for automated data storage and retrieval |
US20070156677A1 (en) | 1999-07-21 | 2007-07-05 | Alberti Anemometer Llc | Database access system |
US20080004904A1 (en) | 2006-06-30 | 2008-01-03 | Tran Bao Q | Systems and methods for providing interoperability among healthcare devices |
US20090318779A1 (en) | 2006-05-24 | 2009-12-24 | Bao Tran | Mesh network stroke monitoring appliance |
US8024372B2 (en) | 2003-09-30 | 2011-09-20 | Google Inc. | Method and apparatus for learning a probabilistic generative model for text |
US8145712B2 (en) | 2003-09-24 | 2012-03-27 | Google Inc. | Methods and systems for developing an instant messaging network |
US8156100B2 (en) | 2001-03-02 | 2012-04-10 | Google Inc. | Methods and apparatus for employing usage statistics in document retrieval |
US8224964B1 (en) | 2004-06-30 | 2012-07-17 | Google Inc. | System and method of accessing a document efficiently through multi-tier web caching |
US8275790B2 (en) | 2004-06-30 | 2012-09-25 | Google Inc. | System and method of accessing a document efficiently through multi-tier web caching |
Family Cites Families (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP2001273293A (en) | 2000-03-23 | 2001-10-05 | Nippon Telegr & Teleph Corp <Ntt> | Method and device for estimating word and recording medium storing word estimation program |
-
2003
- 2003-09-30 US US10/676,571 patent/US7383258B2/en active Active
- 2003-10-03 WO PCT/US2003/031545 patent/WO2004031916A2/en active Application Filing
- 2003-10-03 JP JP2004541690A patent/JP4465274B2/en not_active Expired - Lifetime
- 2003-10-03 CN CNB2003801030451A patent/CN100504856C/en not_active Expired - Lifetime
- 2003-10-03 EP EP03774573A patent/EP1546932A4/en not_active Ceased
- 2003-10-03 CA CA2500914A patent/CA2500914C/en not_active Expired - Fee Related
- 2003-10-03 KR KR1020057005832A patent/KR101014895B1/en active IP Right Grant
-
2008
- 2008-06-02 US US12/131,637 patent/US8688720B1/en active Active
Patent Citations (31)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5675819A (en) * | 1994-06-16 | 1997-10-07 | Xerox Corporation | Document information retrieval using global word co-occurrence patterns |
US20030037041A1 (en) * | 1994-11-29 | 2003-02-20 | Pinpoint Incorporated | System for automatic determination of customized prices and promotions |
US5815830A (en) | 1994-12-23 | 1998-09-29 | Anthony; Andre Charles | Automatic generation of hypertext links to multimedia topic objects |
US5794050A (en) | 1995-01-04 | 1998-08-11 | Intelligent Text Processing, Inc. | Natural language understanding system |
US7013298B1 (en) | 1996-07-30 | 2006-03-14 | Hyperphrase Technologies, Llc | Method and system for automated data storage and retrieval |
US6820093B2 (en) | 1996-07-30 | 2004-11-16 | Hyperphrase Technologies, Llc | Method for verifying record code prior to an action based on the code |
US6078914A (en) | 1996-12-09 | 2000-06-20 | Open Text Corporation | Natural language meta-search system and method |
US6137911A (en) * | 1997-06-16 | 2000-10-24 | The Dialog Corporation Plc | Test classification system and method |
US20040008308A1 (en) | 1998-03-13 | 2004-01-15 | Sharp Kabushiki Kaisha | Liquid crystal display device with improved field angles |
US6108662A (en) | 1998-05-08 | 2000-08-22 | Allen-Bradley Company, Llc | System method and article of manufacture for integrated enterprise-wide control |
US6161130A (en) * | 1998-06-23 | 2000-12-12 | Microsoft Corporation | Technique which utilizes a probabilistic classifier to detect "junk" e-mail by automatically updating a training and re-training the classifier based on the updated training set |
US20070156677A1 (en) | 1999-07-21 | 2007-07-05 | Alberti Anemometer Llc | Database access system |
US6651054B1 (en) | 1999-10-30 | 2003-11-18 | International Business Machines Corporation | Method, system, and program for merging query search results |
US20020120619A1 (en) | 1999-11-26 | 2002-08-29 | High Regard, Inc. | Automated categorization, placement, search and retrieval of user-contributed items |
US6868525B1 (en) | 2000-02-01 | 2005-03-15 | Alberti Anemometer Llc | Computer graphic display visualization system and method |
US6684205B1 (en) | 2000-10-18 | 2004-01-27 | International Business Machines Corporation | Clustering hypertext with applications to web searching |
US20030088562A1 (en) * | 2000-12-28 | 2003-05-08 | Craig Dillon | System and method for obtaining keyword descriptions of records from a large database |
US7363308B2 (en) | 2000-12-28 | 2008-04-22 | Fair Isaac Corporation | System and method for obtaining keyword descriptions of records from a large database |
US20020087310A1 (en) | 2000-12-29 | 2002-07-04 | Lee Victor Wai Leung | Computer-implemented intelligent dialogue control method and system |
US8156100B2 (en) | 2001-03-02 | 2012-04-10 | Google Inc. | Methods and apparatus for employing usage statistics in document retrieval |
US8352452B2 (en) | 2001-03-02 | 2013-01-08 | Google Inc. | Methods and apparatus for employing usage statistics in document retrieval |
US6751611B2 (en) | 2002-03-01 | 2004-06-15 | Paul Jeffrey Krupin | Method and system for creating improved search queries |
US20040088308A1 (en) | 2002-08-16 | 2004-05-06 | Canon Kabushiki Kaisha | Information analysing apparatus |
US8412747B1 (en) | 2002-10-03 | 2013-04-02 | Google Inc. | Method and apparatus for learning a probabilistic generative model for text |
US8145712B2 (en) | 2003-09-24 | 2012-03-27 | Google Inc. | Methods and systems for developing an instant messaging network |
US8285793B1 (en) | 2003-09-24 | 2012-10-09 | Google Inc. | Methods and systems for developing an instant messaging network |
US8024372B2 (en) | 2003-09-30 | 2011-09-20 | Google Inc. | Method and apparatus for learning a probabilistic generative model for text |
US8224964B1 (en) | 2004-06-30 | 2012-07-17 | Google Inc. | System and method of accessing a document efficiently through multi-tier web caching |
US8275790B2 (en) | 2004-06-30 | 2012-09-25 | Google Inc. | System and method of accessing a document efficiently through multi-tier web caching |
US20090318779A1 (en) | 2006-05-24 | 2009-12-24 | Bao Tran | Mesh network stroke monitoring appliance |
US20080004904A1 (en) | 2006-06-30 | 2008-01-03 | Tran Bao Q | Systems and methods for providing interoperability among healthcare devices |
Non-Patent Citations (26)
Title |
---|
Geiger, Dan et al., "Asymptotic Model Selection for Directed Networks with Hidden Variables", May 1996, Technical Report MSR-TR-96-07, Microsoft Research, Advanced Technology Division. |
Graham, Ian S., "The HTML Sourcebook", John Wiley & Sons, 1995 (ISBN 0471118494) (pgs. on "partial URLs" and "BASE element", e.g. pp. 22-27; 87-88; 167-168). |
Heckerman, David et al., "Learning Bayesian Networks: The Combination of Knowledge and Statistical Data", Microsoft Research, Advanced Technology Division. |
Jordan, Michael I. et al., "Hidden Markov Decision Trees", 1997, Center for Biological and Computational Learning Massachusetts Institute of Technology and Department of Computer Science, University of Toronto Canada. |
Meila, Marina et al., "Estimating Dependency Structure as a Hidden Variable", Massachusetts Institute of Technology, A.I. Memo No. 1648, C.B.C.L. Memo No. 165, Sep. 1998. |
Mills, Tim et al., "Providing World Wide Access to Historical Sources", Computer Networks and ISDN Systems, vol. 29, Nos. 8-13, Sep. 1997, pp. 1317-1325. |
Myka, Andreas, et al., "Automatic Hypertext Conversion of Paper Document Collections" (ch.6), Digital Libraries Workshop DL '94, Newark NJ, May 1994 (selected papers), pp. 65-90. |
Notice of Allowance for related case (U.S. Appl. No. 10/676,571), mailed from USPTO on Sep. 30, 2003. |
Notice of Allowance for related case (U.S. Appl. No. 10/788,837), mailed from USPTO on Feb. 26, 2004. |
Notice of Allowance for related U.S. Appl. No. 10/676,571, mailed from USPTO on Dec. 18, 2006, 4 pages. |
Notice of Allowance for related U.S. Appl. No. 10/676,571, mailed from USPTO on Sep. 6, 2007, 5 pages. |
Notice of Allowance for related U.S. Appl. No. 10/788,837, mailed from USPTO on Jan. 16, 2007, 7 pages. |
Notice of Allowance for related U.S. Appl. No. 10/788,837, mailed from USPTO on Oct. 23, 2006, 8 pages. |
Notice of Allowance for related U.S. Appl. No. 11/796,383, mailed from USPTO on Feb. 4, 2011, 4 pages. |
Notice of Allowance for related U.S. Appl. No. 11/796,383, mailed from USPTO on May 16, 2011, 5 pages. |
Notice of Allowance for related U.S. Appl. No. 13/237,861, mailed from USPTO on Aug. 28, 2012, 9 pages. |
Notice of Allowance for related U.S. Appl. No. 13/237,861, mailed from USPTO on Dec. 7, 2012, 7 pages. |
Notice of Allowance for related U.S. Appl. No. 13/733,087, mailed from USPTO on Sep. 11, 2013, 22 pages. |
Office Action for related case (U.S. Appl. No. 10/676,571), mailed from USPTO on Sep. 30, 2003. |
Office Action for related case (U.S. Appl. No. 10/788,837), mailed from USPTO on Feb. 26, 2004. |
Office Action for related U.S. App. No. 13/237,861, mailed from USPTO on Jan. 19, 2012, 9 pages. |
Office Action for related U.S. Appl. No. 10/676,571, mailed from USPTO on Aug. 23, 2006, 12 pages. |
Office Action for related U.S. Appl. No. 10/676,571, mailed from USPTO on Jun. 6, 2006, 12 pages. |
Office Action for related U.S. Appl. No. 10/788,837, mailed from USPTO on Aug. 4, 2004, 10 pages. |
Office Action for related U.S. Appl. No. 11/796,383, mailed from USPTO on Sep. 20, 2010, 17 pages. |
Thistlewaite, Paul, "Automatic Construction and Management of Large Open Webs", Information Processing and Management: an International Journal, vol. 33, Issue 2, Mar. 1997, pp. 161-173 (ISSN 0306-4573). |
Cited By (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20120308124A1 (en) * | 2011-06-02 | 2012-12-06 | Kriegman-Belhumeur Vision Technologies, Llc | Method and System For Localizing Parts of an Object in an Image For Computer Vision Applications |
US8811726B2 (en) * | 2011-06-02 | 2014-08-19 | Kriegman-Belhumeur Vision Technologies, Llc | Method and system for localizing parts of an object in an image for computer vision applications |
US20140214735A1 (en) * | 2013-01-28 | 2014-07-31 | Pagebites, Inc. | Method for an optimizing predictive model using gradient descent and conjugate residuals |
US9390383B2 (en) * | 2013-01-28 | 2016-07-12 | Georges Harik | Method for an optimizing predictive model using gradient descent and conjugate residuals |
US9600777B2 (en) | 2013-03-11 | 2017-03-21 | Georges Harik | Configuring and optimizing computational structure for a machine learning application using a tuple of vectors |
WO2018087190A1 (en) | 2016-11-11 | 2018-05-17 | Octimine Technologies Gmbh | Apparatus and method for semantic search |
US10862834B2 (en) * | 2016-11-14 | 2020-12-08 | Tencent Technology (Shenzhen) Company Limited | Method and apparatus for generating descriptive texts corresponding to chat message images via a condition probability model |
Also Published As
Publication number | Publication date |
---|---|
JP4465274B2 (en) | 2010-05-19 |
AU2003282688A1 (en) | 2004-04-23 |
CA2500914C (en) | 2010-12-21 |
WO2004031916A2 (en) | 2004-04-15 |
CN1711536A (en) | 2005-12-21 |
KR20050065578A (en) | 2005-06-29 |
EP1546932A2 (en) | 2005-06-29 |
EP1546932A4 (en) | 2008-04-09 |
CA2500914A1 (en) | 2004-04-15 |
US7383258B2 (en) | 2008-06-03 |
KR101014895B1 (en) | 2011-02-15 |
US20040068697A1 (en) | 2004-04-08 |
WO2004031916A3 (en) | 2004-12-23 |
JP2006502480A (en) | 2006-01-19 |
CN100504856C (en) | 2009-06-24 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8688720B1 (en) | Method and apparatus for characterizing documents based on clusters of related words | |
US8412747B1 (en) | Method and apparatus for learning a probabilistic generative model for text | |
US7877371B1 (en) | Selectively deleting clusters of conceptually related words from a generative model for text | |
US6615111B2 (en) | Methods for automatically focusing the attention of a virtual robot interacting with users | |
Orwant | Doppelgänger goes to school: Machine learning for user modeling | |
US20240070458A1 (en) | System to detect, assess and counter disinformation | |
Liu | Python machine learning by example | |
Hayashi et al. | Latent relation language models | |
US9418335B1 (en) | Method and apparatus for selecting links to include in a probabilistic generative model for text | |
Lamontagne et al. | Textual reuse for email response | |
Çetinkaya et al. | Developing a Twitter bot that can join a discussion using state-of-the-art architectures | |
Alkholy et al. | Question answering systems: analysis and survey | |
Lakhanpal et al. | Discover trending domains using fusion of supervised machine learning with natural language processing | |
US20210034809A1 (en) | Predictive model for ranking argument convincingness of text passages | |
US9507858B1 (en) | Selectively merging clusters of conceptually related words in a generative model for text | |
AU2003282688B2 (en) | Method and apparatus for characterizing documents based on clusters of related words | |
Xu | Context-aware Decoding Reduces Hallucination in Query-focused Summarization | |
Nikolaou | Cost-sensitive boosting: A unified approach | |
Swanson | Enabling open domain interactive storytelling using a data-driven case-based approach | |
Patanaik | Open Domain Factoid Question Answering System | |
Pillai et al. | ChatGPT and Ensemble Learning for Mobile Text Misinformation Identification | |
Mustar | Modeling User-Machine Interactions During The Information Retrieval Process | |
Barlybayev et al. | Development of system for generating questions, answers, distractors using transformers. | |
Jing | Detecting Rumors in Social Media Using Information Propagation Structures | |
Banerjee | Detecting ambiguity in conversational systems |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE, INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:HARIK, GEORGES;SHAZEER, NOAM M.;REEL/FRAME:029457/0124Effective date: 20050513 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
CC | Certificate of correction | ||
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044101/0299Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551)Year of fee payment: 4 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |