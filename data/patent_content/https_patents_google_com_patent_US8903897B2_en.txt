US8903897B2 - System and method for providing interactive content to non-native application environments - Google Patents
System and method for providing interactive content to non-native application environments Download PDFInfo
- Publication number
- US8903897B2 US8903897B2 US13/543,720 US201213543720A US8903897B2 US 8903897 B2 US8903897 B2 US 8903897B2 US 201213543720 A US201213543720 A US 201213543720A US 8903897 B2 US8903897 B2 US 8903897B2
- Authority
- US
- United States
- Prior art keywords
- application
- client device
- server
- video
- software application
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/451—Execution arrangements for user interfaces
- G06F9/452—Remote windowing, e.g. X-Window System, desktop virtualisation
-
- G06F9/4445—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/957—Browsing optimisation, e.g. caching or content distillation
-
- G06F17/30899—
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L65/00—Network arrangements, protocols or services for supporting real-time applications in data packet communication
- H04L65/10—Architectures or entities
- H04L65/1059—End-user terminal functionalities specially adapted for real-time communication
-
- H04L65/4084—
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L65/00—Network arrangements, protocols or services for supporting real-time applications in data packet communication
- H04L65/60—Network streaming of media packets
- H04L65/61—Network streaming of media packets for supporting one-way streaming services, e.g. Internet radio
- H04L65/612—Network streaming of media packets for supporting one-way streaming services, e.g. Internet radio for unicast
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/34—Network arrangements or protocols for supporting network services or applications involving the movement of software or configuration parameters
Definitions
- the present invention relates generally to providing content from applications originally built for one native application environment, to a different, non-native application environment, and more particularly, to a system and method that delivers such content over a data communications network so as to achieve a highly interactive and responsive user-experience.
- Computer applications are generally built to run on a particular computing platform or application environment. For example applications built for a PC are often built to run in and on a Microsoft Windows application environment. Applications that are built using Flash's Actionscript are built to run in a Flash application environment. Mobile applications for Android phones are built to run in an Android OS platform, whereas mobile applications built for Apple's iPhone are built to run in Apple's iOS platform.
- Emulation software provides a simulated environment of the original environment on the new platform.
- the original environment to be emulated may be too complex to be implemented within the technical constraints of the mobile platform.
- constraints in terms of memory or processing speed or external storage may not allow the application to run properly or at all on the mobile devices.
- Other business impediments imposed by the developer of the mobile device environment may also prohibit emulation.
- Embodiments of the present invention are directed to a system and method for delivering interactive content to client devices.
- the system includes a plurality of host devices, a client device, and a server coupled to the plurality of host devices and the client device over a data communications network.
- Each host device hosts a software application configured to run on an application environment provided by the host device.
- the client device is configured to receive interactive content generated by a particular software application configured to run on an application environment different than an application environment provided by the client device.
- the server is configured to receive from the client device identification of the particular software application.
- the server identifies one of the plurality of host devices hosting the particular software application and invokes the particular software application on the application environment provided by the identified host device.
- the server periodically captures and encodes a screen display output generated by the particular software application into a plurality of video frames.
- the server further streams the plurality of video frames over the data communications network during a streaming session.
- the server receives interaction data from the client device in response to the streamed video frames and converts the interaction data to a corresponding input catered to the particular software application.
- the server provides the input to the particular software application, and the software application is configured to generate a second screen output in response.
- the server is configured to identify a configuration file associated with the particular software application, and transmit the configuration file to the client device.
- the client device is configured to map a user input to a particular command based on the configuration file.
- the server receives the particular command from the client device as the interaction data.
- the client device is a mobile phone, electronic tablet, or set top TV box.
- the software application may be a Flash-based application, Windows application, Java-based application, or Linux application.
- the second screen is output in real-time with the providing of the interaction data by a user of the client device.
- the server is configured to monitor condition of the data communications network during the streaming session, and dynamically adjust a visual quality of one or more of the plurality of video frames during the streaming session.
- the frame rate, video bit rate, and/or maximum frame size of a video frame may be adjusted dynamically during the streaming session.
- the maximum frame size is calculated based on a dynamically determined frame rate and video bit rate.
- the monitoring of the condition of the data communications network includes monitoring congestion of the network.
- the application environment provided by the host device provides an application programming interface not available to the application environment provided by the client device.
- FIG. 1 is an overview block diagram of a system to deliver applications to non-native client platforms according to one embodiment of the present invention
- FIG. 2 is a more detailed block diagram of various modules hosted by various computing device of FIG. 1 according to one embodiment of the present invention
- FIGS. 3A-3B are flow diagrams of a process for providing interactive content generated by an application configured to run in one application environment, to a client device providing a different application environment, according to one embodiment of the invention.
- FIG. 4 is a flow diagram of a quality of service adaptation algorithm according to one embodiment of the invention.
- Embodiments of the present invention provide a system and method for delivering interactive content generated by software applications configured to run on a native application environment, to clients providing non-native application environments, over a data communications network.
- Such applications may be, for example, gaming applications, and the clients may be mobile phones.
- the non-native application environments provided by the client devices do not provide the same APIs for running software applications that are provided by the native application environments in which the software applications are intended to run.
- embodiments of the present invention are directed to providing the interactive content to non-native application environments over the data communications network, a person of skill in the art should recognize that the interactive content may also be provided to native platforms.
- the method for delivering the interactive content includes:
- FIG. 1 is an overview block diagram of a system for efficiently delivering interactive content to non-native client devices and platforms according to one embodiment of the present invention.
- the system in FIG. 1 includes a mobile application delivery system environment 110 , a mobile device environment 118 , and a data communications network 116 interconnecting the two environments.
- the data communications network 116 may be a local area network, private wide area network, or the public Internet, accessible via any wired or wireless technology conventional in the art.
- the mobile application delivery system environment 110 is a cloud computing web server environment.
- the mobile application delivery system environment 110 includes a set of delivery servers (also referred to as host devices) 112 and a monitoring server 114 .
- each of the delivery servers host a software application on a native application environment.
- the native application environment provides, at a minimum, the same APIs as the APIs available on the original application environment for which the software application was specifically developed to run.
- the monitoring server 114 takes requests to start a new application and selects a specific server from a pool of delivery servers 112 that host the application.
- the delivery servers 112 and/or monitoring server 114 are deployed and run in different geographic locations spread out from one another.
- the software components that reside in the client devices 124 send ICMP echo requests to a load balancer in a monitoring server 114 in a different geographic location, measure the roundtrip time, and choose the delivery server with lowest latency.
- the mobile device environment 118 includes standard carrier 3G/4G networks 120 , wireless routers 122 , and various client devices 124 - 130 (collectively referenced as 124 ).
- the client devices may be mobile phones, electronic tablets, laptops, TV set top boxes, and the like.
- the environment 118 is described as a mobile environment, a person of skill in the art should recognize that the environment may include other environments, as such, for example, wired environments that include wired devices.
- Each of the delivery servers 112 , monitoring server 114 , and client devices 124 includes a central processing unit (CPU) for executing software instructions and interacting with other system components for performing the functions described herein.
- the servers and client devices further include a mass storage device such as, for example, a hard disk drive or drive array, for storing various applications and data used for implementing the system.
- the server and client devices further include an addressable memory for storing software instructions to be executed by the CPU.
- the server and client devices further include various input and output units conventional in the art.
- each device may have an input unit such as, for example, a keyboard, keypad, joystick, microphone, and/or display screens with pressure sensitive (touch screen) technology.
- Each device may also have an output unit such as, for example, speakers, display screens, and the like.
- the server and client devices may further include wired or wireless data communication links for accessing the data communications network 116 .
- FIG. 2 is an overview block diagram of various modules hosted by the monitoring servers 114 , delivery servers 112 , and mobile devices 124 according to one embodiment of the present invention.
- the various modules are implemented via computer program instructions which are stored in memory for executing by the CPU of the corresponding server.
- a person of skill in the art should recognize, however, that all or a portion of the various modules may be implemented via firmware, hardware, or a combination of software, firmware, and/or hardware.
- the modules that reside in the monitoring servers 114 include, but are not limited to, a load balancer 216 , a configurator 214 module, an autoscaler 212 module, and an analytics 210 module.
- the load balancer 216 is configured to find a delivery server 112 that can support an incoming connection request to start an application.
- the load balancer is configured to select a machine and process instance for each new application request. Once the load balancer selects a machine instance, it also selects the instance of a control server, provisioner, and application environment modules that will be used for a particular instance of the application.
- the load balancer 216 is configured to maximize the number of users on each delivery server 112 . This allows more delivery servers 112 to become idle, i.e. without any active connections, so the autoscaler 212 can shut them down, potentially saving on cost.
- the load balancer 216 uses a connection monitor 238 on each delivery server 112 to find an available server.
- the connection monitor 238 may be implemented as a Ruby process that polls every second for a number of active connections on its delivery server 112 . This includes polling for the number of active application environment processes, such as Firefox processes, Wine processes, or custom processes.
- the connection monitor 238 sends the collected data to an operations database 240 .
- the operations database 240 is high performance database such as, for example, a Mongodb database, configured to handle a high amount of inserts/updates per second as well as quickly respond to queries.
- the connection monitor 238 sends its hostname, the number of open connections, and the number of available connections (the maximum available connections minus the open connections on a machine).
- the load balancer 216 When a request comes in to the load balancer 216 , it queries the operations database 240 to find a delivery server 112 that has connections available. Since there is a lag between when a client has been allocated to a particular delivery server 112 , and when the client connects and the connections monitor 238 records the connection, the load balancer 216 cannot entirely trust the data coming from the operations database 240 . For example, if a delivery server 112 is near capacity but has one connection available, and the load balancer 216 receives several requests in a short time frame, it may forward all requests to the same delivery server 112 before any client connects and increases the connection count.
- the load balancer 216 is configured to randomly select from a pool of candidate delivery servers 112 so requests do not always go to the same delivery server 112 .
- the load balancer 216 is configured to keep track of the last time it sent a request to a particular delivery server 112 so as to not send the same server multiple requests in a short time period. If there are no delivery servers 112 with available connections, the load balancer 216 is configured to try a preset number of times (e.g. three times) to find one before simply allocating the connection to a random server. This helps ensure that every user always receives a connection, even though his or her experience may be slightly degraded by the excess load on the server.
- the load balancer 216 is further configured to automatically remove problematic delivery servers 112 by checking the responses from the servers. If the response is an error, the server is queued for deletion. Similarly, if the response takes longer than a threshold time period or the delivery server 112 is unreachable, it is queued for deletion.
- the autoscaler 212 is a module configured to manage the delivery servers 112 in order to accomplish various tasks.
- the autoscaler may be configured to make sure enough delivery servers 112 are available to serve current users as well as users that may be connecting in the near future.
- the autoscaler may also be configured to delete unneeded delivery servers 112 so that there is not excess capacity, thus potentially reducing costs, such as, for example, in an embodiment that uses cloud servers.
- the autoscaler 212 regularly polls the operations database 240 and checks the number of available connections. If the number of available connections is too low, the autoscaler 212 starts enough delivery servers 112 to a configuration specified target number. If the number of available connections is too high, the autoscaler 212 queues the oldest delivery servers 112 for deletion until the number of available connections is equal to the required buffer size. Queuing the oldest servers for deletion helps reduce the number of errors in the system, as typically the oldest servers are prone to errors. A delivery server 112 that is queued for deletion is not immediately deleted as it may have users currently active. However, a server queued for deletion does not receive new connections. The autoscaler 212 regularly checks if any deleted delivery servers 112 are idle and deletes them when they are.
- the autoscaler 212 is implemented as a set of Ruby processes.
- the autoscaler 212 may also interact with the cloud providers, such as Blue Box Group and Amazon Web Services, for creating and deleting servers.
- the analytics module 210 keeps statistics on system operations.
- Analytic data is stored in the analytics database 242 .
- the analytics database 242 may be implemented as a high performance database such as, for example, a Mongodb database.
- the load balancer 216 stores information about user requests in the analytics database 242 .
- the control server 220 updates records in the analytics database 242 when a user of a client device logs out so that total session time can be calculated.
- the analytics module 210 is designed to take analytic data offline for further processing.
- statistics pertaining to application requests and session distribution are available to be queried from the monitoring server 114 .
- the configurator 214 is a module configured to select and return a configuration file when a user selects a software application or game (collectively referred to as an application) on the client.
- the configuration files allow customization on the client on a per application basis for elements like mapping user gestures or taps to the original inputs of the application (e.g. mouse down, mouse click events, and the like).
- the configuration file also supports customization of “player skins” in order to customize the look and feel of the display on the client device.
- configuration files store information on how the player 236 on the client device 124 should interact with the system, request video frame rate parameters, load content, and the like.
- the player 236 on the client device 124 consumes player configuration files. These files primarily have the URLs of services for retrieval by the player 236 . For example a list of apps/games to show on the player 236 ; user ratings of apps/games, update purchase state in the case of a purchase or trial expiration, and the like.
- Some parameters may be used to distinguish between different client devices, such as, for example, between an electronic tablet and a mobile phone.
- Application or game specific configuration files are used when a particular application or game is being started.
- This configuration file has all application or game specific information, like the URL to load, the product ID for payment, the screen dimensions it will run at, and parameters to distinguish between the various client devices (e.g. between iPad and an iPhone).
- configuration files are stored as JSON files.
- the configuration files allow the player 236 to be as general as possible, and thus allows changes to content or behavior on the fly via changes of the configuration files from the delivery server 112
- the provisioner 218 is a module on the delivery servers 112 which sets up a user's account on a particular delivery server.
- each unique user and its corresponding connection runs in its own Linux user account on the delivery server 112 . This allows the sandboxing of users from each other. It also allows the creation of a secure system, as the user accounts have stripped permissions and are only allowed access to files and processes that are required for the selected application.
- the provisioner 218 creates the user account and adds the user to the required group.
- the user account set up by the provisioner 218 is determined based on the requested application.
- the skeleton directory has the files required for the particular application that is selected, for example the correct Mozilla file for a Flash application or the correct executable for a Wine application.
- the provisioner 218 also creates files in the user's directory to set parameters for the user. Such parameters may include, for example, the audio port to be used, Facebook credentials needed, and the like.
- the provisioner 218 is configured to set up some of the services the user may require. For instance, in one embodiment of the present invention, the provisioner 218 creates a puleaudio sink for the user needed to stream audio to the client device.
- the application environment 222 is a computer environment in which an application executes.
- the application environment 222 is specific to the type of application selected by the client device, and a computing platform (or virtualized computing platform based on a different underlying platform) of the delivery servers 112 .
- an application environment includes, but is not limited to frameworks, libraries, APIs, and services for the runtime execution of programs developed for a particular computing platform.
- the application environment may also provide a virtualization layer to provide a different or isolated computing platform.
- the application environment 222 may be a Firefox browser or other similar browser configured to execute the Flash-based application.
- the application environment 222 is Wine or other similar environment which allows computer programs written for Microsoft Windows to run on Unix-like operating systems.
- the application environment 222 is vglrun. Vglrun executes the application with VirtualGL, which provides OpenGL to Xvnc.
- native Unix or Java applications are selected, they are simply run as native applications and the application environment 222 is Unix or Linux.
- a Greasemonkey extension and scripts are configured to be used to achieve actions like scrolling, toggling the visibility of the keyboard, URL logging, and the like.
- the Greasemonkey extension is used to add or edit an HTML DOM that is loaded.
- the extension associates a script, written in JavaScript, to a URL, and the extension is triggered only for the associated URL.
- the URLs are filtered through regular expressions.
- the Greasemonkey scripts trigger after the associated HTML page has been loaded, which serves as an indication that the desired content is loaded, and signals the control server 220 to send a message to the client device 124 to remove the loading screen.
- the Greasemonkey scripts also attach event handlers to input elements on the HTML page that instruct the control server 220 to show or hide the keyboard.
- the Greasemonkey scripts are also used to weed out unwanted elements like advertisements and therefore only have the desired content appear on a virtual screen 224 for being streamed to the client devices 124 - 130 .
- the Greasemonkey scripts are served up for use remotely through a web service.
- the Greasemonkey script queries a web service passing in the current URL and the content type as parameters.
- the web service looks up a configuration file that in one embodiment of the present invention is encoded in JSON.
- the web server then serves the corresponding script back to the Greasemonkey script for it to execute.
- the configuration file has information of the URLs against which a particular script is to be triggered.
- the configuration file also has information of a list of excluded URLs and content types for which scripts are not to be triggered. All the URLs are filtered through regular expressions.
- a customized Redirector extension is also used.
- the Redirector extension creates a socket to hardcoded port on the control server 220 .
- the customized extension performs actions such as page scrolling, page refreshing, stopping page loads, blocking URLs, and the like.
- the customized extension is used to perform page commands forwarded from the client device 124 .
- the player 236 on the client device 124 in response to a user action sends commands such as scroll page, refresh page, stop page, load URL, and the like, to the control server 220 on the delivery server 112 , the control server 220 relays these commands to the customized extension.
- the customized extension in turn parses the commands and performs the appropriate action as a script on the Firefox browser.
- the customized extension can also be used to block URLs.
- the Firefox browser asks the customized extension if it should load a URL, and depending on the category of the URL, the request is served or cancelled.
- the list of blocked URLs comes from the configuration file of the content that has been currently loaded.
- the URL request is filtered through regular expressions. There are five categories of URLs:
- Pop UP listed URLs when such a URL is requested to load, the extension cancels the request and signals the client device 124 , via the control server 220 and the player 236 on the client device, to show a message to the user informing them that the pop up was blocked.
- Ad URLs when a URL does not match any of the above URLs, the extension cancels the request and signals the client device 124 , via the control server 220 and the player 236 on the client device, to show the URL loaded in a web view inside of the player.
- the customized extension for the Firefox browser application environment can also signal the client appropriately with a message to purchase an application after a trial period is over.
- the customized extension queries a service for the payment information of the user for the content loaded. If the content is paid for, the user is given an uninterrupted browsing session. If the user has not yet paid for the content, he/she is considered a trial user.
- the extension signals the client device 124 , via the control server 220 and the player 236 on the mobile device, to display a message that the trial period is over and provide an option to buy the content. Any further requests are cancelled until the user purchases the content.
- this payment setup is used for subscription payment systems.
- the application environment 222 module is a virtualization/emulation software and Android OS.
- the virtualization/emulation software provides an environment for the Android OS to run.
- a custom launcher is used to control the launching of applications.
- a launcher is a main view of the OS and is responsible for starting other applications.
- the default launcher of Android is a home screen that a user usually sees.
- the custom launcher enables launching into the application directly when a client connects, and also prevents the application from exiting when user presses the back button.
- the data specific to mobile devices 124 are also captured in the mobile device and sent through the control channel to the control server 220 . This data may include the device orientation, GPS location, gyro/accelerometer data, and the like.
- control server 220 is a module that authenticates a client based on input username and password.
- the control server 220 is also configured to receive input commands from the user via the player 236 on the mobile device 124 and forward these commands to the application environment 222 for the current application.
- the control server 220 is further configured to forward commands and messages from the application environment 222 to the player 236 on the client device 124 to control the look of the screen on the client device, such as for example, to display notifications that an application has launched, that a pop-up should be displayed, and the like.
- authentication is done using PAM authentication.
- the provisioner 218 creates the usernames and passwords for each user. Once the control server 220 has authenticated the user, it knows what username to use for subsequent operations.
- the control server 220 executes two processes.
- the first process is executed by the virtual screen 224 module.
- the virtual screen 224 module is an Xvnc session which provides a X11 display for the application the user wants to run.
- Xvnc is the Unix VNC (Virtual Network Computing) server, which is based on a standard X server.
- applications can display themselves on Xvnc as if it were a normal X display, but the applications are configured to actually appear on any connected VNC viewers rather than on a physical screen.
- the control server 220 may also execute a bash script that sets any preferences needed for the application selected, such as Firefox preferences.
- the script starts the audio and video streamers, the window manager, and the application the user requested.
- the second process or environment the control server 220 starts is the application environment 222 for the selected application.
- the control server 220 maintains a description of which specific application environments are used based on the type of application selected and the environment of the delivery server 112 .
- the video capture and streamer 226 module is a module that captures video frames output by the virtual screen 224 module. After the frames are captured, the video capture and streamer 226 module subsequently encodes and streams the video to the mobile device 124 .
- the video capture and streamer 226 encodes in near real-time without a large buffer of frames and streams the encoded frames to the mobile device 124 , where the video decoder 230 on the mobile device 124 decodes in near real-time, also without a large buffer of frames, thus achieving a highly responsive video display.
- the video streamer and capture 226 module connects to the control server 220 .
- the control server 220 sends the video capture and streamer 226 module the parameters it should use, including frame rate, bit rate, and a video port to stream the video to the mobile device 124 .
- the connection between the control server 220 and the video capture and streamer 226 is maintained throughout the lifetime of the connection from the client device 124 , and can be used for quality of service adjustments of the video stream.
- video capturing and encoding parameters are selected in a way that the system fully utilizes the network bandwidth designated to the video stream to produce high-quality video while keeping the encoding complexity sufficiently low to minimize the encoding time required for each frame, as part of the low-latency design.
- the server encodes each video frame right after being captured, and the output from the encoder is immediately fed into the socket without excessive buffering or delay.
- the video decoder continuously parses the incoming video data from the socket. As soon as it collects all the data required to decode a video frame, the frame is decoded, resized if needed, converted to an appropriate color space, and displayed. Again, video data are decoded and displayed as soon as they are available and there is no excessive buffering to ensure minimal latency.
- the video capture and streamer 226 module consists of a set of scripts (e.g. Phython scripts) for capturing, encoding, and streaming video to the mobile device 124 .
- the script launches one or more video processing programs (e.g. programs implemeted using video processing libraries provided in FFMPEG) for the capturing, encoding, and streaming.
- the video capture and streamer 226 module captures the display output by the virtual screen 224 module. For example, if using FFMPEG, the x11grab function is invoked to capture the display from the Xvnc display. The video capture and streamer 226 then encodes (e.g. using FFMPEG together with x264) the video according to preset parameters. According to one embodiment, the various parameters are configured to provide low-latency operations to achieve real-time responsiveness to inputs provided by a user. The video capture and streamer 226 module captures the encoded output and streams the video to the mobile device 124 . The video stream connection to the mobile device 124 is maintained for the lifetime of the mobile device 124 client connection.
- the mobile device 124 decodes the video using the video decoder 124 module, which in one embodiment of the invention, uses the H.264 decoder from the avcodec library in FFMPEG.
- the resulting frames are displayed by the player 236 module on the client device 124 .
- the screen display may be done using a low-level API such as, for example, OpenGL ES (e.g. on iOS-based mobile devices), Surfaces (e.g. for Android-based mobile devices), and the like.
- the video is encoded by the video capture and streamer 226 module on the delivery server 112 into a byte stream (e.g. an H.264 Annex B byte-stream using FFMPEG and x264), and streamed to the client device 124 through a TCP socket.
- the video capturing and encoding is based on a video frame rate (in frames/sec or fps) and maximum video bit rate (in bits/sec or bps).
- the two parameters together determine a maximum frame size which identifies a maximum number of bits that the encoder can spend to encode a frame.
- the resulting visual quality of the frame is affected based on the maximum frame size that is selected.
- the video decoder 230 module parses the byte-stream into data units each corresponding to an encoded video frame and feeds them sequentially a decoder (e.g. H.264 decoder).
- a decoder e.g. H.264 decoder
- the video decoder 230 module is able to recognize the completion of an encoded frame once the start of the next frame is observed. Therefore, a video frame cannot be correctly parsed and decoded until the next frame is received, resulting in an extra latency of the duration of one frame in the display of video content, significant for an interactive system.
- the video capture and streamer 226 module is configured to prefix a 4-byte field for each encoded video frame in the byte-stream, indicating the number of bytes included in the encoded frame.
- the video decoder 230 on the client device 124 can extract an encoded frame from the byte-stream as soon as it arrives and pass it to the decoder without having to wait for the next frame.
- the video capture and streamer 226 module is configured to append a tag for marking the end of a video frame.
- a tag for marking the end of a video frame.
- an AUD Access unit Delimiter
- H.264 is designed for marking the beginning of a video frame, it is inserted into the stream right after an encoded frame instead, without having to wait for the next frame to be captured or encoded.
- the decoder on the client detects the AUD immediately after receiving an encoded frame and starts decoding the frame without having to wait for the next frame.
- the video capture, encoding, and/or streaming parameters can be adjusted in real-time to allow for quality, latency, and/or bandwidth trade-offs, depending on the particular application or game.
- the lowest latency settings are used for Flash-based applications to provide better responsiveness at the expense of video quality.
- higher latency settings are used to avoid screen pixilation.
- These parameters are initially set in the configuration file for a particular application or game, and are configured to be modified in real-time. For example, parameters such as the video frame rate and/or maximum video bit rate may be adjusted in real-time while streaming a particular application or game, based on a monitored condition of the network.
- embodiments of the present invention provide two solutions to stream video from the delivery servers 112 to the client devices 124 with low latency so that applications provide real-time response to user input, while maintaining good visual quality: a first solution based on TCP (Transmission Control Protocol); and a second solution based on UDP (User Datagram Protocol).
- TCP Transmission Control Protocol
- UDP User Datagram Protocol
- the virtual screen display on the server is periodically captured into video frames based on the frame rate specified in the system.
- the video frames are encoded and delivered from the video capture and streamer 226 on the server to the video decoder 230 on the client, via either a TCP or an UDP socket.
- Video capturing and encoding parameters are selected in a way that the system fully utilizes the network bandwidth designated to the video stream to produce high-quality video while keeping the encoding complexity sufficiently low to minimize the encoding time required for each frame, as part of the low-latency design.
- each video frame is encoded right after being captured, and the output from the encoder is immediately fed into the socket without excessive buffering or delay.
- the video decoder continuously parses the incoming video data from the socket. As soon as it collects all the data required to decode a video frame, the frame is decoded, resized if needed and converted to an appropriate color space, and displayed. Again, video data are decoded and displayed as soon as they are available and there is no excessive buffering to ensure minimal latency.
- the TCP-based solution uses a TCP socket to provide a reliable channel for video delivery.
- Potential transmission errors that may occur due to, for example, temporary glitches in the network or insufficient network bandwidth are all taken care of by the built-in error-detection and retransmission mechanism in TCP.
- Typical video streaming systems insert I-frames periodically in the video stream to enable random access and error recovery capability in the video decoder.
- the I-frames are usually difficult to compress and therefore can take more time to transmit, resulting in a surge in latency.
- I-frames are not used to avoid such a latency surge.
- a QoS (Quality of Service) adaptation algorithm dynamically adjusts the video capturing and encoding parameters based on the network condition.
- the QoS adaptation algorithm not only downgrades video QoS, hence decreasing the amount of video traffic during bad network conditions to reduce latency, but also upgrades video QoS when additional network bandwidth is available to further improve the video quality.
- the QoS adaptation algorithm determines two QoS parameters used in video capturing and encoding: video: (I) frame rate (in frames/sec or fps); and (2) maximum video bitrate (in bits/sec or bps), denoted by fr and mbr respectively.
- the two parameters, fr and mbr, together determine the maximum frame size (mbr/fr), the max. number of bits that the video encoder can spend to encode a frame, which helps provide a good indication of the resulting visual quality of the frame.
- Another constant MBR_STEP (in bits/sec or bps) is specified in the algorithm to map the QoS parameters into a discrete set of QoS levels, together with two time intervals DOWNGRADE_INTERVAL and UPGRADE_INTERVAL that define how much time the algorithm has to wait before making a QoS adjustment.
- Table 1 is a pseudo code of the QoS algorithm for the TCP-based solution.
- MAX_LEVEL as floor(MAX_MBR
- a congestion in the TCP socket is detected by testing if new data can be written into the socket within a certain timeout time (e.g., 20 msec), using, for example, a linux poll command.
- a certain timeout time e.g. 20 msec
- the video capture and streamer 226 drops the video frame rate to a minimum value and correspondingly reduces the maximum video bit rate.
- the congestion count for that level is increased to record the congestion. If no congestion has occurred for a preset time since the last congestion or last QoS upgrade, indicating a good network condition, the algorithm gradually upgrades the QoS parameters.
- This interval increases, exponentially for example, with the congestion count at the destination QoS level, making it more difficult to upgrade to a level already shown to be congestion-prone. If the algorithm stays at a certain QoS level without a congestion long enough that it upgrades to the next level, the original level proves to be well supported by the network and the congestion counts of the level and all levels below it are reset to zero.
- the value of the QoS level becomes smaller than MIN_FR
- the video framerate fr stays at MIN_FR but the visual quality of each frame further degrades as indicated by the decrease in the max. frame size mbr/fr.
- the QoS level becomes larger than MAX_FR fr stays at MAX_FR but quality of each frame is further improved.
- a video encoder does not always produce video traffic at the specified maximum bit rate.
- the video traffic generated can be far below mbr when the video content is rather static, and only approaches mbr during fast-moving scenes. This leads to an issue that congestion may never occur in a static scene, and the QoS adaptation algorithm keeps upgrading the QoS level multiple times although the upgraded mbr is already well above the bandwidth supported by the network. Significant congestion, hence high latency, can then be set off by a sudden scene change in the video content that generates traffic approaching the highly overvalued mbr.
- the video encoder is modified to append dummy data that is ignored in the decoder at the end of each encoded frame so that the frame size reaches the maximum frame size mbr/fr. This modification helps ensure that the video traffic temporarily reaches the specified mbr right after each QoS upgrade. If this bitrate is already more than the network can support, a minor congestion with less impact on latency is triggered followed by a timely QoS downgrade.
- a retransmission mechanism in the TCP-based solution helps guarantee that all the data fed into the socket by the video streamer eventually arrive at the video decoder.
- the additional time required for retransmission and the potential congestion in the socket can have an adverse impact on the video latency.
- the QoS adaptation algorithm is configured to quickly relieve the congestion, the transient latency increase usually manifests in the form of a momentary pause in the video, which is undesirable in some applications.
- the UDP-based solution tackles the problem differently. The UDP-based solution does not attempt any retransmission. Data is not buffered in the socket and does not get discarded if not delivered in time.
- the UDP-based solution differs from the TCP-based solution in that instead of potentially introducing momentary video pauses, occasional decoding errors may become noticeable.
- the UDP-based solution uses RTP (Real-time Transport Protocol) to deliver the video stream from the server to the client over a UDP socket.
- RTP Real-time Transport Protocol
- RTP handles reordering of the UDP packets and detects if any packet gets lost in the transmission. Without retransmission, a lost packet can lead to decoding errors visible in the decoded frame that cannot be fully removed by error concealment techniques in the decoder. These visible decoding errors can also propagate across multiple frames because of the inter-frame dependency in the video stream. To stop such propagation, whenever a lost packet is detected a request for an intra-refresh cycle is sent from the client to the server through the control channel.
- intra refresh is a technique in video coding that evenly distributes intra blocks that can be decoded independently from previous frames over multiple frames to stop error propagation while minimizing the increase in video traffic.
- UDP packets get lost occasionally even when the available network bandwidth is sufficient for the video traffic.
- packet losses occur frequently, an assumption is made that the current network bandwidth can no longer support the video traffic, and the video QoS level is downgraded.
- a QoS adaptation algorithm similar to the one for the TCP-based solution is used for UDP with two main differences.
- the algorithm for UDP runs on the client instead of on the server.
- the QoS level determined on the client is then signaled to the server through the control channel to adjust the parameters in video capturing and encoding.
- the algorithm detects if the frequency of UDP packet losses exceeds a threshold, rather than testing for congestion in the TCP socket, to decide if a QoS downgrade is needed or if an upgrade can be performed.
- the audio capture and streamer 228 module is a module that captures audio produced by the application. After the audio is captured the audio capture and streamer 228 module subsequently encodes and streams audio to the client device 124 .
- audio is captured by the audio capture and streamer 228 module using pulseaudio.
- Each application has a pulse sink created for it by the provisioner 218 .
- the pulse sink for the application is set to the one created by the provisioner 218 . This ensures that all audio from the application goes to the pulse sink for the user requesting the application.
- a wrapper script such as padsp, is used to provide an OSS to pulseaudio bridge.
- parec is used with the source set to be the sink's monitor.
- the output from parec is passed into an audio encoder.
- the audio encoder can be either CELT, MP3 or the audio can be sent uncompressed.
- the setting used is determined by what the client supports.
- the output from the audio encoder is passed to the UDP audio streamer.
- the client device 124 using the audio decoder 232 module decodes the audio.
- the audio decoder 232 uses the CELT library.
- the audio decoder 232 uses the native iPhone MP3 decoding.
- the audio decoder 232 in the client device 124 uses a ring buffer to ensure too much audio data doesn't buffer up and create latency. It also uses Audio Queue Service for low latency operation.
- the audio capture and streamer 228 uses Python scripts to monitor all audio processes on the delivery server 112 . If any process dies, all the audio processes are restarted and the user only experiences a brief and sometimes unnoticeable audio interruption.
- the player 236 is a module that plays on the client device 124 , the application that was selected by the user and which is executed on the delivery servers 112 .
- the player allows a user of the client device to play content provided by a software application that is not originally intended to run in the application environment provided by the client device.
- the client device does not provide the necessary APIs provided by the native application environment of the software application.
- the client device can thus be described as providing a non-native application environment with respect to the software application.
- the software application is run on the delivery server 112 , and the player 236 displays video and plays audio output of the application that is streamed from the delivery server to the client device 124 .
- the player 236 also accepts input from the user, maps the input to a predefined command, encodes the command using a binary protocol, and sends the encoded command over the control channel to the delivery server 112 .
- the mapping of the user input to predefined commands is based on a configuration file and/or modified based on the content currently displayed.
- the player 236 communicates with the server side modules using a control channel. According to one embodiment, all communication between the client and server, which the exception of streamed video and audio, occurs over the control channel. Separate video and audio ports on the server are used to stream the video and audio.
- the video decoder 230 decodes video streamed from the server.
- the video decoder 230 uses the H.264 decoder from the avcodec library in FFMPEG.
- the video decoder 230 decodes the incoming video stream into video frames in a YUV420 format. To playback the video frames with a desired color representation and dimension, the video decoder converts the video frames back to a RGB color space and resizes the video frames before being displayed on the screen. According to one embodiment, the color-space conversion and resizing is performed using programming shaders running on a graphics processing unit (GPU) through graphics APIs (e.g., OpenGL) that are generally available on clients such as iOS or Android devices.
- GPU graphics processing unit
- graphics APIs e.g., OpenGL
- Color-space conversion and resizing using GPUs rather than CPUs significantly reduces the processing time due generally to the parallel processing architecture of GPUs especially suitable for such tasks, resulting in a reduced latency in the system as well as a higher frame rate that can be supported on the client.
- the player 236 is independent of and not specific to any particular application content that it will present on the client device 124 . Only one version of the player 236 is needed for a particular client device 124 , regardless of how many different applications or application types it presents on the client device.
- all communications between the player 236 on the client device 124 and the control server 220 on the delivery server 112 happens over the control channel.
- the player 236 takes input in the form of touches or on-screen keyboard selections.
- the input may also be provided via other input devices such as, for example, physical keypads, joysticks, and the like.
- the input is mapped to preset command and sent from the player 236 over the control channel to the control server 220 .
- the control server 220 converts the received command into a command applicable for the application (e.g. mouse-down command, mouse-up command, or keyboard command) using a simulation tool such as, for example, libxdotool.
- the control server is configured to translate an input provided using a particular input device, to a second input that is generally provided using a different input device.
- the player 236 may also send commands in response to user gestures. For example, a swipe down gesture is mapped to a scroll down command for a browser session. The mapping of the gesture to a particular command is based on the configuration file provided to the player for the particular application or game that is being played.
- the scroll down command is sent by the player 236 as a scroll down command over the control channel to the control server 220 .
- the control server 220 forwards the scroll down command over a socket connection to the application environment 222 .
- the application environment may run specific scripts to execute the particular command. For example, for Flash applications, a Greasemonkey script in the application environment 222 executes an input command using Javascript.
- the player 236 and the control server 220 can coordinate the velocity of the user's scrolling on the client device 124 and the resulting scrolling of the video screen.
- the player 236 interprets the velocity of the user's finger movement into a scroll command of x pixels.
- the player 236 sends a custom command for a scroll of x pixels via the control channel to the control server 220 , which in turn provides the command to the application environment 222 .
- the application scrolls its screen by x pixels and outputs the updated screen for capture and streaming to the client device 124 .
- the video decoder 230 decodes the updated video frames and the player 236 displays a screen where its contents have moved x pixels in response to the user's scrolling gesture.
- the rapid fine-grain scrolling on the client device and other user input which are communicated to the server causes the returned video and audio streams to reflect the user's scrolling and other action as if playing the application on its native device.
- This coordination of user input gestures on the client device 124 , with reaction of the application on the delivery server 112 provides a highly interactive and responsive experience for the user.
- control channel on the client exposes many different types of actions which map to the different types of content. These are encoded using a binary protocol and sent to the server. The server executes these actions differently based on the type of content currently active. Below are a few examples:
- Control channel exposes: sendMouseDown(button, x-position, y-position)
- Control channel exposes: sendTouches(action, active_touch_id, number_touches, touch_id1, x-position1, y-position1, . . . )
- each of these commands can be executed by different types of input. For example, sendMouseDown can be called when the “tap” gesture is recognized if the current server-side content is flash. However, if the current server-side content is an Android game, the sendTouches command can be executed in response to the “tap” gesture as this makes more sense.
- the raw input data is provided to the client and the server converts the raw input data to an input that is appropriate based on the application environment and/or context of the application. For example, if the server-side application environment is Firefox and the content inside is a web page, a touch down immediately followed by a series of touch moves and touch up (a swipe/drag action) on the client mobile device implies the user wants to scroll the page. However, if the control server is not aware that the content is a web page, the server sends a mouse down followed by mouse moves and a mouse up, which is a selection action in Firefox. In order to interpret a swipe/drag action (touch down ⁇ move ⁇ up) as a scroll command on the server side, embodiments of the present invention use a Firefox extension to capture all the mouse events and interpret them as certain gestures appropriately.
- the audio decoder 232 module decodes the audio streamed from the server.
- the audio decoder 232 will use the native audio decoder of the mobile platform.
- the audio decoder 232 will use the CELT decoder library.
- the CELT codec is a low latency compression-decompression algorithm for audio.
- the player 236 and the other modules the player 236 uses on the client device 124 are packaged as a native application for a particular client device.
- a native application for a particular client device.
- FIGS. 3A-3B are flow diagrams of a process for providing interactive content generated by an application configured to run in one application environment, to a client device providing a different application environment, according to one embodiment of the invention.
- the process starts, and the monitoring server 114 receives from the client device 124 identification of the particular software application to be invoked. In this regard, the monitoring server 114 receives a user selection of the particular application in step 310 .
- step 312 the player 236 on the client device 124 sends a request for the selected application to the configurator 214 on the monitoring server 114 .
- step 314 the configurator 214 returns the appropriate configuration file for the selected application back to the player 236 , and the player 236 configures itself based on the parameters of the returned configuration file. For example, the player sets its display resolution, maximum bit rate, maximum frame rate, audio and video codec used, and the like.
- step 316 the player 236 sends a request to the load balancer 216 on the monitoring server 114 to start an instance of the selected application.
- the load balancer identifies and selects a specific delivery server 112 and an instance of the provisioner 218 on the same delivery server.
- the load balancer may select a delivery server which is geographically close to the client device.
- step 320 the provisioner 218 responds to the load balancer 216 , who responds to the player 236 , with parameters that include credentials for accessing the created instance of the delivery server 112 , an IP address of the delivery server, and an audio port on the delivery server, to which the player should connect.
- step 322 the player 236 uses the parameters returned in step 320 to connect on the control channel to the instance of the control server 220 selected for the instance of the application.
- step 324 the control server 220 and the player 236 exchange over the control channel, parameters (e.g. username and password) for the instance of the application, frame rate, bit rate, supported video and audio codec, and the like.
- parameters e.g. username and password
- step 326 the control server 220 responds to the player 236 over the control channel with the video port on the delivery server 112 in which the player should connect.
- step 328 the player 236 connects to the video port specified by the control server 220 and the audio port specified by the provisioner 218 .
- step 330 the control server 220 invokes the application in the application environment provided by the delivery server 112 and notifies the player 236 that the selected application has finished launching.
- step 332 the selected application generates screen display outputs and provides the outputs on the virtual screen 224 on the delivery server 112 .
- step 410 the video capture and streamer 226 receives video parameters, such as, for example, frame rate, bandwidth, bit rate, and video port, from the control server 220 .
- video parameters such as, for example, frame rate, bandwidth, bit rate, and video port
- step 412 the video capture and streamer 226 captures and encodes a screen display output by the virtual screen 224 into various video frames according to the received frame rate.
- each video frame is encoded after being captured, and the output from the encoder is fed to the video port without excessive buffering or delay.
- the maximum frame size of each video frame is based on the specified frame rate and the maximum bit rate.
- step 414 the audio capture and streamer captures audio from the audio sink of the selected application and then encodes and streams the audio to the client device 124 over the audio port.
- step 416 the video decoder 230 and audio decoder on the client device 124 respectively decodes the received video stream and audio stream, which the player 236 then displays or plays respectively on the client device.
- the video decoder continuously parses the incoming video data from the socket. As soon as it collects all the data required to decode a video frame, the frame is decoded, resized if needed, converted to an appropriate color space, and displayed. Again, video data are decoded and displayed as soon as they are available and there is no excessive buffering to ensure minimal latency.
- the video decoder starts the decoding as soon as it identifies a tag (e.g. an AUD tag) which is inserted at the end of a particular video frame.
- a tag e.g. an AUD tag
- the user enters input to the selected application via the player 236 using touches, gestures, keyboard entry, or any other form of input.
- the player 236 maps the user input (e.g. downward swipe, shaking of the device, changing orientation of the device, tapping on the screen, and the like) to a particular command defined in the configuration file for the application provided to the client device. For example, changing the orientation of the device may be mapped to a “sendOrientationChanged” command which receives, as a parameter, the orientation of the device.
- the change of orientation of the device and other inputs to the device are interpreted according to conventional mechanisms that will be understood by a person of skill in the art.
- step 420 the player 236 sends the mapped command(s) over the control channel to the control server 220 .
- step 422 the control server converts the commands received from the player 236 to a corresponding input catered to the particular application (e.g. mouse or keyboard command understood by the application), and forwards the converted input commands to the application in the application environment 222 .
- the particular application e.g. mouse or keyboard command understood by the application
- step 424 the selected application reacts to the user input or internal events, and changes its screen and sound output appropriately.
- step 426 the changes to the screen are reflected onto the virtual screen 224 and the changes to the sound to the audio sink. The sequence then goes to step 412 , and the streaming of video and audio to the client device continues.
- the simplest mapping of the input or even the raw touch/input data from the client device is sent to the delivery server 112 over the control channel. For example, a mouse down event is sent when a user touches down on the screen.
- This mapping of input to the simplest command expected by the application environment on the server side avoids mapping to more complicated actions, such as high-level gestures or commands.
- the raw user inputs are then interpreted differently based on the content inside the application environment 222 and/or the context of the application. For example, a Firefox application provides a different context, which is browser based, than an Android application, which is touch-based.
- a mouse-down event may be transmitted to a Firefox application when a same action by a user would create the transmitting of a touch down event for an Adroid application.
- a touch down event may be transmitted to a Firefox application when a same action by a user would create the transmitting of a touch down event for an Adroid application.
- such gestures and/or user intentions are interpreted on the server side. For example, a touch down immediately followed by a series of touch moves and a touch up (i.e. a swipe/drag action) on the mobile device would imply that the user wants to scroll the page.
- the control server makes a minimal interpretation based on the context of the application and transmits a mouse down input followed by mouse moves and mouse up inputs to, for example, a Firefox application
- the application may interpret the input as a selection action instead of a scroll.
- the server is configured to capture all the mouse events and interpret them as a gesture prior to transmitting the input to the application.
- a Firefox application environment for example, whether interpreting a touch down event followed by a series of touch move events and a touch up event, as a scroll command, depends on the move direction.
- such interpretation as a scroll command is disabled when the mouse down happens inside the Flash object, where the Flash object itself would interpret these mouse down/move/up events.
- the inputs are not changed, and the minimally interpreted input (e.g. mouse down ⁇ move ⁇ up) is sent to the Flash object for interpreting the command on its own.
- Interpreting the touch events on the delivery server 112 has the advantage of achieving content-aware gesture mapping.
- the application environment 222 knows exactly where the user touches and thus where the gesture starts and ends. Therefore the gesture can be better mapped creating a better user experience.
- sending the raw touch data improves responsiveness of the application because the raw input data is provided as the inputs are being entered instead of waiting for the entire input to complete. For example, there is no need for a swipe down event to complete before transmitting such an event to the application.
- the control channel is configured to transmit multiple touch inputs for application environments 222 that accept and expect such events (e.g. an Android application running in the delivery server 112 ).
- a touch tracker in the player 236 tracks the multiple touches.
- Each touch at the client side is assigned with a touch ID.
- each finger is represented with a touchID having associated coordinates (x, y).
- Each time the user starts or ends a touch event e.g. putting one more finger down or lifting one finger up
- the touch tracker in the player 236 groups all the touches along with the action (down/move/up) and the active touch ID that corresponds to the finger that initiated the event.
- This data is then sent through the control channel and to the control server 220 .
- the control server 220 organizes the touch data into the format accepted by the application environment 222 , and sends the formatted data to the application environment 222 .
- FIG. 4 a flow diagram of process for dynamically adjusting the quality of streamed video frames during a streamed video session based on network congestion over a TCP socket, according to one embodiment of the invention.
- the process implements the QoS algorithm of table I.
- the process is implemented by the video capture and streamer module 226 on the mobile app delivery server 112 .
- video quality is either dynamically downgraded or upgraded based on the concurrent congestion status of a TCP socket.
- the process adjusts video quality by varying two aspects of video quality: video frame rate and video bit rate.
- video frame rate can range from 10 to 24 frames per second (fps)
- video bit rate can range from 320K to 2048K bits per second (bps).
- Video frame rate affects primarily the smoothness or choppiness of a video.
- the video bit rate affects primarily the visual quality of individual frames.
- both the video frame rate and video bit rate are downgraded together until the video bit rate hits a predefined floor value MIN_FR, after which the video frame rate is held constant but the video bit rate continues to be downgraded.
- the process of FIG. 4 is invoked before the encoding of each and every frame of video to be transmitted to the client device.
- certain constant values are set that control the range and frequency of the adjustment of video quality.
- the following constants are used:
- MIN_LEVEL minimum QoS level (e.g 5);
- MAX_LEVEL maximum QoS level (e.g. 32);
- MIN_FR minimum frame rate (e.g. 10);
- MAX_FR for maximum frame rate (e.g. 24);
- MIN_MBR for minimum bit rate (e.g. 320K);
- MAX_MBR maximum bit rate (e.g. 2048K);
- MBR_STEP bit rate increment (e.g. 64K);
- DOWNGRADE_INTERVAL downgrade interval time (e.g. 1000 milliseconds).
- UPGRADE_INTERVAL upgrade interval time (e.g. 1000 milliseconds).
- the outcome of the process is the setting of the video frame rate (fr) and the video bit rate (mbr) parameters which are subsequently be used by the video encoder to encode the next video frame.
- step 510 the video capture and streamer module 226 before the encoding of each frame first sets a previous quality level to the value of a current quality level, and further sets a current time to the current system time.
- step 512 the video capture and streamer module 226 determines whether the TCP socket was congested after the transmission of the last video frame. If the TCP socket was congested, the process goes to step 514 where the process attempts to downgrade the quality level by adjusting the value of the current quality level. In this regard, the process sets the value of a last congestion time to the value of the current time, and increments a congestion counter for the current quality level.
- step 516 the process determines whether the current quality level is greater than a preset minimum quality level. If the answer is NO, the process proceeds to step 524 because the process does not downgrade the level below the preset minimum quality level.
- the process determines whether the difference between the current time and the last downgrade time exceeds a preset downgrade interval. If it does not, the processor proceeds to step 524 . According to one embodiment, using a downgrade interval to control how frequently the level is downgraded insures a smoother downgrade process without wild down swings. If the downgrade interval time has been exceeded, the process proceeds to step 518 .
- step 518 the video capture and streamer module 226 downgrades the current quality level to the preset minimum quality level if the current quality level is less than or equal to a preset minimum frame rate. If the current quality level is greater than the preset minimum frame rate, the process downgrades the current quality level to either the preset minimum frame rate or the preset minimum QoS level, whichever is a greater value. In either case, after the downgrade has been done, the process proceeds to step 524 .
- step 520 if a determination is made that the TCP socket was not congested, the video capture and streamer module 226 proceeds to step 520 to check if an upgrade of the video quality level is possible. In this regard, the process determines if the current quality level is less than a preset maximum QoS level. If the answer is NO, meaning that the current quality level is already at the maximum level, the process proceeds to step 524 .
- the process proceeds to step 522 to attempt to upgrade the level by a preset amount, such as, for example, by one.
- the process uses a congestion counter for the current quality level to compute a multiplier.
- the multiplier acts as an exponential dampener. The multiplier is multiplied by a preset upgrade interval time to compute an upgrade delay time.
- the current time is then subtracted from the greater of either the last upgrade time or the last congestion time, and if the difference has exceeded the computed upgrade delay time, an upgrade take place. If an upgrade is allowed, the current quality level is incremented by one. In either case, the algorithm then proceeds to step 524 .
- step 524 the video capture and streamer module 226 checks if either a downgrade or an upgrade of the current quality level has just occurred. If not, the process proceeds to step 532 . If an upgrade or downgrade has just occurred, the process determines, in step 526 , whether a downgrade has occurred. If the answer is YES, the process proceeds to step 528 where the last downgrade time is set to the current time and the process proceeds to step 532 .
- step 526 If instead in step 526 it is determined that an upgrade has just occurred, the process proceeds to step 530 for setting the congestion counters to zero for all quality levels less than or equal to the current level. That is, because of the upgrade, the process allowed to have confidence in the lack of congestion in all levels less than or equal to the current level to which it has been upgraded. The algorithm then proceeds to step 532 .
- Step 532 is the culmination of the process where the video frame rate and video bit rate are set based on the results of the algorithm.
- the video bit rate is set to the current quality level multiplied by a preset bit rate increment.
- the maximum value of either the current quality level or the preset minimum frame rate is selected.
- the result is then compared against the preset maximum frame rate.
- the minimum of the two values is then set as the video frame rate.
- the video encoder and streamer module 226 uses the set video frame rate and video bit rate to encode the next video frame to be streamed to the client device.
- FIGS. 3-4 may be described in terms of a software routine executed by the corresponding CPU based on instructions stored in memory.
- a person of skill in the art should recognize, however, that the processes may be executed via hardware, firmware (e.g. via an ASIC), or in any combination of software, firmware, and/or hardware.
- the sequence of steps of the processes are not fixed, but can be altered into any desired sequence as recognized by a person of skill in the art.
- a person of skill in the art should appreciate the embodiments of the present invention allow the efficient delivery of interactive applications built for one environment to various mobile devices (and other clients) for which they were not originally written.
- the various embodiments allow the applications to function on the new platforms with little or no redevelopment of the applications.
- Application developers will be able to quickly re-purpose their existing application assets to run on the new environments without the need to learn the technical details of the new platforms.
- the above embodiments also help eliminate the need to download the applications to the new platforms, or purchase separate applications for the new platforms.
- the applications are configured to appear to function on the new platform in the same way as they would on the native platform.
- the embodiments of the present invention also allow the applications to be highly responsive to the user's control. The high responsiveness is aided by reducing the latency of upstream inputs from the client to the server running the application, and latency of downstream audio and video from the server to the client.
Abstract
Description
TABLE 1 |
============================================== |
define MAX_LEVEL as floor(MAX_MBR|MBR_STEP) |
define MIN_LEVEL as ceil(MIN_MBR|MBR_STEP) |
last_downgrade_time = 0 |
last_upgrade_time = 0 |
last_congestion_time = 0 |
for each level that MIN_LEVEL <= level <= MAX_LEVEL |
congestion_counter[level] = 0 |
end |
current_level = min(max(MAX_FR, MIN_LEVEL), MAX_LEVEL) |
for each video frame |
previous_level = current_level |
current_time = current system time |
if (socket is congested in the previous transmission) |
last_congestion_time = current_time |
congestion_counter[current_level] = |
congestion_counter[current_level] + 1 |
if (current_level > MIN_LEVEL) |
if (current_time − last_downgrade_time > |
DOWNGRADE_INTERVAL) |
if (current_level > MIN_FR) |
current_level = max(MIN_FR, MIN_LEVEL) |
else |
current_level = MIN_LEVEL |
end |
end |
end |
else |
if (current_level < MAX_LEVEL) |
multiplier = pow(2, congestion_counter[current_level + 1]) |
if (current_time − max(last_upgrade_time, |
last_congestion_time) > |
multiplier * UPGRADE_INTERVAL) |
current_level = current_level + 1 |
end |
end |
end |
if (current_level < previous_level) |
last_downgrade_time = current_time |
else if (current_level > previous_level) |
last_upgrade_time = current_time |
for each level that MIN_LEVEL <= level <= previous_level |
congestion_counter[level] = 0 |
end |
end |
mbr = current_level * MBR_STEP |
fr = min(max(current_level, MIN_FR), MAX_FR) |
end |
====================================================== |
-
- Encoding: 2 byte integer indicating the message size (5 bytes), 1 byte indicating the button, 2 bytes for x position, 2 bytes for position
- Executed: via a library that talks to the X11 protocol called xdotool
-
- Encoding: 2 byte integer indicating the message size (1 byte), 1 byte indicating the 4 possible orientation
- Executed: via a TCP socket connected to the simulator that tells it to change orientation
-
- Encoding: 2 byte integer indicating the message size (3+5*number_touches bytes), 1 byte indicating the type of action (touch down/move/up), 1 byte indicating the active touch ID that triggered this event, 1 byte the number of touches, followed by the information of each individual touch [touch_id (1 byte), x-position (2 byte), y-position (2 byte)].
- Executed: via a TCP socket connected to the simulator that tells it the current touch event and all the touch data
Claims (18)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/543,720 US8903897B2 (en) | 2011-07-08 | 2012-07-06 | System and method for providing interactive content to non-native application environments |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201161506022P | 2011-07-08 | 2011-07-08 | |
US13/543,720 US8903897B2 (en) | 2011-07-08 | 2012-07-06 | System and method for providing interactive content to non-native application environments |
Publications (2)
Publication Number | Publication Date |
---|---|
US20130013671A1 US20130013671A1 (en) | 2013-01-10 |
US8903897B2 true US8903897B2 (en) | 2014-12-02 |
Family
ID=47439316
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/543,720 Active 2033-05-11 US8903897B2 (en) | 2011-07-08 | 2012-07-06 | System and method for providing interactive content to non-native application environments |
Country Status (1)
Country | Link |
---|---|
US (1) | US8903897B2 (en) |
Cited By (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20170302720A1 (en) * | 2013-08-02 | 2017-10-19 | Pixar | Transition points in an image sequence |
CN107431662A (en) * | 2015-03-06 | 2017-12-01 | 索尼互动娱乐美国有限责任公司 | Cloud input channel management |
US20180255325A1 (en) * | 2017-03-01 | 2018-09-06 | Wyse Technology L.L.C. | Fault recovery of video bitstream in remote sessions |
US10735449B2 (en) | 2017-07-11 | 2020-08-04 | Viaforensics, Llc | Methods and apparatuses for improved mobile app security testing via bridged native and web user interface interaction |
US11750674B2 (en) | 2015-05-05 | 2023-09-05 | Penguin Computing, Inc. | Ultra-low latency remote application access |
Families Citing this family (67)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP2012510118A (en) | 2008-11-26 | 2012-04-26 | カルガリー・サイエンティフィック・インコーポレイテッド | Method and system for providing remote access to the state of an application program |
US10055105B2 (en) | 2009-02-03 | 2018-08-21 | Calgary Scientific Inc. | Method and system for enabling interaction with a plurality of applications using a single user interface |
US9741084B2 (en) | 2011-01-04 | 2017-08-22 | Calgary Scientific Inc. | Method and system for providing remote access to data for display on a mobile device |
CA2734860A1 (en) | 2011-03-21 | 2012-09-21 | Calgary Scientific Inc. | Method and system for providing a state model of an application program |
US9100205B1 (en) | 2011-07-20 | 2015-08-04 | Google Inc. | System for validating site configuration based on real-time analytics data |
US8869036B1 (en) | 2011-07-20 | 2014-10-21 | Google Inc. | System for troubleshooting site configuration based on real-time analytics data |
US8880996B1 (en) * | 2011-07-20 | 2014-11-04 | Google Inc. | System for reconfiguring a web site or web page based on real-time analytics data |
CA2842563A1 (en) * | 2011-08-03 | 2013-02-07 | Correlsense Ltd. | A method and apparatus for assembling elements of data transactions |
RU2625525C2 (en) | 2011-08-15 | 2017-07-14 | Калгари Сайентифик Инк. | Contactless remote access to software application |
CN103891303B (en) | 2011-08-16 | 2018-03-09 | 黛斯悌尼软件产品有限公司 | Video based on script is presented |
CN103959708B (en) | 2011-09-30 | 2017-10-17 | 卡尔加里科学公司 | Including the non-coupled application extension for shared and annotation the interactive digital top layer of the remote application that cooperates |
US9906815B2 (en) * | 2011-11-08 | 2018-02-27 | Texas Instruments Incorporated | Delayed duplicate I-picture for video coding |
CN104040946B (en) | 2011-11-23 | 2017-07-14 | 卡尔加里科学公司 | For shared and meeting the method and system of the remote application that cooperates |
US20130166622A1 (en) * | 2011-12-27 | 2013-06-27 | Citrix Systems, Inc | Using Mobile Device Location Data with Remote Resources |
US9215266B2 (en) * | 2012-01-26 | 2015-12-15 | Zoom International S.R.O. | System and method for zero-footprint screen capture |
US10455071B2 (en) | 2012-05-09 | 2019-10-22 | Sprint Communications Company L.P. | Self-identification of brand and branded firmware installation in a generic electronic device |
US8934887B2 (en) * | 2012-05-31 | 2015-01-13 | Emblaze Ltd. | System and method for running mobile devices in the cloud |
US9198027B2 (en) | 2012-09-18 | 2015-11-24 | Sprint Communications Company L.P. | Generic mobile devices customization framework |
US20140149488A1 (en) * | 2012-11-26 | 2014-05-29 | Nice-Systems Ltd. | System and method for engaging a mobile device |
US9549009B1 (en) | 2013-02-08 | 2017-01-17 | Sprint Communications Company L.P. | Electronic fixed brand labeling |
WO2014152128A1 (en) * | 2013-03-15 | 2014-09-25 | Beeonics, Inc. | Apparatus for single workflow for multi-platform mobile application creation and delivery |
US10320942B2 (en) | 2013-03-15 | 2019-06-11 | Gadget Software, Inc. | Dynamic user interface delivery system |
US10075560B2 (en) | 2013-03-15 | 2018-09-11 | Gadget Software, Inc. | User interface and content translation system |
US10326825B2 (en) | 2013-03-15 | 2019-06-18 | Gadget Software, Inc. | Apparatus for single workflow for multi-platform mobile application creation and delivery |
US10303802B2 (en) | 2013-03-15 | 2019-05-28 | Gadget Software, Inc. | System for mobile application search |
EP2972933B1 (en) * | 2013-03-15 | 2018-07-04 | American Megatrends, Inc. | System and method of web-based virtual media redirection |
US10320885B2 (en) | 2013-03-15 | 2019-06-11 | Gadget Software, Inc. | Method for single workflow for multi-platform mobile application creation and delivery |
US9712622B2 (en) | 2013-07-15 | 2017-07-18 | Microsoft Technology Licensing, Llc | Techniques to manage state information for a web service |
US9532211B1 (en) | 2013-08-15 | 2016-12-27 | Sprint Communications Company L.P. | Directing server connection based on location identifier |
US9161209B1 (en) | 2013-08-21 | 2015-10-13 | Sprint Communications Company L.P. | Multi-step mobile device initiation with intermediate partial reset |
US10863387B2 (en) * | 2013-10-02 | 2020-12-08 | Cisco Technology, Inc. | System and method for orchestrating policy in a mobile environment |
US10506398B2 (en) | 2013-10-23 | 2019-12-10 | Sprint Communications Company Lp. | Implementation of remotely hosted branding content and customizations |
US9743271B2 (en) | 2013-10-23 | 2017-08-22 | Sprint Communications Company L.P. | Delivery of branding content and customizations to a mobile communication device |
US9363622B1 (en) | 2013-11-08 | 2016-06-07 | Sprint Communications Company L.P. | Separation of client identification composition from customization payload to original equipment manufacturer layer |
EP3075111B1 (en) | 2013-11-29 | 2017-12-20 | Calgary Scientific Inc. | Method for providing a connection of a client to an unmanaged service in a client-server remote access system |
US20160117734A1 (en) * | 2014-01-01 | 2016-04-28 | Hsiu-Ping Lin | Methods and systems for advertising apps |
US9392395B1 (en) | 2014-01-16 | 2016-07-12 | Sprint Communications Company L.P. | Background delivery of device configuration and branding |
US9420496B1 (en) | 2014-01-24 | 2016-08-16 | Sprint Communications Company L.P. | Activation sequence using permission based connection to network |
US9603009B1 (en) | 2014-01-24 | 2017-03-21 | Sprint Communications Company L.P. | System and method of branding a device independent of device activation |
US9513888B1 (en) | 2014-01-30 | 2016-12-06 | Sprint Communications Company L.P. | Virtual preloads |
US9594471B1 (en) | 2014-01-31 | 2017-03-14 | Sprint Communications Company L.P. | System and method for inserting additional icon content into a display screen |
US9762462B2 (en) * | 2014-02-28 | 2017-09-12 | Verizon Patent And Licensing Inc. | Method and apparatus for providing an anti-bullying service |
US9521190B2 (en) * | 2014-03-20 | 2016-12-13 | Dell Products L.P. | Dynamic session transformation |
US9681251B1 (en) | 2014-03-31 | 2017-06-13 | Sprint Communications Company L.P. | Customization for preloaded applications |
US9426641B1 (en) | 2014-06-05 | 2016-08-23 | Sprint Communications Company L.P. | Multiple carrier partition dynamic access on a mobile device |
KR102086731B1 (en) | 2014-06-25 | 2020-04-14 | 에스케이플래닛 주식회사 | Method for providing of cloud streamming service, apparatus and system for the same, and computer readable storage medium storing script code for the same |
US9690626B2 (en) * | 2014-06-27 | 2017-06-27 | Vmware, Inc. | Processing workloads in single-threaded environments |
US9852759B2 (en) * | 2014-10-25 | 2017-12-26 | Yieldmo, Inc. | Methods for serving interactive content to a user |
US9992326B1 (en) | 2014-10-31 | 2018-06-05 | Sprint Communications Company L.P. | Out of the box experience (OOBE) country choice using Wi-Fi layer transmission |
US9781065B2 (en) * | 2014-12-25 | 2017-10-03 | Sap Se | Lightweight application integration for mobile cloud computing |
US9357378B1 (en) | 2015-03-04 | 2016-05-31 | Sprint Communications Company L.P. | Subscriber identity module (SIM) card initiation of custom application launcher installation on a mobile communication device |
US9398462B1 (en) * | 2015-03-04 | 2016-07-19 | Sprint Communications Company L.P. | Network access tiered based on application launcher installation |
US9483253B1 (en) | 2015-04-30 | 2016-11-01 | Sprint Communications Company L.P. | Methods for customization of default applications on a mobile communication device |
US9781488B2 (en) * | 2015-07-30 | 2017-10-03 | Adi Rozenberg | Controlled adaptive rate switching system and method for media streaming over IP networks |
US9871905B1 (en) | 2016-08-09 | 2018-01-16 | Sprint Communications Company L.P. | Systems and methods for customized delivery of virtually installed applications |
US9913132B1 (en) | 2016-09-14 | 2018-03-06 | Sprint Communications Company L.P. | System and method of mobile phone customization based on universal manifest |
US10021240B1 (en) | 2016-09-16 | 2018-07-10 | Sprint Communications Company L.P. | System and method of mobile phone customization based on universal manifest with feature override |
US10306433B1 (en) | 2017-05-01 | 2019-05-28 | Sprint Communications Company L.P. | Mobile phone differentiated user set-up |
CN107329743B (en) * | 2017-06-14 | 2021-09-28 | 北京小米移动软件有限公司 | Application page display method and device and storage medium |
US10956372B2 (en) | 2017-08-23 | 2021-03-23 | Bank Of America Corporation | Image capturing and processing for legacy format integration |
CN114172888A (en) | 2018-04-25 | 2022-03-11 | 华为技术有限公司 | Method for transmitting packed file, related equipment and storage medium |
US10891017B1 (en) | 2018-08-25 | 2021-01-12 | Sprint Communications Company L.P. | Rotating icon selection and interaction software development kit (SDK) |
CN109257646B (en) * | 2018-10-15 | 2020-09-22 | Oppo广东移动通信有限公司 | Video processing method and device, electronic equipment and computer readable medium |
US20200137134A1 (en) * | 2018-10-31 | 2020-04-30 | Ati Technologies Ulc | Multi-session low latency encoding |
CN110134479B (en) * | 2019-05-10 | 2023-03-14 | 杭州网易云音乐科技有限公司 | Content page interaction method, generation method, medium, device and computing equipment |
US11882188B2 (en) | 2019-12-23 | 2024-01-23 | Sony Interactive Entertainment Inc. | Methods and systems for maintaining smooth frame rate during transmission of streaming video content |
US20230275954A1 (en) * | 2022-02-03 | 2023-08-31 | Citrix Systems, Inc. | Remote browser session presentation with local browser tabs |
Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20020026495A1 (en) * | 2000-08-28 | 2002-02-28 | Carlos Arteaga | Method and apparatus allowing a limited client device to use the full resources of a networked server |
US20060281556A1 (en) * | 2005-05-12 | 2006-12-14 | Microsoft Corporation | System and method for distributing updates to runtime systems without destabilizing compatibility |
US7849491B2 (en) | 2002-12-10 | 2010-12-07 | Onlive, Inc. | Apparatus and method for wireless video gaming |
US7916147B2 (en) | 2002-03-01 | 2011-03-29 | T5 Labs Ltd. | Centralised interactive graphical application server |
US8259816B2 (en) * | 2009-03-12 | 2012-09-04 | MIST Innovations, Inc. | System and method for streaming video to a mobile device |
-
2012
- 2012-07-06 US US13/543,720 patent/US8903897B2/en active Active
Patent Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20020026495A1 (en) * | 2000-08-28 | 2002-02-28 | Carlos Arteaga | Method and apparatus allowing a limited client device to use the full resources of a networked server |
US7916147B2 (en) | 2002-03-01 | 2011-03-29 | T5 Labs Ltd. | Centralised interactive graphical application server |
US7849491B2 (en) | 2002-12-10 | 2010-12-07 | Onlive, Inc. | Apparatus and method for wireless video gaming |
US20060281556A1 (en) * | 2005-05-12 | 2006-12-14 | Microsoft Corporation | System and method for distributing updates to runtime systems without destabilizing compatibility |
US8259816B2 (en) * | 2009-03-12 | 2012-09-04 | MIST Innovations, Inc. | System and method for streaming video to a mobile device |
Non-Patent Citations (4)
Title |
---|
Gaudiosi, Gaikai CEO David Perry Sees the Future of Gaming in the Cloud, Forbes, TECH, Jun. 29, 2012 @ 12:16 PM, 2213 Views, 6 pgs. |
Remote Desktop Protocol, Windows, Dev Center-Desktop, Printout dated Jul. 6, 2012 obtained from http://msdn.microsoft.com/en-us/library/windows/desktop/aa383015(d=printer,v=vs.85).aspx, 3 pgs. |
Remote Desktop Protocol, Windows, Dev Center—Desktop, Printout dated Jul. 6, 2012 obtained from http://msdn.microsoft.com/en-us/library/windows/desktop/aa383015(d=printer,v=vs.85).aspx, 3 pgs. |
Richardson, The RFB Protocol, RealVNC Ltd., Version 3.8, Last updated Nov. 26, 2010, 43 pgs. |
Cited By (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20170302720A1 (en) * | 2013-08-02 | 2017-10-19 | Pixar | Transition points in an image sequence |
US10264046B2 (en) * | 2013-08-02 | 2019-04-16 | Pixar | Transition points in an image sequence |
CN107431662A (en) * | 2015-03-06 | 2017-12-01 | 索尼互动娱乐美国有限责任公司 | Cloud input channel management |
CN107431662B (en) * | 2015-03-06 | 2021-12-07 | 索尼互动娱乐美国有限责任公司 | System and method for reducing latency impact between a server and a client device |
US11750674B2 (en) | 2015-05-05 | 2023-09-05 | Penguin Computing, Inc. | Ultra-low latency remote application access |
US20180255325A1 (en) * | 2017-03-01 | 2018-09-06 | Wyse Technology L.L.C. | Fault recovery of video bitstream in remote sessions |
US10841621B2 (en) * | 2017-03-01 | 2020-11-17 | Wyse Technology L.L.C. | Fault recovery of video bitstream in remote sessions |
US10735449B2 (en) | 2017-07-11 | 2020-08-04 | Viaforensics, Llc | Methods and apparatuses for improved mobile app security testing via bridged native and web user interface interaction |
Also Published As
Publication number | Publication date |
---|---|
US20130013671A1 (en) | 2013-01-10 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8903897B2 (en) | System and method for providing interactive content to non-native application environments | |
US10080966B2 (en) | System and method for experiencing advertised interactive applications | |
US9549152B1 (en) | Application content delivery to multiple computing environments using existing video conferencing solutions | |
US10771565B2 (en) | Sending application input commands over a network | |
US20210316214A1 (en) | Multi-user demo streaming service for cloud gaming | |
US9942556B2 (en) | Altering streaming video encoding based on user attention | |
CN108079578B (en) | Code rate adjusting method and device based on cloud game and storage medium | |
US9451043B2 (en) | Remote virtualization of mobile apps | |
CA2814420C (en) | Load balancing between general purpose processors and graphics processors | |
US20150082239A1 (en) | Remote Virtualization of Mobile Apps with Transformed Ad Target Preview | |
US10313207B2 (en) | Method for testing cloud streaming server, and apparatus and system therefor | |
US11900551B2 (en) | Creating cloud-hosted, streamed augmented reality experiences with low perceived latency | |
US8908776B1 (en) | Attention misdirection for streaming video | |
CN112354176A (en) | Cloud game implementation method, cloud game implementation device, storage medium and electronic equipment | |
US9948691B2 (en) | Reducing input processing latency for remotely executed applications | |
US9954718B1 (en) | Remote execution of applications over a dispersed network | |
US9384276B1 (en) | Reducing latency for remotely executed applications | |
KR102359367B1 (en) | Method and apparatus for game streaming | |
KR102399661B1 (en) | Apparatus and method for remote connection | |
KR102369525B1 (en) | Apparatus, system, and method for remote connection | |
US11013994B2 (en) | Method for playing back applications from a cloud, telecommunication network for streaming and for replaying applications (APPs) via a specific telecommunication system, and use of a telecommunication network for streaming and replaying applications (APPs) | |
KR20200056557A (en) | Apparatus, system, and method for remote connection |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: ISWIFTER, INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:RELAN, ROHAN;GUPTA, RAJAT;RAMAVAJJALA, CHAITANYA;AND OTHERS;SIGNING DATES FROM 20121003 TO 20121009;REEL/FRAME:029132/0156 |
|
AS | Assignment |
Owner name: ISWIFTER, INC. D/B/A AGAWI, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:ISWIFTER, INC.;REEL/FRAME:033557/0116Effective date: 20140814 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:ISWIFTER, INC. D/B/A AGAWI;REEL/FRAME:033991/0930Effective date: 20140825 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
CC | Certificate of correction | ||
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044277/0001Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551)Year of fee payment: 4 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |