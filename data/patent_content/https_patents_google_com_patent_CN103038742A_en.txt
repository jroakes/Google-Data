CN103038742A - Method and system for dynamically replicating data within a distributed storage system - Google Patents
Method and system for dynamically replicating data within a distributed storage system Download PDFInfo
- Publication number
- CN103038742A CN103038742A CN2011800179209A CN201180017920A CN103038742A CN 103038742 A CN103038742 A CN 103038742A CN 2011800179209 A CN2011800179209 A CN 2011800179209A CN 201180017920 A CN201180017920 A CN 201180017920A CN 103038742 A CN103038742 A CN 103038742A
- Authority
- CN
- China
- Prior art keywords
- storage subsystem
- metadata
- client
- storage
- blob
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/06—Digital input from, or digital output to, record carriers, e.g. RAID, emulated record carriers or networked record carriers
- G06F3/0601—Interfaces specially adapted for storage systems
- G06F3/0628—Interfaces specially adapted for storage systems making use of a particular technique
- G06F3/0646—Horizontal data movement in storage systems, i.e. moving data in between storage devices or systems
- G06F3/065—Replication mechanisms
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/06—Digital input from, or digital output to, record carriers, e.g. RAID, emulated record carriers or networked record carriers
- G06F3/0601—Interfaces specially adapted for storage systems
- G06F3/0602—Interfaces specially adapted for storage systems specifically adapted to achieve a particular effect
- G06F3/061—Improving I/O performance
- G06F3/0611—Improving I/O performance in relation to response time
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/06—Digital input from, or digital output to, record carriers, e.g. RAID, emulated record carriers or networked record carriers
- G06F3/0601—Interfaces specially adapted for storage systems
- G06F3/0602—Interfaces specially adapted for storage systems specifically adapted to achieve a particular effect
- G06F3/061—Improving I/O performance
- G06F3/0613—Improving I/O performance in relation to throughput
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/06—Digital input from, or digital output to, record carriers, e.g. RAID, emulated record carriers or networked record carriers
- G06F3/0601—Interfaces specially adapted for storage systems
- G06F3/0668—Interfaces specially adapted for storage systems adopting a particular infrastructure
- G06F3/067—Distributed or networked storage systems, e.g. storage area networks [SAN], network attached storage [NAS]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/06—Digital input from, or digital output to, record carriers, e.g. RAID, emulated record carriers or networked record carriers
- G06F3/0601—Interfaces specially adapted for storage systems
- G06F3/0668—Interfaces specially adapted for storage systems adopting a particular infrastructure
- G06F3/0671—In-line storage system
- G06F3/0683—Plurality of storage devices
- G06F3/0685—Hybrid storage combining heterogeneous device types, e.g. hierarchical storage, hybrid arrays
Abstract
A server computer at a first storage sub-system of a distributed storage system receives from a client a first client request for an object. If the object is not present in the first storage sub-system, the server computer identifies a second storage sub-system of the distributed storage system as having a replica of the requested object, the requested object including content and metadata. The server computer submits an object replication request for the requested object to the second storage sub-system and independently receives the content and metadata of the requested object from the second storage sub-system. The server computer generates a new replica of the object at the first storage sub-system using the received metadata and content and returns the metadata of the new replica of the object to the client.
Description
Technical field
The disclosed embodiments relate generally to database replication, and relate more specifically to dynamic replication data between two storage subsystems of distributed memory system.
Background technology
For weak volatile data, change or the variation located at an example (or duplicate) of data must finally copy to the every other example of database, do not limit but there is to upgrade the strict time that must occur.This is suitable models for some data that seldom changes, especially when there are many examples of database in the position that distributes all over the world.
May be not only slowly but also poor efficiency to copying of mass data in the world.Especially, the long-distance network path has finite bandwidth.Generally speaking, need to transmit by the finite bandwidth of network this sheet data to the single change of large stretch of data.In addition, identical large stretch of data are transferred to each in the database instance, and it makes bandwidth use the quantity that multiply by database instance.
In addition, sometimes failure or the unavailable certain hour section (be used for the accidental interruption of upgrading and plan interrupt both etc.) that reaches that becomes of network path and data center.Generally, dubbing system can appropriateness not processed such interruption, usually needs manual intervention.When copying based on the static network topology structure, and some link becomes unavailable or more has in limited time, may be poor efficiency or invalid based on the replication strategy of original static network.
According to definition, the data that are stored in the distributed memory system are not in single position, but stride geographic area and even distribution on global.Therefore, challenge is that the optimization real-time data replication scheme of design in larger distributed memory system so that this scheme not only consumes the least possible resource, and improved the service that distributed memory system provides.
Summary of the invention
The disclosed embodiments have solved and upper planar defect and the other problems of striding the data Replica of widely distributed distributed system with distributed data base and becoming a plurality of duplicate to be associated.In the part of the disclosed embodiments, tracked as change amount (delta) to the change of each sheet data, and the change amount is transferred to other examples of database, rather than transmit these sheet data itself.In certain embodiments, reading out data comprises and reads basic value and any subsequently change is measured both, and therefore, the client of reading out data is seen the value of renewal, even the change amount not yet is merged in the basic data value.In certain embodiments, data utilize network data structure to reduce the data volume of the long distance link transmission in the across a network to the distribution of other examples.For example, the data that need to be transferred to from Los Angeles Paris and Frankfort can be transferred to Paris, are transferred to Frankfort from Paris subsequently.
According to some embodiment, the computer implemented method that is used for copying object in distributed memory system is in the realization of one or more server computers place, and each has one or more processors and storer described one or more server computers.Memory stores is used for one or more programs that the one or more processors on each server computer are carried out, and this each server computer is associated with the distributed memory system that comprises a plurality of storage subsystems.
At the server computer at the first storage subsystem place from first client-requested of client to object.If this object is not present in the first storage subsystem, then server computer is identified as the second storage subsystem the duplicate with the object of asking, and the object of asking comprises content and metadata.Server computer will be submitted to the second storage subsystem to the object tools request of the object of asking, and independently receive content and the metadata of the object of asking from the second storage subsystem.The new duplicate that server computer uses the metadata receive and content to generate this object at the first storage subsystem place, and the metadata of the new duplicate of this object returned to client.
In certain embodiments, when receiving the first client-requested, server computer from the first client-requested extract the object ask object ID, inquire about the metadata table of the first storage subsystem and determine according to Query Result whether this object is present in the first storage subsystem with this object ID.
In certain embodiments, server computer is identified the second storage subsystem by sending to the 3rd storage subsystem to the inquiry of the object of asking, and receives response from the 3rd storage subsystem.The 3rd storage subsystem comprises the metadata of the object that is stored in a plurality of storage subsystems place.Response from the 3rd storage subsystem is identified as the second storage subsystem the source and the storage of the piece in the first storage subsystem is identified as the destination.
In certain embodiments, the metadata management assembly of server computer by the metadata replication request being submitted to the second storage subsystem submitted to the second storage subsystem with the object tools request to the object of asking.The metadata replication request comprises the identifier of the object of asking.When the metadata management assembly from the second storage subsystem has received the metadata of the object of asking, server computer uses the sector table of the object of asking to come the identifying object content in the position at the second storage subsystem place, and the content replication request is submitted to the Content Management assembly of the second storage subsystem, the content replication request comprises the location of content of identifying of the object of asking.In certain embodiments, give this content replication request than not being the higher priority of other guide duplicate requests that is triggered by the real time client request.
In certain embodiments, when receiving the metadata of the object of asking, server computer is that in the metadata table of the first storage subsystem this object generates metadata entry, and with the metadata entry that recently generates of the metadata inserting metadata table that receives.For the metadata entry that recently generates, server computer is " just uploading (uploading) " with the Obj State setup of attribute in the metadata entry that recently generates, and the metadata entry that will recently generate returns to the client of the request of sending.
In certain embodiments, server computer is from second client-requested of client to the part of the client appointment of access object.For each piece of the object that receives from the second storage system, if the overlapping of the client appointment of this piece and object, then server returns to this piece the client of the request of sending.In addition, server computer is stored in the duplicate of this piece in the first storage subsystem, and the metadata entry in the first storage subsystem is upgraded to reflect this piece existing in the first storage subsystem.
In certain embodiments, server computer is by being each piece generator Data Update that receives, come the metadata entry in the first storage subsystem is upgraded, metadata updates comprises the positional information of this piece in the first storage subsystem, and comes the sector table of metadata entry is upgraded with the positional information of this piece.If a plurality of piece storages that are positioned at the first storage subsystem of object, then server computer is updated to the Obj State attribute of metadata entry " final state (finalized) ", if and a plurality of a plurality of storages that are positioned at the first storage subsystem of object, then server computer is updated to the Obj State attribute of metadata entry " just at final state (finalizing) ".
In certain embodiments, server computer is stored a plurality of a plurality of storing mobiles from the first storage subsystem to the purpose plot of the first storage subsystem, if and a plurality of of object are positioned at the purpose plot storage of the first storage subsystem, then the Obj State attribute with metadata entry is updated to " final state ".
According to some embodiment, distributed memory system is comprised of one or more computer systems, and each computer system comprises one or more processors; And for storing the storer of one or more programs.These one or more processors are configured to carry out one or more programs at the first storage subsystem place, and these one or more programs comprise for following instruction: from first client-requested of client to the object that is not present in the first storage subsystem; The second storage subsystem is identified as the duplicate with the object of asking, and the object of wherein asking comprises content and metadata; To submit to the second storage subsystem to the object tools request of the object of asking; And the content and the metadata that independently receive the object of asking from the second storage subsystem; With the metadata that receives and the next new duplicate at the first storage subsystem place formation object of content; And the metadata of the new duplicate of object returned to client.
Therefore, provide to make in distributed data base sooner to copying of data, and made it possible to the more method and system of efficient use of network resources.Copy faster the information access of information (or to) that causes quickly providing to the user renewal; And the more effective use of the network bandwidth allowed more multi-band is wide can use other tasks, make other process operations faster.
Description of drawings
For better understanding previous embodiment of the present invention and other embodiment of the present invention, should be by reference to the accompanying drawings with reference to following embodiment, in the accompanying drawings, same reference numbers spreads all over accompanying drawing and refers to counterpart.
Figure 1A is the residing concept map of physical field that is used for the Multi-instance of database is placed on all parts of the world according to some embodiment.
Figure 1B diagram is according to the basic functionality at each example place of some embodiment.
Fig. 2 be diagram according to the block diagram of the Multi-instance of the replicated database of some embodiment, wherein be that the first example shows exemplary process and/or process collection.
Fig. 3 is diagram according to the illustrative examples that is used for system of some embodiment and diagram according to the user in this example of some embodiment block diagram of mutual piece with it.
Fig. 4 is the block diagram in the instance server of Figure 1B, 2 and 3 illustrated various programs and process of can being used for according to some embodiment.
Fig. 5 diagram is according to the instance server of some embodiment exemplary allocations to illustrated various programs or process in Figure 1B, 2 and 3.
How Fig. 6 diagram is stored according to the metadata of some embodiment.
Fig. 7 diagram is according to the data structure that is used for storing the change amount of some embodiment.
Fig. 8 A-8E diagram is according to the data structure that is used for storing metadata of some embodiment.
Fig. 9 A-9E diagram is according to block diagram and the data structure of dynamic replication data between the different sub-systems that is used for distributed memory system in the world of some embodiment.
Figure 10 A-10C diagram is according to the process flow diagram of the computer implemented method of dynamic replication data between the different sub-systems that is used for distributed memory system in the world of some embodiment.
Now with detailed reference example, its example is illustrated in the accompanying drawings.In the following detailed description, many details have been set forth, so that complete understanding of the present invention to be provided.Yet, in the situation that there are not these details, can put into practice the present invention to it will be evident to one of ordinary skill in the art that.
The purpose of specific embodiment only be used for to be described in employed term in the description of this invention in this article, and and to be not intended to be limitation of the present invention.As employed in the description of the present invention and claims, unless in addition clearly indication of linguistic context, singulative indefinite article and definite article are intended to also comprise plural form.It is to be further understood that as employed word in this article " and/or " refer to and comprise listing one or more any in the item and might making up of being associated.Should further be understood that, word " comprise " and/or " comprising " when using in this manual, existence or the interpolation of one or more other features, step, operation, element, assembly and/or its group are not still got rid of in the existence of the feature that appointment is illustrated, step, operation, element and/or assembly.
Embodiment
This instructions has been described distributed memory system.In certain embodiments, illustrated among Figure 1A, distributed memory system in the whole world or global range realize.In these embodiments, exist in the various positions of the earth 100 by network communication link 104-1,104-2 ..., the Multi-instance 102-1, the 102-2 that connect of 104-M ..., 102-N.In certain embodiments, example (such as example 102-1) is corresponding to data center.In other embodiments, Multi-instance is physically located at same data center place.Although the concept map of Fig. 1 shows the network communication link 104-1 of limited quantity etc., yet typical embodiment will have more network communication link.In certain embodiments, same instance between have two or more network communication links, as at example 2(102-2) and example 6(102-6) between link 104-5 and 104-6 illustrated in.In certain embodiments, network communication link is comprised of optical cable.In certain embodiments, the subnetwork communication link uses wireless technology, such as microwave.In certain embodiments, each network communication link has nominated bandwidth and/or specifies cost for the use to this bandwidth.In certain embodiments, safeguard the statistics about the one or more the transmission of datas in the internetwork communication link, comprise throughput, availability number of times, link reliability etc.The database (as shown in Fig. 2 and 3) that each example typically has the data storage and is associated, and utilize server computer group (referring to " instance server " of Fig. 4) to carry out all tasks.In certain embodiments, there are the one or more examples with limited function, such as using the repeater that acts in the data transmission between other examples.The limited function example can or can not have any one in the data storage of describing in Fig. 3 and 4.
Figure 1B is shown in the data at example 102-i place and stores the also program of copy data between example.Basic data item 122-1,122-2 etc. are by one or more Database Unit 120 storages and management.Each example 102-i has copied cells 124, and it copies data to other examples and from other example copy datas.Copied cells 124 is also managed one or more Figure 134 of going out, the data that its tracking sends to other examples and confirmed by other examples.Similarly, the one or more figure that enter of copied cells 124 management, it follows the tracks of the data that receive from other examples at the example place.
Each example 102-i has one or more clock servers 126 that correct time is provided.In certain embodiments, clock server 126 will be provided as the microsecond number that passes through in the past well-defined some the time.In a preferred embodiment, to give security be the monotonically increasing time read to clock server.In certain embodiments, each instance server 102-i is stored in himself Provisioning Instance Identifier 128 of unique identification in the distributed memory system.Provisioning Instance Identifier can be preserved with any convenient form, such as 32 integers, 64 integers or regular length character string.In certain embodiments, Provisioning Instance Identifier (directly or indirectly) is incorporated in other unique identifiers that this example place generates.In certain embodiments, example 102-i storage line identifier seed 130, it is used when new data item 122 is inserted into database.Row identifier is used for each data item 122 of unique identification.In certain embodiments, the row identifier seed is used for creating row identifier, and increases progressively simultaneously, so that next row identifier will be larger.In other embodiments, the timestamp that provides from clock server 126 creates unique row identifier, and does not use the row identifier seed.In certain embodiments, be used when generating row identifier or unique identifier for the change of (describing with reference to figure 6-7 below) data with number breaker (tie breaker) value 132.In certain embodiments, with the number breaker 132 by permanent storage in nonvolatile memory (such as magnetic or CD).
The element that to describe in Figure 1B is incorporated among the embodiment of illustrated distributed memory system 200 in Fig. 2 and 3.In certain embodiments, will be at the functional blobmaster(binary large object main control computer that is included in described in Figure 1B) 204 and metadata store 206 in.In these embodiments, primary data store (that is, and blob) in data storage 212,214,216,218 and 220, and by bitpusher(bit pusher) 210 management.About the blob(binary large object) metadata in metadata store 206, and by blobmaster 204 management.Metadata is functional corresponding to what identify in Figure 1B.Although the metadata about the storage of blob provides exemplary embodiment of the present invention, yet persons of ordinary skill in the art will recognize that the present invention is not limited to this embodiment.
Distributed memory system 200 shown in Fig. 2 and 3 comprises some global application and configuration information 202, and Multi-instance 102-1 ..., 102-N.In certain embodiments, global configuration information comprises example list and about the information of each example.In certain embodiments, the information about each example comprises: memory node (data storage) collection at this example place; Status information, its metadata that is included in certain embodiments this example place are the overall situations or local; And arrival is in the network address of blobmaster 204 and the bitpusher 210 at this example place.In certain embodiments, global configuration information 202 resides on the single physical position, and this information is looked and need be retrieved.In other embodiments, the copy with global configuration information 202 is stored in a plurality of positions.In certain embodiments, the copy with global configuration information 202 is stored in part or all of example place.In certain embodiments, only can revise global configuration information in single position, and by unidirectional replication change is transferred to other positions.In certain embodiments, have some global application, distribute demons (daemon) 346(referring to Fig. 3 such as the position), it at any given time only can be a position operation.In certain embodiments, global application is in selected example place operation, and in other embodiments, and one or more in the global application move in the server group that is different from example.In certain embodiments, the position that global application is just being moved is designated as the part of global configuration information 202, and As time goes on stands to change.
Exemplary process, process and data set that Fig. 2 and 3 is shown in each example place operation or exists, and the custom system that can access distributed memory system 200 and part global application and configuration.In certain embodiments, user 302 is mutual with custom system 304, and custom system 304 can be other equipment that computing machine maybe can move web-browsing device 306.The user uses 308 and moves in the web-browsing device, and the functional network 328 that uses that usage data storehouse client 310 provides is accessed the data that are stored in the distributed memory system 200.Network 328 can be the Internet, Local Area Network, wide area network (WAN), wireless network (WiFi), local embedded net or these any combination.In certain embodiments, load balancer 314 dispensing work load between example, therefore, a plurality of requests that single client 310 is sent not necessarily all forward same instance to.In certain embodiments, the information in the database client 310 usefulness global configuration storage 312 comes to be the suitable example of request identification.Client uses the information from global configuration storage 312 to find available blobmaster 204 and bitpusher 210 collection, and the place that contacts them.Blobmaster 204 usefulness global configuration storage 312 is all reproduction process identification equity collection.Information in the Bitpusher 210 usefulness global configuration storage 312 is followed the tracks of it and is responsible for which storage.In certain embodiments, the user uses 308 in custom system 304 rather than 306 operations of web-browsing device.It is that e-mail applications and Online Video are used that example user is used.
In certain embodiments, each example has blobmaster 204, and it is the program with the external interface of accomplishing metadata table 206.For example, external user is used 308 and can be asked the metadata corresponding with the blob of appointment with client 310.Notice that " blob " (that is, binary large object) is to gather (for example, image, video, binary file, executable code etc.) as the binary data that single entity is stored in the database.This instructions alternately uses word " blob " and " object ", and mentions that the embodiment of " blob " also can be applied to " object ", and vice versa.Generally speaking, word " object " can refer to " blob " or any other object, such as database object, file etc., or the part of aforementioned object (or subset).In certain embodiments, each example 102 in its metadata table 206, have be stored in distributed memory system 200 in the corresponding metadata of each blob Anywhere.In other embodiments, example is divided into two kinds: with each blob of distributed memory system 200 (be used for) global metadata those and only with those of (only be used to be stored in the example place blob) local metadata.Particularly, blob typically resides in the only relatively small subset place of example.Metadata table 206 comprises each the relevant information with blob, such as which example have blob copy, who can access blob and store blob at each example place with the data of which kind of type.Exemplary data structure diagram among Fig. 8 A-8E has been shown other metadata that are stored in certain embodiments in the metadata table 206.
When client 310 wanted to read the blob data, blobmaster 204 offered client 310 with one or more read flags, and client 310 should offer bitpusher 210 by one or more read flags, to obtain the access to relevant blob.When client 310 was write data, client 310 write bitpusher 210.Bitpusher 210 returns the stored mark of writing of these data of indication, and then client 310 is write this mark and offered blobmaster 204, so that these data are attached to blob.Client 310 is communicated by letter with bitpusher 210 by network 328, and network 328 can be the consolidated network of communicating by letter with blobmaster 204.In a preferred embodiment, according to the communication of load balancer 314 routes between client and bitpusher 210.Because load balance or other factors, and can heel communicating by letter of the blobmaster 204 at an example place and communicating by letter at the bitpusher 210 at different instances place.For example, the first example can be the overall example that band is useful on the metadata of all blob, but may not have the copy of desired blob.The metadata that is used for blob is identified the copy which example has desired blob, and therefore, in this example, communicating by letter subsequently to read or write with bitpusher 210 is at the different instances place.
Bitpusher 210 stores data copy to data, and from data storage copy data.In certain embodiments, read-write operation comprises whole blob.In other embodiments, each blob comprises one or more (chunk), and the read-write operation of being carried out by bitpusher is only for piece.In the part of these embodiment, bitpusher is processing block only, and does not know blob.In a preferred embodiment, bitpusher does not know the content of the data that read or write, and does not attempt explanatory content.The embodiment of Bitpusher 210 supports the data storage of one or more types.In a preferred embodiment, bitpusher supports a plurality of Stored Data Types, comprises embedded data storage 212, large table (BigTable) storage 214, file server storage 216 and band storage 218.Some embodiment support other other storages 220, or are designed to adapt to when the data storage of other types becomes available or technical feasibility the data storage of these other types.
In fact embedded storage 212 uses the storage space 208 in the metadata store 206.Embedded storage provides the sooner access to data, but has limited capacity, and therefore embedded storage generally is used for relatively " less " blob.In certain embodiments, embedded storage is limited in blob as single storage.In certain embodiments, " less " means the blob less than 32 kilobyte.In certain embodiments, " less " means the blob less than 1 megabyte.Because memory technology promotes larger memory capacity, so even current to be considered to that larger blob compares with other blob also may be " less ".
In certain embodiments, exist with extended formatting or with other other that other equipment or technology are stored data and store 200.In certain embodiments, but bitpusher 210 be designed to adapt to this other memory technology when other memory technology time spent that becomes.
In the Stored Data Type each has special characteristic, and it makes them is useful to some purpose.For example, embedded storage provides fast access, but uses up the more expensive finite space.As another example, the band storage is very cheap, and safe longer-term storage is provided, but client can not directly read or write band.In certain embodiments, the coupling of the feature of the feature of based on data and data storage is with specific data storages type storing data automatically.In certain embodiments, the user 302 of establishment file can specify the type of data storage to be used.In other embodiments, the type of data to be used storage is used 308 by the user who creates the blob data and is determined.In certain embodiments, use the combination of top choice criteria.In certain embodiments, each blob is distributed to storage policy 326, and storage policy designated store character.Blob strategy 326 can be specified the quantity of the copy of blob to be stored, the position that blob should store with the data of which kind of type and be saved, copy should be saved etc.For example, strategy can specify in should two copies on the dish (greatly table storage or file storage), a copy should be arranged on tape and in different positions, metropolis all three copies should be arranged.In certain embodiments, blob strategy 326 is stored as global configuration and uses a part of 202.
In certain embodiments, each example 102 has arbitration clock server 228, and it comprises the one or more servers with internal clocking.Event comprises metadata change amount 608, order be important, therefore very important to the maintenance of consistent clock.The a plurality of independent clocks of arbitration clock server periodic polling, and determine whether rationally consistent they are.If it is inconsistent that clock becomes, and how to solve this inconsistent to be unclear, then can to require human intervention.Can depend on for clock number and the inconsistent character of arbitrating inconsistent solution.For example, if there are five clocks, and only one inconsistent with other four, then this four consistent almost is correct certainly.Yet, if each in five clocks has the time that significantly is different from other, will not have and know solution.
In certain embodiments, each example has replication module 224, and its identification will be copied to blob or the piece of other examples.In certain embodiments, replication module 224 can use one or more formation 226-1,226-2 ...Item to be replicated is placed in the formation 226, but and works as the resource time spent item is copied.In certain embodiments, the item in the replication queue 226 has the priority of distribution, but and when bandwidth time spent that becomes the limit priority item is copied.Existence can be added item to the various ways of replication queue 226.In certain embodiments, when creating or revise blob or blocks of data, add item to replication queue 226.For example, if final user 302 revises blob at example 1 place, then this modification need to be transferred to the every other example of the copy with this blob.In replication queue 226, have among the embodiment of priority, have relatively high priority based on the copy item of blob content changing.In certain embodiments, ask to add item to replication queue 226 based on the active user to the blob that is positioned at remote example place.For example, if exist only in blob at the example place of India in the user in California request, then item can be inserted replication queue 226 to copy this blob in California local example from the example in India.That is, in any case because must be from the remote location copies data, what come in handy is that these data are kept at local example place.These dynamic replication requests obtain limit priority, because they respond over against active user's request.
In certain embodiments, have the background copy process, its blob visit data that provides based on blob strategy 326 and statistics server 324 creates and deletes the copy of blob.The Blob strategy specifies the quantity of the blob copy of expectation, copy should stay position and the data of depositing and should store to preserve with the data of which type.In certain embodiments, strategy can be specified other character, such as the generation number of blob to be preserved or be used for preserving the time frame of the copy of varying number.For example, preserved three copies, and preserved two copies after this in front 30 days after establishment.Use blob strategy 326, with the statistical information that statistics server 324 provides, the position distributes demons 322 to determine that position and which copy of the latest copy of establishment blob can be deleted.When new copy to be created, will record and insert replication queue 226, it has lowest priority.Be unsettled U.S. Provisional Patent Application sequence number No.61/302 that on February 9th, 2010 submitted to, common, 936, the operation of using and the position is distributed demons 322 to blob strategy 326 has been described in " System and Method for managing Replicas of Objects in a Distributed Storage System " in more detail, its by reference in full mode be incorporated herein.
Fig. 4 is the block diagram of the instance server 400 of consistent with the some embodiments of the present invention operation for identifying at Fig. 2 and 3 of diagram.Instance server 400 typically comprises: one or more processing units (CPU) 402, and it is used for carrying out module, program and/or the instruction that is stored in storer 414, processes operation thereby carry out; One or more networks or other communication interfaces 404; Storer 414; And the one or more communication buss 412 that are used for making these assembly interconnects.In certain embodiments, instance server 400 comprises user interface 406, and it comprises display device 408 and one or more input equipment 410.In certain embodiments, storer 414 comprises high-speed random access memory, such as DRAM, SRAM, DDR RAM or other random access solid-state memory device.In certain embodiments, storer 414 comprises nonvolatile memory, such as one or more disk storage device, optical disc memory apparatus, flash memory device or other non-volatile solid-state memory devices.In certain embodiments, storer 414 comprises the one or more memory devices that are positioned at away from the place of CPU 402.Storer 414 or as an alternative the non-volatile memory devices in storer 414 comprise computer-readable recording medium.In certain embodiments, program, module and data structure or its subset below the storage of the computer-readable recording medium of storer 414 or storer 414:
One or more servers use 420, such as the blobmaster 204 of the external interface that is provided to the blob metadata; Provide from the bitpusher 210 of the right of data storage read-write data; Data are copied to another replication module 224 from an example; The arbitration clock server 228 of stabilizing clock is provided; Determine that the position of the position that the copy of blob should be positioned at distributes demons 322; And such as illustrated other server functionalities in Fig. 2 and 3.As illustrated, two or more servers application 422 and 424 can be carried out at the Same Physical computing machine;
One or more database servers 426, it is provided to storage and the access of one or more databases 428.Database 428 can provide storage for metadata 206, replication queue 226, blob strategy 326, global configuration 312, statistics server 324 employed statisticss and any other functional employed auxiliary data base.Each database 428 has the one or more tables with data recording 430.In certain embodiments, some databases comprise summary sheet 432, such as statistics server 324 employed statisticss; And
One or more file servers 434, it provides read-write such as file #1(436) and file #2(438) the right of file.File server is functional can directly to be provided by operating system (for example, UNIX or Linux) or by the software application such as Google's file system (GFS).
In the top element of identifying each can be stored among aforementioned memory equipment one or more, and corresponding to the instruction set that is used for carrying out above-mentioned functions.The module that will not identify in the above or program (that is, instruction set) are embodied as stand alone software program, process or module, therefore, in various embodiments, can each subset of these modules be made up or rearrange in addition.In certain embodiments, storer 414 can be stored in above-identified module and the subset of data structure.In addition, other module or the data structure do not described above storer 414 can be stored in.
Although Fig. 4 shows for carrying out such as the instance server in Fig. 2 and 3 illustrated various operations or storage data, yet, Fig. 4 more is intended to as the functional description that may be present in the various features in one or more calculating units, rather than as the in this article structural representation of the embodiment of description.In fact, and be familiar with such as those of ordinary skills, can be to making up of independently illustrating, and can make some separation.For example, some that can realize in Fig. 4, independently illustrating in independent computer system, and single can be by one or more computer systems realizations.Be used for realizing operating, each the actual quantity of computing machine in database or the document storage system, and between them how assigned characteristics will change with embodiment is different, and can depend in part on data volume, example at each example place and use data business volume that the period must process and example to use the data business volume that the period must process average on the peak.
In order to provide to the faster response of client and for fault-tolerance is provided, among each program of example place operation or process generally are distributed in a plurality of computing machines.Each the quantity of instance server 400 of distributing in program or the process can change, and depends on operating load.Fig. 5 provide with distribute to function in the relevant exemplary information of each the typical amounts of instance server 400.In certain embodiments, each example has about 10 instance server as blobmaster running (502).In certain embodiments, each example has about 100 instance server as bitpusher running (504).In certain embodiments, each example has about 50 instance server as large list server running (506).In certain embodiments, each example has about 1000 instance server as file system server running (508).File system server is file system storage 216 storage data, and is the basic storage mediums of large table storage 214 storages.In certain embodiments, each example has about 10 instance server as band server running (510).In certain embodiments, each example has about 5 instance server as band main frame running (512).In certain embodiments, each example has about 10 instance server that execution (514) comprises the replication management of dynamic and background copy.In certain embodiments, each example has about 5 instance server as arbitration clock server running (516).
Fig. 6 diagram is according to the storage of the metadata data item 600 of some embodiment.Each data item 600 has unique row identifier 602.Each data item 600 is row 604, its have base value 606 and zero or a plurality of change amount 608-1,608-2 ..., 608-L.When not having the change amount, then the value of data item 600 is base values 606.When having the change amount, " value " of data item 600 be by with base value 606 beginning, and in order change is measured 608-1 etc. and be applied to base value and calculate.Therefore row has single value, its expression individual data item or clauses and subclauses.Although in certain embodiments, the change amount is stored whole new value, yet in a preferred embodiment, the least possible data of change amount storage are identified change.For example, the metadata about blob comprises which example of appointment has this blob and who can access this blob.If copy this blob to other example, then metadata change amount only needs to specify this blob available at this other example place.The position that the change amount needn't specify blob to be positioned at.Along with the quantity increase of change amount, the time of reading out data increases.Compression process is measured 608-1 etc. with change and is integrated with base value 606, creates the new base value of the change of incorporating in the change amount.
Although the storage shown in Fig. 6 is relevant with the metadata about blob, yet identical process is applicable to other non-relational databases that data wherein change with ad hoc fashion, such as the cylindricality database.For example, Access Control List (ACL) can be embodied as the multibyte integer, wherein each positional representation item, position or people.Change a visit information and can not revise other positions, therefore, the change amount that change is encoded needs little room.Data are among the less structurized alternative embodiment therein, the change amount can be encoded to the instruction of for how binary data stream being made change.At publication RFC 3284, " The VCDIFF Generic Differencing and Compression Data Format ", The Internet Society has described some embodiment in 2002.Therefore those of ordinary skills will recognize, be applied to the constructed structural data that is equally applicable to some other types of metadata at this.
Fig. 7 illustrates the example data structure that keeps the change amount.Each change amount is applied to unique row, and therefore, the change amount comprises the row identifier 702 of the row that it is applied to.In order to guarantee data consistency must the change amount to be applied to base value with well-defined order at the Multi-instance place.Sequence identifier 704 is that the overall situation is unique, and specifies the order of using the change amount.In certain embodiments, sequence identifier comprises timestamp 706 and unique same several breaker values 708 of distributing to each example that the change amount is created therein.In certain embodiments, timestamp is the microsecond number of the well-defined point in elapsed time.In certain embodiments, will be calculated as the physical machine of operation blobmaster and the function of process id with the number breaker.In certain embodiments, only comprise or be combined in the Provisioning Instance Identifier of other features at example place with the number breaker.In certain embodiments, will be stored as with number breaker value 132 with number breaker 708.By making up with timestamp 706 with number breaker 708, sequence identifier is the order that the unique again approximate at least change amount of the overall situation is created.In some cases, may be slightly different at the clock at different instances place, therefore, the defined order of sequence identifier may be not corresponding with " reality " order of event.Yet, in a preferred embodiment, be the order that sequence identifier creates according to " sequentially " that define.This is to change the order that will be employed at all example places.
To the change to metadata copy to other examples at an example place.Can be with the actual change 712 of various form storages to base value.In certain embodiments, use to those the similar data structures in Fig. 8 A-8E and store change, but structure is made amendment so that most of field is optional.Only actual the change is received in, and therefore, the required space of storage or transmission change amount is very little.In other embodiments, change is stored as key/value right, wherein key is identified the data element of change uniquely, and value is the new value of data element.
Data item is that the change amount can comprise the information about transmitting among some embodiment about the metadata of blob therein.Because dynamic replication blob between example at any time, and also can make amendment to metadata at any time, so sometimes, the latest copy of blob does not have all metadata that are associated at first.In these cases, " forwarding address " safeguarded in the source of latest copy, and the change amount is transferred to the example of the latest copy with blob in the section sequence identifier of a certain scope (for example, for) sometime.
Fig. 8 A-8E diagram is used for the data structure of storing metadata in certain embodiments.In certain embodiments, these data structures are present in the storage space of executive routine or process.In other embodiments, these data structures are present in the nonvolatile memory, such as magnetic or CD drive.In certain embodiments, these data structures form the agreement impact damper, facility transmission structure data between physical equipment or process.For example referring at the obtainable Protocol Buffer Language Guide of http://code.google.com/apis/protocolbuffers/docs/proto.html place.
The blob generation 804 can comprise one or more " from generation to generation " of each blob.In certain embodiments, the blob that stores is unmodifiable, therefore not directly edits.Alternatively, " change " of blob is embodied as to the deletion of previous version with to the establishment of redaction.Among these blob versions 806-1, the 806-2 etc. each is a generation, and has himself clauses and subclauses.In certain embodiments, generation that will be the oldest before the storage physical removal, the generation of storage fixed qty.The quantity of the generation of preserving in other embodiments, is arranged by blob strategy 326.(quantity of the generation that strategy can be preserved is set to 1, means to remove the old generation when the new generation is created.) in certain embodiments, remove deliberately " slowly " to the old generation, provide " deletion " that recover old chance from generation to generation in a certain period.Describe and each generation 806 certain metadata that are associated with reference to figure 8B below.
Blob quotes 808 can comprise one or more 810-1,810-2 etc. of quoting separately.Each is quoted is independent link to same basic blob content, and each is quoted and has himself visit information collection.In most of the cases, only exist to one of given blob and quote.When the user clearly asks a plurality of quoting, just a plurality of quoting may appear only.This process is similar to and creates link (hard link) in the desk file system.Described with each with reference to figure 8C below and quoted the information that is associated.
Embedded data 812 comprises one or more embedded data item 814-1,814-2 etc.Embedded data is not " metadata "---it is the actual content of the blob that preserves that is applied to of metadata.For the blob of less, can be by the blob content be stored to be optimized with metadata to the access of described blob.In this case, when client required to read metadata, blobmaster returned actual blob content, rather than read flag 816 and about where finding the information of blob content.Blob is stored in the metadata table than hour ability owing to only working as blob, so for the general at the most embedded data item 814-1 that exists of each blob.In Fig. 8 D, described below and be each embedded data item 814 canned data.
Illustrated in the embodiment of Fig. 8 B, each generation 806 comprises some information.In certain embodiments, number 822(or generation ID from generation to generation) unique identification is from generation to generation.Numbering can be made to specify a certain generation to be visited by client from generation to generation.In certain embodiments, if client is not specified from generation to generation numbering, then blobmaster 204 will return the information about the up-to-date generation.In certain embodiments, each follows the tracks of the some time point from generation to generation.Particularly, some embodiment follow the tracks of the time (824) that is created from generation to generation.Some embodiment follow the tracks of blob by the time (826) of the last access of user.In certain embodiments, at last access refers to visit to end user, and in other embodiments, at last access also comprises management access.Some embodiment follow the tracks of the time (828) that blob is changed at last.In some embodiment that follow the tracks of when blob is changed at last, change only is applied to metadata, because the blob content is unmodifiable.Some embodiment provide and stop sign 830, and it stops access from generation to generation.In these embodiments, blobmaster 204 will still allow to access and have the blob authority from generation to generation that stops or blob certain user or the client from generation to generation of seeing prevention.Some embodiment provide and keep sign 832, and the data during it will guarantee from generation to generation are not removed.This can be used for kept by lawsuit or the data of other orders of law court.Except these independent data about the generation, have one or more expressions 818 from generation to generation.With reference to figure 8E independent expression 820-1,820-2 etc. have been described below.
Fig. 8 C diagram is used for keeping the data structure of quoting separately according to some embodiment's.Each quote 810 comprise that unique identification quotes quote ID 834.When user 302 access blob, the user uses 308 and must specify and quote ID, to access blob.In a preferred embodiment, each is quoted has the owner 836, and it can be to create this user who quotes or process.Each is quoted has himself Access Control List (ACL) (" ACL "), and whom it can specify to access the content of blob and those access rights.For example, having the right to read the group of blob can be greater than the group that can edit or delete blob.In certain embodiments, deliberately very slow to removing of quoting, so that the recovery from mistake to be provided.In certain embodiments, this provides deleting more slowly by gravestone (tombstone) of quoting.Gravestone can be realized in a number of ways, comprises the explanation to the gravestone time 840, quotes and will really be removed at this point.In certain embodiments, the gravestone time is to be labeled be used to after removing 30 days quoting.In a preferred embodiment, have the certain user of special access right or account and can check or revise and be marked with quoting of gravestone, and have the right of the gravestone of removing (that is, blob being brought back to life).
In certain embodiments, each is quoted has himself blob strategy, and it can be specified by tactful ID 842.The blob strategy specifies the quantity of the copy of blob, the position that copy is positioned at, the data storage of which type to be ready to use in blob etc.When having a plurality of quoting, suitable " strategy " is the associating of corresponding strategies.For example, if 2 copies of a strategy request, wherein at least one be in Europe, and 3 copies of another request, and wherein at least one is in North America, and then minimum federation policies is 3 copies, and wherein at least one is in Europe and at least one is in North America.In certain embodiments, quote separately also to have and stop sign 844 and keep sign 846, it is take with the prevention that defines from generation to generation as each with keep indicating that 830 and 832 identical modes work.In addition, the user that blob quotes or the owner can specify the other information about blob, and it can comprise information 850 on the dish or the information 848 in the storer.The user can be kept at any information about blob in these fields.
Fig. 8 D diagram is according to the embedded data item 814 of some embodiment.Each embedded data item 814 is assigned to the specific generation, therefore comprises and numbers 822 from generation to generation.The embedded data item is also specified expression type 852, and it represents item 820 in conjunction with numbering from generation to generation 822 unique identifications.(referring to Fig. 8 E and the description that is associated below.) allowing a plurality of embedded blocks to be used for the embodiment of a blob, embedded data item 814 is gone back physical block ID 856.In certain embodiments, embedded data item 814 physical blocks skew 854, the skew that it specifies current block to begin apart from blob.In a preferred embodiment, be offset with the byte physical block.In certain embodiments, have prestrain sign 858, whether its data that specify on the dish are preloaded into storer for sooner access.The content 860 of embedded data item 814 is stored with other data elements.
Fig. 8 E diagram is used for storing the data structure that blob represents according to some embodiment's.Expression is the different views of same physical data.For example, digital picture expression can be the high-resolution photograph.The second expression of same blob data can be corresponding with this same photograph than small thumbnails.Each expression data item 820 is specified expression type 852, and it will be corresponding to " high-resolution photograph " and " thumbnail " in the top example.The position that duplicate information 862 identification blob have been replicated, storage reference listing (that is, which piece storage has the piece about blob).In certain embodiments, duplicate information 862 comprises tracking blob and other required auxiliary datas of piece thereof.Each expression data item also comprises 864 set of blob section, and it is assigned to the skew of each piece in the blob, to allow the reconstruction to blob.
As blob during by initial creation, it experiences some stages, and some embodiment follow the tracks of these stages in each expression data item 820.In certain embodiments, final state mode field 866 indicates when blob is UPLOADING(is just uploaded), when blob is that FINALIZING(is just in final state) and when blob is final state of FINALIZED().Most of expression data item 820 will have final state of FINALIZED() state.In certain embodiments, some final state data 868 is stored during the final state process.
A major function of the distributed memory system 200 as shown in Fig. 1 and 3 is to make in the client at diverse geographic location place to access the data that are stored in the distributed memory system.For client is preferably served, distributed memory system 200 utilizes the background copy process, this process helps to anticipate from the potential data access request that is positioned near the client the respective instance, is that blob generates duplicate and duplicate is placed on the different instances place of distributed memory system according to the replication strategy of blob.
Even so, only this strategy can not stop following generation: example receives not residing in this particular instance but in the client-requested of another example or the blob in the Multi-instance of distributed memory system.When this occurs, at least two possible solutions are arranged.One is client-requested to be transmitted to the example of the duplicate with the blob that asks, and allows this example that this client-requested is processed.As illustrating below, the method is acceptable in some cases, for example, if example and client from be not the remarkable delay that causes away from very between request and response, and in order to provide better services to client, any other cost relevant with the network connection between example and client is worth.But along with the distance between two entities increases, this may cause long delay more and to the more high pressure of finite element network resource, this method may become and still less can accept.Such as the second solution in the following detailed description of be, original instance is from the dynamic retrieve data of other examples, and when providing data to client the data that retrieve is stored in the original instance place.
Especially, Fig. 9 A has described diagram and how the blob of client-requested has been stored from a blobstore(binary large object) dynamically copy to the block diagram of another blobstore, and Figure 10 A to 10C shows the corresponding process flow diagram of this dynamic replication process.The different assemblies that Fig. 9 B-9E has described distributed memory system make to be supported in the block diagram of the data structure of the dynamic replication between these two blobstore.
For purpose of explanation, Fig. 9 A has described the subset of the assembly of the distributed memory system 200 as shown in Fig. 1 and 3, comprise use 902, client 904 and three blobstore 906,908,910.In this example, blobstore_A 908 and blobstore_B 906 are local examples of distributed memory system, and blobstore_G 910 is overall examples of distributed memory system 200.Notice, the word in this application " blobstore " is corresponding to the example 102 of system 200, because it stores a plurality of blob, each blob is by the one or more data objects that form (for example, image, text document or audio/video stream).
As shown in Fig. 9 A, use 902 by with the metadata 904-1(of blob for example, unique blob ID) offer client 904(Figure 10 A 1001), call client 904 and come to read blob from distributed memory system.As response, the blobstore_A 908 of client 904 identification load balances and its blobmaster_A 908-3(Figure 10 A 1003), and the read request that will comprise the identifier of the blob that asks send to blobmaster_A 908-3(Figure 10 A 1005).Any metadata of the blob that the identification of the blobstore of load balance is not needed client 904 to provide to ask is provided.Therefore, do not guarantee that the blobstore_A 908 of the load balance identified has the duplicate of the blob that asks really.
When receiving the read request of client, blobmaster_A 908-3 for the metadata entry corresponding with blob ID search its metadata table 908-11(Figure 10 A 1007).As described in conjunction with Fig. 8 A-8E in the above, metadata entry comprises a plurality of clauses and subclauses of describing the various aspects that are stored in the blob in the distributed memory system.If metadata table 908-11 comprises the clauses and subclauses corresponding with the blob ID of client appointment (Figure 10 A 1009), then blobmaster_A 908-3 check use (or calling the user of application) whether be authorized to access this blob(Figure 10 A 1011).In certain embodiments, blobmaster_A 908-3 determines with the read flag 1816 of blob whether application is authorized to access this blob.Be considered to not have qualification access (1011 of Figure 10 A, no) if use, then blobmaster_A 908-3 returns error message (Figure 10 A 1013) to client 904.Otherwise (1011 of Figure 10 A is), blobmaster_A 908-3 returns the metadata of the blob that asks to the client of the request of sending, and it comprises for example sector table and read flag collection (Figure 10 A 1015).Other metadata that return to client 904 can comprise the piece store list of striding distributed memory system, and each piece storage has the duplicate of the blob that asks.At some in particular cases, if the size of blob is enough little, the metadata of returning can comprise the embedded block of blob.
When receiving metadata, the bitpusher_A 908-5 of the load balance that client 904 identification is associated with blobstore_A 908, and be the piece that is associated with blob with read flag send to bitpusher_A 908-5(Figure 10 A 1017).Then Bitpusher_A 908-5 returns to the piece of client-requested client to satisfy the original read request used (Figure 10 A 1019).Notice, in this example, dynamic replication is optional, because the blob of client-requested is present among the blobstore_A 908.
The situation that Fig. 9 A diagram is different, wherein blobmaster_A 908-3 does not find the metadata entry corresponding with the blob of client-requested (1009 of Figure 10 A, no).When this occurs, near the overall blobstore(of the load balance the blobmaster_A 908-3 request for example, blobstore_G 910) help (Figure 10 B 1021).Different from the local blobstore_A that only has the metadata that resides in the blob among the blobstore_A, overall blobstore_G also has the metadata at the blob at any other example place of distributed memory system.The blob ID that uses blobmaster_A 908-3 to provide, blobmaster_G 910-1 be the metadata of the blob of client-requested search its metadata table 910-3(Figure 10 B 1024).If do not find metadata entry (1024 of Figure 10 B of coupling, no), then blobmaster_G 910-1 returns error message to blobmaster_A 908-3, and then blobmaster_A 908-3 is transmitted to error message client with refusal client-requested (Figure 10 B 1025).If find metadata (1024 of Figure 10 B is), but the application of calling client is not authorized to access 1027 of blob(Figure 10 B, and is no), then client receives the error message (Figure 10 B 1025) of its request of refusal equally.
If find metadata (1024 of Figure 10 B is), and use and also to be authorized to access 1027 of blob(Figure 10 B, be), then will satisfy the blob request of access of client.Before any blob metadata was returned to blobmaster_A 908-3, blobmaster_G 910-1 need to determine whether the latest copy of the blob that asks should dynamically be copied at blobstore_A 908 places (Figure 10 B 1029).In certain embodiments, blobmaster_G 910-1 considers a plurality of factors when making decision.The first factor is at blobstore_A 908 and has distance between the nearest source instance of duplicate of the blob that asks.In certain embodiments, the distance between two blobstore is carved into destination blobstore and measures from the second constantly delay that source blobstore receives response by send first o'clock of request from destination blobstore to source blobstore.For example, can be such as the predefined threshold delay collection of giving a definition: for trans-city communication, 5ms postpones; For the communication of striding the continent, 40ms postpones; And for transcontinental communication, 80ms postpones.The delay that is higher than corresponding threshold level between the source and destination example can be supported the decision of dynamic replication, and vice versa.
The second factor that affects the decision of blobmaster_G 910 is the cost for the network connection of dynamic replication blob between the source and destination example.Because distributed memory system typically will be than distributing to the higher priority of background copy to dynamic replication, so this higher priority can be corresponding to higher network connection cost.On the other hand, this factor uses the blob that asks to come balance in the contiguous popularity of destination example.For example, if existed in the past high requirements or blobmaster_G 910 expections of the blob that asks or analog very highly to the tomorrow requirement of this blob or analog, then it can determine that the cost that is associated with dynamic replication is worth in the long run.
The 3rd factor that can affect the decision of blobmaster_G 910 is that distributed memory system may be observed some management or legal requirements.For example, should not safeguard that at the example of the U.S. requirement of the duplicate of the blob that asks can be negated the every other factor of preference dynamic replication.In certain embodiments, distributed memory system is used for blob with the dynamic replication decision process, to adjust the default copy strategy of this blob.For example, it is two duplicate in distributed memory system that client can be specified the default copy strategy of blob, and is being with backing copy on the storage system.In practice, if necessary, distributed memory system can add by dynamic replication more duplicate of blob.
As shown in Figure 10 B, suppose that blobmaster_G 910-1 determines not need to copy 1029 of blob((Figure 10 B, no), for example, the duplicate that has blob near the client of the request of sending at least one example, blobmaster_G 910-1 with the metadata of blob return to blobmaster_A 908-3(Figure 10 B 1031).As described in conjunction with Fig. 8 A-8E in the above, the metadata of blob comprises: duplicate information 1862, and it can be to have the tabulation that the storage of the duplicate of blob is quoted; And the blob section, it is the sector table that the logical address of blob is mapped to piece ID.Then Blobmaster_A 908-3 will comprise that the metadata of sector table, duplicate information and read flag returns to the client of the request of sending (Figure 10 B 1033).
When receiving metadata, the blobstore_C of client identification load balance and its bitpusher_C(Figure 10 B 1035).In certain embodiments, this blobstore_C is near the example client 904.In future, client 904 will can not be any ROL request-online blobstore_A 908 relevant with this blob, but blobstore_C is pointed in its request to this blob.For example, if client 904 determines the content of retrieval blob, then client 904 one or more read flags can be sent to bitpusher_C(Figure 10 B 1037).Then Bitpusher_C accesses the corresponding blocks storage in blobstore C, and with the piece of asking return to client 904(Figure 10 B 1039).
As shown in Fig. 9 A, if blobmaster_G 910-1 determines to carry out to the blob of client-requested dynamic replication (1029 of Figure 10 B, be), then then blobmaster_G 910-1 will be that the blobstore_B906 of a long-range example with duplicate of the blob that asks is identified as the source of copying, and alternatively, the chunkstore_A 908-7 in blobstore_A 908 is identified as the destination of copying (Figure 10 C 1041).Blobmaster_G 910-1 be by returning to blobmaster_A 908-3 about the information of these two entities and other blob metadata, trigger blobmaster_A 908-3 and begin the blob that asks is carried out dynamic replication (Figure 10 C 1043).
In certain embodiments, metadata and the content with blob copies to respectively destination blobstore from source blobstore.The demand to the blob content of client depends on that usually it is to the result of blob metadata.Sometimes, client does not need to access the blob content after reading the blob metadata.From the response of blobmaster_G 910-1, blobmaster_A 908-3 identifies source blobstore_B 906, and the metadata replication request is sent to blobstore_B 906 blobmaster_B 906-1(Figure 10 C 1045).Blobmaster_B 906-1 upgrades the metadata of the blob among the metadata table 906-5 when having received this request, and is current just as the source of dynamic replication with the partial copy product of indication blob, stops any attempt of deleting this duplicate.In addition, blobmaster_B 906-1 returns to blobmaster_A908-3 with the metadata of blob.Use the metadata receive, blobmaster_A 906-3 generates new clauses and subclauses (Figure 10 C 1047) in the metadata table 908-11 of blobstore 908.In certain embodiments, blobmasterP_A 908-3 for example is set to " uploading(just uploads) " by the final state state of blob, come the metadata that recently generates among the metadata table 908-11 is upgraded, just be generated at blobstore 908 places with the new duplicate of indicating blob.
In certain embodiments, blobmaster_A 908-3 its metadata that receives from blobmaster_B 906-1 is returned to the request of sending client 904(Figure 10 C 1051).As mentioned above, client can be asked the sector table that needs to access blob before any part of blob content at it.In addition, client can after metadata is analyzed, select not retrieve any blob content.When doing like this, blobmaster_A 908-3 can be more promptly responds to the request of client, and need not wait for that the blob content arrives destination blobstore_A 908 from source blobstore_B 906.From the metadata that blobmaster_B 906-1 returns, the sector table of blobmaster_A908-3 identification blob, its logic scope with blob is mapped to one or more ID of the piece depository in blobstore_B906.Then Blobmaster_A 908-3 notifies the repqueue_A 908-1 of the blobstore 908 piece duplicate requests that is ranked, with the bitpusher_A 908-5 that impels load balance from blobstore_B 906 retrieval pieces (Figure 10 C 1049).
Fig. 9 D has described illustrated blocks duplicate requests 940, and it comprises a plurality of attributes: copy from generation to generation ID 946, expression type 948, piece tabulation 950 of ID942, blob basis ID 944, blob and copy priority 952.In certain embodiments, copy source piece storage ID, the purpose plot storage ID that is identified in the piece storage 908-7 in the blobstore_A908 that ID 942 further comprises the pieces storage 906-7 that is identified in the blobstore_B 906, initiate the user ID and the network quality-of-service parameters that copy.Blob basis ID 944 and blob be the unique blob that identifies the specific generation to be replicated of combination of ID 946 from generation to generation.In certain embodiments, two parameters are by original the providing of client of initiating the request of access of blob.Piece tabulation 950 typically comprises one or more ID and piece serial ID pair, every a pair of unique piece that is identified in the corresponding blocks storage.Copy priority 952 indication this be higher priority in real time/dynamic replication or lower priority background copy.
Bitpusher_A 908-5 identifies piece tabulation to be replicated from the piece duplicate requests, and this piece tabulation is transmitted to bitpusher_B 906-3.For each piece to be replicated, bitpusher_B 906-3 generates the piece reference record of the metadata that comprises piece, and the piece reference record is returned to bitpusher_A 908-5 with the piece content.
Fig. 9 C has described to comprise the data structure of the illustrated blocks reference record 930 of following a plurality of attributes: piece ID 932, piece serial ID 934, the storage that comprises blobstore ID 936-1 and chunkstore ID936-3 quote 936 and comprise blob basis ID 938-1, blob from generation to generation ID 938-3, skew 938-5, the block size 938-7 of the piece in blob and optionally represent the blob reference metadata 938 of type 938-9.In certain embodiments, piece ID 932 is the content Hash with a plurality of positions (for example, 64 or 160).Because same block can have the different incarnation corresponding from different blob, so the specific incarnation that piece serial ID 934 is used for example such as the piece creation-time stabs identification block.
For each piece that bitpusher_B 906-3 returns, bitpusher_A 908-5 with this piece insert corresponding destination chunkstore_A 908-7(Figure 10 C 1053).In certain embodiments, the piece reference record that bitpusher_A 908-5 provides with bitpusher_B 906-3 comes for new piece generates the piece index record, and this piece index record is inserted the piece concordance list 908-9 of chunkstore_A908-5.
Fig. 9 B has described to comprise the data structure of the illustrated blocks index record 920 of following a plurality of attributes: short block ID 922, the storage that comprises blobstore ID 924-1 and chunkstore ID 924-3 quotes 924, piece metadata 926(further comprises long piece ID 926-1, piece creation-time 926-3, reference count 926-5, incarnation (or sequence) ID 926-7 and block size 926-9) and one or more blob that will comprise piece each blob of blob reference listing 928(of being identified as the port of blob quote and further comprise blob basis ID 928-1, blob is ID928-3 from generation to generation, piece in blob is offset 928-5 and optionally represents type 928-7).In certain embodiments, short block ID 922 is exposed to client, and long piece ID 926-1 is inner for distributed memory system.
Notice, the metadata of the blob of original stored in metadata table 908-11 is the copy from the metadata of blobstore_B 906.In certain embodiments, the duplicate of same blob at the different instances place has different sector table, to reflect the accurate physical location of corresponding duplicate in the corresponding blocks storage.When each piece arrives blobstore_A 908 from blobstore_B 906, and when being placed in specific depository in the blobstore_A 908, the sector table of corresponding blob correspondingly needs to be updated.In certain embodiments, bitpusher_A 908-5 notifies new piece to arrive bitpusher_A 908-5 place to repqueue_A 908-1.Repqueue_A 908-1 is the generator Data Update then, and with this metadata updates send to blobmaster_A 908-3(Figure 10 C 1054).Metadata updates comprises the physical location (it can or can not be chunkstore_A 908-7) of new piece in blobstore_A 908.
The exemplary meta-data that Fig. 9 E has described the to comprise following a plurality of attributes more data structure of new record 960: blob basis ID 962, blob is quoted the sector table change amount 966 that ID 964 and identification block reside in piece storage wherein.In certain embodiments, the corresponding metadata entry in the ID 954 unique identification metadata tables of blob basis, and blob quotes the sub-clauses and subclauses of reference metadata in the ID 956 identification metadata entries.The more detailed description of the sub-clauses and subclauses of reference metadata is provided in conjunction with Fig. 8 C in the above.
Use metadata updates, blobmaster_A 908-3 upgrades to trace into the position of the piece that recently arrives to the sector table of blob.In certain embodiments, blobmaster_A 908-3 checks whether the piece that recently arrives is scheduled the last piece that copies to the blob of blobstore_A908 from blobstore_B 906.If so, then blobmaster_A 908-3 then the test zone segment table determine that all pieces of being associated with same blob are whether in the same storage (for example, chunkstore_A 908-7) of blobstore_A 908.If so, then blobmaster_A 908-3 is updated to " finalized " with the final state state of blob from " uploading ", and indication is successfully completed the blob of client-requested from the dynamic replication of blobstore_B 906 to blobstore_A 908.Metadata replication subsequently upgrades in the metadata of the duplicate at other example places same blob, to be included in the new duplicate at blobstore_A 908 places.
In certain embodiments, when a plurality of of same blob were copied to destination blobstore_A 908 from source blobstore_B 906, they can be placed at first by the different bitpusher at blobstore_A 908 places the different masses storage in the blobstore_A 908.Blobmaster_A 908-3 can tell whether this occurs by the test zone segment table.If a plurality of different masses storages that are positioned at blobstore_A 908 that are associated with same blob, then blobmaster_A 908-3 is updated to " finalizing " with the final state state of blob from " uploading ".Then Blobmaster_A 908-3 indicates repqueue_A 908-1 to impel bitpusher_A 908-5 that piece is moved to blobmaster_G 910-1 or the storage of the selected purpose of blobmaster_A 908-3 plot.For the piece of each migration, repqueue_A 908-1 also sends to metadata updates blobmaster_A 908-3, so that sector table is upgraded.In the time of in all pieces all are found in the same storage, then blobmaster_A 908-3 is updated to " finalized " with the final state state of blob from " uploading ", and indication is successfully completed the blob of client-requested from the dynamic replication of blobstore_B 906 to blobstore_A 908.Metadata replication subsequently upgrades in the metadata of the duplicate at other example places same blob, to be included in the new duplicate at blobstore_A 908 places.
As mentioned above, piece 904 receives the metadata of blob, and from its sector table of this meta-data extraction.If one or more of needing access to be associated with blob of client 904, then it can be from piece ID corresponding to sector table identification, and be the bitpusher_A 908-5 that the piece of asking sends to the read flag of piece ID and correspondence load balance.When receiving client-requested (Figure 10 C 1055), the corresponding blocks among the bitpusher_A 908-5 identification chunkstore_A 908-7, and they are returned to client (Figure 10 C 1057).In certain embodiments, piece one (for example arrives bitpusher_A 908-5 place, if it has received the client-requested to piece), bitpusher_A 908-5 just directly offers the piece that receives the client of the request of sending, and generates simultaneously the local copy of piece in chunkstore_A 908-7.As mentioned above, the decision of making the partial copy product of blob is in order more promptly to be the following client-requested service to same blob.In certain embodiments, be stored in the new duplicate of blob at blobstore_A 908 places identical with duplicate at the blob at blobstore_B 906 places.
For purpose of explanation, with reference to specific embodiment the front description has been described.Yet, superincumbent illustrative discuss and be not intended to be limit or limit the present invention to disclosed precise forms.In view of top instruction, many modifications and variations are possible.For best illustrated principle of the present invention and practical application thereof, select and described embodiment, thereby make those skilled in the art with the various modifications of the special-purpose that is suitable for expecting, preferably utilize the present invention and various embodiment.
Claims (21)
1. computer implemented method that is used in distributed memory system, copying object, wherein said distributed memory system comprises a plurality of storage subsystems, comprising:
Have one or more processors and storage the first storage subsystem place by the storer of one or more programs of described one or more processors execution,
From client to not being present in the first client-requested of the object described the first storage subsystem;
The second storage subsystem is identified as the duplicate with the object of asking, and the object of wherein asking comprises content and metadata;
To submit to described the second storage subsystem to the object tools request of the object of asking;
Independently receive described content and the metadata of the object of asking from described the second storage subsystem;
The metadata that use receives and content generate described object at described the first storage subsystem place new duplicate; And
The described metadata of the described new duplicate of described object is returned to described client.
2. computer implemented method according to claim 1 further comprises:
When receiving described the first client-requested,
Extract the object ID of the object of asking from described the first client-requested;
Inquire about the metadata table of described the first storage subsystem with described object ID; And
Determine according to Query Result whether described object is present in described the first storage subsystem.
According to claim 1 with 2 in any one described computer implemented method, wherein identify the second storage subsystem and further comprise:
To send to the 3rd storage subsystem to the inquiry of the object of asking, wherein said the 3rd storage subsystem comprises the metadata of the object that is stored in described a plurality of storage subsystems place; And
Receive response from described the 3rd storage subsystem, wherein said response is identified as described the second storage subsystem the source and the storage of the piece in described the first storage subsystem is identified as the destination.
4. according to claim 1, any one the described computer implemented method in 2 and 3, wherein will submit to described the second storage subsystem to the object tools request of the object of asking and further comprise:
The metadata replication request is submitted to the metadata management assembly of described the second storage subsystem, wherein said metadata replication request comprises the identifier of the object of asking;
Receive the described metadata of the object of asking from the described metadata management assembly of described the second storage subsystem, wherein said metadata comprises the sector table of the object of asking;
Identify described contents of object in the position at described the second storage subsystem place with described sector table; And
The content replication request is submitted to the Content Management assembly of described the second storage subsystem, wherein said content replication request comprises the location of content of identifying of the object of asking.
5. computer implemented method according to claim 4, wherein said content replication request are given the higher priority of other guide duplicate requests that is triggered by the real time client request than not being.
According to claim 4 with 5 in any one described computer implemented method, further comprise:
When receiving the described metadata of the object of asking,
Be that described object generates metadata entry in the metadata table of described the first storage subsystem;
The metadata that receives is inserted the metadata entry that recently generates of described metadata table;
Be " just uploading " with the Obj State setup of attribute in the described metadata entry that recently generates; And
The described metadata entry that recently generates is returned to the client of the request of sending.
7. computer implemented method according to claim 6, wherein said contents of object comprises one or more, further comprises:
Access second client-requested of part of the client appointment of described object from described client;
For the relevant block that receives from described the second storage system,
If described with the overlapping of the described client appointment of described object, then return to the described client of sending request with described;
Described duplicate is stored in described the first storage subsystem; And
Described metadata entry in described the first storage subsystem is upgraded, to reflect described existing in described the first storage subsystem.
8. computer implemented method according to claim 7, wherein the described metadata entry in described the first storage subsystem is upgraded further and comprise:
Be described generator Data Update, wherein said metadata updates comprises described positional information in described the first storage subsystem;
Come the sector table of described metadata entry is upgraded with described described positional information;
If described a plurality of piece storages that are positioned at described the first storage subsystem of described object, then the described Obj State attribute with described metadata entry is updated to " final state "; And
If the described a plurality of a plurality of storages that are positioned at described the first storage subsystem of described object, then the described Obj State attribute with described metadata entry is updated to " just in final state ".
9. computer implemented method according to claim 8 further comprises:
Described a plurality of described a plurality of storing mobiles from described the first storage subsystem are stored to the purpose plot of described the first storage subsystem; And
If the described a plurality of described purpose plot storages that are positioned at described the first storage subsystem of described object, then the described Obj State attribute with described metadata entry is updated to " final state ".
10. computer system that is used in distributed memory system, copying object, wherein said distributed memory system comprises a plurality of storage subsystems, comprising:
One or more processors;
Be used for storing the storer of one or more programs, wherein said one or more processors are configured to carry out described one or more program at the first storage subsystem place, and described one or more programs comprise for following instruction:
From client to not being present in the first client-requested of the object described the first storage subsystem;
The second storage subsystem is identified as the duplicate with the object of asking, and the object of wherein asking comprises content and metadata;
To submit to described the second storage subsystem to the object tools request of the object of asking;
Independently receive described content and the metadata of the object of asking from described the second storage subsystem;
The metadata that use receives and content generate described object at described the first storage subsystem place new duplicate; And
The described metadata of the described new duplicate of described object is returned to described client.
11. computer system according to claim 10 further comprises:
Be used for extracting from described the first client-requested the instruction of the object ID of the object of asking;
Be used for inquiring about with described object ID the instruction of the metadata table of described the first storage subsystem; And
Be used for determining according to Query Result whether described object is present in the instruction of described the first storage subsystem.
12. according to claim 10 with 11 in any one described computer system, the described instruction that wherein is used for identification the second storage subsystem further comprises:
Be used for sending to the inquiry of the object of asking the instruction of the 3rd storage subsystem, wherein said the 3rd storage subsystem comprises the metadata of the object that is stored in described a plurality of storage subsystems place; And
Be used for receiving from described the 3rd storage subsystem the instruction of response, wherein said response is identified as described the second storage subsystem the source and the storage of the piece in described the first storage subsystem is identified as the destination.
13. according to claim 10, any one the described computer system in 11 and 12, wherein be used for and will the described instruction that described the second storage subsystem is submitted in the object tools request of the object of asking be further comprised:
Be used for the metadata replication request is submitted to the instruction of the metadata management assembly of described the second storage subsystem, wherein said metadata replication request comprises the identifier of the object of asking;
Be used for receiving from the described metadata management assembly of described the second storage subsystem the instruction of the described metadata of the object of asking, wherein said metadata comprises the sector table of the object of asking;
Be used for identifying described contents of object in the instruction of the position at described the second storage subsystem place with described sector table; And
Be used for the content replication request is submitted to the instruction of the Content Management assembly of described the second storage subsystem, wherein said content replication request comprises the location of content of identifying of the object of asking.
14. computer system according to claim 13, wherein said content replication request are given the higher priority of other guide duplicate requests that is triggered by the real time client request than not being.
15. according to claim 13 with 14 in any one described computer system, further comprise:
Use the described metadata of the object of asking that receives from described the second storage subsystem to be the instruction of described object generator data strip purpose at the metadata table of described the first storage subsystem;
Be used for the metadata that receives is inserted the instruction of the metadata entry that recently generates of described metadata table;
Be used for to be the instruction of " just uploading " at the Obj State setup of attribute of the described metadata entry that recently generates; And
Be used for the described metadata entry that recently generates is returned to the instruction of the client of the request of sending.
16. computer system according to claim 15, wherein said contents of object comprises one or more, further comprises:
Be used for accessing from described client the instruction of the second client-requested of part of the client appointment of described object;
For the relevant block that receives from described the second storage system,
If be used for described with the overlapping of the described client appointment of described object, then return to described instruction of sending the client of request with described;
Be used for described duplicate is stored in instruction in described the first storage subsystem; And
Be used for the described metadata entry of described the first storage subsystem is upgraded, to reflect the described instruction that exists in described the first storage subsystem.
17. computer system according to claim 16, the described instruction of wherein upgrading for the described metadata entry to described the first storage subsystem further comprises:
Be used to the instruction of described generator Data Update, wherein said metadata updates comprises described positional information in described the first storage subsystem;
For the instruction that comes with described described positional information the sector table of described metadata entry is upgraded;
If be used for described a plurality of piece storages that are positioned at described the first storage subsystem of described object, then the described Obj State attribute of described metadata entry be updated to the instruction of " final state "; And
If be used for the described a plurality of a plurality of storages that are positioned at described the first storage subsystem of described object, then the described Obj State attribute of described metadata entry be updated to the instruction of " just in final state ".
18. computer system according to claim 17 further comprises:
Be used for described a plurality of instructions of storing to the purpose plot of described the first storage subsystem from the described a plurality of storing mobiles of described the first storage subsystem; And
If be used for the described a plurality of described purpose plot storages that are positioned at described the first storage subsystem of described object, then the described Obj State attribute of described metadata entry be updated to the instruction of " final state ".
Be configured to the nonvolatile computer-readable recording medium of one or more programs of being carried out by the first storage subsystem 19. a storage is associated with the distributed memory system that comprises a plurality of storage subsystems, described the first storage subsystem has one or more processors and stores the storer of one or more programs of being carried out by described one or more processors, and described one or more programs comprise for following instruction:
From client to not being present in the first client-requested of the object described the first storage subsystem;
The second storage subsystem is identified as the duplicate with the object of asking, and the object of wherein asking comprises content and metadata;
To submit to described the second storage subsystem to the object tools request of the object of asking;
Independently receive described content and the metadata of the object of asking from described the second storage subsystem;
The metadata that use receives and content generate described object at described the first storage subsystem place new duplicate; And
The described metadata of the described new duplicate of described object is returned to described client.
20. computer-readable recording medium according to claim 19 further comprises for following instruction:
When receiving described the first client-requested,
Extract the object ID of the object of asking from described the first client-requested;
Inquire about the metadata table of described the first storage subsystem with described object ID; And
Determine according to Query Result whether described object is present in described the first storage subsystem.
Be configured to the nonvolatile computer-readable recording medium of one or more programs of being carried out by the first storage subsystem 21. a storage is associated with the distributed memory system that comprises a plurality of storage subsystems, described the first storage subsystem has one or more processors and stores the storer of one or more programs of being carried out by described one or more processors, and described one or more programs comprise to be treated to carry out the instruction that requires any one the described method among the 1-9 with enforcement of rights by described one or more processors.
Applications Claiming Priority (13)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US30290910P | 2010-02-09 | 2010-02-09 | |
US30289610P | 2010-02-09 | 2010-02-09 | |
US30293610P | 2010-02-09 | 2010-02-09 | |
US61/302,936 | 2010-02-09 | ||
US61/302,896 | 2010-02-09 | ||
US61/302,909 | 2010-02-09 | ||
US13/022,579 US8341118B2 (en) | 2010-02-09 | 2011-02-07 | Method and system for dynamically replicating data within a distributed storage system |
US13/022,579 | 2011-02-07 | ||
US13/022,290 US8352424B2 (en) | 2010-02-09 | 2011-02-07 | System and method for managing replicas of objects in a distributed storage system |
US13/022,290 | 2011-02-07 | ||
US13/023,498 US8874523B2 (en) | 2010-02-09 | 2011-02-08 | Method and system for providing efficient access to a tape storage system |
US13/023,498 | 2011-02-08 | ||
PCT/US2011/024246 WO2011100365A1 (en) | 2010-02-09 | 2011-02-09 | Method and system for dynamically replicating data within a distributed storage system |
Publications (2)
Publication Number | Publication Date |
---|---|
CN103038742A true CN103038742A (en) | 2013-04-10 |
CN103038742B CN103038742B (en) | 2015-09-30 |
Family
ID=43797888
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201180017920.9A Active CN103038742B (en) | 2010-02-09 | 2011-02-09 | For the method and system of Dynamical data replication in distributed memory system |
Country Status (3)
Country | Link |
---|---|
EP (2) | EP2534570A1 (en) |
CN (1) | CN103038742B (en) |
WO (2) | WO2011100365A1 (en) |
Cited By (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN105677805A (en) * | 2015-12-31 | 2016-06-15 | 北京奇艺世纪科技有限公司 | Data storing and reading method and device using protobuf |
CN105940396A (en) * | 2013-12-27 | 2016-09-14 | 谷歌公司 | Hierarchical chunking of objects in a distributed storage system |
CN106527961A (en) * | 2015-09-15 | 2017-03-22 | 伊姆西公司 | Method and apparatus used for ensuring data consistency |
CN107544999A (en) * | 2016-06-28 | 2018-01-05 | 百度在线网络技术（北京）有限公司 | Sychronisation and synchronous method, searching system and method for searching system |
CN108804693A (en) * | 2018-06-15 | 2018-11-13 | 郑州云海信息技术有限公司 | A kind of distributed storage method and device |
CN108959513A (en) * | 2018-06-28 | 2018-12-07 | 郑州云海信息技术有限公司 | The method and its data processing equipment of data are read under a kind of distributed memory system |
CN109074304A (en) * | 2016-02-16 | 2018-12-21 | 泰克年研究发展基金会公司 | The data distribution system of optimization |
CN111125021A (en) * | 2018-10-31 | 2020-05-08 | Emc知识产权控股有限公司 | Method and system for efficiently restoring a consistent view of a file system image from an asynchronous remote system |
Families Citing this family (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JPWO2013141308A1 (en) * | 2012-03-22 | 2015-08-03 | 日本電気株式会社 | Distributed storage system, storage control method and program |
CN103838830B (en) * | 2014-02-18 | 2017-03-29 | 广东亿迅科技有限公司 | A kind of data managing method and system of HBase data bases |
US11468011B2 (en) * | 2019-04-11 | 2022-10-11 | Singlestore, Inc. | Database management system |
Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN1776595A (en) * | 2004-11-19 | 2006-05-24 | 国际商业机器公司 | Autonomic data caching and copying on a storage area network aware file system using copy services |
US20090083342A1 (en) * | 2007-09-26 | 2009-03-26 | George Tomic | Pull Model for File Replication at Multiple Data Centers |
US7653668B1 (en) * | 2005-11-23 | 2010-01-26 | Symantec Operating Corporation | Fault tolerant multi-stage data replication with relaxed coherency guarantees |
Family Cites Families (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP4420351B2 (en) * | 2005-09-30 | 2010-02-24 | 富士通株式会社 | Hierarchical storage system, control method and program |
JP4756545B2 (en) * | 2006-05-15 | 2011-08-24 | 株式会社日立製作所 | Storage system having a plurality of tape devices |
-
2011
- 2011-02-09 CN CN201180017920.9A patent/CN103038742B/en active Active
- 2011-02-09 EP EP20110704385 patent/EP2534570A1/en not_active Ceased
- 2011-02-09 WO PCT/US2011/024246 patent/WO2011100365A1/en active Application Filing
- 2011-02-09 WO PCT/US2011/024249 patent/WO2011100368A1/en active Application Filing
- 2011-02-09 EP EP11705357.9A patent/EP2534571B1/en active Active
Patent Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN1776595A (en) * | 2004-11-19 | 2006-05-24 | 国际商业机器公司 | Autonomic data caching and copying on a storage area network aware file system using copy services |
US7653668B1 (en) * | 2005-11-23 | 2010-01-26 | Symantec Operating Corporation | Fault tolerant multi-stage data replication with relaxed coherency guarantees |
US20090083342A1 (en) * | 2007-09-26 | 2009-03-26 | George Tomic | Pull Model for File Replication at Multiple Data Centers |
Cited By (12)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN105940396A (en) * | 2013-12-27 | 2016-09-14 | 谷歌公司 | Hierarchical chunking of objects in a distributed storage system |
CN105940396B (en) * | 2013-12-27 | 2019-07-26 | 谷歌有限责任公司 | The level chunking of object in distributed memory system |
CN106527961A (en) * | 2015-09-15 | 2017-03-22 | 伊姆西公司 | Method and apparatus used for ensuring data consistency |
CN106527961B (en) * | 2015-09-15 | 2019-06-21 | 伊姆西公司 | Method and apparatus for guaranteeing data consistency |
CN105677805A (en) * | 2015-12-31 | 2016-06-15 | 北京奇艺世纪科技有限公司 | Data storing and reading method and device using protobuf |
CN105677805B (en) * | 2015-12-31 | 2019-05-10 | 北京奇艺世纪科技有限公司 | A kind of data storage, read method and device using protobuf |
CN109074304A (en) * | 2016-02-16 | 2018-12-21 | 泰克年研究发展基金会公司 | The data distribution system of optimization |
CN107544999A (en) * | 2016-06-28 | 2018-01-05 | 百度在线网络技术（北京）有限公司 | Sychronisation and synchronous method, searching system and method for searching system |
CN108804693A (en) * | 2018-06-15 | 2018-11-13 | 郑州云海信息技术有限公司 | A kind of distributed storage method and device |
CN108959513A (en) * | 2018-06-28 | 2018-12-07 | 郑州云海信息技术有限公司 | The method and its data processing equipment of data are read under a kind of distributed memory system |
CN111125021A (en) * | 2018-10-31 | 2020-05-08 | Emc知识产权控股有限公司 | Method and system for efficiently restoring a consistent view of a file system image from an asynchronous remote system |
CN111125021B (en) * | 2018-10-31 | 2023-08-15 | Emc知识产权控股有限公司 | Method and system for efficiently restoring consistent views of file system images from an asynchronous remote system |
Also Published As
Publication number | Publication date |
---|---|
EP2534570A1 (en) | 2012-12-19 |
CN103038742B (en) | 2015-09-30 |
EP2534571A1 (en) | 2012-12-19 |
WO2011100365A1 (en) | 2011-08-18 |
WO2011100368A1 (en) | 2011-08-18 |
EP2534571B1 (en) | 2016-12-07 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN103038742B (en) | For the method and system of Dynamical data replication in distributed memory system | |
US20240045848A1 (en) | Key-value store and file system integration | |
US8341118B2 (en) | Method and system for dynamically replicating data within a distributed storage system | |
US10078681B2 (en) | Differentiated secondary index maintenance in log structured NoSQL data stores | |
CN101233517B (en) | Maintaining an aggregate including active files in a storage pool | |
US8380659B2 (en) | Method and system for efficiently replicating data in non-relational databases | |
CN101233515B (en) | Method and system for communicating with random access device | |
CN101103355B (en) | Methods and apparatus for managing deletion of data | |
CN103023982B (en) | Low-latency metadata access method of cloud storage client | |
CN106484906B (en) | Distributed object storage system flash-back method and device | |
US10061834B1 (en) | Incremental out-of-place updates for datasets in data stores | |
CN104813276A (en) | Streaming restore of a database from a backup system | |
CN110799960A (en) | System and method for database tenant migration | |
CN103597440A (en) | Method for creating clone file, and file system adopting the same | |
JP2019519025A (en) | Division and movement of ranges in distributed systems | |
US9519673B2 (en) | Management of I/O and log size for columnar database | |
Baron et al. | Storage options in the aws cloud | |
CN103037004A (en) | Implement method and device of cloud storage system operation | |
WO2022098744A1 (en) | Data connector component for implementing data requests | |
US10909091B1 (en) | On-demand data schema modifications | |
WO2023009769A1 (en) | Flexible tiering of snapshots to archival storage in remote object stores | |
US20240004867A1 (en) | Optimization of application of transactional information for a hybrid transactional and analytical processing architecture | |
US20240004897A1 (en) | Hybrid transactional and analytical processing architecture for optimization of real-time analytical querying | |
US20240004860A1 (en) | Handshake protocol for efficient exchange of transactional information for a hybrid transactional and analytical processing architecture | |
US11914571B1 (en) | Optimistic concurrency for a multi-writer database |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
C06 | Publication | ||
PB01 | Publication | ||
C10 | Entry into substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
C14 | Grant of patent or utility model | ||
GR01 | Patent grant | ||
CP01 | Change in the name or title of a patent holder | ||
CP01 | Change in the name or title of a patent holder |
Address after: American CaliforniaPatentee after: Google limited liability companyAddress before: American CaliforniaPatentee before: Google Inc. |