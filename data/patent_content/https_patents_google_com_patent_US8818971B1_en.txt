US8818971B1 - Processing bulk deletions in distributed databases - Google Patents
Processing bulk deletions in distributed databases Download PDFInfo
- Publication number
- US8818971B1 US8818971B1 US13/723,898 US201213723898A US8818971B1 US 8818971 B1 US8818971 B1 US 8818971B1 US 201213723898 A US201213723898 A US 201213723898A US 8818971 B1 US8818971 B1 US 8818971B1
- Authority
- US
- United States
- Prior art keywords
- list
- key values
- delete
- key
- index
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related, expires
Links
Images
Classifications
-
- G06F17/30117—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/40—Information retrieval; Database structures therefor; File system structures therefor of multimedia data, e.g. slideshows comprising image and additional audio data
- G06F16/41—Indexing; Data structures therefor; Storage structures
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/23—Updating
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/27—Replication, distribution or synchronisation of data between databases or within a distributed database system; Distributed database system architectures therefor
-
- G06F17/3002—
-
- G06F17/30283—
Definitions
- search engines were created to assist users in locating information from among the millions of documents, mostly web pages, created and available through the use of the Internet. Due to the number of documents available for searching on the Internet, many search engines use distributed databases to store the search index. Distributed databases are used to store records in many different machines that do not share a common central processing unit. The search engines also often use an inverted index, or posting list, to locate documents responsive to a query.
- An inverted index is an index that maps content to locations (e.g., an index that stores a mapping of words to the location of documents that contain the words) rather than mapping the locations to content. For example, a library may contain many books and each book contains words.
- One way to digitize the library is to store the words in the books by book (a forward index), so that the words are grouped by book.
- Another way to digitize the library is to store the books by words (an inverted index) so that the books are grouped by words, similar to a concordance.
- a posting list For example, a posting list for a term (e.g., a word or phrase) may be stored on many different machines, especially with common terms. The system may know what machines store each key value, for example each word, but the system does not know what non-key values, for example books, are stored on each machine.
- deleting non-key values from the inverted index consumes a large amount of resources.
- the distributed database index knows where key values are stored, but does not know where each non-key value, such as a particular book, is stored without retrieving each posting list for each key value.
- deleting a book from the library may result in the system sending a request to each machine in the distributed database to delete the book, if it exists, from any of the posting lists that the machine stores. While this approach may work for a fairly small static library, it is too slow and consumes too many resources for a large library with millions, or even billions, of deletions per day, as exists as for documents on the Internet.
- a computer-implemented method for deleting non-key values from an index distributed over a plurality of computing devices includes maintaining, in a memory, a non-key master list that includes the non-key values that are stored on each of the plurality of computing devices and receiving a list of non-key values to delete.
- the method may also include intersecting the list of non-key values to delete with the non-key master list and creating a first delete list for a first one of the plurality of computing devices and a second delete list for a second one of the plurality of computing devices based on the intersecting, the first delete list including non-key values to be deleted that are stored on the first computing device and the second delete list including non-key values to be deleted that are stored on the second computing devices.
- the method may further include transmitting the first delete list to the first computing device and the second delete list to the second computing device and updating the non-key master list based on the list of non-key values to delete.
- the list of non-key values to delete may include more than one million entries.
- the index may be a posting list and entries in the posting list may include a key value mapped to one or more non-key values.
- the key values may be terms and the non-key values may be document identifiers, such that the posting list maps terms to document identifiers of documents that contain the term.
- the method may include the first computing device removes the non-key values on the first delete list from the portion of the index stored on the first computing device.
- maintaining the non-key master list may include updating the list as part of a rolling index maintenance process and/or the non-key master list may be distinct from a database index file.
- a system may include a plurality of computing devices storing an index distributed over the plurality of computing devices and a central server in communication with the plurality of computing devices.
- the central server may store a non-key value master list that includes non-key values that are stored on each of the plurality of computing devices.
- the central server may be configured to perform operations including receiving a list of non-key values to delete, intersecting the list of non-key values to delete with the non-key master list, and creating a first delete list for a first one of the plurality of computing devices and a second delete list for a second one of the plurality of computing devices based on the intersecting.
- the first delete list may include non-key values to be deleted that are stored on the first computing device and the second delete list may include non-key values to be deleted that are stored on the second computing devices.
- the central server may further be configured to transmit the first delete list to the first computing device and the second delete list to the second computing device and update the non-key master list based on the list of non-key values to delete.
- the index may include posting lists with entries that include a key value mapped to one or more non-key values.
- the key values may be terms and the non-key values may be document identifiers, such that the posting list entries map terms to document identifiers of documents that contain the term and/or the first computing device may remove the non-key values on the first delete list from the posting lists stored on the first computing device.
- the non-key master list may be distinct from a database index file.
- a computer-implemented method for deleting non-key values from an inverted index in a database distributed over a plurality of computing devices may include maintaining, at each of the plurality of computing devices, a list of the non-key values that are stored on the computing device in a memory of the computing device and receiving, by a particular one of the plurality of computing devices, a list of non-key values to delete.
- the method may also include intersecting, by one or more processors of the computing device, the list of non-key values to delete with the list of the non-key values that are stored on the particular computing device and creating a delete list for the particular computing device based on the intersecting, the delete list including non-key values to be deleted that are stored on the particular computing device.
- the method may further include removing the non-key values on the delete list from the plurality of non-key values that are stored on the particular computing device.
- the method may also include updating the list of the non-key values that are stored on the particular computing device.
- the list of non-key values that are stored on each of the plurality of computing devices is distinct from a database index file.
- the index is a posting list with entries including a key value mapped to one or more non-key values.
- the key values may be terms and the non-key values may be document identifiers, such that the posting list maps terms to document identifiers of documents that contain the term.
- a plurality of computing devices may store an index distributed over the plurality of computing devices.
- the computing devices may be configured to perform operations including receiving, by a particular one of the plurality of computing devices, a list of non-key values to delete and intersecting, by one or more processors of the particular computing device, the list of non-key values to delete with the list of the non-key values that are stored on the particular computing device.
- the computing devices may further be configured to create a delete list for the particular computing device based on the intersecting.
- the delete list may include non-key values to be deleted that are stored on the particular computing device.
- the computing devices may also be configured to remove the non-key values on the delete list from the non-key values that are stored on the particular computing device.
- a tangible computer-readable storage medium may have recorded and embodied thereon instructions that cause a computer system to perform the any of the disclosed methods.
- FIG. 1 illustrates an exemplary system in accordance with the disclosed subject matter.
- FIG. 2 illustrates an exemplary distributed index and non-key master list that can be used in accordance with the system of FIG. 1 .
- FIG. 3 illustrates a flow diagram of an exemplary process for performing a bulk delete of non-key values from a distributed index, consistent with disclosed embodiments.
- FIG. 4 illustrates a flow diagram of another exemplary process for performing a bulk delete of non-key values from a distributed index, consistent with disclosed embodiments.
- FIG. 5 shows an example of a computer device that can be used to implement the described techniques.
- FIG. 6 shows an example of a distributed computer device that can be used to implement the described techniques.
- a system and method for performing a bulk delete of non-key values from an inverted index stored over a distributed cluster of machines.
- the method includes creating a non-key master list containing the non-key values, for example documents, including web pages, stored on each machine in the cluster.
- This master list may be stored at an indexing server of the system. Because the master list is large and not used to respond to queries, it may be stored in slow memory, for example a disk.
- the delete list can be intersected with the non-key master list. The intersection may result in one or more machine-specific lists of the non-key values that should be deleted.
- the indexing server may transfer to each machine its machine-specific list of non-key values that need to be deleted.
- Creating machine-specific delete lists offers two advantages over sending the entire delete list to each machine. First, it allows each machine to receive a much smaller list of non-key values, for example documents or document identifiers, to process, decreasing the processing time and resources used on the machine. Second, it allows the indexing server to transmit smaller files to fewer machines, making the overall transfer time shorter and, therefore, further decreasing the processing time for the overall bulk deletion transaction.
- a distributed indexing system may create the non-key master list as part of a rolling index maintenance process. For example, the distributed indexing system may refresh a portion of the index every N days. During the refresh of a particular portion, the distributed indexing system may perform other housekeeping tasks on that portion of the index by, for example, de-fragmenting the index, moving entries to faster-access or slower-access memory device as appropriate, etc.
- FIG. 1 is a block diagram of a distributed indexing system 100 in accordance with an example implementation.
- the system 100 may be used to implement a distributed indexing system using the techniques described herein.
- the depiction of system 100 in FIG. 1 is shown as an Internet-based search engine with an inverted index having, by way of example, terms as key-values and document identifiers as non-key values.
- Documents may include any type of web-based content, including web pages, PDF documents, word-processing documents, images, sound files, JavaScript files, etc. But, it will be appreciated that other network configurations and index uses may be used for implementing such techniques and that an Internet-search engine is used for exemplary purposes.
- the distributed indexing system 100 includes central index server 120 and a plurality of distributed index servers 140 .
- Central index server 120 and distributed index servers 140 may be computing devices that take the form of a number of different devices, such as a standard server, a group of such servers, or a rack server system.
- servers 120 and 140 may be implemented in a personal computer, such as a laptop computer.
- the servers 120 and 140 may be examples of computer device 500 , as depicted in FIG. 5 , or computer device 600 , as depicted in FIG. 6 .
- Central index server 120 can include one or more processors 123 configured to execute one or more machine executable instructions or pieces of software, firmware, or a combination thereof.
- the central index server 120 can include, an operating system (not shown) and one or more computer memories 124 , such as a main memory, configured to store one or more pieces of data, either temporarily, permanently, semi-permanently, or a combination thereof.
- Memory 124 may include any type of storage device that stores information in a format that can be read and/or executed by processor 123 .
- Memory 124 may include volatile memory, non-volatile memory, or a combination thereof, and store indexer module 125 and intersection module 127 .
- indexer module 125 and intersection module 127 may be stored in an external storage device (not shown) and loaded into memory 124 .
- the central index server 120 can also include one or more storage mediums to store term index 131 and document list 133 , such as a computer-readable storage disk or cache, configured to store data in a semi-permanent or substantially permanent form.
- the central index server 120 may include one or more other hardware components not shown in FIG. 1 , such as for example, a display or monitor, a keyboard, a touchscreen, a camera, a mouse, a touchpad, a trackpad, a video processor, etc.
- Indexer module 125 may contain instructions that cause the one or more processors 123 to perform certain operations, including the creation and maintenance of term index 131 and document list 133 .
- Intersection module 127 may contain instructions that cause the one or more processors 123 to perform operations including the creation of one or more machine-specific delete lists.
- System 100 may also include a plurality of distributed index servers 140 , although only one distributed index server 140 is illustrated in FIG. 1 for the purpose of brevity.
- the plurality of distributed index servers 140 may form a cluster of computing devices over which the index is stored.
- Each distributed index server 140 can include one or more processors 143 configured to execute one or more machine executable instructions or pieces of software, firmware, or a combination thereof.
- the distributed index server 140 can include, an operating system (not shown) and one or more computer memories 144 , such as a main memory, configured to store one or more pieces of data, either temporarily, permanently, semi-permanently, or a combination thereof.
- Memory 144 may include any type of storage device that stores information in a format that can be read and/or executed by processor 143 , including volatile memory, non-volatile memory, or a combination thereof.
- the distributed index servers 140 can also include one or more posting lists 147 stored on a tangible computer-readable storage device, such as disk or cache, configured to store data in a semi-permanent or substantially permanent form.
- the distributed index server 140 may include one or more other hardware components not shown in FIG. 1 , such as for example, a display or monitor, a keyboard, a touchscreen, a camera, a mouse, a touchpad, a trackpad, a video processor, etc.
- distributed indexing system 100 is an Internet-based search engine having an inverted index.
- an inverted index generally includes a plurality of posting lists, with each posting list comprised of a term and a list of document identifiers.
- the index entries, or the posting list entries may be stored on several different machines, such as the distributed index servers 140 .
- central index server 120 is communicatively coupled to a plurality of web servers (not shown) storing documents, such as web pages, PDF documents, word processing documents, etc.
- central index server 120 can crawl the contents of the web servers to locate newly added content, such as documents, deleted content, and modified content.
- central index server 120 may create a list of the identified documents so that entries in the posting lists may be appropriately removed.
- the posting lists may actually include identifiers for the documents and not the documents themselves. For example, when a document on the Internet is updated, because of the size of the inverted index and the total number of documents being updated on the Internet, it may be faster and more efficient to treat the update as a delete followed by an insert rather than to try and identify what terms changed in the document and modify only the posting lists associated with those terms. This way central index server 120 avoids having to compare the contents of each document to find out what changed. Instead, each reference to the document may be deleted from the index and new references may be inserted. Thus, in such an implementation, a document modification can be viewed as a type of document deletion that is followed by an insertion.
- Distributed index servers 140 may be in communication with central index server 120 over network 110 .
- the network 110 can be wired or wireless and can include, a local area network (LAN), a wide area network (WAN), etc., implemented using, for example, gateway devices, bridges, switches, and/or so forth.
- the network 110 can include one or more segments and/or can have portions based on various protocols such as Internet Protocol (IP) and/or a proprietary protocol.
- IP Internet Protocol
- the network 110 may include a data access network that provides access to the Internet and/or the World Wide Web.
- the central index server 120 and the plurality of distributed index servers 140 may communicate with and transmit data to each other.
- Central index server 120 may include term index 131 .
- Term index 131 may store a mapping of the index key values, such as terms, to the distributed index servers 140 .
- term index 131 may indicate which of distributed index servers 140 have a posting list 147 for a specific key value.
- term index 131 may indicate which of distributed index servers 140 store a posting list for the term “cat.”
- Term index 131 may be used to determine which of distributed index servers 140 should be searched in response to a query.
- Central index server 120 may create term index 131 as part of an indexing process that, for example, crawls documents that have been updated or added to the Internet, or other such document corpus.
- central index server 120 may include a non-key master list, such as document list 133 .
- the non-key master list may store a mapping of non-key values, for example document identifiers, to the distributed index servers 140 .
- Such a master list may enable central index server 120 to identify each distributed index server 140 where a document is stored.
- a non-key master list such as document list 133
- document list 133 may simply be a text file stored on central index server 120 .
- document list 133 may not be used for responding to queries.
- document list 133 may be used, as explained in more detail below, to create machine-specific deletion lists through an intersection operation. Because document list 133 is not part of the inverted index of system 100 , without document list 133 central index server 120 may not be able to determine what documents are associated with what distributed index servers 140 .
- Distributed index servers 140 may include posting lists 147 .
- Posting lists 147 and term index 131 may, together, constitute a distributed inverted index.
- Posting lists 147 may include one or more entries for each key-value.
- posting lists 147 may include a term followed by the document identifiers of the documents stored on distributed index server 140 that include the term.
- a term may be a single word, a phrase that includes two or more words, or any metadata or other information that is attached to the document, such as anchors derived from Web links, features derived from machine learning models and/or language models.
- FIG. 2 illustrates an exemplary distributed index and non-key master list that can be used in accordance with the system of FIG. 1 .
- FIG. 2 depicts two distributed index servers, 140 A and 140 B.
- distributed index server 140 A stores documents 3, 4, 5, 7, 15, 17, 20, and 23
- distributed index server 140 B stores documents 1-3, 5, 14, 17, 18, 21, 24, 28, 29, and 30.
- a document, such as document 3 can be stored by more than one distributed index server 140 , although it may be more common for a document to be stored on a single index server 140 .
- FIG. 2 illustrates an exemplary distributed index and non-key master list that can be used in accordance with the system of FIG. 1 .
- FIG. 2 depicts two distributed index servers, 140 A and 140 B.
- distributed index server 140 A stores documents 3, 4, 5, 7, 15, 17, 20, and 23
- distributed index server 140 B stores documents 1-3, 5, 14, 17, 18, 21, 24, 28, 29, and 30.
- a document, such as document 3 can be stored by more than one distributed index server 140 , although it
- index server 140 A contains two posting lists, one for the term “quickly” and the other for the term “jump.”
- the posting list for “quickly” contains documents 5, 7, 15, 17, and 23 . This indicates that documents 5, 7, 15, 17, and 23 contain the word “quickly” at least one time in the body of the document.
- other information may be stored in the posting list along with each document identifier, such as ranking scores for the term/document pair.
- FIG. 2 also demonstrates that index server 140 B may contain posting lists for the terms “jump,” “fox,” and “brown.” As shown in FIG. 2 , a posting list for a single term may be stored on different machines, such as the lists for “jump.”
- Term index 131 reflects that the posting lists for “jump” are stored on both index server 140 A and index server 140 B.
- FIG. 2 includes term index 131 for illustrative purposes and that term index 131 may not used in a bulk deletion process, but may be used to respond to queries. Thus, for example, term index 131 in FIG. 2 indicates that a query that includes the term “jump” would require access to both distributed index server 140 A and 140 B to return search results.
- document list 133 of FIG. 2 is not intended for use as a query index. Instead, document list 133 may be used by a bulk deletion process, such as that shown in FIG. 3 , to determine what index servers 140 contain references to a specific document.
- FIG. 3 is a flow diagram of an exemplary process 300 for performing a bulk delete of non-key values in a distributed index.
- Process 300 shown in FIG. 3 may be performed at least in part by a central index server, such as server 120 shown in FIG. 1 and/or a plurality of distributed index servers, such as servers 140 shown FIG. 1 .
- the central index server 120 may store the non-key master list, for example document list 133 , that identifies which documents are stored on each distributed index server 140 (step 305 ).
- Central index server 120 may create the non-key master list as part of the index creation process or an index maintenance process. For example, when central index server 120 identifies a new document, it must decide which of distributed index servers 140 to store the document on.
- central index server 120 may record the decision in, for example, document list 133 .
- the central index server 120 may choose to move the document to a new index server 140 , leave the document where it is currently stored, or store the document on two or more of distributed index servers 140 .
- the central index server 120 may record the decision in document list 133 .
- the non-key master list is not an index, it may be stored in memory devices with slower access times, such as disk, and need not have any particular organization.
- Central index server 120 may then receive a list of non-key values to delete (step 310 ). As explained above, such a list may come from a process that searches for modified documents in a document corpus, such as modified web pages on the Internet. Such a list may be referred to as a delete list. Central index server 120 may intersect the delete list with the non-key master list (step 315 ) to create machine-specific lists of non-key values, such as document identifiers, to delete (step 320 ). For example, using the system shown in FIG. 2 , central index server 120 may determine that documents 5 and 29 have been modified and document 15 has been deleted. Thus, the delete list in this example contains a document identifier for documents 5, 15, and 29.
- Central index server 120 may intersect this delete list with the non-key master list, such as document list 133 , resulting in two machine-specific delete lists.
- the delete list for distributed index server 140 A would contain documents 5 and 15 and the delete list for distributed index server 140 B would contain documents 5 and 29.
- Central index server 120 may then transmit the machine-specific delete lists to the appropriate machines (step 325 ). For example, central index server 120 may transmit the list including documents 5 and 15 to distributed index server 140 A and the list containing documents 5 and 29 to distributed index server 140 B. Thus, each distributed index server 140 receives a delete list that contains only entries for documents stored on the particular distributed index server 140 . This reduces the processing that a distributed index server 140 must perform to locate and delete the references to the non-index values in its posting lists because the index server 140 is not looking for non-key values that do not exist in its posting lists. In addition, distributed index servers 140 that are not associated with any of the documents on the delete list do not have to perform any processing.
- central index server 120 may send the smaller machine-specific delete lists to a number of distributed index servers 140 rather than having to send the entire delete list to each distributed index server 140 . This reduces the transmission time, especially when a delete list contains millions of entries.
- Central index server 120 may then update the non-key master list (step 330 ). For example, if document 15 has been deleted, central index server 120 may remove the reference to document 15 from the document list 133 . Alternatively, if as a result of the change to document 23 central index server 120 has moved document 23 from distributed index server 140 A to distributed index server 140 B, such a change will be reflected in document list 133 . Process 300 may then end, having processed the bulk deletion of non-key values from posting lists on the distributed index servers 140 .
- FIG. 4 illustrates an alternative process 400 for performing a bulk delete of non-key values from a distributed index.
- System 100 may perform process 400 rather than process 300 , although process 300 may be preferable for very large distributed indexes and non-key master lists having, for example, a million or more entries.
- the distributed index servers 140 and not central index server 120 , may store the non-key master list, for example document list 133 .
- Each distributed index server 140 may maintain its own version of document list 133 and the versions may be unique.
- system 100 may have a document list 133 A that contains only the document identifiers of documents stored on distributed index server 140 A and a document list 133 B that contains only the document identifiers of documents stored on distributed index server 140 B.
- each distributed index server 140 may store the same version of document list 133 A.
- central index server 120 may receive a list of documents to be deleted (step 405 ). Central index server 120 may then transmit the delete list to each of the distributed index servers 140 (step 410 ). Each distributed index server 140 may intersect this delete list with its version of the non-key value master list (step 415 ), resulting in the creation of a machine-specific delete list containing documents that should be deleted from the distributed index server 140 (step 420 ). In implementations where distributed index server 140 maintains a unique version of the non-key master list, only one delete list may result from the intersection. In other implementations where the distributed index servers 140 store the same version of the non-key master list, several machine-specific delete lists may result from the intersection and each distributed index server 140 may choose only its machine-specific delete list.
- Each distributed index server 140 may then delete the entries on the delete list from its portion of the index, the portion being, for example, the posting lists 147 . (step 425 ).
- the non-key value master list may then be updated based on the entries in each delete list (step 430 ). For example, if a document list 133 is shared by each distributed index server 140 , central index server 120 may update the document list 133 and push an updated version to each distributed index server 140 . In other implementations, each distributed index server 140 may update its own version of document list 133 . When all non-key entries have been removed and the document list(s) 133 are updated, process 400 may end.
- FIG. 5 shows an example of a generic computer device 500 , which may be central index server 120 or distributed index server 140 of FIG. 1 , which may be used with the techniques described here.
- Computing device 500 is intended to represent various example forms of computing devices, such as laptops, desktops, workstations, personal digital assistants, cellular telephones, smart phones, tablets, servers, and other computing devices, including wearable devices.
- the components shown here, their connections and relationships, and their functions, are meant to be examples only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
- Computing device 500 includes a processor 502 , memory 504 , a storage device 506 , and expansion ports 510 connected via an interface 508 .
- computing device 500 may include transceiver 546 , communication interface 544 , and a GPS (Global Positioning System) receiver module 548 , among other components, connected via interface 508 .
- Device 500 may communicate wirelessly through communication interface 544 , which may include digital signal processing circuitry where necessary.
- Each of the components 502 , 504 , 506 , 508 , 510 , 540 , 544 , 546 , and 548 may be mounted on a common motherboard or in other manners as appropriate.
- the processor 502 can process instructions for execution within the computing device 500 , including instructions stored in the memory 504 or on the storage device 506 to display graphical information for a GUI on an external input/output device, such as display 516 .
- Display 516 may be a monitor or a flat touchscreen display.
- multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory.
- multiple computing devices 500 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).
- the memory 504 stores information within the computing device 500 .
- the memory 504 is a volatile memory unit or units.
- the memory 504 is a non-volatile memory unit or units.
- the memory 504 may also be another form of computer-readable medium, such as a magnetic or optical disk.
- the memory 504 may include expansion memory provided through an expansion interface.
- the storage device 506 is capable of providing mass storage for the computing device 500 .
- the storage device 506 may be or contain a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations.
- a computer program product can be tangibly embodied in such a computer-readable medium.
- the computer program product may also contain instructions that, when executed, perform one or more methods, such as those described above.
- the computer- or machine-readable medium is a storage device such as the memory 504 , the storage device 506 , or memory on processor 502 .
- the interface 508 may be a high speed controller that manages bandwidth-intensive operations for the computing device 500 or a low speed controller that manages lower bandwidth-intensive operations, or a combination of such controllers.
- An external interface 540 may be provided so as to enable near area communication of device 500 with other devices.
- controller 508 may be coupled to storage device 506 and expansion port 514 .
- the expansion port which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet) may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- the computing device 500 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server 530 , or multiple times in a group of such servers. It may also be implemented as part of a rack server system. In addition, it may be implemented in a personal computer such as a laptop computer 522 , or smart phone 536 . An entire system may be made up of multiple computing devices 500 communicating with each other. Other configurations are possible.
- FIG. 6 shows an example of a generic computer device 600 , which may be central index server 120 or distributed index server 140 of FIG. 1 , which may be used with the techniques described here.
- Computing device 600 is intended to represent various example forms of large-scale data processing devices, such as servers, blade servers, datacenters, mainframes, and other large-scale computing devices.
- Computing device 600 may be a distributed system having multiple processors, possibly including network attached storage nodes, that are interconnected by one or more communication networks.
- the components shown here, their connections and relationships, and their functions, are meant to be examples only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
- Distributed computing system 600 may include any number of computing devices 680 .
- Computing devices 680 may include a server or rack servers, mainframes, etc. communicating over a local or wide-area network, dedicated optical links, modems, bridges, routers, switches, wired or wireless networks, etc.
- each computing device may include multiple racks.
- computing device 680 a includes multiple racks 658 a - 658 n .
- Each rack may include one or more processors, such as processors 652 a - 652 n and 662 a - 662 n .
- the processors may include data processors, network attached storage devices, and other computer controlled devices.
- one processor may operate as a master processor and control the scheduling and data distribution tasks.
- Processors may be interconnected through one or more rack switches 658 , and one or more racks may be connected through switch 678 .
- Switch 678 may handle communications between multiple connected computing devices 600 .
- Each rack may include memory, such as memory 654 and memory 664 , and storage, such as 656 and 666 .
- Storage 656 and 666 may provide mass storage and may include volatile or non-volatile storage, such as network-attached disks, floppy disks, hard disks, optical disks, tapes, flash memory or other similar solid state memory devices, or an array of devices, including devices in a storage area network or other configurations.
- Storage 656 or 666 may be shared between multiple processors, multiple racks, or multiple computing devices and may include a computer-readable medium storing instructions executable by one or more of the processors.
- Memory 654 and 664 may include, e.g., volatile memory unit or units, a non-volatile memory unit or units, and/or other forms of computer-readable media, such as a magnetic or optical disks, flash memory, cache, Random Access Memory (RAM), Read Only Memory (ROM), and combinations thereof. Memory, such as memory 654 may also be shared between processors 652 a - 652 n . Data structures, such as an index, may be stored, for example, across storage 656 and memory 654 . Computing device 600 may include other components not shown, such as controllers, buses, input/output devices, communications modules, etc.
- An entire system such as system 100 , may be made up of multiple computing devices 600 communicating with each other.
- device 680 a may communicate with devices 680 b , 680 c , and 680 d , and these may collectively be known as system 100 .
- system 100 of FIG. 1 may include one or more computing devices 600 as central index server 120 or distributed index server 140 .
- some of the computing devices may be located geographically close to each other, and others may be located geographically distant.
- the layout of system 600 is an example only and the system may take on other layouts or configurations.
- Various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- a programmable processor which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- the systems and techniques described here can be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back end, middleware, or front end components.
- the components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (“LAN”), a wide area network (“WAN”), and the Internet.
- LAN local area network
- WAN wide area network
- the Internet the global information network
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network.
- the relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
Abstract
Description
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/723,898 US8818971B1 (en) | 2012-01-30 | 2012-12-21 | Processing bulk deletions in distributed databases |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201261592318P | 2012-01-30 | 2012-01-30 | |
US13/723,898 US8818971B1 (en) | 2012-01-30 | 2012-12-21 | Processing bulk deletions in distributed databases |
Publications (1)
Publication Number | Publication Date |
---|---|
US8818971B1 true US8818971B1 (en) | 2014-08-26 |
Family
ID=51358702
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/723,898 Expired - Fee Related US8818971B1 (en) | 2012-01-30 | 2012-12-21 | Processing bulk deletions in distributed databases |
Country Status (1)
Country | Link |
---|---|
US (1) | US8818971B1 (en) |
Cited By (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9483568B1 (en) | 2013-06-05 | 2016-11-01 | Google Inc. | Indexing system |
US9501506B1 (en) * | 2013-03-15 | 2016-11-22 | Google Inc. | Indexing system |
WO2018005167A1 (en) * | 2016-06-29 | 2018-01-04 | Alibaba Group Holding Limited | Deleting items based on user interaction |
US20180060341A1 (en) * | 2016-09-01 | 2018-03-01 | Paypal, Inc. | Querying Data Records Stored On A Distributed File System |
US20180357234A1 (en) * | 2017-06-13 | 2018-12-13 | Western Digital Technologies, Inc. | Memory efficient persistent key-value store for non-volatile memories |
US10503694B2 (en) | 2016-06-29 | 2019-12-10 | Alibaba Group Holding Limited | Deleting items based on user interation |
Citations (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20060288047A1 (en) * | 2004-09-17 | 2006-12-21 | International Business Machines Corporation | Method for bulk deletion through segmented files |
US20090063400A1 (en) * | 2007-09-05 | 2009-03-05 | International Business Machines Corporation | Apparatus, system, and method for improving update performance for indexing using delta key updates |
US7567959B2 (en) | 2004-07-26 | 2009-07-28 | Google Inc. | Multiple index based information retrieval system |
US7743379B2 (en) * | 2005-07-14 | 2010-06-22 | International Business Machines Corporation | Variable resource sets |
US7925655B1 (en) | 2007-03-30 | 2011-04-12 | Google Inc. | Query scheduling using hierarchical tiers of index servers |
US8224861B2 (en) * | 2006-11-28 | 2012-07-17 | S. Grants Co., Ltd. | Coupled node tree splitting/conjoining method and program |
-
2012
- 2012-12-21 US US13/723,898 patent/US8818971B1/en not_active Expired - Fee Related
Patent Citations (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7567959B2 (en) | 2004-07-26 | 2009-07-28 | Google Inc. | Multiple index based information retrieval system |
US20060288047A1 (en) * | 2004-09-17 | 2006-12-21 | International Business Machines Corporation | Method for bulk deletion through segmented files |
US20120047188A9 (en) * | 2004-09-17 | 2012-02-23 | International Business Machines Corporation | Method for bulk deletion through segmented files |
US7743379B2 (en) * | 2005-07-14 | 2010-06-22 | International Business Machines Corporation | Variable resource sets |
US8224861B2 (en) * | 2006-11-28 | 2012-07-17 | S. Grants Co., Ltd. | Coupled node tree splitting/conjoining method and program |
US7925655B1 (en) | 2007-03-30 | 2011-04-12 | Google Inc. | Query scheduling using hierarchical tiers of index servers |
US20090063400A1 (en) * | 2007-09-05 | 2009-03-05 | International Business Machines Corporation | Apparatus, system, and method for improving update performance for indexing using delta key updates |
Cited By (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9501506B1 (en) * | 2013-03-15 | 2016-11-22 | Google Inc. | Indexing system |
US9483568B1 (en) | 2013-06-05 | 2016-11-01 | Google Inc. | Indexing system |
WO2018005167A1 (en) * | 2016-06-29 | 2018-01-04 | Alibaba Group Holding Limited | Deleting items based on user interaction |
US10503694B2 (en) | 2016-06-29 | 2019-12-10 | Alibaba Group Holding Limited | Deleting items based on user interation |
US20180060341A1 (en) * | 2016-09-01 | 2018-03-01 | Paypal, Inc. | Querying Data Records Stored On A Distributed File System |
US20180357234A1 (en) * | 2017-06-13 | 2018-12-13 | Western Digital Technologies, Inc. | Memory efficient persistent key-value store for non-volatile memories |
US10649969B2 (en) * | 2017-06-13 | 2020-05-12 | Western Digital Technologies, Inc. | Memory efficient persistent key-value store for non-volatile memories |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9805053B1 (en) | Pluggable storage system for parallel query engines | |
JP6553822B2 (en) | Dividing and moving ranges in distributed systems | |
US9971526B1 (en) | Volume-based key-value store | |
US10229150B2 (en) | Systems and methods for concurrent summarization of indexed data | |
US8818971B1 (en) | Processing bulk deletions in distributed databases | |
US9218350B2 (en) | Searching and placeholders | |
US20180189369A1 (en) | Version history management | |
US20170249246A1 (en) | Deduplication and garbage collection across logical databases | |
Chavan et al. | Survey paper on big data | |
US20150120695A1 (en) | Indexing of file in a hadoop cluster | |
US20130191414A1 (en) | Method and apparatus for performing a data search on multiple user devices | |
RU2507574C2 (en) | Page-by-page breakdown of hierarchical data | |
US10558702B2 (en) | Unified storage system for online image searching and offline image analytics | |
US9934247B2 (en) | Built-in search indexing for NAS systems | |
CN108763578B (en) | Index file updating method and server | |
WO2015128756A1 (en) | A method, system and computer program for scanning a plurality of storage regions within memory for a specified quantity of results | |
EP2380090B1 (en) | Data integrity in a database environment through background synchronization | |
US10824612B2 (en) | Key ticketing system with lock-free concurrency and versioning | |
CN103795811A (en) | Information storage and data statistical management method based on meta data storage | |
US10096074B2 (en) | Systems and methods for expanding relevant search results in electronic discovery | |
CN110352410B (en) | Tracking access patterns of index nodes and pre-fetching index nodes | |
US9696919B1 (en) | Source/copy reference tracking with block pointer sets | |
US10467190B2 (en) | Tracking access pattern of inodes and pre-fetching inodes | |
US11210212B2 (en) | Conflict resolution and garbage collection in distributed databases | |
Ahad et al. | Comparing and analyzing the characteristics of hadoop, cassandra and quantcast file systems for handling big data |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:FONTOURA, MARCUS;PIEPER, JAN HENDRIK;TATAVARTHI, KRISHNA;AND OTHERS;REEL/FRAME:029730/0788Effective date: 20130130 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044277/0001Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551)Year of fee payment: 4 |
|
FEPP | Fee payment procedure |
Free format text: MAINTENANCE FEE REMINDER MAILED (ORIGINAL EVENT CODE: REM.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
LAPS | Lapse for failure to pay maintenance fees |
Free format text: PATENT EXPIRED FOR FAILURE TO PAY MAINTENANCE FEES (ORIGINAL EVENT CODE: EXP.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20220826 |