US6847975B2 - Proxy processing method - Google Patents
Proxy processing method Download PDFInfo
- Publication number
- US6847975B2 US6847975B2 US10/201,960 US20196002A US6847975B2 US 6847975 B2 US6847975 B2 US 6847975B2 US 20196002 A US20196002 A US 20196002A US 6847975 B2 US6847975 B2 US 6847975B2
- Authority
- US
- United States
- Prior art keywords
- state
- session
- information
- extended
- processing
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime, expires
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L69/00—Network arrangements, protocols or services independent of the application payload and not provided for in the other groups of this subclass
- H04L69/22—Parsing or analysis of headers
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/957—Browsing optimisation, e.g. caching or content distillation
- G06F16/9574—Browsing optimisation, e.g. caching or content distillation of access to content, e.g. by caching
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/50—Network services
- H04L67/56—Provisioning of proxy services
- H04L67/561—Adding application-functional data or data for application control, e.g. adding metadata
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/50—Network services
- H04L67/56—Provisioning of proxy services
- H04L67/564—Enhancement of application control based on intercepted application data
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/40—Network security protocols
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99941—Database schema or data structure
- Y10S707/99942—Manipulating data structure, e.g. compression, compaction, compilation
Definitions
- the present invention relates to a proxy processing method. More specifically, the present invention relates to a proxy processing method that allows flexible feature expansion and logging.
- the proxy processing referred to here relates to various processing operations, such as the relaying of requests, e.g., A Web access request, from a client terminal to a server, as well as operations for authentication, access logging, caching, accounting, and value-added services.
- FIG. 19 is a diagram which illustrates conventional proxy processing.
- a proxy device 20 receives requests from a client terminal 10 .
- the request contains a request header and content data.
- the request header can contain, for example, a URL, browser information, specific user information, and the like.
- the content data can contain, for example, Web POST data, e.g., a user name and address.
- the proxy device 20 sends the received request to a Web server 40 .
- the Web server 40 responds to the request by sending a reply.
- the reply typically contains a reply header and content data.
- the reply header contains termination information (abnormal, normal), server information, context type, context length, specific reply information, and the like.
- the proxy device 20 keeps performed fixed accounting operations and keeps an access log of fixed information.
- the access log information in the conventional technology is fixed (with a fixed header field), making it impossible to select specific extended information and header fields for logging.
- the present invention overcomes the problems described above by providing a proxy processing method that allows flexible adding and modification of specific extended operations.
- the present invention also provides flexible logging by allowing selection of specific extended information, header fields, and the like.
- the proxy processing method calls for reading a state definition file that stores state names in a transition sequence, the states representing processing steps for the request operation; selecting from a standard module and extension modules a state information entry that matches a state name in the state definition file, the standard module storing session processing functions associated with standard states for standard features, and the extension modules storing session processing functions associated with extended states for extended features; generating, at startup, a state transition table based on a selected state information entry, the state transition table storing a session processing function associated with each state and a next transition state of the processing; and executing a session processing function defined for each state according to the generated state transition table.
- the proxy processing method calls for sequentially reading state names from a state definition file containing state names in a transition sequence, each state representing a processing step in processing a request from a client terminal; and retrieving from a module table a state information entry having a state name that was read, the module table containing a list of state information, and each state information storing a state name and an associated state identifier, a session processing function, a configuration function allocating a work region and the like, a session initialization function called when a session is initiated, and a session termination function called when a session is terminated.
- the proxy processing method using a single processing process to simultaneously process requests from a plurality of clients operations from the receipt of a request to the termination of the processes of the request are handled as a single session, a processing status is stored for each session in a session management table, and a session scheduler is used to schedule client sessions that have become ready to process.
- the session scheduler calls for checking for events indicating a ready status for receiving a request and response data and the like; selecting one session management table entry out of entries for ready sessions, if a ready status event is generated or is received; and executing a state transition engine using as parameters the selected session management table entry and event information.
- the state transition engine calls for looking up a state transition table indicating a transition sequence of states, wherein each state represents a processing step for processing a request from a client terminal, and sequentially executing processing functions in the state transition table entry associated with current state information stored in the session management table.
- the proxy processing method includes processes of storing state status representing processing steps in processing requests from client terminals, updating states, and using a state transition engine to sequentially execute processing functions associated with a state.
- the proxy processing method also calls for executing the state transition engine, wherein the state transition engine calls for: looking up, for each session from a client terminal, a session management table storing information including state information, standard information, and extended information specific to extension modules; using state information in the session management table to obtain a state transition table entry storing session processing functions and default next states associated with a processing state; executing a session processing function from the obtained state transition table entry; determining a next transition state using a value returned from the executed session processing function, and setting up the next state information in the session management table entry; and executing processing for the next state if the returned value is that for transition to a next state, and returning to a scheduler and requesting the scheduler to schedule another ready session if the returned value is that for session rescheduling.
- access logging for logging processes of a request from a client is performed with logging data formed from a fixed-length standard log region and a variable-length extended log region.
- the proxy processing method calls for loading definition information at start-up from an extended logging definition file containing log types to be logged; storing extended logging information based on the definition information in a session management table managing a processing status for a request from a client terminal; and executing logging including extended information based on the definition information.
- FIG. 1 is a functional block diagram illustrating a flow of operations performed in a standard Web caching proxy process.
- FIG. 2 is a diagram illustrating the structure of a module table.
- FIG. 3 is a diagram illustrating the main information stored in a module table.
- FIG. 4 is a diagram illustrating sample items defined in a state definition file.
- FIG. 5 is a diagram illustrating the main information stored in a session structure (session management table entry).
- FIG. 6 is a diagram illustrating the main information stored in each state transition table entry.
- FIG. 7 is a flowchart showing the overall flow of operations performed in proxy processing.
- FIG. 8 is a diagram illustrating the building of a state transition table at the time of start-up.
- FIG. 9 is a flowchart showing a flow of operations performed in building a state transition table.
- FIG. 10 is a functional block diagram illustrating a flow of operations performed by the session scheduler.
- FIG. 11 is a diagram illustrating an example of HTTP session processing by a proxy device.
- FIG. 12 is a flowchart showing the operations performed by a state transition engine.
- FIG. 13 is a diagram illustrating a return value from a session processing function for each state and the operations thereof.
- FIG. 14 is a functional block diagram illustrating an example of proxy operations.
- FIG. 15 is a diagram illustrating an extended log definition file.
- FIG. 16 is a diagram illustrating how access logs are recorded.
- FIG. 17 is a diagram illustrating a flow of operations performed for outputting an access log at the end of each session.
- FIG. 18 is a diagram illustrating operations associated with log types.
- FIG. 19 is a functional block diagram illustrating conventional proxy processing.
- HTTP session operations processing of client requests performed in this embodiment will be described.
- FIG. 1 is a diagram illustrating a flow of operations performed in standard Web caching proxy processing.
- This system includes Web clients 1 , a Web caching proxy 2 , a cache 3 , and a Web server 4 .
- the Web caching proxy will generally perform the following operations.
- the numbers in parentheses correspond to the steps numb red in parentheses below.
- the web caching proxy 2 checks to see if information is available in the cache 3 .
- a request is sent from the web caching proxy 2 to the Web server 4 .
- a response from the Web server 4 is received by the web caching proxy 2 .
- the web caching proxy 2 checks the received response from the Web server 4 .
- the web caching proxy 2 stores content data in the cache 3 .
- the web caching proxy 2 sends the content data to the Web client 1 .
- the web caching proxy 2 reads the content data from the cache 3 .
- the content data obtained from the cache 3 is sent back to the Web client 1 via the web caching proxy 2 .
- a process or thread is assigned to each request from a Web client, and procedures corresponding to steps ( 1 )-( 17 ) (the numbers in parentheses 1 - 17 in the figure) are called sequentially.
- This method results in a heavy resource load since a process or thread has to be assigned to each request. This leads to a high overhead involving the operating system's process or thread switching, making the method unsuitable for handling large numbers of requests.
- a single process handles requests from multiple Web clients.
- the status for each request (HTTP session) from a Web client, i.e., at which step among steps ( 1 )-( 17 ) the request is processed now, is stored as a state, and requests are processed by updating these states.
- the proxy processing includes various types of operations, such as customized authentication, relaying of requests, caching, customized access logging, accounting, value-added services, and the like.
- the program executed by the proxy processing device contains a group of modules, which are functional groupings.
- a module serves as a single unit for the adding and removing of features, and it contains state processing functions, I/O processing functions, module-specific data in shared memory, and the like.
- the proxy processing device uses a module table to manage the modules. Each module table entry contains a list of state information that the module provides. With this state information, the proxy processing device can build a state transition table at start-up, and features provided by modules can be easily added and removed.
- FIG. 2 is a diagram illustrating the structure of the module table.
- FIG. 3 is a diagram illustrating the main information stored in the module table.
- the module table is a table used to define what kind of modules (features) are grouped together in the program.
- Each entry of the module table is associated with a module object, and it contains a name of the module object and a list of state information provided by the module object (see figure for contents of each field).
- the list of state information is referenced in building the state transition table, and state information selected from the list is used as a base for an entry of the state transition table.
- Each state information contains a name of the state and a session processing function associated with the state in order to implement the features provided by a module that the state belongs to, such as a standard module and an accounting module.
- the state transition table is created by selectively combining necessary state information from appropriate modules.
- the modules can be static link modules which are registered in advance in the module table, and objects of the modules are statically linked with other objects.
- dynamic loading of modules can be supported, with modules being registered dynamically in the module table.
- static link modules Even with the static link modules, however, not all features of loaded modules are activated. Only required module features provided by states described in the state transition table are selectively activated by the generation of the state transition table at the start-up time.
- the state information includes a state identifier (state ID), a state configuration function for allocating regions required by the state or module at start-up, a session initialization function allocating regions needed by the state or module and performing initialization operations and the like when a request is received from a client, a session completion function releasing unneeded regions and performing various termination operations when processes of the request are completed, and the like.
- state ID state identifier
- state configuration function for allocating regions required by the state or module at start-up
- a session initialization function allocating regions needed by the state or module and performing initialization operations and the like when a request is received from a client
- a session completion function releasing unneeded regions and performing various termination operations when processes of the request are completed, and the like.
- the state configuration file is a file describing state configuration information used to build the state transition table.
- FIG. 4 is a diagram illustrating a sample of the state configuration file.
- the state configuration file contains state names used in the state transition table arranged according to the default state transition sequence. “#” is a special character that indicates that the rest of the line is a comment. Blank lines can also be included.
- state names are defined in order: (1) Acceppt_Clt, (2) Get_Req_Hdr, (3) Parse_Req_Hdr, (4) Check_Auth, and (5) Check_Cache.
- FIG. 5 is a diagram illustrating the main information stored in a session structure (session management table entry). An overview of the session management table will be presented below.
- each entry of the session management table includes fields for a session ID, state information, communication route information, a send/receive buffer, request information, reply information, processing results information, module-specific extension information, and the like (see the figure for descriptions of field contents).
- this session management table can hold regions specific to extension modules in the session structures.
- the regions specific to extension modules hold module-specific extension information.
- a module can call a particular function, e.g., via a state configuration function to be described later, to allocate a module-specific region (module-specific extension information) in a session structure.
- FIG. 6 illustrates the main information stored in state transition table entries.
- Each state transition table entry stores a session processing function for a state corresponding to each processing step ( 1 )-( 17 ) of a proxy operation as described above, and also stores information for a default next state.
- This state transition table is generated using the state definition file when the proxy operation is started up, as will be described later.
- each state transition entry includes: a state ID, a state name, a session processing function for the state, a state configuration function, a session initialization function, a session termination function, and default next state information (see figure for description of fields).
- FIG. 7 is a flowchart showing the overall flow of operations performed in proxy processing.
- the proxy processing device When proxy processing is started, the proxy processing device initializes memory, I/O devices, interfaces, and the like (S 01 ). Next, a state transition table is built (S 03 ). For details of this, see primarily FIG. 8 and FIG. 9 and the following descriptions thereof. Next, the proxy processing device executes the state configuration function for each of the states (S 05 ). The execution of the state configuration function for each state is performed only once at start-up. The proxy processing device allocates enough space for the session management table needed for each session. Next, the proxy processing device launches processes for processing HTTP sessions. (S 07 ).
- the proxy processing device selects session processing features of necessary states from the module table to dynamically build a state transition table when proxy processing is started.
- FIG. 8 illustrates how the state transition table is built at start-up.
- the state transition table is built by sequentially searching the lists of state information in the module table for state transition table entries having state names described in the state definition file, and copying the matching entries.
- FIG. 9 is a flowchart showing a flow of operations used to build the state transition table.
- the searching of state names is performed according to a predetermined sequence, e.g., starting with a last registered module. Thus, in this case, if multiple modules provide states having the same state name, the entry for the most recently registered module is selected with higher priority.
- the flow of operations based on the flowchart is as follows.
- the standard information in the session management table is common to all modules and is looked up and updated by each module.
- the extension information in the session management table is specific to individual extension modules and is looked up and updated by these extension modules.
- the extension information region is allocated by executing a function to allocate the extended region in the session management table.
- the configuration function receives offset information indicating the location of the allocated extended region from the extended region allocation function, and this offset information is stored as an offset variable in the extension module. This offset variable is used to reference and update the extended region.
- FIG. 10 is illustrates a flow of operations performed by a session scheduler.
- the session scheduler performs scheduling of client HTTP sessions that are ready for processing.
- the operation flow is as follows.
- FIG. 11 illustrating the HTTP session processing perfomed by the proxy device.
- FIG. 12 shows a flowchart of the operations performed by the state transition engine.
- the state transition engine processes each HTTP session by saving current state information of the session processing to the corresponding session table entry and updating the current state information, while sequentially executing session processing functions described in the state transition table entries.
- the numerals in parentheses below correspond to the numerals in parentheses in FIG. 11 .
- Step 301 Schedule ready HTTP session and start the state transition engine
- the session scheduler for the session processing processes detects that an HTTP session has become ready to process via an event such as arrival of data. Then, the session scheduler executes the session transition engine, passing a session structure for the HTTP session and the detailed event information as parameters. For details on the operations performed up to the execution of the state transition engine, see FIG. 10 (the session processing process) and associated descriptions.
- Step S 302 look up current state information and obtain state transition table entry: Next, the state transition engine looks up state information (state ID) for the session structure and obtains the associated state transition table entry. In this example, state ( 2 ) is looked up.
- Step S 303 execute session processing function for the state: Next, the state transition engine executes the session processing function for the state described in the state transition table entry obtained at step S 302 (in this example, the session processing function named rcv_req_hdr is executed). When executing the session processing function for the state, the session structure and the event information are passed as parameters (this will be described in detail later).
- step S 304 transition to next state: Next, the state transition engine determines a next transition state from the value returned by the session processing function for the state, and information about the next state is set up in the session structure.
- FIG. 13 illustrates the value returned from the state processing function and how it works.
- the return values can be values such as “ADV”, “GOTO”, “SCHED”, “ERROR”, and “END” (see figure for actions of the state transition engine, purpose, and the manner in which the session processing function for the state uses the return values). For example, if the return value is “ADV”, a state transition is made to a default next state described in the state transition table entry associated with the current state. If the return value is “GOTO”, a state transition is made to a state indicated in a state ID field in the session structure. If the return value is “SCHED”, a control is returned to the session scheduler, and an event for the session will be waited for without changing the current state.
- a processing for the session will be started again with the same state when the session has become ready to process. If the return value is “ERROR”, the state will change to a state for error information reply. If the return value is “END”, a processing for the HTTP session is terminated. In this case, the session termination functions described in the session termination function list are executed, the associated session table entry is released, and control returns to the session scheduler.
- control returns to step S 302 and subsequent state processing is performed. If the return value is “END” or “SCHED”, control goes to step S 305 .
- Step S 305 (return to session scheduler and request for rescheduling):
- SCHED is returned as the return value by the session processing function for the state. If a processing of the HTTP session is to be terminated, “END” is returned by the session processing function. In both cases, “SCHED” and “END”, control returns to the session scheduler, and the session scheduler schedules another ready session.
- FIG. 14 shows a simplified diagram of proxy operations.
- the state transition engine in this embodiment saves current state information and updates it in the session management table entry. Characteristics of the state transition engine will be described.
- the state transition table to indicate a proxy processing procedure is built using a state definition file (see 1 ( 1 ) in the figure).
- the processing of requests from Web clients are divided into states, and a flexible proxy processing is can be provided by building the state transition table that indicates the processing procedures following the state definition file.
- a flexible proxy processing is can be provided by building the state transition table that indicates the processing procedures following the state definition file.
- the state transition engine is used to implement proxy processing according to the state transition table (see 1 -( 2 ) in the figure).
- Proxy processing is implemented by having the state transition engine execute these functions according to the state transition table created at (1).
- the functions can carry out various customized operations, e.g. (a) a session processing function for the state, (b) a configuration function for various initializations at startup, (c) a session initialization function called when a session is started, and (d) a post-processing function (termination function) for when a session processing for the session is completed.
- various customized operations can be carried out.
- This embodiment provides a feature for adding extended regions to the standard information region in each session management table entry that manages the processing state for an individual client request.
- a configuration function (b) for each state specified in each state transition table entry is executed at startup, and it uses the extended region allocation feature to allocate extended regions if necessary.
- the allocated extended regions store specific information that is necessary for the processing by the extended states for each session.
- Each session management table entry can include, for example, current state information, user information, standard information, and extended information.
- the initialization and termination operations on these regions in each session management table entry can be performed by the session initialization function (c) and the session post-processing function (d).
- FIG. 15 illustrates an extended logging definition file.
- an extended logging definition file contains log types, request or response header field names to be logged, log sizes, type numbers, display names, and the like.
- the definition information is loaded from the file as extended logging definition information. Access logging operations are performed according to this definition, thus providing flexible logging.
- the log types are as shown in the FIG. 15 .
- the log size indicates the size of the log if the logging size is fixed.
- the type number is a unique number to distinguish log contents. In particular, it is used for logging information for special extended operations (SPECIAL).
- the display name is a name displayed by log analysis/dump tools.
- extended log types such as REQ 13 FLD and REP_FLD
- standard log types such as CLT_REQ_URL, REQ_FLD_USR, REQ_VER and REP_VER
- FIG. 16 illustrates how access logs are recorded (see 2 -( 3 ) in the figure). The processing for making an access log will be described.
- a log analysis tool can output various types of analysis results based on the gen rated access log.
- FIG. 17 illustrates a flow of operations performed when outputting an access log at the end of each session.
- FIG. 18 illustrates various operations associated with the log types indicated in the extended log definition file at step S 203 .
- the execution of the session initialization functions is performed by the session scheduler, and the session termination functions are executed by the state transition engine called by the session scheduler.
- the present invention is not restricted to this, however, and it would also be possible to execute session initialization functions by the state transition engine, and/or session termination functions can be executed by the session scheduler.
- the proxy processing method and proxy device of the present invention can also be provided via a proxy processing program, a computer-readable storage medium containing a proxy processing program, a program product containing a proxy processing program capable of being loaded into the internal memory of a computer, a computer, such as a server, that contains the program, and the like.
- the present invention provides a proxy processing method that allows customized operations, such as customized user authentication and accounting, to be added and modified in a flexible manner.
- the present invention also allows a flexible access logging by selecting logging items for information specific to customized features and special header fields to be logged, and it allows high-speed analysis and tabulation operations on the access log.
Abstract
Description
-
- a. If information is not available in the cache, the following operations are performed.
-
- b. If information is available in the cache, the following operations are performed.
-
- Step S801 (open state definition file):
- Open the state definition file to read state definition information.
- Step S802 (read state names)
- Read state names one at a time in sequence from the state definition file.
- Step S803 (check for completion):
- Jump to step S810 if there are no more state names to be processed.
- Step S804 (search for entry in module table):
- If there is a state name to be processed, search the lists of state information in the module table for a state transition table entry having the indicated state name.
- Step S805 (copy entry to state transition table)
- Copy and register the state information found at step S804 to a new entry of the state transition table.
- Step S806 (set up default next-state information):
- Based on the order in the state definition file, set up the default next-state information in the state transition table entry registered at step S805 to point to the state transition table entry to be registered next. If the current entry is the last in the state definition file, set up information (NULL) indicating that the entry is the last.
- Step S807 (assign state ID and set up state_index):
- If the state ID is 0, generate a unique state ID and assign the ID. Also, set up a state index (state_index) to allow state transition table entries to be indexed by the state ID. If the state ID is not 0, check to see if the same ID has not already been registered. If so, display an error message.
- Step S808 (register session initialization function list):
- If the session initialization function is set up, register the function onto a session initialization function list. This list is used to call initialization functions when a session is initialized.
- Step S809 (register session termination function list):
- Similarly, if the termination functions are set up, register the function onto a termination function list Return to step S802.
- Step S810 (close session definition file)
- Close the session definition file.
- Step S811 (execute state configuration functions):
- Execute the state configuration functions for each state transition table entry set up in step S801-step S810. If all state configuration functions are executed successfully, the building of the state transition table is finished.
3-2. Operations of State Configuration Function
- Execute the state configuration functions for each state transition table entry set up in step S801-step S810. If all state configuration functions are executed successfully, the building of the state transition table is finished.
- Step S801 (open state definition file):
-
- Step S401 (start execution of session processing process): create session processing processes and begin execution of the created processes.
- Step S402 (wait for events, such as ready-events of network I/O and interprocess communication reply): The session scheduler checks for events, such as ready-events of network I/Oand interprocess communication reply, and an arrival of a request to establish a connection from a Web client. If no event is detected, the scheduler waits until any of above events is raised or a fixed interval timeout occurs.
- Step S403 (check event kind): The kind of the event detected at step S402 is checked, and the processing branches depending on the event kind. The operations that are performed can be, for example, as follows.
- (1) If a request to establish a connection from a Web client arrives, jump to step S404.
- (2) If a ready-event is raised, jump to step S406.
- (3) If a timeout occurs, jump to step S408.
- (4) If a termination event in response to an operator instruction arrives, jump to step 409.
- Step S404 (establish connection): If a request to establish a connection arrives from a Web client, the session scheduler establishes a connection and control goes to step S405.
- Step S405 (create and initialize session table entry) Next, the session scheduler creates a session table entry and initializes the session table entry. The session scheduler looks up the session initialization function list that was generated at step S808 when the state transition table was built. The session initialization functions for the states are called, module extended regions are initialized, and the like. Then, control goes to step S402, and the session scheduler waits for an HTTP request to arrive from the Web client.
- Step S406 (select a ready HTTP session): If a readyevent is raised, the session scheduler selects a session table entry for a ready HTTP session to process. Control proceeds to step S407.
- Step S407 (execute state transition engine): Next, the state transition engine is called, passing the session table entry and event information as parameters (the operations of the state transition engine will be described in detail later). An example of an event information that has been passed to the state transition engine is information such as “input/output operation is ready on a communication channel associated with the selected session”. When control returns from the state transition engine, the session scheduler returns to step S402 and schedules another ready HTTP session.
- Step S408 (timeout processing): Even if no event is detected at step S402, the wait at step S402 ends periodically with a timeout and the timeouts for network I/O for each session is checked. If an HTTP session timeout is detected, the corresponding HTTP session is notified of a timeout event and control returns to step S402. As a result, steps S406 and S407 can schedule the HTTP session with a ready-event by the timeout
- Step S409 (termination processing of session processing processes): If an operator inputs a termination command, the session scheduler is informed of a termination of proxy processing and performs a processing to terminate the session processing processes. Control then proceeds to step S410.
- Step S410 (terminate session processing processes): After the processing at step S409 is completed, the session sch dul r terminates th session processing processes.
3-4. State Transition Engine
-
- Each access log is formed from a fixed-length standard log that logs standard and common log information and a variable-length extended log that logs according to the extended logging definitions described above. The fixed-length standard log is output based on standard information in each session management table entry, while the variable-length/extended log is output using the extended information, as well as the standard information in each session management table entry. This provides extendable access logging.
- The length of each access log is a multiple of a fixed block size and is indicated at a start field of the fixed-length standard log. This allows high-speed log processing of the variable-length log. The fixed-length standard log information can include request and response sizes, response status, user information (corresponds to #5), and the like.
- In addition to having total length information of the variable-length extended log region, the variable-length extended log region includes offset information (an array of offsets) that indicates where each extended log defined by the extended logging definition is output, and the actual extended logging data (extended log information) for each extended log. By providing the array of offsets, the position of each extended log in the variable-length log can be obtained with a single indirect access operation. Thus, statistical operations can be performed on specific extended log fields in the log, e.g., tabulating fields, at high speeds. The size of each extended log data can be determined from offsets for previous and subsequent extended logs, and string-type data can be processed without knowing size information (excluding issues of maximum buffer size) because the string-type data is always terminated with a NULL byte.
- An extended log for a “SPECIAL” type is output by a hook function called from the standard access log processing function. If the “SPECIAL” type extended log is required, the hook function is set up by a state configuration function for an extended state. A hook function variable indicates a hook function to call. If a non-zero call address is set in the hook function variable, the hook function indicated by the hook function variable is called when making each access log, thus providing loggings specific to extended states. This allows extended loggings specific to customized features.
- A log header is output at the start of each access logging file. This log header contains endian information, statistical summary information, a copy of the extended logging definition information, and the like. The endian information allows logs to be analyzed even if the machine uses a different byte-endian system. The statistical summary information allows simple summary operations without analysis tabulation of the entire access log stored in the access log file. A copy of the extended log definition information can provide information on what types of logs are stored, how to access the logs, and how to display the logs in the variable-length extended region.
-
- S201: When a session is terminated and an access log output operation is called, the access log output operation looks up the standard information in the session management table entry associated with the session and outputs a pre-determined fixed-length standard log. The fixed-length standard log is log information that is fixed and always output in this proxy.
- S203: Following the instructions in the extended log definition file, offset information indicating the output position for each extended log and data of each extended log are output in sequence as the extended log.
Claims (20)
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
JP2001229722 | 2001-07-30 | ||
JP2001-229722 | 2001-07-30 |
Publications (2)
Publication Number | Publication Date |
---|---|
US20030028515A1 US20030028515A1 (en) | 2003-02-06 |
US6847975B2 true US6847975B2 (en) | 2005-01-25 |
Family
ID=19062027
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/201,960 Expired - Lifetime US6847975B2 (en) | 2001-07-30 | 2002-07-25 | Proxy processing method |
Country Status (1)
Country | Link |
---|---|
US (1) | US6847975B2 (en) |
Cited By (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20070106692A1 (en) * | 2005-11-10 | 2007-05-10 | International Business Machines Corporation | System and method for recording and replaying a session with a web server without recreating the actual session |
US20090064102A1 (en) * | 2007-08-28 | 2009-03-05 | International Business Machines Corporation | Method and system for navigationally displaying http session entry and exit points |
US20090064088A1 (en) * | 2007-08-28 | 2009-03-05 | Roland Barcia | Method and system for displaying http session entry and exit points |
US7587484B1 (en) * | 2001-10-18 | 2009-09-08 | Microsoft Corporation | Method and system for tracking client software use |
US20090265439A1 (en) * | 2008-01-31 | 2009-10-22 | Koki Nakashiro | E-mail repeater and relay method of the same |
US11943836B1 (en) | 2021-05-06 | 2024-03-26 | T-Mobile Usa, Inc. | Service-based architecture for internet protocol multimedia subsystem |
Families Citing this family (24)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP4087271B2 (en) * | 2003-03-19 | 2008-05-21 | 株式会社日立製作所 | Proxy response device and network system |
US7346620B2 (en) * | 2004-02-12 | 2008-03-18 | International Business Machines Corporation | Adjusting log size in a static logical volume |
US7912762B2 (en) | 2006-03-31 | 2011-03-22 | Amazon Technologies, Inc. | Customizable sign-on service |
US9076158B2 (en) | 2006-09-13 | 2015-07-07 | Google Inc. | Integrated system and method for managing electronic coupons |
JP4405503B2 (en) * | 2006-12-28 | 2010-01-27 | キヤノンＩｔソリューションズ株式会社 | Information processing apparatus, information processing apparatus control method, program, and recording medium |
US20140207662A1 (en) | 2008-03-13 | 2014-07-24 | Giftya Llc | System and method for managing gifts |
US10489776B2 (en) | 2008-03-13 | 2019-11-26 | Giftya Llc | System and method for managing gift credits |
US20140249902A1 (en) | 2008-03-13 | 2014-09-04 | Giftya Llc | System and method for providing a customer survey |
US20100023341A1 (en) * | 2008-05-29 | 2010-01-28 | Reel Drinks Llc | Method for rule-based gift giving |
US8285643B2 (en) * | 2008-06-12 | 2012-10-09 | Monncello Enterprises, LLC | System and method for processing gift cards |
US8676704B2 (en) | 2008-03-13 | 2014-03-18 | Giftya Llc | Method for transferring funds |
US10949833B2 (en) | 2008-03-13 | 2021-03-16 | Giftya Llc | Technologies for generating and displaying virtual and interactive egifts |
US20140214666A1 (en) | 2008-03-13 | 2014-07-31 | Giftya Llc | System and method for managing gifts |
US7870022B2 (en) | 2008-06-12 | 2011-01-11 | Alpine In Motion Llc | System and method for offering and fulfilling situation-based, location specific rewards and offers to mobile-oriented consumers |
US20110087538A1 (en) * | 2008-06-12 | 2011-04-14 | Alpine In Motion Llc. | System and method for offering and fulfilling situation-based, location specific rewards and offers to mobile-oriented consumers |
US8606629B2 (en) * | 2008-06-12 | 2013-12-10 | Google, Inc. | Providing coupons with a mobile computer of a merchant |
WO2010106772A1 (en) * | 2009-03-17 | 2010-09-23 | 日本電気株式会社 | Distributed processing system and distributed processing method |
US11012480B2 (en) | 2010-09-13 | 2021-05-18 | Jeffrey W. Mankoff | Modifying signal associations in complex computing networks |
US8612356B2 (en) | 2011-11-14 | 2013-12-17 | Google Inc. | Voucher code redemption via SMS |
JP2014038551A (en) | 2012-08-20 | 2014-02-27 | Fujitsu Ltd | Data storage device, method for controlling data storage device, and control program of data storage device |
US20140280367A1 (en) * | 2013-03-14 | 2014-09-18 | Sap Ag | Silo-aware databases |
US9146841B2 (en) * | 2013-03-15 | 2015-09-29 | Vmware, Inc. | Proxy server assisted product testing |
US10868881B1 (en) * | 2015-12-30 | 2020-12-15 | Mingtai Chang | Loading web resources using remote resource pushing |
US11847207B2 (en) * | 2019-03-04 | 2023-12-19 | Microsoft Technology Licensing, Llc | Security-adaptive code execution |
Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6665565B1 (en) * | 1999-12-24 | 2003-12-16 | Medtronic, Inc. | Method and a system for conducting failure mode recovery in an implanted medical device |
-
2002
- 2002-07-25 US US10/201,960 patent/US6847975B2/en not_active Expired - Lifetime
Patent Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6665565B1 (en) * | 1999-12-24 | 2003-12-16 | Medtronic, Inc. | Method and a system for conducting failure mode recovery in an implanted medical device |
Cited By (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7587484B1 (en) * | 2001-10-18 | 2009-09-08 | Microsoft Corporation | Method and system for tracking client software use |
US20070106692A1 (en) * | 2005-11-10 | 2007-05-10 | International Business Machines Corporation | System and method for recording and replaying a session with a web server without recreating the actual session |
US20090064102A1 (en) * | 2007-08-28 | 2009-03-05 | International Business Machines Corporation | Method and system for navigationally displaying http session entry and exit points |
US20090064088A1 (en) * | 2007-08-28 | 2009-03-05 | Roland Barcia | Method and system for displaying http session entry and exit points |
US8032858B2 (en) | 2007-08-28 | 2011-10-04 | International Business Machines Corporation | Method and system for navigationally displaying HTTP session entry and exit points |
US8607197B2 (en) | 2007-08-28 | 2013-12-10 | International Business Machines Corporation | Displaying HTTP session entry and exit points |
US20090265439A1 (en) * | 2008-01-31 | 2009-10-22 | Koki Nakashiro | E-mail repeater and relay method of the same |
US11943836B1 (en) | 2021-05-06 | 2024-03-26 | T-Mobile Usa, Inc. | Service-based architecture for internet protocol multimedia subsystem |
Also Published As
Publication number | Publication date |
---|---|
US20030028515A1 (en) | 2003-02-06 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US6847975B2 (en) | Proxy processing method | |
US7158964B2 (en) | Queue management | |
US5790809A (en) | Registry communications middleware | |
JP3605573B2 (en) | Memory management method in network processing system and network processing system | |
US7246167B2 (en) | Communication multiplexor using listener process to detect newly active client connections and passes to dispatcher processes for handling the connections | |
US20080301406A1 (en) | System and method for allocating communications to processors in a multiprocessor system | |
JP2003141068A (en) | Session management device, and session management method, program and storage medium | |
US9626235B2 (en) | Managing queues in an asynchronous messaging system | |
US20050235290A1 (en) | Computing system and method for transparent, distributed communication between computing devices | |
WO2006095184B1 (en) | Data processing system | |
EP1246059B1 (en) | Dynamic interface aggregation on demand | |
EP1578148B1 (en) | Service provisioning system | |
US7751346B2 (en) | Apparatus for searching TCP and UDP sockets | |
US20080082685A1 (en) | Receive coalescing and direct data placement | |
JP3153129B2 (en) | Server selection method | |
CN112702362B (en) | Method and device for enhancing TCP/IP protocol stack, electronic equipment and storage medium | |
US6529907B1 (en) | Service quality management system | |
JP3950752B2 (en) | apparatus | |
CN115499889A (en) | VPP-based UPF forwarding plane implementation method, device, system and related equipment | |
CN115480934A (en) | Distributed data processing method, device, equipment and storage medium | |
CN109379453B (en) | Method and system for detecting IP address of DNS (Domain name Server) outlet server | |
KR100716169B1 (en) | Apparatus and method for processing the message for network management system | |
CN109634726A (en) | Processing method, device, equipment and the storage medium of timed task | |
KR100516046B1 (en) | Middleware System for Processing Client's Request with Efficient Load-Balancing | |
KR100725921B1 (en) | Apparatus for TCP and UDP Socket Search |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: HITACHI, LTD., JAPANFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:NISHIKADO, TAKASHI;HATAKEYAMA, KOUZOU;NAKAHARA, MASAHIKO;AND OTHERS;REEL/FRAME:013406/0260;SIGNING DATES FROM 20020730 TO 20020802 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
FEPP | Fee payment procedure |
Free format text: PAYER NUMBER DE-ASSIGNED (ORIGINAL EVENT CODE: RMPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:HITACHI, LTD.;REEL/FRAME:030555/0554Effective date: 20121016 |
|
FPAY | Fee payment |
Year of fee payment: 12 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |