CN118056375A - Stateful hash-based signing using a single public key and multiple independent signers - Google Patents
Stateful hash-based signing using a single public key and multiple independent signers Download PDFInfo
- Publication number
- CN118056375A CN118056375A CN202180103011.0A CN202180103011A CN118056375A CN 118056375 A CN118056375 A CN 118056375A CN 202180103011 A CN202180103011 A CN 202180103011A CN 118056375 A CN118056375 A CN 118056375A
- Authority
- CN
- China
- Prior art keywords
- lms
- signers
- computer
- public key
- implemented method
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000000034 method Methods 0.000 claims abstract description 65
- 230000006870 function Effects 0.000 description 19
- 238000004891 communication Methods 0.000 description 12
- RVCKCEDKBVEEHL-UHFFFAOYSA-N 2,3,4,5,6-pentachlorobenzyl alcohol Chemical compound OCC1=C(Cl)C(Cl)=C(Cl)C(Cl)=C1Cl RVCKCEDKBVEEHL-UHFFFAOYSA-N 0.000 description 7
- 230000002093 peripheral effect Effects 0.000 description 4
- 238000012546 transfer Methods 0.000 description 4
- 238000011161 development Methods 0.000 description 3
- 238000004364 calculation method Methods 0.000 description 2
- 230000001413 cellular effect Effects 0.000 description 2
- 238000005516 engineering process Methods 0.000 description 2
- 238000012423 maintenance Methods 0.000 description 2
- 238000012545 processing Methods 0.000 description 2
- 230000000007 visual effect Effects 0.000 description 2
- 230000001133 acceleration Effects 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 238000007796 conventional method Methods 0.000 description 1
- 239000000835 fiber Substances 0.000 description 1
- 239000011810 insulating material Substances 0.000 description 1
- 238000004519 manufacturing process Methods 0.000 description 1
- 239000000463 material Substances 0.000 description 1
- 238000005192 partition Methods 0.000 description 1
- 230000004044 response Effects 0.000 description 1
- 230000003068 static effect Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 238000012795 verification Methods 0.000 description 1
Abstract
This document describes techniques and apparatus relating to stateful hash-based signatures with a single public key and multiple independent signers. Upon obtaining the Leight on-Micali signature (LMS) randomization parameters (502), the provisioning server may share the LMS randomization parameters (504) among the plurality of signers. Next, the provisioning server may associate a unique starting leaf index number with each signer (506) and notify each of the signers (508). The signer may then create a random SEED for the Leight on-Micali one-time signature (LM-OTS) signature and generate the local LM-OTS and LMS public keys. After generating the local public key, the signer may share the local LMS public key with the provisioning server. Upon receiving the local LMS public key (510), the provisioning server may then sort the local LMS public keys (512) and generate a public LMS public key (514). The provisioning server can then provision each of the signers with the ordered list, the public LMS public key, and the Merkle tree path (516).
Description
Background
Internet of things (IoT) devices make a significant contribution to modern society, such as in the fields of security, transportation, communications, and manufacturing. An aspect that makes IoT devices so useful is that they can be updated periodically to correct or enhance certain software features. However, if a bad actor managed to deliver malware to IoT devices masquerades as a firmware update, the devices may fail, expose sensitive data, or operate unsafe. To thwart such network attacks, many security measures are implemented on computing devices to prevent unauthorized access and manipulation of device data and communications. These security measures may include the use of digital signature schemes based on asymmetric encryption algorithms, including Rivest-Shamir-Adleman (RSA) and Elliptic Curve Digital Signature Algorithms (ECDSA). Such digital signature schemes are mathematical schemes employed to verify the authenticity and integrity of messages, software, or digital documents. These digital signature schemes give the recipient of a message confidence that the message was generated by a known sender and that it was not manipulated at some time during transmission.
The security of many of these asymmetric encryption algorithms depends on the difficulty of solving integer factorization problems, general discrete logarithm problems, and elliptic curve discrete logarithm problems using classical computing techniques. Due to the development of quantum computing, this assumption can no longer be relied upon, especially with classical computing techniques alone. For example, quantum computing algorithms (such as the shell's algorithm) can provide a quadratic acceleration for brute force searches, thereby breaking the security behind solving integer factorization problems, general discrete logarithm problems, and elliptic curve discrete logarithm problems. Thus, bad actors with the help of quantum computers may be able to decrypt messages or even forge digital signatures on arbitrary messages, and potentially inject malware into IoT devices.
In response, hash-based signature schemes that are considered secure against cyber attacks performed by quantum computers have been standardized. For example, national Institute of Standards and Technology (NIST) Special Publication (SP) 800-208 provides recommendations for a stateful hash-based signature scheme that is theorized to be resistant to quantum computer network attacks. The security of these stateful hash-based signature schemes depends on the security of the underlying cryptographic hash function.
Current technology enables efficient implementation of hash-based signature schemes on a single signature service (such as a contemporary server that owns all private keys). In such an embodiment, the signing service may possess the computing power required to enable key generation and key signing. However, such an implementation may be ineffective when accessing the signed service proves difficult or unreliable, such as when a firewall is present. For example, due to firewalls, development teams in various countries may not have access to the server and, thus, may not be able to sign firmware updates.
Disclosure of Invention
This document describes techniques and apparatus relating to stateful hash-based signatures with a single public key and multiple independent signers. Upon obtaining the Leghton-Micali signature (LMS) randomization parameters, the provisioning server may share the LMS randomization parameters among multiple signers. Next, the provisioning server may associate a unique starting leaf index number with each of the signers and notify each of the signers. The signer may then create a random SEED for the Leight on-Micali one-time signature (LM-OTS) signature and generate the local LM-OTS and LMS public keys. After generating the local public key, the signer may share the local LMS public key with the provisioning server. Upon receiving the local LMS public key, the provisioning server may then sort the local LMS public keys and generate a public LMS public key. The provisioning server can then provision each of the signers with the ordered list, the public LMS public key, and the Merkle tree path.
This summary is provided to introduce a simplified concepts for stateful hash-based signatures with a single public key and multiple independent signers that are further described below in the detailed description and illustrated in the drawings. This summary is not intended to identify essential features of the claimed subject matter, nor is it intended to be used to determine the scope of the claimed subject matter.
Drawings
Details of one or more aspects of stateful hash-based signing with a single public key and multiple independent signers are described in this document with reference to the following figures:
FIG. 1 illustrates an example operating environment including an example computing device;
FIG. 2 illustrates an example operating environment including an example portable signing device capable of implementing the cryptographic techniques and other security functions described herein;
FIG. 3 illustrates an example operating environment including an example provisioning server;
FIG. 4 illustrates an example operating environment including a computing device operatively coupled to a plurality of signing devices and linked to a provisioning server;
FIG. 5 illustrates an example technique for key generation;
FIG. 6 illustrates an example operating environment including an example portable signing device operably coupled to an example computing device; and
FIG. 7 illustrates an example technique for key signing.
The use of the same numbers in different instances may indicate similar features or elements.
Detailed Description
SUMMARY
Advances in the fields of cryptanalysis and quantum computing can compromise the security of many digital signature schemes. Once large-scale quantum computers have been developed, it is expected that these computers may be able to perform attacks based on algorithms (such as the Shor's algorithm), for example, to conquer most public key cryptosystems currently employed. The goal of post quantum cryptography is to anticipate the future cryptographic operation context in which quantum computers may exist, and to develop cryptographic systems that resist potential future attacks from these quantum computers. Thus, post quantum cryptography systems (e.g., systems that are secure for quantum computers having many qubits) have been standardized. In the standardized and currently defined post quantum cryptography system, many techniques are outlined assuming that a single signing service owns all private keys and implements a stateful hash-based signing scheme. In some cases, many such implementations of post quantum cryptography systems may be undesirable. For example, it may be difficult, or in some cases impossible, when accessing a signed service with all private keys, such as when a firewall is present.
In contrast, this document describes techniques and apparatus relating to stateful hash-based signing with a single public key and multiple independent signers. With these techniques, multiple offline signers can implement a stateful hash-based signature scheme in a secure but low-performance circuit so that they can independently sign a single-level Merkle tree.
Hash-based signature scheme
A hash-based signature (HBS) scheme combines the one-time signature (OTS) scheme with the Merkle tree structure. OTS schemes are digital signature schemes that employ a one-way function (e.g., a function that is virtually impossible to translate or reverse the computation) to securely sign a message for each key pair. OTS schemes should be used only to sign a single message because if more than one message is signed using the same public and private keys, the system may become less secure. If more than one message is signed using the same public and private keys, it becomes mathematically feasible for an attacker to forge a digital signature. Since OTS scheme keys should only securely sign a single message, it is practical to combine many such keys within a single larger structure (e.g., merkle tree).
To avoid reuse of OTS keys, the state of the private key may be updated each time a signature is generated. Thus, an HBS scheme that implements OTS keys and updates private keys can be described as stateful (e.g., a process performed with the context of a previous transaction). For example, if the private key is stored in non-volatile memory, the state of the key may be updated in non-volatile memory to mark the OTS key as unavailable before a corresponding signature generated using the OTS key is derived.
The stateful HBS scheme is only as secure as the security level provided by the underlying unidirectional functionality of the OTS scheme. For example, a stateful OTS scheme is secure because it is not feasible to find a pre-image or a second pre-image of the digest computed by the one-way function. Exemplary one-way functions include hash functions. OTS schemes that use hash functions to compute a one-time signature are considered to be impermeable to large-scale quantum computers. The hash function may include, for example, a Secure Hash Algorithm (SHA) (e.g., SHA-256/192, SHAKE256/256, SHAKE 256/192). These hash functions can input any of a variety of computer interpretable objects, and output a fixed-size character string (e.g., a hexadecimal number). Hash functions typically have useful cryptographic properties such as pre-image resistance (e.g., irreversibility) and collision resistance.
The Leghton-Micali signature (LMS) scheme is an example stateful HBS scheme that may implement a hash function and OTS scheme. For example, the LMS scheme may implement the Leghton-Micali one-time signature (LM-OTS) scheme as its OTS scheme. The LM-OTS signature can be used to verify the authenticity of the message by associating the secret private key with the shared public key. In the LMS scheme, the private key may comprise a large set (e.g., array) of LM-OTS private keys. When generating the key pair for the LMS instance, each LM-OTS key in the system may use the same set of parameters, as outlined in the fourth section of NIST SP 800-208. The LM-OTS public key may be generated from the private key by iteratively applying a hash function and then hashing the resulting value. The hash function for the LMS scheme may be the same as the function used in the LM-OTS key. The LM-OTS private key format may be any configuration defined by an embodiment of the system. For example, the private key may include a type code indicating a particular LM-OTS algorithm, an array containing n-byte strings (e.g., the value of n is determined by a hash function selected as part of the LM-OTS algorithm), parameters (e.g., a 16-byte string parameter indicating which Merkle tree the LM-OTS is used with), and 4-byte parameters (e.g., a 32-bit integer parameter indicating the leaves of the Merkle tree in which the OTS public key is present).
The LMS scheme may combine the LM-OTS scheme with the Merkle tree structure. For example, each LMS public and private key pair may be associated with a perfect binary Merkle tree. Merkle trees are nonlinear binary data structures having leaf nodes, a set of intermediate nodes, and a root node. The leaf node may include a hash value of the data element. Each intermediate node of the Merkle tree may be calculated by applying a hash function to a concatenation of the values of its two corresponding child nodes. The root node may be a singular final node of the Merkle tree. The use of Merkle trees may enable the system to identify and/or validate particular data elements without having to access the complete data set.
Furthermore, merkle trees can provide an efficient way by which to bind a large number of OTS instances together under a single public key. For example, a Merkle tree may utilize 2 n OTS instances whose public keys are hashed together via a binary Merkle tree to generate a single public key. In so doing, a single public key may bind all OTS instances together, enabling generation of 2n signatures from a single public key. Each leaf of the Merkle tree can contain the value of the public key of the LM-OTS public and private key pair. The value contained by the root of the Merkle tree may be an LMS public key (e.g., a recursive hash of the OTS public key). The private key of the Merkle tree may be a collection of all OTS private keys and an index of the next OTS private key with which to sign the next message.
A Hierarchical Signature Scheme (HSS) may be built on top of the LMS scheme, allowing efficient extension to a larger number of signatures. The sequence of Merkle trees may be included in the HSS system. For example, merkle trees may be subdivided into a plurality of smaller trees. Only the bottom-most Merkle tree may be used to sign messages, while the upper Merkle tree or a larger portion of the Merkle tree may be used to sign its child's public key.
In this document, techniques are described for embodiments compatible with a tier 1 HSS system while meeting NIST standards for key generation and maintenance. Each signer is able to independently generate its own part of the Merkle tree. The following discussion describes an operating environment, techniques that may be employed in the operating environment, and example methods. In the context of the present disclosure, reference is made to an operating environment by way of example only.
Operating environment
The following discussion describes an operating environment, techniques that may be employed in the operating environment, and various devices or systems in which components of the operating environment can be embodied. In the context of the present disclosure, reference is made to an operating environment by way of example only.
FIG. 1 illustrates an example operating environment 100 including an example computing device 102. As illustrated in fig. 1, computing device 102 is a desktop computer. In other implementations, the computing device 102 may be a laptop, tablet, or the like. Computing device 102 may provide other functionality or include components or interfaces omitted from fig. 1 for clarity or visual brevity.
The computing device 102 includes a printed circuit board assembly 104 (PCBA 104) on which components and interconnections of the computing device are embodied. Alternatively or in addition, components of computing device 102 can be embodied on other substrates, such as flexible circuit material or other insulating material. Although not shown, computing device 102 may also include a housing, various human input devices, a display, a battery pack, an antenna, and so forth. Typically, the electrical and electromechanical components of computing device 102 are assembled onto a Printed Circuit Board (PCB) to form PCBA 104. The various components of PCBA 104 (e.g., processor and memory) are then programmed and tested to verify the correct functioning of PCBA 104. PCBA 104 is connected with other portions of computing device 102 or assembled into a housing.
As illustrated, PCBA 104 includes one or more processors 106 and a computer-readable medium 108. Processor(s) 106 may be any suitable single-core or multi-core processor (e.g., application Processor (AP), digital Signal Processor (DSP), central Processing Unit (CPU), graphics Processing Unit (GPU)). The processor(s) 106 may be configured to execute instructions or commands stored within the computer-readable storage medium 110 to implement an operating system 112 and a software development environment module 114 stored within the computer-readable storage medium 110. The computer readable storage medium 110 may include one or more non-transitory storage devices, such as random access memory (RAM, dynamic RAM (DRAM), non-volatile RAM (NVRAM), or Static RAM (SRAM)), read Only Memory (ROM) or flash memory, a hard drive, an SSD, or any type of medium suitable for storing electronic instructions, each coupled to a computer system bus. The term "coupled" may refer to two or more elements in direct contact (physically, electrically, magnetically, optically, etc.), or to two or more elements not in direct contact with each other but still co-operate and/or interact with each other.
PCBA 104 may also include I/O ports 116 and a communication system 118. The I/O ports 116 allow the computing device 102 to interact with other devices or users through peripheral devices. The I/O ports 116 may include any combination of local or external ports, such as Universal Serial Bus (USB) ports, audio ports, serial ATA (SATA) ports, pci express based ports or slots, secure digital input/output (SDIO) slots, and/or other conventional ports. Various peripheral devices may be operatively coupled to I/O port 116 such as a Human Input Device (HID), external computer readable storage medium, or other peripheral device.
Communication system 118 enables the transfer of device data, such as received data, transmitted data, or other information as described herein, and may provide connectivity to one or more networks and other devices connected thereto. An example communication system includes an NFC transceiver, compliant with various IEEE 802.15Standard WPAN radio compliant with various IEEE 802.11/>WLAN radio of any of the standards, WWAN (3 GPP-compatible) radio for cellular telephones, wireless Metropolitan Area Network (WMAN) radio conforming to various IEEE 802.16 (Wi MAX) standards, infrared (IR) transceiver conforming to the infrared data association (IrDA) protocol, and wired Local Area Network (LAN) ethernet transceiver. Device data communicated through the communication system 118 may be grouped or structured depending on the communication protocol or standard through which the computing device 102 is communicating. The communication system 118 may include a wired interface, such as an ethernet or fiber optic interface for communicating over a local network, private network, intranet, or the internet. Alternatively or additionally, the communication system 118 may include a wireless interface that facilitates communication over a wireless network, such as a wireless LAN, cellular network, or WPAN.
Although not shown, the computing device 102 can also include a system bus, interconnect, crossbar, or data transfer system that couples the various components within the device. The system bus or interconnect can include any one or combination of different bus structures, such as a memory bus or memory controller, a peripheral bus, a universal serial bus, and/or a processor or local bus that utilizes any of a variety of bus architectures.
FIG. 2 illustrates an example operating environment 200 including an example portable signing device 202 capable of implementing cryptographic techniques and other security functions. As illustrated in fig. 2, the portable signing device 202 is a USB flash drive. In other embodiments, portable signing device 202 may be an external drive or other external hardware security device. The portable signing device 202 may provide other functions or include components or interfaces omitted from fig. 2 for clarity or visual brevity.
The portable signing device 202 may include a secure hardened integrated circuit 204 with components and interconnections of the portable signing device embodied on the secure hardened integrated circuit 204 and an input/output (I/O) port 206 coupled to the secure hardened integrated circuit 204. The I/O port 206 may be a standard USB plug that forms a physical connection with a host (e.g., the computing device 102). When the portable signing device 202 is coupled to a host, the portable signing device 202 may receive power and implement the cryptographic techniques described herein. In this state, in particular, when operably coupled to a host, the portable signing device 202 receives power and implements cryptographic techniques, the portable signing device 202 being referred to herein as a signer.
The portable signing device 202 includes one or more microcontrollers 208 and a computer readable medium 214. The microcontroller(s) 208 may enable file transfer between the computing device 102 and the portable signing device 202. The microcontroller(s) 208 may include a processor(s) 210 configured to execute instructions or commands stored within a computer-readable storage medium 216 to implement a signer module 218. The computer-readable storage medium 210 may also store a private key 220. The computer readable storage medium 216 may include one or more non-transitory storage devices, such as RAM, ROM or flash memory, a hard drive, an SSD, or any type of medium suitable for storing electronic instructions, each coupled to a computer system bus.
The microcontroller(s) 208 may also include a cryptographic engine 212. In various embodiments, the cryptographic engine 212 is a secure root of trust (RoT) component, including a cryptographic coprocessor or processor. The cryptographic engine 212 has the computing power to perform the computations required to implement the steps of key generation and key signing. The cryptographic engine 212 may be communicatively coupled to a secure non-volatile computer-readable storage medium 216 through a private interface.
FIG. 3 illustrates an example operating environment 300 including an example provisioning server 302. The configuration server 302 may include a processor(s) 304, a computer-readable medium 306, I/O ports 314, and a communication system 316. Notably, the computer-readable storage medium 308 can include a cryptographic module 310 and a key provider 312. Cryptographic module 310 may be configured to perform a hashing operation to calculate an LM-OTS public key.
FIG. 4 illustrates an example operating environment 400 that includes a computing device 102-1 operably coupled to a plurality of portable signing devices 202 (e.g., portable signing device 202-1, portable signing device 202-2, portable signing device 202-3, portable signing device 202-4, portable signing device 202-5) and linked 402 to provisioning server 302. Operating environment 400 may include all previous operating environments disclosed herein (e.g., operating environment 100, operating environment 200, operating environment 300). Operating environment 400 may be an air gap network defining a secure system (e.g., a network employed on one or more computing devices to ensure that a secure computer network is physically isolated from an unsecure network). As illustrated, the computing apparatus 102-1 is operatively coupled to more than one portable signing device 202 via a USB hub 404. In this example, five portable signing devices 202 are powered and implement cryptographic techniques, constituting five signers. In other implementations, more signers may be operably coupled to the computing device 102-1 (e.g., 32 signers).
Computing device 102-1 may link 402 to provisioning server 302. Link 402 may be implemented wirelessly via a communication system of two devices. Link 402 enables data transfer between provisioning server 302 and the signer. In some implementations, the signer is operatively coupled directly to the provisioning server 302 via the USB hub 404.
Key generation techniques
This section describes techniques for key generation. In portions of the following discussion, reference will be made, by way of example, to the operating environment 400 of FIG. 4. Such references should not be construed as limiting the described aspects to operating environment 400, but rather as illustrations of one of various examples. Additionally, aspects of the techniques described herein may be reordered, removed, and/or operated on in parallel with each other.
Fig. 5 illustrates an example technique 500 for key generation. In aspects, the techniques and apparatus for key generation described herein follow NIST SP 800-208 random number generation for keys and signatures. In a first aspect, LMS randomization parameters of an LMS scheme are generated using an approved random bit generator, wherein instantiation of the random bit generator supports a security strength of at least 128 bits. The signer (e.g., portable signing device 202-1 operatively coupled to computing device 102-1) or the provisioning server (e.g., provisioning server 302) may generate LMS randomization parameters. In a second aspect, the provisioning server obtains LMS randomization parameters 502. The provisioning server can then share the LMS randomization parameters 504 between each of the signers (e.g., portable signing device 202-1, portable signing device 202-2, portable signing device 202-3, portable signing device 202-4, portable signing device 202-5). The signer may "walk" through the Merkle tree using LMS randomization parameters. In an embodiment, the portion of the Merkle tree may be calculated independently by each of the signers.
In a third aspect, the provisioning server associates 506 a unique starting leaf index number from 0 to (2 S) -1 with each signer. In some implementations, the provisioning server associates a unique range of leaf indexes.
In a fourth aspect, the provisioning server may notify each of the signers 508. Informing each of the signers 508 may include sending to each of the signers a unique starting leaf index number, a range of leaf indices, and a target height of the Merkle tree associated with each of the signers. The provisioning server, which may notify each of the signers 508 by sending a range of leaf indexes, may configure each of the signers to calculate a portion of the Merkle tree having a predetermined height. Data sent during signer notification may facilitate proper maintenance of leaf indexes during computation of Merkle trees.
Next, each signer may create its own random SEED for the LM-OTS signature and generate a local LM-OTS and LMs public key. The random SEED may be a byte string value generated using an approved random bit generator, where instantiation of the random bit generator supports a predetermined security strength. The SEED may be a secret random value for pseudo-random key generation that is not revealed outside each respective portable signing device. The same SEED value may be used to generate each private element in a single LMS instance. In some implementations, each signer uses its own random SEED for its own portion (e.g., sector, partition) of the Merkle tree.
The local LM-OTS and LMs keys may be generated as if the resulting Merkle tree were to be a reduced Merkle tree. For example, for 32 signers, an HBS scheme of 2 20 size may be only 2 15 in size. In an embodiment, the key generation may be performed entirely independently by the signer. For example, each signer may independently construct a portion of a Merkle tree (e.g., merkle tree for HBS schemes) to generate local LM-OTS and LMS keys using common LMS randomization parameters and secret random SEED. Key generation may take several hours to perform due to the low performance capabilities of portable signing devices.
In some embodiments, the secure hardened portable signing device may not be well suited for LM-OTS key generation. As a result, the signer may share the first hash of each local LM-OTS private key with the provisioning server, and the provisioning server may continue the hashing operation to calculate the LM-OTS public key. In such embodiments, the provisioning server may include a cryptographic module (e.g., cryptographic module 310) and destroy the SEED after computation. In other implementations, the provisioning server can generate a complete Merkle tree and provision at least a portion of the SEED and Merkle tree used back to each signer via a secure link (e.g., link 402).
Once the signer generates its local public key, the signer may share its local LMS public key (e.g., root key) with the provisioning server. In a fifth aspect, the provisioning server may receive the local LMS public key 510 from each of the signers over a secure link. Upon receiving the local LMS public key 510 from each of the signers, or in parallel with the receiving, the provisioning server may implement the steps of a key provider (e.g., key provider 312). In a sixth aspect, the key configurator may order 512 the received local LMS public keys. Ordering 512 the local LMS public key may include the key configurator generating an ordered list.
In a seventh aspect, the configuration server may generate the public LMS public key 514. For example, the provisioning server can hash the local LMS public key via a Merkle tree to generate a single public LMS public key. In an eighth aspect, the key provider may provide 516 an ordered list, public LMS public key, and/or Merkle tree path to each of the signers. The key provider of the provisioning server provisions the Merkle tree path to each signer so that the signer can store the path to the top of the Merkle tree without revealing the data or paths of other signers. For example, the signer receives a unique Merkle tree path that includes a path of its local LMS public key (e.g., leaf) to the public LMS public key (e.g., root).
Once the signer obtains the same public LMS public key 516, the portable signing devices (e.g., portable signing device 202-1, portable signing device 202-2, portable signing device 202-3, portable signing device 202-4, portable signing device 202-5) can be physically distributed. For example, portable signing device 202-1 can be distributed to development teams.
FIG. 6 illustrates an example operating environment 600 including an example portable signing device 202-1 operatively coupled to an example computing device 102-2. Computing device 102-2 may include a software development environment module 114. The software development environment module 114 may be a module configured to provide an environment for developing software for firmware updates. The software developed on computing device 102-2 may be only a portion of a larger firmware update.
Key signature technique
This section describes techniques for key generation. In portions of the following discussion, reference will be made, by way of example, to the operating environment 600 of FIG. 6. Such references should not be construed as limiting the described aspects to operating environment 600, but rather as illustrations of one of various examples.
Fig. 7 illustrates an example technique 700 for key signing. In an aspect, a signer (e.g., portable signing device 202-1 operably coupled to computing device 102-2) may receive a message to sign 702. The signer may then implement the steps of the signer module 218. Signer module 218 may operate entirely independently on a secure hardened integrated circuit (e.g., secure hardened integrated circuit 204) of a portable signing device. In a first step, the signer module 218 may verify that the Merkle tree used is not exhausted by checking the monotonic leaf counter 704. The leaf counter may count up from 0 to 2n-1 over the range of supplies and increment after each OTS is generated. The leaf-counter counts the state that can be referred to as a hash-based signature, and its management is critical to ensuring security.
In a second step, the signer module 218 may sign 706 the message using its own reduced height Merkle tree or using its own portion of a larger Merkle tree. The signer module 218 continues signing 708 using the ordered list of offerings of local LMS public keys with other signers to the public LMS public key. Each signer may append its corresponding Merkle tree path to its signature so that the signature can be verified using the public LMS public key. The signer module 218 may then share the signature 710. For example, the signer module 218 may share the signature 710 with the computing device 102-2. In this way, the signer can independently perform key signing and maintain its own state. In addition, the signer can sign the message using its own SEED into its root key and append the path to the top of the Merkle tree required for signature verification. In so doing, the resulting signature size may be smaller than the signature size of a comparable HSS scheme. Furthermore, the signing process can be computed faster than conventional techniques because each signer can operate on a smaller tree. In addition, since a single level Merkle tree is generated and small signatures can be implemented, the amount of storage space occupied on the portable signature device can be minimized.
To further accelerate the signing process, the signer may store a cache of at least part of the local LM-OTS public key or Merkle tree in order to avoid computationally expensive operations to calculate the local LM-OTS public key. The stored cache may reside entirely within a computer readable medium (e.g., computer readable medium 214) of the portable signing device. Depending on the storage space available in the portable signing device and the performance-to-space tradeoff, all or some portion of the Merkle tree may be stored.
The techniques described herein alleviate the need for a centralized signer to maintain the state of the HBS scheme. Instead, each signer is able to sign independently without having to access the signing service. In generating the signature, the signer may verify the computed signature using the public key. In other implementations, if the provisioning server is secure and accessible to the signers, the provisioning server can generate a complete Merkle tree and provision each of the signers with at least a portion of the SEED and/or Merkle tree used using an offline channel. In addition to the above description, each of the signers is capable of maintaining a state within its secure hardened integrated circuit. In addition, the techniques described herein are fully compatible with the standards outlined in NIST SP 800-208.
Example
In the following sections, examples are provided.
Example 1: a computer-implemented method, comprising: obtaining a Leight on-Micali signature (LMS) randomization parameter; sharing LMS randomization parameters among one or more signers; associating a unique starting leaf index number with each of the signers; notifying each of the signers, the notifying comprising sending to each of the signers a unique starting leaf index number, a range of leaf indices, and a target height of the Merkle tree associated with each of the signers; receiving a local LMS public key from each of the signers; ordering the received local LMS public keys, the ordering producing an ordered list of received local LMS public keys; generating a public LMS public key; providing to each of the signers, the providing including sending to each of the signers an ordered list, a public LMS public key, and a Merkle tree path; and verifying each of the signers, the verifying being the obtaining of the public LMS public key.
Example 2: the computer-implemented method of example 1, wherein the LMS randomization parameter is an LMS key pair identifier.
Example 3: the computer-implemented method of example 1, wherein the signer is a portable signing device operatively coupled to the host, the portable signing device having a secure hardened integrated circuit.
Example 4: the computer-implemented method of example 1, wherein the computer-implemented method is implemented on a provisioning server.
Example 5: the computer-implemented method of example 4, wherein obtaining the LMS randomization parameter comprises receiving the LMS randomization parameter from one of the signers at a provisioning server.
Example 6: the computer-implemented method of example 4, wherein obtaining the LMS randomization parameters comprises generating the LMS randomization parameters at a provisioning server.
Example 7: the computer-implemented method of example 4, further comprising implementing a stateful hash-based signature (HBS) scheme that combines an one-time signature (OTS) scheme with a Merkle tree structure at a cryptographic module of a provisioning server.
Example 8: the computer-implemented method of example 7, wherein the stateful HBS scheme is an LMS scheme configured to implement SHA-256.
Example 9: the computer-implemented method of example 4, wherein providing the ordered list to the signers enables each of the signers to generate a portion of a Merkle tree associated with each respective signer.
Example 10: the computer-implemented method of example 4, further comprising computing a Merkle tree and causing each of the signers to cache portions of the Merkle tree to accelerate signing on low performance hardware.
Example 11: the computer-implemented method of example 4, further comprising provisioning each of the signers with a local LMS public key effective to cause each of the signers to operate independently after provisioning.
Example 12: the computer-implemented method of example 4, further comprising computing a local light on-Micali one-time signature (LM-OTS) public key at the provisioning server.
Example 13: the computer-implemented method of example 4, further comprising verifying that each of the signers is signed independently with the public LMS public key.
Example 14: the computer-implemented method of example 4, further comprising: generating a complete Merkle tree at a secure and accessible provisioning server, and provisioning at least a portion of the used SEED and Merkle tree back to each of the signers using an offline channel.
Example 15: a provisioning server, comprising: at least one processor; and at least one computer-readable storage medium comprising instructions that, when executed by the at least one processor, cause the processor to perform the method of any preceding claim.
Conclusion(s)
Although embodiments of techniques and apparatus for stateful hash-based signing with a single public key and multiple independent signers have been described in language specific to features and/or methods, it is to be understood that the subject matter of the appended claims is not necessarily limited to the specific features or methods described. Rather, the specific features and methods are disclosed as example embodiments of implementations that implement stateful hash-based signatures with a single public key and multiple independent signers.
Claims (15)
1. A computer-implemented method, comprising:
Obtaining a Leight on-Micali signature LMS randomization parameter;
Sharing the LMS randomization parameter among one or more signers;
associating a unique starting leaf index number with each of the signers;
notifying each of the signers, the notifying comprising sending to each of the signers the unique starting leaf index number, range of leaf indices, and target height of Merkle tree associated with each signer;
receiving a local LMS public key from each of the signers;
ordering the received local LMS public keys, the ordering producing an ordered list of received local LMS public keys;
Generating a public LMS public key;
Providing to each of the signers, the providing comprising sending to each of the signers the ordered list, the public LMS public key, and a Merkle tree path; and
Each of the signers is authenticated, the authentication being to obtain the public LMS public key.
2. The computer-implemented method of claim 1, wherein the LMS randomization parameter is an LMS key pair identifier.
3. The computer-implemented method of claim 1, wherein the signer is a portable signing device operably coupled to a host, the portable signing device having a secure hardened integrated circuit.
4. The computer-implemented method of claim 1, wherein the computer-implemented method is implemented on a provisioning server.
5. A computer-implemented method as defined in claim 4, wherein obtaining the LMS randomization parameters comprises receiving the LMS randomization parameters at the provisioning server from one of the signers.
6. A computer-implemented method as defined in claim 4, wherein obtaining the LMS randomization parameters comprises generating the LMS randomization parameters at the provisioning server.
7. The computer-implemented method of claim 4, further comprising implementing a stateful hash-based signature HBS scheme that combines a one-time signature OTS scheme with a Merkle tree structure at a cryptographic module of the provisioning server.
8. The computer-implemented method of claim 7, wherein the stateful HBS scheme is an LMS scheme configured to implement SHA-256.
9. The computer-implemented method of claim 4, wherein providing the ordered list to the signers enables each of the signers to generate a portion of a Merkle tree associated with each respective signer.
10. The computer-implemented method of claim 4, further comprising computing a Merkle tree and causing each of the signers to cache portions of the Merkle tree to accelerate signatures on low performance hardware.
11. The computer-implemented method of claim 4, further comprising provisioning a local LMS public key to each of the signers effective to cause each of the signers to operate independently after the provisioning.
12. The computer-implemented method of claim 4, further comprising computing a Leghton-Micali once signed LM-OTS public key at the provisioning server.
13. A computer-implemented method as described in claim 4, further comprising verifying that each of the signers is independently signed with a public LMS public key.
14. The computer-implemented method of claim 4, further comprising:
a complete Merkle tree is generated at a secure and accessible provisioning server and the used SEED and at least a portion of the Merkle tree are provisioned back to each of the signers using an offline channel.
15. A provisioning server, comprising:
at least one processor; and
At least one computer-readable storage medium comprising instructions that, when executed by the at least one processor, cause the processor to perform the method of any preceding claim.
Publications (1)
Publication Number | Publication Date |
---|---|
CN118056375A true CN118056375A (en) | 2024-05-17 |
Family
ID=
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11184157B1 (en) | Cryptographic key generation and deployment | |
Wang et al. | Enabling public verifiability and data dynamics for storage security in cloud computing | |
Schröder et al. | Verifiable data streaming | |
Aumasson et al. | The hash function BLAKE | |
US9432360B1 (en) | Security-aware split-server passcode verification for one-time authentication tokens | |
Zhang et al. | Provable multiple replication data possession with full dynamics for secure cloud storage | |
US9444619B2 (en) | Generation of randomized messages for cryptographic hash functions | |
CN112152794A (en) | Efficient post-quantum anonymous attestation with signature-based join protocol and infinite signatures | |
US9407631B1 (en) | Multi-server passcode verification for one-time authentication tokens with auxiliary channel compatibility | |
US9454654B1 (en) | Multi-server one-time passcode verification on respective high order and low order passcode portions | |
CN112152792A (en) | MTS-based mutually authenticated remote attestation | |
JPWO2010005071A1 (en) | Password authentication method | |
Anwar et al. | Hash Algorithm In Verification Of Certificate Data Integrity And Security | |
Qin et al. | Efficient chosen‐ciphertext secure public‐key encryption scheme with high leakage‐resilience | |
CN113939821A (en) | System and method for non-parallel mining on a workload justification blockchain network | |
CN101789939B (en) | Effective realization method for credible OpenSSH | |
Xu et al. | Data tag replacement algorithm for data integrity verification in cloud storage | |
US8824677B1 (en) | Provably secure and efficient pseudorandom number generation | |
US8954728B1 (en) | Generation of exfiltration-resilient cryptographic keys | |
WO2023159849A1 (en) | Digital signature methods, computer device and medium | |
CN118056375A (en) | Stateful hash-based signing using a single public key and multiple independent signers | |
CN107046465B (en) | Intrusion-tolerant cloud storage data auditing method | |
US20220086003A1 (en) | Continuous space-bounded non-malleable codes from stronger proofs-of-space | |
KR20240055815A (en) | Stateful hash-based signing using a single public key and multiple independent signers | |
Isa et al. | A secure TFTP protocol with security proofs |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication |