US20160299972A1 - Providing app store search results - Google Patents
Providing app store search results Download PDFInfo
- Publication number
- US20160299972A1 US20160299972A1 US15/092,459 US201615092459A US2016299972A1 US 20160299972 A1 US20160299972 A1 US 20160299972A1 US 201615092459 A US201615092459 A US 201615092459A US 2016299972 A1 US2016299972 A1 US 2016299972A1
- Authority
- US
- United States
- Prior art keywords
- search
- app
- search results
- search query
- app store
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
- 238000000034 method Methods 0.000 claims abstract description 54
- 238000004590 computer program Methods 0.000 claims abstract description 15
- 230000008569 process Effects 0.000 description 33
- 238000004891 communication Methods 0.000 description 9
- 238000010586 diagram Methods 0.000 description 8
- 101100264195 Caenorhabditis elegans app-1 gene Proteins 0.000 description 5
- 238000012545 processing Methods 0.000 description 5
- 238000012552 review Methods 0.000 description 5
- 230000006870 function Effects 0.000 description 4
- 230000004044 response Effects 0.000 description 4
- LHCPRYRLDOSKHK-UHFFFAOYSA-N 7-deaza-8-aza-adenine Chemical compound NC1=NC=NC2=C1C=NN2 LHCPRYRLDOSKHK-UHFFFAOYSA-N 0.000 description 3
- 230000008901 benefit Effects 0.000 description 3
- 238000012015 optical character recognition Methods 0.000 description 3
- 230000003287 optical effect Effects 0.000 description 3
- 238000005516 engineering process Methods 0.000 description 2
- 230000003993 interaction Effects 0.000 description 2
- 230000000644 propagated effect Effects 0.000 description 2
- 238000013515 script Methods 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 238000012546 transfer Methods 0.000 description 2
- 230000005540 biological transmission Effects 0.000 description 1
- 238000004422 calculation algorithm Methods 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 238000012795 verification Methods 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Images
Classifications
-
- G06F17/30864—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/951—Indexing; Web crawling techniques
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2453—Query optimisation
- G06F16/24534—Query rewriting; Transformation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2457—Query processing with adaptation to user needs
- G06F16/24573—Query processing with adaptation to user needs using data annotations, e.g. user-defined metadata
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/953—Querying, e.g. by the use of web search engines
- G06F16/9535—Search customisation based on user profiles and personalisation
-
- G06F17/2235—
-
- G06F17/30448—
-
- G06F17/30525—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/12—Use of codes for handling textual entities
- G06F40/134—Hyperlinking
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/02—Protocols based on web technology, e.g. hypertext transfer protocol [HTTP]
Definitions
- This specification relates to providing app store search results.
- Searching for applications on an app store is often limited to information hosted on the app store, although information provided by outside sources, e.g., user reviews published on an external online forum, may be highly relevant.
- this specification describes techniques for improving app store search results using web search results.
- one innovative aspect of the subject matter described in this specification can be embodied in methods that include the following actions: responsive to identifying a first search query directed to an app store: revising the first search query to produce a second search query different from the first search query; obtaining, from a web page search, second search results responsive to the second search query; and analyzing the second search results to identify first terms; obtaining, from the app store, first search results in accordance with the first terms.
- FIG. 1 For a system of one or more computers to be configured to perform particular operations or actions means that the system has installed on it software, firmware, hardware, or a combination of them that in operation cause the system to perform the operations or actions.
- For one or more computer programs to be configured to perform particular operations or actions means that the one or more programs include instructions that, when executed by data processing apparatus, cause the apparatus to perform the operations or actions.
- Relevant apps can be presented to a user based on information matching an app search that is not hosted on the app store.
- Information obtained from web pages may be used to refine app store search results.
- Apps can be automatically annotated to facilitate future searches.
- Existing web page annotations e.g., tags or labels, may be, as part of an app store search process, associated with relevant apps without requiring user intervention.
- FIG. 1 is a block diagram illustrating an example process for providing app store search results.
- FIG. 2 is a flow diagram illustrating an example process for providing app store search results.
- FIG. 3 is a flow diagram illustrating an example process for providing app store search results.
- FIG. 4 is a block diagram of an example computing system for providing app store search results.
- An app store also called an app marketplace, is a type of digital distribution platform for mobile apps, also called applications for mobile devices, e.g., smartphones, laptop computers, and tablet computers.
- An app provides a specific set of functions, e.g., enabling a user to review a product or providing a map or driving directions. Apps are sometimes programmed to run on specific devices or operating systems or both.
- An app store may be an online store that has a graphic user interface (GUI) and a backend database. Through the GUI, users can search for a particular app or browse through different app categories, review information about an app, e.g., a description as well as user reviews and ratings, and acquire the app for free or for a fee, e.g., by downloading the app to one or more mobile devices, either at the time or later. Upon appropriate verification, an app store generally downloads a user-selected app to a user's device, which will install the app on that device.
- GUI graphic user interface
- the technologies described in this specification provide various technical solutions to improve app store search results using web search results by, for example, (1) revising a search query directed to an app store to produce a different search query tailored for web page searches, (2) identifying web pages that match the tailored search query, (3) selecting apps identified in these web pages, and (4) producing search results for the search query executed on the app store that include the selected apps.
- a search engine After identifying a search query “calendar app” directed to an app store, a search engine rewrites the search query into a different search query “calendar app smartphone type A” and looks for web pages that satisfy the query “calendar app smartphone type A.”
- the search engine based on the returned web pages, the search engine identifies apps that are either mentioned by name in or are linked to these web pages, e.g., “calendar app 1 ” and “calendar app 2 .” Then, the search engine can provide app search results based on these identified several apps.
- FIG. 1 is a block diagram illustrating an example process 100 for providing app store search results.
- the process 100 begins when an app store receives a query, which will be referred to as the “app search query,” from a user.
- a query which will be referred to as the “app search query”
- a user has entered the query “calendar app” on app store A ( 102 ).
- An app search engine which may be part of the app store A or a separate component, begins a web search process by generating a revised search query.
- the app search engine generates the revised search query by adding one or more search key terms to the app search query.
- an app search engine may determine the operating system of a user device from which the search query was issued to be a “G-A” system and thus include the name of the operating system in the web search query, “calendar app on G-A device” ( 104 ). Techniques for generating a revised search query are described in more detail in reference to FIG. 2 and FIG. 3 .
- the app search engine submits the revised search query to an Internet search engine and obtains web pages in response, e.g., by following links in search results provided by the Internet search engine. For example, as shown in FIG. 1 , the app search engine obtains five web pages 152 - 160 for the revised search query 104 .
- app search engine next analyzes the content of these web pages to identify relevant apps.
- app search engine classifies an app as matching an app search query if the app is mentioned in the content of a web page. For example, based on the snippet “Calendar app 1 . . . G device” in the web page 152 , the app search engine classifies the calendar app 1 as matching the app search query “calendar app.” For another example, based on the snippet “App store A . . . Calendar . . . app 3 ” in the web page 156 , the app search engine classifies the calendar app 3 as matching the app search query “calendar app.”
- the app search engine performs a link analysis in addition to or in place of a content analysis.
- the app search engine classifies the linked app as matching. For example, after determining that web page 160 includes a link to the calendar app 4 on the app store A, the app search engine classifies the calendar app 4 as matching the app search query “calendar app.”
- the app search engine After analyzing these web pages, the app search engine identifies a set of apps as matching the app search query.
- the app search engine optionally determines a degree of relevance to the app search query for each identified app. In some implementations, the app search engine determines the degree of relevance based on a semantic analysis of the corresponding web page. For example, the app search engine determines the degree of relevance for each identified app in accordance with the meaning of other content in the corresponding of the web page.
- the app search engine classifies the “calendar app 2 ” as having a lesser degree of relevance: because according to at least some users, the “calendar app 2 ” offered at the app store A does not function as well (“app store B version better”) and should therefore be avoided.
- the app search engine classifies an app as having a higher degree of relevance when the app is mentioned in at least a predefined number of web pages that match the revised search query. Similarly, based on the determination that both the web page 152 and web page 156 identify the “calendar app 3 ,” the app search engine may determine that the “calendar app 3 ” is more relevant to the app search query than the “calendar app 1 ,” which is identified only by a single web page 152 .
- the app search engine modifies the identified set of apps in accordance with each app's degree of relevance to the app search query or to the revised search query. For example, the app search engine can rank the apps based on their degrees of relevance and, optionally, the app search engine can exclude an app from being part of the app search results when the app's degree of relevance is lower than a predefined threshold relevance.
- the app engine ranks the calendar app 4 , the calendar app 3 , the calendar app 1 , in a relevance descending order, based on their respective degrees of relevance and presents them as app search results to the user, i.e., presents app search results identifying those apps to the user.
- the app engine may exclude the calendar app 2 , due to its determined low relevance, from being part of the app search results.
- FIG. 2 is a flow diagram illustrating an example process 200 for providing app store search results.
- the process 200 will be described as being performed by a system of one or more computers, located in one or more locations, and programmed appropriately in accordance with this specification.
- the system is a web search engine.
- the system identifies an app search query provided by a user to an app store (step 202 ). For example, when a user searches an app store on her smartphone, the smartphone submits a web search to the system based on the app search query.
- the system After receiving the app search query, the system generates a second query from the app search query (step 204 ).
- the system revises the first search query by adding a search term to the first search query.
- the second search query is also referred to in this specification as the revised query.
- the added search term identifies a characteristic of the app store or a device from which the app search is issued.
- the added search term can be the name of the app store, the name of the device, or the name of an operating system under which the device operates.
- the system then provides the revised query to an Internet search engine to obtain web search results that identify web pages (step 206 ) and identifies relevant apps by analyzing these web pages.
- the system analyzes a web page that include links to apps (step 208 ) to identify names of apps that may be available on the app store (step 214 ). For example, as shown in FIG. 1 , because the web page 160 includes a user-selectable link to the “calendar 4 app” on the app store A, the system may identify the calendar app 4 as relevant to the first query.
- the system semantically analyzes a web page ( 210 ) to identify names of apps that may be available on the app store (step 216 ). For example, as shown in FIG. 1 , because the phrase “Calendar app 3 is on App store A′′” is present in the web page 156 , the system identifies “calendar app 3 ” as a calendar app available on the app store A and thus relevant to the first query.
- the system may analyze other content of the web page, e.g., by performing optical character recognition (OCR) on an image in the web page or parsing metadata describing the web page, to determine which one or more apps the web page refers to. For example, if OCR results obtained from an image included in a web page indicates that the image includes the phrase “Calendar app 3 ,” then the system may classify the web page as describing the calendar app 3 , but not the calendar app 2 , on the app store.
- OCR optical character recognition
- the system apart from the web search process, the system conducts an app store search, focusing on information stored in the app store.
- the system may identify apps based on the app store search (step 212 ).
- the app store search process can take place before, after, or concurrently with the web search process.
- the system modifies the apps identified in the app store search process ( 218 ) before providing them to a user. For example, the system ranks (or re-ranks) the apps identified in the app store search process based information identified in the web search. For example, the system may rank an app identified in the app store search process low among apps provided to a user, when a web page obtained in the web search process describes the app as “does not function as described.”
- the system may exclude an app identified in the app store search process based on information identified by the web search process. For example, the system may withhold an app identified in the app store search process from being presented to a user, when a web page shows a low user rating of the app.
- the system provides, to a user, apps additional to those identified in the app store search process based on information identified by the web search process. For example, the system may add, to apps obtained in the app store search process, an app that exists on the app store but is identified only by search results in the web search process, when a web page describes the app in a predefined way e.g., as a “must have” or because the web page includes a link to the app on the app store.
- FIG. 3 is a flow diagram illustrating an example process 300 for providing app store search results.
- the process 300 will be described as being performed by a system, e.g., a web search engine or an app search engine, implemented on one or more computers in one or more locations.
- An app store application installed on a mobile device, e.g., a smartphone, receives a search query from a user.
- the app store sends the search query to the search engine and the search engine begins a web search process (step 302 ).
- the search engine Before executing a web search, the search engine tailors the app search query to the web search process by revising it (step 304 ). As described in this specification, the search engine may generate a revised search query by adding, removing, or replacing search terms in the app search query. For example, if an app search query “calendar app” was issued through an app store A on a smartphone B, the search engine may revise the app search query by adding the name of the app store and the name of the smartphone to the original app search query, “calendar app on smartphone B at app store A.”
- the search engine then executes the revised app search query to perform a web search and obtains relevant web search results (step 306 ).
- the search engine analyzes the web search results, e.g., either semantically, structurally, or both, to identify apps that may be relevant to the app search query (step 308 ).
- the search engine may classify the “calendar 4 app” as highly relevant to the app search query “calendar app.” Because providing, in a web page, a direct link to an app may suggest that the app is highly pertinent to the content of the web page.
- the search engine may classify the “calendar 2 app” as highly relevant to the app search query “calendar app” because being mentioned in a relatively large number of web pages may indicate that an app is widely recognized as relevant and useful.
- the search engine may classify the “calendar 2 app” as irrelevant to the app search query “calendar app.” This content analysis is advantageous, because it can provide more than facially relevant app search results.
- apps are examined substantively, e.g., in terms of functionality and user feedback, before being provided, as part of search results, to a user.
- the search engine also searches the app store using the app search query to identify relevant apps. For example, after receiving the app search query “calendar app,” the search engine obtains app store search results and identifies one or more apps on based on the app store search results.
- the search engine selectively identifies one or more apps in a response to the user (step 310 ). For example, an app identified in the app search results can be removed as irrelevant based on the description of that app in a web page. For example, an app not identified in the app search results, but identified in the web search results can be provided to a user as relevant. For another example, an app identified in the app search results may be ranked low on the list of apps provided to a user, based on the negative description of that app in a web page.
- the search engine forwards content or metadata of a web page to the app store, and the app store annotates the corresponding app based on the content or metadata.
- an app offered as part of the app search results to a user is described in a web page as “not only the best calendar app, but also the coolest alarm app,” the app store annotates the app as a “calendar app” as well as an “alarm app.”
- the search engine can use these app annotations to improve app search results in the future, for example, based on the following algorithm: an app store may classify an app as matching an app search query, when the annotation associated with the app matches at least one search term in the app search query.
- an app store may classify an app as matching an app search query, when the annotation associated with the app matches at least one search term in the app search query.
- the system can pre-generate app search results offline for predefined queries, e.g., popular queries that are issued more than a predefined number of times over a predefined time period, and serve the app search results to a user faster.
- predefined queries e.g., popular queries that are issued more than a predefined number of times over a predefined time period
- the app search engine can identify a set of popular app search queries, e.g., queries that are issued more than 5 times in the past 2 hours by different users.
- the system can identify matching apps using the search processes described in this specification and cache these app search results in anticipation of these search queries or their equivalents being issued again, e.g., by the same or different users.
- These techniques may be advantageous, as they can reduce response time needed to generate app search results. For example, after obtaining an app search query, the system can skip the steps 204 , 206 , 208 , and 210 described in FIG. 2 and provide pre-generated app search results to a user.
- FIG. 4 is a block diagram of an example computing system 400 that implements app store technology described in this specification.
- the system 400 is connected with one or more user devices 402 through a communication network 404 .
- the system 400 is implemented on one or more computers at one or more locations, each of which has one or more processors and memory for storing instructions executable by the one or more processors.
- a user device 402 provides a GUI 410 of an app store 420 hosted on the system 400 .
- the GUI is implemented in an app previously installed on the user device.
- the app store GUI 410 receives app search queries provided by a user through the GUI and causes the app search engine 412 and the web search engine 452 in the system 400 to identify matching apps and web documents referring to the matching apps, respectively.
- a user device may be, for example, a mobile device, e.g., a laptop 420 -C, a smartphone 420 -B, or a tablet computer.
- the communication network 404 provides communications and data transfers between a user device 402 and the system 400 .
- the communication network 404 generally includes a local area network (LAN) or a wide area network (WAN), e.g., the Internet, and may include both.
- LAN local area network
- WAN wide area network
- the system 400 provides, to a user device 102 , app search results responsive to an app search query.
- the system 400 includes a query revision module 450 , a web search engine 452 , a web page database 454 , an app search engine 412 , and an app database 414 .
- the app store 420 includes the GUI 410 , the app search engine 412 , and the app database 414 .
- the app database 414 includes a collection of apps, as well as data about the apps.
- the query revision module 450 generates a revised search query for an app search query and sends the revised search query to the web search engine 452 to obtain matching web pages.
- the web search engine 452 is a web search engine. In response to the app search engine, the web search engine executes web searches based on a revised search query against the web page database 454 to obtain matching web pages.
- the web search engine 452 also provides information identified in web search results, e.g., app names or links, to the app search engine 412 .
- All of the operations described in this specification may be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- the techniques disclosed may be implemented as one or more computer program products, i.e., one or more modules of computer program instructions encoded on a computer-readable medium for execution by, or to control the operation of, data processing apparatus.
- the computer readable-medium may be a machine-readable storage device, a machine-readable storage substrate, a memory device, a composition of matter affecting a machine-readable propagated signal, or a combination of one or more of them.
- the computer-readable medium may be a non-transitory computer-readable medium.
- data processing apparatus encompasses all apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers.
- the apparatus may include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
- a propagated signal is an artificially generated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus.
- a computer program (also known as a program, software, software application, script, or code) may be written in any form of programming language, including compiled or interpreted languages, and it may be deployed in any form, including as a standalone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.
- a computer program does not necessarily correspond to a file in a file system.
- a program may be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code).
- a computer program may be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- the processes and logic flows described in this specification may be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output.
- the processes and logic flows may also be performed by, and apparatus may also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit).
- FPGA field programmable gate array
- ASIC application specific integrated circuit
- processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer.
- a processor will receive instructions and data from a read only memory or a random access memory or both.
- the essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks.
- mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks.
- a computer need not have such devices.
- a computer may be embedded in another device, e.g., a tablet computer, a mobile telephone, a personal digital assistant (PDA), a mobile audio player, a Global Positioning System (GPS) receiver, to name just a few.
- Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
- the processor and the memory may be supplemented by, or incorporated in, special purpose logic circuitry.
- the techniques disclosed may be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user may provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- a keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices may be used to provide for interaction with a user as well; for example, feedback provided to the user may be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user may be received in any form, including acoustic, speech, or tactile input.
- Implementations may include a computing system that includes a back end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front end component, e.g., a client computer having a graphical user interface or a Web browser through which a user may interact with an implementation of the techniques disclosed, or any combination of one or more such back end, middleware, or front end components.
- the components of the system may be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (LAN) and a wide area network (WAN), e.g., the Internet.
- LAN local area network
- WAN wide area network
- the computing system may include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network.
- the relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
Abstract
Description
- This application claims priority to U.S. Provisional Application No. 62/145,260, filed on Apr. 9, 2015. The disclosure of the prior application is considered part of and is incorporated by reference in the disclosure of this application.
- This specification relates to providing app store search results.
- Searching for applications on an app store is often limited to information hosted on the app store, although information provided by outside sources, e.g., user reviews published on an external online forum, may be highly relevant.
- In general, this specification describes techniques for improving app store search results using web search results.
- In general, one innovative aspect of the subject matter described in this specification can be embodied in methods that include the following actions: responsive to identifying a first search query directed to an app store: revising the first search query to produce a second search query different from the first search query; obtaining, from a web page search, second search results responsive to the second search query; and analyzing the second search results to identify first terms; obtaining, from the app store, first search results in accordance with the first terms.
- Other embodiments of this aspect include corresponding computing systems, apparatus, and computer programs recorded on one or more computing storage devices, each configured to perform the actions of the methods. For a system of one or more computers to be configured to perform particular operations or actions means that the system has installed on it software, firmware, hardware, or a combination of them that in operation cause the system to perform the operations or actions. For one or more computer programs to be configured to perform particular operations or actions means that the one or more programs include instructions that, when executed by data processing apparatus, cause the apparatus to perform the operations or actions.
- Particular embodiments of the subject matter described in this specification can be implemented so as to realize one or more of the following advantages. Relevant apps can be presented to a user based on information matching an app search that is not hosted on the app store. Information obtained from web pages, for example, may be used to refine app store search results. Apps can be automatically annotated to facilitate future searches. Existing web page annotations, e.g., tags or labels, may be, as part of an app store search process, associated with relevant apps without requiring user intervention.
- The details of one or more embodiments of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
-
FIG. 1 is a block diagram illustrating an example process for providing app store search results. -
FIG. 2 is a flow diagram illustrating an example process for providing app store search results. -
FIG. 3 is a flow diagram illustrating an example process for providing app store search results. -
FIG. 4 is a block diagram of an example computing system for providing app store search results. - Like reference numbers and designations in the various drawings indicate like elements.
- An app store, also called an app marketplace, is a type of digital distribution platform for mobile apps, also called applications for mobile devices, e.g., smartphones, laptop computers, and tablet computers. An app provides a specific set of functions, e.g., enabling a user to review a product or providing a map or driving directions. Apps are sometimes programmed to run on specific devices or operating systems or both.
- An app store may be an online store that has a graphic user interface (GUI) and a backend database. Through the GUI, users can search for a particular app or browse through different app categories, review information about an app, e.g., a description as well as user reviews and ratings, and acquire the app for free or for a fee, e.g., by downloading the app to one or more mobile devices, either at the time or later. Upon appropriate verification, an app store generally downloads a user-selected app to a user's device, which will install the app on that device.
- The technologies described in this specification provide various technical solutions to improve app store search results using web search results by, for example, (1) revising a search query directed to an app store to produce a different search query tailored for web page searches, (2) identifying web pages that match the tailored search query, (3) selecting apps identified in these web pages, and (4) producing search results for the search query executed on the app store that include the selected apps.
- For example, after identifying a search query “calendar app” directed to an app store, a search engine rewrites the search query into a different search query “calendar app smartphone type A” and looks for web pages that satisfy the query “calendar app smartphone type A.”
- Next, based on the returned web pages, the search engine identifies apps that are either mentioned by name in or are linked to these web pages, e.g., “
calendar app 1” and “calendar app 2.” Then, the search engine can provide app search results based on these identified several apps. - In this way, particularly relevant app search results may be provided without requiring special user effort to find information relevant to an app that is not available in an app store.
-
FIG. 1 is a block diagram illustrating anexample process 100 for providing app store search results. - The
process 100 begins when an app store receives a query, which will be referred to as the “app search query,” from a user. In the example shown inFIG. 1 , a user has entered the query “calendar app” on app store A (102). - An app search engine, which may be part of the app store A or a separate component, begins a web search process by generating a revised search query.
- In some implementations, the app search engine generates the revised search query by adding one or more search key terms to the app search query. For example, an app search engine may determine the operating system of a user device from which the search query was issued to be a “G-A” system and thus include the name of the operating system in the web search query, “calendar app on G-A device” (104). Techniques for generating a revised search query are described in more detail in reference to
FIG. 2 andFIG. 3 . - Next, the app search engine submits the revised search query to an Internet search engine and obtains web pages in response, e.g., by following links in search results provided by the Internet search engine. For example, as shown in FIG.1, the app search engine obtains five web pages 152-160 for the revised
search query 104. - The app search engine next analyzes the content of these web pages to identify relevant apps. In some implementations, app search engine classifies an app as matching an app search query if the app is mentioned in the content of a web page. For example, based on the snippet “
Calendar app 1 . . . G device” in theweb page 152, the app search engine classifies thecalendar app 1 as matching the app search query “calendar app.” For another example, based on the snippet “App store A . . . Calendar . . .app 3” in theweb page 156, the app search engine classifies thecalendar app 3 as matching the app search query “calendar app.” - In some implementations, the app search engine performs a link analysis in addition to or in place of a content analysis. In some implementations, upon determining that a web page includes a link to an app available at the app store A, the app search engine classifies the linked app as matching. For example, after determining that
web page 160 includes a link to thecalendar app 4 on the app store A, the app search engine classifies thecalendar app 4 as matching the app search query “calendar app.” - After analyzing these web pages, the app search engine identifies a set of apps as matching the app search query.
- In some implementations, the app search engine optionally determines a degree of relevance to the app search query for each identified app. In some implementations, the app search engine determines the degree of relevance based on a semantic analysis of the corresponding web page. For example, the app search engine determines the degree of relevance for each identified app in accordance with the meaning of other content in the corresponding of the web page.
- For example, based on the snippet “
Calendar app 2 . . . app store B version better” in the web page 518, the app search engine classifies the “calendar app 2” as having a lesser degree of relevance: because according to at least some users, the “calendar app 2” offered at the app store A does not function as well (“app store B version better”) and should therefore be avoided. - In some implementations, the app search engine classifies an app as having a higher degree of relevance when the app is mentioned in at least a predefined number of web pages that match the revised search query. Similarly, based on the determination that both the
web page 152 andweb page 156 identify the “calendar app 3,” the app search engine may determine that the “calendar app 3” is more relevant to the app search query than the “calendar app 1,” which is identified only by asingle web page 152. - After analyzing these web pages, the app search engine modifies the identified set of apps in accordance with each app's degree of relevance to the app search query or to the revised search query. For example, the app search engine can rank the apps based on their degrees of relevance and, optionally, the app search engine can exclude an app from being part of the app search results when the app's degree of relevance is lower than a predefined threshold relevance.
- For example, as shown in
FIG. 1 , the app engine ranks thecalendar app 4, thecalendar app 3, thecalendar app 1, in a relevance descending order, based on their respective degrees of relevance and presents them as app search results to the user, i.e., presents app search results identifying those apps to the user. As another example, as shown inFIG. 1 , the app engine may exclude thecalendar app 2, due to its determined low relevance, from being part of the app search results. - Note that these actions provide, in an app search at an app store, the benefits of a web search, e.g., gathering up-to-date and comprehensive information about an app, without requiring a user to manually or separately conduct the web search and review resulting web pages. These techniques can be particularly advantageous when an app's availability is limited to an app store, but at the same time the app store does not provide desirable information about the app, e.g., the app's functionality and user feedback.
-
FIG. 2 is a flow diagram illustrating anexample process 200 for providing app store search results. For convenience, theprocess 200 will be described as being performed by a system of one or more computers, located in one or more locations, and programmed appropriately in accordance with this specification. In some implementations, the system is a web search engine. - The system identifies an app search query provided by a user to an app store (step 202). For example, when a user searches an app store on her smartphone, the smartphone submits a web search to the system based on the app search query.
- After receiving the app search query, the system generates a second query from the app search query (step 204).
- In some implementations, the system revises the first search query by adding a search term to the first search query. The second search query is also referred to in this specification as the revised query. The added search term identifies a characteristic of the app store or a device from which the app search is issued. For example, the added search term can be the name of the app store, the name of the device, or the name of an operating system under which the device operates.
- The system then provides the revised query to an Internet search engine to obtain web search results that identify web pages (step 206) and identifies relevant apps by analyzing these web pages.
- In some implementations, the system analyzes a web page that include links to apps (step 208) to identify names of apps that may be available on the app store (step 214). For example, as shown in
FIG. 1 , because theweb page 160 includes a user-selectable link to the “calendar 4 app” on the app store A, the system may identify thecalendar app 4 as relevant to the first query. - In some implementations, the system semantically analyzes a web page (210) to identify names of apps that may be available on the app store (step 216). For example, as shown in
FIG. 1 , because the phrase “Calendar app 3 is on App store A″” is present in theweb page 156, the system identifies “calendar app 3” as a calendar app available on the app store A and thus relevant to the first query. - In some implementations, when a phrase, e.g., “Calendar app,” present in a web page can be interpreted as referring to multiple different apps available on an app store, e.g., the
calendar app 2 and thecalendar app 3, the system may analyze other content of the web page, e.g., by performing optical character recognition (OCR) on an image in the web page or parsing metadata describing the web page, to determine which one or more apps the web page refers to. For example, if OCR results obtained from an image included in a web page indicates that the image includes the phrase “Calendar app 3,” then the system may classify the web page as describing thecalendar app 3, but not thecalendar app 2, on the app store. - In some implementations, apart from the web search process, the system conducts an app store search, focusing on information stored in the app store. The system may identify apps based on the app store search (step 212). The app store search process can take place before, after, or concurrently with the web search process.
- Based on the apps identified in the web search process, the system modifies the apps identified in the app store search process (218) before providing them to a user. For example, the system ranks (or re-ranks) the apps identified in the app store search process based information identified in the web search. For example, the system may rank an app identified in the app store search process low among apps provided to a user, when a web page obtained in the web search process describes the app as “does not function as described.”
- As another example, the system may exclude an app identified in the app store search process based on information identified by the web search process. For example, the system may withhold an app identified in the app store search process from being presented to a user, when a web page shows a low user rating of the app.
- As a third example, the system provides, to a user, apps additional to those identified in the app store search process based on information identified by the web search process. For example, the system may add, to apps obtained in the app store search process, an app that exists on the app store but is identified only by search results in the web search process, when a web page describes the app in a predefined way e.g., as a “must have” or because the web page includes a link to the app on the app store.
-
FIG. 3 is a flow diagram illustrating anexample process 300 for providing app store search results. For convenience, theprocess 300 will be described as being performed by a system, e.g., a web search engine or an app search engine, implemented on one or more computers in one or more locations. - An app store application installed on a mobile device, e.g., a smartphone, receives a search query from a user.
- The app store sends the search query to the search engine and the search engine begins a web search process (step 302).
- Before executing a web search, the search engine tailors the app search query to the web search process by revising it (step 304). As described in this specification, the search engine may generate a revised search query by adding, removing, or replacing search terms in the app search query. For example, if an app search query “calendar app” was issued through an app store A on a smartphone B, the search engine may revise the app search query by adding the name of the app store and the name of the smartphone to the original app search query, “calendar app on smartphone B at app store A.”
- The search engine then executes the revised app search query to perform a web search and obtains relevant web search results (step 306). As described at least with reference to
FIG. 2 , the search engine analyzes the web search results, e.g., either semantically, structurally, or both, to identify apps that may be relevant to the app search query (step 308). - For example, upon determining that a web page includes a link to a “
calendar 4 app” on the app store A, the search engine may classify the “calendar 4 app” as highly relevant to the app search query “calendar app.” Because providing, in a web page, a direct link to an app may suggest that the app is highly pertinent to the content of the web page. - For another example, upon determining that a predefined number, e.g., 4 or more, of web pages include the phrase “
calendar 2 app,” which is the name of an app available on the app store, the search engine may classify the “calendar 2 app” as highly relevant to the app search query “calendar app” because being mentioned in a relatively large number of web pages may indicate that an app is widely recognized as relevant and useful. - For a third example, upon determining that a web page includes the phrase “
calendar 2 app” and the phrase “not good” within the same sentence, the search engine may classify the “calendar 2 app” as irrelevant to the app search query “calendar app.” This content analysis is advantageous, because it can provide more than facially relevant app search results. In other words, apps are examined substantively, e.g., in terms of functionality and user feedback, before being provided, as part of search results, to a user. - In some implementations, the search engine also searches the app store using the app search query to identify relevant apps. For example, after receiving the app search query “calendar app,” the search engine obtains app store search results and identifies one or more apps on based on the app store search results.
- Based on apps identified from the web search results and optionally those identified from the app search results, the search engine selectively identifies one or more apps in a response to the user (step 310). For example, an app identified in the app search results can be removed as irrelevant based on the description of that app in a web page. For example, an app not identified in the app search results, but identified in the web search results can be provided to a user as relevant. For another example, an app identified in the app search results may be ranked low on the list of apps provided to a user, based on the negative description of that app in a web page.
- In some implementations, the search engine forwards content or metadata of a web page to the app store, and the app store annotates the corresponding app based on the content or metadata.
- For example, when an app offered as part of the app search results to a user is described in a web page as “not only the best calendar app, but also the coolest alarm app,” the app store annotates the app as a “calendar app” as well as an “alarm app.”
- The search engine can use these app annotations to improve app search results in the future, for example, based on the following algorithm: an app store may classify an app as matching an app search query, when the annotation associated with the app matches at least one search term in the app search query. These techniques are advantageous, as they enable app annotation without requiring either manual user effort or a separate annotation process: web page annotations based on web page content or metadata are automatically applied to relevant apps as part of an app search process.
- In some implementations, the system can pre-generate app search results offline for predefined queries, e.g., popular queries that are issued more than a predefined number of times over a predefined time period, and serve the app search results to a user faster.
- For example, the app search engine can identify a set of popular app search queries, e.g., queries that are issued more than 5 times in the past 2 hours by different users. The system can identify matching apps using the search processes described in this specification and cache these app search results in anticipation of these search queries or their equivalents being issued again, e.g., by the same or different users. These techniques may be advantageous, as they can reduce response time needed to generate app search results. For example, after obtaining an app search query, the system can skip the
steps FIG. 2 and provide pre-generated app search results to a user. -
FIG. 4 is a block diagram of anexample computing system 400 that implements app store technology described in this specification. Thesystem 400 is connected with one or more user devices 402 through acommunication network 404. Thesystem 400 is implemented on one or more computers at one or more locations, each of which has one or more processors and memory for storing instructions executable by the one or more processors. - A user device 402 provides a
GUI 410 of anapp store 420 hosted on thesystem 400. In some implementations, the GUI is implemented in an app previously installed on the user device. Theapp store GUI 410 receives app search queries provided by a user through the GUI and causes theapp search engine 412 and theweb search engine 452 in thesystem 400 to identify matching apps and web documents referring to the matching apps, respectively. A user device may be, for example, a mobile device, e.g., a laptop 420-C, a smartphone 420-B, or a tablet computer. - The
communication network 404 provides communications and data transfers between a user device 402 and thesystem 400. Thecommunication network 404 generally includes a local area network (LAN) or a wide area network (WAN), e.g., the Internet, and may include both. - The
system 400 provides, to auser device 102, app search results responsive to an app search query. Thesystem 400 includes aquery revision module 450, aweb search engine 452, aweb page database 454, anapp search engine 412, and anapp database 414. Theapp store 420 includes theGUI 410, theapp search engine 412, and theapp database 414. Theapp database 414 includes a collection of apps, as well as data about the apps. - The
query revision module 450 generates a revised search query for an app search query and sends the revised search query to theweb search engine 452 to obtain matching web pages. - The
web search engine 452 is a web search engine. In response to the app search engine, the web search engine executes web searches based on a revised search query against theweb page database 454 to obtain matching web pages. Theweb search engine 452 also provides information identified in web search results, e.g., app names or links, to theapp search engine 412. - All of the operations described in this specification may be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. The techniques disclosed may be implemented as one or more computer program products, i.e., one or more modules of computer program instructions encoded on a computer-readable medium for execution by, or to control the operation of, data processing apparatus. The computer readable-medium may be a machine-readable storage device, a machine-readable storage substrate, a memory device, a composition of matter affecting a machine-readable propagated signal, or a combination of one or more of them. The computer-readable medium may be a non-transitory computer-readable medium. The term “data processing apparatus” encompasses all apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers. The apparatus may include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them. A propagated signal is an artificially generated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus.
- A computer program (also known as a program, software, software application, script, or code) may be written in any form of programming language, including compiled or interpreted languages, and it may be deployed in any form, including as a standalone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A computer program does not necessarily correspond to a file in a file system. A program may be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A computer program may be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- The processes and logic flows described in this specification may be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows may also be performed by, and apparatus may also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit).
- Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer may be embedded in another device, e.g., a tablet computer, a mobile telephone, a personal digital assistant (PDA), a mobile audio player, a Global Positioning System (GPS) receiver, to name just a few. Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory may be supplemented by, or incorporated in, special purpose logic circuitry.
- To provide for interaction with a user, the techniques disclosed may be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user may provide input to the computer. Other kinds of devices may be used to provide for interaction with a user as well; for example, feedback provided to the user may be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user may be received in any form, including acoustic, speech, or tactile input.
- Implementations may include a computing system that includes a back end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front end component, e.g., a client computer having a graphical user interface or a Web browser through which a user may interact with an implementation of the techniques disclosed, or any combination of one or more such back end, middleware, or front end components. The components of the system may be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (LAN) and a wide area network (WAN), e.g., the Internet.
- The computing system may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- While this specification contains many specifics, these should not be construed as limitations, but rather as descriptions of features specific to particular implementations. Certain features that are described in this specification in the context of separate implementations may also be implemented in combination in a single implementation. Conversely, various features that are described in the context of a single implementation may also be implemented in multiple implementations separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination may in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
- Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the implementations described above should not be understood as requiring such separation in all implementations, and it should be understood that the described program components and systems may generally be integrated together in a single software product or packaged into multiple software products.
- Thus, particular implementations have been described. Other implementations are within the scope of the following claims. For example, the actions recited in the claims may be performed in a different order and still achieve desirable results.
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/092,459 US10635725B2 (en) | 2015-04-09 | 2016-04-06 | Providing app store search results |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201562145260P | 2015-04-09 | 2015-04-09 | |
US15/092,459 US10635725B2 (en) | 2015-04-09 | 2016-04-06 | Providing app store search results |
Publications (2)
Publication Number | Publication Date |
---|---|
US20160299972A1 true US20160299972A1 (en) | 2016-10-13 |
US10635725B2 US10635725B2 (en) | 2020-04-28 |
Family
ID=55697119
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/092,459 Active 2037-12-30 US10635725B2 (en) | 2015-04-09 | 2016-04-06 | Providing app store search results |
Country Status (3)
Country | Link |
---|---|
US (1) | US10635725B2 (en) |
EP (1) | EP3079083A1 (en) |
CN (1) | CN106055567A (en) |
Cited By (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20190121909A1 (en) * | 2017-10-23 | 2019-04-25 | International Business Machines Corporation | Search Engine Optimization Techniques |
CN110088750A (en) * | 2016-12-20 | 2019-08-02 | 谷歌有限责任公司 | The method and system of context function is provided in static Web page |
US20200175069A1 (en) * | 2017-01-22 | 2020-06-04 | Huawei Technologies Co., Ltd. | Method and Terminal Device for Managing Application Snippet |
US11762863B2 (en) * | 2017-10-13 | 2023-09-19 | Microsoft Technology Licensing, Llc | Hierarchical contextual search suggestions |
Families Citing this family (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11144720B2 (en) * | 2019-08-26 | 2021-10-12 | Roblox Corporation | Determining canonical content for a game |
Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20120124028A1 (en) * | 2010-11-12 | 2012-05-17 | Microsoft Corporation | Unified Application Discovery across Application Stores |
US20120240236A1 (en) * | 2008-10-21 | 2012-09-20 | Lookout, Inc. | Crawling multiple markets and correlating |
US20120316955A1 (en) * | 2011-04-06 | 2012-12-13 | Yahoo! Inc. | System and Method for Mobile Application Search |
US20130290344A1 (en) * | 2012-04-27 | 2013-10-31 | Eric Glover | Updating a search index used to facilitate application searches |
Family Cites Families (16)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8086600B2 (en) * | 2006-12-07 | 2011-12-27 | Google Inc. | Interleaving search results |
US9875298B2 (en) | 2007-10-12 | 2018-01-23 | Lexxe Pty Ltd | Automatic generation of a search query |
US9361387B2 (en) | 2010-04-22 | 2016-06-07 | Microsoft Technology Licensing, Llc | Context-based services |
JP5624674B2 (en) * | 2010-05-07 | 2014-11-12 | ザ ダン アンド ブラッドストリート コーポレーションＴｈｅ Ｄｕｎ Ａｎｄ Ｂｒａｄｓｔｒｅｅｔ Ｃｏｒｐｏｒａｔｉｏｎ | How to improve queries for searching databases |
CN102024031B (en) * | 2010-11-25 | 2012-12-19 | 百度在线网络技术（北京）有限公司 | Method and equipment used for providing second search result based on real-time search |
US9805022B2 (en) * | 2010-12-09 | 2017-10-31 | Apple Inc. | Generation of topic-based language models for an app search engine |
US8762360B2 (en) * | 2011-05-06 | 2014-06-24 | Microsoft Corporation | Integrating applications within search results |
CN102810117B (en) * | 2012-06-29 | 2016-02-24 | 北京百度网讯科技有限公司 | A kind of for providing the method and apparatus of Search Results |
US20140108451A1 (en) * | 2012-10-11 | 2014-04-17 | Electronics And Telecommunications Research Institute | Method and apparatus for integrated application search in multiple app stores |
CN103186666B (en) * | 2013-03-01 | 2017-02-08 | 北京百度网讯科技有限公司 | Method, device and equipment for searching based on favorites |
US20140358916A1 (en) * | 2013-05-29 | 2014-12-04 | Microsoft Corporation | Personalized prioritization of integrated search results |
US20150095319A1 (en) * | 2013-06-10 | 2015-04-02 | Microsoft Corporation | Query Expansion, Filtering and Ranking for Improved Semantic Search Results Utilizing Knowledge Graphs |
US20140379747A1 (en) * | 2013-06-19 | 2014-12-25 | Microsoft Corporation | Identifying relevant apps in response to queries |
CN104331465B (en) * | 2014-10-30 | 2017-09-29 | 广东欧珀移动通信有限公司 | The searching method and device of mobile terminal |
CN104462397A (en) * | 2014-12-10 | 2015-03-25 | 北京国双科技有限公司 | Promotion information processing method and promotion information processing device |
CN104462510B (en) * | 2014-12-22 | 2018-09-11 | 北京奇虎科技有限公司 | Searching method based on user search intent and device |
-
2016
- 2016-04-06 US US15/092,459 patent/US10635725B2/en active Active
- 2016-04-06 EP EP16164096.6A patent/EP3079083A1/en not_active Ceased
- 2016-04-08 CN CN201610335345.1A patent/CN106055567A/en active Pending
Patent Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20120240236A1 (en) * | 2008-10-21 | 2012-09-20 | Lookout, Inc. | Crawling multiple markets and correlating |
US20120124028A1 (en) * | 2010-11-12 | 2012-05-17 | Microsoft Corporation | Unified Application Discovery across Application Stores |
US20120316955A1 (en) * | 2011-04-06 | 2012-12-13 | Yahoo! Inc. | System and Method for Mobile Application Search |
US20130290344A1 (en) * | 2012-04-27 | 2013-10-31 | Eric Glover | Updating a search index used to facilitate application searches |
Cited By (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN110088750A (en) * | 2016-12-20 | 2019-08-02 | 谷歌有限责任公司 | The method and system of context function is provided in static Web page |
EP3559826B1 (en) * | 2016-12-20 | 2023-12-20 | Google LLC | Method and system providing contextual functionality in static web pages |
EP4318273A3 (en) * | 2016-12-20 | 2024-04-24 | Google LLC | Method and system providing contextual functionality in static web pages |
US20200175069A1 (en) * | 2017-01-22 | 2020-06-04 | Huawei Technologies Co., Ltd. | Method and Terminal Device for Managing Application Snippet |
US11609955B2 (en) * | 2017-01-22 | 2023-03-21 | Huawei Technologies Co., Ltd. | Method and terminal device for managing application snippet |
US11762863B2 (en) * | 2017-10-13 | 2023-09-19 | Microsoft Technology Licensing, Llc | Hierarchical contextual search suggestions |
US20190121909A1 (en) * | 2017-10-23 | 2019-04-25 | International Business Machines Corporation | Search Engine Optimization Techniques |
US10691764B2 (en) * | 2017-10-23 | 2020-06-23 | International Business Machines Corporation | Search engine optimization techniques |
Also Published As
Publication number | Publication date |
---|---|
EP3079083A1 (en) | 2016-10-12 |
CN106055567A (en) | 2016-10-26 |
US10635725B2 (en) | 2020-04-28 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9734261B2 (en) | Context aware query selection | |
CN107992585B (en) | Universal label mining method, device, server and medium | |
US8090708B1 (en) | Searching indexed and non-indexed resources for content | |
US10176227B2 (en) | Managing a search | |
US10635725B2 (en) | Providing app store search results | |
US20130290323A1 (en) | Systems and methods for automatically associating tags with files in a computer system | |
US9129009B2 (en) | Related links | |
US8560519B2 (en) | Indexing and searching employing virtual documents | |
US8984414B2 (en) | Function extension for browsers or documents | |
US20110208715A1 (en) | Automatically mining intents of a group of queries | |
US8959093B1 (en) | Ranking search results based on anchors | |
US20230205824A1 (en) | Contextual Clarification and Disambiguation for Question Answering Processes | |
US10235455B2 (en) | Semantic search system interface and method | |
US20170132227A1 (en) | Ordering search results based on a knowledge level of a user performing the search | |
US11514103B1 (en) | Image search using intersected predicted queries | |
US9679066B2 (en) | Search results based on an environment context | |
US9195940B2 (en) | Jabba-type override for correcting or improving output of a model | |
US8875007B2 (en) | Creating and modifying an image wiki page | |
US10546029B2 (en) | Method and system of recursive search process of selectable web-page elements of composite web page elements with an annotating proxy server | |
US11762856B2 (en) | Query response module and content links user interface | |
CN103646034A (en) | Web search engine system and search method based content credibility | |
US20160350315A1 (en) | Intra-document search | |
US20180121502A1 (en) | User Search Query Processing | |
US9824161B1 (en) | Providing third party answers | |
US20160350405A1 (en) | Searching using pointers to pages in documents |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:SAMDANI, RAJHANS;SUBRAMANYA, AMARNAG;PEREIRA, FERNANDO;AND OTHERS;SIGNING DATES FROM 20150818 TO 20150820;REEL/FRAME:038219/0496 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044129/0001Effective date: 20170929 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: FINAL REJECTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE AFTER FINAL ACTION FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: ADVISORY ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NOTICE OF ALLOWANCE MAILED -- APPLICATION RECEIVED IN OFFICE OF PUBLICATIONS |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
CC | Certificate of correction | ||
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |