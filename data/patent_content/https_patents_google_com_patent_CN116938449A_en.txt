CN116938449A - Computer-implemented method, storage medium, apparatus and system for preventing fraud - Google Patents
Computer-implemented method, storage medium, apparatus and system for preventing fraud Download PDFInfo
- Publication number
- CN116938449A CN116938449A CN202310919717.5A CN202310919717A CN116938449A CN 116938449 A CN116938449 A CN 116938449A CN 202310919717 A CN202310919717 A CN 202310919717A CN 116938449 A CN116938449 A CN 116938449A
- Authority
- CN
- China
- Prior art keywords
- data
- encrypted
- conversion
- presentation
- aggregation server
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000000034 method Methods 0.000 title claims abstract description 197
- 238000003860 storage Methods 0.000 title claims description 27
- 238000006243 chemical reaction Methods 0.000 claims abstract description 515
- 238000004220 aggregation Methods 0.000 claims abstract description 510
- 230000002776 aggregation Effects 0.000 claims abstract description 510
- 230000007704 transition Effects 0.000 claims description 46
- 238000012545 processing Methods 0.000 claims description 16
- 238000004590 computer program Methods 0.000 claims description 14
- 230000008878 coupling Effects 0.000 claims description 8
- 238000010168 coupling process Methods 0.000 claims description 8
- 238000005859 coupling reaction Methods 0.000 claims description 8
- 230000004044 response Effects 0.000 claims description 5
- 238000005259 measurement Methods 0.000 abstract description 25
- 230000008569 process Effects 0.000 description 109
- 238000001514 detection method Methods 0.000 description 61
- 238000013519 translation Methods 0.000 description 26
- 230000014616 translation Effects 0.000 description 26
- 238000009826 distribution Methods 0.000 description 23
- 230000009466 transformation Effects 0.000 description 17
- 230000003993 interaction Effects 0.000 description 16
- 230000000694 effects Effects 0.000 description 13
- 238000005070 sampling Methods 0.000 description 11
- 238000000844 transformation Methods 0.000 description 11
- 238000004891 communication Methods 0.000 description 9
- 230000006870 function Effects 0.000 description 9
- 230000009471 action Effects 0.000 description 8
- 238000010586 diagram Methods 0.000 description 7
- 238000001914 filtration Methods 0.000 description 6
- 238000004422 calculation algorithm Methods 0.000 description 5
- 238000012544 monitoring process Methods 0.000 description 5
- 238000013515 script Methods 0.000 description 5
- 230000008901 benefit Effects 0.000 description 4
- 238000005516 engineering process Methods 0.000 description 4
- 230000005540 biological transmission Effects 0.000 description 3
- 230000001010 compromised effect Effects 0.000 description 3
- 230000007257 malfunction Effects 0.000 description 3
- 230000003287 optical effect Effects 0.000 description 3
- 239000000047 product Substances 0.000 description 3
- 230000000644 propagated effect Effects 0.000 description 3
- 241001083847 Berberis Species 0.000 description 2
- 238000004364 calculation method Methods 0.000 description 2
- 238000006731 degradation reaction Methods 0.000 description 2
- 238000009795 derivation Methods 0.000 description 2
- 238000010295 mobile communication Methods 0.000 description 2
- 238000009877 rendering Methods 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 239000013589 supplement Substances 0.000 description 2
- 238000012546 transfer Methods 0.000 description 2
- 238000012795 verification Methods 0.000 description 2
- 238000012935 Averaging Methods 0.000 description 1
- VYZAMTAEIAYCRO-UHFFFAOYSA-N Chromium Chemical compound [Cr] VYZAMTAEIAYCRO-UHFFFAOYSA-N 0.000 description 1
- 238000010923 batch production Methods 0.000 description 1
- 230000006399 behavior Effects 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 230000006835 compression Effects 0.000 description 1
- 238000007906 compression Methods 0.000 description 1
- 238000013461 design Methods 0.000 description 1
- 238000011156 evaluation Methods 0.000 description 1
- 230000001747 exhibiting effect Effects 0.000 description 1
- 238000005304 joining Methods 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000013507 mapping Methods 0.000 description 1
- 238000011084 recovery Methods 0.000 description 1
- 230000000717 retained effect Effects 0.000 description 1
- 230000002441 reversible effect Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 230000002123 temporal effect Effects 0.000 description 1
- 238000012360 testing method Methods 0.000 description 1
- 230000001960 triggered effect Effects 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/08—Key distribution or management, e.g. generation, sharing or updating, of cryptographic keys or passwords
- H04L9/0816—Key establishment, i.e. cryptographic processes or cryptographic protocols whereby a shared secret becomes available to two or more parties, for subsequent use
- H04L9/0819—Key transport or distribution, i.e. key establishment techniques where one party creates or otherwise obtains a secret value, and securely transfers it to the other(s)
- H04L9/0825—Key transport or distribution, i.e. key establishment techniques where one party creates or otherwise obtains a secret value, and securely transfers it to the other(s) using asymmetric-key encryption or public key infrastructure [PKI], e.g. key signature or public key certificates
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/08—Key distribution or management, e.g. generation, sharing or updating, of cryptographic keys or passwords
- H04L9/0861—Generation of secret information including derivation or calculation of cryptographic keys or passwords
- H04L9/0866—Generation of secret information including derivation or calculation of cryptographic keys or passwords involving user or device identifiers, e.g. serial number, physical or biometrical information, DNA, hand-signature or measurable physical characteristics
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/08—Key distribution or management, e.g. generation, sharing or updating, of cryptographic keys or passwords
- H04L9/0816—Key establishment, i.e. cryptographic processes or cryptographic protocols whereby a shared secret becomes available to two or more parties, for subsequent use
- H04L9/085—Secret sharing or secret splitting, e.g. threshold schemes
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/606—Protecting data by securing the transmission between two devices or processes
- G06F21/608—Secure printing
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
- G06F21/6218—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database
- G06F21/6245—Protecting personal data, e.g. for financial or medical purposes
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/008—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols involving homomorphic encryption
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/08—Key distribution or management, e.g. generation, sharing or updating, of cryptographic keys or passwords
- H04L9/0816—Key establishment, i.e. cryptographic processes or cryptographic protocols whereby a shared secret becomes available to two or more parties, for subsequent use
- H04L9/0819—Key transport or distribution, i.e. key establishment techniques where one party creates or otherwise obtains a secret value, and securely transfers it to the other(s)
- H04L9/083—Key transport or distribution, i.e. key establishment techniques where one party creates or otherwise obtains a secret value, and securely transfers it to the other(s) involving central third party, e.g. key distribution center [KDC] or trusted third party [TTP]
- H04L9/0833—Key transport or distribution, i.e. key establishment techniques where one party creates or otherwise obtains a secret value, and securely transfers it to the other(s) involving central third party, e.g. key distribution center [KDC] or trusted third party [TTP] involving conference or group key
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/14—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols using a plurality of keys or algorithms
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/32—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials
- H04L9/3247—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials involving digital signatures
- H04L9/3257—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials involving digital signatures using blind signatures
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L2209/00—Additional information or applications relating to cryptographic mechanisms or cryptographic arrangements for secret or secure communication H04L9/00
- H04L2209/42—Anonymization, e.g. involving pseudonyms
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L2209/00—Additional information or applications relating to cryptographic mechanisms or cryptographic arrangements for secret or secure communication H04L9/00
- H04L2209/46—Secure multiparty computation, e.g. millionaire problem
Abstract
Methods, systems, and apparatus, including methods for determining network measurements. In some aspects, a method includes receiving, by a first aggregation server and from each of a plurality of client devices, encrypted presentation data. The second aggregation server receives conversion data from each of at least a portion of the plurality of client devices, the conversion data including encrypted conversion value data for each conversion recorded by the client device. The first aggregation server and the second aggregation server perform a multiparty computing procedure to decrypt the encrypted presentation data and the encrypted conversion data.
Description
The application is a divisional application of an application patent application of which the international application date is 12/14/2020, the Chinese application number is 202080009404.0 and the application name is 'computer-implemented method, storage medium, device and system for preventing fraud'.
Background
The client device transmits data over a public network such as the internet. These communications may be intercepted and/or altered by entities other than the intended recipient. Furthermore, entities may forge network identities and send data that appears to originate from these forged network identities. An example of such forgery is a Sybil attack, where an entity creates a network identity to destroy the reputation system of the peer-to-peer network.
Disclosure of Invention
This specification describes techniques related to determining network measurements in a manner that prevents fraud and protects user privacy.
In general, one innovative aspect of the subject matter described in this specification can be embodied in methods that include receiving, by a first aggregation server and from each of a plurality of client devices, presentation data that includes, for each presentation of a digital component recorded by the client device, (i) a first join key that is based on a first unique identifier of the client device or an application on which the presentation occurred, and (ii) encrypted presentation data that has been encrypted using a first public key of the first aggregation server and a second public key of a second aggregation server that is different from the first aggregation server; receiving, by the second aggregation server and from each of at least a portion of the plurality of client devices, translation data comprising, for each translation recorded by the client devices, (i) a second coupling key based on the client device or a second unique identifier of the application on which the translation occurred, and (ii) a second value comprising encrypted translation data that has been encrypted using the first encryption key and the second encryption key, and (iii) encrypted translation value data; performing, by the first aggregation server and the second aggregation server, a multiparty computing process to decrypt the encrypted presentation data and the encrypted conversion data, comprising: identifying pairs of encrypted conversion data and corresponding encrypted presentation data based on the first key and the second key; and decrypting the presentation data and the conversion data for each pair of encrypted presentation data and conversion data in a plurality of stages using a first private key corresponding to the first public key and a second private key corresponding to the second public key, wherein each stage comprises: one of the first aggregation server or the second aggregation server decrypts each pair of encrypted presentation data and the corresponding one of the encrypted presentation data and the encrypted conversion data and sends the resulting data to the other of the first aggregation server or the second aggregation server; and transmitting each portion of the decrypted presentation data and each portion of the decrypted conversion data to a corresponding reporting system. Other embodiments of this aspect include corresponding apparatuses, systems, and computer programs configured to perform aspects of the methods encoded on computer storage devices. Advantageously, this provides a means for attributing the converted data to the presentation data while maintaining user privacy and thus providing a safer system/method. As described herein, the conversion data corresponds to user interaction with the digital component, while the presentation data corresponds to providing the digital component to the user. Thus, coordinating presentation and conversion data by attributing conversion to corresponding presentations facilitates monitoring user interactions with digital components provided to the user. In monitoring such interactions, it is often important to provide a security system that maintains user privacy so that users cannot be identified or tracked based on the converted or presentation data. The disclosed technology provides a technical effect by enabling user privacy to be maintained when reconciling presentation and conversion data, and also provides a technical effect of preventing fraudulent activity when reconciling presentation and conversion data. In particular, the encryption techniques described above prevent third parties from intercepting sensitive presentation or conversion data that would otherwise be directed back to the user. In addition, these encryption techniques also prevent all entities involved in the above-described methods from knowing information about the user (e.g., by matching presentation and conversion data for a particular user), thereby preventing tracking of the user based on the presentation or conversion data. For example, as described above, the presentation data and the conversion data have each been doubly encrypted using the first public key of the first aggregation server and the second public key of the second aggregation server. This particular feature serves to increase security and protect user privacy because the encrypted presentation data and conversion data require both aggregation servers to decrypt (i.e., use their respective private keys). In this way, a single server (or interceptor) cannot obtain the plaintext presentation or conversion data, thereby improving security. Accordingly, the disclosed technology solves the technical problem of providing a security system for monitoring user interactions with digital components, which enables user privacy to be maintained.
It is often also important to prevent fraud (e.g., mimicking false user interactions with digital components) while monitoring user interactions with digital components and while coordinating presentation and conversion of data. The use of multiple aggregated servers to form a multiparty computing (MPC) enables each server to check the other for signs of fraudulent activity (e.g., if one of the servers is compromised or colluded with other entities) and to prevent fraud in the measurements. Accordingly, further technical effects are enabled by the disclosed techniques for preventing fraudulent activity while maintaining user privacy in coordination with presentation and conversion of data.
Furthermore, the disclosed technology provides the further technical effect of enabling greater flexibility to monitor user interactions with digital components. In particular, the use of the above-described join key based on a unique identifier of a client device or application enables monitoring of user interactions with or across platforms (i.e., presentation and conversion occurs via the same or different web browser or other application on the user device).
Further, as described above, the conversion data includes encrypted conversion value data. This enables user interaction with the digital component to be monitored and also quantified based on the conversion value. Since the conversion-value data is encrypted, the technical effect of maintaining the privacy of the user is maintained, making it difficult for an unwanted party to access the conversion-value data and deduce therefrom information about the user.
These and other implementations can each optionally include one or more of the following features. In some aspects, the encrypted conversion-value data for each conversion includes a three-time encrypted conversion value that is first encrypted using a probabilistic homomorphic addition public-key encryption technique, second encrypted using the public key of the second aggregation server, and third encrypted using the public key of the first aggregation server.
In some aspects, the encrypted conversion value data for conversion includes a combination of a conversion value and an encryption of a reporting field reporting the conversion data for conversion. The third encryption of the transformed value data using public key techniques as described above provides a further technical effect of preventing the aggregation server from accessing the plaintext of the transformed value data. Only the holder of the private key associated with the public key can access the conversion-value data (e.g., reporting system). Thus, the security of the system can be further improved in this way to protect user privacy, as the aggregation server or unwanted party cannot access the plaintext conversion value data.
In some aspects, performing, by the first aggregation server and the second aggregation server, a multiparty computing process to decrypt the encrypted presentation data and the encrypted conversion data includes encrypting, by the first aggregation server, each first join key and, for each presentation, providing, by the first aggregation server and to the second aggregation server, a pair of data including the encrypted first join key for the presentation and the encrypted presentation data for the presentation.
In some aspects, performing, by the first aggregation server and the second aggregation server, a multiparty computing process to decrypt the encrypted presentation data and the encrypted conversion data includes encrypting, by the second aggregation server, each second coupling key and, for each conversion, providing, by the second aggregation server and to the first aggregation server, a tuple of data including the encrypted second coupling key for the conversion, the encrypted conversion data for the conversion, and the encrypted conversion value conversion for the conversion.
In some aspects, the encrypted conversion-value data for each conversion includes a three-time encrypted conversion value that is first encrypted using a probabilistic homomorphic addition public-key encryption technique, second encrypted using the public key of the second aggregation server, and third encrypted using the public key of the first aggregation server. Performing, by the first aggregation server and the second aggregation server, a multiparty computing process to decrypt the encrypted presentation data and the encrypted conversion data may include decrypting, by the first aggregation server and for each data tuple received from the second aggregation server, the encrypted conversion-value data in the data tuples to generate twice-encrypted conversion-value data for each data tuple, and identifying groups of conversion data and corresponding presentation data using the encrypted first join key and the encrypted second join key.
In some aspects, performing, by the first aggregation server and the second aggregation server, a multiparty computing process to decrypt the encrypted presentation data and the encrypted conversion data includes generating, by the first aggregation server and for each group of conversion data and corresponding presentation data, a key value pair comprising a key based on the encrypted presentation data and the encrypted conversion data and a value that is twice-encrypted conversion value data, and transmitting, by the first aggregation server and to the second aggregation server, each key value pair.
In some aspects, performing, by the first aggregation server and the second aggregation server, a multiparty computing process to decrypt the encrypted presentation data and the encrypted conversion data includes decrypting, by the second aggregation server, the twice encrypted conversion-value data using a private key of the second aggregation server corresponding to a public key of the second aggregation server to generate the once encrypted conversion-value data.
In some aspects, performing, by the first aggregation server and the second aggregation server, a multiparty computing process to decrypt the encrypted presentation data and the encrypted conversion data includes sending, by the second aggregation server and to the first aggregation server, the once encrypted conversion data and, for each one of the once encrypted conversion data, a key corresponding to the once encrypted conversion value data.
In some aspects, performing, by the first aggregation server and the second aggregation server, a multiparty computing process to decrypt the encrypted presentation data and the encrypted conversion data includes, for each set of presentation and conversion data, determining a total conversion volume based on the one-time encrypted conversion value data. The total conversion amount for each set of presentation and conversion data may be determined by summing the conversion value data encrypted once in the set.
In some aspects, a computer-implemented method includes: receiving, by the first aggregation server and from each of the plurality of client devices, presentation data comprising, for each presentation of the digital component recorded by the client device, (i) a first join key based on a unique identifier associated with the presentation, and (ii) encrypted presentation data for the presentation; encrypting, by the first aggregation server, the first join key for each presentation; providing, by the first aggregation server and to the second aggregation server, each exposed first data tuple, wherein the exposed first data tuple comprises the exposed encrypted first join key and encrypted exposure data; receiving, by the first aggregation server and from the second aggregation server, each converted second data tuple for which the second aggregation server received encrypted conversion data, wherein the second data tuple for conversion comprises an encrypted second coupling key for conversion and the encrypted conversion data, wherein each encrypted second coupling key is based on a unique identifier associated with the conversion; for each of the plurality of digital components, determining a presentation count based on a number of encrypted first tuples comprising encrypted presentation data corresponding to a presentation of the digital component; and for each of the plurality of digital components, determining a transition count based on a number of encrypted second tuples comprising encrypted transition data corresponding to transitions of the digital component.
In some aspects, one or more computer-readable storage media are provided that include instructions that, when executed by a computer, cause the computer to perform a method as described above.
In some aspects, a computer program is provided comprising instructions which, when executed by a computer, cause the computer to perform the method as described above.
In some aspects, a system for preventing fraud is provided, the system comprising: a data processing system having one or more processors and one or more computer readable storage media as described above, wherein the one or more processors are configured to perform the method as described above. The subject matter described in this specification can be implemented in specific embodiments to realize one or more of the following advantages. The encryption techniques described in this document enable measurements of various types of data to be calculated while protecting user privacy and preventing fraudulent manipulation of the data. For example, the techniques may enable calculation of presentations, various types of transformations, and measurements of aggregated values of transformations, while protecting user privacy and preventing fraud in transformation reports and presentation reports. For example, the techniques may be used to compute click-through (click-through) conversions, browse-type conversions, application download conversions, cross-device conversions (where the conversions occur on a different device than the device in which the presentation occurs), and applications to web conversions (where the presentation occurs in the application and the conversions occur in the browser (and vice versa)), while protecting user privacy and preventing fraud. The techniques also support various attribution models (such as last click attribution, data driven, and multi-touch attribution) with the same protection.
The use of multiple aggregated servers to form a multiparty computing (MPC) enables each server to check the other for signs of fraudulent activity and ensures that no single server can access any user data in plain text at any time. The use of MPC in combination with k-anonymization, differential privacy, public key encryption, and addition/exchangeable homomorphic encryption techniques described in this document protects user privacy and prevents fraud in measurements even if one of the servers is compromised or colluded with other entities. Blind signing of network data using blind signature techniques enables such data to be checked for fraud while protecting user privacy by not passing non-blind data to other entities. The partial data elements comprising the network data may be blindly signed and/or encrypted by multiple entities to prevent fraud or collusion from the multiple entities. As described herein, blind data (e.g., presentation data or conversion data) is data that has been concealed using encryption techniques. Blind data is disguised such that an entity cannot determine plaintext data from the blind data. The entity may blindly sign the data (e.g., the fraud detection system that determines that the presentation is valid may sign the blind presentation data) to verify the legitimacy of that data, but the signing entity may sign the data without actually seeing the plaintext data. Thus, the fraud detection server may be used to check for fraud without compromising user privacy, as the fraud detection server or any other interceptor cannot see ordinary presentation data.
Various features and advantages of the foregoing subject matter are described below with reference to the accompanying drawings. Additional features and advantages will be apparent from the subject matter described herein and from the claims.
Drawings
FIG. 1 is a block diagram of an example environment in which an aggregation server determines aggregated network measurements.
FIG. 2 is a block diagram illustrating an example process flow for determining aggregated network measurements.
FIG. 3 is a flow chart illustrating an example process for determining aggregated data.
FIG. 4 is a flow chart illustrating another example process for determining aggregated data.
FIG. 5 is a flow chart illustrating an example process for verifying the integrity of data.
FIG. 6 is a flow chart illustrating an example process for generating a temporal sequence of events while preserving user privacy.
FIG. 7 is a flow chart illustrating an example process for attributing a transition to a presentation using data driving.
FIG. 8 is a flow chart illustrating an example process for determining an aggregate transition value.
FIG. 9 is a flow chart illustrating an example process for determining aggregated conversion data.
FIG. 10 is a block diagram of an example computer system.
Like reference numbers and designations in the various drawings indicate like elements.
Detailed Description
In general, this document describes encryption techniques for preventing fraud in determining event levels and aggregated network measurements. For example, the techniques described in this document may prevent fraud in determining event levels and aggregated presentation and conversion metrics for various types of converted digital components. The encryption techniques described in this document may also protect user privacy, for example, by preventing all entities from being able to track or aggregate user data received from a user's client device.
Overview of the system
FIG. 1 is a block diagram of an example environment 100 in which an aggregation server 180 determines aggregated network measurements. The example environment 100 includes a data communication network 105, such as a Local Area Network (LAN), wide Area Network (WAN), the internet, a mobile network, or a combination thereof. Network 105 connects client device 110, publisher 130, web site 140, digital component distribution system 150, fraud detection system 170, conversion system 172, aggregation server 180, reporting system 190, and time server 192. The example environment 100 may include many different client devices 110, publishers 130, and websites 140. In some implementations, environment 100 may also include a plurality of digital component distribution systems 150, fraud detection systems 170, conversion systems 172, and reporting systems 190. Although there are two aggregation servers 180-A and 180-B in this example, more than two aggregation servers 180-A and 180-B may be used, as described below.
The web site 140 is one or more resources 145 associated with a domain name and hosted by one or more servers. An example website is a collection of web pages in HTML format that can contain text, images, multimedia content, and programming elements (such as scripts). Each web site 140 is maintained by a publisher 130, which publisher 130 is an entity that controls, manages, and/or owns the web site 140.
Resource 145 is any data that may be provided over network 105. The resource 145 is identified by a resource address (e.g., a Uniform Resource Locator (URL)) associated with the resource 145. Resources include HTML pages, word processing documents, and Portable Document Format (PDF) documents, images, videos, and feed sources, to name a few. The resources may include content such as words, phrases, images, and sounds, which may include embedded information (such as meta information in hyperlinks) and/or embedded instructions (such as scripts).
Client device 110 is an electronic device capable of communicating over network 105. Example client devices 110 include personal computers, mobile communication devices (e.g., smart phones), and other devices that can send and receive data over the network 105.
Client device 110 typically includes an application 112, such as a web browser and/or a native application, to facilitate sending and receiving data over network 105. A native application is an application developed for a particular platform or particular device. The publisher 130 may develop the native application and provide it to the client device 110, e.g., make it available for download. In some implementations, the client device 110 is a digital media device, such as a streaming device that plugs into a television or other display to transmit a video stream to the television. The digital media device may also include a web browser and/or other applications that stream video and/or presentation resources.
The web browser may request the resource 145 from a web server hosting the website 140 of the publisher 130, e.g., in response to a user of the client device 110 entering a resource address of the resource 145 in an address bar of the web browser or selecting a link referencing the resource address. Similarly, the native application may request application content from a remote server of the publisher 130.
Some resources 145, application pages, or other application content may include a digital component slot for rendering digital components having resources 145 or application pages. As used throughout this document, the phrase "digital component" refers to a discrete unit of digital content or digital information (e.g., a video clip, an audio clip, a multimedia clip, an image, text, or another unit of content). The digital components may be electronically stored in the physical memory device as a single file or collection of files, and the digital components may take the form of video files, audio files, multimedia files, image files, or text files and include advertising information such that the advertisements are one type of digital component. For example, the digital component may be content that is intended to supplement the content of a web page or other resource presented by the application 112. More specifically, the digital components may include digital content related to the resource content (e.g., the digital components may relate to the same theme as the web page content, or related themes). Thus, providing digital components by digital component distribution system 150 may supplement and generally enhance web pages or application content.
When an application 112 loads a resource 145 (or application content) that includes one or more digital component slots, the application 112 may request digital components for each slot from the digital component distribution system 150. The digital component distribution system 150 may in turn request digital components from the digital component provider 160. Digital component provider 160 is an entity that provides digital components for presentation with resource 145.
In some cases, digital component distribution system 150 may also request digital components from one or more digital component partners 157. Digital component partner 157 is an entity that selects digital components on behalf of digital component provider 160 in response to digital component requests.
Digital component distribution system 150 may select digital components for each digital component slot based on various criteria. For example, the digital component distribution system 150 can select digital components from digital components received from the digital component provider 160 and/or digital component partners 157 based on relevance to the resource 145 (or application content), performance of the digital components (e.g., rate at which a user interacts with the digital components), and the like. The digital component distribution system 150 can then provide the selected digital component(s) to the client device 110 for presentation with the resource 145 or other application content.
When an application 112 presents a digital component, the application 112 (which may be a browser) may store presentation data 114 for presenting the digital component. Presentation data 114 for a particular presentation of a digital component may include a URL or domain for a landing page of the digital component (e.g., a page linked to by the digital component and presented to the user by an application/browser when the user clicks on or interacts with the digital component), one or more identifiers of the digital component, event level data associated with the presentation, an expiration time specifying when to delete presentation data from client device 110, and/or a report URL or domain to which a conversion report of the digital component is to be sent. This data may be provided by the digital component, for example, as metadata for the digital component or as an anchor tag for the digital component. As described in more detail below, the application 112 may store presentation data blindly signed by the fraud detection system 170 instead of or in addition to storing raw presentation data for each presentation of the digital components.
The application 112 may also store the conversion data 116 in response to detecting the conversion. The conversion for the digital component is to complete a specified user action after the digital component is presented to and/or interacted with by the user. The conversion data 116 for conversion may include data indicating the type of conversion, as there are multiple types of conversion for various conversion measurement requirements. The type of conversion may specify subsequent operations after the conversion is completed. For example, the conversion may be to add items to an online shopping cart. In this example, the first type of conversion may be to add items without checkout (e.g., unfinished purchases) and the second type of conversion may be to add items with checkout. As described in more detail below, the conversion data for conversion may be a set of one or more bits that indicate the type of conversion, and the application may store the conversion data signed by the digital component distribution system 150 (or the conversion system where the conversion actually occurred) so that the blind signature may be verified later.
Fraud detection system 170, which may be implemented as one or more servers, may evaluate fraud signals received from client device 110 and/or application 112 to determine whether the presentation is valid or fraudulent. As described below, fraud detection system 170 may also determine whether the conversion is valid or fraudulent based on the fraud signal received from conversion system 172, e.g., to see if the user of the digital component has completed the conversion or if the conversion was falsified by another entity. The fraud signal may depend on the application and may vary in different implementations.
At presentation time, application 112 (or an operating system on client device 110) may collect the fraud detection signal and provide the fraud detection signal to fraud detection system 170. In addition to the fraud detection signal, the application 112 may also send blind presentation data for the presentation to the fraud detection system 170. Blind presentation data is presentation data that has been blinded (e.g., disguised) using encryption techniques. By performing blind signature on the display data, an entity signing the blind display data cannot access the display data in a plaintext form, so that the privacy of a user is protected. If the fraud detection system 170 determines that the presentation is valid, the fraud detection system 170 may sign the blind presentation data and provide the signed blind presentation data to the application 112. Example techniques for generating blind presentation data and signing blind presentation data are described below.
Fraud detection system 170 may be operated by digital component distribution system 150. In some implementations, the fraud detection system 170 is operated by one or more third parties. For example, an application provider (e.g., an entity that develops and provides a web browser or native application), and/or a digital component distributor operating digital component distribution system 150, may prove that one or more third parties are operating fraud detection system 170 to detect fraud and blindly sign blind data received from applications of multiple different developers (e.g., web browsers and/or native applications).
Conversion system 172, which may be implemented as one or more servers, may determine whether a conversion has occurred. For example, each digital component provider 160 may operate a conversion system 172 that determines whether conversion has occurred for its digital components. In a particular example, the conversion may be the acquisition of a product on a website. In this example, the conversion system 172 and web site may be maintained by a distributor of the product. The conversion system 172 may receive data from a web server hosting a website specifying that a product was obtained and determine that a conversion occurred based on the data.
In another example, the conversion may be a download of the application. In this example, when an application is downloaded to the client device 110, the application store may provide the data specifying that the application is downloaded to the client device 110 to the conversion system 172 of the application developer. In some implementations, the application store also operates the conversion system 172.
Conversion system 172 may also interact with fraud detection system 170 to determine whether the conversion is valid or fraudulent. For example, conversion system 172 may provide blind conversion data and fraud detection signals to fraud detection system 170. Blind conversion data is conversion data that is blinded (e.g., disguised) using encryption techniques. If fraud detection system 170 determines that the conversion is valid and/or that the user interaction is authentic, fraud detection system 172 may sign the blind conversion data and provide the signed blind conversion data to application 112. Example techniques for generating and signing blind conversion data are described below.
Aggregation server 180 may generate aggregated network measurements based on data received from client device 110. Aggregation server 180 may generate presentation and/or transition counts for various types of transitions based on data received from client device 110. For example, aggregation server 180 may determine counts of click conversions, browse conversions, application download conversions, cross-device conversions, and application-to-web conversions for digital components while protecting user privacy and preventing fraud. As described below, the aggregation server 180 implements the MPC protocol and uses exchangeable encryption techniques to protect user privacy and to prevent fraud in determining and reporting network measurements.
Click conversions are conversions in which a user interacts with a digital component and the user then completes a particular action. Browsing transformations are transformations in which a digital component is presented to a user and the user then completes a particular operation. An application download transformation is a transformation in which a digital component is presented to a user and the user subsequently downloads an application referenced by the presented digital component (e.g., promoted). In this example, the download of the application is a specific action. A cross-device transition is a transition in which a particular action occurs at a device different from the device presenting the digital component. An application-to-web conversion is a conversion in which a presentation (e.g., a digital component presentation) occurs in the application and a particular event occurs in the browser.
Aggregation server 180 may report presentation data (e.g., presentation count), conversion data (e.g., conversion count) to reporting system 190. Reporting system 190 may be implemented as a reporting field that implements a reporting URL that receives incoming requests carrying presentation data, conversion data, and/or related network measurements. Reporting system 190 may be maintained by a digital component distributor or another entity that reports data to digital component distribution system 150 or digital component distributor.
The environment 100 may also include a time server 192. The time server 192 may be used in some of the techniques described below. As described below, the time server 192 may be used to decrypt some data encrypted using the public key of the time server 192. The time server 192 may securely maintain a private key corresponding to the public key and decrypt the data using the private key.
Example process flow for determining network measurements
Fig. 2 is a block diagram of an example process flow 200 for determining aggregated network measurements. Process flow 200 is shown as being performed by some of the components of fig. 1, including one or more client devices 110, fraud detection system 170, conversion detection system 172, aggregation servers 180-a and 180-B, and reporting system 190.
Each instance of application 112, which may be a web browser or native application, may have a unique identifier for conversion measurement purposes. In other words, an instance of a particular web browser on one client device will be different from another instance of a particular web browser executing on a different client device, and have a unique identifier that is different therefrom. The unique identifier of the application 112 may be randomly or pseudo-randomly generated and the application 112 may be configured so that the unique identifier is never leaked out of the application 112. As described below, the identity and purpose of the unique identifier may vary based on the type of conversion measured. In some implementations supporting cross-device measurements, all application(s) 112 on all client devices 110 owned by the same user may have the same unique identifier for translation measurement purposes.
When the digital component is formed by the client device 11When the application 112 at 0 is presented, the application 112 may record presentation data (m i ) A destination (dc_destination), a conversion measurement expiration date, and a report field (report_domain) that will receive a conversion report of the digital component. The presentation data may be in the form of an opaque byte array and may include, for example, one or more identifiers for digital components and/or event-level data associated with the presentation of digital components at the application 112.
The destination may include a Uniform Resource Identifier (URI), a URL or domain of a landing page for the digital component (e.g., a page linked to by the digital component and presented to the user by the application/browser when the user clicks on or interacts with the digital component). Examples of URIs include application store links for downloading applications and deep links to intra-application locations for purchase within applications. Thus, the destination may also be referred to as a destination domain. The transition measurement expiration date may be a time (or period of time) when presentation data is to be deleted from client device 110. The report field may be a report URL or field to which the conversion report of the digital component is to be sent, for example, a report system 190 for which the digital component provider 160 wants to send the conversion report.
In some implementations, the application 112 can also record click data (click) that specifies whether the user interacted with the digital component (e.g., selected or clicked on the digital component) when the application 112 presented the digital component. The click data may be a boolean variable, for example, a value of one if interacted with and zero if not interacted with. In some other implementations, application(s) 112 may also record other types of metadata that indicate how the user interacted with the digital component, such as the user filling out a survey or muting the digital component. For example, the user may silence the digital component to indicate that the user does not want to see the same (or similar) digital component later.
As described above, application 112 may also interact with fraud detection system 170 to determine whether the presentation of the digital component is valid or fraudulent. If the presentation is valid, the application 112 may also request that the fraud detection system 170 blindly sign information related to the presentation.
In some implementations, the digital component can invoke computer readable code (e.g., a script) that gathers fraud detection signals 202 and sends fraud detection signals 202 to fraud detection system 170 for evaluation. Application 112 may piggyback this call to fraud detection system 170 (e.g., add data to this call to fraud detection system 170) and request that fraud detection system 170 blindly sign information related to the presentation if the presentation is valid.
In some implementations, the application 112 can send the blind presentation data 201 to the fraud detection system 170. The blind presentation data 201 may include two blind presentation data elements to be blindly signed by the fraud detection system 170. Binding and/or encrypting these data elements protects user privacy by preventing fraud detection system 170 from receiving unencrypted user data and tracking the user.
The first encrypted data element is an encrypted cryptographic hashed version of a combination (e.g., concatenation or some other combination) of a unique Identifier (ID), a destination (dc_destination), and a reporting domain (report_domain) of the application. The first encrypted data element may be defined as a CryptoHash (ID). The cryptographic hash in this example may be a one-way cryptographic hash function to map a tuple (ID) to a hash value.
In one example, the cryptographic hash function is a hash-based message authentication code (HMAC), such as HMAC SHA256 And (5) a message code. For example, the first encrypted data element may be: HMAC SHA256 (HMAC SHA256 (ID, dc_destination), report_domain) uses the ID as a key and nests HMACs. In another example, the first encrypted data element may be: SHA256 (ID dc_destination) report domain. For the purposes of this document, the symbol is representative of a method of combining complex messages from simple messages, where the combination is reversible, i.e., simple messages can be extracted back from complex messages. One example method is a protocol buffer with serialization/deserialization. Other examples include Java TM Serialization, javaScript object representation (JavaScript Object NotationJSON), etc.
The second encrypted data element is presentation data (m i ) And an encrypted version of a combination of data that specifies whether the digital component is clicked on (clicked) or otherwise interacted with. For example, the application 112 may generate (m i The key) and encrypts this complex message using a public key obtained from, for example, reporting system 190. This complex message represents presentation data and whether the digital component is clicked on or otherwise interacted with. The application 112 may encrypt complex messages using the public key of the reporting system 190 such that only the reporting system 190 may decrypt the presentation data and clicked data using the private key corresponding to (e.g., mathematically linked to) the public key. Reporting system 190 may maintain the private key securely so that other entities cannot access this information. The second encrypted data element may be defined as: pubKeyEncrypt (m) i The report_domain. In this representation, the inclusion of "report_domain" following the comma indicates that the public key used to encrypt the complex message is the public key of reporting system 190.
Fraud detection system 170 may receive blind presentation data 201 and fraud detection signal 202 and evaluate the fraud detection signal to determine whether the presentation of the digital component is valid or fraudulent. If fraud detection system 170 determines that the presentation is valid, then fraud detection system 170 may blindly sign blind presentation data 201 using blind signature techniques. For example, fraud detection system 170 may generate a first blind signature of the first data element and a second blind signature of the second encrypted data element of blind presentation data 201. In some embodiments, the blind signature technique may be Cloudflare TM The supporting Privacy Pass protocol, or trust tokens from Chrome, both based on the Internet Engineering Task Force (IETF) can verify the inadvertent pseudo random function (VOPRF) draft standard.
This VOPRF blind signature protocol is particularly advantageous because the amount of information exposed to fraud detection system 170 should be limited and application 112 needs to ensure that the signature is valid and contains no more information than the signature, where additional information can be used to track the user. For the purposes of the technology described in this document, the VOPRF protocol is considered deterministic in that it applies functions and does not add to the arguments of the functions. The application 112 may be aware of the signature scheme to allow signature verification and blinding of the presentation data.
Fraud detection system 170 may send blind signed presentation data 203 to application 112. This blind signed presentation data 203 comprises the first and second encrypted data elements and their respective blind signatures.
The application 112 may use the first encrypted data element and the blind signature for the first encrypted data element to generate a key. This key may be referred to as a blindly signed join key and may be defined as a BlindlySignedKey (ID, dc_destination) which in turn represents a blindly signed CryptoHash (ID, dc_destination) in combination with the first encrypted data element received from fraud detection system 170.
The application 112 may also use the second encrypted data element received from the fraud detection system 170 and its blind signature to generate multiple encrypted presentation data. For example, the application 112 may encrypt the second encrypted data element (PubKeyEncrypt (m) i Blindly signed complex message of the || encrypted, report_domain) and the second encrypted data element to generate twice encrypted presentation data (ImpressionData) 2 ). Let im pressiondata 1 Representing primary encrypted data (second encrypted data element). This twice-encrypted presentation data can be defined as expressiondata 2 ＝(PubKeyEncrypt(ImpressionData 1 ||blank_signature，S i ) Wherein blind_signature represents a blind signature of the second encrypted data element and S i Representing the public key of the aggregation server 180-a collecting the presentation data. That is, the application 112 can transmit data by encrypting data (expressiondata from one time 1 ) And one-time encrypted presentation data (expressiondata) 1 ) Generates complex messages to generate twice encrypted presentation data (ImpressionData 2 ) And encrypts this complex message using the public key of aggregation server 180-a.
The application 112 may then be used twiceEncrypted presentation data (ImpressionData 2 ) And collecting the public key of the aggregation server 180-B that transformed the data to generate triple-encrypted presentation data (ImpressionData 3 ). In some embodiments, the three-time encrypted presentation data (expressiondata 3 ) Is generated using probabilistic public key encryption. In this example, the three-time encrypted presentation data may be defined as:
ImpressionData 3p ＝(PubKeyEncrypt Probabilistic (ImpressionData 2 ，S c )).
in this regard, the presentation data is sequentially encrypted three times using public keys from reporting system 190, aggregation server 180-A, and aggregation server 180-B. In this way, the application 112 can securely store the third encrypted presentation data (ImpressionData 3p ) To the aggregation server 180-a with sufficient privacy protection because the innermost one-time encrypted presentation data (PubKeyEncrypt (m) i The report_domain) protects presentation data m during transmission from application 112 to reporting system 190 i . The outermost probabilistic public key encryption using the public key of aggregation server 180-B prevents collusion between reporting system 190, aggregation server 180-a and digital component distribution system 150, where colluders may use stable blind signed presentation join keys (IDs) and reconfigurable one-time encrypted presentation data (pubkeyencryptions (m) i The report domain) to track users across publisher domains. As described below, only if two aggregation servers 180-a and 180-B are confident (PubKeyEncrypt (m) i When all applicable thresholds are met by the aggregation servers 180-a and 180-B cooperate to decrypt the three-time encrypted presentation data to find a (PubKeyEncrypt (m) to be sent by each aggregation server 180-a and 180-B independently to the reporting system 190 i ||clicked，report_domain))。
In some implementations, the fraud detection system 170 blindly signs the first encrypted data element using two different keys to generate a blindly signed presentation join key (ID, dc_destinationin)) and for a second encrypted data element (expressiondata) 1 ) Blind signatures are performed. This may prevent a malicious application (e.g., a malicious browser) from requesting a blind signature of the presentation data and then declaring it as a signature of the presentation join key for the blind signature, and vice versa.
The application 112 may upload presentation data (e.g., three-time encrypted presentation data) to the aggregation server 180-a for each presentation for which presentation data has been recorded. For example, the application 112 may periodically upload the multiple encrypted presentation data in bulk (e.g., three encrypted presentation data). In some implementations, the application 112 uploads a key value pair m for each presentation i 205, which includes a presentation join key (BlindlySignedKey) as a blind signature for presentation and three-time encrypted presentation data (imprisondata) as a value 3p )。
When a presentation occurs, and uploading a key value pair m for each presentation i Such batch upload has some advantages over the batch upload. For example, bulk upload may hide the actual presentation time from the aggregation server 180-a to avoid timing-based attacks. This may also reduce the load, for example, query Per Second (QPS) load on the aggregation server 180-A. This may also reduce bandwidth and battery consumption of the client device 110, for example, if bulk upload occurs while the mobile device is connected to Wi-Fi and charged. This also allows the keys of each batch processing protocol instance to be selected to manage the encryption keys, e.g., if the communication between the client device 110 and the aggregation server 180-a is through hypertext transfer protocol security (HTTPS), then the same encryption key may be used for the entire batch.
When translation system 172 determines that a true translation has occurred for client device 110, translation system 172 may interact with fraud detection system 170 to determine whether the translation is valid or fraudulent. For example, translation system 172 may obtain fraud detection signal 211 from client device 110 and send fraud detection signal 211 to fraud detection system 170. Fraud detection system 170 may evaluate fraud detection signal 211 to determine whether the conversion is valid or fraudulent, whether client device 110 is trustworthy (as opposed to rooted, simulators in the data center, or otherwise compromised), and/or whether the user's interaction is authentic.
With the fraud detection signal, if the conversion is valid, the conversion system 172 may also send a third encrypted data element to be blindly signed by the fraud detection system 170. This third encrypted data element may include an encrypted version of the combination of the unique Identifier (ID) of the application 112 and the conversion domain (conversion_domain) where the conversion occurred. The conversion domain may be a website where the conversion occurs. This data may be encrypted for conversion using the public key of reporting system 190, similar to the way in which the first encrypted data element of presentation data is encrypted. For example, the third encrypted data element may be defined as a CryptoHash (ID) and may be encrypted using the same cryptographic hash function as used to generate the first encrypted data element.
Fraud detection system 170 may blindly sign the third encrypted data element using the same protocol used to sign the first encrypted data element for presentation. Fraud detection system 170 may then send conversion data 212 of the blind signature to conversion system 172. This blind signed conversion data 212 may include the blind signed third encrypted data element and the blind signature of the third encrypted data element. Conversion system 172 may generate a blind signed conversion key using blind signed conversion data 212. The blind signature conversion key (blindlysignekey) is a combination of the third encrypted data element and the blind signature of the third encrypted data element received from fraud detection system 170. In this way, if the transition is indeed triggered by the presentation, then the dc_destination at presentation and the conversion_domain at transition will be the same. Thus, the presentation key of the blind signature will match the conversion key of the blind signature.
Conversion system 172 may also use conversion metadata m for conversion c And the private key of the conversion system 172 to generate signed conversion data. Conversion metadata m c Data related to the conversion may be included, such as conversion type, label, quantized conversion value, etc. SigningMay be defined as PrivateKeySign (m) c Version_domain). Generating signed conversion data may include appending a digital signature to the conversion metadata using a private key and public key based digital signature algorithm. The conversion system 172 may provide the blind signed conversion key and signed conversion data 213 to the application 112.
The application 112 may use signed transformation data (PrivateKeySign (m) c Version_domain)) generates conversion data encrypted a plurality of times. The application 112 can convert the signed conversion data (PrivateKeySign (m) c Version_domain)) to generate one-time encrypted conversion data. This one-time encrypted conversion data (convertingata 1 ) May be defined as PubKeyEncrypt (PrivateKeySign (m) c A version_domain), a report_domain). In some implementations, the conversion system 172 may generate multiple encrypted conversion data, or at least one encrypted conversion data, instead of the application 112.
Use of encryption in combination with digital signature to secure transformed data m c Are not tampered with and eavesdropped during transmission from the conversion system 172 to the reporting system 190 through multiple intermediaries (e.g., aggregation servers 180-a and 180-B). To facilitate aggregation and to enforce k-anonymity at a later stage, conversionData 1 The encryption and digital signature in (c) should have certainty within the time/batch processing time window in order to map the exact same plaintext to the exact same ciphertext.
In some cases, metadata m is converted c There may not be too much entropy. Thus, the one-time encrypted conversion data (convertingata 1 ) Can have a limited cardinality and can be easily guessed. In this case, metadata m may be converted by composition c The cryptographic hashing of the transition domain (transformation domain) and the reporting domain (report domain) adds pseudo-entropy (e.g., based on the randomness of the encryption key) to the transition metadata m c And encrypts the complex message. In this example, one-time encrypted conversion data (convertingata 1 ) Can be defined as:
PubKeyEncrypt(PrivateKeySign(m c ||HMAC SHA256 (version_domain, report_domain), wherein HMAC SHA256 The (version_domain, report_domain) is a cryptographic hash of the transform domain and the report domain, and adds pseudo-entropy. In this example, the private key of the conversion domain is used to sign the complex message, while the public key of the reporting domain is used to encrypt the signed complex message.
The application 112 may encrypt the one-time encrypted conversion data (convertingdata) by using the public key of the aggregation server 180-B that collects the conversion data (convertingdata 1 ) Encryption is performed to generate twice-encrypted conversion data (convertyingata 2 ). Twice encrypted conversion data (convertingata) 2 ) May be defined as PubKeyEncrypt (convertyingata) 1 ,S c ) Wherein S is c Representing the public key of aggregation server 180-B. The application 112 may then convert the twice encrypted conversion data (convertingata) by using the public key of the aggregation server 180-a that collected the presentation data 2 ) Encryption is performed to generate three-time encrypted conversion data (convertyingata 3 ). In some embodiments, the three-time encrypted conversion data (convertyingata 3 ) Is generated using probabilistic public key encryption. In this example, the three-time encrypted conversion data may be defined as: pubKeyEncrypt Probabilistic (ConversionData 2 ,S i ) Wherein S is i Representing the public key of aggregation server 180-a.
The application 112 may upload the conversion data to the aggregation server 180-B for each conversion of the recorded conversion data. For example, the application 112 may periodically upload the multiple encrypted conversion data in bulk (e.g., three encrypted conversion data). In some implementations, the application 112 uploads the key value pair M for each conversion c 215, the key value pair M c 215 includes a blind signed conversion key (blindlysignekey) as a key for the conversion, and conversion data (convertjdata) as a tertiary encryption of a value 3 Or convertyingata 3p ). This third, outermost, additionThe secret may prevent the aggregation server 180-B from using a stable blind signature conversion key and twice encrypted conversion data (convertingata 2 ) Users reporting the transformations across multiple domains are tracked.
Example MPC procedure for decrypting presentation and conversion data
Aggregation servers 180-a and 180-B may use a multi-step MPC process to aggregate and then decrypt a subset of the received data meeting the threshold and/or other privacy protection criteria and send reports to reporting system 190. This process is shown in fig. 3, fig. 3 being a flow chart illustrating an example process 300 for determining aggregated conversion data. The process 300 may be implemented, for example, by a plurality of aggregation servers (e.g., the aggregation servers 180-a and 180-B of fig. 1 and 2).
The aggregation servers a and B may use a switched encryption technique "H" having a switched characteristic. In other words, given an arbitrary message m and two different encryption keys K 1 And K 2 The switched encryption technique has the following characteristics: h (H (m, K) 1 ),K 2 )＝H(H(m,K 2 ),K 1 ). In other words, exchange encryption involves double encryption using different encryption keys, wherein the order of encryption (which key is used to encrypt data first) does not matter, as the same result is obtained in either way.
Each aggregation server 180-A and 180-B may select a pair of secret encryption keys Key, respectively i (which represents a pair of keys) and Key c (which represents a pair of keys). One of the keys, key, is described below ii Can be used to encrypt the join Key, with one of the keys being a Key i2 May be used to encrypt/decrypt presentation data. Similarly, one of the keys is Key c1 Can be used to encrypt the join Key, with one of the keys being a Key c2 May be used to encrypt/decrypt the transformed data. Aggregation servers 180-a and 180-B may periodically select a new pair of keys based on a specified time period, per batch of presentation or conversion data, or based on other suitable criteria.
Aggregation server 180-a receives presentation data (302). For example, aggregation server 180-a may receive a batch of presentation data from a plurality of client devices. As described above, each client device may periodically send batches of presentation data to aggregation server 180-A.
The presentation data may be sent in the form of a key value pair for each presentation. Each key value pair may include a presentation key (BlindlySignedKey (ID) as a blind signature for presentation of the key, and presentation data (imprisondata) as three-time encryption of the value 3p )。
Aggregation server 180-B receives the translation data (304). For example, aggregation server 180-B may receive a batch of conversion data from a plurality of client devices. As described above, each client device may periodically send batches of conversion data to aggregation server 180-B.
The conversion data may be sent in the form of key value pairs for each conversion. Each key value pair may include a conversion key (BlindlySignedKey) as a blind signature for conversion of the key and conversion data (convertedata) as three-time encryption of the value 3p )。
For each presentation, aggregation server 180-A uses the exchange encryption and its selected encryption Key Key i1 To encrypt the join key (306). In this example, the join key for presentation is a join presentation key (BlindlySignedKey) for a blind signature for presentation. Aggregation server 180-a may then provide the encrypted join key and the three-time encrypted presentation data to aggregation server 180-B for each presentation. In other words, aggregation server 180-A may send a pair of for each presentation: { H (BlindlySignedKey, key) i1 ),ImpressionData 3p }. The pairs may be transmitted in a random or pseudo-random order.
For each conversion, the aggregation server 180-B uses the exchange encryption and its selected encryption Key Key c1 To encrypt the join key (308). In this example, the join key for conversion is a conversion key (BlindlySignedKey) for blind signature of conversion. Aggregation server 180-B may then needleThe aggregation server 180-a is provided with an encrypted join key and three-time encrypted translation data for each translation. In other words, aggregation server 180-B may send a pair of for each presentation: { H (BlindlySignedKey, key) c ),ConversionData 3p }. The pairs may be transmitted in a random or pseudo-random order.
For each pair of the received encrypted join Key and the three-time encrypted conversion data { H (BlindlySignedKey, key) c1 ),ConversionData 3p Aggregation server 180-a re-encrypts the join key and the translation data (310). In some implementations, the aggregation server 180-A can use its private key (with the public key S i The corresponding private key) decrypts the three-time encrypted conversion data (convertingata 3p ) To recover twice encrypted conversion data (convertyingata 2 ). The aggregation server 180-a may then use its selected encryption Key i2 Re-encrypting the twice-encrypted conversion data (convertyingata 2 ). For such encryption, deterministic symmetric encryption techniques may be used. This encrypted conversion data may be referred to as convertingata 3' Because the transformed data has been sequentially deterministic encrypted three times using keys from the three domains, reporting system 190, aggregation server 180-B, and aggregation server 180-a.
The aggregation server 180-a may also use its selected encryption Key i2 After the encrypted blind signature has been exchanged, the presentation Key (H (BlindlySignedKey, key c ) A) applies the exchange encryption. The result of this step isAnd convertyingata 3' Aggregation server 180-a sends the two results to aggregation server 180-B for each received encrypted join key and encrypted three-time encryption translation data. />
For each pair of received encrypted join Key and encrypted third encrypted presentation data { H (BlindlySignedKey, key) i1 )，ImpressionData 3p Aggregation server 180-B re-encrypts the join key and presentation data (312). In some embodimentsIn the above, the aggregation server 180-B may decrypt the three-time encrypted presentation data (ImpressionData) using its private key (private key corresponding to the public key Sc) 3p ) To recover twice encrypted presentation data (ImpressionData 2 ). The aggregation server 180-B may then use its selected encryption Key c2 Re-encrypting the twice-encrypted presentation data (ImpressionData 2 ). For such encryption, deterministic symmetric encryption techniques may be used. This encrypted conversion data may be referred to as an expressiondata 3 Because the presentation data has been sequentially encrypted three times deterministically using keys from the three domains, reporting system 190, aggregation server 180-a, and aggregation server 180-B.
The aggregation server 180-B may also use its selected encryption Key c2 After the encrypted blind signature has been exchanged, the presentation Key (H (BlindlySignedKey, key i1 ) A) applies the exchange encryption. The result of this step isAnd ImpressionData 3' . Aggregation server 180-B sends these two results to aggregation server 180-a for each pair of received encrypted join key and three times encrypted presentation data.
Aggregation server 180-a couples and filters the encrypted presentation and conversion data (314). After receiving the results from aggregation server 180-B, aggregation server 180-A has a pair of results for each presentationAnd ImpressionData 3' }. For each conversion, aggregation server 180-A also has a pair of results +. >And convertyingata 3' }。
Since each aggregation server 180-A and 180-B encrypts the blind signing key once using the exchange encryption, it is encrypted with the encrypted blind signing keyMatched encrypted blind signature key for presentationThe conversion resulting from the presentation of the digital components is indicated because these keys are based on the unique identifier of the application 112, the domain of the reporting system 190, and the domain of the landing page of the digital components. Thus, the aggregation server 180-A may use the encrypted blind signing key +.>And a coupling pair. Linking the corresponding presentation data with the corresponding conversion data may include linking the presentation data to the conversion data. For example, aggregation server 180-A may generate a blind signing key using encryption +.>As a table of row keys or other data structure. Each row may include a row key and associated presentation data and conversion data. An example table is shown in table 1 below. In other examples, combining the presentation data and the conversion data may include generating a tuple including the row key and the combined presentation data and conversion data for each combined presentation data and conversion data.
TABLE 1
The aggregation server 180-a may then filter the data to meet the k-anonymity criterion. Aggregation server 180-a may determine a unique encrypted blind signing key associated with each of the three encrypted presentation data Is a number of (3). Each piece of tertiary encrypted presentation data may also be referred to as an occurrence of presentation data. Since the presentation data is not application specific, but is based on the presented digital components, multiple presentationsMay have the same three-time encrypted presentation data but with a different encryption blind signing key +.>
The aggregation server 180-a may associate a different encrypted blind signature key with each unique presentation dataIs compared to a k-anonymity threshold. If the number is below the threshold, aggregation server 180-A may filter occurrences of presentation data from a table or other data structure.
The aggregation server 180-a may also determine a unique encryption blind signing key associated with each of the three encrypted transformed dataIs a number of (3). Each piece of three-time encrypted conversion data may also be referred to as an occurrence of conversion data. Since the conversion data is not application specific, but is based on data related to the conversion event, multiple conversions may have the same three-time encrypted conversion data, but with different encrypted blind signing keys
Aggregation server 180-a may encrypt each uniquely transformed data associated with a different encrypted blind signature key Is compared to a k-anonymity threshold. If the number is below the threshold, the aggregation server 180-A may filter occurrences of the conversion data from a table or other data structure.
The aggregation server 180-a may also determine a unique encrypted blind signing key associated with each combination of the tertiary encrypted presentation data and the conversion dataIs a number of (3). In other words, this is a count of the number of unique blind signing keys with the same three-time encrypted presentation data and the same three-time encrypted conversion data. Each combination of triple encrypted presentation data and the same triple encrypted conversion data may also be referred to as the occurrence of presentation cross conversion data.
The aggregation server 180-a may compare the number of each occurrence of exhibiting cross-conversion data to a k-anonymity threshold. If the number is below the threshold, the aggregation server 180-A may filter occurrences of presentation cross-conversion data from a table or other data structure.
Aggregation server 180-a may then use the remaining data after filtering to generate a new table or data structure, as shown in table 2 below. Each row of table 2 corresponds to a combination of occurrences of impressionData3 'and corresponding occurrences of convertiondata 3'. This table records the number of times each combination occurs, e.g., a uniquely encrypted blind signature key associated with each combination Is a number of (3). This count is equal to the number of conversions of digital components resulting from the presentation of digital components having the same presentation data.
TABLE 2
Aggregation server 180-B couples and filters the encrypted presentation and conversion data (316). After receiving the results from aggregation server 180-A, aggregation server 180-B has a pair of results for each presentationAnd ImpressionData 3' }. For each transition, aggregateServer 180-a also has a pair of results +.>And convertyingata 3' }. Thus, aggregation server 180-B has the same data as aggregation server 180-A.
Aggregation server 180-B may perform the same calculations and filtering as aggregation server 180-a using the same data to achieve the same results. That is, aggregation server 180-B may generate a table that matches table 2 generated by aggregation server 180-A.
In some implementations, both aggregation servers 180-A and 180-B may perform some optional operations to ensure differential privacy, such as using sub-sampling. Differential privacy is a technique for sharing data about a dataset by describing patterns of groups within the dataset without providing personal data in the dataset. To this end, each aggregation server may first sample the data (e.g., rows in table 1) with some probability test (beta). The aggregation server then applies only the k-anonymization generalization described above to the sampled data. That is, the aggregation server may determine a unique cryptographic blind signing key for each occurrence type And filtering out those from the sampled data that do not meet the k-anonymity threshold.
For sub-sampling, to ensure that two aggregation servers duplicate identical samples and perform identical differential privacy techniques, the aggregation servers may use pseudo-random based samples. Randomization of the samples may be determined by a common seed that is commonly determined by both servers (e.g., using Diffie-Hellman key exchange). The result of the exchange is a seed for the same pseudo-random generator (e.g., a seed based on the Advanced Encryption Standard (AES) algorithm). This ensures that the same subset is sampled in both aggregation servers and the same result will be computed, since once the pseudo-randomness is the same, the rest of the process is deterministic.
After joining and filtering, the servers are aggregated180-a and 180-B both have the same data, e.g., each includes { count, expressiondata } 3' ，ConversionData 3' Tuple table or list. Count is a Count of the Count value obtained by the method of the ImpressionData 3' The number of transitions of the presentation of the same presentation data is represented.
For each tuple, aggregation server 180-A decrypts the three-time encrypted conversion data (convertingata 3' ) (318). The aggregation server 180-a may use its selected encryption Key i2 Decrypting three-time encrypted conversion data (convertyingata 3' ) To obtain { count, immersement data ] 3' ，ConversionData 2' }. Aggregation server 180-a may send these result tuples to aggregation server 180-B.
Similarly, for each tuple, aggregation server 180-B decrypts the three-time encrypted presentation data (ImpressionData 3' ) (320). The aggregation server 180-B may use its selected encryption Key c2 Decrypting the three-time encrypted presentation data (ImpressionData 3' ) To obtain { count, immersement data ] 2 ，ConversiodData 3' }. Aggregation server 180-B may send these result tuples to aggregation server 180-a.
The aggregation server 180-A receives for each received result tuple { count, impressionData 2 ，ConversionData 3' Twice-encrypted presentation data (ImpressionData) 2 ) And three-time encrypted conversion data (convertingata) 3' ) Decryption is performed (322). Aggregation server 180-A may use public key S with aggregation server 180-A i A corresponding private key to decrypt the twice encrypted presentation data (ImpressionData 2 ) And three-time encrypted conversion data (convertingata) 3' ). For each received tuple, this decryption produces a tuple { count, immerseionData ] 1 ，ConversionData 2 }. The aggregation server 180-A may store these tuples { count, impressionData } 1 ，ConversionData 2 Each of which is sent to aggregation server 180-B.
The aggregation server 180-B receives for each received result tuple { count, impressionData ] 3' ，ConversionData 2 Three-time encrypted presentation data (ImpressionData) 3 ') and twice encrypted conversion data (convertyingata) 2 ) Decryption is performed (324). The aggregation server 180-B may decrypt the three-time encrypted presentation data (ImpressionData) using a private key corresponding to the public key Sc of the aggregation server 180-B 3' ) And twice encrypted conversion data (convertingata) 2 ). For each received tuple, this decryption produces a tuple { count, immerseionData ] 2 ，ConversionData 1 }. The aggregation server 180-B may store these tuples { count, impressionData } 2 ，ConversionData 1 Each of which is sent to aggregation server 180-a.
The aggregation server 180-A decrypts each received tuple { count, impressionData } 2 ，ConversionData 1 Presentation data (326). Aggregation server 180-A uses public key S with aggregation server 180-A i The corresponding private key is for each received tuple { count, impersondata ] 2 ，ConversionData 1 The presentation data of } is decrypted. For each received tuple, this decryption produces a tuple { count, immerseionData ] 1 ，ConversionData 1 }。
In this tuple, the presentation data (expressiondata 1 ) Is pubKeyEncrypt (m) i The | click, report_domain) | blind_signature), thus includes the presentation data encrypted using the public key of reporting system 190 and the blind signature of the second data element generated at the presentation time. Conversion data (convertingata) 1 ) Is PubKeyEncrypt (PrivateKeySign (m) c Version_domain), report_domain), and thus includes conversion data encrypted using the public key of reporting system 190.
The aggregation server 180-B decrypts each received tuple { count, impressionData ] 1 ，ConversionData 2 Conversion data (328). Aggregation server 180-B uses public key S with aggregation server 180-B c The corresponding private key is for each received tuple { count, impersondata ] 1 ，ConversionData 2 The converted data of } is decrypted. For each ofReceived tuples, such decryption results in tuples { count, immerse 1 ，ConversionData 1 }。
As with the aggregation server 180-a decrypted tuple, in this tuple the presentation data (ImpressionData 1 ) Is pubKeyEncrypt (m) i The | click, report_domain) | blind_signature), thus includes the presentation data encrypted using the public key of reporting system 190 and the blind signature of the second data element generated at the presentation time. Conversion data (convertingata) 1 ) Is PubKeyEncrypt (PrivateKeySign (m) c Version_domain), report_domain), and thus includes conversion data encrypted using the public key of reporting system 190.
Aggregation server 180-A sends a conversion report for each decrypted tuple to reporting system 190 (330). Similarly, aggregation server 180-B sends a conversion report for each decrypted tuple to reporting system 190 (332). The conversion report may include the decrypted tuple or data included in the decrypted tuple.
Aggregation servers 180-A and 180-B may obtain the URLs for the reporting systems of each tuple in various ways to obtain each conversion. In one example, the application 112 that is exposed may send report_domain (e.g., URL for reporting system 190) to aggregation server 180-a in plain text, e.g., at exposure time and as a key value pair m i Is a part of the same. Similarly, the applications 112 that have translated may send report_domain to the aggregation server 180-B in plain text, e.g., as a key value pair M at the translation time c Is a part of the same.
In another example, a browser developer (or application developer) may publish a whitelist of allowed reporting systems 190 and their report_domains. The browser (or application) may periodically download the whitelist and apply the whitelist to send the conversion report.
In another example, the browser or application may encrypt the report fields using (t, n) -threshold encryption techniques and send the encrypted report fields to aggregation servers 180-A and 180-B. In this example, aggregation servers 180-A and 180-B can only recover the plaintext report_domain if at least t browsers or applications report the same report_domain. In another example, the derivation of the report_domain may be used in (t, n) -threshold encryption techniques, for example, if the report_domain does not have sufficient entropy. For example, the derivation may be a combination of report_domain and a cryptographic hash of the digital component landing page.
Returning to FIG. 2, reporting system 190 receives two conversion reports 127 and 128 from aggregation servers 180-A and 180-B for each one-time encrypted conversion data (ImpressionData 1 ) And PubKeyEncrypt (PrivateKeySign (m) c A version_domain), a report_domain) pair. Each conversion report 127 and 128 may include the number of combinations in the filtered data for each combination of presentation and conversion, e.g., as derived from the tables described above. For the same batch of presentation and conversion data, the data in conversion report 127 received from aggregation server 180-A should match the data in conversion report 128 received from aggregation server 180-B. Reporting system 190 may compare the two numbers to identify differences in potential signs of malicious behavior.
Reporting system 190 may also invoke fraud detection system 170 to verify the blind signature on the presentation data. Reporting system 190 may then decrypt the encrypted conversion data using its own private key. Reporting system 190 may then use the public key of the conversion system to verify the digital signature on the converted data. If both verifications are successful, reporting system 190 may be confident that the transformed measurement data is valid.
The recipient of the conversion report should be able to trust the data in the conversion report. The above-described technique of comparing conversion reports received from two aggregation servers 180-a and 180-B and verifying blind signatures may prevent most fraud in the conversion reporting pipeline. However, two aggregation servers may collude to modify the transition count. To prevent such collusion, the conversion server 172 may encrypt and digitally sign the conversion data before providing the conversion data to the client device 110. For example, the conversion system 172 may encrypt and digitally sign the converted data using asymmetric addition homomorphic encryption that retains the signature or another signature technique that retains the structure. In this way, the digital signature is retained after three (or otherwise multiple) encryptions, as described above. Such encryption prevents aggregation servers 180-a and 180-B from accessing the transformed data and enables the recipient to verify the digital signature to verify that the transformed data has not been modified. When the conversion values are included in the conversion data, each conversion value may be encrypted and signed in a similar manner, as described below.
The above-described transition reporting techniques may support various types of transition events. To support the same browser (or the same application) click translation and browse translation, the browser or application may select a browser scope (or application scope) randomly generated unique Identifier (ID) dedicated to translation measurement purposes. The browser (or application) may calculate BlindlySignedKey (ID) at presentation and conversion time. To distinguish between click transitions and browse transitions, a browser or application may use and present data m at presentation time i The boolean variable of click together encodes whether the user interacts with the digital component. In other embodiments, the browser or application may encode the type of interaction of the user with the digital component, e.g., silence the digital component, fill out surveys, and so forth.
To support on-device conversion between applications and web browsers, both the browser and the application may report on the presentation and conversion using a unique Identifier (ID) that is randomly generated at the device level (e.g., by the device's operating system). Further, if the conversion occurs in the application rather than the web browser, then the conversion_domain may be the name of the application or a certificate of the application developer identifying the application.
To support cross-device transformations (e.g., presentation occurs on one device of a user, while transformations occur on a different device of the user), the unique Identifier (ID) may be information about the user or based on such information. For example, the unique Identifier (ID) may be a cryptographic hash of the user login credentials, a user-provided telephone number or email address, or other personally identifiable information provided by the user. For example, a user may log into a mobile application. The same user may log onto the publisher's website using the login credentials of the mobile application. The same login credentials may be used as a user Identifier (ID) for cross-device transformations that occur between the website and the mobile application.
FIG. 4 is a flow chart illustrating another example process 400 for determining aggregated conversion data. Process 400 may be implemented, for example, by a plurality of aggregation servers (e.g., aggregation servers 180-a and 180-B of fig. 1 and 2).
The first aggregation server 180-a receives presentation data from a plurality of client devices (402). For each presentation of the digital component recorded by the client device, the presentation data may include a first key value pair. The first key value pair for presentation may include a first key based on a unique identifier of the client device or an application on the client device on which the presentation occurred. For example, the first key for presentation may be a blindly signed presentation key and may be defined as a BlindlySignedKey (ID) received from the client device, as described above.
The first key value pair for presentation may also include a first value including encrypted presentation data that has been encrypted using a first public key of a first aggregation server and using a second public key of a second aggregation server different from the first aggregation server. For example, the first value may be three-time encrypted presentation data (ImpressionData 3 )。
The second aggregation server receives translation data from at least a portion of the plurality of client devices (404). For each conversion recorded by the client device, the conversion data may include a second key value pair including a second key based on a second unique identifier of the client device or an application on which the conversion occurred. For example, the second key used for conversion may be a blind signed conversion key (blinlysignedkey) received from the client device.
The second key value pair for conversion may include a second value including encrypted conversion data that has been encrypted using the first encryption key and the second encryption key. For example, the second value mayTo be three-time encrypted conversion data (convertingdata) received from a client device 3 )。
Aggregation servers 180-a and 180-B perform an MPC process to join encrypted presentation and conversion data, filter the join results, and then decrypt a subset of the encrypted presentation data and encrypted conversion data that meet privacy protection criteria (406). This MPC process may include identifying pairs of encrypted conversion data and corresponding encrypted presentation data based on the first key and the second key. The presentation data and conversion data of each pair of encrypted presentation data and conversion data may then be decrypted in multiple stages using a first private key corresponding to the first public key and a second private key corresponding to the second public key. Each stage may include one of the first or second aggregation servers decrypting each pair of encrypted presentation data and the corresponding one of the encrypted presentation data or encrypted conversion data and transmitting the resulting data to the other of the first or second aggregation servers. This MPC process may be the same as or similar to the process 300 shown in FIG. 3 and described above.
Each portion of decrypted presentation data and each portion of decrypted conversion data is sent to a corresponding reporting system (408). For example, as described above, each aggregation server 180-A and 180-B may send a conversion report to a corresponding reporting system.
Verifying the integrity of data for each aggregation server
As described above, at the beginning of process 300, aggregation server 180-A receives the presentation data (m i ). Each key value pair may include three encrypted presentation data (ImpressionData 3p ) A presentation key (BlindlySignedKey) of a presentation of a blind signature of (dc_destination). Three-time encrypted presentation data (ImpressionData) 3p ) Is probabilistic using the public key of aggregation server 180-B. Therefore, any other party than the aggregation server 180-B cannot decrypt the triple-encrypted presentation data (ImpressionData 3p ) The display data is used for removing aggregate clothesAll servers other than server 180-B may be cryptographic random numbers.
Furthermore, no other party other than the application 112 knows the plaintext value of the user Identifier (ID). The only information that the colluder can recover is that the anonymous user behind the blindly signed presentation key (ID) has multiple presentations with unknown characteristics. Colluders cannot infer the total number of presentations that the application 112/client device 110/user has seen, because the entire digital component rendering is fragmented by the destination (dc_destination) and report domain (report_domain).
If it is known that the display number associated with the blindly signed presentation key (ID) displayed to the user is a problem, the application 112 may repeatedly send out presentation data (m i ) Random or pseudo-random times. Given the data (ImpressionData) in the generation of three-time encrypted presentation data 3p ) The aggregation server 180-a and any colluders cannot de-duplicate the received presentation data. However, the aggregation server 180-B may decrypt the three-time encrypted presentation data (ImpressionData 3p ) To recover twice encrypted presentation data (ImpressionData 2 ) The presentation is then de-duplicated.
As described above with reference to process 300, at the beginning of step 310 of process 300, aggregation server 180-A receives a pair { H (BlindlySignedKey, key) from aggregation server 180-B c )，ConversionData 3p It cannot be linked to what the aggregation server 180-a has at step 302, i.e., the key value pair { (BlindlySignedKey (ID, dc_destination), imapressiondata) 3p }. In addition, a blindly signed Key H (BlindlySignedKey, key) c ) May be valid only for each execution of the MPC process and the aggregation server 180-B may discard the selected Key after each execution c1 And Key c2 . Aggregation server 180-a may decrypt the three-time encrypted conversion data (convertingata) using its public key 3p ) To recover twice encrypted conversion data (convertyingata 2 ). At this time, the aggregation server 180-A hasH(BlindlySignedKey,Key c ) And twice encrypted conversion data (convertingata) 2 ) Both are encrypted and only the aggregation server 180-B has the decryption key. Since the aggregation server 180-B is honest, the aggregation server 180-a cannot do anything to jeopardize user privacy.
At the beginning of step 314 of process 300, aggregation server 180-A receives a twice encrypted, blind signed join key from aggregation server 180-B for each presentationAnd three-time encrypted presentation data (ImpressionData 3' ). This three-time encrypted presentation data (ImpressionData 3' ) Finally encrypted using a key owned by the aggregation server 180-B that is valid only for the current execution of the MPC process. The worst thing the aggregation server 180-A can do without collusion with the aggregation server 180-B is to send the fake data tuples { count', impermissionData } 3 ”，ConversionData 2 "} but not the actual data tuple { count, immersement data } 3' ，ConversionData 2' }。
Fig. 5 is a flow chart illustrating an example process 500 for verifying the integrity of data. In particular, the process 500 may be performed by one of the aggregation servers 180-A or 180-B to verify the integrity of data received from the other aggregation server 180-A or 180-B during the MPC process described in this document (e.g., the MPC process of FIGS. 3 and 4 or the MPC process described below). For ease of description, process 500 is described in terms of aggregation server 180-B verifying the integrity of data received from aggregation server 180-A. However, aggregation server 180-A may perform a similar process to verify the integrity of the data received from aggregation server 180-B.
This process 500 may be used to prevent various types of fraud, including situations where one of aggregation servers 180-A or 180-B colludes with fraud detection system 172, conversion system 172, and reporting system 190.
Aggregation server 180-B validates the data received from aggregation server 180-a (502). Aggregation server180-B may perform step 502 as part of step 324 of process 300. As described above with reference to step 318 of FIG. 3, aggregation server 180-A may send aggregation server 180-B a message in the form { count, impressionData } 3' ，ConversionData 2' A tuple. Aggregation server 180-B may convert data convertingdata encrypted twice in each tuple 2' Encryption is performed to generate three-time encrypted conversion data convertiondata for each tuple 2' . Conversion data convertiondata due to tertiary encryption 3 I.e., three-time encrypted conversion data convertingdata using the public key of the aggregation server 180-a 3 This is possible with deterministic public key encryption results.
The aggregation server 180-B may store each received tuple { count, impressionData } 3' ，ConversionData 2' Transform into { count, impressionData } 3' ，ConversionData 3' And compares the resulting dataset generated by aggregation server 180-B in step 316 of fig. 3 after thresholding and sub-sampling are applied to achieve k-anonymity and differential privacy. For example, aggregation server 180-B may store the tuple { count, impressionData } 3' ，ConversionData 3' Comparison with the rows of table 2. If the two data sets match, then the aggregation server 180-B can be sure that the aggregation server 180-A is performing the encryption protocol honest until step 322 of FIG. 3. Otherwise, the aggregation server 180-B may end the MPC process prematurely and/or report possible malfunction (malfunction) of the aggregation server 180-A.
As described above with reference to process 300, at the beginning of step 322, aggregation server 180-A receives data in the form { count, impressionData from aggregation server 180-B 2 ，ConversiodData 3' A tuple. After applying thresholding and sub-sampling, the aggregation server 180-A may obtain its own data set generated in step 314 of process 300. The dataset includes rows (e.g., in Table 2) or { count, impressionData 3' ，ConversiodData 3' Form of tuples. The aggregation server 180-a may use these pieces of data to infer the cryptographic extension of three times for two data setsDisplay data (image data) 3' ) And twice encrypted presentation data (ImpressionData 2 ) Mapping between them.
Similar to aggregation server 180-B, aggregation server 180-A may verify the three-time encrypted presentation data (ImpressionData 3' ) Is indeed twice encrypted presentation data (ImpressionData) using the public key of aggregation server 180-B 2 ) Deterministic public key encryption results. However, since the triple-encrypted presentation data (ImpressionData 3' ) And twice encrypted presentation data (ImpressionData 2 ) The aggregation server 180-a cannot recover the private key of the aggregation server 180-B due to the design of the public key encryption algorithm. The worst thing the aggregation server 180-A can do is to send the fake data tuple { count', impermissionData to the aggregation server 180-B 1 ’,ConversionData 2 ' rather than the actual data tuple { count, impressionData }, of 1 ，ConversionData 2 }。
Aggregation server 180-B verifies the integrity of the data received from aggregation server 180-a (504). Aggregation server 180-B may use a deterministic public key algorithm and the public key of aggregation server 180-a to encrypt presentation data (expressiondata 1 ) Re-encrypting the display data (repressiondata) 2 ). Aggregation server 180-B may use a deterministic public key algorithm and the public key of aggregation server 180-a to encrypt the twice-encrypted transformed data (convertyingata 2 ) Re-encrypting the display data (convertyingata 3 ). Aggregation server 180-B may then use the encryption result for each tuple { count, impressionData ] that will be received from aggregation server 180-A in step 322 of process 300 1 ，ConversionData 2 Conversion to tuples { count, impressionData } 1 ，ConversionData 2 Form of tuples.
Aggregation server 180-B may then compare this resulting tuple data set with the data set that aggregation server 180-B generated in step 320 of process 300 and sent to aggregation server 180-a. If the two data sets match, then the aggregation server 180-B can be sure that the aggregation server 180-A has performed the encryption protocol honest so far in the MPC process of process 300. Otherwise, the aggregation server 180-B may end the MPC process prematurely and/or report possible malfunction of the aggregation server 180-A.
As described above with reference to process 300, at the beginning of step 326 of process 300, aggregation server 180-A receives the tuple { count, impressionData from aggregation server 180-B 2 ，ConversionData 1 }. If the aggregation server 180-A did not honest the twice-encrypted presentation data (ImpressionData in step 326 of process 300 2 ) Decrypted into one-time encrypted presentation data (ImpressionData 1 ) And correct tuple { count, impressionData ] 1 ，ConversionData 1 Send to reporting system 190, reporting system 190 will find the difference between the two conversion reports received from aggregation servers 180-a and 180-B. Reporting system 190 may report the differences to at least one of aggregation servers 180-A and 180-B. In the event that aggregation server 180-A does not collude with reporting system 190, aggregation server 180-A may leak to reporting system 190 where the leakage information may be understood, the most important information includes a histogram of counts and conversion data for each tuple. However, the user privacy of this data is protected by the thresholding requirements and differential privacy sub-sampling applied in steps 314 and 316 of process 300.
Generating sequences of presentations and transformations
FIG. 6 is a flow chart illustrating an example process 600 for generating a time-ordered sequence of events while preserving user privacy. Process 600 may be used to generate a time-sequential sequence of presentations and/or conversions, which may be used to support different conversion attribution models (such as last click attribution or rule-based attribution). Process 600 may be performed by aggregation servers 180-a and 180-B.
Similar to process 300, each aggregation server 180-A and 180-B may select a pair of secret encryption keys Key, respectively i (which represents a pair of keys) and Key c (which represents a pair of keys). The aggregation server 180-a may also select a secret Key i,skew . Similarly, the aggregation server 180-B may select the secret Key Key c,skew . Aggregation servers 180-a and 180-B may select new keys periodically, on a per-batch basis, or based on other suitable criteria.
Aggregation server 180-a receives presentation data (602). In this example, the presentation data for each presentation may include a blindly signed presentation key (ID), three-time encrypted presentation data (imprssiondata) 3p ) And presentation time data (ImpressionTime) 2 ). The blindly signed presentation key and the tertiary encrypted presentation data may be the same as or similar to the blindly signed presentation key and the tertiary encrypted presentation data of process 300. The presentation time data represents the time at which the presentation occurred and may be encrypted.
Presentation time data (ImpressionTime) 2 ) The public key S of the aggregation server 180-A may be used i And the public key of aggregation server 180-B are encrypted twice. For example, presentation time data (expressiontime 2 ) May be defined as PubKeyEncrypt (T) m +t device ),S i ),S c ). In this example, t m Is the presentation or click time (e.g., the time at which the digital component is presented or interacted with) and t device Is the clock bias of the client device 110 on which the application 112 presenting the digital components is installed. In this example, encryption technique T and public key S of aggregation server 180-A are used i The sum of the two times is encrypted. The encryption technique T may be homomorphic addition probabilistic public key encryption (e.g., a Paillier encryption system). This encrypted value is then encrypted using the public key Sc of the aggregation server 180-B. This second encryption may be a deterministic or probabilistic encryption technique.
Aggregation server 180-B receives the translation data (604). In an example, the conversion data may include a blindly signed conversion key (ID), a triple encrypted conversion data (convertyingata) 3p ) And transition time data (conversion time) 2 ). Conversion key for blind signatureAnd the tertiary encrypted conversion data may be the same or similar to the blind signed conversion key and tertiary encrypted conversion data of process 300. The conversion time data represents the time at which the conversion occurs and may be encrypted.
The public key S of the aggregation server 180-A may be used i And the public key S of aggregation server 180-B c For transition time data (conversion time) 2 ) Two encryptions are performed. For example, transition time data (convertioime 2 ) Can be defined by PubKeyEncrypt (T (z n +t device ),S c ),S i ) And (3) representing. In this example, z n Is the transition time (e.g., time to complete the transition) and t device Is the clock bias of the client device 110 on which the application 112 presenting the digital components is installed. In this example, encryption technique T and public key S of aggregation server 180-B are used c The sum of the two times is encrypted. The encryption technique T may be homomorphic addition probabilistic public key encryption (e.g., a Paillier encryption system). And then uses the public key S of the aggregation server 180-a i This encrypted value is encrypted. This second encryption may be a deterministic or probabilistic encryption technique.
For each presentation, aggregation server 180-A uses the exchange encryption and its selected encryption Key Key i1 To encrypt the join key (606). Similar to process 300, the join key for presentation may be a join presentation key (blinlysignedkey) for a blind signature of presentation. The aggregation server 180-a may then provide the encrypted join key, three-time encrypted presentation data (ImpressionData, for each presentation to the aggregation server 180-B 3p ) And twice encrypted presentation time data (expressiontime) 2 ). In other words, aggregation server 180-A may send tuples for each presentation: { H (BlindlySignedKey, key) i1 )，ImpressionData 3p ，ImpressionTime 2 }. The tuples may be transmitted in a random or pseudo-random order.
For each conversion, the aggregation server 180-B uses the exchange encryption and its selected encryption Key Key c1 To encrypt the join key (608). Similar toIn process 300, the join key for conversion is a conversion key (BlindlySignedKey) for blind signature of conversion. Aggregation server 180-B may then provide the encrypted join key, three-time encrypted translation data (convertyingata) to aggregation server 180-a for each translation 3p ) And twice encrypted conversion time data (conversion time) 2 ). In other words, aggregation server 180-B may send tuples for each presentation: { H (BlindlySignedKey, key) c )，ConversionData 3p ，ConversionTime 2 }. The tuples may be transmitted in a random or pseudo-random order.
For each received tuple, aggregation server 180-A decrypts the conversion time data (610). Aggregation server 180-A may use public key S with aggregation server 180-A i A corresponding private key is used to convert time data (conversion time) 2 ) Decryption is performed. This decryption resumes (T (z) n +t device ),S c )。
The aggregation server 180-a may also use its selected encryption Key i2 After the encrypted blind signature has been exchanged, a Key (H (BlindlySignedKey, key) c ) A) applies the exchange encryption. The result is an encrypted blind signing key
Aggregation server 180-A may calculate a time offset value (time_skew i ). For example, aggregation server 180-A may calculate the time offset value (time_skew i ) Secret Key of (2) i,skew And an HMAC of encrypted blind signature conversion keys, e.g., HMAC SHA256 (Key i,skew ,)。
The aggregation server 180-a may then generate one-time encrypted conversion time data (conversion time) for each received tuple 1 ). In some embodiments, the one-time encrypted transition time data (convertioime 1 ) Is to useHomomorphic addition probabilistic public key encryption techniques T, e.g. T (z n +t device +time_skew i ,S c ) And (3) generating. In this example, the transition time (z n ) Clock skew (t) of client device device ) And a time offset value (time_skew i ) Is the sum of the public key S using aggregation server 180-B c Encrypted.
The aggregation server 180-a may also convert the three-time encrypted conversion data (convertyingata, as described above with reference to step 310 of process 300 3p ) Decryption and re-encryption are performed. That is, the aggregation server 180-A may use its private key (with the public key S i The corresponding private key) decrypts the three-time encrypted conversion data (convertingata 3p ) To recover twice encrypted conversion data (convertyingata 2 ). The aggregation server 180-a may then use its selected encryption Key i2 Re-encrypting the twice-encrypted conversion data (convertyingata 2 ) To obtain three-time encrypted conversion data (convertyingata 3p )。
Aggregation server 180-a may convert data (convertingdata 3p ) Determining conversion data (convertyingata) with tertiary encryption 3p ) Associated uniquely encrypted blind signature conversion keyIs a number of (3). If the data is encrypted with three times of conversion data (convertyingata 3p ) Associated uniquely encrypted blind signature conversion key +.>If the number of (e.g. based on thresholding requirements) satisfies a threshold, then aggregation server 180-A sends the tuple +. >ConversionData 3p ，ConversionTime 1 }。
For each received tuple, aggregation server 180-B solutionThe time data is densely displayed (612). The aggregation server 180-B may decrypt presentation time data (impressatime) using a private key corresponding to the public key Sc of the aggregation server 180-B 2 ). This decryption resumes (T) m +t device ),S i )。
The aggregation server 180-B may also use its selected encryption Key c2 After the encrypted blind signed conversion Key (H (BlindlySignedKey, key) i ) A) applies the exchange encryption. The result is an encrypted blind signing key
Aggregation server 180-B may calculate a time offset value (time_skew c ). For example, aggregation server 180-B may act as a time offset value (time_skew c ) Calculating a Key Key c,skew And an HMAC of encrypted blind signature conversion keys, e.g., HMAC SHA256 (Key c,skew ,(BlindlySignedKey)。
The aggregation server 180-B may then generate once-encrypted presentation time data (impressatime) for each received tuple 1 ). In some embodiments, the one-time encrypted transition time data (expressiontime 1 ) Is generated using homomorphic addition probabilistic public key encryption technique T, e.g., T (T m +t device +time_skew c ，S i ). In this example, the presentation time (t m ) Clock skew (t) of client device device ) And a time offset value (time_skew c ) Is the sum of the public key S using aggregation server 180-A i Encryption is performed.
The aggregation server 180-B may also store the three-time encrypted presentation data (expressiondata, as described above with reference to step 312 of process 300 3p ) Decryption and re-encryption are performed. That is, the aggregation server 180-B may decrypt the three-time encrypted conversion data (ImpressionData) using its private key (private key corresponding to the public key Sc) 3p ) To recover twice encrypted presentation data (ImpressionData 2 ). The aggregation server 180-a may then use its selected encryption key Keyc 2 Re-encrypting the twice-encrypted presentation data (ImpressionData 2 ) To obtain three-time encrypted presentation data (ImpressionData 3p )。
The aggregation server 180-B may store the data for each unique three-time encrypted presentation data (ImpressionData 3p ) Determining the display data (ImpressionData) 3p ) Associated unique encrypted blind signature conversion keyIs a number of (3). If the data is associated with three-time encrypted presentation data (ImpressionData 3p ) Associated uniquely encrypted blind signature conversion key +.>The number of tuples satisfies the threshold (e.g., based on the difference privacy thresholding requirement), then aggregation server 180-B sends the tuple { +_, to aggregation server 180-A>ImpressionData 3 ，ImpressionTime 1 }。
Aggregation server 180-A couples and filters encrypted presentation and conversion data received from aggregation server 180-B (614). The aggregation server 180-A may { the tuples received from the aggregation server 180-A Key i )，ImpressionData 3 ，ImpressionTime 1 Use of encrypted blind signing keys with aggregation server 180-aTuple generated in step 610 +.>ConversionData 3p ，ConversionTime 1 And are connected. For each encrypted blind signing key +.>Aggregation server 180-A forms a table including +.>ImpressionData 3p ，ImpressionTime 1 ，ConversionData 3p ，ConversionTime 1 A tuple or row.
Since the application 112 can report multiple presentations for the same digital component, a blind signing key for each encryptionPresentation data (ImpressionData) may occur multiple times 3 ). Aggregation server 180-A may have the same encrypted blind signing key ++for each>And the same three-time encrypted conversion data (convertyingata 3p ) Is the third encrypted presentation data (ImpressionData) 3p ) Using its public key S i Decrypting once encrypted presentation time data (impressatime) 1 ) To obtain unencrypted time data (ImpressionTime) 0 ) Which comprises t' m ＝t m +t device +time_skew c . Aggregation server 180-A is not aware of time_skew c Is a value of (2). If the same device is used, the clock bias of the device (t device ) Is fixed but the aggregation server 180-a is not aware. If cross-device attribution is used, then the clock bias of the device (t device ) Blind signing key for encryption with the same->The different presentations associated may be different because the data may come from multiple devices and is not known to the aggregation server 180-a. At the position of In either case, aggregation server 180-A cannot go from t' m Deducing presentation/click time (t m ) And thus cannot easily initiate a time-based attack to track the user.
The aggregation server 180-a may store the presentation time (impressatime 0 ) Is determined as t m +t device +time_skew c +time_skew i . For the concatenated presentation data (expressiondata 3p ) And conversion data (convertingata) 3p ) The aggregation server 180-a may determine a unique cryptographic blind signing keyWhether the number of (a) meets or exceeds a threshold (e.g., a k-anonymity privacy threshold). If so, aggregation server 180-A may store the tuple { + ->ImpressionData 3p ，ImpressionTime 0 And transmitted to aggregation server 180-B for assembly. In some implementations, the aggregation server 180-a may also use sub-sampling techniques for differential privacy, as described above with reference to process 300.
Aggregation server 180-B also couples and filters encrypted presentation and conversion data received from aggregation server 180-a (616). The aggregation server 180-B may { the tuples received from the aggregation server 180-aConversionData 3 ,ConversionTime 1 Use of encrypted blind signing keys with aggregation server 180-BTuple { { about }, generated in step 612>Key i ),ImpressionData 3 ,ImpressionTime 1 And are connected. Blind signature secret for each encryptionKey->Aggregation server 180-A forms a table including { >ImpressionData 3p ,ImpressionTime 1 ,ConversionData 3p ,ConversionTime 1 A tuple or row.
The aggregation server 180-B may also use its public key S c For blind signing keys with identical encryptionAnd the same three-time encrypted conversion data (convertyingata 3p ) Is a three-time encrypted presentation data (ImpressionData) 3p ) Decrypting one-time encrypted transition time data (convertioime) l ) To obtain unencrypted time data (compression time) 0 ) Which comprises t' m ＝t m +t device +time_skew i 。
The aggregation server 180-B may convert the transition time (convertioime) 0 ) Is determined as z n +t device +time_skew i +time_skew c . For the concatenated presentation data (expressiondata 3p ) And conversion data (convertingata) 3p ) The aggregation server 180-B may determine a uniquely encrypted blind signing keyWhether the number of (a) meets or exceeds a threshold (e.g., a k-anonymity privacy threshold). If so, aggregation server 180-B may send the tuple for the combination { { about }, to aggregation server 180-A>ConversionData 3p ,ConversionTime 0 }. In some implementations, aggregation server 180-B may also use sub-sampling techniques for differential privacy, as described above with reference to the process300.
At this point, both aggregation servers 180-A and 180-B may use the encrypted blind signing keyTo link presentation and conversion data with time to a blind signing key for each unique encryption +. >A record is formed of the form: {/>ImpressionData 3p ,ImpresionTime 0 ,ConversionData 3p ,ConversionTime 0 }。
Aggregation server 180-a generates a chronological order of presentation and conversion (618). Blind signing keys for each unique encryptionThe aggregation server 180-a may compare each presentation data (ImpressionData 3p ) Presentation time (ImpressionTime) 0 ) And each piece of conversion data (convertingata 3p ) Transition time (convertioime) 0 ) Blind signing key with use time as encryption +.>A time-sequential sequence of presentation(s) and conversion(s) is generated.
Aggregation server 180-B generates a chronological order of presentation and conversion (620). Blind signing keys for each unique encryptionThe aggregation server 180-a may compare each presentation data (ImpressionData 3p ) Presentation time (ImpressionTime) 0 ) And each piece of conversion data (convertingata 3p ) Transition time (convertioime) 0 ) In terms of the service timeEncrypted blind signature key->A time-sequential sequence of presentation(s) and conversion(s) is generated.
Due to each unique encrypted blind signing keyCorresponds to a specific digital component and a specific unique Identifier (ID), thus a blind signing key for encryption +.>Including one or more presentations of the digital components to the unique identifiers (e.g., at one or more devices of the user corresponding to the unique identifiers) and one or more transformations resulting from the presentation of the particular digital components. For example, if a particular digital component is presented to the same user multiple times, the sequence may include multiple presentations and the sequence may include multiple conversions of different types (e.g., one for adding items to a virtual shopping cart and one for completing the acquisition of items).
The chronological order enables aggregation servers 180-A and 180-B to independently perform attribution processes to attribution conversions to presentations. For example, in the last click attribution model, aggregation servers 180-A and 180-B may identify a last presentation that includes clicks in the sequence prior to the conversion and attribute the conversion to the last presentation. Aggregation servers 180-A and 180-B may also verify each other's results, for example, by comparing their results with the results of another aggregation server. Although not shown in fig. 6, aggregation servers 180-a and 180-B may work together to decrypt presentation and conversion data as described above with reference to steps 318-332 of fig. 3. Aggregation servers 180-A and 180-B may report attributions along with other data in a conversion report.
Additional steps may be taken to prevent or detect time interval based attacks. Blind signing key for same encryptionThe associated plurality of impressions/clicks, the syndication server 180-A will have t' m Wherein m is an integer. Let t' m From the oldest to the most recent ordering in time order, aggregation server 180-A may calculate a time interval Λ 'between two adjacent impressions, e.g., Λ' m ＝t’ m+1 -t’ m . Let t be device Sufficiently small, then Λ' m ≈Λ m ＝t’ m+1 -t’ m . If the digital component distribution system provides a series of presentations to a user, the digital component distribution system may record the time interval between two adjacent presentations, i.e., Λ m . Based on the above, if the digital component distribution system colludes with aggregation server 180-a, the digital component distribution system may be able to identify individual users based on the time interval. The digital component distribution system may also initiate a similar time interval based attack if the digital component distribution system colludes with aggregation server 180-B.
One option to thwart these time interval based attacks is to use a monotonically increasing function with the following characteristics. Given two arbitrary numbers a and b, the two values a-b and (a) -, (b) are uncorrelated. That is, knowing a-b does not contribute to the prediction, (a) -, (b), and vice versa.
With this function, presentation time data (ImpressionTime 2 ) Defined as PubKeyEncrypt (T (, (T) m +t device ),S i ),S c ). In this example, Λ' m ＝,(t m+1 +t device +skew)-,(t m +t device +skew). Thus, Λ'. m ≠Λ m And the attack is suspended (brooken) on a time interval basis.
Another option to thwart time interval based attacks is to modify the process 600 to include a dedicated time server 192. At the beginning of process 600, aggregation server 180-A receives the data in the form { BlindlySignedKey (ID, report_domain) 3p ,T(t m +t device ,S time ) Presentation data of }. In this example, public key S of time server 192 is used time For presentation/click time t m And clock deviation t of the device device Is encrypted. For example, the application 112 or the client device 110 may use the public key S time To encrypt the time data. Similarly, aggregation server 180-B receives a message in the form { BlindlySignedKey (ID, version_domain, report_domain), conversionData 3p ,T(z n +t device ,S time ) Conversion data of }. In this example, public key S of time server 192 is used time For transition time z n And clock deviation t of the device device Is encrypted. For example, the application 112 or the client device 110 may use the public key S time The time data is encrypted.
In modified step 606, aggregation server 180-A may instead send aggregation server 180-B a message in the form { H (BlindlySignedKey, S ] i ),ImpressionData 3p ,T(t m +t device ,S time ) A tuple. That is, the aggregation server 180-A may use the secret key S i The blind signed key is encrypted and presentation and time data is passed as is.
Similarly, in modified step 608, aggregation server 180-B may instead send aggregation server 180-A a message in the form { H (BlindlySignedKey, S ] c ),ImpressionData 3p ,T(z n +t device ,S time ) A tuple. That is, the aggregation server 180-B may use the secret key S c The blind signed key is encrypted and presentation and time data is passed as is.
In modified step 610, aggregation server 180-A may generate a file in the form { H (BlindlySignedKey), convertingData 3 ,T(z n +t device +time_skew i ,S time ) The tuple is sent to aggregation server 180-B. In this example, the application to conversion data (convertyingata 3p ) The probabilistic encryption is replaced with the probabilistic encryption to create (convertyingata 3 ) Deterministic encryption. In addition, aggregation server 180-A mayAdding random noise to the encrypted presentation time, wherein the noise is derived from H (BlindlySignedKey) and the secret key S i And (5) encrypting the derived data. Similarly, in step 612, the aggregation server 180-B may generate a data stream in the form { H (BlindlySignedKey), impressionData ] 3 ,T(t m +t device +time_skew c ,S time ) The tuple is sent to aggregation server 180-a.
In modified step 614, aggregation server 180-A may join and filter the data set as described above with reference to original step 614 of process 600. Instead of displaying the time (ImpressionTime) 0 ) Is determined as t m +t device +time_skew c +time_skew i The aggregation server 180-a may determine an encrypted presentation time value (ImpressionTime 3_skew ). For example, an encrypted presentation time value (expressiontime 3_skew ) Can be defined as T (T m +t device +time_skew c +time_skew i ,S time ). I.e. encrypted presentation time value (impressatime 3_skew ) Is a public key S using homomorphic addition probabilistic public key encryption technique T and a time server 192 time The sum of the encrypted time values.
For the concatenated presentation data (expressiondata 3 ) And conversion data (convertingata) 3 ) The aggregation server 180-a may determine a unique encrypted blind signing keyWhether the number of (a) meets or exceeds a threshold (e.g., a differential privacy threshold). If so, the aggregation server 180-A may { the tuples }ImpressionData 3 ,ImpressionTime 3_skew And transmitted to aggregation server 180-B for assembly. />
In modified step 616, aggregation server 180-B may join and filter the data set as described above with reference to original step 616 of original process 600. Instead of being toPresentation time (convertioime) 0 ) Is determined as z n +t device +time_skew c +time_skew i The aggregation server 180-B may determine an encrypted transition time value (convertioime) 3_skew ). For example, an encrypted transition time value (convertioime 3_skew ) Can be defined as T (z n +t device +time_skew c +time_skew i ,S time ). That is, the encrypted conversion time value (conversion time 3_skew ) Is a public key S using homomorphic addition probabilistic public key encryption technique T and a time server 192 time The sum of the encrypted time values.
For the concatenated presentation data (expressiondata 3p ) And conversion data (convertingata) 3 ) The aggregation server 180-B may determine a unique encrypted blind signing keyWhether the number of (a) meets or exceeds a threshold (e.g., a differential privacy threshold). If so, aggregation server 180-B may add the tuple { + ->ConversionData 3 ,ConversionTime 3_skew And transmitted to aggregation server 180-a for assembly.
At this point, both aggregation servers 180-A and 180-B may use the encrypted blind signing keyTo link presentation and conversion data with time to a blind signing key for each unique encryption +.>A record is formed of the form: {/>ImpressionData 3 ,ImpresionTime 3_skew ,ConversionData 3 ,ConversionTime 3_skew }。
After the display data (ImpressionData) 3 ) And a plurality of pieces of conversion data (convertingata 3 ) Within each record of the composition, with the same or multiple encrypted blind signing keysIn association, the aggregation server 180-A may send the encrypted time value (Imprestime 3_skew And convertioime 3_skew ) A random or pseudo-random index is assigned. The aggregation server 180-a may send these indices to the time server 192 along with the encrypted time value (but not the blindly signed key or presentation or conversion data). The time server 192 may use the public key S time The corresponding private key decrypts the encrypted time values, sorts the decrypted but triple offset time values, and sends the index back to the aggregation server 180-a in chronological order.
In this way, time server 192 cannot access any user data. The time server 192 may not even have access to the purpose of the triple offset time value or whether the set of triple offset time values is identical to the same encrypted blind signing keyAnd (5) associating. The time server 192 cannot launch time or time interval based attacks without collusion with the aggregation server 180-a.
Aggregation server 180-a may use an index of encrypted time values corresponding to the data to order presentation data, impressionData, for each record 3 ) And conversion data (convertingata) 3 ). With this order, aggregation server 180-A may perform a attribution process to attribute the conversion to the presentation, as described above. Aggregation server 180-B may perform the same process of assigning an index to an encrypted time value and interacting with time server 192 to order data for attribution. When both aggregation servers 180-A and 180-B complete this process, aggregation servers 180-A and 180-B may compare the results.
Data driven attribution
The MPC process described in this document (e.g., process 300 of fig. 3) may be adapted to support Data Driven Attribution (DDA). Data driven attribution attributes user based conversion of actions to digital components, activities, and/or search keywords. For example, the DDA may use the conversion data to calculate the actual contribution of each key in the conversion path that resulted in the conversion. This works by reporting the complete path that meets the aggregation threshold to the reporting system 190 for later processing to apply Mahonia (credit).
FIG. 7 is a flow diagram illustrating an example process 700 for attributing conversion to presentation using data driven attribution. Process 700 may be performed by aggregation servers 180-a and 180-B of fig. 1 and 2.
To track DDA, digital component and/or conversion system 190 can notify application 112 of client device 110 to enable DDA (702). When DDA is enabled, application 112 may modify the definition of the blind signed join key to consider whether the digital component is clicked or otherwise interacted with. For click impressions of digital components, the application 112 may modify the definition of the blind signed impression key (ID, dc_destination) for each impression to be a blinlysignedkey (ID). In this definition, the presentation key of the blind signature is a complex message that includes a one-way cryptographic hash function that maps the complex message (id|click, dc_destination, report_domain) to a hash value and a blind signature (blind_signature) of the presentation key for the blind signature. In the case where the DDA only considers the presentation of clicks (or interactions with them), the clicked parameter will always be true or have a value of one.
Presentation and conversion data is received (704). For example, as described above, aggregation server 180-A may receive presentation data and aggregation server 180-B may receive conversion data, e.g., in batches. When the application 112 reports the presentation as described above, the application 112 may send presentation data M to the aggregation server 180-A i The display data M i Join key (BlindlySignedKey) comprising a blind signature and third encrypted presentation data(ImpressionData 3p ). Similarly, when the application 112 reports the conversion as described above, the application 112 may send the conversion data M to the aggregation server 180-B c The conversion data M c Including a blindly signed join key (BlindlySignedKey) and three-time encrypted conversion data (convertingata 3p ). In this example, the blindly signed key is a modified version that takes into account the parameter click.
A sequence of presentations and transformations is generated (706). Prior to generating the sequence, each aggregation server 180-A and 180-B may join and filter the data, as described above with reference to steps 306-316 of process 300. After the join and filter is complete, each aggregation server has a record of each unique blind signature join key (BlindlySignedKey) associated with a given user in the form of: { ImpressionData 3,1 ,ImpressionData 3,2 ,ImpressionData 3,i …,ConversionData 3 }. In this form, the presentation and conversion(s) may be arranged in time order. Such a chronological sequence of blind signed join keys (blindlysignedkeys) may be referred to as a sequence.
For each unique sequence, aggregation servers 180-A and 180-B determine the number of join keys (BlindlySignedKey) with blind signatures for that unique sequence (708). For example, multiple users may click on the same digital component in the same order before the conversion event. In such cases, the exposed and transformed sequence will have a unique blindly signed join key (BlindlySignedKey) for each user.
The sequence is filtered (710). For example, each aggregation server 180-A and 180-B may filter sequences based on privacy or other thresholding requirements. In a particular example, aggregation servers 180-A and 180-B may filter each sequence of join keys (BlindlySignedKey) from the sequences that do not have at least a threshold number of unique blind signatures. The result is { Occurrence } m ,Sequence m List of } pairs, where m=1, 2,..m.
The presentation and conversion data is decrypted (712). The MPC process of steps 318-328 of process 300 may be used to decrypt the presentation and conversionData. The decryption generation form is { Occurrence } 1 ,ImpressionData 1,1 ,…ImpressionData 1,？ ,ConversionData 1,1 }、{Occurrence 2 ,ImpressionData 1,2 ,…ImpressionData 1,？ ,ConversionData 1,2 A tuple. Each tuple includes its sequence of presentation and conversion data, encrypted once using the public key of the reporting field 190.
The presentation and conversion data is sent to its respective reporting system (714). The reporting system 190 may then apply their DDA technique (e.g., shapley) to the final set of sequences to assign mahonia.
Since DDA is a cross-site report between multiple domains, the number of different sequences that can meet the threshold requirement may be small, especially if: if a large amount of information is encoded in the presentation and/or conversion data, resulting in each presentation data (ImpressionData 3p ) Many different occurrence and transformation data (convertingdata) 3p ) Many different occurrences of (c) are possible. In such cases, differential privacy noise may be added to the number of occurrences of each sequence in the final measurement report to protect user privacy, which may be of low utility to the digital component provider.
By reducing presentation data (ImpressionData 3p ) And/or conversion data (convertingata) 3p ) Or by expanding the reporting window, the utility may be improved while still preserving user privacy. If the order of presentation data is not important, or duplicate presentation data can be ignored, the digital component provider can notify the aggregation servers 180-A and 180-B at the conversion site. In this case, aggregation servers 180-A and 180-B would calculate the number of unique blind signed join keys (BlindlySignedKey) associated with each set (sequence) and apply thresholding and sub-sampling accordingly.
Determining aggregate conversion values
The MPC process described in this document (e.g., process 300 of fig. 3) may be adapted to support reporting of translated values in addition to the number of translations and presentations. For each conversionThe advertiser may append a digital converted value, such as an amount spent on the digital component provider's website. Assume that for a particular presentation and transform pair, there are n transforms with corresponding digital transform values { V } 1 ，V 2 ，…V n }. The number of conversions isTotal conversion value +.>The sum of squares of the converted values is +.>The mean value of the conversion values is +.>And variance is +.>To compare the validity of two activities, it can be assumed that the distribution of conversion values (if conversion occurs) follows a normal distribution, and then compare whether there is a significant difference between the two normal distributions. For this purpose, a second moment variance (A i,2 )。
In order for aggregation servers 180-A and 180-B to securely calculate a conversion value (A 1 ) A switched encryption technique H supporting digital addition may be used. That is, for two arbitrary integer values x and y, H (x+y) =homomorphicdtion (H (x), H (y)). The given reporting system 190 calculates the number of transitions A 0 This is to obtain the total conversion value A 1 And calculates a secure way of averaging the plaintext (in the clear).
FIG. 8 is a flow chart illustrating an example process 800 for determining an aggregate transition value. Process 800 may be performed by aggregation servers 180-a and 180-B of fig. 1 and 2.
Presentation and conversion data is received (802). For example, as described above, aggregation server 180-A may receive presentation data from client devices and aggregation server 180-B may receive presentation data from client devices, e.g., in batchesThe client device receives the conversion data. When the application 112 reports the presentation as described above, the application 112 may send presentation data M to the aggregation server 180-A i The display data M i Including a blindly signed join key (blindlysiginedkey) and three-time encrypted presentation data (ImpressionData 3p )。
Similarly, when the application 112 reports the conversion as described above, the application 112 may send the conversion data M to the aggregation server 180-B c The conversion data M c Including a blindly signed join key (BlindlySignedKey) and three-time encrypted conversion data (convertingata 3p ). In this example, the blindly signed key is a modified version of the considered parameter click. However, in this example, for the conversion, the data M is converted c May also include a conversion value (V) and/or a conversion value square (V 2 ). In general terms, the data M is converted c May include any number of conversion values V 1 ,V 2 ,…V n For example V i As specified. One of V i May be another V j Square of (d).
The application 112 may send the value V i Instead of sending the actual value V i . In some implementations, the conversion system 172 can encrypt the value V with a probabilistic homomorphic addition public key H (e.g., a Pailler encryption system) i Encryption is performed, and H (V i Report_domain) to the application 112. In this example, these values are combined with a report field (report_domain) that will receive the conversion report for the digital component and encrypted using encryption technique H.
The application 112 may receive H (V i Report_domain) and generates one or more of a three-time encrypted conversion value and a three-time encrypted square conversion value. For example, the application 112 may generate PublicKeyEncrypt (H (V) i ,report_domain),S c ,S i ) As a three-time encrypted conversion value. In this example, the encrypted conversion value received from conversion system 172 uses the public key S of aggregation server 180-B c Encryption, and this result uses the public key S of aggregation server 180-A i Encryption. This three-encryption transferThe value change may also be referred to as a convertionValue 3p As the third encryption may be probabilistic.
The blindly signed join key is encrypted (804). For example, as described above with respect to step 306 of process 300, aggregation server 180-A may use the exchange encryption and its selected encryption Key Key i1 To encrypt a blindly signed join key (BlindlySignedKey) in the received presentation data. Aggregation server 180-a may then send a pair of for each presentation to aggregation server 180-B: { H (BlindlySignedKey, key) i1 ),ImpressionData 3p }。
Similarly, aggregation server 180-B may use the exchange encryption and its selected encryption Key as described above with respect to step 308 of process 300 cl To encrypt a blindly signed join key (BlindlySignedKey) in the received transformed data. Aggregation server 180-a may then send the tuple to aggregation server 180-a for each transition: { H (BlindlySignedKey, key) c1 ),ConversionData 3p ,ConversionValue 3p }。
Conversion value (conversion value) 3p ) Decrypted (806). For example, the aggregation server 180-a may decrypt the conversion value (convertyValue using the private key corresponding to the public key Si 3p ). This results in recovery of the code defined by PubKeyEncrypt (H (V i ,report_domain),S c ) Defined twice encrypted conversion value (convertyingata 2 ). Aggregation server 180-B may store the twice encrypted conversion value locally (convertingata 2 )。
The encrypted presentation and conversion data is concatenated and filtered (808). For example, each aggregation server 180-B may join and filter data. In this example, aggregation server 180-A may use blindly signed keysLinkage conversion value (convertivelue) 2 ) Conversion data (conversion data) 3 ) And presentation data (ImpressionData) 3 ) Similar to step 314 of process 300, but with an additional conversion value (convertivelyue 2 ). Aggregation server 180-a may then filter the joined records based on the threshold, similar to step 314 of process 300. For example, aggregation server 180-A may filter from the dataset unique blind signing keys with multiple unsatisfied or exceeded thresholds +.>{ convertyValue } 2 ,ConversionData 3 ,ImpressionData 3 Record of the concatenation of }.
For each remaining joined record, aggregation server 180-A may generate a key/value pair. In this example, the key may be a blind signature key Three-time encrypted presentation data (ImpressionData) 3 ) And three-time encrypted conversion data (convertingata) 3 ) Is used for the cryptographic hash of (a). The value may be a twice encrypted conversion value (convertyValue 2 ). This Key/value pair can be defined as { CrytpoHash (H (Key), impressionData ] 3 ,ConversionData 3 ),ConversionValue 2 }. Aggregation server 180-a may send the key/value pair to aggregation server 180-B.
Aggregation server 180-B may perform the same filtering on its data to generate a dataset comprising tuples { H (Key) remaining after filtering, impressionData 3 ,ConversionData 3 The same set of }. The aggregation server 180-B may perform the same cryptographic hash on the tuple, e.g., crytpoHash (H (Key), impressionData 3 ,ConversionData 3 ) To obtain a key for each tuple. Aggregation server 180-B may concatenate this data with the key/value pair received from aggregation server 180-a by matching the generated key with the key of the key/value pair.
Twice encrypted conversion value (convertyValue 2 ) Decrypted (810). The aggregation server 180-B may decrypt the twice encrypted conversion value (convertionValue) using its private key corresponding to the public key Sc 2 ) To recover one-time encrypted conversion values (ConversionValue 1 ) It is encrypted once using the public key of reporting system 190, as described above. The aggregation server 180-B may convert each one-time encrypted conversion value (convertyValue 1 ) And its Key (CrytpoHash (H (Key), impressionData) 3 ,ConversionData 3 ) To aggregation server 180-a).
A total conversion value is determined 812. Each aggregation server 180-A and 180-B may determine to have the same presentation data (ImpressionData 3 ) And conversion data (convertingata) 3 ) Is included in the total conversion value of each record of (a). I.e. for the expression data 3 And convertyingata 3 The aggregation servers 180-a and 180-B may independently determine the conversion value (convertyvalue 1 ) Is a sum of (a) and (b). Since the converted value is encrypted, the sum can be determined by H (Σv, report_domain).
Presentation and conversion data, including the total conversion values, is sent to a reporting system (814). For example, aggregation servers 180-A and 180-B may decrypt presentation and conversion data using the MPC process described in steps 318-328. Each aggregation server 180-a may then generate and send a report to reporting system 190 for each presentation and conversion, including presentation data (ImpressionData 1 ) Conversion data (conversion data) 1 ) Count of conversion number (count), conversion value (H (Σv), report_domain)) … (H (Σv) n Report_domain)). For example, there may be a plurality of sum values, one being the sum of the converted values and one being the sum of the squares of the converted values, e.g. sum (V 1 ) Sum (V) 2 ) Wherein V is 2 ＝V 1 2 。
Reporting system 190 may compare two reports from two aggregation servers 180-A and 180-B to ensure that they match. If they match, reporting system 190 can verify that the blind signature from fraud detection system 170 and the conversion server are converting data m c And signature thereon. If both signatures are verified, reporting system 190 may decrypt the data in the conversion report to recover { mi||clicked, m using its private key corresponding to its public key used to encrypt the data for each presentation and conversion pair c ,count,∑V…∑V n }. That is, reporting system 190 may recover presentation data (m i ) Whether the digital component is clicked, converting the data (m c ) Count of conversion number (count), total conversion value for each presentation and conversion pair.
Differential privacy
Similar to process 300, sub-sampling may be used in process 800 for differential privacy. In step 808 of process 800, aggregation services 180-A and 180-B may use similar sub-sampling techniques to convert the value ΣV to the total using similar sub-sampling techniques as in steps 314 and 316 of process 300 i Noise is introduced. In addition, aggregation servers 180-A and 180-B may add random noise to each conversion value (H (ΣV), report_domain) before sending the conversion report. For each conversion value (H (Σv), each aggregation server 180-a and 180-B may instead generate (H (noise) k + Σv, report_domain)). Both aggregation servers 180-A and 180-B may generate consistent noise (noise) by initializing a random number generator using a common seed commonly derived by both aggregation servers 180-A and 180-B (e.g., using the Diffie-Hellman protocol) k )。
Additional user privacy protection for cross-device measurements
As described above, when determining presentation and conversion counts across multiple devices and conversion values, the unique Identifier (ID) may be information about the user or based on such information, e.g., a cryptographic hash of the user's email address. Using the above data for presentation (expressiondata 3p ) And conversion data (convertingata) 3p ) The aggregation servers 180-a and 180-B may determine a certain number of transitions for the user, but not the presentation or the transitions themselves, describing probabilistic encryption. However, aggregation servers 180-A and 180-B may detect that the user has some online activity.
FIG. 9 is a flow chart illustrating an example process 900 for determining aggregated conversion data. Process 900 may be performed by aggregation servers 180-a and 180-B.
Presentation and conversion data is received (902). For example, as described above, aggregation server 180-A may receive presentation data from client devices and aggregation server 180-B may receive conversion data from client devices, e.g., in batches.
In this example, for each presentation of the digital component, the presentation data may be { H (CryptoHash (ID), S time ),ImpressionData 3p Form of }. In this example, the encrypted hashes of the unique Identifier (ID), destination (dc_destination), and reporting domain use the addition homomorphic public key encryption technique H and the public key S of the time server 192 time Encryption is performed. Such an encrypted cryptographic hash is used as a presentation join key. The presentation data also includes three-time encrypted presentation data (imassiondata 3p ) Which may be encrypted as described above with reference to fig. 2.
For each conversion of the digital component, the conversion data may be { H (CryptoHash (ID), S time ),ConversionData 3p Form of }. In this example, the encrypted hashes of the unique Identifier (ID), destination (dc_destination), and reporting domain use the addition homomorphic public key encryption technique H and the public key S of the time server 192 time Encryption is performed. Such encrypted cryptographic hashes are used as conversion join keys. The conversion data further includes three-time encrypted conversion data (convertyingata 3p ) Which may be encrypted as described above with reference to fig. 2. Neither the aggregation server 180-a nor 180-B can recover the CryptoHash (ID, dc_destination) nor make H clear (CryptoHash (…)) without collusion with the time server 192 due to the probabilistic nature of the encryption technique H.
A nonce is selected 904. Aggregation servers 180-A and 180-B may each select a nonce before performing the MPC process to decrypt the presentation and conversion data. Aggregation server 180-a may select a temporary number nonce i And the aggregation server 180-B may select a temporary nonce c . Both aggregation servers 180-A and 180-B may keep their respective temporary numbers kept secret.
The join key is encrypted (906). For example, aggregation server 180-A may use the exchange encryption and its selected encryption keysKey i1 To encrypt the join key H (CryptoHash (…)) in the received presentation data as described above with respect to step 306 of process 300. Aggregation server 180-a may then send a pair of for each presentation to aggregation server 180-B: { H (CryptoHash (ID, dc_degradation, report_domain) +nonce) i ,S time ),ImpressionData 3p }。
Similarly, aggregation server 180-B may use the exchange encryption and its selected encryption Key as described above with respect to step 308 of process 300 cl To encrypt the join key H H (CryptoHash (…)) in the received presentation data. Aggregation server 180-B may then send a pair of for each presentation to aggregation server 180-a: { H (CryptoHash (ID, dc_degradation, report_domain) +nonce) c ,S time ),ConversionData 3p }。
An updated join key is generated (908). For each pair of encrypted join key and three-time encrypted conversion data { H (CryptoHash (ID, report_domain) +nonce) i ,S time ),ImpressionData 3p Aggregation server 180-a re-encrypts the join key and the translation data. As described above with reference to step 310 of process 300, aggregation server 180-a may use its private key (the private key corresponding to public key Si) to encrypt three times of transformed data (convertingata 3p ) Decryption is performed to recover the twice encrypted conversion data (convertyingata 2 ). The aggregation server 180-a may then use its selected encryption Key i2 Re-encrypting the twice-encrypted conversion data (convertyingata 2 )。
The aggregation server 180-a may also receive, for each received encrypted join key and three encrypted transformed data H (CryptoHash (ID), report_domain) +nonce c ,S time ) An updated join key is generated. For example, the aggregation server 180-a may generate an updated join key H (CryptoHash (ID, report_domain) +nonce) c +nonce i ,S time ). The aggregation server 180-a may then send a message to the aggregation server 180-B that the message for { H (CryptoHash (ID, dc_destination,report_domain)+nonce c +nonce i ,S time ),ConversionData 3p }。
similarly, as described above with reference to step 312 of process 300, aggregation server 180-B may use its private key (with public key S c The corresponding private key) decrypts the three-time encrypted presentation data (ImpressionData 3p ) To recover twice encrypted presentation data (ImpressionData 2 ). The aggregation server 180-B may then use its selected encryption Key c2 Re-encrypting the twice-encrypted presentation data (ImpressionData 2 )。
The aggregation server 180-B may also receive, for each received encrypted join key and three encrypted presentation data H (CryptoHash (ID), report_domain) +nonce i ,S time ) An updated join key is generated. For example, the aggregation server 180-B may generate an updated join key H (CryptoHash (ID, report_domain) +nonce) i +nonce c ,S time ). Aggregation server 180-B may then send a pair { H (CryptoHash (ID), report_domain) +nonce to aggregation server 180-a i +nonce c ,S time ),ImpressionData 3p }。
A join key is obtained (910). For example, each aggregation server 180-A and 180-B may interact with the time server 192 to obtain a join key for each presentation data and each conversion data. Aggregation server 180-a may send H (dc_destination) for each presentation data and each conversion data (CryptoHash (ID) +nonce) to time server 192 i +nonce c ,S time ). The time server 192 may decrypt and re-encrypt H (CryptoHash (ID), using deterministic symmetric key encryption techniques and encryption keys selected for the current batch process i +nonce c ,S time ). The result of the re-encryption is to display the data (repressiondata 3p ) And corresponding conversion data (convertingata 3p ) A linked key. Aggregation server 180-B may interact with time server 192 in a similar manner to obtainThe same join key.
The presentation and conversion data is decrypted (912). Using the obtained join key, the aggregation servers 180-A and 180-B may execute the remainder of the MPC process to decrypt the presentation and conversion data, as described above in steps 314-328 of the process 300.
The decrypted presentation and conversion data is sent to a reporting system (914). For example, each aggregation server 180-A and 180-B may send a conversion report to the corresponding reporting system, as described above with reference to steps 330 and 332 of process 300.
To provide even more privacy protection, in some embodiments, random or pseudo-random numbers may be used at the unique Identifier (ID). This random or pseudo-random number may be based on a unique Identifier (ID). For example, the random number may be based on HMAC SHA256 (e-mail address, email_provider_private_key). In this example, the random number for the unique Identifier (ID) in the key may be an HMAC that uses the user email address (or other user information) of the private key of the email provider (or other user authorized entity). The email provider (or user authorized entity) may then synchronize the random number of the unique Identifier (ID) to all devices and applications of the user. When reporting presentation and conversion data to aggregation servers 180-A and 180-B, then this random number may be used in place of the unique Identifier (ID).
FIG. 10 is a block diagram of an example computer system 1000 that may be used to perform the operations described above. The system 1000 includes a processor 1010, a memory 1020, a storage device 1030, and an input/output device 1040. Each of the components 1010, 1020, 1030, and 1040 may be interconnected, for example, using a system bus 1050. The processor 1010 is capable of processing instructions for execution within the system 1000. In some implementations, the processor 1010 is a single-threaded processor. In another implementation, the processor 1010 is a multi-threaded processor. The processor 1010 is capable of processing instructions stored in the memory 1020 or on the storage device 1030.
Memory 1020 stores information within system 1000. In one implementation, the memory 1020 is a computer-readable medium. In some implementations, the memory 1020 is a volatile memory unit. In another implementation, the memory 1020 is a non-volatile memory unit.
Storage 1030 is capable of providing mass storage for system 1000. In some implementations, the storage device 1030 is a computer-readable medium. In various different implementations, storage 1030 may include, for example, a hard disk device, an optical disk device, a storage device shared by multiple computing devices (e.g., cloud storage devices) over a network, or some other mass storage device.
Input/output devices 1040 provide input/output operations for system 1000. In some implementations, the input/output device 1040 may include one or more of a network interface device (e.g., an ethernet card), a serial communication device (e.g., an RS-232 port), and/or a wireless interface device (e.g., an 802.11 card). In another implementation, the input/output devices may include a driver device configured to receive input data and transmit output data to external devices 1060 (e.g., keyboards, printers, and display devices). However, other implementations may be used, such as mobile computing devices, mobile communication devices, set-top box television client devices, and the like.
Although an example processing system has been described in FIG. 10, implementations of the subject matter and functional operations described in this specification can be implemented in other types of digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on a computer storage medium (or media) for execution by, or to control the operation of, data processing apparatus. Alternatively or additionally, the program instructions may be encoded on a manually-generated propagated signal (e.g., a machine-generated electrical, optical, or electromagnetic signal) that is generated to encode information for transmission to suitable receiver apparatus for execution by data processing apparatus. The computer storage medium may be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Moreover, although the computer storage medium is not a propagated signal, the computer storage medium may be a source or destination of computer program instructions encoded in an artificially generated propagated signal. Computer storage media may also be, or be included in, one or more separate physical components or media (e.g., a plurality of CDs, discs, or other storage devices).
The operations described in this specification may be implemented as operations performed by a data processing apparatus on data stored on one or more computer readable storage devices or received from other sources.
The term "data processing apparatus" encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or a plurality of each of the foregoing or a combination thereof. The apparatus may comprise a dedicated logic circuit, for example an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit). In addition to hardware, an apparatus may include code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment may implement a variety of different computing model infrastructures, such as web services, distributed computing, and grid computing infrastructures.
A computer program (also known as a program, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. The computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the relevant program, or in multiple coordinated files (e.g., files that store portions of one or more modules, sub-programs, or code). A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.
The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer may be embedded in another device, such as a mobile phone, a Personal Digital Assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable memory device (e.g., a Universal Serial Bus (USB) flash drive), to name a few. Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disk; CD-ROM and DVD-ROM discs. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer. Other types of devices may also be used to provide for interaction with a user; for example, feedback provided to the user may be any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback; and input from the user may be received in any form, including acoustic, speech, or tactile input. Further, the computer may interact with the user by sending and receiving documents to and from the device used by the user; for example, by sending a web page to a web browser on a user's client device in response to a request received from the web browser.
Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front-end component (e.g., a client computer having a graphical user interface or a web browser through which a user can interact with an implementation of the subject matter described in this specification), or any combination of one or more such back-end components, middleware, or front-end components. The components of the system can be interconnected by any form of medium of digital data communication (e.g., a communication network). Examples of communication networks include local area networks ("LANs") and wide area networks ("WANs"), internetworks (e.g., the internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
The computing system may include clients and servers. The client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, the server transmits data (e.g., HTML pages) to the client device (e.g., for the purpose of displaying data to and receiving user input from a user interacting with the client device). Data generated at the client device (e.g., results of the user interaction) may be received at the server from the client device.
While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any invention or of what may be claimed, but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, although operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated in a single software product or packaged into multiple software products.
Thus, particular embodiments of the present subject matter have been described. Other embodiments are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. Furthermore, the processes depicted in the accompanying drawings do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some embodiments, multitasking and parallel processing may be advantageous.
Claims (11)
1. A computer-implemented method, comprising:
receiving, by the first aggregation server and from each of the plurality of client devices, presentation data comprising, for each presentation of the digital component recorded by the client device, (i) a first join key based on a unique identifier associated with the presentation, and (ii) encrypted presentation data for the presentation;
Encrypting, by the first aggregation server, the first join key for each presentation;
providing, by the first aggregation server and to the second aggregation server, each exposed first data tuple, wherein the exposed first data tuple comprises the exposed encrypted first join key and encrypted exposure data;
receiving, by the first aggregation server and from the second aggregation server, each converted second data tuple for which the second aggregation server received encrypted conversion data, wherein the second data tuple for conversion comprises an encrypted second coupling key for conversion and the encrypted conversion data, wherein each encrypted second coupling key is based on a unique identifier associated with the conversion;
for each of the plurality of digital components, determining a presentation count based on a number of encrypted first tuples comprising encrypted presentation data corresponding to a presentation of the digital component; and
for each of the plurality of digital components, a transition count is determined based on a number of encrypted second tuples comprising encrypted transition data corresponding to transitions of the digital component.
2. The method of claim 1, wherein the unique identifier associated with each presentation comprises one of: (i) an identifier of the client device in which the presentation occurred, (ii) an identifier of the user viewing the digital component in the presentation, (iii) an encrypted hash of the user's email address, (iv) an encrypted hash of the user's telephone number, or (v) an encrypted hash of the user's login credentials.
3. The method of claim 1, wherein the unique identifier associated with each conversion comprises one of: (i) an identifier of the client device where the conversion occurred, (ii) an identifier of the user who completed the conversion, (iii) an encrypted hash of the user's email address, (iv) an encrypted hash of the user's phone number, or (v) an encrypted hash of the user's login credentials.
4. The method of any of the preceding claims, further comprising:
identifying pairs of the first data tuple and the second data tuple using the first join key and the second join key, for which pairs the first join key of the first data tuple matches the second join key of the second data tuple; and
for a given pair of first and second data tuples, identifying each other pair for which the encrypted presentation data and the encrypted conversion data of the first and second data tuples match the encrypted presentation data and the encrypted conversion data of the given pair; and
identifying a plurality of unique first join keys across a given pair and each other pair; and
the number of unique join keys is provided as cross-conversion data.
5. The method of claim 4, further comprising, prior to providing the cross-conversion data:
Comparing the number of unique first join keys to a k-anonymity threshold; and
in response to determining that the number of unique first join keys meets a k-anonymity threshold, cross-conversion data is provided to a reporting system.
6. The method of any of the preceding claims, further comprising:
comparing the exposure count of each digital component of the plurality of digital components to a k-anonymity threshold; and
each presentation count that meets the k-anonymity threshold is provided to the reporting system.
7. The method of any of the preceding claims, further comprising:
comparing the transition count of each digital component of the plurality of digital components to a k-anonymity threshold; and
each transition count that meets the k-anonymity threshold is provided to the reporting system.
8. The computer-implemented method of any of the preceding claims, wherein the encrypted conversion data for each conversion comprises a three-time encrypted conversion value that is encrypted first using probabilistic homomorphic addition public key encryption techniques, second encrypted using the public key of the second aggregation server, and third encrypted using the public key of the first aggregation server.
9. One or more computer-readable storage media comprising instructions that, when executed by a computer, cause the computer to perform the method of any of claims 1-8.
10. A computer program comprising instructions which, when executed by a computer, cause the computer to perform the method of any of claims 1 to 8.
11. A system for preventing fraud, the system comprising:
a data processing system having one or more processors and one or more computer-readable storage media as claimed in claim 9, wherein the one or more processors are configured to perform the method of any of claims 1 to 8.
Applications Claiming Priority (4)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
IL272520A IL272520A (en) | 2020-02-06 | 2020-02-06 | Aggregating encrypted network values |
IL272520 | 2020-02-06 | ||
CN202080009404.0A CN113498602B (en) | 2020-02-06 | 2020-12-14 | Computer-implemented method, storage medium, apparatus and system for preventing fraud |
PCT/US2020/064839 WO2021158288A1 (en) | 2020-02-06 | 2020-12-14 | Aggregating encrypted network values |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202080009404.0A Division CN113498602B (en) | 2020-02-06 | 2020-12-14 | Computer-implemented method, storage medium, apparatus and system for preventing fraud |
Publications (1)
Publication Number | Publication Date |
---|---|
CN116938449A true CN116938449A (en) | 2023-10-24 |
Family
ID=77200220
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202080009404.0A Active CN113498602B (en) | 2020-02-06 | 2020-12-14 | Computer-implemented method, storage medium, apparatus and system for preventing fraud |
CN202310919717.5A Pending CN116938449A (en) | 2020-02-06 | 2020-12-14 | Computer-implemented method, storage medium, apparatus and system for preventing fraud |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202080009404.0A Active CN113498602B (en) | 2020-02-06 | 2020-12-14 | Computer-implemented method, storage medium, apparatus and system for preventing fraud |
Country Status (7)
Country | Link |
---|---|
US (1) | US20220376900A1 (en) |
EP (1) | EP3884609A1 (en) |
JP (2) | JP7155437B2 (en) |
KR (2) | KR102582514B1 (en) |
CN (2) | CN113498602B (en) |
IL (1) | IL272520A (en) |
WO (1) | WO2021158288A1 (en) |
Families Citing this family (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
FR3107128B1 (en) * | 2020-02-06 | 2022-01-21 | Cosmian Tech | Method and device for evaluating correspondence of sets of structured data protected by encryption |
US11899823B2 (en) * | 2021-02-08 | 2024-02-13 | Snap Inc. | Privacy safe anonymized identity matching |
CN114221749B (en) * | 2021-12-13 | 2022-08-30 | 成都天府通金融服务股份有限公司 | Multi-type server-based key unified management method and system and electronic equipment |
Family Cites Families (21)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9548861B2 (en) * | 2011-06-10 | 2017-01-17 | Nec Corporation | Encrypted statistical processing system, device, method, and program |
US8978158B2 (en) | 2012-04-27 | 2015-03-10 | Google Inc. | Privacy management across multiple devices |
US9552590B2 (en) | 2012-10-01 | 2017-01-24 | Dstillery, Inc. | Systems, methods, and media for mobile advertising conversion attribution |
US9641332B1 (en) | 2013-01-30 | 2017-05-02 | Google Inc. | Privacy-preserving measurements of a campaign |
CN105474575B (en) | 2013-08-22 | 2018-12-14 | 日本电信电话株式会社 | Secure Verification System, certificate server, intermediate server, Secure authentication method and program |
GB2530726B (en) * | 2014-09-25 | 2016-11-02 | Ibm | Distributed single sign-on |
KR101677803B1 (en) | 2014-09-30 | 2016-11-21 | 한국정보통신주식회사 | Card reader, terminal and method for processing payment information thereof |
US9565020B1 (en) * | 2016-02-02 | 2017-02-07 | International Business Machines Corporation | System and method for generating a server-assisted strong password from a weak secret |
EP3455995B1 (en) * | 2016-05-13 | 2022-03-02 | ABB Schweiz AG | Secure remote aggregation |
US10390220B2 (en) * | 2016-06-02 | 2019-08-20 | The Regents Of The University Of California | Privacy-preserving stream analytics |
US10565524B2 (en) * | 2017-01-31 | 2020-02-18 | Hewlett Packard Enterprise Development Lp | Performing privacy-preserving multi-party analytics on horizontally partitioned local data |
WO2018175262A1 (en) * | 2017-03-21 | 2018-09-27 | Tora Holdings, Inc. | Secure order matching by distributing data and processing across multiple segregated computation nodes |
US10659222B2 (en) * | 2017-04-28 | 2020-05-19 | IronCore Labs, Inc. | Orthogonal access control for groups via multi-hop transform encryption |
US10630655B2 (en) * | 2017-05-18 | 2020-04-21 | Robert Bosch Gmbh | Post-quantum secure private stream aggregation |
US20180373882A1 (en) * | 2017-06-23 | 2018-12-27 | Thijs Veugen | Privacy preserving computation protocol for data analytics |
US11082234B2 (en) * | 2017-07-06 | 2021-08-03 | Robert Bosch Gmbh | Method and system for privacy-preserving social media advertising |
WO2019020830A1 (en) * | 2017-07-28 | 2019-01-31 | Koninklijke Philips N.V. | Evaluation of a monitoring function |
US20200151356A1 (en) * | 2017-08-11 | 2020-05-14 | Duality Technologies, Inc. | System and method for fast and efficient searching of encrypted ciphertexts |
EP3506547A1 (en) * | 2017-12-28 | 2019-07-03 | Flytxt B.V. | Providing security against user collusion in data analytics using random group selection |
CN108965230B (en) * | 2018-05-09 | 2021-10-15 | 深圳市中信网安认证有限公司 | Secure communication method, system and terminal equipment |
US10985904B2 (en) * | 2019-06-18 | 2021-04-20 | International Business Machines Corporation | Compressible (F)HE with applications to PIR |
-
2020
- 2020-02-06 IL IL272520A patent/IL272520A/en unknown
- 2020-12-14 US US17/418,469 patent/US20220376900A1/en active Pending
- 2020-12-14 KR KR1020217020668A patent/KR102582514B1/en active IP Right Grant
- 2020-12-14 CN CN202080009404.0A patent/CN113498602B/en active Active
- 2020-12-14 CN CN202310919717.5A patent/CN116938449A/en active Pending
- 2020-12-14 WO PCT/US2020/064839 patent/WO2021158288A1/en unknown
- 2020-12-14 KR KR1020237032243A patent/KR20230141908A/en not_active Application Discontinuation
- 2020-12-14 JP JP2021540866A patent/JP7155437B2/en active Active
- 2020-12-14 EP EP20838834.8A patent/EP3884609A1/en active Pending
-
2022
- 2022-10-05 JP JP2022161054A patent/JP7401624B2/en active Active
Also Published As
Publication number | Publication date |
---|---|
KR20210102291A (en) | 2021-08-19 |
JP7155437B2 (en) | 2022-10-18 |
CN113498602A (en) | 2021-10-12 |
EP3884609A1 (en) | 2021-09-29 |
JP2022534158A (en) | 2022-07-28 |
WO2021158288A1 (en) | 2021-08-12 |
IL272520A (en) | 2021-08-31 |
US20220376900A1 (en) | 2022-11-24 |
JP2023002596A (en) | 2023-01-10 |
KR102582514B1 (en) | 2023-09-26 |
JP7401624B2 (en) | 2023-12-19 |
CN113498602B (en) | 2023-07-11 |
KR20230141908A (en) | 2023-10-10 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
KR102596445B1 (en) | How to protect your personal information | |
CN113498602B (en) | Computer-implemented method, storage medium, apparatus and system for preventing fraud | |
JP7201848B2 (en) | Generating sequences of network data while preventing acquisition or manipulation of time data | |
JP7399236B2 (en) | Using multiple aggregation servers to prevent data manipulation | |
US20230421544A1 (en) | Preventing fraud in aggregated network measurements | |
JP7098065B1 (en) | Preventing data manipulation and protecting user privacy in telecommunications network measurements |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |