WO2024005824A1 - Deduplication of non-fungible tokens in search index - Google Patents
Deduplication of non-fungible tokens in search index Download PDFInfo
- Publication number
- WO2024005824A1 WO2024005824A1 PCT/US2022/035723 US2022035723W WO2024005824A1 WO 2024005824 A1 WO2024005824 A1 WO 2024005824A1 US 2022035723 W US2022035723 W US 2022035723W WO 2024005824 A1 WO2024005824 A1 WO 2024005824A1
- Authority
- WO
- WIPO (PCT)
- Prior art keywords
- data
- index
- token
- digital resource
- fungible
- Prior art date
Links
- 238000000034 method Methods 0.000 claims abstract description 171
- 230000004044 response Effects 0.000 claims abstract description 10
- 238000010200 validation analysis Methods 0.000 claims description 53
- 238000012545 processing Methods 0.000 claims description 51
- 230000009193 crawling Effects 0.000 claims description 18
- 230000003190 augmentative effect Effects 0.000 claims description 9
- 230000008569 process Effects 0.000 description 45
- 238000010586 diagram Methods 0.000 description 30
- 230000015654 memory Effects 0.000 description 30
- 238000012549 training Methods 0.000 description 19
- 235000006679 Mentha X verticillata Nutrition 0.000 description 16
- 235000002899 Mentha suaveolens Nutrition 0.000 description 16
- 235000001636 Mentha x rotundifolia Nutrition 0.000 description 16
- 238000004891 communication Methods 0.000 description 15
- 230000006870 function Effects 0.000 description 15
- 238000013528 artificial neural network Methods 0.000 description 12
- 238000013145 classification model Methods 0.000 description 10
- 238000013515 script Methods 0.000 description 10
- 230000009471 action Effects 0.000 description 8
- 238000004458 analytical method Methods 0.000 description 8
- 238000001514 detection method Methods 0.000 description 8
- 230000011218 segmentation Effects 0.000 description 7
- 230000008901 benefit Effects 0.000 description 5
- 230000003993 interaction Effects 0.000 description 5
- 238000009877 rendering Methods 0.000 description 5
- 230000000007 visual effect Effects 0.000 description 5
- 230000008859 change Effects 0.000 description 4
- 230000033001 locomotion Effects 0.000 description 4
- 230000004043 responsiveness Effects 0.000 description 4
- 230000004075 alteration Effects 0.000 description 3
- 230000000694 effects Effects 0.000 description 3
- 238000005516 engineering process Methods 0.000 description 3
- 230000000306 recurrent effect Effects 0.000 description 3
- 238000012546 transfer Methods 0.000 description 3
- 235000002767 Daucus carota Nutrition 0.000 description 2
- 244000000626 Daucus carota Species 0.000 description 2
- 238000007792 addition Methods 0.000 description 2
- 238000013527 convolutional neural network Methods 0.000 description 2
- 238000013500 data storage Methods 0.000 description 2
- 238000003709 image segmentation Methods 0.000 description 2
- 230000006872 improvement Effects 0.000 description 2
- 230000004048 modification Effects 0.000 description 2
- 238000012986 modification Methods 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 230000008520 organization Effects 0.000 description 2
- 238000013519 translation Methods 0.000 description 2
- 230000002776 aggregation Effects 0.000 description 1
- 238000004220 aggregation Methods 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 230000000903 blocking effect Effects 0.000 description 1
- 238000007906 compression Methods 0.000 description 1
- 230000006835 compression Effects 0.000 description 1
- 238000004590 computer program Methods 0.000 description 1
- 238000013144 data compression Methods 0.000 description 1
- 238000013479 data entry Methods 0.000 description 1
- 238000013075 data extraction Methods 0.000 description 1
- 238000010191 image analysis Methods 0.000 description 1
- 238000010801 machine learning Methods 0.000 description 1
- 230000007246 mechanism Effects 0.000 description 1
- 230000003340 mental effect Effects 0.000 description 1
- 238000005065 mining Methods 0.000 description 1
- 238000010422 painting Methods 0.000 description 1
- 230000000644 propagated effect Effects 0.000 description 1
- 230000006403 short-term memory Effects 0.000 description 1
- 238000012800 visualization Methods 0.000 description 1
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/951—Indexing; Web crawling techniques
Definitions
- the present disclosure relates generally to identifying duplicate token index data and adjusting an index database based on the identification. More particularly, the present disclosure relates to identifying multiple token index datasets with a same or similar payload and adjusting an index database based on an analysis of the duplicate token index datasets.
- Search engines can receive search queries and provide search results listing web pages determined to be responsive to the search query.
- the search engine may crawl the web to determine web pages that have certain terms.
- the search results can be generally indicated with captions and/or text titles.
- the search results can include text results, video results, and image results.
- searching and identifying non-fungible token search results can be difficult. Searching for non-fungible tokens can be limited to finding general web pages that are associated with the different non-fungible tokens; however, the search engine may be unable to properly identify and verify the non-fungible token search result as a non-fungible token.
- the system can include one or more processors and one or more non-transitory computer- readable media that collectively store instructions that, when executed by the one or more processors, cause the computing system to perform operations.
- the operations can include obtaining blockchain data from a blockchain computing system.
- the operations can include determining the blockchain data includes first token data.
- the first token data can be descriptive of a first non-fungible token associated with a first digital resource.
- the operations can include generating first index data based on the first token data.
- the first index data can be stored in an index database.
- the operations can include obtaining web page data from a digital web platform user interface and determining the web page data includes second token data.
- the second token data can be descriptive of a second non-fungible token associated with a second digital resource.
- the operations can include generating second index data based on the second token data.
- the second index data can be stored in the index database.
- the operations can include determining the first digital resource and the second digital resource are a same digital resource and adjusting the index database based on the first digital resource and the second digital resource being a same digital resource.
- the blockchain computing system can include a distributed computing system including a plurality of computing devices.
- the blockchain data can include embedded code associated with a plurality of non-fungible tokens.
- the operations can include receiving a search request, determining one or more search results based on the index database, and providing the one or more search results for display.
- the one or more search results can include a particular search result associated with the first digital resource.
- adjusting the index database based on the first digital resource and the second digital resource being the same digital resource can include removing the second index data from the index database. Adjusting the index database based on the first digital resource and the second digital resource being the same digital resource can include merging the first index data and the second index data to generate augmented index data.
- adjusting the index database based on the first digital resource and the second digital resource being the same digital resource can include adjusting a first text entry associated with the first index data based on the first digital resource and the second digital resource being the same digital resource.
- Adjusting the index database based on the first digital resource and the second digital resource being the same digital resource can include adjusting a second text entry associated with the second index data based on the first digital resource and the second digital resource being the same digital resource.
- the second index entry can be stored in the index database.
- determining the blockchain data includes first token data can include crawling embedded code.
- the blockchain data can include the embedded code.
- the web page data can include a snapshot of a digital resource listing webpage associated with the second non-fungible token.
- the second digital resource can depict an augmented version of a scene depicted in the first digital resource.
- Another example aspect of the present disclosure is directed to a computer- implemented method. The method can include generating, by a computing system including one or more processors, a plurality of first index entries for an index database based on crawling a blockchain. The method can include generating, by the computing system, a plurality of second index entries for the index database based on crawling a digital web platform.
- the method can include determining, by the computing system, a particular first index entry of the plurality of first index entries is associated with a particular second index entry of the plurality of second index entries.
- the method can include adjusting, by the computing system, the index database in response to determining the particular first index entry is associated with the particular second index entry.
- determining the particular first index entry of the plurality of first index entries is associated with the particular second index entry of the plurality of second index entries can include determining a first payload associated with a first non-fungible token is same as a second payload associated with a second non-fungible token.
- the first non-fungible token can be associated with the particular first index entry
- the second non-fungible token can be associated with the particular second index entry.
- the first payload can include a first digital resource
- the second payload can include a second digital resource
- the first digital resource and the second digital resource can match.
- the first payload can include a first digital resource
- the second payload can include a second digital resource
- the first digital resource and the second digital resource can depict a same scene with differing resolutions.
- the digital web page can include a user interface for providing a plurality of non-fungible tokens for sale.
- Another example aspect of the present disclosure is directed to one or more non- transitory computer-readable media that collectively store instructions that, when executed by one or more computing devices, cause the one or more computing devices to perform operations.
- the operations can include obtaining a particular index entry and a plurality of index entries.
- the plurality of index entries can be obtained from an index database.
- the operations can include processing the particular index entry and the plurality of index entries to generate duplication data.
- the duplication data can be descriptive of whether one or more different index entries of the plurality of index entries are associated with a digital resource associated with the particular index entry.
- the operations can include generating validation data based at least in part on the duplication data.
- the validation data can be associated with an authenticity of a non-fungible token associated with the particular index entry.
- the operations can include providing the validation data as an output.
- the plurality of index entries can include one or more index entries obtained by extracting data from a blockchain.
- the plurality of index entries can include one or more index entries obtained by extracting data from a non-fungible token marketplace.
- generating the validation data based at least in part on the duplication data can include determining the particular index entry is authentic by determining the particular index entry is associated with a first minting of the digital resource.
- the validation data can be based at least in part on a timestamp associated with the particular index entry.
- the validation data can be descriptive of whether the non-fungible token was minted at least one of before another publication of the digital resource.
- Figure 1A depicts a block diagram of an example computing system that performs non-fungible token indexing according to example embodiments of the present disclosure.
- Figure IB depicts a block diagram of an example computing device that performs non-fungible token indexing according to example embodiments of the present disclosure.
- Figure 2 depicts a block diagram of an example token index deduplication according to example embodiments of the present disclosure.
- Figure 3 depicts a block diagram of an example index validity determination according to example embodiments of the present disclosure.
- Figure 4 depicts a block diagram of an example token index deduplication according to example embodiments of the present disclosure.
- Figure 5 depicts a block diagram of an example search results page generation according to example embodiments of the present disclosure.
- Figure 6 depicts a flow chart diagram of an example method to perform non- fungible token index deduplication according to example embodiments of the present disclosure.
- Figure 7 depicts a flow chart diagram of an example method to perform non- fungible token index deduplication according to example embodiments of the present disclosure.
- Figure 8 depicts a flow chart diagram of an example method to perform non- fungible token index validation according to example embodiments of the present disclosure.
- Figure 9A depicts a block diagram of an example computing system that performs non-fungible token indexing according to example embodiments of the present disclosure.
- Figure 9B depicts a block diagram of an example computing device that performs non-fungible token indexing according to example embodiments of the present disclosure.
- Figure 9C depicts a block diagram of an example computing system that performs non-fungible token indexing according to example embodiments of the present disclosure.
- Figure 10 depicts a block diagram of an example indexing system according to example embodiments of the present disclosure.
- Figure 11 depicts a block diagram of an example index dataset according to example embodiments of the present disclosure.
- Figure 12 depicts a block diagram of an example search according to example embodiments of the present disclosure.
- Figure 13A depicts an illustration of an example search results page according to example embodiments of the present disclosure.
- Figure 13B depicts an illustration of an example search results page according to example embodiments of the present disclosure.
- Figure 13C depicts an illustration of an example search results page according to example embodiments of the present disclosure.
- the present disclosure is directed to systems and methods for deduplication of non-fungible token index data in an index database (e.g., a search index).
- an index database e.g., a search index
- the systems and methods disclosed herein can identify that a non-fungible token has been identified twice by comparing non-fungible tokens identified from a leaf page and non-fungible tokens identified by crawling a blockchain.
- a plurality of non- fungible tokens can be identified and indexed based on a plurality of techniques.
- One technique can include analyzing a blockchain to identify data associated with a non-fungible token. The data can then be parsed to determine identifiable data that can be indexed.
- Another technique can include analyzing a non-fungible token leaf page (e.g., a web page associated with a non-fungible token marketplace) to identify non-fungible tokens for sale. Data related to the non-fungible tokens can then be obtained and indexed.
- multiple techniques can be utilized for generating a more encompassing database for search; however, the use of multiple techniques can cause a non-fungible token to be indexed multiple times.
- the systems and methods disclosed herein can compare the identified marketplace non-fungible tokens against the identified blockchain non-fungible tokens to determine if a particular non-fungible token has been indexed multiple times. The comparison can include text processing, image processing, and/or latent encoding processing.
- Metadata, blockchain address data, and/or image data can be compared in order to determine a non-fungible token has been duplicated.
- the data of the two index events may be merged and/or all but one index event for that particular non-fungible token may be deleted.
- the systems and methods can include obtaining blockchain data from a blockchain computing system.
- the systems and methods can determine the blockchain data includes first token data.
- the first token data can be descriptive of a first non-fungible token associated with a first digital resource (e.g., a first digital asset).
- first index data can be generated based on the first token data.
- the first index data can be stored in an index database.
- Web page data can be obtained from a digital web platform user interface (e.g., a digital marketplace user interface).
- the systems and methods can determine the web page data includes second token data.
- the second token data can be descriptive of a second non-fungible token associated with a second digital resource (e.g., a second digital asset). Second index data can be generated based on the second token data.
- the second index data can be stored in the index database.
- the systems and methods can determine the first digital resource (e.g., the first digital asset) and the second digital resource (e.g., the second digital asset) are a same digital resource (e.g., a same digital asset).
- the index database can be adjusted based on the first digital resource (e.g., the first digital asset) and the second digital resource (e.g., the second digital asset) being a same digital resource (e.g., a same digital asset).
- the determination of duplication may be based on other data. For example, matching contract addresses, matching token IDs, and/or matching blockchains.
- the index database can then be adjusted based on the determination.
- a search query can be received.
- a search engine can process the search query and can determine a plurality of search results associated with the search query.
- one or more search results can be associated with non-fungible tokens.
- a particular search result can be associated with the index data.
- the one or more non-fungible token search results can be provided for display in a search results interface (e.g., a search results page).
- the one or more non-fungible token search results can be provided for display in a separate panel.
- the one or more non-fungible token search results can be provided for display adjacent to general search results.
- the one or more non-fungible token search results can be provided with one or more indicators indicating the non-fungible token nature (e.g., provided with one or more labels, flags, and/or tags).
- the one or more non- fungible token search results can be provided with a generated preview of the digital resource based on the index data.
- systems and methods disclosed herein can be utilized for Web3 profiles, for Web3 transactions, and/or for Web3 identification.
- the systems and methods can improve the search user interface and user experience by identifying and indexing relevant data that can be utilized for determining the non-fungible token is responsive to a search query. Additionally and/or alternatively, the index data can be leveraged to determine a ranking for the non-fungible token search result with relation to other search results (e.g., certain index datasets may be ranked higher or lower based on a duplication determination).
- the systems and methods can be utilized to determine if a search result can be provided with a non-fungible token tag and/or can be given a ranking boost based on the association with an authenticated non-fungible token. Additionally and/or alternatively, the systems and methods can improve the quality of the search results by removing and/or hiding lower quality duplicate non-fungible tokens that may be associated with a scam token and/or a diluted token.
- the systems and methods disclosed herein can deduplicate and/or flag duplicate instances of a token being indexed.
- the systems and methods can compare payloads of various tokens and contracts.
- the payloads (e.g., the digital assets) of different tokens can be compared to determine whether two or more tokens share the same payload (e.g., a digital asset with a slight variation (e.g., an image with a different saturation or cropping)).
- the determination can be generated by processing the payloads of different tokens with one or more machine-learned models.
- the determination can include image analysis (e.g., pixel analysis), video analysis, audio analysis, text analysis, and/or latent encoding analysis.
- Digital resources can be determined to be the same resource (e.g., the same asset) by determining the digital resources match and/or are substantially similar (e.g., within a threshold similarity).
- one or more actions can be determined.
- the one or more actions can include flagging in the index data of each associated token to indicate the respective tokens have the same payload.
- the one or more actions can include merging the index data of the tokens, removing the index data of at least one of the tokens, and/or generating data that links the index data of the related tokens.
- the one or more actions can be based at least in part on processing the transactional data of each of the tokens with duplicate payloads.
- the systems and methods can include processing a first transaction dataset and a second transaction dataset to determine whether the first token or the second token is more likely to be authentic (e.g., a valid token that was minted first and/or minted by the creator).
- the systems and methods can include fraud detection techniques, which may include the use of heuristics.
- the systems and methods can analyze the transaction data to determine the token associated with the original digital resource creator (e.g., the original digital asset creator). Alternatively and/or additionally, the systems and methods can process the transaction data to determine the token with the earliest mint date.
- the systems and methods can process the transaction data to determine whether one of the tokens has transactional trends that appear more fraudulent than the other. For example, a set of transactions consistently between two parties for a singular token may be a sign of fraudulent activity, while a chain of transactions between various parties during a trending period for that specific family of digital resources (e.g., that specific family of digital assets) may be viewed as a more authentic chain of transactions.
- the systems and methods may defer to the index data generated based on blockchain data obtained from a blockchain node over index data generated based on web page data (e.g., marketplace data).
- the systems and methods can utilize prior data generated based on other validation analysis to determine the authenticity and/or validation of the present analysis.
- the URL, the URI, and/or the IPFS address of the payload can be processed to determine the valid token. For example, a URL, URI, and/or IPFS address with an invalid address, outdated address, and/or a heavily altered address may be determined to be invalid.
- URLs and/or URIs referencing a questionable website can cause the associated token to be downranked or dropped in the index database.
- different blockchains and/or different web platforms may be prioritized over one another.
- an on-chain source may be prioritized over off- chain source.
- digital resources embedded directly on the blockchain data may be prioritized over digital resources merely referenced on-the-chain.
- Metadata indexed in the index database may be used to determine an authenticity of a particular token.
- the flagging or alert of questionable, or potentially fraudulent, tokens can be utilized to surface warnings when retrieving the questionable tokens (e.g., a warning provided with the search result for the questionable token).
- digital assets may be discussed in detail below, the systems and methods can be implemented for any digital resource (e.g., any digital resource associated with a non-fungible token).
- the systems or methods may flag common, or non-scarce, digital resources (e.g., the same artist may create 100 copies of the same piece of digital art intentionally (e.g., in a “limited series”, etc.).
- the systems and methods can obtain blockchain data from a blockchain computing system.
- the blockchain data can be associated with a particular blockchain and/or from a plurality of blockchains. Additionally and/or alternatively, the blockchain data can be obtained from a blockchain node.
- the blockchain computing system can include a decentralized, distributed computing system that stores data associated with a plurality of non-fungible tokens and a plurality of transactions associated with the non-fungible tokens.
- the blockchain data can be determined to include first token data.
- the first token data can be descriptive of a first non-fungible token associated with a first digital asset.
- the blockchain computing system can include a distributed computing system including a plurality of computing devices.
- the blockchain data can include embedded code associated with a plurality of non-fungible tokens.
- determining the blockchain data includes first token data can include crawling embedded code.
- the blockchain data can include the embedded code.
- the blockchain data can be processed to identify one or more code characteristics indicative of a non-fungible token (e.g., EIP compliant structure).
- the blockchain data can be parsed into segments that can be individually processed to determine if the segment includes non-fungible token data.
- First index data can be generated based on the first token data.
- the first index data can be stored in an index database.
- the first token data can include data descriptive of the payload (e.g., the digital asset associated with the non-fungible token).
- the first token data can include data descriptive of the non-fungible token’s creator/publisher, description of the digital asset, mint time, transaction data associated with the non-fungible token, the particular blockchain associated with the non-fungible token, a digital asset type, a determined likelihood of fraudulence score, and/or one or more determined tags.
- Web page data can be obtained from a digital web platform user interface (e.g., a digital marketplace user interface).
- the web page data can include a snapshot of a digital resource listing webpage associated with the second non-fungible token.
- the digital web platform user interface e.g., the digital marketplace user interface
- a leaf page can be obtained from a website associated with non-fungible tokens. The leaf page can be processed to generate the web page data.
- the web page data can be determined to include second token data.
- the second token data can be descriptive of a second non-fungible token associated with a second digital asset.
- the second token data can include reference data associated with the second digital asset.
- the second digital asset can depict an augmented version of a scene depicted in the first digital asset.
- Second index data can be generated based on the second token data.
- the second index data can be stored in the index database.
- the second index data can include data descriptive of the non-fungible token’s creator/publisher, description of the digital asset, mint time, transaction data associated with the non-fungible token, the particular blockchain associated with the non-fungible token, a digital asset type, a determined likelihood of fraudulence score, and/or one or more determined tags.
- the first digital asset and the second digital asset can be determined to be a same digital asset.
- the determination can be based on determining the first digital asset of the first non-fungible token and determining the second digital asset of the second non-fungible token.
- the first digital asset and the second digital asset can be compared to determine similar and/overlapping data.
- the determination can include image processing, text processing, audio processing, video processing, and/or latent encoding processing.
- the determination can include processing the first digital asset and the second digital asset with one or more machine-learned models (e.g., an image classification model, an audio classification model, a video classification model, an object detection model, a feature extractor model, and/or one or more recognition models).
- the index database can be adjusted based on the first digital asset and the second digital asset being a same digital asset.
- the particular type of adjustment may be based on the transaction data of the non-fungible tokens, the source of the token data, and/or a variety of other factors.
- adjusting the index database based on the first digital asset and the second digital asset being the same digital asset can include removing the second index data from the index database.
- adjusting the index database based on the first digital asset and the second digital asset being the same digital asset can include merging the first index data and the second index data to generate augmented index data.
- adjusting the index database based on the first digital asset and the second digital asset being the same digital asset can include adjusting a first text entry associated with the first index data based on the first digital asset and the second digital asset being the same digital asset.
- adjusting the index database based on the first digital asset and the second digital asset being the same digital asset can include adjusting a second text entry associated with the second index data based on the first digital asset and the second digital asset being the same digital asset.
- the second index entry can be stored in the index database.
- the systems and methods can include receiving a search request.
- the search request can be received from a user computing system.
- the search request can include one or more search terms, one or more input images, and/or one or more other forms of input data.
- One or more search results can be determined based on the index database.
- the one or more search results can be determined based on responsiveness to the search request. Additionally and/or alternatively, the one or more search results can be determined based on context data (e.g., a user computing system context, a global context, and/or a non-fungible token context.
- context data e.g., a user computing system context, a global context, and/or a non-fungible token context.
- the one or more search results can then be provided for display.
- the one or more search results can include a particular search result associated with the first digital asset.
- the one or more search results can be provided for display with one or more labels (e.g., a non-fungible token label, scam website label, questionable transactions label, a validation label, and/or a duplicate non-fungible token label).
- the systems and methods can generate a plurality of first index entries for an index database based on crawling a blockchain.
- the systems and methods can generate a plurality of second index entries for the index database based on crawling a digital web platform (e.g., a digital marketplace).
- a particular first index entry of the plurality of first index entries can be determined to be associated with a particular second index entry of the plurality of second index entries.
- the index database can be adjusted.
- the systems and methods can generate a plurality of first index entries for an index database based on crawling a blockchain.
- the plurality of first index entries can include a plurality of first index datasets associated with a plurality of first non-fungible tokens.
- the systems and methods can generate a plurality of second index entries for the index database based on crawling a digital web platform (e.g., a digital marketplace).
- the digital web platform can include a user interface for providing a plurality of non-fungible tokens for sale.
- the plurality of second index entries can include a plurality of second index datasets associated with a plurality of second non- fungible tokens.
- a particular first index entry of the plurality of first index entries can be determined to be associated with a particular second index entry of the plurality of second index entries.
- the determination can include comparing each of the plurality of first index entries with each of the plurality of second index entries.
- the comparison can include obtaining a plurality of first digital assets associated with the plurality of first index entries. Additionally and/or alternatively, the comparison can include obtaining a plurality of second digital assets associated with the plurality of second index entries.
- Each of the plurality of first digital assets can be compared to each of the plurality of second digital assets.
- the comparison can include processing the digital assets with one or more machine-learned models to determine if and/or which digital assets are the same (e.g., the digital assets match and/or are within a threshold similarity).
- the first payload can include a first digital asset.
- the second payload can include a second digital asset.
- the first digital asset and the second digital asset can match and/or be similar.
- determining the particular first index entry of the plurality of first index entries is associated with the particular second index entry of the plurality of second index entries can include determining a first payload associated with a first non-fungible token is same as a second payload associated with a second non-fungible token.
- the first non-fungible token can be associated with the particular first index entry.
- the second non-fungible token can be associated with the particular second index entry.
- the index database can be adjusted. Adjusting the index database can include merging index entries, removing index entries, and/or adding tags to each of the index entries determined to be duplicative.
- the systems and methods can include obtaining a particular index entry and a plurality of index entries.
- the plurality of index entries can be obtained from an index database.
- the particular index entry and the plurality of index entries can be processed to generate duplication data.
- the duplication data can be descriptive of whether one or more different index entries of the plurality of index entries are associated with a digital asset associated with the particular index entry.
- Validation data can be generated based at least in part on the duplication data.
- the validation data can be associated with an authenticity of a non-fungible token associated with the particular index entry.
- the validation data can be provided as an output.
- the systems and methods can include obtaining a particular index entry and a plurality of index entries.
- the plurality of index entries can be obtained from an index database.
- the plurality of index entries can include one or more index entries obtained by extracting data from a blockchain.
- the plurality of index entries can include one or more index entries obtained by extracting data from a non-fungible token marketplace.
- the particular index entry and the plurality of index entries can be processed to generate duplication data.
- the duplication data can be descriptive of whether one or more different index entries of the plurality of index entries are associated with a digital asset associated with the particular index entry.
- Validation data can be generated based at least in part on the duplication data.
- the validation data can be associated with an authenticity of a non-fungible token associated with the particular index entry.
- the validation data can be based at least in part on a timestamp associated with the particular index entry.
- the validation data can be descriptive of whether the non-fungible token was minted before another publication of the digital asset.
- generating the validation data based at least in part on the duplication data can include determining the particular index entry is authentic by determining the particular index entry is associated with a first minting of the digital asset. The determination can be based on transaction data, mint times, publication times, particular blockchains, source of token data, the payload URI data, and/or digital asset quality.
- the validation may be generated with one or more machine-learned models.
- the validation data can be provided as an output.
- the validation data can be provided via one or more user-interface elements (e.g., banners, pop-ups, user-interface labels, and/or user-interface annotations).
- the validation data can be provided for display adjacent to a preview of the digital asset.
- the systems and methods of the present disclosure provide a number of technical effects and benefits.
- the system and methods can provide systems and methods for indexing data associated with one or more non-fungible tokens.
- the systems and methods disclosed herein can generate index data based on identified token data, which can then be utilized for a plurality of different tasks (e.g., search, trend determination, and/or catalog generation).
- Another technical benefit of the systems and methods of the present disclosure is the ability to leverage generated validation data, or authentication data, to inform users of non-fungible tokens with potentially fraudulent data.
- the systems and methods disclosed herein can process a plurality of index datasets to identify duplicate token index data, which can then be analyzed to determine whether a particular token has fraudulent characteristics which can then be provided to the user for informed interactions.
- the identification of fraudulent characteristics may allow the system to take the step of removing or blocking the addition of a duplicate or fraudulent token from being included on the index.
- Another example of technical effect and benefit relates to improved computational efficiency and improvements in the functioning of a computing system.
- the systems and methods disclosed herein can leverage the deduplication to greatly reduce the computational power needed to search and surface non-fungible token data. Additionally, the systems and methods disclosed herein can reduce the computational power utilized for managing and storing the index database.
- Figure 1 A depicts a block diagram of an example computing system 100 that performs index deduplication according to example embodiments of the present disclosure.
- the system 100 includes a user computing system 130, a server computing system 110, a creator computing system 150, and a blockchain computing system 170 that are communicatively coupled over a network 180.
- the user computing system 130 can be any type of computing device, such as, for example, a personal computing device (e.g., laptop or desktop), a mobile computing device (e.g., smartphone or tablet), a gaming console or controller, a wearable computing device, an embedded computing device, or any other type of computing device.
- a personal computing device e.g., laptop or desktop
- a mobile computing device e.g., smartphone or tablet
- a gaming console or controller e.g., a gaming console or controller
- a wearable computing device e.g., an embedded computing device, or any other type of computing device.
- the user computing system 130 includes one or more processors 132 and a memory 134.
- the one or more processors 132 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 134 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 134 can store data 136 and instructions 138 which are executed by the processor 132 to cause the user computing system 130 to perform operations.
- the user computing system 130 can also include one or more user input components that receive user input.
- the user input component can be a touch- sensitive component (e.g., a touch-sensitive display screen or a touch pad) that is sensitive to the touch of a user input object (e.g., a finger or a stylus).
- the touch-sensitive component can serve to implement a virtual keyboard.
- Other example user input components include a microphone, a traditional keyboard, or other means by which a user can provide user input.
- the server computing system 110 includes one or more processors 112 and a memory 114.
- the one or more processors 112 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 114 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 114 can store data 118 and instructions 116 which are executed by the processor 112 to cause the server computing system 110 to perform operations.
- the server computing system 110 includes or is otherwise implemented by one or more server computing devices. In instances in which the server computing system 110 includes plural server computing devices, such server computing devices can operate according to sequential computing architectures, parallel computing architectures, or some combination thereof.
- the blockchain computing system 170 includes one or more processors and a memory.
- the one or more processors can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory can store data and instructions which are executed by the processor to cause the blockchain computing system 170 to perform operations.
- the blockchain computing system 170 includes or is otherwise implemented by one or more server computing devices.
- the network 180 can be any type of communications network, such as a local area network (e.g., intranet), wide area network (e.g., Internet), or some combination thereof and can include any number of wired or wireless links. In general, communication over the network 180 can be carried via any type of wired and/or wireless connection, using a wide variety of communication protocols (e.g., TCP/IP, HTTP, SMTP, FTP), encodings or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL).
- the computing system 100 can include a number of applications (e.g., applications 1 through N). Each application can be in communication with a central intelligence layer.
- Example applications can include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc.
- each application can communicate with the central intelligence layer (and model(s) stored therein) using an API (e.g., a common API across all applications).
- the central intelligence layer can communicate with a central device data layer.
- the central device data layer can be a centralized repository of data for the computing system 100.
- the central device data layer can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components.
- the central device data layer can communicate with each device component using an API (e.g., a private API).
- Figure 1A depicts an exemplary computing system 100 that can be used to implement index adjustment (e.g., index deduplication) according to aspects of the present disclosure.
- the system 100 has a user-server architecture that includes a server 110 that communicates with one or more user computing systems 130 over a network 180.
- the present disclosure can be implemented using other suitable architectures, which can include any number of computing systems communicating over a network 180.
- the system 100 includes a server 110, such as, for example, a web server.
- the server 110 can be one or more computing devices that are implemented as a parallel computing system and/or a distributed computing system. In particular, multiple computing devices can act together as a single server 110.
- the server 110 can have one or more processor(s) 112 and a memory 114.
- the server 110 can also include a network interface used to communicate with one or more remote computing devices (e.g., user devices) 130 over a network 180.
- the processor(s) 112 can be any suitable processing device, such as a microprocessor, microcontroller, integrated circuit, or other suitable processing device.
- the memory 114 can include any suitable computing system or media, including, but not limited to, non-transitory computer-readable media, RAM, ROM, hard drives, flash drives, or other memory devices.
- the memory 114 can store information accessible by processor(s) 112, including instructions 116 that can be executed by processor(s) 112.
- the instructions 116 can be any set of instructions that when executed by the processor(s) 112, cause the processor(s) 112 to provide desired functionality.
- the instructions 116 can be executed by the processor(s) 112 to implement index adjustment (e.g., index deduplication).
- the user profile database 120 can be configured to store a plurality of user profiles associated with a plurality of users utilizing one or more user computing systems 130.
- the user profile database 120 can be configured to be utilized for facilitating one or more interactions.
- the facilitation of the one or more interactions can involve the use of a blockchain application programming interface (API) 122 to send data to and receive data from a blockchain computing system 170.
- API application programming interface
- a server computing system 110 can utilize the blockchain API 122 to update one or more ledgers 172 of the blockchain computing system 170.
- the one or more ledgers 172 can be associated with one or more tokens 174.
- the one or more tokens 174 can include one or more non-fungible tokens, which can include scripts associated with a digital asset (e.g., image data, video data, text data, latent encoding data, domain data, audio data, augmented-reality asset rendering data, and/or virtual-reality asset rendering data).
- the script can reference a specific digital asset that is provided for sale.
- the digital asset can include image data, text data, video data, latent encoding data, a domain name, a virtual property, an augmented-reality asset, a virtual-reality asset (e.g., a virtual-reality environment and/or a virtual-reality object for interaction in an environment), a smart contract, a physical item authentication, etc.
- the one or more ledgers 172 can be associated with cryptocurrency that can be utilized to make transactions in a physical marketplace and/or a virtual marketplace.
- element can refer to computer logic utilized to provide desired functionality.
- any element, function, and/or instructions can be implemented in hardware, application specific circuits, firmware and/or software controlling a general purpose processor.
- the elements or functions are program code files stored on the storage device, loaded into memory and executed by a processor or can be provided from computer program products, for example computer executable instructions, that are stored in a tangible computer-readable storage medium such as RAM, hard disk or optical or magnetic media.
- Memory 114 can also include data 118 that can be retrieved, manipulated, created, or stored by processor(s) 112.
- the data 118 can include search result data, ranking data, image data (e.g., digital maps, satellite images, aerial photographs, street-level photographs, synthetic models, paintings, personal images, portraits, etc.), video data, audio data, text data (e.g., books, articles, blogs, poems, etc.), latent encoding data, blockchain address data, tables, vector data (e.g., vector representations of roads, parcels, buildings, etc.), point of interest data (e.g., locales such as islands, cities, restaurants, hospitals, parks, hotels, and schools), or other data or related information.
- the data 118 can be used to access information and data associated with a specific digital asset, website, search result, blockchain, etc.
- the data 118 can be stored in one or more databases.
- the one or more databases can be connected to the server 110 by a high bandwidth LAN or WAN, or can also be connected to server 110 through network 180.
- the one or more databases can be split up so that they are located in multiple locales.
- the server 110 can exchange data with one or more user computing systems 130 over the network 180. Although two user computing systems 130 are illustrated in Figure 1A, any number of user computing systems 130 can be connected to the server 110 over the network 180.
- the user computing systems 130 can be any suitable type of computing device, such as a general purpose computer, special purpose computer, navigational device, laptop, desktop, integrated circuit, mobile device, smartphone, tablet, wearable-computing devices, a display with one or more processors coupled thereto and/or embedded therein, or other suitable computing device. Further, the user computing system 130 can be multiple computing devices acting together to perform operations or computing actions.
- a user computing system 130 can include a processor(s) 132 and a memory 134.
- the memory 134 can store information accessible by processor(s) 132, including instructions that can be executed by processor(s) and data.
- memory 134 can store data 136 and instructions 138.
- Instructions 138 can provide instructions for implementing a browser, a non- fungible token purchase, and/or a plurality of other functions.
- the user of user computing system 130 can exchange data with server 110 by using the browser to visit a website accessible at a particular web-address.
- the index adjustment of the present disclosure can be provided as an element of a user interface of a website and/or application.
- the data 136 can include data related to running a specialized application on the user computing system 130.
- the specialized application can be used to exchange data with server 110 over the network 160.
- the data 136 can include user-device-readable code for providing and implementing aspects of the present disclosure. Additionally and/or alternatively, the data 136 can include data related to previously inputted or received data. For example, the data 136 can include data related to past occurrences of the special application.
- the user computing system 130 can include various user input devices for receiving information from a user, such as a touch screen, touch pad, data entry keys, speakers, mouse, motion sensor, and/or a microphone suitable for voice recognition. Further, the user computing system 130 can have a display for presenting information, such as a user interface, displaying a digital asset, displaying pop-ups or application elements displayed in an interface, and/or other forms of information.
- the user computing system 130 can also include a user profile 140 that can be used to identify a user of the user computing system 130.
- the user profile 140 can be optionally used by the user to make one or more transactions which can then be recorded on one or more ledgers 172 of the blockchain computing system 170.
- the user profile 140 can be descriptive of user information, which can include identification numbers and/or payment account information.
- the user profile 140 can include data associated with a crypto wallet, which may be linked to a browser application via an application extension and/or embedding.
- the user computing system 130 can further include a graphics processing unit. Graphics processing unit can be used by processor 132 to index adjustment. In some embodiments, the user computing system 130 performs any and all index adjustment.
- the user computing system 130 can include a network interface for communicating with a server 110 over a network 180.
- Network interface can include any components or configuration suitable for communication with server 110 over network 180, including, for example, one or more ports, transmitters, wireless cards, controllers, physical layer components, or other items for communication according to any currently known or future developed communications protocol or technology.
- the network 180 can be any type of communications network, such as a local area network (e.g., intranet), wide area network (e.g., Internet), or some combination thereof.
- the network 180 can also include a direct connection between a client device 130 and the server 110.
- communication between the server 110 and a client device 130 can be carried via network interface using any type of wired and/or wireless connection, using a variety of communication protocols (e.g., TCP/IP, HTTP), encodings or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL).
- the exemplary computing system 100 can include one or more creator computing systems 150.
- the one or more creator computing systems 150 can be utilized for generating images, videos, prose, poetry, audio, etc., which can then be provided for sale.
- the one or more creator computing systems 150 can include one or more processors 152, which can be utilized to execute one or more operations to implement the systems and methods disclosed herein.
- the one or more creator computing systems 150 can include one or more memory components 154, which can be utilized to store data 156 and one or more instructions 158.
- the data 156 can include data related to one or more applications, one or more media datasets, etc.
- the instructions 158 can include one or more operations for implementing the systems and methods disclosed herein.
- the one or more creator computing systems 150 can store data associated with one or more digital assets 160 and/or one or more creator profiles 162.
- the one or more digital assets 160 can include text data, image data, video data, audio data, latent encoding data, domain data, or a variety of other data formats.
- the one or more creator profiles 162 can include information associated with one or more “creators” of the one or more digital assets 160.
- the one or more creator profiles 162 can include identification data, transaction data, and/or crypto wallet data.
- the exemplary computing system 100 can include one or more blockchain computing systems 170.
- the one or more blockchain computing systems 170 can include a plurality of computing devices being utilized for decentralized data storage, such that a plurality of “blocks” can be distributed throughout a network of computing devices to provide a secure system for data storage, which can include one or more ledgers 172 and one or more tokens 174.
- each of the one or more tokens 174 can be associated with at least a portion of the one or more ledgers 172.
- Blockchain can refer to a system configured to securely record information.
- the blockchain can include a decentralized system that can render changing information extremely difficult.
- the blockchain can include a digital ledger of transactions that can be duplicated and distributed across a network of computing systems. Each block in the chain can include a number of transactions. When a new transaction occurs on the blockchain, a record of that transaction can be added to every computing device’s ledger.
- the blockchain can be utilized to track the exchange of currency and/or digital assets via the recording of transactions on the digital ledger, which can be propagated throughout the decentralized system.
- the currency exchanged and tracked via the blockchain computing system 170 can be referred to as cryptocurrency.
- the tokens 174 can include one or more non-fungible tokens.
- the non-fungible tokens can be minted on a blockchain associated with the blockchain computing system 170.
- a non-fungible token can be a certificate of authenticity of a digital asset. NFTs can be non-interchangeable thus making their worth depend on the price anyone may be willing to pay for the asset. NFTs can be printed on blockchains such that their scarcity and authenticity can be maintained.
- a digital asset can be defined as anything that is stored digitally and can be uniquely identifiable that organizations can use to realize value. Examples of digital assets can include a tweet, a social media comment, documents, audio, images, videos, logos, website domains, slide presentations, spreadsheets, CSS files and formats, executable code, and/or websites.
- FIG. IB depicts a block diagram of an example blockchain 50 that may be utilized by the blockchain computing system 170 of the exemplary computing system 100 of Figure 1 A.
- the example blockchain 50 can include a plurality of blocks that can be utilized to store data with one or more cryptographic features.
- the blockchain 50 can be stored on a decentralized computing system comprising a plurality of computing devices.
- the blockchain 50 can be a public blockchain (e.g., a blockchain that is open without access restrictions such that anyone with an internet access can send transactions or validate transactions as part of the decentralized, distributed system), a private blockchain (e.g., a blockchain that provides access based on permissions set by network administrators), or a hybrid blockchain (e.g., a blockchain with a combination of blocks with no restrictions and blocks with restrictions).
- the blockchain 50 can include proof of work features that can include one or more cryptographic forms of proof.
- the proof of work can be provided upon a request to update the blockchain 50 (e.g., a request to update the ledgers based on a new transaction).
- the proof of work can convey that a certain device or group of devices have performed a certain amount of computation, which can then be validated by other parties.
- the blockchain 50 can be updated, or may remain unchanged in response to a failure to validate.
- the proof of work feature can be utilized to mitigate the computational cost of every device in the system having to perform the same computational functions and checks for determining a request is valid for updating the blockchain 50.
- Each block can include a hash, a previous hash associated with the hash of the previous block, and data.
- each block can include a nonce.
- a hash can be a hash value of a fixed length that can be a fingerprint for the particular block. The hash value can be generated based on a hash function and may be changed each time a change is made to the data of that particular block.
- the previous hash can include a hash value of the block immediately preceding the particular block. The previous hash can be utilized to ensure the downstream ground truth stays unchanged unless proper validation occurs.
- the data can include transaction data (e.g., a transaction ledger), a timestamp, a value associated with a cryptocurrency value, anon-fungible token (e.g., anon-fungible token including a script that references a digital asset, nonce data, and/or general blockchain data.
- Nonce i. e. , a number only used once
- the nonce can be a number that blockchain miners are solving for, in order to receive an incentive (e.g., cryptocurrency).
- the blockchain 50 can include one or more security protocols and/or features.
- the blockchain 50 can include a cryptographic system.
- the blockchain 50 can validate the blockchain 50 is valid by ensuring the stored previous hash stored in the block matches the hash value of the previous block from the last block back to the first block (e.g., the genesis block).
- the blockchain 50 can include proof of work validation that can rely on verifying proof of computation before implementing a change to the stored data (e.g., the stored ledger). Proof of work validation can take seconds, minutes, and/or hours based in part on the number of blocks in the blockchain 50.
- the blockchain 50 can be implemented on a distributed, decentralized computing system.
- each computing device in the distributed, decentralized computing system can store a portion of (e.g., a block of the plurality of blocks) or all of the blocks in the blockchain 50. Therefore, the system can verify data by ensuring the data is uniform across most, if not all, of the distributed system. Each node of the distributed system can be checked for tampering before adding new data.
- the data can include data associated with a cryptocurrency value (e.g., a ledger associated with a specific cryptocurrency value), data associated with a digital asset (e.g., a non-fungible token minted on the blockchain 50 that can include a script associated with the digital asset), data associated with a smart contract (e.g., a smart contract that includes conditions that automatically initiates an action in response to a criteria being met), and/or timestamp data (e.g., timestamp data for block creation, minting, a transaction, etc.).
- a cryptocurrency value e.g., a ledger associated with a specific cryptocurrency value
- data associated with a digital asset e.g., a non-fungible token minted on the blockchain 50 that can include a script associated with the digital asset
- data associated with a smart contract e.g., a smart contract that includes conditions that automatically initiates an action in response to a criteria being met
- timestamp data e.g., timestamp data for block creation, mint
- Figure IB depicts a first block 10, a second block 20, a third block 30, a fourth block 40, and an nth block 60. Although five blocks are depicted, any number of blocks can be utilized.
- the first block 10 can be a genesis block (e.g., a first overall block in the blockchain).
- the first block 10 can include a respective first hash 12 (e.g., a hash value associated with the first block 10).
- the first block 10 may include a first previous hash 14 (e.g., if the first block 10 has a block before it in the blockchain 50, then the hash of the previous block can be stored on the first block 10). Additionally and/or alternatively, the first block 10 can include data 16 and nonce 18.
- the second block 20 can follow the first block 10.
- the second block 20 can include a respective second hash 22 (e.g., a hash value associated with the second block 20).
- the second block 20 may include a second previous hash 24 (e.g., the second previous hash 24 can be the same as, or reference, the first hash 12). Additionally and/or alternatively, the second block 20 can include data 26 and nonce 28.
- the third block 30 can follow the second block 20.
- the third block 30 can include a respective third hash 32 (e.g., a hash value associated with the third block 30).
- the third block 30 may include a third previous hash 34 (e.g., the third previous hash 34 can be the same as, or reference, the second hash 22). Additionally and/or alternatively, the third block 30 can include data 36 and nonce 38.
- the fourth block 40, the nth block 60, and other potential blocks can include a respective hash, a respective previous hash, and data.
- the first data 16, the second data 26, the third data 36, and the data of the other blocks can include overlapping data, can differ, and/or be the same such that the data is duplicative for all blocks.
- each block can be associated with a different transaction (e.g., a different minting, a different sale, etc.).
- the first nonce 18, the second nonce 28, the third nonce 38, and the nonce’s of the other blocks can differ and may be solved during mining.
- the data in each block can include ledger data, which can include a timestamp, asset and/or cryptocurrency exchanged, actors involved in transaction, and/or a variety of other information.
- a plurality of different blockchains can be utilized for the systems and methods disclosed herein.
- the different blockchains can include different configurations.
- the different blockchains can include parallel chains, side chains, shared blocks, differing chains, varying permissions, varying purposes, varying number of blocks, and/or varying hash functions and/or varying hashing value lengths.
- the systems and methods can include one or more machine-learned model computing systems 900.
- the one or more machine-learned models can be utilized for a variety of tasks for enabling token data identification, indexing, and deduplication.
- FIG. 9A depicts a block diagram of an example computing system 900 that performs token data identification, indexing, and deduplication according to example embodiments of the present disclosure.
- the system 900 includes a user computing device 902, a server computing system 930, and a training computing system 950 that are communicatively coupled over a network 980.
- the user computing device 902 can be any type of computing device, such as, for example, a personal computing device (e.g., laptop or desktop), a mobile computing device (e.g., smartphone or tablet), a gaming console or controller, a wearable computing device, an embedded computing device, or any other type of computing device.
- a personal computing device e.g., laptop or desktop
- a mobile computing device e.g., smartphone or tablet
- a gaming console or controller e.g., a gaming console or controller
- a wearable computing device e.g., an embedded computing device, or any other type of computing device.
- the user computing device 902 includes one or more processors 912 and a memory 914.
- the one or more processors 912 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 914 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 914 can store data 916 and instructions 918 which are executed by the processor 912 to cause the user computing device 902 to perform operations.
- the user computing device 902 can store or include one or more token indexing models 920.
- the token indexing models 920 can be or can otherwise include various machine-learned models such as neural networks (e.g., deep neural networks) or other types of machine-learned models, including non-linear models and/or linear models.
- Neural networks can include feed-forward neural networks, recurrent neural networks (e.g., long short-term memory recurrent neural networks), convolutional neural networks or other forms of neural networks.
- Example token indexing models 920 are discussed with reference to Figures 3 & 11.
- the one or more token indexing models 920 can be received from the server computing system 930 over network 980, stored in the user computing device memory 914, and then used or otherwise implemented by the one or more processors 912.
- the user computing device 902 can implement multiple parallel instances of a single token indexing model 920 (e.g., to perform parallel token data indexing across multiple instances of token data descriptive of a non-fungible token).
- the token indexing model can include one or more detection models, one or more segmentation models, one or more classification models, and/or one or more feature extractor models.
- the token indexing model can process blockchain data and/or web page data to generate index data descriptive of index information associated with one or more respective non-fungible tokens.
- one or more token indexing models 940 can be included in or otherwise stored and implemented by the server computing system 930 that communicates with the user computing device 902 according to a client-server relationship.
- the token indexing models 940 can be implemented by the server computing system 940 as a portion of a web service (e.g., a token indexing service).
- a web service e.g., a token indexing service
- one or more models 920 can be stored and implemented at the user computing device 902 and/or one or more models 940 can be stored and implemented at the server computing system 930.
- the user computing device 902 can also include one or more user input components 922 that receive user input.
- the user input component 922 can be a touch-sensitive component (e.g., a touch-sensitive display screen or a touch pad) that is sensitive to the touch of a user input object (e.g., a finger or a stylus).
- the touch-sensitive component can serve to implement a virtual keyboard.
- Other example user input components include a microphone, a traditional keyboard, or other means by which a user can provide user input.
- the server computing system 930 includes one or more processors 932 and a memory 934.
- the one or more processors 932 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 934 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 934 can store data 936 and instructions 938 which are executed by the processor 932 to cause the server computing system 930 to perform operations.
- the server computing system 930 includes or is otherwise implemented by one or more server computing devices. In instances in which the server computing system 930 includes plural server computing devices, such server computing devices can operate according to sequential computing architectures, parallel computing architectures, or some combination thereof.
- the server computing system 930 can store or otherwise include one or more machine-learned token indexing models 940.
- the models 940 can be or can otherwise include various machine-learned models.
- Example machine- learned models include neural networks or other multi-layer non-linear models.
- Example neural networks include feed forward neural networks, deep neural networks, recurrent neural networks, and convolutional neural networks.
- Example models 940 are discussed with reference to Figures 3 & 11.
- the user computing device 902 and/or the server computing system 930 can train the models 920 and/or 940 via interaction with the training computing system 950 that is communicatively coupled over the network 980.
- the training computing system 950 can be separate from the server computing system 930 or can be a portion of the server computing system 930.
- the training computing system 950 includes one or more processors 952 and a memory 954.
- the one or more processors 952 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 954 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 954 can store data 956 and instructions 958 which are executed by the processor 952 to cause the training computing system 950 to perform operations.
- the training computing system 950 includes or is otherwise implemented by one or more server computing devices.
- the training computing system 950 can include a model trainer 960 that trains the machine-learned models 920 and/or 940 stored at the user computing device 902 and/or the server computing system 930 using various training or learning techniques, such as, for example, backwards propagation of errors.
- a loss function can be backpropagated through the model(s) to update one or more parameters of the model(s) (e.g., based on a gradient of the loss function).
- Various loss functions can be used such as mean squared error, likelihood loss, cross entropy loss, hinge loss, and/or various other loss functions.
- Gradient descent techniques can be used to iteratively update the parameters over a number of training iterations.
- performing backwards propagation of errors can include performing truncated backpropagation through time.
- the model trainer 960 can perform a number of generalization techniques (e.g., weight decays, dropouts, etc.) to improve the generalization capability of the models being trained.
- the model trainer 960 can train the token indexing models 920 and/or 940 based on a set of training data 962.
- the training data 962 can include, for example, training blockchain data, training web page data, training transaction data, ground truth labels, ground truth index information, and/or ground truth segmentation masks.
- the training examples can be provided by the user computing device 902.
- the model 920 provided to the user computing device 902 can be trained by the training computing system 950 on user-specific data received from the user computing device 902. In some instances, this process can be referred to as personalizing the model.
- the model trainer 960 includes computer logic utilized to provide desired functionality.
- the model trainer 960 can be implemented in hardware, firmware, and/or software controlling a general purpose processor.
- the model trainer 960 includes program files stored on a storage device, loaded into a memory and executed by one or more processors.
- the model trainer 960 includes one or more sets of computer-executable instructions that are stored in a tangible computer-readable storage medium such as RAM hard disk or optical or magnetic media.
- the network 980 can be any type of communications network, such as a local area network (e.g., intranet), wide area network (e.g., Internet), or some combination thereof and can include any number of wired or wireless links.
- communication over the network 980 can be carried via any type of wired and/or wireless connection, using a wide variety of communication protocols (e.g., TCP/IP, HTTP, SMTP, FTP), encodings or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL).
- TCP/IP Transmission Control Protocol/IP
- HTTP HyperText Transfer Protocol
- SMTP Simple Stream Transfer Protocol
- FTP e.g., HTTP, HTTP, HTTP, HTTP, FTP
- encodings or formats e.g., HTML, XML
- protection schemes e.g., VPN, secure HTTP, SSL
- the machine-learned models described in this specification may be used in a variety of tasks, applications, and/or use cases.
- the input to the machine-learned model(s) of the present disclosure can be image data.
- the machine-learned model(s) can process the image data to generate an output.
- the machine-learned model(s) can process the image data to generate an image recognition output (e.g., a recognition of the image data, a latent embedding of the image data, an encoded representation of the image data, a hash of the image data, etc.).
- the machine-learned model(s) can process the image data to generate an image segmentation output.
- the machine- learned model(s) can process the image data to generate an image classification output.
- the machine-learned model(s) can process the image data to generate an image data modification output (e.g., an alteration of the image data, etc.).
- the machine-learned model(s) can process the image data to generate an encoded image data output (e.g., an encoded and/or compressed representation of the image data, etc.).
- the machine-learned model(s) can process the image data to generate a prediction output.
- the input to the machine-learned model(s) of the present disclosure can be text or natural language data.
- the machine-learned model(s) can process the text or natural language data to generate an output.
- the machine- learned model(s) can process the natural language data to generate a language encoding output.
- the machine-learned model(s) can process the text or natural language data to generate a latent text embedding output.
- the machine- learned model(s) can process the text or natural language data to generate a classification output.
- the machine-learned model(s) can process the text or natural language data to generate a textual segmentation output.
- the machine- learned model(s) can process the text or natural language data to generate a semantic intent output.
- the machine-learned model(s) can process the text or natural language data to generate an upscaled text or natural language output (e.g., text or natural language data that is higher quality than the input text or natural language, etc.).
- the machine-learned model(s) can process the text or natural language data to generate a prediction output.
- the input to the machine-learned model(s) of the present disclosure can be speech data.
- the machine-learned model(s) can process the speech data to generate an output.
- the machine-learned model(s) can process the speech data to generate a speech recognition output.
- the machine- learned model(s) can process the speech data to generate a speech translation output.
- the machine-learned model(s) can process the speech data to generate a latent embedding output.
- the machine-learned model(s) can process the speech data to generate an encoded speech output (e.g., an encoded and/or compressed representation of the speech data, etc.).
- an encoded speech output e.g., an encoded and/or compressed representation of the speech data, etc.
- the machine-learned model(s) can process the speech data to generate a textual representation output (e.g., a textual representation of the input speech data, etc.).
- the machine-learned model(s) can process the speech data to generate a prediction output.
- the input to the machine-learned model(s) of the present disclosure can be latent encoding data (e.g., a latent space representation of an input, etc.).
- the machine-learned model(s) can process the latent encoding data to generate an output.
- the machine-learned model(s) can process the latent encoding data to generate a recognition output.
- the machine-learned model(s) can process the latent encoding data to generate a reconstruction output.
- the machine-learned model(s) can process the latent encoding data to generate a search output.
- the machine-learned model(s) can process the latent encoding data to generate a reclustering output.
- the machine-learned model(s) can process the latent encoding data to generate a prediction output.
- the input to the machine-learned model(s) of the present disclosure can be statistical data.
- the machine-learned model(s) can process the statistical data to generate an output.
- the machine-learned model(s) can process the statistical data to generate a recognition output.
- the machine- learned model(s) can process the statistical data to generate a prediction output.
- the machine-learned model(s) can process the statistical data to generate a classification output.
- the machine-learned model(s) can process the statistical data to generate a segmentation output.
- the machine-learned model(s) can process the statistical data to generate a segmentation output.
- the machine-learned model(s) can process the statistical data to generate a visualization output.
- the machine-learned model(s) can process the statistical data to generate a diagnostic output.
- the machine-learned model(s) can be configured to perform a task that includes encoding input data for reliable and/or efficient transmission or storage (and/or corresponding decoding).
- the task may be audio compression task.
- the input may include audio data and the output may comprise compressed audio data.
- the input includes visual data (e.g., one or more images or videos), the output comprises compressed visual data, and the task is a visual data compression task.
- the task may comprise generating an embedding for input data (e.g., input audio or visual data).
- the input includes visual data
- the task is a computer vision task.
- the input includes pixel data for one or more images and the task is an image processing task.
- the image processing task can be image classification, where the output is a set of scores, each score corresponding to a different object class and representing the likelihood that the one or more images depict an object belonging to the object class.
- the image processing task may be object detection, where the image processing output identifies one or more regions in the one or more images and, for each region, a likelihood that region depicts an object of interest.
- the image processing task can be image segmentation, where the image processing output defines, for each pixel in the one or more images, a respective likelihood for each category in a predetermined set of categories.
- the set of categories can be foreground and background.
- the set of categories can be object classes.
- the image processing task can be depth estimation, where the image processing output defines, for each pixel in the one or more images, a respective depth value.
- the image processing task can be motion estimation, where the network input includes multiple images, and the image processing output defines, for each pixel of one of the input images, a motion of the scene depicted at the pixel between the images in the network input.
- the input includes audio data representing a spoken utterance and the task is a speech recognition task.
- the output may comprise a text output which is mapped to the spoken utterance.
- the task comprises encrypting or decrypting input data.
- the task comprises a microprocessor performance task, such as branch prediction or memory address translation.
- Figure 9A illustrates one example computing system that can be used to implement the present disclosure.
- the user computing device 902 can include the model trainer 960 and the training dataset 962.
- the models 920 can be both trained and used locally at the user computing device 902.
- the user computing device 902 can implement the model trainer 960 to personalize the models 920 based on user-specific data.
- Figure 9B depicts a block diagram of an example computing device 970 that performs according to example embodiments of the present disclosure.
- the computing device 970 can be a user computing device or a server computing device.
- the computing device 970 includes a number of applications (e.g., applications 1 through N). Each application contains its own machine learning library and machine-learned model(s). For example, each application can include a machine-learned model.
- Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc.
- each application can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components.
- each application can communicate with each device component using an API (e.g., a public API).
- the API used by each application is specific to that application.
- Figure 9C depicts a block diagram of an example computing device 990 that performs according to example embodiments of the present disclosure.
- the computing device 990 can be a user computing device or a server computing device.
- the computing device 990 includes a number of applications (e.g., applications 1 through N). Each application is in communication with a central intelligence layer.
- Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc.
- each application can communicate with the central intelligence layer (and model(s) stored therein) using an API (e.g., a common API across all applications).
- the central intelligence layer includes a number of machine-learned models. For example, as illustrated in Figure 9C, a respective machine-learned model (e.g., a model) can be provided for each application and managed by the central intelligence layer. In other implementations, two or more applications can share a single machine-learned model. For example, in some implementations, the central intelligence layer can provide a single model (e.g., a single model) for all of the applications. In some implementations, the central intelligence layer is included within or otherwise implemented by an operating system of the computing device 990.
- a respective machine-learned model e.g., a model
- two or more applications can share a single machine-learned model.
- the central intelligence layer can provide a single model (e.g., a single model) for all of the applications.
- the central intelligence layer is included within or otherwise implemented by an operating system of the computing device 990.
- the central intelligence layer can communicate with a central device data layer.
- the central device data layer can be a centralized repository of data for the computing device 990. As illustrated in Figure 9C, the central device data layer can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components. In some implementations, the central device data layer can communicate with each device component using an API (e.g., a private API).
- an API e.g., a private API
- Figure 2 depicts a block diagram of an example token index deduplication 1000 according to example embodiments of the present disclosure.
- the example token index deduplication 1000 can be configured to receive a plurality of index datasets 1002 descriptive of token data for a plurality of non-fungible tokens and, as a result of receipt of the plurality of index datasets 1002, provide an updated index database 1014 that is adjusted based on the determined duplication.
- the token index deduplication 1000 can include duplicate determination block 1004 that is operable to determine which index datasets are associated with one another.
- Figure 2 depicts a plurality of index datasets 1002 being processed to determine a plurality of duplicate index datasets.
- the plurality of index datasets 1002 can be processed with a duplicate determination block 1004 to determine plurality of duplicates including a first duplicate 1006, a second duplicate 1008, and an nth duplicate 1010.
- the determination can be based on digital resources (e.g., digital assets) of different identified tokens being the same (e.g., match and/or within a threshold similarity).
- the plurality of duplicates e.g., the first duplicate 1006, the second duplicate 1008, and/or the nth duplicate 1010) can be processed with an authenticity determination block 1012 to generate validation data.
- the validation data can include a determined authenticity of each of the duplicate index datasets.
- the authenticity can include analyzing the source of the data, the mint date, the quality of the associated digital resource, and/or the publisher.
- the validation data can be utilized to adjust an index database to generate the updated index database 1014. Adjusting the index database can include removing a particular index dataset. For example, the index dataset generated based on the data obtained directly from the blockchain may be kept while the index dataset generated based on the data obtained from a web page may be removed. Alternatively and/or additionally, the index dataset determined to be fraudulent may be removed (e.g., the non-fungible token data may be obtained from or reference to a scam website).
- adjusting the index database can include merging the duplicate index datasets.
- adjusting the index database can include adding data to the existing index datasets. The added data can include references to the other duplicates, one or more tags indicating the duplicate nature, and/or one or more weights associated with the determined authenticity.
- Figure 3 depicts a block diagram of an example index validity determination 1100 according to example embodiments of the present disclosure.
- the index validity determination 1100 of Figure 3 includes duplication data 1102 that can be processed to generate validation data 1122.
- the duplication data 1102 can be descriptive of one or more index datasets associated with one or more non-fungible tokens.
- the duplication data 1102 can be descriptive of two or more indexed non-fungible tokens being the same (e.g., match or substantially similar).
- a first index dataset can be descriptive of a first non- fungible token associated with a first digital resource (e.g., a first digital asset that is a payload for the first non-fungible token).
- a second index dataset can be descriptive of a second non-fungible token associated with a second digital resource (e.g., a second digital asset that is a payload for the second non-fungible token).
- the first non-fungible token and the second non-fungible token can be the same non-fungible token which was indexed twice due to data being obtained from multiple sources that contain data associated with the non-fungible token.
- the first non- fungible token and the second non-fungible token can differ, and the first digital resource and the second digital resource may be the same (e.g., the digital assets may match and/or may include similar data with slight differences (e.g., the same scene being depicted with differing resolution and/or differing color saturation)).
- the duplication data 1102 can be processed 1110 to generate validation data 1122. Processing 1110 the duplication data 1102 can include obtaining and processing transaction data 1112 associated with each of the duplicate index datasets. The transaction data 1112 can be processed to determine whether any of the duplicates are associated with fraudulent transactions and/or fraudulent transactional trends. In some implementations, the transaction data 1112 can be processed to determine the more trendy and/or popular duplicate. Additionally and/or alternatively, the transaction data 1112 can be processed to determine different actors in the transactions that may be indicative of a non-fungible token’s validity. Price data may also be derived from the transaction data 1112 and can be utilized for index data validity. In some implementations, the price data can be obtained from a web page (e.g., a marketplace).
- a web page e.g., a marketplace
- source data 1114, URL and/or URI data 1116, and/or mint date data 1120 may be processed to determine a validity of each of the duplicates.
- the source data 1114 can be processed to determine which duplicates are derived from data of a trustworthy source.
- index data generated based on data directly obtained from a blockchain can be prioritized over index data generated based on data from an untrustworthy website (e.g., a website flagged as spam by one or more spam filters).
- the URL and/or URI data 1116 referencing the digital resource e.g., the digital asset
- the duplicate may be viewed as invalid. If the address has been changed, the validity may be put in question. Upscaling and movement can be a positive factor if the digital resource has not experienced a change that changes the nature of the digital resource. Additionally and/or alternatively, the mint date data 1120 can be utilized to determine which duplicate was published first, which can provide insight on possible non-fungible token validity. [0165] In some implementations, one or more other fraud detection 1118 techniques may be utilized to generate the validation data 1122.
- the validation data 1122 can include data descriptive of a determined validity (and/or authenticity) of each of the respective duplicate index datasets.
- the validation data 1122 can include one or more tags, labels, and/or annotations descriptive of determined factors that are descriptive of an index dataset validity.
- FIG. 4 depicts a block diagram of an example token index deduplication 1200 according to example embodiments of the present disclosure.
- the example token index deduplication 1200 can be configured to receive a plurality of index datasets 1202 descriptive of token data for a plurality of non-fungible tokens and, as a result of receipt of the plurality of index datasets 1202, provide an updated index database 1214 that is adjusted based on the determined duplication.
- the token index deduplication 1200 can include duplicate determination block 1204 that is operable to determine which index datasets are associated with one another.
- Figure 4 depicts a plurality of index datasets 1202 being processed to determine a plurality of duplicate index datasets.
- the plurality of index datasets 1202 can be processed with a duplicate determination block 1204 to determine plurality of duplicates including a first duplicate 1206, a second duplicate 1208, and an nth duplicate 1210.
- the determination can be based on digital resources of different identified tokens being the same (e.g., match and/or within a threshold similarity).
- the plurality of duplicates (e.g., the first duplicate 1206, the second duplicate 1208, and/or the nth duplicate 1210) can be processed with an authenticity determination block 1212 to generate validation data.
- the validation data can include a determined authenticity of each of the duplicate index datasets.
- the authenticity can include analyzing the source of the data, the mint date, the quality of the associated digital resource, and/or the publisher.
- the validation data can be utilized to adjust an index database to generate the updated index database. Adjusting the index database can include keeping 1214 one or more of the duplicate index datasets, merging 1216 one or more of the duplicate index datasets, and/or removing 1218 one or more of the duplicate datasets.
- One or more of the duplicate index datasets can be kept 1214 in order to ensure at least one of the non-fungible tokens associated with a particular digital resource is maintained for search purposes.
- the particular index dataset that is kept 1214 can be determined based on the source of the data, a determined authenticity (or validity), transaction data of one or more of the duplicates, the hosting location of the digital resource, the quality of the digital resource, the mint time, and/or metadata for the one or more duplicates.
- adjusting the index database can include merging 1216 the duplicate index datasets.
- certain duplicate index datasets can be selected for merging 1216.
- Merging 1216 the duplicate index datasets can include adding any non-duplicative data to one of the duplicate datasets and deleting the other duplicate index dataset.
- an index dataset generated based on data obtained directly from a blockchain can be complemented with data from an index dataset generated based on a web page, which can include descriptions of the digital resource, the author, and/or other data not stored directly on the blockchain.
- adjusting the index database can include adding data to the existing index datasets. The added data can include references to the other duplicates, one or more tags indicating the duplicate nature, and/or one or more weights associated with the determined authenticity.
- Adjusting the index database can include removing 1218 a particular index dataset.
- the index dataset generated based on the data obtained directly from the blockchain may be kept 1214 while the index dataset generated based on the data obtained from a web page may be removed 1218.
- the index dataset determined to be fraudulent may be removed 1218 (e.g., the non-fungible token data may be obtained from or reference to a scam website).
- Figure 5 depicts a block diagram of an example search results page generation 1300 according to example embodiments of the present disclosure.
- the systems and methods can receive a search query 1302.
- the search query 1302 can include one or more search terms, one or more input images, and/or one or more other inputs.
- the search query 1302 can be received from a user computing system associated with a user.
- the search query 1302 can be processed by a search engine to determine a plurality of search results 1304.
- the plurality of search results can be determined based on a determined responsiveness to the search query 1302.
- the plurality of search results can be processed by a ranking block 1306 to determine an order of display for the plurality of search results.
- the plurality of search results can be processed to determine whether to provide a warning or badge 1308 with one or more of the search results. For example, if one or more of the search results are non-fungible token search results, a badge indicating the type of search result may be provided. Additionally and/or alternatively, validation data associated with each of the respective non-fungible token search results may be provided via a warning or via a badge. In some implementations, a warning may be provided if a search result is indicative of a duplicate non-fungible token.
- the plurality of search results can be ranked by the ranking block 1306 based on a determined relevance, determined authenticity, and/or a determined context of each of the plurality of search results.
- a search results page 1310 can then be generated and provided based on the ranked search results and the determined warnings and badges.
- Figure 10 depicts a block diagram of an example indexing system 200 according to example embodiments of the present disclosure.
- the indexing system 200 is configured to receive blockchain data 202 descriptive of a blockchain that stores data associated with a plurality of non-fungible tokens and, as a result of receipt of the input data 202, provide output data 220 that is descriptive of a plurality of index datasets associated with the plurality of non-fungible tokens.
- the indexing system 200 can include one or more models and/or one or more functions for identifying token data and extracting relevant information for generating index data.
- the example indexing system 200 can include obtaining blockchain data 202 associated with a blockchain.
- the blockchain data 202 can include code for the blockchain.
- the blockchain data 202 can include script data (e.g., data descriptive of script that can be deployed to interact with smart contract code of the blockchain data 202) associated with a plurality of non-fungible tokens.
- the blockchain data 202 can be processed to identify first token data for a first non-fungible token 204, second token data for a second non-fungible token 206, third token data for a third non-fungible token 208, and nth token data for a nth non-fungible token 210. Identifying the token data sets can involve parsing the blockchain data and determining if each parsed segment is associated with one or more non-fungible token characteristics. Alternatively and/or additionally, identifying the token data can include crawling the blockchain data to search for particular characteristics, structure, and/or features associated with token data.
- the first token data associated with the first non-fungible token 204 can be processed to generate first index data 212 associated with the first non-fungible token 204.
- the second token data associated with the second non-fungible token 206 can be processed to generate second index data 214 associated with the second non-fungible token 206.
- the third token data associated with the third non-fungible token 208 can be processed to generate third index data 216 associated with the third non-fungible token 208.
- the nth token data associated with the nth non-fungible token 210 can be processed to generate nth index data 218associated with the nth non-fungible token 210.
- the first index data 212, the second index data 214, the third index data 216, and the nth index data 218 can be stored in an index database 220, which can then be utilized for various tasks (e.g., non-fungible token search).
- the index datasets can include index information associated with a plurality of index item fields.
- the index datasets can include a title of the non-fungible token, a reference to the digital resource payload, descriptors, and/or a variety of other index items for annotating and/or characterizing aspects of the non-fungible token which may be searched.
- index data 310 can be generated based on blockchain data and/or web page data 326.
- the blockchain data can be processed to identify a subset of the blockchain data that is descriptive of token data 302.
- the token data 302 can be processed to determine one or more index items for the index data 310 generation.
- web page data 326 associated with the same or related non-fungible token to the non-fungible token associated with the token data 302 can be utilized to determine one or more additional index items for one or more index item fields.
- the token data 302 and/or the web page data 326 can be processed with one or more machine-learned models 324 to generate one or more outputs that can be utilized as index items for the index data 310.
- the input data for the one or more machine-learned models 324 can be obtained from other data sources.
- the index data 310 can include data descriptive of the blockchain 312 the non-fungible token is minted on.
- the index data 310 can include a reference 314 to the digital resource (e.g., a URI), time data 316 (e.g., a minting time, a first digital resource publication times, and/or a time difference between the two times), transaction data 318 (e.g., purchase times, amount of acquisitions, frequency of acquisitions, identities of purchasers and bidders, and/or auction event data), metadata 320 (e.g., stored by the blockchain, marketplace, and/or another data source), other machine- learned data 322, and/or other derived data.
- a reference 314 to the digital resource e.g., a URI
- time data 316 e.g., a minting time, a first digital resource publication times, and/or a time difference between the two times
- transaction data 318 e.g., purchase times, amount of acquisitions, frequency of acquisitions, identities of purchasers and bidders, and/or auction event data
- metadata 320 e.g., stored by the blockchain,
- FIG. 12 depicts a block diagram of an example search 400 according to example embodiments of the present disclosure.
- the example search 400 can include receiving a search query 402.
- the search query 402 can include one or more words, one or more images, and/or one or more other forms of input.
- the search query 402 can be processed by a search engine 404 which can then access a non-fungible token index database 406 to determine one or more non-fungible token search results 410 responsive to the search query 402.
- the search query 402 can be processed by the search engine 404 which can then access a web database 408 to determine one or more general web results 412 responsive to the search query 402.
- the one or more non-fungible token search results 410 and/or the one or more general web results 412 can be utilized to generate a search results page 414.
- the search results page 414 can then be provided for display.
- Figures 13A - 13C depict different example search result page configurations. Although three configurations are depicted, other variations may be utilized to provide search results for display.
- the different variations depicted can include a search interface 502, which can include a search query input box 504, one or more non-fungible token search results (e.g., a first non-fungible token search result 510, a second non-fungible token search result 512, a third non-fungible token search result 514, and/or a fourth non-fungible token search result 516), one or more general web results (e.g., a first general web result 520, a second general web result 522, a third general web result 524, and/or a fourth general web result 526), and/or a knowledge panel 506.
- a search interface 502 can include a search query input box 504, one or more non-fungible token search results (e.g., a first non-fungible token search result 510, a second non-fungible token search result
- the search query input box 504 can be configured to receive and/or display one or more search queries.
- the one or more non-fungible token search results and the one or more general web results can be determined and provided based on a determined responsiveness to an input search query.
- the knowledge panel 506 can include structured data associated with a topic determined to be responsive to an input query.
- FIG. 13A depicts an illustration of an example search results page 500 according to example embodiments of the present disclosure.
- the example search results page 500 includes the search query input box 504 displayed at the top of the search interface 502 with a knowledge panel 506 displayed in a side panel of the search interface 502. Additionally, the example search results page 500 includes a non-fungible token search results portion, which displays the one or more non-fungible token search results (e.g., a first non-fungible token search result 510, a second non-fungible token search result 512, a third non-fungible token search result 514, and/or a fourth non-fungible token search result 516).
- a first non-fungible token search result 510 e.g., a first non-fungible token search result 510, a second non-fungible token search result 512, a third non-fungible token search result 514, and/or a fourth non-fungible token search result 516.
- the example search results page 500 can include a separate general web results portion, which can display the one or more general web results (e.g., a first general web result 520, a second general web result 522, a third general web result 524, and/or a fourth general web result 526). Additionally and/or alternatively, the one or more non-fungible token search results and the one or more general web results can be provided in different formats (e.g., the non-fungible token search results can be provided with image thumbnails while the general web results can be displayed with only text).
- Figure 13B depicts an illustration of an example search results page 540 according to example embodiments of the present disclosure.
- the example search results page 540 includes the search query input box 504 displayed at the top of the search interface 502 with a knowledge panel 506 displayed in a side panel of the search interface 502.
- the example search results page 540 can include the one or more non-fungible token search results (e.g., a first non-fungible token search result 510, a second non-fungible token search result 512, a third non-fungible token search result 514, and/or a fourth non-fungible token search result 516) and the one or more general web results (e.g., a first general web result 520, a second general web result 522, a third general web result 524, and/or a fourth general web result 526) can be displayed in an intermingled format, such that the different types of search results may be adjacent to one another.
- the order may be determined based on a determined score based on a responsiveness to a search query and/or based on other factors. The ordering may be based purely on score without preference to the type of result.
- FIG. 13C depicts an illustration of an example search results page 580 according to example embodiments of the present disclosure.
- the example search results page 580 can include both the one or more non-fungible token search results (e.g., a first non- fungible token search result 510, a second non-fungible token search result 512, a third non- fungible token search result 514, and/or a fourth non-fungible token search result 516) and the one or more general web results (e.g., a first general web result 520, a second general web result 522, a third general web result 524, and/or a fourth general web result 526) can be provided for display with media content item previews.
- the one or more non-fungible token search results e.g., a first non- fungible token search result 510, a second non-fungible token search result 512, a third non- fungible token search result 514, and/or a fourth non-fungible token search result 516
- Figure 6 depicts a flow chart diagram of an example method to perform according to example embodiments of the present disclosure. Although Figure 6 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particularly illustrated order or arrangement. The various steps of the method 600 can be omitted, rearranged, combined, and/or adapted in various ways without deviating from the scope of the present disclosure.
- a computing system can obtain blockchain data from a blockchain computing system and can determine the blockchain data includes first token data.
- the blockchain data can be associated with a particular blockchain and/or from a plurality of blockchains. Additionally and/or alternatively, the blockchain data can be obtained from a blockchain node.
- the blockchain computing system can include a decentralized, distributed computing system that stores data associated with a plurality of non-fungible tokens and a plurality of transactions associated with the non-fungible tokens.
- the first token data can be descriptive of a first non-fungible token associated with a first digital resource.
- the blockchain computing system can include a distributed computing system including a plurality of computing devices.
- the blockchain data can include embedded code associated with a plurality of non-fungible tokens.
- determining the blockchain data includes first token data can include crawling embedded code.
- the blockchain data can include the embedded code.
- the blockchain data can be processed to identify one or more code characteristics indicative of a non-fungible token (e.g., EIP compliant structure).
- the blockchain data can be parsed into segments that can be individually processed to determine if the segment includes non-fungible token data.
- the computing system can generate first index data based on the first token data.
- the first index data can be stored in an index database.
- the first token data can include data descriptive of the payload (e.g., the digital resource associated with the non- fungible token).
- the first token data can include data descriptive of the non-fungible token’s creator/publisher, description of the digital resource, mint time, transaction data associated with the non-fungible token, the particular blockchain associated with the non-fungible token, a digital resource type, a determined likelihood of fraudulence score, and/or one or more determined tags.
- the computing system can obtain web page data from a digital web platform user interface and can determine the web page data includes second token data.
- the web page data can include a snapshot of a marketplace webpage associated with the second non-fungible token.
- the digital web platform user interface can be provided by a web platform computing system (e.g., a marketplace computing system) that hosts a non-fungible token marketplace for selling and displaying non-fungible tokens.
- a leaf page can be obtained from a website associated with non-fungible tokens. The leaf page can be processed to generate the web page data.
- the second token data can be descriptive of a second non-fungible token associated with a second digital resource.
- the second digital resource can depict an augmented version of a scene depicted in the first digital resource.
- the second digital resource can depict an augmented version of a scene depicted in the first digital resource.
- the computing system can generate second index data based on the second token data.
- the second index data can be stored in the index database.
- the second index data can include data descriptive of the non-fungible token’s creator/publisher, description of the digital resource, mint time, transaction data associated with the non- fungible token, the particular blockchain associated with the non-fungible token, a digital resource type, a determined likelihood of fraudulence score, and/or one or more determined tags.
- the computing system can determine the first digital resource and the second digital resource are a same digital resource. The determination can be based on determining the first digital resource of the first non-fungible token and determining the second digital resource of the second non-fungible token. The first digital resource and the second digital resource can be compared to determine similar and/overlapping data.
- the determination can include image processing, text processing, audio processing, video processing, and/or latent encoding processing. In some implementations, the determination can include processing the first digital resource and the second digital resource with one or more machine-learned models (e.g., an image classification model, an audio classification model, a video classification model, an object detection model, a feature extractor model, and/or one or more recognition models).
- machine-learned models e.g., an image classification model, an audio classification model, a video classification model, an object detection model, a feature extractor model, and/or one or more recognition models.
- the computing system can adjust the index database based on the first digital resource and the second digital resource being a same digital resource.
- the particular type of adjustment may be based on the transaction data of the non-fungible tokens, the source of the token data, and/or a variety of other factors.
- adjusting the index database based on the first digital resource and the second digital resource being the same digital resource can include removing the second index data from the index database.
- adjusting the index database based on the first digital resource and the second digital resource being the same digital resource can include merging the first index data and the second index data to generate augmented index data.
- adjusting the index database based on the first digital resource and the second digital resource being the same digital resource can include adjusting a first text entry associated with the first index data based on the first digital resource and the second digital resource being the same digital resource.
- adjusting the index database based on the first digital resource and the second digital resource being the same digital resource can include adjusting a second text entry associated with the second index data based on the first digital resource and the second digital resource being the same digital resource.
- the second index entry can be stored in the index database.
- Figure 7 depicts a flow chart diagram of an example method to perform according to example embodiments of the present disclosure. Although Figure 7 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particularly illustrated order or arrangement. The various steps of the method 700 can be omitted, rearranged, combined, and/or adapted in various ways without deviating from the scope of the present disclosure.
- a computing system can generate a plurality of first index entries for an index database based on crawling a blockchain.
- the plurality of first index entries can include a plurality of first index datasets associated with a plurality of first non-fungible tokens.
- the computing system can generate a plurality of second index entries for the index database based on crawling a digital web platform (e.g., a digital marketplace).
- the digital web platform e.g., the digital marketplace
- the plurality of second index entries can include a plurality of second index datasets associated with a plurality of second non-fungible tokens.
- the computing system can determine a particular first index entry of the plurality of first index entries is associated with a particular second index entry of the plurality of second index entries. The determination can include comparing each of the plurality of first index entries with each of the plurality of second index entries.
- the comparison can include obtaining a plurality of first digital resources associated with the plurality of first index entries. Additionally and/or alternatively, the comparison can include obtaining a plurality of second digital resources associated with the plurality of second index entries. Each of the plurality of first digital resources can be compared to each of the plurality of second digital resources. The comparison can include processing the digital resources with one or more machine-learned models to determine if and/or which digital resources are the same (e.g., match and/or within a threshold similarity).
- the first payload can include a first digital resource.
- the second payload can include a second digital resource.
- the first digital resource and the second digital resource can match and/or be similar.
- determining the particular first index entry of the plurality of first index entries is associated with the particular second index entry of the plurality of second index entries can include determining a first payload associated with a first non-fungible token is same as a second payload associated with a second non-fungible token.
- the first non-fungible token can be associated with the particular first index entry.
- the second non-fungible token can be associated with the particular second index entry.
- the computing system can adjust the index database in response to determining the particular first index entry is associated with the particular second index entry. Adjusting the index database can include merging index entries, removing index entries, and/or adding tags to each of the index entries determined to be duplicative.
- Figure 8 depicts a flow chart diagram of an example method to perform according to example embodiments of the present disclosure. Although Figure 8 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particularly illustrated order or arrangement. The various steps of the method 800 can be omitted, rearranged, combined, and/or adapted in various ways without deviating from the scope of the present disclosure.
- a computing system can obtain a particular index entry and a plurality of index entries.
- the plurality of index entries can be obtained from an index database.
- the plurality of index entries can include one or more index entries obtained by extracting data from a blockchain.
- the plurality of index entries can include one or more index entries obtained by extracting data from a non-fungible token marketplace.
- the computing system can process the particular index entry and the plurality of index entries to generate duplication data.
- the duplication data can be descriptive of whether one or more different index entries of the plurality of index entries are associated with a digital resource associated with the particular index entry.
- the computing system can generate validation data based at least in part on the duplication data.
- the validation data can be associated with an authenticity of a non- fungible token associated with the particular index entry.
- the validation data can be based at least in part on a timestamp associated with the particular index entry.
- the validation data can be descriptive of whether the non-fungible token was minted at least one of before another publication of the digital resource.
- generating the validation data based at least in part on the duplication data can include determining the particular index entry is authentic by determining the particular index entry is associated with a first minting of the digital resource. The determination can be based on transaction data, mint times, publication times, particular blockchains, source of token data, the payload URI data, and/or digital resource quality.
- the validation may be generated with one or more machine-learned models.
- the computing system can provide the validation data as an output.
- the validation data can be provided via one or more user-interface elements (e.g., banners, pop- ups, user-interface labels, and/or user-interface annotations).
- the validation data can be provided for display adjacent to a preview of the digital resource.
- the systems and methods disclosed herein can identify data associated with non- fungible tokens in a blockchain (e.g., in the code of a blockchain). For example, a plurality of non-fungible tokens can be identified and indexed based on a plurality of techniques.
- One technique can include analyzing (e.g., crawling) a blockchain to identify data associated with a non-fungible token. The data can then be parsed to determine identifiable data that can be indexed.
- Another technique can include analyzing (e.g., crawling) a non-fungible token marketplace to identify non-fungible tokens for sale. Data related to the non-fungible tokens can then be obtained and indexed.
- multiple techniques can be utilized for generating a more encompassing database for search.
- the systems and methods disclosed herein can include obtaining blockchain data from a blockchain computing system.
- the blockchain data can include one or more function signatures.
- the blockchain data can include script data associated with a digital asset.
- a particular portion (e.g., a subset) of the blockchain data can be determined to include token data.
- the token data can be descriptive of a non-fungible token associated with a digital asset.
- Index data can be generated based on the token data.
- the index data can include information obtained from the blockchain data.
- the index data can be associated with the digital asset.
- the index data can then be stored in an index database.
- the index database can then be utilized for a variety of purposes (e.g., non-fungible token search, data aggregation and analysis, training data for a machine-learned model, and/or for generating statistical representations).
- the systems and methods can obtain blockchain data (e.g., code from a blockchain) from a blockchain computing system (e.g., a decentralized computing system storing distributed data).
- the blockchain data can include one or more function signatures.
- the blockchain data can include script associated with a digital asset.
- the blockchain data may be obtained via a blockchain node.
- Blockchain data can include the code and/or records stored on the blockchain.
- the code can include the script and can be descriptive of a plurality of smart contracts.
- the blockchain data can include transactional data associated with the acquisition of digital assets and/or the exchange of digital currency (e.g., crypto currency).
- the blockchain data can include metadata associated with one or more non-fungible tokens.
- the systems and methods disclosed herein can include determining a particular portion of the blockchain data includes token data.
- the token data can be descriptive of a non-fungible token associated with a digital asset.
- the systems and methods can determine a subset of the blockchain data includes token data based on the subset having a structure associated with one or more standards.
- the token data can be descriptive of a non-fungible token associated with the digital asset.
- the structure can include a format for code in the blockchain data associated with a standard format for non-fungible token code.
- the blockchain data can be parsed, and each parsed segment of the blockchain data can be processed to classify whether the parsed segment includes token data descriptive of a non-fungible token.
- the classification can be generated with a machine-learned classification model that has been trained to classify whether the parsed segment includes data associated with anon-fungible token (e.g., whether the data includes reference to a payload, meets one or more standards, and/or is descriptive of a smart contract).
- the blockchain data can be parsed with a machine- learned segmentation model trained to parse blockchain data based on one or more factors (e.g., syntax, semantics, structure, code length, payload characteristics, code features, latent encode markers, and/or another machine-learned characteristics).
- factors e.g., syntax, semantics, structure, code length, payload characteristics, code features, latent encode markers, and/or another machine-learned characteristics.
- determining the particular portion of the blockchain data includes the token data can include determining a particular portion of the blockchain data includes token data based on the one or more function signatures.
- the one or more function signatures can be associated with a non-fungible token standard.
- determining the particular portion of the blockchain data includes the token data can include determining the particular portion includes a smart contract associated with a digital media item.
- the digital media item can be a payload for the smart contract.
- the digital media item can be the digital asset.
- Index data can then be generated based on the token data.
- the index data can include information obtained from the blockchain data.
- the index data can be associated with the digital asset.
- the index data can include transaction data associated with the non-fungible token.
- the index data can include data descriptive of metadata associated with the non-fungible token.
- the index data can include a digital asset type associated with the digital asset.
- the digital asset type can be an augmented-reality rendering asset type, and the digital asset can be an augmented-reality rendering asset.
- the index data can include whether the URI (Uniform Resource Identifier) has changed and whether data (e.g., the pixels of an image and/or text of a text string) of the payload have changed when the URI has changed. Additionally and/or alternatively, the index data can include information descriptive of a change to the URI.
- the index data can include data that may be descriptive of factors that can be utilized to determine whether the non-fungible token involves fraud.
- generating index data based on the token data can include obtaining the digital asset associated with the non-fungible token, processing the digital asset to determine one or more features in the digital asset, and generating feature data descriptive of the one or more features.
- the index data can include the feature data.
- generating the index data can include determining the digital asset associated with the non-fungible token and processing the non-fungible token with a machine-learned model (e.g., a classification model, a detection model, a feature extractor model, and/or a semantics model) to determine one or more classifications, features, and/or attributes associated with the digital asset.
- a machine-learned model e.g., a classification model, a detection model, a feature extractor model, and/or a semantics model
- the one or more classifications, features, and/or attributes can be included in the index data.
- the index data can include a name associated with the non-fungible token and/or the digital asset, a name of the digital asset creator/publisher, transaction data (e.g., the current and/or past owners, purchase price, transactional trends, trends of related non-fungible tokens, gas price, etc.), a topic of the digital asset, non-fungible token metadata, pixel labels, non-fungible token description, freeform text associated with the non-fungible token, and/or notoriety associated with the non-fungible token, the publisher, or the creator.
- transaction data e.g., the current and/or past owners, purchase price, transactional trends, trends of related non-fungible tokens, gas price, etc.
- topic of the digital asset e.g., non-fungible token metadata, pixel labels, non-fungible token description, freeform text associated with the non-fungible token, and/or notoriety associated with the non-fungible token, the publisher, or the creator.
- the digital asset can include image data, video data, text data, audio data, a domain, an augmented-reality asset, a virtual-reality experience, and/or latent encoding data.
- the digital asset can include image data
- processing the digital asset can include processing the digital asset with a machine-learned model to determine one or more image features.
- generating the feature data descriptive of the one or more features can include determining one or more feature descriptor terms associated with the one or more features.
- the feature data can be descriptive of the one or more feature descriptor terms.
- the systems and methods can include determining a web content item is associated with the digital asset.
- a publication time associated with the web content item can be obtained.
- the systems and methods can determine a mint time associated with the non-fungible token based on the blockchain data.
- Time difference data can be generated based on the mint time and the publication time.
- the index data can include the time difference data.
- generating the index data based on the token data can include determining reference data associated with the digital asset based on the token data and determining a publisher of the non-fungible token based one the token data.
- the index data can include data descriptive of the reference data, the publisher, and a particular blockchain associated with the blockchain data.
- the systems and methods can store the index data in an index database.
- the index database can be stored on a server computing system.
- the index database can include a plurality of index datasets associated with a plurality of non-fungible tokens. For example, first token data can be identified to generate a first index dataset, second token data can be identified to generate a second index dataset, and third token data can be identified to generate a third index dataset.
- the first token data can be associated with a first non-fungible token
- the second token data can be associated with a second non-fungible token
- the third token data can be associated with a third non-fungible token.
- the index database can be utilized for a plurality of different uses.
- the index database can be utilized as a database for storing non-fungible token data for quick retrieval upon request or search.
- the systems and methods can include receiving a request for the digital asset from a user computing system and providing the token data to the user computing system.
- the index database can include index datasets generated based on blockchain data, web page data, and/or data obtained from other sources.
- the systems and methods disclosed herein can obtain web page data from a web page.
- the web page data can be descriptive of listing information for a non-fungible token.
- the web page data can include data associated with a digital asset.
- obtaining the web page data can include generating a snapshot of a web page listing the non-fungible token for sale.
- the web page data can be descriptive of a leaf page of a digital web platform website (e.g., a digital marketplace website) that hosts and/or facilitates the purchase and sales of the non-fungible tokens.
- the web page data can include a snapshot of a webpage, which can include image data, text data, and/or latent encoding data.
- a particular portion (e.g., a subset) of the web page data can be processed to determine the web page data includes token data.
- the token data can be descriptive of the non-fungible token associated with the digital asset.
- a digital marketplace website can be crawled to determine a plurality of leaf pages associated with a plurality of non-fungible tokens, and each leaf page can be processed to generate index data for each of the non-fungible tokens.
- Index data can then be generated based on the token data.
- the index data can include information obtained from the web page data.
- the index data can be associated with the digital asset.
- Generating the index data can include processing the image data, the text data, and/or the latent encoding data of the leaf page to determine data associated with a plurality of index fields to be included in the index data.
- the systems and methods can include storing the index data in an index database.
- the index database may be stored on a server computing system.
- the index database can be used to surface non-fungible token search results for a search engine.
- the index database can be utilized to determine statistics associated with non-fungible tokens. For example trending non-fungible tokens of a certain type and/or creator can be determined and then utilized for non-fungible token ranking in marketplaces, search result pages, and/or for informing users for informed purchasing.
- the index database can include index data from a plurality of different sources (e.g., a plurality of different blockchains associated with a plurality of different blockchain computing systems and/or a plurality of different web pages associated with a plurality of different marketplaces).
- the index database can be utilized for a plurality of different tasks (e.g., search, statistical generation, and/or model training).
- the systems and methods can obtain blockchain data.
- the systems and methods can include determining a subset of the blockchain data is descriptive of a non-fungible token associated with a digital asset.
- Index data can be generated based at least in part on the subset of blockchain data.
- the index data can include reference data associated with the digital asset.
- the index data can be stored in a search database.
- the systems and methods can include receiving a search query from a user computing system.
- the systems and methods can determine the search query is associated with index data.
- a search result associated with the digital asset can then be provided to the user computing system.
- the systems and methods can include obtaining blockchain data (e.g., blockchain data obtained from a blockchain node associated with a blockchain computing system).
- the systems and methods can obtain web page data (e.g., marketplace data obtained via taking a snapshot of a web page associated with a non-fungible token marketplace).
- the systems and methods can include obtaining both blockchain data and web page data.
- the obtained data can be obtained via an application programming interface.
- the obtained data may be intervalley updated. The updates can occur at set intervals and/or may be obtained at a frequency based on transaction trends, type of digital asset, the particular blockchain, and/or based on cost.
- the systems and methods can then determine a subset of the obtained data (e.g., the blockchain data and/or the web page data) is descriptive of a non-fungible token associated with a digital asset.
- the determination can be based on a search for a particular structure, particular terms, and/or particular actors.
- the determination can be based on known digital asset creators/publishers, known digital asset attributes, known digital asset types, known digital asset names, known digital asset descriptions, metadata, and/or labels.
- the determination may be based on the subset of obtained data being EIP (“Ethereum Improvement Proposals”, ETHEREUM (January 2018), https://eips.ethereum.org/EIPS/eip- 721) compliant.
- strict compliance may not need to be followed.
- data types may deviate from the spec of the standards.
- the functional nature and/or the spirit of the data may be determined to be associated with a non-functional token.
- Index data can be generated based at least in part on the subset of obtained data (e.g., the blockchain data and/or the web page data).
- the index data can include reference data (e.g., script data referencing a URL (Uniform Resource Locator) or URI) associated with the digital asset.
- reference data e.g., script data referencing a URL (Uniform Resource Locator) or URI
- the index data can include digital asset creators/publishers, digital asset attributes, digital asset type, digital asset name, digital asset description, metadata, payload information, smart contract information, free form text, transactional data, blockchain information (e.g., information associated with the particular blockchain the non-fungible token is minted on), mint time, first publication time of digital asset, digital asset changes, the particular web page (e.g., the particular marketplace), and/or labels (e.g., pixel labels).
- the obtained data can be processed to determine a non-fungible token community associated with the particular non-fungible token, and the non-fungible token community can be indexed in the index data.
- the index data can be generated by processing the obtained data with one or more machine-learned models (e.g., a segmentation model, a detection model, a classification model, and/or a feature extractor model).
- Transaction history can be processed to determine price history for the non-fungible token, and the price history can be processed to index trend data and/or stability data. Additionally and/or alternatively, whether the non-fungible token was lazy minted or not may be indexed.
- the index data can include whether the non-fungible token was auctioned.
- the systems and methods can then store the index data in a search database.
- the search database can include a plurality of index datasets associated with a plurality of non- fungible tokens.
- the plurality of non-fungible tokens can be identified by processing data from a plurality of sources.
- the systems and methods can receive a search query from a user computing system.
- the search query can include one or more search terms.
- the search query can include one or more images, audio data, latent encoding data, and/or multimodal data.
- the search query can be processed to determine the search query is associated with the index data.
- the search query may be received and processed with a search engine.
- the search engine can be configured to crawl a blockchain, web pages, and/or the index database, or search database.
- determining the search query is associated with index data can include determining one or more search terms of the search query are descriptive of at least one of the digital asset, an author of the digital asset, or non-fungible token metadata.
- a search result associated with the digital asset can then be provided to the user computing system.
- the search result can include a preview of the digital asset.
- the search result can include an indicator indicating the search result is associated with a non-fungible token.
- providing the search result associated with the digital asset to the user computing system can include determining one or more web pages are associated with the search query, generating one or more general web results based on the one or more web pages, and providing a search results page to the user computing system.
- the search results page can include the search result and one or more general web results.
- the index data generated based on blockchain data and the index data generated based on web page data can be reconciled. For example, in an instance in which the blockchain data and web data are in conflict, the systems and methods can process the data, determine which data is more trustworthy, determine whether to merge the data, and/or determine whether to delete one or both sets of data.
- the index data may be intervalley updated.
- the updates can occur at set intervals and/or may be obtained at a frequency based on transaction trends, performance data, type of digital asset, the particular blockchain, time of minting (e.g., older non-fungible tokens may be updated less often due to larger computational cost associated with the crawl), and/or based on cost.
- the index database can include an index item field associated with the digital asset type such that non-fungible tokens associated with augmented-reality rendering assets can be differentiated from non-fungible tokens associated with images.
- the index data can include how to launch, run, and/or view the pay load (e.g., the digital asset). For example, a video player label, an image preview label, a particular augmented-reality application, and/or a particular device may be indexed.
- Data extraction for index data generation can be machine-learned, based on heuristics, and/or may be deterministic.
- the systems and methods disclosed herein can be utilized for search to allow a user to make a deliberate decision to invest or not invest in a particular non-fungible token.
- the systems and methods can be utilized to make Web3 technology easily accessible to a significant chunk of our users (and not just early adopters or crypto enthusiasts who are well versed in Web3).
- Web3 may work can be a significant departure from a general users mental model.
- the systems and methods may focus on simplifying the tech, jargon, applications, and/or setup.
- the blockchain computing system can include a decentralized system; however, the systems and methods disclosed herein can be implemented in a decentralized system, a closed-off ecosystem, and/or a hybrid system including portions completed by a decentralized system and portions completed by a centralized system.
- the systems and methods disclosed herein can be utilized for identity purposes.
- the systems and methods disclosed herein can involve and/or interface with a crypto wallet of a user to store user identity data to be utilized across Web3.
- a user may sign into websites, share personal data, prove identity, and/or transfer crypto currency based in part on the identity data.
- Wallet apps can be built-in to browser. In Web3, there may be a single mechanism to sign in while keeping your data for yourself.
- the blockchain computing system can store data descriptive of a variety of information, which can include non-fungible token Content IDs and/or ownership information for the non-fungible tokens.
- Non-fungible tokens can introduce scarcity and authenticity to digital items.
- the systems and methods disclosed herein can be implemented into a search engine to enhance image, video, and audio search.
- the systems and methods implemented into a search engine can signal to users who owns an image or video on the web and where the digital asset comes from, can enforce copyright rules for the digital asset, can detect if the digital asset has been tampered with or has trust issues, and/or can enable the sale or transfer of digital content on the web (e.g., non-fungible token marketplaces for images, music, and/or another form of digital asset).
- the systems and methods disclosed herein can include creator tokens.
- a Web3 model can enable creators to own their content and have a direct relationship with their followers/subscribers/fans, which can bypass today’s platforms. This can be very disruptive to video platforms, but may be an opportunity for search engines, which may not be on the top of the mind for creators.
- Creator tokens can be a way for fans to “invest” in their favorite creators while also enabling creators to create a community around their fans.
- the systems and methods disclosed herein can be utilized to provide an oracle system (e.g., a system that can provide service provider system for smart contracts to check whether something is real or has happened).
- an oracle system e.g., a system that can provide service provider system for smart contracts to check whether something is real or has happened.
- the systems and methods disclosed herein can include general information retrieval.
- the systems and methods can enable search to index the important parts of blockchain and make them accessible and useful.
- the systems and methods can include decentralized autonomous organization, which can be used to automate decision making.
- information about decentralized autonomous organization of search engines can be provided and may make the decision making more transparent.
- the systems and methods can enable ownership of any digital asset on the web by empowering creators and publishers to claim ownership of their digital content and set the rules of its usage in a scalable and high speed fashion. Additionally and/or alternatively, the systems and methods can enable ownership of any digital asset on the web by empowering search users to understand the provenance and history of a digital asset while also being able to take action on the digital asset in a way that is permitted by the original creator (e.g., buy the non-fungible token and/or use the non-fungible token as a ticket).
- the systems and methods can simultaneously create carrots for creators and publishers to publish non-fungible content on the web while also giving them tools to create this content and set rules of usage for the content.
- the carrots can be created to show who owns an image on the web or show items published by a creator/publisher, can block copies of an ‘owned’ digital asset or at least transfer any revenue generated from it to the original owner, can enable a user to sell and monetize generated content, and can enable royalty fees.
- the systems and methods can include tools for creators/publishers to create non-fungible content.
- the systems and methods can give creators/publishers easy tools to publish non-fungible content and set rules for the content usage that can both be done by casual creators as well as sophisticated large scale players.
- the systems and methods can include a smart contract blockchain that can be open, closed, and/or a hybrid of both.
- the systems and methods can be implemented to enable a non-fungible token marketplace across various digital asset platforms (e.g., an image platform, a video hosting platform, and/or a music hosting platform) and/or across various service platforms (e.g., a search engine, a social media platform, and/or a blog platform).
- the creators and/or publishers can generate digital assets, mint the digital assets, sell the digital assets, and/or receive royalties for future sales of the digital assets.
- the non-fungible tokens can be utilized to access private chat groups or blogs inside different platforms and communities, can be used to set up avatars that are verified as being owned by a particular user, can enable quick communication between creators and owners, and can provide transactional history that can be used for future releases and purchases by providing insightful suggestions.
Abstract
Systems and methods for non-fungible token indexing can include obtaining and identifying token data associated with a plurality of non-fungible tokens. In generating an index database, the systems and methods may index a token multiple times and/or may index tokens with same or similar payloads. The systems and methods can identify the duplicate token indexing and can adjust the index database based on the identification of duplicate token index data. The adjustment can affect the determination of which search results to surface in response to a search query.
Description
DEDUPLICATION OF NON-FUNGIBLE TOKENS IN SEARCH INDEX
FIELD
[0001] The present disclosure relates generally to identifying duplicate token index data and adjusting an index database based on the identification. More particularly, the present disclosure relates to identifying multiple token index datasets with a same or similar payload and adjusting an index database based on an analysis of the duplicate token index datasets.
BACKGROUND
[0002] Search engines can receive search queries and provide search results listing web pages determined to be responsive to the search query. The search engine may crawl the web to determine web pages that have certain terms. The search results can be generally indicated with captions and/or text titles. The search results can include text results, video results, and image results.
[0003] However, searching and identifying non-fungible token search results can be difficult. Searching for non-fungible tokens can be limited to finding general web pages that are associated with the different non-fungible tokens; however, the search engine may be unable to properly identify and verify the non-fungible token search result as a non-fungible token.
SUMMARY
[0004] Aspects and advantages of embodiments of the present disclosure will be set forth in part in the following description, or can be learned from the description, or can be learned through practice of the embodiments.
[0005] One example aspect of the present disclosure is directed to a computing system. The system can include one or more processors and one or more non-transitory computer- readable media that collectively store instructions that, when executed by the one or more processors, cause the computing system to perform operations. The operations can include obtaining blockchain data from a blockchain computing system. The operations can include determining the blockchain data includes first token data. The first token data can be descriptive of a first non-fungible token associated with a first digital resource. The operations can include generating first index data based on the first token data. In some implementations, the first index data can be stored in an index database. The operations can include obtaining web page data from a digital web platform user interface and determining
the web page data includes second token data. The second token data can be descriptive of a second non-fungible token associated with a second digital resource. The operations can include generating second index data based on the second token data. In some implementations, the second index data can be stored in the index database. The operations can include determining the first digital resource and the second digital resource are a same digital resource and adjusting the index database based on the first digital resource and the second digital resource being a same digital resource.
[0006] In some implementations, the blockchain computing system can include a distributed computing system including a plurality of computing devices. The blockchain data can include embedded code associated with a plurality of non-fungible tokens. In some implementations, the operations can include receiving a search request, determining one or more search results based on the index database, and providing the one or more search results for display. The one or more search results can include a particular search result associated with the first digital resource. In some implementations, adjusting the index database based on the first digital resource and the second digital resource being the same digital resource can include removing the second index data from the index database. Adjusting the index database based on the first digital resource and the second digital resource being the same digital resource can include merging the first index data and the second index data to generate augmented index data.
[0007] In some implementation, adjusting the index database based on the first digital resource and the second digital resource being the same digital resource can include adjusting a first text entry associated with the first index data based on the first digital resource and the second digital resource being the same digital resource. Adjusting the index database based on the first digital resource and the second digital resource being the same digital resource can include adjusting a second text entry associated with the second index data based on the first digital resource and the second digital resource being the same digital resource. The second index entry can be stored in the index database.
[0008] In some implementations, determining the blockchain data includes first token data can include crawling embedded code. The blockchain data can include the embedded code. In some implementations, the web page data can include a snapshot of a digital resource listing webpage associated with the second non-fungible token. The second digital resource can depict an augmented version of a scene depicted in the first digital resource. [0009] Another example aspect of the present disclosure is directed to a computer- implemented method. The method can include generating, by a computing system including
one or more processors, a plurality of first index entries for an index database based on crawling a blockchain. The method can include generating, by the computing system, a plurality of second index entries for the index database based on crawling a digital web platform. The method can include determining, by the computing system, a particular first index entry of the plurality of first index entries is associated with a particular second index entry of the plurality of second index entries. The method can include adjusting, by the computing system, the index database in response to determining the particular first index entry is associated with the particular second index entry.
[0010] In some implementations, determining the particular first index entry of the plurality of first index entries is associated with the particular second index entry of the plurality of second index entries can include determining a first payload associated with a first non-fungible token is same as a second payload associated with a second non-fungible token. The first non-fungible token can be associated with the particular first index entry, and the second non-fungible token can be associated with the particular second index entry. In some implementations, the first payload can include a first digital resource, the second payload can include a second digital resource, and the first digital resource and the second digital resource can match.
[0011] In some implementations, the first payload can include a first digital resource, the second payload can include a second digital resource, and the first digital resource and the second digital resource can depict a same scene with differing resolutions. The digital web page can include a user interface for providing a plurality of non-fungible tokens for sale. [0012] Another example aspect of the present disclosure is directed to one or more non- transitory computer-readable media that collectively store instructions that, when executed by one or more computing devices, cause the one or more computing devices to perform operations. The operations can include obtaining a particular index entry and a plurality of index entries. The plurality of index entries can be obtained from an index database. The operations can include processing the particular index entry and the plurality of index entries to generate duplication data. In some implementations, the duplication data can be descriptive of whether one or more different index entries of the plurality of index entries are associated with a digital resource associated with the particular index entry. The operations can include generating validation data based at least in part on the duplication data. The validation data can be associated with an authenticity of a non-fungible token associated with the particular index entry. The operations can include providing the validation data as an output.
[0013] In some implementations, the plurality of index entries can include one or more index entries obtained by extracting data from a blockchain. The plurality of index entries can include one or more index entries obtained by extracting data from a non-fungible token marketplace. In some implementations, generating the validation data based at least in part on the duplication data can include determining the particular index entry is authentic by determining the particular index entry is associated with a first minting of the digital resource. The validation data can be based at least in part on a timestamp associated with the particular index entry. The validation data can be descriptive of whether the non-fungible token was minted at least one of before another publication of the digital resource.
[0014] Other aspects of the present disclosure are directed to various systems, apparatuses, non-transitory computer-readable media, user interfaces, and electronic devices. [0015] These and other features, aspects, and advantages of various embodiments of the present disclosure will become better understood with reference to the following description and appended claims. The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate example embodiments of the present disclosure and, together with the description, serve to explain the related principles.
BRIEF DESCRIPTION OF THE DRAWINGS
[0016] Detailed discussion of embodiments directed to one of ordinary skill in the art is set forth in the specification, which makes reference to the appended figures, in which: [0017] Figure 1A depicts a block diagram of an example computing system that performs non-fungible token indexing according to example embodiments of the present disclosure.
[0018] Figure IB depicts a block diagram of an example computing device that performs non-fungible token indexing according to example embodiments of the present disclosure. [0019] Figure 2 depicts a block diagram of an example token index deduplication according to example embodiments of the present disclosure.
[0020] Figure 3 depicts a block diagram of an example index validity determination according to example embodiments of the present disclosure.
[0021] Figure 4 depicts a block diagram of an example token index deduplication according to example embodiments of the present disclosure.
[0022] Figure 5 depicts a block diagram of an example search results page generation according to example embodiments of the present disclosure.
[0023] Figure 6 depicts a flow chart diagram of an example method to perform non- fungible token index deduplication according to example embodiments of the present disclosure.
[0024] Figure 7 depicts a flow chart diagram of an example method to perform non- fungible token index deduplication according to example embodiments of the present disclosure.
[0025] Figure 8 depicts a flow chart diagram of an example method to perform non- fungible token index validation according to example embodiments of the present disclosure. [0026] Figure 9A depicts a block diagram of an example computing system that performs non-fungible token indexing according to example embodiments of the present disclosure.
[0027] Figure 9B depicts a block diagram of an example computing device that performs non-fungible token indexing according to example embodiments of the present disclosure.
[0028] Figure 9C depicts a block diagram of an example computing system that performs non-fungible token indexing according to example embodiments of the present disclosure.
[0029] Figure 10 depicts a block diagram of an example indexing system according to example embodiments of the present disclosure.
[0030] Figure 11 depicts a block diagram of an example index dataset according to example embodiments of the present disclosure.
[0031] Figure 12 depicts a block diagram of an example search according to example embodiments of the present disclosure.
[0032] Figure 13A depicts an illustration of an example search results page according to example embodiments of the present disclosure.
[0033] Figure 13B depicts an illustration of an example search results page according to example embodiments of the present disclosure.
[0034] Figure 13C depicts an illustration of an example search results page according to example embodiments of the present disclosure.
[0035] Reference numerals that are repeated across plural figures are intended to identify the same features in various implementations.
DETAILED DESCRIPTION
Overview
[0036] Generally, the present disclosure is directed to systems and methods for deduplication of non-fungible token index data in an index database (e.g., a search index). In particular, the systems and methods disclosed herein can identify that a non-fungible token has been identified twice by comparing non-fungible tokens identified from a leaf page and non-fungible tokens identified by crawling a blockchain. For example, a plurality of non- fungible tokens can be identified and indexed based on a plurality of techniques. One technique can include analyzing a blockchain to identify data associated with a non-fungible token. The data can then be parsed to determine identifiable data that can be indexed. Another technique can include analyzing a non-fungible token leaf page (e.g., a web page associated with a non-fungible token marketplace) to identify non-fungible tokens for sale. Data related to the non-fungible tokens can then be obtained and indexed. In some implementations, multiple techniques can be utilized for generating a more encompassing database for search; however, the use of multiple techniques can cause a non-fungible token to be indexed multiple times. For deduplication, the systems and methods disclosed herein can compare the identified marketplace non-fungible tokens against the identified blockchain non-fungible tokens to determine if a particular non-fungible token has been indexed multiple times. The comparison can include text processing, image processing, and/or latent encoding processing. Metadata, blockchain address data, and/or image data can be compared in order to determine a non-fungible token has been duplicated. In response to a duplication being identified, the data of the two index events may be merged and/or all but one index event for that particular non-fungible token may be deleted.
[0037] The systems and methods can include obtaining blockchain data from a blockchain computing system. The systems and methods can determine the blockchain data includes first token data. The first token data can be descriptive of a first non-fungible token associated with a first digital resource (e.g., a first digital asset). In some implementations, first index data can be generated based on the first token data. The first index data can be stored in an index database. Web page data can be obtained from a digital web platform user interface (e.g., a digital marketplace user interface). The systems and methods can determine the web page data includes second token data. The second token data can be descriptive of a second non-fungible token associated with a second digital resource (e.g., a second digital asset). Second index data can be generated based on the second token data. The second index data can be stored in the index database. In some implementations, the systems and methods
can determine the first digital resource (e.g., the first digital asset) and the second digital resource (e.g., the second digital asset) are a same digital resource (e.g., a same digital asset). The index database can be adjusted based on the first digital resource (e.g., the first digital asset) and the second digital resource (e.g., the second digital asset) being a same digital resource (e.g., a same digital asset). Alternatively and/or additionally, the determination of duplication may be based on other data. For example, matching contract addresses, matching token IDs, and/or matching blockchains. The index database can then be adjusted based on the determination.
[0038] The systems and methods disclosed herein can be utilized for enabling a non- fungible token search via a search engine. For example, a search query can be received. A search engine can process the search query and can determine a plurality of search results associated with the search query. In some implementations, one or more search results can be associated with non-fungible tokens. A particular search result can be associated with the index data. The one or more non-fungible token search results can be provided for display in a search results interface (e.g., a search results page). The one or more non-fungible token search results can be provided for display in a separate panel. Alternatively and/or additionally, the one or more non-fungible token search results can be provided for display adjacent to general search results. The one or more non-fungible token search results can be provided with one or more indicators indicating the non-fungible token nature (e.g., provided with one or more labels, flags, and/or tags). In some implementations, the one or more non- fungible token search results can be provided with a generated preview of the digital resource based on the index data.
[0039] In some implementations, the systems and methods disclosed herein can be utilized for Web3 profiles, for Web3 transactions, and/or for Web3 identification.
[0040] The systems and methods can improve the search user interface and user experience by identifying and indexing relevant data that can be utilized for determining the non-fungible token is responsive to a search query. Additionally and/or alternatively, the index data can be leveraged to determine a ranking for the non-fungible token search result with relation to other search results (e.g., certain index datasets may be ranked higher or lower based on a duplication determination). The systems and methods can be utilized to determine if a search result can be provided with a non-fungible token tag and/or can be given a ranking boost based on the association with an authenticated non-fungible token. Additionally and/or alternatively, the systems and methods can improve the quality of the
search results by removing and/or hiding lower quality duplicate non-fungible tokens that may be associated with a scam token and/or a diluted token.
[0041] For example, the systems and methods disclosed herein can deduplicate and/or flag duplicate instances of a token being indexed. The systems and methods can compare payloads of various tokens and contracts. The payloads (e.g., the digital assets) of different tokens can be compared to determine whether two or more tokens share the same payload (e.g., a digital asset with a slight variation (e.g., an image with a different saturation or cropping)). The determination can be generated by processing the payloads of different tokens with one or more machine-learned models. The determination can include image analysis (e.g., pixel analysis), video analysis, audio analysis, text analysis, and/or latent encoding analysis. Digital resources (e.g., digital assets) can be determined to be the same resource (e.g., the same asset) by determining the digital resources match and/or are substantially similar (e.g., within a threshold similarity). In response to determining the payloads match, one or more actions can be determined. The one or more actions can include flagging in the index data of each associated token to indicate the respective tokens have the same payload. Alternatively and/or additionally, the one or more actions can include merging the index data of the tokens, removing the index data of at least one of the tokens, and/or generating data that links the index data of the related tokens.
[0042] In some implementations, the one or more actions can be based at least in part on processing the transactional data of each of the tokens with duplicate payloads. For example, the systems and methods can include processing a first transaction dataset and a second transaction dataset to determine whether the first token or the second token is more likely to be authentic (e.g., a valid token that was minted first and/or minted by the creator). In some implementations, the systems and methods can include fraud detection techniques, which may include the use of heuristics. The systems and methods can analyze the transaction data to determine the token associated with the original digital resource creator (e.g., the original digital asset creator). Alternatively and/or additionally, the systems and methods can process the transaction data to determine the token with the earliest mint date. Alternatively and/or additionally, the systems and methods can process the transaction data to determine whether one of the tokens has transactional trends that appear more fraudulent than the other. For example, a set of transactions consistently between two parties for a singular token may be a sign of fraudulent activity, while a chain of transactions between various parties during a trending period for that specific family of digital resources (e.g., that specific family of digital assets) may be viewed as a more authentic chain of transactions.
[0043] In some implementations, the systems and methods may defer to the index data generated based on blockchain data obtained from a blockchain node over index data generated based on web page data (e.g., marketplace data).
[0044] Alternatively and/or additionally, the systems and methods can utilize prior data generated based on other validation analysis to determine the authenticity and/or validation of the present analysis. In some implementations, the URL, the URI, and/or the IPFS address of the payload can be processed to determine the valid token. For example, a URL, URI, and/or IPFS address with an invalid address, outdated address, and/or a heavily altered address may be determined to be invalid. URLs and/or URIs referencing a questionable website can cause the associated token to be downranked or dropped in the index database. In some implementations, different blockchains and/or different web platforms (e.g., different marketplaces, different posts, or different other content platforms) may be prioritized over one another.
[0045] Alternatively and/or additionally, an on-chain source may be prioritized over off- chain source. In some implementations, digital resources embedded directly on the blockchain data may be prioritized over digital resources merely referenced on-the-chain. Metadata indexed in the index database may be used to determine an authenticity of a particular token.
[0046] The flagging or alert of questionable, or potentially fraudulent, tokens can be utilized to surface warnings when retrieving the questionable tokens (e.g., a warning provided with the search result for the questionable token). Although digital assets may be discussed in detail below, the systems and methods can be implemented for any digital resource (e.g., any digital resource associated with a non-fungible token). Alternatively and/or additionally, the systems or methods may flag common, or non-scarce, digital resources (e.g., the same artist may create 100 copies of the same piece of digital art intentionally (e.g., in a “limited series”, etc.).
[0047] In particular, the systems and methods can obtain blockchain data from a blockchain computing system. The blockchain data can be associated with a particular blockchain and/or from a plurality of blockchains. Additionally and/or alternatively, the blockchain data can be obtained from a blockchain node. In some implementations, the blockchain computing system can include a decentralized, distributed computing system that stores data associated with a plurality of non-fungible tokens and a plurality of transactions associated with the non-fungible tokens.
[0048] The blockchain data can be determined to include first token data. The first token data can be descriptive of a first non-fungible token associated with a first digital asset. In some implementations, the blockchain computing system can include a distributed computing system including a plurality of computing devices. The blockchain data can include embedded code associated with a plurality of non-fungible tokens. In some implementations, determining the blockchain data includes first token data can include crawling embedded code. The blockchain data can include the embedded code. Alternatively and/or additionally, the blockchain data can be processed to identify one or more code characteristics indicative of a non-fungible token (e.g., EIP compliant structure). In some implementations, the blockchain data can be parsed into segments that can be individually processed to determine if the segment includes non-fungible token data.
[0049] First index data can be generated based on the first token data. The first index data can be stored in an index database. The first token data can include data descriptive of the payload (e.g., the digital asset associated with the non-fungible token). In some implementations, the first token data can include data descriptive of the non-fungible token’s creator/publisher, description of the digital asset, mint time, transaction data associated with the non-fungible token, the particular blockchain associated with the non-fungible token, a digital asset type, a determined likelihood of fraudulence score, and/or one or more determined tags.
[0050] Web page data can be obtained from a digital web platform user interface (e.g., a digital marketplace user interface). In some implementations, the web page data can include a snapshot of a digital resource listing webpage associated with the second non-fungible token. The digital web platform user interface (e.g., the digital marketplace user interface) can be provided by a web platform computing system (e.g., a marketplace computing system) that hosts a non-fungible token marketplace for selling and displaying non-fungible tokens. Alternatively and/or additionally, a leaf page can be obtained from a website associated with non-fungible tokens. The leaf page can be processed to generate the web page data.
[0051] The web page data can be determined to include second token data. The second token data can be descriptive of a second non-fungible token associated with a second digital asset. The second token data can include reference data associated with the second digital asset. In some implementations, the second digital asset can depict an augmented version of a scene depicted in the first digital asset.
[0052] Second index data can be generated based on the second token data. The second index data can be stored in the index database. The second index data can include data
descriptive of the non-fungible token’s creator/publisher, description of the digital asset, mint time, transaction data associated with the non-fungible token, the particular blockchain associated with the non-fungible token, a digital asset type, a determined likelihood of fraudulence score, and/or one or more determined tags.
[0053] The first digital asset and the second digital asset can be determined to be a same digital asset. The determination can be based on determining the first digital asset of the first non-fungible token and determining the second digital asset of the second non-fungible token. The first digital asset and the second digital asset can be compared to determine similar and/overlapping data. The determination can include image processing, text processing, audio processing, video processing, and/or latent encoding processing. In some implementations, the determination can include processing the first digital asset and the second digital asset with one or more machine-learned models (e.g., an image classification model, an audio classification model, a video classification model, an object detection model, a feature extractor model, and/or one or more recognition models).
[0054] The index database can be adjusted based on the first digital asset and the second digital asset being a same digital asset. The particular type of adjustment may be based on the transaction data of the non-fungible tokens, the source of the token data, and/or a variety of other factors.
[0055] In some implementations, adjusting the index database based on the first digital asset and the second digital asset being the same digital asset can include removing the second index data from the index database.
[0056] Alternatively and/or additionally, adjusting the index database based on the first digital asset and the second digital asset being the same digital asset can include merging the first index data and the second index data to generate augmented index data.
[0057] Alternatively and/or additionally, adjusting the index database based on the first digital asset and the second digital asset being the same digital asset can include adjusting a first text entry associated with the first index data based on the first digital asset and the second digital asset being the same digital asset.
[0058] Alternatively and/or additionally, adjusting the index database based on the first digital asset and the second digital asset being the same digital asset can include adjusting a second text entry associated with the second index data based on the first digital asset and the second digital asset being the same digital asset. In some implementations, the second index entry can be stored in the index database.
[0059] In some implementations, the systems and methods can include receiving a search request. The search request can be received from a user computing system. The search request can include one or more search terms, one or more input images, and/or one or more other forms of input data.
[0060] One or more search results can be determined based on the index database. The one or more search results can be determined based on responsiveness to the search request. Additionally and/or alternatively, the one or more search results can be determined based on context data (e.g., a user computing system context, a global context, and/or a non-fungible token context.
[0061] The one or more search results can then be provided for display. The one or more search results can include a particular search result associated with the first digital asset. In some implementations, the one or more search results can be provided for display with one or more labels (e.g., a non-fungible token label, scam website label, questionable transactions label, a validation label, and/or a duplicate non-fungible token label).
[0062] The systems and methods can generate a plurality of first index entries for an index database based on crawling a blockchain. In some implementations, the systems and methods can generate a plurality of second index entries for the index database based on crawling a digital web platform (e.g., a digital marketplace). A particular first index entry of the plurality of first index entries can be determined to be associated with a particular second index entry of the plurality of second index entries. In response to determining the particular first index entry is associated with the particular second index entry, the index database can be adjusted.
[0063] The systems and methods can generate a plurality of first index entries for an index database based on crawling a blockchain. The plurality of first index entries can include a plurality of first index datasets associated with a plurality of first non-fungible tokens.
[0064] Additionally and/or alternatively, the systems and methods can generate a plurality of second index entries for the index database based on crawling a digital web platform (e.g., a digital marketplace). The digital web platform can include a user interface for providing a plurality of non-fungible tokens for sale. The plurality of second index entries can include a plurality of second index datasets associated with a plurality of second non- fungible tokens.
[0065] A particular first index entry of the plurality of first index entries can be determined to be associated with a particular second index entry of the plurality of second
index entries. The determination can include comparing each of the plurality of first index entries with each of the plurality of second index entries. The comparison can include obtaining a plurality of first digital assets associated with the plurality of first index entries. Additionally and/or alternatively, the comparison can include obtaining a plurality of second digital assets associated with the plurality of second index entries. Each of the plurality of first digital assets can be compared to each of the plurality of second digital assets. The comparison can include processing the digital assets with one or more machine-learned models to determine if and/or which digital assets are the same (e.g., the digital assets match and/or are within a threshold similarity).
[0066] In some implementations, the first payload can include a first digital asset. The second payload can include a second digital asset. In some implementations, the first digital asset and the second digital asset can match and/or be similar.
[0067] In some implementations, determining the particular first index entry of the plurality of first index entries is associated with the particular second index entry of the plurality of second index entries can include determining a first payload associated with a first non-fungible token is same as a second payload associated with a second non-fungible token. The first non-fungible token can be associated with the particular first index entry. In some implementations, the second non-fungible token can be associated with the particular second index entry.
[0068] In response to determining the particular first index entry is associated with the particular second index entry, the index database can be adjusted. Adjusting the index database can include merging index entries, removing index entries, and/or adding tags to each of the index entries determined to be duplicative.
[0069] Alternatively and/or additionally, the systems and methods can include obtaining a particular index entry and a plurality of index entries. The plurality of index entries can be obtained from an index database. The particular index entry and the plurality of index entries can be processed to generate duplication data. The duplication data can be descriptive of whether one or more different index entries of the plurality of index entries are associated with a digital asset associated with the particular index entry. Validation data can be generated based at least in part on the duplication data. In some implementations, the validation data can be associated with an authenticity of a non-fungible token associated with the particular index entry. The validation data can be provided as an output.
[0070] The systems and methods can include obtaining a particular index entry and a plurality of index entries. The plurality of index entries can be obtained from an index
database. In some implementations, the plurality of index entries can include one or more index entries obtained by extracting data from a blockchain. The plurality of index entries can include one or more index entries obtained by extracting data from a non-fungible token marketplace.
[0071] The particular index entry and the plurality of index entries can be processed to generate duplication data. The duplication data can be descriptive of whether one or more different index entries of the plurality of index entries are associated with a digital asset associated with the particular index entry.
[0072] Validation data can be generated based at least in part on the duplication data. The validation data can be associated with an authenticity of a non-fungible token associated with the particular index entry. In some implementations, the validation data can be based at least in part on a timestamp associated with the particular index entry. The validation data can be descriptive of whether the non-fungible token was minted before another publication of the digital asset.
[0073] In some implementations, generating the validation data based at least in part on the duplication data can include determining the particular index entry is authentic by determining the particular index entry is associated with a first minting of the digital asset. The determination can be based on transaction data, mint times, publication times, particular blockchains, source of token data, the payload URI data, and/or digital asset quality. The validation may be generated with one or more machine-learned models.
[0074] The validation data can be provided as an output. The validation data can be provided via one or more user-interface elements (e.g., banners, pop-ups, user-interface labels, and/or user-interface annotations). In some implementations, the validation data can be provided for display adjacent to a preview of the digital asset.
[0075] The systems and methods of the present disclosure provide a number of technical effects and benefits. As one example, the system and methods can provide systems and methods for indexing data associated with one or more non-fungible tokens. For example, the systems and methods disclosed herein can generate index data based on identified token data, which can then be utilized for a plurality of different tasks (e.g., search, trend determination, and/or catalog generation).
[0076] Another technical benefit of the systems and methods of the present disclosure is the ability to leverage generated validation data, or authentication data, to inform users of non-fungible tokens with potentially fraudulent data. For example, the systems and methods disclosed herein can process a plurality of index datasets to identify duplicate token index
data, which can then be analyzed to determine whether a particular token has fraudulent characteristics which can then be provided to the user for informed interactions. Alternatively or additionally, the identification of fraudulent characteristics may allow the system to take the step of removing or blocking the addition of a duplicate or fraudulent token from being included on the index.
[0077] Another example of technical effect and benefit relates to improved computational efficiency and improvements in the functioning of a computing system. For example, the systems and methods disclosed herein can leverage the deduplication to greatly reduce the computational power needed to search and surface non-fungible token data. Additionally, the systems and methods disclosed herein can reduce the computational power utilized for managing and storing the index database.
[0078] With reference now to the Figures, example embodiments of the present disclosure will be discussed in further detail.
Example Devices and Systems
[0079] Figure 1 A depicts a block diagram of an example computing system 100 that performs index deduplication according to example embodiments of the present disclosure. The system 100 includes a user computing system 130, a server computing system 110, a creator computing system 150, and a blockchain computing system 170 that are communicatively coupled over a network 180.
[0080] The user computing system 130 can be any type of computing device, such as, for example, a personal computing device (e.g., laptop or desktop), a mobile computing device (e.g., smartphone or tablet), a gaming console or controller, a wearable computing device, an embedded computing device, or any other type of computing device.
[0081] The user computing system 130 includes one or more processors 132 and a memory 134. The one or more processors 132 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected. The memory 134 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof. The memory 134 can store data 136 and instructions 138 which are executed by the processor 132 to cause the user computing system 130 to perform operations. [0082] The user computing system 130 can also include one or more user input components that receive user input. For example, the user input component can be a touch-
sensitive component (e.g., a touch-sensitive display screen or a touch pad) that is sensitive to the touch of a user input object (e.g., a finger or a stylus). The touch-sensitive component can serve to implement a virtual keyboard. Other example user input components include a microphone, a traditional keyboard, or other means by which a user can provide user input. [0083] The server computing system 110 includes one or more processors 112 and a memory 114. The one or more processors 112 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected. The memory 114 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof. The memory 114 can store data 118 and instructions 116 which are executed by the processor 112 to cause the server computing system 110 to perform operations.
[0084] In some implementations, the server computing system 110 includes or is otherwise implemented by one or more server computing devices. In instances in which the server computing system 110 includes plural server computing devices, such server computing devices can operate according to sequential computing architectures, parallel computing architectures, or some combination thereof.
[0085] The blockchain computing system 170 includes one or more processors and a memory. The one or more processors can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected. The memory can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof. The memory can store data and instructions which are executed by the processor to cause the blockchain computing system 170 to perform operations. In some implementations, the blockchain computing system 170 includes or is otherwise implemented by one or more server computing devices.
[0086] The network 180 can be any type of communications network, such as a local area network (e.g., intranet), wide area network (e.g., Internet), or some combination thereof and can include any number of wired or wireless links. In general, communication over the network 180 can be carried via any type of wired and/or wireless connection, using a wide variety of communication protocols (e.g., TCP/IP, HTTP, SMTP, FTP), encodings or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL).
[0087] The computing system 100 can include a number of applications (e.g., applications 1 through N). Each application can be in communication with a central intelligence layer. Example applications can include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc. In some implementations, each application can communicate with the central intelligence layer (and model(s) stored therein) using an API (e.g., a common API across all applications). [0088] The central intelligence layer can communicate with a central device data layer. The central device data layer can be a centralized repository of data for the computing system 100. In some implementations, the central device data layer can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components. In some implementations, the central device data layer can communicate with each device component using an API (e.g., a private API).
[0089] Additionally and/or alternatively, Figure 1A depicts an exemplary computing system 100 that can be used to implement index adjustment (e.g., index deduplication) according to aspects of the present disclosure. The system 100 has a user-server architecture that includes a server 110 that communicates with one or more user computing systems 130 over a network 180. However, the present disclosure can be implemented using other suitable architectures, which can include any number of computing systems communicating over a network 180.
[0090] The system 100 includes a server 110, such as, for example, a web server. The server 110 can be one or more computing devices that are implemented as a parallel computing system and/or a distributed computing system. In particular, multiple computing devices can act together as a single server 110. The server 110 can have one or more processor(s) 112 and a memory 114. The server 110 can also include a network interface used to communicate with one or more remote computing devices (e.g., user devices) 130 over a network 180.
[0091] The processor(s) 112 can be any suitable processing device, such as a microprocessor, microcontroller, integrated circuit, or other suitable processing device. The memory 114 can include any suitable computing system or media, including, but not limited to, non-transitory computer-readable media, RAM, ROM, hard drives, flash drives, or other memory devices. The memory 114 can store information accessible by processor(s) 112, including instructions 116 that can be executed by processor(s) 112. The instructions 116 can
be any set of instructions that when executed by the processor(s) 112, cause the processor(s) 112 to provide desired functionality.
[0092] In particular, the instructions 116 can be executed by the processor(s) 112 to implement index adjustment (e.g., index deduplication). The user profile database 120 can be configured to store a plurality of user profiles associated with a plurality of users utilizing one or more user computing systems 130. In some implementations, the user profile database 120 can be configured to be utilized for facilitating one or more interactions. The facilitation of the one or more interactions can involve the use of a blockchain application programming interface (API) 122 to send data to and receive data from a blockchain computing system 170. For example, a server computing system 110 can utilize the blockchain API 122 to update one or more ledgers 172 of the blockchain computing system 170. The one or more ledgers 172 can be associated with one or more tokens 174. The one or more tokens 174 can include one or more non-fungible tokens, which can include scripts associated with a digital asset (e.g., image data, video data, text data, latent encoding data, domain data, audio data, augmented-reality asset rendering data, and/or virtual-reality asset rendering data). In particular, the script can reference a specific digital asset that is provided for sale. The digital asset can include image data, text data, video data, latent encoding data, a domain name, a virtual property, an augmented-reality asset, a virtual-reality asset (e.g., a virtual-reality environment and/or a virtual-reality object for interaction in an environment), a smart contract, a physical item authentication, etc. In some implementations, the one or more ledgers 172 can be associated with cryptocurrency that can be utilized to make transactions in a physical marketplace and/or a virtual marketplace.
[0093] It will be appreciated that the term “element” can refer to computer logic utilized to provide desired functionality. Thus, any element, function, and/or instructions can be implemented in hardware, application specific circuits, firmware and/or software controlling a general purpose processor. In one implementation, the elements or functions are program code files stored on the storage device, loaded into memory and executed by a processor or can be provided from computer program products, for example computer executable instructions, that are stored in a tangible computer-readable storage medium such as RAM, hard disk or optical or magnetic media.
[0094] Memory 114 can also include data 118 that can be retrieved, manipulated, created, or stored by processor(s) 112. The data 118 can include search result data, ranking data, image data (e.g., digital maps, satellite images, aerial photographs, street-level photographs, synthetic models, paintings, personal images, portraits, etc.), video data, audio
data, text data (e.g., books, articles, blogs, poems, etc.), latent encoding data, blockchain address data, tables, vector data (e.g., vector representations of roads, parcels, buildings, etc.), point of interest data (e.g., locales such as islands, cities, restaurants, hospitals, parks, hotels, and schools), or other data or related information. As an example, the data 118 can be used to access information and data associated with a specific digital asset, website, search result, blockchain, etc.
[0095] The data 118 can be stored in one or more databases. The one or more databases can be connected to the server 110 by a high bandwidth LAN or WAN, or can also be connected to server 110 through network 180. The one or more databases can be split up so that they are located in multiple locales.
[0096] The server 110 can exchange data with one or more user computing systems 130 over the network 180. Although two user computing systems 130 are illustrated in Figure 1A, any number of user computing systems 130 can be connected to the server 110 over the network 180. The user computing systems 130 can be any suitable type of computing device, such as a general purpose computer, special purpose computer, navigational device, laptop, desktop, integrated circuit, mobile device, smartphone, tablet, wearable-computing devices, a display with one or more processors coupled thereto and/or embedded therein, or other suitable computing device. Further, the user computing system 130 can be multiple computing devices acting together to perform operations or computing actions.
[0097] Similar to server 110, a user computing system 130 can include a processor(s) 132 and a memory 134. The memory 134 can store information accessible by processor(s) 132, including instructions that can be executed by processor(s) and data. As an example, memory 134 can store data 136 and instructions 138.
[0098] Instructions 138 can provide instructions for implementing a browser, a non- fungible token purchase, and/or a plurality of other functions. In particular, the user of user computing system 130 can exchange data with server 110 by using the browser to visit a website accessible at a particular web-address. The index adjustment of the present disclosure can be provided as an element of a user interface of a website and/or application.
[0099] The data 136 can include data related to running a specialized application on the user computing system 130. In particular, the specialized application can be used to exchange data with server 110 over the network 160. The data 136 can include user-device-readable code for providing and implementing aspects of the present disclosure. Additionally and/or alternatively, the data 136 can include data related to previously inputted or received data.
For example, the data 136 can include data related to past occurrences of the special application.
[0100] The user computing system 130 can include various user input devices for receiving information from a user, such as a touch screen, touch pad, data entry keys, speakers, mouse, motion sensor, and/or a microphone suitable for voice recognition. Further, the user computing system 130 can have a display for presenting information, such as a user interface, displaying a digital asset, displaying pop-ups or application elements displayed in an interface, and/or other forms of information.
[0101] The user computing system 130 can also include a user profile 140 that can be used to identify a user of the user computing system 130. The user profile 140 can be optionally used by the user to make one or more transactions which can then be recorded on one or more ledgers 172 of the blockchain computing system 170. The user profile 140 can be descriptive of user information, which can include identification numbers and/or payment account information. For example, the user profile 140 can include data associated with a crypto wallet, which may be linked to a browser application via an application extension and/or embedding.
[0102] The user computing system 130 can further include a graphics processing unit. Graphics processing unit can be used by processor 132 to index adjustment. In some embodiments, the user computing system 130 performs any and all index adjustment.
[0103] The user computing system 130 can include a network interface for communicating with a server 110 over a network 180. Network interface can include any components or configuration suitable for communication with server 110 over network 180, including, for example, one or more ports, transmitters, wireless cards, controllers, physical layer components, or other items for communication according to any currently known or future developed communications protocol or technology.
[0104] The network 180 can be any type of communications network, such as a local area network (e.g., intranet), wide area network (e.g., Internet), or some combination thereof. The network 180 can also include a direct connection between a client device 130 and the server 110. In general, communication between the server 110 and a client device 130 can be carried via network interface using any type of wired and/or wireless connection, using a variety of communication protocols (e.g., TCP/IP, HTTP), encodings or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL).
[0105] In some implementations, the exemplary computing system 100 can include one or more creator computing systems 150. The one or more creator computing systems 150 can
be utilized for generating images, videos, prose, poetry, audio, etc., which can then be provided for sale. The one or more creator computing systems 150 can include one or more processors 152, which can be utilized to execute one or more operations to implement the systems and methods disclosed herein. The one or more creator computing systems 150 can include one or more memory components 154, which can be utilized to store data 156 and one or more instructions 158. The data 156 can include data related to one or more applications, one or more media datasets, etc. The instructions 158 can include one or more operations for implementing the systems and methods disclosed herein.
[0106] The one or more creator computing systems 150 can store data associated with one or more digital assets 160 and/or one or more creator profiles 162. The one or more digital assets 160 can include text data, image data, video data, audio data, latent encoding data, domain data, or a variety of other data formats. The one or more creator profiles 162 can include information associated with one or more “creators” of the one or more digital assets 160. The one or more creator profiles 162 can include identification data, transaction data, and/or crypto wallet data.
[0107] Additionally and/or alternatively, the exemplary computing system 100 can include one or more blockchain computing systems 170. The one or more blockchain computing systems 170 can include a plurality of computing devices being utilized for decentralized data storage, such that a plurality of “blocks” can be distributed throughout a network of computing devices to provide a secure system for data storage, which can include one or more ledgers 172 and one or more tokens 174. In some implementations, each of the one or more tokens 174 can be associated with at least a portion of the one or more ledgers 172.
[0108] Blockchain can refer to a system configured to securely record information. The blockchain can include a decentralized system that can render changing information extremely difficult. The blockchain can include a digital ledger of transactions that can be duplicated and distributed across a network of computing systems. Each block in the chain can include a number of transactions. When a new transaction occurs on the blockchain, a record of that transaction can be added to every computing device’s ledger. The blockchain can be utilized to track the exchange of currency and/or digital assets via the recording of transactions on the digital ledger, which can be propagated throughout the decentralized system. The currency exchanged and tracked via the blockchain computing system 170 can be referred to as cryptocurrency.
[0109] The tokens 174 can include one or more non-fungible tokens. The non-fungible tokens can be minted on a blockchain associated with the blockchain computing system 170. A non-fungible token (NFT) can be a certificate of authenticity of a digital asset. NFTs can be non-interchangeable thus making their worth depend on the price anyone may be willing to pay for the asset. NFTs can be printed on blockchains such that their scarcity and authenticity can be maintained. A digital asset can be defined as anything that is stored digitally and can be uniquely identifiable that organizations can use to realize value. Examples of digital assets can include a tweet, a social media comment, documents, audio, images, videos, logos, website domains, slide presentations, spreadsheets, CSS files and formats, executable code, and/or websites.
[0110] Figure IB depicts a block diagram of an example blockchain 50 that may be utilized by the blockchain computing system 170 of the exemplary computing system 100 of Figure 1 A. The example blockchain 50 can include a plurality of blocks that can be utilized to store data with one or more cryptographic features. The blockchain 50 can be stored on a decentralized computing system comprising a plurality of computing devices. The blockchain 50 can be a public blockchain (e.g., a blockchain that is open without access restrictions such that anyone with an internet access can send transactions or validate transactions as part of the decentralized, distributed system), a private blockchain (e.g., a blockchain that provides access based on permissions set by network administrators), or a hybrid blockchain (e.g., a blockchain with a combination of blocks with no restrictions and blocks with restrictions). The blockchain 50 can include proof of work features that can include one or more cryptographic forms of proof. The proof of work can be provided upon a request to update the blockchain 50 (e.g., a request to update the ledgers based on a new transaction). The proof of work can convey that a certain device or group of devices have performed a certain amount of computation, which can then be validated by other parties. Once validated, the blockchain 50 can be updated, or may remain unchanged in response to a failure to validate. The proof of work feature can be utilized to mitigate the computational cost of every device in the system having to perform the same computational functions and checks for determining a request is valid for updating the blockchain 50.
[0111] Each block can include a hash, a previous hash associated with the hash of the previous block, and data. In some implementations, each block can include a nonce. A hash can be a hash value of a fixed length that can be a fingerprint for the particular block. The hash value can be generated based on a hash function and may be changed each time a change is made to the data of that particular block. The previous hash can include a hash
value of the block immediately preceding the particular block. The previous hash can be utilized to ensure the downstream ground truth stays unchanged unless proper validation occurs. The data can include transaction data (e.g., a transaction ledger), a timestamp, a value associated with a cryptocurrency value, anon-fungible token (e.g., anon-fungible token including a script that references a digital asset, nonce data, and/or general blockchain data. Nonce (i. e. , a number only used once) can be a number added to a block in a blockchain that can meet a difficulty level restriction when a block is rehashed. The nonce can be a number that blockchain miners are solving for, in order to receive an incentive (e.g., cryptocurrency). [0112] The blockchain 50 can include one or more security protocols and/or features. The blockchain 50 can include a cryptographic system. For example, the blockchain 50 can validate the blockchain 50 is valid by ensuring the stored previous hash stored in the block matches the hash value of the previous block from the last block back to the first block (e.g., the genesis block). In some implementations, the blockchain 50 can include proof of work validation that can rely on verifying proof of computation before implementing a change to the stored data (e.g., the stored ledger). Proof of work validation can take seconds, minutes, and/or hours based in part on the number of blocks in the blockchain 50. Additionally and/or alternatively, the blockchain 50 can be implemented on a distributed, decentralized computing system. In some implementations, each computing device in the distributed, decentralized computing system can store a portion of (e.g., a block of the plurality of blocks) or all of the blocks in the blockchain 50. Therefore, the system can verify data by ensuring the data is uniform across most, if not all, of the distributed system. Each node of the distributed system can be checked for tampering before adding new data.
[0113] The data can include data associated with a cryptocurrency value (e.g., a ledger associated with a specific cryptocurrency value), data associated with a digital asset (e.g., a non-fungible token minted on the blockchain 50 that can include a script associated with the digital asset), data associated with a smart contract (e.g., a smart contract that includes conditions that automatically initiates an action in response to a criteria being met), and/or timestamp data (e.g., timestamp data for block creation, minting, a transaction, etc.).
[0114] In particular, Figure IB depicts a first block 10, a second block 20, a third block 30, a fourth block 40, and an nth block 60. Although five blocks are depicted, any number of blocks can be utilized. The first block 10 can be a genesis block (e.g., a first overall block in the blockchain). The first block 10 can include a respective first hash 12 (e.g., a hash value associated with the first block 10). The first block 10 may include a first previous hash 14 (e.g., if the first block 10 has a block before it in the blockchain 50, then the hash of the
previous block can be stored on the first block 10). Additionally and/or alternatively, the first block 10 can include data 16 and nonce 18.
[0115] The second block 20 can follow the first block 10. The second block 20 can include a respective second hash 22 (e.g., a hash value associated with the second block 20). The second block 20 may include a second previous hash 24 (e.g., the second previous hash 24 can be the same as, or reference, the first hash 12). Additionally and/or alternatively, the second block 20 can include data 26 and nonce 28.
[0116] The third block 30 can follow the second block 20. The third block 30 can include a respective third hash 32 (e.g., a hash value associated with the third block 30). The third block 30 may include a third previous hash 34 (e.g., the third previous hash 34 can be the same as, or reference, the second hash 22). Additionally and/or alternatively, the third block 30 can include data 36 and nonce 38.
[0117] Additionally and/or alternatively, the fourth block 40, the nth block 60, and other potential blocks can include a respective hash, a respective previous hash, and data. The first data 16, the second data 26, the third data 36, and the data of the other blocks can include overlapping data, can differ, and/or be the same such that the data is duplicative for all blocks. In some implementations, each block can be associated with a different transaction (e.g., a different minting, a different sale, etc.). The first nonce 18, the second nonce 28, the third nonce 38, and the nonce’s of the other blocks can differ and may be solved during mining.
[0118] The data in each block can include ledger data, which can include a timestamp, asset and/or cryptocurrency exchanged, actors involved in transaction, and/or a variety of other information.
[0119] In some implementations, a plurality of different blockchains can be utilized for the systems and methods disclosed herein. The different blockchains can include different configurations. The different blockchains can include parallel chains, side chains, shared blocks, differing chains, varying permissions, varying purposes, varying number of blocks, and/or varying hash functions and/or varying hashing value lengths.
[0120] In some implementations, the systems and methods can include one or more machine-learned model computing systems 900. The one or more machine-learned models can be utilized for a variety of tasks for enabling token data identification, indexing, and deduplication.
[0121] Figure 9A depicts a block diagram of an example computing system 900 that performs token data identification, indexing, and deduplication according to example
embodiments of the present disclosure. The system 900 includes a user computing device 902, a server computing system 930, and a training computing system 950 that are communicatively coupled over a network 980.
[0122] The user computing device 902 can be any type of computing device, such as, for example, a personal computing device (e.g., laptop or desktop), a mobile computing device (e.g., smartphone or tablet), a gaming console or controller, a wearable computing device, an embedded computing device, or any other type of computing device.
[0123] The user computing device 902 includes one or more processors 912 and a memory 914. The one or more processors 912 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected. The memory 914 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof. The memory 914 can store data 916 and instructions 918 which are executed by the processor 912 to cause the user computing device 902 to perform operations. [0124] In some implementations, the user computing device 902 can store or include one or more token indexing models 920. For example, the token indexing models 920 can be or can otherwise include various machine-learned models such as neural networks (e.g., deep neural networks) or other types of machine-learned models, including non-linear models and/or linear models. Neural networks can include feed-forward neural networks, recurrent neural networks (e.g., long short-term memory recurrent neural networks), convolutional neural networks or other forms of neural networks. Example token indexing models 920 are discussed with reference to Figures 3 & 11.
[0125] In some implementations, the one or more token indexing models 920 can be received from the server computing system 930 over network 980, stored in the user computing device memory 914, and then used or otherwise implemented by the one or more processors 912. In some implementations, the user computing device 902 can implement multiple parallel instances of a single token indexing model 920 (e.g., to perform parallel token data indexing across multiple instances of token data descriptive of a non-fungible token).
[0126] More particularly, the token indexing model can include one or more detection models, one or more segmentation models, one or more classification models, and/or one or more feature extractor models. The token indexing model can process blockchain data and/or
web page data to generate index data descriptive of index information associated with one or more respective non-fungible tokens.
[0127] Additionally or alternatively, one or more token indexing models 940 can be included in or otherwise stored and implemented by the server computing system 930 that communicates with the user computing device 902 according to a client-server relationship. For example, the token indexing models 940 can be implemented by the server computing system 940 as a portion of a web service (e.g., a token indexing service). Thus, one or more models 920 can be stored and implemented at the user computing device 902 and/or one or more models 940 can be stored and implemented at the server computing system 930.
[0128] The user computing device 902 can also include one or more user input components 922 that receive user input. For example, the user input component 922 can be a touch-sensitive component (e.g., a touch-sensitive display screen or a touch pad) that is sensitive to the touch of a user input object (e.g., a finger or a stylus). The touch-sensitive component can serve to implement a virtual keyboard. Other example user input components include a microphone, a traditional keyboard, or other means by which a user can provide user input.
[0129] The server computing system 930 includes one or more processors 932 and a memory 934. The one or more processors 932 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected. The memory 934 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof. The memory 934 can store data 936 and instructions 938 which are executed by the processor 932 to cause the server computing system 930 to perform operations.
[0130] In some implementations, the server computing system 930 includes or is otherwise implemented by one or more server computing devices. In instances in which the server computing system 930 includes plural server computing devices, such server computing devices can operate according to sequential computing architectures, parallel computing architectures, or some combination thereof.
[0131] As described above, the server computing system 930 can store or otherwise include one or more machine-learned token indexing models 940. For example, the models 940 can be or can otherwise include various machine-learned models. Example machine- learned models include neural networks or other multi-layer non-linear models. Example
neural networks include feed forward neural networks, deep neural networks, recurrent neural networks, and convolutional neural networks. Example models 940 are discussed with reference to Figures 3 & 11.
[0132] The user computing device 902 and/or the server computing system 930 can train the models 920 and/or 940 via interaction with the training computing system 950 that is communicatively coupled over the network 980. The training computing system 950 can be separate from the server computing system 930 or can be a portion of the server computing system 930.
[0133] The training computing system 950 includes one or more processors 952 and a memory 954. The one or more processors 952 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected. The memory 954 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof. The memory 954 can store data 956 and instructions 958 which are executed by the processor 952 to cause the training computing system 950 to perform operations. In some implementations, the training computing system 950 includes or is otherwise implemented by one or more server computing devices.
[0134] The training computing system 950 can include a model trainer 960 that trains the machine-learned models 920 and/or 940 stored at the user computing device 902 and/or the server computing system 930 using various training or learning techniques, such as, for example, backwards propagation of errors. For example, a loss function can be backpropagated through the model(s) to update one or more parameters of the model(s) (e.g., based on a gradient of the loss function). Various loss functions can be used such as mean squared error, likelihood loss, cross entropy loss, hinge loss, and/or various other loss functions. Gradient descent techniques can be used to iteratively update the parameters over a number of training iterations.
[0135] In some implementations, performing backwards propagation of errors can include performing truncated backpropagation through time. The model trainer 960 can perform a number of generalization techniques (e.g., weight decays, dropouts, etc.) to improve the generalization capability of the models being trained.
[0136] In particular, the model trainer 960 can train the token indexing models 920 and/or 940 based on a set of training data 962. The training data 962 can include, for
example, training blockchain data, training web page data, training transaction data, ground truth labels, ground truth index information, and/or ground truth segmentation masks.
[0137] In some implementations, if the user has provided consent, the training examples can be provided by the user computing device 902. Thus, in such implementations, the model 920 provided to the user computing device 902 can be trained by the training computing system 950 on user-specific data received from the user computing device 902. In some instances, this process can be referred to as personalizing the model.
[0138] The model trainer 960 includes computer logic utilized to provide desired functionality. The model trainer 960 can be implemented in hardware, firmware, and/or software controlling a general purpose processor. For example, in some implementations, the model trainer 960 includes program files stored on a storage device, loaded into a memory and executed by one or more processors. In other implementations, the model trainer 960 includes one or more sets of computer-executable instructions that are stored in a tangible computer-readable storage medium such as RAM hard disk or optical or magnetic media. [0139] The network 980 can be any type of communications network, such as a local area network (e.g., intranet), wide area network (e.g., Internet), or some combination thereof and can include any number of wired or wireless links. In general, communication over the network 980 can be carried via any type of wired and/or wireless connection, using a wide variety of communication protocols (e.g., TCP/IP, HTTP, SMTP, FTP), encodings or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL).
[0140] The machine-learned models described in this specification may be used in a variety of tasks, applications, and/or use cases.
[0141] In some implementations, the input to the machine-learned model(s) of the present disclosure can be image data. The machine-learned model(s) can process the image data to generate an output. As an example, the machine-learned model(s) can process the image data to generate an image recognition output (e.g., a recognition of the image data, a latent embedding of the image data, an encoded representation of the image data, a hash of the image data, etc.). As another example, the machine-learned model(s) can process the image data to generate an image segmentation output. As another example, the machine- learned model(s) can process the image data to generate an image classification output. As another example, the machine-learned model(s) can process the image data to generate an image data modification output (e.g., an alteration of the image data, etc.). As another example, the machine-learned model(s) can process the image data to generate an encoded image data output (e.g., an encoded and/or compressed representation of the image data, etc.).
As another example, the machine-learned model(s) can process the image data to generate a prediction output.
[0142] In some implementations, the input to the machine-learned model(s) of the present disclosure can be text or natural language data. The machine-learned model(s) can process the text or natural language data to generate an output. As an example, the machine- learned model(s) can process the natural language data to generate a language encoding output. As another example, the machine-learned model(s) can process the text or natural language data to generate a latent text embedding output. As another example, the machine- learned model(s) can process the text or natural language data to generate a classification output. As another example, the machine-learned model(s) can process the text or natural language data to generate a textual segmentation output. As another example, the machine- learned model(s) can process the text or natural language data to generate a semantic intent output. As another example, the machine-learned model(s) can process the text or natural language data to generate an upscaled text or natural language output (e.g., text or natural language data that is higher quality than the input text or natural language, etc.). As another example, the machine-learned model(s) can process the text or natural language data to generate a prediction output.
[0143] In some implementations, the input to the machine-learned model(s) of the present disclosure can be speech data. The machine-learned model(s) can process the speech data to generate an output. As an example, the machine-learned model(s) can process the speech data to generate a speech recognition output. As another example, the machine- learned model(s) can process the speech data to generate a speech translation output. As another example, the machine-learned model(s) can process the speech data to generate a latent embedding output. As another example, the machine-learned model(s) can process the speech data to generate an encoded speech output (e.g., an encoded and/or compressed representation of the speech data, etc.). As another example, the machine-learned model(s) can process the speech data to generate a textual representation output (e.g., a textual representation of the input speech data, etc.). As another example, the machine-learned model(s) can process the speech data to generate a prediction output.
[0144] In some implementations, the input to the machine-learned model(s) of the present disclosure can be latent encoding data (e.g., a latent space representation of an input, etc.). The machine-learned model(s) can process the latent encoding data to generate an output. As an example, the machine-learned model(s) can process the latent encoding data to generate a recognition output. As another example, the machine-learned model(s) can process
the latent encoding data to generate a reconstruction output. As another example, the machine-learned model(s) can process the latent encoding data to generate a search output. As another example, the machine-learned model(s) can process the latent encoding data to generate a reclustering output. As another example, the machine-learned model(s) can process the latent encoding data to generate a prediction output.
[0145] In some implementations, the input to the machine-learned model(s) of the present disclosure can be statistical data. The machine-learned model(s) can process the statistical data to generate an output. As an example, the machine-learned model(s) can process the statistical data to generate a recognition output. As another example, the machine- learned model(s) can process the statistical data to generate a prediction output. As another example, the machine-learned model(s) can process the statistical data to generate a classification output. As another example, the machine-learned model(s) can process the statistical data to generate a segmentation output. As another example, the machine-learned model(s) can process the statistical data to generate a segmentation output. As another example, the machine-learned model(s) can process the statistical data to generate a visualization output. As another example, the machine-learned model(s) can process the statistical data to generate a diagnostic output.
[0146] In some cases, the machine-learned model(s) can be configured to perform a task that includes encoding input data for reliable and/or efficient transmission or storage (and/or corresponding decoding). For example, the task may be audio compression task. The input may include audio data and the output may comprise compressed audio data. In another example, the input includes visual data (e.g., one or more images or videos), the output comprises compressed visual data, and the task is a visual data compression task. In another example, the task may comprise generating an embedding for input data (e.g., input audio or visual data).
[0147] In some cases, the input includes visual data, and the task is a computer vision task. In some cases, the input includes pixel data for one or more images and the task is an image processing task. For example, the image processing task can be image classification, where the output is a set of scores, each score corresponding to a different object class and representing the likelihood that the one or more images depict an object belonging to the object class. The image processing task may be object detection, where the image processing output identifies one or more regions in the one or more images and, for each region, a likelihood that region depicts an object of interest. As another example, the image processing task can be image segmentation, where the image processing output defines, for each pixel in
the one or more images, a respective likelihood for each category in a predetermined set of categories. For example, the set of categories can be foreground and background. As another example, the set of categories can be object classes. As another example, the image processing task can be depth estimation, where the image processing output defines, for each pixel in the one or more images, a respective depth value. As another example, the image processing task can be motion estimation, where the network input includes multiple images, and the image processing output defines, for each pixel of one of the input images, a motion of the scene depicted at the pixel between the images in the network input.
[0148] In some cases, the input includes audio data representing a spoken utterance and the task is a speech recognition task. The output may comprise a text output which is mapped to the spoken utterance. In some cases, the task comprises encrypting or decrypting input data. In some cases, the task comprises a microprocessor performance task, such as branch prediction or memory address translation.
[0149] Figure 9A illustrates one example computing system that can be used to implement the present disclosure. Other computing systems can be used as well. For example, in some implementations, the user computing device 902 can include the model trainer 960 and the training dataset 962. In such implementations, the models 920 can be both trained and used locally at the user computing device 902. In some of such implementations, the user computing device 902 can implement the model trainer 960 to personalize the models 920 based on user-specific data.
[0150] Figure 9B depicts a block diagram of an example computing device 970 that performs according to example embodiments of the present disclosure. The computing device 970 can be a user computing device or a server computing device.
[0151] The computing device 970 includes a number of applications (e.g., applications 1 through N). Each application contains its own machine learning library and machine-learned model(s). For example, each application can include a machine-learned model. Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc.
[0152] As illustrated in Figure 9B, each application can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components. In some implementations, each application can communicate with each device component using an API (e.g., a public API). In some implementations, the API used by each application is specific to that application.
[0153] Figure 9C depicts a block diagram of an example computing device 990 that performs according to example embodiments of the present disclosure. The computing device 990 can be a user computing device or a server computing device.
[0154] The computing device 990 includes a number of applications (e.g., applications 1 through N). Each application is in communication with a central intelligence layer. Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc. In some implementations, each application can communicate with the central intelligence layer (and model(s) stored therein) using an API (e.g., a common API across all applications).
[0155] The central intelligence layer includes a number of machine-learned models. For example, as illustrated in Figure 9C, a respective machine-learned model (e.g., a model) can be provided for each application and managed by the central intelligence layer. In other implementations, two or more applications can share a single machine-learned model. For example, in some implementations, the central intelligence layer can provide a single model (e.g., a single model) for all of the applications. In some implementations, the central intelligence layer is included within or otherwise implemented by an operating system of the computing device 990.
[0156] The central intelligence layer can communicate with a central device data layer. The central device data layer can be a centralized repository of data for the computing device 990. As illustrated in Figure 9C, the central device data layer can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components. In some implementations, the central device data layer can communicate with each device component using an API (e.g., a private API).
Example System Arrangements
[0157] Figure 2 depicts a block diagram of an example token index deduplication 1000 according to example embodiments of the present disclosure. In some implementations, the example token index deduplication 1000 can be configured to receive a plurality of index datasets 1002 descriptive of token data for a plurality of non-fungible tokens and, as a result of receipt of the plurality of index datasets 1002, provide an updated index database 1014 that is adjusted based on the determined duplication. Thus, in some implementations, the token index deduplication 1000 can include duplicate determination block 1004 that is operable to determine which index datasets are associated with one another.
[0158] In particular, Figure 2 depicts a plurality of index datasets 1002 being processed to determine a plurality of duplicate index datasets. For example, the plurality of index datasets 1002 can be processed with a duplicate determination block 1004 to determine plurality of duplicates including a first duplicate 1006, a second duplicate 1008, and an nth duplicate 1010. The determination can be based on digital resources (e.g., digital assets) of different identified tokens being the same (e.g., match and/or within a threshold similarity). [0159] The plurality of duplicates (e.g., the first duplicate 1006, the second duplicate 1008, and/or the nth duplicate 1010) can be processed with an authenticity determination block 1012 to generate validation data. The validation data can include a determined authenticity of each of the duplicate index datasets. The authenticity can include analyzing the source of the data, the mint date, the quality of the associated digital resource, and/or the publisher.
[0160] The validation data can be utilized to adjust an index database to generate the updated index database 1014. Adjusting the index database can include removing a particular index dataset. For example, the index dataset generated based on the data obtained directly from the blockchain may be kept while the index dataset generated based on the data obtained from a web page may be removed. Alternatively and/or additionally, the index dataset determined to be fraudulent may be removed (e.g., the non-fungible token data may be obtained from or reference to a scam website).
[0161] Alternatively and/or additionally, adjusting the index database can include merging the duplicate index datasets. In some implementations, adjusting the index database can include adding data to the existing index datasets. The added data can include references to the other duplicates, one or more tags indicating the duplicate nature, and/or one or more weights associated with the determined authenticity.
[0162] Figure 3 depicts a block diagram of an example index validity determination 1100 according to example embodiments of the present disclosure. In particular, the index validity determination 1100 of Figure 3 includes duplication data 1102 that can be processed to generate validation data 1122. The duplication data 1102 can be descriptive of one or more index datasets associated with one or more non-fungible tokens. The duplication data 1102 can be descriptive of two or more indexed non-fungible tokens being the same (e.g., match or substantially similar). For example, a first index dataset can be descriptive of a first non- fungible token associated with a first digital resource (e.g., a first digital asset that is a payload for the first non-fungible token). A second index dataset can be descriptive of a second non-fungible token associated with a second digital resource (e.g., a second digital
asset that is a payload for the second non-fungible token). In some implementations, the first non-fungible token and the second non-fungible token can be the same non-fungible token which was indexed twice due to data being obtained from multiple sources that contain data associated with the non-fungible token. Alternatively and/or additionally, the first non- fungible token and the second non-fungible token can differ, and the first digital resource and the second digital resource may be the same (e.g., the digital assets may match and/or may include similar data with slight differences (e.g., the same scene being depicted with differing resolution and/or differing color saturation)).
[0163] The duplication data 1102 can be processed 1110 to generate validation data 1122. Processing 1110 the duplication data 1102 can include obtaining and processing transaction data 1112 associated with each of the duplicate index datasets. The transaction data 1112 can be processed to determine whether any of the duplicates are associated with fraudulent transactions and/or fraudulent transactional trends. In some implementations, the transaction data 1112 can be processed to determine the more trendy and/or popular duplicate. Additionally and/or alternatively, the transaction data 1112 can be processed to determine different actors in the transactions that may be indicative of a non-fungible token’s validity. Price data may also be derived from the transaction data 1112 and can be utilized for index data validity. In some implementations, the price data can be obtained from a web page (e.g., a marketplace).
[0164] Additionally and/or alternatively, source data 1114, URL and/or URI data 1116, and/or mint date data 1120 may be processed to determine a validity of each of the duplicates. For example, the source data 1114 can be processed to determine which duplicates are derived from data of a trustworthy source. In particular, index data generated based on data directly obtained from a blockchain can be prioritized over index data generated based on data from an untrustworthy website (e.g., a website flagged as spam by one or more spam filters). In some implementations, the URL and/or URI data 1116 referencing the digital resource (e.g., the digital asset) can be processed to determine if a digital resource is available, has been changed, has been upscaled, and/or has been moved. If the link is dead, the duplicate may be viewed as invalid. If the address has been changed, the validity may be put in question. Upscaling and movement can be a positive factor if the digital resource has not experienced a change that changes the nature of the digital resource. Additionally and/or alternatively, the mint date data 1120 can be utilized to determine which duplicate was published first, which can provide insight on possible non-fungible token validity.
[0165] In some implementations, one or more other fraud detection 1118 techniques may be utilized to generate the validation data 1122.
[0166] The validation data 1122 can include data descriptive of a determined validity (and/or authenticity) of each of the respective duplicate index datasets. The validation data 1122 can include one or more tags, labels, and/or annotations descriptive of determined factors that are descriptive of an index dataset validity.
[0167] Figure 4 depicts a block diagram of an example token index deduplication 1200 according to example embodiments of the present disclosure. In some implementations, the example token index deduplication 1200 can be configured to receive a plurality of index datasets 1202 descriptive of token data for a plurality of non-fungible tokens and, as a result of receipt of the plurality of index datasets 1202, provide an updated index database 1214 that is adjusted based on the determined duplication. Thus, in some implementations, the token index deduplication 1200 can include duplicate determination block 1204 that is operable to determine which index datasets are associated with one another.
[0168] In particular, Figure 4 depicts a plurality of index datasets 1202 being processed to determine a plurality of duplicate index datasets. For example, the plurality of index datasets 1202 can be processed with a duplicate determination block 1204 to determine plurality of duplicates including a first duplicate 1206, a second duplicate 1208, and an nth duplicate 1210. The determination can be based on digital resources of different identified tokens being the same (e.g., match and/or within a threshold similarity).
[0169] The plurality of duplicates (e.g., the first duplicate 1206, the second duplicate 1208, and/or the nth duplicate 1210) can be processed with an authenticity determination block 1212 to generate validation data. The validation data can include a determined authenticity of each of the duplicate index datasets. The authenticity can include analyzing the source of the data, the mint date, the quality of the associated digital resource, and/or the publisher.
[0170] The validation data can be utilized to adjust an index database to generate the updated index database. Adjusting the index database can include keeping 1214 one or more of the duplicate index datasets, merging 1216 one or more of the duplicate index datasets, and/or removing 1218 one or more of the duplicate datasets.
[0171] One or more of the duplicate index datasets can be kept 1214 in order to ensure at least one of the non-fungible tokens associated with a particular digital resource is maintained for search purposes. The particular index dataset that is kept 1214 can be determined based on the source of the data, a determined authenticity (or validity), transaction data of one or
more of the duplicates, the hosting location of the digital resource, the quality of the digital resource, the mint time, and/or metadata for the one or more duplicates.
[0172] Alternatively and/or additionally, adjusting the index database can include merging 1216 the duplicate index datasets. In some implementations, certain duplicate index datasets can be selected for merging 1216. Merging 1216 the duplicate index datasets can include adding any non-duplicative data to one of the duplicate datasets and deleting the other duplicate index dataset. For example, an index dataset generated based on data obtained directly from a blockchain can be complemented with data from an index dataset generated based on a web page, which can include descriptions of the digital resource, the author, and/or other data not stored directly on the blockchain. In some implementations, adjusting the index database can include adding data to the existing index datasets. The added data can include references to the other duplicates, one or more tags indicating the duplicate nature, and/or one or more weights associated with the determined authenticity.
[0173] Adjusting the index database can include removing 1218 a particular index dataset. For example, the index dataset generated based on the data obtained directly from the blockchain may be kept 1214 while the index dataset generated based on the data obtained from a web page may be removed 1218. Alternatively and/or additionally, the index dataset determined to be fraudulent may be removed 1218 (e.g., the non-fungible token data may be obtained from or reference to a scam website).
[0174] Figure 5 depicts a block diagram of an example search results page generation 1300 according to example embodiments of the present disclosure. In some implementations, the systems and methods can receive a search query 1302. The search query 1302 can include one or more search terms, one or more input images, and/or one or more other inputs. In some implementations, the search query 1302 can be received from a user computing system associated with a user.
[0175] The search query 1302 can be processed by a search engine to determine a plurality of search results 1304. The plurality of search results can be determined based on a determined responsiveness to the search query 1302. The plurality of search results can be processed by a ranking block 1306 to determine an order of display for the plurality of search results. Additionally and/or alternatively, the plurality of search results can be processed to determine whether to provide a warning or badge 1308 with one or more of the search results. For example, if one or more of the search results are non-fungible token search results, a badge indicating the type of search result may be provided. Additionally and/or alternatively, validation data associated with each of the respective non-fungible token search results may
be provided via a warning or via a badge. In some implementations, a warning may be provided if a search result is indicative of a duplicate non-fungible token.
[0176] The plurality of search results can be ranked by the ranking block 1306 based on a determined relevance, determined authenticity, and/or a determined context of each of the plurality of search results. A search results page 1310 can then be generated and provided based on the ranked search results and the determined warnings and badges.
[0177] Figure 10 depicts a block diagram of an example indexing system 200 according to example embodiments of the present disclosure. In some implementations, the indexing system 200 is configured to receive blockchain data 202 descriptive of a blockchain that stores data associated with a plurality of non-fungible tokens and, as a result of receipt of the input data 202, provide output data 220 that is descriptive of a plurality of index datasets associated with the plurality of non-fungible tokens. Thus, in some implementations, the indexing system 200 can include one or more models and/or one or more functions for identifying token data and extracting relevant information for generating index data.
[0178] In particular, the example indexing system 200 can include obtaining blockchain data 202 associated with a blockchain. The blockchain data 202 can include code for the blockchain. Additionally and/or alternatively, the blockchain data 202 can include script data (e.g., data descriptive of script that can be deployed to interact with smart contract code of the blockchain data 202) associated with a plurality of non-fungible tokens.
[0179] The blockchain data 202 can be processed to identify first token data for a first non-fungible token 204, second token data for a second non-fungible token 206, third token data for a third non-fungible token 208, and nth token data for a nth non-fungible token 210. Identifying the token data sets can involve parsing the blockchain data and determining if each parsed segment is associated with one or more non-fungible token characteristics. Alternatively and/or additionally, identifying the token data can include crawling the blockchain data to search for particular characteristics, structure, and/or features associated with token data.
[0180] The first token data associated with the first non-fungible token 204 can be processed to generate first index data 212 associated with the first non-fungible token 204. The second token data associated with the second non-fungible token 206 can be processed to generate second index data 214 associated with the second non-fungible token 206. The third token data associated with the third non-fungible token 208 can be processed to generate third index data 216 associated with the third non-fungible token 208. The nth token data
associated with the nth non-fungible token 210 can be processed to generate nth index data 218associated with the nth non-fungible token 210.
[0181] The first index data 212, the second index data 214, the third index data 216, and the nth index data 218 can be stored in an index database 220, which can then be utilized for various tasks (e.g., non-fungible token search). The index datasets can include index information associated with a plurality of index item fields. The index datasets can include a title of the non-fungible token, a reference to the digital resource payload, descriptors, and/or a variety of other index items for annotating and/or characterizing aspects of the non-fungible token which may be searched.
[0182] Figure 11 depicts a block diagram of an example index dataset 300 according to example embodiments of the present disclosure. In some implementations, index data 310 can be generated based on blockchain data and/or web page data 326. The blockchain data can be processed to identify a subset of the blockchain data that is descriptive of token data 302. The token data 302 can be processed to determine one or more index items for the index data 310 generation. Additionally and/or alternatively, web page data 326 associated with the same or related non-fungible token to the non-fungible token associated with the token data 302 can be utilized to determine one or more additional index items for one or more index item fields.
[0183] Additionally and/or alternatively, the token data 302 and/or the web page data 326 can be processed with one or more machine-learned models 324 to generate one or more outputs that can be utilized as index items for the index data 310. Alternatively and/or additionally, the input data for the one or more machine-learned models 324 can be obtained from other data sources. In some implementations, the index data 310 can include data descriptive of the blockchain 312 the non-fungible token is minted on. The index data 310 can include a reference 314 to the digital resource (e.g., a URI), time data 316 (e.g., a minting time, a first digital resource publication times, and/or a time difference between the two times), transaction data 318 (e.g., purchase times, amount of acquisitions, frequency of acquisitions, identities of purchasers and bidders, and/or auction event data), metadata 320 (e.g., stored by the blockchain, marketplace, and/or another data source), other machine- learned data 322, and/or other derived data.
[0184] Figure 12 depicts a block diagram of an example search 400 according to example embodiments of the present disclosure. The example search 400 can include receiving a search query 402. The search query 402 can include one or more words, one or more images, and/or one or more other forms of input. The search query 402 can be
processed by a search engine 404 which can then access a non-fungible token index database 406 to determine one or more non-fungible token search results 410 responsive to the search query 402. Additionally and/or alternatively, the search query 402 can be processed by the search engine 404 which can then access a web database 408 to determine one or more general web results 412 responsive to the search query 402. The one or more non-fungible token search results 410 and/or the one or more general web results 412 can be utilized to generate a search results page 414. The search results page 414 can then be provided for display.
[0185] Figures 13A - 13C depict different example search result page configurations. Although three configurations are depicted, other variations may be utilized to provide search results for display. The different variations depicted can include a search interface 502, which can include a search query input box 504, one or more non-fungible token search results (e.g., a first non-fungible token search result 510, a second non-fungible token search result 512, a third non-fungible token search result 514, and/or a fourth non-fungible token search result 516), one or more general web results (e.g., a first general web result 520, a second general web result 522, a third general web result 524, and/or a fourth general web result 526), and/or a knowledge panel 506. The search query input box 504 can be configured to receive and/or display one or more search queries. The one or more non-fungible token search results and the one or more general web results can be determined and provided based on a determined responsiveness to an input search query. Additionally and/or alternatively, the knowledge panel 506 can include structured data associated with a topic determined to be responsive to an input query.
[0186] Figure 13A depicts an illustration of an example search results page 500 according to example embodiments of the present disclosure. The example search results page 500 includes the search query input box 504 displayed at the top of the search interface 502 with a knowledge panel 506 displayed in a side panel of the search interface 502. Additionally, the example search results page 500 includes a non-fungible token search results portion, which displays the one or more non-fungible token search results (e.g., a first non-fungible token search result 510, a second non-fungible token search result 512, a third non-fungible token search result 514, and/or a fourth non-fungible token search result 516). The example search results page 500 can include a separate general web results portion, which can display the one or more general web results (e.g., a first general web result 520, a second general web result 522, a third general web result 524, and/or a fourth general web result 526). Additionally and/or alternatively, the one or more non-fungible token search
results and the one or more general web results can be provided in different formats (e.g., the non-fungible token search results can be provided with image thumbnails while the general web results can be displayed with only text).
[0187] Figure 13B depicts an illustration of an example search results page 540 according to example embodiments of the present disclosure. The example search results page 540 includes the search query input box 504 displayed at the top of the search interface 502 with a knowledge panel 506 displayed in a side panel of the search interface 502. The example search results page 540 can include the one or more non-fungible token search results (e.g., a first non-fungible token search result 510, a second non-fungible token search result 512, a third non-fungible token search result 514, and/or a fourth non-fungible token search result 516) and the one or more general web results (e.g., a first general web result 520, a second general web result 522, a third general web result 524, and/or a fourth general web result 526) can be displayed in an intermingled format, such that the different types of search results may be adjacent to one another. The order may be determined based on a determined score based on a responsiveness to a search query and/or based on other factors. The ordering may be based purely on score without preference to the type of result.
[0188] Figure 13C depicts an illustration of an example search results page 580 according to example embodiments of the present disclosure. The example search results page 580 can include both the one or more non-fungible token search results (e.g., a first non- fungible token search result 510, a second non-fungible token search result 512, a third non- fungible token search result 514, and/or a fourth non-fungible token search result 516) and the one or more general web results (e.g., a first general web result 520, a second general web result 522, a third general web result 524, and/or a fourth general web result 526) can be provided for display with media content item previews.
Example Methods
[0189] Figure 6 depicts a flow chart diagram of an example method to perform according to example embodiments of the present disclosure. Although Figure 6 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particularly illustrated order or arrangement. The various steps of the method 600 can be omitted, rearranged, combined, and/or adapted in various ways without deviating from the scope of the present disclosure.
[0190] At 602, a computing system can obtain blockchain data from a blockchain computing system and can determine the blockchain data includes first token data. The
blockchain data can be associated with a particular blockchain and/or from a plurality of blockchains. Additionally and/or alternatively, the blockchain data can be obtained from a blockchain node. In some implementations, the blockchain computing system can include a decentralized, distributed computing system that stores data associated with a plurality of non-fungible tokens and a plurality of transactions associated with the non-fungible tokens. [0191] The first token data can be descriptive of a first non-fungible token associated with a first digital resource. In some implementations, the blockchain computing system can include a distributed computing system including a plurality of computing devices. The blockchain data can include embedded code associated with a plurality of non-fungible tokens. In some implementations, determining the blockchain data includes first token data can include crawling embedded code. The blockchain data can include the embedded code. Alternatively and/or additionally, the blockchain data can be processed to identify one or more code characteristics indicative of a non-fungible token (e.g., EIP compliant structure). In some implementations, the blockchain data can be parsed into segments that can be individually processed to determine if the segment includes non-fungible token data. [0192] At 604, the computing system can generate first index data based on the first token data. The first index data can be stored in an index database. The first token data can include data descriptive of the payload (e.g., the digital resource associated with the non- fungible token). In some implementations, the first token data can include data descriptive of the non-fungible token’s creator/publisher, description of the digital resource, mint time, transaction data associated with the non-fungible token, the particular blockchain associated with the non-fungible token, a digital resource type, a determined likelihood of fraudulence score, and/or one or more determined tags.
[0193] At 606, the computing system can obtain web page data from a digital web platform user interface and can determine the web page data includes second token data. In some implementations, the web page data can include a snapshot of a marketplace webpage associated with the second non-fungible token. The digital web platform user interface can be provided by a web platform computing system (e.g., a marketplace computing system) that hosts a non-fungible token marketplace for selling and displaying non-fungible tokens. Alternatively and/or additionally, a leaf page can be obtained from a website associated with non-fungible tokens. The leaf page can be processed to generate the web page data.
[0194] The second token data can be descriptive of a second non-fungible token associated with a second digital resource. In some implementations, the second digital resource can depict an augmented version of a scene depicted in the first digital resource. In
some implementations, the second digital resource can depict an augmented version of a scene depicted in the first digital resource.
[0195] At 608, the computing system can generate second index data based on the second token data. The second index data can be stored in the index database. The second index data can include data descriptive of the non-fungible token’s creator/publisher, description of the digital resource, mint time, transaction data associated with the non- fungible token, the particular blockchain associated with the non-fungible token, a digital resource type, a determined likelihood of fraudulence score, and/or one or more determined tags.
[0196] At 610, the computing system can determine the first digital resource and the second digital resource are a same digital resource. The determination can be based on determining the first digital resource of the first non-fungible token and determining the second digital resource of the second non-fungible token. The first digital resource and the second digital resource can be compared to determine similar and/overlapping data. The determination can include image processing, text processing, audio processing, video processing, and/or latent encoding processing. In some implementations, the determination can include processing the first digital resource and the second digital resource with one or more machine-learned models (e.g., an image classification model, an audio classification model, a video classification model, an object detection model, a feature extractor model, and/or one or more recognition models).
[0197] At 612, the computing system can adjust the index database based on the first digital resource and the second digital resource being a same digital resource. The particular type of adjustment may be based on the transaction data of the non-fungible tokens, the source of the token data, and/or a variety of other factors.
[0198] In some implementations, adjusting the index database based on the first digital resource and the second digital resource being the same digital resource can include removing the second index data from the index database.
[0199] Alternatively and/or additionally, adjusting the index database based on the first digital resource and the second digital resource being the same digital resource can include merging the first index data and the second index data to generate augmented index data.
[0200] Alternatively and/or additionally, adjusting the index database based on the first digital resource and the second digital resource being the same digital resource can include adjusting a first text entry associated with the first index data based on the first digital resource and the second digital resource being the same digital resource.
[0201] Alternatively and/or additionally, adjusting the index database based on the first digital resource and the second digital resource being the same digital resource can include adjusting a second text entry associated with the second index data based on the first digital resource and the second digital resource being the same digital resource. In some implementations, the second index entry can be stored in the index database.
[0202] Figure 7 depicts a flow chart diagram of an example method to perform according to example embodiments of the present disclosure. Although Figure 7 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particularly illustrated order or arrangement. The various steps of the method 700 can be omitted, rearranged, combined, and/or adapted in various ways without deviating from the scope of the present disclosure.
[0203] At 702, a computing system can generate a plurality of first index entries for an index database based on crawling a blockchain. The plurality of first index entries can include a plurality of first index datasets associated with a plurality of first non-fungible tokens.
[0204] At 704, the computing system can generate a plurality of second index entries for the index database based on crawling a digital web platform (e.g., a digital marketplace). The digital web platform (e.g., the digital marketplace) can include a user interface for providing a plurality of non-fungible tokens for sale. The plurality of second index entries can include a plurality of second index datasets associated with a plurality of second non-fungible tokens. [0205] At 706, the computing system can determine a particular first index entry of the plurality of first index entries is associated with a particular second index entry of the plurality of second index entries. The determination can include comparing each of the plurality of first index entries with each of the plurality of second index entries. The comparison can include obtaining a plurality of first digital resources associated with the plurality of first index entries. Additionally and/or alternatively, the comparison can include obtaining a plurality of second digital resources associated with the plurality of second index entries. Each of the plurality of first digital resources can be compared to each of the plurality of second digital resources. The comparison can include processing the digital resources with one or more machine-learned models to determine if and/or which digital resources are the same (e.g., match and/or within a threshold similarity).
[0206] In some implementations, the first payload can include a first digital resource. The second payload can include a second digital resource. In some implementations, the first digital resource and the second digital resource can match and/or be similar.
[0207] In some implementations, determining the particular first index entry of the plurality of first index entries is associated with the particular second index entry of the plurality of second index entries can include determining a first payload associated with a first non-fungible token is same as a second payload associated with a second non-fungible token. The first non-fungible token can be associated with the particular first index entry. In some implementations, the second non-fungible token can be associated with the particular second index entry.
[0208] At 708, the computing system can adjust the index database in response to determining the particular first index entry is associated with the particular second index entry. Adjusting the index database can include merging index entries, removing index entries, and/or adding tags to each of the index entries determined to be duplicative.
[0209] Figure 8 depicts a flow chart diagram of an example method to perform according to example embodiments of the present disclosure. Although Figure 8 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particularly illustrated order or arrangement. The various steps of the method 800 can be omitted, rearranged, combined, and/or adapted in various ways without deviating from the scope of the present disclosure.
[0210] At 802, a computing system can obtain a particular index entry and a plurality of index entries. The plurality of index entries can be obtained from an index database. In some implementations, the plurality of index entries can include one or more index entries obtained by extracting data from a blockchain. The plurality of index entries can include one or more index entries obtained by extracting data from a non-fungible token marketplace.
[0211] At 804, the computing system can process the particular index entry and the plurality of index entries to generate duplication data. The duplication data can be descriptive of whether one or more different index entries of the plurality of index entries are associated with a digital resource associated with the particular index entry.
[0212] At 806, the computing system can generate validation data based at least in part on the duplication data. The validation data can be associated with an authenticity of a non- fungible token associated with the particular index entry. In some implementations, the validation data can be based at least in part on a timestamp associated with the particular index entry. The validation data can be descriptive of whether the non-fungible token was minted at least one of before another publication of the digital resource.
[0213] In some implementations, generating the validation data based at least in part on the duplication data can include determining the particular index entry is authentic by
determining the particular index entry is associated with a first minting of the digital resource. The determination can be based on transaction data, mint times, publication times, particular blockchains, source of token data, the payload URI data, and/or digital resource quality. The validation may be generated with one or more machine-learned models.
[0214] At 808, the computing system can provide the validation data as an output. The validation data can be provided via one or more user-interface elements (e.g., banners, pop- ups, user-interface labels, and/or user-interface annotations). In some implementations, the validation data can be provided for display adjacent to a preview of the digital resource.
Example Indexing and Uses
[0215] The systems and methods disclosed herein can identify data associated with non- fungible tokens in a blockchain (e.g., in the code of a blockchain). For example, a plurality of non-fungible tokens can be identified and indexed based on a plurality of techniques. One technique can include analyzing (e.g., crawling) a blockchain to identify data associated with a non-fungible token. The data can then be parsed to determine identifiable data that can be indexed. Another technique can include analyzing (e.g., crawling) a non-fungible token marketplace to identify non-fungible tokens for sale. Data related to the non-fungible tokens can then be obtained and indexed. In some implementations, multiple techniques can be utilized for generating a more encompassing database for search.
[0216] The systems and methods disclosed herein can include obtaining blockchain data from a blockchain computing system. The blockchain data can include one or more function signatures. In some implementations, the blockchain data can include script data associated with a digital asset. A particular portion (e.g., a subset) of the blockchain data can be determined to include token data. The token data can be descriptive of a non-fungible token associated with a digital asset. Index data can be generated based on the token data. The index data can include information obtained from the blockchain data. In some implementations, the index data can be associated with the digital asset. The index data can then be stored in an index database. The index database can then be utilized for a variety of purposes (e.g., non-fungible token search, data aggregation and analysis, training data for a machine-learned model, and/or for generating statistical representations).
[0217] The systems and methods can obtain blockchain data (e.g., code from a blockchain) from a blockchain computing system (e.g., a decentralized computing system storing distributed data). The blockchain data can include one or more function signatures. In some implementations, the blockchain data can include script associated with a digital asset.
The blockchain data may be obtained via a blockchain node. Blockchain data can include the code and/or records stored on the blockchain. The code can include the script and can be descriptive of a plurality of smart contracts. The blockchain data can include transactional data associated with the acquisition of digital assets and/or the exchange of digital currency (e.g., crypto currency). The blockchain data can include metadata associated with one or more non-fungible tokens.
[0218] The systems and methods disclosed herein can include determining a particular portion of the blockchain data includes token data. The token data can be descriptive of a non-fungible token associated with a digital asset. Alternatively and/or additionally, the systems and methods can determine a subset of the blockchain data includes token data based on the subset having a structure associated with one or more standards. The token data can be descriptive of a non-fungible token associated with the digital asset. In some implementations, the structure can include a format for code in the blockchain data associated with a standard format for non-fungible token code.
[0219] In some implementations, the blockchain data can be parsed, and each parsed segment of the blockchain data can be processed to classify whether the parsed segment includes token data descriptive of a non-fungible token. The classification can be generated with a machine-learned classification model that has been trained to classify whether the parsed segment includes data associated with anon-fungible token (e.g., whether the data includes reference to a payload, meets one or more standards, and/or is descriptive of a smart contract). In some implementations, the blockchain data can be parsed with a machine- learned segmentation model trained to parse blockchain data based on one or more factors (e.g., syntax, semantics, structure, code length, payload characteristics, code features, latent encode markers, and/or another machine-learned characteristics).
[0220] In some implementations, determining the particular portion of the blockchain data includes the token data can include determining a particular portion of the blockchain data includes token data based on the one or more function signatures. The one or more function signatures can be associated with a non-fungible token standard.
[0221] Alternatively and/or additionally, determining the particular portion of the blockchain data includes the token data can include determining the particular portion includes a smart contract associated with a digital media item. The digital media item can be a payload for the smart contract. In some implementations, the digital media item can be the digital asset.
[0222] Index data can then be generated based on the token data. The index data can include information obtained from the blockchain data. In some implementations, the index data can be associated with the digital asset. The index data can include transaction data associated with the non-fungible token. The index data can include data descriptive of metadata associated with the non-fungible token. In some implementations, the index data can include a digital asset type associated with the digital asset. The digital asset type can be an augmented-reality rendering asset type, and the digital asset can be an augmented-reality rendering asset. The index data can include whether the URI (Uniform Resource Identifier) has changed and whether data (e.g., the pixels of an image and/or text of a text string) of the payload have changed when the URI has changed. Additionally and/or alternatively, the index data can include information descriptive of a change to the URI. The index data can include data that may be descriptive of factors that can be utilized to determine whether the non-fungible token involves fraud.
[0223] In some implementations, generating index data based on the token data can include obtaining the digital asset associated with the non-fungible token, processing the digital asset to determine one or more features in the digital asset, and generating feature data descriptive of the one or more features. The index data can include the feature data.
[0224] In some implementations, generating the index data can include determining the digital asset associated with the non-fungible token and processing the non-fungible token with a machine-learned model (e.g., a classification model, a detection model, a feature extractor model, and/or a semantics model) to determine one or more classifications, features, and/or attributes associated with the digital asset. The one or more classifications, features, and/or attributes can be included in the index data. The index data can include a name associated with the non-fungible token and/or the digital asset, a name of the digital asset creator/publisher, transaction data (e.g., the current and/or past owners, purchase price, transactional trends, trends of related non-fungible tokens, gas price, etc.), a topic of the digital asset, non-fungible token metadata, pixel labels, non-fungible token description, freeform text associated with the non-fungible token, and/or notoriety associated with the non-fungible token, the publisher, or the creator.
[0225] The digital asset can include image data, video data, text data, audio data, a domain, an augmented-reality asset, a virtual-reality experience, and/or latent encoding data. In some implementations, the digital asset can include image data, and processing the digital asset can include processing the digital asset with a machine-learned model to determine one or more image features.
[0226] Alternatively and/or additionally, generating the feature data descriptive of the one or more features can include determining one or more feature descriptor terms associated with the one or more features. The feature data can be descriptive of the one or more feature descriptor terms.
[0227] In some implementations, the systems and methods can include determining a web content item is associated with the digital asset. A publication time associated with the web content item can be obtained. The systems and methods can determine a mint time associated with the non-fungible token based on the blockchain data. Time difference data can be generated based on the mint time and the publication time. In some implementations, the index data can include the time difference data.
[0228] Alternatively and/or additionally, generating the index data based on the token data can include determining reference data associated with the digital asset based on the token data and determining a publisher of the non-fungible token based one the token data. The index data can include data descriptive of the reference data, the publisher, and a particular blockchain associated with the blockchain data.
[0229] The systems and methods can store the index data in an index database. The index database can be stored on a server computing system. The index database can include a plurality of index datasets associated with a plurality of non-fungible tokens. For example, first token data can be identified to generate a first index dataset, second token data can be identified to generate a second index dataset, and third token data can be identified to generate a third index dataset. The first token data can be associated with a first non-fungible token, the second token data can be associated with a second non-fungible token, and the third token data can be associated with a third non-fungible token.
[0230] The index database can be utilized for a plurality of different uses. For example, the index database can be utilized as a database for storing non-fungible token data for quick retrieval upon request or search. The systems and methods can include receiving a request for the digital asset from a user computing system and providing the token data to the user computing system.
[0231] The index database can include index datasets generated based on blockchain data, web page data, and/or data obtained from other sources.
[0232] Alternatively and/or additionally, the systems and methods disclosed herein can obtain web page data from a web page. The web page data can be descriptive of listing information for a non-fungible token. In some implementations, the web page data can include data associated with a digital asset. Additionally and/or alternatively, obtaining the
web page data can include generating a snapshot of a web page listing the non-fungible token for sale. In some implementations, the web page data can be descriptive of a leaf page of a digital web platform website (e.g., a digital marketplace website) that hosts and/or facilitates the purchase and sales of the non-fungible tokens. The web page data can include a snapshot of a webpage, which can include image data, text data, and/or latent encoding data.
[0233] A particular portion (e.g., a subset) of the web page data can be processed to determine the web page data includes token data. The token data can be descriptive of the non-fungible token associated with the digital asset. Alternatively and/or additionally, a digital marketplace website can be crawled to determine a plurality of leaf pages associated with a plurality of non-fungible tokens, and each leaf page can be processed to generate index data for each of the non-fungible tokens.
[0234] Index data can then be generated based on the token data. In some implementations, the index data can include information obtained from the web page data. The index data can be associated with the digital asset. Generating the index data can include processing the image data, the text data, and/or the latent encoding data of the leaf page to determine data associated with a plurality of index fields to be included in the index data.
[0235] The systems and methods can include storing the index data in an index database. The index database may be stored on a server computing system. In some implementations, the index database can be used to surface non-fungible token search results for a search engine. Additionally and/or alternatively, the index database can be utilized to determine statistics associated with non-fungible tokens. For example trending non-fungible tokens of a certain type and/or creator can be determined and then utilized for non-fungible token ranking in marketplaces, search result pages, and/or for informing users for informed purchasing.
[0236] The index database can include index data from a plurality of different sources (e.g., a plurality of different blockchains associated with a plurality of different blockchain computing systems and/or a plurality of different web pages associated with a plurality of different marketplaces). The index database can be utilized for a plurality of different tasks (e.g., search, statistical generation, and/or model training). For example, the systems and methods can obtain blockchain data. The systems and methods can include determining a subset of the blockchain data is descriptive of a non-fungible token associated with a digital asset. Index data can be generated based at least in part on the subset of blockchain data. The index data can include reference data associated with the digital asset. In some implementations, the index data can be stored in a search database. The systems and methods
can include receiving a search query from a user computing system. The systems and methods can determine the search query is associated with index data. A search result associated with the digital asset can then be provided to the user computing system.
[0237] The systems and methods can include obtaining blockchain data (e.g., blockchain data obtained from a blockchain node associated with a blockchain computing system). Alternatively and/or additionally, the systems and methods can obtain web page data (e.g., marketplace data obtained via taking a snapshot of a web page associated with a non-fungible token marketplace). In some implementations, the systems and methods can include obtaining both blockchain data and web page data. The obtained data can be obtained via an application programming interface. In some implementations, the obtained data may be intervalley updated. The updates can occur at set intervals and/or may be obtained at a frequency based on transaction trends, type of digital asset, the particular blockchain, and/or based on cost.
[0238] The systems and methods can then determine a subset of the obtained data (e.g., the blockchain data and/or the web page data) is descriptive of a non-fungible token associated with a digital asset. The determination can be based on a search for a particular structure, particular terms, and/or particular actors. The determination can be based on known digital asset creators/publishers, known digital asset attributes, known digital asset types, known digital asset names, known digital asset descriptions, metadata, and/or labels. The determination may be based on the subset of obtained data being EIP (“Ethereum Improvement Proposals”, ETHEREUM (January 2018), https://eips.ethereum.org/EIPS/eip- 721) compliant. In some implementations, strict compliance may not need to be followed. For example, data types may deviate from the spec of the standards. The functional nature and/or the spirit of the data may be determined to be associated with a non-functional token.
[0239] Index data can be generated based at least in part on the subset of obtained data (e.g., the blockchain data and/or the web page data). In some implementations, the index data can include reference data (e.g., script data referencing a URL (Uniform Resource Locator) or URI) associated with the digital asset. The index data can include digital asset creators/publishers, digital asset attributes, digital asset type, digital asset name, digital asset description, metadata, payload information, smart contract information, free form text, transactional data, blockchain information (e.g., information associated with the particular blockchain the non-fungible token is minted on), mint time, first publication time of digital asset, digital asset changes, the particular web page (e.g., the particular marketplace), and/or labels (e.g., pixel labels). In some implementations, the obtained data can be processed to
determine a non-fungible token community associated with the particular non-fungible token, and the non-fungible token community can be indexed in the index data.
[0240] In some implementations, the index data can be generated by processing the obtained data with one or more machine-learned models (e.g., a segmentation model, a detection model, a classification model, and/or a feature extractor model). Transaction history can be processed to determine price history for the non-fungible token, and the price history can be processed to index trend data and/or stability data. Additionally and/or alternatively, whether the non-fungible token was lazy minted or not may be indexed. The index data can include whether the non-fungible token was auctioned.
[0241] The systems and methods can then store the index data in a search database. The search database can include a plurality of index datasets associated with a plurality of non- fungible tokens. In some implementations, the plurality of non-fungible tokens can be identified by processing data from a plurality of sources.
[0242] In some implementations, the systems and methods can receive a search query from a user computing system. The search query can include one or more search terms. Alternatively and/or additionally the search query can include one or more images, audio data, latent encoding data, and/or multimodal data.
[0243] The search query can be processed to determine the search query is associated with the index data. The search query may be received and processed with a search engine. The search engine can be configured to crawl a blockchain, web pages, and/or the index database, or search database.
[0244] In some implementations, determining the search query is associated with index data can include determining one or more search terms of the search query are descriptive of at least one of the digital asset, an author of the digital asset, or non-fungible token metadata. [0245] A search result associated with the digital asset can then be provided to the user computing system. The search result can include a preview of the digital asset. Alternatively and/or additionally, the search result can include an indicator indicating the search result is associated with a non-fungible token.
[0246] In some implementations, providing the search result associated with the digital asset to the user computing system can include determining one or more web pages are associated with the search query, generating one or more general web results based on the one or more web pages, and providing a search results page to the user computing system. The search results page can include the search result and one or more general web results.
[0247] In some implementations, the index data generated based on blockchain data and the index data generated based on web page data can be reconciled. For example, in an instance in which the blockchain data and web data are in conflict, the systems and methods can process the data, determine which data is more trustworthy, determine whether to merge the data, and/or determine whether to delete one or both sets of data.
[0248] In some implementations, the index data may be intervalley updated. The updates can occur at set intervals and/or may be obtained at a frequency based on transaction trends, performance data, type of digital asset, the particular blockchain, time of minting (e.g., older non-fungible tokens may be updated less often due to larger computational cost associated with the crawl), and/or based on cost.
[0249] The index database can include an index item field associated with the digital asset type such that non-fungible tokens associated with augmented-reality rendering assets can be differentiated from non-fungible tokens associated with images. In some implementations, the index data can include how to launch, run, and/or view the pay load (e.g., the digital asset). For example, a video player label, an image preview label, a particular augmented-reality application, and/or a particular device may be indexed.
[0250] Data extraction for index data generation can be machine-learned, based on heuristics, and/or may be deterministic.
[0251] The systems and methods disclosed herein can be utilized for search to allow a user to make a deliberate decision to invest or not invest in a particular non-fungible token. [0252] In particular, the systems and methods can be utilized to make Web3 technology easily accessible to a significant chunk of our users (and not just early adopters or crypto enthusiasts who are well versed in Web3). The way Web3 may work can be a significant departure from a general users mental model. For example, the systems and methods may focus on simplifying the tech, jargon, applications, and/or setup.
[0253] The blockchain computing system can include a decentralized system; however, the systems and methods disclosed herein can be implemented in a decentralized system, a closed-off ecosystem, and/or a hybrid system including portions completed by a decentralized system and portions completed by a centralized system.
[0254] In some implementations, the systems and methods disclosed herein can be utilized for identity purposes. For example, the systems and methods disclosed herein can involve and/or interface with a crypto wallet of a user to store user identity data to be utilized across Web3. A user may sign into websites, share personal data, prove identity, and/or transfer crypto currency based in part on the identity data.
[0255] Wallet apps can be built-in to browser. In Web3, there may be a single mechanism to sign in while keeping your data for yourself.
[0256] The blockchain computing system can store data descriptive of a variety of information, which can include non-fungible token Content IDs and/or ownership information for the non-fungible tokens. Non-fungible tokens can introduce scarcity and authenticity to digital items.
[0257] The systems and methods disclosed herein can be implemented into a search engine to enhance image, video, and audio search. For example, the systems and methods implemented into a search engine can signal to users who owns an image or video on the web and where the digital asset comes from, can enforce copyright rules for the digital asset, can detect if the digital asset has been tampered with or has trust issues, and/or can enable the sale or transfer of digital content on the web (e.g., non-fungible token marketplaces for images, music, and/or another form of digital asset).
[0258] The systems and methods disclosed herein can include creator tokens. A Web3 model can enable creators to own their content and have a direct relationship with their followers/subscribers/fans, which can bypass today’s platforms. This can be very disruptive to video platforms, but may be an opportunity for search engines, which may not be on the top of the mind for creators. Creator tokens can be a way for fans to “invest” in their favorite creators while also enabling creators to create a community around their fans.
[0259] In some implementations, the systems and methods disclosed herein can be utilized to provide an oracle system (e.g., a system that can provide service provider system for smart contracts to check whether something is real or has happened).
[0260] The systems and methods disclosed herein can include general information retrieval. The systems and methods can enable search to index the important parts of blockchain and make them accessible and useful.
[0261] The systems and methods can include decentralized autonomous organization, which can be used to automate decision making. In some implementations, information about decentralized autonomous organization of search engines can be provided and may make the decision making more transparent.
[0262] In some implementations, the systems and methods can enable ownership of any digital asset on the web by empowering creators and publishers to claim ownership of their digital content and set the rules of its usage in a scalable and high speed fashion. Additionally and/or alternatively, the systems and methods can enable ownership of any digital asset on the web by empowering search users to understand the provenance and history of a digital
asset while also being able to take action on the digital asset in a way that is permitted by the original creator (e.g., buy the non-fungible token and/or use the non-fungible token as a ticket).
[0263] In some implementations, the systems and methods can simultaneously create carrots for creators and publishers to publish non-fungible content on the web while also giving them tools to create this content and set rules of usage for the content.
[0264] For example, the carrots can be created to show who owns an image on the web or show items published by a creator/publisher, can block copies of an ‘owned’ digital asset or at least transfer any revenue generated from it to the original owner, can enable a user to sell and monetize generated content, and can enable royalty fees.
[0265] Additionally and/or alternatively, the systems and methods can include tools for creators/publishers to create non-fungible content. For example, the systems and methods can give creators/publishers easy tools to publish non-fungible content and set rules for the content usage that can both be done by casual creators as well as sophisticated large scale players.
[0266] In some implementations, the systems and methods can include a smart contract blockchain that can be open, closed, and/or a hybrid of both.
[0267] The systems and methods can be implemented to enable a non-fungible token marketplace across various digital asset platforms (e.g., an image platform, a video hosting platform, and/or a music hosting platform) and/or across various service platforms (e.g., a search engine, a social media platform, and/or a blog platform). The creators and/or publishers can generate digital assets, mint the digital assets, sell the digital assets, and/or receive royalties for future sales of the digital assets.
[0268] The non-fungible tokens can be utilized to access private chat groups or blogs inside different platforms and communities, can be used to set up avatars that are verified as being owned by a particular user, can enable quick communication between creators and owners, and can provide transactional history that can be used for future releases and purchases by providing insightful suggestions.
Additional Disclosure
[0269] The technology discussed herein makes reference to servers, databases, software applications, and other computer-based systems, as well as actions taken and information sent to and from such systems. The inherent flexibility of computer-based systems allows for a great variety of possible configurations, combinations, and divisions of tasks and
functionality between and among components. For instance, processes discussed herein can be implemented using a single device or component or multiple devices or components working in combination. Databases and applications can be implemented on a single system or distributed across multiple systems. Distributed components can operate sequentially or in parallel.
[0270] While the present subject matter has been described in detail with respect to various specific example embodiments thereof, each example is provided by way of explanation, not limitation of the disclosure. Those skilled in the art, upon attaining an understanding of the foregoing, can readily produce alterations to, variations of, and equivalents to such embodiments. Accordingly, the subject disclosure does not preclude inclusion of such modifications, variations and/or additions to the present subject matter as would be readily apparent to one of ordinary skill in the art. For instance, features illustrated or described as part of one embodiment can be used with another embodiment to yield a still further embodiment. Thus, it is intended that the present disclosure cover such alterations, variations, and equivalents.
Claims
1. A computing system, the system comprising: one or more processors; and one or more non-transitory computer-readable media that collectively store instructions that, when executed by the one or more processors, cause the computing system to perform operations, the operations comprising: obtaining blockchain data from a blockchain computing system; determining the blockchain data comprises first token data, wherein the first token data is descriptive of a first non-fungible token associated with a first digital resource; generating first index data based on the first token data, wherein the first index data is stored in an index database; obtaining web page data from a digital web platform user interface; determining the web page data comprises second token data, wherein the second token data is descriptive of a second non-fungible token associated with a second digital resource; generating second index data based on the second token data, wherein the second index data is stored in the index database; determining the first digital resource and the second digital resource are a same digital resource; and adjusting the index database based on the first digital resource and the second digital resource being a same digital resource.
2. The system of any preceding claim, wherein the blockchain computing system comprises a distributed computing system comprising a plurality of computing devices, and wherein the blockchain data comprises embedded code associated with a plurality of non- fungible tokens.
3. The system of any preceding claim, wherein the operations further comprise: receiving a search request; determining one or more search results based on the index database; and providing the one or more search results for display, wherein the one or more search results comprise a particular search result associated with the first digital resource.
4. The system of any preceding claim, wherein adjusting the index database based on the first digital resource and the second digital resource being the same digital resource comprises: removing the second index data from the index database.
5. The system of any preceding claim, wherein adjusting the index database based on the first digital resource and the second digital resource being the same digital resource comprises: merging the first index data and the second index data to generate augmented index data.
6. The system of any preceding claim, wherein adjusting the index database based on the first digital resource and the second digital resource being the same digital resource comprises: adjusting a first text entry associated with the first index data based on the first digital resource and the second digital resource being the same digital resource.
7. The system of any preceding claim, wherein adjusting the index database based on the first digital resource and the second digital resource being the same digital resource comprises: adjusting a second text entry associated with the second index data based on the first digital resource and the second digital resource being the same digital resource, wherein the second index entry is stored in the index database.
8. The system of any preceding claim, wherein determining the blockchain data comprises first token data comprises: crawling embedded code, wherein the blockchain data comprises the embedded code.
9. The system of any preceding claim, wherein the web page data comprises a snapshot of a digital resource listing webpage associated with the second non-fungible token.
10. The system of any preceding claim, wherein the second digital resource depicts an augmented version of a scene depicted in the first digital resource.
11. A computer-implemented method, the method comprising: generating, by a computing system comprising one or more processors, a plurality of first index entries for an index database based on crawling a blockchain; generating, by the computing system, a plurality of second index entries for the index database based on crawling a digital web platform; determining, by the computing system, a particular first index entry of the plurality of first index entries is associated with a particular second index entry of the plurality of second index entries; and in response to determining the particular first index entry is associated with the particular second index entry, adjusting, by the computing system, the index database.
12. The method of any preceding claim, wherein determining the particular first index entry of the plurality of first index entries is associated with the particular second index entry of the plurality of second index entries comprises: determining a first payload associated with a first non-fungible token is same as a second payload associated with a second non-fungible token, wherein the first non-fungible token is associated with the particular first index entry, and wherein the second non-fungible token is associated with the particular second index entry.
13. The method of any preceding claim, wherein the first payload comprises a first digital resource, wherein the second payload comprises a second digital resource, and wherein the first digital resource and the second digital resource match.
14. The method of any preceding claim, wherein the first payload comprises a first digital resource, wherein the second payload comprises a second digital resource, and wherein the first digital resource and the second digital resource depict a same scene with differing resolutions.
15. The method of any preceding claim, wherein the digital web page comprises a user interface for providing a plurality of non-fungible tokens for sale.
16. One or more non-transitory computer-readable media that collectively store instructions that, when executed by one or more computing devices, cause the one or more computing devices to perform operations, the operations comprising: obtaining a particular index entry and a plurality of index entries, wherein the plurality of index entries are obtained from an index database; processing the particular index entry and the plurality of index entries to generate duplication data, wherein the duplication data is descriptive of whether one or more different index entries of the plurality of index entries are associated with a digital resource associated with the particular index entry; generating validation data based at least in part on the duplication data, wherein the validation data is associated with an authenticity of a non-fungible token associated with the particular index entry; and providing the validation data as an output.
17. The one or more non-transitory computer-readable media of any preceding claim, wherein the plurality of index entries comprise one or more index entries obtained by extracting data from a blockchain.
18. The one or more non-transitory computer-readable media of any preceding claim, wherein the plurality of index entries comprise one or more index entries obtained by extracting data from a non-fungible token marketplace.
19. The one or more non-transitory computer-readable media of any preceding claim, wherein generating the validation data based at least in part on the duplication data comprises: determining the particular index entry is authentic by determining the particular index entry is associated with a first minting of the digital resource.
20. The one or more non-transitory computer-readable media of any preceding claim, wherein the validation data is based at least in part on a timestamp associated with the particular index entry, wherein the validation data is descriptive of whether the non-fungible token was minted at least one of before another publication of the digital resource.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2022/035723 WO2024005824A1 (en) | 2022-06-30 | 2022-06-30 | Deduplication of non-fungible tokens in search index |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2022/035723 WO2024005824A1 (en) | 2022-06-30 | 2022-06-30 | Deduplication of non-fungible tokens in search index |
Publications (1)
Publication Number | Publication Date |
---|---|
WO2024005824A1 true WO2024005824A1 (en) | 2024-01-04 |
Family
ID=82701803
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
PCT/US2022/035723 WO2024005824A1 (en) | 2022-06-30 | 2022-06-30 | Deduplication of non-fungible tokens in search index |
Country Status (1)
Country | Link |
---|---|
WO (1) | WO2024005824A1 (en) |
Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20220036455A1 (en) * | 2020-07-28 | 2022-02-03 | Dmg Blockchain Solutions Inc. | Selection of cryptographic identifiers in a block |
-
2022
- 2022-06-30 WO PCT/US2022/035723 patent/WO2024005824A1/en unknown
Patent Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20220036455A1 (en) * | 2020-07-28 | 2022-02-03 | Dmg Blockchain Solutions Inc. | Selection of cryptographic identifiers in a block |
Non-Patent Citations (2)
Title |
---|
"Ethereum Improvement Proposals", ETHEREUM, January 2018 (2018-01-01), Retrieved from the Internet <URL:https://eips.ethereum.org/EIPS/eip-721> |
KAPOOR ARNAV ET AL: "TweetBoost: Influence of Social Media on NFT Valuation", PROCEEDINGS OF THE 2021 5TH INTERNATIONAL CONFERENCE ON ELECTRONIC INFORMATION TECHNOLOGY AND COMPUTER ENGINEERING, ACMPUB27, NEW YORK, NY, USA, 25 April 2022 (2022-04-25), pages 621 - 629, XP058874146, ISBN: 978-1-4503-8432-2, DOI: 10.1145/3487553.3524642 * |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9704185B2 (en) | Product recommendation using sentiment and semantic analysis | |
US20200162266A1 (en) | Facilitating analytic services for provenance of digital documents | |
US20210342490A1 (en) | Auditable secure reverse engineering proof machine learning pipeline and methods | |
US20150161529A1 (en) | Identifying Related Events for Event Ticket Network Systems | |
Teyssou et al. | The InVID plug-in: web video verification on the browser | |
Wang et al. | You are your photographs: Detecting multiple identities of vendors in the darknet marketplaces | |
US20180293678A1 (en) | Method and apparatus for the semi-autonomous management, analysis and distribution of intellectual property assets between various entities | |
US20130117716A1 (en) | Function Extension for Browsers or Documents | |
WO2023108980A1 (en) | Information push method and device based on text adversarial sample | |
US10489373B1 (en) | Method and apparatus for generating unique hereditary sequences and hereditary key representing dynamic governing instructions | |
Mekouar et al. | A survey on blockchain-based Recommender Systems: Integration architecture and taxonomy | |
US9460199B2 (en) | Application of text analytics to determine provenance of an object | |
RU2632149C2 (en) | System, method and constant machine-readable medium for validation of web pages | |
Lawton et al. | eDiscovery in digital forensic investigations | |
US20230141471A1 (en) | Organizing unstructured and structured data by node in a hierarchical database | |
Andrunyk et al. | Information System of Photostock Web Galleries Based on Machine Learning Technology. | |
WO2024005824A1 (en) | Deduplication of non-fungible tokens in search index | |
WO2024005823A1 (en) | Generating a comprehensive non-fungible token search index | |
WO2024019699A1 (en) | Extracting data from a blockchain | |
WO2024005825A1 (en) | Identifying non-fungible tokens and related content for indexing | |
US20240054190A1 (en) | Digital Rights Management for NFTs Across Search Surfaces | |
CN113887191A (en) | Method and device for detecting similarity of articles | |
Dubettier et al. | File type identification tools for digital investigations | |
EP4322023A1 (en) | Authoritative factual service for blockchain smart contracts | |
US20240048547A1 (en) | User Data and Personalization Models Implemented on a Blockchain |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
121 | Ep: the epo has been informed by wipo that ep was designated in this application |
Ref document number: 22747530Country of ref document: EPKind code of ref document: A1 |