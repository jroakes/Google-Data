EP2909832B1 - Methods and systems for speech recognition processing using search query information - Google Patents
Methods and systems for speech recognition processing using search query information Download PDFInfo
- Publication number
- EP2909832B1 EP2909832B1 EP13782920.6A EP13782920A EP2909832B1 EP 2909832 B1 EP2909832 B1 EP 2909832B1 EP 13782920 A EP13782920 A EP 13782920A EP 2909832 B1 EP2909832 B1 EP 2909832B1
- Authority
- EP
- European Patent Office
- Prior art keywords
- words
- search query
- groupings
- given
- speech recognition
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
- 238000000034 method Methods 0.000 title claims description 52
- 238000012545 processing Methods 0.000 title description 12
- 230000006870 function Effects 0.000 claims description 22
- 238000013500 data storage Methods 0.000 claims description 18
- 238000003860 storage Methods 0.000 description 33
- 238000004891 communication Methods 0.000 description 25
- 241000282326 Felis catus Species 0.000 description 20
- 239000013598 vector Substances 0.000 description 20
- 238000003491 array Methods 0.000 description 17
- 230000007704 transition Effects 0.000 description 16
- 238000013518 transcription Methods 0.000 description 13
- 230000035897 transcription Effects 0.000 description 13
- 238000012421 spiking Methods 0.000 description 11
- 206010048669 Terminal state Diseases 0.000 description 10
- 230000008569 process Effects 0.000 description 10
- 238000004458 analytical method Methods 0.000 description 8
- 238000013507 mapping Methods 0.000 description 7
- 238000004590 computer program Methods 0.000 description 6
- 238000009826 distribution Methods 0.000 description 6
- 238000012549 training Methods 0.000 description 5
- 238000005516 engineering process Methods 0.000 description 4
- 230000001133 acceleration Effects 0.000 description 3
- 238000013461 design Methods 0.000 description 3
- 230000003203 everyday effect Effects 0.000 description 3
- 238000012048 forced swim test Methods 0.000 description 3
- 230000003287 optical effect Effects 0.000 description 3
- 230000003595 spectral effect Effects 0.000 description 3
- 230000005540 biological transmission Effects 0.000 description 2
- 238000004422 calculation algorithm Methods 0.000 description 2
- 238000010586 diagram Methods 0.000 description 2
- 238000009499 grossing Methods 0.000 description 2
- 238000012417 linear regression Methods 0.000 description 2
- 238000004519 manufacturing process Methods 0.000 description 2
- 230000006855 networking Effects 0.000 description 2
- 239000011295 pitch Substances 0.000 description 2
- 238000001228 spectrum Methods 0.000 description 2
- 238000012731 temporal analysis Methods 0.000 description 2
- 238000000700 time series analysis Methods 0.000 description 2
- 235000007688 Lycopersicon esculentum Nutrition 0.000 description 1
- 238000007476 Maximum Likelihood Methods 0.000 description 1
- 240000003768 Solanum lycopersicum Species 0.000 description 1
- 244000061456 Solanum tuberosum Species 0.000 description 1
- 235000002595 Solanum tuberosum Nutrition 0.000 description 1
- 238000004378 air conditioning Methods 0.000 description 1
- 230000006399 behavior Effects 0.000 description 1
- 230000015572 biosynthetic process Effects 0.000 description 1
- 230000001413 cellular effect Effects 0.000 description 1
- 230000001419 dependent effect Effects 0.000 description 1
- 230000000694 effects Effects 0.000 description 1
- 238000005538 encapsulation Methods 0.000 description 1
- 230000007613 environmental effect Effects 0.000 description 1
- 239000000835 fiber Substances 0.000 description 1
- 238000010438 heat treatment Methods 0.000 description 1
- 230000001788 irregular Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 230000007774 longterm Effects 0.000 description 1
- 239000000463 material Substances 0.000 description 1
- 230000007246 mechanism Effects 0.000 description 1
- 230000002085 persistent effect Effects 0.000 description 1
- 230000000135 prohibitive effect Effects 0.000 description 1
- 230000009467 reduction Effects 0.000 description 1
- 230000004044 response Effects 0.000 description 1
- 238000013515 script Methods 0.000 description 1
- 230000001932 seasonal effect Effects 0.000 description 1
- 238000012163 sequencing technique Methods 0.000 description 1
- 238000010183 spectrum analysis Methods 0.000 description 1
- 238000007619 statistical method Methods 0.000 description 1
- 238000003786 synthesis reaction Methods 0.000 description 1
- 230000002123 temporal effect Effects 0.000 description 1
- 238000012795 verification Methods 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/06—Creation of reference templates; Training of speech recognition systems, e.g. adaptation to the characteristics of the speaker's voice
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2452—Query translation
- G06F16/24522—Translation of natural language queries to structured queries
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/33—Querying
- G06F16/332—Query formulation
- G06F16/3329—Natural language query formulation or dialogue systems
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/20—Natural language analysis
- G06F40/279—Recognition of textual entities
- G06F40/289—Phrasal analysis, e.g. finite state techniques or chunking
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L15/18—Speech classification or search using natural language modelling
- G10L15/183—Speech classification or search using natural language modelling using context dependencies, e.g. language models
- G10L15/19—Grammatical context, e.g. disambiguation of the recognition hypotheses based on word sequence rules
- G10L15/197—Probabilistic grammars, e.g. word n-grams
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L15/14—Speech classification or search using statistical models, e.g. Hidden Markov Models [HMMs]
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/06—Creation of reference templates; Training of speech recognition systems, e.g. adaptation to the characteristics of the speaker's voice
- G10L15/063—Training
- G10L2015/0635—Training updating or merging of old and new templates; Mean values; Weighting
Definitions
- ASR Automatic speech recognition
- Some ASR systems use "training" where an individual speaker reads sections of text into the speech recognition system. These systems analyze a specific voice of a person and use the voice to fine tune recognition of that speech for that person resulting in more accurate transcription.
- Systems that do not use training may be referred to as “Speaker Independent” systems.
- Systems that use training may be referred to as “Speaker Dependent” systems.
- Document US 2007/106685 A1 discloses a method and apparatus for re-indexing media content for search applications that includes steps and structure for providing a speech recognition database that include entries defining acoustical representations for a plurality of words. Further disclosed providing a searchable database containing a plurality of metadata documents descriptive of a plurality of media resources, each of the plurality of metadata documents including a sequence of speech recognized text indexed using the speech recognition database, updating the speech recognition database with at least one word candidate, and re-indexing the sequence of speech recognized text for a subset of the plurality of metadata documents using the updated speech recognition database.
- the set of word candidates are words appearing as the top-most requested search terms or spikes in particular search terms received by a search engine.
- the update module monitors and tracks the usage of search terms in search requests on a per n-gram basis.
- the update module identifies the top-most requested unigrams, bigrams, trigram, or other n-gram using a statistical analysis technique or detects spikes in the usage of particular unigrams, bigrams or trigrams in the search requests over a period of time. Such an event can trigger the search engine to check and update the language model and/or dictionary.
- the update module identifies word candidates from the list of identified search terms. The set of word candidates are then processed by the update module to update the speech recognition database.
- the present application discloses systems and methods for speech recognition processing.
- a method may comprise receiving, at a computing device, information indicative of a frequency of submission of a search query to a search engine.
- the search query may comprise a sequence of words.
- the method also may comprise, based on the frequency of submission of the search query exceeding a threshold, determining, for the sequence of words of the search query, groupings of one or more words of the search query based on an order in which the one or more words occur in the sequence of words of the search query.
- the method further may comprise providing information indicating the groupings to a speech recognition system to update a corpus of given sequences of words.
- the speech recognition system may be configured to convert a given spoken utterance into a given sequence of words based on the corpus of given sequences of words.
- a computer readable medium having stored thereon instructions that, when executed by a computing device, cause the computing device to perform functions.
- the functions may comprise receiving information indicative of a frequency of submission of a search query to a search engine.
- the search query may comprise a sequence of words.
- the functions also may comprise, based on the frequency of submission of the search query exceeding a threshold, determining, for the sequence of words of the search query, groupings of one or more words of the search query based on an order in which the one or more words occur in the sequence of words of the search query.
- the functions further may comprise providing information indicating the groupings to a speech recognition system to update a corpus of given sequences of words.
- the speech recognition system may be configured to convert a given spoken utterance into a given sequence of words based on the corpus of given sequences of words.
- a device may comprise at least one processor.
- the device also may comprise a data storage, and program instructions in the data storage that, upon execution by the at least one processor, cause the device to receive information indicative of a frequency of submission of a search query to a search engine.
- the search query may comprise a sequence of words.
- the program instructions in the data storage upon execution by the at least one processor, also cause the device to, based on the frequency of submission of the search query exceeding a threshold, determine, for the sequence of words of the search query, groupings of one or more words of the search query based on an order in which the one or more words occur in the sequence of words of the search query.
- the program instructions in the data storage upon execution by the at least one processor, further cause the device to provide information indicating the groupings to a speech recognition system to update a corpus of given sequences of words.
- the speech recognition system may be configured to convert a given spoken utterance into a given sequence of words based on the corpus of given sequences of words.
- the speech recognition system also may include probabilities of occurrence for the given sequences of words of the corpus.
- ASR automatic speech recognition
- Some of these environments include residences, businesses, vehicles, etc.
- ASR may provide voice control over devices, such as large appliances, (e.g., ovens, refrigerators, dishwashers, washers and dryers), small appliances (e.g., toasters, thermostats, coffee makers, microwave ovens), and media devices (stereos, televisions, digital video recorders, digital video players), as well as doors, lights, curtains, and so on.
- ASR may provide hands-free use of communication technologies (e.g., cellular phones), media devices (e.g., radios and video players), mapping technologies (e.g., navigation systems), environmental control (e.g., heating and air conditioning), and so on.
- ASR can be used to convert a voice search query into a text string that can be sent to a search engine to obtain search results.
- the potential uses for voice control are many and these examples should not be viewed as limiting.
- ASR can be performed at the device that receives utterances from a speaker.
- each user device may be configured with an ASR module.
- speech recognition can be performed at a remote network server (e.g., a server or cluster of servers on the Internet). While, in this example, speech recognition may not incorporate ASR into user devices, the user devices may still be configured to have a communication path with the remote ASR system (e.g., through Internet access).
- speech recognition can be performed by use of a local ASR system that offloads performance of at least some aspects of ASR to remote devices.
- the local ASR system may be a dedicated device or devices performing ASR, or software configured to operate, for instance, on a general purpose computing platform, This local ASR system may be physically located in a residence, business, vehicle, etc., and may operate even if the user devices do not have Internet access.
- a user device may receive an utterance from a speaker, and transmit a representation of the utterance to the local ASR system.
- the local ASR system may transcribe the representation of the utterance into a textual representation of the utterance, and transmit this textual representation to the user device.
- the local ASR system may instead transmit a command based on a transcription of the utterance to the user device. This command may be based on a transcribed textual representation of the utterance, or may be derived more directly from the representation of the utterance.
- the command may also be of a command set or command language supported by the user device.
- the utterance may represent a voice search query
- the local ASH system may be configured to transmit the transcription of the voice search query to a search engine to obtain respective search results that can be communicated to the user device.
- Figure 1 illustrates an example ASR system, in accordance with an embodiment.
- input to the ASR system may include an utterance 100, and the output may include one or more text strings and possibly associated confidence levels 101.
- Components of the ASR system may include a feature analysis module 102 that may be configured to produce feature vectors 104, a pattern classification module 106, an acoustic model 108, a dictionary 110, and a language model 112.
- the pattern classification module 106 may incorporate various aspects of the acoustic model 108, the dictionary 110, and the language model 112.
- the example ASR system depicted in Figure 1 is for illustration, only. Other ASR system arrangements, including different components, different relationships between the components, and/or different processing, may be possible.
- the feature analysis module 102 may be configured to receive the utterance 100.
- the utterance 100 may include an analog or digital representation of human speech, and may possibly contain background noise as well.
- the feature analysis module 102 may be configured to convert the utterance 100 to a sequence of one or more feature vectors 104.
- Each feature vector of the feature vectors 104 may include temporal and/or spectral representations of acoustic features of at least a portion of the utterance 100.
- a feature vector may include mel-frequency cepstrum coefficients of such a portion.
- the mel-frequency cepstrum coefficients may represent the short-term power spectrum of a portion of the utterance 100. They may be based on, for example, a linear cosine transform of a log power spectrum on a nonlinear mel scale of frequency.
- a mel scale may be a scale of pitches subjectively perceived by listeners to be about equally distant from one another, even through the actual frequencies of these pitches are not equally distant from one another).
- the feature analysis module 102 may be configured to sample and quantize the utterance 100, divide the utterance 100 into overlapping or nonoverlapping frames of 15 milliseconds, and perform spectral analysis on the frames to derive the spectral components of each frame.
- the feature analysis module 102 may further be configured to perform noise removal, convert the standard spectral coefficients to mel-frequency cepstrum coefficients, and calculate first-order and second-order cepstral derivatives of the mel-frequency cepstrum coefficients.
- the first-order cepstral coefficient derivatives may be calculated based on the slopes of linear regressions performed over windows of two or more consecutive frames.
- the second-order cepstral coefficient derivatives may be calculated based on the slopes of linear regressions performed over windows of two or more consecutive sets of first-order cepstral coefficient derivatives.
- one or more frames of the utterance 100 may be represented by a feature vector of mel-frequency cepstrum coefficients, first-order cepstral coefficient derivatives, and second-order cepstral coefficient derivatives.
- the feature vector may contain 13 coefficients, 13 first-order derivatives, and 13 second-order derivatives, therefore having a length of 39.
- feature vectors may use different combinations of features in other possible examples.
- the pattern classification module 106 may be configured to receive a sequence of the feature vectors 104 from the feature analysis module 102 and produce, as output, one or more text string transcriptions 101 of the utterance 100.
- Each transcription 101 may be accompanied by a respective confidence level indicating an estimated likelihood that the transcription is correct (e.g., 80% confidence, 90% confidence, etc.).
- the pattern classification module 106 may be configured to include, or incorporate aspects of the acoustic model 108, the dictionary 110, and/or the language model 112. In some examples, the pattern classification module 106 may also be configured to use a search graph that represents sequences of word or sub-world acoustic features that appear in spoken utterances.
- the acoustic model 108 may be configured to determine probabilities that the feature vectors 104 may have been derived from a particular sequence of spoken words and/or subword sounds. This may involve mapping sequences of the feature vectors 104 to one or more phonemes, and then mapping sequences of phonemes to one or more words.
- a phoneme may be considered to be the smallest segment of an utterance that encompasses a meaningful contrast with other segments of utterances.
- a word typically includes one or more phonemes.
- phonemes may be thought of as utterances of letters; however, some phonemes may present multiple letters.
- An example phonemic spelling for the American English pronunciation of the word "cat” may be /k/ /ae/ /t/, including the phonemes /k/, /ae/, and /t/.
- Another example phonemic spelling for the word "dog” may be /d/ /aw/ /g/, including the phonemes /d/, /aw/, and /g/.
- the letter “a” may be represented by the phoneme /ae/ for the sound in “cat,” by the phoneme /ey/ for the sound in “ate,” and by the phoneme /ah/ for the sound in “bet.”
- Other phonemic representations are possible.
- the acoustic model 108 may be configured to estimate the phoneme(s) in a feature vector by comparing the feature vector to the distributions for each of the 40 phonemes, and finding one or more phonemes that are most likely represented by the feature vector.
- the acoustic model 108 may include a hidden Markov model (HMM).
- HMM hidden Markov model
- An HMM may model a system as a Markov process with unobserved (i.e., hidden) states.
- Each HMM state may be represented as a multivariate Gaussian distribution that characterizes the statistical behavior of the state.
- each state may also be associated with one or more state transitions that specify a probability of making a transition from a current state to another state.
- the combination of the multivariate Gaussian distribution and the state transitions for each state may define a time sequence of feature vectors over the duration of one or more phonemes.
- the HMM may model the sequences of phonemes that define words.
- some HMM-based acoustic models may also take into account phoneme context when mapping a sequence of feature vectors to one or more words.
- FIG. 2 illustrates aspects of an example acoustic model 200, in accordance with an embodiment.
- the acoustic model 200 defines a sequence of phonemes that make up the word "cat."
- Each phoneme is represented by a 3-state HMM with an initial state, a middle state, and an end state representing the statistical characteristics at the beginning of phoneme, the middle of the phoneme, and the end of the phoneme, respectively.
- Each state e.g., state /k/1, state /k/2, etc.
- the acoustic model 200 may represent a word by concatenating the respective 3-state HMMs for each phoneme in the word together, with appropriate transitions. These concatenations may be performed based on information in the dictionary 110. In some implementations, more or fewer states per phoneme may be used in the acoustic model 200.
- the acoustic model 200 may be trained using recordings of each phoneme in numerous contexts (e.g., various words and sentences) so that a representation for each of the phoneme's states can be obtained. These representations may encompass the multivariate Gaussian distributions discussed above.
- a possibly large number of utterances containing spoken phonemes may each be associated with transcriptions. These utterances may be words, sentences, and so on, and may be obtained from recordings of everyday speech or some other source.
- the transcriptions may be automatic or manual (human-made) text strings of the utterances.
- the utterances may be segmented according to their respective transcriptions. For instance, training of the acoustic model 200 may involve segmenting spoken strings into units (e.g., using either a Baum-Welch and/or Viterbi alignment method), and then using the segmented utterances to build statistical distributions for each phoneme state.
- acoustic model 200 may involve segmenting spoken strings into units (e.g., using either a Baum-Welch and/or Viterbi alignment method), and then using the segmented utterances to build statistical distributions for each phoneme state.
- a more accurate acoustic model can be produced.
- a well-trained acoustic model may have limited accuracy when used for ASR in a domain for which it was not trained. For instance, if a given acoustic model is trained by utterances from a number of speakers of American English, this acoustic model may perform well when used for ASR of American English, but may be less accurate when used for ASR of, e.g., British English.
- the acoustic model 200 when trained in this fashion may represent the pronunciation and usage of a hypothetical average speaker, rather than any particular speaker.
- the dictionary 110 may define a pre-established mapping between phonemes and words. This mapping may include a list of tens or hundreds of thousands of phoneme-pattern-to-word mappings, for example.
- the dictionary 110 may include a lookup table, such as Table 1 shown below. Table 1 illustrates how the dictionary 110 may list phonemic sequences that the pattern classification module 106 may be configured to identify for corresponding words that the ASR system is attempting to recognize. Therefore, the dictionary 110 may be used when developing phonemic state representations of words that are illustrated by the acoustic model 200.
- the language model 112 may be configured to assign probabilities to sequences of phonemes or words, based on a likelihood of that sequence of phonemes or words occurring in an input utterance to the ASR system.
- the language model 112 may define a conditional probability of w n (for n th word in a phrase transcribed from an utterance), given values of a pattern of n-1 previous words in the phrase.
- An example conditional probability may be expressed as: P w n
- a language model may operate on n -grams, which, for example, may be sequences of n phonemes or words that are represented in the pattern classification module 106.
- Language models with values of n greater than 5 can require a large memory or storage space; therefore, smaller n -grams (e.g., 3-grams, which are also referred to as tri-grams) may be used to yield acceptable results efficiently.
- Tri-grams are used herein for purposes of illustration. Nonetheless, any value of n may be may be used with the examples herein.
- Language models may be trained through analysis of a corpus of text strings or sequences of words.
- This corpus may contain a large number of words, e.g., hundreds, thousands, millions or more. These words may be derived from utterances spoken by users of an ASR system and/or from written documents.
- the language model 112 can be determined or developed based on word patterns occurring in human speech, written text (e.g., emails, web pages, reports, academic papers, word processing documents, etc.), search queries, and so on.
- tri-gram probabilities can be estimated based on their respective number of appearances in the corpus.
- C ( w 1 , w 2 , w 3 ) is the number of occurrences of a sequence of words w 1 , w 2 , w 3 in the corpus
- a probability of occurrence for the sequence of words can be expressed as: P w 3
- the language model 112 may be represented as a table of conditional probabilities.
- Table 2 illustrates an example of such a table that could form the basis of the Language model 112. Particularly, Table 2 contains tri-gram conditional Probabilities.
- Table 2 Tri-gram Conditional Probabilities P(dog
- cat,and) 0.50 P(mouse
- cat, and) 0.35 P(bird
- cat,and) 0.14 P(fiddle
- cat,and) 0.01
- the feature analysis model 102 and the pattern classification module 106 may be configured to perform ASR.
- the ASR system can search the space of valid word sequences from the language model 112 to find the word sequence with the maximum likelihood of having been spoken in the utterance 100.
- size of search space can be quite large, and methods to reduce the search space may cause such search to be more computationally efficient.
- heuristic techniques that can be used to reduce the complexity of the search, potentially by orders of magnitude. Other methods of limiting the search space are possible.
- the search space can be constrained to popular phrases in a given period of time.
- a finite state transducer can be used to compactly represent multiple phoneme patterns that map to a single word. Some words, such as “data,” “either,” “tomato,” and “potato,” have multiple pronunciations. The phoneme sequences for these pronunciations can be represented in a single FST per word.
- This process of creating efficient phoneme-level FSTs can be carried out for each word in the dictionary 110, and the resulting word FSTs can be combined into sentence FSTs using the language model 112.
- a network of states for phonemes, words, and sequences of words can be developed and represented in a compact search graph.
- Figure 3 illustrates an example search graph 300 of an ASR system, in accordance with an embodiment.
- This example search graph 300 is smaller and less complex than a search graph that may be used in an ASR system, and is used for illustration.
- the search graph 300 was trained with five input utterances, "catapult,” “cat and mouse,” “cat and dog,” “cat,” and “cap.”
- Each circle in the search graph 300 may represent a state associated with the processing of an input utterance that has been mapped to phonemes. For purposes of simplicity, each phoneme in the search graph 300 is represented with a single state rather than multiple states. Also, self-transitions are omitted from the search graph 300 to simplify Figure 3 .
- States in the search graph 300 are named based on a current phoneme context of the input utterance, using the format "x[y]z" to indicate that the current phoneme being considered, y, has a left-context of the phoneme x and a right context of the phoneme z.
- the state "x[y]z” indicates a point in processing an utterance in which the current phoneme being considered is y, the previously considered phoneme in the utterance is x, and the next phoneme to be considered in the utterance is z.
- the beginning of an utterance and the end of an utterance are represented by the "#" character, and also may be referred to as null phonemes.
- Terminal states may be represented by a recognized word or phrase in quotes.
- the search graph 300 includes five terminal states, representing recognition of the words or sequences of words (i.e., phrases) such as "catapult,” “cat and mouse,” “cat and dog,” “cat,” and “cap.”
- Transitions from one state to another may represent an observed ordering of phonemes in the corpus.
- the state “#[k]ae” represents the recognition of a "k” phoneme with a left context of a null phoneme and a right context of an "ae” phoneme.
- costs may be assigned to one or more of the states and/or transitions. For example, if a particular phoneme pattern is rare, a transition to a state representing that phoneme pattern may have a higher cost than a transition to a state representing a more common phoneme pattern.
- conditional probabilities from the language models may also be used to assign costs to states and/or transitions. For instance, in Table 2, given a phrase with the words "cat and," the conditional probability of the next word in the phrase being "dog” is 0.5, while the conditional probability of the next word in the phrase being "mouse” is 0.35. Therefore, the transition from state “ae[n]d” to state “n[d]m” may have a higher cost than the transition from state "ae[n]d” to state "n[d]d.”
- the search graph 300 may be used to estimate text string transcriptions for new input utterances.
- the pattern classification module 106 may determine a sequence of one or more words that match an input utterance based on the search graph 300.
- P ( w ) may be based on n- gram conditional probabilities as discussed above, as well as other factors.
- the function argmax w may return the value of w that maximizes P ( a
- the pattern classification module 106 may be configured to attempt to find paths from an initial state in the search graph 300 to a terminal state in the search graph 300 based on the feature vectors 104. This process may involve the pattern classification module 106 performing a breadth-first search, A-star (A*) search, beam search, or some other type of search on the search graph 300.
- the pattern classification module 106 may be configured to assign a total cost to one or more paths through the search graph 300 based on costs associated with the states and/or transitions of associated with each path. Some of these costs may be based on, for instance, a confidence level that a particular segment of the utterance maps to a particular sequence of phonemes in the path.
- the utterance 100 may include the phrase "cat and dog," and the pattern classification module 106 may be configured to step through the search graph 300 phoneme by phoneme to find the path beginning with initial state "#[k]ae” and ending with terminal state "cat and dog.”
- the pattern classification module 106 may also be configured to find one or more additional paths through the search graph 300.
- the pattern classification module 106 may further be configured to associate the utterance 100 with the path with initial state "#[k]ae” and ending with terminal state "cat and mouse,” and with the path with initial state "#[k]ae” and ending with terminal state “catapult.” Nonetheless, the pattern classification module 106 may be configured to assign a lower cost (or a higher probability of occurrence) to the path with terminal state "cat and dog” than to other paths. Consequently, the path with terminal state "cat and dog” may be selected as the most likely transcription for the input utterance 100.
- ASR systems can operated in many different ways. The examples described above are presented for purposes of illustration and may not be the only way in which an ASR system operates.
- ASR systems to create the speech recognition database, may be configured to mine document sources such as typed queries, news articles, and other materials to generate statistical language models.
- a language model may assign a certain probability to every possible word sequence, for example.
- the language model may allow word sequences that do not occur in the documents sources, i.e., the language model may allow permutations and combinations of words of phrases that occur or do not occur in the document sources. Generalizing to sequences that do not occur in the documents sources may be referred to as smoothing.
- Smoothing can be useful since a user may utter unique or new phrases that may not exist in the document sources. However, allowing for permutations and combinations of words may produce nonsensical word sequences. For example, if a source phrase is "show me football results," a nonsensical word sequence may be "show results football me.”
- a reduction in the search space may cause ASR systems to be more computationally efficient.
- users of ASR systems may produce utterances with a high degree of repeatability.
- repetitions of utterances may be based on trends of indefinite duration (e.g., results for a seasonal sport).
- repetitions of utterances may be predictable based on popularity of topics with which the utterances may be associated (e.g., utterances associated with a current event of a given duration such as the Olympic).
- an ASR system may be configured to utilize such predictable repetitions to generate computationally efficient language models.
- the ASR system may be configured to generate sequences of words based on popular phrases. Further, instead of the language model allowing every single sequence of words of a popular phrase to be hypothesized regardless of the order of the words in the popular phrase, the ASR system may be configured to determine a set of groupings or subsequences of words of the popular phrase such that the groupings or the subsequences include words in the same order in which the words occur in the popular phrase.
- a popular phrase may include five words in a given sequence "word1 word2 word3 word4 word5.”
- a given language model may allow a subsequence or grouping "word2 word3 word5"; however, a more efficient language model may not, since this subsequence is not in the source popular phrase. In this manner, search space for the ASR system may be limited or reduced allowing for greater accuracy and computational efficiency.
- FIG. 4 is a flowchart of an example method for efficient speech recognition, in accordance with an embodiment.
- the method 400 may include one or more operations, functions, or actions as illustrated by one or more of blocks 402-406. Although the blocks are illustrated in a sequential order, these blocks may in some instances be performed in parallel, and/or in a different order than those described herein. Also, the various blocks may be combined into fewer blocks, divided into additional blocks, and/or removed based upon the desired implementation
- each block may represent a module, a segment, or a portion of program code, which includes one or more instructions executable by a processor for implementing specific logical functions or steps in the process.
- the program code may be stored on any type of computer readable medium or memory, for example, such as a storage device including a disk or hard drive.
- the computer readable medium may include a non-transitory computer readable medium or memory, for example, such as computer-readable media that stores data for short periods of time like register memory, processor cache and Random Access Memory (RAM).
- the computer readable medium may also include non-transitory media or memory, such as secondary or persistent long term storage, like read only memory (ROM), optical or magnetic disks, compact-disc read only memory (CD-ROM), for example.
- the computer readable media may also be any other volatile or non-volatile storage systems.
- the computer readable medium may be considered a computer readable storage medium, a tangible storage device, or other article of manufacture, for example,
- each block in Figure 4 may represent circuitry that is wired to perform the specific logical functions in the process.
- the method 400 includes receiving, at a computing device, information indicative of a frequency of submission of a search query to a search engine, and the search query may comprise a sequence of words.
- the computing device can be, for example, a mobile telephone, personal digital assistant (PDA), laptop, notebook, or netbook computer, tablet computing device, a wearable computing device, a server in a cloud-based computing system, etc.
- an abrupt increase in search query activity can result from a number of sources.
- Spiking can result from regular and popular occurrences such as a holiday or sporting event, or from irregular events such as high profile news items.
- the computing device e.g., a server
- a given search query may be a text string (phrase) or a voice search query uttered by a user of a given device (e.g., a mobile telephone), for example.
- popular or spiking queries can be identified or extracted every day, every week, or within any other unit of time.
- the method 400 includes, based on the frequency of submission of the search query exceeding a threshold, determining, for the sequence of words of the search query, groupings of one or more words of the search query based on an order in which the one or more words occur in the sequence of words of the search query.
- the computing device may be configured to determine a metric indicative of popularity of the search query, and to identify whether the search query is popular in the given period of time. For instance, the computing device may be configured to, based on historical use of search engine, determine a threshold such that if the frequency of submission of the search query exceeds the threshold, the search query can be designated as a popular or spiking search query.
- the computing device may be configured to determine a metric based on a time series analysis of submission of the query over time and compare the metric to a threshold to determine popularity of the query.
- the metric may, for example, be related to query acceleration or velocity.
- Query acceleration for a given query can be determined, as a difference between a current query velocity (or an average query velocity) and a previously calculated query velocity (or previously calculated average query velocity) determined at a previous time, multiplied by an instantaneous query velocity.
- the metric can be a function of the query velocity or the query acceleration or other parameters determined based on the time series analysis of the submission of the query over time. Other parameters or method of calculating these parameters are possible.
- the computing device may be configured to determine two popular phrases, based on respective frequency of submission of the two queries to the search engine: "hello world I am here," and "world war two.”
- Each of the two search queries comprises a sequence of words in a given order.
- the search query "world war two” includes the three words “word,” “war,” and "two” in that sequence.
- the computing device may be configured to determine groupings of words based on an order in which the words occur in a corresponding search query. For example, with respect to the search query "world war two,” the computing device may be configured to determine the following groupings of words: world world war world war two war war two two
- the groupings may also be referred to as factors.
- the groupings may be quadratic in a size of a given search query; thus, enumerating all the groupings of words may be prohibitive.
- the computing device may be configured to determine or generate an automaton representation and a factor graph for the search queries.
- the factor graph may represent the groupings more compactly and may allow for more efficient searching.
- FIG. 5A illustrates an example automaton representation 500 for example search queries, in accordance with an embodiment.
- the automaton representation 500 represents both search queries "hello world I am here," and "world war two.”
- the automaton representation 500 includes automaton states such as an initial state 502A, an intermediate state 502B, and a terminal state 502C.
- the automaton representation 500 also includes automaton arcs such as automaton arcs 504A and 504B, and each automaton arc may correspond to a word from the sequence of words of a given search query.
- Figure 5B illustrates an example bi-gram language model 506 for the example search queries, in accordance with an embodiment.
- the language model 506 allows for all possible groupings of words of the search queries regardless of the order of the words in the corresponding search query.
- the language model 506 is complex and may allow for nonsensical groupings of words such as: "hello world here I.”
- FIG. 5C illustrates an example factor graph 508 for the example search queries, in accordance with an embodiment.
- the factor graph 508 is less complex than the language model 506 depicted in Figure 5B , and allows for grouping of words based on the order of the words in the corresponding search query.
- the computing device may be configured to select a word represented by an automaton arc (e.g., arc 510A) connected to a first automaton state (e.g., initial state 512A); continue to a second automaton state (e.g., state 512B) adjacent to the first automaton state; and select a word represented by a second arc (e.g., arc 510B) to determine the grouping "I am," for example.
- a given grouping of the groupings may be allowed to begin at any given state in the factor graph 508.
- the factor graph 508 may allow for groupings such as "hello world I,” but does not allow "hello I”; in other words, the factor graph 508 does not allow skipping words or deviating from the order of the words in a source search query. In this manner, the factor graph 508 can be considered a compact and efficient way of representing groupings of words on a given search query based on an order in which the words occur in the given search query.
- the computing device may be configured to frequently (e.g., every day) identify popular or spiking queries (as described above at block 402) and build or generate a factor graph, such as the factor graph 508, for the queries. Generating the factor graph such as the factor graph 508 may be more efficient than building a full language model such as the language model 506. Furthermore, the factor graph 508 may yield more flexibility over allowing only verbatim spiking queries due to the fact that the factor graph 508 efficiently allows subsequences.
- a corresponding factor graph may allow the groupings "Einstein Relativity” and "Albert Einstein,” which, when submitted to a search engine, may result in similar search results to the popular query "Albert Einstein Relativity.”
- the method 400 includes providing information indicating the groupings to a speech recognition system to update a corpus of given sequences of words, and the speech recognition system is configured to convert a given spoken utterance into a given sequence of words based on the corpus of given sequences of words.
- the computing device e.g., server
- the computing device may include the speech recognition system.
- the speech recognition system may include a speech recognition database that includes a corpus of given sequences of words that may have been produced by a language model such as the language mode 112 in Figure 1 .
- the speech recognition system may be configured to receive a given spoken utterance, and match the given spoken utterance to a sequence of words from the corpus of given sequences of words as described in Figures 1-3 , for example.
- the computing device may be configured to generate a factor graph depicting the groupings of words of the spiking search query, and provide the factor graph and/or groupings to the speech recognition system to include the groupings in (e.g., augment) the corpus.
- the computing device may be configured to cause a search space in the corpus to be constrained.
- the search space may be constrained to at least the groupings represented by the search graph.
- the speech recognition system may be configured to attempt to match a given spoken utterance to one of the groupings before attempting to match the given spoken utterance to other word sequences in the corpus.
- the speech recognition system may be configured to generate a search graph, such as the search graph 300, corresponding to the factor graph generated for the popular query by the computing device.
- the search graph corresponding to the factor graph may be integrated into a larger search graph for other sequences of words, for example.
- the speech recognition system may be configured to attempt to find paths from an initial state in the search graph to a terminal state in the search graph, and may be configured to assign a total cost to one or more paths through the search graph based on costs associated with the states and/or transitions associated with each path.
- the paths corresponding to the groupings of words of the factor graph may be assigned less cost (i.e., assigned higher probability) than other paths, for example.
- the speech recognition system may receive spoken utterances that are not related to and do not match any of the groupings of words of the popular or spiking search query.
- the speech recognition system may be configured to constrain search space to the factor graph, i.e., attempt to trace paths of the factor graph to identify a high-confidence match, and if such an attempt fails, the speech recognition system may be configured to utilize a full language model or the rest of the corpus to identify a match.
- the speech recognition system may be configured to trace the factor graph and the full language model in parallel and terminate searching when a match is identified in either the factor graph or the full language model. Other search strategies that combine the search graph and the full language model are possible.
- a given sequence of words in the corpus may be assigned probabilities of occurrence that can be estimated based on respective number of appearances in the corpus.
- the computing device may be configured to update the probabilities of occurrence based on the groupings. For instance, the computing device may be configured to assign respective probabilities of occurrence to the groupings that are higher than given probabilities of occurrence of other sequences of words in the corpus.
- the assigned respective probabilities may be based on how popular the search query is, e.g., based on the information indicative of the frequency of submission of the search query to the search engine.
- the probabilities of occurrences for the groupings may be time-varying.
- popularity of a given search query may decrease over time.
- a search query about results of the Olympics may be popular for a period of time of the Olympics and perhaps for a given period of time after the Olympics; however, popularity of such a search query may decrease over time. Therefore, in this example, the computing device may be configured to cause the probabilities of occurrence of the groupings to decay over. In other examples, the computing device may be configured to continuously evaluating how popular the search query is, and accordingly update or modify the probabilities based on updated changes to popularity of the search query.
- Figure 6 illustrates an example distributed computing architecture, in accordance with an example embodiment.
- Figure 6 shows server devices 602 and 604 configured to communicate, via network 606, with programmable devices 608a, 608b, and 608c.
- the network. 606 may correspond to a LAN, a wide area network (WAN), a corporate the public Internet, or any other type of network configured to provide a communications path between networked computing devices.
- the network 606 may also correspond to a combination of one or more LANs, WANs, corporate intranets, and/or the public Internet.
- Figures 6 shows three programmable devices, distributed application architectures may serve tens, hundreds, or thousands of programmable devices.
- the programmable devices 608a, 608b, and 608c may be any sort of computing device, such as an ordinary laptop computer, desktop computer, network terminal, wireless communication device (e.g., a tablet, a cell phone or smart phone, a wearable computing device, etc.), and so on.
- the programmable devices 608a, 608b, and 608c may be dedicated to the design and use of software applications.
- the programmable devices 608a, 608b, and 608c may be general purpose computers that are configured to perform a number of tasks and may not be dedicated to software development tools.
- the server devices 602 and 604 can be configured to perform one or more services, as requested by programmable devices 608a, 608b, and/or 608c.
- server device 602 and/or 604 can provide content to the programmable devices 608a-608c.
- the content can include, but is not limited to, web pages, hypertext, scripts, binary data such as compiled software, images, audio, and/or video.
- the content can include compressed and/or uncompressed content.
- the content can be encrypted and/or unencrypted. Other types of content are possible as well.
- server device 602 and/or 604 can provide the programmable devices 608a-608c with access to software for database, search, computation, graphical, audio (e.g. speech recognition), video, World Wide Web/Internet utilization, and/or other functions.
- server devices Many other examples are possible as well.
- the server devices 602 and/or 604 can be cloud-based devices that store program logic and/or data of cloud-based applications and/or services.
- the server devices 602 and/or 604 can be a single computing device residing in a single computing center.
- the server device 602 and/or 604 can include multiple computing devices in a single computing center, or multiple computing devices located in multiple computing centers in diverse geographic locations.
- Figure 6 depicts each of the server devices 602 and 604 residing in different physical locations.
- data and services at the server devices 602 and/or 604 can be encoded as computer readable information stored in non-transitory, tangible computer readable media (or computer readable storage media) and accessible by programmable devices 608a, 608b, and 608c, and/or other computing devices.
- data at the server device 602 and/or 604 can be stored on a single disk drive or other tangible storage media, or can be implemented on multiple disk drives or other tangible storage media located at one or more diverse geographic locations.
- FIG. 7A is a block diagram of a computing device (e.g., system) in accordance with an example embodiment.
- computing device 700 shown in Figure 7A can be configured to perform one or more functions of the server devices 602, 604, network 606, and/or one or more of the programmable devices 608a, 608b, and 608c.
- the computing device 700 may include a user-interface module 702, a network communications interface module 704, one or more processors 706, and data storage 708, all of which may be linked together via a system bus, network, or other connection mechanism 710.
- the user-interface module 702 can be operable to send data to and/or receive data from external user input/output devices.
- user-interface module 702 can be configured to send and/or receive data to and/or from user input devices such as a keyboard, a keypad, a touchscreen, a computer mouse, a track ball, a joystick, a camera, a voice recognition/synthesis module, and/or other similar devices.
- the user-interface module 702 can also be configured to provide output to user display devices, such as one or more cathode ray tubes (CRT), liquid crystal displays (LCD), light emitting diodes (LEDs), displays using digital light processing (DLP) technology, printers, light bulbs, and/or other similar devices, either now known or later developed.
- the user-interface module 702 can also be configured to generate recognized speech or audible output(s), and may include a speaker, speaker jack, audio output port, audio output device, earphones, and/or other similar devices.
- the network communications interface module 704 can include one or more wireless interfaces 712 and/or one or more wireline interfaces 714 that are configurable to communicate via a network, such as network 606 shown in Figure 6 .
- the wireless interfaces 712 can include one or more wireless transmitters, receivers, and/or transceivers, such as a Bluetooth transceiver, a Zigbee transceiver, a Wi-Fi transceiver, a LTE transceiver, and/or other similar type of wireless transceiver configurable to communicate via a wireless network.
- the wireline interfaces 714 can include one or more wireline transmitters, receivers, and/or transceivers, such as an Ethernet transceiver, a Universal Serial Bus (USB) transceiver, or similar transceiver configurable to communicate via a twisted pair wire, a coaxial cable, a fiber-optic link, or a similar physical connection to a wireline network.
- wireline transmitters, receivers, and/or transceivers such as an Ethernet transceiver, a Universal Serial Bus (USB) transceiver, or similar transceiver configurable to communicate via a twisted pair wire, a coaxial cable, a fiber-optic link, or a similar physical connection to a wireline network.
- USB Universal Serial Bus
- the network communications interface module 704 can be configured to provide reliable, secured, and/or authenticated communications. For each communication described herein, information for ensuring reliable communications (i.e., guaranteed message delivery) can be provided, perhaps as part of a message header and/or footer (e.g., packet/message sequencing information, encapsulation header(s) and/or footer(s), size/time information, and transmission verification information such as CRC and/or parity check values). Communications can be made secure ( e.g., be encoded or encrypted) and/or decrypted/decoded using one or more cryptographic protocols and/or algorithms, such as, but not limited to, DES, AES, RSA, Diffie-Hellman, and/or DSA. Other cryptographic protocols and/or algorithms can be used as well or in addition to those listed herein to secure (and then decrypt/decode) communications.
- cryptographic protocols and/or algorithms can be used as well or in addition to those listed herein to secure (and then decrypt/decode) communications
- the processors 706 can include one or more general purpose processors and/or one or more special purpose processors (e.g., digital signal processors, application specific integrated circuits, etc.).
- the processors 706 can be configured to execute computer-readable program instructions 715 that are contained in the data storage 708 and/or other instructions as described herein (e.g., the method 400),
- the data storage 708 can include one or more computer-readable storage media that can be read and/or accessed by at least one of processors 706.
- the one or more computer-readable storage media can include volatile and/or non-volatile storage components, such as optical, magnetic, organic or other memory or disc storage, which can be integrated in whole or in part with at least one of the processors 706.
- the data storage 708 can be implemented using a single physical device (e.g., one optical, magnetic, organic or other memory or disc storage unit), while in other examples, the data storage 708 can be implemented using two or more physical devices.
- the data storage 708 can include computer-readable program instructions 715 and perhaps additional data, such as but not limited to data used by one or more processes and/or threads of a software application.
- data storage 708 can additionally include storage required to perform at least part of the herein-described methods (e.g., the method 400) and techniques and/or at least part of the functionality of the herein-described devices and networks.
- FIG. 7B depicts a cloud-based server system, in accordance with an example embodiment.
- functions of the server device 602 and/or 604 can be distributed among three computing clusters 716a, 716b, and 716c.
- the computing cluster 716a can include one or more computing devices 718a, cluster storage arrays 720a, and cluster routers 722a connected by a local cluster network 724a.
- the computing cluster 716b can include one or more computing devices 718b, cluster storage arrays 720b, and cluster routers 722b connected by a local cluster network 724b.
- computing cluster 716c can include one or more computing devices 718c, cluster storage arrays 720c, and cluster routers 722c connected by a local cluster network 724c,
- each of the computing clusters 716a, 716b, and 716c can have an equal number of computing devices, an equal number of cluster storage arrays, and an equal number of cluster routers. In other examples, however, each computing cluster can have different numbers of computing devices, different numbers of cluster storage arrays, and different numbers of cluster routers. The number of computing devices, cluster storage arrays, and cluster routers in each computing cluster can depend on the computing task or tasks assigned to each computing cluster.
- the computing devices 718a can be configured to perform various computing tasks of the server device 602.
- the various functionalities of the server device 602 can be distributed among one or more of computing devices 718a, 718b, and 718c.
- the computing devices 718b and 718c in the computing clusters 716b and 716c can be configured similarly to the computing devices 718a in computing cluster 716a.
- the computing devices 718a, 718b, and 718c can be configured to perform different functions.
- computing tasks and stored data associated with server devices 602 and/or 604 can be distributed across computing devices 718a, 718b, and 718c based at least in part on the processing requirements of the server devices 602 and/or 604, the processing capabilities of computing devices 718a, 718b, and 718c, the latency of the network links between the computing devices in each computing cluster and between the computing clusters themselves, and/or other factors that can contribute to the cost, speed, fault-tolerance, resiliency, efficiency, and/or other design goals of the overall system architecture.
- the cluster storage arrays 720a, 720b, and 720c of the computing clusters 716a, 716b, and 716c can be data storage arrays that include disk array controllers configured to manage read and write access to groups of hard disk drives.
- the disk array controllers alone or in conjunction with their respective computing devices, can also be configured to manage backup or redundant copies of the data stored in the cluster storage arrays to protect against disk drive or other cluster storage array failures and/or network failures that prevent one or more computing devices from accessing one or more cluster storage arrays.
- cluster storage arrays 720a, 720b, and 720c can be configured to store the data of the server device 602, while other cluster storage arrays can store data of the server device 604. Additionally, some cluster storage arrays can be configured to store backup versions of data stored in other cluster storage arrays.
- the cluster routers 722a, 722b, and 722c in computing clusters 716a, 716b, and 716c can include networking equipment configured to provide internal and external communications for the computing clusters.
- the cluster routers 722a in computing cluster 716a can include one or more internet switching and routing devices configured to provide (i) local area network communications between the computing devices 718a and the cluster storage arrays 720a via the local cluster network 724a, and (ii) wide area network communications between the computing cluster 716a and the computing clusters 716b and 716c via the wide area network connection 726a to network 606.
- the cluster routers 722b and 722c can include network equipment similar to the cluster routers 722a, and the cluster routers 722h and 722c can perform similar networking functions for the computing clusters 716b and 716c that the cluster routers 722a perform for the computing cluster 716a.
- the configuration of the cluster routers 722a, 722b, and 722c can be based at least in part on the data communication requirements of the computing devices and cluster storage arrays, the data communications capabilities of the network equipment in the cluster routers 722a, 722b, and 722c, the latency and throughput of the local networks 724a, 724b, 724c, the latency, throughput, and cost of wide area network links 726a, 726b, and 726c, and/or other factors that can contribute to the cost, speed, fault-tolerance, resiliency, efficiency and/or other design goals of the moderation system architecture.
- the configurations illustrated in Figures 6 and 7A-7B can be used for implementations described with respect to the method 400.
- the computing device implementing the method 400 can be a cloud-based device (e.g., server devices 602 and/or 604).
- the computing device may be configured to receive information associated with search queries submitted by the programmable devices 608a-c in Figure 6 , or the computing devices 718a-c of Figure 7B to determine spiking queries and generate corresponding factor graphs.
- the factor graphs can then be provided to speech recognition systems that may also be implemented in cloud-based device such as the server device 602 and/or 604.
- the disclosed methods may be implemented as computer program instructions encoded on a non-transitory computer-readable storage media in a machine-readable format, or on other non-transitory media or articles of manufacture.
- Figure 8 is a schematic illustrating a conceptual partial view of an example computer program product that includes a computer program for executing a computer process on a computing device, arranged according to at least some embodiments presented herein.
- the example computer program product 800 is provided using a signal bearing medium 801.
- the signal bearing medium 801 may include one or more programming instructions 802 that, when executed by one or more processors may provide functionality or portions of the functionality described above with respect to Figures 1-7 .
- the signal bearing medium 801 may encompass a computer-readable medium 803, such as, but not limited to, a hard disk drive, a Compact Disc (CD), a Digital Video Disk (DVD), a digital tape, memory, etc.
- the signal bearing medium 801 may encompass a computer recordable medium 804, such as, but not limited to, memory, read/write (R/W) CDs, R/W DVDs, etc.
- the signal bearing medium 801 may encompass a communications medium 805, such as, but not limited to, a digital and/or an analog communication medium (e.g., a fiber optic cable, a waveguide, a wired communications link, a wireless communication link, etc.).
- a communications medium 805 such as, but not limited to, a digital and/or an analog communication medium (e.g., a fiber optic cable, a waveguide, a wired communications link, a wireless communication link, etc.).
- the signal bearing medium 801 may be conveyed by a wireless form of the communications medium 805 (e.g., a wireless communications medium conforming to the IEEE 802.11 standard or other transmission protocol).
- the one or more programming instructions 802 may be, for example, computer executable and/or logic implemented instructions.
- a computing device such as the programmable devices 608a-c in Figure 6 , or the computing devices 718a-c of Figure 7B may be configured to provide various operations, functions, or actions in response to the programming instructions 802 conveyed to programmable devices 608a-c or the computing devices 718a-c by one or more of the computer readable medium 803, the computer recordable medium 804, and/or the communications medium 805.
Description
- The present application claims priority to
U.S. Patent Application Serial Number 13/832,136, filed on March 15, 2013 U.S. Patent Application Serial Number 61/715,365, filed on October 18, 2012 - Automatic speech recognition (ASR) technology can be used to map audio utterances to textual representations of those utterances. Some ASR systems use "training" where an individual speaker reads sections of text into the speech recognition system. These systems analyze a specific voice of a person and use the voice to fine tune recognition of that speech for that person resulting in more accurate transcription. Systems that do not use training may be referred to as "Speaker Independent" systems. Systems that use training may be referred to as "Speaker Dependent" systems.
- Document
US 2007/106685 A1 discloses a method and apparatus for re-indexing media content for search applications that includes steps and structure for providing a speech recognition database that include entries defining acoustical representations for a plurality of words. Further disclosed providing a searchable database containing a plurality of metadata documents descriptive of a plurality of media resources, each of the plurality of metadata documents including a sequence of speech recognized text indexed using the speech recognition database, updating the speech recognition database with at least one word candidate, and re-indexing the sequence of speech recognized text for a subset of the plurality of metadata documents using the updated speech recognition database. The set of word candidates are words appearing as the top-most requested search terms or spikes in particular search terms received by a search engine. The update module monitors and tracks the usage of search terms in search requests on a per n-gram basis. The update module identifies the top-most requested unigrams, bigrams, trigram, or other n-gram using a statistical analysis technique or detects spikes in the usage of particular unigrams, bigrams or trigrams in the search requests over a period of time. Such an event can trigger the search engine to check and update the language model and/or dictionary. The update module identifies word candidates from the list of identified search terms. The set of word candidates are then processed by the update module to update the speech recognition database. - The present application discloses systems and methods for speech recognition processing. In one aspect, a method is described. The method may comprise receiving, at a computing device, information indicative of a frequency of submission of a search query to a search engine. The search query may comprise a sequence of words. The method also may comprise, based on the frequency of submission of the search query exceeding a threshold, determining, for the sequence of words of the search query, groupings of one or more words of the search query based on an order in which the one or more words occur in the sequence of words of the search query. The method further may comprise providing information indicating the groupings to a speech recognition system to update a corpus of given sequences of words. The speech recognition system may be configured to convert a given spoken utterance into a given sequence of words based on the corpus of given sequences of words.
- In another aspect, a computer readable medium having stored thereon instructions that, when executed by a computing device, cause the computing device to perform functions is described. The functions may comprise receiving information indicative of a frequency of submission of a search query to a search engine. The search query may comprise a sequence of words. The functions also may comprise, based on the frequency of submission of the search query exceeding a threshold, determining, for the sequence of words of the search query, groupings of one or more words of the search query based on an order in which the one or more words occur in the sequence of words of the search query. The functions further may comprise providing information indicating the groupings to a speech recognition system to update a corpus of given sequences of words. The speech recognition system may be configured to convert a given spoken utterance into a given sequence of words based on the corpus of given sequences of words.
- In still another aspect, a device is described. The device may comprise at least one processor. The device also may comprise a data storage, and program instructions in the data storage that, upon execution by the at least one processor, cause the device to receive information indicative of a frequency of submission of a search query to a search engine. The search query may comprise a sequence of words. The program instructions in the data storage, upon execution by the at least one processor, also cause the device to, based on the frequency of submission of the search query exceeding a threshold, determine, for the sequence of words of the search query, groupings of one or more words of the search query based on an order in which the one or more words occur in the sequence of words of the search query. The program instructions in the data storage, upon execution by the at least one processor, further cause the device to provide information indicating the groupings to a speech recognition system to update a corpus of given sequences of words. The speech recognition system may be configured to convert a given spoken utterance into a given sequence of words based on the corpus of given sequences of words. The speech recognition system also may include probabilities of occurrence for the given sequences of words of the corpus.
- The foregoing summary is illustrative only and is not intended to be in any way limiting. In addition to the illustrative aspects, embodiments, and features described above, further aspects, embodiments, and features will become apparent by reference to the figures and the following detailed description.
-
-
Figure 1 illustrates an example Automatic Speech Recognition (ASR) system, in accordance with an example embodiment -
Figure 2 illustrates aspects of an example acoustic model, in accordance with an embodiment. -
Figure 3 illustrates an example search graph of an ASR system, in accordance with an embodiment. -
Figure 4 is a flowchart of an example method for speech recognition processing, in accordance with an embodiment. -
Figure 5A illustrates an example automaton representation for example search queries, in accordance with an embodiment. -
Figure 5B illustrates an example bi-gram language model for the example search queries, in accordance with an embodiment. -
Figure 5C illustrates an example factor graph for the example search queries, in accordance with an embodiment. -
Figure 6 illustrates an example distributed computing architecture, in accordance with an example embodiment. -
Figure 7A is a block diagram of an example computing device, in accordance with an example embodiment illustrates. -
Figure 7B illustrates a cloud-based server system, in accordance with an example embodiment. -
Figure 8 is a schematic illustrating a conceptual partial view of an example computer program product that includes a computer program for executing a computer process on a computing device, arranged according to at least some embodiments presented herein. - The following detailed description describes various features and functions of the disclosed systems and methods with reference to the accompanying figures. In the figures, similar symbols identify similar components, unless context dictates otherwise. The illustrative system and method embodiments described herein are not meant to be limiting. It may be readily understood that certain aspects of the disclosed systems and methods can be arranged and combined in a wide variety of different configurations, all of which are contemplated herein.
- As computing power continues to increase, automatic speech recognition (ASR) systems and devices may be deployed in various environments to provide speech-based user interfaces. Some of these environments include residences, businesses, vehicles, etc.
- In residences and businesses, for example, ASR may provide voice control over devices, such as large appliances, (e.g., ovens, refrigerators, dishwashers, washers and dryers), small appliances (e.g., toasters, thermostats, coffee makers, microwave ovens), and media devices (stereos, televisions, digital video recorders, digital video players), as well as doors, lights, curtains, and so on. In vehicles, ASR may provide hands-free use of communication technologies (e.g., cellular phones), media devices (e.g., radios and video players), mapping technologies (e.g., navigation systems), environmental control (e.g., heating and air conditioning), and so on. In an example, ASR can be used to convert a voice search query into a text string that can be sent to a search engine to obtain search results. The potential uses for voice control are many and these examples should not be viewed as limiting.
- In an example, ASR can be performed at the device that receives utterances from a speaker. For this device-based ASR, each user device may be configured with an ASR module. In another example, speech recognition can be performed at a remote network server (e.g., a server or cluster of servers on the Internet). While, in this example, speech recognition may not incorporate ASR into user devices, the user devices may still be configured to have a communication path with the remote ASR system (e.g., through Internet access).
- In still another example, speech recognition can be performed by use of a local ASR system that offloads performance of at least some aspects of ASR to remote devices. The local ASR system may be a dedicated device or devices performing ASR, or software configured to operate, for instance, on a general purpose computing platform, This local ASR system may be physically located in a residence, business, vehicle, etc., and may operate even if the user devices do not have Internet access.
- In some examples, a user device may receive an utterance from a speaker, and transmit a representation of the utterance to the local ASR system. The local ASR system may transcribe the representation of the utterance into a textual representation of the utterance, and transmit this textual representation to the user device. Alternatively, the local ASR system may instead transmit a command based on a transcription of the utterance to the user device. This command may be based on a transcribed textual representation of the utterance, or may be derived more directly from the representation of the utterance. The command may also be of a command set or command language supported by the user device. In one example, the utterance may represent a voice search query, and the local ASH system may be configured to transmit the transcription of the voice search query to a search engine to obtain respective search results that can be communicated to the user device.
-
Figure 1 illustrates an example ASR system, in accordance with an embodiment. At run-time, input to the ASR system may include an utterance 100, and the output may include one or more text strings and possibly associatedconfidence levels 101. Components of the ASR system may include afeature analysis module 102 that may be configured to producefeature vectors 104, apattern classification module 106, anacoustic model 108, adictionary 110, and alanguage model 112. Thepattern classification module 106 may incorporate various aspects of theacoustic model 108, thedictionary 110, and thelanguage model 112. - The example ASR system depicted in
Figure 1 is for illustration, only. Other ASR system arrangements, including different components, different relationships between the components, and/or different processing, may be possible. - The
feature analysis module 102 may be configured to receive the utterance 100. The utterance 100 may include an analog or digital representation of human speech, and may possibly contain background noise as well. Thefeature analysis module 102 may be configured to convert the utterance 100 to a sequence of one ormore feature vectors 104. Each feature vector of thefeature vectors 104 may include temporal and/or spectral representations of acoustic features of at least a portion of the utterance 100. For instance, a feature vector may include mel-frequency cepstrum coefficients of such a portion. - The mel-frequency cepstrum coefficients may represent the short-term power spectrum of a portion of the utterance 100. They may be based on, for example, a linear cosine transform of a log power spectrum on a nonlinear mel scale of frequency. (A mel scale may be a scale of pitches subjectively perceived by listeners to be about equally distant from one another, even through the actual frequencies of these pitches are not equally distant from one another).
- To derive these coefficients, the
feature analysis module 102 may be configured to sample and quantize the utterance 100, divide the utterance 100 into overlapping or nonoverlapping frames of 15 milliseconds, and perform spectral analysis on the frames to derive the spectral components of each frame. Thefeature analysis module 102 may further be configured to perform noise removal, convert the standard spectral coefficients to mel-frequency cepstrum coefficients, and calculate first-order and second-order cepstral derivatives of the mel-frequency cepstrum coefficients. - The first-order cepstral coefficient derivatives may be calculated based on the slopes of linear regressions performed over windows of two or more consecutive frames. The second-order cepstral coefficient derivatives may be calculated based on the slopes of linear regressions performed over windows of two or more consecutive sets of first-order cepstral coefficient derivatives. However, there may be other ways of calculating the first-order and second-order cepstral coefficient derivatives.
- In some examples, one or more frames of the utterance 100 may be represented by a feature vector of mel-frequency cepstrum coefficients, first-order cepstral coefficient derivatives, and second-order cepstral coefficient derivatives. For example, the feature vector may contain 13 coefficients, 13 first-order derivatives, and 13 second-order derivatives, therefore having a length of 39. However, feature vectors may use different combinations of features in other possible examples.
- The
pattern classification module 106 may be configured to receive a sequence of thefeature vectors 104 from thefeature analysis module 102 and produce, as output, one or moretext string transcriptions 101 of the utterance 100. Eachtranscription 101 may be accompanied by a respective confidence level indicating an estimated likelihood that the transcription is correct (e.g., 80% confidence, 90% confidence, etc.). - To produce the
text string transcriptions 101, thepattern classification module 106 may be configured to include, or incorporate aspects of theacoustic model 108, thedictionary 110, and/or thelanguage model 112. In some examples, thepattern classification module 106 may also be configured to use a search graph that represents sequences of word or sub-world acoustic features that appear in spoken utterances. - The
acoustic model 108 may be configured to determine probabilities that thefeature vectors 104 may have been derived from a particular sequence of spoken words and/or subword sounds. This may involve mapping sequences of thefeature vectors 104 to one or more phonemes, and then mapping sequences of phonemes to one or more words. - A phoneme may be considered to be the smallest segment of an utterance that encompasses a meaningful contrast with other segments of utterances. Thus, a word typically includes one or more phonemes. For example, phonemes may be thought of as utterances of letters; however, some phonemes may present multiple letters. An example phonemic spelling for the American English pronunciation of the word "cat" may be /k/ /ae/ /t/, including the phonemes /k/, /ae/, and /t/. Another example phonemic spelling for the word "dog" may be /d/ /aw/ /g/, including the phonemes /d/, /aw/, and /g/.
- Different phonemic alphabets exist, and these alphabets may have different textual representations for the various phonemes therein. For example, the letter "a" may be represented by the phoneme /ae/ for the sound in "cat," by the phoneme /ey/ for the sound in "ate," and by the phoneme /ah/ for the sound in "bet." Other phonemic representations are possible.
- Common phonemic alphabets for American English contain about 40 distinct phonemes. Each of these phonemes may be associated with a different distribution of feature vector values. The
acoustic model 108 may be configured to estimate the phoneme(s) in a feature vector by comparing the feature vector to the distributions for each of the 40 phonemes, and finding one or more phonemes that are most likely represented by the feature vector. - In one example, the
acoustic model 108 may include a hidden Markov model (HMM). An HMM may model a system as a Markov process with unobserved (i.e., hidden) states. Each HMM state may be represented as a multivariate Gaussian distribution that characterizes the statistical behavior of the state. Additionally, each state may also be associated with one or more state transitions that specify a probability of making a transition from a current state to another state. - When applied to an ASR system, the combination of the multivariate Gaussian distribution and the state transitions for each state may define a time sequence of feature vectors over the duration of one or more phonemes. Alternatively or additionally, the HMM may model the sequences of phonemes that define words. Thus, some HMM-based acoustic models may also take into account phoneme context when mapping a sequence of feature vectors to one or more words.
-
Figure 2 illustrates aspects of an exampleacoustic model 200, in accordance with an embodiment. Theacoustic model 200 defines a sequence of phonemes that make up the word "cat." Each phoneme is represented by a 3-state HMM with an initial state, a middle state, and an end state representing the statistical characteristics at the beginning of phoneme, the middle of the phoneme, and the end of the phoneme, respectively. Each state (e.g., state /k/1, state /k/2, etc.) may represent a phoneme and may include one or more transitions. - The
acoustic model 200 may represent a word by concatenating the respective 3-state HMMs for each phoneme in the word together, with appropriate transitions. These concatenations may be performed based on information in thedictionary 110. In some implementations, more or fewer states per phoneme may be used in theacoustic model 200. - The
acoustic model 200 may be trained using recordings of each phoneme in numerous contexts (e.g., various words and sentences) so that a representation for each of the phoneme's states can be obtained. These representations may encompass the multivariate Gaussian distributions discussed above. - To train the
acoustic model 200, a possibly large number of utterances containing spoken phonemes may each be associated with transcriptions. These utterances may be words, sentences, and so on, and may be obtained from recordings of everyday speech or some other source. The transcriptions may be automatic or manual (human-made) text strings of the utterances. - The utterances may be segmented according to their respective transcriptions. For instance, training of the
acoustic model 200 may involve segmenting spoken strings into units (e.g., using either a Baum-Welch and/or Viterbi alignment method), and then using the segmented utterances to build statistical distributions for each phoneme state. - Consequently, as more data (utterances and their associated transcriptions) are used for training, a more accurate acoustic model can be produced. However, even a well-trained acoustic model may have limited accuracy when used for ASR in a domain for which it was not trained. For instance, if a given acoustic model is trained by utterances from a number of speakers of American English, this acoustic model may perform well when used for ASR of American English, but may be less accurate when used for ASR of, e.g., British English.
- Also, if the
acoustic model 200 is trained using utterances from a number of speakers, it will likely end up representing each phoneme as a statistical average of the pronunciation of this phoneme across all of the speakers. Thus, theacoustic model 200 when trained in this fashion may represent the pronunciation and usage of a hypothetical average speaker, rather than any particular speaker. - Referring back to
Figure 1 , thedictionary 110 may define a pre-established mapping between phonemes and words. This mapping may include a list of tens or hundreds of thousands of phoneme-pattern-to-word mappings, for example. Thus, in some examples, thedictionary 110 may include a lookup table, such as Table 1 shown below. Table 1 illustrates how thedictionary 110 may list phonemic sequences that thepattern classification module 106 may be configured to identify for corresponding words that the ASR system is attempting to recognize. Therefore, thedictionary 110 may be used when developing phonemic state representations of words that are illustrated by theacoustic model 200.Table 1 Word Phonetic Interpretation cat /k/ /ae/ /t/ and /ay/ /n/ /d/ dog /d/ /aw/ /g/ - The
language model 112 may be configured to assign probabilities to sequences of phonemes or words, based on a likelihood of that sequence of phonemes or words occurring in an input utterance to the ASR system. Thus, for example, thelanguage model 112 may define a conditional probability of w n (for nth word in a phrase transcribed from an utterance), given values of a pattern of n-1 previous words in the phrase. An example conditional probability may be expressed as: - In general, a language model may operate on n-grams, which, for example, may be sequences of n phonemes or words that are represented in the
pattern classification module 106. Language models with values of n greater than 5 can require a large memory or storage space; therefore, smaller n-grams (e.g., 3-grams, which are also referred to as tri-grams) may be used to yield acceptable results efficiently. Tri-grams are used herein for purposes of illustration. Nonetheless, any value of n may be may be used with the examples herein. - Language models may be trained through analysis of a corpus of text strings or sequences of words. This corpus may contain a large number of words, e.g., hundreds, thousands, millions or more. These words may be derived from utterances spoken by users of an ASR system and/or from written documents. For instance, the
language model 112 can be determined or developed based on word patterns occurring in human speech, written text (e.g., emails, web pages, reports, academic papers, word processing documents, etc.), search queries, and so on. - From such a corpus, tri-gram probabilities can be estimated based on their respective number of appearances in the corpus. In other words, if C(w 1,w 2,w 3) is the number of occurrences of a sequence of words w 1, w 2, w 3 in the corpus, then a probability of occurrence for the sequence of words can be expressed as:
- Thus, the
language model 112 may be represented as a table of conditional probabilities. Table 2 illustrates an example of such a table that could form the basis of theLanguage model 112. Particularly, Table 2 contains tri-gram conditional Probabilities.Table 2 Tri-gram Conditional Probabilities P(dog|cat,and) = 0.50 P(mouse|cat, and) = 0.35 P(bird|cat,and) = 0.14 P(fiddle|cat,and) = 0.01 - For the 2-gram prefix "cat and," Table 2 indicates that, based on observed occurrences in the corpus, 50% of the time the next 1-gram is "dog." Likewise, 35% of the time, the next 1-gram is "mouse," 14% of the time the next 1-gram is "bird," and 1% of the time the next 1-gram is "fiddle." In a fully-trained ASR system, the
language model 112 would contain many more entries, and these entries may include more than just one 2-gram prefix. - Once the
acoustic model 108 and thelanguage model 112 are appropriately trained, thefeature analysis model 102 and thepattern classification module 106 may be configured to perform ASR. Provided with the input utterance 100, the ASR system can search the space of valid word sequences from thelanguage model 112 to find the word sequence with the maximum likelihood of having been spoken in the utterance 100. However, size of search space can be quite large, and methods to reduce the search space may cause such search to be more computationally efficient. As an example, heuristic techniques that can be used to reduce the complexity of the search, potentially by orders of magnitude. Other methods of limiting the search space are possible. For example, the search space can be constrained to popular phrases in a given period of time. - A finite state transducer (FST) can be used to compactly represent multiple phoneme patterns that map to a single word. Some words, such as "data," "either," "tomato," and "potato," have multiple pronunciations. The phoneme sequences for these pronunciations can be represented in a single FST per word.
- This process of creating efficient phoneme-level FSTs can be carried out for each word in the
dictionary 110, and the resulting word FSTs can be combined into sentence FSTs using thelanguage model 112. Ultimately, a network of states for phonemes, words, and sequences of words can be developed and represented in a compact search graph. -
Figure 3 illustrates anexample search graph 300 of an ASR system, in accordance with an embodiment. Thisexample search graph 300 is smaller and less complex than a search graph that may be used in an ASR system, and is used for illustration. Particularly, thesearch graph 300 was trained with five input utterances, "catapult," "cat and mouse," "cat and dog," "cat," and "cap." - Each circle in the
search graph 300 may represent a state associated with the processing of an input utterance that has been mapped to phonemes. For purposes of simplicity, each phoneme in thesearch graph 300 is represented with a single state rather than multiple states. Also, self-transitions are omitted from thesearch graph 300 to simplifyFigure 3 . - States in the
search graph 300 are named based on a current phoneme context of the input utterance, using the format "x[y]z" to indicate that the current phoneme being considered, y, has a left-context of the phoneme x and a right context of the phoneme z. In other words, the state "x[y]z" indicates a point in processing an utterance in which the current phoneme being considered is y, the previously considered phoneme in the utterance is x, and the next phoneme to be considered in the utterance is z. The beginning of an utterance and the end of an utterance are represented by the "#" character, and also may be referred to as null phonemes. - Terminal states may be represented by a recognized word or phrase in quotes. The
search graph 300 includes five terminal states, representing recognition of the words or sequences of words (i.e., phrases) such as "catapult," "cat and mouse," "cat and dog," "cat," and "cap." - Transitions from one state to another may represent an observed ordering of phonemes in the corpus. For instance, the state "#[k]ae" represents the recognition of a "k" phoneme with a left context of a null phoneme and a right context of an "ae" phoneme. There are two transitions from the state "#[k]ae" - one for which the next phoneme (the phoneme after the "ae") is a "t" and another for which the next phoneme is a "p."
- Based on the
acoustic model 108, thedictionary 110, and thelanguage model 112, costs may be assigned to one or more of the states and/or transitions. For example, if a particular phoneme pattern is rare, a transition to a state representing that phoneme pattern may have a higher cost than a transition to a state representing a more common phoneme pattern. Similarly, the conditional probabilities from the language models (see Table 2 for examples) may also be used to assign costs to states and/or transitions. For instance, in Table 2, given a phrase with the words "cat and," the conditional probability of the next word in the phrase being "dog" is 0.5, while the conditional probability of the next word in the phrase being "mouse" is 0.35. Therefore, the transition from state "ae[n]d" to state "n[d]m" may have a higher cost than the transition from state "ae[n]d" to state "n[d]d." - The
search graph 300, including any states, transitions between states, and associated costs therein, may be used to estimate text string transcriptions for new input utterances. For example, thepattern classification module 106 may determine a sequence of one or more words that match an input utterance based on thesearch graph 300. Thepattern classification module 106 may be configured to attempt to find:language model 112. For example, P(w) may be based on n-gram conditional probabilities as discussed above, as well as other factors. The function argmaxw may return the value of w that maximizes P(a|w)P(w). - Referring back to
Figure 1 , to find text strings that may match the utterance 100, thepattern classification module 106 may be configured to attempt to find paths from an initial state in thesearch graph 300 to a terminal state in thesearch graph 300 based on thefeature vectors 104. This process may involve thepattern classification module 106 performing a breadth-first search, A-star (A*) search, beam search, or some other type of search on thesearch graph 300. Thepattern classification module 106 may be configured to assign a total cost to one or more paths through thesearch graph 300 based on costs associated with the states and/or transitions of associated with each path. Some of these costs may be based on, for instance, a confidence level that a particular segment of the utterance maps to a particular sequence of phonemes in the path. - As an example, the utterance 100 may include the phrase "cat and dog," and the
pattern classification module 106 may be configured to step through thesearch graph 300 phoneme by phoneme to find the path beginning with initial state "#[k]ae" and ending with terminal state "cat and dog." Thepattern classification module 106 may also be configured to find one or more additional paths through thesearch graph 300. For example, thepattern classification module 106 may further be configured to associate the utterance 100 with the path with initial state "#[k]ae" and ending with terminal state "cat and mouse," and with the path with initial state "#[k]ae" and ending with terminal state "catapult." Nonetheless, thepattern classification module 106 may be configured to assign a lower cost (or a higher probability of occurrence) to the path with terminal state "cat and dog" than to other paths. Consequently, the path with terminal state "cat and dog" may be selected as the most likely transcription for the input utterance 100. - ASR systems can operated in many different ways. The examples described above are presented for purposes of illustration and may not be the only way in which an ASR system operates.
- As described above, search space in a speech recognition database of an ASR system can be quite large. In some examples, ASR systems, to create the speech recognition database, may be configured to mine document sources such as typed queries, news articles, and other materials to generate statistical language models. A language model may assign a certain probability to every possible word sequence, for example. In examples, the language model may allow word sequences that do not occur in the documents sources, i.e., the language model may allow permutations and combinations of words of phrases that occur or do not occur in the document sources. Generalizing to sequences that do not occur in the documents sources may be referred to as smoothing.
- Smoothing can be useful since a user may utter unique or new phrases that may not exist in the document sources. However, allowing for permutations and combinations of words may produce nonsensical word sequences. For example, if a source phrase is "show me football results," a nonsensical word sequence may be "show results football me."
- A reduction in the search space may cause ASR systems to be more computationally efficient. Generally, users of ASR systems may produce utterances with a high degree of repeatability. In some examples repetitions of utterances may be based on trends of indefinite duration (e.g., results for a seasonal sport). In other examples, repetitions of utterances may be predictable based on popularity of topics with which the utterances may be associated (e.g., utterances associated with a current event of a given duration such as the Olympic). In examples, an ASR system may be configured to utilize such predictable repetitions to generate computationally efficient language models.
- In an example, for the ASR system to be computationally efficient, the ASR system may be configured to generate sequences of words based on popular phrases. Further, instead of the language model allowing every single sequence of words of a popular phrase to be hypothesized regardless of the order of the words in the popular phrase, the ASR system may be configured to determine a set of groupings or subsequences of words of the popular phrase such that the groupings or the subsequences include words in the same order in which the words occur in the popular phrase.
- As an example for illustration, a popular phrase may include five words in a given sequence "word1 word2 word3 word4 word5." A given language model may allow a subsequence or grouping "word2 word3 word5"; however, a more efficient language model may not, since this subsequence is not in the source popular phrase. In this manner, search space for the ASR system may be limited or reduced allowing for greater accuracy and computational efficiency.
-
Figure 4 is a flowchart of an example method for efficient speech recognition, in accordance with an embodiment. - The
method 400 may include one or more operations, functions, or actions as illustrated by one or more of blocks 402-406. Although the blocks are illustrated in a sequential order, these blocks may in some instances be performed in parallel, and/or in a different order than those described herein. Also, the various blocks may be combined into fewer blocks, divided into additional blocks, and/or removed based upon the desired implementation - In addition, for the
method 400 and other processes and methods disclosed herein, the flowchart shows functionality and operation of one possible implementation of present examples. In this regard, each block may represent a module, a segment, or a portion of program code, which includes one or more instructions executable by a processor for implementing specific logical functions or steps in the process. The program code may be stored on any type of computer readable medium or memory, for example, such as a storage device including a disk or hard drive. The computer readable medium may include a non-transitory computer readable medium or memory, for example, such as computer-readable media that stores data for short periods of time like register memory, processor cache and Random Access Memory (RAM). The computer readable medium may also include non-transitory media or memory, such as secondary or persistent long term storage, like read only memory (ROM), optical or magnetic disks, compact-disc read only memory (CD-ROM), for example. The computer readable media may also be any other volatile or non-volatile storage systems. The computer readable medium may be considered a computer readable storage medium, a tangible storage device, or other article of manufacture, for example, - In addition, for the
method 400 and other processes and methods disclosed herein, each block inFigure 4 may represent circuitry that is wired to perform the specific logical functions in the process. - At
block 402, themethod 400 includes receiving, at a computing device, information indicative of a frequency of submission of a search query to a search engine, and the search query may comprise a sequence of words. The computing device can be, for example, a mobile telephone, personal digital assistant (PDA), laptop, notebook, or netbook computer, tablet computing device, a wearable computing device, a server in a cloud-based computing system, etc. - In an example, an abrupt increase in search query activity, commonly referred to as spiking, can result from a number of sources. Spiking can result from regular and popular occurrences such as a holiday or sporting event, or from irregular events such as high profile news items. In one example, the computing device (e.g., a server) may be configured to receive information associated with tracking a frequency of submission of a search query (or a plurality of search queries) to a search engine in a given period of time to identify popular or spiking queries. A given search query may be a text string (phrase) or a voice search query uttered by a user of a given device (e.g., a mobile telephone), for example. In examples, popular or spiking queries can be identified or extracted every day, every week, or within any other unit of time.
- Referring back to
Figure 4 , atblock 404, themethod 400 includes, based on the frequency of submission of the search query exceeding a threshold, determining, for the sequence of words of the search query, groupings of one or more words of the search query based on an order in which the one or more words occur in the sequence of words of the search query. In an example, based on the information indicative of a frequency of submission of a search query to a search engine, the computing device may be configured to determine a metric indicative of popularity of the search query, and to identify whether the search query is popular in the given period of time. For instance, the computing device may be configured to, based on historical use of search engine, determine a threshold such that if the frequency of submission of the search query exceeds the threshold, the search query can be designated as a popular or spiking search query. - In an example, the computing device may be configured to determine a metric based on a time series analysis of submission of the query over time and compare the metric to a threshold to determine popularity of the query. The metric may, for example, be related to query acceleration or velocity. Query velocity, for example, can be calculated as the inverse of a difference in time between an instant query request and a most recent query request. The difference in time can be calculated as: dt = (time of this query instance-last time query was seen), and query velocity can be determine as 1/dt. Query acceleration for a given query can be determined, as a difference between a current query velocity (or an average query velocity) and a previously calculated query velocity (or previously calculated average query velocity) determined at a previous time, multiplied by an instantaneous query velocity. The metric can be a function of the query velocity or the query acceleration or other parameters determined based on the time series analysis of the submission of the query over time. Other parameters or method of calculating these parameters are possible.
- As an example for illustrating the
method 400, the computing device may be configured to determine two popular phrases, based on respective frequency of submission of the two queries to the search engine: "hello world I am here," and "world war two." Each of the two search queries comprises a sequence of words in a given order. For example, the search query "world war two" includes the three words "word," "war," and "two" in that sequence. - The computing device may be configured to determine groupings of words based on an order in which the words occur in a corresponding search query. For example, with respect to the search query "world war two," the computing device may be configured to determine the following groupings of words:
world world war world war two war war two two - These groupings may also be referred to as factors. For a large set of sequences, the groupings may be quadratic in a size of a given search query; thus, enumerating all the groupings of words may be prohibitive. To determine the factors or groupings more efficiently, the computing device may be configured to determine or generate an automaton representation and a factor graph for the search queries. The factor graph may represent the groupings more compactly and may allow for more efficient searching.
-
Figure 5A illustrates anexample automaton representation 500 for example search queries, in accordance with an embodiment. Theautomaton representation 500 represents both search queries "hello world I am here," and "world war two." Theautomaton representation 500 includes automaton states such as aninitial state 502A, anintermediate state 502B, and aterminal state 502C. Theautomaton representation 500 also includes automaton arcs such as automaton arcs 504A and 504B, and each automaton arc may correspond to a word from the sequence of words of a given search query. -
Figure 5B illustrates an examplebi-gram language model 506 for the example search queries, in accordance with an embodiment. Thelanguage model 506 allows for all possible groupings of words of the search queries regardless of the order of the words in the corresponding search query. As shown inFigure 5B , thelanguage model 506 is complex and may allow for nonsensical groupings of words such as: "hello world here I." - In contrast, a factor graph that compactly represents possible groupings of words of the given search query, based on the order of the words in the search query, can be generated based on the
automaton representation 500.Figure 5C illustrates anexample factor graph 508 for the example search queries, in accordance with an embodiment. Thefactor graph 508 is less complex than thelanguage model 506 depicted inFigure 5B , and allows for grouping of words based on the order of the words in the corresponding search query. - As an example, to determine a given grouping of words, the computing device may be configured to select a word represented by an automaton arc (e.g.,
arc 510A) connected to a first automaton state (e.g.,initial state 512A); continue to a second automaton state (e.g.,state 512B) adjacent to the first automaton state; and select a word represented by a second arc (e.g.,arc 510B) to determine the grouping "I am," for example. A given grouping of the groupings may be allowed to begin at any given state in thefactor graph 508. Thefactor graph 508 may allow for groupings such as "hello world I," but does not allow "hello I"; in other words, thefactor graph 508 does not allow skipping words or deviating from the order of the words in a source search query. In this manner, thefactor graph 508 can be considered a compact and efficient way of representing groupings of words on a given search query based on an order in which the words occur in the given search query. - The computing device may be configured to frequently (e.g., every day) identify popular or spiking queries (as described above at block 402) and build or generate a factor graph, such as the
factor graph 508, for the queries. Generating the factor graph such as thefactor graph 508 may be more efficient than building a full language model such as thelanguage model 506. Furthermore, thefactor graph 508 may yield more flexibility over allowing only verbatim spiking queries due to the fact that thefactor graph 508 efficiently allows subsequences. For example, if "Albert Einstein Relativity" is identified as a popular or spiking query, then a corresponding factor graph may allow the groupings "Einstein Relativity" and "Albert Einstein," which, when submitted to a search engine, may result in similar search results to the popular query "Albert Einstein Relativity." - Referring back to
Figure 4 , atblock 406, themethod 400 includes providing information indicating the groupings to a speech recognition system to update a corpus of given sequences of words, and the speech recognition system is configured to convert a given spoken utterance into a given sequence of words based on the corpus of given sequences of words. The computing device (e.g., server), may be coupled to or in communication with a speech recognition system such as the ASR system depicted inFigure 1 . In one example, the computing device may include the speech recognition system. - In examples, the speech recognition system may include a speech recognition database that includes a corpus of given sequences of words that may have been produced by a language model such as the
language mode 112 inFigure 1 . The speech recognition system may be configured to receive a given spoken utterance, and match the given spoken utterance to a sequence of words from the corpus of given sequences of words as described inFigures 1-3 , for example. The computing device may be configured to generate a factor graph depicting the groupings of words of the spiking search query, and provide the factor graph and/or groupings to the speech recognition system to include the groupings in (e.g., augment) the corpus. - In some examples, after updating the corpus with the groupings corresponding to a popular search query, the computing device may be configured to cause a search space in the corpus to be constrained. For instance, the search space may be constrained to at least the groupings represented by the search graph. In another example, the speech recognition system may be configured to attempt to match a given spoken utterance to one of the groupings before attempting to match the given spoken utterance to other word sequences in the corpus.
- In still another example, the speech recognition system may be configured to generate a search graph, such as the
search graph 300, corresponding to the factor graph generated for the popular query by the computing device. The search graph corresponding to the factor graph may be integrated into a larger search graph for other sequences of words, for example. To find text strings that may match a given utterance, the speech recognition system may be configured to attempt to find paths from an initial state in the search graph to a terminal state in the search graph, and may be configured to assign a total cost to one or more paths through the search graph based on costs associated with the states and/or transitions associated with each path. The paths corresponding to the groupings of words of the factor graph may be assigned less cost (i.e., assigned higher probability) than other paths, for example. - In examples, the speech recognition system may receive spoken utterances that are not related to and do not match any of the groupings of words of the popular or spiking search query. To handle this possibility, in one example, the speech recognition system may be configured to constrain search space to the factor graph, i.e., attempt to trace paths of the factor graph to identify a high-confidence match, and if such an attempt fails, the speech recognition system may be configured to utilize a full language model or the rest of the corpus to identify a match. In another example, the speech recognition system may be configured to trace the factor graph and the full language model in parallel and terminate searching when a match is identified in either the factor graph or the full language model. Other search strategies that combine the search graph and the full language model are possible.
- Also, as described above with respect to the
language model 112, a given sequence of words in the corpus, may be assigned probabilities of occurrence that can be estimated based on respective number of appearances in the corpus. Thus, in addition to providing the groupings to the speech recognition system, the computing device may be configured to update the probabilities of occurrence based on the groupings. For instance, the computing device may be configured to assign respective probabilities of occurrence to the groupings that are higher than given probabilities of occurrence of other sequences of words in the corpus. The assigned respective probabilities may be based on how popular the search query is, e.g., based on the information indicative of the frequency of submission of the search query to the search engine. - In some examples, the probabilities of occurrences for the groupings may be time-varying. In some instances, popularity of a given search query may decrease over time. As an example for illustration, a search query about results of the Olympics may be popular for a period of time of the Olympics and perhaps for a given period of time after the Olympics; however, popularity of such a search query may decrease over time. Therefore, in this example, the computing device may be configured to cause the probabilities of occurrence of the groupings to decay over. In other examples, the computing device may be configured to continuously evaluating how popular the search query is, and accordingly update or modify the probabilities based on updated changes to popularity of the search query.
-
Figure 6 illustrates an example distributed computing architecture, in accordance with an example embodiment.Figure 6 showsserver devices network 606, withprogrammable devices network 606 may also correspond to a combination of one or more LANs, WANs, corporate intranets, and/or the public Internet. - Although
Figures 6 shows three programmable devices, distributed application architectures may serve tens, hundreds, or thousands of programmable devices. Moreover, theprogrammable devices programmable devices programmable devices - The
server devices programmable devices server device 602 and/or 604 can provide content to theprogrammable devices 608a-608c. The content can include, but is not limited to, web pages, hypertext, scripts, binary data such as compiled software, images, audio, and/or video. The content can include compressed and/or uncompressed content. The content can be encrypted and/or unencrypted. Other types of content are possible as well. - As another example, the
server device 602 and/or 604 can provide theprogrammable devices 608a-608c with access to software for database, search, computation, graphical, audio (e.g. speech recognition), video, World Wide Web/Internet utilization, and/or other functions. Many other examples of server devices are possible as well. - The
server devices 602 and/or 604 can be cloud-based devices that store program logic and/or data of cloud-based applications and/or services. In some examples, theserver devices 602 and/or 604 can be a single computing device residing in a single computing center. In other examples, theserver device 602 and/or 604 can include multiple computing devices in a single computing center, or multiple computing devices located in multiple computing centers in diverse geographic locations. For example,Figure 6 depicts each of theserver devices - In some examples, data and services at the
server devices 602 and/or 604 can be encoded as computer readable information stored in non-transitory, tangible computer readable media (or computer readable storage media) and accessible byprogrammable devices server device 602 and/or 604 can be stored on a single disk drive or other tangible storage media, or can be implemented on multiple disk drives or other tangible storage media located at one or more diverse geographic locations. -
Figure 7A is a block diagram of a computing device (e.g., system) in accordance with an example embodiment. In particular,computing device 700 shown inFigure 7A can be configured to perform one or more functions of theserver devices network 606, and/or one or more of theprogrammable devices computing device 700 may include a user-interface module 702, a networkcommunications interface module 704, one ormore processors 706, anddata storage 708, all of which may be linked together via a system bus, network, orother connection mechanism 710. - The user-interface module 702 can be operable to send data to and/or receive data from external user input/output devices. For example, user-interface module 702 can be configured to send and/or receive data to and/or from user input devices such as a keyboard, a keypad, a touchscreen, a computer mouse, a track ball, a joystick, a camera, a voice recognition/synthesis module, and/or other similar devices. The user-interface module 702 can also be configured to provide output to user display devices, such as one or more cathode ray tubes (CRT), liquid crystal displays (LCD), light emitting diodes (LEDs), displays using digital light processing (DLP) technology, printers, light bulbs, and/or other similar devices, either now known or later developed. The user-interface module 702 can also be configured to generate recognized speech or audible output(s), and may include a speaker, speaker jack, audio output port, audio output device, earphones, and/or other similar devices.
- The network
communications interface module 704 can include one or morewireless interfaces 712 and/or one ormore wireline interfaces 714 that are configurable to communicate via a network, such asnetwork 606 shown inFigure 6 . The wireless interfaces 712 can include one or more wireless transmitters, receivers, and/or transceivers, such as a Bluetooth transceiver, a Zigbee transceiver, a Wi-Fi transceiver, a LTE transceiver, and/or other similar type of wireless transceiver configurable to communicate via a wireless network. The wireline interfaces 714 can include one or more wireline transmitters, receivers, and/or transceivers, such as an Ethernet transceiver, a Universal Serial Bus (USB) transceiver, or similar transceiver configurable to communicate via a twisted pair wire, a coaxial cable, a fiber-optic link, or a similar physical connection to a wireline network. - In some examples, the network
communications interface module 704 can be configured to provide reliable, secured, and/or authenticated communications. For each communication described herein, information for ensuring reliable communications (i.e., guaranteed message delivery) can be provided, perhaps as part of a message header and/or footer (e.g., packet/message sequencing information, encapsulation header(s) and/or footer(s), size/time information, and transmission verification information such as CRC and/or parity check values). Communications can be made secure (e.g., be encoded or encrypted) and/or decrypted/decoded using one or more cryptographic protocols and/or algorithms, such as, but not limited to, DES, AES, RSA, Diffie-Hellman, and/or DSA. Other cryptographic protocols and/or algorithms can be used as well or in addition to those listed herein to secure (and then decrypt/decode) communications. - The
processors 706 can include one or more general purpose processors and/or one or more special purpose processors (e.g., digital signal processors, application specific integrated circuits, etc.). Theprocessors 706 can be configured to execute computer-readable program instructions 715 that are contained in thedata storage 708 and/or other instructions as described herein (e.g., the method 400), - The
data storage 708 can include one or more computer-readable storage media that can be read and/or accessed by at least one ofprocessors 706. The one or more computer-readable storage media can include volatile and/or non-volatile storage components, such as optical, magnetic, organic or other memory or disc storage, which can be integrated in whole or in part with at least one of theprocessors 706. In some examples, thedata storage 708 can be implemented using a single physical device (e.g., one optical, magnetic, organic or other memory or disc storage unit), while in other examples, thedata storage 708 can be implemented using two or more physical devices. - The
data storage 708 can include computer-readable program instructions 715 and perhaps additional data, such as but not limited to data used by one or more processes and/or threads of a software application. In some examples,data storage 708 can additionally include storage required to perform at least part of the herein-described methods (e.g., the method 400) and techniques and/or at least part of the functionality of the herein-described devices and networks. -
Figure 7B depicts a cloud-based server system, in accordance with an example embodiment. InFigure 7B , functions of theserver device 602 and/or 604 can be distributed among threecomputing clusters 716a, 716b, and 716c. The computing cluster 716a can include one ormore computing devices 718a, cluster storage arrays 720a, and cluster routers 722a connected by alocal cluster network 724a. Similarly, thecomputing cluster 716b can include one ormore computing devices 718b, cluster storage arrays 720b, and cluster routers 722b connected by alocal cluster network 724b. Likewise, computing cluster 716c can include one ormore computing devices 718c,cluster storage arrays 720c, andcluster routers 722c connected by alocal cluster network 724c, - In some examples, each of the
computing clusters 716a, 716b, and 716c can have an equal number of computing devices, an equal number of cluster storage arrays, and an equal number of cluster routers. In other examples, however, each computing cluster can have different numbers of computing devices, different numbers of cluster storage arrays, and different numbers of cluster routers. The number of computing devices, cluster storage arrays, and cluster routers in each computing cluster can depend on the computing task or tasks assigned to each computing cluster. - In the computing cluster 716a, for example, the
computing devices 718a can be configured to perform various computing tasks of theserver device 602. In one example, the various functionalities of theserver device 602 can be distributed among one or more ofcomputing devices computing devices computing clusters 716b and 716c can be configured similarly to thecomputing devices 718a in computing cluster 716a. On the other hand, in some examples, thecomputing devices - In some examples, computing tasks and stored data associated with
server devices 602 and/or 604 can be distributed acrosscomputing devices server devices 602 and/or 604, the processing capabilities ofcomputing devices - The
cluster storage arrays 720a, 720b, and 720c of thecomputing clusters 716a, 716b, and 716c can be data storage arrays that include disk array controllers configured to manage read and write access to groups of hard disk drives. The disk array controllers, alone or in conjunction with their respective computing devices, can also be configured to manage backup or redundant copies of the data stored in the cluster storage arrays to protect against disk drive or other cluster storage array failures and/or network failures that prevent one or more computing devices from accessing one or more cluster storage arrays. - Similar to the manner in which the functions or the
server devices 602 and/or 604 can be distributed acrosscomputing devices computing clusters 716a, 716b, and 716c, various active portions and/or backup portions of these components can be distributed acrosscluster storage arrays 720a, 720b, and 720c. For example, some cluster storage arrays can be configured to store the data of theserver device 602, while other cluster storage arrays can store data of theserver device 604. Additionally, some cluster storage arrays can be configured to store backup versions of data stored in other cluster storage arrays. - The
cluster routers 722a, 722b, and 722c incomputing clusters 716a, 716b, and 716c can include networking equipment configured to provide internal and external communications for the computing clusters. For example, the cluster routers 722a in computing cluster 716a can include one or more internet switching and routing devices configured to provide (i) local area network communications between thecomputing devices 718a and the cluster storage arrays 720a via thelocal cluster network 724a, and (ii) wide area network communications between the computing cluster 716a and thecomputing clusters 716b and 716c via the wide area network connection 726a tonetwork 606. Thecluster routers 722b and 722c can include network equipment similar to the cluster routers 722a, and thecluster routers 722h and 722c can perform similar networking functions for thecomputing clusters 716b and 716c that the cluster routers 722a perform for the computing cluster 716a. - In some examples, the configuration of the
cluster routers 722a, 722b, and 722c can be based at least in part on the data communication requirements of the computing devices and cluster storage arrays, the data communications capabilities of the network equipment in thecluster routers 722a, 722b, and 722c, the latency and throughput of thelocal networks area network links - In examples, the configurations illustrated in
Figures 6 and7A-7B can be used for implementations described with respect to themethod 400. For example, the computing device implementing themethod 400 can be a cloud-based device (e.g.,server devices 602 and/or 604). In this example, the computing device may be configured to receive information associated with search queries submitted by theprogrammable devices 608a-c inFigure 6 , or thecomputing devices 718a-c ofFigure 7B to determine spiking queries and generate corresponding factor graphs. The factor graphs can then be provided to speech recognition systems that may also be implemented in cloud-based device such as theserver device 602 and/or 604. - In some examples, the disclosed methods (e.g., the method 400) may be implemented as computer program instructions encoded on a non-transitory computer-readable storage media in a machine-readable format, or on other non-transitory media or articles of manufacture.
Figure 8 is a schematic illustrating a conceptual partial view of an example computer program product that includes a computer program for executing a computer process on a computing device, arranged according to at least some embodiments presented herein. - In one embodiment, the example
computer program product 800 is provided using a signal bearing medium 801. The signal bearing medium 801 may include one ormore programming instructions 802 that, when executed by one or more processors may provide functionality or portions of the functionality described above with respect toFigures 1-7 . In some examples, the signal bearing medium 801 may encompass a computer-readable medium 803, such as, but not limited to, a hard disk drive, a Compact Disc (CD), a Digital Video Disk (DVD), a digital tape, memory, etc. In some implementations, the signal bearing medium 801 may encompass acomputer recordable medium 804, such as, but not limited to, memory, read/write (R/W) CDs, R/W DVDs, etc. In some implementations, the signal bearing medium 801 may encompass acommunications medium 805, such as, but not limited to, a digital and/or an analog communication medium (e.g., a fiber optic cable, a waveguide, a wired communications link, a wireless communication link, etc.). Thus, for example, the signal bearing medium 801 may be conveyed by a wireless form of the communications medium 805 (e.g., a wireless communications medium conforming to the IEEE 802.11 standard or other transmission protocol). - The one or
more programming instructions 802 may be, for example, computer executable and/or logic implemented instructions. In some examples, a computing device such as theprogrammable devices 608a-c inFigure 6 , or thecomputing devices 718a-c ofFigure 7B may be configured to provide various operations, functions, or actions in response to theprogramming instructions 802 conveyed toprogrammable devices 608a-c or thecomputing devices 718a-c by one or more of the computerreadable medium 803, thecomputer recordable medium 804, and/or thecommunications medium 805. - It should be understood that arrangements described herein are for purposes of example only. As such, those skilled in the art will appreciate that other arrangements and other elements (e.g. machines, interfaces, functions, orders, and groupings of functions, etc.) can be used instead, and some elements may be omitted altogether according to the desired results. Further, many of the elements that are described are functional entities that may be implemented as discrete or distributed components or in conjunction with other components, in any suitable combination and location.
- While various aspects and embodiments have been disclosed herein, other aspects and embodiments will be apparent to those skilled in the art. The various aspects and embodiments disclosed herein are for purposes of illustration, and are not intended to be limiting, with the true scope being indicated by the following claims.
It is also to be understood that the terminology used herein is for the purpose of describing particular embodiments only, and is not intended to be limiting.
Claims (14)
- A method (400), comprising:receiving, at a computing device (700), information indicative of a frequency of submission of a search query to a search engine, wherein the search query comprises a sequence of words (402);based on the frequency of submission of the search query exceeding a threshold, determining, for the sequence of words of the search query, groupings of one or more words of the search query based on an order in which the one or more words occur in the sequence of words of the search query (404); andproviding information indicating the groupings to a speech recognition system to update a corpus of given sequences of words, wherein the speech recognition system is configured to convert a given spoken utterance (100) into a given sequence of words based on the corpus of given sequences of words (406);wherein the speech recognition system further includes probabilities of occurrence for the given sequences of words of the corpus, and wherein providing the groupings to the speech recognition system comprises updating the probabilities of occurrence based on the groupings and the information indicative of the frequency of submission of the search query to the search engine.
- The method (400) of claim 1, wherein the search query includes one or more of a text string and a voice search query, and/or
further comprising:updating the corpus of given sequences of words to include the groupings; andconstraining, for the speech recognition system to transcribe the given spoken utterance, search space in the corpus to at least the groupings, and/orfurther comprising causing the speech recognition system to attempt to match the given spoken utterance (100) to one of the groupings before attempting to match the given spoken utterance to other word sequences in the corpus, and/orfurther comprising assigning respective probabilities of occurrence for the groupings based on the information indicative of the frequency of submission of the search query, and wherein the respective probabilities of occurrence are time-varying, and/orfurther comprising:assigning to the groupings respective probabilities of occurrence, based on the information indicative of the frequency of submission of the search query;continuously receiving updated information for the frequency of submission of the search query; andupdating the respective probabilities of occurrence based on the updated information. - The method (400) of claim 2, wherein providing the groupings to the speech recognition system comprises:updating the corpus of given sequences of words to include the groupings; andassigning to the groupings respective probabilities of occurrence that are higher than given probabilities of occurrences of other sequences of words in the corpus.
- The method (400) of claim 2, wherein the respective probabilities of occurrence decay over time based on the updated information.
- The method (400) of claim 1, wherein the computing device (700) includes the speech recognition system.
- A computer readable medium (803) having stored thereon instructions that, when executed by a computing device (700), cause the computing device (700) to perform functions comprising:receiving information indicative of a frequency of submission of a search query to a search engine, wherein the search query comprises a sequence of words;based on the frequency of submission of the search query exceeding a threshold, determining, for the sequence of words of the search query, groupings of one or more words of the search query based on an order in which the one or more words occur in the sequence of words of the search query; andproviding information indicating the groupings to a speech recognition system to update a corpus of given sequences of words, wherein the speech recognition system is configured to convert a given spoken utterance (100) into a given sequence of words based on the corpus of given sequences of words;wherein the speech recognition system further includes probabilities of occurrence for the given sequences of words of the corpus, and wherein providing the groupings to the speech recognition system comprises updating the probabilities of occurrence based on the groupings and the information indicative of the frequency of submission of the search query to the search engine.
- The computer readable medium (803) of claim 6, wherein the function of determining the groupings comprises generating a factor graph that includes automaton states and automaton arcs, each of the automaton arcs corresponding to a word from the sequence of words of the search query.
- The computer readable medium (803) of claim 7, wherein the function of determining the groupings comprises:selecting a first word represented by a first automaton arc connected to a first automaton state;continuing to a second automaton state adjacent to the first automaton state; andselecting a second word represented by a second arc connected to the second automaton state, wherein the second word is adjacent to the first word in the sequence of words of the search query.
- The computer readable medium (803) of claim 7, wherein a given grouping of the groupings is indicated to begin at any given automaton state in the factor graph.
- A device (700) comprising:at least one processor (706);data storage (708); andprogram instructions (715) in the data storage that, upon execution by the at least one processor (706), cause the device to:receive information indicative of a frequency of submission of a search query to a search engine in a given period of time, wherein the search query comprises a sequence of words;based on the information indicative of the frequency of submission of the search query to the search engine in the given period of time, determine, for the sequence of words of the search query, groupings of one or more words of the search query based on an order in which the one or more words occur in the sequence of words of the search query; andprovide information indicating the groupings to a speech recognition system to update a corpus of given sequences of words, wherein the speech recognition system is configured to convert a given spoken utterance (100) into a given sequence of words based on the corpus of given sequences of words;wherein the speech recognition system includes probabilities of occurrence for the given sequences of words of the corpus, and wherein, to provide the groupings to the speech recognition system, the program instructions in the data storage, upon execution by the at least one processor (706), cause the device (700) to update the probabilities of occurrence based on the groupings and the information indicative of the frequency of submission of the search query.
- The device (700) of claim 10, wherein the program instructions (715), upon execution by the at least one processor (706), further cause the device (700) to:determine a metric based on the information indicative of the frequency of submission of the search query to the search engine in the given period of time, wherein the program instructions (715), upon execution by the at least one processor (706), cause the device to determine the groupings based on a comparison of the metric to a threshold.
- The device (700) of claim 10, wherein the speech recognition system includes probabilities of occurrence for the given sequences of words of the corpus, and wherein, to provide the groupings to the speech recognition system, the program instructions (715) in the data storage (708), upon execution by the at least one processor (706), cause the device (700) to:augment the corpus of given sequences of words with the groupings; and assign to the groupings respective probabilities of occurrence that are higher than given probabilities of occurrence of other sequences of words in the corpus.
- The device (700) of claim 10, wherein, to determine the groupings, the program instructions (715) in the data storage (708), upon execution by the at least one processor (706), cause the device (700) to generate a factor graph that includes automaton states and automaton arcs, each of the automaton arcs corresponding to a word from the sequence of words of the search query.
- The device (700) of claim 13, wherein, to determine a given grouping of the groupings, the program instructions in the data storage (708), upon execution by the at least one processor (706), cause the device (700) to:select a first word represented by a first automaton arc connected to a first automaton state;continue to a second automaton state adjacent to the first automaton state; andselect a second word represented by a second arc connected to the second automaton state, wherein the second word is adjacent to the first word in the sequence of words of the search query, and wherein the given grouping is allowed to begin at any given automaton state in the factor graph.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201261715365P | 2012-10-18 | 2012-10-18 | |
US13/832,136 US8589164B1 (en) | 2012-10-18 | 2013-03-15 | Methods and systems for speech recognition processing using search query information |
PCT/US2013/064785 WO2014062545A1 (en) | 2012-10-18 | 2013-10-14 | Methods and systems for speech recognition processing using search query information |
Publications (2)
Publication Number | Publication Date |
---|---|
EP2909832A1 EP2909832A1 (en) | 2015-08-26 |
EP2909832B1 true EP2909832B1 (en) | 2017-04-05 |
Family
ID=49555853
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP13782920.6A Active EP2909832B1 (en) | 2012-10-18 | 2013-10-14 | Methods and systems for speech recognition processing using search query information |
Country Status (6)
Country | Link |
---|---|
US (2) | US8589164B1 (en) |
EP (1) | EP2909832B1 (en) |
JP (1) | JP6058807B2 (en) |
KR (1) | KR101585185B1 (en) |
CN (2) | CN106847265B (en) |
WO (1) | WO2014062545A1 (en) |
Families Citing this family (33)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8510109B2 (en) | 2007-08-22 | 2013-08-13 | Canyon Ip Holdings Llc | Continuous speech transcription performance indication |
US9973450B2 (en) | 2007-09-17 | 2018-05-15 | Amazon Technologies, Inc. | Methods and systems for dynamically updating web service profile information by parsing transcribed message strings |
US8914286B1 (en) * | 2011-04-14 | 2014-12-16 | Canyon IP Holdings, LLC | Speech recognition with hierarchical networks |
US9123333B2 (en) * | 2012-09-12 | 2015-09-01 | Google Inc. | Minimum bayesian risk methods for automatic speech recognition |
US8589164B1 (en) * | 2012-10-18 | 2013-11-19 | Google Inc. | Methods and systems for speech recognition processing using search query information |
US20140136210A1 (en) * | 2012-11-14 | 2014-05-15 | At&T Intellectual Property I, L.P. | System and method for robust personalization of speech recognition |
US9697827B1 (en) * | 2012-12-11 | 2017-07-04 | Amazon Technologies, Inc. | Error reduction in speech processing |
KR101614756B1 (en) * | 2014-08-22 | 2016-04-27 | 현대자동차주식회사 | Apparatus of voice recognition, vehicle and having the same, method of controlling the vehicle |
US9953646B2 (en) | 2014-09-02 | 2018-04-24 | Belleau Technologies | Method and system for dynamic speech recognition and tracking of prewritten script |
US10176219B2 (en) * | 2015-03-13 | 2019-01-08 | Microsoft Technology Licensing, Llc | Interactive reformulation of speech queries |
KR102437689B1 (en) | 2015-09-16 | 2022-08-30 | 삼성전자주식회사 | Voice recognition sever and control method thereof |
CN105654945B (en) * | 2015-10-29 | 2020-03-06 | 乐融致新电子科技(天津)有限公司 | Language model training method, device and equipment |
CN105416208A (en) * | 2015-12-08 | 2016-03-23 | 延锋伟世通电子科技（上海）有限公司 | Vehicle-mounted voice recognition electronic entertainment control system |
US10133821B2 (en) * | 2016-01-06 | 2018-11-20 | Google Llc | Search result prefetching of voice queries |
US20170229124A1 (en) * | 2016-02-05 | 2017-08-10 | Google Inc. | Re-recognizing speech with external data sources |
US9959885B2 (en) * | 2016-03-08 | 2018-05-01 | Samsung Eletrônica Da Amazônia Ltda | Method for user context recognition using sound signatures |
US10037360B2 (en) * | 2016-06-20 | 2018-07-31 | Rovi Guides, Inc. | Approximate template matching for natural language queries |
JP2018013590A (en) | 2016-07-20 | 2018-01-25 | 株式会社東芝 | Generation device, recognition system, finite state transducer generation method and data |
CN106651517B (en) * | 2016-12-20 | 2021-11-30 | 广东技术师范大学 | Drug recommendation method based on hidden semi-Markov model |
CN117577099A (en) * | 2017-04-20 | 2024-02-20 | 谷歌有限责任公司 | Method, system and medium for multi-user authentication on a device |
CN107856499A (en) * | 2017-11-07 | 2018-03-30 | 龙泉市日日新科技咨询服务有限公司 | It is a kind of can Voice command air conditioning for automobiles |
US10943603B2 (en) | 2018-01-31 | 2021-03-09 | Wells Fargo Bank, N.A. | Systems and methods for a neighborhood voice assistant |
US11200484B2 (en) * | 2018-09-06 | 2021-12-14 | International Business Machines Corporation | Probability propagation over factor graphs |
CN109388404B (en) * | 2018-10-10 | 2022-10-18 | 北京如布科技有限公司 | Path decoding method and device, computer equipment and storage medium |
US20200220869A1 (en) * | 2019-01-08 | 2020-07-09 | Fidelity Information Services, Llc | Systems and methods for contactless authentication using voice recognition |
US11076219B2 (en) * | 2019-04-12 | 2021-07-27 | Bose Corporation | Automated control of noise reduction or noise masking |
CN112102817A (en) * | 2019-06-18 | 2020-12-18 | 杭州中软安人网络通信股份有限公司 | Speech recognition system |
CN111326149A (en) * | 2020-02-25 | 2020-06-23 | 青岛海尔空调器有限总公司 | Optimization method and system for improving voice recognition rate |
CN111459960A (en) * | 2020-03-31 | 2020-07-28 | 九牧厨卫股份有限公司 | Offline intelligent device corpus modification method |
CN111503855B (en) * | 2020-04-29 | 2021-06-29 | 四川虹美智能科技有限公司 | Control system and control method of multi-split air conditioner |
US11735180B2 (en) | 2020-09-24 | 2023-08-22 | International Business Machines Corporation | Synchronizing a voice reply of a voice assistant with activities of a user |
US11967306B2 (en) | 2021-04-14 | 2024-04-23 | Honeywell International Inc. | Contextual speech recognition methods and systems |
CN116682420B (en) * | 2022-12-30 | 2024-04-05 | 荣耀终端有限公司 | Speech recognition method, electronic device and readable medium |
Family Cites Families (47)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JPH06250687A (en) * | 1993-02-25 | 1994-09-09 | Nippondenso Co Ltd | Voice recognition device for unspecified speaker |
DE19837102A1 (en) | 1998-08-17 | 2000-02-24 | Philips Corp Intellectual Pty | Method and arrangement for carrying out a database query |
US6266637B1 (en) | 1998-09-11 | 2001-07-24 | International Business Machines Corporation | Phrase splicing and variable substitution using a trainable speech synthesizer |
JP2000258653A (en) * | 1999-03-04 | 2000-09-22 | Fuji Xerox Co Ltd | Optical bus |
JP2000259653A (en) * | 1999-03-09 | 2000-09-22 | Mitsubishi Electric Corp | Device and method for recognizing speech |
US7110945B2 (en) * | 1999-07-16 | 2006-09-19 | Dreamations Llc | Interactive book |
AU1767600A (en) * | 1999-12-23 | 2001-07-09 | Intel Corporation | Speech recognizer with a lexical tree based n-gram language model |
US20020087327A1 (en) * | 2000-12-29 | 2002-07-04 | Lee Victor Wai Leung | Computer-implemented HTML pattern parsing method and system |
US7027987B1 (en) * | 2001-02-07 | 2006-04-11 | Google Inc. | Voice interface for a search engine |
JP3683504B2 (en) * | 2001-02-14 | 2005-08-17 | 日本電信電話株式会社 | Voice utilization type information retrieval apparatus, voice utilization type information retrieval program, and recording medium recording the program |
US20020111810A1 (en) * | 2001-02-15 | 2002-08-15 | Khan M. Salahuddin | Spatially built word list for automatic speech recognition program and method for formation thereof |
JP4215418B2 (en) * | 2001-08-24 | 2009-01-28 | インターナショナル・ビジネス・マシーンズ・コーポレーション | Word prediction method, speech recognition method, speech recognition apparatus and program using the method |
WO2004036939A1 (en) * | 2002-10-18 | 2004-04-29 | Institute Of Acoustics Chinese Academy Of Sciences | Portable digital mobile communication apparatus, method for controlling speech and system |
US20050004799A1 (en) * | 2002-12-31 | 2005-01-06 | Yevgenly Lyudovyk | System and method for a spoken language interface to a large database of changing records |
US7729913B1 (en) * | 2003-03-18 | 2010-06-01 | A9.Com, Inc. | Generation and selection of voice recognition grammars for conducting database searches |
US7424421B2 (en) * | 2004-03-03 | 2008-09-09 | Microsoft Corporation | Word collection method and system for use in word-breaking |
US7584098B2 (en) * | 2004-11-29 | 2009-09-01 | Microsoft Corporation | Vocabulary-independent search of spontaneous speech |
US20060190260A1 (en) * | 2005-02-24 | 2006-08-24 | Nokia Corporation | Selecting an order of elements for a speech synthesis |
JP4802522B2 (en) * | 2005-03-10 | 2011-10-26 | 日産自動車株式会社 | Voice input device and voice input method |
JP2007004281A (en) * | 2005-06-21 | 2007-01-11 | Mitsubishi Electric Corp | Voice mail input device |
CN1901041B (en) * | 2005-07-22 | 2011-08-31 | 康佳集团股份有限公司 | Voice dictionary forming method and voice identifying system and its method |
US20070106685A1 (en) | 2005-11-09 | 2007-05-10 | Podzinger Corp. | Method and apparatus for updating speech recognition databases and reindexing audio and video content using the same |
US7756708B2 (en) | 2006-04-03 | 2010-07-13 | Google Inc. | Automatic language model update |
CN101064105A (en) * | 2006-04-25 | 2007-10-31 | 台达电子工业股份有限公司 | Interface system for word-to-voice user and modify method |
US7778837B2 (en) * | 2006-05-01 | 2010-08-17 | Microsoft Corporation | Demographic based classification for local word wheeling/web search |
US20090313017A1 (en) * | 2006-07-07 | 2009-12-17 | Satoshi Nakazawa | Language model update device, language Model update method, and language model update program |
US8694318B2 (en) * | 2006-09-19 | 2014-04-08 | At&T Intellectual Property I, L. P. | Methods, systems, and products for indexing content |
CN101324806B (en) * | 2007-06-14 | 2010-06-23 | 台达电子工业股份有限公司 | Input system and method for mobile search |
CN101093478B (en) * | 2007-07-25 | 2010-06-02 | 中国科学院计算技术研究所 | Method and system for identifying Chinese full name based on Chinese shortened form of entity |
WO2009042148A1 (en) * | 2007-09-24 | 2009-04-02 | Jingle Networks, Inc. | Ordering directory assistance search results by local popularity of search results |
US8364694B2 (en) * | 2007-10-26 | 2013-01-29 | Apple Inc. | Search assistant for digital media assets |
JP4691117B2 (en) * | 2008-01-22 | 2011-06-01 | 日本電信電話株式会社 | Text search device, text search method, text search program, and recording medium recording the program |
US20090228280A1 (en) * | 2008-03-05 | 2009-09-10 | Microsoft Corporation | Text-based search query facilitated speech recognition |
US8037070B2 (en) * | 2008-06-25 | 2011-10-11 | Yahoo! Inc. | Background contextual conversational search |
US20090326947A1 (en) * | 2008-06-27 | 2009-12-31 | James Arnold | System and method for spoken topic or criterion recognition in digital media and contextual advertising |
CN101645066B (en) * | 2008-08-05 | 2011-08-24 | 北京大学 | Method for monitoring novel words on Internet |
US8131545B1 (en) | 2008-09-25 | 2012-03-06 | Google Inc. | Aligning a transcript to audio data |
JP5185807B2 (en) * | 2008-12-16 | 2013-04-17 | ヤフー株式会社 | Voice search device, voice search method, and voice search program |
US8229743B2 (en) * | 2009-06-23 | 2012-07-24 | Autonomy Corporation Ltd. | Speech recognition system |
US8831944B2 (en) * | 2009-12-15 | 2014-09-09 | At&T Intellectual Property I, L.P. | System and method for tightly coupling automatic speech recognition and search |
US20120016671A1 (en) * | 2010-07-15 | 2012-01-19 | Pawan Jaggi | Tool and method for enhanced human machine collaboration for rapid and accurate transcriptions |
CN103339623B (en) * | 2010-09-08 | 2018-05-25 | 纽昂斯通讯公司 | It is related to the method and apparatus of Internet search |
JP5139499B2 (en) * | 2010-10-26 | 2013-02-06 | ヤフー株式会社 | Extraction apparatus, extraction method, program, and information processing apparatus for distributing program |
CN102467548B (en) * | 2010-11-15 | 2015-09-16 | 腾讯科技（深圳）有限公司 | A kind of recognition methods of neologisms and system |
US20120290293A1 (en) * | 2011-05-13 | 2012-11-15 | Microsoft Corporation | Exploiting Query Click Logs for Domain Detection in Spoken Language Understanding |
CN102592595B (en) * | 2012-03-19 | 2013-05-29 | 安徽科大讯飞信息科技股份有限公司 | Voice recognition method and system |
US8589164B1 (en) * | 2012-10-18 | 2013-11-19 | Google Inc. | Methods and systems for speech recognition processing using search query information |
-
2013
- 2013-03-15 US US13/832,136 patent/US8589164B1/en active Active
- 2013-09-24 US US14/035,083 patent/US8768698B2/en active Active
- 2013-10-14 EP EP13782920.6A patent/EP2909832B1/en active Active
- 2013-10-14 CN CN201610978352.3A patent/CN106847265B/en active Active
- 2013-10-14 CN CN201380064902.5A patent/CN104854654B/en active Active
- 2013-10-14 KR KR1020157010022A patent/KR101585185B1/en active IP Right Grant
- 2013-10-14 JP JP2015537758A patent/JP6058807B2/en active Active
- 2013-10-14 WO PCT/US2013/064785 patent/WO2014062545A1/en active Application Filing
Non-Patent Citations (1)
Title |
---|
None * |
Also Published As
Publication number | Publication date |
---|---|
CN106847265B (en) | 2020-08-18 |
US8768698B2 (en) | 2014-07-01 |
US8589164B1 (en) | 2013-11-19 |
US20140114661A1 (en) | 2014-04-24 |
CN104854654A (en) | 2015-08-19 |
JP2016500843A (en) | 2016-01-14 |
EP2909832A1 (en) | 2015-08-26 |
KR20150048252A (en) | 2015-05-06 |
JP6058807B2 (en) | 2017-01-11 |
CN106847265A (en) | 2017-06-13 |
CN104854654B (en) | 2016-12-21 |
WO2014062545A1 (en) | 2014-04-24 |
KR101585185B1 (en) | 2016-01-13 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
EP2909832B1 (en) | Methods and systems for speech recognition processing using search query information | |
US11423883B2 (en) | Contextual biasing for speech recognition | |
US9466292B1 (en) | Online incremental adaptation of deep neural networks using auxiliary Gaussian mixture models in speech recognition | |
US9123333B2 (en) | Minimum bayesian risk methods for automatic speech recognition | |
US8805684B1 (en) | Distributed speaker adaptation | |
US8996366B2 (en) | Multi-stage speaker adaptation | |
US8880398B1 (en) | Localized speech recognition with offload | |
AU2010346493B2 (en) | Speech correction for typed input | |
US9202464B1 (en) | Curriculum learning for speech recognition | |
US8965763B1 (en) | Discriminative language modeling for automatic speech recognition with a weak acoustic model and distributed training | |
US11024298B2 (en) | Methods and apparatus for speech recognition using a garbage model | |
US9484019B2 (en) | System and method for discriminative pronunciation modeling for voice search | |
US10152298B1 (en) | Confidence estimation based on frequency | |
US20230104228A1 (en) | Joint Unsupervised and Supervised Training for Multilingual ASR | |
US20210035569A1 (en) | Dynamic interpolation for hybrid language models | |
US20220310097A1 (en) | Reducing Streaming ASR Model Delay With Self Alignment | |
Huang et al. | Discriminative training methods for language models using conditional entropy criteria | |
Lu et al. | Using Bayesian Networks to find relevant context features for HMM-based speech synthesis. | |
KR102637025B1 (en) | Multilingual rescoring models for automatic speech recognition |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PUAI | Public reference made under article 153(3) epc to a published international application that has entered the european phase |
Free format text: ORIGINAL CODE: 0009012 |
|
17P | Request for examination filed |
Effective date: 20150415 |
|
AK | Designated contracting states |
Kind code of ref document: A1Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
AX | Request for extension of the european patent |
Extension state: BA ME |
|
DAX | Request for extension of the european patent (deleted) | ||
17Q | First examination report despatched |
Effective date: 20160421 |
|
GRAP | Despatch of communication of intention to grant a patent |
Free format text: ORIGINAL CODE: EPIDOSNIGR1 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: GRANT OF PATENT IS INTENDED |
|
RIC1 | Information provided on ipc code assigned before grant |
Ipc: G06F 17/27 20060101ALI20161010BHEPIpc: G06F 17/30 20060101ALI20161010BHEPIpc: G10L 15/06 20130101ALI20161010BHEPIpc: G10L 15/197 20130101AFI20161010BHEPIpc: G10L 15/14 20060101ALN20161010BHEP |
|
INTG | Intention to grant announced |
Effective date: 20161114 |
|
GRAS | Grant fee paid |
Free format text: ORIGINAL CODE: EPIDOSNIGR3 |
|
GRAA | (expected) grant |
Free format text: ORIGINAL CODE: 0009210 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: THE PATENT HAS BEEN GRANTED |
|
AK | Designated contracting states |
Kind code of ref document: B1Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
REG | Reference to a national code |
Ref country code: GBRef legal event code: FG4D |
|
REG | Reference to a national code |
Ref country code: CHRef legal event code: EP |
|
REG | Reference to a national code |
Ref country code: ATRef legal event code: REFRef document number: 882470Country of ref document: ATKind code of ref document: TEffective date: 20170415 |
|
REG | Reference to a national code |
Ref country code: IERef legal event code: FG4D |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R096Ref document number: 602013019519Country of ref document: DE |
|
REG | Reference to a national code |
Ref country code: NLRef legal event code: MPEffective date: 20170405 |
|
REG | Reference to a national code |
Ref country code: LTRef legal event code: MG4D |
|
REG | Reference to a national code |
Ref country code: ATRef legal event code: MK05Ref document number: 882470Country of ref document: ATKind code of ref document: TEffective date: 20170405 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: NLFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170405 |
|
REG | Reference to a national code |
Ref country code: FRRef legal event code: PLFPYear of fee payment: 5 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: LTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170405Ref country code: NOFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170705Ref country code: ATFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170405Ref country code: FIFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170405Ref country code: GRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170706Ref country code: HRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170405Ref country code: ESFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170405 |
|
RAP2 | Party data changed (patent owner data changed or rights of a patent transferred) |
Owner name: GOOGLE LLC |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: LVFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170405Ref country code: RSFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170405Ref country code: BGFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170705Ref country code: ISFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170805Ref country code: PLFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170405Ref country code: SEFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170405 |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R097Ref document number: 602013019519Country of ref document: DE |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: DKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170405Ref country code: EEFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170405Ref country code: SKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170405Ref country code: CZFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170405Ref country code: ROFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170405 |
|
PLBE | No opposition filed within time limit |
Free format text: ORIGINAL CODE: 0009261 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: NO OPPOSITION FILED WITHIN TIME LIMIT |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R082Ref document number: 602013019519Country of ref document: DERepresentative=s name: MAIKOWSKI & NINNEMANN PATENTANWAELTE PARTNERSC, DERef country code: DERef legal event code: R081Ref document number: 602013019519Country of ref document: DEOwner name: GOOGLE LLC (N.D.GES.D. STAATES DELAWARE), MOUN, USFree format text: FORMER OWNER: GOOGLE INC., MOUNTAIN VIEW, CALIF., US |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: SMFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170405Ref country code: ITFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170405 |
|
26N | No opposition filed |
Effective date: 20180108 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: SIFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170405Ref country code: MCFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170405 |
|
REG | Reference to a national code |
Ref country code: CHRef legal event code: PL |
|
REG | Reference to a national code |
Ref country code: IERef legal event code: MM4A |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: LIFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20171031Ref country code: CHFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20171031Ref country code: LUFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20171014 |
|
REG | Reference to a national code |
Ref country code: BERef legal event code: MMEffective date: 20171031 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: BEFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20171031 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: MTFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20171014 |
|
REG | Reference to a national code |
Ref country code: FRRef legal event code: PLFPYear of fee payment: 6 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: IEFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20171014 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: HUFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMIT; INVALID AB INITIOEffective date: 20131014 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: CYFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170405 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: MKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170405 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: TRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170405 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: PTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170405 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: ALFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170405 |
|
P01 | Opt-out of the competence of the unified patent court (upc) registered |
Effective date: 20230506 |
|
PGFP | Annual fee paid to national office [announced via postgrant information from national office to epo] |
Ref country code: GBPayment date: 20231027Year of fee payment: 11 |
|
PGFP | Annual fee paid to national office [announced via postgrant information from national office to epo] |
Ref country code: FRPayment date: 20231025Year of fee payment: 11Ref country code: DEPayment date: 20231027Year of fee payment: 11 |