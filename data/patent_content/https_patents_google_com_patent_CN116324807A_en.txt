CN116324807A - Neural architecture and hardware accelerator search - Google Patents
Neural architecture and hardware accelerator search Download PDFInfo
- Publication number
- CN116324807A CN116324807A CN202180063841.5A CN202180063841A CN116324807A CN 116324807 A CN116324807 A CN 116324807A CN 202180063841 A CN202180063841 A CN 202180063841A CN 116324807 A CN116324807 A CN 116324807A
- Authority
- CN
- China
- Prior art keywords
- neural network
- architecture
- hardware
- accelerator
- network
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 230000001537 neural effect Effects 0.000 title description 14
- 238000013528 artificial neural network Methods 0.000 claims abstract description 345
- 238000012549 training Methods 0.000 claims abstract description 89
- 238000000034 method Methods 0.000 claims abstract description 87
- 238000003860 storage Methods 0.000 claims abstract description 12
- 238000010801 machine learning Methods 0.000 claims description 58
- 238000012545 processing Methods 0.000 claims description 52
- 238000009826 distribution Methods 0.000 claims description 32
- 230000008569 process Effects 0.000 claims description 27
- 238000010200 validation analysis Methods 0.000 claims description 24
- 230000006870 function Effects 0.000 claims description 19
- 230000015654 memory Effects 0.000 claims description 15
- 230000000306 recurrent effect Effects 0.000 claims description 11
- 230000002787 reinforcement Effects 0.000 claims description 11
- 238000012795 verification Methods 0.000 claims description 8
- 238000013527 convolutional neural network Methods 0.000 claims description 5
- 238000001514 detection method Methods 0.000 claims description 4
- 239000003550 marker Substances 0.000 claims description 3
- 238000005457 optimization Methods 0.000 claims description 3
- 238000005070 sampling Methods 0.000 claims description 2
- 230000011218 segmentation Effects 0.000 claims description 2
- 230000001419 dependent effect Effects 0.000 claims 7
- 238000004590 computer program Methods 0.000 abstract description 17
- 230000009471 action Effects 0.000 description 12
- 238000004891 communication Methods 0.000 description 6
- 238000013461 design Methods 0.000 description 6
- 239000003795 chemical substances by application Substances 0.000 description 5
- 230000036541 health Effects 0.000 description 5
- 230000004044 response Effects 0.000 description 5
- 239000008280 blood Substances 0.000 description 4
- 210000004369 blood Anatomy 0.000 description 4
- 238000011156 evaluation Methods 0.000 description 4
- 238000004519 manufacturing process Methods 0.000 description 4
- 208000037170 Delayed Emergence from Anesthesia Diseases 0.000 description 3
- WQZGKKKJIJFFOK-GASJEMHNSA-N Glucose Natural products OC[C@H]1OC(O)[C@H](O)[C@@H](O)[C@@H]1O WQZGKKKJIJFFOK-GASJEMHNSA-N 0.000 description 3
- 238000004422 calculation algorithm Methods 0.000 description 3
- 230000000694 effects Effects 0.000 description 3
- 239000012634 fragment Substances 0.000 description 3
- 239000008103 glucose Substances 0.000 description 3
- 230000003993 interaction Effects 0.000 description 3
- 238000005259 measurement Methods 0.000 description 3
- 239000004065 semiconductor Substances 0.000 description 3
- 238000004088 simulation Methods 0.000 description 3
- 108091028043 Nucleic acid sequence Proteins 0.000 description 2
- 230000001934 delay Effects 0.000 description 2
- 238000010586 diagram Methods 0.000 description 2
- 239000011159 matrix material Substances 0.000 description 2
- 238000003058 natural language processing Methods 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 238000013515 script Methods 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 230000000007 visual effect Effects 0.000 description 2
- 241000009334 Singa Species 0.000 description 1
- 230000002411 adverse Effects 0.000 description 1
- 238000004458 analytical method Methods 0.000 description 1
- 238000003491 array Methods 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 230000036772 blood pressure Effects 0.000 description 1
- 238000009530 blood pressure measurement Methods 0.000 description 1
- 230000000747 cardiac effect Effects 0.000 description 1
- 230000001149 cognitive effect Effects 0.000 description 1
- 238000013135 deep learning Methods 0.000 description 1
- 238000003745 diagnosis Methods 0.000 description 1
- 230000010339 dilation Effects 0.000 description 1
- 230000008451 emotion Effects 0.000 description 1
- 230000007613 environmental effect Effects 0.000 description 1
- 208000019622 heart disease Diseases 0.000 description 1
- 230000003345 hyperglycaemic effect Effects 0.000 description 1
- 230000002218 hypoglycaemic effect Effects 0.000 description 1
- 238000003709 image segmentation Methods 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 230000011987 methylation Effects 0.000 description 1
- 238000007069 methylation reaction Methods 0.000 description 1
- 230000000644 propagated effect Effects 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 230000006403 short-term memory Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 229920002803 thermoplastic polyurethane Polymers 0.000 description 1
- 238000013518 transcription Methods 0.000 description 1
- 230000035897 transcription Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/06—Physical realisation, i.e. hardware implementation of neural networks, neurons or parts of neurons
- G06N3/063—Physical realisation, i.e. hardware implementation of neural networks, neurons or parts of neurons using electronic means
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/004—Artificial life, i.e. computing arrangements simulating life
- G06N3/006—Artificial life, i.e. computing arrangements simulating life based on simulated virtual individual or collective life forms, e.g. social simulations or particle swarm optimisation [PSO]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/044—Recurrent networks, e.g. Hopfield networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/0464—Convolutional networks [CNN, ConvNet]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/092—Reinforcement learning
Abstract
Methods, systems, and apparatus, including computer programs encoded on a computer storage medium, for jointly determining a neural network architecture and a hardware accelerator architecture. In one aspect, a method includes: generating, using a controller policy, a batch of one or more output sequences, each output sequence in the batch defining a respective architecture of the sub-neural network and a respective architecture of the hardware accelerator; for each output sequence in the batch: training respective instances of the sub-neural network having the architecture defined by the output sequence; evaluating network performance of the trained instance of the sub-nerve; and evaluating accelerator performance of a respective instance of the hardware accelerator having the architecture defined by the output sequence to determine an accelerator performance index for the instance of the hardware accelerator; and adjusting the controller policy using the network performance index and the accelerator performance index.
Description
Cross Reference to Related Applications
The present application claims priority from U.S. provisional application No. 63/087,143, filed on 10/2/2020. The disclosure of the prior application is considered to be part of the disclosure of the present application and is incorporated by reference into the disclosure of the present application.
Background
The present description relates to determining neural network architecture and hardware accelerator design.
Neural networks are machine learning models that employ one or more layers of nonlinear units to predict output for a received input. In addition to the output layer, some neural networks include one or more hidden layers. The output of each hidden layer is used as an input to the next layer (i.e., the next hidden layer or output layer) in the network. Each layer of the network generates an output from the received input based on the current values of the set of corresponding parameters.
Hardware accelerators are computing devices, such as graphics processing units ("GPUs"), field programmable gate arrays ("FGPAs"), and application specific integrated circuits ("ASICs"), including tensor processing units ("TPUs"), having specialized hardware configured to perform specialized computations.
Disclosure of Invention
The specification describes a system implemented as a computer program on one or more computers in one or more locations that can jointly (e.g., simultaneously) determine (i) an optimal network architecture for a neural network configured to perform a particular machine learning task and (ii) an optimal hardware architecture for a hardware accelerator as part of a target computing device on which the neural network is to be implemented.
Depending on the task, the neural network may be configured to receive any kind of digital data input (i.e., through training) and generate any kind of score, classification, or regression output based on the input.
Once trained, the neural network may be implemented on a target computing device, which in turn includes one or more hardware accelerators. A hardware accelerator is a computing device that includes specialized hardware for performing certain types of operations (e.g., matrix multiplication) that is more efficient than a non-specialized or "general-purpose" computing device. Different hardware accelerators may have different hardware characteristics, for example in terms of number of compute units, amount of parallelism, compute memory ratio, bandwidth, etc.
As one example, the target computing device that includes one or more hardware accelerators may be a single specific edge device, such as a mobile phone, a smart speaker, or another embedded computing device or other edge device. As a specific example, the edge device may be a mobile phone or other device with a specific type of hardware accelerator or other computer chip on which the neural network is to be deployed.
As another example, the target computing device including one or more hardware accelerators may be a collection of multiple hardware accelerator devices, such as an ASIC, FPGA, or Tensor Processing Unit (TPU) on a real world agent, such as a vehicle (e.g., an automated driving automobile) or robot.
As yet another example, the target computing device that includes one or more hardware accelerator devices may be a set of hardware accelerators in a data center.
In general, one innovative aspect of the subject matter described in this specification can be embodied in a method that includes: generating a batch of one or more output sequences using a controller policy, each output sequence in the batch defining (i) a respective architecture of a sub-neural network configured to perform a particular neural network task and (ii) a respective architecture of a hardware accelerator on which a training instance of the sub-neural network is to be implemented; for each output sequence in the batch: training respective instances of the sub-neural network having the architecture defined by the output sequence to perform the particular neural network task; evaluating the network performance of the training instance of the sub-neural network for the particular neural network task to determine a network performance indicator of the training instance of the sub-neural network for the particular neural network task; and evaluating accelerator performance of a respective instance of the hardware accelerator having the architecture defined by the output sequence to determine an accelerator performance index for the instance of the hardware accelerator for supporting performance of the training instance of the sub-neural network having the architecture defined by the output sequence for the particular neural network task; and adjusting the controller policy using (i) the network performance index of the training instance of the sub-neural network and (ii) the accelerator performance index of the instance of the hardware accelerator.
The controller policy may be implemented using a controller neural network having a plurality of controller network parameters; and adjusting the controller policy may include adjusting current values of the plurality of controller network parameters.
Adjusting the controller policy using (i) a network performance index of a training instance of the sub-neural network and (ii) an accelerator performance index of an instance of the hardware accelerator may include: the controller neural network is trained using reinforcement learning techniques to generate an output sequence that results in the sub-neural network having an increased network performance index and the hardware accelerator having an increased accelerator performance index.
The reinforcement learning technique may be a near-end policy optimization (PPO) technique.
Each output sequence may include values of respective superparameters of the sub-neural network at each of the first plurality of time steps.
Each output sequence may include values of respective hardware parameters of the hardware accelerator at each time step of the second plurality of time steps.
The controller neural network may be a recurrent neural network, the recurrent neural network comprising: one or more recurrent neural network layers configured to, at each time step, for a given output sequence: receiving as input the value of a super parameter or a hardware parameter at a previous time step in the given output sequence and processing the input to update a current hidden state of the recurrent neural network; and a respective output layer for each time step, wherein each output layer is configured to, for the given output sequence: an output layer input is received that includes the updated hidden state at the time step and an output of the time step is generated that defines a fractional distribution over possible values of the super parameter or the hardware parameter at the time step.
Generating one or more output sequences of a batch using a controller policy may include, for each output sequence in the batch, for each time step in the plurality of time steps: providing the value of the super parameter or the hardware parameter at a previous time step in the output sequence as an input to the controller neural network to generate an output for the time step, the output defining a fractional distribution over possible values of the super parameter or the hardware parameter at the time step; and sampling from the possible values according to the score distribution to determine the value of the super parameter or the hardware parameter at the time step in the output sequence.
The particular neural network task may be an object classification and/or detection task, an object pose estimation task, or a semantic segmentation task; the sub-neural network may be a convolutional neural network comprising one or more depth-wise separable convolutional layers; and the super-parameters may include super-parameters of each depth-wise separable convolutional layer in the sub-neural network.
The sub-neural network may include one or more reverse residual layers and one or more linear bottleneck layers; and the super parameters may include super parameters of each reverse residual layer and linear bottleneck layer in the sub-neural network.
The respective hardware characteristics of the hardware accelerator may include one or more of the following: the bandwidth of the hardware accelerator, the number of processing elements included in the hardware accelerator, the layout of the processing elements on the hardware accelerator, the number of Single Instruction Multiple Data (SIMD) multiply-accumulate in each processing element, the number of compute channels in each processing element, the size of shared memory in each processing element, or the size of a register file in each processing element.
The accelerator performance metrics of the instance of the hardware accelerator for supporting performance of the training instance of the sub-neural network may include one or more of: the estimated area of the hardware accelerator, the estimated power consumption of the hardware accelerator, or the estimated latency of the neural network to perform the particular neural network task when deployed on the hardware accelerator.
Evaluating accelerator performance of respective instances of the hardware accelerator having an architecture defined by the output sequence to determine an accelerator performance index for the instances of the hardware accelerator for supporting performance of the training instance of the sub-neural network having the architecture defined by the output sequence for the particular neural network task may include: the estimated latency of the neural network for performing a particular neural network task when deployed on the hardware accelerator is determined from (i) the respective architecture of the sub-neural network and (ii) the respective architecture of a hardware accelerator defined by the batch of output sequences based on using a cycle accuracy performance simulator.
Evaluating accelerator performance of respective instances of the hardware accelerator having an architecture defined by the output sequence to determine an accelerator performance index for the instances of the hardware accelerator for supporting performance of the training instance of the sub-neural network having the architecture defined by the output sequence for the particular neural network task may include: the estimated area of the hardware accelerator is determined from the respective architecture of the hardware accelerator defined by the output sequence of the batch based on using an analytical area estimator.
Using (i) the network performance index of a training instance of the sub-neural network and (ii) the accelerator performance index of an instance of the hardware accelerator to adjust the current value of the controller network parameter of the controller neural network may include: assigning different weights to the one or more of the accelerator performance indicators; and adjusting the current values of the controller network parameters of the controller neural network according to the different weights.
Adjusting the controller policy using (i) the network performance index of the training instance of the sub-neural network and (ii) the accelerator performance index of the instance of the hardware accelerator may further comprise: the network performance index of the training instance of the sub-neural network for the particular neural network task is fixed and the current values of controller network parameters of the controller neural network are adjusted using only the determined accelerator performance index of the instance of the hardware accelerator.
The method may further comprise: a final output sequence defining a final architecture of the sub-neural network is generated from the adjusted values of the controller network parameters.
The method may further comprise: the particular neural network task is performed on the received network input by processing the received network input using a sub-neural network having the final architecture.
Another innovative aspect of the subject matter described in this specification can be implemented in a method comprising: receiving data specifying one or more target hardware constraints of a hardware accelerator on which a neural network for performing a particular machine learning task is to be deployed; receiving training data and verification data of the specific machine learning task; and selecting a network architecture of the neural network for performing the particular machine learning task from a candidate network architecture space using the training data and the validation data, the neural network performing the particular machine learning task to be deployed on the hardware accelerator from a candidate hardware architecture space, wherein each candidate network architecture in the space is defined by a corresponding set of decision values including a respective decision value for each of a first plurality of classification decisions, wherein each candidate hardware architecture in the space is defined by a corresponding set of decision values including a respective decision value for each of a second plurality of classification decisions, and wherein the selecting comprises: jointly updating (i) a set of controller parameters defining, for each of the first and second pluralities of classification decisions, a respective probability distribution over the decision values of that classification decision, and (ii) a shared set of parameters, wherein: updating the set of controller policy parameters includes: updating the set of controller parameters by reinforcement learning to maximize a reward function that measures (i) an estimated quality of a candidate hardware architecture and (ii) an estimated quality of a candidate network architecture defined by a set of decision values sampled from a probability distribution generated using the controller policy parameters, and updating the shared set of model parameters includes: updating the shared set of model parameters to optimize an objective function that measures performance of the candidate network architecture for the particular machine learning task defined by the set of decision values sampled from the probability distribution generated using the controller policy; after the joint update, selecting a candidate network architecture as the network architecture of the neural network, the candidate network architecture defined by a respective particular decision value for each of the first plurality of classification decisions; and selecting a candidate hardware architecture as the hardware architecture of the hardware accelerator, the candidate hardware architecture defined by a respective particular decision value for each of the second plurality of classification decisions.
The method may further comprise: data is received specifying a target latency for the neural network to perform the particular machine learning task when deployed on the hardware accelerator.
The reward function may include a quality term that measures the estimated quality of the (i) the candidate hardware architecture and (ii) the estimated quality of the candidate network architecture and a latency term that is based on a ratio between an estimated latency of the candidate architecture and the target latency.
The joint update includes repeatedly performing operations that may include: using the validation data, an estimated quality of a neural network having a candidate architecture with a subset of the shared set of model parameters defined by the selected decision values of the first plurality of classification decisions is determined for the particular machine learning task, wherein the quality is estimated from current values of the subset of the shared set of model parameters defined by the selected decision values of the first plurality of classification decisions.
The joint update may include repeatedly performing operations including: using the validation data and a latency simulator, determining an estimated latency of the neural network having the candidate network architecture with the subset of the shared set of model parameters defined by the selected decision values of the first plurality of classification decisions when performing the particular machine learning task, wherein the neural network is deployed on the hardware architecture having a hardware architecture with the subset of the shared set of model parameters defined by the selected decision values of the second plurality of classification decisions.
The joint update may include repeatedly performing operations including: an estimated quality of the candidate hardware architecture is determined using an area simulator, the candidate hardware architecture having the subset of the shared set of model parameters defined by the selected decision values of the second plurality of classification decisions.
Each of the delay simulator and the area simulator may be a respective neural network trained on marker training data generated using an accelerator simulator.
Another innovative aspect of the subject matter described in this specification can be implemented in machine learning task specific hardware accelerators with an architecture defined by executing a process comprising the respective operations of any of the preceding claims.
Other embodiments of the aspects include corresponding computer systems, apparatus, and computer programs recorded on one or more computer storage devices, each configured to perform the actions of the methods. A system of one or more computers may be configured to perform particular operations or actions by way of software, firmware, hardware, or any combination thereof installed on the system that may cause the system to perform the actions in operation. The one or more computer programs may be configured to perform particular operations or actions by virtue of comprising instructions that, when executed by the data processing apparatus, cause the apparatus to perform the actions.
The subject matter described in this specification can be implemented in particular embodiments to realize one or more of the following advantages.
Hardware accelerators are specialized hardware configured to perform specialized computations and are generally more computationally efficient than their general-purpose counterparts, but are also generally more expensive due to the cost of the hardware and the associated energy costs of powering and maintaining the accelerator. Performing machine learning tasks (e.g., visual tasks, natural language processing tasks, or other tasks requiring near real-time responses to be provided to a user) using a neural network deployed on a hardware accelerator requires (i) an accurate and computationally efficient neural network architecture to generate inferences of inputs with a certain target latency, and (ii) a hardware accelerator architecture that has been customized for the machine learning tasks.
The described techniques may be used to search for neural network architectures of neural networks that may perform tasks while searching for hardware accelerator architectures that may supply sufficient computing resources (e.g., memory, computing power, or both) to support network performance of the tasks while satisfying hardware constraints (e.g., resource consumption constraints, area constraints, or both), and thus identify (i) a single architecture or a series of architectures of inferred neural networks that may be efficiently deployed to compute with target delays and (ii) a single architecture or a series of architecture ranges of hardware accelerators on which the neural networks with the identified network architectures are deployed, which may efficiently support network performance of the tasks while satisfying hardware architecture constraints.
Moreover, because the described techniques allow the system to identify network architectures in conjunction with hardware architectures, the search process consumes significantly less computing resources than prior art architectures that search for neural networks or hardware accelerators on an independent (or alternating) basis.
The details of one or more embodiments of the subject matter of the specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
Drawings
FIG. 1 illustrates an example neural architecture and hardware architecture search system.
FIG. 2 is a flow chart of an example process for updating a controller policy.
FIG. 3 is a flow chart of an example process for selecting an architecture of a neural network and an architecture of a hardware accelerator by jointly updating a set of controller policy parameters and a shared set of parameters.
Fig. 4 is a diagram of a neural architecture and a hardware architecture of a hardware accelerator that jointly determine a neural network.
Like reference numbers and designations in the various drawings indicate like elements.
Detailed Description
The specification describes a system implemented as a computer program on one or more computers in one or more locations that can jointly (e.g., simultaneously) determine (i) an optimal network architecture for a neural network configured to perform a particular machine learning task and (ii) an optimal hardware architecture for a hardware accelerator as a target computing device (part thereof) on which the neural network is to be implemented, i.e., an architecture of the hardware accelerator on which the neural network is to be deployed after the neural network is trained.
In some cases, the neural network is a neural network configured to perform an image processing task (i.e., a network output that receives an input image and processes the input image to generate the input image). In this specification, processing an input image refers to processing intensity values of pixels of the image using a neural network. For example, the task may be image classification and the output generated by the neural network for a given image may be a score for each object classification in the set of object classifications, each score representing an estimated likelihood that the image contains an object image belonging to that classification. As another example, the task may be image embedding generation and the output generated by the neural network may be digital embedding of the input image. As yet another example, a task may be object detection and an output generated by a neural network may identify locations in an input image where a particular type of object is depicted. As yet another example, the task may be image segmentation and the output generated by the neural network may assign each pixel of the input image to a classification from the set of classifications.
As another example, if the input to the neural network is an internet resource (e.g., a web page), a document or document portion, or a feature extracted from an internet resource, document or document portion, the task may be to categorize the resource or document, i.e., the output generated by the neural network for a given internet resource, document or document portion may be a score for each topic in the set of topics, each score representing an estimated likelihood that the internet resource, document or document portion is related to that topic.
As another example, if the input to the neural network is characteristic of the impression context of the particular advertisement, the output generated by the neural network may be a score representing an estimated likelihood that the particular advertisement will be clicked.
As another example, if the input to the neural network is a characteristic of a personalized recommendation for the user, such as a characteristic that characterizes a recommendation context, such as a characteristic that characterizes an action previously taken by the user, the output generated by the neural network may be a score for each content item in the collection of content items, each score representing an estimated likelihood that the user will respond positively to the recommended content item.
As another example, if the input to the neural network is a sequence of text in one language, the output generated by the neural network may be a score for each text segment in a set of text segments in another language, each score representing an estimated likelihood that the text segment in the other language is correctly translated into the input text in the other language.
As another example, the task may be an audio processing task. For example, if the input to the neural network is a sequence representing a spoken utterance, the output generated by the neural network may be a score for each text segment in the set of text segments, each score representing an estimated likelihood that the text segment is a correct transcription of the utterance.
As another example, the task may be a keyword detection task, wherein if the input to the neural network is a sequence representing a spoken utterance, the output generated by the neural network may indicate whether a particular word or phrase ("hotword") is spoken in the utterance. As another example, if the input to the neural network is a sequence representing a spoken utterance, the output generated by the neural network may recognize the natural language in which the utterance was spoken.
As another example, a task may be a natural language processing or understanding task, such as an implication task, a paraphrase task, a text similarity task, an emotion task, a sentence completion task, a grammar task, etc., that operates on a text sequence in some natural language.
As another example, the task may be a text-to-speech task, where the input is text in natural language or text features in natural language, and the network output is a spectrogram or other data defining audio of the text being spoken in natural language.
As another example, the task may be a health prediction task, where the input is electronic health record data of the patient and the output is a prediction related to the future health of the patient, such as a predicted treatment that should be taken for the patient, a likelihood that the patient will have an adverse health event, or a predicted diagnosis of the patient. Physiological data (such as heart rate, blood pressure, blood glucose level, blood chemistry, etc.) may be used as inputs, with outputs being probabilities of one or more health events occurring and/or probabilities of one or more diagnoses. For example, where the input includes a blood glucose measurement (e.g., a sequence of blood glucose readings), the output may include a probability of a hypoglycemic or hyperglycemic event occurring. Where the input includes a blood pressure measurement and/or a heart rate, the output may include a probability of occurrence of a cardiac event and/or presence of a heart disease.
As another example, the task may be an agent control task, where the input is an observation characterizing an environmental state and the output defines an action to be performed by the agent in response to the observation. For example, the agent may be a real world or simulated robot, a control system of an industrial facility, or a control system controlling different kinds of agents.
As another example, the task may be a genomics task, where the inputs are sequences representing fragments of DNA sequences or other molecular sequences, and the outputs are the embedding of fragments for downstream tasks or the output of downstream tasks, e.g., by using an unsupervised learning technique on a data set of DNA sequence fragments. Examples of downstream tasks include promoter site prediction, methylation analysis, prediction of the functional effects of non-coding variants, and the like.
In some cases, the machine learning task is a combination of a plurality of separate machine learning tasks, i.e., the neural network is configured to perform a plurality of different separate machine learning tasks, such as two or more of the machine learning tasks mentioned above. For example, the neural network may be configured to perform a plurality of separate natural language understanding tasks. Alternatively, the network input may include an identifier of a separate natural language understanding task to be performed on the network input. As another example, the neural network may be configured to perform a plurality of separate image processing or computer vision tasks, i.e., to generate the output of a plurality of different separate image processing tasks in parallel by processing a single input image.
FIG. 1 illustrates an example neural architecture and hardware architecture search system 100. The neural architecture and hardware architecture search system 100 is an example of a system implemented as a computer program on one or more computers in one or more locations, where the systems, components, and techniques described below may be implemented.
The neural architecture and hardware architecture search system 100 is a system that obtains training data 102 and validation data 104 for a particular machine learning task and selects a network architecture 150 of a neural network and a hardware architecture 160 of a hardware accelerator on which the neural network is to be deployed to perform the task using the training data 102 and validation data 104.
Typically, both training data 102 and validation data 104 comprise a set of neural network inputs (also referred to as training or validation examples), and for each network input, a respective target output that should be generated by the neural network to perform a particular task. The training data 102 and the validation data 104 may include different sets of neural network inputs, i.e., such that the validation data 104 may be used to effectively measure how well a neural network that has been trained on the training data 102 performs on new inputs.
The system 100 may receive training data 102 and verification data 104 in any of a variety of ways. For example, the system 100 may receive training data as an upload from a remote user of the system over a data communication network, for example, using an Application Programming Interface (API) provided by the system 100. The system 100 may then randomly divide the received training data into training data 102 and verification data 104. As another example, the system 100 may receive input from a user specifying which data the system 100 has maintained should be used to train the neural network.
The system 100 also receives data specifying one or more search targets 106, for example, from a user, the search targets 106 generally defining desired performance requirements or constraints for a neural network, a hardware accelerator, or both. Several example search targets are described next.
For example, the search target may include a target accuracy for performing a machine learning task. For example, target accuracy may be assessed by calculating the loss of a trained neural network on the validation dataset or the result of some other measure of model accuracy when calculated on the validation dataset.
As another example, the search target may include a target latency for performing a machine learning task after training and during inference, i.e., for processing new inputs for a particular task after the architecture has been determined. In general, the target latency is a target latency of the neural network when deployed on the target computing device. When the neural network is deployed on the target computing device, the target latency measurement performs the inference on a batch of one or more examples at a time, i.e., the time required to process each example in the batch using the neural network, e.g., in milliseconds.
As yet another example, the search target may include constraints on the configuration or design of the underlying hardware accelerator that supports neural network operation. Example hardware configuration or design constraints may include area of the hardware accelerator, power (or energy) consumption of the hardware accelerator, and so on.
In some implementations, such search targets can be symbolically represented as:
Latency(α,h)≤T latency ,Area(h)≤T area
wherein the method comprises the steps of
Thus, using the techniques described below, the system 100 can efficiently determine (i) an architecture of a neural network configured to perform machine learning tasks and (ii) a hardware architecture of a hardware accelerator on which the neural network is to be deployed, while meeting one or more search objectives.
As a specific example, the system 100 may determine a particular architecture of a neural network that, when deployed on a particular hardware accelerator having an architecture determined by the system and having an area that is no greater than a maximum allowable hardware area, may be configured to perform particular machine learning tasks with acceptable accuracy (e.g., with accuracy approximately equal to a target accuracy) while having a runtime latency that is no greater than the maximum allowable latency. In this example, the maximum allowed hardware area, target accuracy, and maximum allowed time delay may all be specified in the search target data 106.
The system 100 then uses the training set 102, the validation data 104, and the search target data 106 to determine the neural network architecture and the hardware accelerator architecture by searching a joint search space comprised of the space of candidate neural network architectures and the space of candidate hardware accelerator architectures.
In general, the architecture of a neural network defines the number of layers in the neural network, the operations performed by each of the layers, and the connectivity between the layers in the neural network, i.e., which layers receive input from which other layers in the neural network.
In particular, the search space of the candidate neural network architecture may be defined by possible values of a set of superparameters, i.e. may comprise a set of superparameters, each of which may have a predetermined set of possible values. The selected value of the hyper-parameter may be set prior to the start of training of the neural network and may affect the operations performed by the neural network. In general, the selected values of the superparameters may define the architecture of the neural network.
Some examples of neural architecture search spaces and sets of corresponding hyper-parameters defining these search spaces are described next.
For example, the search space may be built specifically for mobile edge processors and based on the infrastructure mobiletv 2, which includes a reverse bottleneck layer stack. The neural architecture search space in this example may include efficient neural network components, such as a mobile reverse bottleneck convolution (MBConv) layer, each of which in turn includes one or more reverse residual layers, one or more linear bottleneck layers, and one or more convolution layers (e.g., one or more depth-wise separable convolution layers). The searchable hyper-parameters may then include corresponding hyper-parameters associated with a depth-wise separable convolutional layer, an inverse residual layer, or a linear bottleneck layer. In particular, the searchable hyper-parameters may include the kernel size and expansion ratio of each reverse bottleneck convolutional layer. For example, the kernel-sized value may be selected from the set of possible integer values {3,5,7} and the expansion ratio may be selected from the set of possible integer values {1,3,6 }. The MobilenetV2 search space is described in greater detail in Sandler, M., et al, "MobilenetV2: inverted Residuals and Linear Bottlenecks," arXiv preprint arXiv:1801.04381 (2019) (Sandler, M., et al, "MobilenetV 2:reverse residual and linear bottleneck" published on arVix preprint arXiv:1801.04381, 2019), the entire contents of which are incorporated herein by reference.
As another example, the search space may be built based on a standard EfficientNet-B0 infrastructure that includes a stack of reverse residual blocks. The Efficient Net search space can be built with a larger radix than the MobilenetV2 search space to better utilize modern edge accelerators that typically have a larger number of computing units and memory capacity. Similarly, the searchable hyper-parameters in the Efficient Net-B0 search space may include the kernel size and expansion ratio of each residual block. The EfficientNet search space is described in more detail in Tan, M., et al, "EfficientNet: rethinking Model Scaling for Convolutional Neural networks," arXiv preprint arXiv:1905.11946 (2019) (Tan, M., et al, "EfficientNet: re-thinking model scaling of convolutional neural networks," published in ArVix preprint arXiv:1905.11946, tan, M., et al, the entire contents of which are incorporated herein by reference.
The search space of the candidate hardware accelerator architecture may be defined by possible values of a set of searchable hardware parameters. Example hardware parameters may include the number of computing units associated with a given hardware accelerator (e.g., an industry standard highly parameterized edge accelerator), the amount of parallelism, the compute-to-memory ratio, the bandwidth, etc., which collectively specify a hardware architecture that includes the corresponding computing characteristics of the hardware accelerator. Each hardware parameter is typically associated with one or more values, such as integer or floating point values, which may be selected from a set of possible values for the hardware parameter.
Examples of hardware search spaces and corresponding sets of hardware parameters defining these search spaces are described in table 1 below.
Table 1 below shows an example candidate architecture design space, where "PE" refers to a processing element capable of performing matrix multiplication in a Single Instruction Multiple Data (SIMD) paradigm, e.g., "PEs_in_x_dimension" refers to the number of processing elements along the horizontal dimension of a hardware accelerator. In general, the number of PEs in each dimension may define the aspect ratio of the hardware accelerator. In each PE there may be multiple compute channels sharing local memory, and each channel may have one register file and a series of SIMD-type multiply-accumulate (MAC) compute units.
Parameters (parameters) | Type(s) | Search space | Parameters (parameters) | Type(s) | Search space |
PEs_in_x_dimension | int | 1、2、4、6、8 | local_memory_MB | int | 0.5、1、2、3、4 |
PEs_in_y_dimension | int | 1、2、4、6、8 | compute_lanes | int | 1、2、4、8 |
SIMD_units | int | 16、32、64、128 | io_bandwidth_gbps | float | 5、10、15、20、25 |
register_file_KB | int | 8、16、32、64、128 |
TABLE 1
Specifically, in this example, the searchable hardware parameters may include one or more of the following: the bandwidth of the hardware accelerator, the number of processing elements included in the hardware accelerator, the layout of the processing elements on the hardware accelerator, the number of Single Instruction Multiple Data (SIMD) multiply-accumulate (MAC) in each processing element, the number of compute channels in each processing element, the size of shared memory in each processing element, or the size of a register file in each processing element.
While a total of three example search spaces (two for the neural network architecture and one for the hardware accelerator architecture) have now been described, it should be understood that the described techniques may be used to search any search space defined by super-parameters or possible values of a set of parameters or other tunable variables. For example, different neural network architecture search spaces may have layers composed of different kinds of operations, such as different kinds of residual blocks or different kinds of convolution operations, such as dilation convolution, spatial convolution, and the like. Similarly, different hardware accelerator architecture search spaces may have hardware components that perform different operations or provision different resources, such as different kinds of memory, e.g., PE memory, core memory, parameter memory, etc.
In some implementations, each candidate neural network architecture in the federated search space has a different subset of the shared set of parameters, and the respective values of the shared set of parameters are jointly updated by the system during the search process. This may increase search efficiency, saving computing resources (e.g., in terms of processing cycles) required to determine the final neural network architecture and the final hardware accelerator architecture.
Specifically, in these embodiments, each candidate neural network architecture performs a set of operations that use a different subset of the shared set of model parameters. Each candidate neural network architecture has a subset defined by a corresponding set of decision values that includes a respective decision value for each of a plurality of first classification decisions. In other words, the decision value of the first classification decision specifies which operations are performed by the candidate neural network architecture and, accordingly, which model parameters from the shared set are used by the neural network architecture.
For example, the possible values of the first classification decision define one or more aspects of the architecture of the neural network, any aspects not defined by the first classification decision being fixed, i.e. the same for all architectures in the candidate neural network architecture space. The first classification decision may include a plurality of different types of classification decisions, each corresponding to a respective point in the neural network.
As one example, the first classification decision may include a binary decision to determine whether a corresponding layer (or other operation) in the neural network is skipped or included in the neural network architecture. As another example, the first classification decision may include a decision specifying which operation or operations from the corresponding set of operations to perform at a given point in the neural network. For example, the first classification decision may specify whether a given layer in the architecture is a convolutional layer, a reverse bottleneck layer, or the like. As another example, the first classification decision may specify which convolution of the different sets of convolutions is performed, for example by specifying the spatial size of the filters of the convolutional layers in the convolutional neural network.
In some implementations, each candidate hardware accelerator architecture has a set of hardware characteristics defined by a set of hardware parameters. Each candidate hardware accelerator architecture has a set of hardware parameters defined by a corresponding set of decision values that includes a respective decision value for each of the second plurality of classification decisions. In other words, the decision value of the hardware accelerator class decision specifies which hardware characteristics the candidate hardware accelerator architecture should have.
For example, the possible values of the second classification decision define one or more aspects of the hardware characteristics of the hardware accelerator.
The neural architecture and hardware architecture search system 100 determines the neural network architecture 150 and the hardware accelerator architecture 160 by automatically searching the federated search space using the controller policy 110, the training engine 120, and the controller policy adjustment engine 130.
The controller policy 110 is typically implemented as software that is configurable to generate a policy output that includes values of a set of superparameters that collectively define a possible architecture of the neural network and values of a set of hardware parameters that collectively define a possible architecture of the hardware accelerator. For example, the software has adjustable settings for generating different values for different super parameters or hardware parameters.
In some implementations, the controller policy 110 may be implemented as a neural network, hereinafter referred to as a "controller neural network. The controller neural network is a neural network having parameters (referred to herein as "controller network parameters") and is configured to generate an output sequence 112 from the controller network parameters. Each output sequence 112 generated by the controller neural network defines a respective possible architecture of a candidate neural network (hereinafter referred to as a "sub-neural network") and a respective possible architecture of a candidate hardware accelerator.
In some of these embodiments, each output sequence 112 includes a respective output at each of a plurality of time steps, and each of the output sequences corresponds to a different hyper-parameter of the sub-neural network architecture or a different hardware parameter of the hardware accelerator architecture. Thus, each output sequence 112 includes a respective value of a corresponding hyper-parameter or a respective value of a corresponding hardware parameter at each time step. In general, the values of the superparameters in a given output sequence define the architecture of the sub-neural network, while the values of the hardware parameters in a given output sequence define the architecture of the hardware accelerator.
Alternatively, in some other embodiments, the controller policy may include a set of controller policy parameters that define respective probability distributions over possible values of the superparameters (or hardware parameters) for each superparameter of the neural network architecture (or hardware parameter of the hardware accelerator architecture). The system 100 may then use the controller policy parameters to select candidate neural network architectures and candidate hardware accelerator architectures. In some of these embodiments, each output sequence 112 may include corresponding values of the hardware parameters and the super parameters sampled by the system 100 from possible values according to a probability distribution.
In yet other implementations, the controller policy 110 may include a set of controller policy parameters that define respective probability distributions for each of the first and second pluralities of classification decisions, and the system 100 may use the controller policy parameters to select the candidate neural network architecture and the candidate hardware accelerator architecture. That is, in these embodiments, the candidate neural network architecture and the candidate hardware accelerator architecture are defined by a set of decision values sampled from probability distributions generated using controller policy parameters. In some of these embodiments, each output sequence 112 instead includes a set of decision values for each of the first and second pluralities of classification decisions.
During the search process, the system 100 determines the architecture of the sub-neural network and the architecture of the hardware accelerator by repeatedly adjusting the controller policy 110 using the controller policy adjustment engine 130 so that the controller policy 110 may propose a neural network architecture and a hardware accelerator architecture that satisfy one or more search targets 106.
In some embodiments in which the controller policy 110 is implemented as a controller neural network, the system may achieve this by adjusting the values of the controller network parameters. Specifically, during iterations of the training program, the system 100 generates batches of the sequence 112 using the controller neural network based on the current values of the controller network parameters. For each output sequence 112 in the batch, the training engine 120 trains instances of the sub-neural network having the architecture defined by the output sequence on the training data 102, and evaluates the performance of the training instances on the validation set 104. For each output sequence 112 in the batch, the system 100 also evaluates the performance of the hardware accelerator in supporting the operation of the sub-neural network, for example, by using appropriate computer architecture simulation tools or techniques. The controller policy adjustment engine 130 then uses the evaluation results (i.e., the neural network performance index 122 and the accelerator performance index 124) to cause the output sequences 112 in the batch to update the current values of the controller network parameters to improve the expected performance of the neural network architecture and hardware accelerator architecture on the task defined by the output sequences generated by the controller neural network.
Alternatively, in some other embodiments in which the controller policy 110 includes a set of controller policy parameters that define respective distributions over possible values of each superparameter of the candidate neural network and each hardware parameter of the candidate hardware accelerator (or respective probability distributions for each of the first and second pluralities of classification decisions), the controller policy adjustment engine 130 may update the controller policy 110 by reinforcement learning to maximize a reward function that depends on the neural network performance index 122 and the accelerator performance index 124 of the candidate neural network architecture and the candidate hardware accelerator architecture, respectively, that are defined by respective values of the superparameters and hardware parameters (or sets of decision values) sampled from the probability distributions generated using the controller policy parameters. In some of these embodiments, the training engine 120 jointly updates the shared set of model parameters to optimize an objective function that measures performance of a particular machine learning task of the candidate neural network architecture.
By repeatedly updating the controller policy 110, the system 100 may encourage the controller policy 110 to generate an output sequence that results in the sub-neural network having improved neural network performance for a particular task when deployed on a hardware accelerator having improved hardware accelerator performance, e.g., to maximize the expected accuracy on the verification set 104 of neural networks having the neural network architecture proposed by the controller policy 110, while minimizing the runtime delay of the neural network and minimizing the area of the hardware accelerator having the neural network architecture proposed by the controller policy 110.
Fig. 4 is a diagram of a neural architecture and a hardware architecture of a hardware accelerator that jointly determine a neural network. In particular, fig. 4 illustrates an example of determining a particular architecture of a neural network that, when deployed on a particular hardware accelerator having an architecture determined by the system, may be configured to perform particular machine learning tasks with acceptable accuracy and acceptable runtime delays.
As illustrated, at each iteration, the controller policy 410 generates a policy output that includes values of a set of superparameters that collectively define the possible architecture of the neural network 412 and values of a set of hardware parameters that collectively define the possible architecture of the hardware accelerator 414. The training engine 420 trains instances of the sub-neural network having the architecture 412 defined by the policy output on the training data, and evaluates the performance of the training instances on the validation set. The accelerator performance estimator 430 simulates an instance of a hardware accelerator to simulate the deployment of a sub-neural network on the hardware accelerator to determine the effect of estimating latency. The controller policy adjustment engine 440 then uses the results of the evaluation (i.e., accuracy and latency) to update the controller policy 410 to improve the performance of the new neural network architecture and the new hardware accelerator architecture defined by the policy output generated by the controller policy 410 in the next iteration.
After the controller policy 110 has been updated, for example, once the controller neural network has been trained, the system 100 may select the neural network architecture and hardware accelerator architecture that best meet the search target 106 as the final architecture of the sub-neural network and the final architecture of the hardware accelerator, respectively. Alternatively or additionally, the system 100 may generate a new output sequence by using the updated controller policy 110, for example, according to training values of controller network parameters, and use the neural network architecture and the hardware accelerator architecture defined by the new output sequence as the final architecture of the sub-neural network and the final architecture of the hardware accelerator, respectively.
The neural architecture and hardware architecture search system 100 may then generate as output (i) neural network architecture data 150 specifying the architecture of the sub-neural network, such as data specifying the layers that are part of the sub-neural network, connectivity between the layers, and operations performed by the layers, and (ii) hardware accelerator architecture data 160 specifying the architecture of the hardware accelerator, such as data specifying the layout of processing elements on the hardware accelerator, the number of computing channels, and the size of local memory.
For example, the neural network and hardware architecture search system 100 may output the neural network architecture data 150 and the hardware accelerator architecture data 160 to a user providing the search target 106. As another example, the system 100 may output hardware accelerator architecture data to a semiconductor manufacturing facility housing semiconductor manufacturing equipment that may be used to manufacture a hardware accelerator having a final hardware architecture, for example, over a wired or wireless network. In some cases, the output data further includes training values for parameters of the trained sub-neural network from training instances of the sub-neural network having the architecture.
In some implementations, instead of or in addition to outputting the neural network architecture data 150 and the hardware accelerator architecture data 160, the system 100 trains instances of the neural network having the determined architecture, e.g., begins from scratch or trims parameter values generated as a result of training instances of the sub-neural network having the architecture, and then uses the trained neural network to process requests received by users (e.g., through an API provided by the system). That is, the system 100 may receive input to be processed, process the input using the trained neural network, and provide output generated by the trained neural network or data derived from the generated output in response to the received input.
In some implementations, the system 100 may be included as part of a software tool (e.g., an Electronic Design Automation (EDA) tool) for designing and/or analyzing an integrated circuit, and then the hardware accelerator architecture data may be provided to another component of the tool for further refinement or evaluation before the hardware accelerator is manufactured.
In embodiments in which the controller policy is implemented as a controller neural network, the system 100 may train the controller neural network in a distributed manner. That is, the system 100 includes multiple copies of the controller neural network. In some of these embodiments in which training is distributed, each replica has a dedicated training engine that generates performance metrics for batches of output sequences of replica outputs and a dedicated controller policy adjustment engine that uses the performance metrics to determine updates to controller network parameters. Once the controller policy adjustment engine has determined the update, the controller policy adjustment engine may transmit the update to a central policy adjustment server accessible to all controller policy adjustment engines. The central policy adjustment server may update the values of the controller network parameters maintained by the server and send the updated values to the controller policy adjustment engine. In some cases, each of the multiple copies and its corresponding training engine and policy adjustment engine may operate asynchronously with each of the other training engines and sets of policy adjustment engines.
FIG. 2 is a flow chart of an example process 200 for updating controller policies. For convenience, process 200 will be described as being performed by a system of one or more computers located in one or more locations. For example, a suitably programmed system (e.g., the neural architecture and hardware architecture search system 100 of fig. 1) may perform the process 200.
The system may repeatedly perform process 200 to iteratively determine updates to the controller policy.
The system generates a batch of one or more output sequences using the controller policy (step 202). Each output sequence in the batch defines (i) a respective architecture of the sub-neural network configured to perform a particular machine learning task and (ii) a respective architecture of a hardware accelerator on which a training instance of the sub-neural network is to be implemented.
The system may generate each output sequence in any of a variety of ways, depending on the specifics of the controller strategy. For example, when generating the output sequence, the system may first generate corresponding hyper-parameter values for the sub-neural networks and then generate corresponding hardware parameter values for the hardware accelerator. That is, the output sequence may include values of respective superparameters of the sub-neural network at each of a first plurality of time steps and values of respective hardware parameters of the hardware accelerator at each of a second plurality of time steps, the second plurality of time steps being subsequent to a last one of the first plurality of time steps. As another example, the system may first generate corresponding hardware parameter values for the hardware accelerator and then generate corresponding hyper-parameter values for the sub-neural networks. As yet another example, the system may generate respective hyper-parameter values of the sub-neural networks and respective hardware parameter values of the hardware accelerator in an interleaved manner.
In some implementations, the controller policy may be implemented as a controller neural network. In some such embodiments, the neural network may be a recurrent neural network comprising one or more recurrent neural network layers configured to receive, for each time step, as input, a value of a super parameter (or hardware parameter) corresponding to a previous time step in a given output sequence, and process the input to update the current hidden state of the recurrent neural network. For example, the loop layer in the controller neural network may be a Long Short Term Memory (LSTM) layer or a gated loop unit (GRU) layer.
Thus, to generate a value of a super parameter (or hardware parameter) for a given time step in the output sequence, the system provides the value of the super parameter (or hardware parameter) at a previous time step in the output sequence as an input to the controller neural network, and the controller neural network generates an output for that time step that defines a fractional distribution over possible values of the super parameter (or hardware parameter) at the time step. The system may generate the component profile by using an output layer of the controller neural network, which may be configured as a softmax layer. For the first time step in the output sequence, the system may instead provide a predetermined placeholder input because there is no previous time step. The system then samples from the possible values according to the fractional distribution to determine the value of the super parameter (or hardware parameter) at the time step in the output sequence. The possible values that a given hyper-parameter (or hardware parameter) may take are fixed prior to training, and the number of possible values may be different for different hyper-parameters (or hardware parameters).
Where a batch includes more than one output sequence (e.g., eight, sixteen, thirty-two, or sixty-four sequences), the sequences in the batch will typically be different even though they are each generated from the same controller parameter value, as the system samples from the fractional distribution in generating each hyper-parameter (or hardware parameter) value in the output sequence.
In some other embodiments, instead of being configured as a neural network, the controller policy may include a set of controller policy parameters that define respective probability distributions over possible values of the super-parameters (or hardware parameters) for each super-parameter of the neural network architecture (or hardware parameters of the hardware accelerator architecture). To generate one or more output sequences of a batch of each of the respective architectures defining (i) the sub-neural network and (ii) the hardware accelerator, the system then resamples from the possible values according to the probability distribution to determine respective values of the super-parameters (or hardware parameters) to be included in the output sequences.
For each output sequence in the batch, the system trains a respective instance of the sub-neural network having an architecture defined by the output sequence to perform a particular machine learning task (step 204). That is, for each output sequence in the batch, the system instantiates a neural network having an architecture defined by the output sequence and trains the instances on the received training data to perform a particular machine learning task using conventional machine learning training techniques (e.g., random gradient descent with back propagation or back propagation through time) appropriate for that task. In some embodiments, the system parallelizes training of the sub-neural network to reduce the overall training time of the controller neural network. The system may train each sub-neural network for a specified amount of time or a specified number of training iterations.
For each output sequence in the batch, the system evaluates the network performance of the training instance of the sub-neural network for the particular machine learning task to determine a network performance index of the training instance of the sub-neural network for the particular machine learning task (step 206). For example, the performance index may be the accuracy of the training examples on a verified set of measurements by an appropriate accuracy metric. For example, when the output is a sequence, the accuracy may be a confusion metric, or when the task is a categorization task, the accuracy may be a cross entropy error rate. As another example, the performance index may be an average or maximum of the instance accuracy of each of the last two, five, or ten rounds of instance training.
In addition, for each output sequence in the batch, the system evaluates the accelerator performance of the corresponding instance of the hardware accelerator having the architecture defined by the output sequence to determine an accelerator performance index for the instance of the hardware accelerator (step 208). Performance metrics measure performance of instances of hardware accelerators on operations supporting training instances of a sub-neural network having an architecture defined by an output sequence for a particular machine learning task.
In some embodiments, to evaluate hardware accelerator performance, various tools suitable for evaluating hardware design alternatives may be used. One example of such a tool is a cycle accurate performance simulator. The system may use the cycle accurate performance simulator and, for example, simulation data specifying (i) a respective architecture of the sub-neural network and (ii) a respective architecture of the hardware accelerator defined by the output sequence, to determine an estimated time delay (e.g., in milliseconds) of the neural network on performing a particular machine learning task when deployed on a (simulated) instance of the hardware accelerator.
Another example of such a tool is an analytical area estimator. The system may determine an estimated area (e.g., in square millimeters) of an instance of the hardware accelerator using an analytical area estimator and, for example, simulation data specifying a corresponding architecture of the hardware accelerator defined by a batch of output sequences.
In some other implementations, various machine learning based techniques may alternatively be used to determine the accelerator performance index. Unlike expensive simulators, which typically require up to an hour or more to evaluate the performance of a single hardware accelerator with the proposed hardware architecture, machine learning-based techniques (such as neural networks) are typically much faster and more resource efficient when used to determine performance metrics.
For example, the system may use a neural network (e.g., a feed-forward neural network) configured to receive as input data specifying a respective architecture of the hardware accelerator and, in some cases, data specifying a respective architecture of the sub-neural network, and process the input according to a current value of a parameter of the neural network to generate as output an area prediction of the hardware accelerator. As another example, the system may use another neural network to generate a prediction of model accuracy of the neural network, or to generate a prediction of latency of the neural network deployed on a hardware accelerator. To ensure that the neural network can effectively predict performance metrics, the neural network can be trained using supervised training techniques on the marker training data generated using the simulator described above.
The system adjusts the controller policy using (i) the network performance index of the training instance of the sub-neural network and (ii) the accelerator performance index of the instance of the hardware accelerator (step 210).
In general, the system adjusts the controller policy in a manner that may encourage the controller policy to generate an output sequence that results in both the sub-neural network and the hardware accelerator architecture having increased performance metrics. However, in some cases, depending on the actual progress of the federated search taking into account the search targets, the system may adjust the immediate focus of the federated search, for example by fixing the network performance index of the training instance of the child neural network over a particular neural network task, and adjusting the controller policy using only the accelerator performance index of the determined instance of the hardware accelerator.
In some embodiments in which the controller policy is implemented as a controller neural network configured as a recurrent neural network, the system adjusts the current controller parameter values by training the controller neural network using reinforcement learning techniques. More specifically, the system trains the controller neural network to generate an output sequence that maximizes the received rewards determined based on the network performance metrics of the trained neural network instances and the accelerator performance metrics of the hardware accelerators.
Specifically, the reward for a given output sequence is a function of the network performance index and the accelerator performance index. For example, the rewards may be calculated by a combination (e.g., product) of different rewards terms depending on neural network accuracy, runtime delay, and hardware accelerator area, respectively. That is, the system trains the controller neural network to generate an output sequence that maximizes:
wherein w is 0 、w 1 Is a weight factor:
and wherein α is a superparameter defining a neural network architecture, and h is a hardware parameter defining a hardware accelerator architecture, and T latency Is the target runtime delay of the trained sub-neural network in executing the task, and T area Is the target hardware accelerator area, both of which may be specified in the search target data.
In this example, during the search, the system may apply a soft constraint on latency, area, or both, such as by setting p and q to both have non-zero values, such as-0.071. Conversely, to impose a hard constraint, e.g., to impose a hard constraint on the latency, the system may set p=0 and q= -1, where the system primarily uses accuracy as the search target as long as the estimated latency meets (e.g., is not greater than) the target latency, and the reward is only significantly reduced if the latency constraint is violated.
In some of these embodiments, the system trains the controller neural network, i.e., determines training values for the controller network parameters from initial values of the controller network parameters, to maximize the expected rewards using a strategic gradient technique. For example, the policy gradient technique may be an enhancement technique or a near-end policy optimization (PPO) technique.
In some other embodiments where the controller policy includes a set of controller policy parameters that define respective probability distributions over possible values of the superparameters (or hardware parameters of the hardware accelerator architecture) for each superparameter of the neural network architecture, the system may similarly adjust the current values of the set of controller policy parameters by using a policy gradient technique.
FIG. 3 is a flow chart of an example process 300 for selecting an architecture of a neural network and an architecture of a hardware accelerator by jointly updating a set of controller policy parameters and a set of shared parameters. For convenience, process 300 will be described as being performed by a system of one or more computers located in one or more locations. For example, a suitably programmed system (e.g., the neural architecture and hardware architecture search system 100 of fig. 1) may perform the process 300.
The system receives data specifying one or more target hardware constraints for a hardware accelerator on which a neural network for performing a particular machine learning task is to be deployed (step 302). For example, the received data may specify a target area or power consumption of the hardware accelerator. As another example, the received data may specify a target latency for a particular machine learning task to be performed by the neural network when deployed on the hardware accelerator. For example, the target latency may be a measure of the time required to process a single input or a batch of multiple inputs through a trained neural network when deployed on a hardware accelerator.
The system receives training data and validation data for a particular machine learning task (step 304).
The system then performs the following steps 306 through 310 to select a network architecture of a neural network for performing a particular machine learning task from the candidate network architecture space using the training data and the validation data. In addition, the system performs the following steps 306 to 310 to select, from the candidate hardware architecture space, the hardware architecture of the hardware accelerator on which the neural network that performs the particular machine learning task is to be deployed.
As described above, both the candidate network architecture space and the candidate hardware architecture space may be part of a larger federated search space. Each candidate neural network architecture in space is defined by a corresponding set of decision values that includes a respective decision value for each of the first plurality of classification decisions. Similarly, each candidate hardware accelerator architecture in space is defined by a corresponding set of decision values that includes a respective decision value for each of the second plurality of classification decisions.
In the example of fig. 3, the system uses a controller policy that in turn includes a plurality of controller policy parameters to generate a respective probability distribution for each of the first and second pluralities of classification decisions based on the current values of the controller policy parameters. In particular, for each classification decision, the controller policy parameters may include a respective parameter for each possible decision value for that decision. The system may generate a probability distribution for the given classification decision by applying a softmax function to the current values of the respective parameters for each of the possible decision values for the given decision. For example, to select a respective decision value for each of the first and second plurality of classification decisions, the system may sample the decision value from a probability distribution of classification decisions for each classification decision.
To select an architecture, the system jointly updates (i) a set of controller policy parameters that define, for each of a first plurality of classification decisions and a second plurality of classification decisions, a respective probability distribution over the decision values of the classification decisions, and (ii) a shared set of parameters (step 306). In other words, the system repeatedly performs the following steps 308 and 310 in each iteration of the joint update. Each iteration of steps 306 through 310 may begin with the values of the shared set of model parameters determined in the previous iteration.
Generally, during joint updating, the system may update a set of controller policy parameters through reinforcement learning to maximize a reward function of candidate neural network architectures and hardware accelerator architectures defined by a set of decision values sampled from probability distributions generated using the controller policy parameters (step 308).
For example, the reward function may include a quality term that measures (i) an estimated quality of the candidate hardware accelerator architecture and (ii) an estimated quality of the candidate neural network architecture, and a latency (or power consumption) term that is based on a ratio between an estimated latency (or estimated power consumption) of the candidate network architecture and a target latency (or target power consumption).
The system may use the validation data to determine an estimated quality of a particular machine learning task of a neural network having a candidate architecture with a subset of a shared set of model parameters defined by selected decision values of the first plurality of classification decisions. In particular, the system determines an estimated quality from the current values of the shared set of model parameter sets.
As a particular example, the system may determine the estimated quality as the quality of the neural network with the candidate architecture over a batch of multiple verification examples from the verification data. That is, the system may process each validation input in the batch using the neural network with the candidate architecture and according to the current values of the corresponding subset of the shared set of model parameters to generate a prediction output, and then calculate an accuracy or other suitable performance metric of the machine learning task of the prediction output using the target output of the validation input.
The system may determine an estimated quality of a candidate hardware architecture having a subset of the shared set of model parameters defined by the selected decision values of the second plurality of classification decisions using an appropriate computer architecture modeling tool or technique, such as an area simulator.
The system may determine an estimated time delay (or power consumption) in performing a particular machine learning task for a neural network having a candidate architecture with a subset of a shared set of model parameters defined by selected decision values of the classification decisions using the validation data.
For example, when a neural network having a candidate neural network architecture is deployed on an instance of a hardware accelerator having a candidate hardware accelerator architecture, the system determines a latency for each of a batch of verification examples. That is, the system may process each validation input in the lot using a neural network with a candidate architecture deployed on an instance of the hardware accelerator to generate a prediction output, and then measure the latency of processing the lot.
As another example, the system may use a computer architecture simulator that simulates an instance of a hardware accelerator having a candidate hardware accelerator architecture to simulate the effects of deploying a neural network on the hardware accelerator to determine an estimated latency or estimated power consumption.
As yet another example, the system may use a time delay modeling neural network and an area modeling neural network to determine predictions of time delay and area, respectively. The neural network may be trained on the tag training data generated using a computer architecture simulator.
The system then determines an update to the controller policy parameters via reinforcement learning that improves the reward function based on the estimated quality of the candidate hardware accelerator architecture, the estimated quality of the candidate neural network architecture, and the estimated time delay. In particular, the system may perform an update step of a strategy gradient reinforcement learning algorithm (e.g., an enhancement algorithm) on the calculated rewards (i.e., the output of the rewards function) to obtain an estimated quality and an estimated time delay to determine an update to the controller strategy parameters.
During the joint update, the system also updates a shared set of model parameters to optimize an objective function that measures performance of a particular machine learning task of the candidate neural network architecture defined by a set of decision values that are sampled from a probability distribution generated using the controller policy parameters of the first plurality of classification decisions (step 310).
For example, the system may sample a batch of training examples from the training data and perform training steps on the sampled batch using an appropriate deep learning algorithm (e.g., random gradient descent) to calculate gradient updates, i.e., calculate gradients of the objective function relative to a subset of model parameters, and then apply the gradient updates to the current values of the subset.
After the joint update, the system selects a candidate neural network architecture as the neural network architecture of the neural network for performing the particular machine learning task, the candidate neural network architecture defined by a respective particular decision value for each of the first plurality of classification decisions (step 312).
The system selects a candidate hardware accelerator architecture as the hardware accelerator architecture of the hardware accelerator on which the neural network is to be deployed, the candidate hardware accelerator architecture defined by a respective particular decision value for each of the second plurality of classification decisions (step 314).
For example, by selecting, for each of the first or second plurality of classification decisions, the decision value having the highest probability in the probability distribution of classification decisions (or equivalently, the decision value having the highest corresponding parameter value) as the particular decision value, the system may select a candidate neural network or hardware accelerator architecture.
The term "configuration" is used in this specification in connection with systems and computer program components. A system of one or more computers being configured to perform a particular operation or action means that the system has installed thereon software, firmware, hardware, or a combination thereof that, in operation, causes the system to perform the operation or action. The one or more computer programs being configured to perform a particular operation or action means that the one or more programs include instructions that, when executed by the data processing apparatus, cause the apparatus to perform the operation or action.
Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, in tangibly embodied computer software or firmware, in computer hardware (including the structures disclosed in this specification and their structural equivalents), or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a tangible, non-transitory storage medium for execution by, or to control the operation of, data processing apparatus. The computer storage medium may be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, or a combination of one or more of them. Alternatively or additionally, the program instructions may be encoded on artificially generated propagated signals (e.g., machine-generated electrical, optical, or electromagnetic signals) that are generated to encode information for transmission to suitable receiver apparatus for execution by data processing apparatus.
The term "data processing apparatus" refers to data processing hardware and encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers. The apparatus may also be or further comprise dedicated logic circuitry, such as an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit). In addition to hardware, the apparatus may optionally include code that creates an execution environment for the computer program, such as code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
A computer program (which may also be referred to or described as a program, software application, module, software module, script, or code) can be written in any form of programming language, including compiled or interpreted languages, or declarative languages or procedural languages; and it may be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a data communication network.
In this specification, the term "database" is used broadly to refer to any collection of data: the data need not be structured in any particular way or at all, and it may be stored on a storage device in one or more locations. Thus, for example, an index database may include multiple data sets, each of which may be organized and accessed in a different manner.
Similarly, in this specification, the term "engine" is used broadly to refer to a software-based system, subsystem, or process that is programmed to perform one or more specific functions. Typically, the engine will be implemented as one or more software modules or components installed on one or more computers in one or more locations. In some cases, one or more computers will be dedicated to a particular engine; in other cases, multiple engines may be installed and run on the same computer or computers.
The processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, or in combination with, special purpose logic circuitry (e.g., an FPGA or ASIC) or one or more programmed computers.
A computer suitable for executing a computer program may be based on a general-purpose or special-purpose microprocessor or both or any other kind of central processing unit. Typically, the central processing unit will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a central processing unit for executing or carrying out the instructions and one or more memory devices for storing instructions and data. The central processing unit and the memory may be supplemented by, or incorporated in, special purpose logic circuitry. Typically, a computer will also include one or more mass storage devices (e.g., magnetic, magneto-optical, or optical disks) for storing data, or a computer is operably coupled to receive data from or transmit data to the mass storage device, or both. However, a computer need not have such a device. Moreover, a computer may be embedded in another device, such as a mobile phone, a Personal Digital Assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a Universal Serial Bus (USB) flash drive), to name a few.
Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices (e.g., EPROM, EEPROM, and flash memory devices); magnetic disks (e.g., internal hard disks or removable disks); magneto-optical disk; CD ROM disks and DVD-ROM disks.
To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having: a display device for displaying information to a user, such as a CRT (cathode ray tube) or LCD (liquid crystal display) monitor; and a keyboard and pointing device, such as a mouse or trackball, by which a user can provide input to the computer. Other kinds of devices may also be used to provide for interaction with a user; for example, feedback provided to the user may be any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback; and input from the user may be received in any form, including acoustic input, speech input, or tactile input. In addition, the computer may send and receive documents to and from the device used by the user; for example, by sending a web page to a web browser on the user's device in response to a request received from the web browser. Moreover, the computer may interact with the user by sending text messages or other forms of messages to a personal device (e.g., a smart phone) running a messaging application and receiving a response message from the user in return.
The data processing apparatus for implementing the machine learning model may also include, for example, a dedicated hardware accelerator unit for handling the usual computationally intensive portions of machine learning training or production (i.e., inference, workload).
The machine learning model may be implemented and deployed using a machine learning framework, such as a TensorFlow framework, microsoft cognitive toolkit framework, apache Singa framework, or Apache MXNet framework.
Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front-end component (e.g., a client computer having a graphical user interface, a web browser, or an application through which a user can interact with an implementation of the subject matter described in this specification), or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a Local Area Network (LAN) and a Wide Area Network (WAN), such as the internet.
The computing system may include clients and servers. The client and server are typically remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, the server transmits data (e.g., HTML pages) to the user device, e.g., to display data to and receive user input from a user interacting with the device, which acts as a client. Data generated at the user device (e.g., results of user interactions) may be received at the server from the device.
While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any invention or of what may be claimed, but rather as descriptions of features that may be specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, although operations are depicted in the drawings and described in the claims in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous. Moreover, the separation of various system modules and components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
Specific embodiments of the present subject matter have been described. Other embodiments are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example, the processes depicted in the accompanying drawings do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous.
Claims (28)
1. A method, comprising:
generating a batch of one or more output sequences using a controller policy, each output sequence in the batch defining (i) a respective architecture of a sub-neural network configured to perform a particular neural network task and (ii) a respective architecture of a hardware accelerator on which a training instance of the sub-neural network is to be implemented;
for each output sequence in the batch:
training respective instances of the sub-neural network having the architecture defined by the output sequence to perform the particular neural network task;
evaluating the network performance of the training instance of the sub-neural network for the particular neural network task to determine a network performance indicator of the training instance of the sub-neural network for the particular neural network task; and
evaluating accelerator performance of a respective instance of the hardware accelerator having the architecture defined by the output sequence to determine an accelerator performance index for the instance of the hardware accelerator to support performance of the training instance of the sub-neural network having the architecture defined by the output sequence for the particular neural network task; and
The controller policy is adjusted using (i) the network performance index of the training instance of the sub-neural network and (ii) the accelerator performance index of the instance of the hardware accelerator.
2. The method according to claim 1, wherein:
the controller policy is implemented using a controller neural network having a plurality of controller network parameters; and is also provided with
Adjusting the controller policy includes adjusting current values of the plurality of controller network parameters.
3. The method of any of the preceding claims when also dependent on claim 2, wherein adjusting the controller policy using (i) the network performance index of a training instance of the sub-neural network and (ii) the accelerator performance index of an instance of the hardware accelerator comprises:
the controller neural network is trained using reinforcement learning techniques to generate an output sequence that results in the sub-neural network having an increased network performance index and the hardware accelerator having an increased accelerator performance index.
4. A method according to any one of claims 3, wherein:
the reinforcement learning technique is a near-end policy optimization (PPO) technique.
5. The method of any of claims 1-4, wherein each output sequence comprises a value of a respective hyper-parameter of the sub-neural network at each time step of a first plurality of time steps.
6. The method of any of claims 1-5, wherein each output sequence includes a value of a respective hardware parameter of the hardware accelerator at each time step of a second plurality of time steps.
7. The method of any of the preceding claims when also dependent on claim 2, wherein the controller neural network is a recurrent neural network comprising:
one or more recurrent neural network layers configured to, at each time step, for a given output sequence:
receiving as input a value of a super parameter or a hardware parameter at a previous time step in the given output sequence and processing the input to update a current hidden state of the recurrent neural network; and
a respective output layer for each time step, wherein each output layer is configured to, for the given output sequence:
an output layer input is received that includes the updated hidden state at the time step and an output of the time step is generated that defines a fractional distribution over possible values of the super parameter or the hardware parameter at the time step.
8. The method of any of the preceding claims when also dependent on claim 2, wherein generating one or more output sequences of a batch using the controller policy comprises, for each output sequence in the batch and for each time step of the plurality of time steps:
providing as input to the controller neural network the value of the super-parameter or hardware parameter at a previous time step in the output sequence to generate an output for the time step, the output defining a fractional distribution over possible values of the super-parameter or hardware parameter at the time step; and
sampling from the possible values according to the score distribution to determine the value of the super parameter or hardware parameter at the time step in the output sequence.
9. The method of any one of claims 1 to 8, wherein:
the specific neural network task is an object classification and/or detection task, an object pose estimation task or a semantic segmentation task;
the sub-neural network is a convolutional neural network comprising one or more depth-wise separable convolutional layers; and
the super-parameters include super-parameters of each depth-wise separable convolutional layer in the sub-neural network.
10. The method of any one of claims 1 to 9, wherein:
the sub-neural network comprises one or more reverse residual layers and one or more linear bottleneck layers; and
the super parameters include super parameters of each reverse residual layer and linear bottleneck layer in the sub-neural network.
11. The method of any of claims 1 to 10, wherein the respective hardware characteristics of the hardware accelerator comprise one or more of:
the bandwidth of the hardware accelerator,
The number of processing elements included in the hardware accelerator,
Layout of the processing elements on the hardware accelerator,
Number of Single Instruction Multiple Data (SIMD) multiply-accumulate (MAC) in each processing element,
The number of computation channels in each processing element,
The size of the shared memory in each processing element, or
The size of the register file in each processing element.
12. The method of any of claims 1 to 11, wherein the accelerator performance metrics of the instance of the hardware accelerator for supporting performance of the training instance of the sub-neural network include one or more of:
An estimated area of the hardware accelerator,
Estimated power consumption of the hardware accelerator, or
The neural network, when deployed on the hardware accelerator, estimates latency for performing the particular neural network task.
13. The method of any of the preceding claims when also dependent on claim 12, wherein evaluating accelerator performance of respective instances of the hardware accelerator having an architecture defined by the output sequence to determine an accelerator performance index for the instances of the hardware accelerator to support performance of the training instances of the sub-neural network having the architecture defined by the output sequence for the particular neural network task comprises:
the estimated latency of the neural network for performing a particular neural network task when deployed on the hardware accelerator is determined from (i) the respective architecture of the sub-neural network and (ii) the respective architecture of the hardware accelerator defined by the batch of output sequences based on using a cycle accuracy performance simulator.
14. The method of any of the preceding claims when also dependent on claim 12, wherein evaluating accelerator performance of respective instances of the hardware accelerator having an architecture defined by the output sequence to determine an accelerator performance index for the instances of the hardware accelerator to support performance of the training instances of the sub-neural network having the architecture defined by the output sequence for the particular neural network task comprises:
The estimated area of the hardware accelerator is determined from a respective architecture of the hardware accelerator defined by the output sequence of the batch based on using an analytical area estimator.
15. The method of any of the preceding claims when also dependent on claim 12, wherein adjusting the current value of the controller network parameter of the controller neural network using (i) the network performance index of a training instance of the sub-neural network and (ii) the accelerator performance index of an instance of the hardware accelerator comprises:
assigning different weights to the one or more accelerator performance indicators; and
and adjusting the current value of the controller network parameter of the controller neural network according to the different weights.
16. The method of any of the preceding claims when also dependent on claim 2, wherein adjusting the controller policy using (i) the network performance index of a training instance of the sub-neural network and (ii) the accelerator performance index of an instance of the hardware accelerator further comprises:
the network performance index of the training instance of the sub-neural network for the particular neural network task is fixed and the current values of controller network parameters of the controller neural network are adjusted using only the determined accelerator performance index of the instance of the hardware accelerator.
17. The method of any one of claims 1 to 16, further comprising:
a final output sequence defining a final architecture of the sub-neural network is generated from the adjusted values of the controller network parameters.
18. The method of claim 17, further comprising: the particular neural network task is performed on the received network input by processing the received network input using a sub-neural network having the final architecture.
19. A method, comprising:
receiving data specifying one or more target hardware constraints for a hardware accelerator on which a neural network for performing a particular machine learning task is to be deployed;
receiving training data and verification data of the specific machine learning task; and
selecting a network architecture of the neural network for performing the particular machine learning task from a candidate network architecture space using the training data and the validation data,
selecting a hardware architecture of the hardware accelerator from a candidate hardware architecture space, wherein the neural network performing the particular machine learning task is to be deployed on the hardware accelerator,
Wherein each candidate network architecture in the space is defined by a corresponding set of decision values comprising a respective decision value for each of the first plurality of classification decisions,
wherein each candidate hardware architecture in the space is defined by a corresponding set of decision values for a respective decision value for each of the second plurality of classification decisions, and
wherein the selecting comprises:
jointly updating (i) a set of controller parameters defining, for each of the first and second pluralities of classification decisions, a respective probability distribution over the decision values of that classification decision, and (ii) a shared set of parameters, wherein:
updating the set of controller policy parameters includes: updating the set of controller parameters by reinforcement learning to maximize a reward function that measures (i) an estimated quality of a candidate hardware architecture and (ii) an estimated quality of a candidate network architecture defined by a set of decision values sampled from a probability distribution generated using the controller policy parameters, and
updating the shared set of model parameters includes: updating the shared set of model parameters to optimize an objective function that measures performance of the candidate network architecture for the particular machine learning task defined by the set of decision values sampled from the probability distribution generated using the controller policy;
After the joint update, selecting a candidate network architecture as the network architecture of the neural network, the candidate network architecture defined by a respective particular decision value for each of the first plurality of classification decisions; and
candidate hardware architectures defined by the respective particular decision values of each of the second plurality of classification decisions are selected as the hardware architecture of the hardware accelerator.
20. The method of claim 19, further comprising: data is received specifying a target latency for the neural network to perform the particular machine learning task when deployed on the hardware accelerator.
21. The method of any of claims 19 to 20, wherein the reward function comprises measuring (i) the estimated quality of the candidate hardware architecture and (ii) a quality term of the estimated quality of the candidate network architecture, and a latency term based on a ratio between an estimated latency of the candidate architecture and the target latency.
22. The method of any of claims 19 to 21, wherein the joint update comprises repeatedly performing operations comprising:
Using the validation data, an estimated quality of a neural network having a candidate architecture with a subset of the shared set of model parameters defined by the selected decision values of the first plurality of classification decisions is determined for the particular machine learning task, wherein the quality is estimated from current values of the subset of the shared set of model parameters defined by the selected decision values of the first plurality of classification decisions.
23. The method of any of claims 19 to 21, wherein the joint update comprises repeatedly performing operations comprising:
using the validation data and a latency simulator, determining an estimated latency of the neural network having the candidate network architecture with the subset of the shared set of model parameters defined by the selected decision values of the first plurality of classification decisions when performing the particular machine learning task, wherein the neural network is deployed on the hardware architecture having: the hardware architecture has the subset of the shared set of model parameters defined by the selected decision values of the second plurality of classification decisions.
24. The method of any of claims 19 to 21, wherein the joint update comprises repeatedly performing operations comprising:
an estimated quality of the candidate hardware architecture is determined using an area simulator, the candidate hardware architecture having the subset of the shared set of model parameters defined by the selected decision values of the second plurality of classification decisions.
25. The method of any of claims 23 to 24, wherein each of the delay simulator and the area simulator is a respective neural network trained on marker training data generated using an accelerator simulator.
26. A machine learning task specific hardware accelerator having an architecture defined by executing a process comprising respective operations according to any of the preceding claims.
27. A system comprising one or more computers and one or more storage devices storing instructions that, when executed by the one or more computers, are operable to cause the one or more computers to perform operations in accordance with the respective method of any preceding claim.
28. A computer storage medium encoded with instructions that, when executed by one or more computers, cause the one or more computers to perform the operations of the respective method of any preceding claim.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US202063087143P | 2020-10-02 | 2020-10-02 | |
US63/087,143 | 2020-10-02 | ||
PCT/US2021/053247 WO2022072890A1 (en) | 2020-10-02 | 2021-10-01 | Neural architecture and hardware accelerator search |
Publications (1)
Publication Number | Publication Date |
---|---|
CN116324807A true CN116324807A (en) | 2023-06-23 |
Family
ID=78617487
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202180063841.5A Pending CN116324807A (en) | 2020-10-02 | 2021-10-01 | Neural architecture and hardware accelerator search |
Country Status (4)
Country | Link |
---|---|
US (1) | US20240005129A1 (en) |
EP (1) | EP4189606A1 (en) |
CN (1) | CN116324807A (en) |
WO (1) | WO2022072890A1 (en) |
Families Citing this family (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11836595B1 (en) * | 2022-07-29 | 2023-12-05 | Lemon Inc. | Neural architecture search system using training based on a weight-related metric |
-
2021
- 2021-10-01 US US18/029,849 patent/US20240005129A1/en active Pending
- 2021-10-01 WO PCT/US2021/053247 patent/WO2022072890A1/en active Application Filing
- 2021-10-01 CN CN202180063841.5A patent/CN116324807A/en active Pending
- 2021-10-01 EP EP21806867.4A patent/EP4189606A1/en active Pending
Also Published As
Publication number | Publication date |
---|---|
EP4189606A1 (en) | 2023-06-07 |
WO2022072890A1 (en) | 2022-04-07 |
US20240005129A1 (en) | 2024-01-04 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US20230252327A1 (en) | Neural architecture search for convolutional neural networks | |
JP6790286B2 (en) | Device placement optimization using reinforcement learning | |
CN111602148B (en) | Regularized neural network architecture search | |
US20190130249A1 (en) | Sequence-to-sequence prediction using a neural network model | |
US10984319B2 (en) | Neural architecture search | |
US11347995B2 (en) | Neural architecture search with weight sharing | |
US20220092416A1 (en) | Neural architecture search through a graph search space | |
CN110663049A (en) | Neural network optimizer search | |
US20220383119A1 (en) | Granular neural network architecture search over low-level primitives | |
CN116324807A (en) | Neural architecture and hardware accelerator search | |
WO2023059811A1 (en) | Constrained device placement using neural networks | |
US20230063686A1 (en) | Fine-grained stochastic neural architecture search | |
WO2021159095A1 (en) | Population-based black-box optimization | |
US20230376664A1 (en) | Efficient hardware accelerator architecture exploration | |
US20240112027A1 (en) | Neural network architecture search over complex block architectures | |
CN117396890A (en) | Efficient hardware accelerator configuration exploration | |
WO2022167660A1 (en) | Generating differentiable order statistics using sorting networks | |
CN116888603A (en) | Generating neural network output by enriching potential embeddings using self-attention operations and cross-attention operations | |
CN115516466A (en) | Hyper-parametric neural network integration |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |