US8407226B1 - Collaborative filtering - Google Patents
Collaborative filtering Download PDFInfo
- Publication number
- US8407226B1 US8407226B1 US13/039,173 US201113039173A US8407226B1 US 8407226 B1 US8407226 B1 US 8407226B1 US 201113039173 A US201113039173 A US 201113039173A US 8407226 B1 US8407226 B1 US 8407226B1
- Authority
- US
- United States
- Prior art keywords
- user
- items
- machine
- users
- probability distribution
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
- 238000001914 filtration Methods 0.000 title abstract description 8
- 238000009826 distribution Methods 0.000 claims abstract description 153
- 238000000034 method Methods 0.000 claims abstract description 41
- 238000004590 computer program Methods 0.000 claims abstract description 15
- 238000007476 Maximum Likelihood Methods 0.000 claims abstract description 14
- 238000004422 calculation algorithm Methods 0.000 claims description 30
- 238000012549 training Methods 0.000 claims description 16
- 238000012545 processing Methods 0.000 claims description 11
- 230000006870 function Effects 0.000 description 20
- 230000008859 change Effects 0.000 description 13
- 230000008569 process Effects 0.000 description 7
- 238000004891 communication Methods 0.000 description 6
- 230000006399 behavior Effects 0.000 description 5
- 238000004364 calculation method Methods 0.000 description 4
- 238000010586 diagram Methods 0.000 description 4
- 230000003993 interaction Effects 0.000 description 4
- 230000004044 response Effects 0.000 description 4
- 230000000717 retained effect Effects 0.000 description 4
- 230000009471 action Effects 0.000 description 3
- 230000008901 benefit Effects 0.000 description 3
- 230000000644 propagated effect Effects 0.000 description 3
- 230000003068 static effect Effects 0.000 description 3
- 238000013461 design Methods 0.000 description 2
- 239000000203 mixture Substances 0.000 description 2
- 238000010606 normalization Methods 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 238000013515 script Methods 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 230000003442 weekly effect Effects 0.000 description 2
- 230000005540 biological transmission Effects 0.000 description 1
- 239000000872 buffer Substances 0.000 description 1
- 235000014510 cooky Nutrition 0.000 description 1
- 230000003247 decreasing effect Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000012544 monitoring process Methods 0.000 description 1
- 230000008520 organization Effects 0.000 description 1
- 238000005192 partition Methods 0.000 description 1
- 230000002085 persistent effect Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/953—Querying, e.g. by the use of web search engines
- G06F16/9536—Search customisation based on social or collaborative filtering
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/953—Querying, e.g. by the use of web search engines
- G06F16/9535—Search customisation based on user profiles and personalisation
Definitions
- This specification relates to collaborative filtering in recommender systems.
- Recommender systems attempt to predict which items from a set of items a user may be interested in. One or more of the predicted items are then presented as recommendations to the user. For example, a content provider can present recommendations automatically or can present recommendations in response to a user request (e.g., over the Web). The recommender system predicts the items using information about the user, for example, from a profile of the user or from items in which the user has previously expressed interest.
- Collaborative filtering is one technique used to predict items in which a user may be interested.
- Collaborative filtering models user preferences using community data.
- the community data includes, for example, interests and behaviors of a set of users.
- these models are built using static user and item sets. Periodically, the model is rebuilt to account for changes in the user set (e.g., addition or removal of users) and the item set (e.g., addition or removal of items).
- a computer-implemented method includes receiving a shard of data representing a subset of a set of entities and a subset of a set of items, generating an iteration of a maximum likelihood estimate of a probability distribution model of a relationship between the set of entities and the set of items, the probability distribution model comprising a probability distribution of the set of items with respect to latent variables and a probability distribution of the latent variables with respect to the set of users, and generating statistics from results from the generating step which are passed to different shards for use in a next iteration of the maximum likelihood estimate.
- Other embodiments of this aspect include corresponding systems, apparatus, computer readable media, and computer program products.
- a computer-implemented method includes identifying data, the data including a set of users that includes as members a plurality of users and for a set of items that includes as members a plurality of user selectable items, separating the plurality of users and the plurality of items into a plurality of respective user groups and item groups, assigning the each user group and item group to a machine of a collection of machines, where each machine of the collection of machines includes one or more user groups and one or more item groups, determining maximum likelihood estimates for a first probability distribution and a second probability distribution using parallelized calculations from each machine in the collection of machines, where the parallelized calculations calculate a variational probability distribution relating the user groups and item groups assigned to the respective machine, using the determined first probability distribution and second probability distribution to model an overall probability distribution relating users of the set of user and items of the set of items, and recommending items to users using the overall probability distribution.
- Other embodiments of this aspect include corresponding systems, apparatus, computer readable media, and computer program products.
- a probability distribution model can be built for large data sets using a distributed set of machines.
- a system can recommend items to a user when items in an item set change frequently.
- the recommended items can include items recently added to the item set without rebuilding the entire model.
- the system can recommend relevant items by discounting older items relative to newer items.
- FIG. 1 is a block diagram illustrating a probability distribution model relating items, users, and latent variables.
- FIG. 2 is a flowchart illustrating an example method 200 for executing the EM algorithm on multiple machines.
- FIG. 3 shows a block diagram 300 illustrating a collection of machines 301 for assigned groups.
- FIG. 4 is a flowchart illustrating an example method for recommending items to a user.
- FIG. 5 is a flowchart illustrating an example method for determining a second probability distribution.
- FIG. 6 is a table illustrating counts for items with respect to categories.
- FIG. 7 shows an example recommender system 700 .
- FIG. 1 is a block diagram illustrating a probability distribution model 100 relating items, users, and latent variables, for example, a probabilistic latent semantic indexing (“PLSI”) model.
- the probability distribution model 100 is used to perform collaborative filtering.
- the probability distribution model 100 models users and items as random variables, taking values from the space of all possible users and items respectively.
- the relationship between users and items is learned by modeling a joint distribution of users and items as a mixture distribution. In some implementations, other types of sets are used.
- the probability distribution model 100 can model entities and items as random variables.
- FIG. 1 shows a user set 102 and an item set 104 .
- the item set 104 can include, for example, a set of documents (e.g., news stories), videos, audio files, web pages, and commercial items (e.g., books or other items for sale).
- the user set 102 and the item set 104 can be very large.
- the item set 104 can include a number of individual news stories collected and updated from a variety of news sources.
- the number of distinct news stories in the item set 104 can number in the millions.
- the number of distinct users who can select the news stories can also number in the millions.
- the membership of the user set 102 can change. For example, each individual user can be associated with a user profile. Membership of the user set 102 can change as user profiles are added or deleted. Additionally, the membership of the item set 104 can also change. New items can be added and old items removed. For example, for an item set 104 including news stories, new items can be added to the item set frequently (e.g., every few minutes).
- the recommender system identifies an overall probability distribution relating the items given users, p(s
- the probability distribution can be used to identify a probability that a particular item of the item set 104 will be of interest to a particular user of the user set 102 .
- FIG. 1 also shows a set of categories 106 .
- the number of member categories in the category set 106 is substantially less than the number of users and items in the user set 102 and item set 104 , respectively.
- the number of categories can be on the order of thousands relative to millions of items.
- the members of the set of categories can be explicitly defined or they can be derived as latent variables (also called hidden variables).
- a latent variable is a variable that is not directly observable.
- the latent variables are instead inferred from observable variables. In particular, they are inferred from the user set and the item set. For example, the relationship between users and items can be captured using the latent variables.
- the latent variables can be though of as representing user communities (e.g., like-minded users) and item communities (e.g., genres).
- the latent variable has states z (e.g., categories) for user-item pairs, so that users and items are conditionally independent.
- the particular state of the latent variable Z for a particular user item pair (u, s), models a latent cause for selecting s.
- Each state z offers an explanation for a relationship that is not directly observable (e.g., a user selected an item because of z).
- the number of states z is assumed to be finite and of size j.
- latent variables reduce the dimensionality of data.
- large sets of observable variables e.g., users and items
- u) is equal to just the non-conditional probability of the item, p(s).
- latent variables can be increased until the probability distribution model is able to represent any probability mass function over (u, s) pairs. Additional description of latent variables and latent semantic models generally is found in Hoffmann, Latent Semantic Models for Collaborative Filtering , ACM Transactions on Information Systems, 2004, Vol. 22(1), pp 89-115, which is incorporated by reference.
- a first probability distribution 108 describes the probability of categories given users, p(z
- the categories cluster groups of users and the first probability distribution represents the probability that a particular category has particular users as members.
- a user can be a member of more than one category.
- the categories can represent different user communities.
- the user community membership can be inferred from user interests.
- User interests can be identified in a variety of ways.
- users can specify one or more area of interest (e.g., for particular items or types of items).
- a user can indicate interest in particular genres (e.g., as part of a user profile).
- users can be grouped with other users as members of categories representing the users' interests.
- the system infers category membership based on user behavior including the user's selection history (e.g., click history).
- the user's history of selecting particular items can be indicative of particular categories.
- the user's past news story selections can be used to identify news categories (e.g., top stories, national news, and business news) to associate with the user.
- a second probability distribution 110 describes the probability of items with respect to categories, p(s
- the second probability distribution identifies the probability that a particular item will be selected by a user in a particular category.
- An item may be more likely to be selected for users belonging to one category relative to another. For example, the selection of an action movie item is more likely given the action category than the drama category. Selecting the item can include clicking on an item to view (e.g., a news story) as well as selecting an item for purchase (e.g., a book or an audio file).
- the first probability distribution 108 and the second probability distribution 110 are combined in the probability distribution model 100 to determine an overall probability distribution, p(s
- the overall probability distribution is intended to indicate the probability of a given user selecting a particular item.
- the overall probability distribution can be used to recommend items to particular users.
- u) can be describes by the equation:
- the probability distribution model 100 uses the latent variable Z to make users and items conditionally independent.
- the probability distribution model 100 can also represent a generative model. In the generative model, state z of the latent variable Z is chosen for an arbitrary user, u, based on the first probability distribution, p(z
- the probability distribution model is learned using training data to estimate the first and second probability distributions such that the product of the conditional likelihood over all data points is maximized.
- the training data includes historical event data representing observed (user, item) pairs (e.g., pairs identifying a particular item selected by a particular user).
- the probability distributions are estimated to minimize the empirical logarithmic loss, described by:
- L( ⁇ ) is the logarithmic loss
- T is the size of the training data.
- a low logarithmic loss indicates a high confidence in the accuracy of the estimated probability distributions.
- the logarithmic loss can be minimized using an expectation-maximization (“EM”) algorithm.
- the EM algorithm is used to calculate maximum likelihood estimates of parameters in probabilistic models using latent variables.
- the EM algorithm is a two-step process. An expectation step calculates an expectation of the likelihood by including the latent variables as if they were observed. A maximization step calculates the maximum likelihood estimates by maximizing the expected likelihood calculated in the expectation step. The process iterates between expectation and maximization steps where parameters calculated in the maximization step are used for a next expectation step.
- the EM algorithm describes a class of related algorithms: the expectation and maximization steps provide a roadmap for developing specific EM algorithms. In some implementations, other techniques are used to find maximum likelihood estimates other than the EM algorithm, for example, gradient descent or conjugate gradient techniques.
- the EM algorithm first specifies a complete model that treats the latent variables as if they were actually observed. Thus, for every observed user item pair, (u, s), (e.g., from the training data) there is an assumed observed triplet, (u, s, z).
- the states z of the latent variable Z are not known. Therefore, a variational probability distribution, q(z; u, s) is introduced for every observed user item pair.
- the Q distribution models the latent variable states z given the current parameters ⁇ . Consequently, q(z; u, s) denotes the probability the selection of an item by a user is attributed to the user being a member of a category z (also referred to as the co-occurrence of (u, s)).
- the Q variables are calculated for given parameters.
- the expectation step calculates the optimal Q (denoted by q*) for given parameters ⁇ circumflex over ( ⁇ ) ⁇ .
- the Q variables are calculated as the posterior probabilities (the posterior probability is the conditional probability assigned to a random event in view of observed evidence) of the latent variables as shown by:
- the maximization step uses the Q function to compute p(z
- z), are used to calculate the overall probability distribution, p(s
- these values are also plugged back into the equation for q* as the “hat” probability distributions to begin a next iteration of the EM algorithm.
- the iterations can continue, for example, until the logarithmic loss substantially converges. In other implementations, a specified number of iterations are executed. Alternatively, the iterations continue until the change in the logarithmic loss is less than a specified threshold value. Consequently, values for first probability distribution, p(s
- the EM algorithm is executed with all model data in memory.
- very large data sets e.g., very large user and item sets
- using a single machine becomes computationally infeasible. Therefore, a parallelization process can be used to assign portions of the EM algorithm calculations to different machines.
- FIG. 2 is a flowchart illustrating an example method 200 for executing the EM algorithm on multiple machines.
- the method 200 will be described with reference to a computer system that performs the method (e.g., a recommender system).
- the system identifies training data of size T (step 202 ).
- the training data can include a user set, and item set, and event data of observed user-item pairs (u, s).
- the event data can be click data of user selections of particular items.
- the event data includes historical data of the selection of items by members of the user set over a specified period of time (e.g., a period of days, weeks, or months).
- the system separates the users and items into groups (step 204 ).
- the user set and the item set are each divided, or sharded, into a specified number of groups.
- Each user group includes a specified number of users from the user set.
- Each item group includes a specified number of items from the item set.
- each user group includes a substantially equal number of users.
- each item group includes a substantially equal number of items.
- the system assigns the respective user and item groups to a collection of machines (step 206 ). Each machine receives a user group and an item group. Additionally, each machine receives the event data corresponding to the users and item pairs from the assigned groups. For example, if a machine is assigned a user group including users 1 - 100 and an item group including items 201 - 300 , the machine also receives all event data where users 1 - 100 selected items 201 - 300 . Similarly, if another machine is assigned a user group including users 201 - 300 and an item group including items 1 - 100 , the machine also receives all event date where users 201 - 300 selected items 1 - 100 .
- FIG. 3 shows a block diagram 300 illustrating a collection of machines 301 for assigned groups.
- the collection of machines 301 includes, for example, a collection of individual computers, processors, or other device that can perform calculations.
- the collection of machines 301 includes a grid of R ⁇ L machines 306 a - 306 l .
- Each machine is assigned a user group from the user groups 302 and an item group from the item groups 306 .
- machine 306 g receives user group U 2 and item group S 3 along with event data relating selections of the users of user group U 2 of items in item group S 3 .
- the EM algorithm is configured for parallelization (step 208 ).
- the Q function described above is rewritten as follows:
- q*(z; u, s; ⁇ circumflex over ( ⁇ ) ⁇ ) can be calculated using the N(z, s), N(z), and ⁇ circumflex over (p) ⁇ (z
- MapReduce describes both a programming model and an implementation of the model for processing and generating large data sets.
- the model and its library implementation will both be referred to as MapReduce.
- MapReduce programmers specify a map function that processes input (key, value) pairs to generate a set of intermediate (key, value) pairs, and a reduce function that merges all intermediate values associated with the same intermediate key.
- Programs written in this functional style can automatically be parallelized and executed on a large cluster of commodity computers.
- the runtime system or framework can be implemented to partition the input data, schedule the program's execution across a set of machines, handle machine failures, and manage the required inter-machine communication.
- a MapReduce computation takes a set of input (key, value) pairs, and produces a set of output (key, value) pairs.
- the user expresses the computation as two functions: Map and Reduce.
- Map written, e.g., by a programmer, takes an input (key, value) pair and produces a set of intermediate (key, value) pairs.
- the MapReduce library groups together all intermediate values associated with the same intermediate key I and passes them to the Reduce function.
- the Reduce function also written, e.g., by a programmer, accepts an intermediate key I and a set of values for that key. It merges together these values to form a possibly smaller set of values. Typically just zero or one output value is produced for each Reduce invocation.
- the intermediate values are supplied to the user's reduce function through an iterator. In this way lists of values that are too large to fit in memory can be handled. Additional details of MapReduce are described below.
- the (i, j)th machine of the collection of machines loads conditional probability distributions and statistics corresponding to the users in the ith shard and items in the jth shard, respectively.
- each individual machine only need load a fraction of the user and item statistics.
- the map function calculates q*(z; u, s; ⁇ circumflex over ( ⁇ ) ⁇ ) for the user and item data corresponding to each machine and outputs three intermediate (key, value) pairs: (u, q*), (s, q*), and (z, q*).
- three reduce machines receive the corresponding (key, value) pairs from each mapper machine.
- a first reduce machine receives the (key, value) pairs corresponding to the key s and computes N(z, s) for all z values.
- the output (key, value) pair from the first reduce machine is: (s, N(z, s)).
- a second reduce machine receives the intermediate (key, value) pairs corresponding to the key u and computes ⁇ circumflex over (p) ⁇ (z
- the output (key, value) pair from the second reduce machine is: (u, ⁇ circumflex over (p) ⁇ (z
- a third reduce machine receives the (key, value) pairs corresponding to the key z and computes N(z).
- the output (key, value) pair from the third reduce machine is:
- the system iterates to minimize logarithmic loss (step 212 ).
- the output values from the reduce machines are used for the next EM iteration.
- Each set of output values are used to calculate the first probability distribution, p(z
- u) is used to calculate the logarithmic loss described above.
- the iterations of the EM algorithm can continue until the logarithmic loss is minimized. Alternatively, a specified number of iterations can be computed. Finally, the iterations can continue until the change in the logarithmic loss is less than a specified threshold amount.
- the probability distribution model has been learned and can be used to recommend items to users (step 214 ). For example, for a given user, the probability distribution model can recommend particular items from the item set that the user is likely to be interested in.
- FIG. 4 is a flowchart illustrating an example method 400 for recommending items to a user.
- the system identifies training data (step 402 ).
- the training data includes a set of users, a set of items, and event histories for (user, item) pairs.
- the set of users includes as members a number of distinct users.
- each user can be associated with a user profile maintained by the system.
- the profile can identify user interests. Additionally, or alternatively, the profile can be used to track user behavior.
- the system can track the interests and/or behavior of distinct users using other techniques, for example, by monitoring behavior from particular IP addresses or using data previously stored on a user's device (e.g., a “cookie”) to identify individual users of the system.
- a user's device e.g., a “cookie”
- the user creates a particular user identifier to uniquely identify the user in the system.
- the user can logon to access particular features (e.g., to select or purchase particular items) as well as to receive item recommendations.
- the membership of the user set can change with the addition of new users (e.g., newly created user profiles) and the removal of other users.
- the item set includes as members a number of distinct items, for example, documents (e.g., news stories), video content, audio content, and consumer items (e.g., books).
- the members of the item set can change with the addition of new items or removal of old items, which is referred to as item churn.
- the item churn can frequently change the membership of the item set.
- the rate of item churn can vary, for example, depending on the types of items in the item set. For example, news stories can be added every few minutes or more frequently, and the rate of item churn is high.
- the addition or removal of other items e.g., books and other consumer items
- can be less frequent e.g., daily, weekly
- the training data is used to generate an initial probability distribution model relating users and items from the user set and item set, respectively (step 404 ).
- the initial probability distribution model is generated, for example, as described in reference to FIG. 2 .
- the training data is evaluated, e.g., using the EM algorithm, to calculate an initial overall probability distribution, p(s
- the overall probability distribution can be generated periodically.
- the frequency of determining the overall probability distribution can be specified, for example, according to the rate of change in the user set, since changes in the user set can change the first probability distribution. For example, the overall probability distribution can be determined daily or weekly to adjust for new users or deleted user in the user set.
- the system identifies the first probability distribution from the initial probability distribution model (step 406 ).
- u) relates the user set and the set of categories.
- the first probability distribution identifies the probability of a particular category given a user.
- u) can be determined from the EM algorithm such that the logarithmic loss is minimized. Once determined, the first probability distribution can be considered effectively static.
- the system determines a new second probability distribution (step 408 ).
- the new second probability distribution p(s
- z) relates the set of categories and the item set using current user-item event data.
- the new second probability distribution identifies the probability that a particular item will be selected given a particular category. Therefore, the new second probability distribution can be used to identify which items are likely to be selected by a user given that the user is a member of one or more particular categories.
- FIG. 5 is a flowchart illustrating an example method 500 for determining the new second probability distribution, p(s
- the system receives the current item set (step 502 ). For example, the system can retrieve or request an updated item set.
- the current item set includes the most recently added or removed items. For example, if the items are news stories, the current item set includes news stories added to the item set. Thus, some items may have been added to the item set within a few minutes. Consequently, when determining the second probability distribution, the current item set should be received in order to use the most up to date item set.
- the system monitors user item selections (step 504 ).
- the system identifies each selection of an item by a user of the user set (e.g., user click data). For example, if a user selects a news story item, the system identifies which news story item was selected and by which user.
- the system increments one or more counters for selected items according to the user category membership (step 506 ).
- Each item has a number of associated counters.
- the number of counters is equal to the number of categories.
- its counters are incremented fractionally according to the member categories of the user that selected the item. For example, a user u 1 selects an item s 1 .
- User u 1 is also a member of categories z 2 and z 4 .
- the counters for item s 1 corresponding to categories z 2 and z 4 are incremented.
- the sum of the counter increments for the item selection is equal to 1.
- the count of 1 is divided among the member categories.
- the counter corresponding to category z 2 is incremented by 0.5 and the counter corresponding to category z 4 is incremented by 0.5.
- the respective counters can be incremented according to the membership ratio identified by the first probability distribution p(z
- counts of user selections on items are normalized across the set of items.
- the system optionally weights counter values according to time (step 508 ). For example, each increment to a counter can be associated with a timestamp. In some implementations, a weight function is applied to the counter value according to elapsed time such that older counter increments are discounted by greater amounts with elapsed time.
- time benchmarks are used to discount the values of counter increments. For example, increments received from a present time to time t 1 can be unchanged. Counter increments received from time t 1 to time t 2 can be discounted by a first multiplier (e.g., 0.5). Counter increments received from time t 2 to time t 3 can be discounted by an additional multiplier (e.g., 0.5 ⁇ 0.5). Consequently, older user selections have less impact on the particular counter value for an item.
- a first multiplier e.g., 0.5
- additional multiplier e.g., 0.5 ⁇ 0.5
- increments to a counter are only retained for a specified length of time. For example, only increments to the counter received within a specified number of minutes are retained. As a result, the counter value only includes increments from item selections within that specified time.
- the system calculates the new second probability distribution, p(s
- the system calculates the new second probability distribution as the fraction of counts on an item for a particular category z. More specifically,
- FIG. 6 shows an example table 600 illustrating counts for items with respect to categories.
- items s 1 602 , s 2 604 and s 3 606 are shown with respect to categories z 1 608 , z 2 610 , and z 3 612 .
- Each item includes a number of selections of that item.
- Items s 1 602 and s 2 604 each include three item selections and item s 3 606 includes the selections (i.e., distinct user selections of the item). For each item selection, one or more item counters corresponding to the categories are incremented.
- a user corresponding to the first selection of item s 1 602 belongs to categories z 1 608 and z 2 610 , but not category z 3 612 . Consequently, the count for the item selection is evenly incremented between counters corresponding to category z 1 608 and z 2 610 and the counter of item s 1 602 corresponding to category z 3 612 is not incremented.
- the user corresponding to the third selection of item s 1 602 belongs only to category z 1 608 .
- the counter for s 1 602 corresponding to category z 1 608 is incremented by 1.
- a 60% probability is assigned to selecting item s 1 602 over items s 2 604 and s 3 606 .
- z) new can be determined at a greater frequency than the first probability distribution, p(z
- the initial second probability distribution can change.
- weighting the counters with time can also change the initial second probability distribution as time elapses. For example, when the items are news stories, a news story can have a number of user selections when initially added to the item set. However, this can decrease as the news story ages. As a result, when weighting the story according to elapsed time, the decreased likelihood of selecting the news story is reflected by the discounted counter value.
- the new second probability distribution can be determined each time a specified amount of time has elapsed.
- the new second probability distribution can be determined frequently to account for changes in the item set.
- the addition of new items can be captured such that the new second probability distribution includes all the relevant items.
- the new second probability distribution can be determined at a frequency that is a function of the rate of item churn.
- the new second probability distribution is determined in response to an event, for example, receiving a user request for recommended items.
- the system optionally calculates a new overall probability distribution (step 410 ).
- the new overall probability distribution calculated according to the probability distribution model using the first probability distribution and the new second probability distribution.
- the new overall probability distribution is described as:
- u) is the first probability distribution retained from the initial probability distribution model described above and where p(z
- the system identifies recommended items for a user (step 412 ).
- the probability distribution model is used to identify one or more recommended items.
- the new overall probability distribution identifies items having the highest probability of being selected by the user.
- a specified number of high probability items are identified as recommended items.
- the items having the ten highest probability values can be identified as the recommended items.
- the recommended items include a specified number of high probability items for one or more groups of items based on the user's identified interests (e.g., the five highest probability items for each groups).
- the recommended items can include items from each of those groups. For example, if the items are news stories, a user can have a specified interest in business and entertainment stories. Consequently, recommended news stories are identified for both business and entertainment groups.
- the new second probability distribution is determined each time recommended items are identified for a particular user. Similarly, the new overall probability distribution can be calculated only when recommendations for a particular user are identified. Additionally, the probability distributions can be retained or discarded.
- the new second probability distribution reflects the current counter values for items with respect to the categories. From clustering information determined from the initial probability distributions, the particular user's membership with respect to different categories is also known. Each item can be assigned a relationship score relating the particular user and each item. The relationship score can be determined according to the user's category membership and the new second probability distribution. Items with a high relationship score for the particular user can be identified as potential recommended items.
- the system presents recommended items to the user (step 414 ).
- the recommended items can be presented automatically. For example, when a user logs into the system a user interface can present the recommended items. Alternatively, the user interface can include a link to the recommended items. In some implementations, the recommended items are presented to the user in response to a user request for recommended items. The user can choose to select one or more of the recommended items (e.g., view a recommended news story, select a consumer item to purchase).
- the recommended items are selected from a set of candidate items.
- the set of candidate items can be generated, for example, using one or more factors.
- the factors can include language preferences of the user, item freshness (e.g., how new a news story is), customized groups selected by the user, and structural organization of items (e.g., a particular edition for news items). These factors can be scored or weighted independently from the probability distributions calculated by the recommender system.
- the set of candidate items can be generated by examining the union of all items that have been selected by members of the categories that the particular user belongs to and the set of stories that have been covisited with the set of stories in the user's selection history. Covisitation is an event in which two stories are selected by the same user within a specified time interval (e.g., within a few hours). Only items that appear in this set will be candidate items.
- FIG. 7 shows an example recommender system 700 for recommending news stories to users. Similar systems could be used to recommend other types of items.
- the system 700 includes an offline component 702 and an online component 704 .
- the offline component 702 includes log analysis 710 .
- the online component 702 includes a user table 706 and a story table 708 , which can be updated e.g., in real-time.
- the user table 706 includes user event history statistics (e.g., click data relating users and items) and user category statistics.
- the rows of the user table identify individual users according to distinct user identifiers.
- the event history identifies each story selected by each user in the user table 706 .
- the category information includes a list of category identifiers that the user belongs to as determined by the probability distribution models.
- the story table 708 indexes stories by a story identifier (e.g., each row in the table is an identified story).
- the story table 708 also maintains two types of statistics: category statistics and covisitation statistics.
- the statistics can be stored in different columns of the table.
- the category statistics identify how many times a story was visited by users from each category. As described above, this can be based on the fractional membership of the user in different categories.
- the covisitation statistics identify how many times a story s co-visited with each story s′.
- the covisitation data can be stored, for example, in an adjacency list which is modified when a user selects a story in view to the user's recent story selection history (e.g. selections over the specified time level).
- Normalization statistics can be maintained for each of the category and covisitation statistics. For each category, the total number of story selections made by users belonging to that category are maintained. Additionally, for every item, the total number of story covisitation pairs where the story was one of the covisited pair is also maintained. Furthermore, the counts for the selection events can be decayed counts to discount older story selections relative to newer story selections.
- the user table 706 and story table 708 can be stored using a Bigtable infrastructure.
- the Bigtable infrastructure provides a distributed persistent storage system for structured data.
- the Bigtable is scalable to large amounts of data across a large number of commodity servers.
- the Bigtable infrastructure is described in Chang et al., “ Bigtable: A Distributed Storage System for Structured Data ,” Proceedings of the 7th Symposium on Operating System Design and Implementation, (OSDI 2006), which is incorporated by reference.
- Log analysis 710 in the offline component 704 , can be periodically performed over user event history data stored on the user table 706 .
- selections made by users over a specified time window e.g., a few months
- the user categories are then stored in the user table 706 .
- the online component 704 also includes a news statistics server 714 , a news personalization server 716 , and a news front end 718 .
- the news statistics server 714 updates statistics in the story table 706 when user story selections are reported by the news front end 718 .
- the news front end 718 is, for example, a news webserver though which users interact.
- the news personalization server 712 provides news story recommendations when requested by the news front end 718 (e.g., in response to user interaction with the news front end 718 ).
- the recommend request work-flow is illustrated by the solid arrows in FIG. 7 .
- the news front end 716 contacts the news personalization server 712 .
- the news front end 716 sends the user identifier of the user and a list of candidate news stories to be scored.
- the news personalization server 712 requests user information (category and recent selection history) from the user table 706 .
- the news personalization server 712 also requests story selection counts corresponding to the category of the user and covisitation counts for the stories in the user's selection history from story table 708 .
- the requested statistics can be locally cached for a specified period of time.
- the news personalization server 712 uses the received statistics to calculate recommendation scores (e.g., a category-story score based on the probability distribution model and a story-story covisitation score) that are linearly combined to obtain a final score for each of the candidate stories, which are then sent back to the news front end 716 .
- recommendation scores e.g., a category-story score based on the probability distribution model and a story-story covisitation score
- the update statistics request work-flow is illustrated by the dashed arrows in FIG. 7 .
- This information is stored in the user's selection history stored in the user table 706 .
- the news front end 716 also contacts the news story server 714 with a request to update any statistics that may changes as a result of the user selection.
- the news story server 714 requests the user's information from the user table 706 .
- the corresponding count for the category corresponding to the story is updated (and weighted in according to elapsed time as described above). Additionally, the covisitation count for every story in the user's recent selection history is updated with the story corresponding to the user's selection.
- These counts along with appropriate normalization counts in the story table 708 are updated by the news story server 714 .
- the news story server buffers the updates and writes them out to the story table 708 periodically.
- MapReduce takes a set of input key/value pairs, and produces a set of output key/value pairs.
- the programmer expresses the computation as two functions: Map and Reduce.
- the map function emits each word plus an associated count of occurrences (just ‘1’ in this simple example).
- the reduce function sums together all counts emitted for a particular word.
- the programmer writes code to fill in a specification object with the names of the input and output files, and optional tuning parameters.
- the programmer then invokes a MapReduce function, passing it the specification object.
- the programmer's code is linked together with the MapReduce library.
- MapReduce Simplified Data Processing on Large Clusters , Proceedings of the 6th Symposium on Operating Systems Design and Implementation, pp. 137-150 (Dec. 6, 2004), the contents of which are incorporated here by reference.
- Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Embodiments of the subject matter described in this specification can be implemented as one or more computer program products, i.e., one or more modules of computer program instructions encoded on a tangible program carrier for execution by, or to control the operation of, data processing apparatus.
- the tangible program carrier can be a propagated signal or a computer-readable medium.
- the propagated signal is an artificially generated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a computer.
- the computer-readable medium can be a machine-readable storage device, a machine-readable storage substrate, a memory device, a composition of matter effecting a machine-readable propagated signal, or a combination of one or more of them.
- data processing apparatus encompasses all apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers.
- the apparatus can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
- a computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.
- a computer program does not necessarily correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code).
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- the processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output.
- the processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer.
- a processor will receive instructions and data from a read-only memory or a random access memory or both.
- the essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, to name just a few.
- PDA personal digital assistant
- GPS Global Positioning System
- Computer-readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
- semiconductor memory devices e.g., EPROM, EEPROM, and flash memory devices
- magnetic disks e.g., internal hard disks or removable disks
- magneto-optical disks e.g., CD-ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described is this specification, or any combination of one or more such back-end, middleware, or front-end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), e.g., the Internet.
- LAN local area network
- WAN wide area network
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network.
- the relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
Abstract
Description
where θ is a parameter vector representing conditional probability distributions p(z|u) and p(s|z). The
where L(θ) is the logarithmic loss, and T is the size of the training data. A low logarithmic loss indicates a high confidence in the accuracy of the estimated probability distributions.
The hat (^) on the probabilities denotes quantities parameterized by {circumflex over (θ)}. Thus, these probabilities represent parameter estimates from a previous iteration of the EM algorithm, which are replaced with each iteration calculating q*. Initially (i.e., for the first iteration), the probabilities can be randomly assigned values.
-
- map(String key, String value):
- //key: document name
- //value: document contents
- for each word w in value:
- EmitIntermediate(w, “1”);
- reduce(String key, Iterator values):
- //key: a word
- //values: a list of counts
- int result=0;
- for each v in values:
- result+=ParseInt(v);
- Emit(AsString(result));
- map(String key, String value):
-
- map (k1, v1)→list(k2, v2)
- reduce (k2, list(v2))→list(v2)
That is, the input keys and values are drawn from a different domain than the output keys and values. Furthermore, the intermediate keys and values are from the same domain as the output keys and values.
Claims (18)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/039,173 US8407226B1 (en) | 2007-02-16 | 2011-03-02 | Collaborative filtering |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US67626507A | 2007-02-16 | 2007-02-16 | |
US13/039,173 US8407226B1 (en) | 2007-02-16 | 2011-03-02 | Collaborative filtering |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US67626507A Continuation | 2007-02-16 | 2007-02-16 |
Publications (1)
Publication Number | Publication Date |
---|---|
US8407226B1 true US8407226B1 (en) | 2013-03-26 |
Family
ID=47892410
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/039,173 Active 2027-04-21 US8407226B1 (en) | 2007-02-16 | 2011-03-02 | Collaborative filtering |
Country Status (1)
Country | Link |
---|---|
US (1) | US8407226B1 (en) |
Cited By (15)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20120239382A1 (en) * | 2011-03-18 | 2012-09-20 | Industrial Technology Research Institute | Recommendation method and recommender computer system using dynamic language model |
US8572096B1 (en) * | 2011-08-05 | 2013-10-29 | Google Inc. | Selecting keywords using co-visitation information |
WO2015066331A1 (en) * | 2013-11-04 | 2015-05-07 | Google Inc. | Systems and methods for layered training in machine-learning architectures |
US20150248618A1 (en) * | 2014-03-03 | 2015-09-03 | Spotify Ab | System and method for logistic matrix factorization of implicit feedback data, and application to media environments |
US9147161B2 (en) | 2013-03-14 | 2015-09-29 | Google Inc. | Determining geo-locations of users from user activities |
US9159030B1 (en) * | 2013-03-14 | 2015-10-13 | Google Inc. | Refining location detection from a query stream |
US9177048B1 (en) | 2007-02-16 | 2015-11-03 | Google Inc. | Collaborative filtering |
WO2018175086A1 (en) * | 2017-03-20 | 2018-09-27 | Nanotek Instruments, Inc. | Multivalent metal ion battery having a cathode of recompressed graphite worms and manufacturing method |
US10127230B2 (en) | 2015-05-01 | 2018-11-13 | Microsoft Technology Licensing, Llc | Dynamic content suggestion in sparse traffic environment |
US10650001B2 (en) | 2017-10-05 | 2020-05-12 | Google Llc | Disaggregating latent causes for computer system optimization |
US10872110B2 (en) | 2014-03-03 | 2020-12-22 | Spotify Ab | Systems, apparatuses, methods and computer-readable medium for automatically generating playlists based on taste profiles |
WO2022001887A1 (en) * | 2020-06-30 | 2022-01-06 | 北京字节跳动网络技术有限公司 | Method and apparatus for training item coding model |
EP3972709A4 (en) * | 2019-07-08 | 2023-04-19 | Valve Corporation | Content-item recommendations |
US11676168B2 (en) * | 2018-01-29 | 2023-06-13 | Walmart Apollo, Llc | Identifying value conscious users |
US11977594B2 (en) | 2019-07-08 | 2024-05-07 | Valve Corporation | Custom compilation videos |
Citations (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6006218A (en) | 1997-02-28 | 1999-12-21 | Microsoft | Methods and apparatus for retrieving and/or processing retrieved information as a function of a user's estimated knowledge |
US6078740A (en) | 1996-11-04 | 2000-06-20 | Digital Equipment Corporation | Item selection by prediction and refinement |
US6519591B1 (en) | 2000-12-22 | 2003-02-11 | Ncr Corporation | Vertical implementation of expectation-maximization algorithm in SQL for performing clustering in very large databases |
US6556960B1 (en) | 1999-09-01 | 2003-04-29 | Microsoft Corporation | Variational inference engine for probabilistic graphical models |
US6687696B2 (en) | 2000-07-26 | 2004-02-03 | Recommind Inc. | System and method for personalized search, information filtering, and for generating recommendations utilizing statistical latent class models |
US6728695B1 (en) | 2000-05-26 | 2004-04-27 | Burning Glass Technologies, Llc | Method and apparatus for making predictions about entities represented in documents |
US20040172267A1 (en) | 2002-08-19 | 2004-09-02 | Jayendu Patel | Statistical personalized recommendation system |
US6981040B1 (en) | 1999-12-28 | 2005-12-27 | Utopy, Inc. | Automatic, personalized online information and product services |
US7113185B2 (en) | 2002-11-14 | 2006-09-26 | Microsoft Corporation | System and method for automatically learning flexible sprites in video layers |
US20070038659A1 (en) | 2005-08-15 | 2007-02-15 | Google, Inc. | Scalable user clustering based on set similarity |
US7389201B2 (en) | 2001-05-30 | 2008-06-17 | Microsoft Corporation | System and process for automatically providing fast recommendations using local probability distributions |
-
2011
- 2011-03-02 US US13/039,173 patent/US8407226B1/en active Active
Patent Citations (14)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6078740A (en) | 1996-11-04 | 2000-06-20 | Digital Equipment Corporation | Item selection by prediction and refinement |
US6006218A (en) | 1997-02-28 | 1999-12-21 | Microsoft | Methods and apparatus for retrieving and/or processing retrieved information as a function of a user's estimated knowledge |
US6556960B1 (en) | 1999-09-01 | 2003-04-29 | Microsoft Corporation | Variational inference engine for probabilistic graphical models |
US7685276B2 (en) | 1999-12-28 | 2010-03-23 | Personalized User Model | Automatic, personalized online information and product services |
US6981040B1 (en) | 1999-12-28 | 2005-12-27 | Utopy, Inc. | Automatic, personalized online information and product services |
US6728695B1 (en) | 2000-05-26 | 2004-04-27 | Burning Glass Technologies, Llc | Method and apparatus for making predictions about entities represented in documents |
US20040034652A1 (en) | 2000-07-26 | 2004-02-19 | Thomas Hofmann | System and method for personalized search, information filtering, and for generating recommendations utilizing statistical latent class models |
US6687696B2 (en) | 2000-07-26 | 2004-02-03 | Recommind Inc. | System and method for personalized search, information filtering, and for generating recommendations utilizing statistical latent class models |
US7328216B2 (en) | 2000-07-26 | 2008-02-05 | Recommind Inc. | System and method for personalized search, information filtering, and for generating recommendations utilizing statistical latent class models |
US6519591B1 (en) | 2000-12-22 | 2003-02-11 | Ncr Corporation | Vertical implementation of expectation-maximization algorithm in SQL for performing clustering in very large databases |
US7389201B2 (en) | 2001-05-30 | 2008-06-17 | Microsoft Corporation | System and process for automatically providing fast recommendations using local probability distributions |
US20040172267A1 (en) | 2002-08-19 | 2004-09-02 | Jayendu Patel | Statistical personalized recommendation system |
US7113185B2 (en) | 2002-11-14 | 2006-09-26 | Microsoft Corporation | System and method for automatically learning flexible sprites in video layers |
US20070038659A1 (en) | 2005-08-15 | 2007-02-15 | Google, Inc. | Scalable user clustering based on set similarity |
Non-Patent Citations (44)
Title |
---|
Adomavicius, G., and Tuzhilin, A. ‘Toward the Next Generation of Recommender Systems: A survey of the State-of-the-Art and Possible Extensions.’ IEEE Transactions on Knowledge and Data Engineering, vol. 17, N.6, Jun. 2005. |
Adomavicius, G., and Tuzhilin, A. 'Toward the Next Generation of Recommender Systems: A survey of the State-of-the-Art and Possible Extensions.' IEEE Transactions on Knowledge and Data Engineering, vol. 17, N.6, Jun. 2005. |
Blei, D.; Ng, A.; and Jordan, M. ‘Latent Dirichlet Allocation.’ In Journal of Machine Learning Research, 2003. |
Blei, D.; Ng, A.; and Jordan, M. 'Latent Dirichlet Allocation.' In Journal of Machine Learning Research, 2003. |
Breese, J.; Heckermann, D.; and Kadie, C. ‘Empirical Analysis of Predictive Algorithms for Collaborative Filtering.’ Proc. Of the 14th Conf. on Uncertainty in Artificial Intelligence, Jul. 1998. |
Breese, J.; Heckermann, D.; and Kadie, C. 'Empirical Analysis of Predictive Algorithms for Collaborative Filtering.' Proc. Of the 14th Conf. on Uncertainty in Artificial Intelligence, Jul. 1998. |
Broder, A. ‘On the resemblance and containment of documents.’ Compression and Complexity of Sequences (SEQUENCES '97), 1998, pp. 21-29. |
Broder, A. 'On the resemblance and containment of documents.' Compression and Complexity of Sequences (SEQUENCES '97), 1998, pp. 21-29. |
Buhler, J. ‘Efficient large-scale sequence comparison by locality-sensitive hashing.’ Bioinformatics, vol. 17, pp. 419-428, 2001. |
Buhler, J. 'Efficient large-scale sequence comparison by locality-sensitive hashing.' Bioinformatics, vol. 17, pp. 419-428, 2001. |
Chang, et al., ‘Bigtable: A Distributed Storage System for Structured Data,’ 2006, Usenix Association, 14 pages. |
Chang, et al., 'Bigtable: A Distributed Storage System for Structured Data,' 2006, Usenix Association, 14 pages. |
Charikar, M. Similarity Estimation Techniques from Rounding Algorithms. Proc. of the 34th Annual ACM Symposium on Theory Of Computing, STOC (2002). |
Cohen, E. ‘Size-Estimation Framework with Applications to Transitive Closure and Reachability.’ Journal of Computer and System Sceinces 55 (1997): 441-453. |
Cohen, E. 'Size-Estimation Framework with Applications to Transitive Closure and Reachability.' Journal of Computer and System Sceinces 55 (1997): 441-453. |
Cohen, et al. ‘Finding Interesting Associations without Support Pruning.’ Proc. of the 16th Intl. Conf. on Data Engineering, (ICDE 2000). |
Cohen, et al. 'Finding Interesting Associations without Support Pruning.' Proc. of the 16th Intl. Conf. on Data Engineering, (ICDE 2000). |
Das et al., ‘Google News Personalization: Scalable Online Collaborative Filtering,’ WWW2007, May 8-12, 2007, Banff, Canada, 10 pages. |
Das et al., 'Google News Personalization: Scalable Online Collaborative Filtering,' WWW2007, May 8-12, 2007, Banff, Canada, 10 pages. |
Datar, et al. ‘Locality-Sensitive Hashing Scheme Based on P-Stable Distributions.’ Proc. of the 20th ACM Annual Symposium on Computational Geometry (SOCG 2004). |
Datar, et al. 'Locality-Sensitive Hashing Scheme Based on P-Stable Distributions.' Proc. of the 20th ACM Annual Symposium on Computational Geometry (SOCG 2004). |
Dean, et al., ‘MapReduce: Simplified Data Processing on Large Clusters,’ 2004, OSDI, 13 pages. |
Dean, et al., 'MapReduce: Simplified Data Processing on Large Clusters,' 2004, OSDI, 13 pages. |
Gionis, A., et al. ‘Similarity Search in High Dimensions via Hashing.’ Proc. of the 25th Intl. Conf. on Very Large Data Bases, VLDB (1999). |
Gionis, A., et al. 'Similarity Search in High Dimensions via Hashing.' Proc. of the 25th Intl. Conf. on Very Large Data Bases, VLDB (1999). |
Heckerman, et al., Dependency Networks for Inference, Collaborative Filtering, and Data Visualization., Journal of Machine Learning Research., Oct. 2000, pp. 49-75. |
Hofmann, ‘Latent Semantic Models for Collaborative Filtering,’ Jan. 2004, ACM, 27 pages. |
Hofmann, 'Latent Semantic Models for Collaborative Filtering,' Jan. 2004, ACM, 27 pages. |
Indyk, P, and Motwani, R. Approximate Nearest Neighbor: Towards Removing the Curse of Dimensionality. Proc of the 30th Annual ACM Symposium on Theory on Computing, 1998, pp. 604-613. |
Indyk, P. ‘A Small Approximately Min-Wise Independent Family of Hash Functions.’ Proc. 10th Symposium on Discrete Algorithms, SODA (1999). |
Indyk, P. 'A Small Approximately Min-Wise Independent Family of Hash Functions.' Proc. 10th Symposium on Discrete Algorithms, SODA (1999). |
Marlin, B., and Zemel, R. ‘The Multiple Multiplicative Factor Model for Collaborative Filtering.’ ACM Intl. Conf. Proceeding Series, vol. 69, 2004. |
Marlin, B., and Zemel, R. 'The Multiple Multiplicative Factor Model for Collaborative Filtering.' ACM Intl. Conf. Proceeding Series, vol. 69, 2004. |
Motwani, R. and Raghavan, P. Randomized Algorithms. Cambridge University Press, 1985. |
Resnick, et al. ‘GroupLens: an Open architecture for Collaborative Filtering of Netnews.’ Proc. Of Computer Supported Cooperative Work Conf., 1994. |
Resnick, et al. 'GroupLens: an Open architecture for Collaborative Filtering of Netnews.' Proc. Of Computer Supported Cooperative Work Conf., 1994. |
Sarwar, et al. ‘Application of Dimensionality Reduction in Recommender Systems—A Case Study.’ Proc. Of the ACM WebKDD Workshop, 2000. |
Sarwar, et al. ‘Item-Based Collaborative Filtering Recommendation Algorithms.’ Proc. Of the 10th Intl. WWW Conf. , (WWW) 2001. |
Sarwar, et al. 'Application of Dimensionality Reduction in Recommender Systems-A Case Study.' Proc. Of the ACM WebKDD Workshop, 2000. |
Sarwar, et al. 'Item-Based Collaborative Filtering Recommendation Algorithms.' Proc. Of the 10th Intl. WWW Conf. , (WWW) 2001. |
Shani, et al. ‘An MDP-Based Recommender System.’ Proc. of the 18th Conf. Uncertainty in Artificial Intelligence, Aug. 2002. |
Shani, et al. 'An MDP-Based Recommender System.' Proc. of the 18th Conf. Uncertainty in Artificial Intelligence, Aug. 2002. |
Yu, et al. ‘Instance Selection Techniques for Memory-Based Collaborative Filtering.’ Proc. Of the Second Siam Intl. Conf. on Data Mining, (SDM) 2002. |
Yu, et al. 'Instance Selection Techniques for Memory-Based Collaborative Filtering.' Proc. Of the Second Siam Intl. Conf. on Data Mining, (SDM) 2002. |
Cited By (21)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9177048B1 (en) | 2007-02-16 | 2015-11-03 | Google Inc. | Collaborative filtering |
US20120239382A1 (en) * | 2011-03-18 | 2012-09-20 | Industrial Technology Research Institute | Recommendation method and recommender computer system using dynamic language model |
US8572096B1 (en) * | 2011-08-05 | 2013-10-29 | Google Inc. | Selecting keywords using co-visitation information |
US9147161B2 (en) | 2013-03-14 | 2015-09-29 | Google Inc. | Determining geo-locations of users from user activities |
US9159030B1 (en) * | 2013-03-14 | 2015-10-13 | Google Inc. | Refining location detection from a query stream |
WO2015066331A1 (en) * | 2013-11-04 | 2015-05-07 | Google Inc. | Systems and methods for layered training in machine-learning architectures |
US20150127590A1 (en) * | 2013-11-04 | 2015-05-07 | Google Inc. | Systems and methods for layered training in machine-learning architectures |
US9286574B2 (en) * | 2013-11-04 | 2016-03-15 | Google Inc. | Systems and methods for layered training in machine-learning architectures |
US10380649B2 (en) * | 2014-03-03 | 2019-08-13 | Spotify Ab | System and method for logistic matrix factorization of implicit feedback data, and application to media environments |
US20150248618A1 (en) * | 2014-03-03 | 2015-09-03 | Spotify Ab | System and method for logistic matrix factorization of implicit feedback data, and application to media environments |
US10872110B2 (en) | 2014-03-03 | 2020-12-22 | Spotify Ab | Systems, apparatuses, methods and computer-readable medium for automatically generating playlists based on taste profiles |
US10127230B2 (en) | 2015-05-01 | 2018-11-13 | Microsoft Technology Licensing, Llc | Dynamic content suggestion in sparse traffic environment |
CN110520952A (en) * | 2017-03-20 | 2019-11-29 | 纳米技术仪器公司 | The polyvalent metal ion battery and manufacturing method of the cathode of graphite worm with recompression |
WO2018175086A1 (en) * | 2017-03-20 | 2018-09-27 | Nanotek Instruments, Inc. | Multivalent metal ion battery having a cathode of recompressed graphite worms and manufacturing method |
US10650001B2 (en) | 2017-10-05 | 2020-05-12 | Google Llc | Disaggregating latent causes for computer system optimization |
US11275744B2 (en) | 2017-10-05 | 2022-03-15 | Google Llc | Disaggregating latent causes for computer system optimization |
US11676168B2 (en) * | 2018-01-29 | 2023-06-13 | Walmart Apollo, Llc | Identifying value conscious users |
EP3972709A4 (en) * | 2019-07-08 | 2023-04-19 | Valve Corporation | Content-item recommendations |
US11977594B2 (en) | 2019-07-08 | 2024-05-07 | Valve Corporation | Custom compilation videos |
WO2022001887A1 (en) * | 2020-06-30 | 2022-01-06 | 北京字节跳动网络技术有限公司 | Method and apparatus for training item coding model |
US11763204B2 (en) | 2020-06-30 | 2023-09-19 | Beijing Bytedance Network Technology Co., Ltd. | Method and apparatus for training item coding model |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9177048B1 (en) | Collaborative filtering | |
US8407226B1 (en) | Collaborative filtering | |
JP5538510B2 (en) | Extensive user clustering based on set similarity | |
JP7107926B2 (en) | Systems and associated methods and apparatus for predictive data analysis | |
Xiang et al. | Temporal recommendation on graphs via long-and short-term preference fusion | |
Leskovec et al. | Predicting positive and negative links in online social networks | |
US20170286429A1 (en) | Computer System for Automated Assessment at Scale of Topic-Specific Social Media Impact | |
US8370280B1 (en) | Combining predictive models in predictive analytical modeling | |
US20190213476A1 (en) | Determining strategic digital content transmission time utilizing recurrent neural networks and survival analysis | |
Agarwal et al. | Content recommendation on web portals | |
Wei et al. | Web 2.0 Recommendation service by multi-collaborative filtering trust network algorithm | |
US8571924B2 (en) | High performance personalized advertisement serving by exploiting thread assignments in a multiple core computing environment | |
Tian et al. | Time-aware web service recommendations using implicit feedback | |
CN111932342B (en) | User cold start product recommendation method and system based on Apriori algorithm | |
Xu et al. | Generative models for evolutionary clustering | |
US8285583B2 (en) | Contact stream optimization using FEC and CC constraints | |
US10956930B2 (en) | Dynamic Hierarchical Empirical Bayes and digital content control | |
Lyu et al. | Fine-grained modeling and optimization for intelligent resource management in big data processing | |
Ye et al. | Parameters tuning of multi-model database based on deep reinforcement learning | |
Ficel et al. | A graph-based recommendation approach for highly interactive platforms | |
US11720808B2 (en) | Feature removal framework to streamline machine learning | |
Tan et al. | Predicting the popularity of tweets using internal and external knowledge: an empirical Bayes type approach | |
Leznik et al. | Done yet? A critical introspective of the cloud management toolbox | |
Sinha et al. | Attribution IQ: Scalable Game Theoretic Attribution in Web Analytics | |
Chen et al. | Practical lessons of data mining at Yahoo! |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:DAS, ABHINANDAN S.;GARG, ASHUTOSH;DATAR, MAYUR;REEL/FRAME:026225/0970Effective date: 20070329 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
CC | Certificate of correction | ||
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044101/0299Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |