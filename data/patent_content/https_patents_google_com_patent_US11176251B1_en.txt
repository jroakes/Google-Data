US11176251B1 - Determining malware via symbolic function hash analysis - Google Patents
Determining malware via symbolic function hash analysis Download PDFInfo
- Publication number
- US11176251B1 US11176251B1 US16/724,031 US201916724031A US11176251B1 US 11176251 B1 US11176251 B1 US 11176251B1 US 201916724031 A US201916724031 A US 201916724031A US 11176251 B1 US11176251 B1 US 11176251B1
- Authority
- US
- United States
- Prior art keywords
- symfunc
- logic
- hash value
- data
- hash
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/50—Monitoring users, programs or devices to maintain the integrity of platforms, e.g. of processors, firmware or operating systems
- G06F21/55—Detecting local intrusion or implementing counter-measures
- G06F21/56—Computer malware detection or handling, e.g. anti-virus arrangements
- G06F21/562—Static detection
- G06F21/563—Static detection by source code analysis
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/50—Monitoring users, programs or devices to maintain the integrity of platforms, e.g. of processors, firmware or operating systems
- G06F21/55—Detecting local intrusion or implementing counter-measures
- G06F21/56—Computer malware detection or handling, e.g. anti-virus arrangements
- G06F21/562—Static detection
- G06F21/564—Static detection by virus signature recognition
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2221/00—Indexing scheme relating to security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F2221/03—Indexing scheme relating to G06F21/50, monitoring users, programs or devices to maintain the integrity of platforms
- G06F2221/033—Test or assess software
Definitions
- Embodiments of the disclosure relate to the field of network security. More specifically, one embodiment of the disclosure relates to a system, apparatus and method for determining the presence of malware within a binary object.
- malware malicious software
- malware is a program or file that is embedded within downloadable content and designed to adversely influence (i.e. attack) normal operations of a computer.
- Examples of different types of malware may include bots, computer viruses, worms, Trojan horses, spyware, adware, or any other programming that operates within the computer without permission.
- malware may be embedded with objects associated with a web page hosted by a malicious web site. By downloading this content, malware causing another web page to be requested from a malicious web site may be unknowingly installed on the computer.
- malware may also be installed on a computer upon receipt or opening of an electronic mail (email) message.
- an email message may contain an attachment, such as a Portable Document Format (PDF) document, with embedded executable malware.
- PDF Portable Document Format
- malware may exist in files infected through any of a variety of attack vectors, which are uploaded from the infected computer onto a networked storage device such as a file share.
- FIG. 1 is an exemplary system diagram of a communication network deploying a plurality of malware content detection (MCD) devices.
- MCD malware content detection
- FIG. 2 is an exemplary hardware block diagram of a malware content detection (MCD) device.
- MCD malware content detection
- FIG. 3 is an exemplary high-level flowchart of a malware detection process.
- FIG. 4 is an exemplary flowchart illustrating the malware detection process for evaluating a suspicious binary object.
- FIG. 5 is an exemplary embodiment of a flowchart partially illustrating the communication between different malware detection logics.
- FIG. 6 is an exemplary embodiment of a flowchart of the classification process for analyzing and processing data to determine if a binary object contains malicious code.
- Various embodiments of the disclosure relate to a process configured to generate and analyze a symbolic function (“symfunc”) hash from a given piece of binary code.
- symfunc a symbolic function
- the generation of the symfunc hash value is compared against previously logged symfunc hash values to associate the potential behaviors of a newly generated symfunc hash value to those previously generated, stored, and/or documented.
- the detection of malware in accordance with the invention avoids being “brittle,” thereby making the detection technique less susceptible to evasion techniques such as modification of the malware code.
- This process can be accomplished through a series of data processing steps that can be accomplished within a malware content detection (“MCD”) system.
- MCD malware content detection
- One feature of the present invention is to generate an abstraction of a suspected binary object that can be compared to other abstractions of potentially related binary objects.
- the abstraction process can be accomplished in such a way that reliable information about the suspected binary object can be determined.
- This process can be enhanced by filtering non-differentiating features from the generated abstraction such that unique and/or differentiating features can be more easily determined and compared against similarly abstracted objects.
- This abstraction may be improved by analyzing and abstracting the suspected binary objects based on the contained functions and corresponding calls to and from the object, as well as examining various reads and writes to memory. In this way, small changes in the suspected binary object may be abstracted out of the final hash value used for comparison against other previously analyzed binary objects.
- the MCD system can be configured to receive a plurality of binary code samples for analysis, which are then disassembled into various opcodes or other disassembled code data.
- the opcodes, or other disassembled code may then be processed by the MCD to be further abstracted into a symbolic representation as a list of short equations (“symboliks”).
- the symboliks may then be further abstracted into a symfunc object by the MCD.
- the symfunc object undergoes a hash operation through a specific and repeated heuristic method to generate a manageable symfunc hash value.
- the symfunc hash value may be compared to a collection of previously generated symfunc hash values, related to previously detected malware, to associate known characteristics of a code family to the symfunc hash values generated from the binary code sample.
- characteristics of the binary code sample can be determined from the comparison of the symfunc hash value generated from the process outlined in the instant application. These determined characteristics can include whether the binary code sample contains malicious code including, but not limited to, keylogging, worms, trojan horses, and/or viruses.
- previously generated symfunc hash values can be stored within a single central data store or database and utilized for comparison either on a front-line appliance, or remotely as a service.
- Each symfunc has data associated with its corresponding binary object that was used to generate the symfunc hash.
- the entire symfunc hash data store can be over one terabyte in size, and be publicly available, internally up kept, or publicly available while supplemented with private data.
- Known symfunc hash values can be utilized to group binary objects associated with the known symfunc hash values to code family groups. These code families can be utilized to more easily determine the source of a malicious binary object. Code families are typically grouped by human analysts based on similar “fingerprints” or structure of code including, but not limited to, morphology, targets and methods of attack. One aspect of the present invention is to automatically generate associations of binary objects to code families based on matches found in a symfunc database. In this way, a faster determination of the source of a malicious binary object (from a hostile nation state, etc.) is possible.
- logic and “engine” are representative of hardware, firmware or software that is configured to perform one or more functions.
- logic may include circuitry such as processing circuitry (e.g., a microprocessor, one or more processor cores, a programmable gate array, a microcontroller, an application specific integrated circuit, etc.), wireless receiver, transmitter and/or transceiver circuitry, semiconductor memory, combinatorial logic, or other types of electronic components.
- the logic may be software in the form of one or more software modules.
- the software modules may include an executable application, a daemon application, an application programming interface (API), a subroutine, a function, a procedure, an applet, a servlet, a routine, source code, a shared library/dynamic load library, or even one or more instructions.
- the software module(s) may be stored in any type of a suitable non-transitory storage medium, or transitory storage medium (e.g., electrical, optical, acoustical or other form of propagated signals such as carrier waves, infrared signals, or digital signals).
- non-transitory storage medium may include, but are not limited or restricted to a programmable circuit; a semiconductor memory; non-persistent storage such as volatile memory (e.g., any type of random access memory “RAM”); persistent storage such as non-volatile memory (e.g., read-only memory “ROM”, power-backed RAM, flash memory, phase-change memory, etc.), a solid-state drive, hard disk drive, an optical disc drive, or a portable memory device.
- volatile memory e.g., any type of random access memory “RAM”
- persistent storage such as non-volatile memory (e.g., read-only memory “ROM”, power-backed RAM, flash memory, phase-change memory, etc.), a solid-state drive, hard disk drive, an optical disc drive, or a portable memory device.
- the executable code may be stored in persistent storage.
- the term “network content” generally refers to information transmitted over a network, proprietary or public (e.g. the Internet).
- the network content may present as one or more messages, namely a grouping of information that comprises a header and a payload, such as any of the following: a packet; a frame; a stream being a sequence of packets or frames; an Asynchronous Transfer Mode “ATM” cell; or any other series of bits having a prescribed format.
- the “payload” is generally defined as including the data associated with the message such as text, software, an image, an object, audio, video, a Uniform Resource Locator (URL), or other types of digital data.
- the “header” is generally defined as including control information. However, the specific types of control information depend on the network content type.
- network content examples include email, which may be transmitted using an email protocol such as Simple Mail Transfer Protocol (SMTP), Post Office Protocol version 3 (POP3), or Internet Message Access Protocol (IMAP4).
- email which may be transmitted using an email protocol such as Simple Mail Transfer Protocol (SMTP), Post Office Protocol version 3 (POP3), or Internet Message Access Protocol (IMAP4).
- a further example of network content includes an Instant Message, which may be transmitted using Session Initiation Protocol (SIP) or Extensible Messaging and Presence Protocol (XMPP) for example.
- IP Session Initiation Protocol
- XMPP Extensible Messaging and Presence Protocol
- Yet another example of network content includes one or more files that are transferred using a data transfer protocol such as File Transfer Protocol (FTP) for subsequent storage on a file share.
- FTP File Transfer Protocol
- the header may include the sender/recipient address, the sender/recipient phone number, or a targeted network location of the file, respectively.
- malware is directed to software that produces an undesirable behavior upon execution, where the behavior is deemed to be “undesirable” based on customer-specific rules, manufacturer-based rules, or any other type of rules formulated by public opinion or a particular governmental or commercial entity.
- This undesired behavior may include a communication-based anomaly or an execution-based anomaly that (1) alters the functionality of an electronic device executing that application software in a malicious manner; (2) alters the functionality of an electronic device executing that application software without any malicious intent; and/or (3) provides an unwanted functionality which is generally acceptable in other context.
- the term “transmission medium” is a communication path between two or more systems (e.g. any electronic devices with data processing functionality such as, for example, a security appliance, server, mainframe, computer, netbook, tablet, smart phone, router, switch, bridge or router).
- the communication path may include wired and/or wireless segments. Examples of wired and/or wireless segments include electrical wiring, optical fiber, cable, bus trace, or a wireless channel using infrared, radio frequency (RF), or any other wired/wireless signaling mechanism.
- RF radio frequency
- object generally refers to content in the form of an item of information having a logical structure or organization that enables it to be classified for purposes of analysis for malware.
- One example of the object may include an email message or a portion of the email message.
- Another example of the object may include a storage file or a document such as a Portable Document Format (PDF) document, a word processing document such as Word® document, or other information that may be subjected to cybersecurity analysis.
- PDF Portable Document Format
- the object may also include an executable such as an application, program, code segment, a script, dynamic link library “dll,” URL link, or any other element having a format that can be directly executed or interpreted by logic within the electronic device.
- the MCD devices 110 may also be as communicatively coupled with other electronic devices over private and/or public transmission mediums, such as electronic portable computers 170 or portable cellular phones 160 either through a direct connection or via a wireless network access point 150 .
- the MCD device 110 may also be communicatively coupled to a personal computing system 130 over the Internet 120 . Some personal computers 130 may also be commutatively coupled to a local MCD 140 .
- Each MCD device 110 can be adapted in many embodiments to receive and process binary code samples taken from network content for potential malicious code in real-time or at least near real-time.
- the network content is considered to be “suspicious” when a portion of the network content (e.g. payload data) is determined, with a certain level of likelihood, to include malware.
- the binary code and/or binary content can be provided in an offline process such as, but not limited to, a user/system administrator presenting the data to be processed in the form of a drive coupled to the MCD device 110 .
- a remote MCD system 110 may be a web-based security appliance that is configured to inspect ingress data traffic, identify whether any artifacts of the data traffic may include malware, and if so, analyze at least those artifacts. Unlike typical methods, this analysis does not need to be conducted in a virtual machine execution environment to detect anomalous behaviors that would be present if the data traffic were actually processed by an electronic device. Instead, the MCD system 110 may generate a symfunc hash value and compare it to previously generated symfunc hash values. The particulars of this analysis are described below.
- the MCD system 110 may be deployed as an inline security appliance (not shown) or coupled to a network as a local MCD device 140 via a network tap (e.g., a data/packet capturing device).
- the local MCD device 140 may be integrated into a remote MCD system 110 , provided as a standalone component, or integrated into different network components such as a firewall, a router, a switch or other type of network relay device such as a wireless network access point 150 .
- the local MCD device 140 may include a digital network tap configured to monitor network content (data traffic) and provide a copy of the data traffic along with its meta-information to a remote MCD system 110 or cluster of MCD systems 110 for analysis.
- the data traffic may comprise signaling transmitted over the Internet 120 , including data from/to remote servers.
- a personal computer may have an internal MCD system installed either as a communication-based security appliance or as software capable of delivering instruction to the processor to function similar to an MCD device 110 .
- MCD system installed either as a communication-based security appliance or as software capable of delivering instruction to the processor to function similar to an MCD device 110 .
- Such configurations can allow personal desktop computers 130 to analyze and report suspicious network content, such as malware within an incoming communication message (e.g., email message, short message service “SMS” message, etc.).
- second MCD system 110 2 may be positioned within a message transfer agent (MTA) deployed in network 130 as shown or connected to network 130 via a network tap.
- MTA message transfer agent
- one or more MCD devices 110 may be deployed across cloud computing services for malware detection as described. Furthermore, it is contemplated that the functionality of one or more MCD devices 110 may be incorporated into another management system when malware detection is to be conducted at a centralized resource.
- FIG. 2 an exemplary hardware block diagram of a malware content detection (MCD) device system 200 .
- the MCD device 210 and respective hardware can be similar to the MCD devices 110 , 140 as depicted and discussed in FIG. 1 .
- the MCD device 210 comprises one or more processors (e.g., CPU) 220 , which is coupled to communication input/output interfaces 230 as well as to a persistent memory system 240 .
- processors e.g., CPU
- various logics may be provided including an OS logic (referred to as “OS memory”) 250 , and a malware detection logic 260 .
- the malware detection logic 260 further comprises binary disassembler logic 261 , symbolic analyzer logic 262 , morphologic reducer logic 263 , symbolic hash generation logic (referred to as “symbolic hash generator”) 264 , threat classification logic (referred to as “classifier”) 265 , and response logic 266 .
- the input/output interface 220 can enable communications with other components including other MCD systems 110 , 140 as depicted in of FIG. 1 as well as other electronic devices over private and/or public networks like the Internet 120 .
- the input/output (I/O) interface 230 may be implemented as a physical interface including one or more ports for wired connectors.
- the entire MCD system 210 can be implemented as software and the input/output interface is implemented as a digital communication logic between the MCD device 210 and other software interfaces.
- the I/O interface 230 may be implemented with one or more radio units for supporting wireless communications with other electronic devices.
- the processor 220 can be communicatively coupled to persistent storage 240 over an external transmission medium via the I/O interface 230 .
- the persistent storage 240 may load the malware detection logic 260 within a volatile memory for execution.
- malware detection logic 260 including the sub components of the binary disassembler 261 , the symbolic analyzer 262 , morphologic reducer 263 , symbolic function hash generator 264 , and (threat) classifier 265 would be implemented separately from persistent memory 240 .
- the malware detection logic 260 may be comprised of many sub-components or sub-systems with internal logic suited for particular tasks.
- the malware detection logic 260 comprises separate binary disassembler logic 261 , symbolic analyzer logic 262 , morphologic reducer logic 263 , symbolic hash generator logic 264 , classifier logic 265 , and response logic 266 .
- the binary disassembler logic 261 can accept suspect binary objects as an input and disassemble the binary object into a series of opcodes along with other data including functional meta-information such as function start and end points along with various function calls.
- the disassembly can be accomplished through a variety of methods, but typically involves recursive code flow disassembly. Such disassembly can utilize tools including, but not limited to customized builds of readily available commercial or open source disassembler tools.
- the disassembler logic 261 can be located within a separate system or MCD device 210 . In these embodiments, the input binary objects may be passed across a network or other communication channel to the remote binary disassembler logic for processing and return.
- the types of output data from the binary disassembler logic 261 can also include a serial list of functions, a cross-reference list to other functions called or referenced. Additional embodiments may extract string and integer constants from functions for further analysis or elimination. Finally, many embodiments of the binary disassembler logic 261 can generate a control flow graph (CFG) of every function within the suspect binary object input.
- CFG control flow graph
- symbolic analyzer logic 262 can accept disassembled code data as input generated from the binary disassembler logic 261 or elsewhere either locally or remotely. Symbolic analyzer logic 262 can generate semantic representations of the input functions as symbolic representation data, which allows for a further abstraction of the suspect binary object.
- the symbolic analyzer logic 262 can generate an emulation environment of actual hardware and attempt to determine what the symbolic execution would be for a given path.
- the emulation is a representation of a given hardware system at a particular, pre-determined state.
- a full virtualization environment could be utilized.
- the symbolic analyzer logic 262 can emulate a variety of systems including Intel® X86 and X64 style architectures. It would be well understood to those skilled in the art that similar emulation methods could be extended to any of a variety of hardware architectures and systems including, but not limited to, ARM, PowerPC, and RISC based architecture families.
- a heuristic path is utilized for the emulation path traversal. These heuristic paths can include, but are not limited to, shortest path, longest path, longest reachable path, specific property path, predictive look ahead path, and/or weighted paths based on various aspects like function calls and data writes.
- the emulated system begins at the same state for each evaluation in order to replicate results.
- the symbolic analyzer logic 262 can process the disassembled code and determine various actions that would be done to hardware via emulation such as, but not limited to, register/flag changes. Through the symbolic representation, it can be determined what each part of the emulated machine is doing during the processing of the disassembled code data. By way of example, it can be determined that two items within memory were added together to make a new value. Such emulation allows the generation of a full symbolic logic description of each part of the disassembled code data. Further chaining of the symbolic logic can yield a map of all changes within an emulated system which may allow a user to track the relationships between the inputs and outputs of a suspected binary object.
- the symbolic analyzer logic 262 analyzes, fully evaluates, and generates full symbolic logic for each part of the disassembled code data
- the final symbolic representation data can be larger than the input data of the disassembled code data, which is itself typically larger than the suspected binary object.
- the increased size of the symbolic representation may reduce the efficiency in processing and contain irrelevant data for the determination of a suspected binary object's attributes.
- morphologic reducer logic 263 may be utilized to accept incoming symbolic representation data and eliminate portions of the symbolic representation data that may not be necessary for further processing and analysis.
- morphologic reducer logic such as that provided in The Z3 Theorem ProverTM by Microsoft Corporation of Redmond, Wash. for example or any other satisfiability modulo theories (“SMT”) solver.
- the morphologic reducer logic 263 may process the symbolic representation data by classifying such data into multiple classes.
- the morphologic reducer logic 263 can reduce input data into categories based on whether a function reads or writes to memory, whether a function calls or returns from a function, and/or other function processes that are similar across all functions. Once classified, each category of data can be further processed and/or eliminated based on certain pre-determined rules set by either the system or the user.
- the morphologic reducer logic 263 may have rules set up to disregard functions that read from the disk and/or to eliminate data relating to functions based on what functions they return from.
- rules governing the morphologic reducer logic 263 can be set up to eliminate elements of the symbolic representation data that may be similar to many other, if not virtually all other function data. For example, certain aspects of binary objects may all have similar calls to various compiler specific functions necessary for normal operation. Because many functions may share similar elements, the possibility of extracting useful information from these aspects of the suspected binary object is extremely low and can typically be eliminated from further processing. Morphologic reducer logic 263 can be set up with predetermined rules from a user/system administrator based on what elements are not valuable for recognizing the functional behavior of binary object analysis.
- the output data of the morphologic reducer logic 263 is then a simplified set of equations compared to the input symbolic representation data.
- These relatively simple list of equations can be considered a symboliks list wherein each individual equation can be considered a “symbolik”
- the entire package of symboliks can be considered a single symboliks function object or “symfunc object.”
- the symfunc object is still in a human-readable state which can illustrate the potential actions of a suspected binary object if it was run within a system similar to the emulated system utilized in the symbolic analyzer logic 262 .
- the symfunc object data can further be abstracted through the use of symfunc hash generator logic 264 which can take the symfunc object data and output a plurality of hashes for further analysis.
- the symfunc hash generator logic 264 accepts symfunc object data as input and outputs a plurality of symfunc hash values as output.
- the hashes can be 128-bit hash values similar to message-digest 5 (“MD5”) hashes and can be generated using MD5 algorithms.
- MD5 message-digest 5
- Those skilled in the art will recognize that alternative hashing methods may be utilized to further abstract the symfunc object data for use in further classifications.
- the generated symfunc hash values can be obtained by hashing the entire symfunc object data input.
- multiple symfunc hash values may be generated by hashing multiple subsets of the symfunc object data.
- the amount of hashes produced can be a function of the size of the suspect binary object and resulting symfunc object, but in some embodiments, the amount of hashes generated could also be related to the complexity of the functions within the suspect binary object as well.
- the generated symfunc hash values can be used as input to classifier logic 265 which can compare the generated symfunc hash values against other known symfunc hash values for large scale classification of the suspect binary object.
- Classifier logic 265 may be configured, in one or more embodiments, to accept a plurality of input symfunc hash values and compare the input symfunc hash values to previously generated symfunc hash values. This comparison is conducted to classify the input symfunc hash values based on their similarity to the previously generated symfunc hash values.
- classifier logic 265 can generate classification data based on multiple methods of analysis including, but not limited to, a specific method and/or a weighted method.
- the classifier logic 265 can generate data relating to the number of matches found of the input symfunc hash value against the previously generated ones.
- certain characteristics relating to the similarity of the input symfunc hash value to previously generated hashes can be determined based on the number of matches between them.
- a symfunc hash value that matches with over a thousand other previously generated symfunc hash values may show that this particular symfunc hash value (and associated suspect binary object) may be common and less of a threat.
- an input symfunc hash value that does not match to any other previously generated hashes will likely not be able to be correlated in meaningful ways.
- an input symfunc hash value has a match with other previously generated symfunc hash values that is above a first lower pre-determined threshold, but below another higher pre-determined threshold, a strong correlation can be found between the compared symfunc hash values.
- such a symfunc hash value can be understood as an “anchor hash value.”
- both the higher and lower pre-determined thresholds can be of any value that sufficiently creates a correlation between the input symfunc hash value and the previously generated symfunc hash values and can vary based upon the type of application and results desired by the user/system administrator. The only requirement is that the lower threshold is quantitatively lower than the upper threshold.
- a “match” may be utilized in various ways depending on the application.
- a match may be found by a direct correlation between hash values and/or partial hash values.
- a match may be a prescribed level of correlation based on a pre-determined threshold set by the user and/or system administrator.
- a “fingerprint” may be construed as a plurality of indicators that collectively identify an object under analysis against other malware family fingerprints. Malware similarity analysis that can be utilized in accordance with embodiments of the invention are described in U.S. patent application Ser. No. 15/280,854, filed Sep.
- lower and upper thresholds may be other values that correspond to alternative forms of matching.
- classifier logic 265 may stop further analysis when an anchor hash value has been found. In the absence of anchor hash values, classifier logic 265 may proceed with a weighted analysis of the symfunc hash values based on the number of matches. Such weighted analysis can be accomplished through the use of statistical tools including a Jaccard index and/or Tanimoto distance, although any number of methods can be utilized to determine the relative relationship between the two sets of data.
- the system 210 may initiate response logic 266 to take a number of actions including, but not limited to, communicating the findings based on the type of classification data present. For example, the presence of an anchor hash value may allow the system 210 to take immediate steps without further user/system administrator input.
- Classification data that includes weighted analysis data may be sent via the system I/O 230 to a user/system administrator for further review.
- other remedial actions may occur such as quarantining the analyzed binary object, generating a hunt for the binary object throughout the network, and/or ceasing or preventing further processing of the binary object within the system.
- the process 300 as outlined can be accomplished by a variety of devices and methods, including by the device outlined in FIG. 2 .
- the process 300 typically begins when it is determined 310 that a binary object is to be evaluated as potentially malicious. In certain embodiments, this can occur in response to the determination of certain characteristics of the binary object (if it was part of common suspicious network content, other payload data, etc.).
- the determination 310 is accomplished by the MCD system itself. In other embodiments, an outside system determines 310 the binary objects for evaluation and passes them to the MCD.
- the MCD system can receive 320 suspicious binary objects for evaluation from remote sources or local devices and/or systems through any viable transmission medium. In response to the receiving 320 of a suspicious binary object, the MCD can then evaluate 330 the resultant hash values derived from the binary object to determine if the binary object is malicious. It is contemplated that the triggers or other thresholds of what is considered malicious by the MCD can be set or adjusted by the user/system administrator. By way of example and not limitation, thresholds may be adjusted periodically on a schedule or aperiodically as needed in response to immediate threats and/or updates. Further, the thresholds may be static or dynamic in nature based on the application. In a number of embodiments, the updating may be done online through a remote updating service.
- the updating may be offline and occur via a variety of methods including, but not limited to, updates delivered via thumb drives inserted into the MCD, updates by system administrators via intranet connections, and/or through self-generated updates based on determined variables of the evaluation environment.
- the evaluation 330 of the binary object is outlined in more detail in FIG. 4 .
- the binary object may be passed along for further processing or execution.
- the MCD can respond by quarantining 350 the binary object and/or generating an alert as defined by the user/system administrator.
- the malware detection logic can receive a suspicious binary object for evaluation (block 405 ).
- Binary disassembler logic can disassemble the binary object into opcodes and other disassembled code data including function lists, function calls, function start and end points, as well as control flow graphs of every function (block 410 ).
- Binary disassembler logic can then provide the disassembled code to a symbolic analyzer logic (block 415 ).
- the symbolic analyzer can generate symbolic representation data of each piece of disassembled code data (block 420 ).
- the symbolic representation data can utilize the opcodes and memory maps to analyze the disassembled code data within an emulated system based on pre-determined paths.
- the symbolic analyzer logic can provide the generated symbolic representation data to a morphologic reducer for further processing (block 425 ).
- the system may provide the symbolic representation data to the morphologic reducer in pieces as it is generated.
- the morphologic reducer logic can produce a symfunc object from the provided symbolic representation data (block 430 ).
- the morphologic reducer logic can accomplish this by classifying and removing data from the set of symbolic representation data based on those classifications. The purpose of this reduction is to make the dataset under analysis more manageable, to further abstract out the core functional behavior of the suspicious binary object, and to reduce the elements of the data that are likely common to all similar binary objects and thus, will likely yield little information that would be useful during the later classification steps.
- a morphologic reducer may be presented with multiple symbolic representations produced from different binary codes.
- the binary codes may share similar operations (for example, calling a function) but execute them in a different manner.
- the abstraction process attempts to reduce these differences away such that the semantic behavior of the function can be identified and analyzed.
- the morphologic reducer logic upon reduction, can provide the generated symfunc objects to a symbolic hash generator (block 440 ).
- the symbolic hash generator logic generates symfunc hash values out of the received symfunc objects (block 445 ).
- Many symfunc hash values can be generated from a single symfunc object based on various attributes such as, but not limited to, the size of the symfunc object, the complexity of the symfunc object, and/or settings pre-defined by the user/system administrator.
- the symfunc hash generator can provide the symfunc hash values to symfunc classifier logic (block 450 ).
- the classifier logic will take the provided symfunc hash values and compare them against previously known symfunc hash values (block 455 ).
- the previously known symfunc hash values typically comprise previously generated hashes that were classified and categorized and are constantly updated with newly generated and classified symfunc hash values. Based on the comparison, the classifier logic can determine if the symfunc hash value exceeds any pre-determined thresholds regarding the number of matches found against the known symfunc hash database (block 460 ). In many embodiments, the entire hash is compared against the entirety of the other hashes in the symfunc database.
- a location sensitive hashing could be utilized to evaluate based on only a portion of the generated symfunc hash.
- a “match” may be utilized in various ways depending on the application including determining a prescribed level of correlation based on a pre-determined threshold set by the user and/or system administrator. The user/system administrator can set up these thresholds as needed based on the type of classification desired. Even if no thresholds are met, the classifier logic further weights the symfunc against the previously generated symfunc database in order to classify the provided symfunc hash (block 465 ).
- classification data is generated upon classifying the provided symfunc hash. It is contemplated that the classification data generated comprises determined threat level, certainty data, matching symfunc hash data, potential code family relationship data, and/or potential origin data. Based on the classification data generated, the classifier logic can respond based on a set of pre-determined response actions or can provide the data to an outside system that responds to the classification data (block 470 ).
- the system may allow the binary object to pass and proceed with transmission, reception, and/or execution.
- the system may respond to a classification of a symfunc hash value as malicious in any number of ways, including, but not limited to, quarantining the binary object the symfunc hash value was generated from, generating a report for evaluation by the user/system administrator, adding the symfunc hash value to the collection (e.g., data store or database) of known symfunc hash values, and/or generating an alert to other cybersecurity analysists, and/or providing the associated malicious binary object and associated data to a malware hunting service.
- quarantining the binary object the symfunc hash value was generated from generating a report for evaluation by the user/system administrator
- adding the symfunc hash value to the collection (e.g., data store or database) of known symfunc hash values, and/or generating an alert to other cybersecurity analysists, and/or providing the associated malicious binary object and associated data
- the responsive action may include, but is not limited to, generating a report/alert, implementing a remedial action (quarantine, network hunt, halting processing, etc.) and/or generating a signature of the binary object.
- the resulting symfunc hash values could be provided to reverse engineering services that may attempt to group similar symfunc hash values in an attempt to classify binary samples, e.g. within a known malware family.
- each step of this evaluation 400 can be accomplished over multiple devices, either remotely or entirely within a single logical framework.
- the database of previously generated symfunc hash values can be located within a central store and accessed remotely for evaluation.
- the receiving 405 of a suspicious binary object for evaluation may be delivered by an end user device to an MCD that is remotely located.
- the evaluation 400 can be accomplished within a front-line appliance in a network.
- the entire evaluation 400 can be embedded and accomplished in the background of another process.
- a binary sample can be uploaded to a global data store re-classification system that may reevaluate the binary sample.
- FIG. 5 a simplified input/output flowchart 500 of the various malware detection logics and their respective inputs and outputs is shown. This process is similar to the process depicted in FIG. 4 , but better highlights the relationship between the various malware detection logics and the types of data that they process.
- the binary disassembler 510 Upon receipt of a suspicious binary object for evaluation, the binary disassembler 510 generates disassembled code 515 which may contain opcodes, control flow graphs, extracted string and integer constants (for elimination from analysis), and other data relating to the functions.
- the disassembled code data 515 is fed into a symbolic analyzer logic 520 that processes and expands the disassembled code data 515 into symbolic representation data 525 .
- the symbolic representation data 525 contains further abstracted data relating to the disassembled code data 515 comprising an abstract syntax tree (“AST”) and a list of symboliks which themselves comprise the relationships between the inputs and outputs of each function, describing what every piece of the emulated machine is doing in response to the binary object. These inputs and outputs include passed in arguments, local variables, etc.
- the symbolic representation data 525 is fed into a morphologic reducer logic 530 that attempts to eliminate excessive pieces of data and package the data into reduced symfunc object data 535 .
- the elimination of elements of the symbolic representation data 525 can be accomplished through the classification of functions and their actions, allowing for the generating of rule sets that can eliminate aspects of the functions for analysis based on the needs of the user/system administrator.
- the reduced symfunc object data 535 is then sent to a symfunc hash generator 540 that generates at least one, but perhaps many symfunc hash values 545 .
- the symfunc hash values can be typical 128-bit hashes but can vary in size and complexity as needed.
- the hashing process in order to facilitate comparable results suitable for later comparison and classification, should follow a static, repeatable order/ruleset.
- the hashing process can order the symfunc object in a serial fashion with a first classified type of function placed first, followed by a second type of function, etc.
- a canonical representation is utilized for the hashing process.
- the type or ruleset or order does not have to be limited and is only limited by the usefulness of the results based on the hashing process used in the hashes stored in the database.
- Generated symfunc hash values 545 are eventually given to the classifier logic 550 which then classifies the symfunc hash values based on a comparison against a database of known symfunc hash values.
- the classifier logic 550 generates classification data 555 that can then be transmitted to another set of logic or used internally by the classifier logic 550 to generate a response to the classification.
- the response can be to let the binary object associated with the classified binary hash pass if it not determined to be malicious.
- the classification data can be used to generate a report based on any number of behaviors that were pre-determined by the user/system administrator in the case of a finding of malicious binary objects.
- FIG. 6 an exemplary classification flowchart 600 of the various malware detection logics and their respective inputs and outputs is shown.
- the classification flowchart 600 depicted is similar to operations 450 through 470 depicted in FIG. 4 , although it is contemplated that other embodiments of this flowchart can be utilized based on the needs of the particular application by the user/administrator.
- the system may begin the process of comparing the received symfunc hash value against the previously generated and stored, known symfunc hash values (blocks 605 and 610 ).
- the comparison typically produces data relating to the number of matches the symfunc hash value obtains, along with data relating to the matched symfunc hash values.
- the classifier logic counts the number of matches to determine the next operation (block 620 ). It is contemplated that the comparison may be done remotely by sending the received symfunc hash value to a remote system that has a local copy of the symfunc database and sends back data relating to the matches and counts.
- a “match” may be realized through various methods depending on the application including determining a prescribed level of correlation based on a pre-determined threshold set by the user and/or system administrator.
- the user/system administrator has set both a low and high threshold for the matching evaluation.
- the system may determine that there is not enough information to make a useful correlation between the suspect symfunc hash value and the known symfunc hash, determining it to be a singleton or contain low information (block 622 ), which then ends the process and generates common weighted classification data that can be sent to an analyzer for further evaluation (block 623 ).
- the system may determine whether no differential information was found (block 627 ), which also ends the process causing the system to generate common weighted classification data that can be sent to an analyzer for further evaluation (block 628 ).
- the system may then draw a stronger correlation between the received symfunc hash value and the previously generated and known symfunc hash values in the database that were a match.
- this situation can be considered an “anchor match” which can be utilized to create automatic responses and actions not otherwise available in other matches.
- an anchor match the system may automatically determine and associate the received symfunc hash value attributes with the matched symfunc hash values and corresponding binary objects (block 630 ). Further, an anchor match may be automatically stored as another data point in the known symfunc database (block 635 ). Additionally, anchor matches may allow the system to automatically determine if the received symfunc hash value is malicious (block 640 ). In cases where the anchor match was to non-malicious binary objects, the process ends (block 641 ) and no further actions are attempted. Alternatively, when the anchor match is to known malicious code, the system can automatically execute pre-determined responsive behaviors that were requested by the user/system administrator. It is contemplated that data associated with the symfunc objects utilized in the anchor match (code family, type of threat, level of threat, etc.) are utilized to determine what responsive actions are executed (block 642 ).
Abstract
A device for classifying malware including a processor, and a storage device storing a plurality of previously classified symfunc hash values and malware detection logic which attempts to classify malicious code by utilizing binary disassembler logic processed by the processor. Binary disassembler logic can be configured to receive a suspicious binary object and disassemble the binary object into disassembled code data, while symbolic analyzer logic can be configured to receive the disassembled code data and generate symbolic representation data. Generation logic can be configured to receive the symbolic representation data and generate at least one symfunc hash value based on the symbolic representation data. Finally, classification logic can be configured to receive at least one symfunc hash value, compare the symfunc hash value against previously classified symfunc hash values, and determine if the binary object comprises malicious code based on the associated symfunc hash value. The reporting logic can issue an alert reporting the malicious code or initiate the execution of a pre-determined action.
Description
This application claims priority to U.S. Provisional Patent Application No. 62/784,231, filed Dec. 21, 2018, titled “Determining Malware Via Symbolic Function Hash Analysis,” the disclosure of which are hereby incorporated herein by reference in its entirety.
Embodiments of the disclosure relate to the field of network security. More specifically, one embodiment of the disclosure relates to a system, apparatus and method for determining the presence of malware within a binary object.
Over the last decade, malicious software (malware) has become a pervasive problem for Internet users. In some situations, malware is a program or file that is embedded within downloadable content and designed to adversely influence (i.e. attack) normal operations of a computer. Examples of different types of malware may include bots, computer viruses, worms, Trojan horses, spyware, adware, or any other programming that operates within the computer without permission.
For instance, content may be embedded with objects associated with a web page hosted by a malicious web site. By downloading this content, malware causing another web page to be requested from a malicious web site may be unknowingly installed on the computer. Similarly, malware may also be installed on a computer upon receipt or opening of an electronic mail (email) message. For example, an email message may contain an attachment, such as a Portable Document Format (PDF) document, with embedded executable malware. Also, malware may exist in files infected through any of a variety of attack vectors, which are uploaded from the infected computer onto a networked storage device such as a file share.
Over the past few years, various types of security methods have been deployed that have attempted to find malware within files or other network content. Often, these methods compare a segment of code to a previously known segment that has already been determined to be malicious. While sometimes effective, these methods are often “brittle,” meaning that changes, even very slight changes to the code may not yield a match and thus become a false negative result, allowing a system to become vulnerable to the changed code. These changes to codes may be done on purpose by the malware creators to evade detection, or they may be the result of changes in the tools used to create the malware. In other cases, even slight changes by the malware creators, including updating their compiler programs, may alter the final malware code just enough to evade detection by brittle systems.
Embodiments of the invention are illustrated by way of example and not by way of limitation in the figures of the accompanying drawings, in which like references indicate similar elements and in which:
Various embodiments of the disclosure relate to a process configured to generate and analyze a symbolic function (“symfunc”) hash from a given piece of binary code. In general, the generation of the symfunc hash value is compared against previously logged symfunc hash values to associate the potential behaviors of a newly generated symfunc hash value to those previously generated, stored, and/or documented. Based on this method, the detection of malware in accordance with the invention avoids being “brittle,” thereby making the detection technique less susceptible to evasion techniques such as modification of the malware code. This process can be accomplished through a series of data processing steps that can be accomplished within a malware content detection (“MCD”) system.
One feature of the present invention is to generate an abstraction of a suspected binary object that can be compared to other abstractions of potentially related binary objects. The abstraction process can be accomplished in such a way that reliable information about the suspected binary object can be determined. This process can be enhanced by filtering non-differentiating features from the generated abstraction such that unique and/or differentiating features can be more easily determined and compared against similarly abstracted objects. This abstraction may be improved by analyzing and abstracting the suspected binary objects based on the contained functions and corresponding calls to and from the object, as well as examining various reads and writes to memory. In this way, small changes in the suspected binary object may be abstracted out of the final hash value used for comparison against other previously analyzed binary objects.
More specifically, the MCD system can be configured to receive a plurality of binary code samples for analysis, which are then disassembled into various opcodes or other disassembled code data. The opcodes, or other disassembled code, may then be processed by the MCD to be further abstracted into a symbolic representation as a list of short equations (“symboliks”). The symboliks may then be further abstracted into a symfunc object by the MCD. In order to reduce an amount of time needed for processing and/or analysis, the symfunc object undergoes a hash operation through a specific and repeated heuristic method to generate a manageable symfunc hash value.
After the generation, the symfunc hash value may be compared to a collection of previously generated symfunc hash values, related to previously detected malware, to associate known characteristics of a code family to the symfunc hash values generated from the binary code sample. Thus, characteristics of the binary code sample can be determined from the comparison of the symfunc hash value generated from the process outlined in the instant application. These determined characteristics can include whether the binary code sample contains malicious code including, but not limited to, keylogging, worms, trojan horses, and/or viruses.
According to one embodiment of the disclosure, previously generated symfunc hash values can be stored within a single central data store or database and utilized for comparison either on a front-line appliance, or remotely as a service. Each symfunc has data associated with its corresponding binary object that was used to generate the symfunc hash. The entire symfunc hash data store can be over one terabyte in size, and be publicly available, internally up kept, or publicly available while supplemented with private data.
Known symfunc hash values can be utilized to group binary objects associated with the known symfunc hash values to code family groups. These code families can be utilized to more easily determine the source of a malicious binary object. Code families are typically grouped by human analysts based on similar “fingerprints” or structure of code including, but not limited to, morphology, targets and methods of attack. One aspect of the present invention is to automatically generate associations of binary objects to code families based on matches found in a symfunc database. In this way, a faster determination of the source of a malicious binary object (from a hostile nation state, etc.) is possible.
In the following description, certain terminology is used to describe features of the invention. For example, in certain situations, the terms “logic” and “engine” are representative of hardware, firmware or software that is configured to perform one or more functions. As hardware, logic may include circuitry such as processing circuitry (e.g., a microprocessor, one or more processor cores, a programmable gate array, a microcontroller, an application specific integrated circuit, etc.), wireless receiver, transmitter and/or transceiver circuitry, semiconductor memory, combinatorial logic, or other types of electronic components.
Alternatively, or in combination with the hardware circuitry described above, the logic (or engine) may be software in the form of one or more software modules. The software modules may include an executable application, a daemon application, an application programming interface (API), a subroutine, a function, a procedure, an applet, a servlet, a routine, source code, a shared library/dynamic load library, or even one or more instructions. The software module(s) may be stored in any type of a suitable non-transitory storage medium, or transitory storage medium (e.g., electrical, optical, acoustical or other form of propagated signals such as carrier waves, infrared signals, or digital signals). Examples of non-transitory storage medium may include, but are not limited or restricted to a programmable circuit; a semiconductor memory; non-persistent storage such as volatile memory (e.g., any type of random access memory “RAM”); persistent storage such as non-volatile memory (e.g., read-only memory “ROM”, power-backed RAM, flash memory, phase-change memory, etc.), a solid-state drive, hard disk drive, an optical disc drive, or a portable memory device. As firmware, the executable code may be stored in persistent storage.
The term “network content” generally refers to information transmitted over a network, proprietary or public (e.g. the Internet). The network content may present as one or more messages, namely a grouping of information that comprises a header and a payload, such as any of the following: a packet; a frame; a stream being a sequence of packets or frames; an Asynchronous Transfer Mode “ATM” cell; or any other series of bits having a prescribed format. The “payload” is generally defined as including the data associated with the message such as text, software, an image, an object, audio, video, a Uniform Resource Locator (URL), or other types of digital data. The “header” is generally defined as including control information. However, the specific types of control information depend on the network content type.
Other examples of network content include email, which may be transmitted using an email protocol such as Simple Mail Transfer Protocol (SMTP), Post Office Protocol version 3 (POP3), or Internet Message Access Protocol (IMAP4). A further example of network content includes an Instant Message, which may be transmitted using Session Initiation Protocol (SIP) or Extensible Messaging and Presence Protocol (XMPP) for example. Yet another example of network content includes one or more files that are transferred using a data transfer protocol such as File Transfer Protocol (FTP) for subsequent storage on a file share. Where the network content is email, Instant Message or a file, the header may include the sender/recipient address, the sender/recipient phone number, or a targeted network location of the file, respectively.
The term “malware” is directed to software that produces an undesirable behavior upon execution, where the behavior is deemed to be “undesirable” based on customer-specific rules, manufacturer-based rules, or any other type of rules formulated by public opinion or a particular governmental or commercial entity. This undesired behavior may include a communication-based anomaly or an execution-based anomaly that (1) alters the functionality of an electronic device executing that application software in a malicious manner; (2) alters the functionality of an electronic device executing that application software without any malicious intent; and/or (3) provides an unwanted functionality which is generally acceptable in other context.
The term “transmission medium” is a communication path between two or more systems (e.g. any electronic devices with data processing functionality such as, for example, a security appliance, server, mainframe, computer, netbook, tablet, smart phone, router, switch, bridge or router). The communication path may include wired and/or wireless segments. Examples of wired and/or wireless segments include electrical wiring, optical fiber, cable, bus trace, or a wireless channel using infrared, radio frequency (RF), or any other wired/wireless signaling mechanism.
The term “object” generally refers to content in the form of an item of information having a logical structure or organization that enables it to be classified for purposes of analysis for malware. One example of the object may include an email message or a portion of the email message. Another example of the object may include a storage file or a document such as a Portable Document Format (PDF) document, a word processing document such as Word® document, or other information that may be subjected to cybersecurity analysis. The object may also include an executable such as an application, program, code segment, a script, dynamic link library “dll,” URL link, or any other element having a format that can be directly executed or interpreted by logic within the electronic device.
Lastly, the terms “or” and “and/or” as used herein are to be interpreted as inclusive or meaning any one or any combination. Therefore, “A, B or C” or “A, B and/or C” mean “any of the following: A; B; C; A and B; A and C; B and C; A, B and C.” An exception to this definition will occur only when a combination of elements, functions, steps or acts are in some way inherently mutually exclusive.
As this invention is susceptible to embodiments of many different forms, it is intended that the present disclosure is to be considered as an example of the principles of the invention and not intended to limit the invention to the specific embodiments shown and described.
Referring to FIG. 1 , an exemplary system diagram of a communication network 100 deploying a plurality of malware content detection (MCD) devices 110 communicatively coupled to a transmission medium such as a network, e.g., the Internet 120. The MCD devices 110 may also be as communicatively coupled with other electronic devices over private and/or public transmission mediums, such as electronic portable computers 170 or portable cellular phones 160 either through a direct connection or via a wireless network access point 150. The MCD device 110 may also be communicatively coupled to a personal computing system 130 over the Internet 120. Some personal computers 130 may also be commutatively coupled to a local MCD 140.
Each MCD device 110 can be adapted in many embodiments to receive and process binary code samples taken from network content for potential malicious code in real-time or at least near real-time. The network content is considered to be “suspicious” when a portion of the network content (e.g. payload data) is determined, with a certain level of likelihood, to include malware. In further embodiments, the binary code and/or binary content can be provided in an offline process such as, but not limited to, a user/system administrator presenting the data to be processed in the form of a drive coupled to the MCD device 110.
According to this embodiment of the communication network, a remote MCD system 110 may be a web-based security appliance that is configured to inspect ingress data traffic, identify whether any artifacts of the data traffic may include malware, and if so, analyze at least those artifacts. Unlike typical methods, this analysis does not need to be conducted in a virtual machine execution environment to detect anomalous behaviors that would be present if the data traffic were actually processed by an electronic device. Instead, the MCD system 110 may generate a symfunc hash value and compare it to previously generated symfunc hash values. The particulars of this analysis are described below.
As shown in FIG. 1 , the MCD system 110 may be deployed as an inline security appliance (not shown) or coupled to a network as a local MCD device 140 via a network tap (e.g., a data/packet capturing device). In some embodiments, the local MCD device 140 may be integrated into a remote MCD system 110, provided as a standalone component, or integrated into different network components such as a firewall, a router, a switch or other type of network relay device such as a wireless network access point 150. The local MCD device 140 may include a digital network tap configured to monitor network content (data traffic) and provide a copy of the data traffic along with its meta-information to a remote MCD system 110 or cluster of MCD systems 110 for analysis. The data traffic may comprise signaling transmitted over the Internet 120, including data from/to remote servers.
As further shown in FIG. 1 , a personal computer may have an internal MCD system installed either as a communication-based security appliance or as software capable of delivering instruction to the processor to function similar to an MCD device 110. Such configurations can allow personal desktop computers 130 to analyze and report suspicious network content, such as malware within an incoming communication message (e.g., email message, short message service “SMS” message, etc.). As shown, second MCD system 110 2 may be positioned within a message transfer agent (MTA) deployed in network 130 as shown or connected to network 130 via a network tap.
It is contemplated that one or more MCD devices 110 may be deployed across cloud computing services for malware detection as described. Furthermore, it is contemplated that the functionality of one or more MCD devices 110 may be incorporated into another management system when malware detection is to be conducted at a centralized resource.
Referring now to FIG. 2 , an exemplary hardware block diagram of a malware content detection (MCD) device system 200. The MCD device 210 and respective hardware can be similar to the MCD devices 110, 140 as depicted and discussed in FIG. 1 . The MCD device 210 comprises one or more processors (e.g., CPU) 220, which is coupled to communication input/output interfaces 230 as well as to a persistent memory system 240. Within the persistent memory system 240 of the embodiment depicted in FIG. 2 , various logics may be provided including an OS logic (referred to as “OS memory”) 250, and a malware detection logic 260. The malware detection logic 260 further comprises binary disassembler logic 261, symbolic analyzer logic 262, morphologic reducer logic 263, symbolic hash generation logic (referred to as “symbolic hash generator”) 264, threat classification logic (referred to as “classifier”) 265, and response logic 266.
The input/output interface 220 can enable communications with other components including other MCD systems 110, 140 as depicted in of FIG. 1 as well as other electronic devices over private and/or public networks like the Internet 120. According to one embodiment of the disclosure, the input/output (I/O) interface 230 may be implemented as a physical interface including one or more ports for wired connectors. Alternatively, the entire MCD system 210 can be implemented as software and the input/output interface is implemented as a digital communication logic between the MCD device 210 and other software interfaces. Additionally, or in the alternative, the I/O interface 230 may be implemented with one or more radio units for supporting wireless communications with other electronic devices.
In certain embodiments, the processor 220 can be communicatively coupled to persistent storage 240 over an external transmission medium via the I/O interface 230. According to one embodiment of the disclosure, the persistent storage 240 may load the malware detection logic 260 within a volatile memory for execution. Of course, in embodiments where the logic is implemented as hardware, malware detection logic 260, including the sub components of the binary disassembler 261, the symbolic analyzer 262, morphologic reducer 263, symbolic function hash generator 264, and (threat) classifier 265 would be implemented separately from persistent memory 240.
The malware detection logic 260 may be comprised of many sub-components or sub-systems with internal logic suited for particular tasks. In one embodiment illustrated in FIG. 2 , the malware detection logic 260 comprises separate binary disassembler logic 261, symbolic analyzer logic 262, morphologic reducer logic 263, symbolic hash generator logic 264, classifier logic 265, and response logic 266.
In many embodiments, the binary disassembler logic 261 can accept suspect binary objects as an input and disassemble the binary object into a series of opcodes along with other data including functional meta-information such as function start and end points along with various function calls. The disassembly can be accomplished through a variety of methods, but typically involves recursive code flow disassembly. Such disassembly can utilize tools including, but not limited to customized builds of readily available commercial or open source disassembler tools. In some embodiments, the disassembler logic 261 can be located within a separate system or MCD device 210. In these embodiments, the input binary objects may be passed across a network or other communication channel to the remote binary disassembler logic for processing and return.
The types of output data from the binary disassembler logic 261 can also include a serial list of functions, a cross-reference list to other functions called or referenced. Additional embodiments may extract string and integer constants from functions for further analysis or elimination. Finally, many embodiments of the binary disassembler logic 261 can generate a control flow graph (CFG) of every function within the suspect binary object input. Collectively, all of these opcodes, CFGs, lists, and other meta-information can be contained and/or classified as disassembled code data for passing to other components for further processing.
For example, symbolic analyzer logic 262 can accept disassembled code data as input generated from the binary disassembler logic 261 or elsewhere either locally or remotely. Symbolic analyzer logic 262 can generate semantic representations of the input functions as symbolic representation data, which allows for a further abstraction of the suspect binary object.
This process can be accomplished in numerous ways. In many embodiments, the symbolic analyzer logic 262 can generate an emulation environment of actual hardware and attempt to determine what the symbolic execution would be for a given path. In certain embodiments, the emulation is a representation of a given hardware system at a particular, pre-determined state. In other embodiments, a full virtualization environment could be utilized. The symbolic analyzer logic 262 can emulate a variety of systems including Intel® X86 and X64 style architectures. It would be well understood to those skilled in the art that similar emulation methods could be extended to any of a variety of hardware architectures and systems including, but not limited to, ARM, PowerPC, and RISC based architecture families.
It would be understood by those skilled in the art, that when utilizing an emulation system, the problem of what code path to take is present. Depending on the complexity of the function involved, the number of potential options and paths increases exponentially and can become unwieldy to compute. In many embodiments, a heuristic path is utilized for the emulation path traversal. These heuristic paths can include, but are not limited to, shortest path, longest path, longest reachable path, specific property path, predictive look ahead path, and/or weighted paths based on various aspects like function calls and data writes.
In a number of embodiments, the emulated system begins at the same state for each evaluation in order to replicate results. The symbolic analyzer logic 262 can process the disassembled code and determine various actions that would be done to hardware via emulation such as, but not limited to, register/flag changes. Through the symbolic representation, it can be determined what each part of the emulated machine is doing during the processing of the disassembled code data. By way of example, it can be determined that two items within memory were added together to make a new value. Such emulation allows the generation of a full symbolic logic description of each part of the disassembled code data. Further chaining of the symbolic logic can yield a map of all changes within an emulated system which may allow a user to track the relationships between the inputs and outputs of a suspected binary object.
Because the symbolic analyzer logic 262 analyzes, fully evaluates, and generates full symbolic logic for each part of the disassembled code data, the final symbolic representation data can be larger than the input data of the disassembled code data, which is itself typically larger than the suspected binary object. In many instances the increased size of the symbolic representation may reduce the efficiency in processing and contain irrelevant data for the determination of a suspected binary object's attributes. In many embodiments, in order to reduce the amount of irrelevant data to process, and to speed up the eventual parsing and processing of the remaining steps in the evaluation process, morphologic reducer logic 263 may be utilized to accept incoming symbolic representation data and eliminate portions of the symbolic representation data that may not be necessary for further processing and analysis. Those skilled in the art will recognize morphologic reducer logic, such as that provided in The Z3 Theorem Prover™ by Microsoft Corporation of Redmond, Wash. for example or any other satisfiability modulo theories (“SMT”) solver.
In a number of embodiments, the morphologic reducer logic 263 may process the symbolic representation data by classifying such data into multiple classes. By way of example and not limitation, the morphologic reducer logic 263 can reduce input data into categories based on whether a function reads or writes to memory, whether a function calls or returns from a function, and/or other function processes that are similar across all functions. Once classified, each category of data can be further processed and/or eliminated based on certain pre-determined rules set by either the system or the user. By way of example and not limitation, the morphologic reducer logic 263 may have rules set up to disregard functions that read from the disk and/or to eliminate data relating to functions based on what functions they return from. Typically, rules governing the morphologic reducer logic 263 can be set up to eliminate elements of the symbolic representation data that may be similar to many other, if not virtually all other function data. For example, certain aspects of binary objects may all have similar calls to various compiler specific functions necessary for normal operation. Because many functions may share similar elements, the possibility of extracting useful information from these aspects of the suspected binary object is extremely low and can typically be eliminated from further processing. Morphologic reducer logic 263 can be set up with predetermined rules from a user/system administrator based on what elements are not valuable for recognizing the functional behavior of binary object analysis.
The output data of the morphologic reducer logic 263 is then a simplified set of equations compared to the input symbolic representation data. These relatively simple list of equations can be considered a symboliks list wherein each individual equation can be considered a “symbolik” The entire package of symboliks can be considered a single symboliks function object or “symfunc object.” Typically, in this state, the symfunc object is still in a human-readable state which can illustrate the potential actions of a suspected binary object if it was run within a system similar to the emulated system utilized in the symbolic analyzer logic 262. In order to make the process scalable, the symfunc object data can further be abstracted through the use of symfunc hash generator logic 264 which can take the symfunc object data and output a plurality of hashes for further analysis.
In a number of embodiments, the symfunc hash generator logic 264 accepts symfunc object data as input and outputs a plurality of symfunc hash values as output. In certain embodiments, the hashes can be 128-bit hash values similar to message-digest 5 (“MD5”) hashes and can be generated using MD5 algorithms. Those skilled in the art will recognize that alternative hashing methods may be utilized to further abstract the symfunc object data for use in further classifications.
Depending on the type of analysis to be done, the generated symfunc hash values can be obtained by hashing the entire symfunc object data input. Similarly, multiple symfunc hash values may be generated by hashing multiple subsets of the symfunc object data. The amount of hashes produced can be a function of the size of the suspect binary object and resulting symfunc object, but in some embodiments, the amount of hashes generated could also be related to the complexity of the functions within the suspect binary object as well. The generated symfunc hash values can be used as input to classifier logic 265 which can compare the generated symfunc hash values against other known symfunc hash values for large scale classification of the suspect binary object.
In response to comparing an input symfunc hash value against previously generated symfunc hash values, the classifier logic 265 can generate data relating to the number of matches found of the input symfunc hash value against the previously generated ones. In many embodiments, certain characteristics relating to the similarity of the input symfunc hash value to previously generated hashes can be determined based on the number of matches between them. By way of example, and not limitation, a symfunc hash value that matches with over a thousand other previously generated symfunc hash values may show that this particular symfunc hash value (and associated suspect binary object) may be common and less of a threat. Alternatively, an input symfunc hash value that does not match to any other previously generated hashes will likely not be able to be correlated in meaningful ways. Thus, when an input symfunc hash value has a match with other previously generated symfunc hash values that is above a first lower pre-determined threshold, but below another higher pre-determined threshold, a strong correlation can be found between the compared symfunc hash values. In certain embodiments, such a symfunc hash value can be understood as an “anchor hash value.” Those skilled in the art will recognize that both the higher and lower pre-determined thresholds can be of any value that sufficiently creates a correlation between the input symfunc hash value and the previously generated symfunc hash values and can vary based upon the type of application and results desired by the user/system administrator. The only requirement is that the lower threshold is quantitatively lower than the upper threshold.
As those skilled in the art would recognize, a “match” may be utilized in various ways depending on the application. By way of example, and not limitation, a match may be found by a direct correlation between hash values and/or partial hash values. In further embodiments, a match may be a prescribed level of correlation based on a pre-determined threshold set by the user and/or system administrator. In still further embodiments, a “fingerprint” may be construed as a plurality of indicators that collectively identify an object under analysis against other malware family fingerprints. Malware similarity analysis that can be utilized in accordance with embodiments of the invention are described in U.S. patent application Ser. No. 15/280,854, filed Sep. 29, 2016, entitled “Advanced Malware Detection Using Similarity Analysis” the disclosure of which is hereby incorporated by reference in its entirety. As such, it is contemplated that lower and upper thresholds, as described above, may be other values that correspond to alternative forms of matching.
In a number of embodiments, classifier logic 265 may stop further analysis when an anchor hash value has been found. In the absence of anchor hash values, classifier logic 265 may proceed with a weighted analysis of the symfunc hash values based on the number of matches. Such weighted analysis can be accomplished through the use of statistical tools including a Jaccard index and/or Tanimoto distance, although any number of methods can be utilized to determine the relative relationship between the two sets of data.
Upon generation of the classification data, the system 210 may initiate response logic 266 to take a number of actions including, but not limited to, communicating the findings based on the type of classification data present. For example, the presence of an anchor hash value may allow the system 210 to take immediate steps without further user/system administrator input. Classification data that includes weighted analysis data may be sent via the system I/O 230 to a user/system administrator for further review. In further embodiments, other remedial actions may occur such as quarantining the analyzed binary object, generating a hunt for the binary object throughout the network, and/or ceasing or preventing further processing of the binary object within the system.
Referring to FIG. 3 , a high-level overview of the binary object evaluation process 300 is shown. The process 300 as outlined can be accomplished by a variety of devices and methods, including by the device outlined in FIG. 2 . The process 300 typically begins when it is determined 310 that a binary object is to be evaluated as potentially malicious. In certain embodiments, this can occur in response to the determination of certain characteristics of the binary object (if it was part of common suspicious network content, other payload data, etc.). In certain embodiments, the determination 310 is accomplished by the MCD system itself. In other embodiments, an outside system determines 310 the binary objects for evaluation and passes them to the MCD.
The MCD system can receive 320 suspicious binary objects for evaluation from remote sources or local devices and/or systems through any viable transmission medium. In response to the receiving 320 of a suspicious binary object, the MCD can then evaluate 330 the resultant hash values derived from the binary object to determine if the binary object is malicious. It is contemplated that the triggers or other thresholds of what is considered malicious by the MCD can be set or adjusted by the user/system administrator. By way of example and not limitation, thresholds may be adjusted periodically on a schedule or aperiodically as needed in response to immediate threats and/or updates. Further, the thresholds may be static or dynamic in nature based on the application. In a number of embodiments, the updating may be done online through a remote updating service. In further embodiments, the updating may be offline and occur via a variety of methods including, but not limited to, updates delivered via thumb drives inserted into the MCD, updates by system administrators via intranet connections, and/or through self-generated updates based on determined variables of the evaluation environment. The evaluation 330 of the binary object is outlined in more detail in FIG. 4 .
In response to the evaluation 330 of the suspicious binary object not being malicious, the binary object may be passed along for further processing or execution. Alternatively, if a suspicious binary object is evaluated 330 to be malicious, the MCD can respond by quarantining 350 the binary object and/or generating an alert as defined by the user/system administrator.
Referring now to FIG. 4 , an exemplary evaluation 400 flowchart detailing the processes of evaluating a suspicious binary object is shown. The malware detection logic can receive a suspicious binary object for evaluation (block 405). Binary disassembler logic can disassemble the binary object into opcodes and other disassembled code data including function lists, function calls, function start and end points, as well as control flow graphs of every function (block 410). Binary disassembler logic can then provide the disassembled code to a symbolic analyzer logic (block 415).
Upon receiving the disassembled code data, the symbolic analyzer can generate symbolic representation data of each piece of disassembled code data (block 420). The symbolic representation data can utilize the opcodes and memory maps to analyze the disassembled code data within an emulated system based on pre-determined paths. Upon completion of the generation of symbolic representation data, the symbolic analyzer logic can provide the generated symbolic representation data to a morphologic reducer for further processing (block 425). In certain embodiments, the system may provide the symbolic representation data to the morphologic reducer in pieces as it is generated.
The morphologic reducer logic can produce a symfunc object from the provided symbolic representation data (block 430). The morphologic reducer logic can accomplish this by classifying and removing data from the set of symbolic representation data based on those classifications. The purpose of this reduction is to make the dataset under analysis more manageable, to further abstract out the core functional behavior of the suspicious binary object, and to reduce the elements of the data that are likely common to all similar binary objects and thus, will likely yield little information that would be useful during the later classification steps. By way of example and not limitation, a morphologic reducer may be presented with multiple symbolic representations produced from different binary codes. The binary codes may share similar operations (for example, calling a function) but execute them in a different manner. The abstraction process attempts to reduce these differences away such that the semantic behavior of the function can be identified and analyzed.
The morphologic reducer logic, upon reduction, can provide the generated symfunc objects to a symbolic hash generator (block 440). The symbolic hash generator logic generates symfunc hash values out of the received symfunc objects (block 445). Many symfunc hash values can be generated from a single symfunc object based on various attributes such as, but not limited to, the size of the symfunc object, the complexity of the symfunc object, and/or settings pre-defined by the user/system administrator. In response to the generation of the symfunc hash values, the symfunc hash generator can provide the symfunc hash values to symfunc classifier logic (block 450).
In many embodiments, the classifier logic will take the provided symfunc hash values and compare them against previously known symfunc hash values (block 455). The previously known symfunc hash values typically comprise previously generated hashes that were classified and categorized and are constantly updated with newly generated and classified symfunc hash values. Based on the comparison, the classifier logic can determine if the symfunc hash value exceeds any pre-determined thresholds regarding the number of matches found against the known symfunc hash database (block 460). In many embodiments, the entire hash is compared against the entirety of the other hashes in the symfunc database. However, it is contemplated that a location sensitive hashing could be utilized to evaluate based on only a portion of the generated symfunc hash. Additionally, as outlined above, those skilled in the art would recognize, a “match” may be utilized in various ways depending on the application including determining a prescribed level of correlation based on a pre-determined threshold set by the user and/or system administrator. The user/system administrator can set up these thresholds as needed based on the type of classification desired. Even if no thresholds are met, the classifier logic further weights the symfunc against the previously generated symfunc database in order to classify the provided symfunc hash (block 465).
In response to the classifier logic determining if any thresholds were met or not, classification data is generated upon classifying the provided symfunc hash. It is contemplated that the classification data generated comprises determined threat level, certainty data, matching symfunc hash data, potential code family relationship data, and/or potential origin data. Based on the classification data generated, the classifier logic can respond based on a set of pre-determined response actions or can provide the data to an outside system that responds to the classification data (block 470).
In response to the classifier logic classifying the symfunc hash value (and the corresponding binary object it was generated from) to not be malicious, the system may allow the binary object to pass and proceed with transmission, reception, and/or execution. The system may respond to a classification of a symfunc hash value as malicious in any number of ways, including, but not limited to, quarantining the binary object the symfunc hash value was generated from, generating a report for evaluation by the user/system administrator, adding the symfunc hash value to the collection (e.g., data store or database) of known symfunc hash values, and/or generating an alert to other cybersecurity analysists, and/or providing the associated malicious binary object and associated data to a malware hunting service.
In various embodiments, the responsive action may include, but is not limited to, generating a report/alert, implementing a remedial action (quarantine, network hunt, halting processing, etc.) and/or generating a signature of the binary object. In additional embodiments, the resulting symfunc hash values could be provided to reverse engineering services that may attempt to group similar symfunc hash values in an attempt to classify binary samples, e.g. within a known malware family.
It is contemplated that each step of this evaluation 400 can be accomplished over multiple devices, either remotely or entirely within a single logical framework. By way of example and not limitation, the database of previously generated symfunc hash values can be located within a central store and accessed remotely for evaluation. In certain embodiments, the receiving 405 of a suspicious binary object for evaluation may be delivered by an end user device to an MCD that is remotely located. In some embodiments, the evaluation 400 can be accomplished within a front-line appliance in a network. In further embodiments, the entire evaluation 400 can be embedded and accomplished in the background of another process. In additional embodiments, a binary sample can be uploaded to a global data store re-classification system that may reevaluate the binary sample. Upon the determination that the initial classification was incorrect, subsequent notice and/or thresholds may be sent to MCD devices globally. Re-evaluation techniques that can be utilized in accordance with embodiments of the invention are described in U.S. patent application Ser. No. 16/222,194, filed Dec. 17, 2018, entitled “Platform and Method for Enhanced Cyber-Attack Detection and Response Employing a Global Data Store” the disclosure of which is hereby incorporated by reference in its entirety.
Referring now to FIG. 5 , a simplified input/output flowchart 500 of the various malware detection logics and their respective inputs and outputs is shown. This process is similar to the process depicted in FIG. 4 , but better highlights the relationship between the various malware detection logics and the types of data that they process.
Upon receipt of a suspicious binary object for evaluation, the binary disassembler 510 generates disassembled code 515 which may contain opcodes, control flow graphs, extracted string and integer constants (for elimination from analysis), and other data relating to the functions.
The disassembled code data 515 is fed into a symbolic analyzer logic 520 that processes and expands the disassembled code data 515 into symbolic representation data 525. The symbolic representation data 525 contains further abstracted data relating to the disassembled code data 515 comprising an abstract syntax tree (“AST”) and a list of symboliks which themselves comprise the relationships between the inputs and outputs of each function, describing what every piece of the emulated machine is doing in response to the binary object. These inputs and outputs include passed in arguments, local variables, etc.
The symbolic representation data 525 is fed into a morphologic reducer logic 530 that attempts to eliminate excessive pieces of data and package the data into reduced symfunc object data 535. The elimination of elements of the symbolic representation data 525 can be accomplished through the classification of functions and their actions, allowing for the generating of rule sets that can eliminate aspects of the functions for analysis based on the needs of the user/system administrator.
The reduced symfunc object data 535 is then sent to a symfunc hash generator 540 that generates at least one, but perhaps many symfunc hash values 545. The symfunc hash values can be typical 128-bit hashes but can vary in size and complexity as needed. The hashing process, in order to facilitate comparable results suitable for later comparison and classification, should follow a static, repeatable order/ruleset. By way of example and not limitation, the hashing process can order the symfunc object in a serial fashion with a first classified type of function placed first, followed by a second type of function, etc. Typically, a canonical representation is utilized for the hashing process. The type or ruleset or order does not have to be limited and is only limited by the usefulness of the results based on the hashing process used in the hashes stored in the database.
Generated symfunc hash values 545 are eventually given to the classifier logic 550 which then classifies the symfunc hash values based on a comparison against a database of known symfunc hash values. In response to this classification, the classifier logic 550 generates classification data 555 that can then be transmitted to another set of logic or used internally by the classifier logic 550 to generate a response to the classification. The response can be to let the binary object associated with the classified binary hash pass if it not determined to be malicious. Alternatively, the classification data can be used to generate a report based on any number of behaviors that were pre-determined by the user/system administrator in the case of a finding of malicious binary objects.
Referring now to FIG. 6 , an exemplary classification flowchart 600 of the various malware detection logics and their respective inputs and outputs is shown. The classification flowchart 600 depicted is similar to operations 450 through 470 depicted in FIG. 4 , although it is contemplated that other embodiments of this flowchart can be utilized based on the needs of the particular application by the user/administrator.
In response to receiving a symfunc hash, the system may begin the process of comparing the received symfunc hash value against the previously generated and stored, known symfunc hash values (blocks 605 and 610). The comparison typically produces data relating to the number of matches the symfunc hash value obtains, along with data relating to the matched symfunc hash values. The classifier logic counts the number of matches to determine the next operation (block 620). It is contemplated that the comparison may be done remotely by sending the received symfunc hash value to a remote system that has a local copy of the symfunc database and sends back data relating to the matches and counts. Furthermore, as outlined above, those skilled in the art would recognize, a “match” may be realized through various methods depending on the application including determining a prescribed level of correlation based on a pre-determined threshold set by the user and/or system administrator.
In the exemplary embodiment illustrated in FIG. 6 , the user/system administrator has set both a low and high threshold for the matching evaluation. In response to the number of matches being less than the low end threshold (block 621), the system may determine that there is not enough information to make a useful correlation between the suspect symfunc hash value and the known symfunc hash, determining it to be a singleton or contain low information (block 622), which then ends the process and generates common weighted classification data that can be sent to an analyzer for further evaluation (block 623). Alternatively, in response to the number of matches found to be greater than the high-end threshold (block 626), the system may determine whether no differential information was found (block 627), which also ends the process causing the system to generate common weighted classification data that can be sent to an analyzer for further evaluation (block 628).
Finally, in response to the number of matches being both higher than the lower-end threshold, and lower than the higher-end threshold (block 624), the system may then draw a stronger correlation between the received symfunc hash value and the previously generated and known symfunc hash values in the database that were a match. In many embodiments, this situation can be considered an “anchor match” which can be utilized to create automatic responses and actions not otherwise available in other matches.
In these instances of an anchor match, the system may automatically determine and associate the received symfunc hash value attributes with the matched symfunc hash values and corresponding binary objects (block 630). Further, an anchor match may be automatically stored as another data point in the known symfunc database (block 635). Additionally, anchor matches may allow the system to automatically determine if the received symfunc hash value is malicious (block 640). In cases where the anchor match was to non-malicious binary objects, the process ends (block 641) and no further actions are attempted. Alternatively, when the anchor match is to known malicious code, the system can automatically execute pre-determined responsive behaviors that were requested by the user/system administrator. It is contemplated that data associated with the symfunc objects utilized in the anchor match (code family, type of threat, level of threat, etc.) are utilized to determine what responsive actions are executed (block 642).
In the foregoing description, the invention is described with reference to specific exemplary embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims.
Claims (27)
1. An electronic device for classifying malware, the electronic device comprising:
a processor; and
a storage device communicatively coupled to the processor, the storage device comprises
a data store comprising a plurality of previously known symfunc hash values and
malware detection logic processed by the processor, the malware detection logic to attempt to classify malicious code by utilizing:
symbolic analyzer logic being processed by the processor, the symbolic analyzer to receive disassembled code data associated with a binary object and generate symbolic representation data associated with the disassembled code data,
generation logic being processed by the processor, the generator logic to receive the symbolic representation data and generate at least one symfunc hash value based on the symbolic representation data, the generation logic comprises
morphologic reducer logic to receive the symbolic representation data and produce symfunc object data; and
symbolic hash generator to receive symfunc object data and generate the at least one symfunc hash value, and
malware classification logic being processed by the processor, the malware classification logic to (i) receive the at least one symfunc hash value, (ii) compare the received symfunc hash value against the plurality of previously known symfunc hash values, and (iii) determine if the binary object comprises malicious code based on results of a comparison between the received symfunc hash value and the plurality of previously known symfunc hash values.
2. The electronic device of claim 1 , wherein the at least one symfunc hash value corresponds to an abstraction of the binary object.
3. The electronic device of claim 2 , wherein the malware classification logic determines whether the binary object potentially includes malicious code based on whether the received symfunc hash value matches at least a first pre-determined number of previously known symfunc hash values.
4. The electronic device of claim 3 , wherein the malware classification logic determines whether the binary object potentially includes malicious code based on whether the received symfunc hash value matches less than a second pre-determined number of previously known symfunc hash values.
5. The electronic device of claim 4 , wherein the malware classification logic determines that the received binary code includes malicious code upon the received symfunc hash value matching a number of previously known symfunc hash values that are both greater than the first pre-determined number and less than the second pre-determined number.
6. The electronic device of claim 1 , the storage device further comprising responsive logic being processed by the processor, the responsive logic to receive at least one pre-determined responsive behavior input and generate responsive behavior actions based on the received at least one pre-determined responsive behavior input.
7. The electronic device of claim 1 , wherein the malware classification logic, in response to determining that the binary object comprises malicious code, activates pre-determined responsive behavior actions.
8. The electronic device of claim 7 , wherein the pre-determined responsive behavior action is the generation of an alert communicated to a user.
9. The electronic device of claim 8 , wherein the generated alert includes information associated with the plurality of previously known symfunc hash values associated with the binary object.
10. The electronic device of claim 1 , wherein the malware detection logic stores the generated symfunc hash value in the data store being a database upon determination of the presence of malicious code associated with the binary object.
11. The electronic device of claim 1 wherein the database further comprises capability data associated with each symfunc hash value determined to be malicious.
12. The electronic device of claim 1 , wherein the storage device further comprises binary disassembler logic being processed by the processor, the binary disassembler logic to receive the binary object and disassemble the binary object into the disassembled code data.
13. A method for classifying malware, the method comprising:
receiving a binary object for classification;
disassembling the received binary object to generate disassembled code data;
generating symbolic representation data based on the disassembled code data;
reducing morphology of the disassembled code data to produce at least one symbolic function (symfunc) object;
hashing the symfunc object to generate at least one symfunc hash value; and
classifying the binary object as containing malicious code by comparing the symfunc hash value to a plurality of previously known symfunc hash values and the symfunc hash value matches at least a first threshold of previously known symfunc hash values.
14. The method of claim 13 further comprising:
receiving at least one pre-determined responsive behavior input; and
generating one or more responsive behavior actions based on the received at least one pre-determined responsive behavior input.
15. The method of claim 14 , wherein the generating of the one or more responsive behavior actions includes generating an alert communicated to a user.
16. The method of claim 15 , wherein the generated alert includes information associated with the plurality of previously known symfunc hash values associated with the classified binary object.
17. The method of claim 13 , wherein, in response to classifying that the received binary object includes malicious code, activating at least one generated pre-determined responsive behavior action.
18. The method of claim 13 , wherein the classifying of the binary object as including malicious code is further based on whether the compared symfunc hash value matches less than a second threshold of previously known symfunc hash values.
19. The method of claim 13 , wherein the classifying of the binary object is automatically completed upon the compared symfunc hash value matching a number of previously known symfunc hash values that are both greater than the first threshold and less than the second threshold of previously known symfunc hash values.
20. The method of claim 13 , further comprising storing the generated symfunc hash value in the database upon determination of the presence of malicious code associated with the binary object.
21. The method of claim 13 , wherein the database further comprises capability data associated with each symfunc hash value classified to be malicious.
22. The method of claim 13 , wherein the first threshold of previously known symfunc hash values corresponds to a first pre-determined number of previously known symfunc hash values and the second threshold of previously known symfunc hash values corresponds to a second threshold number of previously known symfunc hash values.
23. A non-transitory computer readable medium including software that, when executed by one or more hardware processors, performs operations to classify a binary object and comprising:
a binary disassembler configured to disassemble a received binary object and generate disassembled code data;
a symbolic analyzer configured to generate symbolic representation data based on the disassembled code data;
a morphologic reducer configured to reduce morphology of the disassembled code data to produce at least one symbolic function (symfunc) object;
a symbolic hash generator configured to hash the symfunc object within a symbolic hash generator to generate at least one symfunc hash value; and
a classifier configured to classify the received binary object as containing malicious code by at least comparing the symfunc hash value to a plurality of previously known symfunc hash values, wherein a classification of the received binary object as to including a presence of malicious code is further based on whether the compared symfunc hash value matches at least a first threshold of the plurality of previously known symfunc hash values.
24. The non-transitory computer readable medium of claim 23 , further comprising receiving at least one pre-determined responsive behavior input; and
generating responsive behavior actions based on the received at least one pre-determined responsive behavior input.
25. The non-transitory computer readable medium of claim 24 wherein the method, in response to classifying that the at least one received binary object comprises malicious code, activates at least one generated pre-determined responsive behavior action.
26. The non-transitory computer readable medium of claim 23 wherein the classification of the presence of malicious code within the at least one received binary object is further based on whether the compared symfunc hash value matches less than a second threshold of previously known symfunc hash values.
27. The non-transitory computer readable medium of claim 23 , wherein the generation of the responsive behavior actions comprises generating.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US16/724,031 US11176251B1 (en) | 2018-12-21 | 2019-12-20 | Determining malware via symbolic function hash analysis |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201862784231P | 2018-12-21 | 2018-12-21 | |
US16/724,031 US11176251B1 (en) | 2018-12-21 | 2019-12-20 | Determining malware via symbolic function hash analysis |
Publications (1)
Publication Number | Publication Date |
---|---|
US11176251B1 true US11176251B1 (en) | 2021-11-16 |
Family
ID=78524034
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US16/724,031 Active 2040-02-16 US11176251B1 (en) | 2018-12-21 | 2019-12-20 | Determining malware via symbolic function hash analysis |
Country Status (1)
Country | Link |
---|---|
US (1) | US11176251B1 (en) |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20220179953A1 (en) * | 2020-12-08 | 2022-06-09 | Mcafee, Llc | Systems, methods, and media for analyzing structured files for malicious content |
Citations (288)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2002006928A2 (en) | 2000-07-14 | 2002-01-24 | Vcis, Inc. | Computer immune system and method for detecting unwanted code in a computer system |
WO2002023805A2 (en) | 2000-09-13 | 2002-03-21 | Karakoram Limited | Monitoring network activity |
US20020038430A1 (en) | 2000-09-13 | 2002-03-28 | Charles Edwards | System and method of data collection, processing, analysis, and annotation for monitoring cyber-threats and the notification thereof to subscribers |
US20020091819A1 (en) | 2001-01-05 | 2002-07-11 | Daniel Melchione | System and method for configuring computer applications and devices using inheritance |
US20020095607A1 (en) | 2001-01-18 | 2002-07-18 | Catherine Lin-Hendel | Security protection for computers and computer-networks |
US20020169952A1 (en) | 1999-06-21 | 2002-11-14 | Disanto Frank J. | Method and apparatus for securing e-mail attachments |
US20020184528A1 (en) | 2001-04-12 | 2002-12-05 | Shevenell Michael P. | Method and apparatus for security management via vicarious network devices |
US20020188887A1 (en) | 2000-05-19 | 2002-12-12 | Self Repairing Computers, Inc. | Computer with switchable components |
US20030084318A1 (en) | 2001-10-31 | 2003-05-01 | Schertz Richard L. | System and method of graphically correlating data for an intrusion protection system |
US20030188190A1 (en) | 2002-03-26 | 2003-10-02 | Aaron Jeffrey A. | System and method of intrusion detection employing broad-scope monitoring |
US20030191957A1 (en) | 1999-02-19 | 2003-10-09 | Ari Hypponen | Distributed computer virus detection and scanning |
US20040015712A1 (en) | 2002-07-19 | 2004-01-22 | Peter Szor | Heuristic detection of malicious computer code by page tracking |
US20040019832A1 (en) | 2002-07-23 | 2004-01-29 | International Business Machines Corporation | Method and apparatus for the automatic determination of potentially worm-like behavior of a program |
US20040117624A1 (en) | 2002-10-21 | 2004-06-17 | Brandt David D. | System and methodology providing automation security analysis, validation, and learning in an industrial controller environment |
US20040236963A1 (en) | 2003-05-20 | 2004-11-25 | International Business Machines Corporation | Applying blocking measures progressively to malicious network traffic |
US20040255161A1 (en) | 2003-04-12 | 2004-12-16 | Deep Nines, Inc. | System and method for network edge data protection |
US20040268147A1 (en) | 2003-06-30 | 2004-12-30 | Wiederin Shawn E | Integrated security system |
US20050021740A1 (en) | 2001-08-14 | 2005-01-27 | Bar Anat Bremler | Detecting and protecting against worm traffic on a network |
US20050086523A1 (en) | 2003-10-15 | 2005-04-21 | Zimmer Vincent J. | Methods and apparatus to provide network traffic support and physical security support |
US20050091513A1 (en) | 2003-10-28 | 2005-04-28 | Fujitsu Limited | Device, method and program for detecting unauthorized access |
US20050108562A1 (en) | 2003-06-18 | 2005-05-19 | Khazan Roger I. | Technique for detecting executable malicious code using a combination of static and dynamic analyses |
US6898632B2 (en) | 2003-03-31 | 2005-05-24 | Finisar Corporation | Network security tap for use with intrusion detection system |
US20050125195A1 (en) | 2001-12-21 | 2005-06-09 | Juergen Brendel | Method, apparatus and sofware for network traffic management |
US20050149726A1 (en) | 2003-10-21 | 2005-07-07 | Amit Joshi | Systems and methods for secure client applications |
US20050157662A1 (en) | 2004-01-20 | 2005-07-21 | Justin Bingham | Systems and methods for detecting a compromised network |
US6941348B2 (en) | 2002-02-19 | 2005-09-06 | Postini, Inc. | Systems and methods for managing the transmission of electronic messages through active message date updating |
US20050238005A1 (en) | 2004-04-21 | 2005-10-27 | Yi-Fen Chen | Method and apparatus for controlling traffic in a computer network |
US20050262562A1 (en) | 2004-05-21 | 2005-11-24 | Paul Gassoway | Systems and methods of computer security |
US20050283839A1 (en) | 2002-09-10 | 2005-12-22 | Ingenia Technology Limited | Security device and system |
US20060010495A1 (en) | 2004-07-06 | 2006-01-12 | Oded Cohen | Method for protecting a computer from suspicious objects |
US20060015747A1 (en) | 2004-07-16 | 2006-01-19 | Red Hat, Inc. | System and method for detecting computer virus |
US20060015715A1 (en) | 2004-07-16 | 2006-01-19 | Eric Anderson | Automatically protecting network service from network attack |
US20060021029A1 (en) | 2004-06-29 | 2006-01-26 | Brickell Ernie F | Method of improving computer security through sandboxing |
US20060031476A1 (en) | 2004-08-05 | 2006-02-09 | Mathes Marvin L | Apparatus and method for remotely monitoring a computer network |
US20060070130A1 (en) | 2004-09-27 | 2006-03-30 | Microsoft Corporation | System and method of identifying the source of an attack on a computer network |
US20060117385A1 (en) | 2004-11-30 | 2006-06-01 | Mester Michael L | Monitoring propagation protection within a network |
US20060123477A1 (en) | 2004-12-06 | 2006-06-08 | Kollivakkam Raghavan | Method and apparatus for generating a network topology representation based on inspection of application messages at a network device |
US20060150249A1 (en) | 2003-05-07 | 2006-07-06 | Derek Gassen | Method and apparatus for predictive and actual intrusion detection on a network |
US7080407B1 (en) | 2000-06-27 | 2006-07-18 | Cisco Technology, Inc. | Virus detection and removal system and method for network-based systems |
US7080408B1 (en) | 2001-11-30 | 2006-07-18 | Mcafee, Inc. | Delayed-delivery quarantining of network communications having suspicious contents |
US20060161987A1 (en) | 2004-11-10 | 2006-07-20 | Guy Levy-Yurista | Detecting and remedying unauthorized computer programs |
US20060173992A1 (en) | 2002-11-04 | 2006-08-03 | Daniel Weber | Event detection/anomaly correlation heuristics |
US20060191010A1 (en) | 2005-02-18 | 2006-08-24 | Pace University | System for intrusion detection and vulnerability assessment in a computer network using simulation and machine learning |
US20060242709A1 (en) | 2005-04-21 | 2006-10-26 | Microsoft Corporation | Protecting a computer that provides a Web service from malware |
US20060251104A1 (en) | 2005-03-31 | 2006-11-09 | Fujitsu Limited | Service apparatus, method of controlling switching of connection destination of client apparatus by service apparatus, and storage medium readable by machine |
US20060288417A1 (en) | 2005-06-21 | 2006-12-21 | Sbc Knowledge Ventures Lp | Method and apparatus for mitigating the effects of malicious software in a communication network |
US20070006288A1 (en) | 2005-06-30 | 2007-01-04 | Microsoft Corporation | Controlling network access |
US20070006313A1 (en) | 2004-09-17 | 2007-01-04 | Phillip Porras | Method and apparatus for combating malicious code |
US20070011174A1 (en) | 1998-09-22 | 2007-01-11 | Kazuo Takaragi | Method and a device for managing a computer network |
US20070016951A1 (en) | 2005-07-13 | 2007-01-18 | Piccard Paul L | Systems and methods for identifying sources of malware |
US20070064689A1 (en) | 2003-09-19 | 2007-03-22 | Shin Yong M | Method of controlling communication between devices in a network and apparatus for the same |
US20070143827A1 (en) | 2005-12-21 | 2007-06-21 | Fiberlink | Methods and systems for intelligently controlling access to computing resources |
US20070157306A1 (en) | 2005-12-30 | 2007-07-05 | Elrod Craig T | Network threat detection and mitigation |
US7243371B1 (en) | 2001-11-09 | 2007-07-10 | Cisco Technology, Inc. | Method and system for configurable network intrusion detection |
US20070192858A1 (en) | 2006-02-16 | 2007-08-16 | Infoexpress, Inc. | Peer based network access control |
US20070208822A1 (en) | 2006-03-01 | 2007-09-06 | Microsoft Corporation | Honey Monkey Network Exploration |
US20070240222A1 (en) | 2006-04-06 | 2007-10-11 | George Tuvell | System and Method for Managing Malware Protection on Mobile Devices |
US20070250930A1 (en) | 2004-04-01 | 2007-10-25 | Ashar Aziz | Virtual machine with dynamic data flow analysis |
US20080005782A1 (en) | 2004-04-01 | 2008-01-03 | Ashar Aziz | Heuristic based capture with replay to virtual machine |
GB2439806A (en) | 2006-06-30 | 2008-01-09 | Sophos Plc | Classifying software as malware using characteristics (or "genes") |
US20080040710A1 (en) | 2006-04-05 | 2008-02-14 | Prevx Limited | Method, computer program and computer for analysing an executable computer file |
US20080077793A1 (en) | 2006-09-21 | 2008-03-27 | Sensory Networks, Inc. | Apparatus and method for high throughput network security systems |
WO2008041950A2 (en) | 2006-10-04 | 2008-04-10 | Trek 2000 International Ltd. | Method, apparatus and system for authentication of external storage devices |
US20080134334A1 (en) | 2006-11-30 | 2008-06-05 | Electronics And Telecommunications Research Institute | Apparatus and method for detecting network attack |
US20080141376A1 (en) | 2006-10-24 | 2008-06-12 | Pc Tools Technology Pty Ltd. | Determining maliciousness of software |
US20080184367A1 (en) | 2007-01-25 | 2008-07-31 | Mandiant, Inc. | System and method for determining data entropy to identify malware |
US7448084B1 (en) | 2002-01-25 | 2008-11-04 | The Trustees Of Columbia University In The City Of New York | System and methods for detecting intrusions in a computer system by monitoring operating system registry accesses |
US7458098B2 (en) | 2002-03-08 | 2008-11-25 | Secure Computing Corporation | Systems and methods for enhancing electronic communication security |
US20080307524A1 (en) | 2004-04-08 | 2008-12-11 | The Regents Of The University Of California | Detecting Public Network Attacks Using Signatures and Fast Content Analysis |
US7467408B1 (en) | 2002-09-09 | 2008-12-16 | Cisco Technology, Inc. | Method and apparatus for capturing and filtering datagrams for network security monitoring |
US20080320594A1 (en) | 2007-03-19 | 2008-12-25 | Xuxian Jiang | Malware Detector |
US20090003317A1 (en) | 2007-06-29 | 2009-01-01 | Kasralikar Rahul S | Method and mechanism for port redirects in a network switch |
US20090064332A1 (en) | 2007-04-04 | 2009-03-05 | Phillip Andrew Porras | Method and apparatus for generating highly predictive blacklists |
US7519990B1 (en) | 2002-07-19 | 2009-04-14 | Fortinet, Inc. | Managing network traffic flow |
US20090126015A1 (en) | 2007-10-02 | 2009-05-14 | Monastyrsky Alexey V | System and method for detecting multi-component malware |
US20090125976A1 (en) | 2007-11-08 | 2009-05-14 | Docomo Communications Laboratories Usa, Inc. | Automated test input generation for web applications |
US7540025B2 (en) | 2004-11-18 | 2009-05-26 | Cisco Technology, Inc. | Mitigating network attacks using automatic signature generation |
US20090144823A1 (en) | 2006-03-27 | 2009-06-04 | Gerardo Lamastra | Method and System for Mobile Network Security, Related Network and Computer Program Product |
US20090158430A1 (en) | 2005-10-21 | 2009-06-18 | Borders Kevin R | Method, system and computer program product for detecting at least one of security threats and undesirable computer files |
US20090172815A1 (en) | 2007-04-04 | 2009-07-02 | Guofei Gu | Method and apparatus for detecting malware infection |
US20090198689A1 (en) | 2008-02-01 | 2009-08-06 | Matthew Frazier | System and method for data preservation and retrieval |
US20090198651A1 (en) | 2008-02-01 | 2009-08-06 | Jason Shiffer | Method and system for analyzing data related to an event |
US20090199274A1 (en) | 2008-02-01 | 2009-08-06 | Matthew Frazier | method and system for collaboration during an event |
US20090198670A1 (en) | 2008-02-01 | 2009-08-06 | Jason Shiffer | Method and system for collecting and organizing data corresponding to an event |
US20090241190A1 (en) | 2008-03-24 | 2009-09-24 | Michael Todd | System and method for securing a network from zero-day vulnerability exploits |
US20090300589A1 (en) | 2008-06-03 | 2009-12-03 | Isight Partners, Inc. | Electronic Crime Detection and Tracking |
US7639714B2 (en) | 2003-11-12 | 2009-12-29 | The Trustees Of Columbia University In The City Of New York | Apparatus method and medium for detecting payload anomaly using n-gram distribution of normal data |
US20100030996A1 (en) | 2008-08-01 | 2010-02-04 | Mandiant, Inc. | System and Method for Forensic Identification of Elements Within a Computer System |
US20100058474A1 (en) | 2008-08-29 | 2010-03-04 | Avg Technologies Cz, S.R.O. | System and method for the detection of malware |
US20100077481A1 (en) | 2008-09-22 | 2010-03-25 | Microsoft Corporation | Collecting and analyzing malware data |
US7698548B2 (en) | 2005-12-08 | 2010-04-13 | Microsoft Corporation | Communications traffic segregation for security purposes |
US20100115621A1 (en) | 2008-11-03 | 2010-05-06 | Stuart Gresley Staniford | Systems and Methods for Detecting Malicious Network Content |
US20100132038A1 (en) | 2008-11-26 | 2010-05-27 | Zaitsev Oleg V | System and Method for Computer Malware Detection |
US20100154056A1 (en) | 2008-12-17 | 2010-06-17 | Symantec Corporation | Context-Aware Real-Time Computer-Protection Systems and Methods |
US20100192223A1 (en) | 2004-04-01 | 2010-07-29 | Osman Abdoul Ismael | Detecting Malicious Network Content Using Virtual Environment Components |
US7779463B2 (en) | 2004-05-11 | 2010-08-17 | The Trustees Of Columbia University In The City Of New York | Systems and methods for correlating and distributing intrusion alert information among collaborating computer systems |
US20100281542A1 (en) | 2004-11-24 | 2010-11-04 | The Trustees Of Columbia University In The City Of New York | Systems and Methods for Correlating and Distributing Intrusion Alert Information Among Collaborating Computer Systems |
US7854007B2 (en) | 2005-05-05 | 2010-12-14 | Ironport Systems, Inc. | Identifying threats in electronic messages |
US20110078794A1 (en) | 2009-09-30 | 2011-03-31 | Jayaraman Manni | Network-Based Binary File Extraction and Analysis for Malware Detection |
US20110093951A1 (en) | 2004-06-14 | 2011-04-21 | NetForts, Inc. | Computer worm defense system and method |
US20110099633A1 (en) | 2004-06-14 | 2011-04-28 | NetForts, Inc. | System and method of containing computer worms |
US20110099635A1 (en) | 2009-10-27 | 2011-04-28 | Silberman Peter J | System and method for detecting executable machine instructions in a data stream |
US7949849B2 (en) | 2004-08-24 | 2011-05-24 | Mcafee, Inc. | File system for a capture system |
US20110167493A1 (en) | 2008-05-27 | 2011-07-07 | Yingbo Song | Systems, methods, ane media for detecting network anomalies |
WO2011084431A2 (en) | 2009-12-15 | 2011-07-14 | Mcafee, Inc. | Systems and methods for behavioral sandboxing |
US20110178942A1 (en) | 2010-01-18 | 2011-07-21 | Isight Partners, Inc. | Targeted Security Implementation Through Security Loss Forecasting |
US20110219450A1 (en) | 2010-03-08 | 2011-09-08 | Raytheon Company | System And Method For Malware Detection |
US8020206B2 (en) | 2006-07-10 | 2011-09-13 | Websense, Inc. | System and method of analyzing web content |
WO2011112348A1 (en) | 2010-03-08 | 2011-09-15 | Raytheon Company | System and method for host-level malware detection |
US20110225624A1 (en) | 2010-03-15 | 2011-09-15 | Symantec Corporation | Systems and Methods for Providing Network Access Control in Virtual Environments |
US20110247072A1 (en) | 2008-11-03 | 2011-10-06 | Stuart Gresley Staniford | Systems and Methods for Detecting Malicious PDF Network Content |
US8045458B2 (en) | 2007-11-08 | 2011-10-25 | Mcafee, Inc. | Prioritizing network traffic |
US20110307956A1 (en) | 2010-06-11 | 2011-12-15 | M86 Security, Inc. | System and method for analyzing malicious code using a static analyzer |
US20110314546A1 (en) | 2004-04-01 | 2011-12-22 | Ashar Aziz | Electronic Message Analysis for Malware Detection |
WO2012075336A1 (en) | 2010-12-01 | 2012-06-07 | Sourcefire, Inc. | Detecting malicious software through contextual convictions, generic signatures and machine learning techniques |
US8201246B1 (en) | 2008-02-25 | 2012-06-12 | Trend Micro Incorporated | Preventing malicious codes from performing malicious actions in a computer system |
US8204984B1 (en) | 2004-04-01 | 2012-06-19 | Fireeye, Inc. | Systems and methods for detecting encrypted bot command and control communication channels |
US8214905B1 (en) | 2011-12-21 | 2012-07-03 | Kaspersky Lab Zao | System and method for dynamically allocating computing resources for processing security information |
US20120174218A1 (en) | 2010-12-30 | 2012-07-05 | Everis Inc. | Network Communication System With Improved Security |
US20120210423A1 (en) | 2010-12-01 | 2012-08-16 | Oliver Friedrichs | Method and apparatus for detecting malicious software through contextual convictions, generic signatures and machine learning techniques |
US20120233698A1 (en) | 2011-03-07 | 2012-09-13 | Isight Partners, Inc. | Information System Security Based on Threat Vectors |
GB2490431A (en) | 2012-05-15 | 2012-10-31 | F Secure Corp | Foiling document exploit malware using repeat calls |
US20120278886A1 (en) | 2011-04-27 | 2012-11-01 | Michael Luna | Detection and filtering of malware based on traffic observations made in a distributed mobile traffic management system |
US20120331553A1 (en) | 2006-04-20 | 2012-12-27 | Fireeye, Inc. | Dynamic signature creation and enforcement |
US8370939B2 (en) | 2010-07-23 | 2013-02-05 | Kaspersky Lab, Zao | Protection against malware on web resources |
US8370938B1 (en) | 2009-04-25 | 2013-02-05 | Dasient, Inc. | Mitigating malware |
US20130097706A1 (en) | 2011-09-16 | 2013-04-18 | Veracode, Inc. | Automated behavioral and static analysis using an instrumented sandbox and machine learning classification for mobile security |
WO2013067505A1 (en) | 2011-11-03 | 2013-05-10 | Cyphort, Inc. | Systems and methods for virtualization and emulation assisted malware detection |
US8464340B2 (en) | 2007-09-04 | 2013-06-11 | Samsung Electronics Co., Ltd. | System, apparatus and method of malware diagnosis mechanism based on immunization database |
US20130185795A1 (en) | 2012-01-12 | 2013-07-18 | Arxceo Corporation | Methods and systems for providing network protection by progressive degradation of service |
US20130227691A1 (en) | 2012-02-24 | 2013-08-29 | Ashar Aziz | Detecting Malicious Network Content |
US8528086B1 (en) | 2004-04-01 | 2013-09-03 | Fireeye, Inc. | System and method of detecting computer worms |
US8539582B1 (en) | 2004-04-01 | 2013-09-17 | Fireeye, Inc. | Malware containment and security analysis on connection |
US20130247186A1 (en) | 2012-03-15 | 2013-09-19 | Aaron LeMasters | System to Bypass a Compromised Mass Storage Device Driver Stack and Method Thereof |
US8561177B1 (en) | 2004-04-01 | 2013-10-15 | Fireeye, Inc. | Systems and methods for detecting communication channels of bots |
US8566946B1 (en) | 2006-04-20 | 2013-10-22 | Fireeye, Inc. | Malware containment on connection |
US20140032875A1 (en) | 2012-07-27 | 2014-01-30 | James Butler | Physical Memory Forensics System and Method |
US20140181131A1 (en) | 2012-12-26 | 2014-06-26 | David Ross | Timeline wrinkling system and method |
US20140189866A1 (en) | 2012-12-31 | 2014-07-03 | Jason Shiffer | Identification of obfuscated computer items using visual algorithms |
US20140189882A1 (en) | 2012-12-28 | 2014-07-03 | Robert Jung | System and method for the programmatic runtime de-obfuscation of obfuscated software utilizing virtual machine introspection and manipulation of virtual machine guest memory permissions |
US20140280245A1 (en) | 2013-03-15 | 2014-09-18 | Mandiant Corporation | System and method to visualize user sessions |
US20140283063A1 (en) | 2013-03-15 | 2014-09-18 | Matthew Thompson | System and Method to Manage Sinkholes |
US20140283037A1 (en) | 2013-03-15 | 2014-09-18 | Michael Sikorski | System and Method to Extract and Utilize Disassembly Features to Classify Software Intent |
US8881282B1 (en) | 2004-04-01 | 2014-11-04 | Fireeye, Inc. | Systems and methods for malware attack detection and identification |
US20140337836A1 (en) | 2013-05-10 | 2014-11-13 | Fireeye, Inc. | Optimized resource allocation for virtual machines within a malware content detection system |
US20140344926A1 (en) | 2013-03-15 | 2014-11-20 | Sean Cunningham | System and method employing structured intelligence to verify and contain threats at endpoints |
US8898788B1 (en) | 2004-04-01 | 2014-11-25 | Fireeye, Inc. | Systems and methods for malware attack prevention |
US20140380474A1 (en) | 2013-06-24 | 2014-12-25 | Fireeye, Inc. | System and Method for Detecting Time-Bomb Malware |
US20140380473A1 (en) | 2013-06-24 | 2014-12-25 | Fireeye, Inc. | Zero-day discovery system |
US20150007312A1 (en) | 2013-06-28 | 2015-01-01 | Vinay Pidathala | System and method for detecting malicious links in electronic messages |
US8990944B1 (en) | 2013-02-23 | 2015-03-24 | Fireeye, Inc. | Systems and methods for automatically detecting backdoors |
US20150096025A1 (en) | 2013-09-30 | 2015-04-02 | Fireeye, Inc. | System, Apparatus and Method for Using Malware Analysis Results to Drive Adaptive Instrumentation of Virtual Machines to Improve Exploit Detection |
US20150096024A1 (en) | 2013-09-30 | 2015-04-02 | Fireeye, Inc. | Advanced persistent threat (apt) detection center |
US20150096023A1 (en) | 2013-09-30 | 2015-04-02 | Fireeye, Inc. | Fuzzy hash of behavioral results |
US20150096022A1 (en) | 2013-09-30 | 2015-04-02 | Michael Vincent | Dynamically adaptive framework and method for classifying malware using intelligent static, emulation, and dynamic analyses |
US9009823B1 (en) | 2013-02-23 | 2015-04-14 | Fireeye, Inc. | Framework for efficient security coverage of mobile software applications installed on mobile devices |
US9009822B1 (en) | 2013-02-23 | 2015-04-14 | Fireeye, Inc. | Framework for multi-phase analysis of mobile applications |
US9027135B1 (en) | 2004-04-01 | 2015-05-05 | Fireeye, Inc. | Prospective client identification using malware attack detection |
US20150186645A1 (en) | 2013-12-26 | 2015-07-02 | Fireeye, Inc. | System, apparatus and method for automatically verifying exploits within suspect objects and highlighting the display information associated with the verified exploits |
US20150199513A1 (en) | 2014-01-16 | 2015-07-16 | Fireeye, Inc. | Threat-aware microvisor |
US20150220735A1 (en) | 2014-02-05 | 2015-08-06 | Fireeye, Inc. | Detection efficacy of virtual machine-based analysis with application specific events |
US9104867B1 (en) | 2013-03-13 | 2015-08-11 | Fireeye, Inc. | Malicious content analysis using simulated user interaction without user involvement |
US9159035B1 (en) | 2013-02-23 | 2015-10-13 | Fireeye, Inc. | Framework for computer application analysis of sensitive information tracking |
US9176843B1 (en) | 2013-02-23 | 2015-11-03 | Fireeye, Inc. | Framework for efficient security coverage of mobile software applications |
US9189627B1 (en) | 2013-11-21 | 2015-11-17 | Fireeye, Inc. | System, apparatus and method for conducting on-the-fly decryption of encrypted objects for malware detection |
US9195829B1 (en) | 2013-02-23 | 2015-11-24 | Fireeye, Inc. | User interface with real-time visual playback along with synchronous textual analysis log display and event/time index for anomalous behavior detection in applications |
US9208235B1 (en) * | 2013-03-11 | 2015-12-08 | Symantec Corporation | Systems and methods for profiling web applications |
US20150372980A1 (en) | 2014-06-24 | 2015-12-24 | Fireeye, Inc. | Intrusion prevention and remedy system |
US9223972B1 (en) | 2014-03-31 | 2015-12-29 | Fireeye, Inc. | Dynamically remote tuning of a malware content detection system |
US20160006756A1 (en) | 2014-07-01 | 2016-01-07 | Fireeye, Inc. | Trusted threat-aware microvisor |
US20160004869A1 (en) | 2014-07-01 | 2016-01-07 | Fireeye, Inc. | Verification of trusted threat-aware microvisor |
US9241010B1 (en) | 2014-03-20 | 2016-01-19 | Fireeye, Inc. | System and method for network behavior detection |
US9251343B1 (en) | 2013-03-15 | 2016-02-02 | Fireeye, Inc. | Detecting bootkits resident on compromised computers |
US20160044000A1 (en) | 2014-08-05 | 2016-02-11 | Fireeye, Inc. | System and method to communicate sensitive information via one or more untrusted intermediate nodes with resilience to disconnected network topology |
US9311479B1 (en) | 2013-03-14 | 2016-04-12 | Fireeye, Inc. | Correlation and consolidation of analytic data for holistic view of a malware attack |
US9355247B1 (en) | 2013-03-13 | 2016-05-31 | Fireeye, Inc. | File extraction from memory dump for malicious content analysis |
US9363280B1 (en) | 2014-08-22 | 2016-06-07 | Fireeye, Inc. | System and method of detecting delivery of malware using cross-customer data |
US9367681B1 (en) | 2013-02-23 | 2016-06-14 | Fireeye, Inc. | Framework for efficient security coverage of mobile software applications using symbolic execution to reach regions of interest within an application |
US20160191550A1 (en) | 2014-12-29 | 2016-06-30 | Fireeye, Inc. | Microvisor-based malware detection endpoint architecture |
US20160191547A1 (en) | 2014-12-26 | 2016-06-30 | Fireeye, Inc. | Zero-Day Rotating Guest Image Profile |
US9398028B1 (en) | 2014-06-26 | 2016-07-19 | Fireeye, Inc. | System, device and method for detecting a malicious attack based on communcations between remotely hosted virtual machines and malicious web servers |
US20160241580A1 (en) | 2014-04-03 | 2016-08-18 | Isight Partners, Inc. | System and Method of Cyber Threat Structure Mapping and Application to Cyber Threat Mitigation |
US20160241581A1 (en) | 2014-04-03 | 2016-08-18 | Isight Partners, Inc. | System and Method of Cyber Threat Intensity Determination and Application to Cyber Threat Mitigation |
US9426071B1 (en) | 2013-08-22 | 2016-08-23 | Fireeye, Inc. | Storing network bidirectional flow data and metadata with efficient processing technique |
US9432389B1 (en) | 2014-03-31 | 2016-08-30 | Fireeye, Inc. | System, apparatus and method for detecting a malicious attack based on static analysis of a multi-flow object |
US9430646B1 (en) | 2013-03-14 | 2016-08-30 | Fireeye, Inc. | Distributed systems and methods for automatically detecting unknown bots and botnets |
US9438623B1 (en) | 2014-06-06 | 2016-09-06 | Fireeye, Inc. | Computer exploit detection using heap spray pattern matching |
US9438613B1 (en) | 2015-03-30 | 2016-09-06 | Fireeye, Inc. | Dynamic content activation for automated analysis of embedded objects |
US20160285914A1 (en) | 2015-03-25 | 2016-09-29 | Fireeye, Inc. | Exploit detection system |
US9467460B1 (en) | 2014-12-23 | 2016-10-11 | Fireeye, Inc. | Modularized database architecture using vertical partitioning for a state machine |
US9483644B1 (en) | 2015-03-31 | 2016-11-01 | Fireeye, Inc. | Methods for detecting file altering malware in VM based analysis |
US20160323295A1 (en) | 2015-04-28 | 2016-11-03 | Isight Partners, Inc. | Computer Imposed Countermeasures Driven by Malware Lineage |
US20160335110A1 (en) | 2015-03-31 | 2016-11-17 | Fireeye, Inc. | Selective virtualization for security threat detection |
US9507945B2 (en) * | 2013-04-01 | 2016-11-29 | The Johns Hopkins University | Method and apparatus for automated vulnerability detection |
US9537972B1 (en) | 2014-02-20 | 2017-01-03 | Fireeye, Inc. | Efficient access to sparse packets in large repositories of stored network traffic |
US9542559B2 (en) * | 2012-05-21 | 2017-01-10 | Carnegie Mellon University | Detecting exploitable bugs in binary code |
US9565202B1 (en) | 2013-03-13 | 2017-02-07 | Fireeye, Inc. | System and method for detecting exfiltration content |
US9591015B1 (en) | 2014-03-28 | 2017-03-07 | Fireeye, Inc. | System and method for offloading packet processing and static analysis operations |
US9594912B1 (en) | 2014-06-06 | 2017-03-14 | Fireeye, Inc. | Return-oriented programming detection |
US9594904B1 (en) | 2015-04-23 | 2017-03-14 | Fireeye, Inc. | Detecting malware based on reflection |
US20170083703A1 (en) | 2015-09-22 | 2017-03-23 | Fireeye, Inc. | Leveraging behavior-based rules for malware family classification |
US9628498B1 (en) | 2004-04-01 | 2017-04-18 | Fireeye, Inc. | System and method for bot detection |
US9626509B1 (en) | 2013-03-13 | 2017-04-18 | Fireeye, Inc. | Malicious content analysis with multi-version application support within single operating environment |
US9635039B1 (en) | 2013-05-13 | 2017-04-25 | Fireeye, Inc. | Classifying sets of malicious indicators for detecting command and control communications associated with malware |
US9654485B1 (en) | 2015-04-13 | 2017-05-16 | Fireeye, Inc. | Analytics-based security monitoring system and method |
US9690606B1 (en) | 2015-03-25 | 2017-06-27 | Fireeye, Inc. | Selective system call monitoring |
US9690936B1 (en) | 2013-09-30 | 2017-06-27 | Fireeye, Inc. | Multistage system and method for analyzing obfuscated content for malware |
US9690933B1 (en) | 2014-12-22 | 2017-06-27 | Fireeye, Inc. | Framework for classifying an object as malicious with machine learning for deploying updated predictive models |
US9747446B1 (en) | 2013-12-26 | 2017-08-29 | Fireeye, Inc. | System and method for run-time object classification |
US9773112B1 (en) | 2014-09-29 | 2017-09-26 | Fireeye, Inc. | Exploit detection of malware and malware families |
US9781144B1 (en) | 2014-09-30 | 2017-10-03 | Fireeye, Inc. | Determining duplicate objects for malware analysis using environmental/context information |
US9825989B1 (en) | 2015-09-30 | 2017-11-21 | Fireeye, Inc. | Cyber attack early warning system |
US9824216B1 (en) | 2015-12-31 | 2017-11-21 | Fireeye, Inc. | Susceptible environment detection system |
US9824209B1 (en) | 2013-02-23 | 2017-11-21 | Fireeye, Inc. | Framework for efficient security coverage of mobile software applications that is usable to harden in the field code |
US9825976B1 (en) | 2015-09-30 | 2017-11-21 | Fireeye, Inc. | Detection and classification of exploit kits |
US9838417B1 (en) | 2014-12-30 | 2017-12-05 | Fireeye, Inc. | Intelligent context aware user interaction for malware detection |
US9888016B1 (en) | 2013-06-28 | 2018-02-06 | Fireeye, Inc. | System and method for detecting phishing using password prediction |
US20180048660A1 (en) | 2015-11-10 | 2018-02-15 | Fireeye, Inc. | Launcher for setting analysis environment variations for malware detection |
US9912681B1 (en) | 2015-03-31 | 2018-03-06 | Fireeye, Inc. | Injection of content processing delay in an endpoint |
US9921978B1 (en) | 2013-11-08 | 2018-03-20 | Fireeye, Inc. | System and method for enhanced security of storage devices |
US9934376B1 (en) | 2014-12-29 | 2018-04-03 | Fireeye, Inc. | Malware detection appliance architecture |
US9973531B1 (en) | 2014-06-06 | 2018-05-15 | Fireeye, Inc. | Shellcode detection |
US10027689B1 (en) | 2014-09-29 | 2018-07-17 | Fireeye, Inc. | Interactive infection visualization for improved exploit detection and signature generation for malware and malware families |
US10025691B1 (en) | 2016-09-09 | 2018-07-17 | Fireeye, Inc. | Verification of complex software code using a modularized architecture |
US10033759B1 (en) | 2015-09-28 | 2018-07-24 | Fireeye, Inc. | System and method of threat detection under hypervisor control |
US10033747B1 (en) | 2015-09-29 | 2018-07-24 | Fireeye, Inc. | System and method for detecting interpreter-based exploit attacks |
US10050998B1 (en) | 2015-12-30 | 2018-08-14 | Fireeye, Inc. | Malicious message analysis system |
US10089461B1 (en) | 2013-09-30 | 2018-10-02 | Fireeye, Inc. | Page replacement code injection |
US20180288077A1 (en) | 2017-03-30 | 2018-10-04 | Fireeye, Inc. | Attribute-controlled malware detection |
US10108446B1 (en) | 2015-12-11 | 2018-10-23 | Fireeye, Inc. | Late load technique for deploying a virtualization layer underneath a running operating system |
US10121000B1 (en) | 2016-06-28 | 2018-11-06 | Fireeye, Inc. | System and method to detect premium attacks on electronic networks and electronic devices |
US10133866B1 (en) | 2015-12-30 | 2018-11-20 | Fireeye, Inc. | System and method for triggering analysis of an object for malware in response to modification of that object |
US10169585B1 (en) | 2016-06-22 | 2019-01-01 | Fireeye, Inc. | System and methods for advanced malware detection through placement of transition events |
US10191861B1 (en) | 2016-09-06 | 2019-01-29 | Fireeye, Inc. | Technique for implementing memory views using a layered virtualization architecture |
US10192052B1 (en) | 2013-09-30 | 2019-01-29 | Fireeye, Inc. | System, apparatus and method for classifying a file as malicious using static scanning |
US10210329B1 (en) | 2015-09-30 | 2019-02-19 | Fireeye, Inc. | Method to detect application execution hijacking using memory protection |
US10216927B1 (en) | 2015-06-30 | 2019-02-26 | Fireeye, Inc. | System and method for protecting memory pages associated with a process using a virtualization layer |
US10242185B1 (en) | 2014-03-21 | 2019-03-26 | Fireeye, Inc. | Dynamic guest image creation and rollback |
US20190104154A1 (en) | 2017-10-01 | 2019-04-04 | Fireeye, Inc. | Phishing attack detection |
US20190132334A1 (en) | 2017-10-27 | 2019-05-02 | Fireeye, Inc. | System and method for analyzing binary code for malware classification using artificial neural network techniques |
US10341365B1 (en) | 2015-12-30 | 2019-07-02 | Fireeye, Inc. | Methods and system for hiding transition events for malware detection |
US20190207966A1 (en) | 2017-12-28 | 2019-07-04 | Fireeye, Inc. | Platform and Method for Enhanced Cyber-Attack Detection and Response Employing a Global Data Store |
US20190207967A1 (en) | 2017-12-28 | 2019-07-04 | Fireeye, Inc. | Platform and method for retroactive reclassification employing a cybersecurity-based global data store |
US10395029B1 (en) | 2015-06-30 | 2019-08-27 | Fireeye, Inc. | Virtual system and method with threat protection |
US10417422B2 (en) * | 2016-10-24 | 2019-09-17 | Baidu Online Network Technology (Beijing) Co., Ltd | Method and apparatus for detecting application |
US10430586B1 (en) | 2016-09-07 | 2019-10-01 | Fireeye, Inc. | Methods of identifying heap spray attacks using memory anomaly detection |
US10447728B1 (en) | 2015-12-10 | 2019-10-15 | Fireeye, Inc. | Technique for protecting guest processes using a layered virtualization architecture |
US10454950B1 (en) | 2015-06-30 | 2019-10-22 | Fireeye, Inc. | Centralized aggregation technique for detecting lateral movement of stealthy cyber-attacks |
US10462173B1 (en) | 2016-06-30 | 2019-10-29 | Fireeye, Inc. | Malware detection verification and enhancement by coordinating endpoint and malware detection systems |
US10474813B1 (en) | 2015-03-31 | 2019-11-12 | Fireeye, Inc. | Code injection technique for remediation at an endpoint of a network |
US10476906B1 (en) | 2016-03-25 | 2019-11-12 | Fireeye, Inc. | System and method for managing formation and modification of a cluster within a malware detection system |
US10491627B1 (en) * | 2016-09-29 | 2019-11-26 | Fireeye, Inc. | Advanced malware detection using similarity analysis |
US10503904B1 (en) | 2017-06-29 | 2019-12-10 | Fireeye, Inc. | Ransomware detection and mitigation |
US10515214B1 (en) | 2013-09-30 | 2019-12-24 | Fireeye, Inc. | System and method for classifying malware within content created during analysis of a specimen |
US10523609B1 (en) | 2016-12-27 | 2019-12-31 | Fireeye, Inc. | Multi-vector malware detection and analysis |
US10552610B1 (en) | 2016-12-22 | 2020-02-04 | Fireeye, Inc. | Adaptive virtual machine snapshot update framework for malware behavioral analysis |
US10554507B1 (en) | 2017-03-30 | 2020-02-04 | Fireeye, Inc. | Multi-level control for enhanced resource and object evaluation management of malware detection system |
US10565378B1 (en) | 2015-12-30 | 2020-02-18 | Fireeye, Inc. | Exploit of privilege detection framework |
US10581874B1 (en) | 2015-12-31 | 2020-03-03 | Fireeye, Inc. | Malware detection system with contextual analysis |
US10581879B1 (en) | 2016-12-22 | 2020-03-03 | Fireeye, Inc. | Enhanced malware detection for generated objects |
US10587647B1 (en) | 2016-11-22 | 2020-03-10 | Fireeye, Inc. | Technique for malware detection capability comparison of network security devices |
US10592678B1 (en) | 2016-09-09 | 2020-03-17 | Fireeye, Inc. | Secure communications between peers using a verified virtual trusted platform module |
US20200089882A1 (en) * | 2018-09-18 | 2020-03-19 | International Business Machines Corporation | System and method for machine based detection of a malicious executable file |
US10601848B1 (en) | 2017-06-29 | 2020-03-24 | Fireeye, Inc. | Cyber-security system and method for weak indicator detection and correlation to generate strong indicators |
US10601865B1 (en) | 2015-09-30 | 2020-03-24 | Fireeye, Inc. | Detection of credential spearphishing attacks using email analysis |
US10601863B1 (en) | 2016-03-25 | 2020-03-24 | Fireeye, Inc. | System and method for managing sensor enrollment |
US10642753B1 (en) | 2015-06-30 | 2020-05-05 | Fireeye, Inc. | System and method for protecting a software component running in virtual machine using a virtualization layer |
US10671726B1 (en) | 2014-09-22 | 2020-06-02 | Fireeye Inc. | System and method for malware analysis using thread-level event monitoring |
US10671721B1 (en) | 2016-03-25 | 2020-06-02 | Fireeye, Inc. | Timeout management services |
US10706149B1 (en) | 2015-09-30 | 2020-07-07 | Fireeye, Inc. | Detecting delayed activation malware using a primary controller and plural time controllers |
US10715542B1 (en) | 2015-08-14 | 2020-07-14 | Fireeye, Inc. | Mobile application risk analysis |
US10726127B1 (en) | 2015-06-30 | 2020-07-28 | Fireeye, Inc. | System and method for protecting a software component running in a virtual machine through virtual interrupts by the virtualization layer |
US20200252428A1 (en) | 2018-12-21 | 2020-08-06 | Fireeye, Inc. | System and method for detecting cyberattacks impersonating legitimate sources |
US10747872B1 (en) | 2017-09-27 | 2020-08-18 | Fireeye, Inc. | System and method for preventing malware evasion |
US10785255B1 (en) | 2016-03-25 | 2020-09-22 | Fireeye, Inc. | Cluster configuration within a scalable malware detection system |
US10791138B1 (en) | 2017-03-30 | 2020-09-29 | Fireeye, Inc. | Subscription-based malware detection |
US10795991B1 (en) | 2016-11-08 | 2020-10-06 | Fireeye, Inc. | Enterprise search |
US10805340B1 (en) | 2014-06-26 | 2020-10-13 | Fireeye, Inc. | Infection vector and malware tracking with an interactive user display |
US10817606B1 (en) | 2015-09-30 | 2020-10-27 | Fireeye, Inc. | Detecting delayed activation malware using a run-time monitoring agent and time-dilation logic |
US10826933B1 (en) | 2016-03-31 | 2020-11-03 | Fireeye, Inc. | Technique for verifying exploit/malware at malware detection appliance through correlation with endpoints |
US10826931B1 (en) | 2018-03-29 | 2020-11-03 | Fireeye, Inc. | System and method for predicting and mitigating cybersecurity system misconfigurations |
US10846117B1 (en) | 2015-12-10 | 2020-11-24 | Fireeye, Inc. | Technique for establishing secure communication between host and guest processes of a virtualization architecture |
US10853483B2 (en) * | 2014-12-09 | 2020-12-01 | Nippon Telegraph And Telephone Corporation | Identification device, identification method, and identification program |
US10855700B1 (en) | 2017-06-29 | 2020-12-01 | Fireeye, Inc. | Post-intrusion detection of cyber-attacks during lateral movement within networks |
US10893068B1 (en) | 2017-06-30 | 2021-01-12 | Fireeye, Inc. | Ransomware file modification prevention technique |
US10893059B1 (en) | 2016-03-31 | 2021-01-12 | Fireeye, Inc. | Verification and enhancement using detection systems located at the network periphery and endpoint devices |
US10904286B1 (en) | 2017-03-24 | 2021-01-26 | Fireeye, Inc. | Detection of phishing attacks using similarity analysis |
US10902119B1 (en) | 2017-03-30 | 2021-01-26 | Fireeye, Inc. | Data extraction system for malware analysis |
-
2019
- 2019-12-20 US US16/724,031 patent/US11176251B1/en active Active
Patent Citations (497)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20070011174A1 (en) | 1998-09-22 | 2007-01-11 | Kazuo Takaragi | Method and a device for managing a computer network |
US20030191957A1 (en) | 1999-02-19 | 2003-10-09 | Ari Hypponen | Distributed computer virus detection and scanning |
US20020169952A1 (en) | 1999-06-21 | 2002-11-14 | Disanto Frank J. | Method and apparatus for securing e-mail attachments |
US20020188887A1 (en) | 2000-05-19 | 2002-12-12 | Self Repairing Computers, Inc. | Computer with switchable components |
US7080407B1 (en) | 2000-06-27 | 2006-07-18 | Cisco Technology, Inc. | Virus detection and removal system and method for network-based systems |
WO2002006928A2 (en) | 2000-07-14 | 2002-01-24 | Vcis, Inc. | Computer immune system and method for detecting unwanted code in a computer system |
US20020038430A1 (en) | 2000-09-13 | 2002-03-28 | Charles Edwards | System and method of data collection, processing, analysis, and annotation for monitoring cyber-threats and the notification thereof to subscribers |
US20040117478A1 (en) | 2000-09-13 | 2004-06-17 | Triulzi Arrigo G.B. | Monitoring network activity |
WO2002023805A2 (en) | 2000-09-13 | 2002-03-21 | Karakoram Limited | Monitoring network activity |
US20020091819A1 (en) | 2001-01-05 | 2002-07-11 | Daniel Melchione | System and method for configuring computer applications and devices using inheritance |
US20020095607A1 (en) | 2001-01-18 | 2002-07-18 | Catherine Lin-Hendel | Security protection for computers and computer-networks |
US20020184528A1 (en) | 2001-04-12 | 2002-12-05 | Shevenell Michael P. | Method and apparatus for security management via vicarious network devices |
US20050021740A1 (en) | 2001-08-14 | 2005-01-27 | Bar Anat Bremler | Detecting and protecting against worm traffic on a network |
US20030084318A1 (en) | 2001-10-31 | 2003-05-01 | Schertz Richard L. | System and method of graphically correlating data for an intrusion protection system |
US7243371B1 (en) | 2001-11-09 | 2007-07-10 | Cisco Technology, Inc. | Method and system for configurable network intrusion detection |
US7080408B1 (en) | 2001-11-30 | 2006-07-18 | Mcafee, Inc. | Delayed-delivery quarantining of network communications having suspicious contents |
US20050125195A1 (en) | 2001-12-21 | 2005-06-09 | Juergen Brendel | Method, apparatus and sofware for network traffic management |
US7448084B1 (en) | 2002-01-25 | 2008-11-04 | The Trustees Of Columbia University In The City Of New York | System and methods for detecting intrusions in a computer system by monitoring operating system registry accesses |
US20090083855A1 (en) | 2002-01-25 | 2009-03-26 | Frank Apap | System and methods for detecting intrusions in a computer system by monitoring operating system registry accesses |
US6941348B2 (en) | 2002-02-19 | 2005-09-06 | Postini, Inc. | Systems and methods for managing the transmission of electronic messages through active message date updating |
US7458098B2 (en) | 2002-03-08 | 2008-11-25 | Secure Computing Corporation | Systems and methods for enhancing electronic communication security |
US20030188190A1 (en) | 2002-03-26 | 2003-10-02 | Aaron Jeffrey A. | System and method of intrusion detection employing broad-scope monitoring |
US7519990B1 (en) | 2002-07-19 | 2009-04-14 | Fortinet, Inc. | Managing network traffic flow |
US20040015712A1 (en) | 2002-07-19 | 2004-01-22 | Peter Szor | Heuristic detection of malicious computer code by page tracking |
US20080189787A1 (en) | 2002-07-23 | 2008-08-07 | International Business Machines Corporation | Method and Apparatus for the Automatic Determination of Potentially Worm-Like Behavior of a Program |
US20040019832A1 (en) | 2002-07-23 | 2004-01-29 | International Business Machines Corporation | Method and apparatus for the automatic determination of potentially worm-like behavior of a program |
US7467408B1 (en) | 2002-09-09 | 2008-12-16 | Cisco Technology, Inc. | Method and apparatus for capturing and filtering datagrams for network security monitoring |
US20050283839A1 (en) | 2002-09-10 | 2005-12-22 | Ingenia Technology Limited | Security device and system |
US20040117624A1 (en) | 2002-10-21 | 2004-06-17 | Brandt David D. | System and methodology providing automation security analysis, validation, and learning in an industrial controller environment |
US20060173992A1 (en) | 2002-11-04 | 2006-08-03 | Daniel Weber | Event detection/anomaly correlation heuristics |
US6898632B2 (en) | 2003-03-31 | 2005-05-24 | Finisar Corporation | Network security tap for use with intrusion detection system |
US20040255161A1 (en) | 2003-04-12 | 2004-12-16 | Deep Nines, Inc. | System and method for network edge data protection |
US20060150249A1 (en) | 2003-05-07 | 2006-07-06 | Derek Gassen | Method and apparatus for predictive and actual intrusion detection on a network |
US20040236963A1 (en) | 2003-05-20 | 2004-11-25 | International Business Machines Corporation | Applying blocking measures progressively to malicious network traffic |
US20080072326A1 (en) | 2003-05-20 | 2008-03-20 | Danford Robert W | Applying blocking measures progressively to malicious network traffic |
US7308716B2 (en) | 2003-05-20 | 2007-12-11 | International Business Machines Corporation | Applying blocking measures progressively to malicious network traffic |
US20050108562A1 (en) | 2003-06-18 | 2005-05-19 | Khazan Roger I. | Technique for detecting executable malicious code using a combination of static and dynamic analyses |
US20040268147A1 (en) | 2003-06-30 | 2004-12-30 | Wiederin Shawn E | Integrated security system |
US20070064689A1 (en) | 2003-09-19 | 2007-03-22 | Shin Yong M | Method of controlling communication between devices in a network and apparatus for the same |
US7496961B2 (en) | 2003-10-15 | 2009-02-24 | Intel Corporation | Methods and apparatus to provide network traffic support and physical security support |
US20050086523A1 (en) | 2003-10-15 | 2005-04-21 | Zimmer Vincent J. | Methods and apparatus to provide network traffic support and physical security support |
US20050149726A1 (en) | 2003-10-21 | 2005-07-07 | Amit Joshi | Systems and methods for secure client applications |
US20050091513A1 (en) | 2003-10-28 | 2005-04-28 | Fujitsu Limited | Device, method and program for detecting unauthorized access |
US7639714B2 (en) | 2003-11-12 | 2009-12-29 | The Trustees Of Columbia University In The City Of New York | Apparatus method and medium for detecting payload anomaly using n-gram distribution of normal data |
US20050157662A1 (en) | 2004-01-20 | 2005-07-21 | Justin Bingham | Systems and methods for detecting a compromised network |
US10511614B1 (en) | 2004-04-01 | 2019-12-17 | Fireeye, Inc. | Subscription based malware detection under management system control |
US20120174186A1 (en) | 2004-04-01 | 2012-07-05 | Ashar Aziz | Policy Based Capture with Replay to Virtual Machine |
US8689333B2 (en) | 2004-04-01 | 2014-04-01 | Fireeye, Inc. | Malware defense system and method |
US8776229B1 (en) | 2004-04-01 | 2014-07-08 | Fireeye, Inc. | System and method of detecting malicious traffic while reducing false positives |
US8561177B1 (en) | 2004-04-01 | 2013-10-15 | Fireeye, Inc. | Systems and methods for detecting communication channels of bots |
US8793787B2 (en) | 2004-04-01 | 2014-07-29 | Fireeye, Inc. | Detecting malicious network content using virtual environment components |
US20100192223A1 (en) | 2004-04-01 | 2010-07-29 | Osman Abdoul Ismael | Detecting Malicious Network Content Using Virtual Environment Components |
US8881282B1 (en) | 2004-04-01 | 2014-11-04 | Fireeye, Inc. | Systems and methods for malware attack detection and identification |
US8898788B1 (en) | 2004-04-01 | 2014-11-25 | Fireeye, Inc. | Systems and methods for malware attack prevention |
US8539582B1 (en) | 2004-04-01 | 2013-09-17 | Fireeye, Inc. | Malware containment and security analysis on connection |
US8984638B1 (en) | 2004-04-01 | 2015-03-17 | Fireeye, Inc. | System and method for analyzing suspicious network data |
US10757120B1 (en) | 2004-04-01 | 2020-08-25 | Fireeye, Inc. | Malicious network content detection |
US9027135B1 (en) | 2004-04-01 | 2015-05-05 | Fireeye, Inc. | Prospective client identification using malware attack detection |
US9071638B1 (en) | 2004-04-01 | 2015-06-30 | Fireeye, Inc. | System and method for malware containment |
US10623434B1 (en) | 2004-04-01 | 2020-04-14 | Fireeye, Inc. | System and method for virtual analysis of network data |
US10587636B1 (en) | 2004-04-01 | 2020-03-10 | Fireeye, Inc. | System and method for bot detection |
US20070250930A1 (en) | 2004-04-01 | 2007-10-25 | Ashar Aziz | Virtual machine with dynamic data flow analysis |
US8528086B1 (en) | 2004-04-01 | 2013-09-03 | Fireeye, Inc. | System and method of detecting computer worms |
US8584239B2 (en) | 2004-04-01 | 2013-11-12 | Fireeye, Inc. | Virtual machine with dynamic data flow analysis |
US9106694B2 (en) | 2004-04-01 | 2015-08-11 | Fireeye, Inc. | Electronic message analysis for malware detection |
US10567405B1 (en) | 2004-04-01 | 2020-02-18 | Fireeye, Inc. | System for detecting a presence of malware from behavioral analysis |
US8516593B2 (en) | 2004-04-01 | 2013-08-20 | Fireeye, Inc. | Systems and methods for computer worm defense |
US9197664B1 (en) | 2004-04-01 | 2015-11-24 | Fire Eye, Inc. | System and method for malware containment |
US8204984B1 (en) | 2004-04-01 | 2012-06-19 | Fireeye, Inc. | Systems and methods for detecting encrypted bot command and control communication channels |
US20080005782A1 (en) | 2004-04-01 | 2008-01-03 | Ashar Aziz | Heuristic based capture with replay to virtual machine |
US20110314546A1 (en) | 2004-04-01 | 2011-12-22 | Ashar Aziz | Electronic Message Analysis for Malware Detection |
US10165000B1 (en) | 2004-04-01 | 2018-12-25 | Fireeye, Inc. | Systems and methods for malware attack prevention by intercepting flows of information |
US8291499B2 (en) | 2004-04-01 | 2012-10-16 | Fireeye, Inc. | Policy based capture with replay to virtual machine |
US20130047257A1 (en) | 2004-04-01 | 2013-02-21 | Ashar Aziz | Systems and Methods for Computer Worm Defense |
US20130036472A1 (en) | 2004-04-01 | 2013-02-07 | FireEye, Inc | Computer Worm Defense System and Method |
US9282109B1 (en) | 2004-04-01 | 2016-03-08 | Fireeye, Inc. | System and method for analyzing packets |
US10097573B1 (en) | 2004-04-01 | 2018-10-09 | Fireeye, Inc. | Systems and methods for malware defense |
US9838411B1 (en) | 2004-04-01 | 2017-12-05 | Fireeye, Inc. | Subscriber based protection system |
US10068091B1 (en) | 2004-04-01 | 2018-09-04 | Fireeye, Inc. | System and method for malware containment |
US8171553B2 (en) | 2004-04-01 | 2012-05-01 | Fireeye, Inc. | Heuristic based capture with replay to virtual machine |
US9661018B1 (en) | 2004-04-01 | 2017-05-23 | Fireeye, Inc. | System and method for detecting anomalous behaviors using a virtual machine environment |
US9356944B1 (en) | 2004-04-01 | 2016-05-31 | Fireeye, Inc. | System and method for detecting malicious traffic using a virtual machine configured with a select software environment |
US8635696B1 (en) | 2004-04-01 | 2014-01-21 | Fireeye, Inc. | System and method of detecting time-delayed malicious traffic |
US9628498B1 (en) | 2004-04-01 | 2017-04-18 | Fireeye, Inc. | System and method for bot detection |
US9912684B1 (en) | 2004-04-01 | 2018-03-06 | Fireeye, Inc. | System and method for virtual analysis of network data |
US10284574B1 (en) | 2004-04-01 | 2019-05-07 | Fireeye, Inc. | System and method for threat detection and identification |
US9306960B1 (en) | 2004-04-01 | 2016-04-05 | Fireeye, Inc. | Systems and methods for unauthorized activity defense |
US20160127393A1 (en) | 2004-04-01 | 2016-05-05 | Fireeye, Inc. | Electronic Message Analysis For Malware Detection |
US9591020B1 (en) | 2004-04-01 | 2017-03-07 | Fireeye, Inc. | System and method for signature generation |
US9516057B2 (en) | 2004-04-01 | 2016-12-06 | Fireeye, Inc. | Systems and methods for computer worm defense |
US10027690B2 (en) | 2004-04-01 | 2018-07-17 | Fireeye, Inc. | Electronic message analysis for malware detection |
US20160301703A1 (en) | 2004-04-01 | 2016-10-13 | Fireeye, Inc. | Systems and methods for computer worm defense |
US20080307524A1 (en) | 2004-04-08 | 2008-12-11 | The Regents Of The University Of California | Detecting Public Network Attacks Using Signatures and Fast Content Analysis |
US20050238005A1 (en) | 2004-04-21 | 2005-10-27 | Yi-Fen Chen | Method and apparatus for controlling traffic in a computer network |
US7779463B2 (en) | 2004-05-11 | 2010-08-17 | The Trustees Of Columbia University In The City Of New York | Systems and methods for correlating and distributing intrusion alert information among collaborating computer systems |
US20050262562A1 (en) | 2004-05-21 | 2005-11-24 | Paul Gassoway | Systems and methods of computer security |
US20110093951A1 (en) | 2004-06-14 | 2011-04-21 | NetForts, Inc. | Computer worm defense system and method |
US8006305B2 (en) | 2004-06-14 | 2011-08-23 | Fireeye, Inc. | Computer worm defense system and method |
US8549638B2 (en) | 2004-06-14 | 2013-10-01 | Fireeye, Inc. | System and method of containing computer worms |
US20110099633A1 (en) | 2004-06-14 | 2011-04-28 | NetForts, Inc. | System and method of containing computer worms |
US9838416B1 (en) | 2004-06-14 | 2017-12-05 | Fireeye, Inc. | System and method of detecting malicious content |
US20060021029A1 (en) | 2004-06-29 | 2006-01-26 | Brickell Ernie F | Method of improving computer security through sandboxing |
US20060010495A1 (en) | 2004-07-06 | 2006-01-12 | Oded Cohen | Method for protecting a computer from suspicious objects |
US20060015715A1 (en) | 2004-07-16 | 2006-01-19 | Eric Anderson | Automatically protecting network service from network attack |
US20060015747A1 (en) | 2004-07-16 | 2006-01-19 | Red Hat, Inc. | System and method for detecting computer virus |
US20060031476A1 (en) | 2004-08-05 | 2006-02-09 | Mathes Marvin L | Apparatus and method for remotely monitoring a computer network |
US7949849B2 (en) | 2004-08-24 | 2011-05-24 | Mcafee, Inc. | File system for a capture system |
US20070006313A1 (en) | 2004-09-17 | 2007-01-04 | Phillip Porras | Method and apparatus for combating malicious code |
US20060070130A1 (en) | 2004-09-27 | 2006-03-30 | Microsoft Corporation | System and method of identifying the source of an attack on a computer network |
US20060161987A1 (en) | 2004-11-10 | 2006-07-20 | Guy Levy-Yurista | Detecting and remedying unauthorized computer programs |
US7540025B2 (en) | 2004-11-18 | 2009-05-26 | Cisco Technology, Inc. | Mitigating network attacks using automatic signature generation |
US20100281542A1 (en) | 2004-11-24 | 2010-11-04 | The Trustees Of Columbia University In The City Of New York | Systems and Methods for Correlating and Distributing Intrusion Alert Information Among Collaborating Computer Systems |
US20060117385A1 (en) | 2004-11-30 | 2006-06-01 | Mester Michael L | Monitoring propagation protection within a network |
US20060123477A1 (en) | 2004-12-06 | 2006-06-08 | Kollivakkam Raghavan | Method and apparatus for generating a network topology representation based on inspection of application messages at a network device |
US20060191010A1 (en) | 2005-02-18 | 2006-08-24 | Pace University | System for intrusion detection and vulnerability assessment in a computer network using simulation and machine learning |
US20060251104A1 (en) | 2005-03-31 | 2006-11-09 | Fujitsu Limited | Service apparatus, method of controlling switching of connection destination of client apparatus by service apparatus, and storage medium readable by machine |
US20060242709A1 (en) | 2005-04-21 | 2006-10-26 | Microsoft Corporation | Protecting a computer that provides a Web service from malware |
US7854007B2 (en) | 2005-05-05 | 2010-12-14 | Ironport Systems, Inc. | Identifying threats in electronic messages |
US20060288417A1 (en) | 2005-06-21 | 2006-12-21 | Sbc Knowledge Ventures Lp | Method and apparatus for mitigating the effects of malicious software in a communication network |
US20070006288A1 (en) | 2005-06-30 | 2007-01-04 | Microsoft Corporation | Controlling network access |
US20070016951A1 (en) | 2005-07-13 | 2007-01-18 | Piccard Paul L | Systems and methods for identifying sources of malware |
US20090158430A1 (en) | 2005-10-21 | 2009-06-18 | Borders Kevin R | Method, system and computer program product for detecting at least one of security threats and undesirable computer files |
US7698548B2 (en) | 2005-12-08 | 2010-04-13 | Microsoft Corporation | Communications traffic segregation for security purposes |
US20070143827A1 (en) | 2005-12-21 | 2007-06-21 | Fiberlink | Methods and systems for intelligently controlling access to computing resources |
US20070157306A1 (en) | 2005-12-30 | 2007-07-05 | Elrod Craig T | Network threat detection and mitigation |
US20070192858A1 (en) | 2006-02-16 | 2007-08-16 | Infoexpress, Inc. | Peer based network access control |
US20070208822A1 (en) | 2006-03-01 | 2007-09-06 | Microsoft Corporation | Honey Monkey Network Exploration |
US20090144823A1 (en) | 2006-03-27 | 2009-06-04 | Gerardo Lamastra | Method and System for Mobile Network Security, Related Network and Computer Program Product |
US20080040710A1 (en) | 2006-04-05 | 2008-02-14 | Prevx Limited | Method, computer program and computer for analysing an executable computer file |
US20070240222A1 (en) | 2006-04-06 | 2007-10-11 | George Tuvell | System and Method for Managing Malware Protection on Mobile Devices |
US20070240218A1 (en) | 2006-04-06 | 2007-10-11 | George Tuvell | Malware Detection System and Method for Mobile Platforms |
US20070240220A1 (en) | 2006-04-06 | 2007-10-11 | George Tuvell | System and method for managing malware protection on mobile devices |
WO2007117636A2 (en) | 2006-04-06 | 2007-10-18 | Smobile Systems, Inc. | Malware detection system and method for comprssed data on mobile platforms |
US20120331553A1 (en) | 2006-04-20 | 2012-12-27 | Fireeye, Inc. | Dynamic signature creation and enforcement |
US8566946B1 (en) | 2006-04-20 | 2013-10-22 | Fireeye, Inc. | Malware containment on connection |
US8375444B2 (en) | 2006-04-20 | 2013-02-12 | Fireeye, Inc. | Dynamic signature creation and enforcement |
GB2439806A (en) | 2006-06-30 | 2008-01-09 | Sophos Plc | Classifying software as malware using characteristics (or "genes") |
US8020206B2 (en) | 2006-07-10 | 2011-09-13 | Websense, Inc. | System and method of analyzing web content |
US20080077793A1 (en) | 2006-09-21 | 2008-03-27 | Sensory Networks, Inc. | Apparatus and method for high throughput network security systems |
US20100017546A1 (en) | 2006-10-04 | 2010-01-21 | Trek 2000 International Ltd. | Method, apparatus and system for authentication of external storage devices |
WO2008041950A2 (en) | 2006-10-04 | 2008-04-10 | Trek 2000 International Ltd. | Method, apparatus and system for authentication of external storage devices |
US20080141376A1 (en) | 2006-10-24 | 2008-06-12 | Pc Tools Technology Pty Ltd. | Determining maliciousness of software |
US20080134334A1 (en) | 2006-11-30 | 2008-06-05 | Electronics And Telecommunications Research Institute | Apparatus and method for detecting network attack |
US8069484B2 (en) | 2007-01-25 | 2011-11-29 | Mandiant Corporation | System and method for determining data entropy to identify malware |
US20080184367A1 (en) | 2007-01-25 | 2008-07-31 | Mandiant, Inc. | System and method for determining data entropy to identify malware |
US20080320594A1 (en) | 2007-03-19 | 2008-12-25 | Xuxian Jiang | Malware Detector |
US20090064332A1 (en) | 2007-04-04 | 2009-03-05 | Phillip Andrew Porras | Method and apparatus for generating highly predictive blacklists |
US20090172815A1 (en) | 2007-04-04 | 2009-07-02 | Guofei Gu | Method and apparatus for detecting malware infection |
US20090003317A1 (en) | 2007-06-29 | 2009-01-01 | Kasralikar Rahul S | Method and mechanism for port redirects in a network switch |
US8464340B2 (en) | 2007-09-04 | 2013-06-11 | Samsung Electronics Co., Ltd. | System, apparatus and method of malware diagnosis mechanism based on immunization database |
US20090126015A1 (en) | 2007-10-02 | 2009-05-14 | Monastyrsky Alexey V | System and method for detecting multi-component malware |
US20090125976A1 (en) | 2007-11-08 | 2009-05-14 | Docomo Communications Laboratories Usa, Inc. | Automated test input generation for web applications |
US8045458B2 (en) | 2007-11-08 | 2011-10-25 | Mcafee, Inc. | Prioritizing network traffic |
US20090198689A1 (en) | 2008-02-01 | 2009-08-06 | Matthew Frazier | System and method for data preservation and retrieval |
US20110173213A1 (en) | 2008-02-01 | 2011-07-14 | Matthew Frazier | System and method for data preservation and retrieval |
US20090199274A1 (en) | 2008-02-01 | 2009-08-06 | Matthew Frazier | method and system for collaboration during an event |
US20090198670A1 (en) | 2008-02-01 | 2009-08-06 | Jason Shiffer | Method and system for collecting and organizing data corresponding to an event |
US20130325872A1 (en) | 2008-02-01 | 2013-12-05 | Jason Shiffer | Method and System for Collecting and Organizing Data Corresponding to an Event |
US10146810B2 (en) | 2008-02-01 | 2018-12-04 | Fireeye, Inc. | Method and system for collecting and organizing data corresponding to an event |
US7937387B2 (en) | 2008-02-01 | 2011-05-03 | Mandiant | System and method for data preservation and retrieval |
US9106630B2 (en) | 2008-02-01 | 2015-08-11 | Mandiant, Llc | Method and system for collaboration during an event |
US20130318073A1 (en) | 2008-02-01 | 2013-11-28 | Jason Shiffer | Method and System for Collecting and Organizing Data Corresponding to an Event |
US20090198651A1 (en) | 2008-02-01 | 2009-08-06 | Jason Shiffer | Method and system for analyzing data related to an event |
US8949257B2 (en) | 2008-02-01 | 2015-02-03 | Mandiant, Llc | Method and system for collecting and organizing data corresponding to an event |
US20130325791A1 (en) | 2008-02-01 | 2013-12-05 | Jason Shiffer | Method and System for Analyzing Data Related to an Event |
US20130318038A1 (en) | 2008-02-01 | 2013-11-28 | Jason Shiffer | Method and System for Analyzing Data Related to an Event |
US8566476B2 (en) | 2008-02-01 | 2013-10-22 | Mandiant Corporation | Method and system for analyzing data related to an event |
US8793278B2 (en) | 2008-02-01 | 2014-07-29 | Mandiant, Llc | System and method for data preservation and retrieval |
US20130325792A1 (en) | 2008-02-01 | 2013-12-05 | Jason Shiffer | Method and System for Analyzing Data Related to an Event |
US20130325871A1 (en) | 2008-02-01 | 2013-12-05 | Jason Shiffer | Method and System for Collecting and Organizing Data Corresponding to an Event |
US8201246B1 (en) | 2008-02-25 | 2012-06-12 | Trend Micro Incorporated | Preventing malicious codes from performing malicious actions in a computer system |
US20090241190A1 (en) | 2008-03-24 | 2009-09-24 | Michael Todd | System and method for securing a network from zero-day vulnerability exploits |
US20110167493A1 (en) | 2008-05-27 | 2011-07-07 | Yingbo Song | Systems, methods, ane media for detecting network anomalies |
US8813050B2 (en) | 2008-06-03 | 2014-08-19 | Isight Partners, Inc. | Electronic crime detection and tracking |
US20140297494A1 (en) | 2008-06-03 | 2014-10-02 | Isight Partners, Inc. | Electronic Crime Detection and Tracking |
US9904955B2 (en) | 2008-06-03 | 2018-02-27 | Fireeye, Inc. | Electronic crime detection and tracking |
US20090300589A1 (en) | 2008-06-03 | 2009-12-03 | Isight Partners, Inc. | Electronic Crime Detection and Tracking |
US8881271B2 (en) | 2008-08-01 | 2014-11-04 | Mandiant, Llc | System and method for forensic identification of elements within a computer system |
US20100030996A1 (en) | 2008-08-01 | 2010-02-04 | Mandiant, Inc. | System and Method for Forensic Identification of Elements Within a Computer System |
US20100058474A1 (en) | 2008-08-29 | 2010-03-04 | Avg Technologies Cz, S.R.O. | System and method for the detection of malware |
US20100077481A1 (en) | 2008-09-22 | 2010-03-25 | Microsoft Corporation | Collecting and analyzing malware data |
US20100115621A1 (en) | 2008-11-03 | 2010-05-06 | Stuart Gresley Staniford | Systems and Methods for Detecting Malicious Network Content |
US8997219B2 (en) | 2008-11-03 | 2015-03-31 | Fireeye, Inc. | Systems and methods for detecting malicious PDF network content |
US9954890B1 (en) | 2008-11-03 | 2018-04-24 | Fireeye, Inc. | Systems and methods for analyzing PDF documents |
US20110247072A1 (en) | 2008-11-03 | 2011-10-06 | Stuart Gresley Staniford | Systems and Methods for Detecting Malicious PDF Network Content |
US9118715B2 (en) | 2008-11-03 | 2015-08-25 | Fireeye, Inc. | Systems and methods for detecting malicious PDF network content |
US20120222121A1 (en) | 2008-11-03 | 2012-08-30 | Stuart Gresley Staniford | Systems and Methods for Detecting Malicious PDF Network Content |
US20130291109A1 (en) | 2008-11-03 | 2013-10-31 | Fireeye, Inc. | Systems and Methods for Scheduling Analysis of Network Content for Malware |
US20150180886A1 (en) | 2008-11-03 | 2015-06-25 | Fireeye, Inc. | Systems and Methods for Scheduling Analysis of Network Content for Malware |
US8990939B2 (en) | 2008-11-03 | 2015-03-24 | Fireeye, Inc. | Systems and methods for scheduling analysis of network content for malware |
US9438622B1 (en) | 2008-11-03 | 2016-09-06 | Fireeye, Inc. | Systems and methods for analyzing malicious PDF network content |
US8850571B2 (en) | 2008-11-03 | 2014-09-30 | Fireeye, Inc. | Systems and methods for detecting malicious network content |
US20100132038A1 (en) | 2008-11-26 | 2010-05-27 | Zaitsev Oleg V | System and Method for Computer Malware Detection |
US20100154056A1 (en) | 2008-12-17 | 2010-06-17 | Symantec Corporation | Context-Aware Real-Time Computer-Protection Systems and Methods |
US8370938B1 (en) | 2009-04-25 | 2013-02-05 | Dasient, Inc. | Mitigating malware |
US20120117652A1 (en) | 2009-09-30 | 2012-05-10 | Jayaraman Manni | Network-Based Binary File Extraction and Analysis for Malware Detection |
US8832829B2 (en) | 2009-09-30 | 2014-09-09 | Fireeye, Inc. | Network-based binary file extraction and analysis for malware detection |
US20110078794A1 (en) | 2009-09-30 | 2011-03-31 | Jayaraman Manni | Network-Based Binary File Extraction and Analysis for Malware Detection |
US8935779B2 (en) | 2009-09-30 | 2015-01-13 | Fireeye, Inc. | Network-based binary file extraction and analysis for malware detection |
US10019573B2 (en) | 2009-10-27 | 2018-07-10 | Fireeye, Inc. | System and method for detecting executable machine instructions in a data stream |
US20140237600A1 (en) | 2009-10-27 | 2014-08-21 | Peter J Silberman | System and method for detecting executable machine instructions in a data stream |
US8713681B2 (en) | 2009-10-27 | 2014-04-29 | Mandiant, Llc | System and method for detecting executable machine instructions in a data stream |
US20110099635A1 (en) | 2009-10-27 | 2011-04-28 | Silberman Peter J | System and method for detecting executable machine instructions in a data stream |
WO2011084431A2 (en) | 2009-12-15 | 2011-07-14 | Mcafee, Inc. | Systems and methods for behavioral sandboxing |
US20130282426A1 (en) | 2010-01-18 | 2013-10-24 | Isight Partners, Inc. | Targeted Security Implementation Through Security Loss Forecasting |
US8494974B2 (en) | 2010-01-18 | 2013-07-23 | iSIGHT Partners Inc. | Targeted security implementation through security loss forecasting |
US20110178942A1 (en) | 2010-01-18 | 2011-07-21 | Isight Partners, Inc. | Targeted Security Implementation Through Security Loss Forecasting |
US20110219450A1 (en) | 2010-03-08 | 2011-09-08 | Raytheon Company | System And Method For Malware Detection |
WO2011112348A1 (en) | 2010-03-08 | 2011-09-15 | Raytheon Company | System and method for host-level malware detection |
US20110225624A1 (en) | 2010-03-15 | 2011-09-15 | Symantec Corporation | Systems and Methods for Providing Network Access Control in Virtual Environments |
US20110307955A1 (en) | 2010-06-11 | 2011-12-15 | M86 Security, Inc. | System and method for detecting malicious content |
US20110307954A1 (en) | 2010-06-11 | 2011-12-15 | M86 Security, Inc. | System and method for improving coverage for web code |
US20110307956A1 (en) | 2010-06-11 | 2011-12-15 | M86 Security, Inc. | System and method for analyzing malicious code using a static analyzer |
US8370939B2 (en) | 2010-07-23 | 2013-02-05 | Kaspersky Lab, Zao | Protection against malware on web resources |
US20120210423A1 (en) | 2010-12-01 | 2012-08-16 | Oliver Friedrichs | Method and apparatus for detecting malicious software through contextual convictions, generic signatures and machine learning techniques |
WO2012075336A1 (en) | 2010-12-01 | 2012-06-07 | Sourcefire, Inc. | Detecting malicious software through contextual convictions, generic signatures and machine learning techniques |
US20120174218A1 (en) | 2010-12-30 | 2012-07-05 | Everis Inc. | Network Communication System With Improved Security |
US8438644B2 (en) | 2011-03-07 | 2013-05-07 | Isight Partners, Inc. | Information system security based on threat vectors |
US20120233698A1 (en) | 2011-03-07 | 2012-09-13 | Isight Partners, Inc. | Information System Security Based on Threat Vectors |
US20130232577A1 (en) | 2011-03-07 | 2013-09-05 | Isight Partners, Inc. | Information System Security Based on Threat Vectors |
US9015846B2 (en) | 2011-03-07 | 2015-04-21 | Isight Partners, Inc. | Information system security based on threat vectors |
WO2012145066A1 (en) | 2011-04-18 | 2012-10-26 | Fireeye, Inc. | Electronic message analysis for malware detection |
US20120278886A1 (en) | 2011-04-27 | 2012-11-01 | Michael Luna | Detection and filtering of malware based on traffic observations made in a distributed mobile traffic management system |
US20130097706A1 (en) | 2011-09-16 | 2013-04-18 | Veracode, Inc. | Automated behavioral and static analysis using an instrumented sandbox and machine learning classification for mobile security |
WO2013067505A1 (en) | 2011-11-03 | 2013-05-10 | Cyphort, Inc. | Systems and methods for virtualization and emulation assisted malware detection |
US8214905B1 (en) | 2011-12-21 | 2012-07-03 | Kaspersky Lab Zao | System and method for dynamically allocating computing resources for processing security information |
US20130185795A1 (en) | 2012-01-12 | 2013-07-18 | Arxceo Corporation | Methods and systems for providing network protection by progressive degradation of service |
US9519782B2 (en) | 2012-02-24 | 2016-12-13 | Fireeye, Inc. | Detecting malicious network content |
US10282548B1 (en) | 2012-02-24 | 2019-05-07 | Fireeye, Inc. | Method for detecting malware within network content |
US20130227691A1 (en) | 2012-02-24 | 2013-08-29 | Ashar Aziz | Detecting Malicious Network Content |
US20130247186A1 (en) | 2012-03-15 | 2013-09-19 | Aaron LeMasters | System to Bypass a Compromised Mass Storage Device Driver Stack and Method Thereof |
US9275229B2 (en) | 2012-03-15 | 2016-03-01 | Mandiant, Llc | System to bypass a compromised mass storage device driver stack and method thereof |
GB2490431A (en) | 2012-05-15 | 2012-10-31 | F Secure Corp | Foiling document exploit malware using repeat calls |
US9542559B2 (en) * | 2012-05-21 | 2017-01-10 | Carnegie Mellon University | Detecting exploitable bugs in binary code |
US9268936B2 (en) | 2012-07-27 | 2016-02-23 | Mandiant, Llc | Physical memory forensics system and method |
US20140032875A1 (en) | 2012-07-27 | 2014-01-30 | James Butler | Physical Memory Forensics System and Method |
US20140181131A1 (en) | 2012-12-26 | 2014-06-26 | David Ross | Timeline wrinkling system and method |
US9633134B2 (en) | 2012-12-26 | 2017-04-25 | Fireeye, Inc. | Timeline wrinkling system and method |
US9459901B2 (en) | 2012-12-28 | 2016-10-04 | Fireeye, Inc. | System and method for the programmatic runtime de-obfuscation of obfuscated software utilizing virtual machine introspection and manipulation of virtual machine guest memory permissions |
US10380343B1 (en) | 2012-12-28 | 2019-08-13 | Fireeye, Inc. | System and method for programmatic runtime de-obfuscation of obfuscated software utilizing virtual machine introspection and manipulation of virtual machine guest memory permissions |
US20140189687A1 (en) | 2012-12-28 | 2014-07-03 | Robert Jung | System and Method to Create a Number of Breakpoints in a Virtual Machine Via Virtual Machine Trapping Events |
US10572665B2 (en) | 2012-12-28 | 2020-02-25 | Fireeye, Inc. | System and method to create a number of breakpoints in a virtual machine via virtual machine trapping events |
US20140189882A1 (en) | 2012-12-28 | 2014-07-03 | Robert Jung | System and method for the programmatic runtime de-obfuscation of obfuscated software utilizing virtual machine introspection and manipulation of virtual machine guest memory permissions |
US20140189866A1 (en) | 2012-12-31 | 2014-07-03 | Jason Shiffer | Identification of obfuscated computer items using visual algorithms |
US9690935B2 (en) | 2012-12-31 | 2017-06-27 | Fireeye, Inc. | Identification of obfuscated computer items using visual algorithms |
US9792196B1 (en) | 2013-02-23 | 2017-10-17 | Fireeye, Inc. | Framework for efficient security coverage of mobile software applications |
US9594905B1 (en) | 2013-02-23 | 2017-03-14 | Fireeye, Inc. | Framework for efficient security coverage of mobile software applications using machine learning |
US9009823B1 (en) | 2013-02-23 | 2015-04-14 | Fireeye, Inc. | Framework for efficient security coverage of mobile software applications installed on mobile devices |
US9195829B1 (en) | 2013-02-23 | 2015-11-24 | Fireeye, Inc. | User interface with real-time visual playback along with synchronous textual analysis log display and event/time index for anomalous behavior detection in applications |
US9009822B1 (en) | 2013-02-23 | 2015-04-14 | Fireeye, Inc. | Framework for multi-phase analysis of mobile applications |
US9176843B1 (en) | 2013-02-23 | 2015-11-03 | Fireeye, Inc. | Framework for efficient security coverage of mobile software applications |
US10296437B2 (en) | 2013-02-23 | 2019-05-21 | Fireeye, Inc. | Framework for efficient security coverage of mobile software applications |
US9824209B1 (en) | 2013-02-23 | 2017-11-21 | Fireeye, Inc. | Framework for efficient security coverage of mobile software applications that is usable to harden in the field code |
US9159035B1 (en) | 2013-02-23 | 2015-10-13 | Fireeye, Inc. | Framework for computer application analysis of sensitive information tracking |
US9225740B1 (en) | 2013-02-23 | 2015-12-29 | Fireeye, Inc. | Framework for iterative analysis of mobile software applications |
US20180121316A1 (en) | 2013-02-23 | 2018-05-03 | Fireeye, Inc. | Framework For Efficient Security Coverage Of Mobile Software Applications |
US8990944B1 (en) | 2013-02-23 | 2015-03-24 | Fireeye, Inc. | Systems and methods for automatically detecting backdoors |
US9367681B1 (en) | 2013-02-23 | 2016-06-14 | Fireeye, Inc. | Framework for efficient security coverage of mobile software applications using symbolic execution to reach regions of interest within an application |
US10019338B1 (en) | 2013-02-23 | 2018-07-10 | Fireeye, Inc. | User interface with real-time visual playback along with synchronous textual analysis log display and event/time index for anomalous behavior detection in applications |
US10181029B1 (en) | 2013-02-23 | 2019-01-15 | Fireeye, Inc. | Security cloud service framework for hardening in the field code of mobile software applications |
US10929266B1 (en) | 2013-02-23 | 2021-02-23 | Fireeye, Inc. | Real-time visual playback with synchronous textual analysis log display and event/time indexing |
US9208235B1 (en) * | 2013-03-11 | 2015-12-08 | Symantec Corporation | Systems and methods for profiling web applications |
US9934381B1 (en) | 2013-03-13 | 2018-04-03 | Fireeye, Inc. | System and method for detecting malicious activity based on at least one environmental property |
US9565202B1 (en) | 2013-03-13 | 2017-02-07 | Fireeye, Inc. | System and method for detecting exfiltration content |
US10467414B1 (en) | 2013-03-13 | 2019-11-05 | Fireeye, Inc. | System and method for detecting exfiltration content |
US10198574B1 (en) | 2013-03-13 | 2019-02-05 | Fireeye, Inc. | System and method for analysis of a memory dump associated with a potentially malicious content suspect |
US9355247B1 (en) | 2013-03-13 | 2016-05-31 | Fireeye, Inc. | File extraction from memory dump for malicious content analysis |
US10025927B1 (en) | 2013-03-13 | 2018-07-17 | Fireeye, Inc. | Malicious content analysis with multi-version application support within single operating environment |
US10848521B1 (en) | 2013-03-13 | 2020-11-24 | Fireeye, Inc. | Malicious content analysis using simulated user interaction without user involvement |
US9626509B1 (en) | 2013-03-13 | 2017-04-18 | Fireeye, Inc. | Malicious content analysis with multi-version application support within single operating environment |
US9912698B1 (en) | 2013-03-13 | 2018-03-06 | Fireeye, Inc. | Malicious content analysis using simulated user interaction without user involvement |
US9104867B1 (en) | 2013-03-13 | 2015-08-11 | Fireeye, Inc. | Malicious content analysis using simulated user interaction without user involvement |
US9430646B1 (en) | 2013-03-14 | 2016-08-30 | Fireeye, Inc. | Distributed systems and methods for automatically detecting unknown bots and botnets |
US10812513B1 (en) | 2013-03-14 | 2020-10-20 | Fireeye, Inc. | Correlation and consolidation holistic views of analytic data pertaining to a malware attack |
US9311479B1 (en) | 2013-03-14 | 2016-04-12 | Fireeye, Inc. | Correlation and consolidation of analytic data for holistic view of a malware attack |
US9641546B1 (en) | 2013-03-14 | 2017-05-02 | Fireeye, Inc. | Electronic device for aggregation, correlation and consolidation of analysis attributes |
US10200384B1 (en) | 2013-03-14 | 2019-02-05 | Fireeye, Inc. | Distributed systems and methods for automatically detecting unknown bots and botnets |
US10122746B1 (en) | 2013-03-14 | 2018-11-06 | Fireeye, Inc. | Correlation and consolidation of analytic data for holistic view of malware attack |
US20140280245A1 (en) | 2013-03-15 | 2014-09-18 | Mandiant Corporation | System and method to visualize user sessions |
US10033748B1 (en) | 2013-03-15 | 2018-07-24 | Fireeye, Inc. | System and method employing structured intelligence to verify and contain threats at endpoints |
US9413781B2 (en) | 2013-03-15 | 2016-08-09 | Fireeye, Inc. | System and method employing structured intelligence to verify and contain threats at endpoints |
US9497213B2 (en) | 2013-03-15 | 2016-11-15 | Fireeye, Inc. | System and method to manage sinkholes |
US9251343B1 (en) | 2013-03-15 | 2016-02-02 | Fireeye, Inc. | Detecting bootkits resident on compromised computers |
US9824211B2 (en) | 2013-03-15 | 2017-11-21 | Fireeye, Inc. | System and method to visualize user sessions |
US10713358B2 (en) | 2013-03-15 | 2020-07-14 | Fireeye, Inc. | System and method to extract and utilize disassembly features to classify software intent |
US20140283063A1 (en) | 2013-03-15 | 2014-09-18 | Matthew Thompson | System and Method to Manage Sinkholes |
US10701091B1 (en) | 2013-03-15 | 2020-06-30 | Fireeye, Inc. | System and method for verifying a cyberthreat |
US20140344926A1 (en) | 2013-03-15 | 2014-11-20 | Sean Cunningham | System and method employing structured intelligence to verify and contain threats at endpoints |
US20140283037A1 (en) | 2013-03-15 | 2014-09-18 | Michael Sikorski | System and Method to Extract and Utilize Disassembly Features to Classify Software Intent |
US9507945B2 (en) * | 2013-04-01 | 2016-11-29 | The Johns Hopkins University | Method and apparatus for automated vulnerability detection |
US10469512B1 (en) | 2013-05-10 | 2019-11-05 | Fireeye, Inc. | Optimized resource allocation for virtual machines within a malware content detection system |
US20140337836A1 (en) | 2013-05-10 | 2014-11-13 | Fireeye, Inc. | Optimized resource allocation for virtual machines within a malware content detection system |
US9495180B2 (en) | 2013-05-10 | 2016-11-15 | Fireeye, Inc. | Optimized resource allocation for virtual machines within a malware content detection system |
US9635039B1 (en) | 2013-05-13 | 2017-04-25 | Fireeye, Inc. | Classifying sets of malicious indicators for detecting command and control communications associated with malware |
US10033753B1 (en) | 2013-05-13 | 2018-07-24 | Fireeye, Inc. | System and method for detecting malicious activity and classifying a network communication based on different indicator types |
US10637880B1 (en) | 2013-05-13 | 2020-04-28 | Fireeye, Inc. | Classifying sets of malicious indicators for detecting command and control communications associated with malware |
US10335738B1 (en) | 2013-06-24 | 2019-07-02 | Fireeye, Inc. | System and method for detecting time-bomb malware |
US20140380473A1 (en) | 2013-06-24 | 2014-12-25 | Fireeye, Inc. | Zero-day discovery system |
US10133863B2 (en) | 2013-06-24 | 2018-11-20 | Fireeye, Inc. | Zero-day discovery system |
US10083302B1 (en) | 2013-06-24 | 2018-09-25 | Fireeye, Inc. | System and method for detecting time-bomb malware |
US20140380474A1 (en) | 2013-06-24 | 2014-12-25 | Fireeye, Inc. | System and Method for Detecting Time-Bomb Malware |
US9536091B2 (en) | 2013-06-24 | 2017-01-03 | Fireeye, Inc. | System and method for detecting time-bomb malware |
US9888016B1 (en) | 2013-06-28 | 2018-02-06 | Fireeye, Inc. | System and method for detecting phishing using password prediction |
US9300686B2 (en) | 2013-06-28 | 2016-03-29 | Fireeye, Inc. | System and method for detecting malicious links in electronic messages |
US10505956B1 (en) | 2013-06-28 | 2019-12-10 | Fireeye, Inc. | System and method for detecting malicious links in electronic messages |
US9888019B1 (en) | 2013-06-28 | 2018-02-06 | Fireeye, Inc. | System and method for detecting malicious links in electronic messages |
US20150007312A1 (en) | 2013-06-28 | 2015-01-01 | Vinay Pidathala | System and method for detecting malicious links in electronic messages |
US9426071B1 (en) | 2013-08-22 | 2016-08-23 | Fireeye, Inc. | Storing network bidirectional flow data and metadata with efficient processing technique |
US9876701B1 (en) | 2013-08-22 | 2018-01-23 | Fireeye, Inc. | Arrangement for efficient search and retrieval of indexes used to locate captured packets |
US9294501B2 (en) | 2013-09-30 | 2016-03-22 | Fireeye, Inc. | Fuzzy hash of behavioral results |
US20150096023A1 (en) | 2013-09-30 | 2015-04-02 | Fireeye, Inc. | Fuzzy hash of behavioral results |
US9736179B2 (en) | 2013-09-30 | 2017-08-15 | Fireeye, Inc. | System, apparatus and method for using malware analysis results to drive adaptive instrumentation of virtual machines to improve exploit detection |
US10713362B1 (en) | 2013-09-30 | 2020-07-14 | Fireeye, Inc. | Dynamically adaptive framework and method for classifying malware using intelligent static, emulation, and dynamic analyses |
US10218740B1 (en) | 2013-09-30 | 2019-02-26 | Fireeye, Inc. | Fuzzy hash of behavioral results |
US9628507B2 (en) | 2013-09-30 | 2017-04-18 | Fireeye, Inc. | Advanced persistent threat (APT) detection center |
US9171160B2 (en) | 2013-09-30 | 2015-10-27 | Fireeye, Inc. | Dynamically adaptive framework and method for classifying malware using intelligent static, emulation, and dynamic analyses |
US9912691B2 (en) | 2013-09-30 | 2018-03-06 | Fireeye, Inc. | Fuzzy hash of behavioral results |
US20150096025A1 (en) | 2013-09-30 | 2015-04-02 | Fireeye, Inc. | System, Apparatus and Method for Using Malware Analysis Results to Drive Adaptive Instrumentation of Virtual Machines to Improve Exploit Detection |
US20150096024A1 (en) | 2013-09-30 | 2015-04-02 | Fireeye, Inc. | Advanced persistent threat (apt) detection center |
US9910988B1 (en) | 2013-09-30 | 2018-03-06 | Fireeye, Inc. | Malware analysis in accordance with an analysis plan |
US20180013770A1 (en) | 2013-09-30 | 2018-01-11 | Fireeye, Inc. | System, Apparatus And Method For Using Malware Analysis Results To Drive Adaptive Instrumentation Of Virtual Machines To Improve Exploit Detection |
US9690936B1 (en) | 2013-09-30 | 2017-06-27 | Fireeye, Inc. | Multistage system and method for analyzing obfuscated content for malware |
US10735458B1 (en) | 2013-09-30 | 2020-08-04 | Fireeye, Inc. | Detection center to detect targeted malware |
US10089461B1 (en) | 2013-09-30 | 2018-10-02 | Fireeye, Inc. | Page replacement code injection |
US20150096022A1 (en) | 2013-09-30 | 2015-04-02 | Michael Vincent | Dynamically adaptive framework and method for classifying malware using intelligent static, emulation, and dynamic analyses |
US20160261612A1 (en) | 2013-09-30 | 2016-09-08 | Fireeye, Inc. | Fuzzy hash of behavioral results |
US10657251B1 (en) | 2013-09-30 | 2020-05-19 | Fireeye, Inc. | Multistage system and method for analyzing obfuscated content for malware |
US10515214B1 (en) | 2013-09-30 | 2019-12-24 | Fireeye, Inc. | System and method for classifying malware within content created during analysis of a specimen |
US10192052B1 (en) | 2013-09-30 | 2019-01-29 | Fireeye, Inc. | System, apparatus and method for classifying a file as malicious using static scanning |
US9921978B1 (en) | 2013-11-08 | 2018-03-20 | Fireeye, Inc. | System and method for enhanced security of storage devices |
US9189627B1 (en) | 2013-11-21 | 2015-11-17 | Fireeye, Inc. | System, apparatus and method for conducting on-the-fly decryption of encrypted objects for malware detection |
US9560059B1 (en) | 2013-11-21 | 2017-01-31 | Fireeye, Inc. | System, apparatus and method for conducting on-the-fly decryption of encrypted objects for malware detection |
US10476909B1 (en) | 2013-12-26 | 2019-11-12 | Fireeye, Inc. | System, apparatus and method for automatically verifying exploits within suspect objects and highlighting the display information associated with the verified exploits |
US9756074B2 (en) | 2013-12-26 | 2017-09-05 | Fireeye, Inc. | System and method for IPS and VM-based detection of suspicious objects |
US9747446B1 (en) | 2013-12-26 | 2017-08-29 | Fireeye, Inc. | System and method for run-time object classification |
US10467411B1 (en) | 2013-12-26 | 2019-11-05 | Fireeye, Inc. | System and method for generating a malware identifier |
US20150186645A1 (en) | 2013-12-26 | 2015-07-02 | Fireeye, Inc. | System, apparatus and method for automatically verifying exploits within suspect objects and highlighting the display information associated with the verified exploits |
US9306974B1 (en) | 2013-12-26 | 2016-04-05 | Fireeye, Inc. | System, apparatus and method for automatically verifying exploits within suspect objects and highlighting the display information associated with the verified exploits |
US9507935B2 (en) | 2014-01-16 | 2016-11-29 | Fireeye, Inc. | Exploit detection system with threat-aware microvisor |
US20150199532A1 (en) | 2014-01-16 | 2015-07-16 | Fireeye, Inc. | Micro-virtualization architecture for threat-aware microvisor deployment in a node of a network environment |
US9292686B2 (en) | 2014-01-16 | 2016-03-22 | Fireeye, Inc. | Micro-virtualization architecture for threat-aware microvisor deployment in a node of a network environment |
US20150199531A1 (en) | 2014-01-16 | 2015-07-16 | Fireeye, Inc. | Exploit detection system with threat-aware microvisor |
US10740456B1 (en) | 2014-01-16 | 2020-08-11 | Fireeye, Inc. | Threat-aware architecture |
US20150199513A1 (en) | 2014-01-16 | 2015-07-16 | Fireeye, Inc. | Threat-aware microvisor |
US9946568B1 (en) | 2014-01-16 | 2018-04-17 | Fireeye, Inc. | Micro-virtualization architecture for threat-aware module deployment in a node of a network environment |
US9740857B2 (en) | 2014-01-16 | 2017-08-22 | Fireeye, Inc. | Threat-aware microvisor |
US9262635B2 (en) | 2014-02-05 | 2016-02-16 | Fireeye, Inc. | Detection efficacy of virtual machine-based analysis with application specific events |
US10534906B1 (en) | 2014-02-05 | 2020-01-14 | Fireeye, Inc. | Detection efficacy of virtual machine-based analysis with application specific events |
US9916440B1 (en) | 2014-02-05 | 2018-03-13 | Fireeye, Inc. | Detection efficacy of virtual machine-based analysis with application specific events |
US20150220735A1 (en) | 2014-02-05 | 2015-08-06 | Fireeye, Inc. | Detection efficacy of virtual machine-based analysis with application specific events |
US9674298B1 (en) | 2014-02-20 | 2017-06-06 | Fireeye, Inc. | Efficient access to sparse packets in large repositories of stored network traffic |
US9537972B1 (en) | 2014-02-20 | 2017-01-03 | Fireeye, Inc. | Efficient access to sparse packets in large repositories of stored network traffic |
US9241010B1 (en) | 2014-03-20 | 2016-01-19 | Fireeye, Inc. | System and method for network behavior detection |
US10432649B1 (en) | 2014-03-20 | 2019-10-01 | Fireeye, Inc. | System and method for classifying an object based on an aggregated behavior results |
US10242185B1 (en) | 2014-03-21 | 2019-03-26 | Fireeye, Inc. | Dynamic guest image creation and rollback |
US10454953B1 (en) | 2014-03-28 | 2019-10-22 | Fireeye, Inc. | System and method for separated packet processing and static analysis |
US9787700B1 (en) | 2014-03-28 | 2017-10-10 | Fireeye, Inc. | System and method for offloading packet processing and static analysis operations |
US9591015B1 (en) | 2014-03-28 | 2017-03-07 | Fireeye, Inc. | System and method for offloading packet processing and static analysis operations |
US10341363B1 (en) | 2014-03-31 | 2019-07-02 | Fireeye, Inc. | Dynamically remote tuning of a malware content detection system |
US9223972B1 (en) | 2014-03-31 | 2015-12-29 | Fireeye, Inc. | Dynamically remote tuning of a malware content detection system |
US9432389B1 (en) | 2014-03-31 | 2016-08-30 | Fireeye, Inc. | System, apparatus and method for detecting a malicious attack based on static analysis of a multi-flow object |
US20180069891A1 (en) | 2014-04-03 | 2018-03-08 | Fireeye, Inc. | System and Method of Mitigating Cyber Attack Risks |
US9749344B2 (en) | 2014-04-03 | 2017-08-29 | Fireeye, Inc. | System and method of cyber threat intensity determination and application to cyber threat mitigation |
US20160241581A1 (en) | 2014-04-03 | 2016-08-18 | Isight Partners, Inc. | System and Method of Cyber Threat Intensity Determination and Application to Cyber Threat Mitigation |
US9749343B2 (en) | 2014-04-03 | 2017-08-29 | Fireeye, Inc. | System and method of cyber threat structure mapping and application to cyber threat mitigation |
US10063583B2 (en) | 2014-04-03 | 2018-08-28 | Fireeye, Inc. | System and method of mitigating cyber attack risks |
US20160241580A1 (en) | 2014-04-03 | 2016-08-18 | Isight Partners, Inc. | System and Method of Cyber Threat Structure Mapping and Application to Cyber Threat Mitigation |
US9973531B1 (en) | 2014-06-06 | 2018-05-15 | Fireeye, Inc. | Shellcode detection |
US9594912B1 (en) | 2014-06-06 | 2017-03-14 | Fireeye, Inc. | Return-oriented programming detection |
US9438623B1 (en) | 2014-06-06 | 2016-09-06 | Fireeye, Inc. | Computer exploit detection using heap spray pattern matching |
US20150372980A1 (en) | 2014-06-24 | 2015-12-24 | Fireeye, Inc. | Intrusion prevention and remedy system |
US10084813B2 (en) | 2014-06-24 | 2018-09-25 | Fireeye, Inc. | Intrusion prevention and remedy system |
US10757134B1 (en) | 2014-06-24 | 2020-08-25 | Fireeye, Inc. | System and method for detecting and remediating a cybersecurity attack |
US9661009B1 (en) | 2014-06-26 | 2017-05-23 | Fireeye, Inc. | Network-based malware detection |
US10805340B1 (en) | 2014-06-26 | 2020-10-13 | Fireeye, Inc. | Infection vector and malware tracking with an interactive user display |
US9398028B1 (en) | 2014-06-26 | 2016-07-19 | Fireeye, Inc. | System, device and method for detecting a malicious attack based on communcations between remotely hosted virtual machines and malicious web servers |
US9838408B1 (en) | 2014-06-26 | 2017-12-05 | Fireeye, Inc. | System, device and method for detecting a malicious attack based on direct communications between remotely hosted virtual machines and malicious web servers |
US20160004869A1 (en) | 2014-07-01 | 2016-01-07 | Fireeye, Inc. | Verification of trusted threat-aware microvisor |
US10002252B2 (en) | 2014-07-01 | 2018-06-19 | Fireeye, Inc. | Verification of trusted threat-aware microvisor |
US9680862B2 (en) | 2014-07-01 | 2017-06-13 | Fireeye, Inc. | Trusted threat-aware microvisor |
US20160006756A1 (en) | 2014-07-01 | 2016-01-07 | Fireeye, Inc. | Trusted threat-aware microvisor |
US20160044000A1 (en) | 2014-08-05 | 2016-02-11 | Fireeye, Inc. | System and method to communicate sensitive information via one or more untrusted intermediate nodes with resilience to disconnected network topology |
US9912644B2 (en) | 2014-08-05 | 2018-03-06 | Fireeye, Inc. | System and method to communicate sensitive information via one or more untrusted intermediate nodes with resilience to disconnected network topology |
US10404725B1 (en) | 2014-08-22 | 2019-09-03 | Fireeye, Inc. | System and method of detecting delivery of malware using cross-customer data |
US10027696B1 (en) | 2014-08-22 | 2018-07-17 | Fireeye, Inc. | System and method for determining a threat based on correlation of indicators of compromise from other sources |
US9609007B1 (en) | 2014-08-22 | 2017-03-28 | Fireeye, Inc. | System and method of detecting delivery of malware based on indicators of compromise from different sources |
US9363280B1 (en) | 2014-08-22 | 2016-06-07 | Fireeye, Inc. | System and method of detecting delivery of malware using cross-customer data |
US10671726B1 (en) | 2014-09-22 | 2020-06-02 | Fireeye Inc. | System and method for malware analysis using thread-level event monitoring |
US10027689B1 (en) | 2014-09-29 | 2018-07-17 | Fireeye, Inc. | Interactive infection visualization for improved exploit detection and signature generation for malware and malware families |
US9773112B1 (en) | 2014-09-29 | 2017-09-26 | Fireeye, Inc. | Exploit detection of malware and malware families |
US10868818B1 (en) | 2014-09-29 | 2020-12-15 | Fireeye, Inc. | Systems and methods for generation of signature generation using interactive infection visualizations |
US9781144B1 (en) | 2014-09-30 | 2017-10-03 | Fireeye, Inc. | Determining duplicate objects for malware analysis using environmental/context information |
US10853483B2 (en) * | 2014-12-09 | 2020-12-01 | Nippon Telegraph And Telephone Corporation | Identification device, identification method, and identification program |
US10366231B1 (en) | 2014-12-22 | 2019-07-30 | Fireeye, Inc. | Framework for classifying an object as malicious with machine learning for deploying updated predictive models |
US10902117B1 (en) | 2014-12-22 | 2021-01-26 | Fireeye, Inc. | Framework for classifying an object as malicious with machine learning for deploying updated predictive models |
US9690933B1 (en) | 2014-12-22 | 2017-06-27 | Fireeye, Inc. | Framework for classifying an object as malicious with machine learning for deploying updated predictive models |
US9467460B1 (en) | 2014-12-23 | 2016-10-11 | Fireeye, Inc. | Modularized database architecture using vertical partitioning for a state machine |
US9787706B1 (en) | 2014-12-23 | 2017-10-10 | Fireeye, Inc. | Modular architecture for analysis database |
US10075455B2 (en) | 2014-12-26 | 2018-09-11 | Fireeye, Inc. | Zero-day rotating guest image profile |
US20160191547A1 (en) | 2014-12-26 | 2016-06-30 | Fireeye, Inc. | Zero-Day Rotating Guest Image Profile |
US10528726B1 (en) | 2014-12-29 | 2020-01-07 | Fireeye, Inc. | Microvisor-based malware detection appliance architecture |
US20160191550A1 (en) | 2014-12-29 | 2016-06-30 | Fireeye, Inc. | Microvisor-based malware detection endpoint architecture |
US9934376B1 (en) | 2014-12-29 | 2018-04-03 | Fireeye, Inc. | Malware detection appliance architecture |
US10798121B1 (en) | 2014-12-30 | 2020-10-06 | Fireeye, Inc. | Intelligent context aware user interaction for malware detection |
US9838417B1 (en) | 2014-12-30 | 2017-12-05 | Fireeye, Inc. | Intelligent context aware user interaction for malware detection |
US10148693B2 (en) | 2015-03-25 | 2018-12-04 | Fireeye, Inc. | Exploit detection system |
US9690606B1 (en) | 2015-03-25 | 2017-06-27 | Fireeye, Inc. | Selective system call monitoring |
US20160285914A1 (en) | 2015-03-25 | 2016-09-29 | Fireeye, Inc. | Exploit detection system |
US10666686B1 (en) | 2015-03-25 | 2020-05-26 | Fireeye, Inc. | Virtualized exploit detection system |
US9438613B1 (en) | 2015-03-30 | 2016-09-06 | Fireeye, Inc. | Dynamic content activation for automated analysis of embedded objects |
US20160335110A1 (en) | 2015-03-31 | 2016-11-17 | Fireeye, Inc. | Selective virtualization for security threat detection |
US10474813B1 (en) | 2015-03-31 | 2019-11-12 | Fireeye, Inc. | Code injection technique for remediation at an endpoint of a network |
US9483644B1 (en) | 2015-03-31 | 2016-11-01 | Fireeye, Inc. | Methods for detecting file altering malware in VM based analysis |
US10417031B2 (en) | 2015-03-31 | 2019-09-17 | Fireeye, Inc. | Selective virtualization for security threat detection |
US9912681B1 (en) | 2015-03-31 | 2018-03-06 | Fireeye, Inc. | Injection of content processing delay in an endpoint |
US9846776B1 (en) | 2015-03-31 | 2017-12-19 | Fireeye, Inc. | System and method for detecting file altering behaviors pertaining to a malicious attack |
US9654485B1 (en) | 2015-04-13 | 2017-05-16 | Fireeye, Inc. | Analytics-based security monitoring system and method |
US10104102B1 (en) | 2015-04-13 | 2018-10-16 | Fireeye, Inc. | Analytic-based security with learning adaptability |
US10728263B1 (en) | 2015-04-13 | 2020-07-28 | Fireeye, Inc. | Analytic-based security monitoring system and method |
US9594904B1 (en) | 2015-04-23 | 2017-03-14 | Fireeye, Inc. | Detecting malware based on reflection |
US9892261B2 (en) | 2015-04-28 | 2018-02-13 | Fireeye, Inc. | Computer imposed countermeasures driven by malware lineage |
US20160323295A1 (en) | 2015-04-28 | 2016-11-03 | Isight Partners, Inc. | Computer Imposed Countermeasures Driven by Malware Lineage |
US10395029B1 (en) | 2015-06-30 | 2019-08-27 | Fireeye, Inc. | Virtual system and method with threat protection |
US10454950B1 (en) | 2015-06-30 | 2019-10-22 | Fireeye, Inc. | Centralized aggregation technique for detecting lateral movement of stealthy cyber-attacks |
US10726127B1 (en) | 2015-06-30 | 2020-07-28 | Fireeye, Inc. | System and method for protecting a software component running in a virtual machine through virtual interrupts by the virtualization layer |
US10216927B1 (en) | 2015-06-30 | 2019-02-26 | Fireeye, Inc. | System and method for protecting memory pages associated with a process using a virtualization layer |
US10642753B1 (en) | 2015-06-30 | 2020-05-05 | Fireeye, Inc. | System and method for protecting a software component running in virtual machine using a virtualization layer |
US10715542B1 (en) | 2015-08-14 | 2020-07-14 | Fireeye, Inc. | Mobile application risk analysis |
US20170083703A1 (en) | 2015-09-22 | 2017-03-23 | Fireeye, Inc. | Leveraging behavior-based rules for malware family classification |
US10176321B2 (en) | 2015-09-22 | 2019-01-08 | Fireeye, Inc. | Leveraging behavior-based rules for malware family classification |
US10033759B1 (en) | 2015-09-28 | 2018-07-24 | Fireeye, Inc. | System and method of threat detection under hypervisor control |
US10887328B1 (en) | 2015-09-29 | 2021-01-05 | Fireeye, Inc. | System and method for detecting interpreter-based exploit attacks |
US10033747B1 (en) | 2015-09-29 | 2018-07-24 | Fireeye, Inc. | System and method for detecting interpreter-based exploit attacks |
US9825976B1 (en) | 2015-09-30 | 2017-11-21 | Fireeye, Inc. | Detection and classification of exploit kits |
US10601865B1 (en) | 2015-09-30 | 2020-03-24 | Fireeye, Inc. | Detection of credential spearphishing attacks using email analysis |
US9825989B1 (en) | 2015-09-30 | 2017-11-21 | Fireeye, Inc. | Cyber attack early warning system |
US10873597B1 (en) | 2015-09-30 | 2020-12-22 | Fireeye, Inc. | Cyber attack early warning system |
US10706149B1 (en) | 2015-09-30 | 2020-07-07 | Fireeye, Inc. | Detecting delayed activation malware using a primary controller and plural time controllers |
US10210329B1 (en) | 2015-09-30 | 2019-02-19 | Fireeye, Inc. | Method to detect application execution hijacking using memory protection |
US10817606B1 (en) | 2015-09-30 | 2020-10-27 | Fireeye, Inc. | Detecting delayed activation malware using a run-time monitoring agent and time-dilation logic |
US10284575B2 (en) | 2015-11-10 | 2019-05-07 | Fireeye, Inc. | Launcher for setting analysis environment variations for malware detection |
US10834107B1 (en) | 2015-11-10 | 2020-11-10 | Fireeye, Inc. | Launcher for setting analysis environment variations for malware detection |
US20180048660A1 (en) | 2015-11-10 | 2018-02-15 | Fireeye, Inc. | Launcher for setting analysis environment variations for malware detection |
US10846117B1 (en) | 2015-12-10 | 2020-11-24 | Fireeye, Inc. | Technique for establishing secure communication between host and guest processes of a virtualization architecture |
US10447728B1 (en) | 2015-12-10 | 2019-10-15 | Fireeye, Inc. | Technique for protecting guest processes using a layered virtualization architecture |
US10108446B1 (en) | 2015-12-11 | 2018-10-23 | Fireeye, Inc. | Late load technique for deploying a virtualization layer underneath a running operating system |
US10565378B1 (en) | 2015-12-30 | 2020-02-18 | Fireeye, Inc. | Exploit of privilege detection framework |
US10050998B1 (en) | 2015-12-30 | 2018-08-14 | Fireeye, Inc. | Malicious message analysis system |
US10621338B1 (en) | 2015-12-30 | 2020-04-14 | Fireeye, Inc. | Method to detect forgery and exploits using last branch recording registers |
US10581898B1 (en) | 2015-12-30 | 2020-03-03 | Fireeye, Inc. | Malicious message analysis system |
US10341365B1 (en) | 2015-12-30 | 2019-07-02 | Fireeye, Inc. | Methods and system for hiding transition events for malware detection |
US10133866B1 (en) | 2015-12-30 | 2018-11-20 | Fireeye, Inc. | System and method for triggering analysis of an object for malware in response to modification of that object |
US10872151B1 (en) | 2015-12-30 | 2020-12-22 | Fireeye, Inc. | System and method for triggering analysis of an object for malware in response to modification of that object |
US10581874B1 (en) | 2015-12-31 | 2020-03-03 | Fireeye, Inc. | Malware detection system with contextual analysis |
US10445502B1 (en) | 2015-12-31 | 2019-10-15 | Fireeye, Inc. | Susceptible environment detection system |
US9824216B1 (en) | 2015-12-31 | 2017-11-21 | Fireeye, Inc. | Susceptible environment detection system |
US10785255B1 (en) | 2016-03-25 | 2020-09-22 | Fireeye, Inc. | Cluster configuration within a scalable malware detection system |
US10616266B1 (en) | 2016-03-25 | 2020-04-07 | Fireeye, Inc. | Distributed malware detection system and submission workflow thereof |
US10601863B1 (en) | 2016-03-25 | 2020-03-24 | Fireeye, Inc. | System and method for managing sensor enrollment |
US10476906B1 (en) | 2016-03-25 | 2019-11-12 | Fireeye, Inc. | System and method for managing formation and modification of a cluster within a malware detection system |
US10671721B1 (en) | 2016-03-25 | 2020-06-02 | Fireeye, Inc. | Timeout management services |
US10893059B1 (en) | 2016-03-31 | 2021-01-12 | Fireeye, Inc. | Verification and enhancement using detection systems located at the network periphery and endpoint devices |
US10826933B1 (en) | 2016-03-31 | 2020-11-03 | Fireeye, Inc. | Technique for verifying exploit/malware at malware detection appliance through correlation with endpoints |
US10169585B1 (en) | 2016-06-22 | 2019-01-01 | Fireeye, Inc. | System and methods for advanced malware detection through placement of transition events |
US10121000B1 (en) | 2016-06-28 | 2018-11-06 | Fireeye, Inc. | System and method to detect premium attacks on electronic networks and electronic devices |
US10462173B1 (en) | 2016-06-30 | 2019-10-29 | Fireeye, Inc. | Malware detection verification and enhancement by coordinating endpoint and malware detection systems |
US10191861B1 (en) | 2016-09-06 | 2019-01-29 | Fireeye, Inc. | Technique for implementing memory views using a layered virtualization architecture |
US10430586B1 (en) | 2016-09-07 | 2019-10-01 | Fireeye, Inc. | Methods of identifying heap spray attacks using memory anomaly detection |
US10025691B1 (en) | 2016-09-09 | 2018-07-17 | Fireeye, Inc. | Verification of complex software code using a modularized architecture |
US10592678B1 (en) | 2016-09-09 | 2020-03-17 | Fireeye, Inc. | Secure communications between peers using a verified virtual trusted platform module |
US10491627B1 (en) * | 2016-09-29 | 2019-11-26 | Fireeye, Inc. | Advanced malware detection using similarity analysis |
US10417422B2 (en) * | 2016-10-24 | 2019-09-17 | Baidu Online Network Technology (Beijing) Co., Ltd | Method and apparatus for detecting application |
US10795991B1 (en) | 2016-11-08 | 2020-10-06 | Fireeye, Inc. | Enterprise search |
US10587647B1 (en) | 2016-11-22 | 2020-03-10 | Fireeye, Inc. | Technique for malware detection capability comparison of network security devices |
US10581879B1 (en) | 2016-12-22 | 2020-03-03 | Fireeye, Inc. | Enhanced malware detection for generated objects |
US10552610B1 (en) | 2016-12-22 | 2020-02-04 | Fireeye, Inc. | Adaptive virtual machine snapshot update framework for malware behavioral analysis |
US10523609B1 (en) | 2016-12-27 | 2019-12-31 | Fireeye, Inc. | Multi-vector malware detection and analysis |
US10904286B1 (en) | 2017-03-24 | 2021-01-26 | Fireeye, Inc. | Detection of phishing attacks using similarity analysis |
US10554507B1 (en) | 2017-03-30 | 2020-02-04 | Fireeye, Inc. | Multi-level control for enhanced resource and object evaluation management of malware detection system |
US10791138B1 (en) | 2017-03-30 | 2020-09-29 | Fireeye, Inc. | Subscription-based malware detection |
US10798112B2 (en) | 2017-03-30 | 2020-10-06 | Fireeye, Inc. | Attribute-controlled malware detection |
US10848397B1 (en) | 2017-03-30 | 2020-11-24 | Fireeye, Inc. | System and method for enforcing compliance with subscription requirements for cyber-attack detection service |
US10902119B1 (en) | 2017-03-30 | 2021-01-26 | Fireeye, Inc. | Data extraction system for malware analysis |
US20180288077A1 (en) | 2017-03-30 | 2018-10-04 | Fireeye, Inc. | Attribute-controlled malware detection |
US10503904B1 (en) | 2017-06-29 | 2019-12-10 | Fireeye, Inc. | Ransomware detection and mitigation |
US10855700B1 (en) | 2017-06-29 | 2020-12-01 | Fireeye, Inc. | Post-intrusion detection of cyber-attacks during lateral movement within networks |
US10601848B1 (en) | 2017-06-29 | 2020-03-24 | Fireeye, Inc. | Cyber-security system and method for weak indicator detection and correlation to generate strong indicators |
US10893068B1 (en) | 2017-06-30 | 2021-01-12 | Fireeye, Inc. | Ransomware file modification prevention technique |
US10747872B1 (en) | 2017-09-27 | 2020-08-18 | Fireeye, Inc. | System and method for preventing malware evasion |
US10805346B2 (en) | 2017-10-01 | 2020-10-13 | Fireeye, Inc. | Phishing attack detection |
US20190104154A1 (en) | 2017-10-01 | 2019-04-04 | Fireeye, Inc. | Phishing attack detection |
US20190132334A1 (en) | 2017-10-27 | 2019-05-02 | Fireeye, Inc. | System and method for analyzing binary code for malware classification using artificial neural network techniques |
US20190207966A1 (en) | 2017-12-28 | 2019-07-04 | Fireeye, Inc. | Platform and Method for Enhanced Cyber-Attack Detection and Response Employing a Global Data Store |
US20190207967A1 (en) | 2017-12-28 | 2019-07-04 | Fireeye, Inc. | Platform and method for retroactive reclassification employing a cybersecurity-based global data store |
US10826931B1 (en) | 2018-03-29 | 2020-11-03 | Fireeye, Inc. | System and method for predicting and mitigating cybersecurity system misconfigurations |
US20200089882A1 (en) * | 2018-09-18 | 2020-03-19 | International Business Machines Corporation | System and method for machine based detection of a malicious executable file |
US20200252428A1 (en) | 2018-12-21 | 2020-08-06 | Fireeye, Inc. | System and method for detecting cyberattacks impersonating legitimate sources |
Non-Patent Citations (60)
Title |
---|
"Mining Specification of Malicious Behavior"—Jha et al., UCSB, Sep. 2007 https://www.cs.ucsb.edu/.about.chris/research/doc/esec07.sub.--mining.pdf-. |
"Network Security: NetDetector—Network Intrusion Forensic System (NIFS) Whitepaper", ("NetDetector Whitepaper"), (2003). |
"When Virtual is Better Than Real", IEEEXplore Digital Library, available at, http://ieeexplore.ieee.org/xpl/articleDetails.isp?reload=true&arnumbe- r=990073, (Dec. 7, 2013). |
Abdullah, et al., Visualizing Network Data for Intrusion Detection, 2005 IEEE Workshop on Information Assurance and Security, pp. 100-108. |
Adetoye, Adedayo , et al., "Network Intrusion Detection & Response System", ("Adetoye"), (Sep. 2003). |
Apostolopoulos, George; hassapis, Constantinos; "V-eM: A cluster of Virtual Machines for Robust, Detailed, and High-Performance Network Emulation", 14th IEEE International Symposium on Modeling, Analysis, and Simulation of Computer and Telecommunication Systems, Sep. 11-14, 2006, pp. 117-126. |
Aura, Tuomas, "Scanning electronic documents for personally identifiable information", Proceedings of the 5th ACM workshop on Privacy in electronic society. ACM, 2006. |
Baecher, "The Nepenthes Platform: An Efficient Approach to collect Malware", Springer-verlag Berlin Heidelberg, (2006), pp. 165-184. |
Bayer, et al., "Dynamic Analysis of Malicious Code", J Comput Virol, Springer-Verlag, France., (2006), pp. 67-77. |
Boubalos, Chris , "extracting syslog data out of raw pcap dumps, seclists.org, Honeypots mailing list archives", available at http://seclists.org/honeypots/2003/q2/319 ("Boubalos"), (Jun. 5, 2003). |
Chaudet, C., et al., "Optimal Positioning of Active and Passive Monitoring Devices", International Conference on Emerging Networking Experiments and Technologies, Proceedings of the 2005 ACM Conference on Emerging Network Experiment and Technology, CoNEXT '05, Toulousse, France, (Oct. 2005), pp. 71-82. |
Chen, P. M. and Noble, B. D., "When Virtual is Better Than Real, Department of Electrical Engineering and Computer Science", University of Michigan ("Chen") (2001). |
Cisco "Intrusion Prevention for the Cisco ASA 5500-x Series" Data Sheet (2012). |
Cohen, M.I. , "PyFlag—An advanced network forensic framework", Digital investigation 5, Elsevier, (2008), pp. S112-S120. |
Costa, M. , et al., "Vigilante: End-to-End Containment of Internet Worms", SOSP '05, Association for Computing Machinery, Inc., Brighton U.K., (Oct. 23-26, 2005). |
Didier Stevens, "Malicious PDF Documents Explained", Security & Privacy, IEEE, IEEE Service Center, Los Alamitos, CA, US, vol. 9, No. 1, Jan. 1, 2011, pp. 80-82, XP011329453, ISSN: 1540-7993, DOI: 10.1109/MSP.2011.14. |
DIDIER STEVENS: "Malicious PDF Documents Explained", SECURITY & PRIVACY, IEEE, IEEE SERVICE CENTER, LOS ALAMITOS, CA., US, vol. 9, no. 1, 1 January 2011 (2011-01-01), US , pages 80 - 82, XP011329453, ISSN: 1540-7993, DOI: 10.1109/MSP.2011.14 |
Distler, "Malware Analysis: An Introduction", SANS Institute InfoSec Reading Room, SANS Institute, (2007). |
Dunlap, George W., et al., "ReVirt: Enabling Intrusion Analysis through Virtual-Machine Logging and Replay", Proceeding of the 5th Symposium on Operating Systems Design and Implementation, USENIX Association, ("Dunlap"), (Dec. 9, 2002). |
FireEye Malware Analysis & Exchange Network, Malware Protection System, FireEye Inc., 2010. |
FireEye Malware Analysis, Modern Malware Forensics, FireEye Inc., 2010. |
FireEye v.6.0 Security Target, pp. 1-35, Version 1.1, FireEye Inc., May 2011. |
Goel, et al., Reconstructing System State for Intrusion Analysis, Apr. 2008 SIGOPS Operating Systems Review, vol. 42 Issue 3, pp. 21-28. |
Gregg Keizer: "Microsoft's HoneyMonkeys Show Patching Windows Works", Aug. 8, 2005, XP055143386, Retrieved from the Internet: URL:http://www.informationweek.com/microsofts-honeymonkeys-show-patching-windows-works/d/d-id/1035069? [retrieved on Jun. 1, 2016]. |
Heng Yin et al, Panorama: Capturing System-Wide Information Flow for Malware Detection and Analysis, Research Showcase @ CMU, Carnegie Mellon University, 2007. |
Hiroshi Shinotsuka, Malware Authors Using New Techniques to Evade Automated Threat Analysis Systems, Oct. 26, 2012, http://www.symantec.com/connect/blogs/, pp. 1-4. |
Idika et al., A-Survey-of-Malware-Detection-Techniques, Feb. 2, 2007, Department of Computer Science, Purdue University. |
Isohara, Takamasa, Keisuke Takemori, and Ayumu Kubota. "Kernel-based behavior analysis for android malware detection." Computational intelligence and Security (CIS), 2011 Seventh International Conference on. IEEE, 2011. |
Kaeo, Merike , "Designing Network Security", ("Kaeo"), (Nov. 2003). |
Kevin A Roundy et al.: "Hybrid Analysis and Control of Malware", Sep. 15, 2010, Recent Advances in Intrusion Detection, Springer Berlin Heidelberg, Berlin, Heidelberg, pp. 317-338, XP019150454 ISBN:978-3-642-15511-6. |
Khaled Salah et al: "Using Cloud Computing to Implement a Security Overlay Network", Security & Privacy, IEEE, IEEE Service Center, Los Alamitos, CA, US, vol. 11, No. 1, Jan. 1, 2013 (Jan. 1, 2013). |
Kim, H. , et al., "Autograph: Toward Automated, Distributed Worm Signature Detection", Proceedings of the 13th Usenix Security Symposium (Security 2004), San Diego, (Aug. 2004), pp. 271-286. |
King, Samuel T., et al., "Operating System Support for Virtual Machines", ("King"), (2003). |
Kreibich, C. , et al., "Honeycomb-Creating Intrusion Detection Signatures Using Honeypots", 2nd Workshop on Hot Topics in Networks (HotNets-11), Boston, USA, (2003). |
Kristoff, J. , "Botnets, Detection and Mitigation: DNS-Based Techniques", NU Security Day, (2005), 23 pages. |
Lastline Labs, The Threat of Evasive Malware, Feb. 25, 2013, Lastline Labs, pp. 1-8. |
Li et al., A VMM-Based System Call Interposition Framework for Program Monitoring, Dec. 2010, IEEE 16th International Conference on Parallel and Distributed Systems, pp. 706-711. |
Lindorfer, Martina, Clemens Kolbitsch, and Paolo Milani Comparetti. "Detecting environment-sensitive malware." Recent Advances in Intrusion Detection. Springer Berlin Heidelberg, 2011. |
Marchette, David J., "Computer Intrusion Detection and Network Monitoring: A Statistical Viewpoint", ("Marchette"), (2001). |
Moore, D. , et al., "Internet Quarantine: Requirements for Containing Self-Propagating Code", INFOCOM, vol. 3, (Mar. 30-Apr. 3, 2003), pp. 1901-1910. |
Morales, Jose A., et al., ""Analyzing and exploiting network behaviors of malware."", Security and Privacy in Communication Networks. Springer Berlin Heidelberg, 2010. 20-34. |
Mori, Detecting Unknown Computer Viruses, 2004, Springer-Verlag Berlin Heidelberg. |
Natvig, Kurt , "SANDBOXII: Internet", Virus Bulletin Conference, ("Natvig"), (Sep. 2002). |
NetBIOS Working Group. Protocol Standard for a NetBIOS Service on a TCP/UDP transport: Concepts and Methods. STD 19, RFC 1001, Mar. 1987. |
Newsome, J. , et al., "Dynamic Taint Analysis for Automatic Detection, Analysis, and Signature Generation of Exploits on Commodity Software", In Proceedings of the 12th Annual Network and Distributed System Security, Symposium (NDSS '05), (Feb. 2005). |
Nojiri, D. , et al., "Cooperation Response Strategies for Large Scale Attack Mitigation", DARPA Information Survivability Conference and Exposition, vol. 1, (Apr. 22-24, 2003), pp. 293-302. |
Oberheide et al., CloudAV.sub.--N-Version Antivirus in the Network Cloud, 17th USENIX Security Symposium USENIX Security '08 Jul. 28-Aug. 1, 2008 San Jose, CA. |
Reiner Sailer, Enriquillo Valdez, Trent Jaeger, Roonald Perez, Leendertvan Doorn, John Linwood Griffin, Stefan Berger., sHype: Secure Hypervisor Appraoch to Trusted Virtualized Systems (Feb. 2, 2005) ("Sailer"). |
Silicon Defense, "Worm Containment in the Internal Network", (Mar. 2003), pp. 1-25. |
Singh, S. , et al., "Automated Worm Fingerprinting", Proceedings of the ACM/USENIX Symposium on Operating System Design and Implementation, San Francisco, California, (Dec. 2004). |
SOMESH JHA ; ROBIN SOMMER ; CHRISTIAN KREIBICH: "Recent Advances in Intrusion Detection", vol. 6307, 15 September 2010, SPRINGER BERLIN HEIDELBERG , Berlin, Heidelberg , ISBN: 978-3-642-15511-6, article KEVIN A. ROUNDY ; BARTON P. MILLER: "Hybrid Analysis and Control of Malware", pages: 317 - 338, XP019150454 |
Thomas H. Ptacek, and Timothy N. Newsham , "Insertion, Evasion, and Denial of Service: Eluding Network Intrusion Detection", Secure Networks, ("Ptacek"), (Jan. 1998). |
Venezia, Paul, "NetDetector Captures Intrusions", InfoWorld Issue 27, ("Venezia"), (Jul. 14, 2003). |
Vladimir Getov: "Security as a Service in Smart Clouds—Opportunities and Concerns", Computer Software and Applications Conference (COMPSAC), 2012 IEEE 36th Annual, IEEE, Jul. 16, 2012 (Jul. 16, 2012). |
Wahid et al., Characterising the Evolution in Scanning Activity of Suspicious Hosts, Oct. 2009, Third International Conference on Network and System Security, pp. 344-350. |
Whyte, et al., "DNS-Based Detection of Scanning Works in an Enterprise Network", Proceedings of the 12th Annual Network and Distributed System Security Symposium, (Feb. 2005), 15 pages. |
Williamson, Matthew M., "Throttling Viruses: Restricting Propagation to Defeat Malicious Mobile Code", ACSAC Conference, Las Vegas, NV, USA, (Dec. 2002), pp. 1-9. |
YUHEI KAWAKOYA ; MAKOTO IWAMURA ; MITSUTAKA ITOH: "Memory behavior-based automatic malware unpacking in stealth debugging environment", MALICIOUS AND UNWANTED SOFTWARE (MALWARE), 2010 5TH INTERNATIONAL CONFERENCE ON, IEEE, PISCATAWAY, NJ, USA, 19 October 2010 (2010-10-19), Piscataway, NJ, USA , pages 39 - 46, XP031833827, ISBN: 978-1-4244-9353-1 |
Yuhei Kawakoya et al: "Memory behavior-based automatic malware unpacking in stealth debugging environment", Malicious and Unwanted Software (Malware), 2010 5th International Conference on, IEEE, Piscataway, NJ, USA, Oct. 19, 2010, pp. 39-46, XP031833827, ISBN:978-1-4244-8-9353-1. |
Zhang et al., The Effects of Threading, Infection Time, and Multiple-Attacker Collaboration on Malware Propagation, Sep. 2009, IEEE 28th International Symposium on Reliable Distributed Systems, pp. 73-82. |
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20220179953A1 (en) * | 2020-12-08 | 2022-06-09 | Mcafee, Llc | Systems, methods, and media for analyzing structured files for malicious content |
US11755728B2 (en) * | 2020-12-08 | 2023-09-12 | Mcafee, Llc | Systems, methods, and media for analyzing structured files for malicious content |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10218740B1 (en) | Fuzzy hash of behavioral results | |
US10735458B1 (en) | Detection center to detect targeted malware | |
US10505956B1 (en) | System and method for detecting malicious links in electronic messages | |
US10467411B1 (en) | System and method for generating a malware identifier | |
US11516248B2 (en) | Security system for detection and mitigation of malicious communications | |
US11899786B2 (en) | Detecting security-violation-associated event data | |
US10445502B1 (en) | Susceptible environment detection system | |
US10176321B2 (en) | Leveraging behavior-based rules for malware family classification | |
US10432649B1 (en) | System and method for classifying an object based on an aggregated behavior results | |
US10601848B1 (en) | Cyber-security system and method for weak indicator detection and correlation to generate strong indicators | |
US10581874B1 (en) | Malware detection system with contextual analysis | |
US10192052B1 (en) | System, apparatus and method for classifying a file as malicious using static scanning | |
US9262635B2 (en) | Detection efficacy of virtual machine-based analysis with application specific events | |
US11477214B2 (en) | Cloud-based orchestration of incident response using multi-feed security event classifications with machine learning | |
EP3654216A1 (en) | Computer-security event security-violation detection | |
US11075930B1 (en) | System and method for detecting repetitive cybersecurity attacks constituting an email campaign | |
US20210250369A1 (en) | System and method for providing cyber security | |
US11856011B1 (en) | Multi-vector malware detection data sharing system for improved detection | |
US11176251B1 (en) | Determining malware via symbolic function hash analysis | |
Zhang et al. | Targeted malicious email detection using hypervisor-based dynamic analysis and ensemble learning | |
US11601444B1 (en) | Automated system for triage of customer issues | |
Masud et al. | A data mining technique to detect remote exploits | |
Negi et al. | A Robust Approach for Malware Attacks Detection in the Internet of Things Communications | |
Ismail et al. | Malware detection using augmented naive Bayes with domain knowledge and under presence of class noise | |
CN117157638A (en) | Malicious pattern recognition in clusters of data items |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
FEPP | Fee payment procedure |
Free format text: ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: BIG.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |