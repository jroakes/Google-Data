CN112166586A - Self-authenticating domain-specific browser identifier - Google Patents
Self-authenticating domain-specific browser identifier Download PDFInfo
- Publication number
- CN112166586A CN112166586A CN201980023493.1A CN201980023493A CN112166586A CN 112166586 A CN112166586 A CN 112166586A CN 201980023493 A CN201980023493 A CN 201980023493A CN 112166586 A CN112166586 A CN 112166586A
- Authority
- CN
- China
- Prior art keywords
- partner
- domain
- client device
- content
- list
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
- 238000000034 method Methods 0.000 claims description 55
- 238000012550 audit Methods 0.000 claims description 40
- 235000014510 cooky Nutrition 0.000 abstract description 33
- 230000004044 response Effects 0.000 description 18
- 238000004891 communication Methods 0.000 description 8
- 230000008569 process Effects 0.000 description 8
- 230000005540 biological transmission Effects 0.000 description 7
- 238000004590 computer program Methods 0.000 description 7
- 238000010586 diagram Methods 0.000 description 7
- 238000004422 calculation algorithm Methods 0.000 description 6
- 238000013515 script Methods 0.000 description 6
- 230000003993 interaction Effects 0.000 description 5
- 238000012545 processing Methods 0.000 description 5
- 238000012384 transportation and delivery Methods 0.000 description 5
- 230000001413 cellular effect Effects 0.000 description 4
- 230000003287 optical effect Effects 0.000 description 4
- 238000001914 filtration Methods 0.000 description 3
- 150000003839 salts Chemical class 0.000 description 3
- 230000001953 sensory effect Effects 0.000 description 3
- 238000013475 authorization Methods 0.000 description 2
- 239000000835 fiber Substances 0.000 description 2
- 238000005259 measurement Methods 0.000 description 2
- 238000012552 review Methods 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 230000000007 visual effect Effects 0.000 description 2
- 241001522296 Erithacus rubecula Species 0.000 description 1
- 230000007423 decrease Effects 0.000 description 1
- 230000000694 effects Effects 0.000 description 1
- 230000008030 elimination Effects 0.000 description 1
- 238000003379 elimination reaction Methods 0.000 description 1
- 230000002452 interceptive effect Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000007726 management method Methods 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 238000009877 rendering Methods 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000003068 static effect Effects 0.000 description 1
- 239000010409 thin film Substances 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 238000012800 visualization Methods 0.000 description 1
- 230000003442 weekly effect Effects 0.000 description 1
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/08—Network architectures or network communication protocols for network security for authentication of entities
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/32—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials
- H04L9/321—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials involving a third party or a trusted authority
- H04L9/3213—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials involving a third party or a trusted authority using tickets or tokens, e.g. Kerberos
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/10—Protecting distributed programs or content, e.g. vending or licensing of copyrighted material ; Digital rights management [DRM]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q30/00—Commerce
- G06Q30/02—Marketing; Price estimation or determination; Fundraising
- G06Q30/0241—Advertisements
- G06Q30/0251—Targeted advertisements
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/08—Network architectures or network communication protocols for network security for authentication of entities
- H04L63/0876—Network architectures or network communication protocols for network security for authentication of entities based on the identity of the terminal or configuration, e.g. MAC address, hardware or software configuration or device fingerprint
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/16—Implementing security features at a particular protocol layer
- H04L63/168—Implementing security features at a particular protocol layer above the transport layer
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/14—Session management
- H04L67/146—Markers for unambiguous identification of a particular session, e.g. session cookie or URL-encoding
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/08—Key distribution or management, e.g. generation, sharing or updating, of cryptographic keys or passwords
- H04L9/0816—Key establishment, i.e. cryptographic processes or cryptographic protocols whereby a shared secret becomes available to two or more parties, for subsequent use
- H04L9/0819—Key transport or distribution, i.e. key establishment techniques where one party creates or otherwise obtains a secret value, and securely transfers it to the other(s)
- H04L9/0825—Key transport or distribution, i.e. key establishment techniques where one party creates or otherwise obtains a secret value, and securely transfers it to the other(s) using asymmetric-key encryption or public key infrastructure [PKI], e.g. key signature or public key certificates
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/32—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials
- H04L9/3236—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials using cryptographic hash functions
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/32—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials
- H04L9/3297—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials involving time stamps, e.g. generation of time stamps
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L2209/00—Additional information or applications relating to cryptographic mechanisms or cryptographic arrangements for secret or secure communication H04L9/00
- H04L2209/60—Digital content management, e.g. content distribution
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/02—Protocols based on web technology, e.g. hypertext transfer protocol [HTTP]
Abstract
The present disclosure provides a secure, user-transparent, and efficient content provider-specific identifier read-only cookie ("ROC"). These ROCs include a content provider specific identifier of the client device and are generated by the client device (100) and encrypted with the public key of the content provider (102) or partner device (104) to create an encrypted ROC eurc to prevent third parties from indirectly identifying a match. The ROC may include an authentication token to enable the client device to determine whether the ROC is cached or otherwise abused by the content provider or other third party. Content from the partner device is displayed (318) only if the authentication token is verified. Partner devices include content that personalizes, for example, web pages retrieved from content providers.
Description
Background
A browser cookie, or simply a device-specific, user-specific, or session-specific identifier, is used to uniquely (or semi-uniquely) identify a device, user, or session to a content provider. These cookies are typically generated by the content provider, for example, during a first session or login process, and are provided in subsequent requests from a browser or other application of the client device. The publisher may then associate each request with the same identifier (implicitly, the same device, user, or session), thereby allowing customization of the content selection.
However, typical browser cookies have some serious drawbacks. Third-party content providers that provide embedded content within a website may provide cookies to track browsers without the user necessarily knowing that they are being identified or tracked by these third parties (e.g., because the address shown in the browser address bar can only identify the source of the home page, and not necessarily the source of the embedded content). Thus, it is difficult for users to identify potential privacy issues and control the privacy of their personal information.
Disclosure of Invention
According to at least one aspect of the present disclosure, a system for controlling data exchange may include an encryptor. The encryptor may generate a partner domain-specific identifier for each partner domain in the list of partner domains and encrypt the partner domain-specific identifier and the first authentication token using an encryption key of the corresponding partner domain. The system may include a network interface to send the encrypted partner domain-specific identifier for each partner domain in the partner domain list to the content provider. The network interface may receive from the content provider a content item selected by the content provider based on data from each of the partner domains in the list of partner domains. Data from each partner domain in the partner domain list is selected based on receiving the encrypted partner domain-specific identifier. The network interface may receive, from the content provider, a second authentication token for each partner domain in the list of partner domains via the client device. The system may include an audit engine to determine whether to display the content item based on a comparison of the first authentication token for each partner domain in the list of partner domains and the second authentication token for each partner domain in the list of partner domains.
According to at least one aspect of the present disclosure, a method of controlling data exchange may include receiving, by a client device, a partner domain list from a content provider. The method may include, for each partner domain in the partner domain list, generating, by the client device, a partner domain-specific identifier, and encrypting, by the client device, the partner domain-specific identifier and the first authentication token using an encryption key of the corresponding partner domain. The method may include sending, by the client device to the content provider, the encrypted partner domain-specific identifier for each partner domain in the partner domain list. The method may include receiving, by a client device from a content provider, a content item selected by the content provider based on data from each partner domain in a list of partner domains. Data from each partner domain in the partner domain list is selected based on receiving the encrypted partner domain-specific identifier. The method may include receiving, by the client device, a second authentication token for each partner domain in the list of partner domains from the content provider. The method may include displaying, by the client device, the content item based on a comparison of the first authentication token for each partner domain in the partner domain list and the second authentication token for each partner domain in the partner domain list.
These embodiments are mentioned not to limit or define the scope of the present disclosure, but to aid understanding thereof. Particular embodiments may be developed to realize one or more of the following advantages. By replacing a traditional browser cookie with an encrypted content provider-specific identifier, the user of the client device has greater control over private data (including data exchanges between partner content providers, and having a transparent audit log identifying any such exchanges). The encrypted content provider-specific identifier additionally allows the client device to automatically control the modification of the content, and in particular, whether a particular third party is permitted to modify the content for display. In addition, by utilizing cookie generation and encryption on the client device, resource consumption from large cookie matching tables at the content provider is avoided, improving efficiency. The elimination of tracking pixels and double round trip communications for cookie matching also improves efficiency and better protects user privacy, allowing a client browser or application to render pages faster with lower battery and processor utilization.
Drawings
The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the disclosure will become apparent from the description, the drawings, and the claims, wherein:
FIG. 1 illustrates a block diagram of a network and device environment for data exchange, in accordance with some embodiments;
FIG. 2 illustrates a block diagram of an embodiment of a computing device for use in the network and device environment illustrated in FIG. 1, in accordance with some embodiments;
FIG. 3 illustrates a flow diagram for a client device filtering content requests, according to some embodiments; and is
Fig. 4 and 5 illustrate flow diagrams of methods of data exchange with self-enforcing permissions, according to some embodiments.
Like reference numbers and designations in the various drawings indicate like elements.
Detailed Description
A browser cookie, or simply a device-specific, user-specific, or session-specific identifier, is used to uniquely (or semi-uniquely) identify a device, user, or session to a content provider, such as a web page publisher, advertiser, or other such entity. These cookies are typically generated by the content provider or other device during the first session or login process. The cookie may be provided in a subsequent request from a browser or other application of the client device. The publisher may then associate each request with the same identifier (implicitly, the same device, user, or session), thereby allowing customization of the content selection.
However, typical browser cookies have some serious drawbacks. Third-party content providers that provide embedded content within a website may provide cookies to track browsers without the user necessarily knowing that they are being identified or tracked by these third parties (e.g., because the address shown in the browser address bar can only identify the source of the home page, and not necessarily the source of the embedded content). Thus, it is difficult for users to identify potential privacy issues and control the privacy of their personal information. Privacy control can be technically difficult because it is technically challenging to implement how to control data once it is provided to a second party. For example, the second party may share data with a third party without permission from the original provider of the data.
The systems and methods described herein may increase user security and privacy while allowing for customized content selection. In addition, the present systems and methods may reduce the number of transmissions required to select or customize content to conserve bandwidth and other computing resources. The customization of the content may be performed based on data from a plurality of different domains. Each of the domains may provide a cookie to the client device that enables preferences of the client device to be stored and retrieved at a later time. Preferences from multiple different domains may be used in the selection and customization of content. The systems and methods described herein may filter, limit, or block content requests. Filtering the selected content request to the third party enables the user to control the third party's customization of the content. However, limiting additional content requests saves transmission bandwidth and also increases user privacy.
The systems and methods discussed herein provide for replacing traditional browser cookies with a secure, user-transparent, and efficient content provider-specific identifier, which may be referred to as a "Read-Only Cookie" (ROC). The ROC may be generated by a client device and encrypted with a public key of a third party domain (e.g., a content provider). The encrypted ROC may be referred to as eorc. Encryption of the ROC prevents unintended third party domains from reading the ROC.
The generation of ROCs may be controlled by user policy, such that identifiers are only created for the following third parties: a third party having Terms of Service (ToS) in compliance with a specification, wherein the Terms of Service (ToS) are retrievable from predetermined addresses within the third party domain; third parties on a white list (e.g., for which the user has explicitly provided permission); and/or a third party that is not on a blacklist (e.g., for which the user has explicitly denied permission).
Once ROC is generated, a ToS agreement violation may be difficult to detect. For example, a third party may have a valid ToS agreement; however, the third party may cache the ROC or eoc of the second third party in the event of a ToS violation. In another example, a whitelisted third party may share a ROC with a second third party that is blacklisted. The present systems and methods can identify privacy violations and prevent subsequent ROC generation violating third party domains. Further, the system and method may prevent ROC generation by a third party that is not added to the selection of customized content, thereby improving the privacy of the user.
For example, a content provider may interact with one or more partner domains when selecting content for a client device. Partner domains may provide analytics or other data for selection or customization of content. To request data from a partner, the content provider may need to request permission to share data about the browser with the partner domain according to the ToS agreement. The systems and methods described herein can provide a self-enforcing ROC, wherein the self-enforcing ROC can provide an engineering-based implementation of ToS. For example, a self-enforcing ROC may prevent a content provider from caching the ROC for later use. The systems and methods described herein may generate an eROC that includes a one-time use authentication token. The authentication token may temporarily authorize data sharing between the content provider and the partner domain.
When returning a content item in response to a content request, the browser may review an authentication token returned with the content item by the content provider. The browser may determine whether the content item was selected using a cached ROC, a cached eROC, or against ToS. If the content item fails the audit process, the browser may decide not to display the returned content.
FIG. 1 illustrates a block diagram of a network and device environment 50 for data exchange, according to some embodiments. As shown, the client device 100 may communicate with one or more content providers 102 and one or more partner devices 104(1) -104(N) (which may be referred to generally as partner devices 104) via networks 106, 106'. The networks 106, 106' may be collectively referred to as a network 106.
Network and device environment 50 may include one or more client devices 100. The client device 100 may include any type and form of computing device, including a desktop computer, a laptop computer, a portable computer, a tablet computer, a wearable computer, an embedded computer, a smart television, a console, an Internet of Things (IoT) device, or a smart appliance, or any other type and form of computing device. The client device 100 may run an application (such as a web browser, social media application, video game, or other such application) to request content. The client device 100 may request content and may provide a device identifier, cookie, or other such identifier so that the content provider 102 or partner device 104 may be used to select customized content for the corresponding device or user of the client device 100.
Network and device environment 50 may include one or more networks 106, 106'. The networks 106, 106' may include any type and form of Network, including Local Area Networks (LANs), Wide Area Networks (WANs) such as the internet, satellite networks, cable networks, broadband networks, fiber optic networks, microwave networks, cellular networks, wireless networks, or any combination of these or other such networks. The networks 106, 106' may be the same type of network or different types of networks. The networks 106, 106' may be different parts of the same network. The networks 106, 106' may include a number of additional devices, including gateways, modems, firewalls, routers, switches, and the like. The networks 106, 106 'may also include any number of computing devices (e.g., computers, servers, routers, network switches, etc.) configured to receive and/or transmit data within the networks 106, 106'. The networks 106, 106' may include any number of hardwired and/or wireless connections. The client device 100 may communicate wirelessly (e.g., via Wi-Fi, cellular network, radio, etc.) with a transceiver that is hardwired (e.g., via fiber optic cable, CAT5 cable, etc.) to other computing devices in the network 106, 106'. In some implementations, the networks 106, 106' may be virtual networks, such as between multiple virtual machines run by a single physical machine, or abstract networks, such as offline transmission of data via physically removable media (e.g., Sneakernet, transmission of data via tape media, CD-ROM, flash memory media, external hard drives, floppy disks, etc.).
The network and device environment 50 may include one or more content providers 102. The content provider 102 may select content. The content provider 102 may select or receive content from a pool of partner devices 104. For example, the content provider 102 may receive a request for content from the client device 100 and may select a partner device 104 from among the partner devices 104 to provide the requested content. The selection can be via a load balancing algorithm, an auction algorithm (e.g., providers bid for opportunities to provide content), and the like. Content provider 102 may thus be referred to as a swap server, a load balancer, an auction provider, or any other such terminology. Although shown between networks 106, 106', the content provider 102 may be deployed on the same network segment as the partner device 104.
The network and device environment 50 may include one or more partner devices 104. The partner device 104 may select content to provide to the client device 100 via the network 106, 106' based on the identifier of the client device 100. The identifier may be one of the ROCs described herein. Partner devices 104 may also support selection of content by content provider 102 or other partner devices 104. For example, the partner devices 104 may provide analysis, preferences, content, and other information to the content provider 102 and other partner devices 104 that may be implemented to select customized or tailored content for the client device 100. The analysis, preferences, content, and other information provided by the partner device 104 to the content provider 102 or other partner devices 104 may be generally referred to as data.
The content provider 102 and partner device 104 may utilize cookies (such as ROCs) to provide customized content to the client device 100. For example, when a request for content is issued, the client device 100 may provide a device identifier or cookie to the content provider 102. To maintain client privacy, the client device 100 may generate a private cookie, such as a ROC, for each of the content provider 102 and partner device 104. To prevent the content provider 102 from caching cookies, the cookie of the partner device may include a unique token that can only be extracted from the cookie by the respective partner device 104 or content provider 102. The unique token may be referred to as an authentication token. The authentication token may comprise a random text string or an encoding string. The encoding string may include a combination of a timestamp, a public key, a unique identifier, a random number, a salt (salt), a domain identifier, or a combination thereof. When data or content is returned to the content provider 102, the partner device 104 may return an authentication token. The authentication token is then forwarded to the client device 100 as proof that the data from the partner device 104 was selected in response to the current request rather than being generated in response to the cached cookie.
The content provider 102 and partner devices 104 may include any type and form of computing device, including desktop computers, servers, workstations, laptop computers, portable computers, embedded computers, or any other type and form of computing device. The content provider 102 and partner devices 104 may include virtual machines run by one or more physical computing devices and may be configured as a server cluster, a cluster, or a device cloud.
FIG. 2 illustrates a block diagram of an embodiment of a computing device for use in the network and device environment 50. As described above, the network and device environment 50 may include one or more client devices 100 that may receive content via a content provider 102. The content provider 102 may receive content or other data from one or more partner devices 104.
As discussed above, the client device 100 may be variously referred to as a client, a device, a client device, a computing device, a user device, or any other such terminology, and may be a desktop computer, a laptop computer, a tablet computer, a smartphone, a video game console, a smart television or set-top box, a server, a workstation, or any other type and form of computing device capable of communicating over the network 106. In some implementations, the client device 100 may run an application, service, server, daemon, routine, or other executable logic for communicating over the network 106, such as a web browser, mail client, video player, music player, video game, or any other such application. Such applications may include command line interfaces, graphical user interfaces, or any combination of these or other interfaces. In embodiments where the client device is a smart television or set-top box, the client device may receive content via a first interface (such as terrestrial, satellite, or cable broadcast) and may communicate with the audience measurement server via a second interface (such as an ethernet or Wi-Fi interface) via the network 106. In other implementations, the client device 100 may receive the content via the network 106 and may send the identification of the interaction via the network 106.
The client device 100 may include a processor 200 and a memory 206. The memory 206 may store machine instructions that, when executed by the processor 200, cause the processor 200 to perform one or more of the operations described herein. The processor 200 may comprise a microprocessor, ASIC, FPGA, the like, or combinations thereof. Processor 200 may be a multi-core processor or processor array. Memory 206 may include, but is not limited to, an electronic, optical, magnetic, or any other storage device capable of providing program instructions to processor 200. Memory 206 may include a floppy disk, a CD-ROM, a DVD, a magnetic disk, a memory chip, a ROM, a RAM, an EEPROM, an EPROM, a flash memory, an optical medium, or any other suitable memory from which processor 200 may read instructions. The instructions may include code from any suitable computer programming language, such as, but not limited to, C, C + +, C #, Java, JavaScript, Perl, HTML, XML, Python, and Visual Basic.
The client device 100 may include one or more network interfaces 202. The network interface 202 may include any type and form of interface, including: ethernet, including 10BASE-T, 100BASE-T, or 1000BASE-T ("gigabit"); any of a variety of 802.11 radios, such as 802.11a, 802.11b, 802.11g, 802.11n, or 802.11 ac; cellular networks, including CDMA, LTE, 3G, or 4G cellular networks; bluetooth or other short-range wireless connection; or any combination of these or other interfaces for communicating with network 106. The client device 100 may include multiple network interfaces 202 of different types, allowing connection to various networks 106 or networks 106 such as the internet via different sub-networks.
The client device 100 may include one or more user I/O interfaces 204. The I/O interface 204 may be or may be connected to any electronic device (e.g., a keyboard, a mouse, a pointing device, a touch screen display, a microphone, etc.) that communicates data to a user by generating sensory information (e.g., a visualization on a display, one or more sounds, haptic feedback, etc.) and/or converts sensory information received from a user into electronic signals. According to various embodiments, the one or more user interface devices may be located inside the housing of the client device 100, such as a built-in display, touch screen, microphone, etc., or may be located outside the housing of the client device 100, such as a monitor connected to the client device 100, a speaker connected to the client device 100, etc.
The client device 100 may include an application 208 in the memory 206. The client device 100 may run an application 208 with the processor 200. The application 208 may be an application, applet, script, service, daemon, routine, or other executable logic for receiving content and displaying or otherwise outputting the content via the I/O interface 204 (e.g., display, speaker) of the client device. Application 208 may be a web browser. The application 208 may include functionality for displaying content received via the network interface 202 and/or generated locally by the processor 200. In some implementations, the application 208 can be or include an embedded media player, such as a plug-in within a web browser or a native media player.
The client 100 may include the device identifier 210 or be identified with the device identifier 210. The device Identifier 210 may be an alphanumeric string, a data string, a serial number, a Media Access Control (MAC) address, an Internet Protocol (IP) address, a username or account name, a Globally Unique Identifier (GUID), a cookie, a random or pseudo-random number, or any other type and form of Identifier, including combinations of these or other identifiers. In some implementations, the device identifier 210 may be fixed to the device or pre-configured in the device, such as a manufacturer serial number or MAC address. The device identifier 210 may be dynamically set by a content provider, streaming server, application 208, user, or other entity. For example, the device identifier may be set and stored in a cookie or username.
In some implementations, a unique or new device identifier 210 may be set for each communication with the content provider 102 or partner device 104. In some implementations, the device identifier 210 can be static, time-based (e.g., periodically changing — hourly, daily, weekly), or interval-based (e.g., changing upon rebooting a client device or logging into service).
In some implementations, the device identifier 210 can be associated with one or more other device identifiers 210 (e.g., a device identifier of a mobile device, a device identifier of a home computer, etc.). The device identifier 210 may be provided by the content provider 102 or the partner device 104. In some implementations, the client 100 may request the device identifier 210 from the content provider 102 or partner device 104 and may send the device identifier 210 to the content provider 102 or partner device 104 in association with the request for content or measurement data.
The client device 100 may include an encrypter 214. Encryptor 214 may be any application, applet, script, service, daemon, routine, or other executable logic that generates ROCs and erocs. The encryptor 214 may be used to compute a hash result based on the input. The hash result may be used for (or as) ROC and eROC. The encryptor 214 may include hardware, software or a combination of hardware and software. In some implementations, the encryptor 214 may include a cryptographic Module, a Trusted Platform Module (TPM), an ASIC, or any other type and form of circuitry for performing cryptographic and cryptographic hash computations.
As described above, the client device 100 may replace a traditional browser cookie with a secure, user-transparent ROC. The encryptor 214 may generate a ROC. The encryptor 214 may then encrypt the ROC with the public key of the content provider 102, partner device 104, or other third party to form an encrypted ROC (eoc). The use of an eROC may prevent unintended parties from using the identifier contained within the eROC. For example, only the owner of the private key associated with the public key can decrypt the eROC to access the identifier. Encrypting the ROC may enable the client device 100 to send an eROC destined for a partner device 104 to the content provider 102, which the content provider 102 may forward to the respective partner device 104. Since the euroc is not encrypted with the content provider's public key (but with the partner device's 104 public key), the content provider 102 cannot use or access the identifier contained within the euro destined for the partner device 104.
The generation of the content provider specific identifier may be controlled by user policy, such that the identifier is only created by: for content providers that comply with terms of service (ToS); from content providers on a white list (e.g., for which the user has explicitly provided permission); and/or from content providers that are not on a blacklist (e.g., for which the user has explicitly denied permission). In some embodiments, a ToS may be compliant if the ToS is retrievable from a predetermined address within a domain and the contents of the retrieved ToS have not changed from the original ToS.
Encryptor 214 may use cryptographic hashes to generate ROC and eROC. The cryptographic hash may include any suitable hashing algorithm, such as MD5 and SHA 256. The encryptor 214 may generate the ROC by hashing input, where the hashing input may include a browser-specific private identifier, an application-specific private identifier, a device-specific private identifier, or a session-specific private identifier (e.g., an identifier specific to a browser instance of a particular user separate from other users of the device) and a domain name or address of the recipient (e.g., the content provider 102 or partner device 104).
In some embodiments, to provide additional salt, the hash input may also include a creation time or expiration time for the ROC. Other sources of entropy (such as device type or serial number, clock offset time, hardware identifier, or any other such data) may be used to similarly increase the complexity of the hash input. In some implementations, the "expiration time" can be a granularity value, such as weeks, months, or years before the expiration of the content provider-specific identifier, allowing the client to automatically regenerate.
Encryptor 214 may generate an euroc by encrypting the ROC via the public key of the legitimate owner or intended recipient (e.g., content provider 102 or partner device 104). The encryptor 214 can generate an eROC by first concatenating the ROC with the creation timestamp, a random number, and first encrypting the concatenated result with the public key of the receiver, so that the resulting eROC is highly variable even for a single domain.
The client device 100 may use a random number as an authentication token. The encryptor 214 may generate a new authentication token each time the encryptor 214 generates an euro. The encryptor 214 may generate an authentication token by concatenating the requesting domain, the recipient or partner domain, the timestamp and the private identifier. The private identifier may be a domain-specific identifier. The encryptor 214 may encrypt the concatenated string to form a random number. Encryptor 214 may encrypt the concatenated string with symmetric key encryption to form a random number. Symmetric key encryption may include AES encryption or AES-based GCM encryption, etc. In some implementations, the intended recipient (e.g., content provider 102 or partner device 104) can decrypt and extract the private identifier and authentication token. The content provider 102 or partner device 104 may use the private identifier to select or customize content.
The client device 100 may include an audit log 216. The audit log 216 may be a database stored in the memory 206. When the encryptor 214 generates the authentication tokens, the encryptor 214 may store each authentication token as a value of a key-value pair in a lookup table. The key of the key-value pair may be a request identifier. For example, in response to a content request, the client device 100 may receive a request from the content provider 102 to initiate data sharing with the plurality of partner devices 104. The encryptor 214 may generate an eROC for each of the partner devices 104 and store the authentication token in the audit log 216 as a value keyed to the request identifier. As described in connection with fig. 3 and 4, etc., the audit engine 212 may audit the content request prior to displaying the returned content by determining whether each of the partner devices 104 returned a valid authentication token (as indicated by the audit engine 212 finding a match with the returned authentication token in the audit log 216). The audit log 216 may also include another look-up table that provides an indication of the relative contribution of partner devices in selecting returned content. The auditing engine 212 may maintain an indication of the contribution in association with an identifier of the partner device 104.
The client device 100 may run an audit engine 212. The auditing engine 212 may include an application, server, service, daemon, routine, or other executable logic for reviewing responses to returned content requests. The audit engine 212 may audit the audit log 216 to determine if the content provider 102 or partner device 104 is violating ToS by, for example, caching an eROC or ROC.
As described above, in response to transmitting a content request to the content provider 102, the content provider 102 may request permission to share information or data with one or more partner devices 104 for selecting or customizing content. The client device 100 may approve the request by generating a respective eROC for each of the partner devices 104. Each euro may include an authentication token, which encryptor 214 may store in audit log 216. The audit log 216 may include multiple rows. Each row may include a randomly generated key that may be used as an authentication token. The data saved to each of the respective rows may be data encoded with or in the authentication token. When the content provider 102 responds to the content request with the content item, the content provider 102 may forward the authentication token from the partner device 104 to the client device 100. Since the euro is encoded with the public key of the partner device, only the partner device 104 (and not the content provider 102) can extract the authentication token from the euro. The audit engine 212 may determine whether the authentication token is valid by accessing the audit log 216 and determining whether the authentication token corresponds to the most recent content request. In some implementations, as described above, a timestamp may be included or embedded in the authentication token. The auditing engine 212 may set a predetermined timeout period for the authentication token. If the timestamp of the returned authentication token is outside of the timeout period, audit engine 212 may determine that the authentication token is not valid. If the authentication token is not valid, indicating, for example, that eROC is cached, audit engine 212 may instruct application 208 not to display the returned content. In some implementations, the authentication token may be "self-contained. For example, the authentication token may include data required for the client device 100 (or other device) to authenticate the authentication token. For example, an indication of the request, partner domain, timestamp, or other data may be encrypted with the private key of the client device 100 and included in the authentication token. Upon receiving the authentication token, the client device 100 may decrypt the authentication token to retrieve the encrypted data and authenticate the authentication token using the decrypted data.
For content, the content provider 102 may also send a data structure that includes the contribution of each partner device 104 in the selection of content. The data structure may include key-value pairs that indicate the contribution (value) of each partner device 104 (key). The contribution of a given partner device 104 to the selection of a content item may be negotiated between the partner device 104 and the content provider 102. After the partner device 104 engages in a predetermined number of content requests, the auditing engine 212 may calculate an average contribution of the partner device 104 to the selected or customized content. In response to future content requests, encryptor 214 may not generate an eROC for partner device 104 if the contribution of the partner device is below a predetermined threshold.
The network and device environment 50 may include a content provider 102. As with the client device 100, the content provider 102 may include one or more processors 200, a memory or storage device 206, a network interface 202, and an interface 204. In some implementations, the content provider 102 may be a headless server that does not include a user interface but may communicate with the client 100 or partner device 104 via the network 106. In some implementations, the memory 206 may store one or more applications run by the processor 200 of the server, including FTP servers, web servers, mail servers, file sharing servers, peer-to-peer servers, or other such applications for communicating content or redirecting commands to allow clients to access content at a content provider.
The content provider 102 may select content directly or indirectly in response to a content request from the client device 100. For example, the content provider 102 may respond directly to the content request by selecting a content item from the content database 234 of the content provider 102. The content provider 102 may respond to the content request indirectly by forwarding the request to one or more partner devices 104 that may select content or by receiving analytics and other data that enables the content provider 102 to select customized content.
The content provider 102 may select the partner device 104 from a list of partner devices. The content provider 102 may select the partner device 104 via a round robin or other load balancing system or via an auction based system. When one or more partner devices 104 are selected, the content provider 102 may send a request for permission to include the partner devices 104 in the selection of the requested content. In some implementations, the request can be included in a web page or other application that will present the content. For example, a content slot (slot) in which content is to be presented may include a plurality of tags that identify partner devices 104 to be used in the implementation of the content item. The indication of the partner device 104 may be included in a title of the web page. In response to the request for permission, the content provider 102 may receive from the client device 100 an eROC for each partner device 104 that the client device 100 permits to participate in the selection of the content item.
As also shown in fig. 2, the network and device environment 50 may include one or more partner devices 104. The partner device 104 may include one or more computing devices connected to the network 106 and configured to select or enable selection of content in response to a content request. The partner device 104 may provide the content item to the client device 100 directly or via the content provider 102. Partner device 104 may be a content provider, server, web server, data server, publisher, service provider, analysis system, or other such device. The partner device 104 may include a plurality of computing devices configured as a server farm or cloud, and may include a router, load balancer, network address translator, firewall, or other such device. The partner device 104 may be a computer server (e.g., FTP server, file sharing server, web server, etc.) or a combination of servers (e.g., data center, cloud computing platform, etc.). Partner devices 104 may provide any type and form of content, including text, images, video, audio, multimedia, or other data, or any combination of these. Content may include live media content, pre-recorded media content, presentation content, movies, television shows, podcasts, video blogs, video games or other interactive content, advertisements in any format, social media, or any other type and form of content.
The partner device 104 may include one or more processors 200, network interfaces 202, I/O interfaces 204, and/or memory devices 206. Partner device 104 may include multiple computing devices, including virtual machines run by physical devices. For example, the content provider 104 may include a plurality of virtual machines run by one or more physical computing devices, each such virtual machine running a partner device (e.g., a network server, a file server, a streaming media server, etc.) and communicating with one or more storage devices (such as network storage devices, RAID storage devices, or other such devices).
The partner device 104 and the content provider 102 may include a content selector 230. The content selector 230 may include an application, service, server, daemon, routine, or other executable logic for selecting content from the content store 234 for delivery to the client device 100. The content selector 230 may select content for delivery to the client device 100 based on information about the client stored in the identifier database 232. For example, the database 232 may include information about the capabilities of the client device (e.g., screen resolution or orientation, color depth, bandwidth, etc.) or any other such information for selecting customized content. The content stored in the database 232 may be indexed by the ROC or a private identifier included in, derived from, or otherwise associated with the ROC.
For example, upon receiving an eROC from a client device 100, the content provider 102 and partner device 104 may decrypt the eROC to recover the ROC. The content selector 230 may identify information about the client device 100 in the database 232 via the ROC and select corresponding content from the content storage 234. The content selector 230 may push or stream content to the client device 100, provide a Unique Resource Identifier (URI) or address of the content to the client device 100 so that the client application 208 may subsequently request the content for delivery and rendering (e.g., from a web server of the content provider 104), or provide the URI or address to the content provider 102 for forwarding to the client device.
The content store 234 may be provided by one or more additional storage devices in communication with the content provider 102 or partner device 104. The content store 234 may include any type and form of data, including audio, video, animation, text, multimedia, still or animated graphics, runnable scripts, or any other type and form of content.
The identifier database 232 may include a database, flat file, index file, or other type and form of data structure for associating information about a client device, account, or session with a ROC or private identifier. The identifier database 232 may be stored in the memory 206. The identifier database 232 may be separately stored and provided to the content selector 230 (e.g., via a separate database server).
The content provider 102 and partner device 104 may each include a decryptor 236. Decryptor 236 may be any application, applet, script, service, daemon, routine, or other executable logic that decrypts the eROC. Decryptor 236 may include software, hardware, or a combination of hardware and software for decrypting an eROC via a private key of a recipient of the eROC (e.g., content provider 102 or partner device 104). Decryptor 236 may execute any suitable type of decryption algorithm and may include decryption circuitry such as an ASIC, FPGA, Trusted Platform Module (TPM), or other such element. Decryptor 236 may decrypt the eROC and extract the authentication token and other data from the decrypted ROC (such as the ROC).
FIG. 3 illustrates a flow diagram of a client device self-enforcing terms of service and filtering content requests. At step 300, a client device 100 may request a content item. In some implementations, the request can be generated during presentation of the web page, for example, a request for embedded content in the page (such as a banner or other image), a media file (such as a leader advertisement, trailer advertisement, or commercial break media file), or any other such content. In some implementations, the request can be for an unknown content item such that the content provider 102 or partner device 104 can select an appropriate content item. In some implementations, the request may include a device identifier or other identifier of the client device, including a username, an account name, an address or hardware identifier, or any other such information.
At step 302, the content provider 102 may request permission to share data with one or more selected partner devices 104. For example, in response to receiving the request, the content provider 102 may select one or more partner devices 104 that may provide the content to the client device 100 or assist in providing the content to the client device 100. The selection of partner devices 104 may be based on load balancing requirements, auction participants, or any other such method. For example, the content provider 102 may communicate with the partner device 104 to request a bid or other offer for an opportunity to provide content to the client device 100. In some implementations, the partner device 104 may provide additional information or data that may enable or improve the selection of content for the client device 100. For example, the partner device 104 may provide a preference or interest indication on which content may be selected or customized. In some implementations, employing the partner device 104 in selecting content for the client device 100 may require the content provider 102 to share information about the client device 100 with the partner device 104. Prior to sharing information with partner device 104, content provider 102 may request permission from client device 100 to share information with partner device 104. In some implementations, the request for permission can be embedded in an application or web page into which the content is to be rendered. For example, the request for permission may be in a title of the web page or a content slot of the web page as a plurality of tags identifying each of the partner devices 104 participating in providing the content. In these implementations, the content provider 102 may not transmit an explicit transmission of the request permission to the client device 100 (e.g., step 302), and the client device's approval of the data sharing request embedded in the web page may be included in the request for content (e.g., step 300). For example, the request for content at step 300 may also include the transmission of ROCs and eoc described below (e.g., step 306).
The request for permission may include a domain, address, or other identifier for each selected partner device 104. In some embodiments, the identifier may have a predetermined length, such as 32 or 64 bytes, with shorter fields or addresses being padded and longer fields being truncated. Then, the identifiers may be concatenated directly, since the client device 100 may extract each identifier according to a predetermined length. In other embodiments, the identifiers may be separated by delimiters (e.g., predetermined characters or strings of characters).
At step 304, if the client device 100 approves the request to share data, the client device 100 may generate an encrypted eROC for each of the approved partner devices 104. For example, as described herein, the client device 100 may generate an euro for each of the approved partner devices 104. The euroc may be generated based on an identifier associated with each of the partner devices 104 and may include an authentication token. The euro may include a private identifier (e.g., euro) that identifies the client device 100 to the partner device 104. The client device 100 may store each authentication token in the audit log in association with the partner device identification.
At step 306, client device 100 may transmit an eROC to content provider 102. Client device 100 may send an eROC to content provider 102 in an HTTP request. At step 308, the content provider 102 may forward the respective eROC to each of the respective partner devices 104. When forwarding the eROC to the partner device 104, the transmission may include a request for content or a request for data to enable selection of content.
At step 310, each partner device 104, upon receiving the request and the eeroc corresponding to that partner device 104, may decrypt the eeroc using their private key to recover the ROC. Once the euro is decrypted, the partner device 104 may extract the private identifier of the client device and the authentication token. Based on the private identifier, the partner device 104 may select content for delivery to the client device 100 or data that may be used in the selection of content. At step 312, the partner device 104 may send data or content to the content provider 102.
At step 314, the content provider 102 may select content. The content provider 102 may select a content item from a plurality of content items provided by each of the different partner devices 104. The content provider 102 may select content items based on preferences or other data provided by the partner device 104. For example, the partner device 104 may provide an indication of the computing capabilities of the client device, preferences of the user of the client device 100, or other data. In this example, the content provider 102 may select content that satisfies the user preferences and may be presented according to the computing capabilities of the client device.
When the content provider 102 receives content or data from the partner device 104, the content provider 102 may collect the authentication token provided by the partner device 104 and the data sent from the partner device 104. The content provider 102 may store the authentication token in a table in association with a content request identifier corresponding to the current content request.
At step 316, the content provider 102 may send the content and the collected authentication token to the client device 100. At step 318, the client device 100 may review the returned authentication token and display the received content. The client device 100 may audit the authentication token prior to displaying or presenting the content. If the authentication token does not pass the audit, the client device 100 may reject or decline the presentation of the content. For example, the client device 100 may audit the authentication tokens to determine whether each of the returned authentication tokens is valid. A valid authentication token may indicate that content provider 102 received permission to share data with partner device 104. An invalid authentication token may indicate that the content provider 102 has not received permission to share data with the partner device 104 and attempts to, for example, cache and reuse one or more eROCs or authentication tokens.
Fig. 4 and 5 show a flow chart of a data exchange method with self-enforcing permissions. Each flowchart is divided into sections to illustrate steps or processes performed by the client device 100, the content provider 102, and the partner device 104.
At step 400, the client device 100 may send a request for content to the content provider 102. An application on the client device 100, such as a web browser or media application, may generate a request for content. The application may generate the request when a timed event is encountered during presentation of the web page or during playback of another content item. The request may be sent via any suitable transport protocol (e.g., an HTTPS request, a RESTful request, etc.) and may include performing a handshake procedure. The request may include a device identifier, an account identifier, a user identifier, a session identifier, or other such identifier or cookie (e.g., ROC) generated by the client device for content provider 102 to uniquely identify client device 100. For example, in some implementations, the content provider 102 may have previously provided a cookie to the client device 100 (e.g., during an authentication process or other such event), and the client device 100 may provide the same cookie in a subsequent request.
At step 402, the content provider 102 may identify one or more partner devices 104 to potentially provide content to the client device 100 or to provide data for selecting content to provide to the client device 100. The content provider 102 may select the partner device 104 via any method, such as an auction system or a polling algorithm or other load balancing system. In some implementations, the partner device 104 may be identified to the client device 100 in a web page or application for which the content request is generated. For example, the list of partner devices 104 may be included in the plurality of tag parameters in a web page or via publicly accessible partner files identified in the web page.
At step 404, the content provider 102 may request permission to share data with one or more partner devices 104 identified at step 402. The sharing of data with the partner device 104 may include the content provider 102 sharing the aforementioned client identifier, for example, received by the content provider 102 from the client device 100. In some implementations, each of the partner devices 104 may have previously exchanged a device identifier, account identifier, user identifier, session identifier, or other such identifier or cookie with the client device 100. The previously shared identifier may be a ROC (or other identifier) that is unique between the client device 100 and the corresponding partner device 104. For example, the client device 100 may store a different ROC for each of the partner devices 104. In some implementations, the request for permission to share data may include a request for the client device 100 to send a previously stored identifier to the partner device 104.
The permission request may include an identifier, such as a domain, that identifies the partner device 104 to the client device 100. For example, the content provider 102 may add the selected partner device 104 to the list. Adding the partner device 104 may include adding a domain name or address of the partner device 104 to the list, concatenating the domain name or address to a set of names or addresses, or otherwise adding the identity of the partner device 104 to the list.
At step 406, the client device 100 may extract the domain or address of the first partner device 104 from the list received with the request to share data. As described above, the list may include fields of a predetermined length or variable length fields separated by delimiters. Accordingly, the client device 100 may extract the domain or address according to the length or the delimiter.
The client device 100 may determine whether permission should be given to share data with the partner device 104 (either by the content provider 102 or directly from the client device 100). As described above, the client device 100 may maintain an audit log that may include a list of whitelisted or blacklisted partner devices 104. The client device 100 may search the whitelisted or blacklisted partner devices 104 to determine whether data should be shared with the partner devices 104. For example, if the domain of the partner device is included in the blacklist, the client device 100 may determine that the data should not be shared with the partner device 104. The client device 100 may determine not to generate an eROC for a partner device 104 by returning to step 406 and identifying the next partner device 104 in the list provided by the content provider 102.
As described above, the audit log may include contribution information for each of the partner devices 104. The contribution information may indicate a contribution of the partner device to a selection of previously provided content. For example, as further described with respect to step 428, when fulfilling a content request, the content provider 102 may provide an indication of the amount of contribution each of the partner devices 104 provided in selecting content to fulfill the request. The contribution level may be expressed as a percentage for each partner device 104. The aggregate percentage contribution of each of the partner devices 104 to fulfill the content request may equal 100%. The level of contribution provided by the partner device 104 in fulfilling the content request may be determined based on an agreement between the content provider 102 and the respective partner device 104. For example, in exchange for data from the partner device 104 that enables the content provider 102 to customize content provided to the client device 100, the content provider 102 may contribute 10% to the partner device 104. In some implementations, if payment is provided to the content provider 102 for providing the content, the payment may be split between the content provider 102 and each of the partner devices 104 based on the level of contribution each plays in selecting the content.
To determine the past contribution of the partner device 104, the client device 100 may calculate a contribution value for the partner device 104. The contribution value may be an average of the contribution levels provided by the partner device 104 in selecting past content items. In some implementations, the contribution value may be calculated based on a time limit or a particular number of content realizations. For example, the contribution value may be implemented based only on content within the last day, week, month, year, or other time range. In another example, the contribution value may be based on the past N content realizations. The contribution value may be a weighted average. For example, the contribution level from the most recent content implementation may be weighted higher than the contribution level from the relatively earlier content implementation.
At step 410, the client device 100 may determine whether the calculated contribution value is above a predetermined threshold. If the contribution value is above the threshold, the client device 100 may proceed to step 412. If the contribution value is below the threshold, the client device 100 may return to step 406 and not generate an eROC for the currently identified partner device 104. The client device 100 may compare the calculated contribution value to a threshold value to determine what impact the partner device 104 has on the selection and customization of content. To enable the partner device 104 to provide input in selecting content for the client device 100, some information is provided from (or about) the client device 100 to the partner device 104. To increase the privacy of the client device 100, the client device 100 may decide not to authorize sharing data with partner devices 104 that do not substantially affect content selection (e.g., the contribution value is less than a threshold). By not sharing data with the partner device 104 when the partner device 104 has a low contribution value, the client device 100 may protect the privacy of the client device 100 while not affecting the quality of the content selected for the client device 100. In some implementations, if the partner device 104 is not engaged in the implementation of the content request before sending the request in step 400, the client device 100 may pass the partner domain to the generation of the ROC (e.g., step 412) even if the contribution value of the partner domain is below a predetermined threshold. The client device 100 may provide a new partner domain with a grace period during which the partner domain is authorized to participate in data sharing even when the contribution value of the partner domain is below a predetermined threshold. The grace period may last for a predetermined length of time (e.g., a day, week, or month) or a predetermined interval (e.g., for 10, 50, or 100 content requests).
If the client device 100 determines that the contribution value is above the threshold, the client device 100 may calculate an ROC for the partner device 104. In some implementations, instead of or in addition to comparing the contribution value to the threshold, the client device 100 may determine whether the domain of the partner device 104 is on a white list or a black list indicating data sharing authorization. For example, the client device 100 may include a white list of partner devices 104 with which the client device 100 has given authorization to share data regardless of the contribution values of the partner devices. In another example, the client device 100 may include the domain of the partner device 104 on a blacklist and may never provide permission to share data with the partner device 104 regardless of the contribution of the partner device. In another example, the client device 100 may only consider whether the identifier associated with the partner device 104 is on a white list or a black list, and may not calculate the relative contribution of the partner device 104 when determining whether to permit sharing of data with the partner device 104.
Having approved sharing data with partner device 104, client device 100 may generate an ROC for partner device 104 at step 412. To generate the ROC, the client device 100 may compute a one-way secure cryptographic hash of the domain or address or other identifier of the partner device 104 and the private key or identifier of the client device 100. The identifier of the client device 100 may be a private identifier between the client device 100 and the partner device 104 that may identify the client device 100 to the partner device 104. For example, the private identifier may be a cookie or other identifier previously provided to the client device 100 by the partner device 104 (such as, for example, when the client device 100 accesses a web page on the domain of the partner device 104). Any suitable cryptographic hashing algorithm may be used. In some implementations, the client device 100 can store the ROC in an audit log. For example, the client device 100 may store or cache the ROCs for a predetermined length of time to reduce the computational resources required for cryptographic hashing. When the ROC is cached locally at the client device 100, the client device 100 may search the cache before generating a new ROC at step 412.
At step 414, the client device 100 may generate an euroc from the ROC generated at step 412. The client device 100 may generate an euroc by retrieving the public key of the partner device 104. The client device 100 may retrieve the key from a predetermined address (e.g., "[ domain ]/key. In some implementations, once the client device 100 receives the public key, the client device 100 may cache the key for a predetermined length of time for generating future euros for the partner device 104.
The client device 100 may generate an euroc by encrypting the ROC generated at step 412 with the public key of the partner device. In some implementations, the client device 100 can concatenate the ROC with other data and encrypt the resulting string to generate an eROC. For example, the client device 100 may concatenate the ROC, the timestamp, the authentication token, the public key, or any combination thereof to generate the string.
The client device 100 may store the authentication token in an audit log. The authentication token may be stored in the audit log in association with the domain. In some implementations, the authentication token may only be valid for a predetermined length of time, and a timestamp or expiration time may be saved to the audit log in association with the authentication token to enable the client device 100 to determine whether the authentication token is valid when returned by the content provider 102 or partner device 104.
At step 416, the client device may determine whether the list includes additional providers, and if so, may repeat step 406 and 414.
After repeating step 406 and 416 for each of the partner devices 104 in the list received from the content provider 102, the client device 100 exits the loop of step 406 and 416 that has generated an eROC for each of the partner devices 104 with which the client device 100 has approved sharing of data. The client device 100 also updates the audit log to include an indication of the authentication tokens generated for each of the partner devices 104.
At step 418, the client device 100 may generate a ROC for the content provider 102. The client device 100 may generate an ROC as described above with respect to generating an ROC for each of the partner devices 104. In some implementations, the client device 100 may not encrypt the ROC of the content provider 102 because the client device 100 will send the ROC of the content provider directly to the content provider 102 in a secure communication channel. Meanwhile, as shown in fig. 3, when the content provider 102 receives an ROC (e.g., euro) from the client device 100 and forwards the ROC (which may be encrypted by the client device 100 as euro) to each of the respective partner devices 104, the partner devices 104 may receive their ROC via the content provider 102. Since the ROC of the content provider will be sent directly to the content provider 102, the client device 100 may save computing resources by not encrypting the ROC of the content provider. Client device 100 may transmit a ROC to content provider 102 (and an eROC to content provider 102) over a secure channel (such as via an HTTPS request). In some implementations, after step 418, the client device 100 may encrypt the ROC of the content provider to generate an eROC that is transmitted to the content provider 102.
As step 420, client device 100 may send a set of eocs to content provider 102. At step 422, the content provider 102 may forward the eROC to each of the respective partner devices 104.
At step 500, as shown in fig. 5, the partner device 104 may decrypt the euro. The partner device 104 may decrypt the euro using the private key of the partner device. Decrypting the eROC generates a string that is used to generate the eROC at step 414. Each of the values (e.g., ROC, timestamp, authentication token, and public key) may be a known fixed length or separated by a delimiter. The partner device 104 may extract each of the ROC, timestamp, authentication token, and public key based on a fixed length value or delimiter.
At step 502, the partner device 104 may select data based on the ROC. As described above, the ROC may be or may include a private identifier between the client device 100 and the partner device 104 that identifies the client device 100 to the partner device 104. The partner device 104 may select a content item for delivery to the client device 100 based on the ROC. The content items may be selected via any suitable means and may be personalized or customized for the client device 100. The content may be personalized based on information associated with the ROC in a local database of the partner device. For example, the information associated with the ROC may include information previously received from the client device 100 (e.g., preferences), a web browsing or search history associated with the client device 100, previous content requests or interactions, or any other type and form of information. In some implementations, in addition to or instead of selecting content items, the partner device 104 may select information (e.g., preferences) previously received from the client device 100, a web browsing or search history associated with the client device 100, previous content requests or interactions, or any other type and form of information stored in an internal database of the partner device 104 in association with a ROC. The partner device 104 may send data to the content provider 102 or another partner device 104 that may select content based on the data.
At step 504, the partner device 104 may determine an authentication token. As described above, the authentication token may be included in a string encrypted within the euro. Once the euro is decrypted to reveal the string, the partner device 104 may extract the authentication token from the string based on a fixed-length value within the string and/or a delimiter within the string.
At step 506, the partner device 104 may send the authentication token and data to the content provider 102, where the data may include the content item. In some implementations, when the data includes a content item, the data sent to the content provider 102 can include a bid to display or provide the content item to the client device 100.
Returning to FIG. 4, at step 424, the content provider 102 may collect authentication tokens and relative contributions from each of the partner devices 104 in selecting content items. For example, the content provider 102 may include an internal database of content items from which the content provider 102 selects content for use in responding to content requests by client devices. The content provider 102 may have received the preferences of the client device 100 from each of four different partner devices 104. Along with the preference information, the content provider 102 may receive an authentication token from each of the partner devices 104 that provide the preference information. The content provider 102 may collect each of the authentication tokens and store the authentication tokens in a table in association with the relative contribution of each of the partner devices 104. For example, a table of four partner devices 104 may be an array, such as [ (token 1, 5), (token 2, 5), (token 3, 7), (token 4, 2) ], indicating that the partner device 104 associated with token 1 contributed 5%, the partner device 104 associated with token 2 contributed 5%, the partner device 104 associated with token 3 contributed 7%, and the partner device 104 associated with token 4 contributed 2% to select the content item. In this example, the content provider 102 may have blamed 81% (100% -5% -5% -7% -2%) for the selection of the content item. The total contribution may be 100% such that the content provider 102 is responsible for contributions not provided by one of the partner devices 104. In some implementations, the content provider 102 may determine the contribution of each partner device 104 by searching a contribution table stored at the content provider 102. In some implementations, before the partner device 104 provides data to the content provider 102, the content provider 102 and the partner device 104 may agree on a contribution score that the partner device 104 will receive when providing data (or content) to the content provider 102 to facilitate content selection. The agreed-upon contribution scores may be stored in a contribution table.
At step 428, the content provider 102 may send the content item, the authentication token, and the relative contribution to the client device 100.
At step 430, the client device 100 may present the received content. In some implementations, the client device 100 can audit the returned authentication token prior to presenting the content. The client device 100 may use each of the returned authentication tokens as a key (key) to look up the authentication token in the audit log. The client device 100 may determine that the authentication token is invalid if the authentication token expires, is associated with a different content request, or is not located in the audit log. For example, in the event of a ToS violation, the content provider 102 may have cached the euro or authentication token of the partner device 104 so that the content provider 102 may share data with the partner device 104 without first querying the client device 100 for permission. In this example, when the content provider 102 caches the authentication token, the client device 100 may determine that the authentication token has expired and is invalid. In some implementations, the client device 100 may decide not to present the content if one or more of the authentication tokens returned to the client device 100 at step 428 are invalid.
At step 432, the client device 100 may update the audit log. Updating the audit log may include adding an entry for the content request that just completed. The entry may include updating the overall or running contribution score for each of the partner devices 104 based on the contribution score sent to the client device 100 at step 428. In some implementations, updating the audit log can include adding an identifier of the content provider 102 or partner device 104 to a blacklist if any of the authentication tokens of the respective content provider or partner device are determined to be invalid.
According to at least one aspect of the present disclosure, a system for controlling data exchange may include an encryptor. The encryptor may generate a partner domain-specific identifier for each partner domain in the list of partner domains and encrypt the partner domain-specific identifier and the first authentication token using an encryption key of the corresponding partner domain. Com, the partner domain specific identifier may be or may include an indication of a domain (e.g.,. example. com) of the partner domain or a hash thereof. Partner domain specific identifiers may be assigned to partner domains by the system as randomly generated, sequentially generated, or other types of identifiers. The system may include a network interface to send the encrypted partner domain-specific identifier for each partner domain in the partner domain list to the content provider. The network interface may receive from the content provider a content item selected by the content provider based on data from each of the partner domains in the list of partner domains. Data from each partner domain in the partner domain list is selected based on receiving the encrypted partner domain-specific identifier. For example, the partner domain may decrypt the encrypted partner domain-specific identifier and use the partner domain-specific identifier as a key in a lookup table to identify data associated with the partner domain-specific identifier. The network interface may receive, from the content provider, a second authentication token for each partner domain in the list of partner domains via the client device. The system may include an audit engine to decide to display the content item based on a comparison of the first authentication token for each partner domain in the list of partner domains and the second authentication token for each partner domain in the list of partner domains. For example, if the first authentication token and the second authentication token match, the auditing engine may display the content item.
In some implementations, the auditing engine is configured to decide to display the content items based on the comparison, which further includes matching each of the first authentication tokens of each partner domain in the list of partner domains with one of the second authentication tokens of each partner domain in the list of partner domains. The auditing engine may also be configured to determine a contribution score for the second partner domain. The contribution score may indicate a level of contribution in selecting the second content item. The auditing engine may decide not to generate a partner domain-specific identifier for the second partner domain based on the contribution score being less than a predetermined threshold. The contribution score may indicate a level of contribution in selecting one or more previous content items.
In some implementations, the encryptor may generate a first authentication token for each domain partner in the second partner domain list. The network interface may receive, from the content provider, a second content item selected by the content provider based on data from each of the partner domains in the second partner domain list. The network interface may also receive a second authentication token for each domain partner in the second partner domain list from the content provider. The auditing engine may decide not to display the second content item based on not matching the first authentication token of each domain partner in the second partner domain list with a respective one of the second authentication tokens of each domain partner in the second partner domain list.
The encryptor may be configured to generate the partner-specific identifier by computing a cryptographic hash of the client device identifier and a domain name of the corresponding partner domain. The client device identifier may be unique to each of the partner domains in the partner domain list. To encrypt the partner domain-specific identifier, the encryptor is configured to generate a string by concatenating at least the partner domain-specific identifier, the first authentication token and the timestamp. The encryptor may then encrypt the string.
In some implementations, the encryptor may be configured to generate the partner domain-specific identifier based on the partner domain not being blacklisted. The encryptor may be configured to generate the partner domain-specific identifier based on the contribution score of the partner domain being above a predetermined threshold.
According to at least one aspect of the present disclosure, a method of controlling data exchange may include receiving, by a client device, a partner domain list from a content provider. The method may include, for each partner domain in the partner domain list, generating, by the client device, a partner domain-specific identifier, and encrypting, by the client device, the partner domain-specific identifier and the first authentication token using an encryption key of the corresponding partner domain. The method may include sending, by the client device to the content provider, the encrypted partner domain-specific identifier for each partner domain in the partner domain list. The method may include receiving, by a client device from a content provider, a content item selected by the content provider based on data from each partner domain in a list of partner domains. Data from each partner domain in the partner domain list is selected based on receiving the encrypted partner domain-specific identifier. The method may include receiving, by the client device, a second authentication token for each partner domain in the list of partner domains from the content provider. The method may include displaying, by the client device, the content item based on a comparison of the first authentication token for each partner domain in the partner domain list and the second authentication token for each partner domain in the partner domain list.
In some implementations, the method can include displaying the content item based on the comparison, and further include matching each of the first authentication tokens of each partner domain in the partner domain list with one of the second authentication tokens of each partner domain in the partner domain list.
The method may include receiving, by the client device, a second partner domain. The method may include determining, by the client device, a contribution score for the second partner domain. The contribution score indicates a level of contribution in selecting the second content item. The method may include deciding, by the client device, not to generate the partner domain-specific identifier for the second partner domain based on the contribution score being less than the predetermined threshold. The contribution score may indicate a level of contribution in selecting one or more previous content items.
In some implementations, the method can include receiving, by the client device, the second partner domain list. The method may include generating, by the client device, a first authentication token for each domain partner in the second partner domain list. The method may include receiving, by the client device from the content provider, a second content item selected by the content provider based on data from each of the partner domains in the second list of partner domains. The method may include receiving, by the client device from the content provider, a second authentication token for each domain partner in the second partner domain list. The method may include deciding, by the client device, not to display the second content item based on not matching the first authentication token of each domain partner in the second partner domain list with a respective one of the second authentication tokens of each domain partner in the second partner domain list.
In some implementations, generating the partner-specific identifier may include computing a cryptographic hash of the client device identifier and a domain name of the corresponding partner domain. The client device identifier may be unique to each of the partner domains in the partner domain list. Encrypting the partner domain-specific identifier may include generating a string by concatenating at least the partner domain-specific identifier, the first authentication token, and the timestamp. The method may include encrypting the string. The method may include generating the partner domain-specific identifier based on the partner domain not being blacklisted. The method may include generating the partner domain-specific identifier based on the contribution score of the partner domain being above a predetermined threshold.
The operations described in this specification may be implemented as operations performed by data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
The terms "client" or "server" include various devices, apparatuses and machines for processing data, such as a programmable processor, a computer, a system on a chip (or multiple chips), or a combination of the foregoing. An apparatus may comprise, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can include, in addition to hardware, code that creates a runtime environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and operating environment may implement a variety of different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
A computer program (also known as a program, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages and declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
Processors suitable for the execution of a computer program include both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with the instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks. However, a computer need not have such devices. Further, the computer may be embedded in another device, e.g., a mobile telephone, a Personal Digital Assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a Universal Serial Bus (USB) flash drive), to name a few. Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, implementations of the subject matter described in this specification can be implemented on a computer having a Display device (e.g., a CRT (Cathode Ray Tube), LCD (Liquid Crystal Display), OLED (Organic Light Emitting Diode), TFT (Thin-Film Transistor), plasma Display, other flexible configuration, or any other monitor for displaying information to the user) and a keyboard, a pointing device (e.g., a mouse, trackball, etc.), or touch screen, touch pad, etc., from which the user can provide input to the computer. Other types of devices may also be used to provide for interaction with a user; feedback provided to the user can be any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback; and input from the user may be received in any form, including acoustic, speech, or tactile input. Further, the computer may interact with the user by sending and receiving documents to and from a device used by the user, or by sending web pages to a web browser on the user's client device in response to requests received from the web browser.
Implementations of the subject matter described in this specification can be implemented in a computing system that includes a back end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described is this specification, or any combination of one or more such back end, middleware, or front end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). The communication network may include a local area network ("LAN"), a wide area network ("WAN"), an internetwork (e.g., the internet), and a peer-to-peer network (e.g., an ad hoc peer-to-peer network).
For situations in which the system discussed herein collects or may utilize personal information about a user, the user may be provided with an opportunity to control whether programs or features may collect personal information (e.g., information about the user's social network, social actions or activities, user preferences, or user location), or whether or how to receive content from partner devices or other data processing systems that may be more relevant to the user. Further, certain data may be anonymized in one or more ways prior to storage or use, such that personally identifiable information is removed when generating the parameters. For example, the identity of the user may be anonymized such that personally identifiable information cannot be determined for the user, or the geographic location of the user may be generalized to a place where location information is obtained (such as to a city, zip code, or state level) such that a specific location of the user cannot be determined. Thus, the user may control how information is collected about him or her and used by the partner devices.
While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any inventions or of what may be claimed, but rather as descriptions of features specific to particular implementations of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the implementations described above should not be understood as requiring such separation in all implementations, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
Thus, particular embodiments of the subject matter have been described. Other implementations are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. Moreover, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some embodiments, multitasking or parallel processing may be utilized.
Claims (20)
1. A system for controlling data exchange, comprising:
an encryptor to, for each partner domain in the list of partner domains:
generating a partner domain-specific identifier; and
encrypting the partner domain-specific identifier and the first authentication token using an encryption key of the corresponding partner domain;
a network interface to:
sending an encrypted partner domain-specific identifier for each partner domain in the partner domain list to a content provider;
receiving, from the content provider, a content item selected by the content provider based on data from each partner domain in the list of partner domains, wherein the data from each partner domain in the list of partner domains is selected based on receiving the encrypted partner domain-specific identifier;
receiving, from the content provider, a second authentication token for each partner domain in the list of partner domains; and
an auditing engine to determine to display the content item based on a comparison of the first authentication token for each partner domain in the partner domain list and the second authentication token for each partner domain in the partner domain list.
2. The system of claim 1, wherein the auditing engine to determine to display the content item based on the comparison further comprises to match each of the first authentication tokens of each partner domain in the list of partner domains with one of the second authentication tokens of each partner domain in the list of partner domains.
3. The system of claim 1 or 2, further comprising the audit engine:
determining a contribution score for the second partner domain, wherein the contribution score indicates a level of contribution in selecting the second content item; and
determining not to generate a partner domain-specific identifier for the second partner domain based on the contribution score being less than a predetermined threshold.
4. The system of claim 3, wherein the contribution score indicates a level of contribution in selecting one or more previous content items.
5. The system of any preceding claim, further comprising:
the encryptor generating a first authentication token for each domain partner in the second partner domain list;
the network interface:
receiving, from the content provider, a second content item selected by the content provider based on data from each partner domain in the second list of partner domains;
receiving, from the content provider, a second authentication token for each domain partner in the second partner domain list; and
the auditing engine determines not to display the second content item based on not matching the first authentication token of each domain partner in the second partner domain list with a respective one of the second authentication tokens of each domain partner in the second partner domain list.
6. The system of any preceding claim, wherein the encryptor is configured to generate the partner-specific identifier by computing a cryptographic hash of a client device identifier and a domain name of a corresponding partner domain.
7. The system of claim 6, wherein the client device identifier is unique to each of the partner domains in the partner domain list.
8. The system of any preceding claim, wherein to encrypt the partner domain-specific identifier, the encryptor is configured to:
generating a string by concatenating at least the partner domain-specific identifier, the first authentication token, and a timestamp; and
the string is encrypted.
9. The system of any preceding claim, wherein the encryptor is configured to generate the partner domain-specific identifier based on the partner domain not being blacklisted.
10. The system according to any preceding claim, wherein the encryptor is configured to generate the partner domain-specific identifier based on the contribution score of the partner domain being above a predetermined threshold.
11. A method of controlling data exchange, comprising:
receiving, by a client device, a partner domain list from a content provider;
for each partner domain in the list of partner domains:
generating, by the client device, a partner domain-specific identifier; and
encrypting, by the client device, the partner domain-specific identifier and the first authentication token using an encryption key of a corresponding partner domain;
sending, by the client device to the content provider, the encrypted partner domain-specific identifier for each partner domain in the partner domain list;
receiving, by the client device from the content provider, a content item selected by the content provider based on data from each partner domain in the list of partner domains, wherein the data from each partner domain in the list of partner domains is selected based on receiving the encrypted partner domain-specific identifier;
receiving, by the client device, a second authentication token for each partner domain in the list of partner domains from the content provider; and
displaying, by the client device, the content item based on authentication of the second authentication token of each partner domain in the list of partner domains.
12. The method of claim 11, wherein displaying the content item based on the comparison further comprises matching each of the first authentication tokens of each partner domain in the list of partner domains with one of the second authentication tokens of each partner domain in the list of partner domains.
13. The method of claim 11 or 12, further comprising:
receiving, by the client device, a second partner domain;
determining, by the client device, a contribution score for the second partner domain, wherein the contribution score indicates a level of contribution in selecting a second content item; and
determining, by the client device, not to generate a partner domain-specific identifier for the second partner domain based on the contribution score being less than a predetermined threshold.
14. The method of claim 13, wherein the contribution score indicates a level of contribution in selecting one or more previous content items.
15. The method of any of claims 11 to 14, further comprising:
receiving, by the client device, a second partner domain list;
generating, by the client device, a first authentication token for each domain partner in the second partner domain list;
receiving, by the client device from the content provider, a second content item selected by the content provider based on data from each partner domain in the second list of partner domains;
receiving, by the client device, a second authentication token for each domain partner in the second partner domain list from the content provider; and
determining, by the client device, not to display the second content item based on not matching the first authentication token of each domain partner in the second partner domain list with a respective one of the second authentication tokens of each domain partner in the second partner domain list.
16. The method of any of claims 11 to 15, wherein generating the partner-specific identifier comprises computing a cryptographic hash of a client device identifier and a domain name of a corresponding partner domain.
17. The method of claim 16, wherein the client device identifier is unique to each of the partner domains in the partner domain list.
18. The method of any of claims 11 to 17, wherein encrypting the partner domain-specific identifier comprises:
generating a string by concatenating at least the partner domain-specific identifier, the first authentication token, and a timestamp; and
the string is encrypted.
19. The method of any of claims 11 to 18, further comprising generating the partner domain-specific identifier based on the partner domain not being blacklisted.
20. The method of any of claims 11 to 19, further comprising generating the partner domain-specific identifier based on a contribution score of the partner domain being above a predetermined threshold.
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2019/027737 WO2020214157A1 (en) | 2019-04-16 | 2019-04-16 | Self-authenticating domain specific browser identifiers |
Publications (2)
Publication Number | Publication Date |
---|---|
CN112166586A true CN112166586A (en) | 2021-01-01 |
CN112166586B CN112166586B (en) | 2023-04-18 |
Family
ID=66334565
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201980023493.1A Active CN112166586B (en) | 2019-04-16 | 2019-04-16 | Self-authenticating domain-specific browser identifier |
Country Status (6)
Country | Link |
---|---|
US (1) | US20210367784A1 (en) |
EP (1) | EP3756331B1 (en) |
JP (1) | JP7015400B2 (en) |
KR (1) | KR102346120B1 (en) |
CN (1) | CN112166586B (en) |
WO (1) | WO2020214157A1 (en) |
Families Citing this family (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11356275B2 (en) * | 2020-05-27 | 2022-06-07 | International Business Machines Corporation | Electronically verifying a process flow |
Citations (14)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN1554063A (en) * | 2001-07-06 | 2004-12-08 | ��˹��ŵ�� | Digital rights management in a mobile communications environment |
CN101563880A (en) * | 2006-10-25 | 2009-10-21 | 约维申有限公司 | Creating and verifying globally unique device-specific identifiers |
US20100031043A1 (en) * | 1999-09-28 | 2010-02-04 | Chameleon Network Inc. | Portable electronic authorization system and method |
US20100235632A1 (en) * | 2006-05-12 | 2010-09-16 | International Business Machines Corporation | Protecting against denial of service attacks using trust, quality of service, personalization, and hide port messages |
US20110055552A1 (en) * | 2009-09-02 | 2011-03-03 | Max Planck Gesellschaft Zur Foerderung Der Wissenschaften | Private, accountable, and personalized information delivery in a networked system |
EP2793444A1 (en) * | 2013-04-19 | 2014-10-22 | Proximic, Inc. | Transmitting information from a first information provider to a second information provider via an information intermediary |
US20150339734A1 (en) * | 2014-05-20 | 2015-11-26 | Aol Inc. | Systems and methods for identity-protected advertising network |
CN105210094A (en) * | 2013-03-07 | 2015-12-30 | 脸谱公司 | Indentifying users for advertising opportunities based on paired identifiers |
CN105210353A (en) * | 2013-03-15 | 2015-12-30 | 脸谱公司 | Wireless data privacy maintained through a social network |
CN105229985A (en) * | 2013-03-20 | 2016-01-06 | 诺基亚技术有限公司 | Identity tokens |
EP3167402A1 (en) * | 2014-07-10 | 2017-05-17 | Schlage Lock Company LLC | Networked access control system |
CN107046687A (en) * | 2016-01-26 | 2017-08-15 | 谷歌公司 | The secure connection of low-power equipment |
CN108431819A (en) * | 2015-12-03 | 2018-08-21 | 奥卡交互有限公司 | Client is protected to access the method and system of the service of the DRM agent of video player |
US10158646B1 (en) * | 2016-10-10 | 2018-12-18 | Charles Schwab & Co., Inc. | System and method for providing a web service using a mobile device capturing dual images |
Family Cites Families (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7487354B2 (en) * | 2001-05-18 | 2009-02-03 | Microsoft Corporation | Methods and systems for using digital signatures in uniform resource locators |
US7631036B2 (en) * | 2003-07-14 | 2009-12-08 | Sony Corporation | Communication method, communication device, and program |
US20050193015A1 (en) * | 2004-02-19 | 2005-09-01 | Sandraic Logic, Llc A California Limited Liability Company | Method and apparatus for organizing, sorting and navigating multimedia content |
RU2447498C2 (en) * | 2006-05-02 | 2012-04-10 | Конинклейке Филипс Электроникс Н.В. | Improved access to domain |
JP5020399B1 (en) * | 2011-06-30 | 2012-09-05 | 楽天株式会社 | Information processing apparatus, information processing apparatus control method, program, and information storage medium |
US10565598B2 (en) * | 2012-07-10 | 2020-02-18 | Facebook, Inc. | Sponsored advertisement ranking and pricing in a social networking system |
AU2013204953B2 (en) * | 2012-08-30 | 2016-09-08 | The Nielsen Company (Us), Llc | Methods and apparatus to collect distributed user information for media impressions |
US10671690B2 (en) * | 2016-12-29 | 2020-06-02 | Google Llc | Search and retrieval of keyed data maintained using a keyed database |
US11429998B1 (en) * | 2021-04-09 | 2022-08-30 | Inmar Clearing, Inc. | Deep-linking authentication system and related methods |
-
2019
- 2019-04-16 JP JP2020552718A patent/JP7015400B2/en active Active
- 2019-04-16 WO PCT/US2019/027737 patent/WO2020214157A1/en unknown
- 2019-04-16 EP EP19720748.3A patent/EP3756331B1/en active Active
- 2019-04-16 KR KR1020207027585A patent/KR102346120B1/en active IP Right Grant
- 2019-04-16 US US16/981,979 patent/US20210367784A1/en active Pending
- 2019-04-16 CN CN201980023493.1A patent/CN112166586B/en active Active
Patent Citations (14)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20100031043A1 (en) * | 1999-09-28 | 2010-02-04 | Chameleon Network Inc. | Portable electronic authorization system and method |
CN1554063A (en) * | 2001-07-06 | 2004-12-08 | ��˹��ŵ�� | Digital rights management in a mobile communications environment |
US20100235632A1 (en) * | 2006-05-12 | 2010-09-16 | International Business Machines Corporation | Protecting against denial of service attacks using trust, quality of service, personalization, and hide port messages |
CN101563880A (en) * | 2006-10-25 | 2009-10-21 | 约维申有限公司 | Creating and verifying globally unique device-specific identifiers |
US20110055552A1 (en) * | 2009-09-02 | 2011-03-03 | Max Planck Gesellschaft Zur Foerderung Der Wissenschaften | Private, accountable, and personalized information delivery in a networked system |
CN105210094A (en) * | 2013-03-07 | 2015-12-30 | 脸谱公司 | Indentifying users for advertising opportunities based on paired identifiers |
CN105210353A (en) * | 2013-03-15 | 2015-12-30 | 脸谱公司 | Wireless data privacy maintained through a social network |
CN105229985A (en) * | 2013-03-20 | 2016-01-06 | 诺基亚技术有限公司 | Identity tokens |
EP2793444A1 (en) * | 2013-04-19 | 2014-10-22 | Proximic, Inc. | Transmitting information from a first information provider to a second information provider via an information intermediary |
US20150339734A1 (en) * | 2014-05-20 | 2015-11-26 | Aol Inc. | Systems and methods for identity-protected advertising network |
EP3167402A1 (en) * | 2014-07-10 | 2017-05-17 | Schlage Lock Company LLC | Networked access control system |
CN108431819A (en) * | 2015-12-03 | 2018-08-21 | 奥卡交互有限公司 | Client is protected to access the method and system of the service of the DRM agent of video player |
CN107046687A (en) * | 2016-01-26 | 2017-08-15 | 谷歌公司 | The secure connection of low-power equipment |
US10158646B1 (en) * | 2016-10-10 | 2018-12-18 | Charles Schwab & Co., Inc. | System and method for providing a web service using a mobile device capturing dual images |
Non-Patent Citations (2)
Title |
---|
BEN ADIDA: "Sessionlock：securing web sessions against eavedropping", 《ACM》 * |
楚鼎: "Mashup应用中的开放身份管理框架研究", 《中国优秀硕士学位论文全文数据库》 * |
Also Published As
Publication number | Publication date |
---|---|
WO2020214157A1 (en) | 2020-10-22 |
JP2021519022A (en) | 2021-08-05 |
JP7015400B2 (en) | 2022-02-02 |
EP3756331A1 (en) | 2020-12-30 |
KR20200122384A (en) | 2020-10-27 |
KR102346120B1 (en) | 2021-12-31 |
EP3756331B1 (en) | 2021-07-28 |
CN112166586B (en) | 2023-04-18 |
US20210367784A1 (en) | 2021-11-25 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10931683B2 (en) | Automatic token-based secure content streaming method and apparatus | |
KR102390938B1 (en) | A domain-specific browser identifier that replaces browser cookies | |
Beato et al. | Scramble! your social network data | |
CN112166590B (en) | Restricted environment for message generation in a networking environment | |
US11544357B2 (en) | Systems and methods for authentication | |
EP4070223A1 (en) | Using secure multi-party computation to improve content selection process integrity | |
CN112166586B (en) | Self-authenticating domain-specific browser identifier | |
US11277481B1 (en) | Content selection through intermediary device | |
KR102239281B1 (en) | Aggregated Conversion Measurement | |
CN114631092A (en) | Privacy preserving data collection and analysis | |
CN115695040A (en) | System and method for protecting data | |
US11968297B2 (en) | Online privacy preserving techniques | |
CN117321593A (en) | Password security and privacy protection matching | |
CN116368488A (en) | Localized cryptographic techniques for privacy protection |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
GR01 | Patent grant | ||
GR01 | Patent grant |