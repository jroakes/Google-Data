CROSS REFERENCE TO RELATED APPLICATIONS
This application is a continuation of U.S. patent application Ser. No. 12/410,440, filed Mar. 24, 2009, entitled “MANAGING URLS,” now U.S. Pat. No. 7,991,762, which is a continuation of U.S. patent application Ser. No. 11/166,786, filed Jun. 24, 2005, entitled “MANAGING URLS,” now U.S. Pat. No. 7,509,315, both of which are incorporated by reference herein in their entireties.
BACKGROUND OF THE INVENTION
Search appliances, such as are used in conjunction with an intranet, typically receive an initial list of URLs to crawl, crawl those URLs, and create an index based on the documents retrieved. As new URLs are encountered during the crawling process, they are typically added to the list of URLs to crawl and crawled accordingly. Search appliances typically can only maintain an index of a finite number of pages for a variety of reasons which may include resource and license limitations. It is possible that the search appliance may be aware of more URLs than it is capable of or authorized to index. In such a case, the search appliance may crawl to that limit and then stop, or continuously crawl the same pages, equal to the number of pages it may crawl. One result can be that less important pages that appear earlier in the URL list are crawled and newly discovered—and possibly more important pages—are not. There exists a need to be able to manage which URLs are crawled and indexed.
BRIEF DESCRIPTION OF THE DRAWINGS
Various embodiments of the invention are disclosed in the following detailed description and the accompanying drawings.
FIG. 1 illustrates an embodiment of a search appliance.
FIG. 2 illustrates an embodiment of a table maintained by a search appliance.
FIG. 3 illustrates an embodiment of a histogram maintained by a search appliance.
FIG. 4 illustrates an example of the number of documents in an index in one embodiment.
FIG. 5 illustrates an embodiment of a process for crawling documents.
FIG. 6 illustrates an embodiment of a table maintained by a search appliance.
FIG. 7 illustrates an embodiment of a process for removing documents from an index.
FIG. 8 illustrates an embodiment of a histogram maintained by a search appliance.
DETAILED DESCRIPTION
Managing URLs is disclosed. A search appliance, such as the Google Search Appliance, is typically a self-contained computer which is installed within a network, such as a corporate intranet. The search appliance indexes documents on the intranet and delivers search results. As part of this process, documents are crawled and inserted into an index. A search appliance may be configured with a license limit such as 1,000,000 pages. The appliance is configured to crawl to the limit, and once it reaches the limit, to crawl new pages only if their importance is greater than or equal to an importance threshold. For example, if documents have an importance rank from 0-10, the importance threshold may be set at 7. Once the license limit is reached, the search appliance is instructed to only crawl additional documents that have an importance rank of 7 or higher. In some embodiments, pages are removed from the index based on their importance rank so that eventually, the index will contain approximately the top ranked 1,000,000 documents on the intranet.
FIG. 1 illustrates an embodiment of a search appliance. In this example, search appliance 100 includes a crawl manager 102, a crawler 104, a ranking engine 106, a deleter 108, and an index 110. Other elements typically included in a search appliance, such as a repository, an indexer, and a search server, are not shown but may be included. In some embodiments, the functionality of multiple elements may be combined into a single element. For example, the functionality of deleter 108 may be implemented within crawl manager 102, and a separate deleter 108 is not needed. In some embodiments, the functionality of a single element may be implemented in multiple elements. For example, the functionality of crawl manager 102 may be split across several, smaller components.
As described more fully below, information is maintained about the URLs of which the search appliance is aware, including ranking information supplied by ranking engine 106. The information can be conceptualized as being stored in a table. The actual storage of the information may take any appropriate form. Also described below is a histogram of the importance ranks of documents believed to be stored in the index.
Crawl manager 102 selects and sends URLs to crawler 104 to crawl. In this embodiment, crawler 104 performs multiple functions, including requesting URLs from crawl manager 102, fetching the documents at those URLs, and processing retrieved documents, for example, to extract link information. Documents can include Web pages, text files, multimedia files, object features, link structure, and other content. In some embodiments, some of the functions of crawler 104 may be performed by other, separate components. As described more fully below, deleter 108 deletes low ranking pages from index 110.
Processes such as link extraction, ranking, and deleting can run asynchronously. In general these processes may be triggered by external events, such as a URL crawl finishing or starting, or may run wholly independently.
While the system depicted in FIG. 1 is a search appliance, the claimed invention could be practiced in a variety of information retrieval contexts. For example, intranet search engines, Internet search engines, and intrasite search engines may all replace the system of FIG. 1 or operate in conjunction with the system of FIG. 1.
FIG. 2 illustrates an embodiment of a table maintained by a search appliance. The example table shown is a representation of some of the data contained in the table 200 used by search appliance 100. For each URL (202), an importance rank (204), and the time that the URL was last crawled (206) are stored. An importance rank is the relevance of a page independent of a query. In this example, the higher the value of the importance rank, the more important the page. Thus, URL 212 has a greater importance than URL 210, and both URLs have a significantly greater importance than URL 214. In some embodiments the importance rank is based on PageRank®. Any other appropriate ranking algorithm may be used. In this example, URL 210 has an importance rank of 9 and was last crawled on Jun. 1, 2005.
When a search appliance is first configured for use within an environment, such as a corporate intranet, an administrator may configure it with “start URLs,” to be used as the initial crawl list. These pages may typically be top level documents, such as http://intranet.company.com, from which many other documents are linked. As the start URLs are crawled, additional documents, such as the linked pages, are discovered and their information is included in table 200. As described more fully below, table 200 may also be used by deleter 108.
FIG. 3 illustrates an embodiment of a histogram maintained by a search appliance. In this example, the histogram is stored in memory and used by crawl manager 102. In some embodiments, the histogram is maintained other ways, such as in a file.
Histogram 300 depicts the importance rank of all URLs currently listed in index 110. In this example, histogram 300 is updated continuously by ranking engine 106. In other cases, histogram 300 can be computed as needed, and is generally an inexpensive computation.
In this example, pages have an importance between 0 and 10, inclusive. Bucket 302 is the number of known pages with a score between 0 and 1, inclusive. Bucket 304 is the number of known pages with a score greater than 1 and less than or equal to 2, and so on. In some embodiments, different buckets are used. For example, if using PageRank® for the importance of a page, several thousand buckets may be employed by histogram 300. In the example shown, index 110 currently contains 2472 URLs.
As new pages are added to index 110, their importance ranks are included in the histogram. In this example, the importance rank of each page is frequently calculated or updated as appropriate. Thus, from time to time, the rank of a page already existing in the histogram may change. For example, suppose a “Coming Soon” page (having an importance rank of 0.1) has been replaced with actual content (and now has an importance rank of 1.9). Ranking engine 106 will reduce the count of bucket 302 by one and increase the count of bucket 304 by one, accordingly.
FIG. 4 illustrates an example of the number of documents in an index in one embodiment. Solid line 404 is a representation of the number of documents in an index over time when the processing of FIG. 5 is applied. Dotted line 402 is provided as an example representation of the number of documents in an index over time in a system where the processing of FIG. 5 is not applied. Lines 402 and 404 do not necessarily depict the same device. Before crawler 104 first begins crawling pages, index 110 is empty, as seen at point 406. As described more fully below, as crawler 104 crawls pages, they are added to index 110.
In this example, search appliance 100 makes use of two limits—a soft limit, also referred to herein as a “target limit” (for example, 1,000,000 indexed pages) and a hard limit (for example, 1,300,000 indexed pages). In some cases, the soft limit is a license limit. For example, search appliance 100 may retail at different prices depending on how large its license limit is. In some cases, the soft limit is based on a user configuration, or set automatically, such as based on available resources. Other limits may be configured as applicable.
Line 410 represents a soft limit of pages to be stored in index 110. In this example, soft limit 410 is a license limit of 1 million pages.
Regardless of whether the processing of FIG. 5 is applied, crawler 104 continues to crawl pages until the number of pages stored in index 110 equals the soft limit (at point 408). This is depicted by the segments between points 406 and 408 (hereinafter denoted “segment 406-408”), which have been drawn at a slight offset so that both lines may be seen. At point 408, index 100 contains 1,000,000 pages.
Line 412 represents a hard limit of pages to be stored in index 110. In this example, hard limit 412 is 130% of the soft limit (1,300,000 pages).
Without the processing of FIG. 5 in place, crawler 104 continues to crawl pages until hard limit 412 is reached, at which point the crawler stops (414). If pages are deleted from the index (segment 414-416), such as by deleter 108, crawler 104 resumes crawling (segment 416-418). Segment 418-420 illustrates the situation where the deletion process does not delete pages immediately after the hard limit has been reached. Crawler 104 will not crawl any new pages until some pages in the index have been removed (422). Segment 424-426 illustrates the situation where the deletion process deletes pages before the hard limit has been reached. In this case, the number of pages in index 110 was between the soft and hard limits when deletion occurred. As seen in FIG. 4, dotted line 402 exhibits significant oscillations. In some cases, the oscillations may result in the crawler repeatedly recrawling low ranking pages as they are deleted from the index.
FIG. 5 illustrates an embodiment of a process for crawling documents. In the example shown, the process begins at 502 when a crawl manager, such as crawl manager 102, instructs a crawler, such as crawler 104, to begin crawling pages. In FIG. 4, this portion of the process corresponds with point 406.
Crawler 104 continues to crawl documents until the number of documents contained in index 110 equals the soft limit. In FIG. 4, this portion of the process corresponds with solid line segment 406-408.
Once the soft limit is reached, at 504 (point 408 of FIG. 4) it is determined whether any uncrawled pages (e.g., pages in table 200 but not in index 110) have a greater importance rank than pages currently in index 110. Multiple methods could be employed to perform this determination.
In some embodiments, pages in table 200 are ordered in memory according to their importance rank. Once the soft limit is reached, the lowest ranking document in the index is determined and replaced by a new document if it is determined that the new document's importance rank is higher than the lowest ranking document in the index. In this case, a separate deleter 108 is not used. This method may typically require large amounts of memory and numbers of operations, and may prevent the use of other crawling priorities when determining when to crawl a particular page, such as the frequency with which the content on the page changes.
In some embodiments, the determination is made by calculating an importance threshold based at least in part on an importance rank histogram, such as histogram 300. New documents are only crawled at 508 if they have an importance ranking equal to or greater than the importance threshold.
Crawl manager 102 is typically aware of, via table 200, more pages than it will direct crawler 104 to crawl at any given time. Through table 200, crawl manager 102 knows the importance ranks of those pages, even if it doesn't know their content, for example, by having not crawled them before. Thus, crawl manager 102 typically knows the importance of uncrawled pages relative to pages already crawled.
In this example, the calculation performed at 504 can be analogized to computing whether a student is in the top third of a class. One method is to create a sorted list of all students and their grade point averages and check to see whether the particular student is in the top third of the list. Another method is to create a histogram of all grade point averages, determine that an arbitrary student in the top third has a grade point average of 3.2 or higher, and check whether a particular student's grade point average is equal to or greater than 3.2.
Suppose a search appliance has a license limit of 2,000 pages and a histogram 300 as shown in FIG. 3. In this case, index 110 contains 2,472 documents. The number of documents in each bucket is summed from right to left until the soft limit is reached. If the importance threshold is set to 4, 1,643 documents are above the importance threshold. If the importance threshold is set to 3, 2,052 documents are above the importance threshold. Thus, in this example, once the soft limit has been reached, pages having an importance rank of 4 or more will be crawled. Other methods of determining a ranking threshold may be employed as applicable.
In this example, the importance rank of each page is frequently calculated by ranking engine 106 and updated as appropriate. A page previously beneath the importance threshold may subsequently have an importance rank above the importance threshold, for example, based on changes to its content by a user.
If it is determined at 504 that no uncrawled documents have an importance rank above the importance threshold, existing pages are recrawled. The particular order in which crawled pages will be recrawled and uncrawled pages will be crawled can be specified in a variety of ways, including by using the scheduling processes described in U.S. patent application Ser. No. 11/113,819, entitled SCHEDULING A RECRAWL filed Apr. 25, 2005 abandoned, and U.S. patent application Ser. No. 11/113,820, entitled MANAGING ITEMS IN CRAWL SCHEDULE filed Apr. 25, 2005, both of which are incorporated herein by reference for all purposes.
A search appliance employing FIG. 5 processing may continue to exhibit oscillations in the number of pages stored in index 110. This can be the case, for example, if there is a high ratio of uncrawled to crawled pages. However, as the solid segment 408-428 of FIG. 4 illustrates, oscillations of the number of pages in index 110 will eventually dampen and the crawling process will reach a steady state where the number of crawled documents is very close to the configured limit.
FIG. 6 illustrates an embodiment of a table maintained by a search appliance. The example table shown is a representation of some of the data contained in the table 200 used by search appliance 100, which has a license limit of 500,000 pages.
In some cases, dramatic changes may be made to table 200 after crawler 104 begins crawling pages. For example, an administrator may direct the search appliance to crawl a second domain in addition to a first domain. If this occurs after the license limit has been reached, a significant amount of pages may need to be removed from the index so that the highest ranking documents across both servers can be included in the index.
In the example shown, an administrator originally provided search appliance 100 with a start list of URLs 602-606. These URLs are all located on the same server, internal.company.com, which contains approximately 1 million pages. Over time, other pages 608-614, also all on internal.company.com, were discovered and crawled. Eventually, index 110 is updated to include pages having an importance of 5 or greater. Thus, URLs 602, 604, 610, 612, and 614 are stored in the index and URLs 606 and 608 are not, because their importance rank is too low.
The administrator subsequently directs search appliance 100 to index newserver.company.com in addition to internal.company.com. Newserver.company.com also contains approximately 1 million pages. As a result, table 200 is updated to contain 2,000,000 pages. In this example, it is possible that 50% or more of the documents currently in index 110 may need to be removed to make room for newly discovered high ranking pages of newserver.company.com, while still maintaining a license limit of 500,000 pages.
When the processing of FIG. 5 is applied after the search appliance is instructed to crawl newserver.company.com, the importance threshold is determined to be 8 instead of 5. As a result, pages 602, 604, 610, and 612 will remain in the index, page 614 will be removed from the index, and pages 622 and 624 will be added to the index.
FIG. 7 illustrates an embodiment of a process for removing documents from an index. As explained above, in some embodiments, a separate deletion process is not used, for example, when the importance ranks of individual pages are compared against each other. In that case, the search appliance may not contain a deleter 108.
In the example shown, the process begins at 702 when deleter 108 examines index 110. At 704, it is determined whether the index is above a limit, such as a license limit. If not, at 706, deleter 108 waits an appropriate amount of time and checks index (702) again later.
If the number of documents in index 110 exceeds the license limit, at 708 deleter 108 determines an appropriate number of pages to delete from the index and removes them. Multiple methods can be employed to perform this determination.
In some embodiments, pages in table 200 are ordered in memory according to their importance rank. In that case, deleter 108 deletes any documents in index 110 that are not also in the top 500,000-ranked pages. This method may typically require large amounts of memory and numbers of operations.
In some embodiments, the determination is made by calculating an unimportance threshold based at least in part on an importance rank histogram, such as histogram 300. Documents are removed from index 110 if they have an importance ranking less than an unimportance threshold.
In some cases, the unimportance threshold is equal to the importance threshold used by crawl manager 102. For example, suppose a search appliance has a license limit of 2,000 pages and a histogram 300 as shown in FIG. 3. In this case, index 110 contains 2,472 documents. The number of documents in each bucket is summed from right to left until the soft limit is reached. In this example, 1,643 documents are above an importance threshold of 4, meaning also that 829 pages are below an unimportance threshold of 4. Documents having an unimportance threshold less than 4 will thus be deleted by deleter 108.
Other methods of determining a ranking threshold may be employed as applicable. As described more fully below, in some cases, the importance threshold and unimportance threshold are set to different values.
FIG. 8 illustrates an embodiment of a histogram maintained by a search appliance. The example shown is a representation of some of the data contained in a histogram 800 used by crawl manager 102 and deleter 108. Here, a ranking from 0-10,000 is employed.
In some implementations, the ranking information relied on by crawl manager 102 and deleter 108 may get out of sync. This can occur, for example, if crawl manager 102 and deleter 108 obtain their ranking information from different sources, such as different files, which aren't updated at precisely the same time by ranking engine 106.
In the example shown, crawl manager 102 believes that the importance threshold should be set at 779. Deleter 108, slightly out of sync, using the same calculation as crawl manager 102, but different data, believes the unimportance threshold should be set at 780. Because the unimportance threshold is higher than the importance threshold, the deleter will delete documents in the same area that is being crawled. In this example, 500 documents (documents in bucket 802) will be deleted by deleter 108, then crawled again by crawler 104, then deleted by deleter 108, and so on.
As the data used by crawl manager 102 and deleter 108 is synchronized, this problem typically goes away. However, it can also be mitigated by intentionally setting the unimportance threshold to a value lower than the importance threshold. In this example, by setting the unimportance threshold to 776, a buffer is created so that regardless of whether the crawl manager 102 and deleter 108 are in sync, documents near the importance threshold won't be needlessly removed and recrawled.
Although the foregoing embodiments have been described in some detail for purposes of clarity of understanding, the invention is not limited to the details provided. There are many alternative ways of implementing the invention. The disclosed embodiments are illustrative and not restrictive.
The invention can be implemented in numerous ways, including as a process, an apparatus, a system, a composition of matter, a computer readable medium such as a computer readable storage medium or a computer network wherein program instructions are sent over optical or electronic communication links. In this specification, these implementations, or any other form that the invention may take, may be referred to as techniques. A component such as a processor or a memory described as being configured to perform a task includes both a general component that is temporarily configured to perform the task at a given time or a specific component that is manufactured to perform the task. While the invention is described in conjunction with a search appliance, the invention may be embodied in a web search engine, such as Google.com, and in other information retrieval systems. In general, the order of the steps of disclosed processes may be altered within the scope of the invention.
A detailed description of one or more embodiments of the invention has been provided above along with accompanying figures that illustrate the principles of the invention. The invention is described in connection with such embodiments, but the invention is not limited to any embodiment. The scope of the invention is limited only by the claims and the invention encompasses numerous alternatives, modifications and equivalents. Numerous specific details are set forth in the above description in order to provide a thorough understanding of the invention. These details are provided for the purpose of example and the invention may be practiced according to the claims without some or all of these specific details. For the purpose of clarity, technical material that is known in the technical fields related to the invention has not been described in detail so that the invention is not unnecessarily obscured.