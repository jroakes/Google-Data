EP2828733A1 - Gestural input at a virtual keyboard - Google Patents
Gestural input at a virtual keyboardInfo
- Publication number
- EP2828733A1 EP2828733A1 EP13713707.1A EP13713707A EP2828733A1 EP 2828733 A1 EP2828733 A1 EP 2828733A1 EP 13713707 A EP13713707 A EP 13713707A EP 2828733 A1 EP2828733 A1 EP 2828733A1
- Authority
- EP
- European Patent Office
- Prior art keywords
- input
- word
- points
- computing device
- anchor
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Withdrawn
Links
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/01—Input arrangements or combined input and output arrangements for interaction between user and computer
- G06F3/048—Interaction techniques based on graphical user interfaces [GUI]
- G06F3/0487—Interaction techniques based on graphical user interfaces [GUI] using specific features provided by the input device, e.g. functions controlled by the rotation of a mouse with dual sensing arrangements, or of the nature of the input device, e.g. tap gestures based on pressure sensed by a digitiser
- G06F3/0488—Interaction techniques based on graphical user interfaces [GUI] using specific features provided by the input device, e.g. functions controlled by the rotation of a mouse with dual sensing arrangements, or of the nature of the input device, e.g. tap gestures based on pressure sensed by a digitiser using a touch-screen or digitiser, e.g. input of commands through traced gestures
- G06F3/04883—Interaction techniques based on graphical user interfaces [GUI] using specific features provided by the input device, e.g. functions controlled by the rotation of a mouse with dual sensing arrangements, or of the nature of the input device, e.g. tap gestures based on pressure sensed by a digitiser using a touch-screen or digitiser, e.g. input of commands through traced gestures for inputting data by handwriting, e.g. gesture or text
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/01—Input arrangements or combined input and output arrangements for interaction between user and computer
- G06F3/048—Interaction techniques based on graphical user interfaces [GUI]
- G06F3/0487—Interaction techniques based on graphical user interfaces [GUI] using specific features provided by the input device, e.g. functions controlled by the rotation of a mouse with dual sensing arrangements, or of the nature of the input device, e.g. tap gestures based on pressure sensed by a digitiser
- G06F3/0488—Interaction techniques based on graphical user interfaces [GUI] using specific features provided by the input device, e.g. functions controlled by the rotation of a mouse with dual sensing arrangements, or of the nature of the input device, e.g. tap gestures based on pressure sensed by a digitiser using a touch-screen or digitiser, e.g. input of commands through traced gestures
- G06F3/04886—Interaction techniques based on graphical user interfaces [GUI] using specific features provided by the input device, e.g. functions controlled by the rotation of a mouse with dual sensing arrangements, or of the nature of the input device, e.g. tap gestures based on pressure sensed by a digitiser using a touch-screen or digitiser, e.g. input of commands through traced gestures by partitioning the display area of the touch-screen or the surface of the digitising tablet into independently controllable areas, e.g. virtual keyboards or menus
Definitions
- Physical keyboards include physical, depressible buttons that correspond to different characters and functions.
- a computing device may include a presence-sensitive display (e.g., a touchscreen) that displays a "virtual" keyboard.
- the virtual keyboard may include virtual keys that correspond to different characters and functions. Each of the virtual keys may correspond to a different area of the presence-sensitive display.
- a user may provide textual input to a computing device by tapping the user's finger or a stylus on the virtual keys of a virtual keyboard displayed by the computing device.
- the user may tap on a virtual key that corresponds the letter "t,” then tap on the virtual key that corresponds to the letter “e,” then tap on the virtual key that corresponds to the letter "x,” and then tap on the virtual key that corresponds to the letter "t.”
- Providing textual input to a computing device by tapping on virtual keys may be problematic for some users. For instance, users may find it difficult to accurately tap the correct virtual keys, especially on small virtual keyboards. Furthermore, because a user cannot feel the virtual keys of a virtual keyboard, the user's fingers may drift out position on the virtual keyboard, resulting in a drop in typing accuracy.
- a computing device may receive an indication of a gesture input at a portion of a presence-sensitive surface associated with a virtual keyboard.
- the gesture input may correspond to a particular word.
- the computing device may define a series of input points that represent a path of the gesture input across the virtual keyboard.
- the computing device may define sets of anchor points for different words.
- the anchor points for a word may correspond to locations of different virtual keys associated with the word.
- the computing device may determine a distance score for each of the anchor points.
- the computing device may determine a distance score for an anchor point based on a distance on the presence-sensitive surface between the anchor point and an input point that is closest to the anchor point.
- the computing device may identify, based on the distance scores for the anchor points, the word that corresponds to the gesture input. Determining which word corresponds to the gesture input in this way may increase the speed and accuracy with which a user may input text to the computing device.
- this disclosure describes a method that comprises receiving, at a device, an indication of a gesture input at a portion of a presence-sensitive surface associated with a virtual keyboard.
- the virtual keyboard comprises a set of virtual keys. Each virtual key from the set of virtual keys is associated with a region of the presence- sensitive surface.
- the method also comprises defining, at the device, a series of input points that represent a path of the gesture input across the virtual keyboard.
- the method comprises defining, at the device, sets of anchor points corresponding to different words in a set of candidate words. Each of the anchor points corresponds to a location of the presence-sensitive surface associated with a virtual key from the set of virtual keys.
- the method also comprises identifying, at the device, for each respective anchor point in each of the sets of anchor points, a relevant input point in the series of input points. Furthermore, the method comprises determining, at the device, a distance score for each respective anchor point in the sets of anchor points. For each anchor point in the sets of anchor points, the distance score for the respective anchor point is based on a distance on the presence-sensitive surface between the respective anchor point and the relevant input point for the respective anchor point. In addition, the method comprises identifying, at the device, based on the distance scores for the anchor points, a word in the set of candidate words that corresponds to the gesture input.
- this disclosure describes a computing device that comprises a presence-sensitive display, a processor, and a memory that stores instructions that, when executed by the processor, configure the computing device to output a virtual keyboard for display at the presence-sensitive display.
- the instructions also configure the computing device to receive an indication of a gesture input at a portion of the presence- sensitive display associated with the virtual keyboard.
- the instructions configure the computing device to define a series of input points that represent a path of the gesture input across the virtual keyboard.
- the instructions also configure the computing device to define sets of anchor points that correspond to different words in a set of candidate words. Each of the anchor points corresponds to a location of the presence-sensitive display associated with a virtual key from the set of virtual keys.
- the instructions configure the computing device to identify, for each respective anchor point in each of the sets of anchor points, a relevant input point in the series of input points.
- the instructions configure the computing device to determine a distance score for each respective anchor point in the sets of anchor points. For each anchor point in the sets of anchor points, the distance score for the anchor point is based on a distance on the presence-sensitive surface between the anchor point and the relevant input point for the anchor point.
- the instructions also configure the computing device to determine scores for the words based on the distance scores for the anchor points that correspond to the words.
- the instructions configure the computing device to identify, based on the scores for the words, that a given word in the set of candidate words corresponds to the gesture input.
- this disclosure describes a computer-readable storage medium comprising instructions for causing one or more processors of a computing device to perform operations comprising outputting a virtual keyboard for display at a presence- sensitive display operatively coupled to the computing device, the virtual keyboard including virtual keys associated with characters.
- the operations also include receiving an indication of a start of a gesture input if the presence-sensitive display detects a presence of an input object at a position associated with the virtual keyboard.
- the operations include receiving an indication of a completion of the gesture input in response to receiving an indication that the input object has moved to a position associated with the completion of the input gesture.
- the operations include defining a series of input points that represent a path of the gesture input across the virtual keyboard.
- the operations also include down-sampling the series of input points and defining sets of anchor points that correspond to different words in a set of candidate words. Each of the anchor points corresponds to a location of the presence-sensitive display associated with one of the virtual keys.
- the operations include identifying, for each respective anchor point in each of the sets of anchor points, a relevant input point in the set of anchor points.
- the operations also include determining a distance score for each respective anchor point in the sets of anchor points. For each anchor point in the sets of anchor points, the distance score for the respective anchor point is based on a distance on the presence-sensitive surface between the anchor point and the relevant input point for the respective anchor point.
- the operations also include determining, based on the distance scores, scores for words.
- the operations include identifying, based on the scores for the words, a word that corresponds to the gesture input.
- the operations also include outputting the word on the presence-sensitive display.
- FIG. 1 is a conceptual diagram that illustrates an example computing device that may implement one or more techniques of this disclosure.
- FIG. 2 is a conceptual diagram that illustrates the example computing device of FIG. 1 with a path of a gesture input superimposed on a virtual keyboard.
- FIG. 3 is a conceptual diagram that illustrates the example computing device of FIG. 1 showing an example result of processing a word that corresponds to the gesture input of FIG. 2.
- FIG. 4 is a conceptual diagram that illustrates an example series of input points that corresponds to the gesture input of FIG. 2.
- FIG. 5A is a conceptual diagram that illustrates distances between example anchor points for a first word and the input points of FIG. 4.
- FIG. 5B is a conceptual diagram that illustrates distances between example anchor points of a second word and the input points of FIG. 4.
- FIG. 6 is a flowchart that illustrates an example operation of a computing device to receive textual input in accordance with the techniques of this disclosure.
- FIG. 7 is a flowchart that illustrates an example operation performed by a computing device to use input points to identify a word that corresponds to a gesture input.
- FIG. 8 is a flowchart that illustrates a first part of an example operation performed by a computing device to calculate a distance score for an anchor point.
- FIG. 9 is a flowchart that illustrates a second part of the example operation of FIG. 8 to calculate a distance score for an anchor point of a word.
- FIG. 10 is a flowchart that illustrates an example operation of a computing device to identify, based on anchor scores for words and shape scores for words, a word that corresponds to a gesture input.
- FIG. 11 A is a conceptual diagram that illustrates example distances between example input points and an example shape template for a first word.
- FIG. 1 IB is a conceptual diagram that illustrates example distances between example input points and an example shape template for a second word.
- FIG. 12 is a block diagram that illustrates an example configuration of a computing device.
- FIG. 13 is a flowchart that illustrates an example operation, in accordance with one or more techniques of this disclosure.
- a computing device may be operatively coupled to a presence-sensitive surface associated with a virtual keyboard.
- the virtual keyboard may include a set of virtual keys.
- the virtual keyboard may include virtual keys that correspond to letters or characters. For example, a first virtual key may correspond to the letter "q,” a second virtual key may correspond to the letter "w,” a third virtual key may correspond to the letter, "e,” and so on.
- Each virtual key from the set of virtual keys may correspond to a different region or area of the presence-sensitive surface.
- the computing device may receive an indication of a gesture input at a portion of the presence-sensitive surface associated with the virtual keyboard.
- the computing device may determine that an input object, such as a finger or stylus, has moved to the regions of the presence-sensitive surface that correspond to the virtual keys needed to input the word.
- the computing device may detect the presence of the input object during the entire movement.
- the computing device may detect an input object at the region that corresponds to the virtual key that corresponds to the letter "h.” While continuing to detect the presence of the input object, the computing device may detect a sliding movement of the input object to the region that corresponds to the letter "a.” In this example, while continuing to detect the presence of the input object, the computing device may then detect a further sliding movement of the input object to the region that corresponds to the letter "t.” In this example, the computing device may determine that the gesture input is complete when the computing device determines that the input object has moved to a position associated with a completion of the gesture input. For example, the computing device may determine that the gesture input is complete when the computing device stops being able to detect the presence of the input object at the presence-sensitive surface, such as when the user lifts the input object off of the presence- sensitive surface.
- the computing device may receive an indication of a gesture input at a portion of the presence-sensitive surface associated with the virtual keyboard.
- the computing device may define a series of "input" points.
- the input points may represent a path of the gesture input across the virtual keyboard.
- this disclosure may refer to the path of the gesture input across the virtual keyboard as the "detected path.”
- the computing device may define sets of anchor points for different words in a set of candidate words. In other words, the computing device may define sets of anchor points that correspond to different words in the set of candidate words.
- Each of the anchor points may correspond to a location on the presence-sensitive surface associated with a virtual key from the set of virtual keys.
- a first anchor point may correspond to a location on the presence-sensitive surface associated with the virtual key for the letter "q”
- a second anchor point may correspond to a location on the presence-sensitive surface associated with the virtual key for the letter "w,” and so on.
- the anchor points for a word may correspond to virtual keys used to input the word.
- the anchor points for the word "hat” may include an anchor point that corresponds to the virtual key for the letter “h,” an anchor point that corresponds to the virtual key for the letter "a,” and an anchor point that corresponds to the virtual key for the letter "t.”
- the computing device may then identify a relevant input point for each respective anchor point in each of the sets of anchor points.
- the relevant input point for an anchor point may be the closest input point to the anchor point.
- the computing device may then determine a distance score for each respective anchor point in the sets of anchor points. The distance score for an anchor point may be based on a distance on the presence-sensitive surface between the anchor point and the relevant input point for the respective anchor point.
- the computing device may identify, based on the distance scores for the anchor points, a word from the set of candidate words that corresponds to the gesture input.
- the techniques of this disclosure may enable a user to input a word faster and more accurately than systems in which the user performs discrete tapping gesture inputs on regions of a presence-sensitive surface that correspond to separate virtual keys.
- the techniques of this disclosure may enable a computing device to identify a word faster and more accurately than other systems in which a user enters the word by sliding an input object (e.g., a finger or a stylus) across regions of a presence-sensitive surface associated with virtual keys without moving the input object to a position where the presence-sensitive surface is unable to detect the input object.
- an input object e.g., a finger or a stylus
- FIG. 1 is a conceptual diagram that illustrates an example computing device 10 that may implement one or more techniques of this disclosure.
- computing device 10 is illustrated as a mobile phone or a tablet computer.
- other types of computing devices may implement the techniques of this disclosure.
- the techniques of this disclosure may be implemented by desktop computers, laptop computers, in-vehicle computers, household appliances, commercial or industrial machines, retail point-of-sale devices, personal media players, portable video gaming devices, video game consoles, gaming (e.g., gambling) devices, and other types of computing devices.
- Computing device 10 may be operatively coupled to a display 12.
- Display 12 may be a presence-sensitive display (e.g., a touchscreen).
- Computing device 10 may output a virtual keyboard 14 for display at display 12.
- Virtual keyboard 14 may include a set of virtual keys 16. Each of virtual keys 16 may correspond to a different region of display 12.
- Display 12 may be operatively coupled to computing device 10 in various ways. In the example of FIG. 1, display 12 is integrated into a housing of computing device 10. In other examples, display 12 may be physically separate from computing device 10 but may be operatively coupled to computing device 10 via one or more wired and/or wireless communication channels.
- computing devices that implement the techniques of this disclosure do not necessarily output virtual keyboards for display on presence-sensitive displays. Rather, computing devices may receive indications of gesture inputs at presence-sensitive surfaces that may or may not be presence-sensitive displays.
- a computing device may be operatively coupled to a presence-sensitive surface that is able to detect the presence of one or more input objects.
- physical markings indicating regions that correspond to virtual keys may be physically applied to the presence-sensitive surface.
- computing device 10 may be a tablet computer equipped with a flap that covers a display screen of the tablet computer when the tablet computer is not in use. In this example, the flap may rest horizontally in front of the tablet computer when the tablet computer is in use.
- the flap may include a presence-sensitive surface and physical markings indicating regions that correspond to virtual keys may be applied to the inside face of the flap.
- a user of the tablet computer may be able to use the inside face of the flap as a keyboard.
- computing device 10 may output a text input region 18 at display 12.
- Text input region 18 may include a region of display 12 at which computing device 10 may detect text input from a user.
- text input region 18 contains text of a conversation between a user of computing device 10 and another user named "Jill.” The conversation may be via an instant messenger application, via a text messaging application (e.g., short message service (SMS)), or via another communication application.
- SMS short message service
- the user of computing device 10 is inputting text to reply to a message from the other user.
- users of computing devices may input text for reasons other than conducting a conversation with another user.
- a user of a computing device may input text to take notes, input commands, make lists, compose documents, prepare programming language code, prepare web content, make posts to social networking services, and to perform other tasks involving entry of text.
- computing device 10 may receive an indication of a gesture input at a portion of display 12 that corresponds to virtual keyboard 14.
- computing device 10 may detect the presence of an input object at regions of display 12 that correspond to ones of virtual keys 16 that correspond to the word.
- the input object may be a finger or thumb.
- the input object may be a stylus.
- Computing device 10 may continue to detect the presence of the input object as computing device 10 is receiving the indication of the gesture input. For instance, in some examples, the user does move the input object to a position associated with a completion of the gesture input until the user has moved the finger or stylus to the region of display 12 that corresponds to a virtual key for a last letter of the word.
- computing device 10 may detect the presence of an input object at regions of display 12 that correspond to ones of virtual keys 16 that are associated with letters in the word.
- computing device 10 may detect the presence of an input object at regions of display 12 that correspond to ones of virtual keys 16 associated with phonetic sounds or components of a word or syllable. The virtual key may be associated with a word when the virtual key is used to input the word.
- FIG. 2 is a conceptual diagram that illustrates computing device 10 with a detected path 30 of a gesture input superimposed on virtual keyboard 14.
- Detected path 30 may correspond to the regions of display 12 at which computing device 10 detected the presence of an input object when a user performed the gesture input.
- the user is attempting to enter the word "first.” Accordingly, the user first positions an input object, such as a finger or stylus, at a region of display 12 that corresponds to the virtual key for the letter “f,” then slides the input object to the regions of display 12 that correspond to the virtual keys for the letters "i,” "r,” “s,” and “t” while keeping the input object within a space where display 12 is able to detect the presence of the input object.
- an input object such as a finger or stylus
- the user may move the input object to a position associated with a completion of the gesture input. For example, the user may move the input object to a position where display 12 is no longer able to detect the presence of the input object. In another example, the user may move the input object to a position on display 12 that is outside virtual keyboard 14. In typical examples, computing device 10 does not output detected path 30 for display on display 12.
- computing device 10 may receive an indication of the gesture input at a portion of display 12 that corresponds to virtual keyboard 14. In response to receiving the indication of the gesture input, computing device 10 may identify a word that corresponds to the gesture input. For instance, in the example of FIG. 2, when computing device 10 receives an indication of the gesture input associated with detected path 30, computing device 10 may identify the word "first" as being the word that corresponds to the gesture input.
- the user may perform a gesture input in which the user does not precisely move an input object to each of the virtual keys associated with a desired word.
- computing device 10 may still be able to determine that the gesture input corresponds to the desired word. For example, if the user performs a gesture input in which the user moves the input object to areas of display 12 that are relatively close to the virtual keys associated with the desired word, computing device 10 may still be able to determine that the gesture input corresponds to the desired word.
- computing device 10 may still be able to determine that a gesture input corresponds to the word “first,” even if the user does not actually move the input object to the virtual keys for letters "f,” “i,” “r,” “s,” and "t.”
- computing device 10 may process the word in various ways. For example, computing device 10 may store data representing the word to a data storage medium, output a vocalization of the word, transmit data representing the word to another computing device, or otherwise process the word. In some examples, computing device 10 may output the word for display on display 12. As described above with regard to FIG. 2, the user may perform a gesture input that corresponds to the word "first.”
- FIG. 3 is a conceptual diagram that illustrates computing device 10 showing an example result of processing the word "first.” In the example of FIG. 3, computing device 10 may output the word "first” in text input region 18 of display 12, thereby completing the phrase "Are we getting dinner first.”
- computing device 10 may define a series of input points that represent a path of a gesture input across virtual keyboard 14.
- Each of the input points may represent a discrete point on display 12 at which computing device 10 detected the presence of an input object.
- each of the input points may represent a discrete point on display 12 that the user touched when performing the gesture input.
- Each of the input points may have distinct (x, y) coordinates. In this way, computing device 10 may represent the continuous sliding movement of the gesture input as a series of discrete points.
- FIG. 4 is a conceptual diagram that illustrates an example series of input points 50 that correspond to the gesture input of FIG. 2. For the sake of clarity, FIG. 4 does not include reference numbers for each of input points 50. Input points 50 occur at positions along detected path 30. As discussed above, detected path 30 may correspond to the regions of display 12 at which computing device 10 detected the presence of an input object. In typical examples, computing device 10 does not output input points 50 for display on display 12.
- computing device 10 may define sets of anchor points for different words in a set of candidate words.
- Each of the anchor points may correspond to a location on display 12 associated with one of virtual keys 16.
- one anchor point may correspond to the virtual key for the letter "q”
- another anchor point may correspond to the virtual key for the letter "w,” and so on.
- this disclosure may refer to an anchor point that corresponds to a virtual key for a given letter as an anchor point for the given letter.
- Each anchor point in a set of anchor points for a word may correspond to a virtual key associated with the word.
- the set of anchor points for the word “first” may include anchor points for the letters “f,” “i,” “r,” “s,” and “t.”
- the set of anchor points for the word “ghost” may include anchor points for the letters “g,” “h,” “o,” “s,” and “t.”
- Computing device 10 may identify, for each respective anchor point in each of the sets of anchor points, a relevant input point in the series of input points.
- the set of anchor points for the word “first” may include anchor points for the letters “f,” “i,” “r,” “s,” and “t.”
- computing device 10 may identify one of input points 50 (FIG. 4) as the relevant input point for the anchor point for the letter "f,” one of input points 50 as the relevant input point for the anchor point for the letter "i,” one of input points 50 as the relevant input point for the anchor point for the letter "r,” and so on.
- computing device 10 may identify relevant input points for anchor points in various ways. For instance, computing device 10 may identify the closest input point to an anchor point as the relevant input point for the anchor point.
- computing device 10 may determine distance scores for each of the anchor points for the word.
- the distance score for an anchor point may be based on a distance on display 12 between the anchor point and the relevant input point for the anchor point.
- a first anchor point may correspond to the letter "f”
- a second anchor point may correspond to the letter "i,” and so on.
- the distance score for the first anchor point may be based on the distance between the first anchor point and the relevant input point for the first anchor point
- the distance score for the second anchor point may be based on the distance between the second anchor point and the relevant input point for the second anchor point, and so on.
- FIG. 5A is a conceptual diagram that illustrates distances between example anchor points for the word "first" and input points 50.
- FIG. 5B is a conceptual diagram that illustrates distances on a presence-sensitive surface between example anchor points for the word "ghost" and input points 50.
- anchor points are indicated by gray dots within virtual keys 16.
- thin black lines indicate distances between anchor points and the relevant input points for the anchor points.
- FIGS. 5A and 5B omit the reference numbers for some of input points 50.
- Computing device 10 may generate anchor scores for words based on the distance scores for the anchor points for the words. For instance, computing device 10 may generate an anchor score for a first word based on the distance scores for the anchor points for the first word, may generate an anchor score for a second word based on the distance scores for the anchor points for the second word, and so on.
- Computing device 10 may generate the anchor score for a word in various ways. For example, computing device 10 may generate the anchor score for a word based on a sum of the distance scores for the anchor points for the word. In this example, the distance scores for anchor points may be based on the distances on display 12 between the anchor points and the relevant input points for the anchor points. By comparing FIG. 5A and FIG. 5B, a reader may see that the total of the distance scores for the anchor points for the word "first" in FIG. 5A is less than the total of the distance scores for the anchor points for the word "ghost" in FIG. 5B. Hence, in this example, the anchor score for the word "first" may be less than the anchor score for the word "ghost.”
- Computing device 10 may determine, based at least in part on the anchor scores (and thus on the distance scores for the anchor points), that a particular word corresponds to a gesture input.
- Computing device 10 may determine that the particular word corresponds to the gesture input in various ways. For example, computing device 10 may determine that a particular word corresponds to the gesture input when the particular word has a lowest or highest anchor score.
- computing device 10 may receive an indication of a gesture input at a portion of a presence-sensitive surface (e.g., display 12) associated with virtual keyboard 14.
- computing device 10 may define a series of input points that represent a path of the gesture input across virtual keyboard 14.
- Computing device 10 may also define sets of anchor points for different words in a set of candidate words. Each of the anchor points may correspond to a location of the presence-sensitive surface associated with a virtual key from the set of virtual keys.
- Computing device 10 may also identify, for each respective anchor point in each of the sets of anchor points, a relevant input point in the series of input points.
- Computing device 10 may also determine a distance score for each respective anchor point in the sets of anchor points.
- the distance score for the respective anchor point may be based on a distance on the presence-sensitive surface between the respective anchor point and the relevant input point for the respective anchor point.
- Computing device 10 may identify, based on the distance scores for the anchor points, a word in the set of candidate words that corresponds to the gesture input.
- FIG. 6 is a flowchart that illustrates an example operation 100 of a computing device to receive textual input in accordance with the techniques of this disclosure.
- computing device 10 (FIG. 1) may perform operation 100.
- a computing device may perform different operations to receive textual input. For instance, a computing device may perform an operation that includes more, fewer, or different steps than those of operation 100 to identify a word that corresponds to a gesture input. Furthermore, in some instances, one or more of the steps of operation 100 or other operations to identify a word that corresponds to a gesture input may be performed serially or in parallel.
- the computing device may define sets of anchor points that correspond to different words in a set of candidate words (102). Each of the anchor points may correspond to a location associated with a virtual key from the set of virtual keys. In some examples, the computing device may define the anchor points such that the anchor points correspond to centers of virtual keys in a virtual keyboard. In other examples, the anchor points do not necessarily correspond to the centers of virtual keys. Rather, the computing device may define the anchor points to correspond to other positions within virtual keys. In some instances, the anchor points may be defined to be at different locations within different virtual keys.
- the computing device may receive an indication of a gesture input at a portion of a presence-sensitive surface associated with a virtual keyboard (104).
- the computing device may receive an indication of a start of the gesture input if the presence-sensitive surface detects a presence of an input object at a position associated with the virtual keyboard.
- the computing device may receive an indication of a completion of the gesture input if the presence-sensitive surface detects a movement of the input object to a position associated with the completion of the gesture input.
- the computing device may receive an indication of the completion of the gesture input if the presence-sensitive surface detects that the input object has moved to a position where the presence-sensitive surface is no longer able to detect the presence of the input object.
- the computing device may define a series of input points that represent a path of the gesture input across the virtual keyboard (106).
- the computing device may determine, on a periodic basis, the current location on the presence-sensitive surface of an input object. Once per time period, the computing device may define an input point indicating a location on the presence-sensitive surface of the input object. For instance, the computing device may define a new input point fifty times per second. Consequently, the input points may be temporally distributed evenly along the detected path.
- the computing device may then use the input points to identify a word in the set of candidate words that corresponds to the gesture input (108).
- the computing device may use the input points to identify the word that corresponds to the gesture input in various ways. For example, the computing device may perform the example operation of FIG. 7 to identify the word that corresponds to the gesture input. In other examples, the computing device performs operations that are different than the example operation of FIG. 7.
- FIG. 7 is a flowchart that illustrates an example operation 150 performed by a computing device to use input points to identify a word that corresponds to a gesture input.
- computing device 10 (FIG. 1) performs operation 150.
- a computing device may perform different operations to identify a word that corresponds to a gesture input. For instance, a computing device may perform an operation that includes more, fewer, or different steps than those of operation 150 to identify a word that corresponds to a gesture input. Furthermore, in some instances, one or more of the steps of operation 150 or other operations to identify a word that corresponds to a gesture input may be performed serially or in parallel.
- the computing device may down- sample the input points (152).
- the computing device may define an initial series of input points that represent the path of the gesture input across the virtual keyboard.
- the computing device may determine that the number of input points in the initial series of input points exceeds a threshold.
- the computing device may down-sample the initial series of input points to define a down-sampled series of input points in response to determining that the number of input points in the initial series of input points exceeds the threshold. Down-sampling the input points may remove redundant information and accelerate the identification of the word that corresponds to the gesture input.
- the computing device may determine whether the number of input points in the initial series of input points exceeds one hundred. In response to
- the computing device may eliminate one or more input points from the initial series of input points until there are only one hundred remaining input points. For instance, the computing device may eliminate points according to a ratio int(/?wm/100) + 1 : 1, where num is the number of input points in the initial series of input points. The eliminated input points may be distributed approximately evenly along the detected path. In this example, the computing device may not eliminate any input points if the number of input points in the initial series of input points does not exceed one hundred.
- the movement of a user's finger or stylus tends to slow as the user's finger or stylus approaches a point where the user intends to change the direction of the movement.
- the movement tends to accelerate as the user's finger or stylus moves away from a point where the user intends to change the direction of the movement.
- the user changes the direction of the movement at locations associated with the virtual keys associated with the desired word. For instance, in the examples of FIGS. 5 A and 5B, the user intends to input the word "first.” Consequently, the user's movement is relatively slow near the virtual keys for the letters "f,” "i,” “s,” and “t” and accelerates at times in between. The user may not need to make a sharp turn at the virtual key for the letter "r.” Consequently, the user's movement may remain relatively fast near the virtual key for the letter "r.”
- the input points are temporally distributed evenly along the detected path and because movement may slow near the virtual keys associated with the desired word, the input points may cluster near the virtual keys associated with the desired word. Such clustering may occur before and after down-sampling the input points.
- the computing device may prune a set of candidate words (154).
- the computing device may be configured with a large vocabulary of candidate words. For instance, the computing device may be configured with a vocabulary of 90,000 or more candidate words. It may be impractical to calculate anchor scores for each of the words in this large vocabulary. Accordingly, the computing device may prune (i.e., eliminate) words that are unlikely to be the correct word.
- the computing device may prune the set of candidate words based on one or more metrics for the candidate words.
- the computational intensity required to compute these metrics for the candidate words may be relatively small as compared to calculating anchor scores for the candidate words.
- the computing device may identify a first virtual key as being associated with the start of the gesture input and may identify a second virtual key as being associated with the end of the gesture input.
- the computing device may prune all words that do not start with the letter associated with the first virtual key and that do not end with the letter associated with the second virtual key.
- the computing device may determine that the gesture input starts at a point associated with the virtual key for the letter "f ' and ends at a point associated with the virtual key for the letter “t.” In this instance, the computing device may prune all candidate words that do not start with the letter “f ' and end with the letter “t.” Thus, if the set of candidate words initially included the word “Tokyo,” the computing device may eliminate the word “Tokyo” from consideration because "Tokyo” does not start with the letter "f ' or end with the letter “t.” However, the words “first,” “fat,” “fist,” “fest,” “fort,” “fight,” “fast,” “fervent,” “ferret,” “foretopgallant,” etc. may remain in the set of candidate words.
- the computing device may select a set of candidate words based on an initial input point of the gesture input and a terminal input point of the gesture input.
- the initial input point of the gesture input may be the temporally earliest input point along the detected path of the gesture input.
- the terminal input point of the gesture input may be the temporally last input point along the detected path of the gesture input.
- the computing device may retain (i.e., not prune) some words that do not start with the letter that corresponds to the first virtual key at which the computing device detected the input object and end with the letter that corresponds to the last virtual key at which the computing device detected the input object. Rather, the computing device may retain words when the initial and terminal keys for the words are within particular distances of the initial and terminal input points.
- the initial key for a word may be the first virtual key at which the computing device detects the presence of an input object when the user is inputting the word.
- the terminal key for a word may be the last virtual key at which the computing device detects the presence of the input object when the user is inputting the word.
- the computing device may retain candidate words that start with letters associated with virtual keys that are within 1.5 key widths of the initial input point and end with letters associated with virtual keys that are within 1.5 key widths of the terminal input point.
- the user may intend to input the word "first” and the initial input point is within the virtual key for the letter "f," but the computing device may retain the word "ghost” because the virtual key for the letter "g” is within 1.5 key widths of the initial input point.
- the computing device may prune the word "belt” because the virtual key for the letter "b” is more than 1.5 key widths from the initial input point.
- a key width may be the width of a virtual key.
- the computing device may retain candidate words that end with letters associated with keys that are within 2.5 key widths of the terminal input point.
- the computing device may retain the word "fish” because the virtual key for the letter "h" is within 2.5 key widths of the terminal input point.
- the computing device may prune a word from the set of candidate words in response to determining that any anchor point that corresponds to the word is more than a given distance from an input point closest to the anchor point. For instance, the computing device may prune a word from the set of candidate words in response to determining that an anchor point that corresponds to the word is more than 1.5 key widths from the input point closest to the anchor point.
- the computing device may partition the virtual keyboard into a grid of cells.
- the grid of cells may be thirty-two cells wide by sixteen cells tall.
- the computing device may calculate a distance between a center of the cell and a border of each virtual key. If the distance is below a particular threshold, the computing device may include the virtual key in a neighborhood array for the cell. The threshold may be calculated based on a key width and a configurable search distance.
- To prune a word from the set of candidate words the computing device may determine which cell contains the initial input point of the detected path. The computing device may then prune all words from the set of candidate words whose initial keys are not in the neighborhood array for the cell. Similarly, the computing device may determine which cell contains the terminal input point of the detected path. The computing device may then prune all words from the set of candidate words whose terminal keys are not in the neighborhood array for the cell.
- the computing device may be configured to determine the lengths of ideal paths associated with words in the set of candidate words.
- the ideal path for a word may be a path that passes through the centers of each of the virtual keys associated with the word in the order needed to input the word.
- the computing device may prune the set of candidate words based on a comparison of the length of the detected path and the lengths of the ideal paths associated with the candidate words. If the difference between the length of the detected path and the length of the ideal path associated with a candidate word differ by more than a particular amount (e.g., a ratio of lengths exceeds a given threshold), the computing device may eliminate the candidate word. For instance, if the length of the ideal path associated with a candidate word is more than 1.5 times or less than 0.6 times the length of the detected path, the computing device may prune the candidate word from the set of candidate words.
- the computing device may prune the word "fat” from the set of candidate words.
- the computing device may store candidate words in a two- dimensional array. Assuming that the virtual keyboard has twenty-six virtual keys, the array may have 676 (26*26) entries in a first dimension. 676 is the number of all possible combinations of two letters. The first letter may correspond to the initial letter of a word and the second letter may correspond to a terminal letter of the word. Entries in the second dimension of the array may correspond to words having various sizes.
- the array may have the following structure, where * indicates any one of the twenty-six possible letters:
- the computing device may allow up to forty-eight letters between the first letter and the terminal letter of each word.
- the computing device may sort the words within each of the first-dimension entries based on the lengths of the ideal paths for the words. By storing the words in such a sorted array, the computing device may be able to quickly prune words based on their starting and terminal keys and based on the lengths of their ideal paths. In some instances, the computing device may be able to prune words based on their starting and terminal keys and the lengths of their ideal paths in an worst case of O(n) time.
- the computing device may determine whether there is at least one word in the set of candidate words for which an anchor score have not yet been determined (156).
- An anchor score for a word is a score based on the distance scores for the anchor points that correspond to the word.
- the computing device may select one of the words in the set of candidate words for which an anchor score has not yet been determined (158). The computing device may then determine distance scores for each anchor point that corresponds to the selected word (160). The computing device may determine the distance scores for anchor points in various ways. For example, the computing device may perform the example operation illustrated in FIGS. 8 and 9 to determine the distance score for an anchor point.
- the computing device may determine the distance scores for anchor points of the selected word according to an order that a user would use the corresponding virtual keys to input the selected word. For example, if the selected word is "first,” the computing device may determine the distance score for the anchor point for the virtual key "f,” then determine the distance score for the anchor point for the virtual key "i,” then determine the distance score for the anchor point for the virtual key "r,” and so on.
- the computing device may determine an anchor score for the selected word based on the distance scores for the anchor points that correspond to the selected word (162).
- the computing device may determine the anchor score for the selected word in various ways. For example, the computing device may determine the anchor score for the selected word by adding or multiplying the distance scores for the anchor points of the selected word.
- the computing device may determine again whether there is at least one word in the set of candidate words for which an anchor score has not yet been determined (156). If so, the computing device may repeat steps 158, 160, and 162 to determine the anchor score for another word in the set of candidate words.
- the computing device may identify, based at least in part on the anchor scores for the words, that a particular word in the set of candidate words corresponds to the gesture input (164).
- the computing device may identify the particular word in various ways. For example, the computing device may perform the example operation illustrated in FIG. 10 to identify the particular word.
- FIG. 8 is a flowchart that illustrates a first part of an example operation 200 performed by a computing device to calculate a distance score for an anchor point of a word.
- computing device 10 (FIG. 1) may perform operation 200.
- FIGS. 8 and 9 refers to the anchor point for which the computing device is calculating a distance score as "the current anchor point" and the word as "the current word.”
- a computing device may perform different operations to determine a distance score for an anchor point. For instance, a computing device may perform an operation that includes more, fewer, or different steps than those of operation 200 to determine a distance score for an anchor point. Furthermore, in some instances, one or more of the steps of operation 200 or other operations to determine a distance score for an anchor point may be performed serially or in parallel.
- the computing device may determine whether the current anchor point is the anchor point of an initial key of the current word (202). In response to determining that the current anchor point is the anchor point of the initial key of the current word ("YES" of 202), the computing device may identify an initial input point in the series of input points as the relevant input point for the current anchor point (204). In other examples, the computing device may identify a closest input point to the current input point as the relevant input point for the current input point.
- the computing device may then determine that the distance score for the current anchor point is equal to the distance between the current anchor point and the relevant input point (206).
- the computing device may determine the distance between an anchor point and an input point in various ways. For example, the computing device may use an algorithm to calculate the Euclidean distance between the anchor point and the input point. In this example, the computing device may use any of several known methods to determine Euclidean without calculating square roots. In another example, after the computing device determines a distance between an anchor point and an input point, the computing device may store the distance in a cache.
- the computing device may determine the distance between the anchor point and the input point by looking up the distance in the cache. In this way, the computing device may determine the distance scores for anchor points based on one or more of the distances indicated by the cache.
- the cache may be implemented as a two-dimensional array.
- the two-dimensional array may have one row for each virtual key of the virtual keyboard and one column for each input point.
- the computing device may enter the distance into a location in the array at the row for the given anchor point and the column for the given input point. Subsequently, if the computing device needs to determine the distance between the given anchor point and the given input point, the computing device may retrieve the distance from the array.
- the computing device may determine whether the current anchor point is the anchor point of the terminal key of the current word (208). In response to determining that the current anchor point is not the anchor point of the terminal key of the current word ("NO" of 208), the computing device may perform the part of operation 200 illustrated in FIG. 9. [0091] However, in response to determining that the current anchor point is the anchor point of the terminal key of the current word ("YES" of 208), the computing device may identify a terminal input point in the series of input points as the relevant input point for the current anchor point (210). In other examples, the computing device may identify a closest input point to the current anchor point as the relevant input point for the current anchor point. The computing device may then determine that the distance score for the current anchor point is equal to the distance between the current anchor point and the relevant input point (212).
- FIG. 9 is a flowchart that illustrates a second part of operation 200.
- the computing device may determine whether there is a set of one or more available input points that are closer to the current anchor point than any other anchor point (250).
- An input point may be an available input point if the input point occurs after the relevant input point of an anchor point for a previous key of the current word.
- an input point may be unavailable if the input point is the relevant input point for the anchor point for the previous key of the current word.
- An input point may also be unavailable if the position of the input point on the detected path is before the position on the detected path of the relevant input point for the anchor point for the previous key of the current word.
- the computing device may identify, from among the available input points that are closer to the current anchor point than any other anchor point, the input point that is closest to the current anchor point (252). In this way, the computing device may identify the relevant input point for the current anchor point such that the relevant input point is closer to the current anchor point than any other available input point and such that the current anchor point is closer to the relevant input point than any other anchor point.
- the computing device may determine the distance between the current anchor point and the relevant input point for the current anchor point (254).
- the computing device may determine the distance score for the current anchor point based on the distance between the current anchor point and the relevant input point (256).
- the computing device may determine the distance score for the current anchor point based on the distance in various ways. For example, the computing device may determine the distance score for the current anchor point to be equal to the distance. In another example, the computing device may determine the distance score for the current anchor point by using the distance to look up the distance score in a lookup table. In another example, the computing device may determine the distance score for the current anchor point by performing one or more mathematical operations on the distance.
- the computing device may mark earlier input points as being unavailable (258).
- the earlier input points may include the relevant input point and input points having positions on the detected path prior to the position on the detected path of the relevant input point.
- the input point may remain unavailable when the computing device determines the distance score for the anchor point for the next key of the current word. In this way, the computing device may ensure that the same input point is not identified as the relevant input point for multiple anchor points in the current word.
- the computing device may mark an input point as being unavailable in various ways. For example, the computing device may maintain one or more data structures that indicate availabilities of input points. In this example, the computing device may modify one or more values in the one or more data structures to indicate that particular input points are unavailable. In another example, the computing device may maintain data that identifies a first available input point along the detected path. In this example, the computing device may mark a given input point as being unavailable by modifying the data to identify an input point that occurs on the detected path after the given input point.
- the computing device may mark all input points as being available (260).
- the computing device may have previously identified a given input point as being the relevant input point for an anchor point for an earlier key of the current word when the given input point potentially should be the relevant input point for the current anchor point.
- Such circumstances may arise when the detected path passes close to the current anchor point multiple times. For example, when the user is attempting to input the word "before,” the detected path may pass close to the letter "e" multiple times.
- the current anchor point may be the second letter "e” and the computing device may identify an input point at the end of the detected path as the relevant input point for the anchor point for the first letter "e.”
- the computing device may identify all input points earlier than the input point identified for the anchor point for the first letter "e" may be unavailable.
- the computing device may be able to correctly identify the relevant input point for the current anchor point. Accordingly, if the anchor points that correspond to the current word are close to the detected path, the computing device may not necessarily filter out the current word if the computing device misidentifies an input point for one of the anchor points that corresponds to the current word.
- the computing device may then determine whether there is a set of one or more available input points that are closer to the current anchor point than any other anchor point (262). In response to determining that there are one or more available input points that are closer to the current anchor point than any other anchor point ("YES" of 262), the computing device may identify, from among the available input points that are closer to the current anchor point than any other anchor point, the input point that is closest to the current anchor point (264). In this way, the computing device may identify the relevant input point for the current anchor point such that the relevant input point is closer to the current anchor point than any other anchor point and such that the current anchor point is closer to the relevant input point than any other available input point.
- the computing device may determine the distance between the current anchor point and the relevant input point (266). The computing device may then determine a distance score for the current anchor point based on the distance (268). Furthermore, the computing device may mark the relevant input point and earlier input points as being unavailable (270). The computing device may determine the distance, determine the distance score, and mark input points as being unavailable in any of the manners described above or in other manners.
- the computing device may identify an available input point that is closest to the current anchor point (272). The computing device may then mark the identified input point and earlier input points as being unavailable (274). Furthermore, the computing device may determine a distance between the current anchor point and the identified input point (276). [0101] After determining the distance, the computing device may determine the distance score for the current anchor point based on the distance and a penalty value (278). In examples where a high distance score for an anchor point is associated with a low likelihood that the virtual key of the anchor point that corresponds to the current word, the penalty value may increase the distance score for the anchor point. In examples where a low distance score for an anchor point is associated with a low likelihood that the virtual key of the anchor point corresponds to the current word, the penalty value may decrease the distance score for the anchor point.
- the computing device may adjust the distance score for the anchor point in response to determining that the current anchor point is not the closest one of the anchor points to the relevant input point for the current anchor point.
- the computing device may adjust the distance score by various amounts. For example, the computing device may adjust the distance score by 1.3 key widths.
- FIG. 10 is a flowchart that illustrates an example operation 300 of a computing device to identify, based on anchor scores and shape scores for words, a word that corresponds to a gesture input.
- computing device 10 may perform operation 300.
- a computing device may perform different operations to identify a word based on anchor scores and shape scores.
- a computing device may perform an operation that includes more, fewer, or different steps than those of operation 300 to identify a word based on anchor scores and shape scores.
- one or more of the steps of operation 300 or other operations to identify a word based on anchor scores and shape scores may be performed serially or in parallel.
- the computing device may start operation 300 after the computing device determines anchor scores for words in a set of candidate sets.
- the anchor scores for the words may be based on the distance scores for the anchor points that correspond to virtual keys associated with the words.
- the computing device may prune candidate words from the set of candidate words based on the anchor scores for the candidate words (302).
- the computing device may prune candidate words based on their anchor scores in various ways. For example, the computing device may rank candidate words according to their anchor scores. In this example, the candidate device may prune all candidate words that are not among the n-highest ranked candidate words. For instance, in this example, the computing device may prune a candidate word when the candidate word is not among the top two-hundred ranked candidate words. In another example, the computing device may prune a candidate word if the anchor score for the candidate word is above or below a particular threshold.
- the computing device may resample an initial or down-sampled set of input points defined for a detected path such that the input points are evenly distributed spatially along the detected path (304).
- the computing device may resample the input points such that there is an equal distance along the detected path between each of the input points. Resampling the input points may involve eliminating certain input points and interpolating other input points.
- the computing device may only need to resample the input points once per gesture input. In other words, it may be unnecessary for the computing device to resample the input points for each word in the set of candidate words.
- the computing device may store or determine shape templates.
- Each of the shape templates may correspond to a different word.
- the shape template for a word may represent an ideal path on the virtual keyboard to input the word.
- the shape template for the word “bat” may include a straight line from the center of the virtual key for the letter “b” to the center of the virtual key for the letter "a” and another straight line from the center of the virtual key for the letter "a” to the center of the virtual key for the letter "t.”
- the computing device may translate the positions of the shape templates such that the shape templates are in positions that correspond to the input points (308).
- the computing device may translate centroids of the shape templates to a centroid of the series of input points. For example, if the centroid of the input points is at a position with coordinates (25, 76), the computing device may translate the positions of the shape templates such that centroids of the shape templates are at the position with coordinates (25, 76).
- the computing device may scale and/or translate the input points instead of scaling and translating the shape templates.
- the computing device may determine whether there are any remaining candidate words (310).
- the computing device may consider a candidate word to be a remaining candidate word if the computing device has not yet determined a shape score for the candidate word.
- the computing device may select one of the remaining candidate words (312).
- the computing device may then determine a shape score for the selected candidate word (314).
- the computing device may, for each of the resampled input points, determine a distance between the input point and a point on the shape template that is closest to the input point.
- the computing device may then calculate the shape score for the candidate word by adding together the determined distances. In this way, the computing device may calculate a second score (i.e., the shape score) for the candidate word after scaling the shape template for the candidate word and after translating a position of the shape template for the candidate word.
- a second score i.e., the shape score
- the computing device may use the following formula to determine the shape score x s for a word s:
- N indicates the number of input points
- Uj indicates a position of an input point i
- t indicates a position of a point on the path template closest to the input point i.
- the computing device may determine again whether there are any remaining candidate words (310). If there are one or more remaining candidate words, the computing device may perform steps 312 and 314 with regard to another remaining candidate word. In this way, the computing device may determine shape scores for the words remaining in the set of candidate words.
- the computing device may rank the candidate words based on at least in part on their anchor scores and their shape scores (316). After ranking the candidate words, the computing device may identify a highest ranked candidate word as the word that corresponds to the gesture input (318). The computing device may rank the candidate words based on their anchor scores and shape scores in various ways. For example, the computing device may determine a final score for a candidate word by adding together the anchor score and the shape score for the candidate word. In this example, the computing device may rank the candidate words based on the final scores of the candidate words. Furthermore, in this example, weights may be applied to the anchor score or the shape score when
- a relatively low final score may correspond to a relatively high ranking.
- a relatively high final score may correspond to a relatively high ranking.
- the computing device may determine a first score for a word based on the distance scores for the anchor points of the word (i.e., an anchor score) and may determine a second score for the word based on a shape of the gesture input (i.e., a shape score). As discussed above, the computing device may determine the second score for the word based on distances between the input points and closest points on a shape template for the word. The computing device may then identify, based on the first score for the word and the second score for the word, the word from among a set of candidate words as the word that corresponds to the gesture input.
- the computing device may determine one or more additional scores for candidate words. The computing device may then determine final scores for the words based on the anchor scores for the words, shape scores for the words, and the one or more additional scores for the words. The computing device may determine these additional scores instead of or in addition to determining the shape score.
- the computing device may determine scores for candidate words based on syntax or language models.
- the computing device may store 77- gram models that indicate the probabilities of words given the n previously entered words. For instance, in this example, the computing device may determine a score for a word based on a conditional probability of the word given one or more previous words.
- the conditional probably of the word may be the log conditional probably of the word given the preceding n (e.g., two) words.
- the computing device may use the following formula to determine a final score for a word f.
- S LM indicates a score for the word /based on a language model (e.g., an 77- gram model), S S indicates a shape score for the word and S A indicates an anchor score for the word.
- B is a coefficient that is either theoretically or empirically derived from the standard deviations of the gesture input distribution in relation to the shape template that corresponds to the word
- C is a coefficient that is either theoretically or empirically derived from the standard deviations of the gesture input distribution in relation to the anchor points that correspond to the word
- the computing device may dynamically update B and C according to a user's drawing speed. As the user draws faster, the computing device may give less weight to the anchor scores and the shape scores.
- the computing device may be able to determine the anchor score for a word in 0 LNi) time, wherein L is the number of anchor points in the word and N, is the number of input points after down-sampling. Furthermore, in some examples, the computing device may be able to determine the shape score for a word in 0(N S 2 ) time in the worst case, where N s is at least equal to the number of resampled input points.
- FIG. 11 A is a conceptual diagram that illustrates example distances between example input points 350 and an example shape template 352 for the word "first.” For the sake of clarity, FIG. 11 A does not include reference numbers for each of input points 350. Input points 350 are spatially distributed evenly along a detected path 354. In the example of FIG. 11 A, a computing device may calculate a shape score for the word "first" by summing the distances between input points 350 and the closest points on shape template 352. FIG. 11 A shows the distances between input points 350 and the closest points on shape template 352 as thin black lines.
- FIG. 1 IB is a conceptual diagram that illustrates example distances between example input points 350 and an example shape template 360 for the word "ghost.”
- Input points 350 in FIG. 1 IB are in the same positions as input points 350 in FIG. 11 A and follow the same detected path 354.
- the sum of the distances between input points 350 and shape template 360 are greater than the sum of the distances between input points 350 and shape template 352.
- the word “first” may have a smaller shape score than the word "ghost.”
- the word “first” may be ranked higher than the word "ghost.”
- FIG. 12 is a block diagram of an example configuration of a computing device 400.
- Computing device 400 may be a physical device that processes information.
- computing device 10 may be implemented as one or more computing devices having configurations similar to the configuration of computing device 400.
- Computing device 400 may include a data storage system 402, a memory 404, a secondary storage system 406, a processing system 408, an input interface 410, a display interface 412, a communication interface 414, and one or more communication media 416.
- Communication media 416 may enable data communication between processing system 408, input interface 410, display interface 412, communication interface 414, memory 404, and secondary storage system 406.
- Computing device 400 may include components in addition to those shown in the example of FIG. 12. Furthermore, some computing devices do not include all of the components shown in the example of FIG. 12.
- a computer-readable medium may be a medium from which processing system 408 can read data.
- Computer-readable media may include computer storage media and communications media.
- Computer storage media may include physical devices that store data for subsequent retrieval.
- Computer storage media are not transitory. For instance, computer storage media do not exclusively comprise propagated signals.
- Computer storage media may include volatile storage media and non-volatile storage media.
- Example types of computer storage media may include random-access memory (RAM) units, read-only memory (ROM) devices, solid state memory devices, optical discs (e.g., compact discs, DVDs, BluRay discs, etc.), magnetic disk drives, electrically-erasable programmable read-only memory (EEPROM), programmable read-only memory
- RAM random-access memory
- ROM read-only memory
- solid state memory devices solid state memory devices
- optical discs e.g., compact discs, DVDs, BluRay discs, etc.
- magnetic disk drives e.g., compact discs, DVDs, BluRay discs, etc.
- EEPROM electrically-erasable programmable read-only memory
- Communication media may include media over which one device can communicate data to another device.
- Example types of communication media may include communication networks, communications cables, wireless communication links, communication buses, and other media over which one device is able to
- Data storage system 402 may include a system that stores data for subsequent retrieval.
- data storage system 402 includes memory 404 and secondary storage system 406.
- Memory 404 and secondary storage system 406 may store data for later retrieval.
- memory 404 stores computer- executable instructions 418 and program data 420.
- Secondary storage system 406 may store computer-executable instructions 422 and program data 424. Physically, memory 404 and secondary storage system 406 may each be implemented using one or more computer storage media.
- Processing system 408 may be coupled to data storage system 402.
- Processing system 408 may read computer-executable instructions from data storage system 402 and may execute the computer-executable instructions.
- Execution of the computer-executable instructions by processing system 408 may configure and/or cause computing device 400 to perform the actions indicated by the computer-executable instructions.
- execution of the computer-executable instructions by processing system 408 may configure and/or cause computing device 400 to provide Basic Input/Output Systems, operating systems, system programs, application programs, or may configure and/or cause computing device 400 to provide other functionality.
- Processing system 408 may read the computer-executable instructions from one or more computer-readable media. For example, processing system 408 may read and execute computer-executable instructions 418 and 422 stored on memory 404 and secondary storage system 406. In some examples, computing device 400 may perform various operations to receive an indication of a gesture input on a presence-sensitive surface and identify a word that corresponds to the gesture input.
- Processing system 408 may include one or more processing units 426.
- Processing units 426 may be implemented as physical devices that execute computer-executable instructions.
- processing units 426 may be implemented as various types of physical devices that execute computer-executable instructions.
- one or more of processing units 426 may be implemented as a microprocessor, a processing core within a microprocessor, a digital signal processor, a graphics processing unit, or another type of physical device that executes computer-executable instructions.
- Input interface 410 may enable computing device 400 to receive input from a presence-sensitive surface 428.
- Presence-sensitive surface 428 may be implemented as a device that detects the presence of one or more input objects, such as fingers and styli.
- presence-sensitive surface 428 is integrated into a housing of computing device 400. In other examples, presence-sensitive surface 428 is outside a housing of computing device 400.
- Display interface 412 may enable computing device 400 to display data on a display 430.
- Display 430 may include a device that displays output.
- Example types of displays may include monitors, touch screens, display screens, televisions, and other types of devices that display data.
- display 430 is integrated into a housing of computing device 400. In other examples, display 430 is outside a housing of computing device 400.
- Communication interface 414 may enable computing device 400 to send and receive data over one or more communication media.
- Communication interface 414 may be implemented as various types of devices.
- communication interface 414 may be implemented as a Network Interface Card (NIC), a wireless network adapter, a Universal Serial Bus (USB) port, or another type of device that enables computing device 400 to send and receive data over one or more communication media.
- NIC Network Interface Card
- USB Universal Serial Bus
- FIG. 13 is a flowchart that illustrates an example operation 500, in accordance with one or more techniques of this disclosure.
- computing device 10 (FIG. 1) may perform operation 500.
- other computing devices may perform operation 500.
- the device may receive an indication of a gesture input at a portion of a presence-sensitive surface associated with a virtual keyboard (502).
- the virtual keyboard may comprise a set of virtual keys, each virtual key from the set of virtual keys being associated with a region of the presence-sensitive surface.
- the device may define a series of input points that represent a path of the gesture input across the virtual keyboard (504).
- the device may define sets of anchor points corresponding to different words in a set of candidate words (506). Each of the anchor points may correspond to a location of the presence-sensitive surface associated with a virtual key from the set of virtual keys.
- the device may identify for each respective anchor point in each of the sets of anchor points, a relevant input point in the series of input points (508).
- the device may determine a distance score for each respective anchor point in the sets of anchor points (510).
- the distance score for the respective anchor point may be based on a distance on the presence-sensitive surface between the respective anchor point and the relevant input point for the respective anchor point.
- the device may identify, based on the distance scores for the anchor points, a word in the set of candidate words that corresponds to the gesture input (512).
- processors including one or more microprocessors, digital signal processors (DSPs), application specific integrated circuits (ASICs), field programmable gate arrays (FPGAs), or any other equivalent integrated or discrete logic circuitry, as well as any combinations of such components.
- DSPs digital signal processors
- ASICs application specific integrated circuits
- FPGAs field programmable gate arrays
- processors may generally refer to any of the foregoing logic circuitry, alone or in combination with other logic circuitry, or any other equivalent circuitry.
- a control unit including hardware may also perform one or more of the techniques of this disclosure.
- Such hardware, software, and firmware may be implemented within the same device or within separate devices to support the various techniques described in this disclosure.
- any of the described units, modules or components may be implemented together or separately as discrete but interoperable logic devices. Depiction of different features as modules or units is intended to highlight different functional aspects and does not necessarily imply that such modules or units must be realized by separate hardware, firmware, or software components. Rather, functionality associated with one or more modules or units may be performed by separate hardware, firmware, or software components, or integrated within common or separate hardware, firmware, or software components.
- the techniques described in this disclosure may also be embodied or encoded in a computer-readable medium, such as a computer-readable storage medium, containing instructions. Instructions embedded or encoded in a computer-readable medium, including a computer-readable storage medium, may cause one or more programmable processors, or other processors, to implement one or more of the techniques described herein, such as when instructions included or encoded in the computer-readable medium are executed by the one or more processors.
- Computer readable storage media may include random access memory (RAM), read only memory (ROM), programmable read only memory (PROM), erasable programmable read only memory (EPROM), electronically erasable programmable read only memory (EEPROM), flash memory, a hard disk, a compact disc ROM (CD-ROM), a floppy disk, a cassette, magnetic media, optical media, or other computer readable media.
- RAM random access memory
- ROM read only memory
- PROM programmable read only memory
- EPROM erasable programmable read only memory
- EEPROM electronically erasable programmable read only memory
- flash memory a hard disk, a compact disc ROM (CD-ROM), a floppy disk, a cassette, magnetic media, optical media, or other computer readable media.
- an article of manufacture may include one or more computer-readable storage media.
Abstract
Description
Claims
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201261614976P | 2012-03-23 | 2012-03-23 | |
US13/592,131 US8667414B2 (en) | 2012-03-23 | 2012-08-22 | Gestural input at a virtual keyboard |
PCT/US2013/033166 WO2013142610A1 (en) | 2012-03-23 | 2013-03-20 | Gestural input at a virtual keyboard |
Publications (1)
Publication Number | Publication Date |
---|---|
EP2828733A1 true EP2828733A1 (en) | 2015-01-28 |
Family
ID=49211308
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP13713707.1A Withdrawn EP2828733A1 (en) | 2012-03-23 | 2013-03-20 | Gestural input at a virtual keyboard |
Country Status (4)
Country | Link |
---|---|
US (1) | US8667414B2 (en) |
EP (1) | EP2828733A1 (en) |
CN (1) | CN104246679B (en) |
WO (1) | WO2013142610A1 (en) |
Families Citing this family (26)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8863020B2 (en) * | 2010-12-02 | 2014-10-14 | Blackberry Limited | Portable electronic device and method of controlling same |
JP5565320B2 (en) * | 2011-01-06 | 2014-08-06 | 富士通株式会社 | Information processing apparatus and information processing program |
US8713464B2 (en) | 2012-04-30 | 2014-04-29 | Dov Nir Aides | System and method for text input with a multi-touch screen |
US8782549B2 (en) | 2012-10-05 | 2014-07-15 | Google Inc. | Incremental feature-based gesture-keyboard decoding |
US9021380B2 (en) | 2012-10-05 | 2015-04-28 | Google Inc. | Incremental multi-touch gesture recognition |
US8701032B1 (en) | 2012-10-16 | 2014-04-15 | Google Inc. | Incremental multi-word recognition |
US8843845B2 (en) | 2012-10-16 | 2014-09-23 | Google Inc. | Multi-gesture text input prediction |
US8850350B2 (en) | 2012-10-16 | 2014-09-30 | Google Inc. | Partial gesture text entry |
US8819574B2 (en) | 2012-10-22 | 2014-08-26 | Google Inc. | Space prediction for text input |
US10078384B2 (en) * | 2012-11-20 | 2018-09-18 | Immersion Corporation | Method and apparatus for providing haptic cues for guidance and alignment with electrostatic friction |
US8832589B2 (en) | 2013-01-15 | 2014-09-09 | Google Inc. | Touch keyboard using language and spatial models |
US8887103B1 (en) | 2013-04-22 | 2014-11-11 | Google Inc. | Dynamically-positioned character string suggestions for gesture typing |
US9081500B2 (en) | 2013-05-03 | 2015-07-14 | Google Inc. | Alternative hypothesis error correction for gesture typing |
US20140365878A1 (en) * | 2013-06-10 | 2014-12-11 | Microsoft Corporation | Shape writing ink trace prediction |
US20150089435A1 (en) * | 2013-09-25 | 2015-03-26 | Microth, Inc. | System and method for prediction and recognition of input sequences |
JP6318794B2 (en) * | 2014-04-08 | 2018-05-09 | 富士通株式会社 | Information processing apparatus and information processing program |
US9952763B1 (en) * | 2014-08-26 | 2018-04-24 | Google Llc | Alternative gesture mapping for a graphical keyboard |
CN104571585B (en) * | 2014-12-30 | 2017-07-28 | 北京奇虎科技有限公司 | Input method cursor operating method and device |
WO2016161056A1 (en) * | 2015-03-31 | 2016-10-06 | Keyless Systems Ltd. | Improved data entry systems |
US10402734B2 (en) * | 2015-08-26 | 2019-09-03 | Google Llc | Temporal based word segmentation |
EP3400513A4 (en) * | 2016-04-20 | 2018-12-05 | Google LLC | Assigning textures to graphical keyboards based on thematic textures of applications |
WO2017207103A1 (en) | 2016-06-02 | 2017-12-07 | Myscript | System, method and computer readable medium for input recognition linguistic resource management |
US10747327B2 (en) * | 2016-06-28 | 2020-08-18 | Intel Corporation | Technologies for adaptive downsampling for gesture recognition |
US10884610B2 (en) | 2016-11-04 | 2021-01-05 | Myscript | System and method for recognizing handwritten stroke input |
JP6859711B2 (en) | 2017-01-13 | 2021-04-14 | オムロン株式会社 | String input device, input string estimation method, and input string estimation program |
US11609692B2 (en) * | 2017-04-07 | 2023-03-21 | Hewlett-Packard Development Company, L.P. | Cursor adjustments |
Family Cites Families (82)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5953541A (en) | 1997-01-24 | 1999-09-14 | Tegic Communications, Inc. | Disambiguating system for disambiguating ambiguous input sequences by displaying objects associated with the generated input sequences in the order of decreasing frequency of use |
US8479122B2 (en) | 2004-07-30 | 2013-07-02 | Apple Inc. | Gestures for touch sensitive input devices |
KR100327209B1 (en) | 1998-05-12 | 2002-04-17 | 윤종용 | Software keyboard system using the drawing of stylus and method for recognizing keycode therefor |
US7293231B1 (en) | 1999-03-18 | 2007-11-06 | British Columbia Ltd. | Data entry for personal computing devices |
CA2392446C (en) | 1999-05-27 | 2009-07-14 | America Online Incorporated | Keyboard system with automatic correction |
US7030863B2 (en) | 2000-05-26 | 2006-04-18 | America Online, Incorporated | Virtual keyboard system with automatic correction |
US7750891B2 (en) * | 2003-04-09 | 2010-07-06 | Tegic Communications, Inc. | Selective input system based on tracking of motion parameters of an input device |
US7798417B2 (en) | 2000-01-03 | 2010-09-21 | Snyder David M | Method for data interchange |
DE60025901T2 (en) | 2000-01-11 | 2006-08-24 | International Business Machines Corp. | Method and device for marking a text document with a pattern of additional blanks for the purpose of authentication |
US7028259B1 (en) | 2000-02-01 | 2006-04-11 | Jacobson Robert L | Interactive legal citation checker |
AU2001270420A1 (en) | 2000-07-21 | 2002-02-05 | Raphael Bachmann | Method for a high-speed writing system and high-speed writing device |
WO2002033582A2 (en) | 2000-10-16 | 2002-04-25 | Text Analysis International, Inc. | Method for analyzing text and method for builing text analyzers |
AU2002230766A1 (en) * | 2000-11-08 | 2002-05-21 | New York University | System, process and software arrangement for recognizing handwritten characters |
US7035794B2 (en) | 2001-03-30 | 2006-04-25 | Intel Corporation | Compressing and using a concatenative speech database in text-to-speech systems |
US7042443B2 (en) | 2001-10-11 | 2006-05-09 | Woodard Scott E | Speed Writer program and device with Speed Writer program installed |
US6765556B2 (en) | 2001-11-16 | 2004-07-20 | International Business Machines Corporation | Two-key input per character text entry apparatus and method |
US7362243B2 (en) | 2001-11-16 | 2008-04-22 | International Business Machines Corporation | Apparatus and method using color-coded or pattern-coded keys in two-key input per character text entry |
US7075520B2 (en) | 2001-12-12 | 2006-07-11 | Zi Technology Corporation Ltd | Key press disambiguation using a keypad of multidirectional keys |
US7175438B2 (en) * | 2002-03-01 | 2007-02-13 | Digit Wireless | Fast typing system and method |
US7151530B2 (en) | 2002-08-20 | 2006-12-19 | Canesta, Inc. | System and method for determining an input selected by a user through a virtual interface |
US7199786B2 (en) | 2002-11-29 | 2007-04-03 | Daniel Suraqui | Reduced keyboards system using unistroke input and having automatic disambiguating and a recognition method using said system |
US7251367B2 (en) | 2002-12-20 | 2007-07-31 | International Business Machines Corporation | System and method for recognizing word patterns based on a virtual keyboard layout |
US7453439B1 (en) | 2003-01-16 | 2008-11-18 | Forward Input Inc. | System and method for continuous stroke word-based text input |
US7382358B2 (en) * | 2003-01-16 | 2008-06-03 | Forword Input, Inc. | System and method for continuous stroke word-based text input |
US7098896B2 (en) | 2003-01-16 | 2006-08-29 | Forword Input Inc. | System and method for continuous stroke word-based text input |
SG135918A1 (en) | 2003-03-03 | 2007-10-29 | Xrgomics Pte Ltd | Unambiguous text input method for touch screens and reduced keyboard systems |
NZ529518A (en) | 2003-11-13 | 2005-03-24 | Andy Zheng Song | Input method, system and device |
US20050114115A1 (en) | 2003-11-26 | 2005-05-26 | Karidis John P. | Typing accuracy relaxation system and method in stylus and other keyboards |
US7250938B2 (en) | 2004-01-06 | 2007-07-31 | Lenovo (Singapore) Pte. Ltd. | System and method for improved user input on personal computing devices |
US7706616B2 (en) | 2004-02-27 | 2010-04-27 | International Business Machines Corporation | System and method for recognizing word patterns in a very large vocabulary based on a virtual keyboard layout |
US20060004638A1 (en) | 2004-07-02 | 2006-01-05 | Royal Eliza H | Assisted electronic product design |
US20060176283A1 (en) | 2004-08-06 | 2006-08-10 | Daniel Suraqui | Finger activated reduced keyboard and a method for performing text input |
US7508324B2 (en) | 2004-08-06 | 2009-03-24 | Daniel Suraqui | Finger activated reduced keyboard and a method for performing text input |
US20060055669A1 (en) * | 2004-09-13 | 2006-03-16 | Mita Das | Fluent user interface for text entry on touch-sensitive display |
US7487461B2 (en) | 2005-05-04 | 2009-02-03 | International Business Machines Corporation | System and method for issuing commands based on pen motions on a graphical keyboard |
US8036878B2 (en) | 2005-05-18 | 2011-10-11 | Never Wall Treuhand GmbH | Device incorporating improved text input mechanism |
US7886233B2 (en) | 2005-05-23 | 2011-02-08 | Nokia Corporation | Electronic text input involving word completion functionality for predicting word candidates for partial word inputs |
US20070016862A1 (en) | 2005-07-15 | 2007-01-18 | Microth, Inc. | Input guessing systems, methods, and computer program products |
US7542029B2 (en) | 2005-09-20 | 2009-06-02 | Cliff Kushler | System and method for a user interface for text editing and menu selection |
US20070094024A1 (en) | 2005-10-22 | 2007-04-26 | International Business Machines Corporation | System and method for improving text input in a shorthand-on-keyboard interface |
US7831911B2 (en) | 2006-03-08 | 2010-11-09 | Microsoft Corporation | Spell checking system including a phonetic speller |
WO2008013658A2 (en) | 2006-07-03 | 2008-01-31 | Cliff Kushler | System and method for a user interface for text editing and menu selection |
US8564544B2 (en) | 2006-09-06 | 2013-10-22 | Apple Inc. | Touch screen device, method, and graphical user interface for customizing display of content category icons |
US20080172293A1 (en) | 2006-12-28 | 2008-07-17 | Yahoo! Inc. | Optimization framework for association of advertisements with sequential media |
US8074172B2 (en) | 2007-01-05 | 2011-12-06 | Apple Inc. | Method, system, and graphical user interface for providing word recommendations |
US20080232885A1 (en) | 2007-03-19 | 2008-09-25 | Giftventure Studios, Inc. | Systems and Methods for Creating Customized Activities |
US7895518B2 (en) | 2007-04-27 | 2011-02-22 | Shapewriter Inc. | System and method for preview and selection of words |
US8059101B2 (en) | 2007-06-22 | 2011-11-15 | Apple Inc. | Swipe gestures for touch screen keyboards |
US20090058823A1 (en) | 2007-09-04 | 2009-03-05 | Apple Inc. | Virtual Keyboards in Multi-Language Environment |
US20090119376A1 (en) | 2007-11-06 | 2009-05-07 | International Busness Machines Corporation | Hint-Based Email Address Construction |
US8232973B2 (en) | 2008-01-09 | 2012-07-31 | Apple Inc. | Method, device, and graphical user interface providing word recommendations for text input |
US8456425B2 (en) | 2008-01-30 | 2013-06-04 | International Business Machines Corporation | Self-adapting keypad |
WO2010011972A1 (en) | 2008-07-24 | 2010-01-28 | Headsprout, Inc. | Teaching reading comprehension |
US20100070908A1 (en) | 2008-09-18 | 2010-03-18 | Sun Microsystems, Inc. | System and method for accepting or rejecting suggested text corrections |
US8788261B2 (en) | 2008-11-04 | 2014-07-22 | Saplo Ab | Method and system for analyzing text |
US7996369B2 (en) | 2008-11-14 | 2011-08-09 | The Regents Of The University Of California | Method and apparatus for improving performance of approximate string queries using variable length high-quality grams |
US20100141484A1 (en) | 2008-12-08 | 2010-06-10 | Research In Motion Limited | Optimized keyboard for handheld thumb-typing and touch-typing |
US20100199226A1 (en) | 2009-01-30 | 2010-08-05 | Nokia Corporation | Method and Apparatus for Determining Input Information from a Continuous Stroke Input |
US20100235780A1 (en) | 2009-03-16 | 2010-09-16 | Westerman Wayne C | System and Method for Identifying Words Based on a Sequence of Keyboard Events |
US9189472B2 (en) | 2009-03-30 | 2015-11-17 | Touchtype Limited | System and method for inputting text into small screen devices |
GB0905457D0 (en) | 2009-03-30 | 2009-05-13 | Touchtype Ltd | System and method for inputting text into electronic devices |
DE212009000220U1 (en) | 2009-08-04 | 2012-05-07 | Google, Inc. | Generation of search query proposals |
US9317116B2 (en) | 2009-09-09 | 2016-04-19 | Immersion Corporation | Systems and methods for haptically-enhanced text interfaces |
US20110063231A1 (en) | 2009-09-14 | 2011-03-17 | Invotek, Inc. | Method and Device for Data Input |
US8341558B2 (en) * | 2009-09-16 | 2012-12-25 | Google Inc. | Gesture recognition on computing device correlating input to a template |
US8135582B2 (en) | 2009-10-04 | 2012-03-13 | Daniel Suraqui | Keyboard system and method for global disambiguation from classes with dictionary database from first and last letters |
US8365059B2 (en) | 2009-11-03 | 2013-01-29 | Oto Technologies, Llc | E-reader semantic text manipulation |
US8884872B2 (en) | 2009-11-20 | 2014-11-11 | Nuance Communications, Inc. | Gesture-based repetition of key activations on a virtual keyboard |
US8587532B2 (en) * | 2009-12-18 | 2013-11-19 | Intel Corporation | Multi-feature interactive touch user interface |
US8782556B2 (en) | 2010-02-12 | 2014-07-15 | Microsoft Corporation | User-centric soft keyboard predictive technologies |
US8515969B2 (en) | 2010-02-19 | 2013-08-20 | Go Daddy Operating Company, LLC | Splitting a character string into keyword strings |
US20110210850A1 (en) | 2010-02-26 | 2011-09-01 | Phuong K Tran | Touch-screen keyboard with combination keys and directional swipes |
KR101477530B1 (en) | 2010-03-12 | 2014-12-30 | 뉘앙스 커뮤니케이션즈, 인코포레이티드 | Multimodal text input system, such as for use with touch screens on mobile phones |
US8542195B2 (en) | 2010-03-30 | 2013-09-24 | International Business Machines Corporation | Method for optimization of soft keyboards for multiple languages |
US8266528B1 (en) | 2010-06-24 | 2012-09-11 | Google Inc. | Spelling suggestions based on an input sequence including accidental “delete” |
US8918734B2 (en) | 2010-07-28 | 2014-12-23 | Nuance Communications, Inc. | Reduced keyboard with prediction solutions when input is a partial sliding trajectory |
US8810581B2 (en) | 2010-10-20 | 2014-08-19 | Blackberry Limited | Character input method |
US20120113008A1 (en) * | 2010-11-08 | 2012-05-10 | Ville Makinen | On-screen keyboard with haptic effects |
EP2641145A4 (en) * | 2010-11-20 | 2017-05-03 | Nuance Communications, Inc. | Systems and methods for using entered text to access and process contextual information |
US8922489B2 (en) | 2011-03-24 | 2014-12-30 | Microsoft Corporation | Text input using key and gesture information |
US20130082824A1 (en) | 2011-09-30 | 2013-04-04 | Nokia Corporation | Feedback response |
US9122672B2 (en) | 2011-11-10 | 2015-09-01 | Blackberry Limited | In-letter word prediction for virtual keyboard |
-
2012
- 2012-08-22 US US13/592,131 patent/US8667414B2/en active Active
-
2013
- 2013-03-20 WO PCT/US2013/033166 patent/WO2013142610A1/en active Application Filing
- 2013-03-20 CN CN201380015777.9A patent/CN104246679B/en active Active
- 2013-03-20 EP EP13713707.1A patent/EP2828733A1/en not_active Withdrawn
Non-Patent Citations (2)
Title |
---|
None * |
See also references of WO2013142610A1 * |
Also Published As
Publication number | Publication date |
---|---|
US8667414B2 (en) | 2014-03-04 |
WO2013142610A1 (en) | 2013-09-26 |
US20130249818A1 (en) | 2013-09-26 |
CN104246679B (en) | 2017-09-05 |
CN104246679A (en) | 2014-12-24 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8667414B2 (en) | Gestural input at a virtual keyboard | |
US11334717B2 (en) | Touch keyboard using a trained model | |
US10489508B2 (en) | Incremental multi-word recognition | |
US9471220B2 (en) | Posture-adaptive selection | |
US9552080B2 (en) | Incremental feature-based gesture-keyboard decoding | |
US20040140956A1 (en) | System and method for continuous stroke word-based text input | |
US20090195506A1 (en) | Dynamic Soft Keyboard | |
US8994681B2 (en) | Decoding imprecise gestures for gesture-keyboards | |
Udapola et al. | Braille messenger: Adaptive learning based non-visual touch screen text input for the blind community using braille | |
WO2016031016A1 (en) | Electronic device, method, and program | |
CN111078028A (en) | Input method, related device and readable storage medium | |
JP6772629B2 (en) | Information processing device, character input program and character input method | |
Kirk | Improving the Accuracy of Mobile Touchscreen QWERTY Keyboards |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PUAI | Public reference made under article 153(3) epc to a published international application that has entered the european phase |
Free format text: ORIGINAL CODE: 0009012 |
|
17P | Request for examination filed |
Effective date: 20140730 |
|
AK | Designated contracting states |
Kind code of ref document: A1Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
AX | Request for extension of the european patent |
Extension state: BA ME |
|
DAX | Request for extension of the european patent (deleted) | ||
RAP1 | Party data changed (applicant data changed or rights of an application transferred) |
Owner name: GOOGLE LLC |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: EXAMINATION IS IN PROGRESS |
|
17Q | First examination report despatched |
Effective date: 20190325 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: EXAMINATION IS IN PROGRESS |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: EXAMINATION IS IN PROGRESS |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: THE APPLICATION IS DEEMED TO BE WITHDRAWN |
|
18D | Application deemed to be withdrawn |
Effective date: 20220104 |
|
P01 | Opt-out of the competence of the unified patent court (upc) registered |
Effective date: 20230519 |