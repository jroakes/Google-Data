US20200104678A1 - Training optimizer neural networks - Google Patents
Training optimizer neural networks Download PDFInfo
- Publication number
- US20200104678A1 US20200104678A1 US16/586,220 US201916586220A US2020104678A1 US 20200104678 A1 US20200104678 A1 US 20200104678A1 US 201916586220 A US201916586220 A US 201916586220A US 2020104678 A1 US2020104678 A1 US 2020104678A1
- Authority
- US
- United States
- Prior art keywords
- neural network
- optimizer
- parameters
- target
- values
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Abandoned
Links
- 238000013528 artificial neural network Methods 0.000 title claims abstract description 235
- 238000012549 training Methods 0.000 title claims abstract description 74
- 238000000034 method Methods 0.000 claims abstract description 52
- 238000010200 validation analysis Methods 0.000 claims description 18
- 238000003860 storage Methods 0.000 claims description 9
- 238000009826 distribution Methods 0.000 claims description 3
- 238000005070 sampling Methods 0.000 claims 2
- 230000006870 function Effects 0.000 description 53
- 230000008569 process Effects 0.000 description 24
- 238000004590 computer program Methods 0.000 description 14
- 238000012545 processing Methods 0.000 description 14
- 238000010801 machine learning Methods 0.000 description 10
- 238000005457 optimization Methods 0.000 description 8
- 238000004891 communication Methods 0.000 description 6
- 238000010586 diagram Methods 0.000 description 4
- 230000003287 optical effect Effects 0.000 description 4
- 230000003993 interaction Effects 0.000 description 3
- 239000011159 matrix material Substances 0.000 description 2
- 238000005192 partition Methods 0.000 description 2
- 230000004044 response Effects 0.000 description 2
- 238000013515 script Methods 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 241000009334 Singa Species 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 230000001149 cognitive effect Effects 0.000 description 1
- 230000003247 decreasing effect Effects 0.000 description 1
- 238000011161 development Methods 0.000 description 1
- 238000009499 grossing Methods 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000004519 manufacturing process Methods 0.000 description 1
- 230000000644 propagated effect Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000009466 transformation Effects 0.000 description 1
- 238000013519 translation Methods 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
-
- G06N3/0454—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/042—Knowledge-based neural networks; Logical representations of neural networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/044—Recurrent networks, e.g. Hopfield networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/047—Probabilistic or stochastic networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/084—Backpropagation, e.g. using gradient descent
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/086—Learning methods using evolutionary algorithms, e.g. genetic algorithms or genetic programming
Definitions
- This specification relates to training machine learning models.
- Machine learning models receive an input and generate an output, e.g., a predicted output, based on the received input.
- Some machine learning models are parametric models and generate the output based on the received input and on values of the parameters of the model.
- Some machine learning models are deep models that employ multiple layers of models to generate an output for a received input.
- a deep neural network is a deep machine learning model that includes an output layer and one or more hidden layers that each apply a non-linear transformation to a received input to generate an output.
- This specification describes a system implemented as computer programs on one or more computers in one or more locations that trains an optimizer neural network to determine optimizer parameters that define an update rule for training a target neural network to perform one or more neural network tasks.
- the customized optimizers may learn task specific network structures, enabling significant performance improvements over the more general, hand-designed optimizers.
- the subject matter described in this specification is directed to a system and method for training a customized optimizer, i.e., an optimizer neural network, to determine updated values of parameters of a target neural network during training of the target neural network on one or more machine learning tasks.
- the system aims to compute derivatives of an outer loss function with respect to optimizer parameters of the optimizer neural network. Doing this requires unrolling the optimization process. That is, the system can form an unrolled computational graph that includes iteratively applying an optimizer (u) to optimize parameters (w) of a target neural network. Computing gradients for the optimizer parameters involves backpropagating the outer loss function through this unrolled computational graph. This is a costly operation, as the entire inner-optimization problem must be unrolled in order to get a single outer-gradient. To reduce the computation costs, the system described in this specification is configured to partition the unrolled computation into separate segments, known as truncated backpropagation, thus allowing the computation of multiple outer-gradients over shorter segments.
- training the optimizer neural network using truncated backpropagation through an unrolled optimization process may result in gradients that are either strongly biased (for short truncations) or have exploding norm (for long truncations).
- the techniques described herein address the strongly biased or exploding gradients challenge by dynamically reweighting the contribution of reparameterization gradient and log-derivative gradient in a combined gradient estimate of the objective function (also referred to as an outer loss function) of the optimizer neural network. Therefore, the techniques can speed-up the training time to find parameters of the optimizer neural network.
- the techniques improves the stability of trained values of parameters of the optimizer neural network, leading to faster training time.
- FIG. 1 shows an architecture of an example neural network system for training an optimizer neural network.
- FIG. 2 is a flow diagram of an example process for generating a gradient estimate of an outer loss function associated with the optimizer neural network.
- FIG. 3 is a flow diagram of an example process for training the optimizer neural network.
- This specification describes a neural network system implemented as computer programs on one or more computers in one or more locations that trains an optimizer neural network to determine optimizer parameters that define an optimized update rule for updating values of target parameters of a target neural network during training of the target neural network.
- the target neural network can be configured to perform one or more of any appropriate target neural network tasks, i.e., to receive any kind of digital data input and to generate any kind of score, classification, or regression output based on the input.
- the output generated by the target neural network for a given image may be scores for each of a set of object categories, with each score representing an estimated likelihood that the image contains an image of an object belonging to the category.
- the output generated by the neural network for a given Internet resource, document, or portion of a document may be a score for each of a set of topics, with each score representing an estimated likelihood that the Internet resource, document, or document portion is about the topic.
- the output generated by the target neural network may be a score that represents an estimated likelihood that the particular advertisement will be clicked on.
- the output generated by the target neural network may be a score for each of a set of content items, with each score representing an estimated likelihood that the user will respond favorably to being recommended the content item.
- the output generated by the neural network may be a score for each of a set of pieces of text in another language, with each score representing an estimated likelihood that the piece of text in the other language is a proper translation of the input text into the other language.
- the output generated by the neural network may be a score for each of a set of pieces of text, each score representing an estimated likelihood that the piece of text is the correct transcript for the utterance.
- FIG. 1 shows an example neural network system 100 .
- the system 100 is an example of a system implemented as computer programs on one or more computers in one or more locations, in which the systems, components, and techniques described below can be implemented.
- the neural network system 100 is a system that receives a request to determine an optimized update rule for training a target neural network (e.g., the target neural network 120 ) to perform one or more respective target tasks.
- An update rule denoted as u( ⁇ ) is a parameterized function that defines how to map the target parameters of a target neural network at iteration t of the training of the target neural network to iteration t+1 of the training.
- the system 100 trains an optimizer neural network 110 to determine trained values of optimizer parameters ( ⁇ ′) of the optimizer neural network 110 .
- the trained values of the optimizer parameters of the optimizer neural network 110 define the optimized update rule, denoted as u( ⁇ ; ⁇ ′), for updating values of target parameters (w) during a training of the target neural network 120 .
- the optimized update rule can be applied to current values of target parameters at a given time step to obtain updated values of target parameters at a next time step during the training of the target neural network 120 .
- the optimizer neural network 110 is a fully connected neural network.
- the optimizer neural network 110 can be a small, fast to compute, fully connected neural network with one hidden layer, e.g., a feed forward multilayer perceptron (MLP) containing 32 hidden ReLU units.
- MLP feed forward multilayer perceptron
- Training the optimizer neural network 110 is considered as solving a bi-level optimization problem with inner and outer levels.
- the inner level includes optimizing target parameters (w) of a target loss function l(w) by the repeated application of an update rule to the target parameters (w).
- the target loss function l(w) represents performance of the target neural network 120 on the target task and can be measured over either the training data 102 or the validation data 104 .
- an update rule denoted as u( ⁇ ) is a parameterized function that defines how to map the parameters of the target neural network 120 at iteration t of the training to iteration t+1 of the training as follows:
- w (t) and w (t+1) denotes parameters of the target neural network 120 at time step t and t+1 respectively
- ⁇ represents the optimizer parameters of the optimizer neural network 110 .
- the optimizer neural network 110 is associated with an outer loss function L( ⁇ ) that measures performance of the optimizer neural network 110 given parameter values ⁇ .
- the outer loss function measures how well the target neural network 110 performs after being trained using an update rule defined by ⁇ .
- the optimizer parameters ⁇ are updated to optimize the outer loss function L( ⁇ ).
- the outer loss function L( ⁇ ) may be an average value of the target loss function l( ⁇ ) measured over either training or validation data.
- the system 100 samples a dataset from a set of datasets. Each dataset is associated with a respective neural network task, i.e., each dataset can be used for training the target neural network 120 to perform the respective neural network task. Each dataset includes training data and validation data. For example, the system 100 samples a dataset D from the set of datasets T. The system 100 then receives the dataset D that includes training data 102 for training an instance of the target neural network 120 to perform a target task and a validation set 104 for evaluating the performance of the instance of the target neural network 120 on the target task. The system 100 may initialize values of the optimizer parameters ⁇ of the optimizer neural network 110 and inner parameter w of the target neural network 120 , e.g., randomly.
- the training data 102 and the validation set 104 both include a set of neural network inputs and, for each network input, a respective target output that should be generated by the target neural network 120 to perform the target task.
- a larger set of training data may have been randomly partitioned to generate the training data 102 and the validation set 104 .
- the system 100 may receive the training data 102 and the validation set 104 in any of a variety of ways.
- the system 100 may receive training data as an upload from a remote user of the system over a data communication network, e.g., using an application programming interface (API) made available by the system 100 , and randomly divide the uploaded data into the training data 102 and the validation set 104 .
- the system 100 may receive an input from a user specifying which data that is already maintained by the system 100 should be used for training the neural network, and then divide the specified data into the training data 102 and the validation set 104 .
- API application programming interface
- the system 100 aims to compute derivatives of the outer loss function L with respect to the optimizer parameters ⁇ . Doing this requires unrolling the optimization process. That is, the system 100 can form an unrolled computational graph that includes iteratively applying an optimizer (u) to optimize the target parameters (w) of the target neural network. Computing gradients for the optimizer parameters involves backpropagating the outer loss function through this unrolled computational graph. This is a costly operation, as the entire inner-optimization problem must be unrolled in order to compute a single outer-gradient. To reduce the computation costs, the system 100 can be configured to partition the unrolled computation into separate segments, known as truncated backpropagation, thus allowing the computation of multiple outer-gradients over shorter segments.
- the gradients from these segments (or truncations) can be used to update ⁇ without unrolling all T iterations, dramatically decreasing the computation needed for each update to ⁇ .
- the system 100 For each truncation ⁇ , the system 100 repeatedly performs the following operations.
- the system 100 samples a perturbation value e ⁇ N(0, ⁇ 2 I), where N(0, ⁇ 2 I) is a Gaussian distribution with mean 0, covariance ⁇ , and identity matrix I.
- the system 100 then generates perturbed values of the optimizer parameters by applying a perturbation to the current values of the optimizer parameters.
- the system 100 generates (i) a positively-perturbed value of the optimizer parameters, denoted as ⁇ +e, and (ii) a negatively-perturbed value of the optimizer parameters, denoted as ⁇ e.
- the system 100 trains an instance of the target neural network 120 to perform a neural network task associated with the instance of target neural network 120 by updating values of target parameters of the instance of target neural network 120 in accordance with the perturbed values of the optimizer parameters.
- the system 100 samples a number of steps per truncation, k, for updating the values of target parameters of the target neural network 120 based on the current outer training iteration, where k is a positive integer.
- the system 100 computes a positive sequence of updated parameter values of the instance of target neural network 120 starting from w (t) by repeatedly applying (fork steps) an update rule u( ⁇ ; ⁇ +e) to w (t) .
- the positive sequence of updated parameter values can be denoted as ⁇ w (t+1) + , w (t+2) + , . . . , w (t+k) + ⁇ .
- the system 100 computes a negative sequence of updated parameter values of the instance of target neural network 120 starting from w (t) by repeatedly applying (for k steps) an update rule u( ⁇ , ⁇ e) to w (t) .
- the negative sequence of updated parameter values can be denoted as ⁇ w (t+1) ⁇ , w (t+2) ⁇ , . . . , w (t+k) ⁇ ⁇ .
- the system 100 determines one or more performance metrics that represent the performance of the trained instance of the target neural network 120 on the target task.
- the system 100 computes a pair of perturbed values (L + , L ⁇ ) for the outer loss function with both a positive and negative antithetic sample (L + ,L ⁇ ) using the two sequences of w from time step t to time steps t+k using either the training data 102 or the validation data 104 .
- the outer loss function L( ⁇ ) may be an average value of the target loss function l( ⁇ ) measured over either training or validation data.
- the system 100 may compute a positively perturbed value for the outer loss function L + by computing an average value of the target loss functions computed based on the positive sequence of updated target parameter values w of the instance of target neural network 120 .
- the system 100 may compute a negatively perturbed value for the outer loss function L ⁇ by computing an average value of the target loss functions computed based on the negative sequence of updated target parameter values w of the instance of target neural network 120 .
- the system 100 Based on the performance metrics (L + , L ⁇ ) that represent performance of the trained instance of the target neural network 120 , the system 100 generates, using an optimizer parameter updating engine 130 , (i) a sample of a reparameterization-based gradient estimate g rp of the outer loss function, and (ii) a sample of a log-derivative gradient estimate g es of the outer loss function.
- an optimizer parameter updating engine 130 a sample of a reparameterization-based gradient estimate g rp of the outer loss function
- a sample of a log-derivative gradient estimate g es of the outer loss function A process for computing a sample of a reparameterization-based gradient estimate g rp and a sample of a log-derivative gradient estimate g es of the outer loss function is described in more detail below with reference to FIG. 2 .
- the optimizer parameter updating engine 130 stores the sample of (g rp , g es ) in a buffer until a batch of samples of gradients is ready, i.e., until the above process has been repeatedly performed for all truncations.
- the system 100 assigns the current target parameters w from one of the two sequences with the inner parameter values from the end of the truncation (w t+k ). In some implementations, the system 100 assigns the current target parameters w with the positive parameter values w (t+k) + from the end of the truncation. In some other implementations, the system 100 assigns the current target parameters w with the negative parameter values w (t+k) ⁇ from the end of the truncation. In some other implementations, the system 100 randomly selects one of the positive parameter values w (t+k) + or the negative parameter values w (t+k) ⁇ , and assigns the current target parameters w with the selected parameter values.
- the system 100 repeatedly performs the above process for all truncations.
- the engine 130 computes a combined gradient estimate for the outer loss function by combining all of the samples of (g rp g es ) that have been generated.
- the optimizer parameter updating engine 130 updates the current values of the optimizer parameters of the optimizer neural network 110 based on the combined gradient estimate, e.g., by backpropagating the combined gradient estimate of the outer loss function.
- a smoother version of the outer loss function of the optimizer neural network 110 can be used in place of the outer loss function L( ⁇ ) during training.
- the smoother version of the outer loss function can have the following form:
- the optimizer parameter updating engine 130 can update the values of optimizer parameters of the optimizer neural network by computing a combined gradient estimate of the smoother version ( ⁇ ) instead of the version L( ⁇ ) as described above, and then backpropagating the combined gradient estimate of the smoother version.
- the use of the smoother version ( ⁇ ) can improve the stability of trained values of optimizer parameters of the optimizer neural network 110 , leading to faster training time.
- the system 100 can sample another dataset (including new training data and new validation data) from the set of datasets T and repeat the above bi-level training process to obtain more samples of (g rp , g es ) for updating the values of the optimizer parameters.
- the system 100 can train the optimizer neural network 110 to obtain optimizer parameters that define update rules that, when used during training, result in target neural networks that have increased performance on respective target neural network tasks, i.e., to maximize the expected accuracy on validation data 104 of the trained target neural networks.
- the system 100 trains the optimizer neural network 110 in a distributed manner. That is, the system 100 obtains multiple training datasets in parallel distributed across multiple different worker computing units that are configured so that they can perform the above bi-level training process independently of each other. In some implementations, only partial independence of operation is achieved, for example, because computing units share some resources.
- a computing unit may be, e.g., a computer, a core within a computer having multiple cores, or other hardware or software within a computer capable of independently performing the computation required to evaluate the measure of performance of target neural networks and to compute gradients of the outer loss function.
- the system 100 can output update rule data 150 that specifies the optimized update rule u( ⁇ ; ⁇ ′), where ⁇ ′ is the updated values of optimizer parameters 132 obtained after the training.
- the neural network system 100 can output the update rule data 150 to the user that submitted the training data.
- the system 100 trains a particular neural network using the optimized update rule, e.g., either from scratch or to fine-tune the parameter values generated as a result of training the instance of the target neural network 120 using the optimized update rule, and then uses the trained particular neural network to process requests received by users, e.g., through the API provided by the system 100 . That is, the system 100 can receive inputs to be processed, use the trained particular neural network to process the inputs, and provide the outputs generated by the trained particular neural network or data derived from the generated outputs in response to the received inputs.
- FIG. 2 is a flow diagram of an example process 200 for generating the gradient estimate of the outer loss function associated with the optimizer neural network 110 .
- the process 200 will be described as being performed by a system of one or more computers located in one or more locations.
- a neural network system e.g., the neural network system 100 of FIG. 1 , appropriately programmed in accordance with this specification, can perform the process 200 .
- the system computes a sample of a reparameterization-based gradient estimate of the outer loss function based on the performance metrics (L + , L) of the trained instance of the target neural network as follows:
- ⁇ ⁇ 1 ⁇ 2(L + ,L ⁇ ) denotes a gradient of 1 ⁇ 2(L + +L ⁇ ) with respect to optimizer parameters ⁇ .
- the system computes a sample of a log-derivative gradient estimate of the outer loss function as follows:
- N(e; ⁇ , ⁇ 2 I) is the probability density of the sampled perturbation e.
- the system stores the sample of (g rp , g es ) in a buffer until a batch of samples is ready.
- the system computes a gradient estimate for the outer loss function by combining the samples of (g rp , g es ) that have been generated by using inverse variance weighting as follows:
- g merged g rp _ ⁇ ⁇ rp - 2 + g es _ ⁇ ⁇ es - 2 ⁇ rp - 2 + ⁇ es - 2 , ( 4 )
- g rp and ⁇ rp are empirical mean and empirical variance of the samples of a reparameterization-based gradient estimate of the outer loss function, respectively; and where g es and ⁇ es are empirical mean and empirical variance of the samples of a log-derivative gradient estimate of the outer loss function, respectively.
- FIG. 3 is a flow diagram of an example process 300 for training the optimizer neural network.
- the process 300 will be described as being performed by a system of one or more computers located in one or more locations.
- a neural network system e.g., the neural network system 100 of FIG. 1 , appropriately programmed in accordance with this specification, can perform the process 300 .
- the optimizer neural network is configured to generate an output that defines updated values of target parameters of a target neural network during training of the target neural network to perform one or more neural network tasks.
- the optimizer neural network is associated with an outer loss function that measures how well the optimizer neural network generates updated values of target parameters for the target neural network.
- the system initializes current values of the optimizer parameters of the optimizer neural network (step 302 ).
- the system For each truncation ⁇ , the system repeatedly performs the following steps 304 - 312 to determine trained values of the optimizer parameters.
- the system generates perturbed values of the optimizer parameters by applying a perturbation to the current values of the optimizer parameters (step 304 ).
- the system samples a perturbation value e ⁇ N(0, ⁇ 2 I), where N(0, ⁇ 2 I) is a Gaussian distribution with mean 0, covariance ⁇ , and identity matrix I.
- the system then generates (i) a positively-perturbed value of the optimizer parameters, denoted as ⁇ +e, and (ii) a negatively-perturbed value of the optimizer parameters, denoted as ⁇ e.
- the system trains an instance of target neural network to perform a target neural network task associated with the instance of target neural network by updating values of parameters of the instance of target neural network in accordance with the perturbed values of the optimizer parameters (step 306 ).
- the system samples a number of steps per truncation, k, for updating the values of target parameters of the target neural network, where k is a positive integer.
- the system then computes a positive sequence of updated parameter values of the instance of target neural network starting from w (t) by repeatedly applying (for k steps) an update rule u( ⁇ ; ⁇ +e) to w (t) .
- the system 100 computes a negative sequence of updated parameter values of the instance of target neural network 120 starting from w (t) by repeatedly applying (fork steps) an update rule u( ⁇ , ⁇ e) to w (t) .
- the system evaluates a performance of the trained instance of target neural network on the neural network task associated with the instance of target neural network to determine one or more performance metrics for the trained instance of the target neural network on the neural network task (step 308 ).
- the system computes a pair of perturbed values for the outer loss function with both a positive and negative antithetic sample (L + ,L ⁇ ) using the two sequences of w from time step t to time steps t+k using either the training data or validation data associated with the neural network task.
- the system uses the performance metrics (L + ,L ⁇ ) for the trained instance of the target neural network to compute (i) a sample of a reparameterization-based gradient estimate g rp of the loss function, and (ii) a log-derivative gradient estimate g es of the loss function (step 310 ).
- the system stores the sample of (g rp , g es ) in a buffer until a batch of samples of gradients is ready, i.e., until the above process has been repeatedly performed for all truncations.
- the system assigns the current target parameters w from one of the two sequences with the target parameter values from the end of the truncation (w t+k ) (step 312 ).
- the system performs the above step 304 - 312 for all truncations.
- the system computes a combined gradient estimate for the outer loss function by combining all of the samples of ( ⁇ rp , g es ) that have been generated (step 314 ).
- the system combines the reparameterization-based gradient estimate and the log-derivative gradient estimate based on (i) empirical variance and empirical mean of the reparameterization-based gradient estimate, and (ii) empirical variance and empirical mean of the log-derivative gradient estimate to generate the combined gradient estimate of the outer loss function.
- the empirical variance and empirical mean are computed based on a batch of samples of reparameterization-based gradient estimates obtained during training.
- the empirical variance and empirical mean are computed based on a batch of samples of log-derivative gradient estimates obtained during training.
- the system adjusts the current values of the optimizer parameters of the optimizer neural network based on the combined gradient estimate of the outer loss function associated with the optimizer neural network (step 312 ).
- the system can backpropagate the combined gradient estimate of the outer loss function to adjust the current values of the optimizer parameters such that the outer loss function is minimized.
- Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, in tangibly-embodied computer software or firmware, in computer hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a tangible non transitory storage medium for execution by, or to control the operation of, data processing apparatus.
- the computer storage medium can be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, or a combination of one or more of them.
- the program instructions can be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- data processing apparatus refers to data processing hardware and encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers.
- the apparatus can also be, or further include, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit).
- the apparatus can optionally include, in addition to hardware, code that creates an execution environment for computer programs, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
- a computer program which may also be referred to or described as a program, software, a software application, an app, a module, a software module, a script, or code, can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages; and it can be deployed in any form, including as a stand alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.
- a program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data, e.g., one or more scripts stored in a markup language document, in a single file dedicated to the program in question, or in multiple coordinated files, e.g., files that store one or more modules, sub programs, or portions of code.
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a data communication network.
- the term “database” is used broadly to refer to any collection of data: the data does not need to be structured in any particular way, or structured at all, and it can be stored on storage devices in one or more locations.
- the index database can include multiple collections of data, each of which may be organized and accessed differently.
- engine is used broadly to refer to a software-based system, subsystem, or process that is programmed to perform one or more specific functions.
- an engine will be implemented as one or more software modules or components, installed on one or more computers in one or more locations. In some cases, one or more computers will be dedicated to a particular engine; in other cases, multiple engines can be installed and running on the same computer or computers.
- the processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output.
- the processes and logic flows can also be performed by special purpose logic circuitry, e.g., an FPGA or an ASIC, or by a combination of special purpose logic circuitry and one or more programmed computers.
- Computers suitable for the execution of a computer program can be based on general or special purpose microprocessors or both, or any other kind of central processing unit.
- a central processing unit will receive instructions and data from a read only memory or a random access memory or both.
- the essential elements of a computer are a central processing unit for performing or executing instructions and one or more memory devices for storing instructions and data.
- the central processing unit and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks. However, a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device, e.g., a universal serial bus (USB) flash drive, to name just a few.
- PDA personal digital assistant
- GPS Global Positioning System
- USB universal serial bus
- Computer readable media suitable for storing computer program instructions and data include all forms of non volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; and CD ROM and DVD-ROM disks.
- semiconductor memory devices e.g., EPROM, EEPROM, and flash memory devices
- magnetic disks e.g., internal hard disks or removable disks
- magneto optical disks e.g., CD ROM and DVD-ROM disks.
- embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's device in response to requests received from the web browser.
- a computer can interact with a user by sending text messages or other forms of message to a personal device, e.g., a smartphone that is running a messaging application, and receiving responsive messages from the user in return.
- Data processing apparatus for implementing machine learning models can also include, for example, special-purpose hardware accelerator units for processing common and compute-intensive parts of machine learning training or production, i.e., inference, workloads.
- Machine learning models can be implemented and deployed using a machine learning framework, e.g., a TensorFlow framework, a Microsoft Cognitive Toolkit framework, an Apache Singa framework, or an Apache MXNet framework.
- a machine learning framework e.g., a TensorFlow framework, a Microsoft Cognitive Toolkit framework, an Apache Singa framework, or an Apache MXNet framework.
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front end component, e.g., a client computer having a graphical user interface, a web browser, or an app through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back end, middleware, or front end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (LAN) and a wide area network (WAN), e.g., the Internet.
- LAN local area network
- WAN wide area network
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- a server transmits data, e.g., an HTML page, to a user device, e.g., for purposes of displaying data to and receiving user input from a user interacting with the device, which acts as a client.
- Data generated at the user device e.g., a result of the user interaction, can be received at the server from the device.
Abstract
Description
- This application claims priority to U.S. Provisional Application Ser. No. 62/737,871, filed on Sep. 27, 2018. The disclosure of the prior application is considered part of and is incorporated by reference in the disclosure of this application.
- This specification relates to training machine learning models.
- Machine learning models receive an input and generate an output, e.g., a predicted output, based on the received input. Some machine learning models are parametric models and generate the output based on the received input and on values of the parameters of the model.
- Some machine learning models are deep models that employ multiple layers of models to generate an output for a received input. For example, a deep neural network is a deep machine learning model that includes an output layer and one or more hidden layers that each apply a non-linear transformation to a received input to generate an output.
- This specification describes a system implemented as computer programs on one or more computers in one or more locations that trains an optimizer neural network to determine optimizer parameters that define an update rule for training a target neural network to perform one or more neural network tasks.
- Particular embodiments of the subject matter described in this specification can be implemented so as to realize one or more of the following advantages. Existing gradient-based optimization methods for training a target neural network involve analysis and development of hand-designed optimizers that are applicable for a wide variety of tasks or are tuned to specific tasks via hyper-parameter search. However, hand-designed optimizers require manually adjusting step sizes during training and therefore are time-consuming and often result in unsatisfied trained values for the target neural network, i.e., the trained neural network may have low performance on a validation set or during inference. Customized optimizers, on the other hand, can overcome the drawbacks of hand-designed optimizers by learning a function to perform optimization, targeted to particular tasks of interest. In this way, the customized optimizers may learn task specific network structures, enabling significant performance improvements over the more general, hand-designed optimizers. The subject matter described in this specification is directed to a system and method for training a customized optimizer, i.e., an optimizer neural network, to determine updated values of parameters of a target neural network during training of the target neural network on one or more machine learning tasks.
- To train the optimizer neural network, the system aims to compute derivatives of an outer loss function with respect to optimizer parameters of the optimizer neural network. Doing this requires unrolling the optimization process. That is, the system can form an unrolled computational graph that includes iteratively applying an optimizer (u) to optimize parameters (w) of a target neural network. Computing gradients for the optimizer parameters involves backpropagating the outer loss function through this unrolled computational graph. This is a costly operation, as the entire inner-optimization problem must be unrolled in order to get a single outer-gradient. To reduce the computation costs, the system described in this specification is configured to partition the unrolled computation into separate segments, known as truncated backpropagation, thus allowing the computation of multiple outer-gradients over shorter segments.
- In some cases, training the optimizer neural network using truncated backpropagation through an unrolled optimization process may result in gradients that are either strongly biased (for short truncations) or have exploding norm (for long truncations). The techniques described herein address the strongly biased or exploding gradients challenge by dynamically reweighting the contribution of reparameterization gradient and log-derivative gradient in a combined gradient estimate of the objective function (also referred to as an outer loss function) of the optimizer neural network. Therefore, the techniques can speed-up the training time to find parameters of the optimizer neural network. Further, by using a smoother version of the objective function of the optimizer neural network during training, and by updating the value of parameters of the optimizer neural network based on the combined gradient estimate of the smoother version, the techniques improves the stability of trained values of parameters of the optimizer neural network, leading to faster training time.
- The details of one or more embodiments of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
-
FIG. 1 shows an architecture of an example neural network system for training an optimizer neural network. -
FIG. 2 is a flow diagram of an example process for generating a gradient estimate of an outer loss function associated with the optimizer neural network. -
FIG. 3 is a flow diagram of an example process for training the optimizer neural network. - Like reference numbers and designations in the various drawings indicate like elements.
- This specification describes a neural network system implemented as computer programs on one or more computers in one or more locations that trains an optimizer neural network to determine optimizer parameters that define an optimized update rule for updating values of target parameters of a target neural network during training of the target neural network.
- The target neural network can be configured to perform one or more of any appropriate target neural network tasks, i.e., to receive any kind of digital data input and to generate any kind of score, classification, or regression output based on the input.
- For example, if the inputs to a target neural network are images or features that have been extracted from images, the output generated by the target neural network for a given image may be scores for each of a set of object categories, with each score representing an estimated likelihood that the image contains an image of an object belonging to the category.
- As another example, if the inputs to the target neural network are Internet resources (e.g., web pages), documents, or portions of documents or features extracted from Internet resources, documents, or portions of documents, the output generated by the neural network for a given Internet resource, document, or portion of a document may be a score for each of a set of topics, with each score representing an estimated likelihood that the Internet resource, document, or document portion is about the topic.
- As another example, if the inputs to the target neural network are features of an impression context for a particular advertisement, the output generated by the target neural network may be a score that represents an estimated likelihood that the particular advertisement will be clicked on.
- As another example, if the inputs to the target neural network are features of a personalized recommendation for a user, e.g., features characterizing the context for the recommendation, e.g., features characterizing previous actions taken by the user, the output generated by the target neural network may be a score for each of a set of content items, with each score representing an estimated likelihood that the user will respond favorably to being recommended the content item.
- As another example, if the input to the target neural network is a sequence of text in one language, the output generated by the neural network may be a score for each of a set of pieces of text in another language, with each score representing an estimated likelihood that the piece of text in the other language is a proper translation of the input text into the other language.
- As another example, if the input to the target neural network is a sequence representing a spoken utterance, the output generated by the neural network may be a score for each of a set of pieces of text, each score representing an estimated likelihood that the piece of text is the correct transcript for the utterance.
-
FIG. 1 shows an exampleneural network system 100. Thesystem 100 is an example of a system implemented as computer programs on one or more computers in one or more locations, in which the systems, components, and techniques described below can be implemented. - The
neural network system 100 is a system that receives a request to determine an optimized update rule for training a target neural network (e.g., the target neural network 120) to perform one or more respective target tasks. An update rule, denoted as u(⋅), is a parameterized function that defines how to map the target parameters of a target neural network at iteration t of the training of the target neural network to iteration t+1 of the training. - To determine the optimized update rule, the
system 100 trains an optimizerneural network 110 to determine trained values of optimizer parameters (θ′) of the optimizerneural network 110. The trained values of the optimizer parameters of the optimizerneural network 110 define the optimized update rule, denoted as u(⋅; θ′), for updating values of target parameters (w) during a training of the targetneural network 120. The optimized update rule can be applied to current values of target parameters at a given time step to obtain updated values of target parameters at a next time step during the training of the targetneural network 120. - Generally, the optimizer
neural network 110 is a fully connected neural network. For example, the optimizerneural network 110 can be a small, fast to compute, fully connected neural network with one hidden layer, e.g., a feed forward multilayer perceptron (MLP) containing 32 hidden ReLU units. - Training the optimizer
neural network 110 is considered as solving a bi-level optimization problem with inner and outer levels. The inner level includes optimizing target parameters (w) of a target loss function l(w) by the repeated application of an update rule to the target parameters (w). The target loss function l(w) represents performance of the targetneural network 120 on the target task and can be measured over either thetraining data 102 or thevalidation data 104. - As discussed above, an update rule, denoted as u(⋅) is a parameterized function that defines how to map the parameters of the target
neural network 120 at iteration t of the training to iteration t+1 of the training as follows: -
w (t+1) =u(w (t);θ), (1) - where w(t) and w(t+1) denotes parameters of the target
neural network 120 at time step t and t+1 respectively, and θ represents the optimizer parameters of the optimizerneural network 110. - The optimizer
neural network 110 is associated with an outer loss function L(θ) that measures performance of the optimizerneural network 110 given parameter values θ. For example, the outer loss function measures how well the targetneural network 110 performs after being trained using an update rule defined by θ. At the outer level, the optimizer parameters θ are updated to optimize the outer loss function L(θ). The outer loss function L(θ) may be an average value of the target loss function l(⋅) measured over either training or validation data. - To train the optimizer
neural network 110, thesystem 100 samples a dataset from a set of datasets. Each dataset is associated with a respective neural network task, i.e., each dataset can be used for training the targetneural network 120 to perform the respective neural network task. Each dataset includes training data and validation data. For example, thesystem 100 samples a dataset D from the set of datasets T. Thesystem 100 then receives the dataset D that includestraining data 102 for training an instance of the targetneural network 120 to perform a target task and avalidation set 104 for evaluating the performance of the instance of the targetneural network 120 on the target task. Thesystem 100 may initialize values of the optimizer parameters θ of the optimizerneural network 110 and inner parameter w of the targetneural network 120, e.g., randomly. - Generally, the
training data 102 and the validation set 104 both include a set of neural network inputs and, for each network input, a respective target output that should be generated by the targetneural network 120 to perform the target task. For example, a larger set of training data may have been randomly partitioned to generate thetraining data 102 and the validation set 104. - The
system 100 may receive thetraining data 102 and the validation set 104 in any of a variety of ways. For example, thesystem 100 may receive training data as an upload from a remote user of the system over a data communication network, e.g., using an application programming interface (API) made available by thesystem 100, and randomly divide the uploaded data into thetraining data 102 and the validation set 104. As another example, thesystem 100 may receive an input from a user specifying which data that is already maintained by thesystem 100 should be used for training the neural network, and then divide the specified data into thetraining data 102 and the validation set 104. - To train the optimizer
neural network 110, thesystem 100 aims to compute derivatives of the outer loss function L with respect to the optimizer parameters θ. Doing this requires unrolling the optimization process. That is, thesystem 100 can form an unrolled computational graph that includes iteratively applying an optimizer (u) to optimize the target parameters (w) of the target neural network. Computing gradients for the optimizer parameters involves backpropagating the outer loss function through this unrolled computational graph. This is a costly operation, as the entire inner-optimization problem must be unrolled in order to compute a single outer-gradient. To reduce the computation costs, thesystem 100 can be configured to partition the unrolled computation into separate segments, known as truncated backpropagation, thus allowing the computation of multiple outer-gradients over shorter segments. That is, rather than compute the full gradient from iteration t=0 to t=T, thesystem 100 can be configured to compute gradients in windows from t=a to t=a+τ. The gradients from these segments (or truncations) can be used to update θ without unrolling all T iterations, dramatically decreasing the computation needed for each update to θ. - For each truncation τ, the
system 100 repeatedly performs the following operations. - First, the
system 100 samples a perturbation value e˜N(0, σ2I), where N(0, σ2I) is a Gaussian distribution with mean 0, covariance σ, and identity matrix I. - The
system 100 then generates perturbed values of the optimizer parameters by applying a perturbation to the current values of the optimizer parameters. In particular, thesystem 100 generates (i) a positively-perturbed value of the optimizer parameters, denoted as θ+e, and (ii) a negatively-perturbed value of the optimizer parameters, denoted as θ−e. - The
system 100 then trains an instance of the targetneural network 120 to perform a neural network task associated with the instance of targetneural network 120 by updating values of target parameters of the instance of targetneural network 120 in accordance with the perturbed values of the optimizer parameters. Thesystem 100 samples a number of steps per truncation, k, for updating the values of target parameters of the targetneural network 120 based on the current outer training iteration, where k is a positive integer. - In particular, the
system 100 computes a positive sequence of updated parameter values of the instance of targetneural network 120 starting from w(t) by repeatedly applying (fork steps) an update rule u(⋅; θ+e) to w(t). The positive sequence of updated parameter values can be denoted as {w(t+1)+ , w(t+2)+ , . . . , w(t+k)+ }. Thesystem 100 computes a negative sequence of updated parameter values of the instance of targetneural network 120 starting from w(t) by repeatedly applying (for k steps) an update rule u(⋅, θ−e) to w(t). The negative sequence of updated parameter values can be denoted as {w(t+1)− , w(t+2)− , . . . , w(t+k)− }. - The
system 100 determines one or more performance metrics that represent the performance of the trained instance of the targetneural network 120 on the target task. - In particular, the
system 100 computes a pair of perturbed values (L+, L−) for the outer loss function with both a positive and negative antithetic sample (L+,L−) using the two sequences of w from time step t to time steps t+k using either thetraining data 102 or thevalidation data 104. - For example, the outer loss function L(θ) may be an average value of the target loss function l(⋅) measured over either training or validation data. In this example, the
system 100 may compute a positively perturbed value for the outer loss function L+ by computing an average value of the target loss functions computed based on the positive sequence of updated target parameter values w of the instance of targetneural network 120. Thesystem 100 may compute a negatively perturbed value for the outer loss function L− by computing an average value of the target loss functions computed based on the negative sequence of updated target parameter values w of the instance of targetneural network 120. - Based on the performance metrics (L+, L−) that represent performance of the trained instance of the target
neural network 120, thesystem 100 generates, using an optimizerparameter updating engine 130, (i) a sample of a reparameterization-based gradient estimate grp of the outer loss function, and (ii) a sample of a log-derivative gradient estimate ges of the outer loss function. A process for computing a sample of a reparameterization-based gradient estimate grp and a sample of a log-derivative gradient estimate ges of the outer loss function is described in more detail below with reference toFIG. 2 . - The optimizer
parameter updating engine 130 stores the sample of (grp, ges) in a buffer until a batch of samples of gradients is ready, i.e., until the above process has been repeatedly performed for all truncations. - At the end of the current truncation, the
system 100 assigns the current target parameters w from one of the two sequences with the inner parameter values from the end of the truncation (wt+k). In some implementations, thesystem 100 assigns the current target parameters w with the positive parameter values w(t+k)+ from the end of the truncation. In some other implementations, thesystem 100 assigns the current target parameters w with the negative parameter values w(t+k)− from the end of the truncation. In some other implementations, thesystem 100 randomly selects one of the positive parameter values w(t+k)+ or the negative parameter values w(t+k)− , and assigns the current target parameters w with the selected parameter values. - The
system 100 repeatedly performs the above process for all truncations. When the last truncation iteration is completed and the batch of samples of gradients is ready, theengine 130 computes a combined gradient estimate for the outer loss function by combining all of the samples of (grp ges) that have been generated. - The process for determining the combined gradient estimate of the outer loss function is described in more detail below with reference to
FIG. 2 . - After the combined gradient estimate of the outer loss function is determined, the optimizer
parameter updating engine 130 updates the current values of the optimizer parameters of the optimizerneural network 110 based on the combined gradient estimate, e.g., by backpropagating the combined gradient estimate of the outer loss function. - In some implementations, a smoother version of the outer loss function of the optimizer neural network 110 can be used in place of the outer loss function L(θ) during training. The smoother version of the outer loss function can have the following form:
- where σ2 is a fixed variance that determines the degree of smoothing. The optimizer
parameter updating engine 130 can update the values of optimizer parameters of the optimizer neural network by computing a combined gradient estimate of the smoother versionneural network 110, leading to faster training time. - The
system 100 can sample another dataset (including new training data and new validation data) from the set of datasets T and repeat the above bi-level training process to obtain more samples of (grp, ges) for updating the values of the optimizer parameters. By repeatedly updating the values of the optimizer parameters in this manner, thesystem 100 can train the optimizerneural network 110 to obtain optimizer parameters that define update rules that, when used during training, result in target neural networks that have increased performance on respective target neural network tasks, i.e., to maximize the expected accuracy onvalidation data 104 of the trained target neural networks. - In some implementations, to speed up the training of the optimizer
neural network 110, thesystem 100 trains the optimizerneural network 110 in a distributed manner. That is, thesystem 100 obtains multiple training datasets in parallel distributed across multiple different worker computing units that are configured so that they can perform the above bi-level training process independently of each other. In some implementations, only partial independence of operation is achieved, for example, because computing units share some resources. A computing unit may be, e.g., a computer, a core within a computer having multiple cores, or other hardware or software within a computer capable of independently performing the computation required to evaluate the measure of performance of target neural networks and to compute gradients of the outer loss function. - Once the optimizer
neural network 110 has been trained, thesystem 100 can output updaterule data 150 that specifies the optimized update rule u(⋅;θ′), where θ′ is the updated values ofoptimizer parameters 132 obtained after the training. For example, theneural network system 100 can output theupdate rule data 150 to the user that submitted the training data. - In some implementations, instead of or in addition to outputting the
update rule data 150, thesystem 100 trains a particular neural network using the optimized update rule, e.g., either from scratch or to fine-tune the parameter values generated as a result of training the instance of the targetneural network 120 using the optimized update rule, and then uses the trained particular neural network to process requests received by users, e.g., through the API provided by thesystem 100. That is, thesystem 100 can receive inputs to be processed, use the trained particular neural network to process the inputs, and provide the outputs generated by the trained particular neural network or data derived from the generated outputs in response to the received inputs. -
FIG. 2 is a flow diagram of an example process 200 for generating the gradient estimate of the outer loss function associated with the optimizerneural network 110. For convenience, the process 200 will be described as being performed by a system of one or more computers located in one or more locations. For example, a neural network system, e.g., theneural network system 100 ofFIG. 1 , appropriately programmed in accordance with this specification, can perform the process 200. - At
step 202, the system computes a sample of a reparameterization-based gradient estimate of the outer loss function based on the performance metrics (L+, L) of the trained instance of the target neural network as follows: -
g rp=∇θ½(L + ,L −), (2) - where ∇θ½(L+,L−) denotes a gradient of ½(L++L−) with respect to optimizer parameters θ.
- At
step 204, the system computes a sample of a log-derivative gradient estimate of the outer loss function as follows: -
g es=½(L + −L −)∇θ log(N(e;θ,σ 2 I)), (3) - where N(e; θ, σ2I) is the probability density of the sampled perturbation e.
- At
step 206, the system stores the sample of (grp, ges) in a buffer until a batch of samples is ready. - At step 208, when the last truncation iteration is completed and the batch of samples is ready, the system computes a gradient estimate for the outer loss function by combining the samples of (grp, ges) that have been generated by using inverse variance weighting as follows:
-
- where
grp andσrp are empirical mean and empirical variance of the samples of a reparameterization-based gradient estimate of the outer loss function, respectively; and whereges andσes are empirical mean and empirical variance of the samples of a log-derivative gradient estimate of the outer loss function, respectively. -
FIG. 3 is a flow diagram of anexample process 300 for training the optimizer neural network. For convenience, theprocess 300 will be described as being performed by a system of one or more computers located in one or more locations. For example, a neural network system, e.g., theneural network system 100 ofFIG. 1 , appropriately programmed in accordance with this specification, can perform theprocess 300. The optimizer neural network is configured to generate an output that defines updated values of target parameters of a target neural network during training of the target neural network to perform one or more neural network tasks. The optimizer neural network is associated with an outer loss function that measures how well the optimizer neural network generates updated values of target parameters for the target neural network. - The system initializes current values of the optimizer parameters of the optimizer neural network (step 302).
- For each truncation τ, the system repeatedly performs the following steps 304-312 to determine trained values of the optimizer parameters.
- The system generates perturbed values of the optimizer parameters by applying a perturbation to the current values of the optimizer parameters (step 304).
- In particular, the system samples a perturbation value e˜N(0, σ2I), where N(0, σ2I) is a Gaussian distribution with mean 0, covariance σ, and identity matrix I.
- The system then generates (i) a positively-perturbed value of the optimizer parameters, denoted as θ+e, and (ii) a negatively-perturbed value of the optimizer parameters, denoted as θ−e.
- The system trains an instance of target neural network to perform a target neural network task associated with the instance of target neural network by updating values of parameters of the instance of target neural network in accordance with the perturbed values of the optimizer parameters (step 306).
- Specifically, the system samples a number of steps per truncation, k, for updating the values of target parameters of the target neural network, where k is a positive integer.
- The system then computes a positive sequence of updated parameter values of the instance of target neural network starting from w(t) by repeatedly applying (for k steps) an update rule u(⋅; θ+e) to w(t). The
system 100 computes a negative sequence of updated parameter values of the instance of targetneural network 120 starting from w(t) by repeatedly applying (fork steps) an update rule u(⋅, θ−e) to w(t). - The system evaluates a performance of the trained instance of target neural network on the neural network task associated with the instance of target neural network to determine one or more performance metrics for the trained instance of the target neural network on the neural network task (step 308).
- In particular, the system computes a pair of perturbed values for the outer loss function with both a positive and negative antithetic sample (L+,L−) using the two sequences of w from time step t to time steps t+k using either the training data or validation data associated with the neural network task.
- Using the performance metrics (L+,L−) for the trained instance of the target neural network, the system computes (i) a sample of a reparameterization-based gradient estimate grp of the loss function, and (ii) a log-derivative gradient estimate ges of the loss function (step 310). The system stores the sample of (grp, ges) in a buffer until a batch of samples of gradients is ready, i.e., until the above process has been repeatedly performed for all truncations.
- At the end of the current truncation, the system assigns the current target parameters w from one of the two sequences with the target parameter values from the end of the truncation (wt+k) (step 312).
- The system performs the above step 304-312 for all truncations. When the last truncation iteration is completed and the batch of samples of gradients is ready, the system computes a combined gradient estimate for the outer loss function by combining all of the samples of (θrp, ges) that have been generated (step 314).
- In particular, the system combines the reparameterization-based gradient estimate and the log-derivative gradient estimate based on (i) empirical variance and empirical mean of the reparameterization-based gradient estimate, and (ii) empirical variance and empirical mean of the log-derivative gradient estimate to generate the combined gradient estimate of the outer loss function. The empirical variance and empirical mean are computed based on a batch of samples of reparameterization-based gradient estimates obtained during training. The empirical variance and empirical mean are computed based on a batch of samples of log-derivative gradient estimates obtained during training.
- The system adjusts the current values of the optimizer parameters of the optimizer neural network based on the combined gradient estimate of the outer loss function associated with the optimizer neural network (step 312). In particular, the system can backpropagate the combined gradient estimate of the outer loss function to adjust the current values of the optimizer parameters such that the outer loss function is minimized.
- This specification uses the term “configured” in connection with systems and computer program components. For a system of one or more computers to be configured to perform particular operations or actions means that the system has installed on it software, firmware, hardware, or a combination of them that in operation cause the system to perform the operations or actions. For one or more computer programs to be configured to perform particular operations or actions means that the one or more programs include instructions that, when executed by data processing apparatus, cause the apparatus to perform the operations or actions.
- Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, in tangibly-embodied computer software or firmware, in computer hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a tangible non transitory storage medium for execution by, or to control the operation of, data processing apparatus. The computer storage medium can be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, or a combination of one or more of them. Alternatively or in addition, the program instructions can be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- The term “data processing apparatus” refers to data processing hardware and encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers. The apparatus can also be, or further include, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit). The apparatus can optionally include, in addition to hardware, code that creates an execution environment for computer programs, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
- A computer program, which may also be referred to or described as a program, software, a software application, an app, a module, a software module, a script, or code, can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages; and it can be deployed in any form, including as a stand alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data, e.g., one or more scripts stored in a markup language document, in a single file dedicated to the program in question, or in multiple coordinated files, e.g., files that store one or more modules, sub programs, or portions of code. A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a data communication network.
- In this specification, the term “database” is used broadly to refer to any collection of data: the data does not need to be structured in any particular way, or structured at all, and it can be stored on storage devices in one or more locations. Thus, for example, the index database can include multiple collections of data, each of which may be organized and accessed differently.
- Similarly, in this specification the term “engine” is used broadly to refer to a software-based system, subsystem, or process that is programmed to perform one or more specific functions. Generally, an engine will be implemented as one or more software modules or components, installed on one or more computers in one or more locations. In some cases, one or more computers will be dedicated to a particular engine; in other cases, multiple engines can be installed and running on the same computer or computers.
- The processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by special purpose logic circuitry, e.g., an FPGA or an ASIC, or by a combination of special purpose logic circuitry and one or more programmed computers.
- Computers suitable for the execution of a computer program can be based on general or special purpose microprocessors or both, or any other kind of central processing unit. Generally, a central processing unit will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a central processing unit for performing or executing instructions and one or more memory devices for storing instructions and data. The central processing unit and the memory can be supplemented by, or incorporated in, special purpose logic circuitry. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device, e.g., a universal serial bus (USB) flash drive, to name just a few.
- Computer readable media suitable for storing computer program instructions and data include all forms of non volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; and CD ROM and DVD-ROM disks.
- To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's device in response to requests received from the web browser. Also, a computer can interact with a user by sending text messages or other forms of message to a personal device, e.g., a smartphone that is running a messaging application, and receiving responsive messages from the user in return.
- Data processing apparatus for implementing machine learning models can also include, for example, special-purpose hardware accelerator units for processing common and compute-intensive parts of machine learning training or production, i.e., inference, workloads.
- Machine learning models can be implemented and deployed using a machine learning framework, e.g., a TensorFlow framework, a Microsoft Cognitive Toolkit framework, an Apache Singa framework, or an Apache MXNet framework.
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front end component, e.g., a client computer having a graphical user interface, a web browser, or an app through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back end, middleware, or front end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (LAN) and a wide area network (WAN), e.g., the Internet.
- The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, a server transmits data, e.g., an HTML page, to a user device, e.g., for purposes of displaying data to and receiving user input from a user interacting with the device, which acts as a client. Data generated at the user device, e.g., a result of the user interaction, can be received at the server from the device.
- While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any invention or on the scope of what may be claimed, but rather as descriptions of features that may be specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially be claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
- Similarly, while operations are depicted in the drawings and recited in the claims in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system modules and components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
- Particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous.
Claims (15)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US16/586,220 US20200104678A1 (en) | 2018-09-27 | 2019-09-27 | Training optimizer neural networks |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201862737871P | 2018-09-27 | 2018-09-27 | |
US16/586,220 US20200104678A1 (en) | 2018-09-27 | 2019-09-27 | Training optimizer neural networks |
Publications (1)
Publication Number | Publication Date |
---|---|
US20200104678A1 true US20200104678A1 (en) | 2020-04-02 |
Family
ID=69945950
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US16/586,220 Abandoned US20200104678A1 (en) | 2018-09-27 | 2019-09-27 | Training optimizer neural networks |
Country Status (1)
Country | Link |
---|---|
US (1) | US20200104678A1 (en) |
Cited By (17)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20200180647A1 (en) * | 2018-12-10 | 2020-06-11 | Perceptive Automata, Inc. | Neural network based modeling and simulation of non-stationary traffic objects for testing and development of autonomous vehicle systems |
US20200372342A1 (en) * | 2019-05-24 | 2020-11-26 | Comet ML, Inc. | Systems and methods for predictive early stopping in neural network training |
US10922611B2 (en) * | 2017-04-28 | 2021-02-16 | Google Llc | Neural network optimizer search |
CN112613577A (en) * | 2020-12-31 | 2021-04-06 | 上海商汤智能科技有限公司 | Neural network training method and device, computer equipment and storage medium |
US20210208582A1 (en) * | 2020-01-02 | 2021-07-08 | Lg Electronics Inc. | Enhancing performance of local device |
CN113110324A (en) * | 2021-04-12 | 2021-07-13 | 江苏丰尚智能科技有限公司 | Training method and device for dryer parameter optimization model and computer equipment |
CN113591781A (en) * | 2021-08-11 | 2021-11-02 | 山东大学 | Image processing method and system based on service robot cloud platform |
US20220108334A1 (en) * | 2020-10-01 | 2022-04-07 | Adobe Inc. | Inferring unobserved event probabilities |
CN115049019A (en) * | 2022-07-25 | 2022-09-13 | 湖南工商大学 | Method and device for evaluating arsenic adsorption performance of metal organic framework and related equipment |
US11489777B1 (en) * | 2019-08-09 | 2022-11-01 | Cfph, Llc | Network optimization and state synchronization |
US20230040533A1 (en) * | 2021-07-28 | 2023-02-09 | Rain Neuromorphics Inc. | Electrical networks using analytic loss gradients for design, analysis and machine learning |
US11615316B1 (en) * | 2022-09-19 | 2023-03-28 | Rain Neuromorphics Inc. | Machine learning using gradient estimate determined using improved perturbations |
US20230230288A1 (en) * | 2020-07-20 | 2023-07-20 | Deep Render Ltd | Image compression and decoding, video compression and decoding: training methods and training systems |
CN116679639A (en) * | 2023-05-26 | 2023-09-01 | 广州市博煌节能科技有限公司 | Optimization method and system of metal product production control system |
CN117010554A (en) * | 2023-07-03 | 2023-11-07 | 同济大学 | Dynamic multi-objective optimization method and device applied to e-commerce recommendation system |
US11907334B2 (en) | 2020-12-08 | 2024-02-20 | International Business Machines Corporation | Neural network negative rule extraction |
US11922314B1 (en) * | 2018-11-30 | 2024-03-05 | Ansys, Inc. | Systems and methods for building dynamic reduced order physical models |
Citations (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20020087221A1 (en) * | 1999-01-12 | 2002-07-04 | Keeler James David | Residual activation neural network |
US20030176650A1 (en) * | 2001-08-09 | 2003-09-18 | Grosse William M. | Nucleic acids, polypeptides, single nucleotide polymorphisms and methods of use thereof |
US20040002930A1 (en) * | 2002-06-26 | 2004-01-01 | Oliver Nuria M. | Maximizing mutual information between observations and hidden states to minimize classification errors |
US20120292481A1 (en) * | 2011-05-20 | 2012-11-22 | Hutchin Richard A | Multi-beam laser beam control and imaging system and method |
US20140287698A1 (en) * | 2011-11-14 | 2014-09-25 | Blackberry Limited | Perturbation-based dynamic measurement of antenna impedance in real-time |
US9824692B1 (en) * | 2016-09-12 | 2017-11-21 | Pindrop Security, Inc. | End-to-end speaker recognition using deep neural network |
US20180218502A1 (en) * | 2017-01-27 | 2018-08-02 | Arterys Inc. | Automated segmentation utilizing fully convolutional networks |
US20190244103A1 (en) * | 2018-02-07 | 2019-08-08 | Royal Bank Of Canada | Robust pruned neural networks via adversarial training |
US20190287515A1 (en) * | 2018-03-16 | 2019-09-19 | Microsoft Technology Licensing, Llc | Adversarial Teacher-Student Learning for Unsupervised Domain Adaptation |
US20210082398A1 (en) * | 2019-09-13 | 2021-03-18 | Mitsubishi Electric Research Laboratories, Inc. | System and Method for a Dialogue Response Generation System |
-
2019
- 2019-09-27 US US16/586,220 patent/US20200104678A1/en not_active Abandoned
Patent Citations (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20020087221A1 (en) * | 1999-01-12 | 2002-07-04 | Keeler James David | Residual activation neural network |
US20030176650A1 (en) * | 2001-08-09 | 2003-09-18 | Grosse William M. | Nucleic acids, polypeptides, single nucleotide polymorphisms and methods of use thereof |
US20040002930A1 (en) * | 2002-06-26 | 2004-01-01 | Oliver Nuria M. | Maximizing mutual information between observations and hidden states to minimize classification errors |
US20120292481A1 (en) * | 2011-05-20 | 2012-11-22 | Hutchin Richard A | Multi-beam laser beam control and imaging system and method |
US20140287698A1 (en) * | 2011-11-14 | 2014-09-25 | Blackberry Limited | Perturbation-based dynamic measurement of antenna impedance in real-time |
US9824692B1 (en) * | 2016-09-12 | 2017-11-21 | Pindrop Security, Inc. | End-to-end speaker recognition using deep neural network |
US20180218502A1 (en) * | 2017-01-27 | 2018-08-02 | Arterys Inc. | Automated segmentation utilizing fully convolutional networks |
US20190244103A1 (en) * | 2018-02-07 | 2019-08-08 | Royal Bank Of Canada | Robust pruned neural networks via adversarial training |
US20190287515A1 (en) * | 2018-03-16 | 2019-09-19 | Microsoft Technology Licensing, Llc | Adversarial Teacher-Student Learning for Unsupervised Domain Adaptation |
US20210082398A1 (en) * | 2019-09-13 | 2021-03-18 | Mitsubishi Electric Research Laboratories, Inc. | System and Method for a Dialogue Response Generation System |
Non-Patent Citations (9)
Cited By (25)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10922611B2 (en) * | 2017-04-28 | 2021-02-16 | Google Llc | Neural network optimizer search |
US11922314B1 (en) * | 2018-11-30 | 2024-03-05 | Ansys, Inc. | Systems and methods for building dynamic reduced order physical models |
US20200180647A1 (en) * | 2018-12-10 | 2020-06-11 | Perceptive Automata, Inc. | Neural network based modeling and simulation of non-stationary traffic objects for testing and development of autonomous vehicle systems |
US11772663B2 (en) * | 2018-12-10 | 2023-10-03 | Perceptive Automata, Inc. | Neural network based modeling and simulation of non-stationary traffic objects for testing and development of autonomous vehicle systems |
US11667301B2 (en) | 2018-12-10 | 2023-06-06 | Perceptive Automata, Inc. | Symbolic modeling and simulation of non-stationary traffic objects for testing and development of autonomous vehicle systems |
US20200372342A1 (en) * | 2019-05-24 | 2020-11-26 | Comet ML, Inc. | Systems and methods for predictive early stopping in neural network training |
US11650968B2 (en) * | 2019-05-24 | 2023-05-16 | Comet ML, Inc. | Systems and methods for predictive early stopping in neural network training |
US20230080996A1 (en) * | 2019-08-09 | 2023-03-16 | Cfph, Llc | Network optimization and state synchronization |
US11489777B1 (en) * | 2019-08-09 | 2022-11-01 | Cfph, Llc | Network optimization and state synchronization |
US20210208582A1 (en) * | 2020-01-02 | 2021-07-08 | Lg Electronics Inc. | Enhancing performance of local device |
US11567494B2 (en) * | 2020-01-02 | 2023-01-31 | Lg Electronics Inc. | Enhancing performance of local device |
US11881003B2 (en) * | 2020-07-20 | 2024-01-23 | Deep Render Ltd. | Image compression and decoding, video compression and decoding: training methods and training systems |
US20230230288A1 (en) * | 2020-07-20 | 2023-07-20 | Deep Render Ltd | Image compression and decoding, video compression and decoding: training methods and training systems |
US20220108334A1 (en) * | 2020-10-01 | 2022-04-07 | Adobe Inc. | Inferring unobserved event probabilities |
US11907334B2 (en) | 2020-12-08 | 2024-02-20 | International Business Machines Corporation | Neural network negative rule extraction |
CN112613577A (en) * | 2020-12-31 | 2021-04-06 | 上海商汤智能科技有限公司 | Neural network training method and device, computer equipment and storage medium |
CN113110324A (en) * | 2021-04-12 | 2021-07-13 | 江苏丰尚智能科技有限公司 | Training method and device for dryer parameter optimization model and computer equipment |
US20230040533A1 (en) * | 2021-07-28 | 2023-02-09 | Rain Neuromorphics Inc. | Electrical networks using analytic loss gradients for design, analysis and machine learning |
US11922296B2 (en) * | 2021-07-28 | 2024-03-05 | Rain Neuromorphics Inc. | Electrical networks using analytic loss gradients for design, analysis and machine learning |
CN113591781A (en) * | 2021-08-11 | 2021-11-02 | 山东大学 | Image processing method and system based on service robot cloud platform |
CN115049019A (en) * | 2022-07-25 | 2022-09-13 | 湖南工商大学 | Method and device for evaluating arsenic adsorption performance of metal organic framework and related equipment |
US11615316B1 (en) * | 2022-09-19 | 2023-03-28 | Rain Neuromorphics Inc. | Machine learning using gradient estimate determined using improved perturbations |
WO2024063846A1 (en) * | 2022-09-19 | 2024-03-28 | Rain Neuromorphics Inc. | Machine learning using gradient estimate determined using improved perturbations |
CN116679639A (en) * | 2023-05-26 | 2023-09-01 | 广州市博煌节能科技有限公司 | Optimization method and system of metal product production control system |
CN117010554A (en) * | 2023-07-03 | 2023-11-07 | 同济大学 | Dynamic multi-objective optimization method and device applied to e-commerce recommendation system |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US20200104678A1 (en) | Training optimizer neural networks | |
US11934956B2 (en) | Regularizing machine learning models | |
US11669744B2 (en) | Regularized neural network architecture search | |
US10936949B2 (en) | Training machine learning models using task selection policies to increase learning progress | |
US11681924B2 (en) | Training neural networks using a variational information bottleneck | |
US11928601B2 (en) | Neural network compression | |
US20210271970A1 (en) | Neural network optimizer search | |
US20220092416A1 (en) | Neural architecture search through a graph search space | |
US20210049298A1 (en) | Privacy preserving machine learning model training | |
US11922281B2 (en) | Training machine learning models using teacher annealing | |
US20190188566A1 (en) | Reward augmented model training | |
US20200250543A1 (en) | Batch renormalization layers | |
US11347995B2 (en) | Neural architecture search with weight sharing | |
US20210034973A1 (en) | Training neural networks using learned adaptive learning rates | |
US20220405579A1 (en) | Single-stage model training for neural architecture search | |
US20220188636A1 (en) | Meta pseudo-labels | |
US20220398437A1 (en) | Depth-Parallel Training of Neural Networks | |
US20220019856A1 (en) | Predicting neural network performance using neural network gaussian process | |
US20220044109A1 (en) | Quantization-aware training of quantized neural networks | |
US20210383227A1 (en) | Learning embeddings subject to an invariance constraint |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:NIXON, JEREMY VAUGHN;SOHL-DICKSTEIN, JASCHA NARAIN;METZ, LUKE SHEKERJIAN;AND OTHERS;SIGNING DATES FROM 20191022 TO 20191101;REEL/FRAME:050889/0343 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STCB | Information on status: application discontinuation |
Free format text: ABANDONED -- FAILURE TO RESPOND TO AN OFFICE ACTION |