US8983901B1 - System and method for rectangular region covering - Google Patents
System and method for rectangular region covering Download PDFInfo
- Publication number
- US8983901B1 US8983901B1 US13/759,313 US201313759313A US8983901B1 US 8983901 B1 US8983901 B1 US 8983901B1 US 201313759313 A US201313759313 A US 201313759313A US 8983901 B1 US8983901 B1 US 8983901B1
- Authority
- US
- United States
- Prior art keywords
- region
- cells
- spreadsheet
- mutation
- row
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G06F17/30168—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/166—Editing, e.g. inserting or deleting
- G06F40/177—Editing, e.g. inserting or deleting of tables; using ruled lines
- G06F40/18—Editing, e.g. inserting or deleting of tables; using ruled lines of spreadsheets
Definitions
- This disclosure relates generally to techniques for resolving conflicts that arise among edit commands entered by different users in a collaborative spreadsheet environment.
- Conflicting edits of a spreadsheet may be received when the spreadsheet is accessed by multiple collaborators. For example, a first user may select to perform an edit to a first region of cells of the spreadsheet and a second user may perform an edit to a second region of cells of the spreadsheet overlapping the first region. In order for all collaborators to have a common (i.e., consistent) spreadsheet, such conflicts should be resolved.
- Mutations representing spreadsheet edit operations are received at a server from multiple collaborators.
- Operational transforms are used to modify mutations that overlap (“conflict”) in common regions of the spreadsheet. These operational transforms may result in irregular (e.g., non-rectangular) areas of the spreadsheet over which a given type of mutation is to be applied. Accordingly, disclosed herein are techniques for efficiently representing mutations over irregular areas of a spreadsheet.
- a computing system configured to determine mutation regions for a spreadsheet.
- the computing system comprises a network interface configured to receive a first user command comprising a modification to a first region of cells in the spreadsheet and receive a second user command comprising a modification to a second region of cells in the spreadsheet, the second region at least partially overlapping with the first region.
- the computing system also comprises a processor for iteratively assigning mutation regions to the first region of cells in the spreadsheet.
- the processor is configured to select a column from the first region of cells in the spreadsheet, determine a first row in the first region of cells associated with the selected column that is not assigned to a mutation region and that is not included the second region, determine a largest region contained within the first region that does not overlap with the second region for which the cell in the selected column and the first row is in a designated position, and assign the determined largest region as a mutation region for the spreadsheet.
- a first user command is received comprising a modification to a first region of cells in the spreadsheet
- a second user command is received comprising a modification to a second region of cells in the spreadsheet.
- the second region at least partially overlaps with the first region.
- Mutation regions are iteratively assigned to the first region of cells in the spreadsheet by selecting a column from the first region of cells in the spreadsheet, determining a first row in the first region of cells associated with the selected column that is not assigned to a mutation region and that is not included the second region, determining a largest region contained within the first region that does not overlap with the second region for which the cell in the selected column and the first row is in a designated position, and assigning the determined largest region as a mutation region for the spreadsheet.
- FIG. 1 depicts a client-server system, where the server supports a cloud storage system for storing spreadsheets and other files in accordance with an implementation
- FIG. 2 depicts an exemplary client computer in accordance with an implementation
- FIG. 3 depicts an illustrative portion of a spreadsheet that may be stored on a cloud storage system in accordance with an implementation
- FIG. 4 depicts an illustrative global mutation log in accordance with an implementation
- FIG. 5 depicts an illustrative region of a spreadsheet for which several mutations have been received from one or more client computers in accordance with an implementation
- FIG. 6 depicts a global mutation log corresponding to the region of the spreadsheet depicted in FIG. 5 in accordance with the implementation of FIG. 5 ;
- FIG. 7 depicts regions of a spreadsheet related to a rectangular region covering technique in accordance with an implementation
- FIG. 8 depicts an illustrative process for determining rectangular regions in a rectangular region covering technique in accordance with an implementation
- FIGS. 9-15 graphically depict a progression in which rectangular regions are assigned as subranges of T in a rectangular region covering technique in accordance with an implementation.
- FIGS. 16-19 graphically depict corners associated with various region covering techniques in accordance with an implementation.
- a server located in a cloud storage system delivers a spreadsheet to multiple remote client users, who enter edits of the spreadsheet. These edits are represented by mutations that are stored in a pending queue on the client computer and that are sent in batches from the client computer to the server.
- the pending queue includes a sent section for mutations that have been sent to the cloud storage system and an unsent section for mutations that have not been sent to the cloud storage system.
- a global mutation log stored on the server records mutations to the spreadsheet made by users.
- the server applies the mutations stored in the global mutation log to the spreadsheet and sends the spreadsheet, or a portion of the spreadsheet (referred to as a “chunk” of the spreadsheet), to the client computer. Mutations made by collaborators of a given user are also sent to the user's client computer and placed in a collaborator queue.
- FIG. 1 illustrates a client-server system, where the server supports a cloud storage system for storing spreadsheets and other files in accordance with an implementation.
- System 100 includes one or more servers 102 which collectively provide a cloud storage system for storing files such as spreadsheet file 104 .
- System 100 also includes a number of client computers 106 a through 106 d which connect to servers 102 through a remote network, such as the Internet.
- Each one of client computers 106 a through 106 d may be a desktop computer, laptop computer, mobile device, tablet, or any other computing device capable of connecting with servers 102 .
- the remote network connection may be a wired or wireless Internet connection, local area network (LAN), wide area network (WAN), Wi-Fi network, Ethernet, or any other type of known connection.
- LAN local area network
- WAN wide area network
- Wi-Fi network Ethernet
- Ethernet any other type of known connection.
- a server or system as used in this description may be a single computing device or multiple computing devices working collectively and in which the storage of data and the execution of functions are spread out among the various computing devices.
- FIG. 2 depicts an exemplary client computer in accordance with an implementation.
- the client computer 200 includes a central processing unit (CPU) 202 , read only memory (ROM) 204 , random access memory (RAM) 206 , input/output interface 208 , data store 210 , and bus 212 .
- Client computer 200 may have additional components that are not illustrated in FIG. 2 .
- Bus 212 allows the various components of client computer 200 to communicate with each other.
- Input/output interface 208 allows client computer 200 to communicate with other devices, such as one or more servers hosting the cloud storage system.
- Data store 210 may store, among other things, code for a web browser for interacting with a cloud storage system and displaying and editing files stored on the cloud storage system.
- Data store 210 also stores one or more portions of a spreadsheet loaded from the cloud storage system.
- Data store 210 for storing files and programs on client computer 200 may be implemented using non-transitory computer-readable media.
- suitable non-transitory computer-readable media include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and readable, once-writeable, or re-writeable CD-ROM and DVD-ROM disks.
- FIG. 3 depicts an illustrative portion of a spreadsheet that may be stored on a cloud storage system in accordance with an implementation.
- Spreadsheet 300 includes rows 1 through 14 and columns A through E.
- the cloud storage system may represent the entire spreadsheet 300 using one or more chunks, where each chunk represents a range of cells in the spreadsheet.
- a spreadsheet file may include a number of individual sheets, each having its own tab, arranged in a “workbook” structure. Chunks may be created for each sheet within the spreadsheet file.
- FIG. 4 depicts an illustrative global mutation log in accordance with an implementation.
- the global mutation log 400 applies to all chunks of a spreadsheet, so only one log is stored per spreadsheet.
- Global mutation log 400 stores mutations, or edits, that all users with write access to the spreadsheet send to the cloud storage system, in the order in which they are received. These edits may be to set the value of cells, delete cell values, enter formulae into cells, cut, copy or paste values, add or delete rows and columns, or any other operation permissible in an electronic spreadsheet.
- Global mutation log 400 may also store row addition and deletion mutations, such as “Delete Row 6” for mutation I and “Add Row 11” for mutation J. Other mutations not shown in FIG. 4 may also be stored in global mutation log 400 .
- the server executes conflict resolution mechanisms to determine the proper order of mutations. Specifically, operational transforms are used by the server to modify lower-prioritized mutations (e.g., later received mutations) in view of higher-prioritized mutations, and the server applies the (potentially modified) mutations to the spreadsheet in the order specified by the global mutation log.
- lower-prioritized mutations e.g., later received mutations
- the server applies the (potentially modified) mutations to the spreadsheet in the order specified by the global mutation log.
- FIG. 5 depicts an illustrative region of a spreadsheet for which several mutations have been received from one or more client computers in accordance with an implementation.
- each mutation corresponds to a spreadsheet edit operation received at a server from a client computer.
- FIG. 6 depicts a global mutation log corresponding to the region of the spreadsheet depicted in FIG. 5 in accordance with the implementation of FIG. 5 .
- FIG. 6 depicts, in prioritized order, mutation A affecting cells [3:3, 2:3] of spreadsheet 500 , mutation B affecting cells [2:3, 4:4] of the spreadsheet 500 , mutation C affecting cells [3:5, 5:5] of the spreadsheet 500 , and mutation D affecting cells [2:5, 2:5] of the spreadsheet 500 , where the notation [a:b, c:d] indicates a rectangular region between rows a and b and columns c and d (inclusive). Note that the particular data edit operations associated with each of mutation A, mutation B, mutation C, and mutation D are not necessary for the present discussion and are thus omitted from FIG. 6 .
- the server applies each of mutations A, B, and C in the prioritized order to the respective cells of the spreadsheet 500 .
- the cells of the mutation D overlap with the cells of mutations A, B, and C.
- the server decomposes mutation 655 into several smaller mutations, labeled D1 through D6 in FIG. 6 .
- mutation D1 657 applies to cells of mutation D that overlap with cells of mutation A and mutation D1 is obtained by performing an operation transform of the mutation D based on mutation A.
- mutations D2 and D3 are obtained by performing operational transforms of the mutation D as applied to cells that overlap with the mutation area for mutations B and C, respectively.
- performing operational transforms to resolve edit conflicts in the regions of areas of mutations A, B, and C fragments the overall area (i.e., the area [2:5, 2:5]) and leaves a non-rectangular area over which the mutation D is to be applied.
- the operational transforms performed to obtain mutations D1 through D3 leaves the irregular area that is the union of areas [2:2, 2:3], [2:2, 5:5], and [4:5, 2:4] as the remaining area over which the mutation for D is to be applied.
- the task of covering an irregular region with a minimized number of rectangular regions may be formulated as follows. Given a rectangular range R (i.e., cells [1:6, 1:6] of the spreadsheet 700 ) and a set of non-overlapping rectangular subranges S (i.e., corresponding to areas over which localized operational transforms have been performed), produce a set of non-overlapping rectangular subranges T such that none of the subranges in T overlap subranges in S and the union of the subranges of S and T completely covers the range R.
- R i.e., cells [1:6, 1:6] of the spreadsheet 700
- S i.e., corresponding to areas over which localized operational transforms have been performed
- the range R corresponds to the region of cells over which a lowest priority mutation in a set of mutations is applied and the subranges T correspond to areas overlapping the range R over which higher priority mutations are first applied.
- the range R is necessarily a rectangular region because spreadsheet edit commands are applied to rectangular regions of one or more cells (as specified by a user). Further, the requirement that the range R be completely covered simply reflects a basic requirement that a data edit operation be applied to every cell specified by a user in requesting an edit of a spreadsheet.
- FIG. 8 depicts a process for efficiently covering an irregular region with rectangular subranges T in accordance with an embodiment.
- Process 800 starts at 810 , where a rectangular region R′ is received.
- the received region R′ is depicted by region R′ 900 in FIG. 9 .
- the size of the region R′ is reduced by pruning (i.e., removing) rows that are “identical” to adjacent rows and columns that are “identical” to adjacent columns within the rectangular region R′ to produce a reduced region R (if any such rows or columns exist).
- pruning i.e., removing rows that are “identical” to adjacent rows and columns that are “identical” to adjacent columns within the rectangular region R′ to produce a reduced region R (if any such rows or columns exist).
- pruning i.e., removing rows that are “identical” to adjacent rows and columns that are “identical” to adjacent columns within the rectangular region R′ to produce a reduced region R (if any such rows or columns exist).
- the meaning of the term “identical” is explained next.
- a given column of the region R′ may include a number of cells covered by the rectangular subranges S.
- the first column of the region R′ 900 of FIG. 9 is covered by an element of the rectangular subranges S at row 2, but not at rows 1 and 3 through 6.
- two columns are said to be “identical” if the exact same set of rows in each column are covered by an element of the rectangular subranges S.
- adjacent columns 1 and 2 are identical because each row is covered by the rectangular subranges S at row 2 and not at any other row.
- columns 3 and 4 are identical because each column is uncovered by the rectangular subranges S at every row. Accordingly, because columns 1 and 2 are identical and adjacent, one of these columns is removed from the rectangular region R′ at 810 (the choice of which column to remove is arbitrary). Similarly, because columns 3 and 4 are identical and adjacent, one of these columns is removed from the rectangular region R′ at 810 .
- rows 4 and 5 are the only identical and adjacent rows (rows 1 and 3, while identical, are not adjacent).
- the region R 1010 of FIG. 10 is obtained at 815 after removing all identical rows and columns from the region R′ 900 of FIG. 9 .
- rows and columns “removed” at 815 are not actually discarded from the corresponding spreadsheet. Rather, these rows and columns are “removed” only in the sense of being omitted in most of the calculations and operations performed by the process 800 and solely for determining the rectangular subranges T using a reduced number of computations.
- the rows and columns “removed” at 815 are actually maintained in the spreadsheet and accounted for at 860 , as described below.
- a column index c i and row index r i are set equal to a value of 1.
- the smallest row index value r such that r ⁇ r i , and for which the block of cells located at [r:r, c i: c i ] is not covered by subranges S or any current assigned subrange in T is determined.
- the largest column index value c such that c ⁇ c i , is determined so that the block of cells [r min :r max , c i :c max ] is not covered by subranges S or T.
- This value of c is denoted c max .
- the block of cells [r min :r max , c i :c max ] is added to the subranges T.
- the block of cells [1:1, 1:2] is added to the subranges T at 845 .
- the column index c i value is incremented by 1.
- recording the subranges T includes storing data representing the subranges T (in short- or long-term memory). In certain implementations, recording the subranges T includes providing data representing the subranges T to another process (which is not illustrated in FIG. 8 ). If, on the other hand, the column index c i is not equal to the value c R , then the process 800 returns to 825 .
- any rows or columns otherwise removed at 815 are accounted for.
- the subrange [1:2, 1:2] was assigned to the subranges T during an iteration of 845 .
- a second row of the rectangular region R was the only row or column removed from the from the rectangular region R′ at 810 .
- Accounting for this removed row a subrange of [1:3, 1:2] would be recorded at 860 , rather than the subrange [1:2, 1:2] because the subrange of [1:3, 1:2] reflects the (temporary) removal of the second row simply for computational purposes by the process 800 .
- FIGS. 9-15 graphically depict a progression in which rectangular regions are assigned as subranges of T in a rectangular region covering technique in accordance with an implementation.
- FIGS. 9-15 together illustrate an application of the process 800 to determine subranges T for the region R′ 900 of FIG. 9 .
- cells shaded with diagonal hatching FIGS. 9-15 denote cells covered by the subranges S and fully shaded cells in FIGS. 9-15 denote cells assigned to the subranges T.
- the subranges [1:1,1:4], [3:6,1:4], [2:2,3:6], [4:5,5:6], and [6:6,6:6] are added, in that sequence, to the subranges T.
- any additional adjacent cells directly below the identified cell that are not included in S or T are added to the identified cell.
- the second row includes a cell at [2:2, 1:1] assigned to the subranges S.
- cells to the right of the identified cells are added until a region in S is encountered.
- a region in S is encountered is encountered in the first row and third column.
- the first determined subrange is [1:1, 1:2] when specified in terms of the region R.
- this subrange is fully shaded, denoting that it has been assigned to the subranges T, in FIG. 11 .
- the first recorded subrange of T is [1:1,1:4].
- the lowest numbered cell in the first column of the region R not assigned to S or T is determined. This is the third cell in the first column.
- any additional adjacent cells directly below the identified cell that are not assigned to either the subranges S or T are identified and added to the recorded subrange. In this case, cells at [3:5, 1:1] are added.
- a subregion is created by extending the region [3:5, 1:1] to the right until at least one cell in S is encountered. As depicted by the full shading in FIG. 12 , this results in a second determined subrange of [3:5, 1:2].
- the second recorded subrange of T is [3:6,1:4].
- every cell in the first and second columns of the region R is now assigned to one of the subranges S or T.
- the process next moves to the third column of the region R.
- the cell at [2:2, 3:3] is identified as the lowest numbered cell in the third column of the region R that is not already assigned to one of subranges S or T, and a subregion is created by extending the cell at [2:2, 3:3] to the right until a cell in S is encountered.
- the third recorded subrange for T is [2:2, 2:4]. This subrange is depicted by the shading in FIG. 13 .
- the third recorded subrange of T is [2:2,3:6]. Still in the third column of the region R, and moving to cell [4:4, 3:3], the next subrange added to T is determined to be [4:4, 3:4], as depicted by the shading in FIG. 14 . In terms of the region R′, the fourth recorded subrange of T is [4:5,5:6]. Finally, moving to the fourth column of the region R and repeating the procedure records [5:5, 4:4] as the fifth and final subrange of T, as depicted by the shading in FIG. 15 . In terms of the region R′, this fifth and final recorded subrange of T is [6:6,6:6].
- the process 800 advantageously reduces a number of rectangular subranges in T needed to cover an irregular region.
- This feature of the process 800 is explained next.
- region 1600 of FIG. 16 includes a total of 16 corners, i.e., corners 1621 through 1632 .
- the minimizing a total number of subregions in T is equivalent to minimizing the total number of corners present in all of the subregions of T combined. This is because each subregion of T is a rectangle and so contributes exactly four corners to the total number of corners in T.
- the process 800 reduces a total number of corners present in all of the subranges of T combined.
- a subspace of S located in the interior of R as depicted, in an illustrative implementation, by subspace 1725 , in each of FIGS. 17 , 18 , and 19 .
- the upper right hand corner of the subspace 1725 an analysis similar to the current one follows for any other corner of the subspace 1725 and is thus omitted for brevity.
- FIG. 17 where T includes subspaces 1722 and 1723
- FIG. 18 where T includes subspaces 1846 and 1847
- three subspaces will be added to T, as depicted in FIG. 19 (where T includes subspaces 1951 , 1952 , and 1953 ).
- the solutions of FIGS. 17 and 18 result in one additional corner immediately adjacent to the upper right hand corner of the subspace 1725 (corner 1721 of FIG. 17 and corner 1841 of FIG. 18 ), respectively, while the solution of FIG. 19 results in three additional corners (corners 1942 , 1943 , and 1944 of FIG. 19 ).
- the process 800 produces an assignment of subspaces to T that results in two subspaces being added to T (as depicted in FIGS. 17 and 18 ) rather than three subspaces being added (as depicted in FIG. 19 ).
- the process 800 minimizes a total number of corners present in all subspaces of T immediately adjacent to that corner.
- the process 800 reduces a total number of corners present in the subspaces T, and accordingly, reduces a total number of subspaces in T.
Abstract
Description
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/759,313 US8983901B1 (en) | 2013-02-05 | 2013-02-05 | System and method for rectangular region covering |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/759,313 US8983901B1 (en) | 2013-02-05 | 2013-02-05 | System and method for rectangular region covering |
Publications (1)
Publication Number | Publication Date |
---|---|
US8983901B1 true US8983901B1 (en) | 2015-03-17 |
Family
ID=52632359
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/759,313 Active 2033-10-12 US8983901B1 (en) | 2013-02-05 | 2013-02-05 | System and method for rectangular region covering |
Country Status (1)
Country | Link |
---|---|
US (1) | US8983901B1 (en) |
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20120137204A1 (en) * | 2010-11-29 | 2012-05-31 | Red Hat, Inc. | Automatic spreadsheet validation |
US20150199327A1 (en) * | 2013-02-27 | 2015-07-16 | Google Inc. | Systems and methods for mutations and operational transforms in a collaborative spreadsheet environment |
Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6006239A (en) * | 1996-03-15 | 1999-12-21 | Microsoft Corporation | Method and system for allowing multiple users to simultaneously edit a spreadsheet |
US20030226105A1 (en) * | 2002-05-29 | 2003-12-04 | Mattias Waldau | Method in connection with a spreadsheet program |
US7146561B2 (en) * | 2000-07-13 | 2006-12-05 | International Business Machines Corporation | Method and system in an electronic spreadsheet for comparing series of cells |
US20090112937A1 (en) * | 2007-10-26 | 2009-04-30 | Microsoft Corporation | Spreadsheet collaboration between rich and browser clients |
US20100174678A1 (en) * | 2009-01-07 | 2010-07-08 | Deepak Massand | System and method for comparing digital data in spreadsheets or database tables |
-
2013
- 2013-02-05 US US13/759,313 patent/US8983901B1/en active Active
Patent Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6006239A (en) * | 1996-03-15 | 1999-12-21 | Microsoft Corporation | Method and system for allowing multiple users to simultaneously edit a spreadsheet |
US7146561B2 (en) * | 2000-07-13 | 2006-12-05 | International Business Machines Corporation | Method and system in an electronic spreadsheet for comparing series of cells |
US20030226105A1 (en) * | 2002-05-29 | 2003-12-04 | Mattias Waldau | Method in connection with a spreadsheet program |
US20090112937A1 (en) * | 2007-10-26 | 2009-04-30 | Microsoft Corporation | Spreadsheet collaboration between rich and browser clients |
US20100174678A1 (en) * | 2009-01-07 | 2010-07-08 | Deepak Massand | System and method for comparing digital data in spreadsheets or database tables |
Cited By (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20120137204A1 (en) * | 2010-11-29 | 2012-05-31 | Red Hat, Inc. | Automatic spreadsheet validation |
US9298687B2 (en) * | 2010-11-29 | 2016-03-29 | Red Hat, Inc. | Automatic spreadsheet formula output validation |
US20150199327A1 (en) * | 2013-02-27 | 2015-07-16 | Google Inc. | Systems and methods for mutations and operational transforms in a collaborative spreadsheet environment |
US9460073B2 (en) | 2013-02-27 | 2016-10-04 | Google Inc. | Systems and methods for mutations and operational transforms in a collaborative spreadsheet environment |
US9489367B2 (en) * | 2013-02-27 | 2016-11-08 | Google Inc. | Systems and methods for mutations and operational transforms in a collaborative spreadsheet environment |
US9720897B2 (en) * | 2013-02-27 | 2017-08-01 | Google Inc. | Systems and methods for mutations and operational transforms in a collaborative spreadsheet environment |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9460073B2 (en) | Systems and methods for mutations and operational transforms in a collaborative spreadsheet environment | |
WO2019128475A1 (en) | Method and device for training data, storage medium, and electronic device | |
US9098525B1 (en) | Concurrent access to data on shared storage through multiple access points | |
CN110209650A (en) | The regular moving method of data, device, computer equipment and storage medium | |
US9817856B2 (en) | Dynamic range partitioning | |
US20170147250A1 (en) | Allocating storage for cloned data | |
US9811529B1 (en) | Automatically redistributing data of multiple file systems in a distributed storage system | |
US9880738B2 (en) | Placement and movement of sub-units of a storage unit in a tiered storage environment | |
US9977804B2 (en) | Index updates using parallel and hybrid execution | |
US9519622B2 (en) | Reformatting multiple paragraphs of text using the formatting of a sample object by creating multiple candidate combinations and selecting a closest match | |
AU2016270327B2 (en) | Methods and systems for selectively retrieving data to provide a limited dataset for incorporation into a pivot table | |
CN105493095A (en) | Adaptive and recursive filtering for sample submission | |
EP3674917A1 (en) | Cloud-based database-less serverless framework using data foundation | |
US10365831B2 (en) | Automated tiering system and automated tiering method | |
US11068176B2 (en) | Method, apparatus and computer program product for managing storage system | |
WO2018006721A1 (en) | Method and apparatus for storing log file | |
US8983901B1 (en) | System and method for rectangular region covering | |
US10114579B2 (en) | Data migration tool with intermediate incremental copies | |
US10936975B2 (en) | System and method for changing resource calendars by editing calendar views | |
JP2022041859A5 (en) | ||
CN107408127B (en) | Dynamic threshold gate for index queue | |
US20150193345A1 (en) | PDSE Dynamic Directory Optimization For Caching | |
US10331652B2 (en) | Method and apparatus for determining hot page in database | |
CN111488194B (en) | Container preservation method, device, computer equipment and storage medium | |
US20230385777A1 (en) | Scheduling calendar events |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: IVIU TECHNOLOGIES, INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:OLSON, LYNDSIE L;ESTES, JOSEPH C;BROWN, JOAQUIN;AND OTHERS;REEL/FRAME:029626/0588Effective date: 20120915 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:SIMON, BENJAMIN WOLFE;REEL/FRAME:029757/0242Effective date: 20130205 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044334/0466Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |