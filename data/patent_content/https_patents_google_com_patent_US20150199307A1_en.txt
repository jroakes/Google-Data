US20150199307A1 - Pluggable Architecture For Optimizing Versioned Rendering of Collaborative Documents - Google Patents
Pluggable Architecture For Optimizing Versioned Rendering of Collaborative Documents Download PDFInfo
- Publication number
- US20150199307A1 US20150199307A1 US13/569,584 US201213569584A US2015199307A1 US 20150199307 A1 US20150199307 A1 US 20150199307A1 US 201213569584 A US201213569584 A US 201213569584A US 2015199307 A1 US2015199307 A1 US 2015199307A1
- Authority
- US
- United States
- Prior art keywords
- edits
- structured data
- document
- data document
- collaborative
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Abandoned
Links
Images
Classifications
-
- G06F17/2235—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q10/00—Administration; Management
- G06Q10/10—Office automation; Time management
- G06Q10/101—Collaborative creation, e.g. joint development of products or services
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/954—Navigation, e.g. using categorised browsing
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/955—Retrieval from the web using information identifiers, e.g. uniform resource locators [URL]
- G06F16/9566—URL specific, e.g. using aliases, detecting broken or misspelled links
-
- G06F17/2247—
-
- G06F17/24—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/12—Use of codes for handling textual entities
- G06F40/134—Hyperlinking
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/12—Use of codes for handling textual entities
- G06F40/14—Tree-structured documents
- G06F40/143—Markup, e.g. Standard Generalized Markup Language [SGML] or Document Type Definition [DTD]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/166—Editing, e.g. inserting or deleting
Definitions
- Web pages or other documents may be created by users on client devices to be accessible to other users over a network such as the Web.
- Web pages generally contain structured data documents such as HyperText Markup Language (HTML) documents, eXtensible Markup Language (XML) documents, JavaScript scripting language, etc. Creating and editing these structured data documents may require specialized knowledge of the programming or scripting language.
- HTML HyperText Markup Language
- XML eXtensible Markup Language
- JavaScript scripting language eXtensible Markup Language
- a flattening utility or flattener converts the set of edits into a structured data document that is customized for rendering and display on a particular client device, online service, third-party web site, or other location.
- the structured data output produced by each flattening utility can be a HyperText Markup Language (HTML) document for a web site, or other structured data documents.
- HTML HyperText Markup Language
- a network system enables collaborative and scalable editing and viewing of online content.
- a first data store receives and stores collaborative edits to user-created online content.
- a second data store receives and stores structured data documents created from the collaborative edits to the user-created online content.
- a browser, browser extension, or other application on a client device renders and displays the structured data documents retrieved from the second data store when a user sends a viewing request to a rendering server.
- An editing server receives and processes the collaborative edits to the user-created online content using operational transformation techniques and sends the processed collaborative edits to the first data store.
- An editing request router directs the collaborative edits from multiple collaborating editors to an appropriate editing server.
- a flattening utility, or flattener retrieves a set of collaborative edits to user-created online content from the first data store, converts the set of collaborative edits into a structured data document, and stores the structured data document in the second data store.
- the rendering server receives a plurality of viewing requests from viewers and retrieves an appropriate structured data document from the second data store.
- a client viewing device renders and displays the structured data document.
- Implementations may include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices.
- FIG. 1 is a schematic diagram of a system in accordance with one or more implementations of the disclosure.
- FIG. 2 is a schematic diagram illustrating features in accordance with an implementation of the disclosure.
- FIG. 3 is a schematic diagram illustrating features in accordance with another implementation of the disclosure.
- FIG. 4 is a flow chart illustrating techniques employed in accordance with one or more implementations of the disclosure.
- FIG. 5 is a schematic diagram of a computer system employed in accordance with one or more implementations of the disclosure.
- HTML HyperText Markup Language
- XML eXtensible Markup Language
- JavaScript scripting language etc.
- Collaborative editing of a document over a network can involve multiple users with editing capabilities and the proper permissions (hereinafter referred to as “editors”) working from multiple client devices that are communicatively coupled over a network, such as the Internet, to one or more editing servers.
- the editing can include multiple requests for changes or mutations to a document or a document object model (DOM)—a cross-platform and language-independent convention for representing and interacting with objects in HyperText Markup Language (HTML), eXtensible HyperText Markup Language (XHTML), and Extensible Markup Language (XML).
- HTML HyperText Markup Language
- XHTML eXtensible HyperText Markup Language
- XML Extensible Markup Language
- a first data store communicatively coupled to the editing server can store these collaborative changes, or mutations, as a set of edits to a particular online document.
- the first data store may store all of the mutations or changes made to the document by all collaborating editors in sequence.
- a mutation log may include a record of changes to a document that include adding a particular character at a particular position in the document, removing a character, changing the style of all or a portion of the document, bolding some text, changing the font of some text, adding or removing a hypertext link (i.e., hyperlink) pointing to other web pages, adding or removing gadgets, images, objects, etc.
- operational transformation coordinates concurrent changes made to a document by different collaborating editors, resolves any conflicts that may occur, and merges the changes into a set of approved edits.
- change requests come in from different editors working collaboratively on the same document
- operational transformation keeps track of the substance and timing of the separate operations that are being performed on the document.
- an editing change request was fulfilled to delete a character from a certain position in a group of characters, and then subsequently another editing change request attempted to move that previously deleted character from that certain position to another position
- operational transformation techniques would prevent such an edit since the character had already been deleted from that particular position.
- Another example could occur when two simultaneous inserts are made by different editors at different indexes in a document.
- Operational transformation could cause one of the indexes to be automatically shifted to accommodate the other insert.
- Storing a record of the mutations enables functionality such as restoring a document or document object model to any previous state or condition it was in before certain changes were made by undoing certain mutations.
- Techniques that include storing all of the mutations made by multiple collaborating editors as a bundle of JavaScript code can slow down the editing process. Rather than sending a finalized, structured text document, such as an HTML document for a web page, to the client, the client may render the page using the bundle of code representing the complete record of mutations.
- a mutation log storing all of the editorial changes made by the multiple editors may also include many old and currently irrelevant actions, such as when a character was initially added to the document, and then later removed.
- the data center may include a plurality of servers capable of receiving such requests.
- Each of the multiple servers can be communicatively coupled to a data store that includes the web site information, including data for web pages, e.g., HTML (HyperText Mark-up Language) documents, XML (eXtensible Mark-up Language) documents, associated JavaScript plug-ins, JavaScript Object Notation (JSON), etc., and a mutation log of the substance and timing of all the collaborative editorial changes made to the documents.
- HTML HyperText Mark-up Language
- XML eXtensible Mark-up Language
- JSON JavaScript Object Notation
- the speed of the results can be scalable, e.g., one thousand requests could be routed to one thousand different machines at the same time, each of which could access the same data store and return the same results simultaneously.
- a potential problem with routing multiple incoming requests to multiple machines is that this technique does not lend itself to collaboration between multiple editors working simultaneously on a single document.
- techniques are provided for facilitating a collaborative experience for users creating or editing documents such as structured data documents, e.g., HTML documents for web pages, while maintaining the scalability of the experience and allowing many users to provide input requests and view the edited document.
- the techniques disclosed also include providing for the automatic preprocessing and configuration of a structured data document for rendering in different ways, on different online services, and/or on different client devices having different display capabilities or attributes.
- editors of documents and viewers of those documents can be communicatively coupled to different front end servers on a network system over different communication paths.
- the editor is shown communicating through a first path with the network system front end computing device over a communication network such as the Internet.
- a uniform resource locator (URL) for incoming editing requests can be provided and made available to users with editing permissions or proper access control attributes, and if desired, in accordance with authentication protocols.
- a separate URL for incoming viewing requests can also be provided to direct viewing requests along a separate communication path and to different rendering servers from the editing servers.
- the network system front end computing device may direct a request from an editor through a request router to a particular editing server selected from a plurality of editing servers on the network system.
- the request router directs an editing request for a particular document to the editing server that is handling the creation and/or editing of the particular document the editor is working on.
- Each editing server is connected to a corresponding data store that is not shared with other editing servers.
- One or more editors make collaborative changes to a particular document having a document identification (ID), and each of those collaborative changes, or mutations, are stored in the data store associated with the particular editing server on which the document is being handled.
- ID can be hashed so that each document ID corresponds to a number.
- the documents that are being edited by one or more editors can be distributed across however many servers or computing machines there are designated for the editing functions on the network system. As the number of documents increases, more editing servers can be added in order to handle the potential number of editing requests that come in for each document.
- the network system viewing front end directs requests from viewers to the appropriate renderer for the particular client device the viewer is using.
- a flattener can gather together all of the up-to-date mutations or changes corresponding to all of the edits that have been made on the document, and then convert all of those mutations into a structured text document such as an HTML document for presentation on a web page.
- a flattener can designate a module, utility, or mechanism for taking the stack of mutations and converting that stack into a structured data document such as an HTML document for presentation on a web page.
- a plurality of flatteners can be provided, each designed to flatten the mutations or edits appropriately for a particular type of client device or online service on which the document will be displayed.
- the arrangement of objects and features contained within a document such as headers, sidebars, images, etc., may be different for rendering and displaying on a smartphone, than on a tablet, a laptop, or a PC.
- Each of the flatteners can include pluggable architecture, such as software plug-ins or extensions, which allow for duplication of much of the code for the different flatteners, with the pluggable architecture being changeable to adapt the flattener for functionality that creates output for each of the different types of client devices.
- one or more flatteners can be provided to incorporate specific formatting, styles, hyperlinks, feature buttons, gadgets, or other attributes specific to the particular online service where the collaboratively edited, structured data document will be included.
- multiple flatteners retrieve a set of edits from a data store and convert the set of edits into different versions of a structured data document for display on different client devices or online services.
- Editors only have to provide one set of edits for one version of a document, and the multiple flatteners automatically convert that one version into the different formats, etc. that may be required for display on different client devices.
- the set of edits for the version that is to be published is stored in one location in a data store designated for receiving edits from an associated editing server.
- the various flatteners communicatively coupled to that data store can automatically retrieve the same set of edits (or mutation log) for a particular document, and automatically convert that set of edits into a plurality of appropriate final structured data documents for display on different client devices or online services.
- the various flatteners can retrieve that set of edits from the data store communicatively coupled to the editing server.
- Each flattener converts the set of edits into a customized, structured data document appropriate for a particular client device or online service, and sends that structured data document to a data store that is communicatively coupled to the rendering servers.
- structured data documents appropriate for different client devices and/or online services are prepared and stored ahead of when a client sends a viewing request to the rendering servers. This makes it possible to quickly perform a search for a desired document, and to quickly retrieve the desired document on a particular client device.
- the separation of communication paths and servers for editors and viewers also allows for rapid and responsive collaboration between the editors and scalability to handle large numbers of viewers at the same time.
- the various flatteners may also include pluggable architecture that automatically incorporates different page styles, gadgets, etc. to a document depending on the particular service or web site where the document will be presented and made available for rendering and display on a client device.
- pluggable architecture that automatically incorporates different page styles, gadgets, etc. to a document depending on the particular service or web site where the document will be presented and made available for rendering and display on a client device.
- one flattener may provide a web page with a visual style that includes a white background with black lettering, while a different flattener may provide the same web page with a style that includes a black background with green lettering.
- Another flattener may automatically include certain gadgets, hyperlinks, metatags, etc. appropriate for the particular online service where the document will be presented.
- one or more flatteners can be provided, where each flattener is developed for different services or web sites, and multiple flatteners working from the same set of collaborative edits stored in a data store automatically convert the edits through operational transformation into structured data documents suitable for rendering and displaying on different client devices or online services.
- a flattener can be configured to retrieve a set of edits provided by various editors and including JavaScript or other computer programming code developed by the editors.
- the flattener can convert the provided code, or sandbox the code when desirable, in order to isolate any potentially harmful code from the set of edits.
- This feature provided by the flattener can automatically process any sets of edits stored in the data store to prevent the propagation of any harmful code, cookies, or other undesirable attributes that may have been included by an editor before the sets of edits are converted into a structured data document and released to the public for rendering and display on client devices.
- Each flattener produces a structured data document from a set of edits, with the document configured specifically for a particular client device, online service, third-party web site, etc. Each specifically configured and customized structured data document can then be stored in a data store, ready for rendering and displaying by a client device.
- a viewer desiring to display a collaboratively edited and configured structured data document on their client device sends a viewing request to a viewing front end URL that is separate from the editing front end URL, and communicatively coupled to one or more rendering servers operatively configured for rendering the document for the particular browser the viewer is using, and display by the user interface (UI) of the client device.
- UI user interface
- Providing a separate communication path and separate servers for incoming editing requests and for viewing requests facilitates collaborative editing of an online document, while preserving scalability of the viewing process.
- the number of collaborating editors will be relatively small and easily handled by a designated editing server containing the document that is being edited.
- a large number of viewing requests can be accommodated by directing them along a separate communication path to a separate rendering server.
- a structured data document created and edited for display on various client devices, online services, third-party web sites, etc. may also include one or more hypertext links (hyperlinks), which connect to other sites or web pages from within the document.
- the online system can store page identifications (IDs) for the web pages these hyperlinks connect to, rather than actually storing the hyperlinks themselves.
- IDs page identifications
- One of the functions that can be performed by the flatteners is to convert each hyperlink in a document to the actual page ID pointed to by the hyperlink.
- An advantage to storing the page IDs rather than the actual hyperlinks is that when a page is moved from one location to another within a web site created and edited by one or more collaborating editors, all of the hyperlinks are automatically updated.
- a flattener performs functionality such as customized configuring of a structured data document for rendering on a particular client device at the page level rather than at the level of the entire web site on which that page will appear. Therefore if a user desires to move a page from one location to another on a web site, an update of all of the hyperlinks provided on a page using the flatteners to achieve this goal would require rerunning the flattener on every page for that site.
- An alternative to updating all of the hyperlinks provided on a page using a flattener is to provide another pluggable piece of architecture, such as a link updater, into the rendering servers, or communicatively coupled with the rendering servers.
- the link updater, or other pluggable and customized piece of architecture provided at the rendering server can perform last minute updates to documents after they are retrieved from the data store and before they are rendered and displayed on a client device.
- the link updater would provide desired updates to the collaboratively edited structured data document retrieved from a data store at the point when a viewer sends a viewing request to the rendering server.
- the link updater can be operatively configured to achieve the goal of updating all of the hyperlinks that may have been provided on a page that is being moved to another location on a web site.
- the link updater can achieve this goal by first going through the page that is being moved, identifying all of the hyperlinks on that page that point to a particular page on the web site, and resolving those hyperlinks to the corresponding page ID for the page that the hyperlinks point to.
- the provision of a link updater at the rendering server enables last minute updates and changes to a structured data document that has been prepared and stored for a particular client device, online service, or other web site.
- pluggable architecture such as the above-described link updater
- the pluggable architecture can be provided at the rendering server to accommodate any last minute changes to structured data documents before they are rendered and displayed on a client device.
- a mechanism may automatically insert desired content such as metatags, or other desired attributes, to every page to be displayed on a particular web site.
- the flatteners discussed above can provide several different outputs for different devices or clients, different pluggable architecture at the rendering servers, or rendering plug-ins, may be used for different outputs.
- a mechanism can be provided for specific flattener implementations to request specific rendering plug-ins to be run at rendering time. This could be achieved by encoding a list of desired plug-ins directly into the output from a flattener.
- the rendering plug-ins could be programmed to recognize the specific outputs that they apply to.
- FIGS. 1 , 2 , and 3 illustrate an online system 100 providing two separate communication paths for inputs received from users having editing permission (i.e., editors) 110 , and viewers 140 desiring to only view the collaboratively edited documents produced by the editors 110 .
- editing permission i.e., editors
- viewers 140 desiring to only view the collaboratively edited documents produced by the editors 110 .
- the editors 110 send editing requests over a communication network 112 (illustrated as, but not limited to, the Internet) to an editing front end uniform resource locator (URL) 114 .
- Viewers 140 send their viewing requests over a communication network 112 to a viewing front end URL 144 .
- a router 116 distributes and directs the editing requests from editors 110 to different editing servers 118 , 120 , and 122 , depending on which editing server is responsible for the particular document editors are creating or editing.
- each editing server can process the set of editing requests coming in for a particular document using operational transformation techniques to resolve any conflicts between the editing requests that are being collaboratively and concurrently submitted by the editors.
- Editing server 118 processes sets of collaborative edits or mutations for one or more documents and then stores those processed edits in a data store 124 . Similarly, edits that have been routed to editing server 120 by the router 116 are processed and stored in data store 126 , and edits routed to editing server 122 are processed and stored in data store 128 .
- Requests from viewers 140 coming into viewing front end URL 144 can be divided amongst a plurality of rendering servers 152 , 154 , 156 , and 158 , all of which can be communicatively coupled to a data store 160 .
- the incoming viewing requests can identify the particular type of client device, browser, online service, third-party web site, etc. making the viewing request.
- the rendering servers use this information to retrieve the appropriately formatted and customized structured data document from the data store 160 .
- FIG. 1 illustrates flatteners 130 , 132 , 134 , and 136 communicatively coupled to receive data from data store 128 and send data to data store 160 .
- Each flattener can be provided as substitutable or pluggable modules or architecture designed to retrieve a set of edits from the data store 128 and convert the set of edits into a structured data document ready for rendering and display by a browser on a particular client device, online service, or third-party web site.
- These finalized, customized, structured data documents are then stored in data store 160 , and are available to the rendering servers 152 , 154 , 156 , and 158 .
- an additional module or pluggable piece of architecture can be provided as, e.g., link updater 146 , communicatively coupled to one, several, or all of the rendering servers.
- This feature allows for last minute updates to the structured data documents retrieved from data store 160 by the rendering servers.
- a last minute change of the location of a page on a web site can be handled by the link updater after a flattening utility has already been run to create customized structured data documents for various client devices, online services, third-party web sites, etc.
- the link updater can handle the updates only as needed when a viewer sends in a viewing request to the rendering servers.
- FIG. 2 illustrates an alternative implementation that differs from the described implementation of FIG. 1 above only in the inclusion of an accumulator 125 coupled to the data stores 124 , 126 , and 128 .
- the flatteners 130 , 132 , 134 , and 136 are communicatively coupled to receive data from the accumulator 125 and send data to data store 160 .
- FIG. 3 illustrates yet another alternative implementation that differs from the described implementation of FIG. 1 above only in the coupling of the flatteners to data store 126 .
- Each of the implementations illustrated in FIGS. 1 , 2 , and 3 provide for the flatteners to receive sets of collaborative edits from one or more data stores connected to specific editing servers. All editors working collaboratively on a particular document send their requested edits to the editing server that is handling that document, and the set of edits made to that document are stored on the particular data store connected to that editing server. This allows for each of the editors to immediately see the changes being made by other collaborating editors on a particular document.
- the flatteners when one or more editors decides that a document is ready for publishing and releasing to the public, the flatteners then retrieve the sets of edits from the data stores 118 , 120 , and/or 122 and convert these sets of edits into customized, structured data documents, which are then stored in data store 160 .
- FIG. 4 illustrates the techniques employed in one or more implementations of this disclosure.
- a set of collaborative edits to an online document are received at a first editing URL.
- the edits are routed to an appropriate editing server designated for handling the document that is being collaboratively edited.
- an editing server processes the edits received from collaborating editors using operational transformation techniques to resolve any conflicts and merge the proposed edits into a set of edits to a document.
- the set of processed edits to a document are stored in a data store connected to the editing server that processed the collaborative edits.
- a set of edits retrieved from a data store are converted into a structured data document that is customized and configured for a particular client device, online service, or third-party web site.
- flatteners 130 , 132 , 134 , and 136 retrieve the sets of edits from data store 128 , and process the sets of edits to convert them into structured data documents.
- the various structured data documents created at 410 are then stored in a data store at 412 .
- the data store for storing the structured data documents produced by the flatteners is data store 160 .
- requests to view a structured data document are received from client devices at a viewing URL.
- the structured data documents are rendered and displayed on client devices.
- a viewer 140 has sent a viewing request to the viewing front end URL 144 .
- Rendering servers 152 , 154 , 156 , and 158 retrieve the appropriate structured data documents for the requesting client device from data store 160 .
- Implementations of the present disclosure can be carried out on a machine, a system or apparatus as part of or in relation to the machine, or a computer program product embodied in a computer readable medium executing on one or more of the machines.
- the one or more processors may be part of a server, client, network infrastructure, mobile computing platform, stationary computing platform, or other computing platform. Therefore, one or more of the above-described utilities, modules, or other functionalities may be embodied on a third-party server, one or more servers of the online system 100 , or some combination thereof.
- a processor may be any kind of computational or processing device capable of executing program instructions, codes, binary instructions and the like.
- the processor may include memory that stores methods, codes, instructions and programs as described herein and elsewhere.
- the processor may access a storage medium through an interface that may store methods, codes, and instructions as described herein and elsewhere.
- the storage medium associated with the processor for storing methods, programs, codes, program instructions or other type of instructions capable of being executed by the computing or processing device may include but may not be limited to one or more of a CD-ROM, DVD, memory, hard disk, flash drive, RAM, ROM, cache and the like.
- FIG. 5 is a block diagram illustrating an exemplary computer system 500 with which an online collaborative editing and rendering system 100 of FIG. 1 can be implemented.
- the computer system 500 may be implemented using hardware or a combination of software and hardware, either in a dedicated server, or integrated into another entity, or distributed across multiple entities.
- Computer system 500 includes a bus 508 or other communication mechanism for communicating information, and a processor 502 coupled with bus 508 for processing information.
- the computer system 500 may be implemented with one or more processors 502 .
- These processors may be part of any of various components shown in FIGS. 1 , 2 , and 3 , such as the editing front end 114 , viewing front end 144 , router 116 , editing servers 118 , 120 , and 122 , rendering servers 152 , 154 , 156 , and 158 , and flatteners 130 , 132 , 134 , and 136 .
- Computer system 500 can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them stored in an included memory 504 , such as a Random Access Memory (RAM), a flash memory, a Read Only Memory (ROM), a Programmable Read-Only Memory (PROM), an Erasable PROM (EPROM), registers, a hard disk, a removable disk, a CD-ROM, a DVD, or any other suitable storage device, coupled to bus 508 for storing information and instructions to be executed by processor 502 .
- the processor 502 and the memory 504 can be supplemented by, or incorporated in, special purpose logic circuitry.
- the methods and systems described herein may be deployed in part or in whole through a machine that executes computer software on a server, client, firewall, gateway, hub, router, or other such computer and/or networking hardware.
- the software program may be associated with a server that may include a file server, print server, domain server, internet server, intranet server and other variants such as secondary server, host server, distributed server and the like.
- the server may include one or more of memories, processors, computer readable media, storage media, ports (physical and virtual), communication devices, and interfaces capable of accessing other servers, clients, machines, and devices through a wired or a wireless medium, and the like.
- the methods, programs or codes as described herein and elsewhere may be executed by the server.
- other devices required for execution of methods as described in this application may be considered as a part of the infrastructure associated with the server.
- the server may provide an interface to other devices including, without limitation, clients, other servers, printers, database servers, print servers, file servers, communication servers, distributed servers and the like. Additionally, this coupling and/or connection may facilitate remote execution of programs across the network. The networking of some or all of these devices may facilitate parallel processing of a program or method at one or more location without deviating from the scope of the disclosed subject matter.
- any of the devices attached to the server through an interface may include at least one storage medium capable of storing methods, programs, code and/or instructions.
- a central repository may provide program instructions to be executed on different devices.
- the remote repository may act as a storage medium for program code, instructions, and programs.
- a software program may be associated with a client that may include a file client, print client, domain client, internet client, intranet client and other variants such as secondary client, host client, distributed client and the like.
- the client may include one or more of memories, processors, computer readable media, storage media, ports (physical and virtual), communication devices, and interfaces capable of accessing other clients, servers, machines, and devices through a wired or a wireless medium, and the like.
- the methods, programs or codes as described herein and elsewhere may be executed by the client.
- other devices required for execution of methods as described in this application may be considered as a part of the infrastructure associated with the client.
- the client may provide an interface to other devices including, without limitation, servers, other clients, printers, database servers, print servers, file servers, communication servers, distributed servers and the like. Additionally, this coupling and/or connection may facilitate remote execution of the program across the network. The networking of some or all of these devices may facilitate parallel processing of a program or method at one or more location without deviating from the scope of the disclosed subject matter.
- any of the devices attached to the client through an interface may include at least one storage medium capable of storing methods, programs, applications, code and/or instructions.
- a central repository may provide program instructions to be executed on different devices.
- the remote repository may act as a storage medium for program code, instructions, and programs.
- the methods and systems described herein may be deployed in part or in whole through network infrastructures.
- the network infrastructure may include elements such as computing devices, servers, routers, hubs, firewalls, clients, personal computers, communication devices, routing devices and other active and passive devices, modules and/or components as known in the art.
- the computing and/or non-computing device(s) associated with the network infrastructure may include, apart from other components, a storage medium such as flash memory, buffer, stack, RAM, ROM and the like.
- the processes, methods, program codes, instructions described herein and elsewhere may be executed by one or more of the network infrastructural elements.
- the methods, program codes, and instructions described herein and elsewhere may be implemented on a cellular network having multiple cells.
- the cellular network may either be frequency division multiple access (FDMA) network or code division multiple access (CDMA) network.
- FDMA frequency division multiple access
- CDMA code division multiple access
- the cellular network may include mobile devices, cell sites, base stations, repeaters, antennas, towers, and the like.
- the cell network may be a GSM, GPRS, 3G, 4G, EVDO, mesh, or other networks types.
- the mobile devices may include navigation devices, cell phones, mobile phones, mobile personal digital assistants, laptops, palmtops, netbooks, pagers, electronic books readers, music players and the like. These devices may include, apart from other components, a storage medium such as a flash memory, buffer, RAM, ROM and one or more computing devices.
- the computing devices associated with mobile devices may be enabled to execute program codes, methods, and instructions stored thereon. Alternatively, the mobile devices may be configured to execute instructions in collaboration with other devices.
- the mobile devices may communicate with base stations interfaced with servers and configured to execute program codes.
- the mobile devices may communicate on a peer to peer network, mesh network, or other communications network.
- the program code may be stored on the storage medium associated with the server and executed by a computing device embedded within the server.
- the base station may include a computing device and a storage medium.
- the storage device may store program codes and instructions executed by the computing devices associated with the base station.
- the computer software, program codes, and/or instructions may be stored and/or accessed on machine readable media that may include: computer components, devices, and recording media that retain digital data used for computing for some interval of time; semiconductor storage known as random access memory (RAM); mass storage typically for more permanent storage, such as optical discs, forms of magnetic storage like hard disks, tapes, drums, cards and other types; processor registers, cache memory, volatile memory, non-volatile memory; optical storage such as CD, DVD; removable media such as flash memory (e.g.
- RAM random access memory
- mass storage typically for more permanent storage, such as optical discs, forms of magnetic storage like hard disks, tapes, drums, cards and other types
- processor registers cache memory, volatile memory, non-volatile memory
- optical storage such as CD, DVD
- removable media such as flash memory (e.g.
- USB sticks or keys floppy disks, magnetic tape, paper tape, punch cards, standalone RAM disks, Zip drives, removable mass storage, off-line, and the like; other computer memory such as dynamic memory, static memory, read/write storage, mutable storage, read only, random access, sequential access, location addressable, file addressable, content addressable, network attached storage, storage area network, bar codes, magnetic ink, and the like.
- the methods and systems described herein may transform physical and/or or intangible items from one state to another.
- the methods and systems described herein may also transform data representing physical and/or intangible items from one state to another.
- machines on which the elements described herein may be implemented may include, but may not be limited to, personal digital assistants, laptops, personal computers, mobile phones, other handheld computing devices, medical equipment, wired or wireless communication devices, transducers, chips, calculators, satellites, tablet PCs, electronic books, gadgets, electronic devices, devices having artificial intelligence, computing devices, networking equipment, servers, routers and the like.
- the elements depicted in the flow chart and block diagrams or any other logical component may be implemented on a machine capable of executing program instructions.
- the methods and/or processes described above, and steps thereof, may be realized in hardware, software or any combination of hardware and software suitable for a particular application.
- the hardware may include a general purpose computer and/or dedicated computing device or specific computing device or particular aspect or component of a specific computing device.
- the processes may be realized in one or more microprocessors, microcontrollers, embedded microcontrollers, programmable digital signal processors or other programmable device, along with internal and/or external memory.
- the processes may also, or instead, be embodied in an application specific integrated circuit, a programmable gate array, programmable array logic, or any other device or combination of devices that may be configured to process electronic signals. It will further be appreciated that one or more of the processes may be realized as a computer executable code capable of being executed on a machine readable medium.
- the instructions may be stored in the memory 504 and implemented in one or more computer program products, i.e., one or more modules of computer program instructions encoded on a computer readable medium for execution by, or to control the operation of, the computer system 500 , and according to any method well known to those of skill in the art, including, but not limited to, computer languages such as data-oriented languages (e.g., SQL, dBase), system languages (e.g., C, Objective-C, C++, Assembly), architectural languages (e.g., Java, .NET), and application languages (e.g., PHP, Ruby, Perl, Python).
- data-oriented languages e.g., SQL, dBase
- system languages e.g., C, Objective-C, C++, Assembly
- architectural languages e.g., Java, .NET
- application languages e.g., PHP, Ruby, Perl, Python.
- a computer program as discussed herein does not necessarily correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, subprograms, or portions of code).
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- the processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output.
- Computer system 500 further includes a data storage device 506 such as a magnetic disk or optical disk, coupled to bus 508 for storing information and instructions.
- the data stores 124 , 126 , and 128 , and data store 160 , shown in FIGS. 1 , 2 , and 3 are all examples of data storage devices used in various implementations of this disclosure.
- Computer system 500 may be coupled via input/output module 510 to various devices.
- the input/output module 510 can be any input/output module.
- Exemplary input/output modules 510 include data ports such as USB ports.
- the input/output module 510 is configured to connect to a communications module 512 .
- Exemplary communications modules 512 include networking interface cards, such as Ethernet cards and modems.
- the input/output module 510 is configured to connect to a plurality of devices, such as an input device 514 and/or an output device 516 .
- exemplary input devices 514 include a keyboard and a pointing device, e.g., a mouse or a trackball, by which a user can provide input to the computer system 500 .
- Other kinds of input devices 514 can be used to provide for interaction with a user as well, such as a tactile input device, visual input device, audio input device, or brain-computer interface device.
- feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, tactile, or brain wave input.
- exemplary output devices 516 include display devices, such as a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user.
- the online collaborative editing system 100 can be implemented using a computer system 500 in response to processor 502 executing one or more sequences of one or more instructions contained in memory 504 .
- Such instructions may be read into memory 504 from another machine-readable medium, such as data storage device 506 .
- Execution of the sequences of instructions contained in main memory 504 causes processor 502 to perform the process steps described herein.
- processors in a multi-processing arrangement may also be employed to execute the sequences of instructions contained in memory 504 .
- hard-wired circuitry may be used in place of or in combination with software instructions to implement various aspects of the present disclosure.
- aspects of the present disclosure are not limited to any specific combination of hardware circuitry and software.
- a computing system that includes a back end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back end, middleware, or front end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network.
- the communication network can include, for example, any one or more of a personal area network (PAN), a local area network (LAN), a campus area network (CAN), a metropolitan area network (MAN), a wide area network (WAN), a broadband network (BBN), the Internet, and the like.
- PAN personal area network
- LAN local area network
- CAN campus area network
- MAN metropolitan area network
- WAN wide area network
- BBN broadband network
- the Internet and the like.
- the communication networks can include, but are not limited to, for example, any one or more of the following network topologies, including a bus network, a star network, a ring network, a mesh network, a star-bus network, tree or hierarchical network, or the like.
- the communications modules can be, for example, modems or Ethernet cards.
- computing system 500 can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- Computer system 500 can be, for example, and without limitation, a desktop computer, laptop computer, or tablet computer.
- Computer system 500 can also be embedded in another device, for example, and without limitation, a mobile telephone, a personal digital assistant (PDA), a mobile audio player, a Global Positioning System (GPS) receiver, a video game console, and/or a television set top box.
- PDA personal digital assistant
- GPS Global Positioning System
- machine-readable storage medium or “computer readable medium” as used herein refers to any medium or media that participates in providing instructions to processor 502 for execution. Such a medium may take many forms, including, but not limited to, non-volatile media, volatile media, and transmission media.
- Non-volatile media include, for example, optical or magnetic disks, such as data storage device 506 .
- Volatile media include dynamic memory, such as memory 504 .
- Transmission media include coaxial cables, copper wire, and fiber optics, including the wires that comprise bus 508 .
- machine-readable media include, for example, floppy disk, a flexible disk, hard disk, magnetic tape, any other magnetic medium, a CD-ROM, DVD, any other optical medium, punch cards, paper tape, any other physical medium with patterns of holes, a RAM, a PROM, an EPROM, a FLASH EPROM, any other memory chip or cartridge, or any other medium from which a computer can read.
- the machine-readable storage medium can be a machine-readable storage device, a machine-readable storage substrate, a memory device, a composition of matter effecting a machine-readable propagated signal, or a combination of one or more of them.
Abstract
Description
- Web pages or other documents may be created by users on client devices to be accessible to other users over a network such as the Web. Web pages generally contain structured data documents such as HyperText Markup Language (HTML) documents, eXtensible Markup Language (XML) documents, JavaScript scripting language, etc. Creating and editing these structured data documents may require specialized knowledge of the programming or scripting language.
- Techniques are disclosed to enable an online document editing engine to accept collaborative inputs from editors working concurrently on the same document, store the set of collaborative editing inputs received, and process the same set of collaborative inputs by one of a plurality of different flattening utilities. A flattening utility, or flattener converts the set of edits into a structured data document that is customized for rendering and display on a particular client device, online service, third-party web site, or other location. The structured data output produced by each flattening utility can be a HyperText Markup Language (HTML) document for a web site, or other structured data documents.
- A network system according to various implementations of this disclosure enables collaborative and scalable editing and viewing of online content. A first data store receives and stores collaborative edits to user-created online content. A second data store receives and stores structured data documents created from the collaborative edits to the user-created online content. A browser, browser extension, or other application on a client device renders and displays the structured data documents retrieved from the second data store when a user sends a viewing request to a rendering server. An editing server receives and processes the collaborative edits to the user-created online content using operational transformation techniques and sends the processed collaborative edits to the first data store. An editing request router directs the collaborative edits from multiple collaborating editors to an appropriate editing server. A flattening utility, or flattener retrieves a set of collaborative edits to user-created online content from the first data store, converts the set of collaborative edits into a structured data document, and stores the structured data document in the second data store. The rendering server receives a plurality of viewing requests from viewers and retrieves an appropriate structured data document from the second data store. A client viewing device renders and displays the structured data document.
- Implementations may include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices. This Summary is not intended to introduce key features or essential features of the claimed subject matter, but merely provides a selection of concepts that are further described in the Detailed Description. Further implementations, features, and advantages, as well as the structure and operation of the various implementations are described in detail below with reference to accompanying drawings.
- Implementations are described with reference to the accompanying drawings. In the drawings, like reference numbers may indicate identical or functionally similar elements. The drawing in which an element first appears is generally indicated by the left-most digit in the corresponding reference number.
-
FIG. 1 is a schematic diagram of a system in accordance with one or more implementations of the disclosure. -
FIG. 2 is a schematic diagram illustrating features in accordance with an implementation of the disclosure. -
FIG. 3 is a schematic diagram illustrating features in accordance with another implementation of the disclosure. -
FIG. 4 is a flow chart illustrating techniques employed in accordance with one or more implementations of the disclosure. -
FIG. 5 is a schematic diagram of a computer system employed in accordance with one or more implementations of the disclosure. - A need exists to allow multiple users to collaborate and edit web pages or other documents accessible over a network such as the Web. As the numbers of users editing an online-accessible document increases, the server on which the document is hosted can be overloaded by the number of queries and other input. Furthermore, structured data documents such as HyperText Markup Language (HTML) documents, eXtensible Markup Language (XML) documents, JavaScript scripting language, etc., commonly used on web sites, can also be difficult for an average user to edit without specialized knowledge of the programming or scripting language.
- Collaborative editing of a document over a network can involve multiple users with editing capabilities and the proper permissions (hereinafter referred to as “editors”) working from multiple client devices that are communicatively coupled over a network, such as the Internet, to one or more editing servers. The editing can include multiple requests for changes or mutations to a document or a document object model (DOM)—a cross-platform and language-independent convention for representing and interacting with objects in HyperText Markup Language (HTML), eXtensible HyperText Markup Language (XHTML), and Extensible Markup Language (XML).
- A first data store communicatively coupled to the editing server can store these collaborative changes, or mutations, as a set of edits to a particular online document. The first data store may store all of the mutations or changes made to the document by all collaborating editors in sequence. For example, a mutation log may include a record of changes to a document that include adding a particular character at a particular position in the document, removing a character, changing the style of all or a portion of the document, bolding some text, changing the font of some text, adding or removing a hypertext link (i.e., hyperlink) pointing to other web pages, adding or removing gadgets, images, objects, etc.
- The technology of operational transformation coordinates concurrent changes made to a document by different collaborating editors, resolves any conflicts that may occur, and merges the changes into a set of approved edits. As change requests come in from different editors working collaboratively on the same document, operational transformation keeps track of the substance and timing of the separate operations that are being performed on the document. As one example, if an editing change request was fulfilled to delete a character from a certain position in a group of characters, and then subsequently another editing change request attempted to move that previously deleted character from that certain position to another position, operational transformation techniques would prevent such an edit since the character had already been deleted from that particular position. Another example could occur when two simultaneous inserts are made by different editors at different indexes in a document. Operational transformation could cause one of the indexes to be automatically shifted to accommodate the other insert. Storing a record of the mutations enables functionality such as restoring a document or document object model to any previous state or condition it was in before certain changes were made by undoing certain mutations.
- Techniques that include storing all of the mutations made by multiple collaborating editors as a bundle of JavaScript code can slow down the editing process. Rather than sending a finalized, structured text document, such as an HTML document for a web page, to the client, the client may render the page using the bundle of code representing the complete record of mutations. A mutation log storing all of the editorial changes made by the multiple editors may also include many old and currently irrelevant actions, such as when a character was initially added to the document, and then later removed.
- In the case of an online web site creation or editing service, many potential requests for editing or viewing an existing or newly created web site, or documents on the web site, may come into the data center for the online or network system over a communication network such as the Internet. The data center may include a plurality of servers capable of receiving such requests. Each of the multiple servers can be communicatively coupled to a data store that includes the web site information, including data for web pages, e.g., HTML (HyperText Mark-up Language) documents, XML (eXtensible Mark-up Language) documents, associated JavaScript plug-ins, JavaScript Object Notation (JSON), etc., and a mutation log of the substance and timing of all the collaborative editorial changes made to the documents. By routing the many incoming requests to different ones of the plurality of servers, the speed of the results can be scalable, e.g., one thousand requests could be routed to one thousand different machines at the same time, each of which could access the same data store and return the same results simultaneously. A potential problem with routing multiple incoming requests to multiple machines is that this technique does not lend itself to collaboration between multiple editors working simultaneously on a single document.
- When multiple editors are collaborating online to edit a single document, if all the requests from the multiple editors are routed to the same machine, all editors get the edits made by other collaborating editors right away because all of the processing is occurring on a single machine. However, a potential problem with this technique of routing all requests to a single machine is that there are limits on the scalability of this technique. For example, if a thousand editors, or some other large number of editors are trying to hit the same machine with editing requests for a single document, there is a likelihood that the machine will not be able to handle so many simultaneous requests.
- In accordance with various implementations of this disclosure, techniques are provided for facilitating a collaborative experience for users creating or editing documents such as structured data documents, e.g., HTML documents for web pages, while maintaining the scalability of the experience and allowing many users to provide input requests and view the edited document. The techniques disclosed also include providing for the automatic preprocessing and configuration of a structured data document for rendering in different ways, on different online services, and/or on different client devices having different display capabilities or attributes.
- As shown in
FIG. 1 , editors of documents and viewers of those documents can be communicatively coupled to different front end servers on a network system over different communication paths. The editor is shown communicating through a first path with the network system front end computing device over a communication network such as the Internet. A uniform resource locator (URL) for incoming editing requests can be provided and made available to users with editing permissions or proper access control attributes, and if desired, in accordance with authentication protocols. A separate URL for incoming viewing requests can also be provided to direct viewing requests along a separate communication path and to different rendering servers from the editing servers. The network system front end computing device may direct a request from an editor through a request router to a particular editing server selected from a plurality of editing servers on the network system. The request router directs an editing request for a particular document to the editing server that is handling the creation and/or editing of the particular document the editor is working on. Each editing server is connected to a corresponding data store that is not shared with other editing servers. - One or more editors make collaborative changes to a particular document having a document identification (ID), and each of those collaborative changes, or mutations, are stored in the data store associated with the particular editing server on which the document is being handled. Each document ID can be hashed so that each document ID corresponds to a number. The documents that are being edited by one or more editors can be distributed across however many servers or computing machines there are designated for the editing functions on the network system. As the number of documents increases, more editing servers can be added in order to handle the potential number of editing requests that come in for each document.
- Users who are only viewing the document on the network system, and are not providing editing requests, can communicatively connect over a communications network such as the Internet to a network system front end at a different uniform resource locator (URL) from the URL for incoming editing requests. The network system viewing front end directs requests from viewers to the appropriate renderer for the particular client device the viewer is using.
- When an editor decides that the document they are working on is ready to be published and made available to other users on the network system, a flattener can gather together all of the up-to-date mutations or changes corresponding to all of the edits that have been made on the document, and then convert all of those mutations into a structured text document such as an HTML document for presentation on a web page. A flattener, as used herein, can designate a module, utility, or mechanism for taking the stack of mutations and converting that stack into a structured data document such as an HTML document for presentation on a web page.
- Depending on the client devices on which the structured text document or documents will be rendered and displayed, a plurality of flatteners can be provided, each designed to flatten the mutations or edits appropriately for a particular type of client device or online service on which the document will be displayed. For example, the arrangement of objects and features contained within a document, such as headers, sidebars, images, etc., may be different for rendering and displaying on a smartphone, than on a tablet, a laptop, or a PC. Each of the flatteners can include pluggable architecture, such as software plug-ins or extensions, which allow for duplication of much of the code for the different flatteners, with the pluggable architecture being changeable to adapt the flattener for functionality that creates output for each of the different types of client devices. Additionally, one or more flatteners can be provided to incorporate specific formatting, styles, hyperlinks, feature buttons, gadgets, or other attributes specific to the particular online service where the collaboratively edited, structured data document will be included.
- As shown in
FIGS. 1 , 2, and 3, multiple flatteners retrieve a set of edits from a data store and convert the set of edits into different versions of a structured data document for display on different client devices or online services. Editors only have to provide one set of edits for one version of a document, and the multiple flatteners automatically convert that one version into the different formats, etc. that may be required for display on different client devices. - When one or more collaborating editors decide that the edits are sufficient, and a version of the document they are collaborating on is ready to be published, the set of edits for the version that is to be published is stored in one location in a data store designated for receiving edits from an associated editing server. The various flatteners communicatively coupled to that data store can automatically retrieve the same set of edits (or mutation log) for a particular document, and automatically convert that set of edits into a plurality of appropriate final structured data documents for display on different client devices or online services. Each time one or more editors decide that a set of edits is ready for publishing, the various flatteners can retrieve that set of edits from the data store communicatively coupled to the editing server. Each flattener converts the set of edits into a customized, structured data document appropriate for a particular client device or online service, and sends that structured data document to a data store that is communicatively coupled to the rendering servers. As a result, structured data documents appropriate for different client devices and/or online services are prepared and stored ahead of when a client sends a viewing request to the rendering servers. This makes it possible to quickly perform a search for a desired document, and to quickly retrieve the desired document on a particular client device. The separation of communication paths and servers for editors and viewers also allows for rapid and responsive collaboration between the editors and scalability to handle large numbers of viewers at the same time.
- In addition to automatically flattening and converting a set of collaborative edits or mutations into different versions of a structured data document appropriate for rendering and display on different devices, the various flatteners may also include pluggable architecture that automatically incorporates different page styles, gadgets, etc. to a document depending on the particular service or web site where the document will be presented and made available for rendering and display on a client device. As one, non-limiting example of different renderings that may be produced by different flatteners, one flattener may provide a web page with a visual style that includes a white background with black lettering, while a different flattener may provide the same web page with a style that includes a black background with green lettering. Another flattener may automatically include certain gadgets, hyperlinks, metatags, etc. appropriate for the particular online service where the document will be presented.
- In various alternative implementations one or more flatteners can be provided, where each flattener is developed for different services or web sites, and multiple flatteners working from the same set of collaborative edits stored in a data store automatically convert the edits through operational transformation into structured data documents suitable for rendering and displaying on different client devices or online services.
- In other alternative implementations a flattener can be configured to retrieve a set of edits provided by various editors and including JavaScript or other computer programming code developed by the editors. The flattener can convert the provided code, or sandbox the code when desirable, in order to isolate any potentially harmful code from the set of edits. This feature provided by the flattener can automatically process any sets of edits stored in the data store to prevent the propagation of any harmful code, cookies, or other undesirable attributes that may have been included by an editor before the sets of edits are converted into a structured data document and released to the public for rendering and display on client devices.
- The outputs from each of the flatteners can be automatically processed at the point in time when one or more editors make the decision to publish the document they have been working on. Each flattener produces a structured data document from a set of edits, with the document configured specifically for a particular client device, online service, third-party web site, etc. Each specifically configured and customized structured data document can then be stored in a data store, ready for rendering and displaying by a client device.
- A viewer desiring to display a collaboratively edited and configured structured data document on their client device sends a viewing request to a viewing front end URL that is separate from the editing front end URL, and communicatively coupled to one or more rendering servers operatively configured for rendering the document for the particular browser the viewer is using, and display by the user interface (UI) of the client device. Providing a separate communication path and separate servers for incoming editing requests and for viewing requests facilitates collaborative editing of an online document, while preserving scalability of the viewing process. In many situations the number of collaborating editors will be relatively small and easily handled by a designated editing server containing the document that is being edited. At the same time, a large number of viewing requests can be accommodated by directing them along a separate communication path to a separate rendering server.
- A structured data document created and edited for display on various client devices, online services, third-party web sites, etc., may also include one or more hypertext links (hyperlinks), which connect to other sites or web pages from within the document. The online system can store page identifications (IDs) for the web pages these hyperlinks connect to, rather than actually storing the hyperlinks themselves. One of the functions that can be performed by the flatteners is to convert each hyperlink in a document to the actual page ID pointed to by the hyperlink. An advantage to storing the page IDs rather than the actual hyperlinks is that when a page is moved from one location to another within a web site created and edited by one or more collaborating editors, all of the hyperlinks are automatically updated.
- A flattener performs functionality such as customized configuring of a structured data document for rendering on a particular client device at the page level rather than at the level of the entire web site on which that page will appear. Therefore if a user desires to move a page from one location to another on a web site, an update of all of the hyperlinks provided on a page using the flatteners to achieve this goal would require rerunning the flattener on every page for that site.
- An alternative to updating all of the hyperlinks provided on a page using a flattener is to provide another pluggable piece of architecture, such as a link updater, into the rendering servers, or communicatively coupled with the rendering servers. The link updater, or other pluggable and customized piece of architecture provided at the rendering server, can perform last minute updates to documents after they are retrieved from the data store and before they are rendered and displayed on a client device.
- The link updater would provide desired updates to the collaboratively edited structured data document retrieved from a data store at the point when a viewer sends a viewing request to the rendering server. As one illustrative implementation, the link updater can be operatively configured to achieve the goal of updating all of the hyperlinks that may have been provided on a page that is being moved to another location on a web site. The link updater can achieve this goal by first going through the page that is being moved, identifying all of the hyperlinks on that page that point to a particular page on the web site, and resolving those hyperlinks to the corresponding page ID for the page that the hyperlinks point to. The provision of a link updater at the rendering server enables last minute updates and changes to a structured data document that has been prepared and stored for a particular client device, online service, or other web site.
- In a broader implementation of pluggable architecture such as the above-described link updater, the pluggable architecture can be provided at the rendering server to accommodate any last minute changes to structured data documents before they are rendered and displayed on a client device. A mechanism may automatically insert desired content such as metatags, or other desired attributes, to every page to be displayed on a particular web site. The feature of providing customized and pluggable architecture for implementing last minute changes to rendered documents or other content provides a simple and easily changed plug-in mechanism for modifying documents viewed on various client devices.
- Since the flatteners discussed above can provide several different outputs for different devices or clients, different pluggable architecture at the rendering servers, or rendering plug-ins, may be used for different outputs. A mechanism can be provided for specific flattener implementations to request specific rendering plug-ins to be run at rendering time. This could be achieved by encoding a list of desired plug-ins directly into the output from a flattener. Alternatively, the rendering plug-ins could be programmed to recognize the specific outputs that they apply to.
-
FIGS. 1 , 2, and 3 illustrate anonline system 100 providing two separate communication paths for inputs received from users having editing permission (i.e., editors) 110, andviewers 140 desiring to only view the collaboratively edited documents produced by theeditors 110. - The
editors 110 send editing requests over a communication network 112 (illustrated as, but not limited to, the Internet) to an editing front end uniform resource locator (URL) 114.Viewers 140 send their viewing requests over acommunication network 112 to a viewingfront end URL 144. Arouter 116 distributes and directs the editing requests fromeditors 110 todifferent editing servers - Editing
server 118 processes sets of collaborative edits or mutations for one or more documents and then stores those processed edits in adata store 124. Similarly, edits that have been routed toediting server 120 by therouter 116 are processed and stored indata store 126, and edits routed toediting server 122 are processed and stored indata store 128. - Requests from
viewers 140 coming into viewingfront end URL 144 can be divided amongst a plurality ofrendering servers data store 160. The incoming viewing requests can identify the particular type of client device, browser, online service, third-party web site, etc. making the viewing request. The rendering servers use this information to retrieve the appropriately formatted and customized structured data document from thedata store 160. -
FIG. 1 illustratesflatteners data store 128 and send data todata store 160. Each flattener can be provided as substitutable or pluggable modules or architecture designed to retrieve a set of edits from thedata store 128 and convert the set of edits into a structured data document ready for rendering and display by a browser on a particular client device, online service, or third-party web site. These finalized, customized, structured data documents are then stored indata store 160, and are available to therendering servers - As discussed above, an additional module or pluggable piece of architecture can be provided as, e.g.,
link updater 146, communicatively coupled to one, several, or all of the rendering servers. This feature allows for last minute updates to the structured data documents retrieved fromdata store 160 by the rendering servers. In one implementation, a last minute change of the location of a page on a web site can be handled by the link updater after a flattening utility has already been run to create customized structured data documents for various client devices, online services, third-party web sites, etc. Rather than having to rerun the flatteners to create a whole new batch of updated documents, the link updater can handle the updates only as needed when a viewer sends in a viewing request to the rendering servers. -
FIG. 2 illustrates an alternative implementation that differs from the described implementation ofFIG. 1 above only in the inclusion of anaccumulator 125 coupled to thedata stores flatteners accumulator 125 and send data todata store 160. -
FIG. 3 illustrates yet another alternative implementation that differs from the described implementation ofFIG. 1 above only in the coupling of the flatteners todata store 126. Each of the implementations illustrated inFIGS. 1 , 2, and 3 provide for the flatteners to receive sets of collaborative edits from one or more data stores connected to specific editing servers. All editors working collaboratively on a particular document send their requested edits to the editing server that is handling that document, and the set of edits made to that document are stored on the particular data store connected to that editing server. This allows for each of the editors to immediately see the changes being made by other collaborating editors on a particular document. As discussed above, when one or more editors decides that a document is ready for publishing and releasing to the public, the flatteners then retrieve the sets of edits from thedata stores data store 160. -
FIG. 4 illustrates the techniques employed in one or more implementations of this disclosure. At 402, a set of collaborative edits to an online document are received at a first editing URL. At 404, the edits are routed to an appropriate editing server designated for handling the document that is being collaboratively edited. At 406, an editing server processes the edits received from collaborating editors using operational transformation techniques to resolve any conflicts and merge the proposed edits into a set of edits to a document. - At 408 in
FIG. 4 , the set of processed edits to a document are stored in a data store connected to the editing server that processed the collaborative edits. - At 410 in
FIG. 4 , a set of edits retrieved from a data store are converted into a structured data document that is customized and configured for a particular client device, online service, or third-party web site. In one implementation, as shown inFIG. 1 ,flatteners data store 128, and process the sets of edits to convert them into structured data documents. The various structured data documents created at 410 are then stored in a data store at 412. As shown inFIG. 1 , the data store for storing the structured data documents produced by the flatteners isdata store 160. - At 414 in
FIG. 4 , requests to view a structured data document are received from client devices at a viewing URL. At 416, the structured data documents are rendered and displayed on client devices. In the implementation shown inFIG. 1 , aviewer 140 has sent a viewing request to the viewingfront end URL 144.Rendering servers data store 160. - Implementations of the present disclosure can be carried out on a machine, a system or apparatus as part of or in relation to the machine, or a computer program product embodied in a computer readable medium executing on one or more of the machines. The one or more processors may be part of a server, client, network infrastructure, mobile computing platform, stationary computing platform, or other computing platform. Therefore, one or more of the above-described utilities, modules, or other functionalities may be embodied on a third-party server, one or more servers of the
online system 100, or some combination thereof. - A processor may be any kind of computational or processing device capable of executing program instructions, codes, binary instructions and the like. The processor may include memory that stores methods, codes, instructions and programs as described herein and elsewhere. The processor may access a storage medium through an interface that may store methods, codes, and instructions as described herein and elsewhere. The storage medium associated with the processor for storing methods, programs, codes, program instructions or other type of instructions capable of being executed by the computing or processing device may include but may not be limited to one or more of a CD-ROM, DVD, memory, hard disk, flash drive, RAM, ROM, cache and the like.
-
FIG. 5 is a block diagram illustrating anexemplary computer system 500 with which an online collaborative editing andrendering system 100 ofFIG. 1 can be implemented. In certain aspects, thecomputer system 500 may be implemented using hardware or a combination of software and hardware, either in a dedicated server, or integrated into another entity, or distributed across multiple entities. -
Computer system 500 includes a bus 508 or other communication mechanism for communicating information, and aprocessor 502 coupled with bus 508 for processing information. By way of example, thecomputer system 500 may be implemented with one ormore processors 502. These processors may be part of any of various components shown inFIGS. 1 , 2, and 3, such as the editingfront end 114, viewingfront end 144,router 116, editingservers rendering servers flatteners -
Computer system 500 can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them stored in an includedmemory 504, such as a Random Access Memory (RAM), a flash memory, a Read Only Memory (ROM), a Programmable Read-Only Memory (PROM), an Erasable PROM (EPROM), registers, a hard disk, a removable disk, a CD-ROM, a DVD, or any other suitable storage device, coupled to bus 508 for storing information and instructions to be executed byprocessor 502. Theprocessor 502 and thememory 504 can be supplemented by, or incorporated in, special purpose logic circuitry. - The methods and systems described herein may be deployed in part or in whole through a machine that executes computer software on a server, client, firewall, gateway, hub, router, or other such computer and/or networking hardware. The software program may be associated with a server that may include a file server, print server, domain server, internet server, intranet server and other variants such as secondary server, host server, distributed server and the like. The server may include one or more of memories, processors, computer readable media, storage media, ports (physical and virtual), communication devices, and interfaces capable of accessing other servers, clients, machines, and devices through a wired or a wireless medium, and the like. The methods, programs or codes as described herein and elsewhere may be executed by the server. In addition, other devices required for execution of methods as described in this application may be considered as a part of the infrastructure associated with the server.
- The server may provide an interface to other devices including, without limitation, clients, other servers, printers, database servers, print servers, file servers, communication servers, distributed servers and the like. Additionally, this coupling and/or connection may facilitate remote execution of programs across the network. The networking of some or all of these devices may facilitate parallel processing of a program or method at one or more location without deviating from the scope of the disclosed subject matter. In addition, any of the devices attached to the server through an interface may include at least one storage medium capable of storing methods, programs, code and/or instructions. A central repository may provide program instructions to be executed on different devices. In this implementation, the remote repository may act as a storage medium for program code, instructions, and programs.
- A software program may be associated with a client that may include a file client, print client, domain client, internet client, intranet client and other variants such as secondary client, host client, distributed client and the like. The client may include one or more of memories, processors, computer readable media, storage media, ports (physical and virtual), communication devices, and interfaces capable of accessing other clients, servers, machines, and devices through a wired or a wireless medium, and the like. The methods, programs or codes as described herein and elsewhere may be executed by the client. In addition, other devices required for execution of methods as described in this application may be considered as a part of the infrastructure associated with the client.
- The client may provide an interface to other devices including, without limitation, servers, other clients, printers, database servers, print servers, file servers, communication servers, distributed servers and the like. Additionally, this coupling and/or connection may facilitate remote execution of the program across the network. The networking of some or all of these devices may facilitate parallel processing of a program or method at one or more location without deviating from the scope of the disclosed subject matter. In addition, any of the devices attached to the client through an interface may include at least one storage medium capable of storing methods, programs, applications, code and/or instructions. A central repository may provide program instructions to be executed on different devices. In this implementation, the remote repository may act as a storage medium for program code, instructions, and programs.
- The methods and systems described herein may be deployed in part or in whole through network infrastructures. The network infrastructure may include elements such as computing devices, servers, routers, hubs, firewalls, clients, personal computers, communication devices, routing devices and other active and passive devices, modules and/or components as known in the art. The computing and/or non-computing device(s) associated with the network infrastructure may include, apart from other components, a storage medium such as flash memory, buffer, stack, RAM, ROM and the like. The processes, methods, program codes, instructions described herein and elsewhere may be executed by one or more of the network infrastructural elements.
- The methods, program codes, and instructions described herein and elsewhere may be implemented on a cellular network having multiple cells. The cellular network may either be frequency division multiple access (FDMA) network or code division multiple access (CDMA) network. The cellular network may include mobile devices, cell sites, base stations, repeaters, antennas, towers, and the like. The cell network may be a GSM, GPRS, 3G, 4G, EVDO, mesh, or other networks types.
- The methods, programs codes, and instructions described herein and elsewhere may be implemented on or through mobile devices. The mobile devices may include navigation devices, cell phones, mobile phones, mobile personal digital assistants, laptops, palmtops, netbooks, pagers, electronic books readers, music players and the like. These devices may include, apart from other components, a storage medium such as a flash memory, buffer, RAM, ROM and one or more computing devices. The computing devices associated with mobile devices may be enabled to execute program codes, methods, and instructions stored thereon. Alternatively, the mobile devices may be configured to execute instructions in collaboration with other devices. The mobile devices may communicate with base stations interfaced with servers and configured to execute program codes. The mobile devices may communicate on a peer to peer network, mesh network, or other communications network. The program code may be stored on the storage medium associated with the server and executed by a computing device embedded within the server. The base station may include a computing device and a storage medium. The storage device may store program codes and instructions executed by the computing devices associated with the base station.
- The computer software, program codes, and/or instructions may be stored and/or accessed on machine readable media that may include: computer components, devices, and recording media that retain digital data used for computing for some interval of time; semiconductor storage known as random access memory (RAM); mass storage typically for more permanent storage, such as optical discs, forms of magnetic storage like hard disks, tapes, drums, cards and other types; processor registers, cache memory, volatile memory, non-volatile memory; optical storage such as CD, DVD; removable media such as flash memory (e.g. USB sticks or keys), floppy disks, magnetic tape, paper tape, punch cards, standalone RAM disks, Zip drives, removable mass storage, off-line, and the like; other computer memory such as dynamic memory, static memory, read/write storage, mutable storage, read only, random access, sequential access, location addressable, file addressable, content addressable, network attached storage, storage area network, bar codes, magnetic ink, and the like.
- The methods and systems described herein may transform physical and/or or intangible items from one state to another. The methods and systems described herein may also transform data representing physical and/or intangible items from one state to another.
- The elements described and depicted herein, including in flow charts and block diagrams throughout the figures, imply logical boundaries between the elements. However, according to software or hardware engineering practices, the depicted elements and the functions thereof may be implemented on machines through computer executable media having a processor capable of executing program instructions stored thereon as a monolithic software structure, as standalone software modules, or as modules that employ external routines, code, services, and so forth, or any combination of these, and all such implementations may be within the scope of the present disclosure.
- Examples of machines on which the elements described herein may be implemented may include, but may not be limited to, personal digital assistants, laptops, personal computers, mobile phones, other handheld computing devices, medical equipment, wired or wireless communication devices, transducers, chips, calculators, satellites, tablet PCs, electronic books, gadgets, electronic devices, devices having artificial intelligence, computing devices, networking equipment, servers, routers and the like. Furthermore, the elements depicted in the flow chart and block diagrams or any other logical component may be implemented on a machine capable of executing program instructions.
- Thus, while the foregoing drawings and descriptions set forth functional aspects of the disclosed systems, no particular arrangement of software for implementing these functional aspects should be inferred from these descriptions unless explicitly stated or otherwise clear from the context. Similarly, it will be appreciated that the various steps identified and described above may be varied, and that the order of steps may be adapted to particular applications of the techniques disclosed herein. All such variations and modifications are intended to fall within the scope of this disclosure. As such, the depiction and/or description of an order for various steps should not be understood to require a particular order of execution for those steps, unless required by a particular application, or explicitly stated or otherwise clear from the context.
- The methods and/or processes described above, and steps thereof, may be realized in hardware, software or any combination of hardware and software suitable for a particular application. The hardware may include a general purpose computer and/or dedicated computing device or specific computing device or particular aspect or component of a specific computing device. The processes may be realized in one or more microprocessors, microcontrollers, embedded microcontrollers, programmable digital signal processors or other programmable device, along with internal and/or external memory. The processes may also, or instead, be embodied in an application specific integrated circuit, a programmable gate array, programmable array logic, or any other device or combination of devices that may be configured to process electronic signals. It will further be appreciated that one or more of the processes may be realized as a computer executable code capable of being executed on a machine readable medium.
- The instructions may be stored in the
memory 504 and implemented in one or more computer program products, i.e., one or more modules of computer program instructions encoded on a computer readable medium for execution by, or to control the operation of, thecomputer system 500, and according to any method well known to those of skill in the art, including, but not limited to, computer languages such as data-oriented languages (e.g., SQL, dBase), system languages (e.g., C, Objective-C, C++, Assembly), architectural languages (e.g., Java, .NET), and application languages (e.g., PHP, Ruby, Perl, Python). - A computer program as discussed herein does not necessarily correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, subprograms, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network. The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output.
-
Computer system 500 further includes adata storage device 506 such as a magnetic disk or optical disk, coupled to bus 508 for storing information and instructions. Thedata stores data store 160, shown inFIGS. 1 , 2, and 3 are all examples of data storage devices used in various implementations of this disclosure.Computer system 500 may be coupled via input/output module 510 to various devices. The input/output module 510 can be any input/output module. Exemplary input/output modules 510 include data ports such as USB ports. The input/output module 510 is configured to connect to acommunications module 512.Exemplary communications modules 512 include networking interface cards, such as Ethernet cards and modems. In certain aspects, the input/output module 510 is configured to connect to a plurality of devices, such as aninput device 514 and/or anoutput device 516.Exemplary input devices 514 include a keyboard and a pointing device, e.g., a mouse or a trackball, by which a user can provide input to thecomputer system 500. Other kinds ofinput devices 514 can be used to provide for interaction with a user as well, such as a tactile input device, visual input device, audio input device, or brain-computer interface device. For example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, tactile, or brain wave input.Exemplary output devices 516 include display devices, such as a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user. - According to one aspect of the present disclosure, the online
collaborative editing system 100, as shown inFIG. 1 , can be implemented using acomputer system 500 in response toprocessor 502 executing one or more sequences of one or more instructions contained inmemory 504. Such instructions may be read intomemory 504 from another machine-readable medium, such asdata storage device 506. Execution of the sequences of instructions contained inmain memory 504 causesprocessor 502 to perform the process steps described herein. One or more processors in a multi-processing arrangement may also be employed to execute the sequences of instructions contained inmemory 504. In alternative aspects, hard-wired circuitry may be used in place of or in combination with software instructions to implement various aspects of the present disclosure. Thus, aspects of the present disclosure are not limited to any specific combination of hardware circuitry and software. - Various aspects of the subject matter described in this specification can be implemented in a computing system that includes a back end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back end, middleware, or front end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. The communication network can include, for example, any one or more of a personal area network (PAN), a local area network (LAN), a campus area network (CAN), a metropolitan area network (MAN), a wide area network (WAN), a broadband network (BBN), the Internet, and the like. Further, the communication networks can include, but are not limited to, for example, any one or more of the following network topologies, including a bus network, a star network, a ring network, a mesh network, a star-bus network, tree or hierarchical network, or the like. The communications modules can be, for example, modems or Ethernet cards.
- As discussed above,
computing system 500 can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.Computer system 500 can be, for example, and without limitation, a desktop computer, laptop computer, or tablet computer.Computer system 500 can also be embedded in another device, for example, and without limitation, a mobile telephone, a personal digital assistant (PDA), a mobile audio player, a Global Positioning System (GPS) receiver, a video game console, and/or a television set top box. - The term “machine-readable storage medium” or “computer readable medium” as used herein refers to any medium or media that participates in providing instructions to
processor 502 for execution. Such a medium may take many forms, including, but not limited to, non-volatile media, volatile media, and transmission media. Non-volatile media include, for example, optical or magnetic disks, such asdata storage device 506. Volatile media include dynamic memory, such asmemory 504. Transmission media include coaxial cables, copper wire, and fiber optics, including the wires that comprise bus 508. Common forms of machine-readable media include, for example, floppy disk, a flexible disk, hard disk, magnetic tape, any other magnetic medium, a CD-ROM, DVD, any other optical medium, punch cards, paper tape, any other physical medium with patterns of holes, a RAM, a PROM, an EPROM, a FLASH EPROM, any other memory chip or cartridge, or any other medium from which a computer can read. The machine-readable storage medium can be a machine-readable storage device, a machine-readable storage substrate, a memory device, a composition of matter effecting a machine-readable propagated signal, or a combination of one or more of them. - While this specification contains many specifics, these should not be construed as limitations on the scope of what may be claimed, but rather as descriptions of particular implementations of the subject matter. Certain features that are described in this specification in the context of separate implementations can also be implemented in combination in a single implementation. Conversely, various features that are described in the context of a single embodiment or implementation can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
- While operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the aspects described above should not be understood as requiring such separation in all aspects, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
- The subject matter of this specification has been described in terms of particular aspects, but other aspects can be implemented and are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In certain implementations, multitasking and parallel processing may be advantageous. Other variations are within the scope of the following claims.
Claims (27)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/569,584 US20150199307A1 (en) | 2012-08-08 | 2012-08-08 | Pluggable Architecture For Optimizing Versioned Rendering of Collaborative Documents |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/569,584 US20150199307A1 (en) | 2012-08-08 | 2012-08-08 | Pluggable Architecture For Optimizing Versioned Rendering of Collaborative Documents |
Publications (1)
Publication Number | Publication Date |
---|---|
US20150199307A1 true US20150199307A1 (en) | 2015-07-16 |
Family
ID=53521513
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/569,584 Abandoned US20150199307A1 (en) | 2012-08-08 | 2012-08-08 | Pluggable Architecture For Optimizing Versioned Rendering of Collaborative Documents |
Country Status (1)
Country | Link |
---|---|
US (1) | US20150199307A1 (en) |
Cited By (29)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20140082472A1 (en) * | 2012-09-14 | 2014-03-20 | David H. Sitrick | Systems And Methodologies For Event Processing Of Events For Edits Made Relative To A Presentation, Selecting A Selected Set Of Events; And Generating A Modified Presentation Of The Events In The Selected Set |
US20140082473A1 (en) * | 2012-09-14 | 2014-03-20 | David H. Sitrick | Systems And Methodologies Of Event Content Based Document Editing, Generating Of Respective Events Comprising Event Content, Then Defining A Selected Set Of Events, And Generating Of A Display Presentation Responsive To Processing Said Selected Set Of Events, For One To Multiple Users |
US20140281931A1 (en) * | 2013-03-16 | 2014-09-18 | Sears Brands, L.L.C. | E-pub creator |
US20150269146A1 (en) * | 2014-03-18 | 2015-09-24 | Google, Inc. | System and method for computing, applying, and displaying document deltas |
US20160012028A1 (en) * | 2012-08-20 | 2016-01-14 | Open-Xchange, Inc. | Content management system |
US9372833B2 (en) | 2012-09-14 | 2016-06-21 | David H. Sitrick | Systems and methodologies for document processing and interacting with a user, providing storing of events representative of document edits relative to a document; selection of a selected set of document edits; generating presentation data responsive to said selected set of documents edits and the stored events; and providing a display presentation responsive to the presentation data |
CN105808517A (en) * | 2016-03-08 | 2016-07-27 | 武汉大学 | Collaborative editing consistency maintenance method for operating bounding box |
US20160321226A1 (en) * | 2015-05-01 | 2016-11-03 | Microsoft Technology Licensing, Llc | Insertion of unsaved content via content channel |
CN107943777A (en) * | 2017-12-14 | 2018-04-20 | 北京久蓉科技有限公司 | A kind of collaborative editing, cooperative processing method, device, equipment and storage medium |
US20180181549A1 (en) * | 2016-12-28 | 2018-06-28 | Dropbox, Inc. | Automatically formatting content items for presentation |
US20180197162A1 (en) * | 2014-11-25 | 2018-07-12 | International Business Machines Corporation | Remote document generation |
CN108885793A (en) * | 2016-03-29 | 2018-11-23 | 微软技术许可有限责任公司 | Ink in electronic document |
US10402485B2 (en) | 2011-05-06 | 2019-09-03 | David H. Sitrick | Systems and methodologies providing controlled collaboration among a plurality of users |
US10445414B1 (en) * | 2011-11-16 | 2019-10-15 | Google Llc | Systems and methods for collaborative document editing |
CN110633461A (en) * | 2019-09-10 | 2019-12-31 | 北京百度网讯科技有限公司 | Document detection processing method and device, electronic equipment and storage medium |
CN110968994A (en) * | 2019-10-20 | 2020-04-07 | 武汉烽火信息集成技术有限公司 | Document online editing method and server |
CN111045990A (en) * | 2019-11-07 | 2020-04-21 | 武汉融卡智能信息科技有限公司 | Document management system |
CN111368519A (en) * | 2020-03-17 | 2020-07-03 | 北京字节跳动网络技术有限公司 | Method, device, equipment and storage medium for editing online table |
US10878019B2 (en) * | 2017-10-20 | 2020-12-29 | Dropbox, Inc. | Hosted storage for third-party services |
CN112257399A (en) * | 2019-07-22 | 2021-01-22 | 珠海金山办公软件有限公司 | Document editing method, system, storage medium and terminal |
CN112417827A (en) * | 2020-12-07 | 2021-02-26 | 北京明略软件系统有限公司 | Method and device for editing and displaying online document, electronic equipment and storage medium |
US10979235B2 (en) | 2017-10-20 | 2021-04-13 | Dropbox, Inc. | Content management system supporting third-party code |
CN113256259A (en) * | 2021-06-01 | 2021-08-13 | 通号智慧城市研究设计院有限公司 | Online editing service system and implementation method thereof |
US11113411B2 (en) | 2017-10-20 | 2021-09-07 | Dropbox, Inc. | Authentication security model for a content management system |
CN113392070A (en) * | 2021-07-07 | 2021-09-14 | 百果园技术(新加坡)有限公司 | Online document management method, device, system, equipment and storage medium |
CN113468858A (en) * | 2021-07-21 | 2021-10-01 | 山谷网安科技股份有限公司 | On-line editing method of office file independent of client environment |
CN113836876A (en) * | 2021-09-22 | 2021-12-24 | 北京百度网讯科技有限公司 | Document processing method, device, electronic equipment and medium |
US11611595B2 (en) | 2011-05-06 | 2023-03-21 | David H. Sitrick | Systems and methodologies providing collaboration among a plurality of computing appliances, utilizing a plurality of areas of memory to store user input as associated with an associated computing appliance providing the input |
WO2024022076A1 (en) * | 2022-07-29 | 2024-02-01 | 京东方科技集团股份有限公司 | Collaborative editing method, device and system |
Citations (28)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20010032218A1 (en) * | 2000-01-31 | 2001-10-18 | Huang Evan S. | Method and apparatus for utilizing document type definition to generate structured documents |
US20030234953A1 (en) * | 2002-06-19 | 2003-12-25 | Eastman Kodak Company | Method and system for sharing imags over a communication network between multiple users |
US20040010755A1 (en) * | 2002-07-09 | 2004-01-15 | Shinichiro Hamada | Document editing method, document editing system, server apparatus, and document editing program |
US20040073873A1 (en) * | 2002-10-11 | 2004-04-15 | Microsoft Corporation | Adaptive image formatting control |
US20040139396A1 (en) * | 1996-06-28 | 2004-07-15 | Gelernter David H. | Stream-based information management system |
US6836768B1 (en) * | 1999-04-27 | 2004-12-28 | Surfnotes | Method and apparatus for improved information representation |
US6924828B1 (en) * | 1999-04-27 | 2005-08-02 | Surfnotes | Method and apparatus for improved information representation |
US20070101256A1 (en) * | 2005-11-01 | 2007-05-03 | Charles Simonyi | Perfect source control |
US20070239726A1 (en) * | 2006-03-29 | 2007-10-11 | Mathew Girard Weiss | Systems and methods of transforming data for web communities and web applications |
US20080263438A1 (en) * | 2006-06-28 | 2008-10-23 | Dias Daniel M | Method and apparatus for creating and editing electronic documents |
US7475337B1 (en) * | 2001-01-05 | 2009-01-06 | Xmlcities | Generating structured documents by associating document elements in a first display with displayed document type definitions in a second display |
US20100011292A1 (en) * | 2008-07-10 | 2010-01-14 | Apple Inc. | Collaborative media production |
US20100257457A1 (en) * | 2009-04-07 | 2010-10-07 | De Goes John A | Real-time content collaboration |
US20110078246A1 (en) * | 2009-09-28 | 2011-03-31 | Bjorn Michael Dittmer-Roche | System and method of simultaneous collaboration |
US7949990B2 (en) * | 2001-12-10 | 2011-05-24 | Mentor Graphics Corporation | Parallel electronic design automation: shared simultaneous editing |
US20110179344A1 (en) * | 2007-02-26 | 2011-07-21 | Paxson Dana W | Knowledge transfer tool: an apparatus and method for knowledge transfer |
US20120084667A1 (en) * | 2010-09-30 | 2012-04-05 | Google Inc. | Customized presentations associated with a social media application based on relationships |
US8201094B2 (en) * | 2009-09-25 | 2012-06-12 | Nokia Corporation | Method and apparatus for collaborative graphical creation |
US8209603B2 (en) * | 2009-04-29 | 2012-06-26 | Microsoft Corporation | Maintaining undo and redo capability across metadata merges |
US8352870B2 (en) * | 2008-04-28 | 2013-01-08 | Microsoft Corporation | Conflict resolution |
US20130024418A1 (en) * | 2011-05-06 | 2013-01-24 | David H. Sitrick | Systems And Methods Providing Collaborating Among A Plurality Of Users Each At A Respective Computing Appliance, And Providing Storage In Respective Data Layers Of Respective User Data, Provided Responsive To A Respective User Input, And Utilizing Event Processing Of Event Content Stored In The Data Layers |
US20130097490A1 (en) * | 2011-10-13 | 2013-04-18 | Microsoft Corporation | Application of Multiple Content Items and Functionality to an Electronic Content Item |
US20130124967A1 (en) * | 2011-11-11 | 2013-05-16 | Microsoft Corporation | Collaborative Commenting in a Drawing Tool |
US20130179799A1 (en) * | 2012-01-06 | 2013-07-11 | John Brandon Savage | System and method for actionable event generation for task delegation and management via a discussion forum in a web-based collaboration environment |
US20130179771A1 (en) * | 2012-01-09 | 2013-07-11 | Research In Motion Limited | Selective rendering of electronic messages by an electronic device |
US8719222B2 (en) * | 2008-06-27 | 2014-05-06 | Microsoft Corporation | Synchronization and collaboration within peer-to-peer and client/server environments |
US8954863B2 (en) * | 2010-11-15 | 2015-02-10 | Cisco Technology, Inc. | Intelligent social collaboration unified media |
US20150356127A1 (en) * | 2011-02-03 | 2015-12-10 | Linguastat, Inc. | Autonomous real time publishing |
-
2012
- 2012-08-08 US US13/569,584 patent/US20150199307A1/en not_active Abandoned
Patent Citations (30)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20040139396A1 (en) * | 1996-06-28 | 2004-07-15 | Gelernter David H. | Stream-based information management system |
US6836768B1 (en) * | 1999-04-27 | 2004-12-28 | Surfnotes | Method and apparatus for improved information representation |
US6924828B1 (en) * | 1999-04-27 | 2005-08-02 | Surfnotes | Method and apparatus for improved information representation |
US20010032218A1 (en) * | 2000-01-31 | 2001-10-18 | Huang Evan S. | Method and apparatus for utilizing document type definition to generate structured documents |
US7475337B1 (en) * | 2001-01-05 | 2009-01-06 | Xmlcities | Generating structured documents by associating document elements in a first display with displayed document type definitions in a second display |
US7949990B2 (en) * | 2001-12-10 | 2011-05-24 | Mentor Graphics Corporation | Parallel electronic design automation: shared simultaneous editing |
US20030234953A1 (en) * | 2002-06-19 | 2003-12-25 | Eastman Kodak Company | Method and system for sharing imags over a communication network between multiple users |
US20040010755A1 (en) * | 2002-07-09 | 2004-01-15 | Shinichiro Hamada | Document editing method, document editing system, server apparatus, and document editing program |
US20040073873A1 (en) * | 2002-10-11 | 2004-04-15 | Microsoft Corporation | Adaptive image formatting control |
US7574653B2 (en) * | 2002-10-11 | 2009-08-11 | Microsoft Corporation | Adaptive image formatting control |
US20070101256A1 (en) * | 2005-11-01 | 2007-05-03 | Charles Simonyi | Perfect source control |
US20070239726A1 (en) * | 2006-03-29 | 2007-10-11 | Mathew Girard Weiss | Systems and methods of transforming data for web communities and web applications |
US20080263438A1 (en) * | 2006-06-28 | 2008-10-23 | Dias Daniel M | Method and apparatus for creating and editing electronic documents |
US20110179344A1 (en) * | 2007-02-26 | 2011-07-21 | Paxson Dana W | Knowledge transfer tool: an apparatus and method for knowledge transfer |
US8352870B2 (en) * | 2008-04-28 | 2013-01-08 | Microsoft Corporation | Conflict resolution |
US8719222B2 (en) * | 2008-06-27 | 2014-05-06 | Microsoft Corporation | Synchronization and collaboration within peer-to-peer and client/server environments |
US20120278731A1 (en) * | 2008-07-10 | 2012-11-01 | Apple Inc. | Collaborative media production |
US20100011292A1 (en) * | 2008-07-10 | 2010-01-14 | Apple Inc. | Collaborative media production |
US20100257457A1 (en) * | 2009-04-07 | 2010-10-07 | De Goes John A | Real-time content collaboration |
US8209603B2 (en) * | 2009-04-29 | 2012-06-26 | Microsoft Corporation | Maintaining undo and redo capability across metadata merges |
US8201094B2 (en) * | 2009-09-25 | 2012-06-12 | Nokia Corporation | Method and apparatus for collaborative graphical creation |
US20110078246A1 (en) * | 2009-09-28 | 2011-03-31 | Bjorn Michael Dittmer-Roche | System and method of simultaneous collaboration |
US20120084667A1 (en) * | 2010-09-30 | 2012-04-05 | Google Inc. | Customized presentations associated with a social media application based on relationships |
US8954863B2 (en) * | 2010-11-15 | 2015-02-10 | Cisco Technology, Inc. | Intelligent social collaboration unified media |
US20150356127A1 (en) * | 2011-02-03 | 2015-12-10 | Linguastat, Inc. | Autonomous real time publishing |
US20130024418A1 (en) * | 2011-05-06 | 2013-01-24 | David H. Sitrick | Systems And Methods Providing Collaborating Among A Plurality Of Users Each At A Respective Computing Appliance, And Providing Storage In Respective Data Layers Of Respective User Data, Provided Responsive To A Respective User Input, And Utilizing Event Processing Of Event Content Stored In The Data Layers |
US20130097490A1 (en) * | 2011-10-13 | 2013-04-18 | Microsoft Corporation | Application of Multiple Content Items and Functionality to an Electronic Content Item |
US20130124967A1 (en) * | 2011-11-11 | 2013-05-16 | Microsoft Corporation | Collaborative Commenting in a Drawing Tool |
US20130179799A1 (en) * | 2012-01-06 | 2013-07-11 | John Brandon Savage | System and method for actionable event generation for task delegation and management via a discussion forum in a web-based collaboration environment |
US20130179771A1 (en) * | 2012-01-09 | 2013-07-11 | Research In Motion Limited | Selective rendering of electronic messages by an electronic device |
Cited By (37)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10402485B2 (en) | 2011-05-06 | 2019-09-03 | David H. Sitrick | Systems and methodologies providing controlled collaboration among a plurality of users |
US11611595B2 (en) | 2011-05-06 | 2023-03-21 | David H. Sitrick | Systems and methodologies providing collaboration among a plurality of computing appliances, utilizing a plurality of areas of memory to store user input as associated with an associated computing appliance providing the input |
US10445414B1 (en) * | 2011-11-16 | 2019-10-15 | Google Llc | Systems and methods for collaborative document editing |
US20160012028A1 (en) * | 2012-08-20 | 2016-01-14 | Open-Xchange, Inc. | Content management system |
US10402482B2 (en) * | 2012-08-20 | 2019-09-03 | Ox Software Gmbh | Content management system |
US20140082473A1 (en) * | 2012-09-14 | 2014-03-20 | David H. Sitrick | Systems And Methodologies Of Event Content Based Document Editing, Generating Of Respective Events Comprising Event Content, Then Defining A Selected Set Of Events, And Generating Of A Display Presentation Responsive To Processing Said Selected Set Of Events, For One To Multiple Users |
US20140082472A1 (en) * | 2012-09-14 | 2014-03-20 | David H. Sitrick | Systems And Methodologies For Event Processing Of Events For Edits Made Relative To A Presentation, Selecting A Selected Set Of Events; And Generating A Modified Presentation Of The Events In The Selected Set |
US9372833B2 (en) | 2012-09-14 | 2016-06-21 | David H. Sitrick | Systems and methodologies for document processing and interacting with a user, providing storing of events representative of document edits relative to a document; selection of a selected set of document edits; generating presentation data responsive to said selected set of documents edits and the stored events; and providing a display presentation responsive to the presentation data |
US11947900B2 (en) | 2013-03-16 | 2024-04-02 | Transform Sr Brands Llc | e-Pub creator |
US20140281931A1 (en) * | 2013-03-16 | 2014-09-18 | Sears Brands, L.L.C. | E-pub creator |
US11615232B2 (en) | 2013-03-16 | 2023-03-28 | Transform Sr Brands Llc | E-Pub creator |
US10621277B2 (en) * | 2013-03-16 | 2020-04-14 | Transform Sr Brands Llc | E-Pub creator |
US20150269146A1 (en) * | 2014-03-18 | 2015-09-24 | Google, Inc. | System and method for computing, applying, and displaying document deltas |
US9785637B2 (en) * | 2014-03-18 | 2017-10-10 | Google Inc. | System and method for computing, applying, and displaying document deltas |
US10528932B2 (en) * | 2014-11-25 | 2020-01-07 | International Business Machines Corporation | Remote document generation |
US20180197162A1 (en) * | 2014-11-25 | 2018-07-12 | International Business Machines Corporation | Remote document generation |
US10937012B2 (en) | 2014-11-25 | 2021-03-02 | International Business Machines Corporation | Remote document generation |
US20160321226A1 (en) * | 2015-05-01 | 2016-11-03 | Microsoft Technology Licensing, Llc | Insertion of unsaved content via content channel |
CN105808517A (en) * | 2016-03-08 | 2016-07-27 | 武汉大学 | Collaborative editing consistency maintenance method for operating bounding box |
CN108885793A (en) * | 2016-03-29 | 2018-11-23 | 微软技术许可有限责任公司 | Ink in electronic document |
US11960525B2 (en) * | 2016-12-28 | 2024-04-16 | Dropbox, Inc | Automatically formatting content items for presentation |
US20180181549A1 (en) * | 2016-12-28 | 2018-06-28 | Dropbox, Inc. | Automatically formatting content items for presentation |
US11113411B2 (en) | 2017-10-20 | 2021-09-07 | Dropbox, Inc. | Authentication security model for a content management system |
US10878019B2 (en) * | 2017-10-20 | 2020-12-29 | Dropbox, Inc. | Hosted storage for third-party services |
US10979235B2 (en) | 2017-10-20 | 2021-04-13 | Dropbox, Inc. | Content management system supporting third-party code |
CN107943777A (en) * | 2017-12-14 | 2018-04-20 | 北京久蓉科技有限公司 | A kind of collaborative editing, cooperative processing method, device, equipment and storage medium |
CN112257399A (en) * | 2019-07-22 | 2021-01-22 | 珠海金山办公软件有限公司 | Document editing method, system, storage medium and terminal |
CN110633461A (en) * | 2019-09-10 | 2019-12-31 | 北京百度网讯科技有限公司 | Document detection processing method and device, electronic equipment and storage medium |
CN110968994A (en) * | 2019-10-20 | 2020-04-07 | 武汉烽火信息集成技术有限公司 | Document online editing method and server |
CN111045990A (en) * | 2019-11-07 | 2020-04-21 | 武汉融卡智能信息科技有限公司 | Document management system |
CN111368519A (en) * | 2020-03-17 | 2020-07-03 | 北京字节跳动网络技术有限公司 | Method, device, equipment and storage medium for editing online table |
CN112417827A (en) * | 2020-12-07 | 2021-02-26 | 北京明略软件系统有限公司 | Method and device for editing and displaying online document, electronic equipment and storage medium |
CN113256259A (en) * | 2021-06-01 | 2021-08-13 | 通号智慧城市研究设计院有限公司 | Online editing service system and implementation method thereof |
CN113392070A (en) * | 2021-07-07 | 2021-09-14 | 百果园技术(新加坡)有限公司 | Online document management method, device, system, equipment and storage medium |
CN113468858A (en) * | 2021-07-21 | 2021-10-01 | 山谷网安科技股份有限公司 | On-line editing method of office file independent of client environment |
CN113836876A (en) * | 2021-09-22 | 2021-12-24 | 北京百度网讯科技有限公司 | Document processing method, device, electronic equipment and medium |
WO2024022076A1 (en) * | 2022-07-29 | 2024-02-01 | 京东方科技集团股份有限公司 | Collaborative editing method, device and system |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US20150199307A1 (en) | Pluggable Architecture For Optimizing Versioned Rendering of Collaborative Documents | |
US11740891B2 (en) | Providing access to a hybrid application offline | |
US10936179B2 (en) | Methods and systems for web content generation | |
US11526533B2 (en) | Version history management | |
CA2802746C (en) | System and methods for facilitating the synchronization of data | |
KR101824222B1 (en) | Fast rendering of websites containing dynamic content and stale content | |
US11423357B2 (en) | Reusable components for collaborative content items | |
US9626158B1 (en) | Dynamic availability-based integration of external functionality | |
US7844897B1 (en) | Blog template generation | |
US20140181137A1 (en) | Presenting data in response to an incomplete query | |
US20170177318A1 (en) | Dependency-Aware Transformation of Multi-Function Applications for On-Demand Execution | |
CN108710490B (en) | Method and device for editing Web page | |
US20160259630A1 (en) | Systems, apparatus and methods for sharing visual model-based applications | |
CN103678487A (en) | Method and device for generating web page snapshot | |
US10740367B2 (en) | Displaying an indication of changes made to content at a source | |
US20220292160A1 (en) | Automated system and method for creating structured data objects for a media-based electronic document | |
Shukla et al. | Learning Elastic Stack 7.0: Distributed Search, Analytics, and Visualization Using Elasticsearch, Logstash, Beats, and Kibana | |
US11119975B2 (en) | Digital design application plugin for content updates and delivery | |
CN112860978B (en) | Global searching method and device | |
Shukla et al. | Learning Elastic Stack 6.0: A beginner’s guide to distributed search, analytics, and visualization using Elasticsearch, Logstash and Kibana | |
US20220100703A1 (en) | Integrated universal file converter | |
CN115577198A (en) | Document issuing method, control device and readable storage medium | |
de Freitas Alves | Declarative Approach to Data Extraction of Web pages |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:ZHANG, ERIC, MR.;WATTS, JAMES, MR.;VERRILLI, MICHAEL, MR.;REEL/FRAME:028758/0102Effective date: 20120807 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: CORRECTIVE ASSIGNMENT TO CORRECT THE APPLICATION NUMBER FROM 13/446,306 TO 13/569,584. PREVIOUSLY RECORDED ON REEL 028758 FRAME 0102. ASSIGNOR(S) HEREBY CONFIRMS THE 13/569,584;ASSIGNORS:ZHANG, ERIC;WATTS, JAMES;VERRILLI, MICHAEL;REEL/FRAME:030231/0414Effective date: 20120807 |
|
STCB | Information on status: application discontinuation |
Free format text: ABANDONED -- FAILURE TO RESPOND TO AN OFFICE ACTION |