US20050010653A1 - Content distribution system for operation over an internetwork including content peering arrangements - Google Patents
Content distribution system for operation over an internetwork including content peering arrangements Download PDFInfo
- Publication number
- US20050010653A1 US20050010653A1 US10/912,840 US91284004A US2005010653A1 US 20050010653 A1 US20050010653 A1 US 20050010653A1 US 91284004 A US91284004 A US 91284004A US 2005010653 A1 US2005010653 A1 US 2005010653A1
- Authority
- US
- United States
- Prior art keywords
- content
- client
- server
- network
- request
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L12/00—Data switching networks
- H04L12/02—Details
- H04L12/16—Arrangements for providing special services to substations
- H04L12/18—Arrangements for providing special services to substations for broadcast or conference, e.g. multicast
- H04L12/1863—Arrangements for providing special services to substations for broadcast or conference, e.g. multicast comprising mechanisms for improved reliability, e.g. status reports
- H04L12/1877—Measures taken prior to transmission
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L61/00—Network arrangements, protocols or services for addressing or naming
- H04L61/45—Network directories; Name-to-address mapping
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L12/00—Data switching networks
- H04L12/02—Details
- H04L12/16—Arrangements for providing special services to substations
- H04L12/18—Arrangements for providing special services to substations for broadcast or conference, e.g. multicast
- H04L12/1886—Arrangements for providing special services to substations for broadcast or conference, e.g. multicast with traffic restrictions for efficiency improvement, e.g. involving subnets or subdomains
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L61/00—Network arrangements, protocols or services for addressing or naming
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/10—Protocols in which an application is distributed across nodes in the network
- H04L67/1001—Protocols in which an application is distributed across nodes in the network for accessing one among a plurality of replicated servers
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/10—Protocols in which an application is distributed across nodes in the network
- H04L67/1001—Protocols in which an application is distributed across nodes in the network for accessing one among a plurality of replicated servers
- H04L67/1004—Server selection for load balancing
- H04L67/1008—Server selection for load balancing based on parameters of servers, e.g. available memory or workload
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/10—Protocols in which an application is distributed across nodes in the network
- H04L67/1001—Protocols in which an application is distributed across nodes in the network for accessing one among a plurality of replicated servers
- H04L67/1004—Server selection for load balancing
- H04L67/101—Server selection for load balancing based on network conditions
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/10—Protocols in which an application is distributed across nodes in the network
- H04L67/1001—Protocols in which an application is distributed across nodes in the network for accessing one among a plurality of replicated servers
- H04L67/1004—Server selection for load balancing
- H04L67/1014—Server selection for load balancing based on the content of a request
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/10—Protocols in which an application is distributed across nodes in the network
- H04L67/1001—Protocols in which an application is distributed across nodes in the network for accessing one among a plurality of replicated servers
- H04L67/1029—Protocols in which an application is distributed across nodes in the network for accessing one among a plurality of replicated servers using data related to the state of servers by a load balancer
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/10—Protocols in which an application is distributed across nodes in the network
- H04L67/1001—Protocols in which an application is distributed across nodes in the network for accessing one among a plurality of replicated servers
- H04L67/1031—Controlling of the operation of servers by a load balancer, e.g. adding or removing servers that serve requests
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/10—Protocols in which an application is distributed across nodes in the network
- H04L67/1001—Protocols in which an application is distributed across nodes in the network for accessing one among a plurality of replicated servers
- H04L67/1038—Load balancing arrangements to avoid a single path through a load balancer
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/50—Network services
- H04L67/51—Discovery or management thereof, e.g. service location protocol [SLP] or web services
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/50—Network services
- H04L67/56—Provisioning of proxy services
- H04L67/563—Data redirection of data network streams
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L69/00—Network arrangements, protocols or services independent of the application payload and not provided for in the other groups of this subclass
- H04L69/30—Definitions, standards or architectural aspects of layered protocol stacks
- H04L69/32—Architecture of open systems interconnection [OSI] 7-layer type protocol stacks, e.g. the interfaces between the data link level and the physical level
- H04L69/322—Intralayer communication protocols among peer entities or protocol data unit [PDU] definitions
- H04L69/329—Intralayer communication protocols among peer entities or protocol data unit [PDU] definitions in the application layer [OSI layer 7]
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/40—Network security protocols
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L12/00—Data switching networks
- H04L12/02—Details
- H04L12/16—Arrangements for providing special services to substations
- H04L12/18—Arrangements for providing special services to substations for broadcast or conference, e.g. multicast
- H04L12/1859—Arrangements for providing special services to substations for broadcast or conference, e.g. multicast adapted to provide push services, e.g. data channels
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/10—Protocols in which an application is distributed across nodes in the network
- H04L67/1001—Protocols in which an application is distributed across nodes in the network for accessing one among a plurality of replicated servers
- H04L67/10015—Access to distributed or replicated servers, e.g. using brokers
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/2866—Architectures; Arrangements
- H04L67/288—Distributed intermediate devices, i.e. intermediate devices for interaction with other intermediate devices on the same level
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/50—Network services
- H04L67/56—Provisioning of proxy services
- H04L67/564—Enhancement of application control based on intercepted application data
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/50—Network services
- H04L67/56—Provisioning of proxy services
- H04L67/568—Storing data temporarily at an intermediate stage, e.g. caching
Definitions
- the present invention relates to efficient transmission of data in an internetwork, such as the global internetwork known as the “Internet”. More specifically, the present invention relates to moving live or stored “broadcast” data streams from content producers to large numbers of recipients of those data streams.
- Broadcasting refers to the transmission of a data stream from a content producer to a large number of recipients.
- the data stream can be text, graphics, video, audio, or any other digital data stream.
- Data is often provided as a stream or as a file, with the distinction being that the end of the stream is open-ended, while the file has a defined end.
- real-time stock quotes might be thought of as a stream of data
- a 30-minute audiovisual presentation might be thought of as a file of data.
- a sharp distinction is not needed between what is a stream and what is a file, since the typical broadcast operation is very similar whether a stream is being transmitted or a file is being transmitted. Therefore, it should be understood that where a stream is described, a file could be substituted therefor unless otherwise indicated.
- Real-time broadcasting refers to the transmission of the data as it is created in a digital form.
- a football game might be recorded by a camera, digitized and broadcast to many individuals wanting to receive the transmission over the Internet.
- the football game might also be stored after digitization and broadcast at a later time.
- the football game could be both transmitted live and transmitted at a later time (“delayed broadcast”).
- live broadcast some of the components of a broadcast network might operate exactly the same, as is the case with current television broadcasting.
- the antennas broadcasting the signal and the receivers receiving the signal operate identically to receive live broadcasts or delayed broadcasts.
- live broadcasting is likely to have a larger audience at the time of the broadcast, since there is only one time to tune into a live broadcast but many times might be available for a delayed broadcast.
- Some content is more likely to be desired by recipients as a live broadcast rather than a delayed broadcast. Examples include sporting events, time-sensitive business information such as stock quotes, analyst interviews and breaking news, and the like.
- the line between live and delayed broadcasting is not a fixed line.
- One of the challenges of live broadcasting is to process the data stream in real-time to make it suitable for transmission (e.g., compression, formatting), whereas more time is available for those processing steps if the data stream is a delayed broadcast. While that challenge highlights a distinction between live and delayed broadcasting, if the delayed broadcasts are only available at set times, as is the case with television reruns, live and delayed broadcasting do not differ greatly. Because the line is not always clear, it should be understood that “broadcasting” refers to live and/or delayed broadcasting unless otherwise indicated.
- broadcast television deals with a breaking news event by gathering information, writing a script and putting a reporter on the air.
- the recipients of the breaking news (the television watchers) must wait for the broadcast television station to broadcast the information and they get only the data stream that that content provider chooses to present.
- This “flash effect” is not limited to breaking news, but is often encountered when live events occur, when new releases of popular software are issued or when a popular Web site is encountered.
- a “Web site” generally refers to a collection of pages presented as a unit, usually served from one or more coordinated servers having a particular network address and may also refer to the computers and infrastructure that serve the pages of the collection.
- client-server architecture The problems of current broadcasting approaches are described below, but first some background of client-server architecture is in order.
- Many networking and other computing systems have the processing and functionality of the overall system separated into “clients” and “servers” where the clients are computers, programs or hardware that initiate requests and servers are computers, programs or hardware that respond to requests from clients.
- clients are computers, programs or hardware that initiate requests and servers are computers, programs or hardware that respond to requests from clients.
- devices or programs generally thought of as servers will make requests of devices or programs generally thought of as clients, but for the most part, in the client-server model, the servers wait around for requests, service the requests and then wait around for further requests.
- Clients are usually considered more independent actors, in that they initiate requests. It should be understood, however, that some devices or hardware could be clients at some times or for some purposes and servers at other times or for other purposes.
- a content server waits for a request from a content client and upon receipt of a request sends the requested content to the content client.
- This basic infrastructure is fine when one client makes a request of one server and the content fits in unused bandwidth of a channel connecting the client and server, but since most networks have more than one client or more that one server and share a limited bandwidth, the bandwidth needs to be intelligently allocated.
- the flash effect is not very bandwidth-efficient, as many, many identical copies of the data stream are transported over the network to the many recipients requesting the data stream. This effect might not be a problem if the data stream is a few bits of data, but data streams of full-motion video and CD-quality audio are becoming more and more common.
- Caching refers to a process of using a cache situated at strategic locations within the network infrastructure to intercept content requests from clients so that the content source does not need to provide every copy of the content.
- the network infrastructure consults the cache to determine if a copy of the requested content exists in the cache. If the content exists in the cache, the request is intercepted before it gets to the content server and the cache instead services the request. Otherwise, if the content is not present in the cache, the request is relayed to the content server and the response relayed back to the client.
- Caching is useful when there is a high probability that the requested content would happen to be present in the cache. Since the cache has a finite storage capacity allocated for storing cached content, the cache will eventually have to discard some of its stored content to make room for more recent, or more popular, content. Many strategies have been proposed and are in use for managing the local store of the cache, e.g., deciding when to discard an object from the cache, when to “refresh” content (get a fresh, possibly updated copy of content from the content server), and so forth.
- Caching can be either transparent or nontransparent.
- transparent caching the client makes a request of the content server and the network infrastructure intercepts the request if the cache can serve the request.
- nontransparent caching the client makes the request of the cache (or more precisely, of a network node to which the cache is attached) and the cache serves the request, if it can, or forwards the request to the content server and then serves the client the content returned from the content server.
- the server replication mechanism involves replicated servers each holding copies of the same content being served.
- the replicated servers are deployed across a wide area of the network and client requests to a content server are redirected to one of these distributed replicated servers to balance load and save network bandwidth. For example, if the clients making requests are all connecting to a network at one network entry point and the content server is at the far end of the network, the replicated servers might be located near the client network entry point so that the content does not need to travel the length of the network.
- These replicated servers may have some or all of the content contained at the origin content server and many variations exist for arranging particular servers in a replicated server deployment, for distributing content to the replicated servers from the origin content server, and for determining how clients are redirected to the appropriate replicated server.
- a similar content distribution problem involves the delivery of live streaming media to many users across the Internet.
- live streaming media a server produces a live broadcast feed and clients connect to the server using streaming media transport protocols to receive the broadcast as it is produced.
- streaming media transport protocols to receive the broadcast as it is produced.
- the server and network near the server become overwhelmed by the task of delivering a large number of packet streams to a large number of clients. This task is unnecessarily duplicative, because the server is sending out multiple streams of the same data (one stream per client).
- each connection from one client to the server is a “unicast” connection, i.e., a one-point-to-one-point connection.
- the basic connection between two points in a network such as the Internet is a unicast connection.
- unicast data may flow over many different paths (routes), it is identifiable as data from one source node at a source address to one destination node at a destination address. Because of this, each client needs its own connection to the server and the data stream is duplicated in the network by the number of clients requesting that data stream.
- Network multicasting partially solves the problem of unnecessary duplication of data streams.
- Multicasting at the network layer can be done over the Internet using IP multicasting protocols that are defined in the Internet architecture.
- IP multicasting protocols that are defined in the Internet architecture.
- a content server transmits the data stream as a single stream of packets addressed to a “multicast group” instead of sending individual copies of the stream to individual unicast addresses.
- a client normally receives only packets addressed to that client's unicast address
- a client interested in the multicasted stream can “tune in” to the broadcast by subscribing to the multicast group.
- IGMP the Internet Group Management Protocol
- the client subscribes to an “IP Multicast” group by signaling to the nearest router with subscription information.
- the network efficiently delivers the broadcast to each receiver client by carrying only one copy of the data stream and fanning out additional copies only at fan out points in the distribution path from the source (the content server) to the receivers. Thus, only one copy of each packet appears on any
- IP Multicast Unfortunately, a wide variety of deployment and scalability problems have confounded the acceptance and proliferation of IP Multicast in the global Internet. Many of these problems follow fundamentally from the fact that computing a multicast distribution tree requires that all routers in the network have a uniformly consistent view of what that tree looks like. To use IP multicasting effectively, each router must have the correct local view of a single, globally consistent multicast routing tree. If routers have disparate views of a given multicast tree in different parts of the network, then routing loops and black holes are inevitable. A number of other problems—e.g., multicast address allocation, multicast congestion control, reliable delivery for multicast, etc.—have also plagued the deployment and acceptance of IP Multicast. Despite substantial strides recently toward commercial deployment of IP Multicast, the resulting infrastructure is still relatively fragile and its reach is extremely limited.
- a splitter network is an application-level solution for transporting streaming-media broadcasts, where a set of servers is distributed across a network at strategic locations across the Internet. For example, a data distributor might co-locate splitters at an ISP's premises or make an arrangement with the ISP for a large-scale deployment within the ISP's network.
- RealNetworks of Seattle, Washington, provides for streaming media distribution. The distribution is at the application level in that a RealNetworksTM G2 server might send G2 data streams to G2 clients.
- servers are configured with a “splitting” capability, which allows them to replicate a given stream to a number of downstream servers.
- servers can be arranged into a tree-like hierarchy, where the root server sources a stream to a number of downstream servers, which in turn split the stream into a number of copies that are forwarded to yet another tier of downstream servers.
- splitter network of servers is plagued with a number of problems.
- the tree of splitters is statically configured, which means that if a single splitter fails, the entire sub-tree below the point of failure loses service.
- the splitter network must be oriented toward a single broadcast center, requiring separate splitter networks composed of distinct physical servers to be maintained for each broadcast network.
- splitters are typically specific to one data stream format making the splitter platform dependent. For example, a splitter set up to carry RealNetworksTM data streams cannot distribute MicrosoftTM NetshowTM data streams.
- splitter networks are highly bandwidth inefficient since they do not track receiver interest and prune traffic from sub-trees of the splitter network that have no downstream receivers.
- splitter networks provide weak policy controls—the aggregate bit rate consumed along a path between two splitter nodes cannot be controlled and allocated to different classes of flows in a stream-aware fashion.
- Yet another approach to avoid the problems of multicast is to have the content broadcast to several locations around a network and have the client run a test to determine the least congested path to a server having the content of interest. The client then connects to the server showing the least congested path the client. While is this good for file-centric applications, as opposed to stream-centric applications, this approach has drawbacks. For example, while the client might find a server with low congestion, little or nothing is done to ensure that the server closest to particular clients has the data that those clients are most requesting.
- Another problem is that many applications are live broadcasts and thus delivery of the data is time-sensitive and the data needs to be moved quickly to the edge servers that are serving the clients that are interested in the live broadcast while limiting the amount of network congestion that occurs on the network that is not bound for users interested in the broadcasts.
- One embodiment of the present invention provides for an improved data stream broadcast distribution by using content peering.
- each of the plurality of content providers is coupled to at least one content distribution network of a plurality of content distribution networks, wherein the client is coupled to at least one of the plurality of plurality of content distribution networks and a request for the content is sent from the client to a redirector node that receives requests, wherein a redirector at the redirector node provides an address for a server available to serve the requested content.
- the client's content distribution network is a primary content distribution network for the content provider providing the requested content, redirecting the client to a server within the client's content distribution network.
- the client's content distribution network is not a primary content distribution network for the content provider but the client's content distribution network has a content peering relationship with a primary content distribution network for the content provider, redirecting the client to a server within the client's content distribution network.
- the client's content distribution network is not a primary content distribution network for the content provider and the client's content distribution network does not have a content peering relationship with a primary content distribution network for the content provider, redirecting the client to a server outside the client's content distribution network.
- the redirecting can be done using a domain name service (DNS) server that responds to requests for domain name resolution that include metadata encoding for the content being requested and/or attributes of the resolution request other than a domain name.
- DNS domain name service
- Other possible mechanisms include application-level redirection or a new client network protocol for this application.
- the content distribution system can be independent of the content created, but sone systems might be set up for particular content, such as television and radio streams.
- the streams might be original broadcast signals or retransmission of over-the-air signals.
- FIG. 1 is a block diagram of a generalized client-server network system.
- FIG. 2 is a block diagram showing the network shown in FIG. 1 in greater detail.
- FIG. 3 is a block diagram of a network with a routing structure.
- FIG. 4 is a block diagram showing a portion of the network of FIG. 3 including servers coupled to routers in the network.
- FIG. 5 is a block diagram illustrating the network paths used for a client request for content and a subsequent server response with the content requests.
- FIG. 6 is a block diagram illustrating the use of a distribution network and a redirection fabric according to one embodiment of the present invention.
- FIG. 7 is a block diagram illustrating a content backbone anchored in a backbone ISP.
- FIG. 8 is network diagram illustrating a highly loaded a content backbone.
- FIG. 9 is a network diagram illustrating peering with APAR anycast redirector nodes.
- FIG. 10 is a network diagram illustrating the system of FIG. 9 with an additional peering arrangement.
- FIG. 11 is a network diagram illustrating mutually affiliated content backbones.
- FIG. 12 is a network diagram illustrating an APAR-DNS redirection architecture.
- FIG. 13 is a network diagram illustrating incremental deployment of an APAR-DNS redirection architecture.
- FIG. 14 is a network diagram illustrating incremental deployment of an APAR-DNS redirection architecture where autonomous systems do not have co-located servers.
- FIG. 15 is a network diagram illustrating explicit redirection.
- FIG. 16 is a network diagram of a network where explicit redirectors are deployed across the edges of autonomous systems.
- FIG. 17 illustrates a conventional DNS architecture.
- FIG. 18 illustrates an CDSR architecture as extensions to an existing end-host architecture and TCP/IP Internet architecture.
- FIG. 19 is a network diagram illustrating an end-host invoking the CDSR system in the Internet infrastructure.
- FIG. 20 is a network diagram illustrating wide-area deployment of CDSR.
- FIG. 21 illustrates a combination of CDSR with traditional load-balanced Web servers.
- FIG. 1 is an illustration of a system 10 in which clients 12 are connected to servers 14 via an infrastructure 16 .
- the global Internet is used as one example of infrastructure 16 , but it should be understood that infrastructure 16 is not so limited.
- infrastructure 16 might be implemented as a subset of the global Internet, an intranet, extranet, local area network, Internet II network, or the like or an overlay on an existing network architecture.
- TCP/IP protocols are used as an example for networking and data is shown, for example, travelling in packets, infrastructure 16 might be implemented using different protocols without departing from the scope of the invention.
- FIG. 2 shows infrastructure 16 in greater detail, as a network with clients connecting to the network at entry points such as Internet Service Provider (ISP) points-of presence (PoPs) and content being provided at injection points.
- ISP Internet Service Provider
- PoPs points-of presence
- content being provided at injection points.
- FIG. 3 illustrates one network connection wherein clients connect to the network at edge routers 38 and data travels through the network in “hops” where a hop is a data transfer from one router (an edge router 38 or an internal router 39 ) to another on its way from a data source to a data destination.
- FIG. 4 illustrates network 36 in greater detail, showing servers 40 that reside within network 36 to respond to requests. Note that each server 40 is coupled to the network via a router so that data flowing among the routers can be received by and transmitted from servers 40 . Servers 40 need not be fundamentally different than content servers 14 shown in FIG. 1 , although they usually serve different purposes.
- Internet content is created and realized by authoring Web pages and placing them on a staging Web server, or by digitizing audio/video signals. This is generally illustrated in FIG. 1 .
- Content is published into the Internet at injection points, labelled “I” in FIG. 2 .
- the injection points might comprise a production server that contains the data stream (or file or data block, as the case may be), ready for broadcast to many clients, with the production server being coupled to the source of the content (a Web page producer, digital camera, or other source) via a simple LAN connection or the like.
- a data stream from a remote venue like a concert site or sports event might be transported across a dedicated link (e.g., a dial-up ISDN line, a leased T1 line, or a frame relay connection) to a production server facility where the data stream is placed on the production server.
- a dedicated link e.g., a dial-up ISDN line, a leased T1 line, or a frame relay connection
- any client on the Internet can access that content with a Web or streaming-media connection between the production server and the client.
- the single production server model works only up to a certain scale. Because each client creates its own individual connection to the server, the server can easily become overwhelmed when serving up popular content. This is especially true when access is synchronized, e.g., for a live event, so that the server needs to simultaneously send many separate copies of the content to each requesting client. This not only overwhelms the throughput of the server but it also places undue burden on the network near the server site, which must carry the same content across the same network link many redundant times.
- PoP point of presence
- a PoP node is a node that a customer of the ISP can hook onto to connect to the Internet.
- One common PoP node has a bank of dial-in modems to which customers can dial up and connect.
- Other nodes might be entirely internal to the ISP and be inaccessible to the customer.
- the nodes that are PoP nodes, or nodes one router “hop” away from a PoP are considered “edge” nodes.
- ISP colocation systems (“colos” ) are also considered edge nodes, even though some of them are relatively deep in the network. Given this, programmable servers may be placed in an edge PoP to service nearby clients in an efficient manner. Servers placed in edge PoPs or close to edge PoPs are often called “edge servers”.
- the edge server captures the user's request for content and serves the content locally, thereby improving response time, reducing wide-area bandwidth consumption, and relaxing load on the production server.
- the initial source of the content is often referred to herein as the “origin server” that serves the initial, official copy of the data stream.
- the edge is defined as PoP nodes and nodes one hop away from a PoP node, then an edge server is at most one hop away from the nodes where the content is to be delivered.
- the edge is defined to be “thicker” in that nodes more than one hop away, but less than N (N>1) hops away, are in the “edge”, then the edge servers might be as far as N hops away from a customer.
- edge is universally upgraded with servers in this fashion, then Internet services as a whole perform and scale better.
- the edge is owned by a vast array of independent service organizations with different business models and who cooperate only very loosely to provide global Internet connectivity.
- Web content is generally published into the Internet through a hosting facility that is often distributed across the wide-area but not pervasively present across the edge. For example, as shown in FIG. 2 , an ISP A owns a piece of the edge while ISP B owns another piece of the edge, so they can cover the whole edge only by working together.
- the Web hosting business relies upon edge-caching infrastructure to be deployed throughout the infrastructure to reduce the load on hosting centers and provide quality to users by serving content from the nearby network access points.
- edge-caching infrastructure to be deployed throughout the infrastructure to reduce the load on hosting centers and provide quality to users by serving content from the nearby network access points.
- current business models in the Internet do not tend to encourage every service entity to upgrade their edge with quality-enhancing technology like caches and splitters. This is done only when it makes economic sense for the service provider to upgrade, e.g., because the benefits of caching (reducing bandwidth costs and delivering better quality to the customer) outweigh the investment in installing and managing the new infrastructure. Certain ISPs, for instance, have not found this to be the case.
- Content providers find enormous value in having access to a serving device in the edge. This is true whether the content provider is a free (e.g., advertiser-supported) service or a paid service (with payment handled through conventional financial channels or using a micropayment system), as the content provider is always better off if their content gets to clients efficiently and correctly.
- a free (e.g., advertiser-supported) service or a paid service with payment handled through conventional financial channels or using a micropayment system
- the content provider could arrange for their content to be always served from the edge of the network, then the consumers of their content would always receive as-best-as-possible performance from the Internet. Thus, the content provider would likely be willing to pay for such a service as it differentiates their content from their competition's through improved delivery performance and better serves the recipients to which the provider is broadcasting.
- existing Internet caching models do not provide coordinated control over what content is placed at the edge and that edge is owned and controlled by many different ISPs.
- CSPs Content Distribution Service Providers
- a Content Distribution Service Provider is a service organization that sells and provides Internet “content distribution service” to content providers.
- a CSP might contract with a content provider, such as Yahoo or CNN, to have Yahoo's or CNN's content (e.g., Web pages and streaming media traffic) efficiently replicated and served through the Internet thereby delivering high-quality experiences to recipients of that content.
- These CSPs typically build their content network by co-locating their servers in traditional ISP networks and redirecting client requests to nearby servers based on various metrics collected about the health of the network and server infrastructure. To effect the redirection system, content URLs often “point into” the CSP's service infrastructure rather than at the original content provider's Internet site. In effect, the CSP can now control what content is placed on its edge servers and provision its infrastructure to be able to serve the content of all of its customers at high levels of performance to arbitrary Internet users.
- the CSP may offer to allow the ISP to resell the CSP's service under the ISP's own brand, effectively partnering across ISPs to build out a global content-distribution system. Yet, this monolithic approach locks in each ISP to that CSP's content distribution technology. Since the CSP controls how content is distributed and replicated and how clients are routed to content servers, the ISP has no ability to forge its own relationships with other CSPs and/or ISPs. It is likely, then, that this business model will also be fragile and unstable.
- a far more stable and scalable business model is the “content peering” model described herein.
- Content peering eliminates or reduces the role of the CSP and allows ISPs to become the content carriers themselves.
- the ISP owns the relationship with the content provider and invests in its own edge server infrastructure to effectively provide high-performance content delivery to recipients of the content of the content providers.
- CSLAs content service-level agreements
- ISPs A and B
- ISP A agrees to carry and “serve” ISP B's content customers, and vice versa.
- the ISPs enter into bilateral “content peering” relationships.
- bilateral peering at the IP network layer enables Internet routing
- bilateral “content peering” relationships will enable a new form of Internet and Web content routing and broadcast streaming.
- a CSP is no longer needed to bridge together the existing ISPs' content distribution infrastructure. Instead, the CSP's role would be simplified to one in which it acquired and aggregated content. In turn, the CSP would provide “content feeds” to the ISPs content distribution network through content-peering relationships.
- a set of ISPs can more easily than before develop their own content distribution service by peering at the “content level” rather than the network level.
- individual packets of data (the content of which is entirely transparent to the network) route from router to router, from source to destination. In some cases, the source is in one network and the destination is in another network.
- An example would be if (referring to FIG. 2 ) if a user connected to ISP A at client 12 ( 1 ) sends a set of packets (e.g., an e-mail message) to a user connected to ISP B at client 12 ( 4 ).
- Peering at the network level occurs over a link 29 provided between ISPs A and B, presumably in accordance with a network level peering agreement between A and B.
- the packets would route within ISP A to an edge router (not shown) coupled to link 29 and then flow to an edge router (also not shown) at ISP B, where they would be routed to client 12 ( 4 ).
- Each router handling the packets has an idea of what direction to send the packets to, so they get on their way, but the routers do not generally know what the data in the packets mean. Since the routers form a network mesh, the routers might reroute a packet around congestion or router failure.
- FIG. 5 is a basic block diagram illustrating the elements of the network involved in a simple client-server request and response.
- client 12 makes a request of server 14 through network 36 and the request flows through an edge router 38 , an internal router 39 and another edge router.
- the response flows through a similar set of routers.
- the redirection fabric 50 we add another framework into the mix, referred to in FIG. 6 as the redirection fabric 50 .
- Redirection fabric 50 works with a distribution network 52 and a server array 54 to receive requests and get broadcast content delivered to individual clients.
- Redirection fabric 50 , distribution network 52 and server array 54 operate at a content level rather than at a network layer and thus form an application-level network.
- FIG. 6 does not necessarily show all of the network layer details.
- redirection fabric 50 might well include routers to route at the network layer.
- Redirection fabric 50 and/or server array 54 might also be decentralized and spread over the whole network.
- the content is “routed” to the clients as content.
- the content starts at a content server 14 and is injected into network 36 at an injection point 26 . From the injection point, the content reaches server array 54 over distribution network 52 . Because distribution network 52 is arranged as a network, the content can be scaleably distributed to many servers in server array 54 , with congestion or distribution node failure being routed around.
- An overlay network content can be injected at any attachment point in an overlay network of “service hubs”.
- This overlay network carries content from any injection point, which could be anywhere along an “edge”, to servers that are co-located within the network infrastructure and distributed across all the major ISP's, whereby each ISP can manage its own subset of this distribution network and interconnect service hubs through content peering virtual links.
- These service hubs initially may be placed in the core of the network, and over time, as the content distribution infrastructure carries more and more traffic, the servers can be incrementally pushed out toward the edge of the IP network enhancing many aspects of network and user-perceived performance.
- content can be efficiently carried across the network to servers near the end user which both enhances the quality of the user's experience (because content is delivered quickly with less loss) and the network efficiency (because content is efficiently replicated throughout the network infrastructure reducing the number of copies that are transmitted across congested network peering points and backbone networks).
- a redirection fabric “glues” clients to edge servers to provide the best possible content distribution path.
- the redirection fabric accounts for client proximity, network path characteristics, server load and utilization, and perhaps most important, policies based on content-peering service-level agreements to best decide how to attach the client to the service infrastructure. For example, when a client clicks on a Web link, the redirection system seamlessly routes that client's request to the best server independent of any client configuration or knowledge.
- URLs produced by the content provider reference not the originating site of the content but instead point abstractly into the redirection fabric (nontransparent redirection). This is accomplished by “anchoring” each content distribution network in one or more ISPs'networks that comprise a virtual “content backbone”, as shown in FIG. 7 . That is, the content backbone anchors the URL namespace of the content distribution network rooted here using the APAR routing mechanisms described below.
- the distribution network is built across the content backbone by deploying application-level multicast routing devices within the service hubs in ISP data centers and forming an overlay network by peering these content routers across data centers using “virtual links”.
- Co-located with each content router are one or more content servers that serve live or on-demand streaming media as well as Web content. In essence, the content routers form an intelligent network that connects content injection points to all the edge servers within the content backbone.
- each content router is a redirection node that publishes its presence to the network and indicates, in effect, the URL namespaces that it manages.
- some nearby redirector node in the content distribution network intercepts the request.
- that redirector node routes the client to the most appropriate server based on load and network measurements that the redirector nodes continually gather in the background.
- the best server will reside near the redirector node, but if the local servers are fully loaded the system may redirect a client elsewhere.
- This redirection can be explicit through a direct communication between the client and the redirection system, but can also be implemented in some cases as an implicit redirection by using the DNS (Domain Name Service) lookup process to redirect clients.
- DNS Domain Name Service
- FIG. 8 is an illustration of what happens with more and more users access the content backbone.
- a content backbone 91 serves many clients 92 over individual client connections 94 between the content backbone and clients, via ISP's.
- the unicast peering links 96 are shown.
- the peering costs between the backbone network and neighboring ISPs will increase and the delivery quality will ultimately suffer.
- a peer ISP can build its own content distribution network using the present invention to “peer” with the content backbone to incrementally build out the content network.
- the content routers in this new deployment would then be configured to capture the URL requests that point into the cooperating content backbone.
- the second ISP would create and own its own URL namespace anchored in its own content backbone. Then, its affiliate ISPs configure their content redirectors to capture the new URLs, assuming a business relationship exists to support this level of “content peering”.
- the content distribution architecture described herein allows any ISP to build their own content backbone and content distribution service offering, then peer with one another—at the content level rather than the IP layer—to effect arbitrarily large and wide-reaching content distribution networks.
- the system components include:
- a content distribution network comprising application-level content routers that support “wide-area multicasting” of data (as disclosed in McCanne et al. I and II);
- Content peering preferably uses a redirection system that maps onto the existing peering relationships among ISPs.
- Anycast routing uses the existing unicast routing infrastructure.
- Each content backbone is assigned its own anycast address (as the hook to capture content requests).
- any ISP can configure their ensemble of redirector nodes with this new anycast address to capture that content backbone's content requests.
- the content backbone serves as the default autonomous system (“AS”) for all requests that do not emanate from or traverse a content-distribution-enabled ISP.
- Administratively provisioned interdomain anycast routing can be used to make the content backbone span multiple autonomous systems.
- DNS Domain Name Service
- N* an ISP's DNS server can decide to route certain requests to the edge of the ISP and other requests to a main hub and yet other requests to its content peers (depending on the provisioned policies).
- One aspect of a scalable and efficient content peering implementation might be a seamless redirection model that accounts for the administrative policies and boundaries of the infrastructure that comprises the content distribution system.
- a content distribution network (CDN) is built as a virtual network that spans multiple, perhaps independently administered, sub-CDNs.
- this network of CDN networks forms a “Content Internet”, since the sub-CDNs are internetwork into one massive CDN.
- Administratively Provisioned Interdomain Anycast Routing refers to a unicast routing technique used in the redirection system.
- a variation of APAR is described in McCanne et al. II.
- An anycast address is a single unicast IP address shared across multiple distinct physical entities. These distinct physical entities are configured to participate in the unicast routing protocols and the net effect is that packets sent to that anycast address are routed to the nearest device assigned said address.
- anycast routing is also carried out at the interdomain level, since BGP will compute the shortest path (constrained by BGP policies) to the multiply-advertised address.
- a block of unicast addresses could be allocated exclusively for APAR, thus allowing ISPs to easily define policies for these special anycast addresses.
- IANA might initially allocate a /20 address block (i.e., a block of 4096 IP addresses) to be used for APAR.
- a /20 address block i.e., a block of 4096 IP addresses
- an ISP can be sure that the anycast routing state never exceeds 4096 entries (but is likely to be far less in practice because not all addresses will be used and subranges will mostly likely be aggregated).
- This overcomes a problem where some ISPs use BGP policies to block routes with prefixes longer than 20 bits to avoid the case that some ISP in the Internet floods the BGP routing tables with many unique long-prefixed addresses. Instead, those ISPs can alter their policy to still block such prefixes while only allowing through long-prefix routes that fall within the reserved, well-known APAR anycast address range.
- Each CDN has an associated “content backbone”, which is the set of AS's that advertise the anycast address(es) associated with that CDN.
- content backbone is the set of AS's that advertise the anycast address(es) associated with that CDN.
- devices are deployed that are assigned the anycast address(es).
- Such devices might be Web servers, streaming-media servers, application-specific redirectors, DNS servers, the virtual address of a layer- 4 switch load balancer, and so forth.
- any packet sent to such an address is routed to the nearest instance of anycast-addressed device.
- FIG. 9 shows a configuration where content backbone 1 is deployed in AS 100 using anycast address A*, while content backbone 2 is deployed across AS's 200 and 300 using anycast address B*.
- B* advertises BGP routes.
- Devices A 1 * and A 2 * are assigned the anycast address A* and devices B 1 *, B 2 *, B 3 *, and B 4 * are assigned the anycast address B*.
- Anycast-addressed devices also have a normal unique IP address assigned to them for network management access and so forth.
- a packet sent to address A* is routed to the closest device in AS 100 , whereas a packet sent to B* is routed to either AS 200 or 300 (depending on the BGP route preference). For example, if host C 1 sends a packet addressed to A*, it is routed to device A 1 * along path 101 . Likewise if host C 1 sends a packet to B*, it is routed to device B 1 * along path 102 . In contrast, if host C 2 sends a packet to B*, it is routed to device B 3 * along path 103 .
- the CDN system described above may then be extended into other AS's (as described in McCanne et al. II) by creating affiliate relationships between the content backbone and another AS.
- the affiliate deploys (or reconfigures its existing) anycast-addressed devices with the anycast address block owned by the content backbone in question.
- these devices advertise the corresponding anycast route into the AS's internal gateway routing protocol (IGP), but these routes are not allowed to propagate into the external BGP routes of that AS (otherwise it would be considered part of the content backbone under our terminology).
- IGP internal gateway routing protocol
- FIG. 10 shows a variation of the layout shown in FIG. 9 altered so that AS 400 becomes an affiliate for Content Backbone 1 and AS 500 becomes an affiliate to both Content Backbone 1 and Content Backbone 2 .
- anycast-address devices in AS 400 are configured to advertise address block A*
- similar devices in AS 500 are configured to advertise both address blocks A* and B*.
- client C 2 sends a packet to address B*, it is routed to device B 5 * along path 111 .
- client C 2 sends a packet to address A*, it is routed to device A 5 * along path 112 .
- AS 500 captures the packets within its domain by virtue of the IGP route thereby avoiding the need to route the request all the way to the content backbone.
- the two content backbones can peer with one another, as shown in FIG. 11 , wherein they each become an affiliate of the other.
- AS 100 would be an affiliate for AS 200 and AS 300
- AS 200 / 300 would become affiliates for AS 100 .
- the APAR routing system described above can be used to effect one kind of content peering based on specialized DNS servers, which we call herein a “APAR-DNS server”.
- the APAR-DNS server is configured with one or more APAR anycast addresses and thus appears as a name server on one or more CDNs.
- the APAR-DNS server is typically a single piece of physical infrastructure, either owned by the ISP where the device is situated or owned by a third-party that co-locates the equipment in the ISP's network, that supports multiple virtual CDNs that are owned by third party content service providers, or perhaps, by other ISPs.
- the CDN backbone then configures the DNS so that some subtree of the DNS namespace is authoritatively managed by the nameserver with an APAR anycast address.
- the namespace is managed by the federation of APAR-DNS servers that are configured with that anycast address and function as the authoritative name servers for the DNS subdomains in the subtree. This is accomplished by simply publishing the desired anycast address as a nameserver (NS) DNS resource record for the desired CDN sub-domain (see below).
- NS nameserver
- DNS servers map a finite set of configured names onto a finite set of host addresses.
- Extensive research and product development has generalized this model so that DNS may be used for various sorts of load balancing, Web content replication, and so forth, but in all of these approaches, the input is a name that must be known ahead of time and explicitly configured into the naming system.
- the APAR-DNS servers need not be configured with a set of known names that are to be mapped to a candidate set of addresses. Instead, APAR-DNS servers can map an unbounded set of arbitrary names, expressed in a fashion that encodes information about the content request, onto a set of address targets.
- the targets are configured into the APAR-DNS servers along with attributes that describe their capabilities, administrative constraints, and so forth.
- the configuration of targets and related attributes can be dynamically modified using an external protocol (an APAR-DNS management protocol).
- policies are programmed into the APAR-DNS servers to control the mapping of named service requests onto targets.
- server load information and network path characteristics between the APAR-DNS servers at the edge of the network (near the client) and the service infrastructure may be fed into the APAR-DNS server from some external data collection process.
- the APAR-DNS server programmatically maps a name-to-address translation request into a target by:
- the DNS query mechanism would learn that cdn.acme.net is handled by an authoritative name server with some APAR anycast address, say N*. Then, when a client went to fetch an object referenced with this name, the DNS query for ad102. web.cdn.acme.net would be sent from that client to N*, causing the request to be routed to the nearest APAR-DNS server configured to handle requests for cdn.acme.net. For example, in FIG. 12 , suppose N 1 *, N 2 *, and N 3 * are APAR-DNS servers configured with the APAR anycast address N*. Note that N 3 * advertises BGP APAR anycast routes (shown by the label N*′′).
- Client C 1 's DNS request is routed to N 1 *, while client C 3 's request is routed to N 3 *.
- C 2 maybe routed to either N 1 * or N 2 * depending on whether the BGP route for N* from AS 200 favors AS 400 directly or AS 400 via AS 100 , which can be administratively controlled with BGP routing policies.
- N 1 * may be configured to choose server S 1 or S 2 for this request since S 1 and S 2 are near the requesting client. But for other name requests (e.g., ad102.web.nbc.cdn.acme.net), N 1 * may decide to return server S 4 , which is farther away and therefore provides potentially lower quality of service.
- NBC customer of the CDN network
- NBC lower-grade service
- the names can include a digital signature embedded in them, where the key used to generate the signature is known only to the name-generating entity (i.e., the customer of the CDN network) and the infrastructure (i.e., the APAR-DNS servers).
- the ⁇ codepoint> field may be encrypted, also with a secret key.
- the name might denote a special type of service that is requested. For example,
- the APAR-DNS servers may maintain state about the location of a piece of content. That is, some external agent may disseminate explicit location information for given objects to optimize the amount of replication that occurs. Or the APAR-DNS servers may simply remember where they have recently directed clients and continue to direct future requests to the same place to avoid creating unnecessarily redundant copies of content (while monitoring the server load and creating copies only when server load warrants).
- FIG. 13 illustrates how the APAR-DNS redirection architecture can be incrementally deployed.
- N 1 *, N 2 *, and N 3 * are deployed only within the content backbone.
- Co-located with each APAR-DNS server is a content server (S 1 , S 2 , and S 3 respectively).
- S 1 , S 2 , and S 3 are situated near the ISP's peering points thereby allowing the system as a whole to know what the closest peering point is for the client that is requesting the service.
- that server would preferentially return address S 2 for the requested name.
- N 2 * could be informed of this (either by querying load on S 2 itself, or by being informed of the overload condition by some other agent) and could instead direct clients to alternate servers (e.g., S 1 or S 3 ).
- APAR-DNS servers may be deployed in AS's where there are no co-located servers.
- FIG. 14 shows a configuration where AS 100 and AS 200 comprise the content backbone with servers S 1 , S 2 , S 3 , and S 4 .
- AS 300 is an affiliate with no servers.
- N 3 * may be configured to utilize servers S 1 , etc and can enhance the quality of service delivered to customers on or downstream of AS 300 by choosing the appropriate server based on dynamic server and network measurements, replication constraints, and configured policy.
- N 3 * can be configured to prefer servers S 1 , etc., unless performance degrades, at which point it can decide to divert requests to servers X 1 , X 2 , which may be owned by another CDN network or by the ISP that owns AS 300 . Because all of this is controlled by policy that follows from content-peering service level agreements, settlement payments can be easily effected to account for the resources that are shared among peering CDNs. Ultimately, the performance of an Internet of CDN networks will be most effective when this technology is universally deployed. In that model, every ISP would enter into CDN peering arrangements and serve and carry content from many different content providers on behalf of many different CDN providers.
- DNS servers often cache name-to-address bindings to improve the performance of translation process and reduce bandwidth.
- caching causes the server selection decision to become stale. This may be an acceptable trade-off to make for the Web, since Web transactions are ephemeral and the system may gracefully adapt to overload on a time scale that is related to the rate at which the cache entry will expire.
- a stale redirection decision is decidedly unacceptable for other types of traffic like streaming media or long-lived file transfers (e.g., large Web objects or music downloads) where a client remains connected to the selected server for a long duration.
- the APAR-DNS server chooses some streaming media server S to handle a particular streaming-media feed and thus returns it. Further suppose that response is cacheable for one minute. Now consider the case where 5000 clients all happen to request that same feed in the next minute. Since the mapping for S is cached in the normal DNS system (which is unaware of the CDN), S will be the target of 5000 client connections. If this exceeds the capacity of that server, then client performance will degrade or the clients' connections will be rejected.
- redirection modules are deployed as anycast-addressable devices, just as the APAR-DNS servers were deployed above.
- An application-specific connection request (e.g., via HTTP or RTSP) is then sent from the client to an anycast address, which then redirects the client to an appropriate server.
- an explicit redirection step is always involved avoiding the staleness of cached DNS bindings. That is, a redirector can continually monitor the server infrastructure and change its redirection behavior immediately to reflect changes in load or network path characteristics. This process is disclosed in depth in McCanne et al. II.
- Explicit redirection can be combined with APAR-DNS redirection to achieve the best of both approaches.
- APAR-DNS system is already deployed. If such a system is deployed, rather than return a DNS mapping to a specific server, the APAR-DNS server could return a mapping to an explicit redirector that does fine-grained server-monitoring and load balancing.
- FIG. 15 illustrates this configuration.
- client C 2 performs a DNS query on the service name, which is routed to APAR-DNS server N 2 * via address N* (path 21 ).
- N 2 * parses the service request and decides, based on configured policy, that redirector R 2 can provide the requested service and thus returns an A record for R 2 's address in response to the original request (path 22 ).
- Client C 2 then invokes an application-specific connection (e.g., HTTP) to R 2 (path 23 ) which responds with a message (path 24 ) that directs the client to create a streaming-media request (e.g., via RTSP) to server S 2 .
- an application-specific connection e.g., HTTP
- R 2 path 23
- message path 24
- redirector R 2 would be configured with its own set of policies and potential target servers for directing clients accordingly. Similar steps would be taken for client C 1 , as shown by paths 11 - 16 .
- the APAR-DNS server could return an APAR anycast address of a set of redirectors.
- N 1 * is configured to return an address A* (which is assigned to A 1 *. . . A 3 *) in response to streaming media requests.
- a client request say from C 1 , would be routed to the nearest explicit redirector, in this case, A 2 *.
- a 2 * would then decide how to explicitly redirect the client as described above.
- a similar process is carried out for the network that contains N 2 *.
- a Web object's name is decomposed into a server name and a path on that server expressed most commonly as a URL.
- the redirection system described above relies upon mapping the server name of the Web object (or content request in general) to an arbitrary service node within the network infrastructure.
- the server name might no longer uniquely identify the content in question.
- the typical redirection systems used by others that obfuscate the server address in this fashion recover the original intent of the Web naming system by embedding additional content-naming information into the path component of the URL.
- a Web object conventionally referred to as
- This representation then allows the ACME networks CDN redirection system to route client requests for this object to some arbitrary server in the CDN. Upon receiving the request that server would be able to pull the content from the origin server at www.foo.com. Of course, this approach can be generalized to embed arbitrary content routing and policy information in the referring URL.
- a better approach which provides a higher degree of flexibility, is to add a level of indirection where the URL contains the name or address of a server that provides arbitrary information as to how the content request should be handled.
- a service request for a live broadcast could be represented with the following URL
- cdn.foo.com points to a server that manages the information base for how content requests should be handled.
- the service node that receives this request could contact cdn.foo.com to query it as to how the “Channel12” content request should be serviced. That server could then respond with a message that tells the service node to join a particular application-level multicast channel to receive the broadcast (see below) or alternatively to pull a cascaded feed from a streaming-media server elsewhere in the network.
- an arbitrary amount of content meta-information could be associated with a URL without having to place this information specifically in the content provider's URLs.
- this meta-information can be changed dynamically, e.g., to alter the way a broadcast is distributed based on congestion or network outages.
- the performance of this directory system could be optimized by caching results and/or disseminating the information across the application-level multicast network that might form an integral part of the CDN offering in the first place.
- Application-level multicast routing can be used to deliver live content and to induce a caching hierarchy for on-demand driven content replication.
- Application-level multicast routing can also be used to disseminate content routing polices, server load information, replication information, and so forth to the redirectors (i.e., the redirectors join an application level multicast group to learn about how they should be doing their redirection).
- the techniques above for client redirection refer to servers generically, but in a CDN, the servers typically act in concert with other elements in the network to bridge content from the publishing sites across the network to the CDN servers.
- a more powerful model is to cast the servers as access points to an application-level content network as described in McCanne et al. I.
- the client requests are routed to service node attachment points based on server load measurements, network path characteristics, administrative locality, customer policies, and so forth.
- Content is routed across an application-level network of content routers. Additional layers of naming and addressing may be implemented to overlay this content network onto the underlying Internet.
- the request (expressed as a Web URL) contains enough information to properly request the content from the application-level content routers as described above.
- the service attachment point will need to retrieve the broadcast from the distribution network in a fashion that allows the system to scale with the number of access points.
- a distribution network is interposed between the broadcast injection points at the service attachment points.
- the system described herein instead re-uses the service infrastructure to bridge together service hubs across the wide area into an “overlay network”.
- This overlay computes multicast routes at the application-layer that efficiently splits and replicates live flows across the wide area from every injection point to every service attachment point based on a subscription model.
- a network-layer (native) multicast may be used recursively by the application-level content distribution system as an optimization where available.
- An application-level multicast network is not only useful for routing live content across the wide area, but it also can be used to route on-demand Web and streaming-media traffic asynchronously.
- a multicast route from an injection point to all edge locations induces a caching hierarchy, where a cache miss is routed up the tree toward its publishing site. That is, when a cache (E) at the edge of the network needs to fetch a piece of content, say from some source (S), that edge device consults the application-level multicast route for the spanning tree rooted at S. This route indicates the parent node (P) in the tree on the path back toward S and the edge device in turn sends the content request to P.
- E cache
- S some source
- P consults its cache to see if the content is present, and if so, delivers the content along the tree back to E, where each node along -the reverse path stores a copy of the requested content. If the content was not present at P, P propagates the request up the tree according to the multicast route, and so on. This dissemination model scales nicely because each node in the tree requests a given content item at most once, but over time, the entire edge of the network becomes populated with the content.
- the multicast mechanism can be used to “pre-fill” caches at the edge of the network, using hop-by-hop reliable multicast.
- an application-level service infrastructure allows richer forms of reliability to be implemented on a hop-by-hop basis.
- certain caches at the edge of network belong to one or more application-level multicast groups.
- new content updates are published onto a group, which is reliably disseminated to all the caches that have subscribed to that group.
- the redirection system is informed of the cache updates so that clients are redirected to caches that have the requested content.
- content changes or additions are efficiently disseminated to large portions of the edge caches using application level multicast.
- One of the elements of an effective contribution system is the efficient exchange of information across the various components that comprise the overall system, e.g., disseminating server load information to redirectors, content replication decisions across the system, network path measurements, and so forth.
- the application-level multicast content distribution mechanisms could be re-used to distribute this meta-information across the system components. For example, all the redirectors within a “domain” might subscribe to a common multicast group and exchange load information across that group.
- that replication event could be made known to all the redirectors by publishing the event over the multicast infrastructure. In turn, the redirectors could then direct clients to the new copy of the content.
- servers 40 are embedded in infrastructure 16 , and those servers 40 are fed by distribution network 52 (shown in FIG. 6 ) and redirection fabric 50 redirects clients to edge servers.
- distribution network 52 shown in FIG. 6
- redirection fabric 50 redirects clients to edge servers.
- a conventional web cache or streaming media server might not be able to pull down the original content.
- these servers are extended with simple rules for how to resolve the content request via the conventions in the URL. For example, a redirection-aware Web cache would parse the URL path and determine that it should go to a particular Web server in the network to pull down the content.
- the cache may consult a database (through another anycast-type directory system) that tells it where to fetch the content from or the cache may be configured to pull the content from the content network, e.g., by making the content router look like its parent Web cache and serving the request by pulling the content across the application-level content network.
- the edge server could parse the URL to find the streaming-media “channel information”, which might be an application-level multicast group.
- the edge server would subscribe to the application-level multicast group using the techniques described in McCanne et al. I.
- a Web cache might be configured to utilize a CDN-aware content router as its parent using the Internet Caching Protocol (ICP), a scheme that virtually all commercial caches support.
- ICP Internet Caching Protocol
- existing server technology can be extended with rules for how to resolve the content request via the conventions in the URL. That is, a new URL format could be defined such that web caches could recognize the special format and handle the request according to the new semantics, e.g., on a miss, the cache fetches the content from the server location embedded in the URL. Or, the cache could be extended with protocols that conform to the CDN network and could directly fetch the content across the CDN. Similarly, for live content, a modified streaming-media server could subscribe to a broadcast by joining an application-level multicast group that is either embedded in the URL or retrieved from a directory using meta-information encoded in the URL.
- DNS-based redirection and explicit redirection schemes described above provide viable approaches to content peering based on APAR routing, they also have some limitations.
- users often misconfigure their hosts to use DNS servers that are in other service provider networks either accidentally (e.g., because they change providers without updating their DNS server address) or deliberately (e.g., because their provider's DNS system exhibits poor performance).
- the accuracy of DNS-based redirection is only as good as the granularity of coverage of DNS servers.
- an ISP may deploy just one DNS server for its entire autonomous system. In this case, all redirection decisions for all the customers of that ISP will be performed with respect to that one DNS server.
- DNS servers often cache name-translation results even when the DNS response packet indicates a time-to-live value of 0.
- an APAR DNS server cannot ensure that only one client will attach to the chosen server for a given redirection transaction. Because of this, the number of clients that attempt communication with that server cannot be easily controlled.
- clients often cache name-to-address translations within the application itself since they assume that DNS provides a stable, (almost) static mapping from names to addresses. In this case, if a server fails and the client attempts to contact the failed server, the redirection system has no opportunity to return an alternative address for the failed server.
- the explicit redirection process is computationally and memory intensive (compared to transactional redirection like the APAR DNS approach) because it involves establishing a TCP connection, assembling the request message from arbitrary TCP packets, parsing the application-level protocols that comprise the request message, responding with a properly formed redirection message, and closing down the connection.
- a transactional redirection system involves merely receiving a single request packet, parsing its contents, and responding with a single reply packet. There is no pending connection state or protocol processing that must occur across a sequence of packets.
- explicit redirection is based on somewhat cumbersome application specific protocols that are inflexible in terms of their scope of use.
- the redirector directs a client to a particular server, that client-server relationship is fixed.
- the server fails or the network path between the client and server suffers performance problems or failure, then the client has no recourse to reconnect to an alternate site because the redirection system is no longer involved in the server-client communication.
- redirection can be recast as a core and fundamental piece of the Internet infrastructure just as the DNS system is a core and ubiquitous part of the Internet.
- DNS every host on the Internet includes logic and configuration state that allows any Internet host to interact dynamically with the infrastructure to perform name-to-address translations. That is, a host is configured with the IP address of a DNS server, which performs name translations on behalf of that client—the client interacts with intelligent agents (i.e., name servers) in the infrastructure to obtain this service.
- FIG. 17 illustrates this architecture.
- applications invoke a stub resolver on the end-host that in turn interacts with DNS server agents in the network infrastructure. All of these agents use the underlying IP packet forwarding service to intercommunicate.
- a ubiquitous redirection system can be built according to the same philosophy as depicted in FIG. 18 .
- applications interact directly with a redirection stub that runs natively on the end-host.
- this redirection stub communicates with intelligent agents in the network infrastructure to carry out explicit redirection functions on behalf of the client.
- a new interface to the redirection system is created and applications are specifically designed to interact with this subsystem, the problems associated with transparent forms of redirection are eliminated.
- applications can include specific logic to reinstantiate service connections to failed or faulty servers. This approach to redirection is called “client-driven service rendezvous” (CDSR) since the end client is actively involved in the redirection process.
- CDSR client-driven service rendezvous
- CDSR When built upon the APAR routing system described earlier, CDSR provides a scalable and incrementally deployable framework for large-scale content peering in which different service providers own and operate different pieces of the physical infrastructure to enter into peering arrangements at the content level.
- the APAR routing system described earlier can be used to effect content peering using a client-driven redirection agent, which we call herein a CDSR redirector.
- a CDSR redirector is configured with one or more APAR anycast addresses.
- the CDSR redirector is a single piece of physical infrastructure, either owned by the ISP where the device is situated or by a third-party that collocates the equipment in the ISP's network, that supports multiple virtual CDNs that are owned by third party content service providers, or perhaps, by other ISPs.
- client applications are modified to interact directly with the redirection system by invoking a redirection stub on the local host.
- This stub in turn communicates via APAR anycast routing with CDSR redirectors in the network infrastructure.
- This dialogue occurs as a simple, single-packet request-response interaction so that the transaction is stateless and thereby avoids problems associated with route flaps (i.e., where a route flap causes a sequence of anycast packets to be routed to distinct physical hosts, which would otherwise disrupt a stateful transaction).
- an application like a Web browser or streaming media player parses a URL into a server component and relative path component.
- the server component is typically resolved with the DNS system to the IP address of the server.
- the application then initiates a TCP connection to that server and issues a request for the object indicated by the relative path component using an application-level protocol like HTTP or RTSP.
- the object is then received or streamed over the connection to the client or over an adjunct connection that is created as a side effect of the original transaction.
- the client uses an alternative approach. Rather than parsing the URL into server and path components and initiating a connection to the server, the client presents the entire URL to the CDSR stub, which in turn, sends a service request packet to the nearest CDSR redirector in the network infrastructure.
- the nearest redirector is located implicitly through the use of APAR anycast routing. That is, the packet is sent to some anycast address, say A*, associated with the CDN backbone that hosts the content referenced by the URL in question.
- A* anycast address
- There are many possible methods for obtaining the address A* but one such method would be to embed the address in the URL according to well-known conventions, e.g., as part of the path or as the server address.
- a URL that referred to a news feed (called “news.rm”) available on “any” node on the ACME Networks CDN could have the following form:
- the client would inspect the host component of the URL “any.cdn.acme.net” and determine through some mechanism that this URL refers to a CDN backbone rather than a specific server.
- this determination would be to define a well-known set of IP address to serve as APAR anycast addresses.
- LANA may set aside a special range of unicast addresses from the IP address space specifically intended for APAR anycast routing.
- a static set of addresses may be allocated by various service providers and configured into the end-host applications either through static compilation or by dynamic download updates across the Internet.
- the client could directly infer by inspection of the address that it should use the CDSR system for service rendezvous rather than the conventional methods.
- the DNS might include a special attribute that indicates that a particular DNS subdomain is managed by the CDSR system.
- any.cdn.acme.net resolves to the IP address A*.
- the client sends a CDSR request packet over UDP with the IP address A* as in the destination address field of the IP header.
- the request packet is routed to the topologically nearest CDSR redirector, which receives the packet and reads the URL out of that packet's payload.
- the CDSR redirector consults its configured-in policies and information base of load measurements to determine an appropriate place to terminate the requesting client.
- FIG. 19 An example of this process is depicted in more depth in FIG. 19 .
- a user presents a URL to a player (path 300 ) via some mechanism (e.g., by typing the URL into the user interface or by clicking on a hypertext link).
- the player parses the URL and resolves the domain name any.cdn.acme.net by sending a DNS request along path 401 via the DNS resolver on the local host to a nearby DNS server 400 .
- the server invokes the DNS system in a normal fashion to resolve the name into the anycast address A* (which is configured into the DNS by a network operator that appropriately configures the authoritative name server for the acme.net DNS subdomain).
- the DNS server in turn responds with the address A* via path 402 .
- the client determines that address A* is an APAR anycast address and consequently sends a service request message containing the URL to the CDSR stub 102 via path 301 all within the local host.
- the CDSR stub then sends a service request packet encapsulated in UDP addressed to A* into the network, which routes the packet to the topologically nearest CDSR redirector 200 .
- the CDSR redirector determines the address of a server to which the requesting client can connect basing its decision on an arbitrary set of configured policies and measurements gathered dynamically from the running system, as well as the requesting client's IP address.
- This policy and configuration information is dynamically assigned to the CDSR redirector via some external network management protocol that perhaps originates from the CDN operations center, e.g., over network path 207 .
- some external network management protocol that perhaps originates from the CDN operations center, e.g., over network path 207 .
- the CDSR redirector monitors the local servers 201 and 202 via communication paths 205 and 206 , respectively, or the CDSR can received load updates across an application-level multicast group as described above.
- the CDSR redirector can make informed decisions as to where to redirect clients based on server load. If the entire local service facility becomes fully loaded, the CDSR redirector may decide to redirect the client deeper into the network to servers not shown in the diagram. This decision can be based on information provided by the alternate servers (e.g., their availability and load) which can be communicated across the wide area, e.g., via path 208 .
- the CDSR redirector is then in a position to answer the original request packet. Presuming, for example, that it determined that server 201 is the most appropriate attachment point for the client, the CDSR redirector transmits a response packet back to the CDSR stub on the end host via path 302 containing the address of the server that can satisfy the content referenced by the original URL. In turn, the CDSR stub returns this result to the requesting application which then invokes a normal content transaction (e.g., a Web transfer or a instantiation of a streaming media flow) using traditional client-server protocols that terminate at the chosen server.
- a normal content transaction e.g., a Web transfer or a instantiation of a streaming media flow
- server 201 requests the content across the content network through a nearby content router, i.e., device 203 or device 204 .
- a nearby content router i.e., device 203 or device 204 .
- the CDSR redirection mechanism described above can be deployed across a collection of autonomous systems in a fashion similar to the DNS-based redirection system described earlier. It would be obvious to an expert in the art that the variations of the DNS-based redirection system described above could be applied to the CDSR redirection mechanisms described in this section.
- FIG. 20 shows how the CDSR is deployed across the wide-area between two cooperating content backbones and two content affiliates.
- the diagram shows a four ASs ( 100 , 200 , 300 , and 400 ) interconnected at the IP layer with traditional layer 3 peering via links 1.2, 1.3, 2.3, 2.4, and 3.4.
- AS 100 contains two CDSR redirectors ( 101 and 103 ) each assigned the anycast address A* (which is taken from one of AS 100 's assigned CIDR block) and servers 102 and 104 .
- AS 200 contains two CDSR redirectors ( 201 and 203 ) each assigned the anycast address B* (which is taken from one of AS 200 's assigned CIDR block) and servers 202 and 204 .
- AS 100 is the A* content backbone and AS 200 is the B* content backbone.
- AS 400 represents a content affiliate of the B* content backbone as it has deployed a CDSR redirector 401 addressed with the B* APAR anycast address.
- Server 402 provides the service attachment point for clients on the B* network.
- AS 300 represents a content affiliate of both the A* and B* content backbones as it has deployed a CDSR redirector 301 addressed with the both the A* and B* APAR anycast addresses.
- Server 302 provides the service attachment point for clients on the B* network.
- a content broadcast network that ties together the server installation to perform application-level multicast, traffic management, and so forth is assumed to exist (as described in McCanne et al. I) and is elided from this diagram to facilitate the present discussion. That is, application level connections exist among the various servers ( 102 , 104 , 202 , 204 , 302 , and 402 ) and content sources 10 , 11 , and 12 (and perhaps other content routing devices not shown) to route content (i.e., live streams, on-demand clips, files, etc) from the injection points at the sources to each server that requires the content to honor the client requests.
- content i.e., live streams, on-demand clips, files, etc
- clients 303 and 403 can efficiently access content on either content network according to the reach of each respective network using CDSR.
- the system functions as follow.
- client 403 suppose the user requests content specified by a URL referring to content from source 11 .
- the client decodes the URL (perhaps with the help of some external directory system like DNS) to determine that the URL refers to content on the B* backbone. Consequently, the client transmits that URL in a service request packet addressed to B*.
- APAR anycast routing delivers that request packet to CDSR redirector 401 , which inspects the URL, selects an appropriate server (e.g., assume server 402 ) and returns a response indicating that the client should attach to the content network at server 402 .
- the client 403 then initiates an application connection (e.g., using RTSP, HTTP, etc) to server 402 to request the content, which is fetched across the CDN as described above.
- an application connection e.g., using RTSP, HTTP, etc
- client 402 requests content specified by a URL referring to content from source 10 .
- the client decodes the URL (perhaps with the help of some external directory system like DNS) to determine that the URL refers to content on the A* backbone. Consequently, the client transmits that URL in a service request packet addressed to A*.
- APAR anycast routing delivers that request into AS 400 , but because there are no A*-addressed CDSR redirectors within that AS, the IP routers forward the request packet toward AS 100 (i.e., which externally advertises the CIDR block containing address A*).
- AS 100 i.e., which externally advertises the CIDR block containing address A*.
- the route traverses path 3 . 4 on its way to AS 100 .
- the packet enters AS 300 , but now since CDSR redirector 301 is assigned the A* address, the request packet is routed to that device instead of being routed on to AS 100 .
- redirector 401 inspects the URL, selects an appropriate server (e.g., assume server 302 ) and returns a response indicating that the client should attach to the content network at server 302 .
- the client 403 then initiates an application connection (e.g., using RTSP, HTTP, etc) to server 302 to request the content, which is fetched across the CDN as described above.
- the client attaches to the closest node in the A*-rooted CDN; even though the client resides in AS 400 and service elements exist in that AS, server 302 in AS 300 is used instead because it is the closest element on the A* network.
- CDSR redirectors are deployed in parallel with explicit redirectors and URLs are structured so that they work effectively under either scenario.
- explicit redirectors and URLs are structured so that they work effectively under either scenario.
- One such approach is to run multiple redirection processes or agents that perform different types of redirection on each CDSR redirector. For example, one process could perform RTSP based redirection while another performs native CDSR redirection. The former process, for instance, would bind to TCP port 554 (i.e., the default RTSP port) while the latter would bind to some well-known UDP port, say 2554 . Then, the content network would be configured with the convention that the server portion of any URL that referred to content on that network would resolve to that network's APAR anycast address. For example, within the URL
- a CDSR-aware client inspects the address A* returned by DNS for the name any.cdn.acme.net and determines that A* is an APAR anycast address. Consequently, the client invokes the CDSR redirection system by transmitting a service request UDP packet containing the URL to address A* at UDP port 2554 . In turn, the network routes the packets comprising this connection to the nearest CDSR redirector (via APAR anycast routing) and, this time, the CDSR redirector process running on that device receives the request.
- the CDSR redirector chooses a candidate server (as outlined earlier) and returns a response packet that contains the address of this server to be used for the service transaction (e.g., Web request or streaming media flow).
- the response packet may also contain other hints that could be useful to the client, e.g., indicating that the client may use the returned server address for all future content requests with the same server component name (e.g., any.cdn.acme.net), or that the client may use the address in this fashion for some period of time (e.g., 5 minutes).
- the response packet may also contain predictive hints that allows clients to infer more information about what URLs are handled by the CDSR redirection system.
- an HTTP redirection agent runs in parallel to a CDSR redirector running on the APAR anycast-addressed device.
- a legacy Web browser that invokes the URL
- one process performs HTTP based redirection while another performs native CDSR redirection.
- the former process for instance, binds to TCP port 80 (i.e., the default HTTP port) while the latter binds to a well-known UDP port, say 2554 .
- the content network is configured with the convention that the server portion of any URL that referred to content on that network resolves to that network's APAR anycast address. For example, within the URL
- a CDSR-aware client inspects the address A* returned by DNS for the name any.cdn.acme.net and determines that A* is an APAR anycast address. Consequently, the client invokes the CDSR redirection system by transmitting a service request UDP packet containing the URL to address to A* at UDP port 2554 .
- the network routes the packets comprising this connection to the nearest CDSR redirector (via APAR anycast routing) and, this time, the CDSR redirector process running on that device receives the request.
- the CDSR redirector chooses a candidate server (as outlined earlier) and returns a response packet that contains the address of this server to be used for the Web transfer.
- the response packet may also contain other hints that could be useful to the client, e.g., indicating that the client may use the returned server address for all future content requests with the same server component name (i.e., any.cdn.acme.net), or that the client may use the address in this fashion for some period of time (e.g., 5 minutes).
- the response packet may also contain predictive hints that allows clients to infer more information about what URLs are handled by the CDSR redirection system.
- the HTTP redirection agent is replaced with an actual Web server.
- the Web server may optionally be load-balanced with a layer 4 switch.
- FIG. 21 illustrates this scheme.
- layer 4 switch 11 is assigned the virtual IP address A* and configured to advertise the A*/32 host route into the network routing protocol to effect APAR anycast routing.
- Switch 11 is configured to route UDP port 2554 traffic to the CDSR redirector 12 and route all Web traffic (on TCP port 80 ) to Web servers 13 and 14 (which may be clustered to larger sizes).
- Switch 21 is similarly configured against CDSR redirector 22 and Web servers 23 and 24 .
- clients 10 and 20 are CDSR aware.
- client 10 parses the URL, it determines that the server component address is an APAR anycast address and transmits a service request packet to the A* anycast address containing the URL.
- the layer 4 switch routes this packet to CDSR redirector 12 , which selects a nearby server or some other server if the local cluster is overloaded (as described earlier) and returns a response message indicating that server, say server 14 .
- the client retrieves the content from server 14 using HTTP.
- a similar transaction occurs between client 20 and the layer 4 switch 21 when client 20 invokes the URL in question.
- AN APAR-DNS routing scheme can also be used to limit requests from unauthorized clients.
- the request for domain name resolution might include metadata that validates an authorized client.
- the APAR-DNS server checks the metadata and if the client appears to be authorized, the APAR-DNS server responds to the request with a resolution of the domain name to an IP address and a port number that, by preagreement between the content server and the APAR-DNS server or otherwise, is a port that the content server will connect over. If the client does not appear to the APAR-DNS server to be authorized, the APAR-DNS server will return an IP address and port number of a port that the content server ignores.
- content peering as described above can be used is within content distribution networks run by network service providers that peer with other such content distribution networks through “context exchange” providers.
- a content exchange is service entity that brokers relationships between the content providers and the distribution networks.
- content exchanges can enter into relationships with content providers as their customers but rely upon the content distribution networks to actually carry the traffic. This leads to a landscape where a number of content exchanges emerge to act as brokers between content providers and content distribution networks owned and operated by the network service providers and the number of content exchanges is small enough for efficient operation.
Abstract
Description
- This application claims priority from Provisional U.S. Patent Application No. 60/172,746, entitled “A Content Distribution System For Operation Over An Internetwork Including Content Peering Arrangements”, filed Dec. 20, 1999. The disclosures of the following applications assigned to the assignee of the present application are also incorporated in their entirety herein by reference for all purposes:
- U.S. Provisional Patent Application No. 60/152,257, entitled “A Proximity-Based Redirection System For Robust And Scalable Service-Node Location In An Internetwork”, filed Sep. 3, 1999 (hereinafter referred to as “McCanne et al. I”);
- U.S. patent application Ser. No. 09/458,216, entitled “A Proximity-Based Redirection System For Robust And Scalable Service-Node Location In An Internetwork”, filed Dec. 9, 1999 (hereinafter referred to as “McCanne et al. II”);
- U.S. patent application Ser. No. 09/323,869, entitled “Performing Multicast Communication In Computer Networks By Using Overlay Routing”, filed Jun. 1, 1999 (hereinafter referred to as “McCanne I”).
- The present invention relates to efficient transmission of data in an internetwork, such as the global internetwork known as the “Internet”. More specifically, the present invention relates to moving live or stored “broadcast” data streams from content producers to large numbers of recipients of those data streams.
- “Broadcasting” refers to the transmission of a data stream from a content producer to a large number of recipients. The data stream can be text, graphics, video, audio, or any other digital data stream. Data is often provided as a stream or as a file, with the distinction being that the end of the stream is open-ended, while the file has a defined end. For example, real-time stock quotes might be thought of as a stream of data, while a 30-minute audiovisual presentation might be thought of as a file of data. As referenced herein, a sharp distinction is not needed between what is a stream and what is a file, since the typical broadcast operation is very similar whether a stream is being transmitted or a file is being transmitted. Therefore, it should be understood that where a stream is described, a file could be substituted therefor unless otherwise indicated.
- Broadcasting need not be done in real-time relative to the content creation. Real-time broadcasting refers to the transmission of the data as it is created in a digital form. For example, a football game might be recorded by a camera, digitized and broadcast to many individuals wanting to receive the transmission over the Internet. The football game might also be stored after digitization and broadcast at a later time. Furthermore, the football game could be both transmitted live and transmitted at a later time (“delayed broadcast”). Generally speaking, whether the broadcast is live or delayed, some of the components of a broadcast network might operate exactly the same, as is the case with current television broadcasting. For example, the antennas broadcasting the signal and the receivers receiving the signal operate identically to receive live broadcasts or delayed broadcasts.
- One technical difference between live broadcasting and delayed broadcasting is that live broadcasting is likely to have a larger audience at the time of the broadcast, since there is only one time to tune into a live broadcast but many times might be available for a delayed broadcast. Some content is more likely to be desired by recipients as a live broadcast rather than a delayed broadcast. Examples include sporting events, time-sensitive business information such as stock quotes, analyst interviews and breaking news, and the like.
- The line between live and delayed broadcasting is not a fixed line. One of the challenges of live broadcasting is to process the data stream in real-time to make it suitable for transmission (e.g., compression, formatting), whereas more time is available for those processing steps if the data stream is a delayed broadcast. While that challenge highlights a distinction between live and delayed broadcasting, if the delayed broadcasts are only available at set times, as is the case with television reruns, live and delayed broadcasting do not differ greatly. Because the line is not always clear, it should be understood that “broadcasting” refers to live and/or delayed broadcasting unless otherwise indicated.
- Relative to the current demands of Internet users, current television broadcasting is simple: the content creators provide their content to the broadcasters, who send out the data stream into a channel that is exclusively reserved for their content and has the bandwidth to carry that content in the time allotted and the medium of transfer (being wired or wireless) and the receivers are all connected to the medium with a bandwidth sufficient to receive all the data stream with minimal processing from a channel dedicated to that content. On the other hand, broadcasting content over the Internet (or any other internetwork or network being used) cannot be done easily, as the Internet or network is essentially a point to point transmission medium, with some provision for point-to-multipoint or multipoint-to-multipoint transmission.
- For example, broadcast television deals with a breaking news event by gathering information, writing a script and putting a reporter on the air. The recipients of the breaking news (the television watchers) must wait for the broadcast television station to broadcast the information and they get only the data stream that that content provider chooses to present. When news breaks on the Internet, a large number of users will try to retrieve the news information (essentially as a large number of point-to-point transmissions of the same data stream), often swamping the servers and computing infrastructure of the content provider. This “flash effect” is not limited to breaking news, but is often encountered when live events occur, when new releases of popular software are issued or when a popular Web site is encountered. Herein, a “Web site” generally refers to a collection of pages presented as a unit, usually served from one or more coordinated servers having a particular network address and may also refer to the computers and infrastructure that serve the pages of the collection.
- The problems of current broadcasting approaches are described below, but first some background of client-server architecture is in order. Many networking and other computing systems have the processing and functionality of the overall system separated into “clients” and “servers” where the clients are computers, programs or hardware that initiate requests and servers are computers, programs or hardware that respond to requests from clients. There are exceptions, where devices or programs generally thought of as servers will make requests of devices or programs generally thought of as clients, but for the most part, in the client-server model, the servers wait around for requests, service the requests and then wait around for further requests. Clients are usually considered more independent actors, in that they initiate requests. It should be understood, however, that some devices or hardware could be clients at some times or for some purposes and servers at other times or for other purposes.
- In the context of an extremely basic broadcast infrastructure, a content server waits for a request from a content client and upon receipt of a request sends the requested content to the content client. This basic infrastructure is fine when one client makes a request of one server and the content fits in unused bandwidth of a channel connecting the client and server, but since most networks have more than one client or more that one server and share a limited bandwidth, the bandwidth needs to be intelligently allocated.
- From an infrastructure perspective, the flash effect is not very bandwidth-efficient, as many, many identical copies of the data stream are transported over the network to the many recipients requesting the data stream. This effect might not be a problem if the data stream is a few bits of data, but data streams of full-motion video and CD-quality audio are becoming more and more common.
- Several different approaches have been made in the past to provide for broadcasting over the Internet, but most have drawbacks that prevent their widespread adoption. Two key mechanisms for the Internet have been proposed and are in limited used to overcome the problems induced by the flash effect, namely, 1) caching and 2) server replication. Caching refers to a process of using a cache situated at strategic locations within the network infrastructure to intercept content requests from clients so that the content source does not need to provide every copy of the content. When a client requests content from a content server and the client receives the content from the content server, a cache in the network through which the content passes stores a copy of the content. When other client (or the same client) makes a request for that same content, the network infrastructure consults the cache to determine if a copy of the requested content exists in the cache. If the content exists in the cache, the request is intercepted before it gets to the content server and the cache instead services the request. Otherwise, if the content is not present in the cache, the request is relayed to the content server and the response relayed back to the client.
- Caching is useful when there is a high probability that the requested content would happen to be present in the cache. Since the cache has a finite storage capacity allocated for storing cached content, the cache will eventually have to discard some of its stored content to make room for more recent, or more popular, content. Many strategies have been proposed and are in use for managing the local store of the cache, e.g., deciding when to discard an object from the cache, when to “refresh” content (get a fresh, possibly updated copy of content from the content server), and so forth.
- Caching can be either transparent or nontransparent. With transparent caching, the client makes a request of the content server and the network infrastructure intercepts the request if the cache can serve the request. With nontransparent caching, the client makes the request of the cache (or more precisely, of a network node to which the cache is attached) and the cache serves the request, if it can, or forwards the request to the content server and then serves the client the content returned from the content server.
- The server replication mechanism involves replicated servers each holding copies of the same content being served. Preferably, the replicated servers are deployed across a wide area of the network and client requests to a content server are redirected to one of these distributed replicated servers to balance load and save network bandwidth. For example, if the clients making requests are all connecting to a network at one network entry point and the content server is at the far end of the network, the replicated servers might be located near the client network entry point so that the content does not need to travel the length of the network. These replicated servers may have some or all of the content contained at the origin content server and many variations exist for arranging particular servers in a replicated server deployment, for distributing content to the replicated servers from the origin content server, and for determining how clients are redirected to the appropriate replicated server.
- A similar content distribution problem involves the delivery of live streaming media to many users across the Internet. With live streaming media, a server produces a live broadcast feed and clients connect to the server using streaming media transport protocols to receive the broadcast as it is produced. As more and more clients tune in to the broadcast, the server and network near the server become overwhelmed by the task of delivering a large number of packet streams to a large number of clients. This task is unnecessarily duplicative, because the server is sending out multiple streams of the same data (one stream per client).
- The duplication exists because each connection from one client to the server is a “unicast” connection, i.e., a one-point-to-one-point connection. The basic connection between two points in a network such as the Internet is a unicast connection. Although unicast data may flow over many different paths (routes), it is identifiable as data from one source node at a source address to one destination node at a destination address. Because of this, each client needs its own connection to the server and the data stream is duplicated in the network by the number of clients requesting that data stream.
- Network multicasting partially solves the problem of unnecessary duplication of data streams. Multicasting at the network layer can be done over the Internet using IP multicasting protocols that are defined in the Internet architecture. With multicasting, a content server transmits the data stream as a single stream of packets addressed to a “multicast group” instead of sending individual copies of the stream to individual unicast addresses. While a client normally receives only packets addressed to that client's unicast address, a client interested in the multicasted stream can “tune in” to the broadcast by subscribing to the multicast group. In IGMP (the Internet Group Management Protocol), the client subscribes to an “IP Multicast” group by signaling to the nearest router with subscription information. The network efficiently delivers the broadcast to each receiver client by carrying only one copy of the data stream and fanning out additional copies only at fan out points in the distribution path from the source (the content server) to the receivers. Thus, only one copy of each packet appears on any physical link.
- Unfortunately, a wide variety of deployment and scalability problems have confounded the acceptance and proliferation of IP Multicast in the global Internet. Many of these problems follow fundamentally from the fact that computing a multicast distribution tree requires that all routers in the network have a uniformly consistent view of what that tree looks like. To use IP multicasting effectively, each router must have the correct local view of a single, globally consistent multicast routing tree. If routers have disparate views of a given multicast tree in different parts of the network, then routing loops and black holes are inevitable. A number of other problems—e.g., multicast address allocation, multicast congestion control, reliable delivery for multicast, etc.—have also plagued the deployment and acceptance of IP Multicast. Despite substantial strides recently toward commercial deployment of IP Multicast, the resulting infrastructure is still relatively fragile and its reach is extremely limited.
- Not only have there been substantial technical barriers to the deployment of a ubiquitous Internet multicast service, but there are business and economic barriers as well. Internet service providers have not had much success at offering wide-area multicast services because managing, monitoring, and provisioning for multicast traffic is quite difficult. Moreover, it is difficult to control who in a multicast session can generate traffic and to what parts of the network that traffic is allowed to reach. These problems become even worse when service providers attempt to peer with one another to offer a wider-reaching multicast service, as they have done with resounding success for traditional unicast service. Because of these barriers, the emergence of a multicast service that reaches the better part of the Internet is unlikely and such emergence in the near future is very unlikely.
- Others have proposed work-arounds to avoid the pitfalls of multicast, such as splitter networks. A splitter network is an application-level solution for transporting streaming-media broadcasts, where a set of servers is distributed across a network at strategic locations across the Internet. For example, a data distributor might co-locate splitters at an ISP's premises or make an arrangement with the ISP for a large-scale deployment within the ISP's network. For example, RealNetworks, of Seattle, Washington, provides for streaming media distribution. The distribution is at the application level in that a RealNetworks™ G2 server might send G2 data streams to G2 clients.
- These distributed servers are configured with a “splitting” capability, which allows them to replicate a given stream to a number of downstream servers. With this capability, servers can be arranged into a tree-like hierarchy, where the root server sources a stream to a number of downstream servers, which in turn split the stream into a number of copies that are forwarded to yet another tier of downstream servers.
- Unfortunately, a splitter network of servers is plagued with a number of problems. First, the tree of splitters is statically configured, which means that if a single splitter fails, the entire sub-tree below the point of failure loses service. Second, the splitter network must be oriented toward a single broadcast center, requiring separate splitter networks composed of distinct physical servers to be maintained for each broadcast network. Third, splitters are typically specific to one data stream format making the splitter platform dependent. For example, a splitter set up to carry RealNetworks™ data streams cannot distribute Microsoft™ Netshow™ data streams. Fourth, splitter networks are highly bandwidth inefficient since they do not track receiver interest and prune traffic from sub-trees of the splitter network that have no downstream receivers. Finally, splitter networks provide weak policy controls—the aggregate bit rate consumed along a path between two splitter nodes cannot be controlled and allocated to different classes of flows in a stream-aware fashion.
- Yet another approach to avoid the problems of multicast is to have the content broadcast to several locations around a network and have the client run a test to determine the least congested path to a server having the content of interest. The client then connects to the server showing the least congested path the client. While is this good for file-centric applications, as opposed to stream-centric applications, this approach has drawbacks. For example, while the client might find a server with low congestion, little or nothing is done to ensure that the server closest to particular clients has the data that those clients are most requesting. Another problem is that many applications are live broadcasts and thus delivery of the data is time-sensitive and the data needs to be moved quickly to the edge servers that are serving the clients that are interested in the live broadcast while limiting the amount of network congestion that occurs on the network that is not bound for users interested in the broadcasts.
- One embodiment of the present invention provides for an improved data stream broadcast distribution by using content peering.
- In a network interconnecting a plurality of content providers and a plurality of clients, for providing content to a client, each of the plurality of content providers is coupled to at least one content distribution network of a plurality of content distribution networks, wherein the client is coupled to at least one of the plurality of plurality of content distribution networks and a request for the content is sent from the client to a redirector node that receives requests, wherein a redirector at the redirector node provides an address for a server available to serve the requested content. When the client's content distribution network is a primary content distribution network for the content provider providing the requested content, redirecting the client to a server within the client's content distribution network. When the client's content distribution network is not a primary content distribution network for the content provider but the client's content distribution network has a content peering relationship with a primary content distribution network for the content provider, redirecting the client to a server within the client's content distribution network. When the client's content distribution network is not a primary content distribution network for the content provider and the client's content distribution network does not have a content peering relationship with a primary content distribution network for the content provider, redirecting the client to a server outside the client's content distribution network.
- The redirecting can be done using a domain name service (DNS) server that responds to requests for domain name resolution that include metadata encoding for the content being requested and/or attributes of the resolution request other than a domain name. Other possible mechanisms include application-level redirection or a new client network protocol for this application.
- The content distribution system can be independent of the content created, but sone systems might be set up for particular content, such as television and radio streams. The streams might be original broadcast signals or retransmission of over-the-air signals.
- A further understanding of the nature and advantages of the inventions herein may be realized by reference to the remaining portions of the specification and the attached drawings.
-
FIG. 1 is a block diagram of a generalized client-server network system. -
FIG. 2 is a block diagram showing the network shown inFIG. 1 in greater detail. -
FIG. 3 is a block diagram of a network with a routing structure. -
FIG. 4 is a block diagram showing a portion of the network ofFIG. 3 including servers coupled to routers in the network. -
FIG. 5 is a block diagram illustrating the network paths used for a client request for content and a subsequent server response with the content requests. -
FIG. 6 is a block diagram illustrating the use of a distribution network and a redirection fabric according to one embodiment of the present invention. -
FIG. 7 is a block diagram illustrating a content backbone anchored in a backbone ISP. -
FIG. 8 is network diagram illustrating a highly loaded a content backbone. -
FIG. 9 is a network diagram illustrating peering with APAR anycast redirector nodes. -
FIG. 10 is a network diagram illustrating the system ofFIG. 9 with an additional peering arrangement. -
FIG. 11 is a network diagram illustrating mutually affiliated content backbones. -
FIG. 12 is a network diagram illustrating an APAR-DNS redirection architecture. -
FIG. 13 is a network diagram illustrating incremental deployment of an APAR-DNS redirection architecture. -
FIG. 14 is a network diagram illustrating incremental deployment of an APAR-DNS redirection architecture where autonomous systems do not have co-located servers. -
FIG. 15 is a network diagram illustrating explicit redirection. -
FIG. 16 is a network diagram of a network where explicit redirectors are deployed across the edges of autonomous systems. -
FIG. 17 illustrates a conventional DNS architecture. -
FIG. 18 illustrates an CDSR architecture as extensions to an existing end-host architecture and TCP/IP Internet architecture. -
FIG. 19 is a network diagram illustrating an end-host invoking the CDSR system in the Internet infrastructure. -
FIG. 20 is a network diagram illustrating wide-area deployment of CDSR. -
FIG. 21 illustrates a combination of CDSR with traditional load-balanced Web servers. - A few examples of specific embodiments of content peering architectures according to the present invention are described herein. Others may become apparent after reading this description and it should be understood that the invention is not limited to these specific examples, but is limited only by the appended claims. Furthermore, while specific methods and apparatus are shown, it should be apparent upon reading this disclosure that some of the methods can be practiced using different apparatus and the apparatus shown could be used to perform different methods than shown.
- This description discloses how to make and use several embodiments of a system according to the present invention, but for brevity omits descriptions of many well-known components of such systems. For example, the operation and design of a standard TCP/IP network, standard TCP/IP clients and the like are not explicitly disclosed herein, as they well described in countless readily available sources.
- In the description below, like elements of the figures are referenced with like numbers. Distinct instances of like elements might be referenced with like numbers followed by distinct instance numbers in parentheses. This description is organized according to the following outline:
- 1. Existing Content Distribution Models and a General Network Architecture
-
- 1.1. Existing Content Distribution Models
- 1.2. Edge Servers
- 1.3. Content Distribution Service Providers (CSPs)
- 2. General Architectures for Content Distribution and Peering
- 3. Constructing a Network with Content Peering
-
- 3.1. Federated Redirection
- 3.1.1. Administratively Provisioned Interdomain Anycast Routing (“APAR”)
- 3.1.2. Content Backbone
- 3.1.3. Anycast Peering Configuration
- 3.1.4. DNS-based Content Peering
- 3.1.5. Explicit Redirection
- 3.2. Content Distribution Naming System
- 3.3. Content Distribution via Application-level Routing
- 3.4. Enhanced Server Capabilities
- 3.1. Federated Redirection
- 4. Client-driven Service Rendezvous (CDSR)
-
- 4.1. General CDSR Architectures
- 4.2. Wide-area Deployment
- 4.3. Staged Deployment
- 4.4. Web-server Staged Deployment
1. Existing Content Distribution Models and a General Network Architecture
-
FIG. 1 is an illustration of asystem 10 in whichclients 12 are connected toservers 14 via aninfrastructure 16. In the examples used here, the global Internet is used as one example ofinfrastructure 16, but it should be understood thatinfrastructure 16 is not so limited. For example,infrastructure 16 might be implemented as a subset of the global Internet, an intranet, extranet, local area network, Internet II network, or the like or an overlay on an existing network architecture. Also, while the TCP/IP protocols are used as an example for networking and data is shown, for example, travelling in packets,infrastructure 16 might be implemented using different protocols without departing from the scope of the invention. -
FIG. 2 showsinfrastructure 16 in greater detail, as a network with clients connecting to the network at entry points such as Internet Service Provider (ISP) points-of presence (PoPs) and content being provided at injection points. -
FIG. 3 illustrates one network connection wherein clients connect to the network atedge routers 38 and data travels through the network in “hops” where a hop is a data transfer from one router (anedge router 38 or an internal router 39) to another on its way from a data source to a data destination. -
FIG. 4 illustratesnetwork 36 in greater detail, showingservers 40 that reside withinnetwork 36 to respond to requests. Note that eachserver 40 is coupled to the network via a router so that data flowing among the routers can be received by and transmitted fromservers 40.Servers 40 need not be fundamentally different thancontent servers 14 shown inFIG. 1 , although they usually serve different purposes. - 1.1. Existing Content Distribution Models
- Data stream distribution is explained below, but first some background on existing content distribution models is set forth to explain the context of distribution in the novel system. It should be understood that, while many examples refer to the distribution of a data stream, the system could be also be used to carry nonstreaming data, such as files or blocks of data of defined length.
- In one common distribution model currently in use, Internet content is created and realized by authoring Web pages and placing them on a staging Web server, or by digitizing audio/video signals. This is generally illustrated in
FIG. 1 . Content is published into the Internet at injection points, labelled “I” inFIG. 2 . The injection points might comprise a production server that contains the data stream (or file or data block, as the case may be), ready for broadcast to many clients, with the production server being coupled to the source of the content (a Web page producer, digital camera, or other source) via a simple LAN connection or the like. In more complicated configurations, a data stream from a remote venue like a concert site or sports event might be transported across a dedicated link (e.g., a dial-up ISDN line, a leased T1 line, or a frame relay connection) to a production server facility where the data stream is placed on the production server. Once the content is published on the production server, any client on the Internet can access that content with a Web or streaming-media connection between the production server and the client. - The single production server model works only up to a certain scale. Because each client creates its own individual connection to the server, the server can easily become overwhelmed when serving up popular content. This is especially true when access is synchronized, e.g., for a live event, so that the server needs to simultaneously send many separate copies of the content to each requesting client. This not only overwhelms the throughput of the server but it also places undue burden on the network near the server site, which must carry the same content across the same network link many redundant times.
- 1.2. Edge Servers
- One common approach for overcoming this problem is to place server devices like Web caches or streaming-media splitters at or close to the “edge” of the network. For example, in a typical ISP network, the ISP has many interconnected nodes and some of the nodes are PoP (point of presence) nodes. A PoP node is a node that a customer of the ISP can hook onto to connect to the Internet. One common PoP node has a bank of dial-in modems to which customers can dial up and connect. Other nodes might be entirely internal to the ISP and be inaccessible to the customer. Typically, the nodes that are PoP nodes, or nodes one router “hop” away from a PoP (one hop “into” the ISP network) are considered “edge” nodes. ISP colocation systems (“colos” ) are also considered edge nodes, even though some of them are relatively deep in the network. Given this, programmable servers may be placed in an edge PoP to service nearby clients in an efficient manner. Servers placed in edge PoPs or close to edge PoPs are often called “edge servers”.
- In this model, the edge server captures the user's request for content and serves the content locally, thereby improving response time, reducing wide-area bandwidth consumption, and relaxing load on the production server. Where the production server is distributed so that multiple servers serve all the clients requesting content, the initial source of the content is often referred to herein as the “origin server” that serves the initial, official copy of the data stream. If the edge is defined as PoP nodes and nodes one hop away from a PoP node, then an edge server is at most one hop away from the nodes where the content is to be delivered. Of course, if the edge is defined to be “thicker” in that nodes more than one hop away, but less than N (N>1) hops away, are in the “edge”, then the edge servers might be as far as N hops away from a customer.
- If the edge is universally upgraded with servers in this fashion, then Internet services as a whole perform and scale better. Unfortunately, there is no single “edge” of the Internet that can be easily upgraded like this. The edge is owned by a vast array of independent service organizations with different business models and who cooperate only very loosely to provide global Internet connectivity. In current business models, Web content is generally published into the Internet through a hosting facility that is often distributed across the wide-area but not pervasively present across the edge. For example, as shown in
FIG. 2 , an ISP A owns a piece of the edge while ISP B owns another piece of the edge, so they can cover the whole edge only by working together. - Thus, implicitly, the Web hosting business relies upon edge-caching infrastructure to be deployed throughout the infrastructure to reduce the load on hosting centers and provide quality to users by serving content from the nearby network access points. However, current business models in the Internet do not tend to encourage every service entity to upgrade their edge with quality-enhancing technology like caches and splitters. This is done only when it makes economic sense for the service provider to upgrade, e.g., because the benefits of caching (reducing bandwidth costs and delivering better quality to the customer) outweigh the investment in installing and managing the new infrastructure. Certain ISPs, for instance, have not found this to be the case.
- Content providers find enormous value in having access to a serving device in the edge. This is true whether the content provider is a free (e.g., advertiser-supported) service or a paid service (with payment handled through conventional financial channels or using a micropayment system), as the content provider is always better off if their content gets to clients efficiently and correctly.
- If the content provider could arrange for their content to be always served from the edge of the network, then the consumers of their content would always receive as-best-as-possible performance from the Internet. Thus, the content provider would likely be willing to pay for such a service as it differentiates their content from their competition's through improved delivery performance and better serves the recipients to which the provider is broadcasting. However, existing Internet caching models do not provide coordinated control over what content is placed at the edge and that edge is owned and controlled by many different ISPs.
- 1.3. Content Distribution Service Providers (CSPs)
- A Content Distribution Service Provider (CSP) is a service organization that sells and provides Internet “content distribution service” to content providers. A CSP might contract with a content provider, such as Yahoo or CNN, to have Yahoo's or CNN's content (e.g., Web pages and streaming media traffic) efficiently replicated and served through the Internet thereby delivering high-quality experiences to recipients of that content. These CSPs typically build their content network by co-locating their servers in traditional ISP networks and redirecting client requests to nearby servers based on various metrics collected about the health of the network and server infrastructure. To effect the redirection system, content URLs often “point into” the CSP's service infrastructure rather than at the original content provider's Internet site. In effect, the CSP can now control what content is placed on its edge servers and provision its infrastructure to be able to serve the content of all of its customers at high levels of performance to arbitrary Internet users.
- For the CSP model to work, a centralized entity that owns and controls all of the distributed infrastructure must deploy and manage devices that penetrate the entire edge of the Internet by installing such devices along the edge of every independent ISP, to provide benefits to all recipients regardless of where those recipients'clients are connected to the Internet. However, this is virtually impossible as the Internet continues to grow and evolve. Even if such an entity were able to achieve some degree of success with this sort of global deployment, the resulting business model would be unstable and fragile because the ISPs themselves, who own the physical network infrastructure, will recognize the new business opportunity and, at least some of them, will want to enter the content-distribution market themselves. The result is a scenario in which the very entities that the CSP relies upon to build their service offering effectively become their competitors.
- Alternatively, the CSP may offer to allow the ISP to resell the CSP's service under the ISP's own brand, effectively partnering across ISPs to build out a global content-distribution system. Yet, this monolithic approach locks in each ISP to that CSP's content distribution technology. Since the CSP controls how content is distributed and replicated and how clients are routed to content servers, the ISP has no ability to forge its own relationships with other CSPs and/or ISPs. It is likely, then, that this business model will also be fragile and unstable.
- 2. General Architectures for Content Distribution and Peering
- To overcome the fragility of the business models in which an omniscient CSP coordinates the infrastructure of independent ISPs to effect content distribution, a far more stable and scalable business model is the “content peering” model described herein. Content peering eliminates or reduces the role of the CSP and allows ISPs to become the content carriers themselves. In this model, the ISP owns the relationship with the content provider and invests in its own edge server infrastructure to effectively provide high-performance content delivery to recipients of the content of the content providers. But, because each ISP only owns a piece of the overall Internet edge, they must all cooperate, through “content service-level agreements” (CSLAs), to serve each other content from the edge of their own network and provision enough resource on their edge to honor the CSLAs that they enter into with their content peers. That is, two ISPs, A and B, enter into a relationship where ISP A agrees to carry and “serve” ISP B's content customers, and vice versa. In other words, the ISPs enter into bilateral “content peering” relationships. Just as bilateral peering at the IP network layer enables Internet routing, bilateral “content peering” relationships will enable a new form of Internet and Web content routing and broadcast streaming.
- With content peering, a CSP is no longer needed to bridge together the existing ISPs' content distribution infrastructure. Instead, the CSP's role would be simplified to one in which it acquired and aggregated content. In turn, the CSP would provide “content feeds” to the ISPs content distribution network through content-peering relationships.
- As described herein, a set of ISPs can more easily than before develop their own content distribution service by peering at the “content level” rather than the network level. At the network level, individual packets of data (the content of which is entirely transparent to the network) route from router to router, from source to destination. In some cases, the source is in one network and the destination is in another network. An example would be if (referring to
FIG. 2 ) if a user connected to ISP A at client 12(1) sends a set of packets (e.g., an e-mail message) to a user connected to ISP B at client 12(4). Peering at the network level occurs over alink 29 provided between ISPs A and B, presumably in accordance with a network level peering agreement between A and B. Thus, the packets would route within ISP A to an edge router (not shown) coupled to link 29 and then flow to an edge router (also not shown) at ISP B, where they would be routed to client 12(4). Each router handling the packets has an idea of what direction to send the packets to, so they get on their way, but the routers do not generally know what the data in the packets mean. Since the routers form a network mesh, the routers might reroute a packet around congestion or router failure. -
FIG. 5 is a basic block diagram illustrating the elements of the network involved in a simple client-server request and response. As shown there,client 12 makes a request ofserver 14 throughnetwork 36 and the request flows through anedge router 38, aninternal router 39 and another edge router. The response flows through a similar set of routers. For content peering, we add another framework into the mix, referred to inFIG. 6 as theredirection fabric 50.Redirection fabric 50 works with adistribution network 52 and aserver array 54 to receive requests and get broadcast content delivered to individual clients.Redirection fabric 50,distribution network 52 andserver array 54 operate at a content level rather than at a network layer and thus form an application-level network. To reflect the different levels,FIG. 6 does not necessarily show all of the network layer details. For example,redirection fabric 50 might well include routers to route at the network layer.Redirection fabric 50 and/orserver array 54 might also be decentralized and spread over the whole network. - In this framework, the content is “routed” to the clients as content. The content starts at a
content server 14 and is injected intonetwork 36 at aninjection point 26. From the injection point, the content reachesserver array 54 overdistribution network 52. Becausedistribution network 52 is arranged as a network, the content can be scaleably distributed to many servers inserver array 54, with congestion or distribution node failure being routed around. - One model for a distribution network is the “overlay routing” approach described in McCanne I. In an overlay network, content can be injected at any attachment point in an overlay network of “service hubs”. This overlay network carries content from any injection point, which could be anywhere along an “edge”, to servers that are co-located within the network infrastructure and distributed across all the major ISP's, whereby each ISP can manage its own subset of this distribution network and interconnect service hubs through content peering virtual links.
- These service hubs initially may be placed in the core of the network, and over time, as the content distribution infrastructure carries more and more traffic, the servers can be incrementally pushed out toward the edge of the IP network enhancing many aspects of network and user-perceived performance. Thus, content can be efficiently carried across the network to servers near the end user which both enhances the quality of the user's experience (because content is delivered quickly with less loss) and the network efficiency (because content is efficiently replicated throughout the network infrastructure reducing the number of copies that are transmitted across congested network peering points and backbone networks).
- Another preferred component of a comprehensive content-distribution model is an efficient mechanism to attach a client to the most appropriate server. As depicted in
FIG. 6 , a redirection fabric “glues” clients to edge servers to provide the best possible content distribution path. The redirection fabric accounts for client proximity, network path characteristics, server load and utilization, and perhaps most important, policies based on content-peering service-level agreements to best decide how to attach the client to the service infrastructure. For example, when a client clicks on a Web link, the redirection system seamlessly routes that client's request to the best server independent of any client configuration or knowledge. - To realize this redirection model, URLs produced by the content provider reference not the originating site of the content but instead point abstractly into the redirection fabric (nontransparent redirection). This is accomplished by “anchoring” each content distribution network in one or more ISPs'networks that comprise a virtual “content backbone”, as shown in
FIG. 7 . That is, the content backbone anchors the URL namespace of the content distribution network rooted here using the APAR routing mechanisms described below. The distribution network is built across the content backbone by deploying application-level multicast routing devices within the service hubs in ISP data centers and forming an overlay network by peering these content routers across data centers using “virtual links”. Co-located with each content router are one or more content servers that serve live or on-demand streaming media as well as Web content. In essence, the content routers form an intelligent network that connects content injection points to all the edge servers within the content backbone. - Alongside each content router is a redirection node that publishes its presence to the network and indicates, in effect, the URL namespaces that it manages. Thus, when a user application attempts to communicate over the network with the URL in question, some nearby redirector node in the content distribution network intercepts the request. In turn, that redirector node routes the client to the most appropriate server based on load and network measurements that the redirector nodes continually gather in the background. Usually, the best server will reside near the redirector node, but if the local servers are fully loaded the system may redirect a client elsewhere. This redirection can be explicit through a direct communication between the client and the redirection system, but can also be implemented in some cases as an implicit redirection by using the DNS (Domain Name Service) lookup process to redirect clients.
-
FIG. 8 is an illustration of what happens with more and more users access the content backbone. As shown there, acontent backbone 91 servesmany clients 92 overindividual client connections 94 between the content backbone and clients, via ISP's. Also shown is the unicast peering links 96. The peering costs between the backbone network and neighboring ISPs will increase and the delivery quality will ultimately suffer. To avoid this, a peer ISP can build its own content distribution network using the present invention to “peer” with the content backbone to incrementally build out the content network. The content routers in this new deployment would then be configured to capture the URL requests that point into the cooperating content backbone. - Not only does this ISP's deployment of content distribution technology reduce bandwidth costs and provide better network quality to users, but it creates a new revenue opportunity by allowing that ISP to enter into the content distribution service. That is, the second ISP would create and own its own URL namespace anchored in its own content backbone. Then, its affiliate ISPs configure their content redirectors to capture the new URLs, assuming a business relationship exists to support this level of “content peering”. In effect, the content distribution architecture described herein allows any ISP to build their own content backbone and content distribution service offering, then peer with one another—at the content level rather than the IP layer—to effect arbitrarily large and wide-reaching content distribution networks.
- 3. Constructing a Network with Content Peering
- In this section, we describe one embodiment of the content-peering architecture outlined above. The system components include:
- 1) a “federated” redirection system that allows content requests to be routed to servers based on content-peering relationships among ISPs (based, in part, on the teachings of McCanne et al. I and II);
- 2) a naming system where URLs point into the redirection fabric and contain enough information to allow the service attachment point system to retrieve the content from the content distribution system;
- 3) a content distribution network comprising application-level content routers that support “wide-area multicasting” of data (as disclosed in McCanne et al. I and II); and
- 4) server technologies that are enhanced or extended to interoperate with the disclosed content-naming system.
- The system components will now be described in further detail.
- 3.1. Federated Redirection
- Content peering preferably uses a redirection system that maps onto the existing peering relationships among ISPs. One approach uses anycasting as part of the redirection process. Anycast routing uses the existing unicast routing infrastructure. Each content backbone is assigned its own anycast address (as the hook to capture content requests). Thus, any ISP can configure their ensemble of redirector nodes with this new anycast address to capture that content backbone's content requests. The content backbone serves as the default autonomous system (“AS”) for all requests that do not emanate from or traverse a content-distribution-enabled ISP. Administratively provisioned interdomain anycast routing can be used to make the content backbone span multiple autonomous systems.
- As described herein, there are several approaches to redirection. Once such approach uses DNS (Domain Name Service) servers to effect the redirection. Using that approach, DNS servers can be assigned an anycast address and thus fit into the content-peering model. Using N* configuration, an ISP's DNS server can decide to route certain requests to the edge of the ISP and other requests to a main hub and yet other requests to its content peers (depending on the provisioned policies).
- One aspect of a scalable and efficient content peering implementation might be a seamless redirection model that accounts for the administrative policies and boundaries of the infrastructure that comprises the content distribution system. In that model, a content distribution network (CDN) is built as a virtual network that spans multiple, perhaps independently administered, sub-CDNs. In effect, this network of CDN networks forms a “Content Internet”, since the sub-CDNs are internetwork into one massive CDN.
- 3.1.1. Administratively Provisioned Interdomain Anycast Routing (“APAR”)
- Administratively Provisioned Interdomain Anycast Routing (“APAR”) refers to a unicast routing technique used in the redirection system. A variation of APAR is described in McCanne et al. II. When APAR is used, each CDN is assigned a small number of anycast addresses. An anycast address is a single unicast IP address shared across multiple distinct physical entities. These distinct physical entities are configured to participate in the unicast routing protocols and the net effect is that packets sent to that anycast address are routed to the nearest device assigned said address.
- To extend this approach across the wide area, one or more BGP autonomous systems (AS) are configured to advertise these special anycast addresses. Thus, anycast routing is also carried out at the interdomain level, since BGP will compute the shortest path (constrained by BGP policies) to the multiply-advertised address.
- To facilitate the deployment of this approach, a block of unicast addresses could be allocated exclusively for APAR, thus allowing ISPs to easily define policies for these special anycast addresses. For example, IANA might initially allocate a /20 address block (i.e., a block of 4096 IP addresses) to be used for APAR. Thus, an ISP can be sure that the anycast routing state never exceeds 4096 entries (but is likely to be far less in practice because not all addresses will be used and subranges will mostly likely be aggregated). This overcomes a problem where some ISPs use BGP policies to block routes with prefixes longer than 20 bits to avoid the case that some ISP in the Internet floods the BGP routing tables with many unique long-prefixed addresses. Instead, those ISPs can alter their policy to still block such prefixes while only allowing through long-prefix routes that fall within the reserved, well-known APAR anycast address range.
- 3.1.2. Content Backbone
- Each CDN has an associated “content backbone”, which is the set of AS's that advertise the anycast address(es) associated with that CDN. Within the content backbone, devices are deployed that are assigned the anycast address(es). Such devices might be Web servers, streaming-media servers, application-specific redirectors, DNS servers, the virtual address of a layer-4 switch load balancer, and so forth. Thus, any packet sent to such an address (whether it is a “stateful” TCP service connection or a “stateless” UDP transaction like DNS) is routed to the nearest instance of anycast-addressed device.
- For example,
FIG. 9 shows a configuration wherecontent backbone 1 is deployed inAS 100 using anycast address A*, whilecontent backbone 2 is deployed across AS's 200 and 300 using anycast address B*. As shown inFIG. 9 , B* advertises BGP routes. Devices A1* and A2* are assigned the anycast address A* and devices B1*, B2*, B3*, and B4* are assigned the anycast address B*. (Anycast-addressed devices also have a normal unique IP address assigned to them for network management access and so forth. We call this address the management address.) A packet sent to address A* is routed to the closest device inAS 100, whereas a packet sent to B* is routed to either AS 200 or 300 (depending on the BGP route preference). For example, if host C1 sends a packet addressed to A*, it is routed to device A1* alongpath 101. Likewise if host C1 sends a packet to B*, it is routed to device B1* alongpath 102. In contrast, if host C2 sends a packet to B*, it is routed to device B3* alongpath 103. - 3.1.3. Anycast Peering Configuration
- The CDN system described above may then be extended into other AS's (as described in McCanne et al. II) by creating affiliate relationships between the content backbone and another AS. To do so, the affiliate deploys (or reconfigures its existing) anycast-addressed devices with the anycast address block owned by the content backbone in question. In turn, these devices advertise the corresponding anycast route into the AS's internal gateway routing protocol (IGP), but these routes are not allowed to propagate into the external BGP routes of that AS (otherwise it would be considered part of the content backbone under our terminology). Thus, packets addressed to the anycast destination that originate from hosts within that ISP's network or such packets that transit the ISP's network will be routed to the nearest anycast-addressed device.
- This approach allows the same physical infrastructure and devices to be re-used across multiple independent CDNs. For example,
FIG. 10 shows a variation of the layout shown inFIG. 9 altered so that AS 400 becomes an affiliate forContent Backbone 1 and AS 500 becomes an affiliate to bothContent Backbone 1 andContent Backbone 2. Here, anycast-address devices inAS 400 are configured to advertise address block A*, while similar devices inAS 500 are configured to advertise both address blocks A* and B*. Now, if client C2 sends a packet to address B*, it is routed to device B5* alongpath 111. Similarly, if client C2 sends a packet to address A*, it is routed to device A5* alongpath 112. Thus, AS 500 captures the packets within its domain by virtue of the IGP route thereby avoiding the need to route the request all the way to the content backbone. - Moreover, the two content backbones can peer with one another, as shown in
FIG. 11 , wherein they each become an affiliate of the other. Here, AS 100 would be an affiliate forAS 200 and AS 300, and AS 200/300 would become affiliates forAS 100. This is accomplished by deploying anycast-addressed devices B5* inAS 100, A3* inAS 200, and A4* inAS 300 and modifying the IGP of the respective AS's to capture the other content backbone's traffic. - 3.1.4. DNS-based Content Peering
- The APAR routing system described above can be used to effect one kind of content peering based on specialized DNS servers, which we call herein a “APAR-DNS server”. In this model, the APAR-DNS server is configured with one or more APAR anycast addresses and thus appears as a name server on one or more CDNs. In other words, the APAR-DNS server is typically a single piece of physical infrastructure, either owned by the ISP where the device is situated or owned by a third-party that co-locates the equipment in the ISP's network, that supports multiple virtual CDNs that are owned by third party content service providers, or perhaps, by other ISPs.
- The CDN backbone then configures the DNS so that some subtree of the DNS namespace is authoritatively managed by the nameserver with an APAR anycast address. In other words, the namespace is managed by the federation of APAR-DNS servers that are configured with that anycast address and function as the authoritative name servers for the DNS subdomains in the subtree. This is accomplished by simply publishing the desired anycast address as a nameserver (NS) DNS resource record for the desired CDN sub-domain (see below).
- In prior art, DNS servers map a finite set of configured names onto a finite set of host addresses. Extensive research and product development has generalized this model so that DNS may be used for various sorts of load balancing, Web content replication, and so forth, but in all of these approaches, the input is a name that must be known ahead of time and explicitly configured into the naming system.
- Unlike this prior art, the APAR-DNS servers need not be configured with a set of known names that are to be mapped to a candidate set of addresses. Instead, APAR-DNS servers can map an unbounded set of arbitrary names, expressed in a fashion that encodes information about the content request, onto a set of address targets. The targets are configured into the APAR-DNS servers along with attributes that describe their capabilities, administrative constraints, and so forth. The configuration of targets and related attributes can be dynamically modified using an external protocol (an APAR-DNS management protocol).
- In addition, policies are programmed into the APAR-DNS servers to control the mapping of named service requests onto targets. To properly load balance requests across the service infrastructure and avoid hot spots of network congestion, server load information and network path characteristics between the APAR-DNS servers at the edge of the network (near the client) and the service infrastructure may be fed into the APAR-DNS server from some external data collection process.
- The APAR-DNS server programmatically maps a name-to-address translation request into a target by:
- 1) parsing the name to determine the meta-information M related to that named service;
- 2) finding the candidate set of targets in the configured database that match M;
- 3) pruning the candidate set based on configured policy, server load measurements, and network path measurements;
- 4) selecting a member of the final set based on additional policy;
- 5) returning the selected address (or set of addresses) as a DNS A record to satisfy the DNS request (typically with a TTL of 0 so that the entry is used only once).
When using the above process, DNS names can be structured as follows:- <codepoint>. <provider>
where <codepoint> defines the meta-information M described above, and <provider> is the DNS sub-domain corresponding to the CDN network. The <codepoint> field conveys information such as application type (e.g., Web, G2 streaming video, stock quotes), the customer (e.g., Yahoo or ESPN), the size of the object, the class of the object, and so forth. This encoding scheme can be generalized in many ways that adheres to the proposed architecture. The <provider> field is simply the DNS sub-domain of the CDN network (e.g., cdn.acme.net). That is, names with the suffix cdn.acme.net are resolved by APAR-DNS servers that choose the most appropriate targets based on externally configured policies and dynamic network and server measurements. Thus, the name of a Web object owned by “ABC” and distributed over the “ACME Networks” CDN might have the structure: - ad102.web.abc.cdn.acme.net
- <codepoint>. <provider>
- To resolve this name, the DNS query mechanism would learn that cdn.acme.net is handled by an authoritative name server with some APAR anycast address, say N*. Then, when a client went to fetch an object referenced with this name, the DNS query for ad102. web.cdn.acme.net would be sent from that client to N*, causing the request to be routed to the nearest APAR-DNS server configured to handle requests for cdn.acme.net. For example, in
FIG. 12 , suppose N1*, N2*, and N3* are APAR-DNS servers configured with the APAR anycast address N*. Note that N3* advertises BGP APAR anycast routes (shown by the label N*″). Client C1's DNS request is routed to N1*, while client C3's request is routed to N3*. C2, on the other hand, maybe routed to either N1* or N2* depending on whether the BGP route for N* from AS 200 favors AS 400 directly or AS 400 via AS 100, which can be administratively controlled with BGP routing policies. - Within this framework, the different N*'s may be programmed with different policies. For example, N1* may be configured to choose server S1 or S2 for this request since S1 and S2 are near the requesting client. But for other name requests (e.g., ad102.web.nbc.cdn.acme.net), N1* may decide to return server S4, which is farther away and therefore provides potentially lower quality of service. Such a policy would be useful where one customer of the CDN network (in this case, NBC) buys a lower-grade service (compared to ABC for instance). Because the customer information is explicitly encoded in the name, such decisions can be made as part of the DNS lookup process.
- To ensure the integrity of the information in a name, the names can include a digital signature embedded in them, where the key used to generate the signature is known only to the name-generating entity (i.e., the customer of the CDN network) and the infrastructure (i.e., the APAR-DNS servers). Thus, a user could not change the nature of its received service by tricking the infrastructure to treat the request with a quality-of-service that was not intended. Likewise, to conceal information conveyed in the name (which may be desirable for the CDN service provider or its customers), the <codepoint> field may be encrypted, also with a secret key.
- In addition to customer information, the name might denote a special type of service that is requested. For example,
- chan4.abc.tv.cdn.acme.net
- might indicate that the name corresponds to a streaming media channel rather than a static Web object. Thus, when the APAR-DNS server performs the name resolution it would choose a streaming-media server as the target rather than a Web server.
- Note that in neither of these cases is the name ad102.web.abc.cdn.acme.net or chan4.abc.tv.cdn.acme.net explicitly configured into the system. Instead, the dependency between names and resources is explicitly broken and targets chosen based on flexible and programmable policies. That is, ABC might create new content entries with new names (e.g., ad103.web.abc.cdn.acme.net) and would not need to explicitly register this name with the CDN. Instead, the CDN would simply react to the new name appropriately upon seeing its first use.
- As part of this process, the APAR-DNS servers may maintain state about the location of a piece of content. That is, some external agent may disseminate explicit location information for given objects to optimize the amount of replication that occurs. Or the APAR-DNS servers may simply remember where they have recently directed clients and continue to direct future requests to the same place to avoid creating unnecessarily redundant copies of content (while monitoring the server load and creating copies only when server load warrants).
-
FIG. 13 illustrates how the APAR-DNS redirection architecture can be incrementally deployed. Initially, N1*, N2*, and N3* are deployed only within the content backbone. Co-located with each APAR-DNS server is a content server (S1, S2, and S3 respectively). Moreover, they are situated near the ISP's peering points thereby allowing the system as a whole to know what the closest peering point is for the client that is requesting the service. Thus, when a client name request arrives at node N2*, for example, that server would preferentially return address S2 for the requested name. However, if S2 were overloaded, N2* could be informed of this (either by querying load on S2 itself, or by being informed of the overload condition by some other agent) and could instead direct clients to alternate servers (e.g., S1 or S3). - To aid in incremental deployment, APAR-DNS servers may be deployed in AS's where there are no co-located servers. For example,
FIG. 14 shows a configuration where AS 100 and AS 200 comprise the content backbone with servers S1, S2, S3, and S4. AS 300 is an affiliate with no servers. However, N3* may be configured to utilize servers S1, etc and can enhance the quality of service delivered to customers on or downstream ofAS 300 by choosing the appropriate server based on dynamic server and network measurements, replication constraints, and configured policy. - Another possibility is for N3* to utilize servers not owned by the CDN in question. Thus, N3* can be configured to prefer servers S1, etc., unless performance degrades, at which point it can decide to divert requests to servers X1, X2, which may be owned by another CDN network or by the ISP that owns AS 300. Because all of this is controlled by policy that follows from content-peering service level agreements, settlement payments can be easily effected to account for the resources that are shared among peering CDNs. Ultimately, the performance of an Internet of CDN networks will be most effective when this technology is universally deployed. In that model, every ISP would enter into CDN peering arrangements and serve and carry content from many different content providers on behalf of many different CDN providers.
- 3.1.5. Explicit Redirection
- DNS servers often cache name-to-address bindings to improve the performance of translation process and reduce bandwidth. However, caching causes the server selection decision to become stale. This may be an acceptable trade-off to make for the Web, since Web transactions are ephemeral and the system may gracefully adapt to overload on a time scale that is related to the rate at which the cache entry will expire. However, a stale redirection decision is decidedly unacceptable for other types of traffic like streaming media or long-lived file transfers (e.g., large Web objects or music downloads) where a client remains connected to the selected server for a long duration.
- While caching can be defeated by using a TTL of 0 in the DNS response message, this could potentially cause an unreasonable performance load on the DNS system unless APAR-DNS servers are universally deployed, which is not expected in the initial roll-out of such systems. Some ISP's configure their DNS servers to ignore the TTL field, so it might not be possible to entirely avoid caching. Even if caching is avoided, using non-cacheable DNS responses will worsen the overall response time of Web transfers since the DNS translation step can often be substantial fraction of the overall Web transaction (especially for small Web objects), and this prevents the DNS server near the requesting client from caching the translation step for other clients. Thus, it is important to use DNS record caching to achieve good overall performance of a CDN, but might result in the use of stale data.
- Suppose the APAR-DNS server chooses some streaming media server S to handle a particular streaming-media feed and thus returns it. Further suppose that response is cacheable for one minute. Now consider the case where 5000 clients all happen to request that same feed in the next minute. Since the mapping for S is cached in the normal DNS system (which is unaware of the CDN), S will be the target of 5000 client connections. If this exceeds the capacity of that server, then client performance will degrade or the clients' connections will be rejected.
- To overcome this problem, explicit redirection could be used in place of (or in combination with) DNS-based redirection. Here, redirection modules are deployed as anycast-addressable devices, just as the APAR-DNS servers were deployed above. An application-specific connection request (e.g., via HTTP or RTSP) is then sent from the client to an anycast address, which then redirects the client to an appropriate server. In this case, an explicit redirection step is always involved avoiding the staleness of cached DNS bindings. That is, a redirector can continually monitor the server infrastructure and change its redirection behavior immediately to reflect changes in load or network path characteristics. This process is disclosed in depth in McCanne et al. II.
- Explicit redirection can be combined with APAR-DNS redirection to achieve the best of both approaches. In the description below, we assume an APAR-DNS system is already deployed. If such a system is deployed, rather than return a DNS mapping to a specific server, the APAR-DNS server could return a mapping to an explicit redirector that does fine-grained server-monitoring and load balancing.
-
FIG. 15 illustrates this configuration. Here the same streaming media request is served from server S2 to client C2 in AS200, but from server S1 to client C1 in AS100. In the former case, client C2 performs a DNS query on the service name, which is routed to APAR-DNS server N2* via address N* (path 21). N2* parses the service request and decides, based on configured policy, that redirector R2 can provide the requested service and thus returns an A record for R2's address in response to the original request (path 22). Client C2 then invokes an application-specific connection (e.g., HTTP) to R2 (path 23) which responds with a message (path 24) that directs the client to create a streaming-media request (e.g., via RTSP) to server S2. Note that the redirector R2 would be configured with its own set of policies and potential target servers for directing clients accordingly. Similar steps would be taken for client C1, as shown by paths 11-16. - Alternatively, the APAR-DNS server could return an APAR anycast address of a set of redirectors. This would allow a scenario in which one APAR-DNS server was deployed in the core of an AS, while a number of explicit redirectors were deployed across the edge, as depicted in
FIG. 16 . Here, N1* is configured to return an address A* (which is assigned to A1*. . . A3*) in response to streaming media requests. Then, a client request, say from C1, would be routed to the nearest explicit redirector, in this case, A2*. A2* would then decide how to explicitly redirect the client as described above. A similar process is carried out for the network that contains N2*. - 3.2. Content Distribution Naming System
- Normal URLs that point to the content servers (the origin servers) cannot always be “captured” by a redirector. For example, if a client makes a request using a URL that points into the redirection fabric, the redirection fabric doesn't immediately know the origin for the request (because the origin address is replaced with an anycast address). Thus, a better approach is to include additional information in the URL that can be used to identify how to locate the content, who the customer is, and so forth.
- In the Web architecture, a Web object's name is decomposed into a server name and a path on that server expressed most commonly as a URL. However, the redirection system described above relies upon mapping the server name of the Web object (or content request in general) to an arbitrary service node within the network infrastructure. Thus, the server name might no longer uniquely identify the content in question.
- To overcome this problem, the typical redirection systems used by others that obfuscate the server address in this fashion recover the original intent of the Web naming system by embedding additional content-naming information into the path component of the URL. For example, a Web object conventionally referred to as
- http://www.foo.com/index.html
- could be referred to as follows with respect to the CDN:
- http://foo.cdn.acme.net/www.foo.com/index.html
- This representation then allows the ACME networks CDN redirection system to route client requests for this object to some arbitrary server in the CDN. Upon receiving the request that server would be able to pull the content from the origin server at www.foo.com. Of course, this approach can be generalized to embed arbitrary content routing and policy information in the referring URL.
- A better approach, which provides a higher degree of flexibility, is to add a level of indirection where the URL contains the name or address of a server that provides arbitrary information as to how the content request should be handled. For example, a service request for a live broadcast could be represented with the following URL
- http://foo.cdn.acme.net/cdn.foo.com/Channel12
- Here, cdn.foo.com points to a server that manages the information base for how content requests should be handled. The service node that receives this request could contact cdn.foo.com to query it as to how the “Channel12” content request should be serviced. That server could then respond with a message that tells the service node to join a particular application-level multicast channel to receive the broadcast (see below) or alternatively to pull a cascaded feed from a streaming-media server elsewhere in the network. By adding this level of indirection, an arbitrary amount of content meta-information could be associated with a URL without having to place this information specifically in the content provider's URLs. Also, this meta-information can be changed dynamically, e.g., to alter the way a broadcast is distributed based on congestion or network outages. Finally, the performance of this directory system could be optimized by caching results and/or disseminating the information across the application-level multicast network that might form an integral part of the CDN offering in the first place.
- 3.3. Content Distribution via Application-level Routing
- Application-level multicast routing can be used to deliver live content and to induce a caching hierarchy for on-demand driven content replication. Application-level multicast routing can also be used to disseminate content routing polices, server load information, replication information, and so forth to the redirectors (i.e., the redirectors join an application level multicast group to learn about how they should be doing their redirection).
- The techniques above for client redirection refer to servers generically, but in a CDN, the servers typically act in concert with other elements in the network to bridge content from the publishing sites across the network to the CDN servers. As such, a more powerful model is to cast the servers as access points to an application-level content network as described in McCanne et al. I. In this model, the client requests are routed to service node attachment points based on server load measurements, network path characteristics, administrative locality, customer policies, and so forth. Content is routed across an application-level network of content routers. Additional layers of naming and addressing may be implemented to overlay this content network onto the underlying Internet.
- When a client requests service, for example, the request (expressed as a Web URL) contains enough information to properly request the content from the application-level content routers as described above. For a live streaming media broadcast, for example, the service attachment point will need to retrieve the broadcast from the distribution network in a fashion that allows the system to scale with the number of access points. To achieve this, a distribution network is interposed between the broadcast injection points at the service attachment points. Rather than rely upon a globally deployed “multicast” network service, the system described herein instead re-uses the service infrastructure to bridge together service hubs across the wide area into an “overlay network”. This overlay computes multicast routes at the application-layer that efficiently splits and replicates live flows across the wide area from every injection point to every service attachment point based on a subscription model. A network-layer (native) multicast may be used recursively by the application-level content distribution system as an optimization where available.
- An application-level multicast network is not only useful for routing live content across the wide area, but it also can be used to route on-demand Web and streaming-media traffic asynchronously. In this model, a multicast route from an injection point to all edge locations induces a caching hierarchy, where a cache miss is routed up the tree toward its publishing site. That is, when a cache (E) at the edge of the network needs to fetch a piece of content, say from some source (S), that edge device consults the application-level multicast route for the spanning tree rooted at S. This route indicates the parent node (P) in the tree on the path back toward S and the edge device in turn sends the content request to P. Then, P consults its cache to see if the content is present, and if so, delivers the content along the tree back to E, where each node along -the reverse path stores a copy of the requested content. If the content was not present at P, P propagates the request up the tree according to the multicast route, and so on. This dissemination model scales nicely because each node in the tree requests a given content item at most once, but over time, the entire edge of the network becomes populated with the content.
- Alternatively, the multicast mechanism can be used to “pre-fill” caches at the edge of the network, using hop-by-hop reliable multicast. (In contrast to network-layer multicast, an application-level service infrastructure allows richer forms of reliability to be implemented on a hop-by-hop basis.) Here, certain caches at the edge of network belong to one or more application-level multicast groups. At the content origination site, new content updates are published onto a group, which is reliably disseminated to all the caches that have subscribed to that group. In addition, the redirection system is informed of the cache updates so that clients are redirected to caches that have the requested content. Thus content changes or additions are efficiently disseminated to large portions of the edge caches using application level multicast.
- One of the elements of an effective contribution system is the efficient exchange of information across the various components that comprise the overall system, e.g., disseminating server load information to redirectors, content replication decisions across the system, network path measurements, and so forth. To this end, the application-level multicast content distribution mechanisms could be re-used to distribute this meta-information across the system components. For example, all the redirectors within a “domain” might subscribe to a common multicast group and exchange load information across that group. Likewise, when a system eliminate decides to replicate a piece of “active” content to another server, that replication event could be made known to all the redirectors by publishing the event over the multicast infrastructure. In turn, the redirectors could then direct clients to the new copy of the content.
- 3.4. Enhanced Server Capabilities
- As shown in
FIG. 4 et seq.,servers 40 are embedded ininfrastructure 16, and thoseservers 40 are fed by distribution network 52 (shown inFIG. 6 ) andredirection fabric 50 redirects clients to edge servers. If the URL conventions described above are used, such as making a reference in a way that the redirection fabric can deduce the origin, then a conventional web cache or streaming media server might not be able to pull down the original content. Thus, these servers are extended with simple rules for how to resolve the content request via the conventions in the URL. For example, a redirection-aware Web cache would parse the URL path and determine that it should go to a particular Web server in the network to pull down the content. Alternatively, the cache may consult a database (through another anycast-type directory system) that tells it where to fetch the content from or the cache may be configured to pull the content from the content network, e.g., by making the content router look like its parent Web cache and serving the request by pulling the content across the application-level content network. - Another example is live content like streaming media. Here, the edge server could parse the URL to find the streaming-media “channel information”, which might be an application-level multicast group. To receive the live broadcast, the edge server would subscribe to the application-level multicast group using the techniques described in McCanne et al. I.
- One of the challenges imposed by the CDN architecture described herein is that the DNS system is re-used to perform client redirection, thereby causing the original location of the content to be lost. To overcome this, additional content identification information can be carried elsewhere, e.g., by embedding it in the URL as described earlier. The downside of this approach is that devices that rely upon the conventional URL semantics fail to work, e.g., a Web cache cannot fetch the original content from the host address specified in the URL.
- To deal with this, legacy devices must either be configured such that they can offload this problem onto a “CDN-aware” component, or they must be altered to conform to the new architecture. In the former approach, for instance, a Web cache might be configured to utilize a CDN-aware content router as its parent using the Internet Caching Protocol (ICP), a scheme that virtually all commercial caches support. When such a cache receives a content request for content not already in the cache, it passes the request to the ICP parent, which could respond with the data in question by interpreting the modified URL, pulling the content across the CDN network, and returning the fetched data to the requesting cache.
- Alternatively, existing server technology can be extended with rules for how to resolve the content request via the conventions in the URL. That is, a new URL format could be defined such that web caches could recognize the special format and handle the request according to the new semantics, e.g., on a miss, the cache fetches the content from the server location embedded in the URL. Or, the cache could be extended with protocols that conform to the CDN network and could directly fetch the content across the CDN. Similarly, for live content, a modified streaming-media server could subscribe to a broadcast by joining an application-level multicast group that is either embedded in the URL or retrieved from a directory using meta-information encoded in the URL.
- 4. Client-Driven Service Rendezvous (CDSR)
- 4.1. General CDSR Architectures
- While the DNS-based redirection and explicit redirection schemes described above provide viable approaches to content peering based on APAR routing, they also have some limitations. In the DNS approach, for example, users often misconfigure their hosts to use DNS servers that are in other service provider networks either accidentally (e.g., because they change providers without updating their DNS server address) or deliberately (e.g., because their provider's DNS system exhibits poor performance). Even when a host is properly configured with the topologically nearest DNS server, the accuracy of DNS-based redirection is only as good as the granularity of coverage of DNS servers. For example, an ISP may deploy just one DNS server for its entire autonomous system. In this case, all redirection decisions for all the customers of that ISP will be performed with respect to that one DNS server. Moreover, DNS servers often cache name-translation results even when the DNS response packet indicates a time-to-live value of 0. Thus, when responding to a service request, an APAR DNS server cannot ensure that only one client will attach to the chosen server for a given redirection transaction. Because of this, the number of clients that attempt communication with that server cannot be easily controlled. Finally, clients often cache name-to-address translations within the application itself since they assume that DNS provides a stable, (almost) static mapping from names to addresses. In this case, if a server fails and the client attempts to contact the failed server, the redirection system has no opportunity to return an alternative address for the failed server.
- The explicit redirection process is computationally and memory intensive (compared to transactional redirection like the APAR DNS approach) because it involves establishing a TCP connection, assembling the request message from arbitrary TCP packets, parsing the application-level protocols that comprise the request message, responding with a properly formed redirection message, and closing down the connection. In contrast, a transactional redirection system involves merely receiving a single request packet, parsing its contents, and responding with a single reply packet. There is no pending connection state or protocol processing that must occur across a sequence of packets. Moreover, explicit redirection is based on somewhat cumbersome application specific protocols that are inflexible in terms of their scope of use. For example, once the redirector directs a client to a particular server, that client-server relationship is fixed. Thus if the server fails or the network path between the client and server suffers performance problems or failure, then the client has no recourse to reconnect to an alternate site because the redirection system is no longer involved in the server-client communication.
- To overcome these problems, redirection can be recast as a core and fundamental piece of the Internet infrastructure just as the DNS system is a core and ubiquitous part of the Internet. With DNS, every host on the Internet includes logic and configuration state that allows any Internet host to interact dynamically with the infrastructure to perform name-to-address translations. That is, a host is configured with the IP address of a DNS server, which performs name translations on behalf of that client—the client interacts with intelligent agents (i.e., name servers) in the infrastructure to obtain this service.
-
FIG. 17 illustrates this architecture. Here, applications invoke a stub resolver on the end-host that in turn interacts with DNS server agents in the network infrastructure. All of these agents use the underlying IP packet forwarding service to intercommunicate. - A ubiquitous redirection system can be built according to the same philosophy as depicted in
FIG. 18 . In this model, applications interact directly with a redirection stub that runs natively on the end-host. In turn, this redirection stub communicates with intelligent agents in the network infrastructure to carry out explicit redirection functions on behalf of the client. Because a new interface to the redirection system is created and applications are specifically designed to interact with this subsystem, the problems associated with transparent forms of redirection are eliminated. For example, applications can include specific logic to reinstantiate service connections to failed or faulty servers. This approach to redirection is called “client-driven service rendezvous” (CDSR) since the end client is actively involved in the redirection process. - When built upon the APAR routing system described earlier, CDSR provides a scalable and incrementally deployable framework for large-scale content peering in which different service providers own and operate different pieces of the physical infrastructure to enter into peering arrangements at the content level. In this model, the APAR routing system described earlier can be used to effect content peering using a client-driven redirection agent, which we call herein a CDSR redirector. Here, a CDSR redirector is configured with one or more APAR anycast addresses. As with APAR-DNS, the CDSR redirector is a single piece of physical infrastructure, either owned by the ISP where the device is situated or by a third-party that collocates the equipment in the ISP's network, that supports multiple virtual CDNs that are owned by third party content service providers, or perhaps, by other ISPs.
- To support CDSR redirection, client applications are modified to interact directly with the redirection system by invoking a redirection stub on the local host. This stub in turn communicates via APAR anycast routing with CDSR redirectors in the network infrastructure. This dialogue occurs as a simple, single-packet request-response interaction so that the transaction is stateless and thereby avoids problems associated with route flaps (i.e., where a route flap causes a sequence of anycast packets to be routed to distinct physical hosts, which would otherwise disrupt a stateful transaction).
- There are many possible ways that a client might perform this service rendezvous task, but one such mechanism could build upon the widely accepted method of referring to content resources and services with URLs. In current art, an application like a Web browser or streaming media player parses a URL into a server component and relative path component. The server component is typically resolved with the DNS system to the IP address of the server. The application then initiates a TCP connection to that server and issues a request for the object indicated by the relative path component using an application-level protocol like HTTP or RTSP. The object is then received or streamed over the connection to the client or over an adjunct connection that is created as a side effect of the original transaction.
- Under CDSR, the client uses an alternative approach. Rather than parsing the URL into server and path components and initiating a connection to the server, the client presents the entire URL to the CDSR stub, which in turn, sends a service request packet to the nearest CDSR redirector in the network infrastructure. The nearest redirector is located implicitly through the use of APAR anycast routing. That is, the packet is sent to some anycast address, say A*, associated with the CDN backbone that hosts the content referenced by the URL in question. There are many possible methods for obtaining the address A*, but one such method would be to embed the address in the URL according to well-known conventions, e.g., as part of the path or as the server address.
- For example, a URL that referred to a news feed (called “news.rm”) available on “any” node on the ACME Networks CDN could have the following form:
-
- rtsp://any.cdn.acme.net/news.rm
- Here, the client would inspect the host component of the URL “any.cdn.acme.net” and determine through some mechanism that this URL refers to a CDN backbone rather than a specific server. There are many possibilities for making this determination, but one such mechanism would be to define a well-known set of IP address to serve as APAR anycast addresses. For example, LANA may set aside a special range of unicast addresses from the IP address space specifically intended for APAR anycast routing. Or, a static set of addresses may be allocated by various service providers and configured into the end-host applications either through static compilation or by dynamic download updates across the Internet. With these conventions, the client could directly infer by inspection of the address that it should use the CDSR system for service rendezvous rather than the conventional methods. Alternatively, the DNS might include a special attribute that indicates that a particular DNS subdomain is managed by the CDSR system.
- Continuing the example, suppose any.cdn.acme.net resolves to the IP address A*. Then, the client sends a CDSR request packet over UDP with the IP address A* as in the destination address field of the IP header. As a result, the request packet is routed to the topologically nearest CDSR redirector, which receives the packet and reads the URL out of that packet's payload. In turn the CDSR redirector consults its configured-in policies and information base of load measurements to determine an appropriate place to terminate the requesting client.
- An example of this process is depicted in more depth in
FIG. 19 . Here a user presents a URL to a player (path 300) via some mechanism (e.g., by typing the URL into the user interface or by clicking on a hypertext link). The player then parses the URL and resolves the domain name any.cdn.acme.net by sending a DNS request alongpath 401 via the DNS resolver on the local host to anearby DNS server 400. The server invokes the DNS system in a normal fashion to resolve the name into the anycast address A* (which is configured into the DNS by a network operator that appropriately configures the authoritative name server for the acme.net DNS subdomain). The DNS server in turn responds with the address A* viapath 402. - At this point, the client determines that address A* is an APAR anycast address and consequently sends a service request message containing the URL to the
CDSR stub 102 viapath 301 all within the local host. The CDSR stub then sends a service request packet encapsulated in UDP addressed to A* into the network, which routes the packet to the topologicallynearest CDSR redirector 200. The CDSR redirector then determines the address of a server to which the requesting client can connect basing its decision on an arbitrary set of configured policies and measurements gathered dynamically from the running system, as well as the requesting client's IP address. This policy and configuration information is dynamically assigned to the CDSR redirector via some external network management protocol that perhaps originates from the CDN operations center, e.g., overnetwork path 207. This way, as policies evolve over time (e.g., based on external business relationships between network providers and the CDN service provider) the CDSR policies can be updated to honor certain desired service level agreements. - To properly load balance server and computational resources, the CDSR redirector monitors the
local servers communication paths path 208. - Given all this information, the CDSR redirector is then in a position to answer the original request packet. Presuming, for example, that it determined that
server 201 is the most appropriate attachment point for the client, the CDSR redirector transmits a response packet back to the CDSR stub on the end host viapath 302 containing the address of the server that can satisfy the content referenced by the original URL. In turn, the CDSR stub returns this result to the requesting application which then invokes a normal content transaction (e.g., a Web transfer or a instantiation of a streaming media flow) using traditional client-server protocols that terminate at the chosen server. - Finally, if the requested content is not yet present at server 201 (i.e., because it had not been previously pushed to that location or routed across the content broadcast network), then
server 201 requests the content across the content network through a nearby content router, i.e.,device 203 ordevice 204. A mechanism to fetch content in this fashion according to an application-level content routing network is described in McCanne et al. I. - 4.2. Wide-Area Deployment
- The CDSR redirection mechanism described above can be deployed across a collection of autonomous systems in a fashion similar to the DNS-based redirection system described earlier. It would be obvious to an expert in the art that the variations of the DNS-based redirection system described above could be applied to the CDSR redirection mechanisms described in this section.
- To illustrate one such configuration,
FIG. 20 shows how the CDSR is deployed across the wide-area between two cooperating content backbones and two content affiliates. The diagram shows a four ASs (100, 200, 300, and 400) interconnected at the IP layer withtraditional layer 3 peering via links 1.2, 1.3, 2.3, 2.4, and 3.4. AS 100 contains two CDSR redirectors (101 and 103) each assigned the anycast address A* (which is taken from one ofAS 100's assigned CIDR block) andservers AS 200's assigned CIDR block) andservers - AS 400 represents a content affiliate of the B* content backbone as it has deployed a
CDSR redirector 401 addressed with the B* APAR anycast address.Server 402 provides the service attachment point for clients on the B* network. Similarly, AS 300 represents a content affiliate of both the A* and B* content backbones as it has deployed aCDSR redirector 301 addressed with the both the A* and B* APAR anycast addresses.Server 302 provides the service attachment point for clients on the B* network. - A content broadcast network that ties together the server installation to perform application-level multicast, traffic management, and so forth is assumed to exist (as described in McCanne et al. I) and is elided from this diagram to facilitate the present discussion. That is, application level connections exist among the various servers (102, 104, 202, 204, 302, and 402) and
content sources - Given this overall architecture,
clients client 403, suppose the user requests content specified by a URL referring to content fromsource 11. The client decodes the URL (perhaps with the help of some external directory system like DNS) to determine that the URL refers to content on the B* backbone. Consequently, the client transmits that URL in a service request packet addressed to B*. APAR anycast routing delivers that request packet toCDSR redirector 401, which inspects the URL, selects an appropriate server (e.g., assume server 402) and returns a response indicating that the client should attach to the content network atserver 402. Theclient 403 then initiates an application connection (e.g., using RTSP, HTTP, etc) toserver 402 to request the content, which is fetched across the CDN as described above. - Now, suppose
client 402 requests content specified by a URL referring to content fromsource 10. The client decodes the URL (perhaps with the help of some external directory system like DNS) to determine that the URL refers to content on the A* backbone. Consequently, the client transmits that URL in a service request packet addressed to A*. This time, APAR anycast routing delivers that request intoAS 400, but because there are no A*-addressed CDSR redirectors within that AS, the IP routers forward the request packet toward AS 100 (i.e., which externally advertises the CIDR block containing address A*). Suppose the route traverses path 3.4 on its way toAS 100. Thus, the packet enters AS 300, but now sinceCDSR redirector 301 is assigned the A* address, the request packet is routed to that device instead of being routed on toAS 100. In turn,redirector 401 inspects the URL, selects an appropriate server (e.g., assume server 302) and returns a response indicating that the client should attach to the content network atserver 302. Theclient 403 then initiates an application connection (e.g., using RTSP, HTTP, etc) toserver 302 to request the content, which is fetched across the CDN as described above. Note that the client attaches to the closest node in the A*-rooted CDN; even though the client resides inAS 400 and service elements exist in that AS,server 302 inAS 300 is used instead because it is the closest element on the A* network. - 4.3. Staged Deployment
- One of the challenges facing the deployment of client-driven service rendezvous is the changes that must be made to the existing base of applications (i.e., Web browsers and streaming media clients) and the propagation of those changes into the active user community. Clearly, this transition cannot occur all at once and instead must progress gradually over time as vendors integrate such a capability into their applications and users upgrade their software. Thus, the system must be able to support a mixture of legacy applications alongside the new CDSR capable applications.
- Fortunately, a staged deployment of CDSR capabilities is possible through a novel combination of CDSR redirection and explicit redirection. In this scheme, CDSR redirectors are deployed in parallel with explicit redirectors and URLs are structured so that they work effectively under either scenario. There are a number of possible ways to structure this coexistence and it would be obvious to an expert in the art how the schemes described herein could be combined to perform this sort of staged deployment.
- One such approach is to run multiple redirection processes or agents that perform different types of redirection on each CDSR redirector. For example, one process could perform RTSP based redirection while another performs native CDSR redirection. The former process, for instance, would bind to TCP port 554 (i.e., the default RTSP port) while the latter would bind to some well-known UDP port, say 2554. Then, the content network would be configured with the convention that the server portion of any URL that referred to content on that network would resolve to that network's APAR anycast address. For example, within the URL
-
- rtsp://any.cdn.acme.net/news.rm
the DNS name any.cdn.acme.net could resolve to the anycast IP address A*. Thus, when a legacy client processes this URL, it initiates an RTSP connection to the IP host assigned address A* at TCP port 554. In turn, the network routes the packets comprising this connection to the nearest CDSR redirector (via APAR anycast routing) and the RTSP redirector process running on that device establishes the connection. To carry out the redirection step, the RTSP redirector chooses a candidate server (as outlined earlier) and explicitly redirects the client to that server via an RTSP redirect message, which is built-in capability of the RTSP protocol. Thus the client is properly redirected to an appropriate, nearby server.
- rtsp://any.cdn.acme.net/news.rm
- Using the same infrastructure, a CDSR-aware client inspects the address A* returned by DNS for the name any.cdn.acme.net and determines that A* is an APAR anycast address. Consequently, the client invokes the CDSR redirection system by transmitting a service request UDP packet containing the URL to address A* at
UDP port 2554. In turn, the network routes the packets comprising this connection to the nearest CDSR redirector (via APAR anycast routing) and, this time, the CDSR redirector process running on that device receives the request. To carry out the redirection step, the CDSR redirector chooses a candidate server (as outlined earlier) and returns a response packet that contains the address of this server to be used for the service transaction (e.g., Web request or streaming media flow). The response packet may also contain other hints that could be useful to the client, e.g., indicating that the client may use the returned server address for all future content requests with the same server component name (e.g., any.cdn.acme.net), or that the client may use the address in this fashion for some period of time (e.g., 5 minutes). The response packet may also contain predictive hints that allows clients to infer more information about what URLs are handled by the CDSR redirection system. - 4.4. Web Server Staged Deployment
- A similar strategy can be adopted for other types of protocols and applications like Web browsers. In this case, an HTTP redirection agent runs in parallel to a CDSR redirector running on the APAR anycast-addressed device. For example, a legacy Web browser that invokes the URL
-
- http://any.cdn.acme.net/index.html
would attempt to connect to any.cdn.acme.net, which again is assumed to resolve to the APAR anycast address A*.
- http://any.cdn.acme.net/index.html
- That is, one process performs HTTP based redirection while another performs native CDSR redirection. The former process, for instance, binds to TCP port 80 (i.e., the default HTTP port) while the latter binds to a well-known UDP port, say 2554. Then, the content network is configured with the convention that the server portion of any URL that referred to content on that network resolves to that network's APAR anycast address. For example, within the URL
-
- http://any.cdn.acme.net/index.html
the DNS name any.cdn.acme.net resolves to the anycast IP address A*. Thus, when a legacy client processes this URL, it initiates an HTTP connection to the IP host assigned address A* atTCP port 80. In turn, the network routes the packets comprising this connection to the nearest CDSR redirector (via APAR anycast routing) and the HTTP redirector process running on that device establishes the connection. To carry out the redirection step, the HTTP redirector chooses a candidate server (as outlined earlier) and explicitly redirects the client to that server via an HTTP redirect message, which is built-in capability of the HTTP protocol. Thus the client is properly redirected to an appropriate, nearby server.
- http://any.cdn.acme.net/index.html
- Using the same infrastructure, a CDSR-aware client inspects the address A* returned by DNS for the name any.cdn.acme.net and determines that A* is an APAR anycast address. Consequently, the client invokes the CDSR redirection system by transmitting a service request UDP packet containing the URL to address to A* at
UDP port 2554. In turn, the network routes the packets comprising this connection to the nearest CDSR redirector (via APAR anycast routing) and, this time, the CDSR redirector process running on that device receives the request. To carry out the redirection step, the CDSR redirector chooses a candidate server (as outlined earlier) and returns a response packet that contains the address of this server to be used for the Web transfer. The response packet may also contain other hints that could be useful to the client, e.g., indicating that the client may use the returned server address for all future content requests with the same server component name (i.e., any.cdn.acme.net), or that the client may use the address in this fashion for some period of time (e.g., 5 minutes). The response packet may also contain predictive hints that allows clients to infer more information about what URLs are handled by the CDSR redirection system. - In another configuration, the HTTP redirection agent is replaced with an actual Web server. To scale this configuration, the Web server may optionally be load-balanced with a
layer 4 switch.FIG. 21 illustrates this scheme. Here,layer 4switch 11 is assigned the virtual IP address A* and configured to advertise the A*/32 host route into the network routing protocol to effect APAR anycast routing.Switch 11 is configured to routeUDP port 2554 traffic to theCDSR redirector 12 and route all Web traffic (on TCP port 80) toWeb servers 13 and 14 (which may be clustered to larger sizes).Switch 21 is similarly configured againstCDSR redirector 22 andWeb servers - First, assume
Web browser clients client 10 invokes the URL -
- http://any.cdn.acme.net/index.html
it fetches the content directly from the server aboveswitch 11, whereasclient 20 fetches the content from the server aboveswitch 21.
- http://any.cdn.acme.net/index.html
- Now assume
clients client 10 parses the URL, it determines that the server component address is an APAR anycast address and transmits a service request packet to the A* anycast address containing the URL. Thelayer 4 switch routes this packet toCDSR redirector 12, which selects a nearby server or some other server if the local cluster is overloaded (as described earlier) and returns a response message indicating that server, sayserver 14. The client then retrieves the content fromserver 14 using HTTP. A similar transaction occurs betweenclient 20 and thelayer 4switch 21 whenclient 20 invokes the URL in question. - Using the above techniques, servers can be easily load balanced. AN APAR-DNS routing scheme can also be used to limit requests from unauthorized clients. For example, the request for domain name resolution might include metadata that validates an authorized client. The APAR-DNS server checks the metadata and if the client appears to be authorized, the APAR-DNS server responds to the request with a resolution of the domain name to an IP address and a port number that, by preagreement between the content server and the APAR-DNS server or otherwise, is a port that the content server will connect over. If the client does not appear to the APAR-DNS server to be authorized, the APAR-DNS server will return an IP address and port number of a port that the content server ignores.
- One way in which content peering as described above can be used is within content distribution networks run by network service providers that peer with other such content distribution networks through “context exchange” providers. In such an architecture, a content exchange is service entity that brokers relationships between the content providers and the distribution networks. In this way, content exchanges can enter into relationships with content providers as their customers but rely upon the content distribution networks to actually carry the traffic. This leads to a landscape where a number of content exchanges emerge to act as brokers between content providers and content distribution networks owned and operated by the network service providers and the number of content exchanges is small enough for efficient operation.
- A novel data stream broadcast distribution scheme using content peering and other novel elements have now been described.
Claims (17)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/912,840 US7734730B2 (en) | 1999-09-03 | 2004-08-05 | Content distribution system for operation over an internetwork including content peering arrangements |
Applications Claiming Priority (4)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15225799P | 1999-09-03 | 1999-09-03 | |
US17274699P | 1999-12-20 | 1999-12-20 | |
US09/609,442 US6785704B1 (en) | 1999-12-20 | 2000-07-03 | Content distribution system for operation over an internetwork including content peering arrangements |
US10/912,840 US7734730B2 (en) | 1999-09-03 | 2004-08-05 | Content distribution system for operation over an internetwork including content peering arrangements |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/609,442 Continuation US6785704B1 (en) | 1999-09-03 | 2000-07-03 | Content distribution system for operation over an internetwork including content peering arrangements |
Publications (2)
Publication Number | Publication Date |
---|---|
US20050010653A1 true US20050010653A1 (en) | 2005-01-13 |
US7734730B2 US7734730B2 (en) | 2010-06-08 |
Family
ID=26868415
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/609,442 Expired - Lifetime US6785704B1 (en) | 1999-09-03 | 2000-07-03 | Content distribution system for operation over an internetwork including content peering arrangements |
US10/912,840 Expired - Lifetime US7734730B2 (en) | 1999-09-03 | 2004-08-05 | Content distribution system for operation over an internetwork including content peering arrangements |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/609,442 Expired - Lifetime US6785704B1 (en) | 1999-09-03 | 2000-07-03 | Content distribution system for operation over an internetwork including content peering arrangements |
Country Status (5)
Country | Link |
---|---|
US (2) | US6785704B1 (en) |
EP (4) | EP2838240B1 (en) |
AU (1) | AU2282701A (en) |
DE (1) | DE60036021T2 (en) |
WO (1) | WO2001052497A2 (en) |
Cited By (322)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20010036182A1 (en) * | 2000-01-06 | 2001-11-01 | Frank Addante | Method and apparatus for selecting and delivering internet based advertising |
US20020002622A1 (en) * | 2000-04-17 | 2002-01-03 | Mark Vange | Method and system for redirection to arbitrary front-ends in a communication system |
US20020038360A1 (en) * | 2000-05-31 | 2002-03-28 | Matthew Andrews | System and method for locating a closest server in response to a client domain name request |
US20020118389A1 (en) * | 2001-02-27 | 2002-08-29 | Yasuo Fukuda | Image data communication system and image data communication method |
US20020161910A1 (en) * | 2001-04-30 | 2002-10-31 | David Bill | Generating multiple data streams from a single data source |
US20020161847A1 (en) * | 2001-04-30 | 2002-10-31 | Weigand Gilbert G. | Duplicating switch for streaming data units to a terminal |
US20030079027A1 (en) * | 2001-10-18 | 2003-04-24 | Michael Slocombe | Content request routing and load balancing for content distribution networks |
US20030115283A1 (en) * | 2001-12-13 | 2003-06-19 | Abdulkadev Barbir | Content request routing method |
US20030149890A1 (en) * | 2001-03-02 | 2003-08-07 | Shen Sheng Mei | Content distribution/protecting method and apparatus |
US20030229682A1 (en) * | 2001-05-16 | 2003-12-11 | Day Richard David | Meta content delivery network system |
US20040063402A1 (en) * | 2002-09-26 | 2004-04-01 | Hitachi, Ltd. | Method and apparatus for mobile communication utilizing load balancing |
US20040072810A1 (en) * | 2001-11-07 | 2004-04-15 | Besins International Belgique | Pharmaceutical composition in the form of a gel or a solution based on dihydrotestosterone, process for preparing it and uses thereof |
US20050050173A1 (en) * | 2003-09-02 | 2005-03-03 | Katsuro Kikuchi | Search method and search broker |
US20050050157A1 (en) * | 2003-08-27 | 2005-03-03 | Day Mark Stuart | Methods and apparatus for accessing presence information |
US20050149528A1 (en) * | 2002-07-30 | 2005-07-07 | Anderson Owen T. | Uniform name space referrals with location independence |
US20050149531A1 (en) * | 2002-03-19 | 2005-07-07 | Srivastava Sunil K. | Method and apparatus for routing data to a load balanced server using MPLS packet labels |
US20050185596A1 (en) * | 2000-11-28 | 2005-08-25 | Navic Systems, Inc. | Load balancing in set top cable box environment |
US20050198097A1 (en) * | 2004-01-16 | 2005-09-08 | Yury Kalnitsky | Network architecture for data transmission |
US20050210144A1 (en) * | 2004-03-18 | 2005-09-22 | Atsuya Kumagai | Load balancing method and system |
US20050283443A1 (en) * | 2004-06-16 | 2005-12-22 | Hardt Dick C | Auditable privacy policies in a distributed hierarchical identity management system |
US20060005263A1 (en) * | 2004-06-16 | 2006-01-05 | Sxip Networks Srl | Distributed contact information management |
US20060005020A1 (en) * | 2004-06-16 | 2006-01-05 | Sxip Networks Srl | Graduated authentication in an identity management system |
US20060013147A1 (en) * | 2004-05-03 | 2006-01-19 | Level 3 Communications, Inc. | Registration redirect server |
US20060064478A1 (en) * | 2004-05-03 | 2006-03-23 | Level 3 Communications, Inc. | Geo-locating load balancing |
WO2006029508A1 (en) * | 2004-09-13 | 2006-03-23 | Solace Systems Inc. | Highly scalable subscription matching for a content routing network |
US20060168154A1 (en) * | 2004-11-19 | 2006-07-27 | Microsoft Corporation | System and method for a distributed object store |
US7085825B1 (en) * | 2001-03-26 | 2006-08-01 | Freewebs Corp. | Apparatus, method and system for improving application performance across a communications network |
US20060193252A1 (en) * | 2005-02-25 | 2006-08-31 | Cisco Technology, Inc. | Active-active data center using RHI, BGP, and IGP anycast for disaster recovery and load distribution |
US20060193247A1 (en) * | 2005-02-25 | 2006-08-31 | Cisco Technology, Inc. | Disaster recovery for active-standby data center using route health and BGP |
US20060195607A1 (en) * | 2005-02-25 | 2006-08-31 | Cisco Technology, Inc. | Application based active-active data center network using route health injection and IGP |
US20060200425A1 (en) * | 2000-08-04 | 2006-09-07 | Enfotrust Networks, Inc. | Single sign-on for access to a central data repository |
US20060206565A1 (en) * | 2005-03-09 | 2006-09-14 | Vvond, Llc | Method and system for providing instantaneous media-on-demand services |
US20060206889A1 (en) * | 2005-03-09 | 2006-09-14 | Vvond, Llc | Fragmentation of a file for instant access |
US20060209824A1 (en) * | 2005-03-01 | 2006-09-21 | The Mitre Corporation | Method, apparatus, and computer program product for transmitting and receiving broadcast packets |
US20060233155A1 (en) * | 2002-03-19 | 2006-10-19 | Srivastava Sunil K | Server load balancing using IP option field approach to identify route to selected server |
US20060268681A1 (en) * | 2005-05-31 | 2006-11-30 | Raza Syed K | Multi-homing using controlled route leakage at a backup service provider |
US7149797B1 (en) * | 2001-04-02 | 2006-12-12 | Akamai Technologies, Inc. | Content delivery network service provider (CDNSP)-managed content delivery network (CDN) for network service provider (NSP) |
WO2007001909A2 (en) * | 2005-06-23 | 2007-01-04 | Agere Systems Inc. | Continuous power transfer scheme for two-wire serial link |
US20070011726A1 (en) * | 2005-07-11 | 2007-01-11 | Samsung Electronics Co., Ltd. | Multi-function peripheral with function of adding user identification information and method thereof |
US20070014300A1 (en) * | 2005-07-14 | 2007-01-18 | Yahoo! Inc. | Content router notification |
US20070014303A1 (en) * | 2005-07-14 | 2007-01-18 | Yahoo! Inc. | Content router |
US20070014277A1 (en) * | 2005-07-14 | 2007-01-18 | Yahoo! Inc. | Content router repository |
US20070014307A1 (en) * | 2005-07-14 | 2007-01-18 | Yahoo! Inc. | Content router forwarding |
US20070028293A1 (en) * | 2005-07-14 | 2007-02-01 | Yahoo! Inc. | Content router asynchronous exchange |
US20070025327A1 (en) * | 2005-08-01 | 2007-02-01 | Limelight Networks, Inc. | Heavy load packet-switched routing |
US20070025254A1 (en) * | 2005-08-01 | 2007-02-01 | Raciborski Nathan F | Routing Under Heavy Loading |
US20070038858A1 (en) * | 2005-08-12 | 2007-02-15 | Silver Peak Systems, Inc. | Compliance in a network memory architecture |
US20070038703A1 (en) * | 2005-07-14 | 2007-02-15 | Yahoo! Inc. | Content router gateway |
US20070038815A1 (en) * | 2005-08-12 | 2007-02-15 | Silver Peak Systems, Inc. | Network memory appliance |
US20070055629A1 (en) * | 2005-09-08 | 2007-03-08 | Qualcomm Incorporated | Methods and apparatus for distributing content to support multiple customer service entities and content packagers |
US20070061327A1 (en) * | 2005-09-15 | 2007-03-15 | Emc Corporation | Providing local access to managed content |
US20070061860A1 (en) * | 2005-09-12 | 2007-03-15 | Walker Gordon K | Apparatus and methods of open and closed package subscription |
US20070061445A1 (en) * | 2005-09-13 | 2007-03-15 | Deganaro Louis R | Cooperative routing between traffic control device and multi-server application |
US20070073831A1 (en) * | 2005-09-15 | 2007-03-29 | Emc Corporation | Providing direct access to distributed managed content |
US20070078944A1 (en) * | 2005-09-12 | 2007-04-05 | Mark Charlebois | Apparatus and methods for delivering and presenting auxiliary services for customizing a channel |
US20070104220A1 (en) * | 2005-11-08 | 2007-05-10 | Mark Charlebois | Methods and apparatus for fragmenting system information messages in wireless networks |
US20070106522A1 (en) * | 2005-11-08 | 2007-05-10 | Bruce Collins | System for distributing packages and channels to a device |
US20070109592A1 (en) * | 2005-11-15 | 2007-05-17 | Parvathaneni Bhaskar A | Data gateway |
US20070115929A1 (en) * | 2005-11-08 | 2007-05-24 | Bruce Collins | Flexible system for distributing content to a device |
US20070117536A1 (en) * | 2005-11-08 | 2007-05-24 | Qualcomm Incorporated | Methods and apparatus for delivering regional parameters |
US20070156845A1 (en) * | 2005-12-30 | 2007-07-05 | Akamai Technologies, Inc. | Site acceleration with content prefetching enabled through customer-specific configurations |
US20070186180A1 (en) * | 2005-12-30 | 2007-08-09 | Barrett Morgan | Ubiquitous navbar user interface across multiple heterogeneous digital media devices |
US20070185972A1 (en) * | 2006-02-08 | 2007-08-09 | Samsung Electronics Co., Ltd. | Method and device for managing content, storage medium; and adaptive content playing method using the same |
US20070192798A1 (en) * | 2005-12-30 | 2007-08-16 | Barrett Morgan | Digital content delivery via virtual private network (VPN) incorporating secured set-top devices |
US20070202865A1 (en) * | 2004-10-28 | 2007-08-30 | Fujitsu Limited | Mobile wireless communication terminal and communication control method |
US7289519B1 (en) * | 2002-05-01 | 2007-10-30 | Cisco Technology, Inc. | Methods and apparatus for processing content requests using domain name service |
US20070288639A1 (en) * | 2001-04-30 | 2007-12-13 | Aol Llc | Load balancing with direct terminal response |
US20070294721A1 (en) * | 2006-06-20 | 2007-12-20 | Sbc Knowledge Ventures, Lp | System and method of providing supplemental video content related to targeted advertisements in a video stream |
US20070294419A1 (en) * | 2006-06-14 | 2007-12-20 | David Ulevitch | Recursive dns nameserver |
US7315541B1 (en) * | 2002-04-03 | 2008-01-01 | Cisco Technology, Inc. | Methods and apparatus for routing a content request |
US20080010298A1 (en) * | 2000-08-04 | 2008-01-10 | Guardian Networks, Llc | Storage, management and distribution of consumer information |
US20080008089A1 (en) * | 2001-03-01 | 2008-01-10 | Akamai Technologies, Inc. | Optimal route selection in a content delivery network |
US20080022343A1 (en) * | 2006-07-24 | 2008-01-24 | Vvond, Inc. | Multiple audio streams |
US7328237B1 (en) * | 2002-07-25 | 2008-02-05 | Cisco Technology, Inc. | Technique for improving load balancing of traffic in a data network using source-side related information |
US20080031240A1 (en) * | 2006-08-02 | 2008-02-07 | Silver Peak Systems, Inc. | Data matching using flow based packet data storage |
US20080049723A1 (en) * | 2001-04-30 | 2008-02-28 | Aol Llc | Generating multiple data streams from a single data source |
US20080059555A1 (en) * | 2006-08-31 | 2008-03-06 | Archer Charles J | Parallel application load balancing and distributed work management |
WO2008030494A2 (en) * | 2006-09-05 | 2008-03-13 | Donnelli Robert M | Managing client-to-server or peer-to-peer relationships in a private or virtual network |
US20080082905A1 (en) * | 2006-09-29 | 2008-04-03 | Yahoo! Inc. | Content-embedding code generation in digital media benefit attachment mechanism |
US20080082904A1 (en) * | 2006-09-29 | 2008-04-03 | Yahoo! Inc. | Script-based content-embedding code generation in digital media benefit attachment mechanism |
US20080095159A1 (en) * | 2004-03-05 | 2008-04-24 | Kazuya Suzuki | Communication quality management and apparatus |
US20080154951A1 (en) * | 2006-12-22 | 2008-06-26 | Yahoo! Inc. | Link Retrofitting of Digital Media Objects |
US20080244038A1 (en) * | 2007-03-30 | 2008-10-02 | Yahoo! Inc. | Point of Presence Distribution Mechanism for Digital Content Objects |
US20080281718A1 (en) * | 2007-01-08 | 2008-11-13 | Barrett Morgan | Household network incorporating secure set-top devices |
US20080281913A1 (en) * | 2005-03-09 | 2008-11-13 | Vudu, Inc. | Live video broadcasting on distributed networks |
US20080279222A1 (en) * | 2001-10-18 | 2008-11-13 | Level 3 Communications Llc | Distribution of traffic across a computer network |
US20080282036A1 (en) * | 2005-03-09 | 2008-11-13 | Vvond, Llc | Method and apparatus for instant playback of a movie title |
US20080285578A1 (en) * | 2007-05-15 | 2008-11-20 | Delay John L | Content-based routing of information content |
US7461147B1 (en) * | 2002-08-26 | 2008-12-02 | Netapp. Inc. | Node selection within a network based on policy |
US20080313350A1 (en) * | 2007-06-18 | 2008-12-18 | Verizon Services Organization Inc. | Method and system of cache discovery in a peer-to-peer environment |
US20090019468A1 (en) * | 2005-03-09 | 2009-01-15 | Vvond, Llc | Access control of media services over an open network |
US20090025046A1 (en) * | 2005-03-09 | 2009-01-22 | Wond, Llc | Hybrid architecture for media services |
US20090025048A1 (en) * | 2005-03-09 | 2009-01-22 | Wond, Llc | Method and apparatus for sharing media files among network nodes |
US20090052434A1 (en) * | 2007-08-21 | 2009-02-26 | James Jackson | Methods and apparatus to select a voice over internet protocol (voip) border element |
US20090059894A1 (en) * | 2007-08-27 | 2009-03-05 | James Jackson | Methods and apparatus to select a peered voice over internet protocol (voip) border element |
US20090059895A1 (en) * | 2007-08-27 | 2009-03-05 | Mehrad Yasrebi | Methods and apparatus to dynamically select a peered voice over internet protocol (voip) border element |
WO2009029113A1 (en) * | 2007-08-31 | 2009-03-05 | Vulano Group, Inc. | Transaction management system in a multicast or broadcast wireless communication network |
US20090106411A1 (en) * | 2001-04-02 | 2009-04-23 | Akamai Technologies, Inc. | Scalable, high performance and highly available distributed storage system for internet content |
US20090125952A1 (en) * | 2005-09-08 | 2009-05-14 | Qualcomm Incorporated | Method and apparatus for delivering content based on receivers characteristics |
US20090132587A1 (en) * | 2007-11-21 | 2009-05-21 | David John Steiner | Methods and systems for managing content dependency deployment |
US20090157889A1 (en) * | 2007-12-13 | 2009-06-18 | Opendns, Inc. | Per-request control of dns behavior |
US20090164614A1 (en) * | 2007-12-20 | 2009-06-25 | Christian Michael F | Dns wildcard beaconing to determine client location and resolver load for global traffic load balancing |
US20090164646A1 (en) * | 2007-12-21 | 2009-06-25 | Christian Michael F | Method for determining network proximity for global traffic load balancing using passive tcp performance instrumentation |
US20090168752A1 (en) * | 2007-12-31 | 2009-07-02 | Jonathan Segel | Method and apparatus for distributing content |
US20090177967A1 (en) * | 2007-12-29 | 2009-07-09 | Joseph Harold Moore | System and method for providing internet radio service |
WO2009088513A1 (en) * | 2008-01-10 | 2009-07-16 | Hewlett-Packard Development Company, L.P. | Multiway peer-to-peer media streaming |
US20090190583A1 (en) * | 2006-04-28 | 2009-07-30 | Telecom Italia S.P.A. | Method for Determining Prospective Peering Partners for an Internet Service Provider |
US20090210293A1 (en) * | 2000-08-04 | 2009-08-20 | Nick Steele | Information transactions over a network |
US20090228588A1 (en) * | 1999-11-22 | 2009-09-10 | Akamai Technologies, Inc. | Performance computer network method |
WO2009086373A3 (en) * | 2007-12-28 | 2009-09-11 | Yahoo! Inc. | Mapless global traffic load balancing via anycast |
US20090248858A1 (en) * | 2008-03-31 | 2009-10-01 | Swaminathan Sivasubramanian | Content management |
US20090248893A1 (en) * | 2008-03-31 | 2009-10-01 | Richardson David R | Request routing |
US20090245114A1 (en) * | 2008-04-01 | 2009-10-01 | Jayanth Vijayaraghavan | Methods for collecting and analyzing network performance data |
US20090248697A1 (en) * | 2008-03-31 | 2009-10-01 | Richardson David R | Cache optimization |
US20090254661A1 (en) * | 2008-04-04 | 2009-10-08 | Level 3 Communications, Llc | Handling long-tail content in a content delivery network (cdn) |
US20090327517A1 (en) * | 2008-06-30 | 2009-12-31 | Swaminathan Sivasubramanian | Request routing using network computing components |
US20100030908A1 (en) * | 2008-08-01 | 2010-02-04 | Courtemanche Marc | Method and system for triggering ingestion of remote content by a streaming server using uniform resource locator folder mapping |
US20100077056A1 (en) * | 2008-09-19 | 2010-03-25 | Limelight Networks, Inc. | Content delivery network stream server vignette distribution |
US20100125675A1 (en) * | 2008-11-17 | 2010-05-20 | Richardson David R | Updating routing information based on client location |
US20100125673A1 (en) * | 2008-11-17 | 2010-05-20 | Richardson David R | Request routing utilizing client location information |
US20100124239A1 (en) * | 2008-11-20 | 2010-05-20 | Silver Peak Systems, Inc. | Systems and methods for compressing packet data |
US20100153802A1 (en) * | 2008-12-15 | 2010-06-17 | At&T Corp. | System and Method for Anycast Transport Optimization |
US20100208616A1 (en) * | 2006-11-27 | 2010-08-19 | Andreas Schieder | Node registering method |
US20100228814A1 (en) * | 2007-08-31 | 2010-09-09 | Lava Two ,LLC | Forward path multi-media management system with end user feedback to distributed content sources |
US7797426B1 (en) * | 2008-06-27 | 2010-09-14 | BitGravity, Inc. | Managing TCP anycast requests |
US20100235432A1 (en) * | 2006-08-21 | 2010-09-16 | Telefonaktiebolaget L M Ericsson | Distributed Server Network for Providing Triple and Play Services to End Users |
US20100240298A1 (en) * | 2007-08-31 | 2010-09-23 | Lava Two, Llc | Communication network for a multi-media management system with end user feedback |
US20100250710A1 (en) * | 2009-03-25 | 2010-09-30 | Limelight Networks, Inc. | Publishing-point management for content delivery network |
US20100248683A1 (en) * | 2004-12-09 | 2010-09-30 | Level 3 Communications, Inc. | Systems and Methods for Third Party Emergency Call Termination |
US7818402B1 (en) * | 2006-02-08 | 2010-10-19 | Roxbeam Media Network Corporation | Method and system for expediting peer-to-peer content delivery with improved network utilization |
WO2010090650A3 (en) * | 2008-03-31 | 2010-11-04 | Amazon Technologies, Inc. | Request routing based on class |
US20100332664A1 (en) * | 2008-02-28 | 2010-12-30 | Maksim Yevmenkin | Load-balancing cluster |
US20100332595A1 (en) * | 2008-04-04 | 2010-12-30 | David Fullagar | Handling long-tail content in a content delivery network (cdn) |
US20110029596A1 (en) * | 2009-07-30 | 2011-02-03 | At&T Intellectual Property I, L.P. | Anycast Transport Protocol for Content Distribution Networks |
US20110040861A1 (en) * | 2009-08-17 | 2011-02-17 | At&T Intellectual Property I, L.P. | Integrated Proximity Routing for Content Distribution |
US20110045910A1 (en) * | 2007-08-31 | 2011-02-24 | Lava Two, Llc | Gaming system with end user feedback for a communication network having a multi-media management |
US20110055316A1 (en) * | 2009-09-03 | 2011-03-03 | At&T Intellectual Property I, L.P. | Anycast Aware Transport for Content Distribution Networks |
US20110066747A1 (en) * | 2007-08-31 | 2011-03-17 | Lava Two, Llc | Virtual aggregation processor for incorporating reverse path feedback into content delivered on a forward path |
US20110082916A1 (en) * | 2009-10-02 | 2011-04-07 | Limelight Networks, Inc. | Enhanced Anycast For Edge Server Selection |
US20110082982A1 (en) * | 2009-10-02 | 2011-04-07 | Limelight Networks, Inc. | Content delivery network cache grouping |
US20110099290A1 (en) * | 2000-07-19 | 2011-04-28 | Akamai Technologies, Inc. | Method for determining metrics of a content delivery and global traffic management network |
US20110145437A1 (en) * | 2008-08-26 | 2011-06-16 | Benjamin Paul Niven-Jenkins | Operation of a content distribution network |
US20110153941A1 (en) * | 2009-12-22 | 2011-06-23 | At&T Intellectual Property I, L.P. | Multi-Autonomous System Anycast Content Delivery Network |
US20110153719A1 (en) * | 2009-12-22 | 2011-06-23 | At&T Intellectual Property I, L.P. | Integrated Adaptive Anycast for Content Distribution |
US7970820B1 (en) | 2008-03-31 | 2011-06-28 | Amazon Technologies, Inc. | Locality based content distribution |
US20110161461A1 (en) * | 2008-08-26 | 2011-06-30 | Niven-Jenkins Benjamin P | Content distribution network |
US20110188415A1 (en) * | 2007-08-31 | 2011-08-04 | Lava Two, Llc | Forward path multi-media management system with end user feedback to central content sources |
US20110231475A1 (en) * | 2010-03-22 | 2011-09-22 | At&T Intellectual Property I, L.P. | Internet Protocol Version 6 Content Routing |
US8028092B2 (en) | 2002-06-28 | 2011-09-27 | Aol Inc. | Inserting advertising content |
US20110252082A1 (en) * | 2010-04-07 | 2011-10-13 | Limelight Networks, Inc. | System and method for delivery of content objects |
US8041818B2 (en) | 1999-11-22 | 2011-10-18 | Akamai Technologies, Inc. | Integrated point of presence server network and functionally organized web sites |
US8060616B1 (en) * | 2008-11-17 | 2011-11-15 | Amazon Technologies, Inc. | Managing CDN registration by a storage provider |
US8065417B1 (en) * | 2008-11-17 | 2011-11-22 | Amazon Technologies, Inc. | Service provider registration by a content broker |
US8073940B1 (en) | 2008-11-17 | 2011-12-06 | Amazon Technologies, Inc. | Managing content delivery network service providers |
US8082348B1 (en) * | 2005-06-17 | 2011-12-20 | AOL, Inc. | Selecting an instance of a resource using network routability information |
US8082334B1 (en) | 2005-09-15 | 2011-12-20 | Emc Corporation | Providing direct access to managed content |
US8090863B2 (en) | 2010-04-07 | 2012-01-03 | Limelight Networks, Inc. | Partial object distribution in content delivery network |
US8095774B1 (en) | 2007-07-05 | 2012-01-10 | Silver Peak Systems, Inc. | Pre-fetching data into a memory |
US8099511B1 (en) | 2005-06-11 | 2012-01-17 | Vudu, Inc. | Instantaneous media-on-demand |
US8122098B1 (en) | 2008-11-17 | 2012-02-21 | Amazon Technologies, Inc. | Managing content delivery network service providers by a content broker |
KR101135087B1 (en) * | 2009-08-12 | 2012-04-16 | 삼성에스디에스 주식회사 | System and method for providing contents |
US8166108B1 (en) | 2011-08-16 | 2012-04-24 | Edgecast Networks, Inc. | Systems and methods to uniquely identify assets in a federation |
US20120102116A1 (en) * | 2009-07-01 | 2012-04-26 | Guangyu Shi | Method, system, and proxy node for p2p streaming media data distribution |
US8171111B1 (en) | 2008-08-07 | 2012-05-01 | United Services Automobile Association (Usaa) | Systems and methods for non-specific address routing |
US8171238B1 (en) | 2007-07-05 | 2012-05-01 | Silver Peak Systems, Inc. | Identification of data stored in memory |
US20120131192A1 (en) * | 2010-11-22 | 2012-05-24 | Maccarthaigh Colm | Request routing processing |
US8219635B2 (en) | 2005-03-09 | 2012-07-10 | Vudu, Inc. | Continuous data feeding in a distributed environment |
US20120203926A1 (en) * | 2010-08-16 | 2012-08-09 | Michael Camp | IP Network Service Redirector Device and Method |
WO2012136945A1 (en) * | 2011-04-08 | 2012-10-11 | France Telecom | Technique for communication between networks for distributing digital contents |
US8291117B1 (en) | 2012-02-15 | 2012-10-16 | Limelight Networks, Inc. | Scaled domain name service |
US8296812B1 (en) | 2006-09-01 | 2012-10-23 | Vudu, Inc. | Streaming video using erasure encoding |
US8307115B1 (en) * | 2007-11-30 | 2012-11-06 | Silver Peak Systems, Inc. | Network memory mirroring |
US8308573B2 (en) | 2007-08-31 | 2012-11-13 | Lava Two, Llc | Gaming device for multi-player games |
US20120311076A1 (en) * | 2011-05-31 | 2012-12-06 | Cisco Technology, Inc. | System and method to support different uniform resource locator formats for content on different network elements |
US8341297B2 (en) | 2000-07-19 | 2012-12-25 | Akamai Technologies, Inc. | Latencies and weightings in a domain name service (DNS) system |
US20120327931A1 (en) * | 2011-06-21 | 2012-12-27 | Alcatel-Lucent Usa Inc. | Gateways integrating name-based networks with host-based networks |
WO2013001230A1 (en) | 2011-06-30 | 2013-01-03 | France Telecom | The obtaining, by a terminal, of information relating to access to a service |
US8370452B2 (en) | 2010-12-27 | 2013-02-05 | Limelight Networks, Inc. | Partial object caching |
US8397073B1 (en) | 2009-09-04 | 2013-03-12 | Amazon Technologies, Inc. | Managing secure content in a content delivery network |
WO2013043305A1 (en) * | 2011-09-20 | 2013-03-28 | Instart Logic, Inc. | Application acceleration with partial file caching |
US8412823B1 (en) | 2009-03-27 | 2013-04-02 | Amazon Technologies, Inc. | Managing tracking information entries in resource cache components |
US20130111063A1 (en) * | 2011-11-01 | 2013-05-02 | Electronics And Telecommunications Research Institute | Routing method in content-centric network |
US8442052B1 (en) | 2008-02-20 | 2013-05-14 | Silver Peak Systems, Inc. | Forward packet recovery |
US8447831B1 (en) | 2008-03-31 | 2013-05-21 | Amazon Technologies, Inc. | Incentive driven content delivery |
US8463853B2 (en) | 2001-04-30 | 2013-06-11 | Facebook, Inc. | Duplicating digital streams for digital conferencing using switching technologies |
US8463877B1 (en) | 2009-03-27 | 2013-06-11 | Amazon Technologies, Inc. | Dynamically translating resource identifiers for request routing using popularitiy information |
US8468247B1 (en) | 2010-09-28 | 2013-06-18 | Amazon Technologies, Inc. | Point of presence management in request routing |
WO2013090699A1 (en) * | 2011-12-14 | 2013-06-20 | Level 3 Communications, Llc | Content delivery network |
US20130166659A1 (en) * | 2010-05-11 | 2013-06-27 | Mary-Luc Champel | Methods for distributing contents to peers by means of multicast connections within a p2p infrastructure, and associated control server |
US8489562B1 (en) | 2007-11-30 | 2013-07-16 | Silver Peak Systems, Inc. | Deferred data storage |
US8520663B2 (en) | 2008-02-26 | 2013-08-27 | At&T Intellectual Property I, L. P. | Systems and methods to select peered border elements for an IP multimedia session based on quality-of-service |
US8521851B1 (en) | 2009-03-27 | 2013-08-27 | Amazon Technologies, Inc. | DNS query processing using resource identifiers specifying an application broker |
US8521880B1 (en) | 2008-11-17 | 2013-08-27 | Amazon Technologies, Inc. | Managing content delivery network service providers |
US8533293B1 (en) | 2008-03-31 | 2013-09-10 | Amazon Technologies, Inc. | Client side cache management |
US20130246577A1 (en) * | 2012-03-15 | 2013-09-19 | International Business Machines Corporation | Connection management and optimization for services delivered over networks |
US8543702B1 (en) | 2009-06-16 | 2013-09-24 | Amazon Technologies, Inc. | Managing resources using resource expiration data |
US8543700B1 (en) | 2007-06-28 | 2013-09-24 | Emc Corporation | Asynchronous content transfer |
US20130262697A1 (en) * | 2012-03-28 | 2013-10-03 | At&T Intellectual Property I, L.P. | System and Method for Routing Content Based on Real-Time Feedback |
US8577992B1 (en) | 2010-09-28 | 2013-11-05 | Amazon Technologies, Inc. | Request routing management based on network components |
US8601090B1 (en) | 2008-03-31 | 2013-12-03 | Amazon Technologies, Inc. | Network resource identification |
US8606938B1 (en) * | 2012-09-27 | 2013-12-10 | Ringcentral, Inc. | High availability for cloud-based services |
US20140006480A1 (en) * | 2012-06-29 | 2014-01-02 | Vmware, Inc. | Dynamic resolution of servers in a distributed environment |
US8626950B1 (en) * | 2010-12-03 | 2014-01-07 | Amazon Technologies, Inc. | Request routing processing |
US8635305B1 (en) * | 2001-12-19 | 2014-01-21 | Cisco Technology, Inc. | Mechanisms for providing differentiated services within a web cache |
US8732309B1 (en) | 2008-11-17 | 2014-05-20 | Amazon Technologies, Inc. | Request routing utilizing cost information |
US8743683B1 (en) | 2008-07-03 | 2014-06-03 | Silver Peak Systems, Inc. | Quality of service using multiple flows |
US8756341B1 (en) * | 2009-03-27 | 2014-06-17 | Amazon Technologies, Inc. | Request routing utilizing popularity information |
US20140173047A1 (en) * | 2012-12-13 | 2014-06-19 | Level 3 Communications, Llc | Devices And Methods Supporting Content Delivery With Rendezvous Services |
US8768350B2 (en) | 2004-12-09 | 2014-07-01 | Level 3 Communications, Llc | Systems and methods for locating endpoints in a communication network |
US20140204945A1 (en) * | 2013-01-18 | 2014-07-24 | Samsung Electronics Co., Ltd. | Method of transmitting data packet from content provider in content-centric network and content provider |
US8819283B2 (en) | 2010-09-28 | 2014-08-26 | Amazon Technologies, Inc. | Request routing in a networked environment |
US8885632B2 (en) | 2006-08-02 | 2014-11-11 | Silver Peak Systems, Inc. | Communications scheduler |
US8893179B2 (en) | 2005-09-12 | 2014-11-18 | Qualcomm Incorporated | Apparatus and methods for providing and presenting customized channel information |
US8904014B2 (en) | 2012-03-15 | 2014-12-02 | International Business Machines Corporation | Content delivery mechanisms for multicast communication |
US8924528B1 (en) | 2010-09-28 | 2014-12-30 | Amazon Technologies, Inc. | Latency measurement in resource requests |
US8929402B1 (en) | 2005-09-29 | 2015-01-06 | Silver Peak Systems, Inc. | Systems and methods for compressing packet data by predicting subsequent data |
US8930513B1 (en) | 2010-09-28 | 2015-01-06 | Amazon Technologies, Inc. | Latency measurement in resource requests |
JP2015501095A (en) * | 2011-10-13 | 2015-01-08 | インターデイジタル パテント ホールディングス インコーポレイテッド | Method and apparatus for realizing interfacing between content networks |
US8938526B1 (en) | 2010-09-28 | 2015-01-20 | Amazon Technologies, Inc. | Request routing management based on network components |
US8943170B2 (en) * | 2011-07-08 | 2015-01-27 | Ming Li | Content delivery network aggregation with selected content delivery |
US9003035B1 (en) | 2010-09-28 | 2015-04-07 | Amazon Technologies, Inc. | Point of presence management in request routing |
US9037680B2 (en) | 2011-06-29 | 2015-05-19 | Instart Logic, Inc. | Application acceleration |
US9047234B1 (en) * | 2006-06-05 | 2015-06-02 | Thomson Reuters (Markets) Llc | Data context passing between non-interfaced application programs in a common framework |
US9083743B1 (en) | 2012-03-21 | 2015-07-14 | Amazon Technologies, Inc. | Managing request routing information utilizing performance information |
US9130991B2 (en) | 2011-10-14 | 2015-09-08 | Silver Peak Systems, Inc. | Processing data packets in performance enhancing proxy (PEP) environment |
US9135048B2 (en) | 2012-09-20 | 2015-09-15 | Amazon Technologies, Inc. | Automated profiling of resource usage |
WO2015145079A1 (en) * | 2014-03-28 | 2015-10-01 | Orange | Method for caching a piece of content in a content distribution network |
US9154551B1 (en) | 2012-06-11 | 2015-10-06 | Amazon Technologies, Inc. | Processing DNS queries to identify pre-processing information |
US20150341458A1 (en) * | 2014-05-20 | 2015-11-26 | Electronics And Telecommunications Research Institute | Method of adaptively deploying cache positioned at subscriber network, and system therefor |
US20150350368A1 (en) * | 2007-12-27 | 2015-12-03 | At&T Intellectual Property I, L.P. | Network-optimized content delivery for high demand non-live contents |
US20160021004A1 (en) * | 2006-08-04 | 2016-01-21 | Brixham Solutions Ltd. | Global ip-based service-oriented network architecture |
US9246776B2 (en) | 2009-10-02 | 2016-01-26 | Amazon Technologies, Inc. | Forward-based resource delivery network management techniques |
US9276902B2 (en) | 2009-04-23 | 2016-03-01 | Opendns, Inc. | Robust domain name resolution |
US9288153B2 (en) | 2010-08-26 | 2016-03-15 | Amazon Technologies, Inc. | Processing encoded content |
US9294391B1 (en) | 2013-06-04 | 2016-03-22 | Amazon Technologies, Inc. | Managing network computing components utilizing request routing |
US9323577B2 (en) | 2012-09-20 | 2016-04-26 | Amazon Technologies, Inc. | Automated profiling of resource usage |
US9391825B1 (en) * | 2009-03-24 | 2016-07-12 | Amazon Technologies, Inc. | System and method for tracking service results |
US9391949B1 (en) | 2010-12-03 | 2016-07-12 | Amazon Technologies, Inc. | Request routing processing |
US9392079B2 (en) | 2013-07-19 | 2016-07-12 | International Business Machines Corporation | Directory service discovery and/or learning |
US9407681B1 (en) | 2010-09-28 | 2016-08-02 | Amazon Technologies, Inc. | Latency measurement in resource requests |
US9444884B2 (en) | 2011-12-31 | 2016-09-13 | Level 3 Communications, Llc | Load-aware load-balancing cluster without a central load balancer |
US9495338B1 (en) | 2010-01-28 | 2016-11-15 | Amazon Technologies, Inc. | Content distribution network |
US9525659B1 (en) | 2012-09-04 | 2016-12-20 | Amazon Technologies, Inc. | Request routing utilizing point of presence load information |
US9538141B2 (en) | 2007-12-31 | 2017-01-03 | Alcatel Lucent | Method and apparatus for controlling presentation of content at a user terminal |
US9591047B1 (en) | 2016-04-11 | 2017-03-07 | Level 3 Communications, Llc | Invalidation in a content delivery network (CDN) |
US9628554B2 (en) | 2012-02-10 | 2017-04-18 | Amazon Technologies, Inc. | Dynamic content delivery |
US9626224B2 (en) | 2011-11-03 | 2017-04-18 | Silver Peak Systems, Inc. | Optimizing available computing resources within a virtual environment |
US9634918B2 (en) | 2012-12-13 | 2017-04-25 | Level 3 Communications, Llc | Invalidation sequencing in a content delivery framework |
US9712484B1 (en) | 2010-09-28 | 2017-07-18 | Amazon Technologies, Inc. | Managing request routing information utilizing client identifiers |
US9717021B2 (en) | 2008-07-03 | 2017-07-25 | Silver Peak Systems, Inc. | Virtual network overlay |
US9742795B1 (en) | 2015-09-24 | 2017-08-22 | Amazon Technologies, Inc. | Mitigating network attacks |
US9774619B1 (en) | 2015-09-24 | 2017-09-26 | Amazon Technologies, Inc. | Mitigating network attacks |
US9787775B1 (en) | 2010-09-28 | 2017-10-10 | Amazon Technologies, Inc. | Point of presence management in request routing |
US9794281B1 (en) | 2015-09-24 | 2017-10-17 | Amazon Technologies, Inc. | Identifying sources of network attacks |
US20170310783A1 (en) * | 2001-07-13 | 2017-10-26 | Open Text Sa Ulc | System, method and storage medium for managing items within file directory structure |
US9819567B1 (en) | 2015-03-30 | 2017-11-14 | Amazon Technologies, Inc. | Traffic surge management for points of presence |
US9832141B1 (en) | 2015-05-13 | 2017-11-28 | Amazon Technologies, Inc. | Routing based request correlation |
US9843557B2 (en) | 2004-12-09 | 2017-12-12 | Level 3 Communications, Llc | Systems and methods for dynamically registering endpoints in a network |
US9875344B1 (en) | 2014-09-05 | 2018-01-23 | Silver Peak Systems, Inc. | Dynamic monitoring and authorization of an optimization device |
US9887931B1 (en) | 2015-03-30 | 2018-02-06 | Amazon Technologies, Inc. | Traffic surge management for points of presence |
US9887932B1 (en) | 2015-03-30 | 2018-02-06 | Amazon Technologies, Inc. | Traffic surge management for points of presence |
US9912740B2 (en) | 2008-06-30 | 2018-03-06 | Amazon Technologies, Inc. | Latency measurement in resource requests |
US9948496B1 (en) | 2014-07-30 | 2018-04-17 | Silver Peak Systems, Inc. | Determining a transit appliance for data traffic to a software service |
US9967056B1 (en) | 2016-08-19 | 2018-05-08 | Silver Peak Systems, Inc. | Forward packet recovery with constrained overhead |
EP3213467A4 (en) * | 2014-10-31 | 2018-05-09 | NetApp, Inc. | Multi-tenant networking |
US9992086B1 (en) | 2016-08-23 | 2018-06-05 | Amazon Technologies, Inc. | External health checking of virtual private cloud network environments |
US10021179B1 (en) | 2012-02-21 | 2018-07-10 | Amazon Technologies, Inc. | Local resource delivery network |
US10033627B1 (en) | 2014-12-18 | 2018-07-24 | Amazon Technologies, Inc. | Routing mode and point-of-presence selection service |
US10033691B1 (en) | 2016-08-24 | 2018-07-24 | Amazon Technologies, Inc. | Adaptive resolution of domain name requests in virtual private cloud network environments |
US10049051B1 (en) | 2015-12-11 | 2018-08-14 | Amazon Technologies, Inc. | Reserved cache space in content delivery networks |
US10075551B1 (en) | 2016-06-06 | 2018-09-11 | Amazon Technologies, Inc. | Request management for hierarchical cache |
US10091096B1 (en) | 2014-12-18 | 2018-10-02 | Amazon Technologies, Inc. | Routing mode and point-of-presence selection service |
US20180288151A1 (en) * | 2002-02-14 | 2018-10-04 | Level 3 Communications, Llc | Managed object replication and delivery |
US10097448B1 (en) | 2014-12-18 | 2018-10-09 | Amazon Technologies, Inc. | Routing mode and point-of-presence selection service |
US10097566B1 (en) | 2015-07-31 | 2018-10-09 | Amazon Technologies, Inc. | Identifying targets of network attacks |
US10110694B1 (en) | 2016-06-29 | 2018-10-23 | Amazon Technologies, Inc. | Adaptive transfer rate for retrieving content from a server |
US10164861B2 (en) | 2015-12-28 | 2018-12-25 | Silver Peak Systems, Inc. | Dynamic monitoring and visualization for network health characteristics |
US10205698B1 (en) | 2012-12-19 | 2019-02-12 | Amazon Technologies, Inc. | Source-dependent address resolution |
US10225326B1 (en) | 2015-03-23 | 2019-03-05 | Amazon Technologies, Inc. | Point of presence based data uploading |
US10257307B1 (en) | 2015-12-11 | 2019-04-09 | Amazon Technologies, Inc. | Reserved cache space in content delivery networks |
US10257082B2 (en) | 2017-02-06 | 2019-04-09 | Silver Peak Systems, Inc. | Multi-level learning for classifying traffic flows |
US10270878B1 (en) | 2015-11-10 | 2019-04-23 | Amazon Technologies, Inc. | Routing for origin-facing points of presence |
US10348639B2 (en) | 2015-12-18 | 2019-07-09 | Amazon Technologies, Inc. | Use of virtual endpoints to improve data transmission rates |
US10372499B1 (en) | 2016-12-27 | 2019-08-06 | Amazon Technologies, Inc. | Efficient region selection system for executing request-driven code |
US10432484B2 (en) | 2016-06-13 | 2019-10-01 | Silver Peak Systems, Inc. | Aggregating select network traffic statistics |
US10447648B2 (en) | 2017-06-19 | 2019-10-15 | Amazon Technologies, Inc. | Assignment of a POP to a DNS resolver based on volume of communications over a link between client devices and the POP |
US10469513B2 (en) | 2016-10-05 | 2019-11-05 | Amazon Technologies, Inc. | Encrypted network addresses |
US10503613B1 (en) | 2017-04-21 | 2019-12-10 | Amazon Technologies, Inc. | Efficient serving of resources during server unavailability |
US10554701B1 (en) | 2018-04-09 | 2020-02-04 | Amazon Technologies, Inc. | Real-time call tracing in a service-oriented system |
US10592578B1 (en) | 2018-03-07 | 2020-03-17 | Amazon Technologies, Inc. | Predictive content push-enabled content delivery network |
US10616179B1 (en) | 2015-06-25 | 2020-04-07 | Amazon Technologies, Inc. | Selective routing of domain name system (DNS) requests |
US10623408B1 (en) | 2012-04-02 | 2020-04-14 | Amazon Technologies, Inc. | Context sensitive object management |
US10637721B2 (en) | 2018-03-12 | 2020-04-28 | Silver Peak Systems, Inc. | Detecting path break conditions while minimizing network overhead |
US10652087B2 (en) | 2012-12-13 | 2020-05-12 | Level 3 Communications, Llc | Content delivery framework having fill services |
CN111191156A (en) * | 2019-12-20 | 2020-05-22 | 中移（杭州）信息技术有限公司 | Network request resource scheduling method and device and computer readable storage medium |
US10701148B2 (en) | 2012-12-13 | 2020-06-30 | Level 3 Communications, Llc | Content delivery framework having storage services |
US10701149B2 (en) | 2012-12-13 | 2020-06-30 | Level 3 Communications, Llc | Content delivery framework having origin services |
US10771394B2 (en) | 2017-02-06 | 2020-09-08 | Silver Peak Systems, Inc. | Multi-level learning for classifying traffic flows on a first packet from DNS data |
US10791050B2 (en) | 2012-12-13 | 2020-09-29 | Level 3 Communications, Llc | Geographic location determination in a content delivery framework |
US10805840B2 (en) | 2008-07-03 | 2020-10-13 | Silver Peak Systems, Inc. | Data transmission via a virtual wide area network overlay |
US10831549B1 (en) | 2016-12-27 | 2020-11-10 | Amazon Technologies, Inc. | Multi-region request-driven code execution system |
US10862852B1 (en) | 2018-11-16 | 2020-12-08 | Amazon Technologies, Inc. | Resolution of domain name requests in heterogeneous network environments |
US10892978B2 (en) | 2017-02-06 | 2021-01-12 | Silver Peak Systems, Inc. | Multi-level learning for classifying traffic flows from first packet data |
US10911328B2 (en) | 2011-12-27 | 2021-02-02 | Netapp, Inc. | Quality of service policy based load adaption |
US10924573B2 (en) | 2008-04-04 | 2021-02-16 | Level 3 Communications, Llc | Handling long-tail content in a content delivery network (CDN) |
US10929022B2 (en) | 2016-04-25 | 2021-02-23 | Netapp. Inc. | Space savings reporting for storage system supporting snapshot and clones |
US10938884B1 (en) | 2017-01-30 | 2021-03-02 | Amazon Technologies, Inc. | Origin server cloaking using virtual private cloud network environments |
US10951488B2 (en) | 2011-12-27 | 2021-03-16 | Netapp, Inc. | Rule-based performance class access management for storage cluster performance guarantees |
US10958501B1 (en) * | 2010-09-28 | 2021-03-23 | Amazon Technologies, Inc. | Request routing information based on client IP groupings |
US10997098B2 (en) | 2016-09-20 | 2021-05-04 | Netapp, Inc. | Quality of service policy sets |
US11025747B1 (en) | 2018-12-12 | 2021-06-01 | Amazon Technologies, Inc. | Content request pattern-based routing system |
US11044202B2 (en) | 2017-02-06 | 2021-06-22 | Silver Peak Systems, Inc. | Multi-level learning for predicting and classifying traffic flows from first packet data |
US11044195B1 (en) | 2008-08-21 | 2021-06-22 | United Services Automobile Association (Usaa) | Preferential loading in data centers |
US11075987B1 (en) | 2017-06-12 | 2021-07-27 | Amazon Technologies, Inc. | Load estimating content delivery network |
DE102008003894B4 (en) | 2007-01-12 | 2021-07-29 | Google Technology Holdings LLC | Data dissemination and caching |
US11212210B2 (en) | 2017-09-21 | 2021-12-28 | Silver Peak Systems, Inc. | Selective route exporting using source type |
US11290418B2 (en) | 2017-09-25 | 2022-03-29 | Amazon Technologies, Inc. | Hybrid content request routing system |
US11323510B2 (en) | 2008-02-28 | 2022-05-03 | Level 3 Communications, Llc | Load-balancing cluster |
US11368548B2 (en) | 2012-12-13 | 2022-06-21 | Level 3 Communications, Llc | Beacon services in a content delivery framework |
US11379119B2 (en) | 2010-03-05 | 2022-07-05 | Netapp, Inc. | Writing data in a distributed data storage system |
US11386120B2 (en) | 2014-02-21 | 2022-07-12 | Netapp, Inc. | Data syncing in a distributed system |
US11604667B2 (en) | 2011-04-27 | 2023-03-14 | Amazon Technologies, Inc. | Optimized deployment based upon customer locality |
Families Citing this family (338)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8060613B2 (en) | 1998-02-10 | 2011-11-15 | Level 3 Communications, Llc | Resource invalidation in a content delivery network |
US6185598B1 (en) | 1998-02-10 | 2001-02-06 | Digital Island, Inc. | Optimized network resource location |
US20020126135A1 (en) * | 1998-10-19 | 2002-09-12 | Keith Ball | Image sharing for instant messaging |
US7339595B2 (en) * | 1998-10-19 | 2008-03-04 | Lightsurf Technologies, Inc. | Method and system for improved internet color |
US7664864B2 (en) * | 1998-11-13 | 2010-02-16 | Verisign, Inc. | Meta content distribution network |
US7194554B1 (en) | 1998-12-08 | 2007-03-20 | Nomadix, Inc. | Systems and methods for providing dynamic network authorization authentication and accounting |
US8266266B2 (en) | 1998-12-08 | 2012-09-11 | Nomadix, Inc. | Systems and methods for providing dynamic network authorization, authentication and accounting |
US8713641B1 (en) | 1998-12-08 | 2014-04-29 | Nomadix, Inc. | Systems and methods for authorizing, authenticating and accounting users having transparent computer access to a network using a gateway device |
US7299294B1 (en) * | 1999-11-10 | 2007-11-20 | Emc Corporation | Distributed traffic controller for network data |
US6415323B1 (en) * | 1999-09-03 | 2002-07-02 | Fastforward Networks | Proximity-based redirection system for robust and scalable service-node location in an internetwork |
US7120694B2 (en) * | 1999-10-22 | 2006-10-10 | Verizon Laboratories Inc. | Service level agreements and management thereof |
WO2001031885A2 (en) | 1999-10-22 | 2001-05-03 | Nomadix, Inc. | Gateway device having an xml interface and associated method |
US6647420B2 (en) * | 2001-01-18 | 2003-11-11 | Reynolds And Reynolds Holdings, Inc. | Enterlink for providing a federated business to business system that interconnects applications of multiple companies |
US20020163889A1 (en) * | 2000-02-02 | 2002-11-07 | Yechiam Yemini | Method and apparatus for providing services on a dynamically addressed network |
US6820133B1 (en) * | 2000-02-07 | 2004-11-16 | Netli, Inc. | System and method for high-performance delivery of web content using high-performance communications protocol between the first and second specialized intermediate nodes to optimize a measure of communications performance between the source and the destination |
US6519773B1 (en) | 2000-02-08 | 2003-02-11 | Sherjil Ahmed | Method and apparatus for a digitized CATV network for bundled services |
US7162539B2 (en) * | 2000-03-16 | 2007-01-09 | Adara Networks, Inc. | System and method for discovering information objects and information object repositories in computer networks |
US7552233B2 (en) * | 2000-03-16 | 2009-06-23 | Adara Networks, Inc. | System and method for information object routing in computer networks |
US6981180B1 (en) * | 2000-03-16 | 2005-12-27 | Akamai Technologies, Inc. | Method and apparatus for testing request-response service using live connection traffic |
US7565450B2 (en) * | 2000-03-16 | 2009-07-21 | Adara Networks Inc. | System and method for using a mapping between client addresses and addresses of caches to support content delivery |
JP3617406B2 (en) * | 2000-03-30 | 2005-02-02 | 日本電気株式会社 | Quality assurance type communication service providing method and service providing method corresponding to multi-domain and service mediating apparatus |
US7024466B2 (en) * | 2000-04-07 | 2006-04-04 | Movielink, Llc | Network configured for delivery of content for download to a recipient |
US20020073033A1 (en) * | 2000-04-07 | 2002-06-13 | Sherr Scott Jeffrey | Online digital video signal transfer apparatus and method |
US6937814B1 (en) * | 2000-04-14 | 2005-08-30 | Realnetworks, Inc. | System and method for play while recording processing |
US7725596B2 (en) * | 2000-04-28 | 2010-05-25 | Adara Networks, Inc. | System and method for resolving network layer anycast addresses to network layer unicast addresses |
US7908337B2 (en) * | 2000-04-28 | 2011-03-15 | Adara Networks, Inc. | System and method for using network layer uniform resource locator routing to locate the closest server carrying specific content |
US7343422B2 (en) * | 2000-04-28 | 2008-03-11 | Adara Networks, Inc. | System and method for using uniform resource locators to map application layer content names to network layer anycast addresses |
US7577754B2 (en) * | 2000-04-28 | 2009-08-18 | Adara Networks, Inc. | System and method for controlling access to content carried in a caching architecture |
US20010039547A1 (en) * | 2000-05-08 | 2001-11-08 | Black Jonathan K. | Internet web-based technology for storing, archiving, and updating key personal identity items |
AU7170301A (en) * | 2000-06-29 | 2002-01-14 | Cachestream Corp | Virtual multicasting |
CA2394250A1 (en) * | 2000-07-24 | 2002-01-31 | Sungjin C&C, Ltd. | Relaying system for broadcasting multi-channel internet television and networking method thereof |
US20060122917A1 (en) * | 2000-08-14 | 2006-06-08 | Urbanpixel Inc | Real-time collaborative commerce in a multiple browser environment |
JP2002074123A (en) * | 2000-08-31 | 2002-03-15 | Sony Corp | Server user reservation method, reservation managing device and program storage medium |
US20030061294A1 (en) * | 2000-09-19 | 2003-03-27 | Stennicke Michael B. | Method and apparatus for digital media exchange |
US7657629B1 (en) | 2000-09-26 | 2010-02-02 | Foundry Networks, Inc. | Global server load balancing |
US9130954B2 (en) | 2000-09-26 | 2015-09-08 | Brocade Communications Systems, Inc. | Distributed health check for global server load balancing |
US7454500B1 (en) * | 2000-09-26 | 2008-11-18 | Foundry Networks, Inc. | Global server load balancing |
JP2002108840A (en) * | 2000-09-28 | 2002-04-12 | Toshiba Corp | Distributed order-receiving system, receiving server, contents server, method for distributed receiving order and computer program product |
US7197566B1 (en) * | 2000-09-29 | 2007-03-27 | Intel Corporation | Method and apparatus for selecting server to distribute multimedia data via a network |
US6970943B1 (en) * | 2000-10-11 | 2005-11-29 | Nortel Networks Limited | Routing architecture including a compute plane configured for high-speed processing of packets to provide application layer support |
US8023421B2 (en) | 2002-07-25 | 2011-09-20 | Avaya Inc. | Method and apparatus for the assessment and optimization of network traffic |
WO2002033894A2 (en) | 2000-10-17 | 2002-04-25 | Routescience Technologies, Inc. | Method and apparatus for performance and cost optimization in an internetwork |
US7720959B2 (en) | 2000-10-17 | 2010-05-18 | Avaya Inc. | Method and apparatus for characterizing the quality of a network path |
US7349994B2 (en) * | 2000-10-17 | 2008-03-25 | Avaya Technology Corp. | Method and apparatus for coordinating routing parameters via a back-channel communication medium |
US20010013052A1 (en) * | 2000-10-25 | 2001-08-09 | Yobie Benjamin | Universal method and apparatus for disparate systems to communicate |
DE60131900T2 (en) * | 2000-10-26 | 2008-12-04 | Flood, James C. jun., Portland | METHOD AND SYSTEM FOR MANAGING DISTRIBUTED CONTENT AND RELATED METADATA |
US6970939B2 (en) * | 2000-10-26 | 2005-11-29 | Intel Corporation | Method and apparatus for large payload distribution in a network |
AU2002236435A1 (en) * | 2000-10-26 | 2002-05-21 | Prismedia Networks, Inc. | Method and apparatus for real-time parallel delivery of segments of a large payload file |
AUPR129300A0 (en) * | 2000-11-07 | 2000-11-30 | Devsecure Pty Ltd | Encoding of universal resource locators in a security gateway to enable manipulation by active content |
US7155487B2 (en) * | 2000-11-30 | 2006-12-26 | Intel Corporation | Method, system and article of manufacture for data distribution over a network |
US7039014B1 (en) * | 2000-12-26 | 2006-05-02 | Cisco Technology, Inc. | Network-wide connection-based debug mechanism |
US7188145B2 (en) | 2001-01-12 | 2007-03-06 | Epicrealm Licensing Llc | Method and system for dynamic distributed data caching |
US7035911B2 (en) | 2001-01-12 | 2006-04-25 | Epicrealm, Licensing Llc | Method and system for community data caching |
US20020138561A1 (en) * | 2001-02-16 | 2002-09-26 | Gemini Networks, Inc. | System, method, and computer program product for an end-user of an open access network to select a new service provider following a discontinuance of a business relationship between their current service provider and the operator of the open access network |
US7130908B1 (en) | 2001-03-13 | 2006-10-31 | Intelsat Ltd. | Forward cache management between edge nodes in a satellite based content delivery system |
US7237017B1 (en) | 2001-03-13 | 2007-06-26 | Panamsat Corporation | Micronode in a satellite based content delivery system |
US7174373B1 (en) | 2001-03-13 | 2007-02-06 | Panamsat Corporation | Self-contained demonstration node in a satellite based content delivery system |
US7154898B1 (en) | 2001-03-13 | 2006-12-26 | Intelsat, Ltd. | Scalable edge node |
US7555561B2 (en) * | 2001-03-19 | 2009-06-30 | The Aerospace Corporation | Cooperative adaptive web caching routing and forwarding web content data broadcasting method |
EP1244262B1 (en) * | 2001-03-23 | 2005-05-11 | Sun Microsystems, Inc. | Redirection of client requests |
US7720996B2 (en) * | 2001-03-27 | 2010-05-18 | Microsoft Corporation | Internet protocol (IP) address proximity and application to peer provider location |
US20020198995A1 (en) * | 2001-04-10 | 2002-12-26 | International Business Machines Corporation | Apparatus and methods for maximizing service-level-agreement profits |
JP3884920B2 (en) * | 2001-04-16 | 2007-02-21 | 株式会社日立製作所 | Data delivery method |
US7292571B2 (en) * | 2001-04-30 | 2007-11-06 | Aol Llc, A Delaware Limited Liability Company | Load balancing with direct terminal response |
US20020184507A1 (en) * | 2001-05-31 | 2002-12-05 | Proact Technologies Corp. | Centralized single sign-on method and system for a client-server environment |
US8135834B1 (en) * | 2001-06-18 | 2012-03-13 | Packet Design, Inc. | Method and system for causing intra-AS network traffic to be more evenly balanced |
US20030005138A1 (en) * | 2001-06-25 | 2003-01-02 | Giffin Michael Shawn | Wireless streaming audio system |
EP1415446A1 (en) * | 2001-07-05 | 2004-05-06 | Koninklijke Philips Electronics N.V. | Substituting url for attachment in forwarding electronic content |
US6981029B1 (en) | 2001-07-17 | 2005-12-27 | Cisco Technology, Inc. | System and method for processing a request for information in a network |
US6981032B2 (en) * | 2001-07-27 | 2005-12-27 | International Business Machines Corporation | Enhanced multicast-based web server |
JP2003051837A (en) * | 2001-08-07 | 2003-02-21 | Sony Corp | Address management system, any-cast address setting processing unit, communication terminal, information storage device, address management method, and computer program |
FI20011651A (en) * | 2001-08-15 | 2003-02-16 | Nokia Corp | Load balancing for a server cluster |
US20030055971A1 (en) * | 2001-09-19 | 2003-03-20 | Menon Rama R. | Providing load balancing in delivering rich media |
US7769823B2 (en) * | 2001-09-28 | 2010-08-03 | F5 Networks, Inc. | Method and system for distributing requests for content |
KR100930190B1 (en) * | 2001-09-28 | 2009-12-07 | 레벨 3 시디엔 인터내셔널 | Configurable Adaptive Global Traffic Control and Management |
US7860964B2 (en) | 2001-09-28 | 2010-12-28 | Level 3 Communications, Llc | Policy-based content delivery network selection |
US8914480B1 (en) * | 2001-10-15 | 2014-12-16 | 6020356 Canada Inc. | Method and device for transparent interception of socket connections |
US7003575B2 (en) * | 2001-10-15 | 2006-02-21 | First Hop Oy | Method for assisting load balancing in a server cluster by rerouting IP traffic, and a server cluster and a client, operating according to same |
US7761594B1 (en) * | 2001-10-15 | 2010-07-20 | Netapp, Inc. | Method and apparatus for forwarding requests in a cache hierarchy based on user-defined forwarding rules |
EP1451714B1 (en) * | 2001-11-01 | 2018-05-02 | Verisign, Inc. | Method and system for updating a remote database |
US20030120680A1 (en) * | 2001-11-16 | 2003-06-26 | Rakesh Agrawal | Method for directly providing content and services via a computer network |
US6954456B2 (en) | 2001-12-14 | 2005-10-11 | At & T Corp. | Method for content-aware redirection and content renaming |
CA2471855C (en) * | 2002-01-11 | 2013-03-19 | Akamai Technologies, Inc. | Java application framework for use in a content delivery network (cdn) |
JP2003223378A (en) * | 2002-01-29 | 2003-08-08 | Fujitsu Ltd | Contents delivery network service method and system |
US8224986B1 (en) * | 2002-03-07 | 2012-07-17 | Cisco Technology, Inc. | Methods and apparatus for redirecting requests for content |
US7099936B2 (en) * | 2002-03-29 | 2006-08-29 | International Business Machines Corporation | Multi-tier service level agreement method and system |
US7133905B2 (en) * | 2002-04-09 | 2006-11-07 | Akamai Technologies, Inc. | Method and system for tiered distribution in a content delivery network |
US9137324B2 (en) * | 2002-04-10 | 2015-09-15 | International Business Machines Corporation | Capacity on-demand in distributed computing environments |
ITTO20020341A1 (en) * | 2002-04-19 | 2003-10-20 | Telecom Italia Lab Spa | PROCEDURE FOR CARRYING OUT THE INTERLAPHY BETWEEN NETWORKS OF THE CONTENT DELIVERY NETWORK -CDN- TYPE, RELATIVE NETWORK SET AND INTERFAC COMPONENT |
US20030204573A1 (en) * | 2002-04-30 | 2003-10-30 | Andre Beck | Method of providing a web user with additional context-specific information |
US7260598B1 (en) * | 2002-05-03 | 2007-08-21 | Cisco Technology, Inc. | Methods and apparatus for processing client requests in a content distribution network using client lists |
SE524989C2 (en) * | 2002-05-08 | 2004-11-09 | Marratech Ab | Device and method for distributing flowing real-time information between clients |
US7945636B2 (en) * | 2002-05-15 | 2011-05-17 | In-Store Broadcasting Network, Llc | Providing a multi-tier enterprise level application |
US7657917B2 (en) * | 2002-05-23 | 2010-02-02 | Microsoft Corporation | Interactivity emulator for broadcast communication |
JP4221646B2 (en) * | 2002-06-26 | 2009-02-12 | 日本電気株式会社 | Shared cache server |
US20040015976A1 (en) * | 2002-06-28 | 2004-01-22 | Sun Microsystems, Inc., A Delaware Corporation | Optimized distributed resource management system with digital signature |
US7219120B2 (en) * | 2002-07-09 | 2007-05-15 | Savvis Communications Corporation | Systems, methods and protocols for securing data in transit over networks |
US7086061B1 (en) | 2002-08-01 | 2006-08-01 | Foundry Networks, Inc. | Statistical tracking of global server load balancing for selecting the best network address from ordered list of network addresses based on a set of performance metrics |
US7565413B1 (en) * | 2002-08-05 | 2009-07-21 | Cisco Technology, Inc. | Content request redirection from a wed protocol to a file protocol |
US7574508B1 (en) | 2002-08-07 | 2009-08-11 | Foundry Networks, Inc. | Canonical name (CNAME) handling for global server load balancing |
US20040034705A1 (en) * | 2002-08-13 | 2004-02-19 | Mihai Focsaneanu | Connecting devices in a data network |
JP2004086562A (en) * | 2002-08-27 | 2004-03-18 | Fujitsu Ltd | Content relay device, and its method and program |
ITTO20020762A1 (en) * | 2002-09-02 | 2004-03-03 | Telecom Italia Lab Spa | PROCEDURE AND SYSTEM FOR REALIZING CONNECTIVITY ESTIMATES |
US10051092B2 (en) * | 2002-10-15 | 2018-08-14 | Rockwell Collins, Inc. | Method and device for transparent interception of socket connections |
AU2003282030A1 (en) * | 2002-10-16 | 2004-05-04 | Mobile Cohesion Limited | A service access gateway |
US7310686B2 (en) * | 2002-10-27 | 2007-12-18 | Paxfire, Inc. | Apparatus and method for transparent selection of an Internet server based on geographic location of a user |
KR20040075460A (en) * | 2003-02-21 | 2004-08-30 | 엘지전자 주식회사 | data broadcasting system and the operating method |
US8145699B2 (en) * | 2003-05-30 | 2012-03-27 | Microsoft Corporation | Generalized proximity service |
US7577939B2 (en) * | 2003-06-27 | 2009-08-18 | International Business Machines Corporation | Method, system and program product for sharing source code over a network |
US20040267875A1 (en) * | 2003-06-30 | 2004-12-30 | Hennessey Wade L. | Method and apparatus for establishing peering rules for distributed content delivery |
US7373394B1 (en) | 2003-06-30 | 2008-05-13 | Cisco Technology, Inc. | Method and apparatus for multicast cloud with integrated multicast and unicast channel routing in a content distribution network |
US9525566B2 (en) * | 2003-07-31 | 2016-12-20 | Cloudsoft Corporation Limited | Self-managed mediated information flow |
US7805332B2 (en) | 2003-08-01 | 2010-09-28 | AOL, Inc. | System and method for segmenting and targeting audience members |
US9118812B2 (en) | 2003-08-01 | 2015-08-25 | Advertising.Com Llc | Audience server |
US20050125290A1 (en) * | 2003-08-01 | 2005-06-09 | Gil Beyda | Audience targeting system with profile synchronization |
US9928522B2 (en) * | 2003-08-01 | 2018-03-27 | Oath (Americas) Inc. | Audience matching network with performance factoring and revenue allocation |
US8150732B2 (en) * | 2003-08-01 | 2012-04-03 | Tacoda Llc | Audience targeting system with segment management |
US9117217B2 (en) * | 2003-08-01 | 2015-08-25 | Advertising.Com Llc | Audience targeting with universal profile synchronization |
US8464290B2 (en) | 2003-08-01 | 2013-06-11 | Tacoda, Inc. | Network for matching an audience with deliverable content |
US8291062B2 (en) * | 2003-08-20 | 2012-10-16 | Aol Inc. | Managing access to digital content sources |
US8909726B1 (en) * | 2003-08-27 | 2014-12-09 | Cisco Technology, Inc. | Priority based anycast routing |
WO2005048019A2 (en) | 2003-09-04 | 2005-05-26 | Emc Corporation | Data message mirroring and redirection |
US7450937B1 (en) | 2003-09-04 | 2008-11-11 | Emc Corporation | Mirrored data message processing |
US9584360B2 (en) | 2003-09-29 | 2017-02-28 | Foundry Networks, Llc | Global server load balancing support for private VIP addresses |
US20050076099A1 (en) * | 2003-10-03 | 2005-04-07 | Nortel Networks Limited | Method and apparatus for live streaming media replication in a communication network |
GB0324878D0 (en) * | 2003-10-24 | 2003-11-26 | Nokia Corp | Communication system |
US7945648B2 (en) * | 2003-10-27 | 2011-05-17 | Hewlett-Packard Development Company, L.P. | Methods and systems for dynamically configuring a network component to reroute media streams |
US7610387B1 (en) * | 2003-11-12 | 2009-10-27 | Cisco Technology, Inc. | Method and apparatus for providing sticky bindings using version vectors |
US20050198269A1 (en) * | 2004-02-13 | 2005-09-08 | Champagne Andrew F. | Method and system for monitoring border gateway protocol (BGP) data in a distributed computer network |
JP4291174B2 (en) * | 2004-02-16 | 2009-07-08 | 株式会社日立製作所 | Web service delegation processing method, execution apparatus, and processing program |
US8037203B2 (en) * | 2004-02-19 | 2011-10-11 | International Business Machines Corporation | User defined preferred DNS reference |
US7546286B2 (en) * | 2004-02-19 | 2009-06-09 | Microsoft Corporation | Offline multi-table data editing and storage |
US7716168B2 (en) | 2005-06-29 | 2010-05-11 | Microsoft Corporation | Modifying table definitions within a database application |
US7546291B2 (en) * | 2004-02-19 | 2009-06-09 | Microsoft Corporation | Data source task pane |
US8135755B2 (en) | 2005-06-29 | 2012-03-13 | Microsoft Corporation | Templates in a schema editor |
US7451185B2 (en) * | 2004-02-27 | 2008-11-11 | Fotomedia Technologies, Llc | Method and system for providing links to resources related to a specified resource |
US8782654B2 (en) | 2004-03-13 | 2014-07-15 | Adaptive Computing Enterprises, Inc. | Co-allocating a reservation spanning different compute resources types |
US7490325B2 (en) | 2004-03-13 | 2009-02-10 | Cluster Resources, Inc. | System and method for providing intelligent pre-staging of data in a compute environment |
US7496651B1 (en) | 2004-05-06 | 2009-02-24 | Foundry Networks, Inc. | Configurable geographic prefixes for global server load balancing |
US7584301B1 (en) | 2004-05-06 | 2009-09-01 | Foundry Networks, Inc. | Host-level policies for global server load balancing |
US8214447B2 (en) * | 2004-06-08 | 2012-07-03 | Bose Corporation | Managing an audio network |
US20070266388A1 (en) | 2004-06-18 | 2007-11-15 | Cluster Resources, Inc. | System and method for providing advanced reservations in a compute environment |
US9647952B2 (en) * | 2004-08-06 | 2017-05-09 | LiveQoS Inc. | Network quality as a service |
US8176490B1 (en) | 2004-08-20 | 2012-05-08 | Adaptive Computing Enterprises, Inc. | System and method of interfacing a workload manager and scheduler with an identity manager |
US7423977B1 (en) | 2004-08-23 | 2008-09-09 | Foundry Networks Inc. | Smoothing algorithm for round trip time (RTT) measurements |
US7526566B2 (en) * | 2004-09-10 | 2009-04-28 | Sony Ericsson Mobile Communications Ab | Methods of operating radio communications devices including predefined streaming times and addresses and related devices |
US7719971B1 (en) * | 2004-09-15 | 2010-05-18 | Qurio Holdings, Inc. | Peer proxy binding |
US7564869B2 (en) | 2004-10-22 | 2009-07-21 | Cisco Technology, Inc. | Fibre channel over ethernet |
US8271980B2 (en) | 2004-11-08 | 2012-09-18 | Adaptive Computing Enterprises, Inc. | System and method of providing system jobs within a compute environment |
KR100758281B1 (en) * | 2004-12-20 | 2007-09-12 | 한국전자통신연구원 | Content Distribution Management System managing Multi-Service Type and its method |
US7818401B2 (en) * | 2004-12-23 | 2010-10-19 | General Instrument Corporation | Method and apparatus for providing decentralized load distribution |
JP4103892B2 (en) * | 2005-01-26 | 2008-06-18 | オンキヨー株式会社 | Peer-to-peer content distribution system |
US9075657B2 (en) | 2005-04-07 | 2015-07-07 | Adaptive Computing Enterprises, Inc. | On-demand access to compute resources |
US8930536B2 (en) | 2005-03-16 | 2015-01-06 | Adaptive Computing Enterprises, Inc. | Virtual private cluster |
US8863143B2 (en) | 2006-03-16 | 2014-10-14 | Adaptive Computing Enterprises, Inc. | System and method for managing a hybrid compute environment |
US9231886B2 (en) | 2005-03-16 | 2016-01-05 | Adaptive Computing Enterprises, Inc. | Simple integration of an on-demand compute environment |
US9015324B2 (en) | 2005-03-16 | 2015-04-21 | Adaptive Computing Enterprises, Inc. | System and method of brokering cloud computing resources |
US8782120B2 (en) | 2005-04-07 | 2014-07-15 | Adaptive Computing Enterprises, Inc. | Elastic management of compute resources between a web server and an on-demand compute environment |
US7710983B2 (en) * | 2005-04-21 | 2010-05-04 | Cisco Technology, Inc. | Method and apparatus for determining information associated with a particular multicast channel in a multicast network |
US20060245358A1 (en) * | 2005-04-29 | 2006-11-02 | Beverly Harlan T | Acceleration of data packet transmission |
US8831194B2 (en) * | 2005-06-30 | 2014-09-09 | Emc Corporation | Telephonic communication redirection and compliance processing |
US8059805B2 (en) * | 2005-06-30 | 2011-11-15 | Emc Corporation | Enhanced services provided using communication redirection and processing |
US8605878B2 (en) * | 2005-06-30 | 2013-12-10 | Emc Corporation | Redirecting and mirroring of telephonic communications |
US20070037574A1 (en) * | 2005-08-09 | 2007-02-15 | Jonathan Libov | Method and apparatus of a location-based network service for mutual social notification |
US8874477B2 (en) | 2005-10-04 | 2014-10-28 | Steven Mark Hoffberg | Multifactorial optimization system and method |
US7961621B2 (en) | 2005-10-11 | 2011-06-14 | Cisco Technology, Inc. | Methods and devices for backward congestion notification |
US8166197B2 (en) | 2005-10-25 | 2012-04-24 | Oracle International Corporation | Multipath routing process |
WO2007053957A1 (en) * | 2005-11-14 | 2007-05-18 | Cyberdiffusion Inc. | Transcoder for live streams and on demand media |
US8412840B2 (en) * | 2005-11-14 | 2013-04-02 | Ando Media, Llc | Live media serving system and method |
US8055897B2 (en) * | 2005-12-06 | 2011-11-08 | Lippershy Celestial Llc | Digital object title and transmission information |
US9686183B2 (en) * | 2005-12-06 | 2017-06-20 | Zarbaña Digital Fund Llc | Digital object routing based on a service request |
US8194701B2 (en) | 2005-12-06 | 2012-06-05 | Lippershy Celestial Llc | System and/or method for downstream bidding |
US8014389B2 (en) | 2005-12-06 | 2011-09-06 | Lippershy Celestial Llc | Bidding network |
US7894447B2 (en) | 2005-12-06 | 2011-02-22 | Lippershy Celestial Llc | Digital object routing |
EP1958080A4 (en) * | 2005-12-08 | 2014-05-07 | Nortel Networks Ltd | Session initiation protocol (sip) multicast management method |
US7743026B2 (en) * | 2006-01-31 | 2010-06-22 | Microsoft Corporation | Redirection to local copies of server-based files |
US7779004B1 (en) | 2006-02-22 | 2010-08-17 | Qurio Holdings, Inc. | Methods, systems, and products for characterizing target systems |
US7764701B1 (en) | 2006-02-22 | 2010-07-27 | Qurio Holdings, Inc. | Methods, systems, and products for classifying peer systems |
US9026677B2 (en) * | 2006-03-17 | 2015-05-05 | Cisco Technology, Inc. | Method and apparatus for providing video on demand |
US9386327B2 (en) * | 2006-05-24 | 2016-07-05 | Time Warner Cable Enterprises Llc | Secondary content insertion apparatus and methods |
US8280982B2 (en) | 2006-05-24 | 2012-10-02 | Time Warner Cable Inc. | Personal content server apparatus and methods |
US8024762B2 (en) | 2006-06-13 | 2011-09-20 | Time Warner Cable Inc. | Methods and apparatus for providing virtual content over a network |
US8806045B2 (en) * | 2006-09-01 | 2014-08-12 | Microsoft Corporation | Predictive popular content replication |
US9326138B2 (en) * | 2006-09-06 | 2016-04-26 | Devicescape Software, Inc. | Systems and methods for determining location over a network |
US7873988B1 (en) | 2006-09-06 | 2011-01-18 | Qurio Holdings, Inc. | System and method for rights propagation and license management in conjunction with distribution of digital content in a social network |
US7801971B1 (en) | 2006-09-26 | 2010-09-21 | Qurio Holdings, Inc. | Systems and methods for discovering, creating, using, and managing social network circuits |
US7925592B1 (en) | 2006-09-27 | 2011-04-12 | Qurio Holdings, Inc. | System and method of using a proxy server to manage lazy content distribution in a social network |
US8554827B2 (en) | 2006-09-29 | 2013-10-08 | Qurio Holdings, Inc. | Virtual peer for a content sharing system |
US7782866B1 (en) | 2006-09-29 | 2010-08-24 | Qurio Holdings, Inc. | Virtual peer in a peer-to-peer network |
US7886334B1 (en) | 2006-12-11 | 2011-02-08 | Qurio Holdings, Inc. | System and method for social network trust assessment |
US7730216B1 (en) | 2006-12-14 | 2010-06-01 | Qurio Holdings, Inc. | System and method of sharing content among multiple social network nodes using an aggregation node |
US8239573B2 (en) * | 2006-12-15 | 2012-08-07 | Starz Entertainment, Llc | Off-peak background delivery |
US8301775B2 (en) * | 2006-12-15 | 2012-10-30 | Starz Entertainment, Llc | Affiliate bandwidth management |
JP2008172517A (en) | 2007-01-11 | 2008-07-24 | Nec Corp | Congestion control system, congestion control method, congestion control program, and program recording medium |
US20080177894A1 (en) * | 2007-01-22 | 2008-07-24 | Jennings Raymond B | Methods and Apparatus For Improving Interactions Between Multi-Server Web Environments and Web Browsers |
US8259720B2 (en) * | 2007-02-02 | 2012-09-04 | Cisco Technology, Inc. | Triple-tier anycast addressing |
US7694016B2 (en) * | 2007-02-07 | 2010-04-06 | Nominum, Inc. | Composite DNS zones |
US20080212584A1 (en) * | 2007-03-02 | 2008-09-04 | At&T Knowledge Ventures, L.P. | Method and system for presentation of multicast trees |
US8385190B2 (en) | 2007-03-14 | 2013-02-26 | At&T Intellectual Property I, Lp | Controlling multicast source selection in an anycast source audio/video network |
US7756130B1 (en) | 2007-05-22 | 2010-07-13 | At&T Mobility Ii Llc | Content engine for mobile communications systems |
US8996723B2 (en) * | 2007-06-04 | 2015-03-31 | Microsoft Technology Licensing, Llc | ISP-aware peer-to-peer content exchange |
US10223858B2 (en) | 2007-07-05 | 2019-03-05 | Mediaport Entertainment, Inc. | Systems and methods monitoring devices, systems, users and user activity at remote locations |
US8121038B2 (en) | 2007-08-21 | 2012-02-21 | Cisco Technology, Inc. | Backward congestion notification |
US8041773B2 (en) | 2007-09-24 | 2011-10-18 | The Research Foundation Of State University Of New York | Automatic clustering for self-organizing grids |
US8214524B2 (en) * | 2007-12-21 | 2012-07-03 | Hostway Corporation | System and method for selecting an optimal authoritative name server |
US8543667B2 (en) | 2008-01-14 | 2013-09-24 | Akamai Technologies, Inc. | Policy-based content insertion |
US20090187978A1 (en) * | 2008-01-18 | 2009-07-23 | Yahoo! Inc. | Security and authentications in peer-to-peer networks |
US7594035B2 (en) | 2008-02-22 | 2009-09-22 | Tactara, Llc | Methods of providing published content |
US8972177B2 (en) | 2008-02-26 | 2015-03-03 | Microsoft Technology Licensing, Llc | System for logging life experiences using geographic cues |
US8015144B2 (en) | 2008-02-26 | 2011-09-06 | Microsoft Corporation | Learning transportation modes from raw GPS data |
US7991879B2 (en) | 2008-03-03 | 2011-08-02 | Microsoft Corporation | Internet location coordinate enhanced domain name system |
US8458298B2 (en) * | 2008-03-03 | 2013-06-04 | Microsoft Corporation | Failover in an internet location coordinate enhanced domain name system |
US8966121B2 (en) * | 2008-03-03 | 2015-02-24 | Microsoft Corporation | Client-side management of domain name information |
US7930427B2 (en) * | 2008-03-03 | 2011-04-19 | Microsoft Corporation | Client-side load balancing |
US7860973B2 (en) * | 2008-06-27 | 2010-12-28 | Microsoft Corporation | Data center scheduler |
US8619775B2 (en) * | 2008-07-21 | 2013-12-31 | Ltn Global Communications, Inc. | Scalable flow transport and delivery network and associated methods and systems |
US8775456B2 (en) * | 2008-11-03 | 2014-07-08 | Bmc Software, Inc. | System and method for scheduled and collaborative distribution of software and data to many thousands of clients over a network using dynamic virtual proxies |
US9426213B2 (en) | 2008-11-11 | 2016-08-23 | At&T Intellectual Property Ii, L.P. | Hybrid unicast/anycast content distribution network system |
US8316106B2 (en) | 2008-12-05 | 2012-11-20 | At&T Intellectual Property Ii, Lp | System and method for assigning requests in a content distribution network |
US8437267B2 (en) | 2008-12-22 | 2013-05-07 | Ltn Global Communications, Inc. | System and method for recovery of packets in overlay networks |
US9063226B2 (en) * | 2009-01-14 | 2015-06-23 | Microsoft Technology Licensing, Llc | Detecting spatial outliers in a location entity dataset |
US9485299B2 (en) * | 2009-03-09 | 2016-11-01 | Arris Canada, Inc. | Progressive download gateway |
US20100235469A1 (en) * | 2009-03-11 | 2010-09-16 | Morris Robert P | Method And System For Providing Access To Resources Related To A Locatable Resource |
US9106569B2 (en) | 2009-03-29 | 2015-08-11 | Ltn Global Communications, Inc. | System and method that routes flows via multicast flow transport for groups |
US8599851B2 (en) | 2009-04-03 | 2013-12-03 | Ltn Global Communications, Inc. | System and method that routes flows via multicast flow transport for groups |
GB2469528B (en) * | 2009-04-18 | 2011-10-05 | Saffron Digital Ltd | Transcoding video data |
US20130103785A1 (en) * | 2009-06-25 | 2013-04-25 | 3Crowd Technologies, Inc. | Redirecting content requests |
US20130103556A1 (en) | 2009-06-25 | 2013-04-25 | 3Crowd Technologies, Inc. | Crowd based content delivery |
US8566393B2 (en) * | 2009-08-10 | 2013-10-22 | Seawell Networks Inc. | Methods and systems for scalable video chunking |
US20140222758A1 (en) * | 2009-08-14 | 2014-08-07 | Ic Manage, Inc. | Coherent File State Maintained Among Confederated Repositories By Distributed Workspace Apparatuses Backed Up By a File State Ledgerdemain Store |
US20110040788A1 (en) * | 2009-08-14 | 2011-02-17 | Ic Manage, Inc. | Coherent File State System Distributed Among Workspace Clients |
US8296458B2 (en) * | 2009-08-24 | 2012-10-23 | At&T Intellectual Property I, Lp | Adaptive routing of content requests using multiple anycast addresses |
US20110055731A1 (en) * | 2009-09-02 | 2011-03-03 | Andrew Echenberg | Content distribution over a network |
US9009177B2 (en) | 2009-09-25 | 2015-04-14 | Microsoft Corporation | Recommending points of interests in a region |
US9124513B2 (en) | 2009-09-30 | 2015-09-01 | At&T Intellectual Property I, L.P. | Load balancing multicast network traffic using virtual channels |
US10877695B2 (en) | 2009-10-30 | 2020-12-29 | Iii Holdings 2, Llc | Memcached server functionality in a cluster of data processing nodes |
US11720290B2 (en) | 2009-10-30 | 2023-08-08 | Iii Holdings 2, Llc | Memcached server functionality in a cluster of data processing nodes |
US20110173337A1 (en) * | 2010-01-13 | 2011-07-14 | Oto Technologies, Llc | Proactive pre-provisioning for a content sharing session |
US8612134B2 (en) * | 2010-02-23 | 2013-12-17 | Microsoft Corporation | Mining correlation between locations using location history |
US9261376B2 (en) * | 2010-02-24 | 2016-02-16 | Microsoft Technology Licensing, Llc | Route computation based on route-oriented vehicle trajectories |
US10288433B2 (en) * | 2010-02-25 | 2019-05-14 | Microsoft Technology Licensing, Llc | Map-matching for low-sampling-rate GPS trajectories |
US8341099B2 (en) | 2010-03-12 | 2012-12-25 | Microsoft Corporation | Semantics update and adaptive interfaces in connection with information as a service |
US20110264530A1 (en) | 2010-04-23 | 2011-10-27 | Bryan Santangelo | Apparatus and methods for dynamic secondary content and data insertion and delivery |
US9373106B1 (en) * | 2010-04-26 | 2016-06-21 | Sprint Communications Company L.P. | Tracking the download and purchase of digital content |
US8719198B2 (en) | 2010-05-04 | 2014-05-06 | Microsoft Corporation | Collaborative location and activity recommendations |
US9593957B2 (en) | 2010-06-04 | 2017-03-14 | Microsoft Technology Licensing, Llc | Searching similar trajectories by locations |
EP2583189B1 (en) | 2010-06-18 | 2018-09-19 | Akamai Technologies, Inc. | Extending a content delivery network (cdn) into a mobile or wireline network |
US8751638B2 (en) * | 2010-07-02 | 2014-06-10 | Futurewei Technologies, Inc. | System and method to implement joint server selection and path selection |
US8190677B2 (en) | 2010-07-23 | 2012-05-29 | Seawell Networks Inc. | Methods and systems for scalable video delivery |
US8410994B1 (en) * | 2010-08-23 | 2013-04-02 | Matrox Graphics Inc. | System and method for remote graphics display |
US9148466B2 (en) * | 2010-10-05 | 2015-09-29 | Yahoo! Inc. | Presenting modules in a browser |
US8549148B2 (en) | 2010-10-15 | 2013-10-01 | Brocade Communications Systems, Inc. | Domain name system security extensions (DNSSEC) for global server load balancing |
US8825813B2 (en) | 2010-12-28 | 2014-09-02 | Microsoft Corporation | Distributed network coordinate system based on network performance |
WO2012112607A1 (en) | 2011-02-14 | 2012-08-23 | Devicescape Software, Inc. | Systems and methods for network curation |
TW201238291A (en) * | 2011-03-14 | 2012-09-16 | Wistron Corp | Communication system and peer to peer transmission method |
ES2650595T3 (en) * | 2011-04-15 | 2018-01-19 | Deutsche Telekom Ag | Network traffic engineering |
JP6039915B2 (en) * | 2011-07-08 | 2016-12-07 | 株式会社ドワンゴ | Stage presentation system, presentation control subsystem, operation method of stage presentation system, operation method of presentation control subsystem, and program |
US8831110B2 (en) | 2011-07-20 | 2014-09-09 | James D. Ocon | Electronic news gathering method and system for the prioritized transmission of data |
US9680791B2 (en) | 2011-07-29 | 2017-06-13 | Fortinet, Inc. | Facilitating content accessibility via different communication formats |
US20130103853A1 (en) | 2011-07-29 | 2013-04-25 | 3Crowd Technologies, Inc. | Directing clients based on communication format |
US8689280B2 (en) | 2011-09-09 | 2014-04-01 | Microsoft Corporation | DNS-based content routing |
US8849976B2 (en) * | 2011-09-26 | 2014-09-30 | Limelight Networks, Inc. | Dynamic route requests for multiple clouds |
US9754226B2 (en) | 2011-12-13 | 2017-09-05 | Microsoft Technology Licensing, Llc | Urban computing of route-oriented vehicles |
CN103179145B (en) * | 2011-12-20 | 2016-04-06 | 中国电信股份有限公司 | Based on the data transmission method of cloud computing, system and implicit content server |
US20130166188A1 (en) | 2011-12-21 | 2013-06-27 | Microsoft Corporation | Determine Spatiotemporal Causal Interactions In Data |
US9032092B1 (en) * | 2011-12-28 | 2015-05-12 | Amazon Technologies, Inc. | Client traffic redirection service |
US9231903B2 (en) * | 2011-12-30 | 2016-01-05 | Time Warner Cable Enterprises Llc | System and method for resolving a DNS request using metadata |
US10218756B2 (en) * | 2012-01-06 | 2019-02-26 | Comcast Cable Communications, Llc | Streamlined delivery of video content |
US9917736B2 (en) | 2012-01-30 | 2018-03-13 | Microsoft Technology Licensing, Llc | Automated standalone bootstrapping of hardware inventory |
US9137111B2 (en) | 2012-01-30 | 2015-09-15 | Microsoft Technology Licensing, Llc | Discovering, validating, and configuring hardware-inventory components |
US9367360B2 (en) | 2012-01-30 | 2016-06-14 | Microsoft Technology Licensing, Llc | Deploying a hardware inventory as a cloud-computing stamp |
US9641394B2 (en) * | 2012-01-30 | 2017-05-02 | Microsoft Technology Licensing, Llc | Automated build-out of a cloud-computing stamp |
FR2988544A1 (en) * | 2012-03-23 | 2013-09-27 | France Telecom | SELECTING A NETWORK ENTITY FOR PROVIDING DIGITAL CONTENT |
US9712887B2 (en) | 2012-04-12 | 2017-07-18 | Arris Canada, Inc. | Methods and systems for real-time transmuxing of streaming media content |
US9532080B2 (en) | 2012-05-31 | 2016-12-27 | Sonic Ip, Inc. | Systems and methods for the reuse of encoding information in encoding alternative streams of video data |
US10120725B2 (en) | 2012-06-22 | 2018-11-06 | Microsoft Technology Licensing, Llc | Establishing an initial configuration of a hardware inventory |
US8909736B1 (en) * | 2012-07-12 | 2014-12-09 | Juniper Networks, Inc. | Content delivery network referral |
CN103731404B (en) * | 2012-10-12 | 2016-12-28 | 北京百度网讯科技有限公司 | Data access method based on CDN, system and device |
US9292279B2 (en) * | 2013-01-22 | 2016-03-22 | Maluuba Inc. | Method and system for creating and managing a dynamic route topography for service oriented software environments |
JP6088853B2 (en) * | 2013-02-27 | 2017-03-01 | 株式会社東芝 | COMMUNICATION DEVICE, COMMUNICATION METHOD, AND COMMUNICATION PROGRAM |
US9357210B2 (en) | 2013-02-28 | 2016-05-31 | Sonic Ip, Inc. | Systems and methods of encoding multiple video streams for adaptive bitrate streaming |
US9560126B2 (en) * | 2013-05-06 | 2017-01-31 | Alcatel Lucent | Stateless load balancing of connections |
CA2851709A1 (en) | 2013-05-16 | 2014-11-16 | Peter S. Warrick | Dns-based captive portal with integrated transparent proxy to protect against user device caching incorrect ip address |
US9800634B2 (en) * | 2013-05-28 | 2017-10-24 | Cisco Technology, Inc. | Pull-based media system |
US9350801B2 (en) | 2013-06-26 | 2016-05-24 | Amazon Technologies, Inc. | Managing client access to a plurality of computing systems |
US9780993B2 (en) * | 2013-06-26 | 2017-10-03 | Amazon Technologies, Inc. | Producer computing system leasing on behalf of consumer computing system |
US9843631B2 (en) | 2013-06-26 | 2017-12-12 | Amazon Technologies, Inc. | Producer system selection |
US9369518B2 (en) | 2013-06-26 | 2016-06-14 | Amazon Technologies, Inc. | Producer system partitioning among leasing agent systems |
US9819436B2 (en) | 2013-08-26 | 2017-11-14 | Coriant Operations, Inc. | Intranodal ROADM fiber management apparatuses, systems, and methods |
US8745221B1 (en) * | 2013-09-18 | 2014-06-03 | Limelight Networks, Inc. | Dynamic request rerouting |
US9276991B2 (en) * | 2013-09-18 | 2016-03-01 | Xerox Corporation | Method and apparatus for providing a dynamic tool menu based upon a document |
US9253545B2 (en) * | 2013-12-04 | 2016-02-02 | Wowza Media Systems, LLC | Routing media content based on monetary cost |
US9113182B2 (en) * | 2013-12-04 | 2015-08-18 | Wowza Media Systems, LLC | Selecting a media content source based on monetary cost |
US8775564B1 (en) | 2013-12-31 | 2014-07-08 | Limelight Networks, Inc. | Time based CDN traffic allocation |
US9929939B2 (en) | 2013-12-26 | 2018-03-27 | Coriant Operations, Inc. | Systems, apparatuses, and methods for rerouting network traffic |
US10044609B2 (en) * | 2014-02-04 | 2018-08-07 | Fastly, Inc. | Communication path selection for content delivery |
US20150271016A1 (en) * | 2014-03-23 | 2015-09-24 | Avaya Inc. | Configuration of networks with server cluster device |
US9549385B2 (en) | 2014-03-23 | 2017-01-17 | Avaya Inc. | Configuration of networks using client device access of remote server |
US10142342B2 (en) | 2014-03-23 | 2018-11-27 | Extreme Networks, Inc. | Authentication of client devices in networks |
US9531591B2 (en) | 2014-03-23 | 2016-12-27 | Avaya Inc. | Configuration of networks using switch device access of remote server |
US9760572B1 (en) | 2014-07-11 | 2017-09-12 | ProSports Technologies, LLC | Event-based content collection for network-based distribution |
WO2016007962A1 (en) | 2014-07-11 | 2016-01-14 | ProSports Technologies, LLC | Camera feed distribution from event venue virtual seat cameras |
WO2016007965A1 (en) | 2014-07-11 | 2016-01-14 | ProSports Technologies, LLC | Ball tracker camera |
US9571903B2 (en) | 2014-07-11 | 2017-02-14 | ProSports Technologies, LLC | Ball tracker snippets |
US9655027B1 (en) | 2014-07-11 | 2017-05-16 | ProSports Technologies, LLC | Event data transmission to eventgoer devices |
US9729644B1 (en) | 2014-07-28 | 2017-08-08 | ProSports Technologies, LLC | Event and fantasy league data transmission to eventgoer devices |
US9699523B1 (en) | 2014-09-08 | 2017-07-04 | ProSports Technologies, LLC | Automated clip creation |
US9871716B2 (en) * | 2014-10-16 | 2018-01-16 | Kollective Technology, Inc. | Broadcast readiness testing in distributed content delivery networks |
US10015077B2 (en) | 2015-05-22 | 2018-07-03 | Microsoft Technology Licensing, Llc | Forwarding current request based on, at least in part, previous request(s) |
US9946976B2 (en) * | 2015-06-04 | 2018-04-17 | Corey Francis Stedman | System for enabling channel designation differentiation for hierarchically organizing and accessing address registers with address signifiers and elements |
US10586023B2 (en) | 2016-04-21 | 2020-03-10 | Time Warner Cable Enterprises Llc | Methods and apparatus for secondary content management and fraud prevention |
US10567333B2 (en) | 2017-11-01 | 2020-02-18 | Verizon Digital Media Services Inc. | Deterministic traffic management in an anycast network |
US10685493B2 (en) | 2017-12-24 | 2020-06-16 | Facebook, Inc. | Systems and methods for delivering augmented reality content |
US10462233B2 (en) * | 2018-01-23 | 2019-10-29 | Charter Communications Operating, Llc | Protocol for anycast based discovery of local resources |
EP3759887A4 (en) | 2018-02-26 | 2022-03-09 | Charter Communications Operating, LLC | Apparatus and methods for packetized content routing and delivery |
US10778800B2 (en) | 2018-03-04 | 2020-09-15 | Netskrt Systems, Inc. | System and apparatus for propagating content throughout a network using a mobile environment |
US11140583B2 (en) * | 2018-03-22 | 2021-10-05 | Netskrt Systems, Inc. | Transforming video manifests to enable efficient media distribution |
US11252253B2 (en) | 2018-03-22 | 2022-02-15 | Netskrt Systems, Inc. | Caching aggregate content based on limited cache interaction |
US11128728B2 (en) | 2018-03-22 | 2021-09-21 | Netskrt Systems, Inc. | Method and apparatus for walled garden with a mobile content distribution network |
US11356530B2 (en) | 2018-03-22 | 2022-06-07 | Netskrt Systems, Inc. | Leveraging mobile environment to distribute cache data |
US11375036B2 (en) | 2018-03-22 | 2022-06-28 | Netskrt Systems, Inc. | Method and apparatus to prioritize and schedule the distribution of learned content |
US11323536B2 (en) | 2018-03-22 | 2022-05-03 | Netskrt Systems, Inc. | Apparatus and method for trans-border movement of streaming media content |
US11399058B2 (en) | 2018-03-22 | 2022-07-26 | Netskrt Systems, Inc. | Immutable ledger method and apparatus for managing the distribution of content |
US11388252B2 (en) | 2018-03-22 | 2022-07-12 | Netskrt Systems, Inc. | Micro-cache method and apparatus for a mobile environment with variable connectivity |
US10645008B1 (en) | 2018-12-06 | 2020-05-05 | Verizon Digital Media Services Inc. | Predictive Anycast traffic shaping |
EP3668052B1 (en) * | 2018-12-13 | 2021-05-26 | Telefonica, S.A. | Method, system and devices for improved multimedia content delivery |
US10999370B1 (en) * | 2018-12-28 | 2021-05-04 | BridgeLabs, Inc. | Syncing and sharing data across systems |
EP3948593B1 (en) * | 2019-03-26 | 2023-05-03 | Google LLC | Separating the authorization of content access and content delivery using multiple cryptographic digital signatures |
CN110417861B (en) * | 2019-06-25 | 2023-05-26 | 腾讯科技（北京）有限公司 | Information pushing method and related device |
US11403849B2 (en) | 2019-09-25 | 2022-08-02 | Charter Communications Operating, Llc | Methods and apparatus for characterization of digital content |
US11438393B1 (en) * | 2019-09-26 | 2022-09-06 | Amazon Technologies, Inc. | Origin server address rotation |
US11153165B2 (en) | 2019-11-06 | 2021-10-19 | Dell Products L.P. | System and method for providing an intelligent ephemeral distributed service model for server group provisioning |
CN112866424A (en) * | 2019-11-28 | 2021-05-28 | 华为技术有限公司 | Domain name query method and related equipment |
CN114124802B (en) * | 2021-11-10 | 2023-08-25 | 中盈优创资讯科技有限公司 | Cross-domain black hole route centralized management and control method and device |
CN114071173A (en) * | 2021-11-15 | 2022-02-18 | 北京百度网讯科技有限公司 | Live broadcast scheduling method, device, system, electronic equipment and medium |
US11792289B2 (en) * | 2021-11-22 | 2023-10-17 | International Business Machines Corporation | Live socket redirection |
US11831707B2 (en) * | 2022-03-08 | 2023-11-28 | Charter Communications Operating, Llc | Redirect processing for content delivery networks |
US11706292B1 (en) * | 2022-03-15 | 2023-07-18 | Disney Enterprises, Inc. | Local preference in anycast CDN routing |
Citations (29)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5751338A (en) * | 1994-12-30 | 1998-05-12 | Visionary Corporate Technologies | Methods and systems for multimedia communications via public telephone networks |
US5822320A (en) * | 1995-11-20 | 1998-10-13 | Nec Corporation | Address resolution method and asynchronous transfer mode network system |
US5974453A (en) * | 1997-10-08 | 1999-10-26 | Intel Corporation | Method and apparatus for translating a static identifier including a telephone number into a dynamically assigned network address |
US6038664A (en) * | 1996-06-10 | 2000-03-14 | Cubix Corporation | Method for selecting communication access method for local area networks |
US6046980A (en) * | 1996-12-09 | 2000-04-04 | Packeteer, Inc. | System for managing flow bandwidth utilization at network, transport and application layers in store and forward network |
US6047322A (en) * | 1997-05-27 | 2000-04-04 | Ukiah Software, Inc. | Method and apparatus for quality of service management |
US6078586A (en) * | 1998-08-03 | 2000-06-20 | Mci Communications Corporation | ATM virtual private networks |
US6092178A (en) * | 1998-09-03 | 2000-07-18 | Sun Microsystems, Inc. | System for responding to a resource request |
US6101180A (en) * | 1996-11-12 | 2000-08-08 | Starguide Digital Networks, Inc. | High bandwidth broadcast system having localized multicast access to broadcast content |
US6108703A (en) * | 1998-07-14 | 2000-08-22 | Massachusetts Institute Of Technology | Global hosting system |
US6115752A (en) * | 1998-05-21 | 2000-09-05 | Sun Microsystems, Inc. | System and method for server selection for mirrored sites |
US6148005A (en) * | 1997-10-09 | 2000-11-14 | Lucent Technologies Inc | Layered video multicast transmission system with retransmission-based error recovery |
US6212570B1 (en) * | 1998-04-29 | 2001-04-03 | Nippon Telegraph & Telephone Corporation | Information distribution device selection system |
US6256675B1 (en) * | 1997-05-06 | 2001-07-03 | At&T Corp. | System and method for allocating requests for objects and managing replicas of objects on a network |
US20010015965A1 (en) * | 1998-11-02 | 2001-08-23 | Preston Dan A. | Geo-spacial internet protocol addressing |
US6286052B1 (en) * | 1998-12-04 | 2001-09-04 | Cisco Technology, Inc. | Method and apparatus for identifying network data traffic flows and for applying quality of service treatments to the flows |
US6327252B1 (en) * | 1997-10-03 | 2001-12-04 | Alcatel Canada Inc. | Automatic link establishment between distributed servers through an NBMA network |
US20010052016A1 (en) * | 1999-12-13 | 2001-12-13 | Skene Bryan D. | Method and system for balancing load distrubution on a wide area network |
US20020194373A1 (en) * | 1999-06-14 | 2002-12-19 | Choudhry Azkar Hussain | System and method for dynamic creation and management of virtual subdomain addresses |
US20030050920A1 (en) * | 2001-02-12 | 2003-03-13 | Chen Sun | Contacts management using virtual subdomains |
US6542964B1 (en) * | 1999-06-02 | 2003-04-01 | Blue Coat Systems | Cost-based optimization for content distribution using dynamic protocol selection and query resolution for cache server |
US6578066B1 (en) * | 1999-09-17 | 2003-06-10 | Alteon Websystems | Distributed load-balancing internet servers |
US20030177274A1 (en) * | 2002-03-12 | 2003-09-18 | Chen Sun | Virtual subdomain address file suffix |
US20030193958A1 (en) * | 2002-04-11 | 2003-10-16 | Vidya Narayanan | Methods for providing rendezvous point router redundancy in sparse mode multicast networks |
US20040073621A1 (en) * | 2002-09-30 | 2004-04-15 | Sampson Scott E. | Communication management using a token action log |
US6735633B1 (en) * | 1999-06-01 | 2004-05-11 | Fast Forward Networks | System for bandwidth allocation in a computer network |
US6741585B1 (en) * | 2000-05-05 | 2004-05-25 | Lucent Technologies Inc. | Interworking of addressing in an internetwork |
US6963929B1 (en) * | 1999-01-13 | 2005-11-08 | Soobok Lee | Internet e-mail add-on service system |
US7188138B1 (en) * | 1999-03-22 | 2007-03-06 | Eric Schneider | Method, product, and apparatus for resource identifier registration and aftermarket services |
Family Cites Families (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5611049A (en) | 1992-06-03 | 1997-03-11 | Pitts; William M. | System for accessing distributed data cache channel at each network node to pass requests and data |
US6085234A (en) | 1994-11-28 | 2000-07-04 | Inca Technology, Inc. | Remote file services network-infrastructure cache |
US6181867B1 (en) | 1995-06-07 | 2001-01-30 | Intervu, Inc. | Video storage and retrieval system |
US6003030A (en) | 1995-06-07 | 1999-12-14 | Intervu, Inc. | System and method for optimized storage and retrieval of data on a distributed computer network |
US6154777A (en) * | 1996-07-01 | 2000-11-28 | Sun Microsystems, Inc. | System for context-dependent name resolution |
US6052718A (en) | 1997-01-07 | 2000-04-18 | Sightpath, Inc | Replica routing |
SE9702239L (en) * | 1997-06-12 | 1998-07-06 | Telia Ab | Arrangements for load balancing in computer networks |
US6112239A (en) | 1997-06-18 | 2000-08-29 | Intervu, Inc | System and method for server-side optimization of data delivery on a distributed computer network |
US6006264A (en) | 1997-08-01 | 1999-12-21 | Arrowpoint Communications, Inc. | Method and system for directing a flow between a client and a server |
-
2000
- 2000-07-03 US US09/609,442 patent/US6785704B1/en not_active Expired - Lifetime
- 2000-12-19 WO PCT/US2000/034675 patent/WO2001052497A2/en active IP Right Grant
- 2000-12-19 DE DE60036021T patent/DE60036021T2/en not_active Expired - Lifetime
- 2000-12-19 EP EP14178373.8A patent/EP2838240B1/en not_active Expired - Lifetime
- 2000-12-19 EP EP10185164.0A patent/EP2320619B1/en not_active Expired - Lifetime
- 2000-12-19 AU AU22827/01A patent/AU2282701A/en not_active Abandoned
- 2000-12-19 EP EP00986628A patent/EP1250785B1/en not_active Expired - Lifetime
- 2000-12-19 EP EP07015871A patent/EP1865684B1/en not_active Expired - Lifetime
-
2004
- 2004-08-05 US US10/912,840 patent/US7734730B2/en not_active Expired - Lifetime
Patent Citations (29)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5751338A (en) * | 1994-12-30 | 1998-05-12 | Visionary Corporate Technologies | Methods and systems for multimedia communications via public telephone networks |
US5822320A (en) * | 1995-11-20 | 1998-10-13 | Nec Corporation | Address resolution method and asynchronous transfer mode network system |
US6038664A (en) * | 1996-06-10 | 2000-03-14 | Cubix Corporation | Method for selecting communication access method for local area networks |
US6101180A (en) * | 1996-11-12 | 2000-08-08 | Starguide Digital Networks, Inc. | High bandwidth broadcast system having localized multicast access to broadcast content |
US6046980A (en) * | 1996-12-09 | 2000-04-04 | Packeteer, Inc. | System for managing flow bandwidth utilization at network, transport and application layers in store and forward network |
US6256675B1 (en) * | 1997-05-06 | 2001-07-03 | At&T Corp. | System and method for allocating requests for objects and managing replicas of objects on a network |
US6047322A (en) * | 1997-05-27 | 2000-04-04 | Ukiah Software, Inc. | Method and apparatus for quality of service management |
US6327252B1 (en) * | 1997-10-03 | 2001-12-04 | Alcatel Canada Inc. | Automatic link establishment between distributed servers through an NBMA network |
US5974453A (en) * | 1997-10-08 | 1999-10-26 | Intel Corporation | Method and apparatus for translating a static identifier including a telephone number into a dynamically assigned network address |
US6148005A (en) * | 1997-10-09 | 2000-11-14 | Lucent Technologies Inc | Layered video multicast transmission system with retransmission-based error recovery |
US6212570B1 (en) * | 1998-04-29 | 2001-04-03 | Nippon Telegraph & Telephone Corporation | Information distribution device selection system |
US6115752A (en) * | 1998-05-21 | 2000-09-05 | Sun Microsystems, Inc. | System and method for server selection for mirrored sites |
US6108703A (en) * | 1998-07-14 | 2000-08-22 | Massachusetts Institute Of Technology | Global hosting system |
US6078586A (en) * | 1998-08-03 | 2000-06-20 | Mci Communications Corporation | ATM virtual private networks |
US6092178A (en) * | 1998-09-03 | 2000-07-18 | Sun Microsystems, Inc. | System for responding to a resource request |
US20010015965A1 (en) * | 1998-11-02 | 2001-08-23 | Preston Dan A. | Geo-spacial internet protocol addressing |
US6286052B1 (en) * | 1998-12-04 | 2001-09-04 | Cisco Technology, Inc. | Method and apparatus for identifying network data traffic flows and for applying quality of service treatments to the flows |
US6963929B1 (en) * | 1999-01-13 | 2005-11-08 | Soobok Lee | Internet e-mail add-on service system |
US7188138B1 (en) * | 1999-03-22 | 2007-03-06 | Eric Schneider | Method, product, and apparatus for resource identifier registration and aftermarket services |
US6735633B1 (en) * | 1999-06-01 | 2004-05-11 | Fast Forward Networks | System for bandwidth allocation in a computer network |
US6542964B1 (en) * | 1999-06-02 | 2003-04-01 | Blue Coat Systems | Cost-based optimization for content distribution using dynamic protocol selection and query resolution for cache server |
US20020194373A1 (en) * | 1999-06-14 | 2002-12-19 | Choudhry Azkar Hussain | System and method for dynamic creation and management of virtual subdomain addresses |
US6578066B1 (en) * | 1999-09-17 | 2003-06-10 | Alteon Websystems | Distributed load-balancing internet servers |
US20010052016A1 (en) * | 1999-12-13 | 2001-12-13 | Skene Bryan D. | Method and system for balancing load distrubution on a wide area network |
US6741585B1 (en) * | 2000-05-05 | 2004-05-25 | Lucent Technologies Inc. | Interworking of addressing in an internetwork |
US20030050920A1 (en) * | 2001-02-12 | 2003-03-13 | Chen Sun | Contacts management using virtual subdomains |
US20030177274A1 (en) * | 2002-03-12 | 2003-09-18 | Chen Sun | Virtual subdomain address file suffix |
US20030193958A1 (en) * | 2002-04-11 | 2003-10-16 | Vidya Narayanan | Methods for providing rendezvous point router redundancy in sparse mode multicast networks |
US20040073621A1 (en) * | 2002-09-30 | 2004-04-15 | Sampson Scott E. | Communication management using a token action log |
Cited By (864)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8041818B2 (en) | 1999-11-22 | 2011-10-18 | Akamai Technologies, Inc. | Integrated point of presence server network and functionally organized web sites |
US20090228588A1 (en) * | 1999-11-22 | 2009-09-10 | Akamai Technologies, Inc. | Performance computer network method |
US20010036182A1 (en) * | 2000-01-06 | 2001-11-01 | Frank Addante | Method and apparatus for selecting and delivering internet based advertising |
US20020002622A1 (en) * | 2000-04-17 | 2002-01-03 | Mark Vange | Method and system for redirection to arbitrary front-ends in a communication system |
US7043563B2 (en) * | 2000-04-17 | 2006-05-09 | Circadence Corporation | Method and system for redirection to arbitrary front-ends in a communication system |
US20020038360A1 (en) * | 2000-05-31 | 2002-03-28 | Matthew Andrews | System and method for locating a closest server in response to a client domain name request |
US7020698B2 (en) * | 2000-05-31 | 2006-03-28 | Lucent Technologies Inc. | System and method for locating a closest server in response to a client domain name request |
US8341297B2 (en) | 2000-07-19 | 2012-12-25 | Akamai Technologies, Inc. | Latencies and weightings in a domain name service (DNS) system |
US8195831B2 (en) | 2000-07-19 | 2012-06-05 | Akamai Technologies Inc. | Method and apparatus for determining and using server performance metrics with domain name services |
US20110099290A1 (en) * | 2000-07-19 | 2011-04-28 | Akamai Technologies, Inc. | Method for determining metrics of a content delivery and global traffic management network |
US8566248B1 (en) | 2000-08-04 | 2013-10-22 | Grdn. Net Solutions, Llc | Initiation of an information transaction over a network via a wireless device |
US9928508B2 (en) | 2000-08-04 | 2018-03-27 | Intellectual Ventures I Llc | Single sign-on for access to a central data repository |
US20080010298A1 (en) * | 2000-08-04 | 2008-01-10 | Guardian Networks, Llc | Storage, management and distribution of consumer information |
US20090210293A1 (en) * | 2000-08-04 | 2009-08-20 | Nick Steele | Information transactions over a network |
US8260806B2 (en) | 2000-08-04 | 2012-09-04 | Grdn. Net Solutions, Llc | Storage, management and distribution of consumer information |
US20060200425A1 (en) * | 2000-08-04 | 2006-09-07 | Enfotrust Networks, Inc. | Single sign-on for access to a central data repository |
US7916631B2 (en) * | 2000-11-28 | 2011-03-29 | Microsoft Corporation | Load balancing in set top cable box environment |
US20050185596A1 (en) * | 2000-11-28 | 2005-08-25 | Navic Systems, Inc. | Load balancing in set top cable box environment |
US20020118389A1 (en) * | 2001-02-27 | 2002-08-29 | Yasuo Fukuda | Image data communication system and image data communication method |
US20080008089A1 (en) * | 2001-03-01 | 2008-01-10 | Akamai Technologies, Inc. | Optimal route selection in a content delivery network |
US7929429B2 (en) | 2001-03-01 | 2011-04-19 | Akamai Technologies, Inc. | Optimal route selection in a content delivery network |
US7689823B2 (en) * | 2001-03-02 | 2010-03-30 | Panasonic Corporation | Content distribution/protecting method and apparatus |
US20030149890A1 (en) * | 2001-03-02 | 2003-08-07 | Shen Sheng Mei | Content distribution/protecting method and apparatus |
US7085825B1 (en) * | 2001-03-26 | 2006-08-01 | Freewebs Corp. | Apparatus, method and system for improving application performance across a communications network |
US8291110B2 (en) | 2001-03-26 | 2012-10-16 | Vistaprint Limited | Apparatus, method and system for improving application performance across a communication network |
US8904038B2 (en) | 2001-03-26 | 2014-12-02 | Vistaprint Schweiz Gmbh | Apparatus, method and system for improving application performance across a communications network by node replication |
US20100306169A1 (en) * | 2001-03-26 | 2010-12-02 | Webs.com | Apparatus, Method and System For Improving Application Performance Across a Communication Network |
US8782131B2 (en) | 2001-03-26 | 2014-07-15 | Vistaprint Schweiz Gmbh | Apparatus, method and system for improving application performance across a communications network by event routing |
US7945655B2 (en) | 2001-04-02 | 2011-05-17 | Akamai Technologies, Inc. | Scalable, high performance and highly available distributed storage system for internet content |
US20090106411A1 (en) * | 2001-04-02 | 2009-04-23 | Akamai Technologies, Inc. | Scalable, high performance and highly available distributed storage system for internet content |
US8108507B2 (en) | 2001-04-02 | 2012-01-31 | Akamai Technologies, Inc. | Content delivery network service provider (CDNSP)-managed content delivery network (CDN) for network service provider (NSP) |
US20080222291A1 (en) * | 2001-04-02 | 2008-09-11 | Weller Timothy N | Content delivery network service provider (CDNSP)-managed content delivery network (CDN) for network service provider (NSP) |
US20110082785A1 (en) * | 2001-04-02 | 2011-04-07 | Weller Timothy N | Content delivery network service provider (CDNSP)-managed content delivery network (CDN) for network service provider (NSP) |
US7149797B1 (en) * | 2001-04-02 | 2006-12-12 | Akamai Technologies, Inc. | Content delivery network service provider (CDNSP)-managed content delivery network (CDN) for network service provider (NSP) |
US7840667B2 (en) | 2001-04-02 | 2010-11-23 | Akamai Technologies, Inc. | Content delivery network service provider (CDNSP)-managed content delivery network (CDN) for network service provider (NSP) |
US9537667B2 (en) | 2001-04-30 | 2017-01-03 | Facebook, Inc. | Duplicating digital streams for digital conferencing using switching technologies |
US7991911B2 (en) | 2001-04-30 | 2011-08-02 | Aol Inc. | Duplicating switch for streaming data units to a terminal using different communication protocols |
US8572278B2 (en) | 2001-04-30 | 2013-10-29 | Facebook, Inc. | Generating multiple data streams from a single data source |
US7266609B2 (en) | 2001-04-30 | 2007-09-04 | Aol Llc | Generating multiple data streams from a single data source |
US20070288639A1 (en) * | 2001-04-30 | 2007-12-13 | Aol Llc | Load balancing with direct terminal response |
US8843559B2 (en) | 2001-04-30 | 2014-09-23 | Facebook, Inc. | Modifying payloads of digital streams for digital conferencing |
US8224991B2 (en) | 2001-04-30 | 2012-07-17 | Aol Inc. | Duplicating switch for streaming data units to a terminal using different communication protocols |
US9049032B2 (en) | 2001-04-30 | 2015-06-02 | Facebook, Inc. | Prioritizing digital streams during digital conferencing |
US8904026B2 (en) | 2001-04-30 | 2014-12-02 | Facebook, Inc. | Time-shifting streaming data |
US20020161910A1 (en) * | 2001-04-30 | 2002-10-31 | David Bill | Generating multiple data streams from a single data source |
US20020161847A1 (en) * | 2001-04-30 | 2002-10-31 | Weigand Gilbert G. | Duplicating switch for streaming data units to a terminal |
US20080140851A1 (en) * | 2001-04-30 | 2008-06-12 | Aol Llc | Duplicating switch for streaming data units to a terminal |
US8463853B2 (en) | 2001-04-30 | 2013-06-11 | Facebook, Inc. | Duplicating digital streams for digital conferencing using switching technologies |
US20100185778A1 (en) * | 2001-04-30 | 2010-07-22 | Aol Inc. | Duplicating switch for streaming data units to a terminal |
US7694013B2 (en) | 2001-04-30 | 2010-04-06 | Aol Inc. | Duplicating switch for streaming data units to a terminal |
US8130755B2 (en) | 2001-04-30 | 2012-03-06 | Aol Inc. | Load balancing with direct terminal response |
US20080049723A1 (en) * | 2001-04-30 | 2008-02-28 | Aol Llc | Generating multiple data streams from a single data source |
US7237033B2 (en) * | 2001-04-30 | 2007-06-26 | Aol Llc | Duplicating switch for streaming data units to a terminal |
US9521006B2 (en) | 2001-04-30 | 2016-12-13 | Facebook, Inc. | Duplicating digital streams for digital conferencing using switching technologies |
US7185052B2 (en) * | 2001-05-16 | 2007-02-27 | Akamai Technologies, Inc. | Meta content delivery network system |
US20030229682A1 (en) * | 2001-05-16 | 2003-12-11 | Day Richard David | Meta content delivery network system |
US20170310783A1 (en) * | 2001-07-13 | 2017-10-26 | Open Text Sa Ulc | System, method and storage medium for managing items within file directory structure |
US10462251B2 (en) * | 2001-07-13 | 2019-10-29 | Open Text Sa Ulc | System, method and storage medium for managing items within file directory structure |
US20080235400A1 (en) * | 2001-10-18 | 2008-09-25 | Level 3 Communications, Llc | Content request routing and load balancing for content distribution networks |
US20030079027A1 (en) * | 2001-10-18 | 2003-04-24 | Michael Slocombe | Content request routing and load balancing for content distribution networks |
US9021112B2 (en) * | 2001-10-18 | 2015-04-28 | Level 3 Communications, Llc | Content request routing and load balancing for content distribution networks |
US20080279222A1 (en) * | 2001-10-18 | 2008-11-13 | Level 3 Communications Llc | Distribution of traffic across a computer network |
US10476984B2 (en) | 2001-10-18 | 2019-11-12 | Level 3 Communications, Llc | Content request routing and load balancing for content distribution networks |
US20040072810A1 (en) * | 2001-11-07 | 2004-04-15 | Besins International Belgique | Pharmaceutical composition in the form of a gel or a solution based on dihydrotestosterone, process for preparing it and uses thereof |
US8429221B2 (en) * | 2001-12-13 | 2013-04-23 | Rockstar Consortium Us Lp | Content request routing method |
US20130218958A1 (en) * | 2001-12-13 | 2013-08-22 | Rockstar Consortium Us Lp | Content request routing method |
US20030115283A1 (en) * | 2001-12-13 | 2003-06-19 | Abdulkadev Barbir | Content request routing method |
US8635305B1 (en) * | 2001-12-19 | 2014-01-21 | Cisco Technology, Inc. | Mechanisms for providing differentiated services within a web cache |
US10979499B2 (en) * | 2002-02-14 | 2021-04-13 | Level 3 Communications, Llc | Managed object replication and delivery |
US20180288151A1 (en) * | 2002-02-14 | 2018-10-04 | Level 3 Communications, Llc | Managed object replication and delivery |
US20060233155A1 (en) * | 2002-03-19 | 2006-10-19 | Srivastava Sunil K | Server load balancing using IP option field approach to identify route to selected server |
US7784055B2 (en) | 2002-03-19 | 2010-08-24 | Cisco Technology, Inc. | Method and apparatus for routing data to a load balanced server using MPLS packet labels |
US7830896B2 (en) * | 2002-03-19 | 2010-11-09 | Cisco Technology, Inc. | Server load balancing using IP option field approach to identify route to selected server |
US20050149531A1 (en) * | 2002-03-19 | 2005-07-07 | Srivastava Sunil K. | Method and apparatus for routing data to a load balanced server using MPLS packet labels |
US7315541B1 (en) * | 2002-04-03 | 2008-01-01 | Cisco Technology, Inc. | Methods and apparatus for routing a content request |
US7289519B1 (en) * | 2002-05-01 | 2007-10-30 | Cisco Technology, Inc. | Methods and apparatus for processing content requests using domain name service |
US8762575B2 (en) | 2002-06-28 | 2014-06-24 | Facebook, Inc. | Inserting advertising content |
US8769151B2 (en) | 2002-06-28 | 2014-07-01 | Facebook, Inc. | Adding advertising content to media content |
US8028092B2 (en) | 2002-06-28 | 2011-09-27 | Aol Inc. | Inserting advertising content |
US7328237B1 (en) * | 2002-07-25 | 2008-02-05 | Cisco Technology, Inc. | Technique for improving load balancing of traffic in a data network using source-side related information |
US7774364B2 (en) * | 2002-07-30 | 2010-08-10 | International Business Machines Corporation | Uniform name space referrals with location independence |
US20050149528A1 (en) * | 2002-07-30 | 2005-07-07 | Anderson Owen T. | Uniform name space referrals with location independence |
US7461147B1 (en) * | 2002-08-26 | 2008-12-02 | Netapp. Inc. | Node selection within a network based on policy |
US20040063402A1 (en) * | 2002-09-26 | 2004-04-01 | Hitachi, Ltd. | Method and apparatus for mobile communication utilizing load balancing |
US7328009B2 (en) * | 2002-09-26 | 2008-02-05 | Hitachi, Ltd. | Method and apparatus for mobile communication utilizing load balancing |
US20050050157A1 (en) * | 2003-08-27 | 2005-03-03 | Day Mark Stuart | Methods and apparatus for accessing presence information |
US7574528B2 (en) * | 2003-08-27 | 2009-08-11 | Cisco Technology, Inc. | Methods and apparatus for accessing presence information |
US7590709B2 (en) * | 2003-09-02 | 2009-09-15 | Hitachi, Ltd. | Search method and search broker |
US20050050173A1 (en) * | 2003-09-02 | 2005-03-03 | Katsuro Kikuchi | Search method and search broker |
US20050198097A1 (en) * | 2004-01-16 | 2005-09-08 | Yury Kalnitsky | Network architecture for data transmission |
WO2005069862A3 (en) * | 2004-01-16 | 2005-12-08 | Bloomberg Lp | Network architecture for data transmission |
US7546355B2 (en) * | 2004-01-16 | 2009-06-09 | Bloomberg Finance L.P. | Network architecture for data transmission |
US7639682B2 (en) * | 2004-03-05 | 2009-12-29 | Nec Corporation | Communication quality management and apparatus |
US20080095159A1 (en) * | 2004-03-05 | 2008-04-24 | Kazuya Suzuki | Communication quality management and apparatus |
US20050210144A1 (en) * | 2004-03-18 | 2005-09-22 | Atsuya Kumagai | Load balancing method and system |
US8089972B2 (en) * | 2004-05-03 | 2012-01-03 | Level 3 Communications, Llc | Registration redirect server |
US20060013147A1 (en) * | 2004-05-03 | 2006-01-19 | Level 3 Communications, Inc. | Registration redirect server |
US20130060941A1 (en) * | 2004-05-03 | 2013-03-07 | Level 3 Communications, Inc. | Registration Redirect Server |
US20060064478A1 (en) * | 2004-05-03 | 2006-03-23 | Level 3 Communications, Inc. | Geo-locating load balancing |
US10630766B2 (en) * | 2004-05-03 | 2020-04-21 | Level 3 Communications, Llc | Registration redirect server |
US9998526B2 (en) * | 2004-05-03 | 2018-06-12 | Level 3 Communications, Llc | Registration redirect server |
US20160021176A1 (en) * | 2004-05-03 | 2016-01-21 | Level 3 Communications, Llc | Registration redirect server |
US20180295183A1 (en) * | 2004-05-03 | 2018-10-11 | Level 3 Communications, Llc | Registration redirect server |
US9088599B2 (en) * | 2004-05-03 | 2015-07-21 | Level 3 Communications, Llc | Registration redirect server |
US10904262B2 (en) | 2004-06-16 | 2021-01-26 | Callahan Cellular L.L.C. | Graduated authentication in an identity management system |
US10567391B2 (en) | 2004-06-16 | 2020-02-18 | Callahan Cellular L.L.C. | Graduated authentication in an identity management system |
US9398020B2 (en) | 2004-06-16 | 2016-07-19 | Callahan Cellular L.L.C. | Graduated authentication in an identity management system |
US8504704B2 (en) | 2004-06-16 | 2013-08-06 | Dormarke Assets Limited Liability Company | Distributed contact information management |
US20050283443A1 (en) * | 2004-06-16 | 2005-12-22 | Hardt Dick C | Auditable privacy policies in a distributed hierarchical identity management system |
US20060005263A1 (en) * | 2004-06-16 | 2006-01-05 | Sxip Networks Srl | Distributed contact information management |
US20060005020A1 (en) * | 2004-06-16 | 2006-01-05 | Sxip Networks Srl | Graduated authentication in an identity management system |
US8527752B2 (en) | 2004-06-16 | 2013-09-03 | Dormarke Assets Limited Liability | Graduated authentication in an identity management system |
US8959652B2 (en) | 2004-06-16 | 2015-02-17 | Dormarke Assets Limited Liability Company | Graduated authentication in an identity management system |
US9245266B2 (en) | 2004-06-16 | 2016-01-26 | Callahan Cellular L.L.C. | Auditable privacy policies in a distributed hierarchical identity management system |
US10298594B2 (en) | 2004-06-16 | 2019-05-21 | Callahan Cellular L.L.C. | Graduated authentication in an identity management system |
US11824869B2 (en) | 2004-06-16 | 2023-11-21 | Callahan Cellular L.L.C. | Graduated authentication in an identity management system |
WO2006029508A1 (en) * | 2004-09-13 | 2006-03-23 | Solace Systems Inc. | Highly scalable subscription matching for a content routing network |
US7627570B2 (en) | 2004-09-13 | 2009-12-01 | Solace Systems, Inc. | Highly scalable subscription matching for a content routing network |
US8224302B2 (en) * | 2004-10-28 | 2012-07-17 | Fujitsu Limited | Mobile wireless communication terminal and communication control method |
US20070202865A1 (en) * | 2004-10-28 | 2007-08-30 | Fujitsu Limited | Mobile wireless communication terminal and communication control method |
US8010514B2 (en) | 2004-11-19 | 2011-08-30 | Microsoft Corporation | System and method for a distributed object store |
US20100325476A1 (en) * | 2004-11-19 | 2010-12-23 | Microsoft Corporation | System and method for a distributed object store |
US7778984B2 (en) * | 2004-11-19 | 2010-08-17 | Microsoft Corporation | System and method for a distributed object store |
US20060168154A1 (en) * | 2004-11-19 | 2006-07-27 | Microsoft Corporation | System and method for a distributed object store |
US9843557B2 (en) | 2004-12-09 | 2017-12-12 | Level 3 Communications, Llc | Systems and methods for dynamically registering endpoints in a network |
US9020105B2 (en) | 2004-12-09 | 2015-04-28 | Level 3 Communications, Llc | Systems and methods for third party emergency call termination |
US10356043B2 (en) | 2004-12-09 | 2019-07-16 | Level 3 Communications, Llc | Systems and methods for dynamically registering endpoints in a network |
US20100248683A1 (en) * | 2004-12-09 | 2010-09-30 | Level 3 Communications, Inc. | Systems and Methods for Third Party Emergency Call Termination |
US8768350B2 (en) | 2004-12-09 | 2014-07-01 | Level 3 Communications, Llc | Systems and methods for locating endpoints in a communication network |
US10834049B2 (en) | 2004-12-09 | 2020-11-10 | Level 3 Communications, Llc | Systems and methods for dynamically registering endpoints in a network |
US20060193252A1 (en) * | 2005-02-25 | 2006-08-31 | Cisco Technology, Inc. | Active-active data center using RHI, BGP, and IGP anycast for disaster recovery and load distribution |
US8243588B2 (en) | 2005-02-25 | 2012-08-14 | Cisco Technology, Inc. | Disaster recovery for active-standby data center using route health and BGP |
US20060193247A1 (en) * | 2005-02-25 | 2006-08-31 | Cisco Technology, Inc. | Disaster recovery for active-standby data center using route health and BGP |
US7609619B2 (en) * | 2005-02-25 | 2009-10-27 | Cisco Technology, Inc. | Active-active data center using RHI, BGP, and IGP anycast for disaster recovery and load distribution |
US20060195607A1 (en) * | 2005-02-25 | 2006-08-31 | Cisco Technology, Inc. | Application based active-active data center network using route health injection and IGP |
US7769886B2 (en) | 2005-02-25 | 2010-08-03 | Cisco Technology, Inc. | Application based active-active data center network using route health injection and IGP |
US7710865B2 (en) * | 2005-02-25 | 2010-05-04 | Cisco Technology, Inc. | Disaster recovery for active-standby data center using route health and BGP |
US20060209824A1 (en) * | 2005-03-01 | 2006-09-21 | The Mitre Corporation | Method, apparatus, and computer program product for transmitting and receiving broadcast packets |
US7698451B2 (en) | 2005-03-09 | 2010-04-13 | Vudu, Inc. | Method and apparatus for instant playback of a movie title |
US20080282036A1 (en) * | 2005-03-09 | 2008-11-13 | Vvond, Llc | Method and apparatus for instant playback of a movie title |
US8312161B2 (en) | 2005-03-09 | 2012-11-13 | Vudu, Inc. | Method and apparatus for instant playback of a movie title |
US20100254675A1 (en) * | 2005-03-09 | 2010-10-07 | Prasanna Ganesan | Method and apparatus for instant playback of a movie title |
US7191215B2 (en) | 2005-03-09 | 2007-03-13 | Marquee, Inc. | Method and system for providing instantaneous media-on-demand services by transmitting contents in pieces from client machines |
US7810647B2 (en) | 2005-03-09 | 2010-10-12 | Vudu, Inc. | Method and apparatus for assembling portions of a data file received from multiple devices |
US9705951B2 (en) | 2005-03-09 | 2017-07-11 | Vudu, Inc. | Method and apparatus for instant playback of a movie |
US20060206565A1 (en) * | 2005-03-09 | 2006-09-14 | Vvond, Llc | Method and system for providing instantaneous media-on-demand services |
US9176955B2 (en) | 2005-03-09 | 2015-11-03 | Vvond, Inc. | Method and apparatus for sharing media files among network nodes |
US20060206889A1 (en) * | 2005-03-09 | 2006-09-14 | Vvond, Llc | Fragmentation of a file for instant access |
US20090025048A1 (en) * | 2005-03-09 | 2009-01-22 | Wond, Llc | Method and apparatus for sharing media files among network nodes |
US8904463B2 (en) | 2005-03-09 | 2014-12-02 | Vudu, Inc. | Live video broadcasting on distributed networks |
US20090025046A1 (en) * | 2005-03-09 | 2009-01-22 | Wond, Llc | Hybrid architecture for media services |
US20090019468A1 (en) * | 2005-03-09 | 2009-01-15 | Vvond, Llc | Access control of media services over an open network |
US9635318B2 (en) | 2005-03-09 | 2017-04-25 | Vudu, Inc. | Live video broadcasting on distributed networks |
US7937379B2 (en) | 2005-03-09 | 2011-05-03 | Vudu, Inc. | Fragmentation of a file for instant access |
US8745675B2 (en) | 2005-03-09 | 2014-06-03 | Vudu, Inc. | Multiple audio streams |
US8219635B2 (en) | 2005-03-09 | 2012-07-10 | Vudu, Inc. | Continuous data feeding in a distributed environment |
US20080281913A1 (en) * | 2005-03-09 | 2008-11-13 | Vudu, Inc. | Live video broadcasting on distributed networks |
US20080282298A1 (en) * | 2005-03-09 | 2008-11-13 | Prasanna Ganesan | Method and apparatus for supporting file sharing in a distributed network |
US20100074268A1 (en) * | 2005-05-31 | 2010-03-25 | Cisco Technology, Inc. | Multi-homing using controlled route leakage at a backup service provider |
US20060268681A1 (en) * | 2005-05-31 | 2006-11-30 | Raza Syed K | Multi-homing using controlled route leakage at a backup service provider |
US7630392B2 (en) * | 2005-05-31 | 2009-12-08 | Cisco Technology, Inc. | Multi-homing using controlled route leakage at a backup service provider |
US7953103B2 (en) | 2005-05-31 | 2011-05-31 | Cisco Technology, Inc. | Multi-homing using controlled route leakage at a backup service provider |
US8099511B1 (en) | 2005-06-11 | 2012-01-17 | Vudu, Inc. | Instantaneous media-on-demand |
US20120089671A1 (en) * | 2005-06-17 | 2012-04-12 | Aol Inc. | Selecting an instance of a resource using network routability information |
US11184462B2 (en) * | 2005-06-17 | 2021-11-23 | Citrix Systems, Inc. | Selecting an instance of a resource using network routability information |
US20160381186A1 (en) * | 2005-06-17 | 2016-12-29 | Citrix Systems, Inc. | Selecting an Instance of a Resource Using Network Routability Information |
US8082348B1 (en) * | 2005-06-17 | 2011-12-20 | AOL, Inc. | Selecting an instance of a resource using network routability information |
US10148793B2 (en) * | 2005-06-17 | 2018-12-04 | Citrix Systems, Inc. | Selecting an instance of a resource using network routability information |
US9450860B2 (en) * | 2005-06-17 | 2016-09-20 | Citrix Systems, Inc. | Selecting an instance of a resource using network routability information |
US20190075188A1 (en) * | 2005-06-17 | 2019-03-07 | Citrix Systems, Inc. | Selecting an Instance of a Resource Using Network Routability Information |
WO2007001909A2 (en) * | 2005-06-23 | 2007-01-04 | Agere Systems Inc. | Continuous power transfer scheme for two-wire serial link |
WO2007001909A3 (en) * | 2005-06-23 | 2008-11-13 | Agere Systems Inc | Continuous power transfer scheme for two-wire serial link |
US20070011726A1 (en) * | 2005-07-11 | 2007-01-11 | Samsung Electronics Co., Ltd. | Multi-function peripheral with function of adding user identification information and method thereof |
US20070028000A1 (en) * | 2005-07-14 | 2007-02-01 | Yahoo! Inc. | Content router processing |
US20070014278A1 (en) * | 2005-07-14 | 2007-01-18 | Yahoo! Inc. | Counter router core variants |
US20070014300A1 (en) * | 2005-07-14 | 2007-01-18 | Yahoo! Inc. | Content router notification |
US20070014303A1 (en) * | 2005-07-14 | 2007-01-18 | Yahoo! Inc. | Content router |
US20070014277A1 (en) * | 2005-07-14 | 2007-01-18 | Yahoo! Inc. | Content router repository |
US20070014307A1 (en) * | 2005-07-14 | 2007-01-18 | Yahoo! Inc. | Content router forwarding |
WO2007011483A2 (en) * | 2005-07-14 | 2007-01-25 | Yahoo! Inc. | Content router repository |
US20070028293A1 (en) * | 2005-07-14 | 2007-02-01 | Yahoo! Inc. | Content router asynchronous exchange |
US20070038703A1 (en) * | 2005-07-14 | 2007-02-15 | Yahoo! Inc. | Content router gateway |
US7849199B2 (en) | 2005-07-14 | 2010-12-07 | Yahoo ! Inc. | Content router |
WO2007011483A3 (en) * | 2005-07-14 | 2011-05-26 | Yahoo! Inc. | Content router repository |
US8422376B2 (en) | 2005-08-01 | 2013-04-16 | Limelight Networks, Inc. | Routing under heavy loading |
US7706280B2 (en) | 2005-08-01 | 2010-04-27 | Limelight Networks, Inc. | Heavy load packet-switched routing |
WO2007016708A3 (en) * | 2005-08-01 | 2007-06-28 | Limelight Networks Inc | Routing under heavy loading |
US20070025327A1 (en) * | 2005-08-01 | 2007-02-01 | Limelight Networks, Inc. | Heavy load packet-switched routing |
WO2007016708A2 (en) * | 2005-08-01 | 2007-02-08 | Limelight Networks, Inc. | Routing under heavy loading |
US20070025254A1 (en) * | 2005-08-01 | 2007-02-01 | Raciborski Nathan F | Routing Under Heavy Loading |
US9094320B2 (en) | 2005-08-01 | 2015-07-28 | Limelight Networks, Inc. | Routing under heavy loading |
US7961625B2 (en) | 2005-08-01 | 2011-06-14 | Limelight Networks, Inc. | Routing under heavy loading |
US20070038858A1 (en) * | 2005-08-12 | 2007-02-15 | Silver Peak Systems, Inc. | Compliance in a network memory architecture |
US20070050475A1 (en) * | 2005-08-12 | 2007-03-01 | Silver Peak Systems, Inc. | Network memory architecture |
US20070038815A1 (en) * | 2005-08-12 | 2007-02-15 | Silver Peak Systems, Inc. | Network memory appliance |
US8312226B2 (en) | 2005-08-12 | 2012-11-13 | Silver Peak Systems, Inc. | Network memory appliance for providing data based on local accessibility |
US8392684B2 (en) | 2005-08-12 | 2013-03-05 | Silver Peak Systems, Inc. | Data encryption in a network memory architecture for providing data based on local accessibility |
US9363248B1 (en) | 2005-08-12 | 2016-06-07 | Silver Peak Systems, Inc. | Data encryption in a network memory architecture for providing data based on local accessibility |
US8732423B1 (en) | 2005-08-12 | 2014-05-20 | Silver Peak Systems, Inc. | Data encryption in a network memory architecture for providing data based on local accessibility |
US8370583B2 (en) | 2005-08-12 | 2013-02-05 | Silver Peak Systems, Inc. | Network memory architecture for providing data based on local accessibility |
US10091172B1 (en) | 2005-08-12 | 2018-10-02 | Silver Peak Systems, Inc. | Data encryption in a network memory architecture for providing data based on local accessibility |
US20090125952A1 (en) * | 2005-09-08 | 2009-05-14 | Qualcomm Incorporated | Method and apparatus for delivering content based on receivers characteristics |
US8171250B2 (en) | 2005-09-08 | 2012-05-01 | Qualcomm Incorporated | Method and apparatus for delivering content based on receivers characteristics |
US20070055629A1 (en) * | 2005-09-08 | 2007-03-08 | Qualcomm Incorporated | Methods and apparatus for distributing content to support multiple customer service entities and content packagers |
US8893179B2 (en) | 2005-09-12 | 2014-11-18 | Qualcomm Incorporated | Apparatus and methods for providing and presenting customized channel information |
US20070061860A1 (en) * | 2005-09-12 | 2007-03-15 | Walker Gordon K | Apparatus and methods of open and closed package subscription |
US8528029B2 (en) | 2005-09-12 | 2013-09-03 | Qualcomm Incorporated | Apparatus and methods of open and closed package subscription |
US20070078944A1 (en) * | 2005-09-12 | 2007-04-05 | Mark Charlebois | Apparatus and methods for delivering and presenting auxiliary services for customizing a channel |
US8917714B2 (en) * | 2005-09-13 | 2014-12-23 | International Business Machines Corporation | Cooperative routing between traffic control device and multi-server application |
US20080263223A1 (en) * | 2005-09-13 | 2008-10-23 | International Business Machines Corporation | Cooperative routing between traffic control device and multi-server application |
US20070061445A1 (en) * | 2005-09-13 | 2007-03-15 | Deganaro Louis R | Cooperative routing between traffic control device and multi-server application |
US20070073831A1 (en) * | 2005-09-15 | 2007-03-29 | Emc Corporation | Providing direct access to distributed managed content |
US10958752B2 (en) | 2005-09-15 | 2021-03-23 | Open Text Corporation | Providing access to managed content |
US11388251B2 (en) | 2005-09-15 | 2022-07-12 | Open Text Corporation | Providing access to managed content |
US8447827B2 (en) | 2005-09-15 | 2013-05-21 | Emc Corporation | Providing local access to managed content |
US8396938B2 (en) * | 2005-09-15 | 2013-03-12 | Emc Corporation | Providing direct access to distributed managed content |
US10404821B2 (en) | 2005-09-15 | 2019-09-03 | Open Text Corporation | Providing access to managed content |
US20070061327A1 (en) * | 2005-09-15 | 2007-03-15 | Emc Corporation | Providing local access to managed content |
US9769278B2 (en) | 2005-09-15 | 2017-09-19 | Open Text Corporation | Providing local access to managed content |
US8082334B1 (en) | 2005-09-15 | 2011-12-20 | Emc Corporation | Providing direct access to managed content |
US9712463B1 (en) | 2005-09-29 | 2017-07-18 | Silver Peak Systems, Inc. | Workload optimization in a wide area network utilizing virtual switches |
US9549048B1 (en) | 2005-09-29 | 2017-01-17 | Silver Peak Systems, Inc. | Transferring compressed packet data over a network |
US8929402B1 (en) | 2005-09-29 | 2015-01-06 | Silver Peak Systems, Inc. | Systems and methods for compressing packet data by predicting subsequent data |
US9363309B2 (en) | 2005-09-29 | 2016-06-07 | Silver Peak Systems, Inc. | Systems and methods for compressing packet data by predicting subsequent data |
US9036662B1 (en) | 2005-09-29 | 2015-05-19 | Silver Peak Systems, Inc. | Compressing packet data |
US20070104220A1 (en) * | 2005-11-08 | 2007-05-10 | Mark Charlebois | Methods and apparatus for fragmenting system information messages in wireless networks |
US8600836B2 (en) | 2005-11-08 | 2013-12-03 | Qualcomm Incorporated | System for distributing packages and channels to a device |
US20070106522A1 (en) * | 2005-11-08 | 2007-05-10 | Bruce Collins | System for distributing packages and channels to a device |
US20070117536A1 (en) * | 2005-11-08 | 2007-05-24 | Qualcomm Incorporated | Methods and apparatus for delivering regional parameters |
US8571570B2 (en) | 2005-11-08 | 2013-10-29 | Qualcomm Incorporated | Methods and apparatus for delivering regional parameters |
US8533358B2 (en) | 2005-11-08 | 2013-09-10 | Qualcomm Incorporated | Methods and apparatus for fragmenting system information messages in wireless networks |
US20070115929A1 (en) * | 2005-11-08 | 2007-05-24 | Bruce Collins | Flexible system for distributing content to a device |
US20070109592A1 (en) * | 2005-11-15 | 2007-05-17 | Parvathaneni Bhaskar A | Data gateway |
US8065680B2 (en) | 2005-11-15 | 2011-11-22 | Yahoo! Inc. | Data gateway for jobs management based on a persistent job table and a server table |
US7673240B2 (en) | 2005-12-30 | 2010-03-02 | Polaroid Labs, Llc | Ubiquitous navbar user interface across multiple heterogeneous digital media devices |
US20070192798A1 (en) * | 2005-12-30 | 2007-08-16 | Barrett Morgan | Digital content delivery via virtual private network (VPN) incorporating secured set-top devices |
US20070156845A1 (en) * | 2005-12-30 | 2007-07-05 | Akamai Technologies, Inc. | Site acceleration with content prefetching enabled through customer-specific configurations |
US8447837B2 (en) | 2005-12-30 | 2013-05-21 | Akamai Technologies, Inc. | Site acceleration with content prefetching enabled through customer-specific configurations |
US20070186180A1 (en) * | 2005-12-30 | 2007-08-09 | Barrett Morgan | Ubiquitous navbar user interface across multiple heterogeneous digital media devices |
US7941500B2 (en) * | 2006-02-08 | 2011-05-10 | Samsung Electronics Co., Ltd. | Method and device for managing content, storage medium, and adaptive content playing method using the same |
US7818402B1 (en) * | 2006-02-08 | 2010-10-19 | Roxbeam Media Network Corporation | Method and system for expediting peer-to-peer content delivery with improved network utilization |
US20070185972A1 (en) * | 2006-02-08 | 2007-08-09 | Samsung Electronics Co., Ltd. | Method and device for managing content, storage medium; and adaptive content playing method using the same |
US20090190583A1 (en) * | 2006-04-28 | 2009-07-30 | Telecom Italia S.P.A. | Method for Determining Prospective Peering Partners for an Internet Service Provider |
US8050193B2 (en) * | 2006-04-28 | 2011-11-01 | Telecom Italia S.P.A. | Method for determining prospective peering partners for an internet service provider |
US9047234B1 (en) * | 2006-06-05 | 2015-06-02 | Thomson Reuters (Markets) Llc | Data context passing between non-interfaced application programs in a common framework |
US8606926B2 (en) * | 2006-06-14 | 2013-12-10 | Opendns, Inc. | Recursive DNS nameserver |
US9661108B2 (en) | 2006-06-14 | 2017-05-23 | Cisco Technology, Inc. | Per-request control of DNS behavior |
US9444781B2 (en) | 2006-06-14 | 2016-09-13 | Cisco Technology, Inc. | Recursive DNS nameserver |
US20070294419A1 (en) * | 2006-06-14 | 2007-12-20 | David Ulevitch | Recursive dns nameserver |
US20070294721A1 (en) * | 2006-06-20 | 2007-12-20 | Sbc Knowledge Ventures, Lp | System and method of providing supplemental video content related to targeted advertisements in a video stream |
US20080022343A1 (en) * | 2006-07-24 | 2008-01-24 | Vvond, Inc. | Multiple audio streams |
US9961010B2 (en) | 2006-08-02 | 2018-05-01 | Silver Peak Systems, Inc. | Communications scheduler |
US8755381B2 (en) | 2006-08-02 | 2014-06-17 | Silver Peak Systems, Inc. | Data matching using flow based packet data storage |
US9584403B2 (en) | 2006-08-02 | 2017-02-28 | Silver Peak Systems, Inc. | Communications scheduler |
US8929380B1 (en) | 2006-08-02 | 2015-01-06 | Silver Peak Systems, Inc. | Data matching using flow based packet data storage |
US9438538B2 (en) | 2006-08-02 | 2016-09-06 | Silver Peak Systems, Inc. | Data matching using flow based packet data storage |
US9191342B2 (en) | 2006-08-02 | 2015-11-17 | Silver Peak Systems, Inc. | Data matching using flow based packet data storage |
US8885632B2 (en) | 2006-08-02 | 2014-11-11 | Silver Peak Systems, Inc. | Communications scheduler |
US20080031240A1 (en) * | 2006-08-02 | 2008-02-07 | Silver Peak Systems, Inc. | Data matching using flow based packet data storage |
US20160021004A1 (en) * | 2006-08-04 | 2016-01-21 | Brixham Solutions Ltd. | Global ip-based service-oriented network architecture |
US9485176B2 (en) * | 2006-08-04 | 2016-11-01 | Brixham Solutions Ltd. | Global IP-based service-oriented network architecture |
US20100235432A1 (en) * | 2006-08-21 | 2010-09-16 | Telefonaktiebolaget L M Ericsson | Distributed Server Network for Providing Triple and Play Services to End Users |
US7647590B2 (en) * | 2006-08-31 | 2010-01-12 | International Business Machines Corporation | Parallel computing system using coordinator and master nodes for load balancing and distributing work |
US20080059555A1 (en) * | 2006-08-31 | 2008-03-06 | Archer Charles J | Parallel application load balancing and distributed work management |
US8296812B1 (en) | 2006-09-01 | 2012-10-23 | Vudu, Inc. | Streaming video using erasure encoding |
WO2008030494A3 (en) * | 2006-09-05 | 2008-06-12 | Robert M Donnelli | Managing client-to-server or peer-to-peer relationships in a private or virtual network |
WO2008030494A2 (en) * | 2006-09-05 | 2008-03-13 | Donnelli Robert M | Managing client-to-server or peer-to-peer relationships in a private or virtual network |
US8965783B2 (en) | 2006-09-29 | 2015-02-24 | Yahoo! Inc. | Content-embedding code generation in digital media benefit attachment mechanism |
US20080082905A1 (en) * | 2006-09-29 | 2008-04-03 | Yahoo! Inc. | Content-embedding code generation in digital media benefit attachment mechanism |
US20080082904A1 (en) * | 2006-09-29 | 2008-04-03 | Yahoo! Inc. | Script-based content-embedding code generation in digital media benefit attachment mechanism |
US8943401B2 (en) | 2006-09-29 | 2015-01-27 | Yahoo! Inc. | Script-based content-embedding code generation in digital media benefit attachment mechanism |
US8737261B2 (en) * | 2006-11-27 | 2014-05-27 | Telefonaktiebolaget L M Ericsson (Publ) | Node registering method |
US20100208616A1 (en) * | 2006-11-27 | 2010-08-19 | Andreas Schieder | Node registering method |
US20080154951A1 (en) * | 2006-12-22 | 2008-06-26 | Yahoo! Inc. | Link Retrofitting of Digital Media Objects |
US9582804B2 (en) | 2006-12-22 | 2017-02-28 | Excalibur Ip, Llc | Link retrofitting of digital media objects |
US20080281718A1 (en) * | 2007-01-08 | 2008-11-13 | Barrett Morgan | Household network incorporating secure set-top devices |
DE102008003894B4 (en) | 2007-01-12 | 2021-07-29 | Google Technology Holdings LLC | Data dissemination and caching |
US20080244038A1 (en) * | 2007-03-30 | 2008-10-02 | Yahoo! Inc. | Point of Presence Distribution Mechanism for Digital Content Objects |
US9996627B2 (en) * | 2007-03-30 | 2018-06-12 | Excalibur Ip, Llc | Point of presence distribution mechanism for digital content objects |
US20080285578A1 (en) * | 2007-05-15 | 2008-11-20 | Delay John L | Content-based routing of information content |
US9019830B2 (en) | 2007-05-15 | 2015-04-28 | Imagine Communications Corp. | Content-based routing of information content |
WO2008144272A1 (en) * | 2007-05-15 | 2008-11-27 | Harris Corporation | Content-based routing of information content |
US20080313350A1 (en) * | 2007-06-18 | 2008-12-18 | Verizon Services Organization Inc. | Method and system of cache discovery in a peer-to-peer environment |
US8543700B1 (en) | 2007-06-28 | 2013-09-24 | Emc Corporation | Asynchronous content transfer |
US9021127B2 (en) | 2007-06-29 | 2015-04-28 | Amazon Technologies, Inc. | Updating routing information based on client location |
US10027582B2 (en) | 2007-06-29 | 2018-07-17 | Amazon Technologies, Inc. | Updating routing information based on client location |
US9992303B2 (en) | 2007-06-29 | 2018-06-05 | Amazon Technologies, Inc. | Request routing utilizing client location information |
US9021129B2 (en) | 2007-06-29 | 2015-04-28 | Amazon Technologies, Inc. | Request routing utilizing client location information |
US8225072B2 (en) | 2007-07-05 | 2012-07-17 | Silver Peak Systems, Inc. | Pre-fetching data into a memory |
US9092342B2 (en) | 2007-07-05 | 2015-07-28 | Silver Peak Systems, Inc. | Pre-fetching data into a memory |
US8171238B1 (en) | 2007-07-05 | 2012-05-01 | Silver Peak Systems, Inc. | Identification of data stored in memory |
US9253277B2 (en) | 2007-07-05 | 2016-02-02 | Silver Peak Systems, Inc. | Pre-fetching stored data from a memory |
US8095774B1 (en) | 2007-07-05 | 2012-01-10 | Silver Peak Systems, Inc. | Pre-fetching data into a memory |
US9152574B2 (en) | 2007-07-05 | 2015-10-06 | Silver Peak Systems, Inc. | Identification of non-sequential data stored in memory |
US8738865B1 (en) | 2007-07-05 | 2014-05-27 | Silver Peak Systems, Inc. | Identification of data stored in memory |
US8473714B2 (en) | 2007-07-05 | 2013-06-25 | Silver Peak Systems, Inc. | Pre-fetching data into a memory |
US10063392B2 (en) | 2007-08-21 | 2018-08-28 | At&T Intellectual Property I, L.P. | Methods and apparatus to select a voice over internet protocol (VOIP) border element |
US20090052434A1 (en) * | 2007-08-21 | 2009-02-26 | James Jackson | Methods and apparatus to select a voice over internet protocol (voip) border element |
US10264134B2 (en) | 2007-08-27 | 2019-04-16 | At&T Intellectual Property I, L.P. | Methods and apparatus to dynamically select a peered voice over internet protocol (VoIP) border element |
US9661148B2 (en) | 2007-08-27 | 2017-05-23 | At&T Intellectual Property I, L.P. | Methods and apparatus to dynamically select a peered voice over internet protocol (VoIP) border element |
US9124603B2 (en) | 2007-08-27 | 2015-09-01 | At&T Intellectual Property I., L.P. | Methods and apparatus to select a peered voice over internet protocol (VoIP) border element |
US20090059894A1 (en) * | 2007-08-27 | 2009-03-05 | James Jackson | Methods and apparatus to select a peered voice over internet protocol (voip) border element |
US9258268B2 (en) | 2007-08-27 | 2016-02-09 | At&T Intellectual Property, I., L.P. | Methods and apparatus to dynamically select a peered voice over internet protocol (VoIP) border element |
US20090059895A1 (en) * | 2007-08-27 | 2009-03-05 | Mehrad Yasrebi | Methods and apparatus to dynamically select a peered voice over internet protocol (voip) border element |
US9355416B2 (en) | 2007-08-31 | 2016-05-31 | James Michael Graziano | Forward path multi-media management system with end user feedback to central content sources |
US20110045910A1 (en) * | 2007-08-31 | 2011-02-24 | Lava Two, Llc | Gaming system with end user feedback for a communication network having a multi-media management |
US8572176B2 (en) | 2007-08-31 | 2013-10-29 | Lava Two, Llc | Forward path multi-media management system with end user feedback to distributed content sources |
US20100228814A1 (en) * | 2007-08-31 | 2010-09-09 | Lava Two ,LLC | Forward path multi-media management system with end user feedback to distributed content sources |
US8509748B2 (en) | 2007-08-31 | 2013-08-13 | Lava Two, Llc | Transaction management system in a multicast or broadcast wireless communication network |
US20100254297A1 (en) * | 2007-08-31 | 2010-10-07 | Lava Two, Llc | Transaction management system in a multicast or broadcast wireless communication network |
US20110188415A1 (en) * | 2007-08-31 | 2011-08-04 | Lava Two, Llc | Forward path multi-media management system with end user feedback to central content sources |
WO2009029113A1 (en) * | 2007-08-31 | 2009-03-05 | Vulano Group, Inc. | Transaction management system in a multicast or broadcast wireless communication network |
US20100240298A1 (en) * | 2007-08-31 | 2010-09-23 | Lava Two, Llc | Communication network for a multi-media management system with end user feedback |
US20110066747A1 (en) * | 2007-08-31 | 2011-03-17 | Lava Two, Llc | Virtual aggregation processor for incorporating reverse path feedback into content delivered on a forward path |
US20100241527A1 (en) * | 2007-08-31 | 2010-09-23 | Lava Two, Llc | Transaction management system in a multicast or broadcast wireless communication network |
US8307035B2 (en) | 2007-08-31 | 2012-11-06 | Lava Two, Llc | Virtual Aggregation Processor for incorporating reverse path feedback into content delivered on a forward path |
US8308572B2 (en) | 2007-08-31 | 2012-11-13 | Lava Two, Llc | Gaming system with end user feedback for a communication network having a multi-media management |
US8308573B2 (en) | 2007-08-31 | 2012-11-13 | Lava Two, Llc | Gaming device for multi-player games |
US7958485B2 (en) * | 2007-11-21 | 2011-06-07 | General Electric Company | Methods and systems for managing content dependency deployment |
US20090132587A1 (en) * | 2007-11-21 | 2009-05-21 | David John Steiner | Methods and systems for managing content dependency deployment |
US8489562B1 (en) | 2007-11-30 | 2013-07-16 | Silver Peak Systems, Inc. | Deferred data storage |
US8307115B1 (en) * | 2007-11-30 | 2012-11-06 | Silver Peak Systems, Inc. | Network memory mirroring |
US9613071B1 (en) * | 2007-11-30 | 2017-04-04 | Silver Peak Systems, Inc. | Deferred data storage |
US8595314B1 (en) * | 2007-11-30 | 2013-11-26 | Silver Peak Systems, Inc. | Deferred data storage |
US8713188B2 (en) | 2007-12-13 | 2014-04-29 | Opendns, Inc. | Per-request control of DNS behavior |
US20090157889A1 (en) * | 2007-12-13 | 2009-06-18 | Opendns, Inc. | Per-request control of dns behavior |
US8756340B2 (en) | 2007-12-20 | 2014-06-17 | Yahoo! Inc. | DNS wildcard beaconing to determine client location and resolver load for global traffic load balancing |
US9577919B2 (en) | 2007-12-20 | 2017-02-21 | Yahoo! Inc. | DNS wildcard beaconing |
US20090164614A1 (en) * | 2007-12-20 | 2009-06-25 | Christian Michael F | Dns wildcard beaconing to determine client location and resolver load for global traffic load balancing |
US7962631B2 (en) | 2007-12-21 | 2011-06-14 | Yahoo! Inc. | Method for determining network proximity for global traffic load balancing using passive TCP performance instrumentation |
US20090164646A1 (en) * | 2007-12-21 | 2009-06-25 | Christian Michael F | Method for determining network proximity for global traffic load balancing using passive tcp performance instrumentation |
US10506062B2 (en) * | 2007-12-27 | 2019-12-10 | At&T Intellectual Property I, L.P. | Network-optimized content delivery for high demand non-live contents |
US20150350368A1 (en) * | 2007-12-27 | 2015-12-03 | At&T Intellectual Property I, L.P. | Network-optimized content delivery for high demand non-live contents |
EP2235885A4 (en) * | 2007-12-28 | 2013-05-29 | Yahoo Inc | Mapless global traffic load balancing via anycast |
EP2235885A2 (en) * | 2007-12-28 | 2010-10-06 | Yahoo! Inc. | Mapless global traffic load balancing via anycast |
KR101177203B1 (en) | 2007-12-28 | 2012-08-24 | 야후! 인크. | Mapless global traffic load balancing via anycast |
WO2009086373A3 (en) * | 2007-12-28 | 2009-09-11 | Yahoo! Inc. | Mapless global traffic load balancing via anycast |
US8549402B2 (en) * | 2007-12-29 | 2013-10-01 | Joseph Harold Moore | System and method for providing internet radio service |
US20090177967A1 (en) * | 2007-12-29 | 2009-07-09 | Joseph Harold Moore | System and method for providing internet radio service |
US20090168752A1 (en) * | 2007-12-31 | 2009-07-02 | Jonathan Segel | Method and apparatus for distributing content |
US10560663B2 (en) | 2007-12-31 | 2020-02-11 | Alcatel Lucent | Method and apparatus for distributing content |
US9538141B2 (en) | 2007-12-31 | 2017-01-03 | Alcatel Lucent | Method and apparatus for controlling presentation of content at a user terminal |
US11134219B2 (en) | 2007-12-31 | 2021-09-28 | Alcatel Lucent | Method and apparatus for distributing content |
WO2009088513A1 (en) * | 2008-01-10 | 2009-07-16 | Hewlett-Packard Development Company, L.P. | Multiway peer-to-peer media streaming |
US8442052B1 (en) | 2008-02-20 | 2013-05-14 | Silver Peak Systems, Inc. | Forward packet recovery |
US9246824B2 (en) | 2008-02-26 | 2016-01-26 | At&T Intellectual Property I, L.P. | Systems and methods to select peered border elements for an IP multimedia session based on quality-of-service |
US9521081B2 (en) | 2008-02-26 | 2016-12-13 | At&T Intellectual Property I, L.P. | Systems and methods to select peered border elements for an IP multimedia session based on quality-of-service |
US8520663B2 (en) | 2008-02-26 | 2013-08-27 | At&T Intellectual Property I, L. P. | Systems and methods to select peered border elements for an IP multimedia session based on quality-of-service |
US10742723B2 (en) | 2008-02-28 | 2020-08-11 | Level 3 Communications, Llc | Load-balancing cluster |
US8886814B2 (en) | 2008-02-28 | 2014-11-11 | Level 3 Communications, Llc | Load-balancing cluster |
US20100332664A1 (en) * | 2008-02-28 | 2010-12-30 | Maksim Yevmenkin | Load-balancing cluster |
US11323510B2 (en) | 2008-02-28 | 2022-05-03 | Level 3 Communications, Llc | Load-balancing cluster |
US8489750B2 (en) | 2008-02-28 | 2013-07-16 | Level 3 Communications, Llc | Load-balancing cluster |
US9197699B2 (en) | 2008-02-28 | 2015-11-24 | Level 3 Communications, Llc | Load-balancing cluster |
US8135820B2 (en) | 2008-03-31 | 2012-03-13 | Amazon Technologies, Inc. | Request routing based on class |
US9621660B2 (en) | 2008-03-31 | 2017-04-11 | Amazon Technologies, Inc. | Locality based content distribution |
US8533293B1 (en) | 2008-03-31 | 2013-09-10 | Amazon Technologies, Inc. | Client side cache management |
US20090248858A1 (en) * | 2008-03-31 | 2009-10-01 | Swaminathan Sivasubramanian | Content management |
US10157135B2 (en) | 2008-03-31 | 2018-12-18 | Amazon Technologies, Inc. | Cache optimization |
US20090248787A1 (en) * | 2008-03-31 | 2009-10-01 | Swaminathan Sivasubramanian | Content management |
US8060561B2 (en) | 2008-03-31 | 2011-11-15 | Amazon Technologies, Inc. | Locality based content distribution |
US10158729B2 (en) | 2008-03-31 | 2018-12-18 | Amazon Technologies, Inc. | Locality based content distribution |
US9479476B2 (en) | 2008-03-31 | 2016-10-25 | Amazon Technologies, Inc. | Processing of DNS queries |
US9407699B2 (en) | 2008-03-31 | 2016-08-02 | Amazon Technologies, Inc. | Content management |
US20090248893A1 (en) * | 2008-03-31 | 2009-10-01 | Richardson David R | Request routing |
WO2010090650A3 (en) * | 2008-03-31 | 2010-11-04 | Amazon Technologies, Inc. | Request routing based on class |
US11194719B2 (en) | 2008-03-31 | 2021-12-07 | Amazon Technologies, Inc. | Cache optimization |
US9009286B2 (en) | 2008-03-31 | 2015-04-14 | Amazon Technologies, Inc. | Locality based content distribution |
US9544394B2 (en) | 2008-03-31 | 2017-01-10 | Amazon Technologies, Inc. | Network resource identification |
US9026616B2 (en) | 2008-03-31 | 2015-05-05 | Amazon Technologies, Inc. | Content delivery reconciliation |
US20090248697A1 (en) * | 2008-03-31 | 2009-10-01 | Richardson David R | Cache optimization |
US9888089B2 (en) | 2008-03-31 | 2018-02-06 | Amazon Technologies, Inc. | Client side cache management |
US9571389B2 (en) | 2008-03-31 | 2017-02-14 | Amazon Technologies, Inc. | Request routing based on class |
US10554748B2 (en) | 2008-03-31 | 2020-02-04 | Amazon Technologies, Inc. | Content management |
US9332078B2 (en) | 2008-03-31 | 2016-05-03 | Amazon Technologies, Inc. | Locality based content distribution |
US8601090B1 (en) | 2008-03-31 | 2013-12-03 | Amazon Technologies, Inc. | Network resource identification |
JP2011519203A (en) * | 2008-03-31 | 2011-06-30 | アマゾン テクノロジーズ インコーポレーテッド | Method and system for requesting routing based on class |
US8606996B2 (en) | 2008-03-31 | 2013-12-10 | Amazon Technologies, Inc. | Cache optimization |
US11245770B2 (en) | 2008-03-31 | 2022-02-08 | Amazon Technologies, Inc. | Locality based content distribution |
CN105530324A (en) * | 2008-03-31 | 2016-04-27 | 亚马逊技术有限公司 | Request routing based on class |
US8447831B1 (en) | 2008-03-31 | 2013-05-21 | Amazon Technologies, Inc. | Incentive driven content delivery |
US9887915B2 (en) | 2008-03-31 | 2018-02-06 | Amazon Technologies, Inc. | Request routing based on class |
US8275874B2 (en) | 2008-03-31 | 2012-09-25 | Amazon Technologies, Inc. | Locality based content distribution |
US10530874B2 (en) | 2008-03-31 | 2020-01-07 | Amazon Technologies, Inc. | Locality based content distribution |
US7970820B1 (en) | 2008-03-31 | 2011-06-28 | Amazon Technologies, Inc. | Locality based content distribution |
US8639817B2 (en) | 2008-03-31 | 2014-01-28 | Amazon Technologies, Inc. | Content management |
US10305797B2 (en) | 2008-03-31 | 2019-05-28 | Amazon Technologies, Inc. | Request routing based on class |
US8930544B2 (en) | 2008-03-31 | 2015-01-06 | Amazon Technologies, Inc. | Network resource identification |
US10645149B2 (en) | 2008-03-31 | 2020-05-05 | Amazon Technologies, Inc. | Content delivery reconciliation |
US8438263B2 (en) | 2008-03-31 | 2013-05-07 | Amazon Technologies, Inc. | Locality based content distribution |
US11451472B2 (en) | 2008-03-31 | 2022-09-20 | Amazon Technologies, Inc. | Request routing based on class |
US20110072140A1 (en) * | 2008-03-31 | 2011-03-24 | Swaminathan Sivasubramanian | Content management |
US8713156B2 (en) | 2008-03-31 | 2014-04-29 | Amazon Technologies, Inc. | Request routing based on class |
US20110072134A1 (en) * | 2008-03-31 | 2011-03-24 | Swaminathan Sivasubramanian | Content management |
US9894168B2 (en) | 2008-03-31 | 2018-02-13 | Amazon Technologies, Inc. | Locality based content distribution |
US8402137B2 (en) | 2008-03-31 | 2013-03-19 | Amazon Technologies, Inc. | Content management |
US20110072110A1 (en) * | 2008-03-31 | 2011-03-24 | Swaminathan Sivasubramanian | Content management |
US20110078240A1 (en) * | 2008-03-31 | 2011-03-31 | Swaminathan Sivasubramanian | Content management |
US10511567B2 (en) | 2008-03-31 | 2019-12-17 | Amazon Technologies, Inc. | Network resource identification |
US8156243B2 (en) | 2008-03-31 | 2012-04-10 | Amazon Technologies, Inc. | Request routing |
US8756325B2 (en) | 2008-03-31 | 2014-06-17 | Amazon Technologies, Inc. | Content management |
US8386596B2 (en) | 2008-03-31 | 2013-02-26 | Amazon Technologies, Inc. | Request routing based on class |
US9954934B2 (en) | 2008-03-31 | 2018-04-24 | Amazon Technologies, Inc. | Content delivery reconciliation |
US7962597B2 (en) | 2008-03-31 | 2011-06-14 | Amazon Technologies, Inc. | Request routing based on class |
US8321568B2 (en) | 2008-03-31 | 2012-11-27 | Amazon Technologies, Inc. | Content management |
US10797995B2 (en) | 2008-03-31 | 2020-10-06 | Amazon Technologies, Inc. | Request routing based on class |
US11909639B2 (en) | 2008-03-31 | 2024-02-20 | Amazon Technologies, Inc. | Request routing based on class |
US8346937B2 (en) | 2008-03-31 | 2013-01-01 | Amazon Technologies, Inc. | Content management |
CN102047243A (en) * | 2008-03-31 | 2011-05-04 | 亚马逊技术有限公司 | Request routing based on class |
US10771552B2 (en) | 2008-03-31 | 2020-09-08 | Amazon Technologies, Inc. | Content management |
US8352614B2 (en) | 2008-03-31 | 2013-01-08 | Amazon Technologies, Inc. | Content management |
US9210235B2 (en) | 2008-03-31 | 2015-12-08 | Amazon Technologies, Inc. | Client side cache management |
US8352613B2 (en) | 2008-03-31 | 2013-01-08 | Amazon Technologies, Inc. | Content management |
US9208097B2 (en) | 2008-03-31 | 2015-12-08 | Amazon Technologies, Inc. | Cache optimization |
US8352615B2 (en) | 2008-03-31 | 2013-01-08 | Amazon Technologies, Inc. | Content management |
US20110145405A1 (en) * | 2008-04-01 | 2011-06-16 | Jayanth Vijayaraghavan | Methods for Collecting and Analyzing Network Performance Data |
US20090245114A1 (en) * | 2008-04-01 | 2009-10-01 | Jayanth Vijayaraghavan | Methods for collecting and analyzing network performance data |
US10218806B2 (en) | 2008-04-04 | 2019-02-26 | Level 3 Communications, Llc | Handling long-tail content in a content delivery network (CDN) |
US20100332595A1 (en) * | 2008-04-04 | 2010-12-30 | David Fullagar | Handling long-tail content in a content delivery network (cdn) |
US9762692B2 (en) | 2008-04-04 | 2017-09-12 | Level 3 Communications, Llc | Handling long-tail content in a content delivery network (CDN) |
US20090254661A1 (en) * | 2008-04-04 | 2009-10-08 | Level 3 Communications, Llc | Handling long-tail content in a content delivery network (cdn) |
US8930538B2 (en) | 2008-04-04 | 2015-01-06 | Level 3 Communications, Llc | Handling long-tail content in a content delivery network (CDN) |
US10924573B2 (en) | 2008-04-04 | 2021-02-16 | Level 3 Communications, Llc | Handling long-tail content in a content delivery network (CDN) |
US9602591B2 (en) | 2008-06-27 | 2017-03-21 | Tata Communications (America) Inc. | Managing TCP anycast requests |
US8131836B2 (en) * | 2008-06-27 | 2012-03-06 | BitGravity, Inc. | Managing TCP anycast requests |
US20110099259A1 (en) * | 2008-06-27 | 2011-04-28 | BitGravity, Inc. | Managing TCP anycast requests |
US8762535B2 (en) * | 2008-06-27 | 2014-06-24 | BitGravity, Inc. | Managing TCP anycast requests |
US20120124191A1 (en) * | 2008-06-27 | 2012-05-17 | BitGravity, Inc. | Managing tcp anycast requests |
US7797426B1 (en) * | 2008-06-27 | 2010-09-14 | BitGravity, Inc. | Managing TCP anycast requests |
JP2011527043A (en) * | 2008-06-30 | 2011-10-20 | アマゾン テクノロジーズ インコーポレーテッド | Routing requests that use network computing components |
US20090327517A1 (en) * | 2008-06-30 | 2009-12-31 | Swaminathan Sivasubramanian | Request routing using network computing components |
US9021128B2 (en) | 2008-06-30 | 2015-04-28 | Amazon Technologies, Inc. | Request routing using network computing components |
US8239571B2 (en) | 2008-06-30 | 2012-08-07 | Amazon Technologies, Inc. | Request routing using network computing components |
US9608957B2 (en) | 2008-06-30 | 2017-03-28 | Amazon Technologies, Inc. | Request routing using network computing components |
US7925782B2 (en) | 2008-06-30 | 2011-04-12 | Amazon Technologies, Inc. | Request routing using network computing components |
US8458250B2 (en) | 2008-06-30 | 2013-06-04 | Amazon Technologies, Inc. | Request routing using network computing components |
US9912740B2 (en) | 2008-06-30 | 2018-03-06 | Amazon Technologies, Inc. | Latency measurement in resource requests |
US10313930B2 (en) | 2008-07-03 | 2019-06-04 | Silver Peak Systems, Inc. | Virtual wide area network overlays |
US11419011B2 (en) | 2008-07-03 | 2022-08-16 | Hewlett Packard Enterprise Development Lp | Data transmission via bonded tunnels of a virtual wide area network overlay with error correction |
US10805840B2 (en) | 2008-07-03 | 2020-10-13 | Silver Peak Systems, Inc. | Data transmission via a virtual wide area network overlay |
US9397951B1 (en) | 2008-07-03 | 2016-07-19 | Silver Peak Systems, Inc. | Quality of service using multiple flows |
US9717021B2 (en) | 2008-07-03 | 2017-07-25 | Silver Peak Systems, Inc. | Virtual network overlay |
US11412416B2 (en) | 2008-07-03 | 2022-08-09 | Hewlett Packard Enterprise Development Lp | Data transmission via bonded tunnels of a virtual wide area network overlay |
US8743683B1 (en) | 2008-07-03 | 2014-06-03 | Silver Peak Systems, Inc. | Quality of service using multiple flows |
US9143455B1 (en) | 2008-07-03 | 2015-09-22 | Silver Peak Systems, Inc. | Quality of service using multiple flows |
US10007668B2 (en) * | 2008-08-01 | 2018-06-26 | Vantrix Corporation | Method and system for triggering ingestion of remote content by a streaming server using uniform resource locator folder mapping |
US20100030908A1 (en) * | 2008-08-01 | 2010-02-04 | Courtemanche Marc | Method and system for triggering ingestion of remote content by a streaming server using uniform resource locator folder mapping |
US8171111B1 (en) | 2008-08-07 | 2012-05-01 | United Services Automobile Association (Usaa) | Systems and methods for non-specific address routing |
US11044195B1 (en) | 2008-08-21 | 2021-06-22 | United Services Automobile Association (Usaa) | Preferential loading in data centers |
US11683263B1 (en) | 2008-08-21 | 2023-06-20 | United Services Automobile Association (Usaa) | Preferential loading in data centers |
US9203921B2 (en) * | 2008-08-26 | 2015-12-01 | British Telecommunications Public Limited Company | Operation of a content distribution network |
US20110145437A1 (en) * | 2008-08-26 | 2011-06-16 | Benjamin Paul Niven-Jenkins | Operation of a content distribution network |
US20110161461A1 (en) * | 2008-08-26 | 2011-06-30 | Niven-Jenkins Benjamin P | Content distribution network |
US8966003B2 (en) | 2008-09-19 | 2015-02-24 | Limelight Networks, Inc. | Content delivery network stream server vignette distribution |
US20100077056A1 (en) * | 2008-09-19 | 2010-03-25 | Limelight Networks, Inc. | Content delivery network stream server vignette distribution |
US8060616B1 (en) * | 2008-11-17 | 2011-11-15 | Amazon Technologies, Inc. | Managing CDN registration by a storage provider |
US9515949B2 (en) | 2008-11-17 | 2016-12-06 | Amazon Technologies, Inc. | Managing content delivery network service providers |
US8028090B2 (en) | 2008-11-17 | 2011-09-27 | Amazon Technologies, Inc. | Request routing utilizing client location information |
US8234403B2 (en) | 2008-11-17 | 2012-07-31 | Amazon Technologies, Inc. | Updating routing information based on client location |
US8239514B2 (en) | 2008-11-17 | 2012-08-07 | Amazon Technologies, Inc. | Managing content delivery network service providers |
US9734472B2 (en) | 2008-11-17 | 2017-08-15 | Amazon Technologies, Inc. | Request routing utilizing cost information |
US9787599B2 (en) | 2008-11-17 | 2017-10-10 | Amazon Technologies, Inc. | Managing content delivery network service providers |
US9444759B2 (en) * | 2008-11-17 | 2016-09-13 | Amazon Technologies, Inc. | Service provider registration by a content broker |
US8521880B1 (en) | 2008-11-17 | 2013-08-27 | Amazon Technologies, Inc. | Managing content delivery network service providers |
US7991910B2 (en) | 2008-11-17 | 2011-08-02 | Amazon Technologies, Inc. | Updating routing information based on client location |
US11811657B2 (en) | 2008-11-17 | 2023-11-07 | Amazon Technologies, Inc. | Updating routing information based on client location |
US11115500B2 (en) | 2008-11-17 | 2021-09-07 | Amazon Technologies, Inc. | Request routing utilizing client location information |
US10742550B2 (en) | 2008-11-17 | 2020-08-11 | Amazon Technologies, Inc. | Updating routing information based on client location |
US9451046B2 (en) * | 2008-11-17 | 2016-09-20 | Amazon Technologies, Inc. | Managing CDN registration by a storage provider |
US20120110159A1 (en) * | 2008-11-17 | 2012-05-03 | Amazon Technologies, Inc. | Managing cdn registration by a storage provider |
US10523783B2 (en) | 2008-11-17 | 2019-12-31 | Amazon Technologies, Inc. | Request routing utilizing client location information |
US8301778B2 (en) * | 2008-11-17 | 2012-10-30 | Amazon Technologies, Inc. | Service provider registration by a content broker |
US8301748B2 (en) * | 2008-11-17 | 2012-10-30 | Amazon Technologies, Inc. | Managing CDN registration by a storage provider |
US20120102203A1 (en) * | 2008-11-17 | 2012-04-26 | Amazon Technologies, Inc. | Service provider registration by a content broker |
US8321588B2 (en) | 2008-11-17 | 2012-11-27 | Amazon Technologies, Inc. | Request routing utilizing client location information |
US9985927B2 (en) | 2008-11-17 | 2018-05-29 | Amazon Technologies, Inc. | Managing content delivery network service providers by a content broker |
US20130007284A1 (en) * | 2008-11-17 | 2013-01-03 | Richardson David R | Service provider registration by a content broker |
US20130013788A1 (en) * | 2008-11-17 | 2013-01-10 | Richardson David R | Managing cdn registration by a storage provider |
US8583776B2 (en) | 2008-11-17 | 2013-11-12 | Amazon Technologies, Inc. | Managing content delivery network service providers |
US20130311605A1 (en) * | 2008-11-17 | 2013-11-21 | Amazon Technologies, Inc. | Managing cdn registration by a storage provider |
US20130332569A1 (en) * | 2008-11-17 | 2013-12-12 | Amazon Technologies, Inc. | Service provider registration by a content broker |
US8122098B1 (en) | 2008-11-17 | 2012-02-21 | Amazon Technologies, Inc. | Managing content delivery network service providers by a content broker |
US8423667B2 (en) | 2008-11-17 | 2013-04-16 | Amazon Technologies, Inc. | Updating routing information based on client location |
US9590946B2 (en) | 2008-11-17 | 2017-03-07 | Amazon Technologies, Inc. | Managing content delivery network service providers |
US8510448B2 (en) * | 2008-11-17 | 2013-08-13 | Amazon Technologies, Inc. | Service provider registration by a content broker |
US11283715B2 (en) | 2008-11-17 | 2022-03-22 | Amazon Technologies, Inc. | Updating routing information based on client location |
US10116584B2 (en) | 2008-11-17 | 2018-10-30 | Amazon Technologies, Inc. | Managing content delivery network service providers |
US8732309B1 (en) | 2008-11-17 | 2014-05-20 | Amazon Technologies, Inc. | Request routing utilizing cost information |
US9251112B2 (en) | 2008-11-17 | 2016-02-02 | Amazon Technologies, Inc. | Managing content delivery network service providers |
US8458360B2 (en) | 2008-11-17 | 2013-06-04 | Amazon Technologies, Inc. | Request routing utilizing client location information |
US8065417B1 (en) * | 2008-11-17 | 2011-11-22 | Amazon Technologies, Inc. | Service provider registration by a content broker |
US8495220B2 (en) * | 2008-11-17 | 2013-07-23 | Amazon Technologies, Inc. | Managing CDN registration by a storage provider |
US8073940B1 (en) | 2008-11-17 | 2011-12-06 | Amazon Technologies, Inc. | Managing content delivery network service providers |
US20100125675A1 (en) * | 2008-11-17 | 2010-05-20 | Richardson David R | Updating routing information based on client location |
US20100125673A1 (en) * | 2008-11-17 | 2010-05-20 | Richardson David R | Request routing utilizing client location information |
US8788671B2 (en) | 2008-11-17 | 2014-07-22 | Amazon Technologies, Inc. | Managing content delivery network service providers by a content broker |
US8811431B2 (en) | 2008-11-20 | 2014-08-19 | Silver Peak Systems, Inc. | Systems and methods for compressing packet data |
US20100124239A1 (en) * | 2008-11-20 | 2010-05-20 | Silver Peak Systems, Inc. | Systems and methods for compressing packet data |
US20100153802A1 (en) * | 2008-12-15 | 2010-06-17 | At&T Corp. | System and Method for Anycast Transport Optimization |
US10728112B2 (en) | 2009-03-24 | 2020-07-28 | Amazon Technologies, Inc. | System and method for tracking service results |
US9391825B1 (en) * | 2009-03-24 | 2016-07-12 | Amazon Technologies, Inc. | System and method for tracking service results |
US11356337B2 (en) | 2009-03-24 | 2022-06-07 | Amazon Technologies, Inc. | System and method for tracking service requests |
US8510417B2 (en) | 2009-03-25 | 2013-08-13 | Limelight Networks, Inc. | Publishing-point management for content delivery network |
US20100250710A1 (en) * | 2009-03-25 | 2010-09-30 | Limelight Networks, Inc. | Publishing-point management for content delivery network |
US8516082B2 (en) | 2009-03-25 | 2013-08-20 | Limelight Networks, Inc. | Publishing-point management for content delivery network |
US10230819B2 (en) | 2009-03-27 | 2019-03-12 | Amazon Technologies, Inc. | Translation of resource identifiers using popularity information upon client request |
US10574787B2 (en) | 2009-03-27 | 2020-02-25 | Amazon Technologies, Inc. | Translation of resource identifiers using popularity information upon client request |
US8688837B1 (en) | 2009-03-27 | 2014-04-01 | Amazon Technologies, Inc. | Dynamically translating resource identifiers for request routing using popularity information |
US8996664B2 (en) | 2009-03-27 | 2015-03-31 | Amazon Technologies, Inc. | Translation of resource identifiers using popularity information upon client request |
US10601767B2 (en) | 2009-03-27 | 2020-03-24 | Amazon Technologies, Inc. | DNS query processing based on application information |
US8521885B1 (en) | 2009-03-27 | 2013-08-27 | Amazon Technologies, Inc. | Dynamically translating resource identifiers for request routing using popularity information |
US9083675B2 (en) | 2009-03-27 | 2015-07-14 | Amazon Technologies, Inc. | Translation of resource identifiers using popularity information upon client request |
US9237114B2 (en) | 2009-03-27 | 2016-01-12 | Amazon Technologies, Inc. | Managing resources in resource cache components |
US8412823B1 (en) | 2009-03-27 | 2013-04-02 | Amazon Technologies, Inc. | Managing tracking information entries in resource cache components |
US8756341B1 (en) * | 2009-03-27 | 2014-06-17 | Amazon Technologies, Inc. | Request routing utilizing popularity information |
US10264062B2 (en) | 2009-03-27 | 2019-04-16 | Amazon Technologies, Inc. | Request routing using a popularity identifier to identify a cache component |
US8521851B1 (en) | 2009-03-27 | 2013-08-27 | Amazon Technologies, Inc. | DNS query processing using resource identifiers specifying an application broker |
US10491534B2 (en) | 2009-03-27 | 2019-11-26 | Amazon Technologies, Inc. | Managing resources and entries in tracking information in resource cache components |
US9191458B2 (en) | 2009-03-27 | 2015-11-17 | Amazon Technologies, Inc. | Request routing using a popularity identifier at a DNS nameserver |
US8463877B1 (en) | 2009-03-27 | 2013-06-11 | Amazon Technologies, Inc. | Dynamically translating resource identifiers for request routing using popularitiy information |
US10439982B2 (en) | 2009-04-23 | 2019-10-08 | Cisco Technology, Inc. | Robust domain name resolution |
US9276902B2 (en) | 2009-04-23 | 2016-03-01 | Opendns, Inc. | Robust domain name resolution |
US10911399B2 (en) | 2009-04-23 | 2021-02-02 | Cisco Technology, Inc. | Robust domain name resolution |
US10521348B2 (en) | 2009-06-16 | 2019-12-31 | Amazon Technologies, Inc. | Managing resources using resource expiration data |
US9176894B2 (en) | 2009-06-16 | 2015-11-03 | Amazon Technologies, Inc. | Managing resources using resource expiration data |
US8543702B1 (en) | 2009-06-16 | 2013-09-24 | Amazon Technologies, Inc. | Managing resources using resource expiration data |
US10783077B2 (en) | 2009-06-16 | 2020-09-22 | Amazon Technologies, Inc. | Managing resources using resource expiration data |
US8782236B1 (en) | 2009-06-16 | 2014-07-15 | Amazon Technologies, Inc. | Managing resources using resource expiration data |
US8812715B2 (en) * | 2009-07-01 | 2014-08-19 | Huawei Technologies Co., Ltd. | Method, system, and proxy node for P2P streaming media data distribution |
US20120102116A1 (en) * | 2009-07-01 | 2012-04-26 | Guangyu Shi | Method, system, and proxy node for p2p streaming media data distribution |
US9100462B2 (en) | 2009-07-30 | 2015-08-04 | At&T Intellectual Property I, L.P. | Anycast transport protocol for content distribution networks |
US8560597B2 (en) | 2009-07-30 | 2013-10-15 | At&T Intellectual Property I, L.P. | Anycast transport protocol for content distribution networks |
US10484509B2 (en) | 2009-07-30 | 2019-11-19 | At&T Intellectual Property I, L.P. | Anycast transport protocol for content distribution networks |
US9712648B2 (en) | 2009-07-30 | 2017-07-18 | At&T Intellectual Property I, L.P. | Anycast transport protocol for content distribution networks |
US20110029596A1 (en) * | 2009-07-30 | 2011-02-03 | At&T Intellectual Property I, L.P. | Anycast Transport Protocol for Content Distribution Networks |
US9407729B2 (en) | 2009-07-30 | 2016-08-02 | At&T Intellectual Property I, L.P. | Anycast transport protocol for content distribution networks |
US10051089B2 (en) | 2009-07-30 | 2018-08-14 | At&T Intellectual Property I, L.P. | Anycast transport protocol for content distribution networks |
KR101135087B1 (en) * | 2009-08-12 | 2012-04-16 | 삼성에스디에스 주식회사 | System and method for providing contents |
US8966033B2 (en) | 2009-08-17 | 2015-02-24 | At&T Intellectual Property I, L.P. | Integrated proximity routing for content distribution |
US20110040861A1 (en) * | 2009-08-17 | 2011-02-17 | At&T Intellectual Property I, L.P. | Integrated Proximity Routing for Content Distribution |
US10511684B2 (en) | 2009-09-03 | 2019-12-17 | At&T Intellectual Property I, L.P. | Anycast aware transport for content distribution networks |
US20110055316A1 (en) * | 2009-09-03 | 2011-03-03 | At&T Intellectual Property I, L.P. | Anycast Aware Transport for Content Distribution Networks |
US9450804B2 (en) * | 2009-09-03 | 2016-09-20 | At&T Intellectual Property I, L.P. | Anycast aware transport for content distribution networks |
US9130756B2 (en) * | 2009-09-04 | 2015-09-08 | Amazon Technologies, Inc. | Managing secure content in a content delivery network |
US10135620B2 (en) * | 2009-09-04 | 2018-11-20 | Amazon Technologis, Inc. | Managing secure content in a content delivery network |
US8397073B1 (en) | 2009-09-04 | 2013-03-12 | Amazon Technologies, Inc. | Managing secure content in a content delivery network |
US10785037B2 (en) * | 2009-09-04 | 2020-09-22 | Amazon Technologies, Inc. | Managing secure content in a content delivery network |
US20130191645A1 (en) * | 2009-09-04 | 2013-07-25 | Amazon Technologies, Inc. | Managing secure content in a content delivery network |
US9712325B2 (en) * | 2009-09-04 | 2017-07-18 | Amazon Technologies, Inc. | Managing secure content in a content delivery network |
US20150319194A1 (en) * | 2009-09-04 | 2015-11-05 | Amazon Technologies, Inc. | Managing secure content in a content delivery network |
US9246776B2 (en) | 2009-10-02 | 2016-01-26 | Amazon Technologies, Inc. | Forward-based resource delivery network management techniques |
US20110082982A1 (en) * | 2009-10-02 | 2011-04-07 | Limelight Networks, Inc. | Content delivery network cache grouping |
US9197537B2 (en) | 2009-10-02 | 2015-11-24 | Limelight Networks, Inc. | Enhanced anycast for edge server selection |
US10218584B2 (en) | 2009-10-02 | 2019-02-26 | Amazon Technologies, Inc. | Forward-based resource delivery network management techniques |
US8219645B2 (en) | 2009-10-02 | 2012-07-10 | Limelight Networks, Inc. | Content delivery network cache grouping |
EP2483793A1 (en) * | 2009-10-02 | 2012-08-08 | Limelight Networks, Inc. | Content delivery network cache grouping |
EP2483793A4 (en) * | 2009-10-02 | 2013-11-06 | Limelight Networks Inc | Content delivery network cache grouping |
US20120023198A1 (en) * | 2009-10-02 | 2012-01-26 | Limelight Networks, Inc. | Enhanced anycast for edge server selection |
EP2484065A2 (en) * | 2009-10-02 | 2012-08-08 | Limelight Networks, Inc. | Enhanced anycast for edge server selection |
US20110082944A1 (en) * | 2009-10-02 | 2011-04-07 | Limelight Networks, Inc. | Real-Time Message Queuing For A Processing Ring |
US8199752B2 (en) * | 2009-10-02 | 2012-06-12 | Limelight Networks, Inc. | Enhanced anycast for edge server selection |
WO2011041726A3 (en) * | 2009-10-02 | 2011-07-28 | Limelight Networks, Inc. | Enhanced anycast for edge server selection |
EP2484065A4 (en) * | 2009-10-02 | 2013-08-07 | Limelight Networks Inc | Enhanced anycast for edge server selection |
CN102640467A (en) * | 2009-10-02 | 2012-08-15 | 杰出网络公司 | Enhanced anycast for edge server selection |
US8270403B2 (en) * | 2009-10-02 | 2012-09-18 | Limelight Networks, Inc. | Enhanced Anycast for edge server selection |
US9893957B2 (en) | 2009-10-02 | 2018-02-13 | Amazon Technologies, Inc. | Forward-based resource delivery network management techniques |
US20110082916A1 (en) * | 2009-10-02 | 2011-04-07 | Limelight Networks, Inc. | Enhanced Anycast For Edge Server Selection |
US8370449B2 (en) | 2009-10-02 | 2013-02-05 | Limelight Networks, Inc. | Content delivery network cache grouping |
US8612622B2 (en) | 2009-10-02 | 2013-12-17 | Limelight Networks, Inc. | Real-time message queuing for a processing ring |
WO2011041709A1 (en) * | 2009-10-02 | 2011-04-07 | Limelight Networks, Inc. | Content delivery network cache grouping |
US10033605B2 (en) | 2009-12-22 | 2018-07-24 | At&T Intellectual Property I, L.P. | Integrated adaptive anycast for content distribution |
US10594581B2 (en) | 2009-12-22 | 2020-03-17 | At&T Intellectual Property I, L.P. | Integrated adaptive anycast for content distribution |
US20110153719A1 (en) * | 2009-12-22 | 2011-06-23 | At&T Intellectual Property I, L.P. | Integrated Adaptive Anycast for Content Distribution |
US8560598B2 (en) * | 2009-12-22 | 2013-10-15 | At&T Intellectual Property I, L.P. | Integrated adaptive anycast for content distribution |
US20110153941A1 (en) * | 2009-12-22 | 2011-06-23 | At&T Intellectual Property I, L.P. | Multi-Autonomous System Anycast Content Delivery Network |
US9667516B2 (en) | 2009-12-22 | 2017-05-30 | At&T Intellectual Property I, L.P. | Integrated adaptive anycast for content distribution |
US9191292B2 (en) | 2009-12-22 | 2015-11-17 | At&T Intellectual Property I, L.P. | Integrated adaptive anycast for content distribution |
US8607014B2 (en) * | 2009-12-22 | 2013-12-10 | At&T Intellectual Property I, L.P. | Multi-autonomous system anycast content delivery network |
US9495338B1 (en) | 2010-01-28 | 2016-11-15 | Amazon Technologies, Inc. | Content distribution network |
US11205037B2 (en) | 2010-01-28 | 2021-12-21 | Amazon Technologies, Inc. | Content distribution network |
US10506029B2 (en) | 2010-01-28 | 2019-12-10 | Amazon Technologies, Inc. | Content distribution network |
US11379119B2 (en) | 2010-03-05 | 2022-07-05 | Netapp, Inc. | Writing data in a distributed data storage system |
US8856281B2 (en) | 2010-03-22 | 2014-10-07 | At&T Intellectual Property I, L.P. | Internet protocol version 6 content routing |
US9167032B2 (en) | 2010-03-22 | 2015-10-20 | At&T Intellectual Property I, L.P. | Internet protocol version 6 content routing |
US9800654B2 (en) | 2010-03-22 | 2017-10-24 | At&T Intellectual Property I, L.P. | Internet protocol version 6 content routing |
US20110231475A1 (en) * | 2010-03-22 | 2011-09-22 | At&T Intellectual Property I, L.P. | Internet Protocol Version 6 Content Routing |
US10757173B2 (en) | 2010-03-22 | 2020-08-25 | At&T Intellectual Property I, L.P. | Internet protocol version 6 content routing |
US8090863B2 (en) | 2010-04-07 | 2012-01-03 | Limelight Networks, Inc. | Partial object distribution in content delivery network |
US20110252082A1 (en) * | 2010-04-07 | 2011-10-13 | Limelight Networks, Inc. | System and method for delivery of content objects |
US8880587B2 (en) * | 2010-04-07 | 2014-11-04 | Limelight Networks, Inc. | System and method for delivery of content objects |
US8463876B2 (en) | 2010-04-07 | 2013-06-11 | Limelight, Inc. | Partial object distribution in content delivery network |
US20130166659A1 (en) * | 2010-05-11 | 2013-06-27 | Mary-Luc Champel | Methods for distributing contents to peers by means of multicast connections within a p2p infrastructure, and associated control server |
US20120203926A1 (en) * | 2010-08-16 | 2012-08-09 | Michael Camp | IP Network Service Redirector Device and Method |
US8769111B2 (en) * | 2010-08-16 | 2014-07-01 | Numerex Corp. | IP network service redirector device and method |
US9288153B2 (en) | 2010-08-26 | 2016-03-15 | Amazon Technologies, Inc. | Processing encoded content |
US8924528B1 (en) | 2010-09-28 | 2014-12-30 | Amazon Technologies, Inc. | Latency measurement in resource requests |
US9407681B1 (en) | 2010-09-28 | 2016-08-02 | Amazon Technologies, Inc. | Latency measurement in resource requests |
US8930513B1 (en) | 2010-09-28 | 2015-01-06 | Amazon Technologies, Inc. | Latency measurement in resource requests |
US10225322B2 (en) | 2010-09-28 | 2019-03-05 | Amazon Technologies, Inc. | Point of presence management in request routing |
US9712484B1 (en) | 2010-09-28 | 2017-07-18 | Amazon Technologies, Inc. | Managing request routing information utilizing client identifiers |
US10015237B2 (en) | 2010-09-28 | 2018-07-03 | Amazon Technologies, Inc. | Point of presence management in request routing |
US9003035B1 (en) | 2010-09-28 | 2015-04-07 | Amazon Technologies, Inc. | Point of presence management in request routing |
US10778554B2 (en) | 2010-09-28 | 2020-09-15 | Amazon Technologies, Inc. | Latency measurement in resource requests |
US8819283B2 (en) | 2010-09-28 | 2014-08-26 | Amazon Technologies, Inc. | Request routing in a networked environment |
US11632420B2 (en) | 2010-09-28 | 2023-04-18 | Amazon Technologies, Inc. | Point of presence management in request routing |
US9106701B2 (en) | 2010-09-28 | 2015-08-11 | Amazon Technologies, Inc. | Request routing management based on network components |
US8938526B1 (en) | 2010-09-28 | 2015-01-20 | Amazon Technologies, Inc. | Request routing management based on network components |
US9497259B1 (en) | 2010-09-28 | 2016-11-15 | Amazon Technologies, Inc. | Point of presence management in request routing |
US10931738B2 (en) | 2010-09-28 | 2021-02-23 | Amazon Technologies, Inc. | Point of presence management in request routing |
US9160703B2 (en) | 2010-09-28 | 2015-10-13 | Amazon Technologies, Inc. | Request routing management based on network components |
US10958501B1 (en) * | 2010-09-28 | 2021-03-23 | Amazon Technologies, Inc. | Request routing information based on client IP groupings |
US8676918B2 (en) | 2010-09-28 | 2014-03-18 | Amazon Technologies, Inc. | Point of presence management in request routing |
US11336712B2 (en) | 2010-09-28 | 2022-05-17 | Amazon Technologies, Inc. | Point of presence management in request routing |
US9185012B2 (en) | 2010-09-28 | 2015-11-10 | Amazon Technologies, Inc. | Latency measurement in resource requests |
US11108729B2 (en) | 2010-09-28 | 2021-08-31 | Amazon Technologies, Inc. | Managing request routing information utilizing client identifiers |
US8577992B1 (en) | 2010-09-28 | 2013-11-05 | Amazon Technologies, Inc. | Request routing management based on network components |
US10079742B1 (en) | 2010-09-28 | 2018-09-18 | Amazon Technologies, Inc. | Latency measurement in resource requests |
US10097398B1 (en) | 2010-09-28 | 2018-10-09 | Amazon Technologies, Inc. | Point of presence management in request routing |
US9787775B1 (en) | 2010-09-28 | 2017-10-10 | Amazon Technologies, Inc. | Point of presence management in request routing |
US9253065B2 (en) | 2010-09-28 | 2016-02-02 | Amazon Technologies, Inc. | Latency measurement in resource requests |
US8468247B1 (en) | 2010-09-28 | 2013-06-18 | Amazon Technologies, Inc. | Point of presence management in request routing |
US9794216B2 (en) | 2010-09-28 | 2017-10-17 | Amazon Technologies, Inc. | Request routing in a networked environment |
US9800539B2 (en) | 2010-09-28 | 2017-10-24 | Amazon Technologies, Inc. | Request routing management based on network components |
US9191338B2 (en) | 2010-09-28 | 2015-11-17 | Amazon Technologies, Inc. | Request routing in a networked environment |
US10951725B2 (en) | 2010-11-22 | 2021-03-16 | Amazon Technologies, Inc. | Request routing processing |
US8452874B2 (en) * | 2010-11-22 | 2013-05-28 | Amazon Technologies, Inc. | Request routing processing |
US9003040B2 (en) | 2010-11-22 | 2015-04-07 | Amazon Technologies, Inc. | Request routing processing |
US20120131192A1 (en) * | 2010-11-22 | 2012-05-24 | Maccarthaigh Colm | Request routing processing |
US9930131B2 (en) | 2010-11-22 | 2018-03-27 | Amazon Technologies, Inc. | Request routing processing |
US9391949B1 (en) | 2010-12-03 | 2016-07-12 | Amazon Technologies, Inc. | Request routing processing |
US8626950B1 (en) * | 2010-12-03 | 2014-01-07 | Amazon Technologies, Inc. | Request routing processing |
US8370452B2 (en) | 2010-12-27 | 2013-02-05 | Limelight Networks, Inc. | Partial object caching |
WO2012136945A1 (en) * | 2011-04-08 | 2012-10-11 | France Telecom | Technique for communication between networks for distributing digital contents |
FR2973978A1 (en) * | 2011-04-08 | 2012-10-12 | France Telecom | METHOD OF COMMUNICATION BETWEEN DIGITAL CONTENT DISTRIBUTION NETWORKS |
US20140108609A1 (en) * | 2011-04-08 | 2014-04-17 | Orange | Technique for communication between networks for distributing digital contents |
US9560135B2 (en) * | 2011-04-08 | 2017-01-31 | Orange | Technique for communication between networks for distributing digital contents |
US11604667B2 (en) | 2011-04-27 | 2023-03-14 | Amazon Technologies, Inc. | Optimized deployment based upon customer locality |
US20120311076A1 (en) * | 2011-05-31 | 2012-12-06 | Cisco Technology, Inc. | System and method to support different uniform resource locator formats for content on different network elements |
US20120327931A1 (en) * | 2011-06-21 | 2012-12-27 | Alcatel-Lucent Usa Inc. | Gateways integrating name-based networks with host-based networks |
US9037680B2 (en) | 2011-06-29 | 2015-05-19 | Instart Logic, Inc. | Application acceleration |
US9258761B2 (en) | 2011-06-30 | 2016-02-09 | Orange | Obtaining, by a terminal, of information relating to access to a service |
WO2013001230A1 (en) | 2011-06-30 | 2013-01-03 | France Telecom | The obtaining, by a terminal, of information relating to access to a service |
US8943170B2 (en) * | 2011-07-08 | 2015-01-27 | Ming Li | Content delivery network aggregation with selected content delivery |
US8244915B1 (en) | 2011-08-16 | 2012-08-14 | Edgecast Networks, Inc. | Systems and methods to uniquely identify assets in a federation |
US8683043B1 (en) | 2011-08-16 | 2014-03-25 | Edgecast Networks, Inc. | Systems and methods to uniquely identify assets in a federation |
US8166108B1 (en) | 2011-08-16 | 2012-04-24 | Edgecast Networks, Inc. | Systems and methods to uniquely identify assets in a federation |
US9521214B2 (en) | 2011-09-20 | 2016-12-13 | Instart Logic, Inc. | Application acceleration with partial file caching |
WO2013043305A1 (en) * | 2011-09-20 | 2013-03-28 | Instart Logic, Inc. | Application acceleration with partial file caching |
JP2015501095A (en) * | 2011-10-13 | 2015-01-08 | インターデイジタル パテント ホールディングス インコーポレイテッド | Method and apparatus for realizing interfacing between content networks |
US9130991B2 (en) | 2011-10-14 | 2015-09-08 | Silver Peak Systems, Inc. | Processing data packets in performance enhancing proxy (PEP) environment |
US9906630B2 (en) | 2011-10-14 | 2018-02-27 | Silver Peak Systems, Inc. | Processing data packets in performance enhancing proxy (PEP) environment |
US20130111063A1 (en) * | 2011-11-01 | 2013-05-02 | Electronics And Telecommunications Research Institute | Routing method in content-centric network |
US9626224B2 (en) | 2011-11-03 | 2017-04-18 | Silver Peak Systems, Inc. | Optimizing available computing resources within a virtual environment |
US9451045B2 (en) | 2011-12-14 | 2016-09-20 | Level 3 Communications, Llc | Content delivery network |
US11838385B2 (en) | 2011-12-14 | 2023-12-05 | Level 3 Communications, Llc | Control in a content delivery network |
US11218566B2 (en) | 2011-12-14 | 2022-01-04 | Level 3 Communications, Llc | Control in a content delivery network |
CN104011701A (en) * | 2011-12-14 | 2014-08-27 | 第三雷沃通讯有限责任公司 | Content delivery network |
US9516136B2 (en) | 2011-12-14 | 2016-12-06 | Level 3 Communications, Llc | Customer-specific request-response processing in a content delivery network |
US10841398B2 (en) | 2011-12-14 | 2020-11-17 | Level 3 Communications, Llc | Control in a content delivery network |
WO2013090699A1 (en) * | 2011-12-14 | 2013-06-20 | Level 3 Communications, Llc | Content delivery network |
US20140372588A1 (en) | 2011-12-14 | 2014-12-18 | Level 3 Communications, Llc | Request-Response Processing in a Content Delivery Network |
US9456053B2 (en) | 2011-12-14 | 2016-09-27 | Level 3 Communications, Llc | Content delivery network |
US10187491B2 (en) | 2011-12-14 | 2019-01-22 | Level 3 Communications, Llc | Request-response processing an a content delivery network |
US10951488B2 (en) | 2011-12-27 | 2021-03-16 | Netapp, Inc. | Rule-based performance class access management for storage cluster performance guarantees |
US10911328B2 (en) | 2011-12-27 | 2021-02-02 | Netapp, Inc. | Quality of service policy based load adaption |
US11212196B2 (en) | 2011-12-27 | 2021-12-28 | Netapp, Inc. | Proportional quality of service based on client impact on an overload condition |
US9444884B2 (en) | 2011-12-31 | 2016-09-13 | Level 3 Communications, Llc | Load-aware load-balancing cluster without a central load balancer |
US9628554B2 (en) | 2012-02-10 | 2017-04-18 | Amazon Technologies, Inc. | Dynamic content delivery |
US8291117B1 (en) | 2012-02-15 | 2012-10-16 | Limelight Networks, Inc. | Scaled domain name service |
US10021179B1 (en) | 2012-02-21 | 2018-07-10 | Amazon Technologies, Inc. | Local resource delivery network |
US8904014B2 (en) | 2012-03-15 | 2014-12-02 | International Business Machines Corporation | Content delivery mechanisms for multicast communication |
US20130246577A1 (en) * | 2012-03-15 | 2013-09-19 | International Business Machines Corporation | Connection management and optimization for services delivered over networks |
US8825811B2 (en) * | 2012-03-15 | 2014-09-02 | International Business Machines Corporation | Connection management and optimization for services delivered over networks |
US9083743B1 (en) | 2012-03-21 | 2015-07-14 | Amazon Technologies, Inc. | Managing request routing information utilizing performance information |
US9172674B1 (en) | 2012-03-21 | 2015-10-27 | Amazon Technologies, Inc. | Managing request routing information utilizing performance information |
US9307044B2 (en) * | 2012-03-28 | 2016-04-05 | At&T Intellectual Property I, L.P. | System and method for routing content based on real-time feedback |
US20160164997A1 (en) * | 2012-03-28 | 2016-06-09 | At&T Intellectual Property I, L.P. | System And Method For Routing Content Based On Real-Time Feedback |
US20130262697A1 (en) * | 2012-03-28 | 2013-10-03 | At&T Intellectual Property I, L.P. | System and Method for Routing Content Based on Real-Time Feedback |
US10154111B2 (en) * | 2012-03-28 | 2018-12-11 | At&T Intellectual Property I, L.P. | System and method for routing content based on real-time feedback |
US10623408B1 (en) | 2012-04-02 | 2020-04-14 | Amazon Technologies, Inc. | Context sensitive object management |
US10225362B2 (en) | 2012-06-11 | 2019-03-05 | Amazon Technologies, Inc. | Processing DNS queries to identify pre-processing information |
US11729294B2 (en) | 2012-06-11 | 2023-08-15 | Amazon Technologies, Inc. | Processing DNS queries to identify pre-processing information |
US11303717B2 (en) | 2012-06-11 | 2022-04-12 | Amazon Technologies, Inc. | Processing DNS queries to identify pre-processing information |
US9154551B1 (en) | 2012-06-11 | 2015-10-06 | Amazon Technologies, Inc. | Processing DNS queries to identify pre-processing information |
US20140006480A1 (en) * | 2012-06-29 | 2014-01-02 | Vmware, Inc. | Dynamic resolution of servers in a distributed environment |
US10057377B2 (en) * | 2012-06-29 | 2018-08-21 | Vmware, Inc. | Dynamic resolution of servers in a distributed environment |
US9525659B1 (en) | 2012-09-04 | 2016-12-20 | Amazon Technologies, Inc. | Request routing utilizing point of presence load information |
US10542079B2 (en) | 2012-09-20 | 2020-01-21 | Amazon Technologies, Inc. | Automated profiling of resource usage |
US10015241B2 (en) | 2012-09-20 | 2018-07-03 | Amazon Technologies, Inc. | Automated profiling of resource usage |
US9135048B2 (en) | 2012-09-20 | 2015-09-15 | Amazon Technologies, Inc. | Automated profiling of resource usage |
US9323577B2 (en) | 2012-09-20 | 2016-04-26 | Amazon Technologies, Inc. | Automated profiling of resource usage |
US9331977B2 (en) * | 2012-09-27 | 2016-05-03 | Ringcentral, Inc. | High availability for cloud-based services |
US8606938B1 (en) * | 2012-09-27 | 2013-12-10 | Ringcentral, Inc. | High availability for cloud-based services |
US20140089488A1 (en) * | 2012-09-27 | 2014-03-27 | Ringcentral, Inc. | High availability for cloud-based services |
US9026636B2 (en) * | 2012-09-27 | 2015-05-05 | Ringcentral, Inc. | High availability for cloud-based services |
US20150215269A1 (en) * | 2012-09-27 | 2015-07-30 | Ringcentral, Inc. | High availability for cloud-based services |
US10841177B2 (en) | 2012-12-13 | 2020-11-17 | Level 3 Communications, Llc | Content delivery framework having autonomous CDN partitioned into multiple virtual CDNs to implement CDN interconnection, delegation, and federation |
US10992547B2 (en) | 2012-12-13 | 2021-04-27 | Level 3 Communications, Llc | Rendezvous systems, methods, and devices |
US9705754B2 (en) * | 2012-12-13 | 2017-07-11 | Level 3 Communications, Llc | Devices and methods supporting content delivery with rendezvous services |
US10135697B2 (en) | 2012-12-13 | 2018-11-20 | Level 3 Communications, Llc | Multi-level peering in a content delivery framework |
US9667506B2 (en) | 2012-12-13 | 2017-05-30 | Level 3 Communications, Llc | Multi-level peering in a content delivery framework |
US9660876B2 (en) | 2012-12-13 | 2017-05-23 | Level 3 Communications, Llc | Collector mechanisms in a content delivery network |
US9634905B2 (en) | 2012-12-13 | 2017-04-25 | Level 3 Communications, Llc | Invalidation systems, methods, and devices |
US9660874B2 (en) | 2012-12-13 | 2017-05-23 | Level 3 Communications, Llc | Devices and methods supporting content delivery with delivery services having dynamically configurable log information |
US9661046B2 (en) | 2012-12-13 | 2017-05-23 | Level 3 Communications, Llc | Devices and methods supporting content delivery with adaptation services |
US9722884B2 (en) | 2012-12-13 | 2017-08-01 | Level 3 Communications, Llc | Event stream collector systems, methods, and devices |
US9722882B2 (en) | 2012-12-13 | 2017-08-01 | Level 3 Communications, Llc | Devices and methods supporting content delivery with adaptation services with provisioning |
US9634906B2 (en) | 2012-12-13 | 2017-04-25 | Level 3 Communications, Llc | Devices and methods supporting content delivery with adaptation services with feedback |
US9722883B2 (en) | 2012-12-13 | 2017-08-01 | Level 3 Communications, Llc | Responsibility-based peering |
US9660875B2 (en) | 2012-12-13 | 2017-05-23 | Level 3 Communications, Llc | Devices and methods supporting content delivery with rendezvous services having dynamically configurable log information |
US9634918B2 (en) | 2012-12-13 | 2017-04-25 | Level 3 Communications, Llc | Invalidation sequencing in a content delivery framework |
US9749191B2 (en) * | 2012-12-13 | 2017-08-29 | Level 3 Communications, Llc | Layered request processing with redirection and delegation in a content delivery network (CDN) |
US9749190B2 (en) | 2012-12-13 | 2017-08-29 | Level 3 Communications, Llc | Maintaining invalidation information |
US11368548B2 (en) | 2012-12-13 | 2022-06-21 | Level 3 Communications, Llc | Beacon services in a content delivery framework |
US9749192B2 (en) | 2012-12-13 | 2017-08-29 | Level 3 Communications, Llc | Dynamic topology transitions in a content delivery framework |
US9755914B2 (en) | 2012-12-13 | 2017-09-05 | Level 3 Communications, Llc | Request processing in a content delivery network |
US9654353B2 (en) | 2012-12-13 | 2017-05-16 | Level 3 Communications, Llc | Framework supporting content delivery with rendezvous services network |
US9654356B2 (en) | 2012-12-13 | 2017-05-16 | Level 3 Communications, Llc | Devices and methods supporting content delivery with adaptation services |
US9628346B2 (en) * | 2012-12-13 | 2017-04-18 | Level 3 Communications, Llc | Devices and methods supporting content delivery with reducer services |
US9787551B2 (en) | 2012-12-13 | 2017-10-10 | Level 3 Communications, Llc | Responsibility-based request processing |
US9654355B2 (en) | 2012-12-13 | 2017-05-16 | Level 3 Communications, Llc | Framework supporting content delivery with adaptation services |
US8825830B2 (en) | 2012-12-13 | 2014-09-02 | Level 3 Communications, Llc | Content delivery framework with dynamic service network topology |
US9654354B2 (en) | 2012-12-13 | 2017-05-16 | Level 3 Communications, Llc | Framework supporting content delivery with delivery services network |
US9647899B2 (en) | 2012-12-13 | 2017-05-09 | Level 3 Communications, Llc | Framework supporting content delivery with content delivery services |
US10142191B2 (en) | 2012-12-13 | 2018-11-27 | Level 3 Communications, Llc | Content delivery framework with autonomous CDN partitioned into multiple virtual CDNs |
US9628342B2 (en) | 2012-12-13 | 2017-04-18 | Level 3 Communications, Llc | Content delivery framework |
US9819554B2 (en) | 2012-12-13 | 2017-11-14 | Level 3 Communications, Llc | Invalidation in a content delivery framework |
US11121936B2 (en) | 2012-12-13 | 2021-09-14 | Level 3 Communications, Llc | Rendezvous optimization in a content delivery framework |
US9647901B2 (en) | 2012-12-13 | 2017-05-09 | Level 3 Communications, Llc | Configuring a content delivery network (CDN) |
US10742521B2 (en) | 2012-12-13 | 2020-08-11 | Level 3 Communications, Llc | Configuration and control in content delivery framework |
US9847917B2 (en) | 2012-12-13 | 2017-12-19 | Level 3 Communications, Llc | Devices and methods supporting content delivery with adaptation services with feedback |
US9686148B2 (en) | 2012-12-13 | 2017-06-20 | Level 3 Communications, Llc | Responsibility-based cache peering |
US9647900B2 (en) | 2012-12-13 | 2017-05-09 | Level 3 Communications, Llc | Devices and methods supporting content delivery with delivery services |
US9628345B2 (en) | 2012-12-13 | 2017-04-18 | Level 3 Communications, Llc | Framework supporting content delivery with collector services network |
US9641401B2 (en) | 2012-12-13 | 2017-05-02 | Level 3 Communications, Llc | Framework supporting content delivery with content delivery services |
US10931541B2 (en) | 2012-12-13 | 2021-02-23 | Level 3 Communications, Llc | Devices and methods supporting content delivery with dynamically configurable log information |
US9628347B2 (en) | 2012-12-13 | 2017-04-18 | Level 3 Communications, Llc | Layered request processing in a content delivery network (CDN) |
US9887885B2 (en) | 2012-12-13 | 2018-02-06 | Level 3 Communications, Llc | Dynamic fill target selection in a content delivery framework |
US9628343B2 (en) | 2012-12-13 | 2017-04-18 | Level 3 Communications, Llc | Content delivery framework with dynamic service network topologies |
US9641402B2 (en) | 2012-12-13 | 2017-05-02 | Level 3 Communications, Llc | Configuring a content delivery network (CDN) |
US9634904B2 (en) | 2012-12-13 | 2017-04-25 | Level 3 Communications, Llc | Framework supporting content delivery with hybrid content delivery services |
US10608894B2 (en) | 2012-12-13 | 2020-03-31 | Level 3 Communications, Llc | Systems, methods, and devices for gradual invalidation of resources |
US9634907B2 (en) | 2012-12-13 | 2017-04-25 | Level 3 Communications, Llc | Devices and methods supporting content delivery with adaptation services with feedback |
US10701148B2 (en) | 2012-12-13 | 2020-06-30 | Level 3 Communications, Llc | Content delivery framework having storage services |
US10862769B2 (en) | 2012-12-13 | 2020-12-08 | Level 3 Communications, Llc | Collector mechanisms in a content delivery network |
US9628344B2 (en) | 2012-12-13 | 2017-04-18 | Level 3 Communications, Llc | Framework supporting content delivery with reducer services network |
US20140173047A1 (en) * | 2012-12-13 | 2014-06-19 | Level 3 Communications, Llc | Devices And Methods Supporting Content Delivery With Rendezvous Services |
US10826793B2 (en) | 2012-12-13 | 2020-11-03 | Level 3 Communications, Llc | Verification and auditing in a content delivery framework |
US10708145B2 (en) | 2012-12-13 | 2020-07-07 | Level 3 Communications, Llc | Devices and methods supporting content delivery with adaptation services with feedback from health service |
US10652087B2 (en) | 2012-12-13 | 2020-05-12 | Level 3 Communications, Llc | Content delivery framework having fill services |
US20140173048A1 (en) * | 2012-12-13 | 2014-06-19 | Level 3 Communications, Llc | Devices And Methods Supporting Content Delivery With Reducer Services |
US20140173054A1 (en) * | 2012-12-13 | 2014-06-19 | Level 3 Communications, Llc | Layered request processing with redirection and delegation in a content delivery network (cdn) |
US10791050B2 (en) | 2012-12-13 | 2020-09-29 | Level 3 Communications, Llc | Geographic location determination in a content delivery framework |
US10700945B2 (en) | 2012-12-13 | 2020-06-30 | Level 3 Communications, Llc | Role-specific sub-networks in a content delivery framework |
US10701149B2 (en) | 2012-12-13 | 2020-06-30 | Level 3 Communications, Llc | Content delivery framework having origin services |
US10645056B2 (en) | 2012-12-19 | 2020-05-05 | Amazon Technologies, Inc. | Source-dependent address resolution |
US10205698B1 (en) | 2012-12-19 | 2019-02-12 | Amazon Technologies, Inc. | Source-dependent address resolution |
US20140204945A1 (en) * | 2013-01-18 | 2014-07-24 | Samsung Electronics Co., Ltd. | Method of transmitting data packet from content provider in content-centric network and content provider |
US9794175B2 (en) * | 2013-01-18 | 2017-10-17 | Samsung Electronics Co., Ltd. | Transmitting a data packet in a content-centric network |
US9929959B2 (en) | 2013-06-04 | 2018-03-27 | Amazon Technologies, Inc. | Managing network computing components utilizing request routing |
US10374955B2 (en) | 2013-06-04 | 2019-08-06 | Amazon Technologies, Inc. | Managing network computing components utilizing request routing |
US9294391B1 (en) | 2013-06-04 | 2016-03-22 | Amazon Technologies, Inc. | Managing network computing components utilizing request routing |
US10594804B2 (en) | 2013-07-19 | 2020-03-17 | International Business Machines Corporation | Directory service discovery and/or learning |
US9392079B2 (en) | 2013-07-19 | 2016-07-12 | International Business Machines Corporation | Directory service discovery and/or learning |
US11386120B2 (en) | 2014-02-21 | 2022-07-12 | Netapp, Inc. | Data syncing in a distributed system |
WO2015145079A1 (en) * | 2014-03-28 | 2015-10-01 | Orange | Method for caching a piece of content in a content distribution network |
US10880393B2 (en) | 2014-03-28 | 2020-12-29 | Orange | Method for caching a piece of content in a content distribution network |
FR3019427A1 (en) * | 2014-03-28 | 2015-10-02 | Orange | METHOD OF CALLING A CONTENT IN A CONTENT DISTRIBUTION NETWORK |
US20150341458A1 (en) * | 2014-05-20 | 2015-11-26 | Electronics And Telecommunications Research Institute | Method of adaptively deploying cache positioned at subscriber network, and system therefor |
US9992300B2 (en) * | 2014-05-20 | 2018-06-05 | Electronics And Telecommunications Research Institute | Method of adaptively deploying cache positioned at subscriber network, and system therefor |
US11374845B2 (en) | 2014-07-30 | 2022-06-28 | Hewlett Packard Enterprise Development Lp | Determining a transit appliance for data traffic to a software service |
US9948496B1 (en) | 2014-07-30 | 2018-04-17 | Silver Peak Systems, Inc. | Determining a transit appliance for data traffic to a software service |
US11381493B2 (en) | 2014-07-30 | 2022-07-05 | Hewlett Packard Enterprise Development Lp | Determining a transit appliance for data traffic to a software service |
US10812361B2 (en) | 2014-07-30 | 2020-10-20 | Silver Peak Systems, Inc. | Determining a transit appliance for data traffic to a software service |
US11921827B2 (en) | 2014-09-05 | 2024-03-05 | Hewlett Packard Enterprise Development Lp | Dynamic monitoring and authorization of an optimization device |
US9875344B1 (en) | 2014-09-05 | 2018-01-23 | Silver Peak Systems, Inc. | Dynamic monitoring and authorization of an optimization device |
US11868449B2 (en) | 2014-09-05 | 2024-01-09 | Hewlett Packard Enterprise Development Lp | Dynamic monitoring and authorization of an optimization device |
US10719588B2 (en) | 2014-09-05 | 2020-07-21 | Silver Peak Systems, Inc. | Dynamic monitoring and authorization of an optimization device |
US11954184B2 (en) | 2014-09-05 | 2024-04-09 | Hewlett Packard Enterprise Development Lp | Dynamic monitoring and authorization of an optimization device |
US10885156B2 (en) | 2014-09-05 | 2021-01-05 | Silver Peak Systems, Inc. | Dynamic monitoring and authorization of an optimization device |
EP3213467A4 (en) * | 2014-10-31 | 2018-05-09 | NetApp, Inc. | Multi-tenant networking |
US10530880B2 (en) | 2014-10-31 | 2020-01-07 | Netapp, Inc. | Scalable multiple VLAN multi-tenant networking |
US10033627B1 (en) | 2014-12-18 | 2018-07-24 | Amazon Technologies, Inc. | Routing mode and point-of-presence selection service |
US10097448B1 (en) | 2014-12-18 | 2018-10-09 | Amazon Technologies, Inc. | Routing mode and point-of-presence selection service |
US11863417B2 (en) | 2014-12-18 | 2024-01-02 | Amazon Technologies, Inc. | Routing mode and point-of-presence selection service |
US11381487B2 (en) | 2014-12-18 | 2022-07-05 | Amazon Technologies, Inc. | Routing mode and point-of-presence selection service |
US10728133B2 (en) | 2014-12-18 | 2020-07-28 | Amazon Technologies, Inc. | Routing mode and point-of-presence selection service |
US10091096B1 (en) | 2014-12-18 | 2018-10-02 | Amazon Technologies, Inc. | Routing mode and point-of-presence selection service |
US10225326B1 (en) | 2015-03-23 | 2019-03-05 | Amazon Technologies, Inc. | Point of presence based data uploading |
US11297140B2 (en) | 2015-03-23 | 2022-04-05 | Amazon Technologies, Inc. | Point of presence based data uploading |
US10469355B2 (en) | 2015-03-30 | 2019-11-05 | Amazon Technologies, Inc. | Traffic surge management for points of presence |
US9887932B1 (en) | 2015-03-30 | 2018-02-06 | Amazon Technologies, Inc. | Traffic surge management for points of presence |
US9819567B1 (en) | 2015-03-30 | 2017-11-14 | Amazon Technologies, Inc. | Traffic surge management for points of presence |
US9887931B1 (en) | 2015-03-30 | 2018-02-06 | Amazon Technologies, Inc. | Traffic surge management for points of presence |
US9832141B1 (en) | 2015-05-13 | 2017-11-28 | Amazon Technologies, Inc. | Routing based request correlation |
US11461402B2 (en) | 2015-05-13 | 2022-10-04 | Amazon Technologies, Inc. | Routing based request correlation |
US10180993B2 (en) | 2015-05-13 | 2019-01-15 | Amazon Technologies, Inc. | Routing based request correlation |
US10691752B2 (en) | 2015-05-13 | 2020-06-23 | Amazon Technologies, Inc. | Routing based request correlation |
US10616179B1 (en) | 2015-06-25 | 2020-04-07 | Amazon Technologies, Inc. | Selective routing of domain name system (DNS) requests |
US10097566B1 (en) | 2015-07-31 | 2018-10-09 | Amazon Technologies, Inc. | Identifying targets of network attacks |
US9774619B1 (en) | 2015-09-24 | 2017-09-26 | Amazon Technologies, Inc. | Mitigating network attacks |
US10200402B2 (en) | 2015-09-24 | 2019-02-05 | Amazon Technologies, Inc. | Mitigating network attacks |
US9742795B1 (en) | 2015-09-24 | 2017-08-22 | Amazon Technologies, Inc. | Mitigating network attacks |
US9794281B1 (en) | 2015-09-24 | 2017-10-17 | Amazon Technologies, Inc. | Identifying sources of network attacks |
US10270878B1 (en) | 2015-11-10 | 2019-04-23 | Amazon Technologies, Inc. | Routing for origin-facing points of presence |
US11134134B2 (en) | 2015-11-10 | 2021-09-28 | Amazon Technologies, Inc. | Routing for origin-facing points of presence |
US10257307B1 (en) | 2015-12-11 | 2019-04-09 | Amazon Technologies, Inc. | Reserved cache space in content delivery networks |
US10049051B1 (en) | 2015-12-11 | 2018-08-14 | Amazon Technologies, Inc. | Reserved cache space in content delivery networks |
US10348639B2 (en) | 2015-12-18 | 2019-07-09 | Amazon Technologies, Inc. | Use of virtual endpoints to improve data transmission rates |
US11336553B2 (en) | 2015-12-28 | 2022-05-17 | Hewlett Packard Enterprise Development Lp | Dynamic monitoring and visualization for network health characteristics of network device pairs |
US10164861B2 (en) | 2015-12-28 | 2018-12-25 | Silver Peak Systems, Inc. | Dynamic monitoring and visualization for network health characteristics |
US10771370B2 (en) | 2015-12-28 | 2020-09-08 | Silver Peak Systems, Inc. | Dynamic monitoring and visualization for network health characteristics |
US9749381B1 (en) | 2016-04-11 | 2017-08-29 | Level 3 Communications, Llc | Invalidation in a content delivery network (CDN) |
US9591047B1 (en) | 2016-04-11 | 2017-03-07 | Level 3 Communications, Llc | Invalidation in a content delivery network (CDN) |
US10929022B2 (en) | 2016-04-25 | 2021-02-23 | Netapp. Inc. | Space savings reporting for storage system supporting snapshot and clones |
US10666756B2 (en) | 2016-06-06 | 2020-05-26 | Amazon Technologies, Inc. | Request management for hierarchical cache |
US11463550B2 (en) | 2016-06-06 | 2022-10-04 | Amazon Technologies, Inc. | Request management for hierarchical cache |
US10075551B1 (en) | 2016-06-06 | 2018-09-11 | Amazon Technologies, Inc. | Request management for hierarchical cache |
US11757740B2 (en) | 2016-06-13 | 2023-09-12 | Hewlett Packard Enterprise Development Lp | Aggregation of select network traffic statistics |
US10432484B2 (en) | 2016-06-13 | 2019-10-01 | Silver Peak Systems, Inc. | Aggregating select network traffic statistics |
US11757739B2 (en) | 2016-06-13 | 2023-09-12 | Hewlett Packard Enterprise Development Lp | Aggregation of select network traffic statistics |
US11601351B2 (en) | 2016-06-13 | 2023-03-07 | Hewlett Packard Enterprise Development Lp | Aggregation of select network traffic statistics |
US10110694B1 (en) | 2016-06-29 | 2018-10-23 | Amazon Technologies, Inc. | Adaptive transfer rate for retrieving content from a server |
US11457088B2 (en) | 2016-06-29 | 2022-09-27 | Amazon Technologies, Inc. | Adaptive transfer rate for retrieving content from a server |
US11424857B2 (en) | 2016-08-19 | 2022-08-23 | Hewlett Packard Enterprise Development Lp | Forward packet recovery with constrained network overhead |
US9967056B1 (en) | 2016-08-19 | 2018-05-08 | Silver Peak Systems, Inc. | Forward packet recovery with constrained overhead |
US10326551B2 (en) | 2016-08-19 | 2019-06-18 | Silver Peak Systems, Inc. | Forward packet recovery with constrained network overhead |
US10848268B2 (en) | 2016-08-19 | 2020-11-24 | Silver Peak Systems, Inc. | Forward packet recovery with constrained network overhead |
US9992086B1 (en) | 2016-08-23 | 2018-06-05 | Amazon Technologies, Inc. | External health checking of virtual private cloud network environments |
US10516590B2 (en) | 2016-08-23 | 2019-12-24 | Amazon Technologies, Inc. | External health checking of virtual private cloud network environments |
US10469442B2 (en) | 2016-08-24 | 2019-11-05 | Amazon Technologies, Inc. | Adaptive resolution of domain name requests in virtual private cloud network environments |
US10033691B1 (en) | 2016-08-24 | 2018-07-24 | Amazon Technologies, Inc. | Adaptive resolution of domain name requests in virtual private cloud network environments |
US11886363B2 (en) | 2016-09-20 | 2024-01-30 | Netapp, Inc. | Quality of service policy sets |
US10997098B2 (en) | 2016-09-20 | 2021-05-04 | Netapp, Inc. | Quality of service policy sets |
US11327910B2 (en) | 2016-09-20 | 2022-05-10 | Netapp, Inc. | Quality of service policy sets |
US10469513B2 (en) | 2016-10-05 | 2019-11-05 | Amazon Technologies, Inc. | Encrypted network addresses |
US10505961B2 (en) | 2016-10-05 | 2019-12-10 | Amazon Technologies, Inc. | Digitally signed network address |
US11330008B2 (en) | 2016-10-05 | 2022-05-10 | Amazon Technologies, Inc. | Network addresses with encoded DNS-level information |
US10616250B2 (en) | 2016-10-05 | 2020-04-07 | Amazon Technologies, Inc. | Network addresses with encoded DNS-level information |
US10372499B1 (en) | 2016-12-27 | 2019-08-06 | Amazon Technologies, Inc. | Efficient region selection system for executing request-driven code |
US10831549B1 (en) | 2016-12-27 | 2020-11-10 | Amazon Technologies, Inc. | Multi-region request-driven code execution system |
US11762703B2 (en) | 2016-12-27 | 2023-09-19 | Amazon Technologies, Inc. | Multi-region request-driven code execution system |
US10938884B1 (en) | 2017-01-30 | 2021-03-02 | Amazon Technologies, Inc. | Origin server cloaking using virtual private cloud network environments |
US11044202B2 (en) | 2017-02-06 | 2021-06-22 | Silver Peak Systems, Inc. | Multi-level learning for predicting and classifying traffic flows from first packet data |
US11582157B2 (en) | 2017-02-06 | 2023-02-14 | Hewlett Packard Enterprise Development Lp | Multi-level learning for classifying traffic flows on a first packet from DNS response data |
US10892978B2 (en) | 2017-02-06 | 2021-01-12 | Silver Peak Systems, Inc. | Multi-level learning for classifying traffic flows from first packet data |
US11729090B2 (en) | 2017-02-06 | 2023-08-15 | Hewlett Packard Enterprise Development Lp | Multi-level learning for classifying network traffic flows from first packet data |
US10257082B2 (en) | 2017-02-06 | 2019-04-09 | Silver Peak Systems, Inc. | Multi-level learning for classifying traffic flows |
US10771394B2 (en) | 2017-02-06 | 2020-09-08 | Silver Peak Systems, Inc. | Multi-level learning for classifying traffic flows on a first packet from DNS data |
US10503613B1 (en) | 2017-04-21 | 2019-12-10 | Amazon Technologies, Inc. | Efficient serving of resources during server unavailability |
US11075987B1 (en) | 2017-06-12 | 2021-07-27 | Amazon Technologies, Inc. | Load estimating content delivery network |
US10447648B2 (en) | 2017-06-19 | 2019-10-15 | Amazon Technologies, Inc. | Assignment of a POP to a DNS resolver based on volume of communications over a link between client devices and the POP |
US11212210B2 (en) | 2017-09-21 | 2021-12-28 | Silver Peak Systems, Inc. | Selective route exporting using source type |
US11805045B2 (en) | 2017-09-21 | 2023-10-31 | Hewlett Packard Enterprise Development Lp | Selective routing |
US11290418B2 (en) | 2017-09-25 | 2022-03-29 | Amazon Technologies, Inc. | Hybrid content request routing system |
US10592578B1 (en) | 2018-03-07 | 2020-03-17 | Amazon Technologies, Inc. | Predictive content push-enabled content delivery network |
US10637721B2 (en) | 2018-03-12 | 2020-04-28 | Silver Peak Systems, Inc. | Detecting path break conditions while minimizing network overhead |
US11405265B2 (en) | 2018-03-12 | 2022-08-02 | Hewlett Packard Enterprise Development Lp | Methods and systems for detecting path break conditions while minimizing network overhead |
US10887159B2 (en) | 2018-03-12 | 2021-01-05 | Silver Peak Systems, Inc. | Methods and systems for detecting path break conditions while minimizing network overhead |
US10554701B1 (en) | 2018-04-09 | 2020-02-04 | Amazon Technologies, Inc. | Real-time call tracing in a service-oriented system |
US11362986B2 (en) | 2018-11-16 | 2022-06-14 | Amazon Technologies, Inc. | Resolution of domain name requests in heterogeneous network environments |
US10862852B1 (en) | 2018-11-16 | 2020-12-08 | Amazon Technologies, Inc. | Resolution of domain name requests in heterogeneous network environments |
US11025747B1 (en) | 2018-12-12 | 2021-06-01 | Amazon Technologies, Inc. | Content request pattern-based routing system |
CN111191156A (en) * | 2019-12-20 | 2020-05-22 | 中移（杭州）信息技术有限公司 | Network request resource scheduling method and device and computer readable storage medium |
Also Published As
Publication number | Publication date |
---|---|
EP2320619A1 (en) | 2011-05-11 |
DE60036021D1 (en) | 2007-09-27 |
DE60036021T2 (en) | 2008-05-08 |
US6785704B1 (en) | 2004-08-31 |
EP2838240A1 (en) | 2015-02-18 |
EP1250785A2 (en) | 2002-10-23 |
WO2001052497A2 (en) | 2001-07-19 |
EP1865684B1 (en) | 2011-09-28 |
AU2282701A (en) | 2001-07-24 |
EP1865684A1 (en) | 2007-12-12 |
US7734730B2 (en) | 2010-06-08 |
EP2320619B1 (en) | 2014-10-01 |
EP2838240B1 (en) | 2020-08-12 |
WO2001052497A3 (en) | 2002-01-24 |
EP1250785B1 (en) | 2007-08-15 |
WO2001052497A9 (en) | 2002-05-16 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7734730B2 (en) | Content distribution system for operation over an internetwork including content peering arrangements | |
US6415323B1 (en) | Proximity-based redirection system for robust and scalable service-node location in an internetwork | |
Bartolini et al. | A walk through content delivery networks | |
US8660115B2 (en) | Method for content-aware redirection and content renaming | |
US7185052B2 (en) | Meta content delivery network system | |
US8429221B2 (en) | Content request routing method | |
US6944676B1 (en) | Information dissemination system and method with central and distributed caches | |
US9021112B2 (en) | Content request routing and load balancing for content distribution networks | |
EP1252575B1 (en) | A system and method for rewriting a media resource request and/or response between origin server and client | |
US7373394B1 (en) | Method and apparatus for multicast cloud with integrated multicast and unicast channel routing in a content distribution network | |
US9203921B2 (en) | Operation of a content distribution network | |
Barakabitze et al. | A survey on naming, name resolution and data routing in information centric networking (ICN) |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: YAHOO! INC.,CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:FASTFORWARD NETWORKS, INC.;REEL/FRAME:018015/0494Effective date: 20060502Owner name: YAHOO! INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:FASTFORWARD NETWORKS, INC.;REEL/FRAME:018015/0494Effective date: 20060502 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:YAHOO! INC.;REEL/FRAME:033868/0257Effective date: 20140630 |
|
AS | Assignment |
Owner name: FASTFORWARD NETWORKS, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MCCANNE, STEVEN;REEL/FRAME:034223/0951Effective date: 20000905 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552)Year of fee payment: 8 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 12TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1553); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 12 |